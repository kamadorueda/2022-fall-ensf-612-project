{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9734",
  "author": "asrosent",
  "body": "Hey guys,\r\nIn my product team we created a custom powershell-based shell in as a way to controll our cloud service.\r\nWe did this based on the ConsoleShell object and customised RunspaceConfiguration.\r\n\r\nAs a part of moving to .Net Core we started examing the posibillity of moving our shell to powershell core but as we all know RunspaceConfiguration does not exist in the core version and there is no way to pass InitialSessionState to the ConsoleShell.Start() method.\r\n\r\nif we could pass a initialSessionState to the Start method that would be great!\r\n\r\nThanks,\r\nAsaf.\r\n",
  "closed_at": "2020-01-13T23:58:03Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please comment the scenario and feature request? What is recommended way to create custom PowerShell console shell?",
      "created_at": "2019-05-27T03:45:27Z",
      "updated_at": "2019-05-27T03:45:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that when we removed RunspaceConfiguration, we should have added back an overload to accept InitialSessionState. cc @JamesWTruher ",
      "created_at": "2019-05-29T19:42:47Z",
      "updated_at": "2019-05-29T19:43:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #9802, which has now been successfully released as `v7.0.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:21Z",
      "updated_at": "2019-07-17T20:56:21Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@asrosent @SteveL-MSFT is `ConsoleShell` class included in `Microsoft.PowerShell.SDK` nuget package? I seem to have hard time finding it with version 6.2.3",
      "created_at": "2019-10-22T18:39:31Z",
      "updated_at": "2019-10-22T18:39:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "As noted above by the bot, the change was made available in `v7.0.0-preview.2` -- I expect a new SDK package will be published when `7.0.0` gets a GA release (which if I recall correctly may be sometime in December/January?)\r\n\r\nDon't think the PS team tend to publish preview SDKs, historically speaking. \ud83d\ude42 ",
      "created_at": "2019-10-22T18:43:28Z",
      "updated_at": "2019-10-22T18:43:28Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "Thanks @vexx32 for pointing that out, the related PR adds back taking `InitialSessionState` as parameter, but what I'm experiencing is I couldn't even find the `ConsoleShell` class. But before the PR, the class still exists publicly, so I was thinking if I'm looking at the wrong package...",
      "created_at": "2019-10-22T18:48:29Z",
      "updated_at": "2019-10-22T18:48:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, that's a good point, my apologies! Not sure... have to defer to @SteveL-MSFT on that point. \ud83d\ude42 ",
      "created_at": "2019-10-22T18:56:13Z",
      "updated_at": "2019-10-22T18:56:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The `Microsoft.PowerShell.ConsoleShell` class has always been there.  The only change was to add back an overload:\r\n\r\n```powershell\r\nPS> [Microsoft.PowerShell.ConsoleShell]::Start\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic int Start(string bannerText, string helpText, string[] args)\r\nstatic int Start(initialsessionstate initialSessionState, string bannerText, string helpText, string[] args)\r\n```\r\n",
      "created_at": "2019-10-22T20:49:57Z",
      "updated_at": "2019-10-22T20:49:57Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@SteveL-MSFT that's what I thought, but I couldn't find it in PowerShell Core:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/?view=pscore-6.2.0&term=ConsoleShell\r\nIs it part of the `Microsoft.PowerShell.Sdk` package?\r\nhttps://www.nuget.org/packages/Microsoft.PowerShell.SDK/",
      "created_at": "2019-10-22T20:54:19Z",
      "updated_at": "2019-10-22T20:55:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.consoleshell?view=powershellsdk-1.1.0\r\n\r\nNot sure why it's missing from that API browser thought... weird. Pretty sure it should be in the SDK? Might be a docs issue, potentially.\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.consoleshell\">ConsoleShell Class (Microsoft.PowerShell)</a></strong></div><div>This class provides an entry point which is called by minishell's main to transfer control to Msh console host implementation. </div></blockquote>",
      "created_at": "2019-10-22T20:56:12Z",
      "updated_at": "2019-10-22T20:57:07Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@vexx32 you referred to Windows PowerShell while I'm seeking it in PowerShell Core \ud83d\ude03 ",
      "created_at": "2019-10-22T20:58:32Z",
      "updated_at": "2019-10-22T20:58:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm wondering if the API docs aren't entirely up to date. If the PS Core SDK includes the referenced DLL (Microsoft.PowerShell.ConsoleHost.dll) then ConsoleShell should be available.",
      "created_at": "2019-10-22T21:02:22Z",
      "updated_at": "2019-10-22T21:02:30Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "OK, I think I may get the reason, `Microsoft.PowerShell.ConsoleHost.dll` is **not** included in `Microsoft.PowerShell.SDK`, instead it's part of another package `Microsoft.PowerShell.ConsoleHost` \ud83d\ude03 ",
      "created_at": "2019-10-22T21:26:07Z",
      "updated_at": "2019-10-22T21:26:07Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "The nuget package contains `Microsoft.PowerShell.ConsoleHost.dll` in runtimes for different platforms. @SteveL-MSFT this may sound silly, but how do I reference the class `ConsoleShell` in my C# codes?",
      "created_at": "2019-10-22T21:55:51Z",
      "updated_at": "2019-10-22T21:55:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There might be a problem with the nupkg for ConsoleHost.dll.  I tried a simple app and had to directly ref the assembly to get it to work, but still got this warning:\r\n\r\n```none\r\nPS> dotnet publish --runtime osx-x64\r\nMicrosoft (R) Build Engine version 16.4.0-preview-19502-03+3af680463 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 1.06 sec for /Users/steve/test/consoleshell/consoleshell.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\nCSC : warning CS8012: Referenced assembly 'Microsoft.PowerShell.ConsoleHost, Version=6.2.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' targets a different processor. [/Users/steve/test/consoleshell/consoleshell.csproj]\r\n  consoleshell -> /Users/steve/test/consoleshell/bin/Debug/netcoreapp2.1/osx-x64/consoleshell.dll\r\n  consoleshell -> /Users/steve/test/consoleshell/bin/Debug/netcoreapp2.1/osx-x64/publish/\r\n```\r\n\r\nFor now, to get unblocked, try referencing the assembly directly:\r\n\r\n```xml\r\n    <Reference Include=\"Microsoft.PowerShell.ConsoleHost\">\r\n      <HintPath>/Users/steve/.nuget/packages/microsoft.powershell.consolehost/6.2.3/runtimes/osx/lib/netcoreapp2.1/Microsoft.PowerShell.ConsoleHost.dll</HintPath>\r\n    </Reference>\r\n```\r\n\r\ncc @adityapatwardhan ",
      "created_at": "2019-10-22T22:41:50Z",
      "updated_at": "2019-10-22T22:41:50Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@SteveL-MSFT using your work-around I could get assembly reference in place, however, when the shell starts, I'm seeing following error:\r\n\r\n`The shell cannot be started. A failure occurred during initialization:\r\nObject reference not set to an instance of an object.`\r\n\r\nThe issue is reproducible with `Microsoft.PowerShell.SDK` version `6.2.3` targeting `netcoreapp2.1`\r\n```\r\nusing Microsoft.PowerShell;\r\n\r\nnamespace PSCore\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            ConsoleShell.Start(\"Hello\", \"\", new string[0] { });\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.2.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.PowerShell.ConsoleHost\">\r\n      <!-- NETCORE workaround for GitHub issue https://github.com/PowerShell/PowerShell/issues/9734 -->\r\n      <HintPath>$(NuGetPackageRoot)\\microsoft.powershell.consolehost\\6.2.3\\runtimes\\win-x64\\lib\\netcoreapp2.1\\Microsoft.PowerShell.ConsoleHost.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThe issue seems to be non-existent with version `7.0.0-preview4` forwards. Switching to this version would require us to target `.netcoreapp3.0`. Is there any work around to stay at version 6?",
      "created_at": "2019-10-25T14:59:14Z",
      "updated_at": "2019-10-25T14:59:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, it seems there was a bug in 6.2 that has since been fixed in 7.  I don't see any workaround to stay on 6.  We are planning to GA PS7 in Jan, so it's not too far off.",
      "created_at": "2019-10-25T18:37:31Z",
      "updated_at": "2019-10-25T18:37:31Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@SteveL-MSFT with preview-5, I updated my sample code to\r\n```\r\nusing Microsoft.PowerShell;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            InitialSessionState config = InitialSessionState.CreateDefault();\r\n            config.StartupScripts.Add(\"Get-ChildItem\");\r\n            ConsoleShell.Start(config, \"\", \"\", args);\r\n        }\r\n    }\r\n}\r\n```\r\nIt seems like `StartupScripts` are not executed?",
      "created_at": "2019-11-06T22:02:34Z",
      "updated_at": "2019-11-08T16:45:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@ritchxu `StartupScripts` are executed, but the results are not collected and not displayed. The code that executes it is here:\r\nhttps://github.com/PowerShell/PowerShell/blob/5ad4d2c399317e3b3cca9fbe448c3891ad6c1870/src/System.Management.Automation/engine/InitialSessionState.cs#L2893-L2903",
      "created_at": "2020-01-09T22:59:43Z",
      "updated_at": "2020-01-09T22:59:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Maybe add logging in the code or script block logging already works here?",
      "created_at": "2020-01-10T04:26:56Z",
      "updated_at": "2020-01-10T04:26:56Z"
    },
    {
      "author": "ritchxu",
      "author_association": "NONE",
      "body": "@daxian-dbw here is my proof of concept code. I was expecting current working directory to become `C:\\` once the console shell is started. Did I miss anything?\r\n\r\nProgram.cs:\r\n```\r\nusing Microsoft.PowerShell;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace Test\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            InitialSessionState initialSessionState = InitialSessionState.CreateDefault2();\r\n            initialSessionState.StartupScripts.Add(@\"Set-Location C:\\\");\r\n            ConsoleShell.Start(\"Hello\", \"\", new string[0] { });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTest.csproj\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.0.0-preview.6\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.PowerShell.ConsoleHost\">\r\n      <HintPath>$(NuGetPackageRoot)\\microsoft.powershell.consolehost\\7.0.0-preview.6\\runtimes\\win\\lib\\netcoreapp3.1\\Microsoft.PowerShell.ConsoleHost.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```",
      "created_at": "2020-01-10T19:20:37Z",
      "updated_at": "2020-01-10T19:20:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@ritchxu `initialSessionState.StartupScripts` is for you to run one more more script files (.ps1), not script code directly. Here is the code to process the startup scripts:\r\nhttps://github.com/PowerShell/PowerShell/blob/5ad4d2c399317e3b3cca9fbe448c3891ad6c1870/src/System.Management.Automation/engine/InitialSessionState.cs#L2858-L2876\r\n\r\nThis line `psToInvoke.AddCommand(new Command(startupScript, false, false));` creates a new command by specifying that it's not a script (the first `false` argument).\r\n\r\nThe name of that property is unfortunately vague \ud83d\ude26 The following is an example to use this property:\r\n\r\nProgram.cs:\r\n```c#\r\nusing System;\r\nusing System.Management.Automation.Runspaces;\r\nusing Microsoft.PowerShell;\r\n\r\nnamespace testConsoleRef\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            InitialSessionState config = InitialSessionState.CreateDefault();\r\n            config.ExecutionPolicy = ExecutionPolicy.RemoteSigned;\r\n            config.StartupScripts.Add(@\"E:\\arena\\dotnetApp\\dotnet3\\testConsoleRef\\startup.ps1\");\r\n\r\n            int ret = ConsoleShell.Start(config, \"Hello\", \"\", new string[0]);\r\n            Console.WriteLine(ret);\r\n        }\r\n    }\r\n}\r\n```\r\ntestConsoleRef.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nHere is the results from execute this sample. The `startup.ps1` has `cd f:\\tmp` in it, and the working directory is changed to that after `dotnet run`\r\n```none\r\n[E:\\arena\\dotnetApp\\dotnet3\\testConsoleRef]\r\nPS:22> cat .\\startup.ps1\r\ncd f:\\tmp\r\n[E:\\arena\\dotnetApp\\dotnet3\\testConsoleRef]\r\nPS:23> dotnet run\r\nHello\r\n\r\n[F:\\tmp]\r\nPS:1> $pshome\r\nE:\\arena\\dotnetApp\\dotnet3\\testConsoleRef\\bin\\Debug\\netcoreapp3.1\\runtimes\\win\\lib\\netcoreapp3.1\r\n[F:\\tmp]\r\nPS:2> exit\r\n0\r\n[E:\\arena\\dotnetApp\\dotnet3\\testConsoleRef]\r\nPS:24> \r\n```\r\n",
      "created_at": "2020-01-10T22:32:19Z",
      "updated_at": "2020-01-10T22:34:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could add a command `config.Commands.Add(...)`",
      "created_at": "2020-01-11T07:51:59Z",
      "updated_at": "2020-01-11T07:51:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11545, which has now been successfully released as `v7.0.0-rc.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:36:16Z",
      "updated_at": "2020-01-16T23:36:16Z"
    }
  ],
  "created_at": "2019-05-26T17:24:49Z",
  "number": 9734,
  "state": "closed",
  "title": "Feature Request - Bring back ConsoleShell functionallity",
  "updated_at": "2020-01-16T23:36:17Z"
}