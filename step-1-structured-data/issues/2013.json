{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2013",
  "author": "zhiqiangyudev",
  "body": "**Background:** The \"1\" in \".ps1\" stands for PowerShell 1.0. But as 2.0 is compatible with 1.0, the script file kept using the `.ps1` extension without starting `.ps2`.\n\nToday PowerShell is being brought to Linux and macOS. There will be more and more breaking changes in PowerShell 6.0 and later. (One possible example is removing UNIX alias.) I think it's time to create a mechanism to avoid breaking legacy code when making \"breaking changes\". One way is to re-enable the version number in the `.ps1` extension.\n\nAssume we have PowerShell 6.0 installed. When invoking a script ends with `.ps6`, enable all new \"breaking changes\". But if it's `.ps1`, keep the behavior as the old version (best effort).\n\nWe can avoid breaking changes and keep backwards compatibility for the moment, but we can't do it forever. We should have some mechanisms to keep backwards compatibility when introducing \"breaking changes\" to the new version, so that we will not fear making \"breaking changes\".\n\nOf course file name extension is not the only way to mark the version of a script. We can pick up another way if it's better.\n",
  "closed_at": "2016-09-19T16:14:43Z",
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "Just kidding: Soon you will suffer from 8.3 (short) name compatibility issues. \ud83d\ude02\n",
      "created_at": "2016-08-22T15:05:31Z",
      "updated_at": "2016-08-22T15:05:31Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@GeeLaw That will be one breaking change in PowerShell 10.0 \ud83d\ude06 (Just kidding)\n",
      "created_at": "2016-08-22T15:21:54Z",
      "updated_at": "2016-08-22T15:21:54Z"
    },
    {
      "author": "ebelew",
      "author_association": "NONE",
      "body": "Is this required? Powershell already supports the `#Requires -version X` directive in scripts to set minimum compatible version. [MSDN about_requires](https://technet.microsoft.com/en-us/library/hh847765.aspx)\n",
      "created_at": "2016-08-22T16:04:22Z",
      "updated_at": "2016-08-22T16:04:22Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@ebelew Indeed this has been available since v3 and is already a well known feature that doesn't require additional work or hassle for users/administrators\n",
      "created_at": "2016-08-22T16:10:02Z",
      "updated_at": "2016-08-22T16:10:02Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@ebelew @kilasuit Thank you. But is there a way to set a known maximum compatible version?\n",
      "created_at": "2016-08-22T16:12:57Z",
      "updated_at": "2016-08-22T16:12:57Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "nope - it is minimum version version only\n\nCould you expand on the reason for needing to set a maximum version?\n",
      "created_at": "2016-08-22T16:15:05Z",
      "updated_at": "2016-08-22T16:15:05Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@kilasuit Assume we wrote a script today which uses UNIX alias such as `wget` for `Invoke-WebRequest`, and in some later PowerShell versions, that alias is removed. It will stop working.\nIf PowerShell engine can know which version the script is wrtten for, it may be able to provide compatibility mode for legacy scripts.\n",
      "created_at": "2016-08-22T16:20:34Z",
      "updated_at": "2016-08-22T16:20:34Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Thats simple = dont ever use Aliases in scripts! We even have a rule in the Static analysis engine PSScriptAnalyzer https://github.com/PowerShell/PSScriptAnalyzer warning about this.\n\nPowerShell engine will not run a script in downlevel versions if you were to put in \n\n``` powershell\n#Requires -version 6.0\n```\n",
      "created_at": "2016-08-22T16:36:07Z",
      "updated_at": "2016-08-22T16:36:07Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Aliases are only really intended for interactive use so using them in scripts is really an anti-practice and something that I would seriously recommend against using\n",
      "created_at": "2016-08-22T16:39:05Z",
      "updated_at": "2016-08-22T16:39:05Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@kilasuit I agree with you, but the alias issue is just an example.\nIf we can let PowerShell **know the version a script is created for**, we will be able to introduce \"breaking changes\" to PowerShell itself in the future by providing compatibility mode for legacy scripts (if we don't want to break them).\n",
      "created_at": "2016-08-22T16:46:36Z",
      "updated_at": "2016-08-22T16:46:36Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "We already have this with the requires statement which to fit your suggestion would be better if that was expanded to include a -maxversion arguement.\n\nchanging the ps1 to ps6 isnt really a suitable idea for this as this will increment through the versions and I'm not sure that there is much benefit in enforcing that going forward.\n\nI would either change the issue title to expand #Requires should have a -MaxVersion arguement or raise a new issue on this.\n",
      "created_at": "2016-08-22T17:01:11Z",
      "updated_at": "2016-08-22T17:01:11Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "However even then that would be a breaking change (as not down compat) so would require an RFC\n",
      "created_at": "2016-08-22T17:02:25Z",
      "updated_at": "2016-08-22T17:02:25Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@kilasuit I would prefer changing the title to something like \"let PowerShell know the version a script is written for\".\n\nAdd -MaxVersion to #Requires is a breaking change, but use \".ps6\" is not. While I agree with you that it will increment through versions, which is not good.\n\nI would suggest using \"#Prefers -Version 5.0\" rather than \"#Requires -MaxVersion 5.0\". Because:\n1. It won't be a breaking change.\n2. It's not a requirement but preference. If 5.0 is installed (or compatibility mode is available), use 5.0 to run that script. But if only 6.0 or later is installed, the script may still work.\n\nBTW. If we don't plan to use version number in file name extension (`.ps1`, `.psm1`) any more, we should consider setting the default extension to `.ps`, `.psm`.\n\nThanks\n",
      "created_at": "2016-08-22T17:30:05Z",
      "updated_at": "2016-08-22T17:30:05Z"
    },
    {
      "author": "ebelew",
      "author_association": "NONE",
      "body": "Except that `.ps` is postscript, and has been for decades.\n",
      "created_at": "2016-08-22T17:44:40Z",
      "updated_at": "2016-08-22T17:44:40Z"
    },
    {
      "author": "ebelew",
      "author_association": "NONE",
      "body": "I would prefer we used the `#!` syntax, which would allow old versions to ignore it, and fail on unsupported features, but still allow the script author to say something like `#!powershell -version 6`. This mechanism would also allow a script to request `-noprofile` and other useful flags for non-interactive.\n",
      "created_at": "2016-08-22T17:46:39Z",
      "updated_at": "2016-08-22T17:47:35Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@kilasuit This won't, by adding some extra logic for compatibility. If a script requires MinVersion \u2265 6.0, or sets a MaxVersionTested, we'll know that the script is new and will use the new logic. If it sets MinVersion < 6.0 and does not set MaxVersionTested, do the things like it was invoked by 5.0.\n\nThe argument is that, Microsoft already does this for Windows applications (applications need a manifest to declare their support for systems with GUIDs or by default get some compat shims, like VersionLie, after 8.1, and UWPs have manifests with MaxVersionTested). This seems to be a good compat practice and it worth considering.\n\nAnd I suggest we has better not drop the \u201c1\u201d out of the extensions.\n",
      "created_at": "2016-08-22T18:16:58Z",
      "updated_at": "2016-08-22T18:16:58Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "@GeeLaw Thank you for the explanation.\nFor dropping \"1\" out of the extensions, can we support both (with \"1\" and without \"1\")? We can start from some version (e.g. 6.0) so we can get rid of the \"1\" gradually in the future.\n",
      "created_at": "2016-08-22T18:56:48Z",
      "updated_at": "2016-08-22T18:56:48Z"
    },
    {
      "author": "McAndersDK",
      "author_association": "CONTRIBUTOR",
      "body": "I don\u00b4t see it as '.ps1' ever have been about PowerShell Version 1.\n\nit dictate the structure and content of the file.\n\nLets say Microsoft wanted support binary compiled script files.\nThis would not work with a '.ps1' file, but it could be supported with a '.ps2' file.\n\nSo as I see it, the idea is that if Microsoft for some reason needed to change the structure of a script file, they could do it by bumping the number in the extension.\n",
      "created_at": "2016-08-23T19:16:24Z",
      "updated_at": "2016-08-23T19:16:24Z"
    },
    {
      "author": "cbellee",
      "author_association": "NONE",
      "body": "Jeffrey Snover explained why the .ps1 file extension was retaIned In subsequent PowerShell releases a while back. The '1' denotes the current side by side version rather than the current language version. Link and excerpt follow.\n\nhttps://blogs.msdn.microsoft.com/powershell/2007/11/02/ctp-versioning/\n\nPowerShell Scripts continue to use \u201c.PS1\u201d.\nWe will continue to pursue this approach until there is a major change in the CLR or .NET frameworks which force us to go side-by-side. It is at that point that we\u2019ll go from .PS1 to .PS2 . Until then we will stay with .PS1 and everything that runs today will continue to run in new releases.\nYou might write a .PS1 script which takes advantage of a cmdlet/feature that is only available in V2. If you send this to someone that has PS V1, it will fail \u201cin some way and at some time\u201d. If it uses some new syntax, it will fail at parse time (with a PARSER error) but if it uses a new command line switch \u2013 it won\u2019t fail until it tries to run that command. This is what #REQUIRES is all about. You start your script with \n#REQUIRES -Version 2\nAnd we will check version #\u2019s and produce a precise error message\nIf you have a #REQUIRES \u2013VERSION 1 in your script, it will continue to run just find on PowerShell (V2) CTP because it is compatible with V1.\n",
      "created_at": "2016-09-19T13:07:54Z",
      "updated_at": "2016-09-19T13:07:54Z"
    },
    {
      "author": "zhiqiangyudev",
      "author_association": "NONE",
      "body": "Thank you, @belstarr. I'm closing this issue.\n",
      "created_at": "2016-09-19T16:14:43Z",
      "updated_at": "2016-09-19T16:14:43Z"
    }
  ],
  "created_at": "2016-08-22T13:04:38Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 2013,
  "state": "closed",
  "title": "Re-enable version number in the \".ps1\" extension.",
  "updated_at": "2016-09-19T16:14:43Z"
}