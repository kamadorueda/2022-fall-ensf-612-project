{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8290",
  "author": "najeebanwer",
  "body": "Steps to reproduce\r\n------------------\r\nInstall PowerShell-6.2.0-preview.2-win-x64.msi and select the installation option for \"Open here\" context menu item in Windows Explorer.\r\n\r\nExpected behavior\r\n-----------------\r\nIf the \"Open here\" context menu item option is selected during installation it should add a single item for \"Open here\" and a single item for \"Open here as Administrator\" to the \"PowerShell 6-Preview\" context menu in Windows Explorer.\r\n\r\nConversely, if the \"Open here\" context menu item option is not selected during installation, it should remove any existing context menu for \"PowerShell 6-Preview\" from Windows Explorer.\r\n\r\nUninstalling the program should also remove the \"PowerShell 6-Preview\" context menu from the Registry.\r\n\r\nActual behavior\r\n---------------\r\nThe installation creates two \"Open here\" context menu items. \r\nUninstalling the program does not remove the context menu.\r\n\r\n![image](https://user-images.githubusercontent.com/34123660/48610733-b9de3780-e94a-11e8-99b7-197a0f9e562f.png)\r\n\r\nEnvironment data\r\n----------------\r\nThe following is from PowerShell 6.1.1 because PowerShell 6.2.0-Preview.2 will not launch:\r\n```\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": "2018-12-27T09:11:00Z",
  "comments": [
    {
      "author": "najeebanwer",
      "author_association": "NONE",
      "body": "Another problem, the \"Open here as Administrator\" menu item does not appear to show startup text for PowerShell or show the text \"Administrator:\" in the Window title.\r\n\r\n![image](https://user-images.githubusercontent.com/34123660/48613293-f14fe280-e950-11e8-8e95-e61e6657a55a.png)\r\n",
      "created_at": "2018-11-16T09:40:42Z",
      "updated_at": "2018-11-16T09:40:42Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I have seen this happening before with a previous preview of `6.1` that did not correctly clean up on uninstall. This issue is not specific to `6.2-preview2` as this did not happen for me when I upgraded from `6.2-preview1` to `6.2-preview2`. You can manually remove the old left over registry keys in\r\n- `HKEY_CLASSES_ROOT\\Directory\\ContextMenus\\`\r\n- `HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\`\r\n- `HKEY_CLASSES_ROOT\\Directory\\shell`\\\r\n- `HKEY_CLASSES_ROOT\\DesktopBackground\\shell\\`\r\n- `HKEY_CLASSES_ROOT\\Drive\\shell`\\\r\n- `HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\`",
      "created_at": "2018-11-16T18:16:08Z",
      "updated_at": "2018-11-16T18:17:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we add this cleanup to msi?",
      "created_at": "2018-11-16T19:26:43Z",
      "updated_at": "2018-11-16T19:26:43Z"
    },
    {
      "author": "najeebanwer",
      "author_association": "NONE",
      "body": "The problem with the duplicate entry is at `HKEY_CLASSES_ROOT\\Directory\\ContextMenus\\`. The \"openpwsh\" key is redundant.\r\n\r\n![image](https://user-images.githubusercontent.com/34123660/48652468-475e6d80-e9c5-11e8-86e6-5146d0ed5fee.png)\r\n",
      "created_at": "2018-11-16T23:31:26Z",
      "updated_at": "2018-11-16T23:31:26Z"
    },
    {
      "author": "najeebanwer",
      "author_association": "NONE",
      "body": "The issue with the \"Open here as Administrator\" menu item is that it adds the following to the `HKEY_CLASSES_ROOT\\Directory\\ContextMenus\\PowerShell6-previewx64\\shell\\runas\\command` registry entry:\r\n`-Command \"$host.UI.RawUI.WindowTitle = 'PowerShell 6-preview (x64)'\"`\r\nI think this is meant to make the window title look nicer, but it actually has less utility than the default window title because a) executing the command causes the window to be cleared and b) the text \"Administrator:\" no longer appears in the window title which is a good visual clue that the shell is running with elevated privileges",
      "created_at": "2018-11-16T23:47:21Z",
      "updated_at": "2018-11-16T23:57:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems like along the way we renamed that key from `open` to `openpwsh` and when it doesn't get cleaned up; it results in duplicate.  Seems like we should explicitly remove the old key during setup.\r\n\r\nAs for the title, the simplest solution is to remove the `-Command` to update the title which would bring back the startup text (as `-Command` causes it to be suppressed) and when elevated the `Administrator:` prefix doesn't get overwritten.  The downside is you get the path to exe which doesn't seem horrible to me.  Otherwise we'd have to add more to `-Command` to know when it's elevated to add the prefix as well as enable the startup info to show with `-Command` which is more code to change.  My preference is to just go with reverting the `-Command` parameter from the command line.",
      "created_at": "2018-11-17T01:24:47Z",
      "updated_at": "2018-11-17T01:24:47Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "If component codes are being managed properly, then this should not happen.\r\n\r\nIn general, if an MSI \"inplace upgrade over\" a previous MSI product does unexpected things that are resolved by uninstall / clean new install - it is because MSI Component GUIDs are not being properly managed **across package releases**.  Basically, they aren't being kept the same across packages as per MSI rules.  The MSI Component is actually the most durable identity in MSI because the same exact binary with the same version should have the same component GUID across all MSI packages (including \"MSI major upgrades\") and across all time.  In the case of shared runtimes, MSI Merge modules were intended to keep component GUIDs matching across all vendors shipping shared runtimes.\r\n\r\nThis is how Microsoft office used to manage 1.5 GB of code and have sensible upgrades all the time.\r\n\r\nFirst, these context menu associations should be **in the same component as the exe they point to**.\r\n\r\nSecond, **the MSI component code for that EXE should stay the same for major versions of the EXE across packages**.\r\n\r\nThird, Keypaths should not change between minor MSI package version upgrades.  Keypaths for a component include registry keys and file system paths when those components have that as their key path.  However, If this component was structured properly, the binary file path would be the keypath and then I *believe* the registry path of the association should be able to vary.\r\n\r\nWindows installer deals with \"MSI Components\" as the fundamental unit of installation - an entire component is installed, uninstalled, self-healed and upgraded as a unit.  Components whose IDs stay the same, but the version changes, should automatically not leave junk over.\r\n\r\nComponents based on EXE keypaths should take their version number from the binary version of the EXE - which also assumes it is appropriately managed according to MSI rules (which don't really differ from normal major, minor, build rules).\r\n\r\nWhen I used to teach windows installer I had an exercise to emphasize this point.  In the exercise, because component codes for identical items did NOT match across major upgrade packages, after an upgrade the only file left on the system was one that was ONLY in the new package.  Because component ref counts didn't match for the exact same files across two packages.",
      "created_at": "2018-11-17T12:44:03Z",
      "updated_at": "2018-11-17T12:52:23Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I tested the upgrade scenarios [here](https://github.com/PowerShell/PowerShell/pull/7932#issuecomment-426814433) using locally built installer versions and think:\r\nThe nature of previews is that they might be a bit 'dirty' at times. As far as I see an old preview of 6.1 is causing that, therefore this should not bother us too much. However, when it comes to RTM releases, Microsoft must go through some manual test cases to ensure everything is fine since there were substantial changes to the installer during 6,1 that could possibly cause this to happen for the 6.1->6.2 upgrade. Unfortunately this scenario is very hard to test/reproduce locally now, I would need to extract the original product id guid for simulating a more realistic upgrade scenario and then my locally built installers would probably still be different to an actual release.",
      "created_at": "2018-11-17T18:20:17Z",
      "updated_at": "2018-11-17T18:20:17Z"
    },
    {
      "author": "najeebanwer",
      "author_association": "NONE",
      "body": "Just a note to say that both problems reported here still exist in PowerShell-6.2.0-preview.3-win-x64\r\n1. Duplicate \"Open here\" context menu item in Windows Explorer\r\n2. The \"Open here as Administrator\" context menu item clears the command window and removes the word \"Administrator\" from the window title.",
      "created_at": "2018-12-11T06:29:33Z",
      "updated_at": "2018-12-11T06:29:33Z"
    }
  ],
  "created_at": "2018-11-16T09:08:06Z",
  "number": 8290,
  "state": "closed",
  "title": "PowerShell-6.2.0-preview.2-win-x64 creates duplicate \"Open here\" context menu item (also preview.3)",
  "updated_at": "2018-12-28T09:59:18Z"
}