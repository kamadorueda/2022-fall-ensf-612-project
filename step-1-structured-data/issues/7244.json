{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7244",
  "author": "mklement0",
  "body": "Currently, `Measure-Object` treats each input object / input object's property as a _scalar_; e.g.:\r\n\r\n```powershell\r\nPS> ((1, 2), (3, 4) | Measure-Object).Count\r\n2 # The input arrays each counted as *1* object - their elements weren't counted.\r\n\r\nPS> ([pscustomobject] @{ prop = 1, 2 }, [pscustomobject] @{ prop = 3, 4 } | \r\n      Measure-Object -Property prop).Count\r\n2  # The arrays stored in .prop each counted as *1* object - their elements weren't counted.\r\n```\r\n\r\nNote that if you also specified a switch such as `-Sum`, the commands would _break_, because an attempt is made to interpret the _array_ as a number, which fails: `Measure-Object : Input object \"System.Object[]\" is not numeric.`\r\n\r\nIt would be handy if a `-Recurse` switch would allow opting into recursing into array-valued input objects / properties:\r\n\r\n```powershell\r\nPS> ((1, 2), (3, 4) | Measure-Object -Recurse).Count  # WISHFUL THINKING\r\n4   # The input arrays' elements were counted individually\r\n\r\nPS> ([pscustomobject] @{ prop = 1, 2 }, [pscustomobject] @{ prop = 3, 4 } | \r\n      Measure-Object -Recurse -Property prop).Count  # WISHFUL THINKING\r\n4 # The elements of the arrays stored in .prop were counted individually\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Note that there are already many ways to achieve the same effect : `(1, 2), (3, 4) | write | Measure-Object` or `$objList.prop | write | Measure-Object` or `$objList | select Expand prop | Measure-Object`  or `$objList | foreach prop | Measure-Object`",
      "created_at": "2018-07-08T19:31:23Z",
      "updated_at": "2018-07-08T19:31:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the examples, @BrucePay.\r\n\r\nWhile the problem can definitely be solved with the current features, as you demonstrate, my motivation for suggesting  `-Recurse` is the desire for convenience and concision (and greater efficiency, to a lesser degree).\r\n\r\nIf backward compatibility weren't a concern, I would have have suggested the inverse logic: enumeration _by default_, with an opt-out via `-NoEnumerate`.\r\n\r\n\r\n\r\n",
      "created_at": "2018-07-08T19:43:59Z",
      "updated_at": "2018-07-08T19:43:59Z"
    }
  ],
  "created_at": "2018-07-07T19:20:45Z",
  "number": 7244,
  "state": "open",
  "title": "Add a -Recurse switch to Measure-Object to support input objects / properties that are collections themselves",
  "updated_at": "2018-07-08T19:43:59Z"
}