{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13423",
  "author": "mklement0",
  "body": "Follow-up from #12103, closely related to #12141\r\n\r\n# Summary of the new feature/enhancement\r\n\r\nCurrently, numeric input to `Measure-Object` returns a `MeasureGenericInfo` instance whose properties are all (nullably) `[double]`-typed (except `Count`, which is `[int]`-typed).\r\n\r\nThis can result in loss of accuracy with large integers; e.g.:\r\n\r\n```powershell\r\nPS> [long] (9223372036854770000 | Measure-Object -Sum).Sum\r\n9223372036854769664 # !! Number was altered due to lossy conversion to [double].\r\n```\r\n\r\nThe decision in #12103 was not to alter the current behavior, but we can improve it on an _opt-in_ basis:\r\n\r\nLet's introduce an `-AsAutoNumber` switch that modifies the behavior of `Measure-Object` as follows:\r\n\r\n* All output properties should retain the input type, if possible (if the inputs aren't of uniform type, base the result on the widest among the input types):\r\n\r\n  * `Minimum`, `Maximum` actually should do that _by default_ too - see #13422\r\n  * For `Average` and `StandardDeviation`, `[double]` is an appropriate default in most cases, but `[decimal]` input should result in `[decimal]`  output as well.\r\n\r\n* If the input type becomes too small for `Sum` (and possibly for `Count`, if #7244 gets implemented), the type should be _automatically widened_, using the rules described in the related #12141 proposal.\r\n\r\nIn essence, `-AsAutoNumber` necessitates a new, all-`object`-properties output type.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "If you are going down this path, give me an option to format the results as KB, MB, GB, or TB. Ideally to a user-specified number of decimal points. That saves me from cumbersome expressions like this:\r\n\r\n```powershell\r\ndir c:\\work -file | measure -Property length -sum | Select Count,@{N=\"SumMB\";E={[math]::round($_.sum/1mb,2)}}\r\n```\r\n\r\nThat are a pain to type and even harder for PowerShell beginners to understand.",
      "created_at": "2020-08-26T22:19:53Z",
      "updated_at": "2020-08-26T22:19:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jdhitsolutions, this issue is about _data types_, not about _formatting_.\r\n\r\nI do think that auto-scaling would be helpful, but it belongs in the _formatting layer_.\r\n\r\nI encourage you to open a feature request for that: conceivably, the feature could be automatic for `Mesure-Object`'s output formats - though the challenge is to know when its application is _guaranteed_ to be meaningful, and never unhelpful. Separately?, an `-AutoScale` switch for `Format-*` cmdlets is worth considering. A fundamental question is: multiples of `1,000` or `1,024`?\r\n",
      "created_at": "2020-09-04T23:07:24Z",
      "updated_at": "2020-09-04T23:07:24Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "IMO, it should be 1024.",
      "created_at": "2020-09-06T04:38:55Z",
      "updated_at": "2020-09-06T04:38:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "1024 would be consistent with the builtin `kb`, `mb` etc suffixes, so would yield predictable results there IMO",
      "created_at": "2020-09-06T05:14:22Z",
      "updated_at": "2020-09-06T05:14:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* To address the readability of large numbers in general, please see #13590. \r\n\r\n* To address the issue raised by @jdhitsolutions specifically, please see #13601.",
      "created_at": "2020-09-08T21:49:46Z",
      "updated_at": "2020-09-08T21:49:46Z"
    }
  ],
  "created_at": "2020-08-12T21:09:06Z",
  "number": 13423,
  "state": "open",
  "title": "Add an -AsAutoNumber switch to Measure-Object for automatic numeric type-widening",
  "updated_at": "2020-09-08T21:49:46Z"
}