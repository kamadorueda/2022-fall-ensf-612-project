{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13736",
  "author": "Bartolomeus-649",
  "body": "How do you enumerate the available hashing algorithms when `HashCmdletBase.Algorithm` is a string?",
  "closed_at": "2020-10-06T00:00:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell gets the information from ValidateSet attribute:\r\nhttps://github.com/PowerShell/PowerShell/blob/fc8ca61b3dd2a561d7fe8fbc38fd779278ad7984/src/Microsoft.PowerShell.Commands.Utility/commands/utility/GetHash.cs#L234-L245\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/fc8ca61b3dd2a561d7fe8fbc38fd779278ad7984/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L1742-L1763",
      "created_at": "2020-10-03T17:51:30Z",
      "updated_at": "2020-10-03T17:56:21Z"
    },
    {
      "author": "Bartolomeus-649",
      "author_association": "NONE",
      "body": "Yeah, but how do you do that in PowerShell?\r\n\r\nWith an enum you would just do, for example, `[System.ConsoleColor].GetEnumNames()`.",
      "created_at": "2020-10-03T18:29:06Z",
      "updated_at": "2020-10-03T18:29:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "One way is:\r\n\r\n```ps1\r\n(Get-Command Get-FileHash).Parameters['Algorithm'].Attributes.Where{$_ -is [ValidateSet]}.ValidValues\r\n```\r\n\r\nBut in general usage you can simply do `Get-FileHash -Algorithm <tab>` and tab through the available values.",
      "created_at": "2020-10-03T20:40:37Z",
      "updated_at": "2020-10-03T20:40:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A quick-and-dirty approach is to provoke an error by passing a deliberately invalid value. The resulting error message then contains a list of all valid values:\r\n\r\n```powershell\r\nPS> Get-FileHash -Algorithm TotallyBogus\r\nGet-FileHash: Cannot validate argument on parameter 'Algorithm'. \r\nThe argument \"TotallyBogus\" does not belong to the set \"SHA1,SHA256,SHA384,SHA512,MD5\" specified \r\nby the ValidateSet attribute. Supply an argument that is in the set and then try the command again.\r\n```\r\n\r\n",
      "created_at": "2020-10-03T22:34:25Z",
      "updated_at": "2020-10-03T22:34:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Even easier: `Get-FileHash -?` enumerates the valid values too.",
      "created_at": "2020-10-03T22:36:09Z",
      "updated_at": "2020-10-03T22:36:09Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Is there any reason why this isn't an enum?",
      "created_at": "2020-10-04T02:22:52Z",
      "updated_at": "2020-10-04T02:29:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there any reason why this isn't an enum?\r\n\r\nBackward compatibility. The cmdlet was initially implemented on script, later re-implemented on C#. Changing this would be a breaking change.",
      "created_at": "2020-10-04T16:32:48Z",
      "updated_at": "2020-10-04T16:32:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "How is that a breaking change, exactly?\r\n\r\nWhether the parameter is an enum type or not, users would still generally use the argument in the same way, and enums cast from strings in PowerShell without issue.\r\n\r\nWhat exactly would that break?",
      "created_at": "2020-10-04T18:30:15Z",
      "updated_at": "2020-10-04T18:30:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> How is that a breaking change, exactly?\r\n\r\nIf you were previously relying on conversion to string for that parameter that would break since the binder won't go `something > string > enum`.  That's solved pretty easily with argument transformation, but it's more work.  Really there aren't many reasons to enumerate the values outside of help and tab completion so usually it's not worth the trouble.\r\n\r\n---\r\n\r\nAlso now it would be a breaking change as `HashCmdletBase` is publicly inheritable.",
      "created_at": "2020-10-04T22:08:25Z",
      "updated_at": "2020-10-04T22:08:25Z"
    },
    {
      "author": "Bartolomeus-649",
      "author_association": "NONE",
      "body": "> Really there aren't many reasons to enumerate the values outside of help and tab completion so usually it's not worth the trouble.\r\n\r\n.NET is all about types!  When you start passing around strings instead of proper types you break fundamental design goals.\r\nThere are plenty of reasons why you would want to enumerate, in this example, the different hashing algorithms,for example if you want to display what's available in some kind of UI or a user to choose from.\r\n\r\nString should only be used for displaying text which is intended to be read by a human, everything else should have a proper type for its purpose.",
      "created_at": "2020-10-04T22:25:18Z",
      "updated_at": "2020-10-04T22:25:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> .NET is all about types! When you start passing around strings instead of proper types you break fundamental design goals.\r\n\r\nFormatted string data for sure I agree there.  `ValidateSet` values are basically PowerShell's zero effort enum.\r\n\r\n> There are plenty of reasons why you would want to enumerate, in this example, the different hashing algorithms,for example if you want to display what's available in some kind of UI or a user to choose from.\r\n\r\nYeah that's pretty niche. Also if you don't already know the enum type, it's about the same amount of work to enumerate.\r\n\r\n> String should only be used for displaying text which is intended to be read by a human, everything else should have a proper type for its purpose.\r\n\r\nIf PowerShell was strictly typed I'd be inclined to agree, but that doesn't apply **as** much. `ValidateSet` and `PSCustomObject` are pretty heavily baked in.\r\n\r\nIt's a good rule of thumb to use an enum for new API's though definitely.",
      "created_at": "2020-10-04T22:40:33Z",
      "updated_at": "2020-10-04T22:40:33Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-10-06T00:00:04Z",
      "updated_at": "2020-10-06T00:00:04Z"
    }
  ],
  "created_at": "2020-10-03T08:22:24Z",
  "number": 13736,
  "state": "closed",
  "title": "Hashing algorithm is a string!",
  "updated_at": "2020-10-06T00:00:05Z"
}