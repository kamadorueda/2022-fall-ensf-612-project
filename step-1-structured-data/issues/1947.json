{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1947",
  "author": "ilius",
  "body": "Since there are 281 open issues, I'm not sure if this is reported before or not\n\nTry a command that takes too long (possibly forever) and produces lots of output, and we want to give the output to another command using pipe, for example:\n\n```\nfind / -iname '*.exe' | less\n```\n\nPowerShell waits for the first command to be finished, and then runs the second command and give it the whole output. That is not what Unix pipes have been about for decades! We expect the second command to be executed right after we press enter (try `sleep 10 | echo test` in Bash), and send any output from first command immediately to the second command. \n\nTested with PowerShell 6.0.0 on Debian GNU/Linux\n",
  "closed_at": "2016-08-20T02:00:15Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is a core PowerShell design feature and is not likely to be changed as would be a major breaking change due to the way that the pipeline works and is designed.\n\nan example to understand how the pipeline is used in Powershell would be like\n\n``` powershell\n Get-ChildItem C:\\scripts\\ -Recurse | Where-Object {$_.Name -like \"*.ps*1\"} | Group-object -Property Extension | Select-Object Count,Name\n```\n\nTo break this down we are getting all the items in the C:\\Scripts\\ folder and recursive folders and then with the collection of objects that would output we pass this to Where-Object using the Pipeline to then only return files that have a ps*1 extension and then with the collection of objects that would output this is then passed again using the pipeline to Group-Object where we get an output based on the grouping of the items based on the file extension and the we pipe this to Select-Object and tell it that we want only the Count and Name returned from that collection\n\nThe Output we would get from would get something similar to the below\n\n```\nCount Name \n----- ---- \n   76 .ps1 \n    1 .psm1\n```\n\nHappy to answer any other questions on the PowerShell Pipeline if you have them?\n",
      "created_at": "2016-08-19T10:40:28Z",
      "updated_at": "2016-08-19T10:41:59Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "Hi!\n\n@kilasuit, I could be off base, but IIRC commands with a proper `process` block implementation will stream their output, allowing something akin to @ilius' example.\n\nI'm guessing there might be some odd behavior if you mix and match output from *nix tools and PowerShell tools, and this would be expected in cases where you have a blocking command (e.g. you need all items to sort them).\n\nCheers!\n",
      "created_at": "2016-08-19T13:16:41Z",
      "updated_at": "2016-08-19T13:16:51Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "@RamblingCookieMonster is correct. Powershell will stream objects down the pipe when it can. A good common example would be to tail a log file and pipe to a search string.\n\nGet-Content -Path $path -Tail | Select-String 'Error'\n\nBut there are other commands that will block the pipe and wait for all the objects before continuing. Sort-Object is an obvious example. \n",
      "created_at": "2016-08-20T00:03:33Z",
      "updated_at": "2016-08-20T00:03:33Z"
    },
    {
      "author": "ilius",
      "author_association": "NONE",
      "body": "I can't see how this breaks compatibility\nIf a command (like ``Sort-Object` or `Select-Object`) **needs the whole input** to process, it can **wait for the whole input** itself, that's up to the second command (receiver), that does not prevent the first command (sender) or the Shell to send it's output.\n\nhttps://en.wikipedia.org/wiki/Pipeline_(Unix)\n",
      "created_at": "2016-08-20T01:24:35Z",
      "updated_at": "2016-08-20T01:24:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Closing as this is a duplicate, see #559.  It is fixable, but a bit tricky.\n",
      "created_at": "2016-08-20T02:00:14Z",
      "updated_at": "2016-08-20T02:00:14Z"
    }
  ],
  "created_at": "2016-08-19T10:17:17Z",
  "number": 1947,
  "state": "closed",
  "title": "Pipe waits for the first command to be finished",
  "updated_at": "2016-08-20T02:00:24Z"
}