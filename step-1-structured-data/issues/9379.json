{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9379",
  "author": "cawoodm",
  "body": "My understanding (and experience of PowerShell v5) is that Modules (.psm1 files) in the Modules\\ folder are automatically loaded (unless `$PSModuleAutoLoadingPreference` is set to `none`). This appears to be broken in PWSH - at least the alias is not imported/available.\r\n\r\n# Steps to reproduce\r\n**powowshell.psm1**\r\n```powershell\r\nfunction Invoke-PowowShell {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    [Alias('pow')]\r\n    #...code here...\r\n    \"You have the POWer!\"\r\n}\r\nNew-Alias -Name pow -Value Invoke-PowowShell\r\nExport-ModuleMember -Function Invoke-PowowShell -Alias pow\r\n```\r\nCopy the above file to `Modules\\PowowShell` and restart PowerShell Core (PWSH).\r\n\r\n# Expected behavior\r\nI expect `Invoke-PowowShell` and the alias `pow` to be available to me in all PowerShell sessions:\r\n```none\r\nPS> pow\r\nYou have the POWer!\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nPS> pow\r\npow : The term 'pow' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\n...\r\n\r\nPS> Invoke-PowowShell\r\nYou have the POWer!\r\n```\r\nSo the function `Invoke-PowowShell` is installed but not the alias `pow`.\r\n\r\n**More detail:**\r\n```\r\nPS > Get-Command pow\r\nGet-Command : The term 'pow' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Get-Command pow\r\n+ ~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (pow:String) [Get-Command], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand\r\n\r\nPS> Get-Command Invoke-PowowShell\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Invoke-PowowShell                                  0.0        PowowShell\r\n```\r\n\r\n**Get-Module:**\r\n```\r\nPS> Get-Module -ListAvailable\r\n    Directory: C:\\Users\\me\\Documents\\PowerShell\\Modules\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nScript     0.0        Hello                               Desk      Invoke-Hello\r\nScript     0.0        PowowShell                          Desk      Invoke-PowowShell\r\n```\r\n\r\n# Environment data\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-06-30T15:17:03Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "_Do_ modules autoload when you don't have a PSD1 manifest file? \ud83e\udd14 \r\n\r\nIt's been so long since I wrote a module without a PSD1 that it hasn't occurred to me in forever. I wouldn't _expect_ such a module to autoload, because there's no way to pull the metadata for the module without fully importing it.",
      "created_at": "2019-04-16T12:47:19Z",
      "updated_at": "2019-04-16T12:47:58Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "They definitely do autoload even without a manifest",
      "created_at": "2019-04-16T13:55:52Z",
      "updated_at": "2019-04-16T13:55:52Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I tried this out and it's working for me on Windows 10 with PowerShell 6.2.\r\n\r\nHowever, there's a problem with the function: the attributes fail parsing because there's no `param` block.\r\n\r\nIf you call `ipmo PowowShell` I think you'll see an error message describing this.\r\n\r\nWhen I changed psm1 contents to this:\r\n\r\n```powershell\r\nfunction Invoke-PowowShell {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    [Alias('pow')]\r\n\r\n    param() # <---- PARAM BLOCK\r\n\r\n    #...code here...\r\n    \"You have the POWer!\"\r\n}\r\nNew-Alias -Name pow -Value Invoke-PowowShell\r\nExport-ModuleMember -Function Invoke-PowowShell -Alias pow\r\n```\r\n\r\nEverything worked as expected.\r\n\r\nFor a full working example:\r\n\r\n```powershell\r\n$modDir = ($env:PSModulePath -split ';')[0]\r\n\r\n$modPath = Join-Path $modDir 'powowshell'\r\n\r\nmkdir $modPath\r\n\r\n$psm1Path = Join-Path $modPath 'powowshell.psm1'\r\n\r\nNew-Item -Path $psm1Path -Value @'\r\nfunction Invoke-PowowShell {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    [Alias('pow')]\r\n    param()\r\n    #...code here...\r\n    \"You have the POWer!\"\r\n}\r\nNew-Alias -Name pow -Value Invoke-PowowShell\r\nExport-ModuleMember -Function Invoke-PowowShell -Alias pow\r\n'@\r\n\r\npow\r\n```\r\n\r\n## Update: The above is a repro of the bug\r\n\r\nSummary:\r\n\r\n- `Invoke-PowowShell` works\r\n- `pow` does not\r\n- Upon loading of the module, `pow` works as expected",
      "created_at": "2019-04-16T23:26:02Z",
      "updated_at": "2019-04-16T23:31:58Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Apologies, trying this in a new session with only `pow` did not work and appears to work in Windows PowerShell.",
      "created_at": "2019-04-16T23:29:42Z",
      "updated_at": "2019-04-16T23:29:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I just checked with PowerShell 6.1.1 and 6.0.5, it looks like this may never have worked in PowerShell 6.",
      "created_at": "2019-04-16T23:40:00Z",
      "updated_at": "2019-04-16T23:40:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt It is not bug. It is \"by design\". It seems we never analyze module's aliases for performance reasons. \r\nModule manifests work for this purpose. ",
      "created_at": "2019-04-17T06:48:42Z",
      "updated_at": "2019-04-17T06:48:42Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "OK, hard luck for guys like me who are writing their first module. Maybe a warning should be issued that this ain't gonna work properly without a manifest?",
      "created_at": "2019-04-17T14:40:26Z",
      "updated_at": "2019-04-17T14:40:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It does seem kind of odd to allow the `-Alias` parameter on the `Export-ModuleMember` cmdlet if it can't be used. I'm more inclined to think it _is_ actually a bug, especially since it did previously work on Windows PowerShell.",
      "created_at": "2019-04-17T14:47:34Z",
      "updated_at": "2019-04-17T14:47:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The fundamental problem is that we have to parse a command in the module to work out what it exports. This is not practicable in general:\r\n\r\n```powershell\r\n$body = (Invoke-WebRequest -Uri 'https://mywebsite.com/api/pwsh-export').Body\r\n\r\nExport-ModuleMember -Function ($body.Functions)\r\n```\r\n\r\nThere's no way to determine what that actually exports without running the code and sending a network request.\r\n\r\nIt's a contrived example perhaps, but it's (1) quite possible and (2) representative of things like string templating, variable mangling and cmdlet use (`Join-Path` for example) that might be used.\r\n\r\nSo we can never actually always determine the exports, it's just not possible. I personally dislike that we try, since it means exports like this are only reliable if you provide concrete values to `Export-ModuleMember` -- so when you get more clever and it stops working, it's hard to explain why.\r\n\r\n@iSazonov I understand the principle, although I'm not entirely sure it's intentional. There's code that seems to do it here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/50efc4192d99bbbe20c34e03ab04aa2f7d7d82b1/src/System.Management.Automation/engine/Modules/ScriptAnalysis.cs#L20-L91\r\n\r\nHowever, I haven't been able to catch it in the debugger at all.",
      "created_at": "2019-04-17T16:15:03Z",
      "updated_at": "2019-04-17T16:15:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've been looking into what it would take to make this work, but the fundamental advice is: **Write a module manifest**. It's much much better.",
      "created_at": "2019-04-17T16:16:12Z",
      "updated_at": "2019-04-17T16:16:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I understand the principle, although I'm not entirely sure it's intentional.\r\n\r\nI can not find the comment but it was and it seems the comment was from Jason.\r\n\r\nTaking into account that currently community has a large number of modules, the rule is to use a manifest. So I think we can close this issue with \"By design\" until we get important business case.",
      "created_at": "2019-04-17T16:50:43Z",
      "updated_at": "2019-04-17T16:50:43Z"
    }
  ],
  "created_at": "2019-04-16T12:14:07Z",
  "number": 9379,
  "state": "closed",
  "title": "Exported alias autoloading from PSM1 module not working",
  "updated_at": "2020-06-30T15:17:03Z"
}