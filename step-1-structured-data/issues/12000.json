{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12000",
  "author": "RG255",
  "body": "\r\n# Steps to reproduce\r\n\r\nIn the attached script\r\n[Regex.zip](https://github.com/PowerShell/PowerShell/files/4288316/Regex.zip)\r\nThere are two filters 'get-dns' and 'get-dns1'\r\nThere is also a regular expression 'RegexDNSEntry'\r\nThis regex contains a number of capture groups (many are ignored) and in particular one that has a name 'DNS'\r\nDepending on how the regex is used (see the comments at the start of each filter) in one you have to know the numerical offset of the group you want to use, in the other you can actually user the name of the capture group e.g. 'DNS'\r\ne.g:\r\n$Length = $Result.Matches.groups[1].length (get-dns)\r\n$Length = $Result.Groups['DNS'].length (get-dns1)\r\nboth methods work but one - using the name, seems to be the most programmatically safe because if the regex is altered and the group order and hence the numerical offset changes in the first example breaking the code. When looking at the $Result.Matches.groups (both examples) output, the name is known but I have so far not been able to work out how to *easily* to access the group by name it is only accessible numerically.\r\n\r\nThere is data within the script that can be used to demonstrate the workings and you will see the output from both is the same.\r\n```\r\n\r\nThe behaviour should be the same however the regex is used and the output/group should be accessible by either name or numerical offset\r\n\r\n```\r\n\r\nSee the code and examples\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-03-04T20:07:35Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The `Matches` property is an array of matches.  When you then call `Groups` on the result of that property expression, the `Groups` property of `Match` is called for each item in the array, similar to `(Get-ChildItem).Name`.  The property enumeration creates a `object[]` (an array of any type) which does not have the indexer you're trying to access.\r\n\r\ntl;dr, do this instead:\r\n\r\n```powershell\r\n$result.Matches.ForEach{ $PSItem.Groups['DNS'] }.Length\r\n# or for groups of a single match\r\n$result.Matches[0].Groups['DNS'].Length\r\n```",
      "created_at": "2020-03-04T17:14:59Z",
      "updated_at": "2020-03-04T17:14:59Z"
    },
    {
      "author": "RG255",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n\r\nOK thanks for that I see that it works, however it would be better if it was consistent across both methods:\r\nThis is the option for the first example\r\n[DBG]: PS C:\\>> $result.matches\r\nGroups   : {0, DNS}\r\nSuccess  : True\r\nName     : 0\r\nCaptures : {0}\r\nIndex    : 0\r\nLength   : 26\r\nValue    : 0.0.0.0     \t fr.a2dfp.net\r\n\r\nAnd this the second\r\n[DBG]: PS C:\\>> $result\r\nGroups   : {0, DNS}\r\nSuccess  : True\r\nName     : 0\r\nCaptures : {0}\r\nIndex    : 0\r\nLength   : 26\r\nValue    : 0.0.0.0     \t fr.a2dfp.net\r\n\r\nAs you can see the output of $Result is the same but the method of access is different I agree there is a way to gather data from the named group using the first method but as the subject says the method is not consistent. \r\n\r\nUsing Measure-Command the time taken is considerable less using the second method:\r\n\r\n(Measure-Command {$Result = (Select-String -InputObject $InputObject -Pattern $RegexDNSEntry -AllMatches)}).Ticks \r\n177220\r\n6097\r\n1801\r\n5095\r\n26834\r\n2157\r\n1888\r\n1893\r\n2004\r\n2090\r\n2004\r\n2026\r\n5723\r\n1917\r\n1915\r\n1928\r\n2008\r\n1858\r\n1844\r\n1897\r\n1829\r\n1815\r\n1790\r\n1984\r\n1830\r\n\r\n(Measure-Command ({$Result = $RegexDNSEntry.Match($InputObject)})).Ticks\r\n76175\r\n433\r\n295\r\n411\r\n350\r\n303\r\n274\r\n325\r\n353\r\n319\r\n306\r\n354\r\n344\r\n357\r\n361\r\n347\r\n590\r\n352\r\n356\r\n390\r\n332\r\n383\r\n322\r\n385\r\n399\r\n\r\nThis difference is the same magnitude in both V5.1 and V7RC3\r\n\r\nIf you think this is a non issue then feel free to close the case.",
      "created_at": "2020-03-04T17:46:39Z",
      "updated_at": "2020-03-04T17:46:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As you can see the output of $Result is the same but the method of access is different I agree there is a way to gather data from the named group using the first method but as the subject says the method is not consistent.\r\n\r\nIt is in the same way that `1` has the same output as `1, 2, 3`.  When an object that can be enumerated (e.g. `array`/`object[]`/`ArrayList`/`List<>`) is outputted to the pipeline (in this case implicitly to the host), the object is enumerated and items contents are displayed instead.  You can check this with the `GetType()` method that is present on all objects:\r\n\r\n```powershell\r\n$result.GetType()\r\n\r\n# vs\r\n\r\n$result.Matches.GetType()\r\n```\r\n\r\nIt *is* technically consistent with how the language works, but it is admittedly pretty confusing. I absolutely remember getting tripped up on this early on (which is why I jumped on the issue) and have seen the same confusion in others many times.  This API in particular makes that interaction makes it really easy to trip on.  Not sure what would be done differently though, or if that's just gotta be one of those things that folks run into.\r\n\r\n> Using Measure-Command the time taken is considerable less using the second method:\r\n\r\nThat's pretty much always going to be the case.  Commands have a lot more overhead involved than a simple method invocation.  Honestly less than 1ms difference is pretty good, I'd have expected the difference to be more drastic.",
      "created_at": "2020-03-04T18:07:37Z",
      "updated_at": "2020-03-04T18:07:37Z"
    },
    {
      "author": "RG255",
      "author_association": "NONE",
      "body": "OK Thanks for the info.",
      "created_at": "2020-03-04T20:07:35Z",
      "updated_at": "2020-03-04T20:07:35Z"
    }
  ],
  "created_at": "2020-03-04T16:28:22Z",
  "number": 12000,
  "state": "closed",
  "title": "The use of regex named capture groups is not consistent",
  "updated_at": "2020-03-04T20:07:35Z"
}