{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3651",
  "author": "PaulHigin",
  "body": "This behavior changed between PowerShell versions 5.0 and 5.1.  The change was to make PowerShell class method script blocks bound to the runspace in which they were created.  If a class instance method is run from within a different runspace then it gets \"marshaled\" back to the original runspace (via engine events).  The result is that if a single class instance is shared among multiple runspaces (e.g., a runspace pool) with the intention to execute instance methods concurrently, the methods run serially instead.\r\n\r\nI don't know why this changed between 5.0 and 5.1 but it looks to be by design.  @vors  can you please comment?\r\n\r\nRepro steps:\r\n```powershell\r\nPS > (measure-command { .\\RunspaceInstanceTest.ps1 }).TotalSeconds\r\n\r\nRunspaceInstanceTest.ps1 file script:\r\nclass Writer\r\n{\r\n    static WriteLineS([string] $Msg)\r\n    {\r\n        for ($i=0; $i -lt 10; $i++)\r\n        {\r\n            [Console]::WriteLine(\"Static: Loop $i - $Msg\")\r\n            Start-Sleep -MilliSeconds 100\r\n        }\r\n    }\r\n\r\n    WriteLineI([string] $msg)\r\n    {\r\n        for ($i=0; $i -lt 10; $i++)\r\n        {\r\n            [Console]::WriteLine(\"Instance: Loop $i - $Msg\")\r\n            Start-Sleep -MilliSeconds 100\r\n        }\r\n    }\r\n}\r\n\r\n$script = @'\r\n    param ([object] $writerInstance, [string] $Title)\r\n\r\n    class Writer\r\n    {\r\n        static WriteLineS([string] $Msg)\r\n        {\r\n            for ($i=0; $i -lt 10; $i++)\r\n            {\r\n                [Console]::WriteLine(\"Static: Loop $i - $Msg\")\r\n                Start-Sleep -MilliSeconds 100\r\n            }\r\n        }\r\n\r\n        WriteLineI([string] $msg)\r\n        {\r\n            for ($i=0; $i -lt 10; $i++)\r\n            {\r\n                [Console]::WriteLine(\"Instance: Loop $i - $Msg\")\r\n                Start-Sleep -MilliSeconds 100\r\n            }\r\n        }\r\n    }\r\n\r\n    # Create new instance\r\n    #$writerInstance = [Writer]::new()\r\n\r\n    # Instance write\r\n    $writerInstance.WriteLineI(\"$Title\")\r\n\r\n    # Static write\r\n    #[Writer]::WriteLineS(\"$Title\")\r\n'@\r\n\r\n$writer = [Writer]::new()\r\n\r\n$rsp = [runspacefactory]::CreateRunspacePool(1, 10, $host)\r\n$rsp.Open()\r\n\r\nclass Task\r\n{\r\n    [powershell] $powershell\r\n    [System.IAsyncResult] $Async\r\n}\r\n\r\n$tasks = @()\r\n\r\n1..5 | foreach {\r\n\r\n    $task = [Task]::new()\r\n    $tasks += $task\r\n\r\n    $task.powershell = [powershell]::Create()\r\n    $task.powershell.RunspacePool = $rsp\r\n    $task.Async = $task.powershell.AddScript($script).AddArgument($writer).AddArgument(\"Task $_\").BeginInvoke()\r\n}\r\n\r\nforeach ($task in $tasks)\r\n{\r\n    $task.powershell.EndInvoke($task.Async)\r\n    $task.powershell.Dispose()\r\n}\r\n\r\n$rsp.Dispose()\r\n\r\n```\r\nExpected:\r\n5 concurrently running 1 second loops (with sleep) should take about 1 second to run.\r\n\r\nActual Result:\r\nIt takes about 5 seconds to run indicating that the concurrent scripts are running serially.",
  "closed_at": "2017-06-08T01:00:04Z",
  "comments": [],
  "created_at": "2017-04-26T16:11:50Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 3651,
  "state": "closed",
  "title": "PowerShell class instance methods cannot run concurrently",
  "updated_at": "2019-10-03T15:04:11Z"
}