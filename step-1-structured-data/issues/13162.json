{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13162",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #13114.\r\n\r\nAllow explicitly specified named parameter to supersede the same one from hashtable splatting.\r\nThe work is done in parameter binder, so that parameters can be resolved to cover a parameter's official name, alias name, and unambiguous partial prefix name.\r\n\r\nThe changes covers covers Hashtable splatting in 3 scenarios:\r\n1. Cmdlet or advanced script invocation;\r\n2. Simple function invocation;\r\n3. `ScriptBlock.GetPowerShell(...)`, where the script block contains command invocation only and uses Hashtable splatting.\r\n\r\nSome code refactoring is done to `ParameterBinderController` to avoid redundant code being duplicated in `CmdletParameterBinderController` and `ScriptParameterBinderController`.\r\n\r\n### Breaking Change\r\nThis change introduces a minor breaking change to how Hashtable splatting works with **_simple functions_** when it contains key/value pairs that not a named parameters of the function. (**no breaking change to _cmdlet/advanced function_**)\r\n\r\nWith this change, the named parameters from Hashtable splatting will be moved to the end of the parameter/argument list, so as to late bind them after all explicitly specified named parameters are bound. Parameter binding for simple functions won't throw error when a specified named parameter cannot be found, but stuff the unknown named parameters to the `$args` of the simple function. Since the named parameters from Hashtable splatting are moved to the end of the argument list, the order it appears in `args` will be different, also, other explicitly specified parameters for a simple function gets bound earlier.\r\n\r\nFor example:\r\n```powershell\r\nfunction SimpleTest {\r\n    param(\r\n        $Name,\r\n        $Path\r\n    )\r\n    \"Name: $Name; Path: $Path; Args: $args\"\r\n}\r\n\r\n$hash = @{ Name = \"Hello\"; Blah = \"World\" }\r\nSimpleTest @hash \"MyPath\"\r\n```\r\n\r\n_Current Behavior_\r\n```none\r\n## 'MyPath' is not bound to `-Path` because it's the third argument in the argument list.\r\n## So it ends up being stuffed into '$args' along with `Blah = \"World\"`\r\n\r\nPS> SimpleTest @hash \"MyPath\"\r\nName: Hello; Path: ; Args: -Blah: World MyPath\r\n```\r\n_New Behavior_\r\n```none\r\n## The arguments from @hash are moved to the end of the argument list,\r\n## so `MyPath` becomes the first argument in the list and thus bound to '-Path'\r\n\r\nPS> SimpleTest @hash \"MyPath\"\r\nName: Hello; Path: MyPath; Args: -Blah: World\r\n```\r\n\r\nI think the breaking change is in Bucket 3 `Unlikely Grey Area` because:\r\n1. the current behavior is confusing because how the user explicitly specified arguments after the splatted Hashtable depends on the order of them in the argument list after expanding the Hashtable.\r\n2. it should be rare for user to call a simple function with Hashtable splatting which contains keys that are not parameter names of the function.\r\n3. even if (2) happens, say _the Hashtable is a config with all possible parameters and an user sends the config to functions_, it's very unlikely for `$args` to be used in a real scenario like this.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6431\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-05T05:59:54Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it should be rare for user to call a simple function with Hashtable splatting which contains keys that are not parameter names of the function.\r\n\r\nI have a concern about this statement. What if such Hashtable is a config with all possible parameters and an user sends the config to functions?",
      "created_at": "2020-07-13T05:28:03Z",
      "updated_at": "2020-07-13T05:28:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I have a concern about this statement. What if such Hashtable is a config with all possible parameters and an user sends the config to functions?\r\n\r\nFor cmdlet/advanced functions, this will fail.\r\nFor simple functions, then the user must be ignoring `$args` in those functions. It's unlikely they are depending on `$args` in this case at all.",
      "created_at": "2020-07-13T13:39:00Z",
      "updated_at": "2020-07-13T13:43:05Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@BrucePay would love your opinion on this behavior",
      "created_at": "2020-07-15T17:11:55Z",
      "updated_at": "2020-07-15T17:11:55Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw you said: \"so `MyPath` becomes the second argument in the list and thus bound\". But that's wrong - the splatted value doesn't occupy a parameter position so `MyPath` should be the first argument.  ",
      "created_at": "2020-07-15T21:53:24Z",
      "updated_at": "2020-07-15T21:53:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@bpayette Right, I just corrected that comment. Thanks!",
      "created_at": "2020-07-15T22:46:40Z",
      "updated_at": "2020-07-15T22:46:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and would like more community feedback.  The disagreement was on whether the splatted hashtable order matters.  In one case, the order dictates who overrides:\r\n\r\n```powershell\r\n$hash = @{ Name = 'hello' }\r\ntest-function @hash -Name World\r\ntest-function -Name World @hash\r\n```\r\n\r\nIf the ordering matters, then in the first case you get `Name = World` and the second case results in `Name = hello`.  However, if order does not affect parameter binding then in both cases `Name = World`.\r\n\r\nThe argument for ordering is that it's been a useful construct in bash where latter parameters win so you can use it to override parameters declared in aliases.\r\n\r\nThe argument against is that ordering (ignoring positional parameters) has never mattered in PowerShell so this is introducing a new concept and may confuse users.",
      "created_at": "2020-07-16T00:48:41Z",
      "updated_at": "2020-07-16T00:48:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ordering shouldn't matter. As @daxian-dbw it simply increases fragility and _massively_ decreases readability if order matters for this.\r\n\r\nWith the knowledge that order doesn't matter, I can **confidently** state that `Some-Command -ThisParam $value @otherParams` will definitely have the expected value for `-ThisParam` without ever looking at the `$otherParams` hashtable. That's powerful.\r\n\r\nIf order mattered, you would have to always keep track of if the parameter is before or after, and if it's before the hashtable you then have to look up whether the param you're worried about is in the hashtable. Way less obvious what's going on.\r\n\r\nAlso, the hashtable is much more likely to be the reused element there, _not_ the individual command call statement. I think it stands to reason that the more deliberate statement (assuming reuse of hashtable means that the params it contains are probably more general than just the one command call) with the lesser scope of effect should take precedence.",
      "created_at": "2020-07-16T02:27:00Z",
      "updated_at": "2020-07-16T03:46:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Ordering shouldn't matter.\r\n\r\nI agree. It seems it is not PowerShell native behavior to depend on order of _named parameters_.",
      "created_at": "2020-07-16T03:45:28Z",
      "updated_at": "2020-07-16T03:45:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Also if we consider `-Force` switch I think users would expect the priority of this parameter regardless of its location.\r\n",
      "created_at": "2020-07-16T03:49:23Z",
      "updated_at": "2020-07-16T03:49:23Z"
    },
    {
      "author": "AspenForester",
      "author_association": "NONE",
      "body": "It seems to me that this behavior of overriding a splat is a natural follow-on from `$PSDefaultParameterValues` that can be overridden by providing parameters... Like @SteveL-MSFT *just* said as I was about to click on the Comment button.",
      "created_at": "2020-07-16T16:53:55Z",
      "updated_at": "2020-07-16T16:53:55Z"
    },
    {
      "author": "markdomansky",
      "author_association": "NONE",
      "body": "> The argument for ordering is that it's been a useful construct in bash where latter parameters win so you can use it to override parameters declared in aliases.\r\n\r\nThis argument would extend that parameter behavior should be this way in all cases; so `Test -Name A -Name B` would not error and would output `B`.  It doesn't seem that's intended, desired, or included in this change.  Also, aliases in PS don't support parameters so people aren't leveraging that ability today.  I would not support this.  I want the error.\r\n\r\nThe explicit parameter should override anything splatted.  It's clearer, and more natural.\r\n\r\nAs a personal preference, I generally splat at the end.  Parameters and variables get long, so hitting the @ means I'm done with the line and know what's happening.  With order-matters, I (and presumably others) would have to alter their coding practice to leverage this.  That's the breaking change with order-matters.  If you splat first today, there's no change in behavior/code; if you splat late, it does.",
      "created_at": "2020-07-16T18:01:40Z",
      "updated_at": "2020-07-16T18:02:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> It seems it is not PowerShell native behavior to depend on order of named parameters.\r\n\r\nAgreed.",
      "created_at": "2020-07-19T02:33:44Z",
      "updated_at": "2020-07-19T02:33:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree that within PowerShell ordering has not mattered, so we should continue that.  On the breaking change for SimpleFunctions, parameters have always been implicitly positional, so the new change is accepted.",
      "created_at": "2020-07-22T22:05:25Z",
      "updated_at": "2020-07-22T22:06:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-31T02:00:26Z",
      "updated_at": "2020-07-31T02:00:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Great work!",
      "created_at": "2020-08-05T06:00:08Z",
      "updated_at": "2020-08-05T06:00:08Z"
    },
    {
      "author": "RipTornMist",
      "author_association": "NONE",
      "body": "Nice Work!",
      "created_at": "2020-08-05T06:17:14Z",
      "updated_at": "2020-08-05T06:17:14Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Should this be assigned to a milestone?",
      "created_at": "2020-08-10T03:45:24Z",
      "updated_at": "2020-08-10T03:45:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:21:40Z",
      "updated_at": "2020-08-17T22:21:40Z"
    }
  ],
  "created_at": "2020-07-12T23:45:46Z",
  "number": 13162,
  "state": "closed",
  "title": "Allow explicitly specified named parameter to supersede the same one from hashtable splatting",
  "updated_at": "2020-08-17T22:21:40Z"
}