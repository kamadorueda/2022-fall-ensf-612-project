{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3830",
  "author": "mklement0",
  "body": "<sup>Inspired by #3695.</sup>\r\n\r\nThe builtin `foreach` _alias_ for the `ForEach-Object` _cmdlet_ keeps causing confusion with the `foreach` _statement_.\r\n\r\nGiven that the cmdlet and the statement are conceptually analogous, perhaps one way to mitigate the confusion is to allow the `foreach` _statement_ to have an _implied_ iteration variable, namely `$_`, just as when using `ForEach-Object`.\r\n\r\nDesired behavior\r\n-----------------\r\n\r\n```powershell\r\n# This works currently: an *explicit* iteration variable is needed.\r\n> foreach ($suffix in 1, 2, 3) { \"A\" + $suffix }\r\nA1\r\nA2\r\nA3\r\n\r\n# Wishful thinking: allow *omitting* an iteration variable to use $_ by default,\r\n# as in a pipeline, which would be the equivalent of:\r\n#   1, 2, 3 | ForEach-Object { \"A\" + $_ }\r\n> foreach (1, 2, 3) { \"A\" + $_ }\r\nA1\r\nA2\r\nA3\r\n```\r\n\r\nCurrently, one is forced to choose between:\r\n\r\n* more concise, but decidedly _slower_ pipeline syntax: `1, 2, 3 | ForEach-Object { \"A\" + $_ }`\r\n\r\n* faster, but more verbose `foreach` syntax: `foreach($suffix in 1, 2, 3) { \"A\" + $suffix }`\r\n\r\nThe suggested `foreach` syntax evens the playing field and allows a solution that is both concise _and_ performant.\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.1) \r\n```\r\n\r\n",
  "closed_at": "2017-09-06T23:38:07Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Is the language enhancement approved or we need PowerShell-Committee conclusion? ",
      "created_at": "2017-08-17T09:52:23Z",
      "updated_at": "2017-08-17T09:52:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside - and arguably this an argument both for and against this enhancement - note that even the current documentation doesn't know the difference between the `foreach` statement and the `ForEach-Object` cmdlet - see https://github.com/PowerShell/PowerShell-Docs/issues/1514\r\n\r\nI still think the enhancement makes a lot of sense, but the documentation needs to be fixed too / either way.",
      "created_at": "2017-08-18T03:58:30Z",
      "updated_at": "2017-08-18T04:00:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov my opinion is that this isn't big enough or controversial to warrant a RFC, but I'll have the committee review this",
      "created_at": "2017-08-28T21:50:12Z",
      "updated_at": "2017-08-28T21:50:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The @PowerShell/powershell-committee has reviewed this and decided against this proposal.\r\n\r\nWe have two primary concerns:\r\n\r\n* There are important distinctions between `ForEach-Object` and the `foreach` statement and making them more similar makes it more difficult to teach these distinctions.\r\n* The bigger concern is that `$_` will commonly refer to different objects in what looks like potentially the same scope:\r\n\r\n```powershell\r\nforeach (Get-Process)\r\n{\r\n    # The first $_ refers to a System.Diagnostics.Process\r\n    # The second $_ refers to a System.Diagnostics.ProcessModule\r\n    $_.Modules | % { $_.ModuleName }\r\n}\r\n```",
      "created_at": "2017-09-06T23:38:07Z",
      "updated_at": "2017-09-06T23:38:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A post-mortem, just to indulge reveries of a better world:\r\n\r\n> There are important distinctions between ForEach-Object and the foreach statement and making them more similar makes it more difficult to teach these distinctions.\r\n\r\nYes, there are, and the way to highlight these _distinctions_ is to:\r\n\r\n* fix the documentation, as suggested.\r\n\r\n* (I get that it's too late for that) remove the unfortunate `foreach` _alias_\r\n\r\nBy contrast, implicit use of `$_` is a _commonality_ worth implemeting.\r\n\r\n---\r\n\r\n> The bigger concern is that $_ will commonly refer to different objects in what looks like potentially the same scope:\r\n\r\nThe very same concern applies to `ForEach-Object` already:\r\n\r\n```powershell\r\nGet-Process | ForEach-Object {\r\n    # The first $_ refers to a System.Diagnostics.Process\r\n    # The second $_ refers to a System.Diagnostics.ProcessModule\r\n    $_.Modules | % { $_.ModuleName }\r\n}\r\n```",
      "created_at": "2017-09-07T01:17:38Z",
      "updated_at": "2017-09-07T01:17:38Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Our hypothesis is that nested ForEach-Object is significantly less common than `ForEach-Object` inside a for statement.\r\n\r\nWe have plenty of longstanding feedback, often conflicting, but the feedback on `$_` is skewed negatively, so that plays into this decision as well.",
      "created_at": "2017-09-07T02:37:13Z",
      "updated_at": "2017-09-07T02:37:13Z"
    }
  ],
  "created_at": "2017-05-19T23:07:39Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Won't Fix",
    "WG-Language",
    "Committee-Reviewed"
  ],
  "number": 3830,
  "state": "closed",
  "title": "Support a foreach statement with implicit iteration variable $_ for consistency with the ForEach-Object cmdlet",
  "updated_at": "2017-09-07T04:01:00Z"
}