{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6590",
  "author": "chucklu",
  "body": "1. I want to open powershell by right click in windows libraries\r\nYou can check this issue https://github.com/git-for-windows/git/issues/1229\r\n\r\n2. I hope you can just provide an menu as \u201copen powershell here\u201d instead of powershell then two submenus.\r\n    I  already set the powershell open as Administrator by default.\r\n\r\n\r\n",
  "closed_at": "2018-05-02T21:43:26Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chucklu:\r\n\r\n* ~~PowerShell _Core_ currently doesn't come with _any_ shell integration on installation, as far as I can tell, so I can encourage you to open a new issue to ask for that~~.\r\n\r\n* Recent editions of _Windows 10_ have switched from offering `Open command window here` (`cmd.exe`) to `Open PowerShell window here` (`powershell.exe`)  _when you hold down `Shift` before right-clicking_.\r\n  * This works even inside libraries when you click on a _specific folder_.\r\n  * By contrast, it doesn't - and conceptually _cannot_ work - if you right-click an _abstract library category_ such as `Document` or the _window background_ while in the libraries view, given that a library location by definition is not a _single_ location, but a _collection_  of locations.\r\n\r\nThe latter shell integration seems to come with the _OS_ (and, as an aside, is [currently broken](https://superuser.com/a/1310259/139307) if the target folder path contains `'`) and only targets _Windows PowerShell_, not PowerShell Core (which is what this repo is about).\r\n\r\n> instead of powershell then two submenus\r\n\r\nCan you be more specific? Where do you see that?\r\n",
      "created_at": "2018-04-08T21:51:33Z",
      "updated_at": "2018-04-29T15:23:43Z"
    },
    {
      "author": "chucklu",
      "author_association": "CONTRIBUTOR",
      "body": "The two submenus come with 6.1.0 , just right click on desktop, it will show these two submenus.\r\nIt's boring for me to choose open here and open as Administrator.\r\nI already set it open as Administrator by default.\r\n![default](https://user-images.githubusercontent.com/3004057/38474725-bbb3fe88-3bd4-11e8-8376-ef266259190a.png)\r\n\r\nI have checked what you said. The powershell here only worked when I right click on one folder of library.\r\n\r\nWhat I want is when I right click in folder(just the blank space in folder), then I can see the powershell here.\r\nWhen I want to use powershell, I will first open the target folder, then right click in it , then open the command.\r\nMost time ,I  already in target folder, it's not convenient for me  back to the top folder.\r\n \r\n",
      "created_at": "2018-04-09T01:12:12Z",
      "updated_at": "2018-04-09T01:12:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chucklu: \r\n\r\nAh, I see - I hadn't noticed the File Explorer integration, because I've been installing via Chocolately: I now see that there's an opt-in File Explorer context-menu integration in the installer (wizard) GUI.\r\n\r\n~~The issue you describe affects Windows 7 (not sure about 8.1), not Windows 10.~~\r\n\r\nTo summarize the linked issue, in order to get the context-menu commands when right-clicking in the background (empty space) of a folder navigated to via the _Libraries_ view, you need a separate registry entry at: \r\n\r\n`[HKEY_CLASSES_ROOT\\LibraryFolder\\background]`\r\n\r\nThis probably needs to be added [here](https://github.com/PowerShell/PowerShell/blob/77f36498e613037babcc99029ca386e36f3b7b59/assets/Product.wxs#L175).\r\n\r\nAs for not wanting the context-menu command to be _nested_: please open a new issue.\r\n",
      "created_at": "2018-04-09T02:51:19Z",
      "updated_at": "2018-04-09T03:10:58Z"
    },
    {
      "author": "chucklu",
      "author_association": "CONTRIBUTOR",
      "body": "`The issue you describe affects Windows 7 (not sure about 8.1), not Windows 10.`\r\nI am using win10, the version is \r\n```powershell\r\nPS C:\\Users\\clu\\Desktop> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2018-04-09T03:06:07Z",
      "updated_at": "2018-04-09T03:06:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chucklu: \r\n\r\nThanks - you're right, it affects Windows 10 too (not sure what I tried earlier to wrongly convince me otherwise).\r\n\r\nHowever, the problem is somewhat mitigated by the fact that the Libraries view is no longer offered _by default_ on Windows 10.\r\n\r\nEither way, we know what the fix is.\r\n",
      "created_at": "2018-04-09T03:10:40Z",
      "updated_at": "2018-04-09T03:11:41Z"
    },
    {
      "author": "chucklu",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0  I have submit a new issue https://github.com/PowerShell/PowerShell/issues/6599 for the second problem.\r\nThanks a lot!",
      "created_at": "2018-04-09T03:28:26Z",
      "updated_at": "2018-04-09T03:28:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Upcoming Windows 10 versions will offer \"Sets\" - it is new desktop conception. In addition, the lifetime of Windows 7 ends. \r\nSo I guess there's no point adding integration with libraries for one-two release.",
      "created_at": "2018-04-09T05:19:29Z",
      "updated_at": "2018-04-09T05:19:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\n> Upcoming Windows 10 versions will offer \"Sets\" \r\n\r\n[Yes](https://blogs.windows.com/windowsexperience/2018/04/04/announcing-windows-10-insider-preview-build-17639-for-skip-ahead/), but that doesn't seem to be related to how File Explorer's context menus are defined.\r\n\r\nGiven that the Libraries view is still a part of Windows 10, despite being hidden by default, my vote is for making this fix, which sounds simple enough.\r\n\r\n",
      "created_at": "2018-04-09T08:38:37Z",
      "updated_at": "2018-04-09T08:38:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have no categorical objections.",
      "created_at": "2018-04-09T12:38:20Z",
      "updated_at": "2018-04-09T12:38:20Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I would be happy to add this to the existing list of registry entries (there are already 4 sets to support context menu on folder, background, Desktop and Drive, therefore this would just be another in the same style). Thanks for the pointers already. I will do this soon (in 1-2 weeks), therefore expect it to be present in preview3.\r\nThe more important question is why the chocolatey package has not got an option for this feature since the MSI has properties to allow for that via quiet (=non-UI) install as well. The properties are documented in this issue at the moment: https://github.com/PowerShell/PowerShell-Docs/issues/2007\r\nCc @DarwinJS @SteveL-MSFT @sdwheeler ",
      "created_at": "2018-04-29T15:07:12Z",
      "updated_at": "2018-04-29T15:07:12Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 - chocolately packages don't typically try to expose every configuration option of an underlying installer.\r\n\r\nHowever, Chocolatey natively supports passing arguments to the installer the package calls.\r\n\r\nI just tested this an it works without any changes to the package:\r\n\r\n`choco install -pre -confirm powershell-core --install-arguments='\"ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1\"'`\r\n\r\nI will add the above to the description of the package since it is challenging to know this exists if you haven't really dug into chocolatey.\r\n",
      "created_at": "2018-05-03T02:50:39Z",
      "updated_at": "2018-05-03T02:50:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's great to know, @DarwinJS, and thanks for adding it to the package description.",
      "created_at": "2018-05-03T02:53:42Z",
      "updated_at": "2018-05-03T02:53:42Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "It would be nice if this context menu also added the same two run options to .ps1 files.",
      "created_at": "2018-05-03T02:54:51Z",
      "updated_at": "2018-05-03T02:54:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@DarwinJS: Good idea, but I suggest you create a new issue for that.",
      "created_at": "2018-05-03T02:56:40Z",
      "updated_at": "2018-05-03T02:56:40Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Why isn't the MSI cleaning up old paths? ",
      "created_at": "2018-05-03T02:56:55Z",
      "updated_at": "2018-05-03T02:56:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please open new Issue if the package has a bug.",
      "created_at": "2018-05-03T04:41:09Z",
      "updated_at": "2018-05-03T04:41:09Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I have opened a couple issues - also one with the name for the REGISTER_MANIFEST property.\r\n\r\nWanted to mention here that in order to use these arguments you should use the powershell-core chocolatey package directly, not the pwsh package.\r\n\r\nOnce the arguments the MSI can receive seems more stable, I will add official chocolatey package parameters that will be better behaved for passing through from virtual packages like \"pwsh\"",
      "created_at": "2018-05-03T12:35:03Z",
      "updated_at": "2018-05-03T12:35:03Z"
    }
  ],
  "created_at": "2018-04-08T03:03:19Z",
  "labels": [
    "Area-Maintainers-Build"
  ],
  "number": 6590,
  "state": "closed",
  "title": "Can't find \"powershell\" in context menu when I am in windows libraries",
  "updated_at": "2018-05-03T12:35:03Z"
}