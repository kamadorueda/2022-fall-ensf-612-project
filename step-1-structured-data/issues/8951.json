{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8951",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nClose #8890\r\n\r\nAdd new parameter `-UseQuotes` to Export-Csv and ConvertTo-Csv cmdlets:\r\n- Never - don't quote anything.\r\n- Always - quote everything (current and default behavior).\r\n- AsNeeded - only quote fields that need it (they contain a delimiter character).\r\n\r\nThe PR doesn't change default to `AsNeeded` as requested in #8890. We could do this later because it is breaking change and we need to discuss this.\r\n\r\nThe PR doesn't add `StringsOnly`. This allows to produce broken output csv files where values contain unquoted delimiter. `AsNeeded` is best choice. If I wrong we can add this later.\r\n\r\n## PR Context\r\n\r\nPlease look #8890. \r\nSome application don't like quotes in cvs files.\r\n\r\n/cc @DavidBerg-MSFT \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/3900\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-03-06T19:59:16Z",
  "comments": [
    {
      "author": "DavidBerg-MSFT",
      "author_association": "NONE",
      "body": ">                 dest.Append(c);\r\n\r\nFYI, building the string up one at a time is really slow... (I know, not new code).\r\n\r\nI was curious how slow, so I came up with four alternatives:\r\n\r\n* Append One Char at a time - current approach\r\n* Append All or One at a time - check for quote, then pick Append String or Char\r\n* Append Incrementally - run through the string char for char, but append in chunks\r\n* Append All or Incrementally - check for quote, then chunk\r\n\r\nFor test data without quotes, the times are:\r\n\r\n* Append One Char at a time: 374\r\n* Append All or One at a time: 163\r\n* Append Incrementally: 331\r\n* Append All or Incrementally: 163\r\n\r\nIn other words, it really pays off (2x faster) to add the check (if indexof('\"') == -1 then append string).  But what if the string has a quote (or more)?   How much time does it add?\r\n\r\nFor test data with a quote, the times are:\r\n\r\n* Append One Char at a time: 382\r\n* Append All or One at a time: 404\r\n* Append Incrementally: 348\r\n* Append All or Incrementally: 379\r\n\r\nSo adding the extra check added ~6% overhead in this case. (which we can make back up by using an incremental chunked approach).  Probably worth it since the bulk of strings probably won't have embedded quotes, so we'll probably average 2x faster.\r\n\r\n\r\n\r\n\r\n---\r\nRefers to: src/Microsoft.PowerShell.Commands.Utility/commands/utility/CSVCommands.cs:1081 in fe379e2. [](commit_id = fe379e2122f4ee04cccbd7d30fe00d27bbbd3899, deletion_comment = False)",
      "created_at": "2019-02-22T20:55:48Z",
      "updated_at": "2019-02-22T20:55:48Z"
    },
    {
      "author": "DavidBerg-MSFT",
      "author_association": "NONE",
      "body": ">                 dest.Append(c);\r\n\r\nFYI, here's the optimized code:\r\n\r\n```\r\n        private static void AddStringAllOrIncremental(StringBuilder dest, string source)\r\n        {\r\n            if (source == null)\n            {\n                return;\n            }\n\n            // Adding Double quote to all strings\n            dest.Append('\"');\n            if (source.IndexOf('\"') >= 0) // shortcut if escape not necessary\r\n            {\r\n                int startIndex = 0;\r\n                for (int i = 0; i < source.Length; i++)\r\n                {\r\n                    char c = source[i];\r\n\r\n                    // Double quote in the string is escaped with double quote\r\n                    if (c == '\"')\r\n                    {\r\n                        dest.Append(source, startIndex, i - startIndex);  // copy everything up to this point\r\n                        dest.Append('\"');\r\n                        startIndex = i;\r\n                    }\r\n                }\r\n                dest.Append(source, startIndex, source.Length - startIndex); // copy the rest of the string\r\n            }\n            else\r\n            {\r\n                dest.Append(source);\r\n            }\n\n            dest.Append('\"');\r\n        }\r\n\r\n    }\r\n\r\n```\r\n\r\n---\r\nIn reply to: [466544670](https://github.com/PowerShell/PowerShell/pull/8951#issuecomment-466544670) [](ancestors = 466544670)\r\n\r\n---\r\nRefers to: src/Microsoft.PowerShell.Commands.Utility/commands/utility/CSVCommands.cs:1081 in fe379e2. [](commit_id = fe379e2122f4ee04cccbd7d30fe00d27bbbd3899, deletion_comment = False)",
      "created_at": "2019-02-22T20:58:00Z",
      "updated_at": "2019-02-22T20:58:00Z"
    },
    {
      "author": "DavidBerg-MSFT",
      "author_association": "NONE",
      "body": ">                 dest.Append(c);\r\n\r\nIn fairness, might be better as a separate change, since it's an optimization of existing code, only indirectly related to the new code.\r\n\r\n---\r\nIn reply to: [466545320](https://github.com/PowerShell/PowerShell/pull/8951#issuecomment-466545320) [](ancestors = 466545320,466544670)\r\n\r\n---\r\nRefers to: src/Microsoft.PowerShell.Commands.Utility/commands/utility/CSVCommands.cs:1081 in fe379e2. [](commit_id = fe379e2122f4ee04cccbd7d30fe00d27bbbd3899, deletion_comment = False)",
      "created_at": "2019-02-22T20:59:54Z",
      "updated_at": "2019-02-22T20:59:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DavidBerg-MSFT Many thanks! It is very interesting! \r\nI hope the PR will fast reviewed and we get the new, very useful feature in 6.2 version. Then we could work on optimizations (also we plan to move to .Net Core 3.0 after releasing 6.2 that give us performance benefits too).\r\n\r\n@SteveL-MSFT If your team is interesting to have this in 6.2 please review.",
      "created_at": "2019-02-23T18:44:49Z",
      "updated_at": "2019-02-23T18:44:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DavidBerg-MSFT agree that the code optimization should be a separate PR.\r\n\r\n@iSazonov can you address the Codacy issues?\r\n\r\nHaving taken a look at the code, the risk is small so we may be able to take this for 6.2-GA, but it won't make it into RC.",
      "created_at": "2019-03-01T17:53:28Z",
      "updated_at": "2019-03-01T17:53:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> can you address the Codacy issues?\r\n\r\nDone.",
      "created_at": "2019-03-01T18:35:26Z",
      "updated_at": "2019-03-01T18:35:26Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Looks like there is still 2 minor Codacy updates needed.",
      "created_at": "2019-03-06T18:35:56Z",
      "updated_at": "2019-03-06T18:35:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga First was fixed. Second is false positive.",
      "created_at": "2019-03-06T19:54:56Z",
      "updated_at": "2019-03-06T19:54:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Will this be added to  6.2-GA?",
      "created_at": "2019-03-07T12:45:27Z",
      "updated_at": "2019-03-07T12:45:27Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Can you ask this in the maintainers teams channel with a link to the PR with your reason why and an analysis of the regression risk?",
      "created_at": "2019-03-08T04:52:54Z",
      "updated_at": "2019-03-08T04:52:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 This is only an informational question to the previous Steve's comment. I don't need to have it in 6.2.",
      "created_at": "2019-03-08T05:03:59Z",
      "updated_at": "2019-03-08T05:03:59Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "We have already forked for 6.2-GA based no RC.1.  So, this won't be in the build.",
      "created_at": "2019-03-08T05:12:24Z",
      "updated_at": "2019-03-08T05:12:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DavidBerg-MSFT I tested your code on .Net Core 3.0 Preview3 and can not confirm results. In my tests original code is faster. \r\nWhat .Net Core did you use? Could you share code of your tests?",
      "created_at": "2019-03-15T14:02:41Z",
      "updated_at": "2019-03-15T14:02:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I looked the code again. StringBuilder delays only on reallocating buffers. We reuse StringBuilder and exclude such re-allocations. Underlying method in StringBuilder copies very efficient by means of indexer for both char and strings. So I can not find how we could speed up the code - IndexOf() slow down the code and my tests confirm this.",
      "created_at": "2019-03-18T09:34:46Z",
      "updated_at": "2019-03-18T09:34:46Z"
    }
  ],
  "created_at": "2019-02-22T13:36:56Z",
  "number": 8951,
  "state": "closed",
  "title": "Add UseQuotes parameter",
  "updated_at": "2019-03-18T09:34:47Z"
}