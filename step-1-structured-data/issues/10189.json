{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10189",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\n- Adds an experimental flag called \"Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace\". All experimental functionality described below is enabled/disabled using that flag.\r\n- Adds an experimental `-Runspace` parameter `Get-PSBreakpoint`, `Set-PSBreakpoint`, `Enable-PSBreakpoint`, `Disable-PSBreakpoint`, and `Remove-PSBreakpoint`.\r\n- Refactors the classes behind the `*-PSBreakpoint` cmdlets so that they all work consistently. This refactoring did not change the behavior of these cmdlets beyond adding support for runspace breakpoint management.\r\n- Removes the recently added `New-PSBreakpoint` experimental cmdlet in favor of working with the older, more well known `*-PSBreakpoint` cmdlets for runspace breakpoint management.\r\n- Refactors `DebugRunspaceCommand` and `DebugJobCommand` so that they both derive from a common `PSRemoteDebugCmdlet` base class. As part of this refactoring, some of the resource strings have been moved to be co-located with the new base class where they are used.\r\n- Fixes a very minor issue where a remote breakpoint would not be displayed properly in the host when entering a remote debugger.\r\n- Adds `SetCommandBreakpoint`, `SetVariableBreakpoint`, `SetLineBreakpoint`, `EnableBreakpoint`, `DisableBreakpoint`, and `RemoveBreakpoint` public APIs to the `Debugger` class, plumbs them through the engine, and hooks them up for remote debugger work. Also hooks up the `GetBreakpoint`, `GetBreakpoints`, and `SetBreakpoints` `Debugger` class APIs for remote debugger work.\r\n- Adds a `-NoInitialBreak` experimental parameter to `Debug-Runspace` and `Debug-Job` that allows users to attach the debugger without invoking a `BreakAll`. The corresponding methods for the same have boolean parameters allowing this as well.\r\n\r\n\r\n## PR Context\r\n\r\nThis PR was opened in response to [this discussion](https://github.com/PowerShell/PowerShell/pull/8923#issuecomment-503267596) between @TylerLeonhardt, @PaulHigin and I.\r\n\r\nIt helps because:\r\n- It allows scripters to fully manage breakpoints in a remote runspace without having to use `Debug-*` to attach the debugger to that runspace. This provides a better, more PowerShell-oriented approach to debugging.\r\n- It allows @TylerLeonhardt to attach a debugger to a runspace without invoking a `BreakAll` in PSES.\r\n- It simplifies the implementation behind `*-PSBreakpoint` cmdlets.\r\n- The implementation behind `Debug-Runspace` and `Debug-Job`, as defined in `DebugRunspaceCommand` and `DebugJobCommand`, respectively, had a lot of duplicated logic and a few unintentional differences. Moving these classes into a shared base class structure eliminates the unintentional differences and removes the duplicated code.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] Some (experimental features are required if breaking changes are included).\r\n- **Experimental features**\r\n    - [X] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [X] Experimental feature name(s): Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [X] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-06-22T06:00:16Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Is it possible to split the PR on some small ones? The PR is so large that we can wait too long for approval.",
      "created_at": "2019-07-22T06:55:04Z",
      "updated_at": "2019-07-22T06:55:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> @KirkMunro Is it possible to split the PR on some small ones? The PR is so large that we can wait too long for approval.\r\n\r\nThat sounds like quite a bit more work, with little tangible value; however, a \"review map\" might help. Here is a break down of the changes in each file, with like changes grouped together to allow them to be reviewed more easily. Between these extra details and being able to mark files as viewed in the GitHub UI, I think it should be much easier for others to review this PR.\r\n\r\n### Cleanup of changes done in @TylerLeonhardt's other PR that this supercedes\r\n\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/New-PSBreakpoint.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/EnableDisableRunspaceDebugCommand.cs`\r\n- simple removal of changes added by @TylerLeonhardt in PR #8923; instead of\r\ncreating breakpoints using `New-PSBreakpoint` and passing breakpoints into\r\n`Enable-RunspaceDebug`, breakpoints are managed on a runspace using the\r\noriginal set of `*-PSBreakpoint` cmdlets.\r\n\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/PSBreakpointCreationBase.cs`\r\n- simple removal of previous refactoring work that was done in the same PR\r\n\r\n`src/Modules/Unix/Microsoft.PowerShell.Utility/Microsoft.PowerShell.Utility.psd1`\r\n`src/Modules/Windows/Microsoft.PowerShell.Utility/Microsoft.PowerShell.Utility.psd1`\r\n- removed `New-PSBreakpoint` reference\r\n- changed experimental feature name/description to match what it actually does now\r\n(this was previously missing from the Windows version of the file, and would have been\r\nadded in #9907 if this PR didn't supercede it)\r\n\r\n`src/System.Management.Automation/engine/InitialSessionState.cs`\r\n- removed `New-PSBreakpoint` reference\r\n\r\n`test/powershell/engine/Basic/DefaultCommands.Tests.ps1`\r\n- removed `New-PSBreakpoint` reference\r\n\r\n`test/powershell/Modules/Microsoft.PowerShell.Utility/Enable-RunspaceDebug.Tests.ps1`\r\n- removed this file as it was based on the other PR that this supercedes\r\n\r\n### Changes for Pester tests\r\n\r\n`test/powershell/Modules/Microsoft.PowerShell.Utility/RunspaceBreakpointManagement.Tests.ps1`\r\n- added tests for runspace breakpoint management (both local and remote runspaces)\r\n\r\n`test/tools/TestMetadata.json`\r\n- updated to match new experimental feature name and test file\r\n\r\n### Changes to support `-Runspace` parameter in `*-PSBreakpoint` commands\r\n\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/RunspaceParameter.cs`\r\n- defined a transformation attribute that converts integers, GUIDs and strings into\r\nrunspaces; this is for use in the `-Runspace` parameter added to the `*-PSBreakpoint`\r\ncmdlets updated below (it keeps the number of parameter sets low in those commands\r\nwhile still supporting multiple ways to reference a runspace)\r\n\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/PSBreakpointCommandBase.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/PSBreakpointAccessorCommandBase.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/Get-PSBreakpoint.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/Set-PSBreakpoint.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/PSBreakpointUpdaterCommandBase.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/Disable-PSBreakpoint.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/Enable-PSBreakpoint.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/Remove-PSBreakpoint.cs`\r\n- added `-Runspace` parameter to each `*-PSBreakpoint` cmdlet\r\n- standardized parameter set names across this set of cmdlets\r\n- refactored `*-PSBreakpoint` cmdlets into class hierarchy, as follows:\r\n    ```none\r\n                           PSBreakpointCommandBase\r\n                              /              \\\r\n    PSBreakpointAccessorCommandBase        PSBreakpointUpdaterCommandBase\r\n                 |                                       |\r\n     Get/SetPSBreakpointCommand        Disable/Enable/RemovePSBreakpointCommand\r\n    ```\r\n\r\n### Changes to support managing breakpoints in debugger via the SDK\r\n\r\n`src/System.Management.Automation/engine/debugger/Breakpoint.cs`\r\n- fixed minor issue in display of breakpoint that was hit when attaching\r\nthe debugger to a remote runspace\r\n- updated RemoveSelf method to return a bool if a breakpoint was removed\r\n\r\n`src/System.Management.Automation/engine/debugger/debugger.cs`\r\n- added SetCommandBreakpoint, SetLineBreakpoint, SetVariableBreakpoint,\r\nRemoveBreakpoint, EnableBreakpoint, and DisableBreakpoint public methods\r\nin Debugger class\r\n- added DebugJob method that allows you to attach a debugger to a job\r\nwithout invoking a BreakAll\r\n- changed return type of AddCommandBreakpoint, AddLineBreakpoint and\r\nAddVariableBreakpoint on ScriptDebugger class to be specific to the type\r\nof breakpoint they add\r\n- removed New*Breakpoint methods on ScriptDebugger class (these have been\r\nsuperceded by the Set*Breakpoint public methods)\r\n- updated Remove*Breakpoint methods to return a bool indicating whether or\r\nnot a breakpoint was removed\r\n- defined overrides in ScriptDebugger for the *Breakpoint methods that were\r\nadded to the base class, and grouped them together (this involved replacing\r\nsome methods that were previously internal)\r\n- moved a few methods into proper groupings according to existing regions\r\n- defined overrides in NestedDebugger for the *Breakpoint methods that were\r\nadded to the base class\r\n- added internal virtual function names for breakpoint functions that can now\r\nbe invoked in a remote runspace\r\n\r\n`src/System.Management.Automation/engine/remoting/client/remoterunspace.cs`\r\n- added overrides to remote debugger for the *Breakpoint methods that were\r\nadded to the base class\r\n- added internal helper method to handle invoking those methods remotely,\r\ncapturing their results, and processing any errors\r\n\r\n`src/System.Management.Automation/engine/remoting/client/Job.cs`\r\n- added IsFinished property to simplify code elsewhere that checks if a job\r\nis finished\r\n- added new *Breakpoint* methods to JobDebugger class and grouped them together\r\n\r\n`src/System.Management.Automation/engine/server/ServerRunspacePoolDriver.cs`\r\n- added support for the new *Breakpoint virtual functions to the\r\nPreProcessDebuggerCommand method\r\n- added overrides for *Breakpoint methods to ServerRemoteDebugger class\r\n- added override for new DebugJob overload method to ServerRemoteDebugger class\r\n\r\n`src/System.Management.Automation/engine/serialization.cs`\r\n- added `RehydrationFlags.NullValueOk` to `Script` and `Action` properties of\r\nbreakpoints (this ensures they are set to null instead of empty when rehydrated,\r\nwhich matches how they are set before they are dehydrated)\r\n\r\n`src/System.Management.Automation/engine/hostifaces/PSDataCollection.cs`\r\n- added AddRange method to simplify adding a collection to a collection\r\n\r\n### Addition of `-NoInitialBreak` parameter to `Debug-Job` and `Debug-Runspace`, plus refactoring\r\n\r\n`src/Microsoft.PowerShell.Commands.Utility/resources/Debugger.resx`\r\n`src/System.Management.Automation/resources/RemotingErrorIdStrings.resx`\r\n`src/System.Management.Automation/resources/DebuggerStrings.resx`\r\n- moved a bunch of resource strings into src/System.Management.Automation/resources/DebuggerStrings.resx\r\nas part of the refactoring of `DebugRunspaceCommand` and `DebugJobCommand` under\r\na common base class\r\n- added some resource strings\r\n\r\n`src/System.Management.Automation/engine/remoting/commands/PSRemoteDebugCmdlet.cs`\r\n`src/Microsoft.PowerShell.Commands.Utility/commands/utility/DebugRunspaceCommand.cs`\r\n`src/System.Management.Automation/engine/remoting/commands/DebugJob.cs`\r\n- added `-NoInitialBreak` parameter to `Debug-Runspace` and `Debug-Job` cmdlets\r\n- moved common code out of the cmdlet classes into new `PSRemoteDebugCmdlet` class\r\n- refactored these two cmdlets to eliminate unintended differences in the UX they\r\nprovided into a class hierarchy, as follows:\r\n    ```none\r\n               PSRemoteDebugCmdlet\r\n                 /              \\\r\n    DebugJobCommand        DebugRunspaceCommand\r\n    ```\r\n",
      "created_at": "2019-07-22T20:28:01Z",
      "updated_at": "2019-07-22T20:41:19Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I'll try to take a look at this later this week, but may not get to it until the following week.  Since this is such a large change I will mark it for committee review.",
      "created_at": "2019-07-22T22:14:44Z",
      "updated_at": "2019-07-22T22:14:44Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin FYI for when you do get to look at this:\r\n\r\nI'm experiencing an intermittent issue with my `RunspaceBreakpointManagement.Tests.ps1` Pester test series where setting a breakpoint in a remote runspace (i.e. one associated with a background job) gets stuck. On my system, when I don't have my VS 2019 debugger connected to the PowerShell session process, I can very often reproduce my intermittent issue the _second_ time that I manually invoke that Pester test file in a single PowerShell session. All tests pass in the first run, but the second run hangs at a certain point (the moment the first MS-PSRDP call is made. Digging in to this on my system, I believe it's getting stuck between the moment it invokes the virtual `__Set-PSBreakpoint` function in a nested PowerShell instance, which should set the breakpoint on the remote runspace. The local process seems to be waiting for the pipeline to finish, and the debugger in the remote (job) process seems to be waiting for a client to connect to it, so this seems to have to do with the MS-PSRDP. If you wait long enough (30 minutes), the Pester test eventually fails (probably due to a timeout) with a `PSRemotingTransportException`.\r\n\r\nIn the PR that this supercedes, @TylerLeonhardt switched many of the collections to their concurrent equivalent, and he updated the breakpoint ID increment to be thread safe as well. Those changes were preserved through this PR work.\r\n\r\nI know little about how the MS-PSRDP plumbing works other than what I learned while working on this PR, so I wanted to let you know what I ran into so that you could have a look when you get to this review work because so far I can't figure out the root cause.",
      "created_at": "2019-07-23T19:56:35Z",
      "updated_at": "2019-07-23T20:04:27Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "cc @SteveL-MSFT\r\nI haven't had a chance yet to look at this, but should by next week.  However, I agree with @iSazonov that it makes sense to break this into smaller scoped changes.  In particular, the changes to the remoting protocol should be separate.  To support these remoting changes, we need to update the protocol version and update capability to ensure down level compatibility.  In addition, the protocol documents must also be updated with the new protocol version additions.  This is an absolute requirement for Windows.\r\n\r\nI don't believe we ported all of the remote debugging tests (cc @JamesWTruher), and this makes it difficult to know if any regressions are introduced.  So we need to be careful of any changes we make to the remoting parts.",
      "created_at": "2019-07-24T16:00:31Z",
      "updated_at": "2019-07-24T16:00:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PaulHigin can you summarize what exactly you'd like the @PowerShell/powershell-committee to review here?",
      "created_at": "2019-07-24T21:52:12Z",
      "updated_at": "2019-07-24T21:52:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We appreciate the effort to help improve the debugging experience, however, this PR as it currently exists is too large (size and scope) and risky (due to lack of our own complete test coverage) to accept.  If we are to review PRs like this in the future, we will need:\r\n\r\n  - The changes to be split into multiple PRs:\r\n    - refactoring with adequate test coverage (PS Team has existing debugging tests that can be shared, but needs to be ported from an internal (will not be OSS) test framework to Pester/XUnit)\r\n    - local debugging\r\n    - remote debugging (evaluate if this is necessary due to protocol changes)\r\n  - Protocol changes necessitate a change to the protocol documentation which is not a small effort and should be a separate item and also involves cross remoting version validation\r\n",
      "created_at": "2019-07-24T22:28:15Z",
      "updated_at": "2019-07-24T22:28:15Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": ">     * PS Team has existing debugging tests that can be shared\r\n\r\nWhen/how can those be shared? I've heard about internal debugging tests a number of times, on other PRs and now on this PR, but up to now they've only been mentioned as something that exists.",
      "created_at": "2019-07-24T23:58:15Z",
      "updated_at": "2019-07-24T23:58:15Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'm in the process of breaking this up into multiple PRs, starting with PR #10338.",
      "created_at": "2019-08-10T00:20:19Z",
      "updated_at": "2019-08-10T00:20:19Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Phase 2 of splitting this up: PR #10492, that includes the `*-PSBreakpoint` cmdlet changes.",
      "created_at": "2019-09-06T03:30:37Z",
      "updated_at": "2019-09-06T03:30:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:32Z",
      "updated_at": "2020-05-27T02:03:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Please resolve merge conflicts.",
      "created_at": "2020-05-27T10:47:16Z",
      "updated_at": "2020-05-27T10:47:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-11T23:00:32Z",
      "updated_at": "2020-06-11T23:00:32Z"
    }
  ],
  "created_at": "2019-07-19T22:09:37Z",
  "number": 10189,
  "state": "closed",
  "title": "WIP: Breakpoint management for runspaces",
  "updated_at": "2020-06-22T06:00:16Z"
}