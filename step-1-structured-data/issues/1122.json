{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1122",
  "author": "vors",
  "body": "Currently we control set of build artifacts only for CoreCLR vs FullCLR build.\nWe are getting more assemblies/Modules from #1031 and #1118\n\nThey are currently getting published for Linux / OS X and they fail in runtime, if user tries to use them.\nExample: LocalAccount.\n\nWe need to find a right approach to create different artifacts output for different configurations.\n",
  "closed_at": "2016-07-23T00:11:30Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "My thought on this is that if they're part of PowerShell (this repo), then they need to build everywhere, and error gracefully (e.g. platform not supported messages) where not supported.\n",
      "created_at": "2016-06-16T07:15:27Z",
      "updated_at": "2016-06-16T07:15:27Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "That's a reasonable approach.\nHow can we achieve \"fails gracefully part\"?\n\nCurrently it fails like this\n\n```\nGet-LocalUser : Unable to load DLL 'api-ms-win-security-lsapolicy-l1-1-0.dll': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\nAt line:1 char:1\n+ Get-LocalUser\n+ ~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Get-LocalUser], DllNotFoundException\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.GetLocalUserCommand\n\n```\n",
      "created_at": "2016-06-16T16:44:36Z",
      "updated_at": "2016-06-16T16:44:36Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "I see two aspects to this problem:\n1. DLLs that will never be supported outside Windows\n2. DLLs that will eventually be supported outside windows, but are not yet supported\n\nFor #2, leaving them in the package and temporarily adding a platform-specific graceful error message seems appropriate.\nFor #1, if it will never be supported, I think we should not ship it in the non-Windows packages. For example, why should the Linux package include Windows eventing files and registration? The solution to this seems to be in adjusting the lists of files that are processed when creating installers.\n",
      "created_at": "2016-06-16T17:41:12Z",
      "updated_at": "2016-06-16T17:41:12Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Also, the best way to do this is blocked on one our long outstanding issues, #673, which requires https://github.com/dotnet/cli/issues/465, and is listed as an external blocker under #667.\n",
      "created_at": "2016-06-20T19:49:29Z",
      "updated_at": "2016-06-20T19:49:29Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "For short-term solution, we will do a post-build step that removes certain things from Linux and Mac build. I think we should put it under `Start-PSBuild -Publish` only. @andschwa does it sound reasonable?\n",
      "created_at": "2016-07-21T15:42:05Z",
      "updated_at": "2016-07-21T15:42:05Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors, yes that's reasonable.\n",
      "created_at": "2016-07-21T16:30:29Z",
      "updated_at": "2016-07-21T16:30:29Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Removing blocked given that we have a short-term solution.\n",
      "created_at": "2016-07-21T22:04:54Z",
      "updated_at": "2016-07-21T22:04:54Z"
    }
  ],
  "created_at": "2016-06-16T06:38:06Z",
  "number": 1122,
  "state": "closed",
  "title": "Platform-specific set of Modules (and assemblies)",
  "updated_at": "2016-07-23T00:11:33Z"
}