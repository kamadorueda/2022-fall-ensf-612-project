{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13366",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nEspecially in the Unix world, symlinks are often define with _relative_ target paths, which enables you to later move the symlink along with its target to a different directory subtree without breaking the link.\r\n\r\nThe `.Target` ETS property we add to `FileInfo` / `DirectoryInfo` instances reports a symlink's target path _as defined_ (though there is an open bug regarding the current behavior on Unix: #13365).\r\n\r\nHowever, it would also be convenient to have an easy way to resolve the target path to a _full_ (absolute) path, which is cumbersome to do manually:\r\n\r\n```powershell\r\n# Given $symlink as a FileInfo / DirectoryInfo instance:\r\n$fullTargetPath = [IO.Path]::GetFullPath($symlink.Target, (Split-Path $symLink.FullName))\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nAdd a new `.ResolvedTarget` ETS property to `FileInfo` / `DirectoryInfo` instances that behaves as follows:\r\n\r\n* Resolve the target path to a full path as shown above:\r\n\r\n  * If the resulting path exists, report it as such.\r\n  * Otherwise, report `$null` to indicate that the symlink is broken.\r\n\r\n* If the item at hand isn't a symlink / reparse point, simply report _its own_ full path - this allows unified treatment of symlinks and non-symlinks, as a simple way to get an item's full path.\r\n\r\nIdeally, the `.ResolvedTarget` property would return a `FileInfo` / `DirectoryInfo` rather than a _path string_ (with `$null` as the return value if the target doesn't exist), but there are two considerations:\r\n\r\n* performance in general\r\n* to be consistent with `Get-Item` / `Get-ChildItem` output, the usual PS provider properties must be added to the output  `FileInfo` / `DirectoryInfo` instances, such as `.PSPath`.\r\n\r\nTo mitigate performance issues, `.ResolvedTarget` should only be calculated on demand and therefore be implemented as a `CodeMethod` property (which `.Target` is too).\r\n\r\n---\r\n\r\nRelated issues:\r\n\r\n* https://github.com/dotnet/runtime/issues/24271#issuecomment-670709364 (.NET Core API suggestion to add a `System.IO.Path.GetFullPath()` overload for canonical path resolution). \r\n\r\n* #10640 (PowerShell-side proposal to implement canonical path resolution via `Convert-Path -Canonical`).",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-08-06T13:24:00Z",
  "labels": [
    "Issue-Enhancement",
    "Hacktoberfest-Accepted",
    "Area-FileSystem-Provider"
  ],
  "number": 13366,
  "state": "open",
  "title": "Add a .ResolvedTarget property to file-system items to reflect a symlink's target path resolved to a full path.",
  "updated_at": "2021-12-03T12:43:30Z"
}