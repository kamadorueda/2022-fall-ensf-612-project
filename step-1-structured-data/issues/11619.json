{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11619",
  "author": "rjmholt",
  "body": "I've run an analysis comparing public APIs available in PowerShell 6.2.3 vs 7.0.0-rc.2 and there are some public APIs that are missing.\r\n\r\nWhile this is in many cases intentional, and likely to not be an issue, some may affect programs and tools trying to link against multiple versions of PowerShell (modules and some hosts). Trying to reference such an API would cause a sudden crash in one of these tools (the hard part being that the point at which the crash occurs may be hard to control).\r\n\r\nI'm still refining the analysis, but here is a list of classes and members that have been removed:\r\n\r\n## Types\r\n\r\n- ~~`System.Management.Automation.PSJobProxy`~~ [Workflow]\r\n- ~~`System.Management.Automation.PSChildJobProxy`~~ [Workflow]\r\n- ~~`System.Management.Automation.JobDataAddedEventArgs`~~ [Workflow]\r\n- `System.Management.Automation.PowerShellStreamType` (arguably workflow, but has generic name and namespace. Removed in https://github.com/PowerShell/PowerShell/pull/10083).\r\n- ~~`System.Management.Automation.WorkflowInfo`~~ [Workflow]\r\n- ~~`System.Management.Automation.Runspaces.PSSessionType` (arguably workflow, but possibly worth restoring with single value depending on how it's used)~~ Discussed with @daxian-dbw and @adityapatwardhan and decided that this is workflow-specific\r\n\r\n## Fields\r\n\r\n- ~~`System.Management.Automation.CommandTypes::Workflow`~~ [Workflow]\r\n- ~~`System.Management.Automation.PSEngineEvent::WorkflowJobStartEvent`~~ [Workflow]\r\n- ~~`System.Management.Automation.ModuleType::Workflow`~~ [Workflow]\r\n- ~~`System.Management.Automation.Internal.DebuggerUtils::SetVariableFunction`~~ [Internal]\r\n- ~~`System.Management.Automation.Internal.DebuggerUtils::RemoveVariableFunction`~~ [Internal]\r\n- ~~`System.Management.Automation.Internal.DebuggerUtils::GetPSCallStackOverrideFunction`~~ [Internal]\r\n- ~~`System.Management.Automation.Internal.PSMonitorRunspaceType::WorkflowInlineScript`~~ [Internal/Workflow]\r\n\r\n## Methods and constructors (captures events and properties)\r\n\r\n- ~~``Microsoft.PowerShell.DesiredStateConfiguration.Internal.DscClassCache::ImportClasses(System.String,System.Tuple`2[System.String,System.Version],System.Collections.ObjectModel.Collection`1[System.Exception])``~~ [Internal]\r\n- ~~``Microsoft.PowerShell.DesiredStateConfiguration.Internal.DscClassCache::GetCachedClasses()``~~ [Internal]\r\n- ~~``Microsoft.PowerShell.Commands.NewModuleManifestCommand::get_ClrVersion()``~~ **Fixed in https://github.com/PowerShell/PowerShell/pull/11623**\r\n- ~~``Microsoft.PowerShell.Commands.NewModuleManifestCommand::set_ClrVersion(System.Version)``~~ **Fixed in https://github.com/PowerShell/PowerShell/pull/11623**\r\n- ~~``Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand::get_SessionType()``~~ [Workflow]\r\n- ~~``Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand::set_SessionType(System.Management.Automation.Runspaces.PSSessionType)``~~ [Workflow]\r\n- ~~``Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods::GetTarget(System.Management.Automation.PSObject)`` (arguably internal, but not internally namespaced. Return type changed in https://github.com/PowerShell/PowerShell/pull/8789)~~ Discussed with @daxian-dbw and @adityapatwardhan and decided that this is ok to remove\r\n- ~~``System.Management.Automation.Debugger::SetBreakpoints(System.Collections.Generic.IEnumerable`1[System.Management.Automation.Breakpoint])``~~ **Fixed in https://github.com/PowerShell/PowerShell/pull/11622**\r\n- ~~``System.Management.Automation.PowerShell::AsJobProxy()``~~ [Workflow]\r\n- ~~``System.Management.Automation.ScriptBlock::set_IsFilter(System.Boolean)`` **Formerly threw InvalidOperationException. Should assess whether this is considered breaking. Changed in https://github.com/PowerShell/PowerShell/pull/9732**~~ Discussed with @daxian-dbw and @adityapatwardhan and decided that this is not a real breaking change\r\n- ~~``System.Management.Automation.ScriptBlock::set_IsConfiguration(System.Boolean)`` **Formerly threw InvalidOperationException. Should assess whether this is considered breaking. Changed in https://github.com/PowerShell/PowerShell/pull/9732**~~ Discussed with @daxian-dbw and @adityapatwardhan and decided that this is not a real breaking change\r\n- ~~``System.Management.Automation.PSModuleInfo::get_ExportedWorkflows()``~~ [Workflow]\r\n- ~~``System.Management.Automation.Tracing.Tracer::EndpointRegistered(System.String,System.String,System.String)`` **Removed in https://github.com/PowerShell/PowerShell/pull/9618**~~ Discussed with @daxian-dbw, @adityapatwardhan and @JamesWTruher and decided that being a workflow-oriented, Windows-only API, this break is ok\r\n- ~~``System.Management.Automation.Internal.DebuggerUtils::GetWorkflowDebuggerFunctions()``~~ [Internal/Workflow]\r\n\r\nI'll continue this analysis to look into custom attributes",
  "closed_at": "2020-02-12T22:32:08Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The workflow and related ones are deliberate and approved by committee.  Internal ones should not be considered public.",
      "created_at": "2020-01-17T22:28:35Z",
      "updated_at": "2020-01-17T22:28:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The only missing custom attributes are of type `System.Management.Automation.Tracing.EtwEvent`. I assume this is by design.",
      "created_at": "2020-01-17T23:32:41Z",
      "updated_at": "2020-01-17T23:32:41Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov https://github.com/PowerShell/PowerShell/commit/afa76dec2374df8dadc1629bd7050c5db11c0694#diff-c347101d4edffbab7f8e3874da0d0671 changes the signature of `System.Management.Automation.Tracing.Tracer::EndpointRegistered(System.String,System.String,System.String`. Is that workflow related? Is that an API we should restore? (Easy to add it back as an overload)",
      "created_at": "2020-01-18T00:16:08Z",
      "updated_at": "2020-01-18T00:16:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt See the comment https://github.com/PowerShell/PowerShell/pull/9618#discussion_r284914035 \r\nIt is side effect from PSTypeSession type removing.\r\nIt is not long discussed but @PaulHigin and me did not find why we should keep this.\r\n\r\nMy current thought is the we could replace huge in our code with ILogger. The change will a big break change but it is portable, well documemnted and promisingly.",
      "created_at": "2020-01-18T05:25:09Z",
      "updated_at": "2020-01-18T05:25:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I\u2019m viewing on mobile so might not be seeing it, but I can\u2019t find a comment there about this Tracing API. It doesn\u2019t seem to be directly related to Workflow, but I assume that it is in some way.\r\n\r\nHowever, if that API is useful without workflow in some way, I would imagine we should keep it. But I don\u2019t know that Tracing API, how it\u2019s used, whether it\u2019s relevant to SDK users or whether it makes sense without Workflow.",
      "created_at": "2020-01-18T14:20:06Z",
      "updated_at": "2020-01-18T14:20:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Thoughts were that if we remove Workflow it makes no sense to keep the parameter too because it is unlikely that anybody uses something from the tracer API - very specific and complex API. That's why I shared the idea of \u200b\u200bswitching to ILogger API - more simple, standard and effective API.\r\nI do not mind strictly reverting the change. Yes, we could add new overload and mark old as obolete.\r\n\r\n",
      "created_at": "2020-01-18T15:34:50Z",
      "updated_at": "2020-01-18T15:35:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShellStreamType was removed as Workflow only related and that was approved.",
      "created_at": "2020-01-18T15:41:58Z",
      "updated_at": "2020-01-18T15:41:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods::GetTarget - names explicitly says that it is internal.",
      "created_at": "2020-01-18T15:47:20Z",
      "updated_at": "2020-01-18T15:47:20Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I believe that `Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods::GetTarget` was available publicly as it was referenced in the types XML, when we used to have an XML.",
      "created_at": "2020-01-23T19:05:37Z",
      "updated_at": "2020-01-23T19:05:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11836, which has now been successfully released as `v7.0.0-rc.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.3)\n",
      "created_at": "2020-02-21T23:55:57Z",
      "updated_at": "2020-02-21T23:55:57Z"
    }
  ],
  "created_at": "2020-01-17T21:17:39Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Fixed",
    "WG-DevEx-SDK"
  ],
  "number": 11619,
  "state": "closed",
  "title": "Public APIs missing in PowerShell 7.0.0-rc.2 since 6.2.3",
  "updated_at": "2020-02-21T23:55:57Z"
}