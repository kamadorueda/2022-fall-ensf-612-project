{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17365",
  "author": "awakecoding",
  "body": "# PR Summary\r\n\r\nThe current native library loader on macOS is hardcoded to use \"osx-x64\", which breaks loading native libraries under the \"osx-arm64\" directory.\r\n\r\n## PR Context\r\n\r\nWe've been fighting for days trying to figure out why PowerShell wouldn't load our arm64 native libraries for our PowerShell module on macOS. The reason why was quite obvious when looking at the source code.\r\n\r\nRather than hardcode \"osx-x64\" we should just use \"osx-\" + the process architecture like for other platforms. This is a really simple fix.\r\n\r\n",
  "closed_at": "2022-06-04T15:20:59Z",
  "comments": [
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `2` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +1 -1\r\nPercentile : 0.8%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.cs : +1 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYXdha2Vjb2RpbmciLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTczNjUiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYXdha2Vjb2RpbmciLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTczNjUiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYXdha2Vjb2RpbmciLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTczNjUiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-05-18T14:05:53Z",
      "updated_at": "2022-05-18T14:05:53Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT we've confirmed that the fix does work for us, but we also noticed something quite annoying that wasn't so obvious: to get automatic library loading in .NET, you have to use just the library name without the \"lib\" prefix and file extension. However, .NET normally expects to find \"libname.dylib\" on macOS, \"libname.so\" on Linux, and \"name.dll\" for pinvoke on library \"name\", while PowerShell apparently always assumes prefix-less library names (\"name.dylib\", \"name.so\", \"name.dll\"). Taking a second look at that comment block, I can see that all library names don't use the lib prefix, so I guess it's documented, but none of us had understood it was probably intentional.\r\n\r\nIn any case, the fix does work for us, we can correctly load both osx-x64 and osx-arm64 native libraries. Now the real question is: do we wait until this makes it into the next PowerShell release, and when would that likely be? I'm trying to judge if we still need a temporary workaround, or if we can tell our customers to wait until the next PowerShell release for Apple M1 support.",
      "created_at": "2022-05-18T14:12:01Z",
      "updated_at": "2022-05-18T14:12:01Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT we've found a temporary workaround that works: putting a universal library into the osx-x64 folder. This should be good enough until the next PowerShell release containing the fix, after which we could use single-architecture libraries in their respective folders instead ",
      "created_at": "2022-05-18T14:47:29Z",
      "updated_at": "2022-05-18T14:47:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@awakecoding this will probably not make it into this month's preview release, but should make it into June.",
      "created_at": "2022-05-18T15:05:47Z",
      "updated_at": "2022-05-18T15:05:47Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "/azp run powershell-ci-macos\r\n",
      "created_at": "2022-05-19T17:13:12Z",
      "updated_at": "2022-05-19T17:13:12Z"
    },
    {
      "author": "azure-pipelines[bot]",
      "author_association": "NONE",
      "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
      "created_at": "2022-05-19T17:13:22Z",
      "updated_at": "2022-05-19T17:13:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-05-28T02:00:41Z",
      "updated_at": "2022-05-28T02:00:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Friendly ping.",
      "created_at": "2022-05-28T05:59:36Z",
      "updated_at": "2022-05-28T05:59:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-06-04T14:00:52Z",
      "updated_at": "2022-06-04T14:00:52Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.5",
      "created_at": "2022-06-07T17:23:01Z",
      "updated_at": "2022-06-07T17:23:01Z"
    },
    {
      "author": "github-actions[bot]",
      "author_association": "CONTRIBUTOR",
      "body": "Started backporting to release/v7.2.5: https://github.com/PowerShell/PowerShell/actions/runs/2456295092\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">Fix native library loading for osx-arm64 \u00b7 PowerShell/PowerShell@a8cd40a</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-06-07T17:23:14Z",
      "updated_at": "2022-06-07T17:23:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.5)\n",
      "created_at": "2022-06-22T20:26:55Z",
      "updated_at": "2022-06-22T20:26:55Z"
    }
  ],
  "created_at": "2022-05-17T20:54:38Z",
  "number": 17365,
  "state": "closed",
  "title": "Fix native library loading for osx-arm64",
  "updated_at": "2022-06-29T04:39:35Z"
}