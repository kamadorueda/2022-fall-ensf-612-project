{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14850",
  "author": "mklement0",
  "body": "Chaining `Select-String` calls currently results in unhelpful behavior with obscure restrictions.\r\n\r\nThe following analysis is based on and experimenting with commands and this source-code fragment: https://github.com/PowerShell/PowerShell/blob/ac560d8d320f3ba72e525825be2c64d9c5abdf2c/src/Microsoft.PowerShell.Commands.Utility/commands/utility/MatchString.cs#L1740-L1757 \r\n\r\n* By (debatable) design, when `Select-String` receives input from _another_ `Select-String` call, it acts as a filter on the `Microsoft.PowerShell.Commands.MatchInfo` _objects_ received as input rather than on the _text content_ they represent:\r\n\r\n  * The filtering is solely based on the `.Line` property value of the input objects, not also on the lines contained in the `.Context` property, if present.\r\n\r\n  * Due to this match-info-_object_-filtering approach, the receiving `Select-String` call doesn't support a `-Context` argument itself (because no context is being considered, and any context in the input objects is to be preserved), so it is _ignored_, with a _warning_.\r\n  \r\n    * While context resulting from a `-Context` argument passed to the _sending_ `Select-String` _is_ passed through - if the `.Line` property value matches the filter - there is a _display bug_, in that the context lines passed through do not show up in the formatted output anymore; e.g.:\r\n\r\n         * `1..5 | Select-String 3 -Context 1 | Select-String 3` outputs just `> 3`, not `  2\\n> 3\\n  4`, as the original command would; the problem is connected to the `.Context.DisplayPreContext` and `.Context.DisplayPostContext` values not getting preserved on filtering.\r\n\r\n---\r\n\r\nExamples of unintuitive behavior:\r\n\r\n```powershell\r\n# Context not considered by the receiving call.\r\nPS> 1..5 | Select-String 3 -Context 1 | Select-String 2\r\n# no output, because line '2' is NOT matched, due to being part of the sending call's context lines.\r\n\r\n# Receiving call doesn't support -Context\r\nPS> 1..5 | Select-String 3 -Context 2 | Select-String 3 -Context 1\r\nWARNING: The option \"Context\" is not valid when searching results that are piped from Select-String output.\r\n\r\n> 3\r\n\r\n```\r\n\r\nAnd the outright _bug_:\r\n\r\n```powershell\r\n# Pass-through context lines DO NOT DISPLAY (but they are present in the output object).\r\nPS> 1..5 | Select-String 3 -Context 1 | Select-String 3\r\n\r\n> 3\r\n\r\n```\r\n\r\n---\r\n\r\nThe upshot is:\r\n\r\n* The current behavior when chaining `Select-String` calls is unhelpful, in two respects:\r\n\r\n  * It doesn't consider context lines when filtering in the receiving `Select-String` command.\r\n  * The receiving `Select-String` command doesn't support `-Context`.\r\n\r\n---\r\n\r\nWhat _would_ be helpful if receiving `Select-String` calls solely operated on the _strings_ represented by the input objects, notably _including_ the context lines, but _without duplicates_ from overlapping contexts - as you currently already see in the _formatted_ output from non-chained calls (formatting markup aside).\r\n\r\nA similar issue arose in combination with the `-Raw` switch (not available in Windows PowerShell; its purpose is to output just the matching _lines_ (text) rather than `Microsoft.PowerShell.Commands.MatchInfo` objects):\r\n\r\nHere too the intuitive expectation is that combining `-Raw` with `-Context` should also output the context lines without duplicates, which isn't the case either, unfortunately, as reported in #14350.\r\n\r\n---\r\n\r\nTo me, these changes would undoubtedly be helpful, but at least in the non-`-Raw` case they do amount to a _breaking change_, so the question is whether it is an _acceptable_ breaking change, namely one that falls into [bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area).\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-02-19T02:23:39Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 14850,
  "state": "open",
  "title": "Revisit the behavior of chaining Select-String calls",
  "updated_at": "2021-02-22T19:15:07Z"
}