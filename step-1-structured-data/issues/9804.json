{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9804",
  "author": "felixfbecker",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nclass Foo {}\r\nclass Bar {\r\n  [Foo]$Foo\r\n  [string]$FooStr\r\n}\r\n$bar = [Bar]::new()\r\n$bar.Foo = [Foo]::new()\r\n$bar.FooStr = 'abc'\r\n\r\nfunction Fn {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(ValueFromPipelineByPropertyName, Mandatory)]\r\n    [Alias('FooStr')]\r\n    [string] $Foo\r\n  )\r\n  return $Foo\r\n}\r\n\r\n$bar | Fn\r\n```\r\n\r\n# Expected behavior\r\n\r\nOutput `abc`\r\n\r\n# Actual behavior\r\n\r\nOutput: `Foo`\r\n\r\nHaving an arbitrary class instance be coerced to a string of the class name is unexpected. I'd expect a type error if no other alias matches, and in the case where there is an alias defined that actually matches a property with the correct type, it should prefer that.\r\n\r\nConcrete real world case: PowerGit `Get-GitBranch` returns a `LibGit2Sharp.Branch` object, which has a `Repository` property of type  `LibGit2Sharp.Repository`, and a PowerShell ScriptProperty `RepositoryName` of type `string` which is parsed out of the remote URL.\r\nPSGitHub cmdlets like `Get-GitHubPullRequest` have a mandatory `-Repository` parameter of type `string`, which is annotated with `ValueFromPipelineByPropertyName` and aliased to `RepositoryName`. I would expect to be able to pipe the branch object to this cmdlet and PowerShell to bind the `RepositoryName` property, instead it coerces the `Repository` property to the class name `\"LibGit2Sharp.Repository\"` and passes that, which obviously does not make sense. PSGitHub then fails because it cannot find a GitHub repository with that name.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Darwin 18.6.0 Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019; root:xnu-4903.261.4~2/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n`Trace-Command` ParameterBinding logs:\r\n\r\n```\r\n> Trace-Command -Name ParameterBinding -Expression { $bar | Fn } -PSHost\r\nDEBUG: ParameterBinding Information: 0 : BIND NAMED cmd line args [Fn]\r\nDEBUG: ParameterBinding Information: 0 : BIND POSITIONAL cmd line args [Fn]\r\nDEBUG: ParameterBinding Information: 0 : MANDATORY PARAMETER CHECK on cmdlet [Fn]\r\nDEBUG: ParameterBinding Information: 0 :     BIND arg [] to parameter [foo]\r\nDEBUG: ParameterBinding Information: 0 :         Executing DATA GENERATION metadata: [System.Management.Automation.ArgumentTypeConverterAttribute]\r\nDEBUG: ParameterBinding Information: 0 :             result returned from DATA GENERATION:\r\nDEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.String]\r\nDEBUG: ParameterBinding Information: 0 :             Parameter and arg types the same, no coercion is needed.\r\nDEBUG: ParameterBinding Information: 0 :         BIND arg [] to param [foo] SUCCESSFUL\r\nDEBUG: ParameterBinding Information: 0 : CALLING BeginProcessing\r\nDEBUG: ParameterBinding Information: 0 : BIND PIPELINE object to parameters: [Fn]\r\nDEBUG: ParameterBinding Information: 0 :     PIPELINE object TYPE = [Bar]\r\nDEBUG: ParameterBinding Information: 0 :     RESTORING pipeline parameter's original values\r\nDEBUG: ParameterBinding Information: 0 :     Parameter [foo] PIPELINE INPUT ValueFromPipelineByPropertyName NO COERCION\r\nDEBUG: ParameterBinding Information: 0 :     BIND arg [Foo] to parameter [foo]\r\nDEBUG: ParameterBinding Information: 0 :         Executing DATA GENERATION metadata: [System.Management.Automation.ArgumentTypeConverterAttribute]\r\nDEBUG: ParameterBinding Information: 0 :             result returned from DATA GENERATION: Foo\r\nDEBUG: ParameterBinding Information: 0 :         BIND arg [Foo] to param [foo] SKIPPED\r\nDEBUG: ParameterBinding Information: 0 :     Parameter [foo] PIPELINE INPUT ValueFromPipelineByPropertyName WITH COERCION\r\nDEBUG: ParameterBinding Information: 0 :     BIND arg [Foo] to parameter [foo]\r\nDEBUG: ParameterBinding Information: 0 :         Executing DATA GENERATION metadata: [System.Management.Automation.ArgumentTypeConverterAttribute]\r\nDEBUG: ParameterBinding Information: 0 :             result returned from DATA GENERATION: Foo\r\nDEBUG: ParameterBinding Information: 0 :         COERCE arg to [System.String]\r\nDEBUG: ParameterBinding Information: 0 :             Parameter and arg types the same, no coercion is needed.\r\nDEBUG: ParameterBinding Information: 0 :         BIND arg [Foo] to param [foo] SUCCESSFUL\r\nDEBUG: ParameterBinding Information: 0 : MANDATORY PARAMETER CHECK on cmdlet [Fn]\r\nDEBUG: ParameterBinding Information: 0 : CALLING EndProcessing\r\nFoo\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'd almost call this expected behaviour. The default .ToString() behaviour is to return the class name, which is what will happen here in this binding...\r\n\r\nI do agree that if there's a better type match under an alias name that it should still be selected though. \ud83d\udc4d \r\n\r\nNot sure if it qualifies as a bug, but the handling here could absolutely be improved. \ud83d\ude04 ",
      "created_at": "2019-06-03T13:36:38Z",
      "updated_at": "2019-06-03T13:36:38Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I'd say it's not expected, because what's the point of a `[string]` type annotation if _anything_ goes (because _everything_ can be `ToString()`ed).\r\n\r\nEven if you say that it should be coerced, you can't even force the string to not get chosen through `ValidatePattern()` - the parameter will still be bound and then fail validation with an error, instead of picking the other property that would pass.",
      "created_at": "2019-06-03T14:03:15Z",
      "updated_at": "2019-06-03T14:03:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, that's fair. The logic probably wasn't coded with the expectation that there would be multiple properties that could possibly match, some of which having different types than required.",
      "created_at": "2019-06-03T14:05:54Z",
      "updated_at": "2019-06-03T14:06:09Z"
    },
    {
      "author": "wisemoth",
      "author_association": "NONE",
      "body": "Something similar has hit me, and I think it's more likely than at first indicated by the OP.  Consider:\r\n\r\n```\r\nfunction ProcessString {[cmdletbinding()]Param([Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)] [string]$p) process { write-host \"p value <$p>, type $($p.gettype())\"}}\r\nfunction ProcessInt    {[cmdletbinding()]Param([Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)] [int]$p)    process { write-host \"p value <$p>, type $($p.gettype())\"}}\r\nfunction ProcessObject {[cmdletbinding()]Param([Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)] $p)         process { write-host \"p value <$p>, type $($p.gettype())\"}}\r\n```\r\nThen we'll feed those by pipeline value and propertyname:\r\n```\r\n> '123', 123, [pscustomobject]@{p=123}, [pscustomobject]@{p='123'} | ProcessObject\r\np value <123>, type string\r\np value <123>, type int\r\np value <@{p=123}>, type System.Management.Automation.PSCustomObject\r\np value <@{p=123}>, type System.Management.Automation.PSCustomObject\r\n```\r\nThat's expected, but a small gotcha to remember that the whole custom object can be coerced to string and value bound. There's a way out of course by typing the argument:\r\n```\r\n> '123', 123, [pscustomobject]@{p=123}, [pscustomobject]@{p='123'} | ProcessInt\r\np value <123>, type int\r\np value <123>, type int\r\np value <123>, type int\r\np value <123>, type int\r\n```\r\nThat's expected by type coercion and selection of the propertyname\r\n```\r\n> '123', 123, [pscustomobject]@{p=123}, [pscustomobject]@{p='123'} | ProcessString\r\np value <123>, type string\r\np value <123>, type string\r\np value <@{p=123}>, type string\r\np value <123>, type string\r\n```\r\nThat's surprising. The difference between the by value binding and the by property name binding seems wrong. There's been an \"accidental\" string coercion of the whole `pscustomobject` before the parameter binder spotted the potential property binding.\r\n\r\nIn the end I had to write a `ArgumentTransformationAttribute` to beat the awkward coercion. That cast the `[object]` via `[string][int]` which allowed:\r\n\r\n```\r\nfunction ProcessId {[cmdletbinding()]Param([Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)] [Id()]  $p) process { write-host \"p value <$p>, type $($p.gettype())\"}}\r\n\r\n> '123', 123, [pscustomobject]@{p=123}, [pscustomobject]@{p='123'} | ProcessId\r\np value <123>, type string\r\np value <123>, type string\r\np value <123>, type string\r\np value <123>, type string\r\n```\r\n\r\n(This did have a side-advantage that I could extract any `int`-like value from an incoming string-like object, so all was not lost)\r\n",
      "created_at": "2020-06-30T15:58:14Z",
      "updated_at": "2020-06-30T15:58:14Z"
    }
  ],
  "created_at": "2019-06-03T13:14:18Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 9804,
  "state": "open",
  "title": "PowerShell coerces pipeline object to string to bind parameter, instead of choosing property that matches type and alias name",
  "updated_at": "2020-06-30T15:58:14Z"
}