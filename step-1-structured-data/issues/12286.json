{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12286",
  "author": "figueroadavid",
  "body": "# Summary of the new feature/enhancement\r\nIt would be nice to be able to pull up a child instance of PS inline while typing complex commands, probably by hotkey.\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nOne of the things I run into all the time - I'll be in the middle of typing a complex command, and I will need to look something up.  I'll frequently have to open another ps prompt, or cancel what I'm doing and look up the information, and then go reconstruct my command, or pull back from a copy/paste situation.  My thought was introducing the ability by hotkey to pull up kind of a 2nd ps instance inline with ascii characters, or maybe it would be a separate thread/namespace.  (I'll attach an image of what I was thinking)..  The idea being that this second instance of PS would be a child instance with a limited lifespan.  Hitting Escape would close this instance (or some other hotkey sequence).  Another example - maybe I'd want to do a quick `$obj | get-member` inline without killing my existing prompt.  \r\n\r\nThe window could also be a completely separate child window, but the main idea is that it could be closed easily without having to take your hands off the keyboard.  I would assume that the child window (inline or external) would be application level modal - again, so you don't have to take your hands off of the keyboard.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\nSee the screenshots.. but basically, I would be typing in a command and suddenly need to look something up, do something small & simple, and I don't want to lose what I'm typing.  So I hit a hotkey, like maybe `Ctrl+Shift+J`, and the child instance/window pops up.  I type in what I want to do hit enter, look at my results, then I hit something to close that child window (`Esc`, or maybe `Ctrl+Shift+J` again, or whatever).  The child window/instance closes and I go on typing right where I was at.  As a child instance/window, I would inherit the environment, and possibly the object space or not depending on how hard it is to do that.  (I'm thinking that would be very tough to do).  \r\n\r\n## Example \"Screenshots\"\r\n\r\n![PopupPSPrompt](https://user-images.githubusercontent.com/2041839/78897748-443fa380-7a38-11ea-9ea8-1599330422de.png)\r\n![PopupPSPrompt2](https://user-images.githubusercontent.com/2041839/78897746-43a70d00-7a38-11ea-9cd5-2fc56dadba1a.png)\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is request for PSReadline. /cc @daxian-dbw ",
      "created_at": "2020-04-09T13:21:58Z",
      "updated_at": "2020-04-09T13:21:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "What I typically use to solve this problem is this key handler from the [SamplePSReadLineProfile.ps1](https://github.com/PowerShell/PSReadLine/blob/ebfe4ce0db94d7dc507c87e412b747def5a1c6e6/PSReadLine/SamplePSReadLineProfile.ps1#L310-L325):\r\n\r\n```powershell\r\n# Sometimes you enter a command but realize you forgot to do something else first.\r\n# This binding will let you save that command in the history so you can recall it,\r\n# but it doesn't actually execute.  It also clears the line with RevertLine so the\r\n# undo stack is reset - though redo will still reconstruct the command line.\r\nSet-PSReadLineKeyHandler -Key Alt+w `\r\n                         -BriefDescription SaveInHistory `\r\n                         -LongDescription \"Save current line in history but do not execute\" `\r\n                         -ScriptBlock {\r\n    param($key, $arg)\r\n\r\n    $line = $null\r\n    $cursor = $null\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::AddToHistory($line)\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::RevertLine()\r\n}\r\n```\r\n\r\nThe idea is, save the current line to history, run whatever you need to to get information, then navigate back to that history entry.\r\n\r\nA more complicated version could potentially be made using `PSConsoleReadLine.ReadLine` in a key handler, though I don't think that method supports nested invocations currently.\r\n\r\nAnother option is `$Host.EnterNestedPrompt()`.  However, it looks like both PowerShell's `Executor` class and PowerShellEditorServices's equivalent `PowerShellContextService` fail sort of catastrophically when that method is called from a key handler.",
      "created_at": "2020-04-09T14:38:43Z",
      "updated_at": "2020-04-09T14:38:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Also, more on the terminal side of things, you can opt to open a new instance of powershell in a split pane in something like Windows Terminal or VS Code's terminal split option.",
      "created_at": "2020-04-09T16:59:19Z",
      "updated_at": "2020-04-09T16:59:19Z"
    },
    {
      "author": "figueroadavid",
      "author_association": "NONE",
      "body": "The history part really doesn't do what I'm hoping/asking.  I literally want it to pop up when I hit a hotkey, do something, exit it, and be exactly back where I was. Or even just execute the one command with a `---end---` type prompt that just exits it.  \r\n\r\nI'm really thinking on the fly, not so much a truly separate window.  (I always have at least two windows open).  The idea is never having to grab the mouse.. I'm typing, get lost & need a fast lookup or whatever.. I hit my key sequence, do my lookup or whatever, hit escape or the hotkey again, and I'm back in business with _no change_ in what I was doing..   Overall, I want it to not interrupt my train of thought/my workflow, etc.  \r\n\r\nAnyway, thanks for the consideration :-D",
      "created_at": "2020-04-13T00:55:55Z",
      "updated_at": "2020-04-13T00:55:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> The history part really doesn't do what I'm hoping/asking.\r\n\r\nYeah, it's an alternate solution to the same problem.  I bring it up for two reasons:\r\n\r\n1. Some folks coming to the thread to solve the problem may find it to be serviceable\r\n1. When presenting a feature request, it's helpful to outline the current solutions/workarounds and why they aren't good enough\r\n\r\nTo be clear though I'm not arguing against it, I've often wished for the same thing.\r\n",
      "created_at": "2020-04-13T14:26:16Z",
      "updated_at": "2020-04-13T14:26:16Z"
    }
  ],
  "created_at": "2020-04-09T13:05:37Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-PSReadLine"
  ],
  "number": 12286,
  "state": "open",
  "title": "The ability to dynamically open a new prompt inline",
  "updated_at": "2020-04-13T14:26:16Z"
}