{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2876",
  "author": "powercode",
  "body": "It would be really neat if we could to native interop with classes.\r\n\r\n```PowerShell\r\nclass NativeMethods{\r\n  [DllImport(\"kernel32\", SetLastError=$true)]\r\n  hidden static extern [bool] SetConsoleMode([IntPtr] $handle, [int] $mode)\r\n}\r\n```\r\n\r\nHow much work would it be to get this working?",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Maybe not a lot of work, but it is a common enough ask that we should do it.\r\n\r\nThere is one important language design choice to make, how to declare a struct. Pinvoke would be much less useful without structs.\r\n\r\nA struct is probably not generally useful in PowerShell, we box way too often, so I was thinking of using an attribute like ExplicitLayout to imply struct instead of adding a keyword.",
      "created_at": "2016-12-13T17:38:34Z",
      "updated_at": "2016-12-13T17:38:34Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Looks like we may be able to do this as soon as we're clear to move to .NET 3.0 - this already works on 3.0.0-preview2 release of the SDK https://github.com/IISResetMe/PowerShell/commit/4fa5363598e7736771e8cc1b06e8ce8edd405d4f (warrants a bit of a cleanup in `PSType.cs`, I'll keep working on that in the meantime)",
      "created_at": "2019-03-08T15:15:45Z",
      "updated_at": "2019-03-08T15:15:45Z"
    }
  ],
  "created_at": "2016-12-13T09:01:18Z",
  "number": 2876,
  "state": "open",
  "title": "Enable native interop with static extern class methods",
  "updated_at": "2019-03-08T15:15:45Z"
}