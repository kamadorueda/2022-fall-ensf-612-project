{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16628",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nWhen a PowerShell built-in module is getting imported in the `WinCompat` mode, we check whether a core-edition compatible version of this module is available in module paths. If not, report error instead of blindly loading the module under `System32` module path, because that could result in very confusing errors later on.\r\n\r\nFix #13157. Related to #16525.\r\nWe also had a stack overflow issue reported from internal team when they were testing with PowerShell 7.2. The investigation showed the root cause was that they didn't recursively copy the `$PSHOME\\Modules` when deploying their test infrastructure, and the stack overflow exception was caused by auto-loading attempts to load `Microsoft.PowerShell.Utility` from the `System32` module path.\r\n\r\nWith this change, we should be able to avoid the confusing errors when somehow a user has the built-in modules missing. The error will explicitly call out that a core-edition compatible version of the built-in module cannot be found.\r\n\r\nHere is an example to show the UX:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/147056172-f0d46fc5-ffd5-4423-8231-1af1b34dc644.png)\r\n\r\nBasically, for built-in modules, PowerShell blocks the loading of the same module in `System32\\WindowsPowerShell\\v1.0\\Modules` via `WinCompat` when a core-edition compatible version of such module cannot be found. When the core-edition compatible built-in modules are available, loading of the same module in `System32` module path will proceed normally.\r\n\r\n**Where is the check done?**\r\n\r\nThe check is done in `PrepareNoClobberWinCompatModuleImport`.\r\nWhen importing a module remotely via `WinCompat`, if the module is a built-in module, or it's listed in `WindowsPowerShellCompatibilityNoClobberModuleList` in `powershell.config.json`, we first attempt to load a core-edition compatible version of such module, and then proceed with loading the module remotely. This is how `WInCompat` works today.\r\n\r\nThis PR made an improvement to the existing code:\r\n- skip the `System32` module path when attempting to load a core-compatible version of the module, so that\r\n   1. a Desktop module listed in the no-clobber list won't be loaded as remote module twice.\r\n   2. a core-compatible module can be discovered even if it's in a module path that appears behind the `System32` module path in `$env:PSModulePath`.\r\n- when a core-compatible version of the module cannot be found,\r\n  1. if the module to be loaded remotely is a built-in module, we throw exception because that means core-compatible built-in modules are not available.\r\n  2. if the module to be loaded remotely is NOT a built-in module, then it's OK to proceed with loading it remotely.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n",
  "closed_at": "2022-01-12T18:02:04Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I do not understand why even try to look for built-in modules if they are hardwired to a particular version of SMA and the paths to them must be hardcoded.\r\n",
      "created_at": "2021-12-16T04:29:24Z",
      "updated_at": "2021-12-16T04:29:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Turning the PR to a draft for now, as I'm working on a different solution without assuming the built-in modules have to be under `$PSHOME` module path.",
      "created_at": "2021-12-17T17:28:27Z",
      "updated_at": "2021-12-17T17:28:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov The design was changed to not assume the built-in modules are always under `$PSHOME` module path. Please see details in the \"Where is the check done?\" section in the PR description.",
      "created_at": "2022-01-03T20:46:58Z",
      "updated_at": "2022-01-03T20:46:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga @SteveL-MSFT, please review when you have time.\r\n@PaulHigin the fix was changed to avoid assuming the built-in modules are always in `$PSHOME` module path, so I dismissed your previous approval. Please review again when you have time.\r\nThanks in advance to all of you!",
      "created_at": "2022-01-03T20:50:14Z",
      "updated_at": "2022-01-03T20:50:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What about Appx module? :-)",
      "created_at": "2022-01-04T09:43:38Z",
      "updated_at": "2022-01-04T09:43:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> What about Appx module?\r\n\r\n@iSazonov Not sure what you mean. Appx module is not in the picture of the problem I tried to resolve here.",
      "created_at": "2022-01-05T20:39:47Z",
      "updated_at": "2022-01-05T20:39:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > What about Appx module?\r\n> \r\n> @iSazonov Not sure what you mean. Appx module is not in the picture of the problem I tried to resolve here.\r\n\r\nI think we need add the module to stop list and load in wincompat mode..",
      "created_at": "2022-01-06T05:45:23Z",
      "updated_at": "2022-01-06T05:45:23Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Large&color=red)\r\n\r\nThis PR has `466` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Large\r\nSize       : +310 -156\r\nPercentile : 82.2%\r\n\r\nTotal files changed: 10\r\n\r\nChange summary by file extension:\r\n.cs : +179 -155\r\n.resx : +7 -0\r\n.ps1 : +124 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjYyOCIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjYyOCIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjYyOCIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-01-07T00:10:34Z",
      "updated_at": "2022-01-07T00:10:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga I think this PR is ready. Can you please take a look? Thanks!",
      "created_at": "2022-01-07T01:11:42Z",
      "updated_at": "2022-01-07T01:11:42Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Jumping in to make you aware that this PR would also fix #13157 \ud83d\ude42 ",
      "created_at": "2022-01-10T08:55:32Z",
      "updated_at": "2022-01-10T08:55:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @Fs00, I've updated the PR description with that info.",
      "created_at": "2022-01-10T19:36:45Z",
      "updated_at": "2022-01-10T19:36:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As final notices:\r\n- ReadCoreEngineSnapIn() - doesn't support WU and looks weird in whole.\r\n- x32 vs x64 paths (including Program Files/x32 and System32/SysWow64 folders) - The existing logic is contradictory. See [7418](https://github.com/microsoft/terminal/issues/7418) It would be more reliable to rely on the declared architecture in the module manifest",
      "created_at": "2022-01-12T18:15:28Z",
      "updated_at": "2022-01-12T18:15:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:34:13Z",
      "updated_at": "2022-02-24T23:34:13Z"
    }
  ],
  "created_at": "2021-12-15T21:56:52Z",
  "number": 16628,
  "state": "closed",
  "title": "Report error when PowerShell built-in modules are missing",
  "updated_at": "2022-02-24T23:34:13Z"
}