{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8989",
  "author": "mklement0",
  "body": "`Compiler.cs` contains many source-code comments such as the following:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/81d37fcb84c812e077c79623d8a1a6416207b196/src/System.Management.Automation/engine/parser/Compiler.cs#L5160-L5165\r\n\r\nrelating to many common operators.\r\n\r\nIt's worth revisiting the code there to see if across-the-board performance gains are to be had.\r\n\r\n_Update_: @iSazonov comments: \r\n\r\n> I remember Jason commenting to me that we could remove the TODO comments because perhaps there does not exist direct and simple performance optimizations.\r\n\r\nIn that event, this issue can serve as a reminder to _remove these comments_.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Issue does not have utility if you do not intend to enumerate all options and explore them.",
      "created_at": "2019-02-26T18:45:43Z",
      "updated_at": "2019-02-26T18:45:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> if you do not intend to enumerate all options\r\n\r\n_Perhaps_ a common optimization - if any - can be applied to all locations where these source-code comments appear, but I personally have no idea.\r\n\r\n> and explore them.\r\n\r\nI cannot personally explore them, but this issue has utility as a _general reminder_ to someone who can.\r\n\r\nAnd perhaps the only action needed is to simply remove the comments, after all.\r\n/cc @lzybkr \r\n",
      "created_at": "2019-02-26T18:52:04Z",
      "updated_at": "2019-02-26T18:52:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I express no preference here on either the comments or issue.\r\n\r\nIt could be a good opportunity to explore dynamic sites as they are implemented elsewhere, but improvements might only be meaningful in micro-benchmarks.",
      "created_at": "2019-02-26T19:05:51Z",
      "updated_at": "2019-02-26T19:05:51Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Do we have any concrete examples in the code base where we've implemented perf optimizations with call sites and dynamic operands? Very curious about this, and I understand the concept and can do some simple things, but nothing too crazy and it would be nice with some existing references :)",
      "created_at": "2019-02-28T16:20:30Z",
      "updated_at": "2019-02-28T16:20:30Z"
    }
  ],
  "created_at": "2019-02-26T17:01:10Z",
  "number": 8989,
  "state": "open",
  "title": "Performance improvements: revisit operator-invocation code in Compiler.cs or clean up obsolete comments",
  "updated_at": "2019-06-24T15:41:38Z"
}