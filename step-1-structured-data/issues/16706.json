{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16706",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\n\nThings like `sed` allow you to do things like this:\r\n\r\n```powershell\r\nwrite 'X X X X' | sed 's/X/Y/2'\r\n# X Y X X\r\n```\r\n\r\npwsh could also do things like:\r\n\r\n```powershell\r\n'X X X X' -replace 'X','Y',2\r\n# X Y X X\r\n```\r\n\r\njust as an example, this may not be how you'd implement this specific option, but in general, any parameters starting at the third position for `-replace` or e.g. the second position for `-match` could be flags/options to modify the operation. They wouldn't have to be a single string, they could be a list.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This is probably better done as a cmdlet or function than by modifying the operator - as your example shows, sooner or later someone will want to pipe into it. \r\nIt doesn't look like something that would be very hard to write ",
      "created_at": "2022-01-06T11:12:13Z",
      "updated_at": "2022-01-06T11:12:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm pretty sure the underlying regex engine (System.Text.RegularExpressions.Regex) can already do this kind of thing, so if you don't mind using that, you can write code to do that pretty easily, and package it as a function as jhoneill mentioned.",
      "created_at": "2022-01-06T16:42:24Z",
      "updated_at": "2022-01-06T16:42:24Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I'll give a better example where this could be very convenient. Suppose you want to make only the first replacement in a string, instead of all occurrences. This is the default behavior of unix substitute commands in things like sed without `/g`.\r\n\r\nThe way to do this now is:\r\n\r\n```powershell\r\n'X X X X' | %{ [regex]$r = 'X'; $r.replace($_,'Y',1) }\r\n# Y X X X\r\n```\r\n\r\nNow if this feature was available, it would be as simple:\r\n\r\n```powershell\r\n'X X X X' | %{ $_ -replace 'X',\"Y',1 }\r\n# Y X X X\r\n```",
      "created_at": "2022-01-06T23:15:21Z",
      "updated_at": "2022-01-06T23:15:21Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "Discard sed, discard complex syntax, and regular.\r\nShare: [Find-Replace] script tool written by me.\r\n\r\n```\r\n$f ='/etc/selinux/config'\r\n/tmp/psed.ps1 -infile $f -find'SELINUX=enforcing' -replace'SELINUX=disabled'\r\n```\r\n\r\nI can\u2019t learn sed. I struggled to learn a little bit, but I can\u2019t remember sed. In order to treat this disease of mine, I wrote a small script \"Ps Finding Calculation Replacing.ps1\", you can rename it to psed.ps1\r\nIt is very simple to use; it is also common to win and linux; it does not support regularity; it does not need to escape characters; it can kill sed under linux 99%.\r\nSlogan=Simple to die for you! People who specialize in academics can\u2019t remember sed. Solve the pain points that sed is difficult to learn and use.\r\nComplicated functions can be solved through the callback function written by yourself.\r\nScript download address:\r\n[https://gitee.com/chuanjiao10/powershell/tree/master/win-linux\u901a\u7528] \r\nManual & Example: In the download address---[ps\u627e\u7b97\u66ff_v3_readme.html]",
      "created_at": "2022-01-07T04:08:17Z",
      "updated_at": "2022-01-07T04:08:40Z"
    }
  ],
  "created_at": "2022-01-06T06:41:29Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 16706,
  "state": "open",
  "title": "Support flags for regex operators like -match and -replace",
  "updated_at": "2022-01-07T04:08:40Z"
}