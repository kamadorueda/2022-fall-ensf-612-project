{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11517",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #11418\r\n\r\nWhen using `Ping.SendAsync` with a callback, the callback will always be invoked in the synchronization context of the pipeline thread. When the current synchronization context of the thread is null, the default context is used which is the threadpool.\r\nIn case the pipeline thread's synchronization context is set (for example, by constructing a WindowsForm object), the callback will be scheduled to run on the pipeline thread, which will result in a dead lock.\r\nThe fix is to use `Ping.SendPingAsync`.\r\n\r\n## Note about `SendAsync` and `PingCompletedEventArgs`\r\n\r\nNote that, when using `Ping.SendAsync`, `_pingCompleteArgs.Cancelled` is never set to `true` when the task is cancelled by `Ctrl+c`. Instead, `_pingCompleteArgs.Error` is set with a `PingException` whose `InnerException` is `TaskCanceledException`.\r\nI think this is a bug in the `Ping.SendAsync` API, but didn't spend the time to dig into it.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-22T03:19:06Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw does this allow Ctrl+C to cancel the ping? [The documentation for `SendAsyncCancel()`](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.ping.sendasynccancel?view=netframework-4.8) mentions that `SendAsyncCancel()` is meant to cancel async requests submitted with `SendAsync()` \ud83e\udd14 \r\n\r\nDownloaded the build artifact, and it seems to cancel, but the task doesn't return until the predefined timeout either way... though it does stop. Weird. So I guess it sort of does, but it won't cause the task to return right away. Odd. I think it was already doing that before this change, though, so it must be something that the API is doing internally, a shared code path somewhere, most likely.",
      "created_at": "2020-01-08T04:02:56Z",
      "updated_at": "2020-01-08T04:03:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 `SendAsync` is actually just a thin wrapper over `SendPingAsync`, see the implementation [here](https://source.dot.net/#System.Net.Ping/System/Net/NetworkInformation/Ping.cs,279). So `SendAsyncCancel()` should work for `SendPingAsync` as well. I did set breakpoint in the code and see the `PingException` being thrown with a `TaskCanceledException` inner exception when pressing `ctrl+c`. Yes, I guess the cancellation doesn't happen right away.",
      "created_at": "2020-01-08T06:24:02Z",
      "updated_at": "2020-01-08T06:24:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> When using Ping.SendAsync with a callback, the callback will always be invoked in the synchronization context of the pipeline thread. \r\n\r\nIs it EAP behavior? I ask because SendAsync() creates an async task with ConfigureAwait(false)\r\nhttps://source.dot.net/#System.Net.Ping/System/Net/NetworkInformation/Ping.cs,281\r\nhttps://source.dot.net/#System.Net.Ping/System/Net/NetworkInformation/Ping.cs,328\r\nhttps://source.dot.net/#System.Net.Ping/System/Net/NetworkInformation/Ping.cs,341\r\n\r\nAlso I should point may be related  https://github.com/PowerShell/PowerShell/pull/11420#issuecomment-569643714\r\nThere Test-Connection, traceroute and the same SendCancellablePing(). Test on Azure takes up to 40 sec! Setting Timeout parameter causes hang.\r\nI guess it is the same issue like this.\r\n\r\n.Net Core uses ConfigureAwait(false) everywhere. If there is something that blocking current thread I guess it is either Core bug or by-design in EAP.\r\n",
      "created_at": "2020-01-08T15:35:38Z",
      "updated_at": "2020-01-08T15:37:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov yeah traceroutes take a while even on Windows, but are especially bad on Unix, since all Unix Ping APIs do nothing except report TimedOut for any non-success response (TtlExpired is not a status that Unix APIs will return under any circumstances I've found, so traceroute on Unix is currently rather busted and always waits the full `Timeout` value before returning). It may be worth simply skipping the traceroute tests under Unix until we get better functionality from .NET Core if we aren't already.",
      "created_at": "2020-01-08T16:05:46Z",
      "updated_at": "2020-01-08T16:08:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov \r\n\r\n> Is it EAP behavior? I ask because SendAsync() creates an async task with ConfigureAwait(false)\r\n\r\nThe EAP version of the API is just a wrapper around the TAP version. That wrapper uses `AsyncOperationManager`, which looks at the `SynchronizationContext` for the current thread.  The TAP version doesn't use the `AsyncOperationManager`, instead it just uses the native API directly with a callback that sets a `TaskCompletionSource`.\r\n\r\n> If there is something that blocking current thread I guess it is either Core bug or by-design in EAP.\r\n\r\nThe problem is with certain sync contexts, particularly the one set by the `Form` constructor, it causes a deadlock. You could argue that it's by design because `Form` isn't being used how it's intended (e.g. from PowerShell) but still worth fixing.",
      "created_at": "2020-01-08T16:18:29Z",
      "updated_at": "2020-01-08T16:18:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Thanks! I see. Not clear is it a bug or by-design for EAP.",
      "created_at": "2020-01-08T16:46:58Z",
      "updated_at": "2020-01-08T16:46:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I would say that it's by design that the EAP version honors the current synch context, PowerShell just doesn't play well with the windows forms sync context implementation specifically.  Or really any external sync context I would guess.",
      "created_at": "2020-01-08T17:06:44Z",
      "updated_at": "2020-01-08T17:06:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I agree that it's by design for the EAP version. It's the right thing to invoke the callback in the current synchronization context. Library APIs themselves should always use the default sync context, but when interacting with the user code, it's the user's decision if the current sync context should be honored (though the EAP version API doesn't let you choose :)).\r\n\r\nBut I guess there is a bug in the EAP version API, where the `PingCompletedEventArgs.Cancelled` never gets set to `true` when the task is cancelled by `SendAsyncCancel()`. ",
      "created_at": "2020-01-08T17:58:44Z",
      "updated_at": "2020-01-08T18:04:40Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry windows",
      "created_at": "2020-01-10T01:33:56Z",
      "updated_at": "2020-01-10T01:33:56Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2020-01-10T01:34:30Z",
      "updated_at": "2020-01-10T01:34:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Please take another look when you have time.\r\n@iSazonov The PR is stuck with WIP check, but I don't know why \ud83d\ude15 ",
      "created_at": "2020-01-10T17:34:55Z",
      "updated_at": "2020-01-10T17:34:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Seems like the bot isn't adding the status either way... interesting. Perhaps try editing the PR title / summary a bit and see if that triggers whatever webhook the bot may be using?",
      "created_at": "2020-01-10T17:36:38Z",
      "updated_at": "2020-01-10T17:36:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 Yeah, I will edit the title a bit to see if that helps.",
      "created_at": "2020-01-10T17:44:56Z",
      "updated_at": "2020-01-10T17:44:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry windows",
      "created_at": "2020-01-10T22:08:03Z",
      "updated_at": "2020-01-10T22:08:03Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2020-01-10T22:08:29Z",
      "updated_at": "2020-01-10T22:08:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Can you please update your review? Thanks",
      "created_at": "2020-01-13T17:14:39Z",
      "updated_at": "2020-01-13T17:14:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT A gentle ping. Please take another look when you get a chance.",
      "created_at": "2020-01-17T01:07:58Z",
      "updated_at": "2020-01-17T01:07:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT ping again \ud83d\udc4b \ud83d\ude03 ",
      "created_at": "2020-01-21T17:16:07Z",
      "updated_at": "2020-01-21T17:16:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I vote to have the fix in 7.0 servicing because users use often WinForms and now Out-ConsoleGridView.\r\n",
      "created_at": "2020-03-13T05:32:35Z",
      "updated_at": "2020-03-13T05:32:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Moved the PR to `7.0.x-servicing-consider`.",
      "created_at": "2020-03-19T00:38:13Z",
      "updated_at": "2020-03-19T00:38:13Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:46:36Z",
      "updated_at": "2020-03-26T17:46:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.1)\n",
      "created_at": "2020-05-14T22:52:39Z",
      "updated_at": "2020-05-14T22:52:39Z"
    }
  ],
  "created_at": "2020-01-08T00:58:18Z",
  "number": 11517,
  "state": "closed",
  "title": "Make Test-Connection always use the default synchronization context for sending ping requests",
  "updated_at": "2020-05-14T22:52:39Z"
}