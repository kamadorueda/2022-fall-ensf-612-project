{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14100",
  "author": "hero101111",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nPS C:\\test> cmd.exe /c \"powershell.exe -command \"\"New-TemporaryFile\"\"\"\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nCommand to success and return a temporary file path\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nError of \"The term 'New-TemporaryFile' is not recognized as the name of a cmdlet, function, script file...\"\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPowerShell 7.1 on Windows 10 x64 version 2004 (for pwsh.exe)\r\nWindows PowerShell 5.1 (for powershell.exe)\r\n```\r\n\r\n## Note\r\nWhen calling`PS C:\\test> powershell.exe -command \"New-TemporaryFile\"` the command works as expected. It seems that when passing through `cmd.exe` or `::CreateProcess()` the `Microsoft.PowerShell.Utility` assembly somehow is loaded differently and a few commands, including `New-TemporaryFile` end up missing.\r\n\r\n`New-TemporaryFile` is available both on PowerShell 7 and on Windows PowerShell 5.1 so this is quite an interesting behavior",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That _is_ pretty odd! I don't think there's much, if anything, that PS 7 can do to rectify the behaviour you're seeing in Windows PowerShell.\r\n\r\n WinPS is not being developed any further, so I don't think it's likely that whatever is causing this in Windows PowerShell will be fixed.",
      "created_at": "2020-11-15T22:54:07Z",
      "updated_at": "2020-11-15T22:54:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's a moot point, as @vexx32 states, but the bug is related to `New-TemporaryFile` being implemented as a _function_ in Windows PowerShell.\r\n\r\nIn other words: it seems that all commands returned by `Get-Command -Module Microsoft.PowerShell.Utility -Type function` are affected in Windows PowerShell, and potentially all other commands implemented as _functions_.\r\n\r\nIn PowerShell Core, all former `Microsoft.PowerShell.Utility` _functions_ have been re-implemented as _cmdlets_, so the problem by definition doesn't arise there.\r\n\r\nThat said, in PowerShell Core there still are _functions_ among the in-box modules, as \r\n`Get-Command -Type function | where Source -like 'Microsoft.*'` indicates.\r\n\r\nCalling such a function via the PowerShell _Core_  CLI seems to work fine, fortunately:\r\n\r\n```\r\npwsh -noprofile -c 'Compress-Archive -?'\r\n```\r\n",
      "created_at": "2020-11-15T23:42:02Z",
      "updated_at": "2020-11-16T14:09:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is again PSModulePath issue. If we run _directly_ Windows PowerShell we modify PSModulePath as needed, otherwise we don't.",
      "created_at": "2020-11-16T10:47:44Z",
      "updated_at": "2020-11-16T10:47:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I got myself confused earlier: I actually only see the problem in `7.1.0-rc.2`, and no longer in `7.1.0`, in combination with Windows PowerShell `v5.1.19041.610`.\r\n\r\nAlso, unless the following test is flawed, the problem does _not_ appear to be related to `$env:PSModulePath`, because I get equivalent results in both versions:\r\n\r\n```\r\nPSCore> cmd /c powershell.exe -nop -command `$env:PSModulePath -split \"';'\"\r\n```\r\n",
      "created_at": "2020-11-16T17:44:29Z",
      "updated_at": "2020-11-16T17:45:05Z"
    },
    {
      "author": "hero101111",
      "author_association": "NONE",
      "body": "@mklement0 I think you were on the right track before. When I run your `PSModulePath` query command on `7.1.0` with the `cmd.exe` proxy I get `%ProgramFiles%\\PowerShell\\Modules` and `%ProgramFiles%\\PowerShell\\7\\Modules` on top of the paths returned _without_ going through the `cmd.exe` proxy.\r\n\r\nLooks like they have precedence over the others, when loading  `Microsoft.PowerShell.Utility`.\r\n\r\nWhen running your variant, with manually setting `PSModulePath`, I get no errors, `New-TemporaryFile` is called successfully.",
      "created_at": "2020-11-16T21:43:00Z",
      "updated_at": "2020-11-16T21:46:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @hero101111; your experience is consistent with @iSazonov's explanation, but the strange thing is that the despite the presence of these extra, PS Core-only folders, the command succeeds for me in `7.1.0` - the only notable difference is that my installation is in a custom location inside my `$env:USERPROFILE` folder.",
      "created_at": "2020-11-16T22:42:30Z",
      "updated_at": "2020-11-16T22:44:09Z"
    },
    {
      "author": "hero101111",
      "author_association": "NONE",
      "body": "I just tried installing PowerShell 7.1.0 in `$env:USERPROFILE` and it still fails to locate `New-TemporaryFile`. Tried it also on a second Windows 10 version 2004 (Windows PowerShell 5.1.19041) machine as well. Seems like there's a different factor at play here.",
      "created_at": "2020-11-17T00:37:58Z",
      "updated_at": "2020-11-17T00:37:58Z"
    },
    {
      "author": "GaetanCambier",
      "author_association": "NONE",
      "body": "Workaround : \r\n`cmd.exe /c \"powershell.exe -command \"\"Import-Module Microsoft.PowerShell.Utility; New-TemporaryFile\"\"\"`\r\n",
      "created_at": "2021-10-18T18:32:22Z",
      "updated_at": "2021-10-18T18:33:46Z"
    },
    {
      "author": "gzm55",
      "author_association": "NONE",
      "body": "another workaround, unset PSModulePath to restore default for powershell\r\n\r\n```powershell\r\ncmd /c \"set PSModulePath=&&powershell -command \"\"New-TemporaryFile\"\"\"\r\n```",
      "created_at": "2022-03-28T02:33:34Z",
      "updated_at": "2022-03-28T02:34:23Z"
    },
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": "Just to add to the discussion, i personally resorted to calling the internal .NET function in case of error. Importing `Microsoft.PowerShell.Utility` or setting `PSModulePath=` didn't work for me.\r\n\r\n```powershell\r\n    try {\r\n        $TempFile = New-TemporaryFile\r\n    }\r\n    catch {\r\n        $TempFile = Get-Item ([System.IO.Path]::GetTempFilename())\r\n    }\r\n```",
      "created_at": "2022-09-04T22:39:06Z",
      "updated_at": "2022-09-04T22:39:06Z"
    }
  ],
  "created_at": "2020-11-15T21:23:42Z",
  "labels": [
    "Issue-Question",
    "Area-SideBySide",
    "WG-Engine"
  ],
  "number": 14100,
  "state": "open",
  "title": "New-TemporaryFile not available when calling powershell.exe from PowerShell 7 through cmd.exe or CreateProcess",
  "updated_at": "2022-09-04T22:39:06Z"
}