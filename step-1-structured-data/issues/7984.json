{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7984",
  "author": "Justiii3",
  "body": "Hello,\r\nI've been experiencing some issues with the AddScript method when hosting PowerShell core in dotnet core console application.\r\nThe issue is that the method does not execute when running the application when there is PowerShell core remoting script. I've tested different ways to import the script inside the console app and every time I get the same issue, which is AddScript method doesn't do anything when  running PS core remoting script. AddSciprt method works perfectly fine when the script does not do any PS core remoting. Additional information and problem explanation below with code examples that are producing the same result.\r\n\r\nHere is an example of the code that I'm using:\r\n\r\n//EXAMPLE CODE 1:\r\n\r\n            string userName = \"User\";\r\n            string server = \"10.192.10.10\"; - for example\r\n            string path = \"root/ssh/**id_rsa**\";\r\n\r\n            using (Runspace runspace = RunspaceFactory.CreateRunspace())\r\n            using (PowerShell powershell = PowerShell.Create())\r\n            {\r\n\r\n                PSCommand command = new PSCommand();\r\n                command.AddCommand(\"New-PSSession\");\r\n                command.AddParameter(\"HostName\", server);\r\n                command.AddParameter(\"Username\", userName);\r\n                command.AddParameter(\"KeyFilePath\", path);\r\n\r\n                powershell.Commands = command;\r\n                runspace.Open();\r\n                powershell.Runspace = runspace;\r\n                Collection<PSSession> result = powershell.Invoke<PSSession>();\r\n\r\n                foreach (ErrorRecord current in powershell.Streams.Error)\r\n                {\r\n                    Console.WriteLine(\"Exception: \" + current.Exception.ToString());\r\n                    Console.WriteLine(\"Inner Exception: \" + current.Exception.InnerException);\r\n                }\r\n                if (result.Count != 1)\r\n                    throw new Exception(\"Unexpected number of Remote Runspace connections returned.\");\r\n\r\n                command = new PSCommand();\r\n                command.AddCommand(\"Set-Variable\");\r\n                command.AddParameter(\"Name\", \"ses\");\r\n                command.AddParameter(\"Value\", result[0]);\r\n                powershell.Commands = command;\r\n                powershell.Runspace = runspace;\r\n                powershell.Invoke();\r\n\r\n                command = new PSCommand();\r\n                command.AddScript(\"Import-PSSession -Session $ses\");\r\n                powershell.Commands = command;\r\n                powershell.Runspace = runspace;\r\n                powershell.Invoke();\r\n\r\n                command = new PSCommand();\r\n                command.AddScript(@\"Invoke-Command -Session $ses -ScriptBlock {\r\n               Script here for example - Get-Process\r\n        }\");\r\n                powershell.AddCommand(\"Out-String\");\r\n                powershell.Commands = command;\r\n                powershell.Runspace = runspace;\r\n\r\n                Collection<PSObject> results = new Collection<PSObject>();\r\n                results = powershell.Invoke();\r\n               \r\n               foreach (PSObject Obj in results)\r\n               {\r\n                 Console.WriteLine(Obj.BaseObject.ToString());\r\n               }\r\n\r\n```\r\n//EXAMPLE CODE 2. Again the AddScript does nothing with the script and no output is visible. When running the PS1 script file, runs successfully and there are no issues.\r\n\r\nusing (var runspace = RunspaceFactory.CreateRunspace())\r\n{\r\n    try\r\n    {\r\n        var script = File.ReadAllText(\"MyScript.ps1\");\r\n        runspace.Open();\r\n        var ps = PowerShell.Create();\r\n        ps.Runspace = runspace;\r\n        ps.AddScript(script);\r\n        ps.Invoke();\r\n        ps.AddCommand(\"MyFunction\").AddParameters(new Dictionary<string, string>\r\n        {\r\n            { \"Param1\" , value1},\r\n            { \"Param2\", value2},\r\n            { \"Param3\", value3},            \r\n        });\r\n\r\n        foreach (var result in ps.Invoke())\r\n        {\r\n\r\n        }\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Debug.WriteLine(ex.Message);\r\n    }\r\n}\r\n```\r\n\r\nAdditional Information:\r\n\r\n1. When running the script from the *.PS1 file, it runs without a problem. I'm using PowerShell Remoting core over ssh\r\n2. Source server (running the dot net core app) - Ununtu 18.04.\r\n3. Target Server Windows 2012 R2 installed the latest OpenSSH -v7.7.2.0p1-Beta\r\n4. When running any other script using the above methods that does not include PS remoting the console app works and I can see output. \r\n5. I can see that the powershell remoting is successful from the logs on the target server.\r\n6. When running the csproj file, the solution restores, builds and runs with no errors. The code just exits and the output is missing.\r\n7.  Powershell remoting is configured so it accepts a public key authentication, which when running ps1 script files executes with no errors and It works.\r\n8. Everytime I run EXAMPLE CODE 1, I can see that a session is created from the logs of the target server. Also to confirm, when I output the Collection<PSSession> result = powershell.Invoke<PSSession>(); to string I can see the details of the PS Session. The moment we reach the AddScirpt method that is executing the Invoke-Command, it runs, but there is no output generated from the script and the Collection<PSObject>results = Collection<PSObject>(); the variable is empty.\r\n\r\nI hope everything is clear.\r\n\r\nI'm not sure If I'm doing something wrong or this is a bug, I would appreciate any help.\r\n-->\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nExpecting the output from the PS remoting script to be visible in console output\r\n\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nthe \"results\" variable is == null and there is no output. \r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n$PSVersionTable of Source server\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-rc.1\r\nOS                             Linux 4.15.0-33-generic #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n$PSVersionTable of Target server:\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\nC# Project Packages: \r\n\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Management\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.1.0\" />\r\n  </ItemGroup>\r\n\r\nDotnet version  - dotnet core 2.1.4.402 \r\nPowerShell win32/OpenSSH version - v7.7.2.0p1-Beta\r\n",
  "closed_at": "2019-06-14T07:40:39Z",
  "comments": [
    {
      "author": "Justiii3",
      "author_association": "NONE",
      "body": "Hello,\r\nI might have found a simple workaround that I've tested and it works.\r\n\r\nBasically instead of asking the don net application to call the remoting script via .AddScript method you ask the dot net app to call a local powershell process that executes the remoting script. The script file should be somewhere on the server you're executing the application from. To show this as a code I'm using the following.\r\n\r\nstring script  = \"start-process pwsh-preview\" -argument \"path to script file\"\r\nusing (Runspace runspace = RunspaceFactory.CreateRunspace())\r\nusing (Powershell powershell = Powershell.Create())\r\n{\r\nrunspace.Open();\r\nPSCommand command = new PSCommand();\r\ncommand.AddScript(script);\r\n powershell.Commands = command;\r\npowerhell.Runspace = runspace;\r\nCollection<PSObject> results = new Collection<PSObject>();\r\nresults = powershell.Invoke();\r\nI'm yet to test calling the script with parameters (not sure how to do it yet maybe someone here can help). As well as hosting in docker container the entire thing. Most likely PowerShell core will need to be installed as well as dot net core in the docker image for it to work.\r\n\r\n**However the main problem where AddScript method DOES NOT EXECUTE remoting script is still there.**",
      "created_at": "2018-11-15T14:13:09Z",
      "updated_at": "2018-11-15T14:13:09Z"
    },
    {
      "author": "Justiii3",
      "author_association": "NONE",
      "body": "Anyone? Any idea on what the issue is here? ",
      "created_at": "2019-02-26T13:33:27Z",
      "updated_at": "2019-02-26T13:33:27Z"
    },
    {
      "author": "DerGuru",
      "author_association": "NONE",
      "body": "I am not completely sure, what your specific error message will say. Mine was: \"Import-PSSession : Files cannot be loaded because running scripts is disabled on this system. Provide a valid\r\ncertificate with which to sign the files.\"\r\nAdding \"Set-ExecutionPolicy RemoteSigned\" before the \"New-PSSession... \" did the trick for me.\r\n[Inpired by this](https://answers.microsoft.com/en-us/msoffice/forum/all/error-when-importing-pssession-on-o365/3eaf0b1a-b5e0-467d-a113-06146a17a9c6) but the link states, that you will need admin rights, which I did not.\r\n",
      "created_at": "2019-06-13T09:54:20Z",
      "updated_at": "2019-06-13T09:54:20Z"
    },
    {
      "author": "Justiii3",
      "author_association": "NONE",
      "body": "Hello,\r\n\r\nI've created a new project yesterday, Installed System.Management.Automation  and Microsoft.PowerShell.SDK versions 6.2.1 . \r\nI've ran the project with EXAMPLE CODE 1 and that worked perfectly. The project was ran on the same environment as the one described in the issue.\r\n\r\nThank you for your help\r\n\r\nClosing the Issue",
      "created_at": "2019-06-14T07:40:39Z",
      "updated_at": "2019-06-14T07:40:39Z"
    }
  ],
  "created_at": "2018-10-10T15:16:02Z",
  "number": 7984,
  "state": "closed",
  "title": "AddScript Method does not work when hosting PS core remoting script in dot net core console application.",
  "updated_at": "2019-06-28T13:18:51Z"
}