{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8126",
  "author": "RDStewart",
  "body": "Steps to reproduce\r\n------------------\r\nRun Get-Date -Format R\r\n```\r\nPS /Users/rdstewart> date;Get-Date -Format R \r\nThu Oct 25 18:03:44 CDT 2018\r\nThu, 25 Oct 2018 18:03:44 GMT\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nI would expect the time to be corrected to GMT.\r\n```\r\nPS /Users/rdstewart> date;Get-Date -Format R \r\nThu Oct 25 18:03:44 CDT 2018\r\nThu, 25 Oct 2018 23:03:44 GMT\r\n```\r\n\r\nActual behavior\r\n---------------\r\nGet-Date -Format R appears to return the local time with the time zone identifier \"GMT\", even though the time it shows is not actually corrected to GMT.\r\n\r\nEnvironment data\r\n----------------\r\nI have observed this on several Windows 10 systems, one Linux system, and one Mac. The output above is from the Mac. I only have version information from the Mac handy:\r\n```powershell\r\nPS /Users/rdstewart> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Wed Oct  4 00:17:00 PDT 2017; root:xnu-3789.71.6~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2018-10-26T02:57:29Z",
  "comments": [
    {
      "author": "RDStewart",
      "author_association": "NONE",
      "body": "Poking around PowerShell/src/Microsoft.PowerShell.Commands.Utility/commands/utility/GetDateCommand.cs, it looks like the R format specifier doesn't trigger any of the -Format special cases, so it gets passed directly to [DateTime].ToString(Format, CultureInfo.CurrentCulture) on line 304.\r\n\r\nI'm not sure where the DateTime object type is defined. I assume it's part of C#, but I don't use C# on a regular basis. Sorry I probably filed this in the wrong project. If someone could point me to the right place, I would appreciate it.",
      "created_at": "2018-10-25T23:40:34Z",
      "updated_at": "2018-10-25T23:40:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RDStewart you are correct that for unhandled formats, it passes it straight to the .Net API.  In this case, it's equivalent to\r\n\r\n> [DateTime]::Now.ToString(\"R\")\r\n\r\nLooking at the [.NET documentation for this api](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#the-rfc1123-r-r-format-specifier) it says that it explicitly doesn't convert the datetime and that is something the user must do themselves.  It seems like we could update the cmdlet to support \"R\" and convert to UTC first.\r\n\r\ncc @iSazonov who knows more about this than I",
      "created_at": "2018-10-26T00:44:25Z",
      "updated_at": "2018-10-26T00:44:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@chuanjiao10 comparing to the `date` command, this appears to be \"by design\"?",
      "created_at": "2018-10-26T01:33:36Z",
      "updated_at": "2018-10-26T01:33:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Running `date -R` gives the equivalent of `get-date -format R` so we are consistent (or rather .NET Core is consistent).  Expectation is that user converts UTC offset from GMT.",
      "created_at": "2018-10-26T02:57:29Z",
      "updated_at": "2018-10-26T02:57:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I confirm.",
      "created_at": "2018-10-26T03:17:26Z",
      "updated_at": "2018-10-26T03:17:26Z"
    },
    {
      "author": "RDStewart",
      "author_association": "NONE",
      "body": "Documenting my workaround for anyone else who stumbles on the reported issue. This works consistently for me:\r\n\r\nGet-Date -Date (Get-Date).ToUniversalTime() -Format R\r\n\r\nIt still seems odd that Get-Date by itself emits the current time in every context I have tried _except_ when using \"-Format R\". I think the RFC1123 formatter should print the correct time zone abbreviation for what it believes it is showing rather than the current state, where it appears to print the letters \"GMT\" regardless of time zone.\r\n\r\nThis workaround is acceptable to me, though.",
      "created_at": "2018-11-15T14:39:40Z",
      "updated_at": "2018-11-15T14:39:40Z"
    },
    {
      "author": "RDStewart",
      "author_association": "NONE",
      "body": "While looking for this issue to find the workaround I used, I noticed I had missed something in one of the replies.\r\n> Running `date -R` gives the equivalent of `get-date -format R` so we are consistent (or rather .NET Core is consistent). Expectation is that user converts UTC offset from GMT.\r\n\r\n`date -R` returns the correct time:\r\n\r\n```\r\nPS /Users/rdstewart> date;date -R;Get-Date -Format R\r\nFri Nov  6 13:24:10 CST 2020\r\nFri, 06 Nov 2020 13:24:10 -0600\r\nFri, 06 Nov 2020 13:24:10 GMT\r\n```\r\nThe time returned is the same, but `date -R` does not incorrectly claim to be GMT.\r\n\r\nThe workaround still works for me.",
      "created_at": "2020-11-06T19:46:33Z",
      "updated_at": "2020-11-06T19:46:33Z"
    }
  ],
  "created_at": "2018-10-25T23:17:55Z",
  "number": 8126,
  "state": "closed",
  "title": "Get-Date -Format R does not correct time to GMT",
  "updated_at": "2020-11-06T19:46:33Z"
}