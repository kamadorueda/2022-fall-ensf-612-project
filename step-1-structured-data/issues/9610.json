{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9610",
  "author": "davidseibel",
  "body": "In Windows PowerShell, if converting an object to JSON that has a type hint __type, it would correctly place the type hint as the first property in the JSON output.  This is a requirement of some APIs (including WCF-based APIs, see here: https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/stand-alone-json-serialization#type-hint-position-in-json-objects)\r\n\r\nIn PowerShell Core, this ordering is no longer enforced.\r\n\r\n### Expected Output (Example from Windows PowerShell):\r\n```PowerShell\r\nC:\\> [PSCustomObject]@{ param1 = \"test\"; __type = \"sometype\"; param2 = \"test\" } | ConvertTo-Json\r\n{\r\n    \"__type\":  \"sometype\",\r\n    \"param1\":  \"test\",\r\n    \"param2\":  \"test\"\r\n}\r\n```\r\n\r\n### Actual Output:\r\n```PowerShell\r\nC:\\> [PSCustomObject]@{ param1 = \"test\"; __type = \"sometype\"; param2 = \"test\" } | ConvertTo-Json\r\n{\r\n  \"param1\": \"test\",\r\n  \"__type\": \"sometype\",\r\n  \"param2\": \"test\"\r\n}\r\n```\r\n\r\n### Version Data:\r\n```PowerShell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "Cirzen",
      "author_association": "NONE",
      "body": "As I understand it, it's the hashtable where the ordering is not guaranteed, and technically never has been, even if the results normally came out alphabetically sorted. \r\nYou should be able to use `[pscustomobject][ordered]@{__type=\"foo\", param1 = \"\"...}` to maintain a specific order and put the type hint first in the associative array.",
      "created_at": "2019-05-16T14:35:58Z",
      "updated_at": "2019-05-16T14:35:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It looks like the API used in Windows PowerShell had a special case for type hints which should likely be mimicked in the new APIs used for 6.0+\r\n\r\nAlso, when using the `[PSCustomObject]` cast for a hashtable, the parser automatically ensures that property ordering is retained, so this definitely seems like a bug in the json conversion. Use of `[ordered]`  combined with `[PSCustomObject]` is superfluous and probably only slows down parsing / conversions, if indeed it does anything at all.",
      "created_at": "2019-05-16T14:47:57Z",
      "updated_at": "2019-05-16T14:51:28Z"
    },
    {
      "author": "davidseibel",
      "author_association": "CONTRIBUTOR",
      "body": "I should clarify, I'm specifically running into this problem with PowerShell classes.  I just used PSCustomObject for the example.  Sure, I could work-around this by placing __type first in the class, but this doesn't work when sub-classing:\r\n\r\n```PowerShell\r\nclass BaseClass {\r\n    $__type = \"BaseClass\"\r\n    $baseprop = \"value\"\r\n} \r\n\r\nclass SubClass : BaseClass {\r\n    $subprop\r\n    SubClass() {\r\n        $this.__type = \"SomeClass\"\r\n    }\r\n}\r\n\r\n$test = [SubClass]::new()\r\n$test | ConvertTo-Json\r\n```\r\nWindows PowerShell output:\r\n```PowerShell\r\n{\r\n    \"__type\":  \"SomeClass\",\r\n    \"subprop\":  null,\r\n    \"baseprop\":  \"value\"\r\n}\r\n```\r\nPowerShell Core output:\r\n```PowerShell\r\n{\r\n  \"subprop\": null,\r\n  \"__type\": \"SomeClass\",\r\n  \"baseprop\": \"value\"\r\n}\r\n```",
      "created_at": "2019-05-16T15:00:38Z",
      "updated_at": "2019-05-16T15:02:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, this definitely should be handled by the json serializer.\r\n\r\n/cc @markekraus is this potentially a simple fix? \ud83d\ude42 ",
      "created_at": "2019-05-16T15:52:07Z",
      "updated_at": "2019-05-16T15:52:07Z"
    },
    {
      "author": "davidseibel",
      "author_association": "CONTRIBUTOR",
      "body": "I found a workaround for the sub-classing problem: just redefine the property on the subclass rather than reusing the inherited property (as I did in my earlier example):\r\n\r\n```PowerShell\r\nclass BaseClass {\r\n    $__type = \"BaseClass\"\r\n    $baseprop = \"value\"\r\n} \r\n\r\nclass SubClass : BaseClass {\r\n    $__type = \"SubClass\"\r\n    $subprop = \"anothervalue\"\r\n}\r\n\r\n$test = [SubClass]::new()\r\n$test | ConvertTo-Json\r\n```\r\nOutput:\r\n``` PowerShell\r\n{\r\n  \"__type\": \"SubClass\",\r\n  \"subprop\": \"anothervalue\",\r\n  \"baseprop\": \"value\"\r\n}\r\n```\r\nThis works on both 5.1.17134.858 and 7.0.0-rc.3.  I have not tested on other versions.\r\n\r\nEDIT - this workaround also works in the 7.0.0 GA release.",
      "created_at": "2020-02-24T13:27:01Z",
      "updated_at": "2020-03-06T13:57:00Z"
    }
  ],
  "created_at": "2019-05-15T12:08:01Z",
  "number": 9610,
  "state": "open",
  "title": "ConvertTo-Json doesn't place type hint correctly",
  "updated_at": "2020-03-06T13:57:00Z"
}