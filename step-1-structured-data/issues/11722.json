{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11722",
  "author": "mklement0",
  "body": "Note: This is a minor issue in the grand scheme of things (and it's easy to work around it), and there may well be good reasons for the behavior (which would be good to know).\r\n\r\nThe problem is specific to `[object[]]` arrays (without cast); other types work fine.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n[object[]] $arr = 1, 2, 3  # omitting the type constraint has the same effect\r\n\r\n# OK: with cast.\r\n[Linq.Enumerable]::Any([object[]] $arr) | Should -BeTrue\r\n\r\n# Fails without the cast.\r\n[Linq.Enumerable]::Any($arr) | Should -BeTrue\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe method call in the 2nd command fails, because overload resolution fails (the generic type parameter is not inferred):\r\n\r\n```\r\nMethodException: Cannot find an overload for \"Any\" and the argument count: \"1\"\r\n```\r\n\r\nCuriously, in a directory that has _at least two_ items _one of which is a directory_ the following does _not_ fail:\r\n\r\n```powershell\r\nPS> [Linq.Enumerable]::Any((Get-ChildItem))\r\nTrue\r\n```\r\n\r\nA type other than `[object]` works:\r\n\r\n```powershell\r\nPS> $intArr = [int[]] (1, 2, 3); [Linq.Enumerable]::Any($intArr)\r\nTrue\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe related #10664 #5146",
      "created_at": "2020-01-30T06:35:37Z",
      "updated_at": "2020-01-30T06:37:20Z"
    }
  ],
  "created_at": "2020-01-29T20:33:12Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 11722,
  "state": "open",
  "title": "[Linq.Enumerable]::Any() accepts [object[]] arrays only with an explicit cast",
  "updated_at": "2020-01-30T06:37:20Z"
}