{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14809",
  "author": "Liturgist",
  "body": "## Summary of the new feature/enhancement\r\nHaving `#Requires -CaseSensitive` would help developers on case insensitive platforms ensure that the code will work on case sensitive platforms.",
  "closed_at": "2021-02-18T22:40:59Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "AFAIK the only thing that is really case sensitive is the file system provider. Everything else, from accessing properties, calling methods, variable names, etc are case insensitive regardless of the platform. I'm not sure how effective making the filesystem case sensitive on a case insensitive fs would be considering the files themselves are not guaranteed to be the same case (or the same files altogether) across the various platforms. It would add more processing overhead to the fs provider which is already slowed down by all the other stuff it adds.",
      "created_at": "2021-02-15T19:19:29Z",
      "updated_at": "2021-02-15T19:19:29Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Because Windows filesystems are typically case insensitive, many developers are lulled into a \"it-really-doesn't-matter\" or \"whatever\" approach to both naming and referring to files. When the need to run the code on a case sensitive platform occurs, developers are stuck with a myriad of failures.\r\n\r\nYes, you can say it is their own darn fault. But the result is that it is a barrier to cross-platform PowerShell code. Yes, the build pipe should include testing on multiple platforms. The reality is that not all build environments have that capability.\r\n\r\nI do not portend to know how such would be implemented in a FileSystem provider. But, I wonder if it would remove the need to monocase filenames for comparison with .ToUpper()/.ToLower(). Would this not improve speed performance?\r\n\r\nShort of having `#Requires -CaseSensitive`, could PowerShell have an invocation switch on the executable to enable case sensitivity for testing?",
      "created_at": "2021-02-17T21:28:28Z",
      "updated_at": "2021-02-17T21:28:28Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> many developers are lulled into a \"it-really-doesn't-matter\" or \"whatever\" approach to both naming and referring to files.\r\n\r\nIMO that's what tests are for, test your code on the platforms it runs and you will pick up these issues. If you are building paths dynamically then it shouldn't matter as it's based on what is already there when your code runs. If you are building paths based on some project structure that you package up then yes this could be a problem but I personally don't think it's something PowerShell should care about. Testing honestly isn't that hard and if you are building modules or code then you really should invest more time in getting that set up right.\r\n\r\n> But, I wonder if it would remove the need to monocase filenames for comparison with .ToUpper()/.ToLower(). Would this not improve speed performance?\r\n\r\nI don't think so, it's not PowerShell that is making things case insensitive on Windows but rather Windows itself that is doing it. PowerShell is sending the request to .NET which then goes to Win32 [CreateFile](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew) which ultimately gets sent as a request to the NTFS driver and that does the lookup. This is where the case insensitive matching comes into place so to achieve what you are looking for you now need to add an extra check in PowerShell to validate the path taking up more CPU cycles. Granted this shouldn't be too expensive but it's definitely something to consider.\r\n\r\nA potential work around for this use case is to enable case sensitivity on an NTFS folder so that any operations inside that folder are case sensitive. This is enabled on the file system layer and you can use [fsutil](https://devblogs.microsoft.com/commandline/per-directory-case-sensitivity-and-wsl/) to enable this on the dir(s) of your choice.\r\n\r\nThe filesystem case (in)sensitivity stems from layers deep down and not something PowerShell itself controls. To do so would require more code to validate the paths whenever it calls .NET which would happen in many locations. There's bound to be areas where this will be missed and PowerShell will not be able to guarantee 3rd party code will even respect this option leading to a bad UX when people complain the option doesn't work.\r\n\r\nThis is just my opinion and the PowerShell team may think differently, I just thought I would share why I don't think this is a good idea to implement.",
      "created_at": "2021-02-18T00:32:12Z",
      "updated_at": "2021-02-18T00:32:12Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Ok. Using `fsutil.exe` will probably be adequate.\r\n\r\nhttps://devblogs.microsoft.com/commandline/per-directory-case-sensitivity-and-wsl/\r\nhttps://www.windowscentral.com/how-enable-ntfs-treat-folders-case-sensitive-windows-10\n\n<blockquote><img src=\"https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/02/mount-case-dir.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/03/cropped-CommandLineIcon-1-192x192.png\" height=\"14\"> Windows Command Line</div><div><strong><a href=\"https://devblogs.microsoft.com/commandline/per-directory-case-sensitivity-and-wsl/\">Per-directory case sensitivity and WSL | Windows Command Line</a></strong></div><div>If you have used the Windows Subsystem for Linux, you\u2019re probably aware that it allows you to treat your Windows file systems (mounted under /mnt/c, /mnt/d, etc.) as case sensitive. This means, among other things, that you can create files whose names differ only by case (e.g.</div></blockquote>\n<blockquote><img src=\"https://www.windowscentral.com/sites/wpcentral.com/files/styles/large/public/field/image/2018/05/enable-case-sensitivity-ntfs-windows-10-1803.jpg\" width=\"48\" align=\"right\"><div><img src=\"/favicon.ico\" height=\"14\"> Windows Central</div><div><strong><a href=\"https://www.windowscentral.com/how-enable-ntfs-treat-folders-case-sensitive-windows-10\">Enabling NTFS case sensitivity support for folders on Windows 10</a></strong></div><div>In this guide, we'll show you the steps to enable a new flag on NTFS to allows support for case sensitive files on Windows 10, just like in Linux.</div></blockquote>",
      "created_at": "2021-02-18T22:40:59Z",
      "updated_at": "2021-02-18T22:41:01Z"
    }
  ],
  "created_at": "2021-02-15T16:47:18Z",
  "labels": [],
  "number": 14809,
  "state": "closed",
  "title": "Add #Reqiures -CaseSensitive",
  "updated_at": "2021-02-19T01:17:21Z"
}