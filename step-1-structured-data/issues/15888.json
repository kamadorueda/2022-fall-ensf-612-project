{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15888",
  "author": "ArnoCan",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe concatenation of differently quoted string arguments for a command line call is resolved into separate argv entries. \r\n\r\nFor example a python one-liner, same for PowerShell scripts etc.\r\n-> Call: C:\\temp\\PowerShell-7.1.3-win-x64> c:/Python371/python.exe  -c \"import sys;print(sys.argv[1:])\" \"a\"'b'\"c\"\r\n-> Result: ['a', 'b', 'c']\r\n\r\nI would expect these strings to be actually concatenated into one string:\r\n-> Result: ['abc']\r\n\r\nAs this is the case e.g. for:\r\n-> Call: C:\\temp\\PowerShell-7.1.3-win-x64> c:/Python371/python.exe  -c \"import sys;print(sys.argv[1:])\" \"a\"\"b\"\"c\"\r\n-> Result: ['abc']\r\n\r\n\n\n### Expected behavior\n\n```console\nPS C:\\temp\\PowerShell-7.1.3-win-x64> c:/Python371/python.exe  -c \"import sys; print(sys.argv[1:])\" \"a\"'b'\"c\"\r\n['abc']\n```\n\n\n### Actual behavior\n\n```console\nPS C:\\temp\\PowerShell-7.1.3-win-x64> c:/Python371/python.exe  -c \"import sys; print(sys.argv[1:])\" \"a\"'b'\"c\"\r\n['a', 'b', 'c']\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-08-13T17:00:47Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "PS supports both single and double quoted string, so I'm not sure this is really unexpected.\n\nYour example has three separate string tokens in it, so they get passed as three separate arguments.\n\nPS's parsing treats \" and ' as enclosing characters for strings, and it doesn't support concatenation like this. Three separate strings, three separate arguments.\n\n",
      "created_at": "2021-08-08T20:49:50Z",
      "updated_at": "2021-08-08T20:49:50Z"
    },
    {
      "author": "ArnoCan",
      "author_association": "NONE",
      "body": "See also #15889.\r\nThe reason I have to deal with this is that I am currently writing scanner/lexer/tokenizer for command line call strings - for raw input as well as the pre-scanned ARGV. This requires to process the strings exactly - for bash/sh/ksh + PowerShell + DOS/cmd.exe - each with it's own domain of course.\r\n\r\nThe differently quoted strings are scanned on the first view as three separate string tokens, but they miss a SEPARATOR. The \"outer\" quotes of a string are commonly dropped from a parsed command line string as these are temporary markers grouping the characters into a string. This would result in three concatenated strings with dropped temporary markers - the quotes. Thus as expected a single concatenated string argument - ARGV entry.\r\n\r\nThe same example for Posix based shells - bash/sh/ksh. for WSL/Linux:\r\n```\r\nC:\\Users\\test>wsl python -c \"import sys;print(sys.argv[1:])\" \"a\"'b'\"c\"\r\n['abc']\r\n\r\nC:\\Users\\test>\r\n```\r\nand for native Linux:\r\n```\r\ntest:~$ python -c \"import sys;print(sys.argv[1:])\" \"a\"'b'\"c\"\r\n['abc']\r\ntest:~$ \r\n```\r\n",
      "created_at": "2021-08-09T02:29:30Z",
      "updated_at": "2021-08-09T02:29:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 ",
      "created_at": "2021-08-09T05:51:35Z",
      "updated_at": "2021-08-09T05:51:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of #1995",
      "created_at": "2021-08-12T15:25:28Z",
      "updated_at": "2021-08-12T15:25:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-08-13T17:00:47Z",
      "updated_at": "2021-08-13T17:00:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The problem is unrelated to #1995 - it equally affects PowerShell commands.\r\n\r\nInstead, it is a specific instance of  #6467 and - on Unix with potentially destructive consequences - #12647\r\n\r\nThe short of it is that composing a single string argument from a mix of quoting styles - the way you can do in POSIX-like shells such as `bash` - only works in PowerShell _if the first string (or simple variable reference) is UNQUOTED_:\r\n\r\n```powershell\r\n# OK - single argument, because the first token is *unquoted*.\r\nPS> Write-Output foo'bar'\r\nfoobar\r\n\r\n# !! TWO arguments\r\nPS> Write-Output 'bar'foo\r\nbar\r\nfoo\r\n```\r\n\r\nMore info in [this SO answer](https://stackoverflow.com/a/65380907/45375).\r\n",
      "created_at": "2021-08-13T19:03:08Z",
      "updated_at": "2021-08-13T19:03:08Z"
    }
  ],
  "created_at": "2021-08-08T19:35:54Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question"
  ],
  "number": 15888,
  "state": "closed",
  "title": "The concatenation of differently quoted command line arguments splits into multiple argv.",
  "updated_at": "2021-08-13T19:03:09Z"
}