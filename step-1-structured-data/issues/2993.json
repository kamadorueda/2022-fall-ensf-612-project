{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2993",
  "author": "Jaykul",
  "body": "It seem clear to me that a design mistake was made when Resolve-Path and Convert-Path were created, and they both return only **resolved** paths (i.e. the path must exist).\r\n\r\nThe right design would be to have Convert-Path not care if the path exists, and if you care, you use both commands.\r\n\r\nSince that ship has sailed, I propose adding a `-Unresolved` switch to Convert-Path to change it to do what it should have done all along, called GetUnresolvedProviderPathFromPSPath instead of [calling GetResolvedProviderPathFromPSPath](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Management/commands/management/ConvertPathCommand.cs#L86).\r\n\r\nIf nobody has a problem with that ... I can send a PR",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Great! Make PR.\r\nI'd only made the switch more descriptive: `-UnresolvePath`?\r\n",
      "created_at": "2017-01-13T12:25:35Z",
      "updated_at": "2017-01-13T12:25:35Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "I'd suggest something along the lines of -SkipPathCheck similar to the other Skip switches as mentioned in #2006",
      "created_at": "2017-01-21T06:40:25Z",
      "updated_at": "2017-01-21T06:40:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @rkeithhill will again offer a good option.",
      "created_at": "2017-01-21T16:47:47Z",
      "updated_at": "2017-01-21T16:47:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @mklement0 Can we approve the new behavior and parameter?",
      "created_at": "2018-10-31T14:16:01Z",
      "updated_at": "2018-10-31T14:16:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The new behavior behind a switch seems fine.  cc @HemantMahawar if he has any good suggestions on naming.",
      "created_at": "2018-10-31T14:39:28Z",
      "updated_at": "2018-10-31T14:39:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Opting out of behavior is more typically done with `-No*` parameters (`-NoNewline`, `-NoProxy`, `-NoClobber`, ... - `Get-Module` and `Invoke-WebRequest/RestMethod` are, unfortunately, dissenters and use `-Skip*`)\r\n\r\nTherefore: `-NoResolve`, perhaps?\r\n",
      "created_at": "2018-10-31T15:52:14Z",
      "updated_at": "2018-10-31T15:52:14Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "TBH, **-Skip`<Something`>** and **-No`<Something`>** are very close, although have very subtle difference.\r\n\r\n- **-Skip`<Something`>** used in cmdlets (```(SkipCertificateCheck, SkipEditionCheck, SkipHeaderValidation, SkipNetworkProfileCheck, SkipCACheck, SkipCNCheck,  SkipRevocationCheck)``` ) is typically for **bypassing some check**.\r\n\r\n- **-No`<Something`>** used in cmdlets (```(NoClobber, NoNewline, NoServiceRestart, NoTypeInformation, NoProxy, NoRecurse, NoQualifier, NoNewWindow, NoNewScope, NoMachineProfile, NoEnumerate, NoEncryption, NoElement, NoCompression, NoWait)```) is typically about **not taking specific action**.\r\n\r\n In this case ```-SkipPathCheck``` (or maybe ```-SkipPathResolution``` or ```-SkipPathValidation```) seems more appropriate.\r\n\r\n\r\n\r\n```",
      "created_at": "2018-10-31T17:48:26Z",
      "updated_at": "2018-10-31T17:49:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @HemantMahawar, I see the difference, but I personally don't think it's strong enough to warrant reflection in distinct parameter names.\r\n\r\nCase in point: You could equally argue that the requested behavior here is _not taking the action_ of resolving the path.\r\n\r\nTo put it differently: **I think the existing `-Skip*` parameters should have been named `-No*` instead to begin with for consistency** (though, should we reach a consensus, we could introduce _aliases_ for consistency going forward).\r\n\r\n",
      "created_at": "2018-10-31T18:19:20Z",
      "updated_at": "2018-10-31T22:54:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A couple more thoughts: `No` is shorter and less ambiguous than `Skip`, which:\r\n* has plausible synonyms such as \"bypass\", \"omit\", ...\r\n* is also in use with significantly different semantics (<br>`Import-Cli -Skip <int>`, `Select-Object -Skip <int> -SkipLast <int> -SkipIndex <int[]>`)\r\n",
      "created_at": "2018-10-31T18:34:07Z",
      "updated_at": "2018-10-31T18:36:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and recommends `-SkipValidation`",
      "created_at": "2018-10-31T22:46:28Z",
      "updated_at": "2018-10-31T22:46:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: While I see value in the generic aspect of the `Validation` part of the parameter name, can you explain why the `Skip` part was considered worth retaining?\r\n\r\nIn other words: what is the value in retaining the `-No*` / `-Skip*` split?\r\n",
      "created_at": "2018-10-31T22:53:08Z",
      "updated_at": "2018-10-31T22:53:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 it's unfortunate that we have some inconsistency, however, in discussing this specific issue, we agreed that `Skip` was more readable than `No` as in: `Convert-Path foo -SkipValidation` was slightly more understandable as English than `Convert-Path foo -NoValidation`",
      "created_at": "2018-11-01T04:16:32Z",
      "updated_at": "2018-11-01T04:16:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT, but there's also this:\r\n\r\n```none\r\nPS> Get-ParameterVerb No\r\n\r\nVerb Group  Description\r\n---- -----  -----------\r\nNo   Common Opts out of a default behavior.\r\n```\r\n\r\n<sup>Granted, _no_ is not a _verb_, but neither are `new`, `foreach`, or `where` - close enough.</sup>\r\n\r\nAnd, from the [associated help topic](https://docs.microsoft.com/en-us/powershell/developer/cmdlet/approved-verbs-for-windows-powershell-commands#similar-verbs-for-different-actions):\r\n\r\n Verb | Action | Comments \r\n-----| -------| ----------------\r\nNo |  Opts out of a default behavior. | For this action, do not use verbs such as `Skip`, `Omit`, `Bypass`, or `Drop`\r\n\r\nNow, you might argue that this is just fan fiction - and you'd be correct - but isn't it a great story?\r\n",
      "created_at": "2018-11-05T03:17:34Z",
      "updated_at": "2018-11-05T03:20:11Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "It seems like the guidance for inverted parameter switches should be along the lines of:\r\n\r\n- No (Additional Output or Tasks) -- also, use to invert a verb switch\r\n- Skip (Additional Tests or Validation)\r\n\r\nFor what it's worth, if this was being written from scratch, I could see either `-NoValidate` or `-SkipValidation` but ...\r\n\r\n1. It needed to be `-NoValidate` (an inversion of a hypothetical `-Validate` verb switch), because \"Validation\" is a noun\r\n2. In greenfield, we would hopefully have said: change the default behavior, and use `-Resolve` as the switch \ud83d\ude09\r\n\r\nGiven the cmdlet has existed, doing what it does, for years, \"skip\"ing what it normally does makes sense to me.  \r\n\r\nI liked using \"Resolve\" in there (`-NoResolve` ??) rather than validate, because under the covers (and in other cmdlets) that's what we call it. Additionally, we're not (just) skipping validation, we're going to not \"resolve\" the path to an existing folder -- **which means that if we're passed a path with wildcards, we would return a path that still has wildcards in it, right?**",
      "created_at": "2018-11-05T16:08:20Z",
      "updated_at": "2018-11-05T16:08:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ">  which means that if we're passed a path with wildcards, we would return a path that still has wildcards in it, right?\r\n\r\nYes - to me that's the only sensible action to take.\r\n\r\nRe `-NoValidation` vs. `-NoValidate`: To me, the `No` is the \"verb\" in this name and that goes better with a noun; that said, I don't feel strongly about this aspect (the existing `-No*` parameters show both patterns) - unlike the aspect of keeping the `-Skip*` / `-No*` dichotomy (see below).\r\n\r\nActually, I just realized that I had accidentally created duplicate issue #7197, where I had suggested `-NoCheck` as the switch name.\r\n\r\nThe naming issue aside, the linked issue also proposes adding a `-PSProvider` argument, so that scripts can robustly refer to the current _filesystem_ location, even if a different provider happens to underlie the current location.\r\n\r\n----\r\n\r\nRe  `-Skip*` vs. `-No*`, for the love of Snover and punishing perished ponies:\r\n\r\n* The distinction between `-Skip*` and `-No*` is arbitrary and not rooted in real-world semantics. There's nothing inherent in the common usage of the verb _to skip_ that ties it to validation or checks.\r\n\r\n  * Recent case in point: [suggesting `-SkipUnsupportedTypes` as the name for a switch](https://github.com/PowerShell/PowerShell/issues/5749#issuecomment-355208725) that doesn't bypass a _check_, but _modifies the behavior_ to ignore unsupported values.\r\n\r\n* As such, it offers no benefit and introduces extrinsic complexity. \r\n\r\n  * The aspect of whether consistently applied `-No*` naming relates to a check or an action in a given parameter can be inferred from the parameter's full name itself.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-26T22:23:25Z",
      "updated_at": "2018-11-27T03:50:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see 28 cmdlets in the repo utilizes the same approach and use `GetResolvedProviderPathFromPSPath` for both Path and LiteralPath parameters. The fact says about consistency in design - GetResolvedProviderPathFromPSPath resolves glob chars vs GetUnresolvedProviderPathFromPSPath doesn't.\r\nAssumption about using GetUnresolvedProviderPathFromPSPath instead of calling GetResolvedProviderPathFromPSPath in the cmdlet is not correct. GetUnresolvedProviderPathFromPSPath doesn't check existence. I believe we want GetResolvedProviderPathFromPSPath  but internal one with  allowNonexistingPaths=true parameter.\r\n\r\nInitial request is \"should work with **non-existent** paths\". If original design is \"allow only existent paths\" the request is obviously \"allow non-existent paths\". So expected new switch name could be `AllowNonExistent`.\r\n\r\n",
      "created_at": "2021-12-18T19:50:06Z",
      "updated_at": "2021-12-18T19:50:06Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "The Powershell Cmdlet working group reviewed this and agree that adding a switch to skip the path validation is a good idea.\r\n\r\nBut what should the switch name be? We discussed two alternatives -SkipValidation or -SkipPathValidation. \r\n\r\nComments",
      "created_at": "2022-06-01T16:21:43Z",
      "updated_at": "2022-06-01T16:21:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If there is ever additional validation in the future, we should be more specific, so my preference is `-SkipPathValidation`",
      "created_at": "2022-06-01T16:32:27Z",
      "updated_at": "2022-06-01T16:32:27Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Having discussed this further, the parameter name should be `-SkipPathValidation`",
      "created_at": "2022-06-01T16:35:06Z",
      "updated_at": "2022-06-01T16:35:06Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'm concerned about this `-SkipPathValidation` parameter name and about what @iSazonov wrote:\r\n> ... GetResolvedProviderPathFromPSPath resolves glob chars vs GetUnresolvedProviderPathFromPSPath doesn't ... I believe we want GetResolvedProviderPathFromPSPath but internal one with allowNonexistingPaths=true parameter.\r\n\r\nI thought we were all on the same page that this would actually **not _resolve_ paths** ...\r\n\r\nAs [I said before](https://github.com/PowerShell/PowerShell/issues/2993#issuecomment-435931640=):\r\n> we're not (just) skipping validation, we're going to not \"resolve\" the path to an existing folder -- which means that if we're passed a path with wildcards, we would return a path that still has wildcards in it, right?\r\n\r\nI mean, if you won't verify the existence of the file, then you **cannot** resolve the wildcards, right?",
      "created_at": "2022-06-03T03:02:59Z",
      "updated_at": "2022-06-03T03:16:12Z"
    }
  ],
  "created_at": "2017-01-11T16:11:44Z",
  "number": 2993,
  "state": "open",
  "title": "Convert-Path should work with non-existent paths",
  "updated_at": "2022-06-03T03:16:12Z"
}