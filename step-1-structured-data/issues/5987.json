{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5987",
  "author": "TigerBoom",
  "body": "The code below assigns AutomationNull to an array member and then calls function f($x) with the array as the argument. The surprising result is that the array member that used to contain AutomationNull now contains a simple $null.\r\n\r\nSo it seems that simply calling f($x) with the array as the argument has changed the contents of the array.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nWrite-Host -ForegroundColor Yellow \"******** array initialized\"\r\n$array = @(0,$null,2)\r\n\r\nfor($i=0; $i -lt $array.Count; $i++) {\r\n    if ($null -eq $array[$i]) {\r\n        if ($array[$i] -is [psobject]) {\"array[$i] is null and [psobject]\"\r\n        } else {\"array[$i] is null\"}\r\n    } else {\"array[$i] is \" + $array[$i]}\r\n}\r\n\r\nWrite-Host -ForegroundColor Yellow \"******** array[1] set to empty pipeline\"\r\n$emptypipe = (@()|%{1})\r\n$array[1] = $emptypipe\r\n\r\nfor($i=0; $i -lt $array.Count; $i++) {\r\n    if ($null -eq $array[$i]) {\r\n        if ($array[$i] -is [psobject]) {\"array[$i] is null and [psobject]\"\r\n        } else {\"array[$i] is null\"}\r\n    } else {\"array[$i] is \" + $array[$i]}\r\n}\r\n\r\n\r\nfunction f($x) {Write-Host -ForegroundColor Yellow '******** called: f -x $array'}\r\nf -x $array\r\n\r\nfor($i=0; $i -lt $array.Count; $i++) {\r\n    if ($null -eq $array[$i]) {\r\n        if ($array[$i] -is [psobject]) {\"array[$i] is null and [psobject]\"\r\n        } else {\"array[$i] is null\"}\r\n    } else {\"array[$i] is \" + $array[$i]}\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n******** array initialized\r\narray[0] is 0\r\narray[1] is null\r\narray[2] is 2\r\n******** array[1] set to empty pipeline\r\narray[0] is 0\r\narray[1] is null and [psobject]\r\narray[2] is 2\r\n******** called: f -x $array\r\narray[0] is 0\r\narray[1] is null and [psobject]            <<<<<<\r\narray[2] is 2\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n******** array initialized\r\narray[0] is 0\r\narray[1] is null\r\narray[2] is 2\r\n******** array[1] set to empty pipeline\r\narray[0] is 0\r\narray[1] is null and [psobject]\r\narray[2] is 2\r\n******** called: f -x $array\r\narray[0] is 0\r\narray[1] is null                          <<<<<<\r\narray[2] is 2\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                                                         \r\n----                           -----                                                                                                                         \r\nPSVersion                      3.0                                                                                                                           \r\nWSManStackVersion              3.0                                                                                                                           \r\nSerializationVersion           1.1.0.1                                                                                                                       \r\nCLRVersion                     4.0.30319.18063                                                                                                               \r\nBuildVersion                   6.2.9200.22198                                                                                                                \r\nPSCompatibleVersions           {1.0, 2.0, 3.0}                                                                                                               \r\nPSRemotingProtocolVersion      2.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Another surprising aspect is that `[System.Object]::ReferenceEquals()` returns true for two objects for which the result of `-is [psobject]` differs.  For example,\r\n\r\n```PowerShell\r\n$empty = Out-Null\r\n$array = @(0,$empty,2)\r\nfunction f {param($x)}\r\n\r\nf -x $array\r\n\r\n$empty -is [psobject]\r\n$array[1] -is [psobject]\r\n[System.Object]::ReferenceEquals($empty,$array[1])\r\n```\r\n\r\nreturns \r\n\r\n```none\r\nTrue\r\nFalse\r\nTrue\r\n```",
      "created_at": "2018-01-28T17:37:35Z",
      "updated_at": "2018-01-28T17:37:35Z"
    },
    {
      "author": "TigerBoom",
      "author_association": "NONE",
      "body": "The example by @alx9r is not really related to this issue.  When I run it in my PS version 3 console, the result of the ReferenceEquals is False, so I cannot reproduce the behaviour.\r\n\r\nIn addition, it turns out that the array constructor completely ignores AutomationNull elements:\r\n\r\n```\r\n$empty = Out-Null\r\n$array = @(0,$empty,2)\r\n'$array.count : ' + $array.count\r\n'$array[1] : ' + $array[1]\r\n```\r\nOutput:\r\n\r\n```\r\n$array.count : 2\r\n$array[1] : 2\r\n```\r\nPerhaps that should be raised as another issue, but I guess that's potentially complex, since it is expected that \r\n@($empty).count is 0\r\n\r\nAnother aside, `[System.Object]::ReferenceEquals($empty,$null)` returns $true.  This is probably because PowerShell silenty converts an AutomationNull argument to a function parameter to a plain $null:\r\n```\r\nfunction IsPsobject($x) {$x -is [psobject]}\r\n\r\n$empty = Out-Null\r\n'[System.Object]::ReferenceEquals($empty,$null) : '+[System.Object]::ReferenceEquals($empty,$null)\r\n'$empty -is [psobject] : ' + ($empty -is [psobject])\r\n'IsPsobject -x $empty : ' + (IsPsobject -x $empty)\r\n```\r\nOutput:\r\n```\r\n[System.Object]::ReferenceEquals($empty,$null) : True\r\n$empty -is [psobject] : True\r\nIsPsobject -x $empty : False\r\n```\r\n\r\nI mention the above not to expand the scope of the original issue raised about arrays being changed, but just to point out confusing behaviour that needs to be understood when discussing the real issue.",
      "created_at": "2018-02-01T19:38:03Z",
      "updated_at": "2018-02-01T20:19:09Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi guys, perhaps I can provide some context. AutomationNull is an _internal_ special value in PowerShell (System.Management.Automation.**Internal**.AutomationNull) . It's used to uniquely represent an empty sequence i.e. a pipeline that returns no objects. This is not the same as null (a scalar value) or the empty array (an array value with no elements). In a scalar context, AutomationNull is usually converted to the \"real\" value null and in an array context it is converted into an empty array. So in practice, you should rarely if ever see it directly when scripting. AutomationNull was necessary to get the streaming semantics we wanted. Unfortunately it had to be public even though it's in an internal namespace which makes it somewhat confusing.",
      "created_at": "2018-03-09T18:15:08Z",
      "updated_at": "2018-03-09T18:15:08Z"
    }
  ],
  "created_at": "2018-01-22T22:43:52Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 5987,
  "state": "open",
  "title": "Function call changes content of array argument containing AutomationNull",
  "updated_at": "2018-03-09T18:15:08Z"
}