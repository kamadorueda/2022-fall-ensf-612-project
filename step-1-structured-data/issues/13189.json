{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13189",
  "author": "normj",
  "body": "This is a part 2 of https://github.com/PowerShell/PowerShell/issues/13132. I'm running PowerShell scripts using executed from a .NET program using **Microsoft.PowerShell.SDK**. The package bundle is created using `--runtime linux-x64` switch with `dotnet publish`.\r\n\r\nInitially I it was always failing and with the previous issue it was discovered I need to move the Modules folder in the runtimes folder up to the root of the publish folder.\r\n\r\nNow that I have implemented that workaround of moving the Module folder to the root of the publish folder I'm getting the following error about 10% of the time. \r\n\r\nThe repo is the same as is explained in the https://github.com/PowerShell/PowerShell/issues/13132 except before executing the `runtimes/win/lib/netcoreapp3.1/Modules` folder is copied up to root of the publish folder.\r\n\r\n@daxian-dbw\r\n\r\n\r\n```\r\n2020-07-15 23:21:04: [Error] - An unexpected error has occurred while processing ForEach-Object -Parallel input. This may mean that some of the piped input did not get processed. Error: System.IO.DirectoryNotFoundException: Could not find a part of the path '/tmp/32029fe7-1d55-4203-bdb1-898dfea7c7d0/.local/share/powershell/Modules'.\r\n   at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at System.Management.Automation.Platform.SelectProductNameForDirectory(XDG_Type dirpath)\r\n   at System.Management.Automation.ModuleIntrinsics.GetPersonalModulePath()\r\n   at System.Management.Automation.ModuleIntrinsics.GetModulePath(String currentProcessModulePath, String hklmMachineModulePath, String hkcuUserModulePath)\r\n   at System.Management.Automation.ModuleIntrinsics.SetModulePath()\r\n   at System.Management.Automation.ModuleIntrinsics..ctor(ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.InitializeCommon(AutomationEngine engine, PSHost hostInterface)\r\n   at System.Management.Automation.ExecutionContext..ctor(AutomationEngine engine, PSHost hostInterface, InitialSessionState initialSessionState)\r\n   at System.Management.Automation.AutomationEngine..ctor(PSHost hostInterface, InitialSessionState iss)\r\n   at System.Management.Automation.Runspaces.LocalRunspace.DoOpenHelper()\r\n   at System.Management.Automation.Runspaces.LocalRunspace.OpenHelper(Boolean syncCall)\r\n   at System.Management.Automation.Runspaces.RunspaceBase.CoreOpen(Boolean syncCall)\r\n   at System.Management.Automation.Runspaces.RunspaceBase.Open()\r\n   at System.Management.Automation.PSTasks.PSTaskBase.Start()\r\n   at System.Management.Automation.PSTasks.PSTaskPool.Add(PSTaskBase task)\r\n   at Microsoft.PowerShell.Commands.ForEachObjectCommand.<InitParallelParameterSet>b__63_2(Object _).\r\n\r\n```\r\n\r\n\r\n## Environment data\r\n\r\n```json\r\n{\r\n  \"SerializationVersion\": {\r\n    \"Major\": 1,\r\n    \"Minor\": 1,\r\n    \"Build\": 0,\r\n    \"Revision\": 1,\r\n    \"MajorRevision\": 0,\r\n    \"MinorRevision\": 1\r\n  },\r\n  \"WSManStackVersion\": {\r\n    \"Major\": 3,\r\n    \"Minor\": 0,\r\n    \"Build\": -1,\r\n    \"Revision\": -1,\r\n    \"MajorRevision\": -1,\r\n    \"MinorRevision\": -1\r\n  },\r\n  \"PSCompatibleVersions\": [\r\n    {\r\n      \"Major\": 1,\r\n      \"Minor\": 0,\r\n      \"Build\": -1,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 2,\r\n      \"Minor\": 0,\r\n      \"Build\": -1,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 3,\r\n      \"Minor\": 0,\r\n      \"Build\": -1,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 4,\r\n      \"Minor\": 0,\r\n      \"Build\": -1,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 5,\r\n      \"Minor\": 0,\r\n      \"Build\": -1,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 5,\r\n      \"Minor\": 1,\r\n      \"Build\": 10032,\r\n      \"Revision\": 0,\r\n      \"MajorRevision\": 0,\r\n      \"MinorRevision\": 0\r\n    },\r\n    {\r\n      \"Major\": 6,\r\n      \"Minor\": 0,\r\n      \"Build\": 0,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 6,\r\n      \"Minor\": 1,\r\n      \"Build\": 0,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 6,\r\n      \"Minor\": 2,\r\n      \"Build\": 0,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    },\r\n    {\r\n      \"Major\": 7,\r\n      \"Minor\": 0,\r\n      \"Build\": 2,\r\n      \"Revision\": -1,\r\n      \"MajorRevision\": -1,\r\n      \"MinorRevision\": -1\r\n    }\r\n  ],\r\n  \"Platform\": \"Unix\",\r\n  \"GitCommitId\": \"7.0.2\",\r\n  \"PSRemotingProtocolVersion\": {\r\n    \"Major\": 2,\r\n    \"Minor\": 3,\r\n    \"Build\": -1,\r\n    \"Revision\": -1,\r\n    \"MajorRevision\": -1,\r\n    \"MinorRevision\": -1\r\n  },\r\n  \"PSVersion\": {\r\n    \"Major\": 7,\r\n    \"Minor\": 0,\r\n    \"Patch\": 2,\r\n    \"PreReleaseLabel\": null,\r\n    \"BuildLabel\": null\r\n  },\r\n  \"PSEdition\": \"Core\",\r\n  \"OS\": \"Linux 4.14.165-102.205.amzn2.x86_64 #1 SMP Fri Feb 14 22:46:57 UTC 2020\"\r\n}\r\n```",
  "closed_at": "2020-07-23T17:24:43Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Move comment from the previous issue:\r\n>> Error: System.IO.DirectoryNotFoundException\r\n>\r\n>No idea why `Directory.CreateDirectory` could fail with this exception. It doesn't require any part of the path to be present ... The code is [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L312). The path in use was `/tmp/2473a89a-8513-49db-bf23-51d8af91a349/.local/share/powershell/Modules` and `/tmp/2473a89a-8513-49db-bf23-51d8af91a349` was already successfully created by [this code](https://github.com/PowerShell/PowerShell/blob/5ad8a5916f37835feb0476396ff7c79e748c2577/src/System.Management.Automation/utils/PsUtils.cs#L145-L165).\r\n\r\n@normj What is the environment that your application was running in? It could be a permission issue in /tmp but the fact that it happens only 10% of the times makes it even more mysterious.\r\n\r\nLoop in @PaulHigin @adityapatwardhan @rjmholt for help.",
      "created_at": "2020-07-16T18:22:55Z",
      "updated_at": "2020-07-16T18:57:33Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I assume this is on a Linux machine?  It seems strange that it is looking for modules in the /tmp directory.  Is pwsh installed in the normal way?  It sounds like the /tmp/... path has been removed?  After all it is a 'tmp' directory.",
      "created_at": "2020-07-16T21:21:00Z",
      "updated_at": "2020-07-16T21:21:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin According to [this code](https://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L252-L256), it seems the `HOME` env variable is not set in those running environments where the script failed.\r\n\r\n@normj Could it be possible that it only failed on the systems where `HOME` env variable is not set (which happens to be 10% of the environments)?",
      "created_at": "2020-07-16T21:55:16Z",
      "updated_at": "2020-07-16T21:55:16Z"
    },
    {
      "author": "normj",
      "author_association": "NONE",
      "body": "This is part of our AWS tooling to run PowerShell scripts in AWS Lambda. In Azure speak basically think this is how we run PowerShell scripts as functions. When I say it fails 10% of the time I mean 10 Lambda function invocations that run the same script fail with this error. The rest of the time it works fine. Given that we are talking about parallelization is it possible there is some sort of race condition.\r\n\r\nThe environment is a Linux environment. The `/tmp` folder is actually the only writable place in Lambda the process has access to. The rest of the filesystem is read only. Just double checked and the `HOME` environment variable is never set in Lambda.\r\n\r\nHere is the host code that runs PowerShell in Lambda via the Microsoft.PowerShell.SDK package.\r\nhttps://github.com/aws/aws-lambda-dotnet/tree/master/Libraries/src/Amazon.Lambda.PowerShellHost\r\n\r\n\r\n\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/2232217?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/aws/aws-lambda-dotnet\">aws/aws-lambda-dotnet</a></strong></div><div>Libraries, samples and tools to help .NET Core developers develop AWS Lambda functions. - aws/aws-lambda-dotnet</div></blockquote>",
      "created_at": "2020-07-16T22:21:01Z",
      "updated_at": "2020-07-16T22:21:03Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "From the stack, the exception is thrown during runspace creation for the parallel script block to run, which is before a thread is started to run it.  We use to create a new runspace for each parallel script block run, but now reuse runspaces.  But it is hard to see this as a concurrency issue given the stack.  With the newer version there is less runspace creation which may mitigate the problem.  You can tell if you have the newer version because there is a new ForEach-Object -Parallel switch ('-UseNewRunsapce') that lets you revert to the old behavior of creating a new runspace for each script block.",
      "created_at": "2020-07-17T00:01:12Z",
      "updated_at": "2020-07-17T00:01:12Z"
    },
    {
      "author": "normj",
      "author_association": "NONE",
      "body": "By new do you mean the 7.1 preview packages? I can't use those as they are based on .NET 5 and I need .NET Core 3.1. I also tested out today 7.0.3 release and still have same behavior of about 10% invocations getting this error.",
      "created_at": "2020-07-17T00:21:45Z",
      "updated_at": "2020-07-17T00:21:45Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "[Here](https://github.com/dotnet/runtime/blob/b1826278d4dda34b41d438ad832ac8f267458ef4/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Unix.cs#L257-L355)'s the place in .NET where the error is thrown.\r\n\r\nIn particular, [this section](https://github.com/dotnet/runtime/blob/b1826278d4dda34b41d438ad832ac8f267458ef4/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Unix.cs#L333-L346) suggests that the code is written to handle races to create the directory.\r\n\r\nThe error thrown looks like it's [this one](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/Common/src/Interop/Unix/Interop.IOErrors.cs#L117-L123), implying `ENOENT` was the native error code.\r\n\r\nThat suggests that [one of the `mkdir` calls returned `ENOENT`](https://github.com/dotnet/runtime/blob/34e5c24ba2b8de54741a55b702eba72bf991e9d4/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Unix.cs#L351-L354) rather than the handled `EEXIST` &mdash; [here](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/Native/Unix/System.Native/pal_io.c#L613-L618)'s native implementation that gets called. According to the [`mkdir(2)` manpage](https://linux.die.net/man/2/mkdir), this can occur when:\r\n\r\n> A directory component in pathname does not exist or is a dangling symbolic link.\r\n\r\n\r\n",
      "created_at": "2020-07-17T15:16:30Z",
      "updated_at": "2020-07-17T15:16:30Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I believe the code I referenced is also present in the .NET Core 3.1 timeframe. Reading through, it's still not clear to me where the error occurs or why.\r\n\r\nSome possibilities:\r\n\r\n- There's a race condition in the `FileSystem.CreateDirectory()` code (the 10% occurrence favours this)\r\n- There's an issue in Lambda's filesystem configuration\r\n\r\nI think it might be worth opening an issue on .NET",
      "created_at": "2020-07-17T15:27:03Z",
      "updated_at": "2020-07-17T15:27:03Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It turns out that the runspace reuse feature is not part of the 7.0.x releases, and is slated to go into 7.1.  So you can only see it today in the preview releases.  But in any case, all runspaces are created on a single thread so there should be no concurrency issues.  It would be interesting to see if runspace reuse affects the problem, since fewer runspace objects are created.  I also wonder if this only occurs on one platform.  It would be helpful if there were a simple consistent repro.\r\n\r\nI will be OOF today.",
      "created_at": "2020-07-17T15:32:27Z",
      "updated_at": "2020-07-17T15:32:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> When I say it fails 10% of the time I mean 10 Lambda function invocations that run the same script fail with this error. **The rest of the time it works fine.**\r\n\r\n@normj Thanks for the additional information. Just so I'm clear, when _it works fine_, it was also running in AWS Lambda function environment which is supposed to be the same as those 10 failing invocations, right?\r\n\r\nWhen the env variable `HOME` is not defined, every Runspace startup will try creating a folder in the form of `/tmp/<new-guid>/.local/share/powershell/Modules` as the personal user module path. That means LOTs of such folders get created when `Foreach-Object -Parallel` is dealing with a lot of inputs. In that situation, it may not be surprising to see strange failures like this one. (_maybe we have reached the upper limit to create new directories in `/tmp/` in the Lambda sanbox?_)\r\n\r\nI suggest you to create the `HOME` environment variable in the Lambda function configurations (_you can define arbitrary environment variables for Azure Functions_), and make it maybe point to `/tmp/home`. Then only `/tmp/home/.local/share/powershell/Modules` will be created by the first `Runspace` and it will be reused by the rest of `Runspace` instances created by `-Parallel`. Please give this workaround a try and see how it goes.\r\n",
      "created_at": "2020-07-17T16:18:58Z",
      "updated_at": "2020-07-17T16:18:58Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "... every Runspace startup will try creating a folder in the form of ...\r\n\r\nA new home directory is created for *each runspace*?  This seems wrong.  Why wouldn't the temporary home directory be static?",
      "created_at": "2020-07-17T17:21:37Z",
      "updated_at": "2020-07-17T17:21:37Z"
    },
    {
      "author": "normj",
      "author_association": "NONE",
      "body": "@daxian-dbw All failures and and success are in Lambda. \r\n\r\nAs you suggested I tried setting the `HOME` environment variable and once I did that I haven't been able to recreate any failures. So I think we can use that as a workaround and making setting the `HOME` environment variable as part of our Hosting code.\r\n\r\n",
      "created_at": "2020-07-17T17:37:05Z",
      "updated_at": "2020-07-17T17:37:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> A new home directory is created for each runspace? This seems wrong. Why wouldn't the temporary home directory be static?\r\n\r\nYes, that's something should be looked into. The code is [here](https://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L252-L256).\r\n\r\n> As you suggested I tried setting the HOME environment variable and once I did that I haven't been able to recreate any failures. So I think we can use that as a workaround and making setting the HOME environment variable as part of our Hosting code.\r\n\r\n@normj Good to hear that. At least you are unblocked :) I think we should fix the code I referenced above.",
      "created_at": "2020-07-17T17:47:56Z",
      "updated_at": "2020-07-17T17:47:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> > A new home directory is created for each runspace? This seems wrong. Why wouldn't the temporary home directory be static?\r\n>\r\n>Yes, that's something should be looked into. The code is [here](https://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L252-L256).\r\n\r\nI submitted #13239 to address this.",
      "created_at": "2020-07-22T19:06:31Z",
      "updated_at": "2020-07-22T19:06:31Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #13239, which has now been successfully released as `v7.1.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:20:25Z",
      "updated_at": "2020-08-17T22:20:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #13239, which has now been successfully released as `v7.0.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.4)\n",
      "created_at": "2021-01-19T22:22:20Z",
      "updated_at": "2021-01-19T22:22:20Z"
    }
  ],
  "created_at": "2020-07-16T06:50:15Z",
  "number": 13189,
  "state": "closed",
  "title": "System.IO.DirectoryNotFoundException using -Parallel feature and Microsoft.PowerShell.SDK",
  "updated_at": "2021-01-19T22:22:21Z"
}