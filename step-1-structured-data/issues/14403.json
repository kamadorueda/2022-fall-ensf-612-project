{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14403",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nBuilt on `PSAnsiRendering` experimental feature to enable coloring of specific file types.  Example:\r\n\r\n![Screen Shot 2020-12-12 at 10 32 02 AM](https://user-images.githubusercontent.com/11859881/101992048-5f1c8480-3c65-11eb-86d5-886c09ba9d84.png)\r\n\r\nAdds `FileInfo` member to `$PSStyle` automatic variable to allow customization.  `Directory`, `SymbolicLink`, and `Executable` are built-in, but an `Extension` member which is a dictionary allows modification and addition of new extensions and custom styles.  Leverages existing `NameString` extended member for coloring.  Pre-included extensions for archives and PowerShell files.  Default color choices are mostly consistent with `ls --color`.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/9270\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSAnsiRenderingFileInfo`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7017\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-07-12T18:07:30Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Codefactor issues are existing ones",
      "created_at": "2020-12-13T01:24:04Z",
      "updated_at": "2020-12-13T01:24:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I am very concerned that we are colorizing many things by default. This is a very **sensitive area** for many people. I think we need **themes** support and the default theme needs to be approved by MSFT accessibility team.\r\n",
      "created_at": "2020-12-15T17:43:21Z",
      "updated_at": "2020-12-15T17:43:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov from an accessibility standpoint, the rule that applies here is sufficient contrast between colors (foreground and background) which is covered by the default selections.  Can certainly add a `[bool] $PSStyle.FileInfo.Color` member to make it easy to turn on/off if you feel that is necessary.  Themes should really be the domain of the terminal and not the shell.  \r\n\r\nLet's continue the discussion in the issue https://github.com/PowerShell/PowerShell/issues/9270",
      "created_at": "2020-12-15T17:50:02Z",
      "updated_at": "2020-12-15T17:52:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My eyes can hold up quite well all day with the classic Windows soothing color style, but they will definitely be against the checkered color scheme.\r\n\r\n> Themes should really be the domain of the terminal and not the shell.\r\n\r\nAs I mentioned early, _$PSStyle should be evaluated based on TermInfo_, and we need to map $PSStyle to TermInfo - the mapping I named _`theme`_ and the themes should be switchable and customizable.\r\n",
      "created_at": "2020-12-15T18:02:32Z",
      "updated_at": "2020-12-15T18:02:32Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "![image](https://user-images.githubusercontent.com/192942/102306396-1e0bc500-3f30-11eb-85b5-6f87380663ee.png)\r\nThis was already done in the terminal-icons module, ipso facto it should be rejected? `\u00af\\_(\u30c4)_/\u00af`",
      "created_at": "2020-12-16T04:49:47Z",
      "updated_at": "2020-12-16T04:58:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jaykul, this PR makes changes to FileSystemProvider to make it as fast as possible.  Certainly it's feasible to call a native POSIX API to determine if a file on Linux/macOS is an executable or call a win32 API to check if an object is a reparse point and obtain the target within a format ps1xml, but it would be much more code.",
      "created_at": "2020-12-16T05:10:27Z",
      "updated_at": "2020-12-16T05:10:27Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> @Jaykul, this PR makes changes to FileSystemProvider to make it as fast as possible. Certainly it's feasible to call a native POSIX API to determine if a file on Linux/macOS is an executable or call a win32 API to check if an object is a reparse point and obtain the target within a format ps1xml, but it would be much more code.\r\n\r\nI missed that `Platform.NonWindowsIsExecutable` is a private method (_sigh_), but I don't think that matters.\r\n\r\nIgnoring who wrote _this_ code, the PowerShell team pledged that feature requests would be _aggressively rejected_ if they can be done externally, and this has, in fact, _already_ been done multiple times in modules. Just for example:\r\n- [PSColor](https://github.com/Davlind/PSColor) was written in 2014 and has over 8k downloads on the gallery (which it _predates_).\r\n- [Terminal-Icons](https://github.com/devblackops/Terminal-Icons) was released 18 months ago and has over 3k downloads.\r\n\r\nMany of these modules do far more than just color files, and have spawned their own copy cats and even [modules which depend on them](https://github.com/gardebring/PowerColorLS).\r\n\r\nThe two I picked do things in a Windows-specific way (i.e. coloring files by extension) --they're the ones I've personally used in the past--  but a module can easily duplicate [a PInvoke](https://github.com/PowerShell/PowerShell/blob/bb78d4b5c0aa9237df47c512d4059248078f5bbd/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L1013-L1015) or two and implement this in more cross-platform way, and still ship externally so as to not end up _doing the work twice_ (and _breaking the other modules_ if the experimental flag is ever removed).\r\n\r\nBuilding this _into_ PowerShell also adds a lot of maintenance, because it will mean that this repo and team are going to get requests for every _other_ type of coloring of Get-ChildItem output which you may have forgotten, including requests to add icons, to support the `LS_COLOR` environment variable, etc. \ud83d\ude23\r\n\r\nIn my opinion this should not be merged. I do think the functionality to check `IsExecutable` should be added to the FileInfo object as a CodeProperty (there's a lot of prescedent for that).",
      "created_at": "2020-12-16T18:27:09Z",
      "updated_at": "2020-12-16T18:28:48Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-12-24T02:00:16Z",
      "updated_at": "2020-12-24T02:00:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul I would agree that anything more than what is provided here would make sense to provide as a module.  The intent here is only parity with `ls --color`.",
      "created_at": "2021-07-08T00:10:43Z",
      "updated_at": "2021-07-08T00:10:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Created discussion for partial format updates to support other PSColor and Terminal-Icon scenarios https://github.com/PowerShell/PowerShell/discussions/15746",
      "created_at": "2021-07-08T21:01:58Z",
      "updated_at": "2021-07-08T21:01:58Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee discussed this at length today, and many of us agreed that you made some excellent points in this thread, @Jaykul. In particular, we empathize with your point about our stance to push innovation happening out of the PS repo vs. within the repo, and that's certainly the general case. \r\n\r\nHowever, the original experimental feature--`PsAnsiRendering`, which includes the `$PSStyle` variable--is a feature that we felt is standard enough in all modern shells that this is a gap we need to fill in the mainline product. (As an additional data point, the lack of a new dependency here helps push this over the edge, as none of this work is significantly contributing to the size of the package.)\r\n\r\nNow, to your point, there's very cool stuff happening in other modules like `PSColor` and `Terminal-Icons`. We definitely don't want to invalidate that work with anything we do, but a cursory analysis shows that modules like that should still work to override this work just fine. And in fact, we want to create a more extensible substrate for modules like that to easily implement colorization for a larger set of types. This assumption could be wrong, but that's exactly the sort of thing we'd like to learn by shipping this as an experimental feature. \r\n\r\nAnother reason for shipping this work is to validate that the `$PSStyle` work is the correct approach. We renamed the experimental feature so that it's a part of the same namespace as the rest of the PSAnsiRendering work. Based on the real world usage and issues, we're open to not necessarily shipping both of these as stable at the same time. \r\n\r\nTo all those ends, we're going to merge this as experimental, but we'll still evaluate it as any other experimental feature before we promote it to stable. I believe that @SteveL-MSFT also plans to write an RFC for all the `$PSStyle` work (based on #13071) before this happens. \r\n\r\nAs a personal side note, I'd like to do some further analysis of the default colors before shipping as stable as well. @SteveL-MSFT took these straight from `ls`, but it might be a better idea to fit with the default colorization of `PSReadline`. ",
      "created_at": "2021-07-08T21:59:13Z",
      "updated_at": "2021-07-08T21:59:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> However, the original experimental feature--PsAnsiRendering, which includes the $PSStyle variable--is a feature that we felt is standard enough in all modern shells that this is a gap we need to fill in the mainline product.\r\n\r\nStandard? This standard is so old that you won't surprise anyone. PowerShell was approved and came into being only because it was a _next generation shell_ with great _innovations_.\r\nWhy copy bash (you mean it, don't you?) if you already have it? Run bash and be happy!\r\n\r\nDon't you have any breakthrough ideas at all? What about Jason's PSMore for next dynamic formatting? Jim's DSL? New modern remoting? There are others lost in the midst of several thousand issues. Some interesting ideas seem to have been started but forgotten.\r\n\r\nPowerShell Core is celebrating its fifth anniversary and we have to ask where are the unparalleled innovations?\r\n(I'm not writing this to diminish achievements, but to inspire new ones.)\r\n\r\n> (As an additional data point, the lack of a new dependency here helps push this over the edge, as none of this work is significantly contributing to the size of the package.)\r\n\r\nYou could open Notepad and try colorize - on the second entity you will feel sorry for your time and the bloated XML will horrify you :-)\r\n\r\n> Another reason for shipping this work is to validate that the $PSStyle work is the correct approach.\r\n\r\nIt makes no sense to spend time on coping old school semi-features (especially if there are already alternative modules).\r\n_Do real innovations!_\r\n\r\n",
      "created_at": "2021-07-09T05:58:17Z",
      "updated_at": "2021-07-09T05:58:17Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Yay, many thanks for this @SteveL-MSFT !",
      "created_at": "2021-07-12T18:08:22Z",
      "updated_at": "2021-07-12T18:08:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.8` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.8)\n",
      "created_at": "2021-07-22T21:41:37Z",
      "updated_at": "2021-07-22T21:41:37Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "In case anyone else comes here after installing `v7.2.0-preview.8` because you're looking to change the ... questionable ... default blue/white color for directories. I find this looks really nice - add it to your `$PROFILE`:\r\n\r\n    if ($PSStyle) {\r\n        $PSStyle.FileInfo.Directory = \"`e[4;1m\"\r\n    }\r\n\r\nIt makes directories use standard colors but they are underlined and bold.",
      "created_at": "2021-07-26T22:43:18Z",
      "updated_at": "2021-07-26T22:43:18Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> In case anyone else comes here after installing `v7.2.0-preview.8` because you're looking to change the ... questionable ... default blue/white color for directories. I find this looks really nice - add it to your `$PROFILE`:\r\n> \r\n> ```\r\n> if ($PSStyle) {\r\n>     $PSStyle.FileInfo.Directory = \"`e[4;1m\"\r\n> }\r\n> ```\r\n> \r\n> It makes directories use standard colors but they are underlined and bold.\r\n\r\nTBH I find a lot of the defaults questionable. When I get a file listing. \r\n![image](https://user-images.githubusercontent.com/16209593/129890706-c06158a1-68b3-43c6-84c2-e20c9b17b02a.png)\r\n\r\n1. The green header \"Splits\" the screen and \"orphans\" the directory name.  Bold or brighter text, makes sense for a header, a slightly off white, but who puts the header rows in their Excel or Word documents in a  totally different colour ? If we are going to have that then directory name is part of the header and should be in the accent colour, but `$PSStyle.Formatting.TableHeader` doesn't do that.\r\n2. The Directories are URGENT. I know they are directories because (a) they are sorted to the top and (b) there is a blank space where the length would go. It's pulling my eye to something, that I don't need to know. \r\n3. I also know the symbolic link is a link because it has the target next to it (now in a different colour)\r\n4. What is dangerous or erroneous about ZIP files?  If there is a need to distinguish them at all (questionable) **should they be shouting for attention ?**  . Red is a bad choice (c.f. Get-Error where the use of Red means the error text jumps out from everything else - which _is_ useful)\r\n5. It may be my eyesight, but Green \"recedes\" so `less.exe`  is harder to pick out, especially when sandwiched between _emphasized_ PS1 files.  (Although it says it is foreground 32 - Green, it appears to render as light green 92 so I couldn't make it more prominent. )\r\n6. Emphasizing PowerShell files has my brain asking \"why are these different from those\"  and colouring .psd  and .psxml files but  not json and xml files compounds the problem. \r\n\r\nThe net effect of 1-6 is that it takes me longer to find what I'm looking for in a listing.  I know all of these can be tuned but the defaults look a bit like the first thing someone thought of.  The defaults need attention if the feature is going from experimental to on-by-default\r\n\r\nWhen I might want colour to give me more information , e.g. intellisense with [ctrl]+[space] there is none. \r\n![image](https://user-images.githubusercontent.com/16209593/129889083-bf8ddc3e-5191-4c91-8a80-ef56774cc84e.png)\r\n\r\nHere,  picking out directories with colour or underline would help, so might a warning I'm about to move an exe or a script whose path is hard coded  somewhere.  But it's not available, and if it were it would probably require a listing to use the same colours, making it all the more important to get good defaults. \r\n\r\n",
      "created_at": "2021-08-18T12:23:56Z",
      "updated_at": "2021-08-18T12:23:56Z"
    }
  ],
  "created_at": "2020-12-12T18:39:00Z",
  "number": 14403,
  "state": "closed",
  "title": "Add support to colorize FileInfo file names",
  "updated_at": "2021-08-18T12:23:56Z"
}