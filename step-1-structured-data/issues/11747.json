{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11747",
  "author": "mklement0",
  "body": "Note:\r\n\r\n* This problem was discovered  by @gerardog, and this issue is meant to supersede #11569\r\n\r\n* It only affects PowerShell _when installed as a .NET global tool_:\r\n  * `dotnet tool install --global PowerShell`\r\n  * Note: You need a .NET Core SDK 3.1 installation first.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# NOTE: \r\n#  * Problem shows if `pwsh` was installed via `dotnet tool --global`\r\n#  * Run from *cmd.exe* or *bash*\r\npwsh -noprofile -c \"write-output 1 \\\"2 3\\\"\"\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n1\r\n2 3\r\n```\r\n\r\nThat is, the escaped embedded double quotes (`\\\"`) should be honored, resulting in two outputs, `1`, and `'2 3'`.\r\n\r\nThis is indeed what happens with a regularly installed version.\r\n\r\n# Actual behavior\r\n\r\n```none\r\n1\r\n2\r\n3\r\n```\r\n\r\nThis output suggests that the embedded escaped double quotes (`\\\"`) were unexpectedly _eaten_.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0 # as a global .NET tool, all platforms\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "gerardog",
      "author_association": "NONE",
      "body": "I think I have a clue about this one:\r\n\r\nThe Global Tool Shim is accepting the `args[]` as provided in the main function by .NET.\r\nhttps://github.com/PowerShell/PowerShell/blob/42b599dc664a5f588e833f8591282fc4ed861943/src/Microsoft.PowerShell.GlobalTool.Shim/GlobalToolShim.cs#L33\r\n\r\nHowever, to keep the quotes correctly it should be using either `Environment.CommandLine` \r\nor Win32Api:\r\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto)]\r\n        public static extern System.IntPtr GetCommandLine();\r\n\r\nHope it helps.-",
      "created_at": "2020-02-02T03:01:43Z",
      "updated_at": "2020-02-02T03:01:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Nice sleuthing, @gerardog.\r\n\r\nThe simplest and robust solution is to copy the elements of `args` to a `ProcessStartInfo` instance's [`ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList) property (a new, collection-based alternative to the single-string `.Arguments` property), which on Windows performs proper re-quoting and escaping as necessary, and on Unix passes the already-parsed arguments through as an array:\r\n\r\n```csharp\r\n\r\n            // Use ProcessStartInfo.ArgumentList to robustly pass arguments through.\r\n            var psi =  new ProcessStartInfo(\"dotnet\");\r\n            psi.ArgumentList.Add(pwshPath);\r\n            foreach (var arg in args) { psi.ArgumentList.Add(arg); }\r\n\r\n            if (File.Exists(pwshPath))\r\n            {\r\n                var process = System.Diagnostics.Process.Start(psi);\r\n                process.WaitForExit();\r\n                \r\n                return process.ExitCode;\r\n            }\r\n```\r\n",
      "created_at": "2020-02-02T03:32:40Z",
      "updated_at": "2020-02-02T03:42:01Z"
    },
    {
      "author": "gerardog",
      "author_association": "NONE",
      "body": "> which on Windows performs proper re-quoting and escaping as necessary\r\n\r\nDoes it?\r\n\r\nA few edge cases:\r\n- Arguments without spaces wrapped in single or double quotes, will be re-quoted?\r\n- Arguments with spaces wrapped in single quotes, will be re-quoted in double quotes?\r\n\r\nThanks",
      "created_at": "2022-04-22T14:30:11Z",
      "updated_at": "2022-04-22T14:30:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Does it?\r\n\r\nYes, assuming the target application uses the command-line parsing rules of C/C++/.NET applications, as described [here](https://stackoverflow.com/a/48491292/45375).\r\nThat's the best that can be done - ultimately, any application is free to make up its own parsing rules.\r\n\r\nAs for the edge cases:\r\n\r\n> Arguments without spaces wrapped in single or double quotes, will be re-quoted?\r\n\r\nNo - if an argument contains no spaces, it is passed _unquoted_, irrespective of whether it was quoted or not on the original command line.\r\n\r\n> Arguments with spaces wrapped in single quotes, will be re-quoted in double quotes?\r\n\r\nYes.\r\n",
      "created_at": "2022-04-22T15:43:30Z",
      "updated_at": "2022-04-22T15:43:30Z"
    }
  ],
  "created_at": "2020-01-31T20:59:29Z",
  "labels": [
    "Issue-Bug",
    "Area-Maintainers-Build"
  ],
  "number": 11747,
  "state": "open",
  "title": "CLI: when installed as a .NET global tool (dotnet tool), argument parsing is broken",
  "updated_at": "2022-04-22T15:43:30Z"
}