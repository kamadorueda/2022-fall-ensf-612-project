{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13791",
  "author": "iSazonov",
  "body": "We have over 270 uses where Nullable<T>.HasValue is before Nullable<T>.Value.\r\nMost of these use cases could be replaced with Nullable<T>.GetValueOrDefault() in some way.\r\n(It is not LINQ!)\r\n\r\nhttps://github.com/dotnet/runtime/issues/33792",
  "closed_at": "2021-08-23T06:32:20Z",
  "comments": [
    {
      "author": "georgettica",
      "author_association": "CONTRIBUTOR",
      "body": "can I give this a go?",
      "created_at": "2020-10-16T10:42:50Z",
      "updated_at": "2020-10-16T10:42:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@georgettica Yes, feel free to pull PR. No need to fix all at one PR - please keep PR as small as possible. I suggest you make only changes of the same type in one PR - there are many different patterns and I suggest to fix only one pattern per PR.\r\n",
      "created_at": "2020-10-16T11:46:26Z",
      "updated_at": "2020-10-16T11:46:26Z"
    },
    {
      "author": "georgettica",
      "author_association": "CONTRIBUTOR",
      "body": "wow! good job yall! I am gonna back off from the other PR's i've made and let you do your thing",
      "created_at": "2020-10-19T13:29:25Z",
      "updated_at": "2020-10-19T13:29:25Z"
    },
    {
      "author": "georgettica",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for all your support @iSazonov \r\n\r\nand sry if I made you do double work",
      "created_at": "2020-10-19T13:32:35Z",
      "updated_at": "2020-10-19T13:32:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Please see my questions left in #13804 and #13793. It's not clear why changing in thsoe two places.",
      "created_at": "2020-11-16T20:25:22Z",
      "updated_at": "2020-11-16T20:25:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quote my comment from https://github.com/PowerShell/PowerShell/pull/13804#discussion_r524868056:\r\n\r\n>I think the comment https://github.com/dotnet/runtime/issues/33792#issuecomment-649665286 in that issue has a point. `.Value` is semantically more correct given that `HasValue` is already checked. There is a duplicate check on the boolean `hasvalue` field, but I don't think that affects the perf in practice.\r\n>\r\n>For places where we can use `GetValueOrDefault` to replace both `.HasValue` and `.Value`, it makes more sense to make the change, like in #13805 and #13808. But if we need to keep the `.HasValue` check, then I think using `.Value` afterwards is better.",
      "created_at": "2020-11-17T03:54:04Z",
      "updated_at": "2020-11-17T03:54:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree in common. Only there is another side - using different patterns decreases readability. I would prefer to use one pattern even though it looks unusual, especially since there are only a few of them in our code base. There is another reason why I prefer this. Now we often look at a code in .Net Runtime for a better understanding of how an application works and we consider this code as the best practice and high quality. Switching to a different code with a different style immediately causes discomfort. I believe that following .Net in this sense is the right direction - many of those who learn PowerShell code will be grateful to us.",
      "created_at": "2020-11-17T11:40:38Z",
      "updated_at": "2020-11-17T11:40:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If we're going to use GetValueOrDefault() there, we shouldn't _also_ be checking HasValue. It's fine to use one or the other, but using both is duplicating the same checks unnecessarily.",
      "created_at": "2020-11-17T12:38:54Z",
      "updated_at": "2020-11-17T12:38:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Only there is another side - using different patterns decreases readability.\r\n\r\nThis may be true to some syntax, but to `Nullable<T>.Value` and `Nullable<T>.GetValueOrDefault()`, I don't think readability would be affected given that the property/method names are so readable.",
      "created_at": "2020-11-17T15:48:34Z",
      "updated_at": "2020-11-17T15:48:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 This could change execution logic - no value and default value can have different semantics in a code path.\r\n",
      "created_at": "2020-11-17T15:50:39Z",
      "updated_at": "2020-11-17T15:50:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This may be true to some syntax\r\n\r\nYes, I say about common rule we could/should follow but there are always exceptions to rule. :-)",
      "created_at": "2020-11-17T15:53:23Z",
      "updated_at": "2020-11-17T15:53:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "When the `.HasValue` check is necesary, I think we should keep using `.Value` afterwards. It's semantically more clear that \"I want the current value, not the default value\". When the `.HasValue` is unnecessary, it makes sense to use `.GetValueOrDefault()`, like in #13805 and #13808.\r\n\r\n@iSazonov If you agree, I think we should revert  #13804 and #13793 ",
      "created_at": "2020-11-17T16:38:11Z",
      "updated_at": "2020-11-17T16:38:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have no objection.\r\n",
      "created_at": "2020-11-17T17:35:39Z",
      "updated_at": "2020-11-17T17:35:39Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "In .NET 6.0, `Nullable<T>.Value` following `Nullable<T>.HasValue` has now been optimized in the JIT (dotnet/runtime#13699).\r\n\r\n<strike>So we can close this issue and revert changes to use `GetValueOrDefault()` to the more natural form.</strike>\r\n\r\nEDIT: Looks like the `Nullable<T>.Value` following `Nullable<T>.HasValue` changes have already been reverted.\r\n\r\n",
      "created_at": "2021-08-22T11:23:13Z",
      "updated_at": "2021-08-22T11:34:12Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Actually, there may still exist some patterns that could be optimised like in #13808, for example:\r\n\r\n```csharp\r\nbool M(bool? b) => b.HasValue && b.Value;\r\n```\r\n\r\n.NET 6.0.0 (6.0.21.37719), X64 RyuJIT\r\n```assembly\r\n; Program.M(System.Nullable`1<Boolean>)\r\n       mov       [rsp+10],rdx\r\n       cmp       byte ptr [rsp+10],0\r\n       je        short M01_L00\r\n       movzx     eax,byte ptr [rsp+11]\r\n       ret\r\nM01_L00:\r\n       xor       eax,eax\r\n       ret\r\n; Total bytes of code 21\r\n```\r\n\r\n```csharp\r\nbool N(bool? b) => b.GetValueOrDefault();\r\n```\r\n\r\n.NET 6.0.0 (6.0.21.37719), X64 RyuJIT\r\n```assembly\r\n; Program.N(System.Nullable`1<Boolean>)\r\n       mov       [rsp+10],rdx\r\n       movzx     eax,byte ptr [rsp+11]\r\n       ret\r\n; Total bytes of code 11\r\n```\r\n\r\n",
      "created_at": "2021-08-23T11:16:03Z",
      "updated_at": "2021-08-23T11:16:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze The issue was more for cleanup and using right pattern than performance. For performance it is better to look and measure specific scenario.",
      "created_at": "2021-08-23T11:48:20Z",
      "updated_at": "2021-08-23T11:48:20Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Unfortunately, most of @bcwood's PRs linked to this issue seem to have issues with change of logic. Could you please consider closing them and look at reverting #13849 as explained there: https://github.com/PowerShell/PowerShell/pull/13849#issuecomment-903717301.",
      "created_at": "2021-08-23T12:31:10Z",
      "updated_at": "2021-08-23T12:31:10Z"
    },
    {
      "author": "bcwood",
      "author_association": "CONTRIBUTOR",
      "body": "My apologies. I see what you're getting at with the change of logic. I'll close them for now until I have a chance to re-evaluate.",
      "created_at": "2021-08-23T16:18:05Z",
      "updated_at": "2021-08-23T16:18:05Z"
    }
  ],
  "created_at": "2020-10-16T09:56:30Z",
  "labels": [
    "Up-for-Grabs",
    "Hacktoberfest",
    "Issue-Code Cleanup",
    "First-Time-Issue"
  ],
  "number": 13791,
  "state": "closed",
  "title": "Use Nullable<T>.GetValueOrDefault()",
  "updated_at": "2021-08-23T16:18:05Z"
}