{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5949",
  "author": "pcgeek86",
  "body": "I have an automation script that creates many SSH-based PowerShell Remoting sessions, from MacOS to Windows, using key-based authentication, with the `New-PSSession` command. However, when I run this script, I constantly get prompted to add the host key fingerprint to my `known_hosts` file.\r\n\r\nIs there a way to temporarily skip / bypass this check?\r\n\r\n```\r\nThe authenticity of host 'x.x.x.x (x.x.x.x)' can't be established.\r\nECDSA key fingerprint is SHA256:h976+qzJTEsnDaweawhyCBkOYaBSxhwaljhsqomwg048i7yc.\r\nAre you sure you want to continue connecting (yes/no)?\r\n```\r\n\r\nhttps://serverfault.com/questions/132970/can-i-automatically-add-a-new-host-to-known-hosts",
  "closed_at": "2018-04-20T11:09:14Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin Any ideas?",
      "created_at": "2018-01-19T17:15:29Z",
      "updated_at": "2018-01-19T17:15:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps what we really want is a way to passthru switches to ssh.exe",
      "created_at": "2018-01-19T18:30:44Z",
      "updated_at": "2018-01-19T18:30:44Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is part of SSH security and is not something we can affect, and certainly not something we would want to bypass.  SSH has no way to verify a host before initiating a user key validation the way it can be done via Kerberos (although I believe there is current work to add Kerberos authentication to SSH), so the user must provide the validation.  \r\n\r\nIf you don't want to do this via New-PSSession, you can use ssh.exe to first establish a connection to a known/trusted host.  This only happens once and the host/key is added to the cache, and afterwards you are no longer required to validate the host.",
      "created_at": "2018-01-22T16:40:00Z",
      "updated_at": "2018-01-22T16:40:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that using `ssh-keyscan -H hostname` and redirecting the output to known_hosts is better than providing a switch to bypass the check which opens the user up to man-in-the-middle attacks.",
      "created_at": "2018-04-20T11:09:14Z",
      "updated_at": "2018-04-20T11:09:14Z"
    },
    {
      "author": "steve-kurtz-google",
      "author_association": "NONE",
      "body": "> This is part of SSH security and is not something we can affect, and certainly not something we would want to bypass. SSH has no way to verify a host before initiating a user key validation the way it can be done via Kerberos (although I believe there is current work to add Kerberos authentication to SSH), so the user must provide the validation.\r\n> \r\n> If you don't want to do this via New-PSSession, you can use ssh.exe to first establish a connection to a known/trusted host. This only happens once and the host/key is added to the cache, and afterwards you are no longer required to validate the host.\r\n\r\nCan you elaborate on this? Are you suggesting to connect with ssh first and then use the enter-pssession? How would you pass the session from the start-process ssh [...] to enter-pssession? ",
      "created_at": "2021-03-04T17:47:24Z",
      "updated_at": "2021-03-04T17:47:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "No, it would be two steps.  The first connection attempt with ssh.exe will prompt for the fingerprint confirmation, and the connection can be allowed.  Then any other connection with Enter-PSSession or New-PSSession will not prompt, since the first response is stored.  This just prevents a prompt from occurring later within an automated script, where user interaction is undesirable.",
      "created_at": "2021-03-04T19:11:11Z",
      "updated_at": "2021-03-04T19:11:11Z"
    },
    {
      "author": "steve-kurtz-google",
      "author_association": "NONE",
      "body": "I am connecting to a non-standard SSH endpoint that the pssession cmdlets do not seem to be compliant with. Openssh works great, so I was trying to find a way of accessing openssh std-in / std-out. Apparently openssh does not expose these.",
      "created_at": "2021-03-04T19:23:39Z",
      "updated_at": "2021-03-04T19:23:39Z"
    }
  ],
  "created_at": "2018-01-19T16:21:23Z",
  "number": 5949,
  "state": "closed",
  "title": "Disable StrictHostKeyChecking in New-PSSession command",
  "updated_at": "2021-03-04T19:23:39Z"
}