{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2632",
  "author": "stefanstranger",
  "body": "Steps to reproduce\r\n------------------\r\nWhen you use Convertto-Json cmdlet and have an url in one of the properties of your hashtable then the output will show that there took some  url encoding place during the conversion.\r\n\r\nExpected behavior\r\n-----------------\r\nI don't want the url encoding to happen. Or at least I want to be able to configure this if needed.\r\n\r\nActual behavior\r\n---------------\r\nurl encoding is happening.\r\n\r\nEnvironment data\r\n----------------\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14959.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14959.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nExample for testing:\r\n```powershell\r\n$uri = 'https://www.stranger.nl/thisisstrange?date=2015-04-05&value=foo&this#&%*'\r\n\r\n$body = @{\r\n\r\n    'url' = $uri\r\n\r\n}\r\n\r\n\r\n$body | convertto-json\r\n\r\n[Reflection.Assembly]::LoadFile(\"C:\\Program Files\\WindowsPowerShell\\Modules\\newtonsoft.json\\1.0.1.2\\libs\\Newtonsoft.Json.dll\") | out-null\r\n\r\n[Newtonsoft.Json.JsonConvert]::SerializeObject($body)\r\n\r\nWhen using the Newtonsoft json class the output is being show as expected.\r\n\r\nOutput:\r\n{\r\n    \"url\":  \"https://www.stranger.nl/thisisstrange?date=2015-04-05\\u0026value=fo\r\no\\u0026this#\\u0026%*\"\r\n}\r\n{\"url\":\"https://www.stranger.nl/thisisstrange?date=2015-04-05&value=foo&this#&%*\r\n\"}\r\n\r\n```\r\n",
  "closed_at": "2017-05-16T21:52:04Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This doesn't repro with PSCore6 since we are using Newtonsoft Json.net\r\n\r\n```powershell\r\nPS C:\\users\\slee\\repos\\PowerShell> $uri = 'https://www.stranger.nl/thisisstrange?date=2015-04-05&value=foo&this#&%*'\r\nPS C:\\users\\slee\\repos\\PowerShell>\r\nPS C:\\users\\slee\\repos\\PowerShell> $body = @{\r\n>>\r\n>>     'url' = $uri\r\n>>\r\n>> }\r\nPS C:\\users\\slee\\repos\\PowerShell>\r\nPS C:\\users\\slee\\repos\\PowerShell>\r\nPS C:\\users\\slee\\repos\\PowerShell> $body | convertto-json\r\n{\r\n  \"url\": \"https://www.stranger.nl/thisisstrange?date=2015-04-05&value=foo&this#&%*\"\r\n}\r\n```",
      "created_at": "2017-05-16T21:52:04Z",
      "updated_at": "2017-05-16T21:52:04Z"
    },
    {
      "author": "epernst",
      "author_association": "NONE",
      "body": "I'm also using Powershell 5.1 and I'm still getting this problem. ConvertTo-Json creates an useable url.\r\nIs your answer to this in my world very critical error really to use PSCore6?",
      "created_at": "2020-09-02T09:06:26Z",
      "updated_at": "2020-09-02T09:06:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yes. PowerShell 5.1 is not being actively maintained. How would you expect to get new features/bugfixes without using a new version of the product?\r\n\r\nThere may be other PowerShell modules available from the PSGallery which use newer JSON libraries as well that you could utilize.",
      "created_at": "2020-09-02T11:20:45Z",
      "updated_at": "2020-09-02T11:21:14Z"
    },
    {
      "author": "xander-petty",
      "author_association": "NONE",
      "body": "> I'm also using Powershell 5.1 and I'm still getting this problem. ConvertTo-Json creates an useable url.\r\n> Is your answer to this in my world very critical error really to use PSCore6?\r\n`$json.Replace(\"\\u0026\", \"&\")\r\n`",
      "created_at": "2021-04-12T17:14:38Z",
      "updated_at": "2021-04-12T17:15:47Z"
    }
  ],
  "created_at": "2016-11-05T11:41:54Z",
  "number": 2632,
  "state": "closed",
  "title": "ConvertTo-Json and URL encoding",
  "updated_at": "2021-04-12T17:15:47Z"
}