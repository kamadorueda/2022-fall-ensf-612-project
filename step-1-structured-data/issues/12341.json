{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12341",
  "author": "mikeTWC1984",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently you can easily invoke regular methods through MethodInfo\r\n```\r\n$obj.SomeMethod.Invoke($arg1, $arg2) \r\n```\r\nProbably it's not a particularly useful for the end users, but this approach might be extremely useful in case if you deal with generic methods. Would it be hard to implement something like:\r\n```\r\n$obj.SomeMethod.InvokeGeneric([SomeType], $arg1, $arg2))\r\n```\r\n\r\nIt's a PITA to deal with generics at this point. There is some issues opened a while ago, and it looks like it's too much work to bring generics same way as it's implemented in C#. The above interface might be simple/straight forward to use and implement(hopefully).\r\n\r\n\r\n",
  "closed_at": "2020-04-16T20:45:42Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This would _most likely_ be a change in .NET Core itself rather than PowerShell, I would think? I _guess_ we could handle it with `PSMethodInfo`? \ud83e\udd14 \r\n\r\nIf we're going to do something like this, we may as well just implement proper generic method handling, despite that probably being a little more complex to do properly.",
      "created_at": "2020-04-16T18:52:45Z",
      "updated_at": "2020-04-16T18:53:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Please see the already green-lit #5146",
      "created_at": "2020-04-16T19:57:23Z",
      "updated_at": "2020-04-16T19:57:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Thinking on this further... I have two thoughts.\r\n\r\n1. Might be a good enhancement that just makes it easier in the interim and also provides a pretty nice way to eventually implement the feature properly later on.\r\n2. Given that some methods take _multiple_ type parameters, we might run into some issues trying to work with the more complex methods. Perhaps the first argument can take `Type[]` rather than just `Type` for those ones.",
      "created_at": "2020-04-16T20:11:02Z",
      "updated_at": "2020-04-16T20:11:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@mikeTWC1984 and @vexx32, I see you were both part of the original discussion in #5146, which is awaiting implementation - of basically the syntax proposed here -  by someone from the community. @vexx32, it even includes your multiple-types suggestions: https://github.com/PowerShell/PowerShell/issues/5146#issuecomment-339010927\r\n\r\nUnless I'm missing something: isn't this issue a duplicate?\r\n",
      "created_at": "2020-04-16T20:21:06Z",
      "updated_at": "2020-04-16T20:21:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's a good point. I'd missed that this suggestion was already mentioned in the other issue.\r\n\r\nI'll close this as duplicate for now. @mikeTWC1984 if you have more to add to the discussion in #5146, please feel free to add to that issue. \ud83d\ude42 ",
      "created_at": "2020-04-16T20:45:42Z",
      "updated_at": "2020-04-16T20:45:42Z"
    }
  ],
  "created_at": "2020-04-16T16:48:20Z",
  "number": 12341,
  "state": "closed",
  "title": "Feature Request: Invoke Generic methods through PSMethodInfo",
  "updated_at": "2020-04-16T20:45:42Z"
}