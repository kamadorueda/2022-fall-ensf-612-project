{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10931",
  "author": "KirkMunro",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a module author,\r\nI want the `CompatiblePSEditions` tag in module manifests to work if it is defined in the `PrivateData.PSData` section of a module manifest\r\nso that I can properly indicate which editions of PowerShell are supported in a module that supports current versions of PowerShell as well as downlevel versions below PowerShell 5.1.\r\n\r\n# Justification\r\n\r\nThere are modules shared in the Gallery that appear to only support Windows PowerShell, even if they actually support cross platform PowerShell. Why? Because authors of modules that support versions of Windows PowerShell lower than 5.1 cannot add the `CompatiblePSEditions` tag to the top level of their manifest because doing so will prevent those modules from loading on downlevel versions of PowerShell.\r\n\r\nLooking at modules in the Gallery, if you try to identify which modules support cross platform PowerShell, you cannot. You can identify some modules that support cross platform PowerShell by checking the Linux or macOS checkboxes in the filter panel on the left-hand side of search results, however doing so will automatically filter out all modules that do not have a `CompatiblePSEditions` tag in their manifest, even if they support Linux and/or macOS.\r\n\r\nFor example, look for a Teams module in the Gallery that runs on Linux (PowerShell Core or PowerShell 7+). If you search for \"Teams\", you'll see a few modules. If you then filter for Linux support, you'll only see one module: PSTeams. That was written by a community member. The \"MicrosoftTeams\" module is the official module, and it works cross platform, but it gets hidden from the results because that module does not define `CompatiblePSEditions` in its manifest since it supports PowerShell 3 or later.\r\n\r\n**This is a rampant problem for modules in the Gallery that needs to be addressed if we want to increase adoption of PowerShell 7 once it is released.**\r\n\r\n# Proposed technical implementation details\r\n\r\nThe only way to resolve this problem is to support `CompatiblePSEditions` in `PrivateData.PSData` in a module manifest, by doing the following:\r\n\r\n1. Update `New-ModuleManifest` such that it can be used to generate a manifest with the `CompatiblePSEditions` information stored in `PrivateData.PSData`. Module authors can also define it at the top level since it is a supported tag in manifests in PowerShell 5.1 and later; however, doing so breaks backward compatibility, which may be undesirable. If both `PrivateData.PSData.CompatiblePSEditions` and `CompatiblePSEditions` are defined in a manifest, an error should be generated on module load if the values are different.\r\n\r\n1. Update the PowerShell Gallery so that it recognizes `PrivateData.PSData.CompatiblePSEditions` as a source of compatible edition information, and use that when storing the metadata about the module.\r\n\r\n1. Update the PowerShell Gallery so that it shows the supported editions in the PowerShell Gallery UI with the other module details, close enough to the top that users clearly see what versions of PowerShell are supported even if they don't filter for specific OS support.\r\n\r\n1. Update `Find-Module` in `PowerShellGet` such that it surfaces this information in the results it returns, and add a parameter to filter on specific OSes that should be supported, defaulting to the current operating system.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is better to convert the proposal to a RFC. ",
      "created_at": "2019-10-29T17:28:45Z",
      "updated_at": "2019-10-29T17:28:45Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Current (undocumented) recommended practice is to start with an issue, so that's what I've done here. Once I get some agreement/consensus I'll happily convert this to an RFC.\r\n\r\nThis is an important one though, so cc'ing @SteveL-MSFT for visibility since I think it will impact PowerShell 7 adoption negatively if we don't set the community up for success with module discovery/installation. If we're in agreement that this should be addressed, I can quickly flip this into an RFC.",
      "created_at": "2019-10-29T19:05:53Z",
      "updated_at": "2019-10-29T19:05:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro You proposal so clear and in demand that it makes no sense to spend time here to wait feedback :-)",
      "created_at": "2019-10-30T05:46:34Z",
      "updated_at": "2019-10-30T05:46:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Regarding RFCs, it would be good to see more diverse discussion with agreement on the problem and proposed solution before spending time authoring a RFC.\r\n\r\nFor PSGallery specifically, we can have a tag for older modules to indicate if they are compatible, but does require the module author to validate it works.  I've always thought we should have a badge to highlight compatible modules whether it's PSCore or cross-platform.  cc @SydneyhSmith \r\n\r\nThe tags are downloaded at module install time, so we could have PowerShell look into that metadata and not just the module manifest to determine compatibility.",
      "created_at": "2019-11-01T02:08:01Z",
      "updated_at": "2019-11-01T02:08:01Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I think waiting for a more diverse discussion from the community is the wrong thing to do here.\r\n\r\nYou have a Gallery full of modules where community members cannot identify what versions of PowerShell that they support, where the safer road is very clear: to simply stick with Windows PowerShell.\r\n\r\nAt the same time you're heading fast towards PowerShell 7, which is supposed to be a successor, and you're talking about closing down PRs to very low-risk or security-related or regression only changes. \r\n\r\nSome decisions should be made right now about how to enable your community of contributors to update their modules such that they can reliably indicate they support cross platform PowerShell, so that they show up in appropriate searches, so that community members can install and run modules from that Gallery in PowerShell 7 with confidence that they should just work. I don't think this should just sit idle, waiting for a \"more diverse discussion with agreement on the problem and proposed solution\" to happen. The PS team and/or the PS committee should discuss this important issue, and figure out what they want to do about it, leading the community toward a path of success as we head into the release of PowerShell 7.",
      "created_at": "2019-11-14T16:15:39Z",
      "updated_at": "2019-11-14T16:15:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For PSGallery, we're working on fixing and unification of tags so that compatible modules can be found more easily and accurately.  ",
      "created_at": "2019-12-02T20:46:19Z",
      "updated_at": "2019-12-02T20:46:19Z"
    }
  ],
  "created_at": "2019-10-29T14:22:58Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 10931,
  "state": "open",
  "title": "Support the CompatiblePSEditions tag inside of PSData as well as at the top level of a manifest",
  "updated_at": "2019-12-02T20:46:19Z"
}