{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2602",
  "author": "daxian-dbw",
  "body": "Update Select-Object to imply '-Property *' only if ExcludeProperty is specified and not empty\r\n\r\nI make this change because I remember uses like the following when I was analyzing `Select-Object -ExcludeProperty`:\r\n```powershell\r\n$propertiesToExclude = @()\r\n# logic to add properties to be excluded under some circumstances.\r\n... | Select-Object -ExcludeProperty $propertiesToExclude -ExpandProperty <property>\r\n```\r\nIf `$propertiesToExclude` turns out to be empty, `Select-Object` shouldn't assume `-Property *` in this case.\r\n\r\n/cc @iSazonov can you please review this PR?",
  "closed_at": "2016-11-04T18:13:31Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@daxian-dbw**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Dongbo Wang). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    </p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-11-03T21:50:01Z",
      "updated_at": "2016-11-03T21:50:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I want to argue \ud83d\ude0a \nPros.\nIf someone writes:\n\n>  # logic to add properties to be excluded under some circumstances.\n\nhe expects that `$propertiesToExclude` is not empty and therefore `Select-Object` output type is always `PSCustomobject`. So if the logic return empty (ex.: user select all fields) and now output type is a source type then it is an unexpected result and unwanted.\n\nCons.\nBut above we do check `(Property != null) && (Property.Length != 0)`\nSo why should we make a distinction between `Property` and `ExcludeProperty`?\n",
      "created_at": "2016-11-04T17:22:54Z",
      "updated_at": "2016-11-04T17:22:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> he expects that $propertiesToExclude is not empty and therefore Select-Object output type is always PSCustomobject. So if the logic return empty (ex.: user select all fields) and now output type is a source type then it is an unexpected result and unwanted.\n\nInteresting, I didn't think of it in this way \ud83d\ude04 But it would be very rare that the user cares about the type of the returned object. Instead, the user would just access the members of the returned object, so I don't see the difference between `Process` and `PSCustomObject` is a big deal.\n\nThe main problem I found in the following example is what the experience would be when `$propertiesToExclude` is empty while `-ExpandProperty` is specified. In this case, if we assume `-Property *`, then all properties from the input object will be attached to the value object of `expand-property`, which I think will be very surprising to the user.\n\n```\n... | Select-Object -ExcludeProperty $propertiesToExclude -ExpandProperty <expand-property>\n```\n\nA more concrete (but unreal) example would be this:\n\n```\ngps -Id $pid | Select-Object -ExcludeProperty @() -ExpandProperty Modules\n```\n\n---\n\n@iSazonov After some more thinking on it, maybe I'm wrong. Maybe when user specify `Select-Object -ExcludeProperty @() -ExpandProperty <expand-property>`, they do want all properties from the input object to be attached to the expanded property. When the specified array is not empty, they mean \"_attach all properties from input object except the ones I specified_\", so when the specified array is empty, they just mean \"_attach all properties from input object with no exception_\".\n\nI think maybe it's a good idea to not do this change, and wait on the feedback to see if we need further tweaking this.\nGiven that, I will close this PR. Thanks for all your input @iSazonov!\n",
      "created_at": "2016-11-04T17:37:04Z",
      "updated_at": "2016-11-04T18:13:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This cmdlet leaves another million questions \ud83d\ude0a What about @(\"\") in context of the PR? Why `ExpandProperty` hasn't a highest priority (Expand then Exclude from expanded properties)? \ud83d\ude0a\n\nEarlier, I asked maybe we make a new cmdlet with a clear semantics?\n",
      "created_at": "2016-11-04T18:21:47Z",
      "updated_at": "2016-11-04T18:21:47Z"
    }
  ],
  "created_at": "2016-11-03T21:49:56Z",
  "number": 2602,
  "state": "closed",
  "title": "Update Select-Object to imply '-Property *' only if ExcludeProperty is specified and not empty",
  "updated_at": "2016-11-04T18:21:47Z"
}