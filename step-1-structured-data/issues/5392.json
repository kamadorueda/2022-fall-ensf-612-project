{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5392",
  "author": "JohnLBevan",
  "body": "Historically `yield return` has not been required in PowerShell since all output is written to the pipeline as it's returned.  However, with the introduction of classes, we now rely on a single `return` path for each class.  Where such a method is expected to output an array of items, in some cases it may make more sense to drip-feed results to the pipeline, rather than return the collection as a whole once gathered.  Currently there is no way to do this.\r\n\r\nSee also: [Related StackOverflow post](https://stackoverflow.com/questions/47187652/yield-return-equivalent-for-powershell-class-method). ",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I kind of agree with this being nice to have, but, anytime I have been presented with a use-case it ended up being something that was better handled by a function/cmdlet. I'm not saying there is no good use-case, just that every time I personally have been presented with this, the use-case was weak. \r\n\r\nDo you have some use-cases for this?",
      "created_at": "2017-11-09T10:25:11Z",
      "updated_at": "2017-11-09T10:25:11Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "@markekraus Sample Use Case:\r\n\r\nI have a base (effectively abstract) class, `Fetcher`.  Classes `SqlFetcher` and `RestFetcher` extend this class, providing methods for pulling data from SQL or from Rest services.  This then allows me to write functions to gather data which don't care about the technology.   i.e. These functions take an instance of a `Fetcher` class, initialised to point at the relevant database or web service.  \r\n\r\nWhen I call the class's method `GetData()` it gathers and returns this data to the pipeline.  However, there are filters which can only be applied in PowerShell (e.g. they rely on a regex; a query type not possible in the other languages), so after getting the results I need to filter them.  I only need the first match; so if this match is in the first 10 results returned I don't want to incur the expense of returning all 1,000 results of the query I sent to `Fetcher`.",
      "created_at": "2017-11-09T12:16:29Z",
      "updated_at": "2017-11-09T12:16:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@JohnLBevan \r\n\r\nIn that use case, haven't you already incurred the cost of those 1,000?  Does matter where you are processing them, whether you did it inside a method or outside in the pipeline? \r\n\r\nUnless you are saying that the resource is also yielding. In which case you can have class that inherits from your abstract class and overload GetData() with a Regex object and let the class handle the exit.\r\n\r\nAgain, I'm not arguing we shouldn't have return yield. Just playing devils advocate.",
      "created_at": "2017-11-09T12:40:08Z",
      "updated_at": "2017-11-09T12:40:08Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "@markekraus \r\n\r\n> In that use case, haven't you already incurred the cost of those 1,000?\r\n\r\nIn the SQL example probably not.  SQL's done the work of determining which results to return, but if we're using a SqlDataReader (i.e. as opposed to a SqlDataAdapter), then we only need to fetch those values back from the server row by row.  In a scenario where I knew I may not require all results I'd opt for the data reader over the adapter.\r\n\r\nFor the REST example; fair enough you'd need to get the full result before parsing it...  However if I amend the use case to mention that the service we're calling requires paging then it's once again a valid use case; since we avoid the round trip every N (page size) records.\r\n\r\nNo worries with the suggestion being debated; completely agree that requirements should be justifiable.\r\n\r\n\r\n\r\n",
      "created_at": "2017-11-10T00:11:07Z",
      "updated_at": "2017-11-10T00:11:07Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can use LINQ as a sort of work around.  Here's how you could do your stack overflow example.\r\n\r\n```powershell\r\nusing namespace System.Collections.Generic\r\nusing namespace System.Diagnostics\r\n\r\n[int]$i = 0\r\n\r\nclass Demo {\r\n    [IEnumerable[Process]] GetPowershellProcesses() {\r\n        return [Linq.Enumerable]::Select(\r\n            [Process[]](Get-Process *powershell*),\r\n            [Func[Process, Process]]{ param($p) $global:i++; $p })\r\n    }\r\n}\r\n\r\n$demo = New-Object Demo\r\n$demo.GetPowerShellProcesses() | %{ \"$i - $($_.ProcessName)\" }\r\n```\r\n\r\nHowever, variables from that scope may or may not be available depending on if the `SessionStateScope` that the enumerable was created in is still active during enumeration.  This would likely also be an issue in any implementation of `yield` in PowerShell with the way script blocks currently work.",
      "created_at": "2017-11-12T14:27:09Z",
      "updated_at": "2017-11-12T14:27:09Z"
    }
  ],
  "created_at": "2017-11-09T10:03:52Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 5392,
  "state": "open",
  "title": "Suggestion: Implement Yield Return for Class Methods",
  "updated_at": "2019-04-03T05:05:14Z"
}