{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15938",
  "author": "TravisEz13",
  "body": "### Summary of the new feature / enhancement\r\n\r\nThis would be like invoke-expression, but it would transmit, perssit, and execute the file with parameters. \r\n\r\nIt would be good it did caching.\r\n\r\nThis would allow a signed file to execute in full language mode over remoting.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "talked about some implementation details with @PaulHigin offline",
      "created_at": "2021-08-16T22:31:30Z",
      "updated_at": "2021-08-16T22:31:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I think this is a very interesting idea.  Also, as an extension we could have an 'import a module file remotely' function as well.",
      "created_at": "2021-08-16T22:42:33Z",
      "updated_at": "2021-08-16T22:42:33Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Are you talking about binaries to execute remotely? There's a whole can of worms that this opens up like binary compatibility as well as the availability of shared dll's that may not be present on the remote system. If you are talking about powershell scripts is it something extra that `Invoke-Command -FilePath ...` does not offer?",
      "created_at": "2021-08-17T00:00:21Z",
      "updated_at": "2021-08-17T00:00:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I always thought it was blocked by design for security reasons \ud83d\ude15 ",
      "created_at": "2021-08-17T04:09:49Z",
      "updated_at": "2021-08-17T04:09:49Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Just PowerShell script files.  Invoke-Command copies the contents of script files as text over remote connection and executes it as a scriptblock.  This would copy the file /w signature (if any) so the contents can be verified before being run.",
      "created_at": "2021-08-17T15:19:05Z",
      "updated_at": "2021-08-17T15:19:05Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  What is your security concern?",
      "created_at": "2021-08-17T15:19:24Z",
      "updated_at": "2021-08-17T15:19:24Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> This would copy the file /w signature (if any) so the contents can be verified before being run.\r\n\r\nIs this the only benefit? With code signing being stuck on Windows only (for now) and the fact that you can just run arbitrary scriptblocks anyway with PSRemoting it seems like a trivial thing to bypass anyway.",
      "created_at": "2021-08-17T23:28:25Z",
      "updated_at": "2021-08-17T23:28:25Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yes, this would be Windows only for now.  Bypass how?",
      "created_at": "2021-08-18T00:07:36Z",
      "updated_at": "2021-08-18T00:07:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Bypass how?\r\n\r\nBy just running `Invoke-Command -FilePath blah.ps1` or `Invoke-Command -ScriptBlock ([ScriptBlock]::Create((gc blah.ps1 -Raw)))`. The remoting API allows you to send the script as a string which is what happens today so what's to stop a nefarious actor from doing what can be done today. JEA could lock things down a bit more but now you are restricted with WinRM and not SSH.",
      "created_at": "2021-08-18T00:12:43Z",
      "updated_at": "2021-08-18T00:13:01Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Oh yes, the user would not be forced to use it, it is just an option.  But it would be very useful for Windows users remoting into a node that has CI policy enforcement.  The CI policy could validate the file signature and run it as trusted in that environment.\r\n\r\nBut it could also be useful for non-Windows platforms, as the cache would remove the need to copy the entire file contents each time.  Same with importing a module file remotely.",
      "created_at": "2021-08-18T00:24:34Z",
      "updated_at": "2021-08-18T00:25:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov What is your security concern?\r\n\r\nThis allows regular user with limited remoting permissions to copy a code to remote system. It is not security hole but it is change current practice how we delegate management permissions.\r\nCode signing is not protect us. Thus trojans broadly use Winternal utils to do bad actions (psexec can copy an application to remote host, SDelete cfn wipe).\r\n\r\nI have no strong objections from the feature but nervous. :-)",
      "created_at": "2021-08-18T04:40:12Z",
      "updated_at": "2021-08-18T04:40:12Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Default PowerShell remoting allows users to copy file data, save as file, and execute on remote sessions now in a multitude of ways.  But I agree that we would have to restrict this for remote sessions in NoLanguage mode, similar to Copy-Item.",
      "created_at": "2021-08-18T16:51:23Z",
      "updated_at": "2021-08-18T16:51:23Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting\r\nRemoting working group: removing needs triage label, keeping enhancement label.",
      "created_at": "2022-04-07T18:14:26Z",
      "updated_at": "2022-04-07T18:14:26Z"
    }
  ],
  "created_at": "2021-08-16T22:30:43Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Remoting"
  ],
  "number": 15938,
  "state": "open",
  "title": "Create a feature to execute a file remotely",
  "updated_at": "2022-04-07T18:14:34Z"
}