{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6562",
  "author": "mklement0",
  "body": "As discussed in #6550:\r\n\r\nWhile you can pass `OEM` to filesystem cmdlets to support the legacy system locale's OEM code page on Windows, its \"ANSI\" counterpart (such as Windows 1252 on US-English systems) is currently missing.\r\n(In _Windows PowerShell_, the `Default` value fulfills that role, but in PowerShell Core `Default` now refers to the new default, (BOM-less) UTF-8.)\r\n\r\nTherefore, an `ANSI` encoding value should be introduced to complement the `OEM` value.\r\n\r\nWith `ANSI` available, the current workaround:\r\n\r\n```powershell\r\nGet-Content -Encoding ([System.Text.Encoding]::GetEncoding([cultureinfo]::CurrentCulture.TextInfo.ANSICodePage)) file.txt\r\n```\r\n\r\nwould simply become:\r\n\r\n```powershell\r\nGet-Content -Encoding Ansi file.txt   # Wishful thinking.\r\n```\r\n\r\nNote: Given that `OEM` already is available even when running on Unix-like platforms, it sounds like we shouldn't restrict `ANSI`'s availability to Windows. (`[System.Text.Encoding]::GetEncoding([cultureinfo]::CurrentCulture.TextInfo.ANSICodePage)`seemingly does return a locale-appropriate value on Unix-like platforms as well.)\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We don't use numbers with OEM and seems we should use only ANSI without number as an alias of `CurrentCulture.TextInfo.ANSICodePage`.",
      "created_at": "2018-04-05T14:37:58Z",
      "updated_at": "2018-04-05T14:37:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Agreed.\r\n\r\n@chuanjiao10: The purpose of this issue is to _restore accidentally removed functionality_ to PS Core: support for the _active_ ANSI code page.\r\n\r\nWhat you're proposing is an _enhancement_ (as an aside: something like `-Encoding Ansi 936` wouldn't work for syntax reasons), so I suggest you open a _new_ issue.\r\nMy syntax proposal for such an enhancement would be to allow _numerical_ values as the `-Encoding` argument to directly represent the code pages [by their numbers](https://msdn.microsoft.com/en-us/library/dd317756%28v=vs.85%29.aspx); e.g., `-Encoding 936` for the `ANSI/OEM Simplified Chinese (PRC, Singapore); Chinese Simplified (GB2312)` code page.\r\n\r\n",
      "created_at": "2018-04-05T14:49:43Z",
      "updated_at": "2018-04-05T14:49:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">My syntax proposal for such an enhancement would be to allow numerical values \r\n\r\nPlease open new Issue. We should discuss this. (and why `[System.Text.Encoding]::GetEncodings()` returns only short list although we load System.Text.Encoding.Pages.dll)",
      "created_at": "2018-04-05T14:57:04Z",
      "updated_at": "2018-04-05T14:57:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Yes, it should be a new issue, but I was suggesting that @chuanjiao10 create it (I only suggested a possible syntax).\r\n\r\nInteresting about the short list of Unix - hadn't noticed that - perhaps yet another issue.",
      "created_at": "2018-04-05T15:12:21Z",
      "updated_at": "2018-04-05T15:12:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Just as a quick pointer regarding the \"short list\":\r\n\r\n`[System.Text.Encoding]::GetEncodings()` only ever reflects the encodings available _by default_ in .NET Core, even if additional ones were registered registered via `[System.Text.Encoding]::RegisterProvider()` later; sadly, [`[System.Text.CodePagesEncodingProvider]::Instance`](https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider.instance?view=netcore-2.0#System_Text_CodePagesEncodingProvider_Instance) has NO equivalent method for enumerating the encodings it implements.",
      "created_at": "2018-04-05T16:32:43Z",
      "updated_at": "2018-04-05T16:32:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "New issue for `[System.Text.Encoding]::GetEncodings()` discussion #6580.",
      "created_at": "2018-04-06T04:26:18Z",
      "updated_at": "2018-04-06T04:26:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "New issue for \"to allow numerical values\" discussion  #6581",
      "created_at": "2018-04-06T04:40:02Z",
      "updated_at": "2018-04-06T04:40:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate it, @iSazonov.",
      "created_at": "2018-04-06T13:54:37Z",
      "updated_at": "2018-04-06T13:54:37Z"
    },
    {
      "author": "jongross4",
      "author_association": "NONE",
      "body": "I would like to echo the concerns above.  The current list of encodings is too limiting.  I am dealing with text encoded SHIFT_JIS (cp932) on OEM-US (cp437) and need to get the text to Unicode.  Currently working around it with a Get-EncodedContent function that takes all of the named Encodings as a result of [system.text.encoding]::GetEncodings() and then using [system.io.file]::ReadAllLines($Path,$Encoding) as a workaround.  Even using encoding RAW would destroy the SHIFT_JIS text on my system.\r\n\r\nThis is a work in progress but should help others work around the issue in the meantime:\r\n\r\nfunction Get-EncodedContent {\r\n    [CmdletBinding()]\r\n    param (\r\n        $Path\r\n    )\r\n    DynamicParam {\r\n    $ParamName = 'CodePage'\r\n    $attributes = new-object System.Management.Automation.ParameterAttribute\r\n    $attributes.ParameterSetName = '__AllParameterSets'\r\n    $attributes.Mandatory = $false\r\n    $attributeCollection = new-object -Type System.Collections.ObjectModel.Collection[System.Attribute]\r\n    $attributeCollection.Add($attributes)\r\n        $_Values = ([System.Text.Encoding]::GetEncodings()).codepage\r\n    $ValidateSet = new-object System.Management.Automation.ValidateSetAttribute($_Values)\r\n    $attributeCollection.Add($ValidateSet)\r\n    $dynParam1 = new-object -Type System.Management.Automation.RuntimeDefinedParameter($ParamName, [String], $attributeCollection)\r\n    $paramDictionary = new-object -Type System.Management.Automation.RuntimeDefinedParameterDictionary\r\n    $paramDictionary.Add($ParamName, $dynParam1)\r\n    return $paramDictionary\r\n    }\r\n\r\n    begin {\r\n        $CodePage = [int]($PSBoundParameters.CodePage)\r\n        $TextEncoding = [system.text.encoding]::GetEncoding($CodePage)\r\n    }\r\n\r\n    process {\r\n        [System.IO.File]::ReadAllLines((get-item $Path), $TextEncoding)\r\n    }\r\n    \r\n    end {\r\n    }\r\n}\r\n\r\n",
      "created_at": "2018-08-13T23:57:19Z",
      "updated_at": "2018-08-13T23:59:42Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the snippet. That's better than my current way to work around this issue in my scripts:\r\n\r\n````\r\n    $iswinps = ($null, 'Desktop') -contains $PSVersionTable.PSEdition\r\n    if (!$iswinps)\r\n    {\r\n        $encoding = [System.Text.Encoding]::GetEncoding(1252)\r\n    }\r\n    else\r\n    {\r\n        $encoding = [Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding]::Default\r\n    }\r\n    \r\n    Get-Content -Encoding $encoding ...\r\n\r\n````\r\n",
      "created_at": "2019-07-18T14:56:57Z",
      "updated_at": "2019-07-20T08:35:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me summarize the status quo as of PowerShell Core 7.0.0-rc.2:\r\n\r\n* **`Ansi` as an `-Encoding` argument is still not supported** (which would only be relevant on _Windows_, where it should refer to _whatever the active ANSI code page happens to be_, to match the default encoding applied by _Windows PowerShell_).\r\n\r\n* However, passing specific code-page numbers (e.g., `-Encoding 930`) or encoding _names_ (e.g., `-Encoding shift_jis`) _is_ now supported - no more workarounds needed per se - unless you want tab-completion.\r\n\r\n  * You _should_ be able to find the list of supported encoding names / code pages with  `[Text.Encoding]::GetEncodings().Name` / `[Text.Encoding]::GetEncodings().CodePage` but on PS Core you can't, due to lack of CoreFX API support - see https://github.com/dotnet/corefx/issues/28944\r\n   * Even though not all encodings are _listed_, they still work, however. You can see the current list in the function below.\r\n\r\n---\r\n\r\nTab-completion would be nice, however; here's a proof-of-concept function adapted from @jongross4's workaround; it supports both code-page numbers and encoding names for tab completion, along with PowerShell's own identifiers if you type `Get-EncodedContent -Encoding <tab>`\r\n\r\n* It works in both Windows PowerShell and PowerShell Core and works around the following limitations:\r\n\r\n  * [Since fixed] ~~The inability to enumerate all encodings on PS Core, due to missing CoreFx support - see https://github.com/dotnet/corefx/issues/28944~~\r\n\r\n * [Since fixed] ~~Missing support for the `BigEndianUtf32` identifier - see #11645~~\r\n\r\n* Caveat: It only exhibits true _streaming_ behavior - passing the lines one by one through the pipeline without reading the whole file first - if `Get-Content` can ultimately be used, which is true:\r\n  * always in PS Core\r\n  * in Win PS only if the given encoding name is a standard PowerShell encoding identifier. \r\n\r\n```powershell\r\nfunction Get-EncodedContent {\r\n\r\n  [CmdletBinding()]\r\n  param (\r\n    $Path\r\n  )\r\n\r\n  DynamicParam {\r\n    $paramName = 'Encoding'\r\n    $codePageNums = [Text.Encoding]::GetEncodings().CodePage\r\n    $encodingNames = [Text.Encoding]::GetEncodings().Name\r\n    # PowerShell's valid -Encoding arguments - sans 'Unknown' and 'String'\r\n    $psEncodingNames = 'Unicode', 'Byte', 'BigEndianUnicode', 'UTF8', 'UTF7', 'UTF32', 'Ascii', 'Default', 'Oem', 'BigEndianUTF32'\r\n    if ($codePageNums -notcontains 1252) {\r\n      # Workaround for PS Core as of v7: only the .NET Core default set is listed, not also those added later by PowerShell - see https://github.com/dotnet/corefx/issues/28944\r\n      # We use hard-coded lists obtained via Windows PowerShell:\r\n      #     ([Text.Encoding]::GetEncodings().CodePage) -join ', '\r\n      #     \"'{0}'\" -f (([Text.Encoding]::GetEncodings().Name) -join \"', '\")\r\n      $codePageNums = 37, 437, 500, 708, 720, 737, 775, 850, 852, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 869, 870, 874, 875, 932, 936, 949, 950, 1026, 1047, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1200, 1201, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1361, 10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10010, 10017, 10021, 10029, 10079, 10081, 10082, 12000, 12001, 20000, 20001, 20002, 20003, 20004, 20005, 20105, 20106, 20107, 20108, 20127, 20261, 20269, 20273, 20277, 20278, 20280, 20284, 20285, 20290, 20297, 20420, 20423, 20424, 20833, 20838, 20866, 20871, 20880, 20905, 20924, 20932, 20936, 20949, 21025, 21866, 28591, 28592, 28593, 28594, 28595, 28596, 28597, 28598, 28599, 28603, 28605, 29001, 38598, 50220, 50221, 50222, 50225, 50227, 51932, 51936, 51949, 52936, 54936, 57002, 57003, 57004, 57005, 57006, 57007, 57008, 57009, 57010, 57011, 65000, 65001\r\n      $encodingNames = 'IBM037', 'IBM437', 'IBM500', 'ASMO-708', 'DOS-720', 'ibm737', 'ibm775', 'ibm850', 'ibm852', 'IBM855', 'ibm857', 'IBM00858', 'IBM860', 'ibm861', 'DOS-862', 'IBM863', 'IBM864', 'IBM865', 'cp866', 'ibm869', 'IBM870', 'windows-874', 'cp875', 'shift_jis', 'gb2312', 'ks_c_5601-1987', 'big5', 'IBM1026', 'IBM01047', 'IBM01140', 'IBM01141', 'IBM01142', 'IBM01143', 'IBM01144', 'IBM01145', 'IBM01146', 'IBM01147', 'IBM01148', 'IBM01149', 'utf-16', 'utf-16BE', 'windows-1250', 'windows-1251', 'Windows-1252', 'windows-1253', 'windows-1254', 'windows-1255', 'windows-1256', 'windows-1257', 'windows-1258', 'Johab', 'macintosh', 'x-mac-japanese', 'x-mac-chinesetrad', 'x-mac-korean', 'x-mac-arabic', 'x-mac-hebrew', 'x-mac-greek', 'x-mac-cyrillic', 'x-mac-chinesesimp', 'x-mac-romanian', 'x-mac-ukrainian', 'x-mac-thai', 'x-mac-ce', 'x-mac-icelandic', 'x-mac-turkish', 'x-mac-croatian', 'utf-32', 'utf-32BE', 'x-Chinese-CNS', 'x-cp20001', 'x-Chinese-Eten', 'x-cp20003', 'x-cp20004', 'x-cp20005', 'x-IA5', 'x-IA5-German', 'x-IA5-Swedish', 'x-IA5-Norwegian', 'us-ascii', 'x-cp20261', 'x-cp20269', 'IBM273', 'IBM277', 'IBM278', 'IBM280', 'IBM284', 'IBM285', 'IBM290', 'IBM297', 'IBM420', 'IBM423', 'IBM424', 'x-EBCDIC-KoreanExtended', 'IBM-Thai', 'koi8-r', 'IBM871', 'IBM880', 'IBM905', 'IBM00924', 'EUC-JP', 'x-cp20936', 'x-cp20949', 'cp1025', 'koi8-u', 'iso-8859-1', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4', 'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8', 'iso-8859-9', 'iso-8859-13', 'iso-8859-15', 'x-Europa', 'iso-8859-8-i', 'iso-2022-jp', 'csISO2022JP', 'iso-2022-jp', 'iso-2022-kr', 'x-cp50227', 'euc-jp', 'EUC-CN', 'euc-kr', 'hz-gb-2312', 'GB18030', 'x-iscii-de', 'x-iscii-be', 'x-iscii-ta', 'x-iscii-te', 'x-iscii-as', 'x-iscii-or', 'x-iscii-ka', 'x-iscii-ma', 'x-iscii-gu', 'x-iscii-pa', 'utf-7', 'utf-8'\r\n    }\r\n    $validateSet = [Management.Automation.ValidateSetAttribute]::new([string[]] ($codePageNums + $encodingNames + $psEncodingNames))\r\n    $dynParam = [Management.Automation.RuntimeDefinedParameter]::new(\r\n      $paramName, \r\n      [string], \r\n      ([Management.Automation.ParameterAttribute] @{ ParameterSetName = '__AllParameterSets' }, $validateSet)\r\n    )\r\n    ($paramDictionary = [Management.Automation.RuntimeDefinedParameterDictionary]::new()).Add($paramName, $dynParam)\r\n    return $paramDictionary\r\n  }\r\n  \r\n  end {\r\n\r\n    Set-StrictMode -Version 1\r\n\r\n    if (($encoding = $PSBoundParameters.Encoding)) { # -Encoding specified.\r\n\r\n      $isPSCore = $PSVersionTable.PSEdition -eq 'Core'\r\n      $isPsIdentifier = $false\r\n      if ($encoding -as [int]) { # code page\r\n        # If a code-page number was given, make it an [int].\r\n        $encoding = [int] $encoding \r\n      } else { # name\r\n        # See if the identifier is a standard PS encoding identifier.\r\n        $isPsIdentifier = 'Unicode', 'Byte', 'BigEndianUnicode', 'UTF8', 'UTF7', 'UTF32', 'Ascii', 'Default', 'Oem', 'BigEndianUTF32' -contains $encoding\r\n      }\r\n\r\n      # In PS Core we can always pass the -Encoding argument through,\r\n      # in Win PS only if it is a standard identifier.\r\n      if ($isPSCore -or $isPsIdentifier) { \r\n\r\n        # Workaround for PS Core as of v7.0 for 'BigEndianUTF32' not being suported - see https://github.com/PowerShell/PowerShell/issues/11645\r\n        # Translate to the equivalent System.Text.Encoding name.\r\n        if ($isPSCore -and $encoding -eq 'BigEndianUTF32') { $encoding = 'UTF-32BE' }\r\n\r\n        Get-Content $Path -Encoding $encoding\r\n\r\n      }\r\n      else { # WinPS - obtain a System.Text.Encoding instance and use [IO.File]::ReadAllLines()\r\n\r\n        # Caveat: This doesn't *stream* through the pipeline - it reads all lines *up front*\r\n        [IO.File]::ReadAllLines((Convert-Path $Path), [Text.Encoding]::GetEncoding($encoding))\r\n\r\n      }\r\n\r\n    }\r\n    else { # -Encoding not specified -> simply invoke Get-Content\r\n      Get-Content -Path $path\r\n    }\r\n\r\n  }\r\n\r\n}\r\n```\r\n",
      "created_at": "2020-01-21T18:21:35Z",
      "updated_at": "2021-03-12T17:09:22Z"
    }
  ],
  "created_at": "2018-04-04T19:10:32Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 6562,
  "state": "open",
  "title": "Need \"ANSI\" encoding enumeration value to support \"ANSI\"-code-page-encoded files (e.g., Windows 1252)",
  "updated_at": "2021-03-12T17:09:22Z"
}