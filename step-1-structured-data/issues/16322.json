{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16322",
  "author": "KamenRiderKuuga",
  "body": "### Summary of the new feature / enhancement\r\n\r\n# Why submitted this issue?\r\n\r\nI'm writing a powershell script to publish a .NET project, during this I need to get some useful infomation from the project file content, the content of project file is like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <AssemblyName>Sample.API</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <NoWarn>1701;1702;1591;</NoWarn>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI want to get the `TargetFramework`, so I use this:\r\n\r\n```powershell\r\n$framework_name = ([xml](Get-Content .\\Sample.API.csproj)).Project.PropertyGroup.TargetFramework\r\n```\r\n\r\nThen I need to use it, such as:\r\n\r\n```powershell\r\n$framework_name.ToUpper()\r\n```\r\n\r\nAn error message appeared:\r\n\r\n```plaintext\r\nInvalidOperation: You cannot call a method on a null-valued expression.\r\n```\r\n\r\nAlthough in the end I reacted this is because I have two `PropertyGroups` of the same level and one of them does not have a attribute called `TargetFramework`, but it was really troublesome. \r\n\r\nThe `$framework_name | gm` shows it is the `System.String`, `$framework_name.Count` is `2` and the second is null.\r\n\r\nThis script is a general publishing script, I have to assume that every attribute is like this, so every time when I need to get a attribute value, I must write code like this:\r\n\r\n```powershell\r\n($framework_name | Where-Object { $_ -ne $null }).ToLower()\r\n```\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n# What is the suggestion?\r\n\r\nI think the behavior of the above code should be the same as:\r\n\r\n```powershell\r\n$framework_name = ([xml](Get-Content .\\Sample.API.csproj)).SelectNodes('Project/PropertyGroup/TargetFramework').InnerText\r\n```\r\n\r\nThe `$framework_name.Count` is `1` and it will be very convenient to use",
  "closed_at": "2021-10-29T16:55:28Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw I wonder if this can be fixed by having the xml adapter skip missing entries rather than returning null for them, or perhaps it could hand back automationnnull instead, which is often discarded when collating arrays.",
      "created_at": "2021-10-29T13:20:49Z",
      "updated_at": "2021-10-29T13:20:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think the behavior is by design. Accessing a non-existing property member on an object will return `null` when it's not running in strict mode. It's the same behavior on all objects, not just the XML adapted objects. For example:\r\n```\r\n> $array = @( [pscustomobject]@{ Framework = \"abc\" }, [pscustomobject]@{ NoWarn = \"def\" } )\r\n> $f = $array.Framework\r\n> $f.Count\r\n2\r\n> $f\r\nabc\r\n> $f[1] -eq $null\r\nTrue\r\n> $f | % { 'yeah' }   ## the 2nd element is null, and it's passed through the pipeline\r\nyeah\r\nyeah\r\n```\r\nAnother example:\r\n```\r\n> \"string\".NonExisting -eq $null\r\nTrue\r\n> \"string\".NonExisting | % { 'yeah' }\r\nyeah\r\n```",
      "created_at": "2021-10-29T16:47:57Z",
      "updated_at": "2021-10-29T16:49:53Z"
    },
    {
      "author": "KamenRiderKuuga",
      "author_association": "NONE",
      "body": "Well, this is excusable, thank you for the explanation",
      "created_at": "2021-10-29T16:55:28Z",
      "updated_at": "2021-10-29T16:55:28Z"
    }
  ],
  "created_at": "2021-10-28T16:14:03Z",
  "number": 16322,
  "state": "closed",
  "title": "Issue about getting [xml] attribute value by . (dot)",
  "updated_at": "2021-10-29T16:55:28Z"
}