{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2935",
  "author": "tahir-hassan",
  "body": "This is an issue with the \"intellisense\" for the `[OutputType]` attribute, when the output type is `String`.  No intellisense is given for the `String` type, So I cannot find the `Substring` method etc.  This only affects the `String` type.\r\n\r\nA PowerShell MVP, BartekB, also reproduced this issue: http://stackoverflow.com/a/41351336/288393\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n* Install PowerShell_6.0.0.14-alpha.14-win10-x64.msi\r\n* Paste the following code in into a PowerShell 6 window\r\n\r\n```powershell\r\nfunction Send-Greeting\r\n{\r\n  [OutputType([String])]\r\n  Param ($Name)\r\n\r\n  \"Hello, $Name\"\r\n}\r\n```\r\n\r\nAnd press enter.\r\n\r\n* Type in:\r\n\r\n`Send-Greeting \"John\" | % { $_.<TAB> }`\r\n\r\n* Press the tab character where `<TAB>` is.  \r\n\r\n* Alternatively, use PowerShell ISE and after pressing dot, you get the same list of methods (so it is not PSReadline related).\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI should get the string type's methods and properties.\r\n\r\nActual behavior\r\n---------------\r\n\r\nI get a bunch of methods I don't want and are not from the string class:\r\n\r\n```\r\nCompareTo    GetType      ToByte       ToDecimal    ToInt32      ToSingle     ToUInt16\r\nEquals       GetTypeCode  ToChar       ToDouble     ToInt64      ToString     ToUInt32\r\nGetHashCode  ToBoolean    ToDateTime   ToInt16      ToSByte      ToType       ToUInt64\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSRemotingProtocolVersion      2.3\r\nPSVersion                      6.0.0-alpha\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-alpha.14\r\nPSEdition                      Core\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2022-09-10T19:45:14Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": " Perhaps related #2567",
      "created_at": "2016-12-28T04:00:35Z",
      "updated_at": "2016-12-28T04:00:35Z"
    },
    {
      "author": "tahir-hassan",
      "author_association": "NONE",
      "body": "I've did some interesting investigations on this. I added an `IString` interface which is the same as `String` class:\r\n\r\n```powershell\r\n& {\r\n    $props = [string].GetProperties([System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public);\r\n    $methods = [string].GetMethods([System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public) | ? { -not ($_.IsSpecialName) };\r\n\r\n    $propertyDecls = $props | % { \"$($_.PropertyType.FullName) $($_.Name) { $(if ($_.CanRead) { \"get;\" }) $(if ($_.CanWrite) { \"set;\" }) }\" }\r\n    $methodDecls = $methods | % { $parameters = [string]::Join(\",\", @($_.GetParameters() | % { \"$($_.ParameterType.FullName) $($_.Name)\" })); \"$(if ($_.ReturnType -eq [void]) { \"void\" } else { $_.ReturnType.FullName }) $($_.Name) ( $parameters );\" }\r\n\r\n    $classDefinition = \"public interface IString {\" + $propertyDecls + $methodDecls + \"}\"\r\n    \r\n    Add-Type $classDefinition\r\n}\r\n```\r\n\r\nThen I changed the `Send-Greeting` function above to reference `IString`:\r\n```powershell\r\nfunction Send-Greeting\r\n{\r\n  [OutputType(\"IString\")]\r\n  Param ($Name)\r\n\r\n  \"Hello, $Name\"\r\n}\r\n```\r\n\r\nThen, lo and behold, the following behavior worked:\r\n\r\n```powershell\r\nSend-Greeting \"John\" | % { $_.<TAB> }\r\n```\r\n\r\nHowever, then I tried to define another test function `Get-FirstChar` which accepts pipeline input:\r\n\r\n```powershell\r\nFunction Get-FirstChar\r\n{\r\n    [OutputType(\"IString\")]\r\n    [CmdletBinding()]\r\n\r\n    param(\r\n      [Parameter(Mandatory=$true, ValueFromPipeline=$true)][string[]]$Strings\r\n    )\r\n\r\n    process {\r\n        foreach ($str in $Strings) {\r\n            $str.SubString(0, 1);\r\n        }   \r\n    }\r\n}\r\n```\r\nWhat I noticed is that with pipeline input, it doesn't work:\r\n\r\n```powershell\r\n# does not work :(\r\n\"John\",\"Smith\",\"Fred\" | Get-FirstChar | % { $_.<TAB> }\r\n```\r\n\r\nHowever, if I get rid of the input and put `Get-FirstChar` at the front, then the tab-completion works:\r\n\r\n```powershell\r\n# works :)\r\nGet-FirstChar | % { $_.<TAB> }\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-01-02T01:14:12Z",
      "updated_at": "2017-01-02T01:14:38Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "This works now in `7.3.0-preview.7` possibly earlier. I'm guessing it got fixed in one of the recent type inference updates.",
      "created_at": "2022-09-10T14:28:24Z",
      "updated_at": "2022-09-10T14:28:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MartinGC94 Have we tests for the case?",
      "created_at": "2022-09-10T14:39:49Z",
      "updated_at": "2022-09-10T14:39:49Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I don't know if there are tests that specifically test strings but I usually add tests for my fixes (they are mandatory after all \ud83d\ude01) so if it was one of my recent changes that fixed it then it should be covered by a test. I updated the type inference for `$_` so it uses the same one used for `foreach ($x in $y)` and IIRC it includes code that specifically handles strings (to prevent enumeration) so whoever added that must have added a test for strings.",
      "created_at": "2022-09-10T15:14:26Z",
      "updated_at": "2022-09-10T15:14:26Z"
    }
  ],
  "created_at": "2016-12-28T00:56:38Z",
  "labels": [
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 2935,
  "state": "closed",
  "title": "OutputType attribute doesn't work with String type + other problems discovered",
  "updated_at": "2022-09-10T19:45:14Z"
}