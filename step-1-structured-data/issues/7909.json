{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7909",
  "author": "c01danjo",
  "body": "Hi,\r\nI am using Powershell SDK to execute powershell commands from an ASP.net core 2.1 application. It works in in dev (when i run it from visual studio). But when i deploy to IIS in production i keep getting: \r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\nFile name: 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n\r\nIt works if I call Invoke() from a Console application. Any Idea why?",
  "closed_at": "2018-10-05T21:49:05Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "That sounds like a bug to me in the definition of the SDK NuGet package, the SDK Nuget package seems to no declare the (apparently) required dependency to the [Microsoft.Management.Infrastructure](https://www.nuget.org/packages/Microsoft.Management.Infrastructure/) NuGet package as it can be seen below in the dependencies of the SDK Nuget package. You can manually add the `Microsoft.Management.Infrastructure` NuGet package, which should resolve your problem.\r\n\r\n![image](https://user-images.githubusercontent.com/9250262/46291402-43e26480-c586-11e8-9df6-28b09bb5926e.png)\r\n",
      "created_at": "2018-10-01T13:31:37Z",
      "updated_at": "2018-10-01T13:32:24Z"
    },
    {
      "author": "c01danjo",
      "author_association": "NONE",
      "body": "It seems that the problem i is Hangfire. When I start the code from the main tread it works as intended.",
      "created_at": "2018-10-01T13:43:20Z",
      "updated_at": "2018-10-01T13:43:20Z"
    },
    {
      "author": "Eyadius",
      "author_association": "NONE",
      "body": "I have the same Problem, if start the Program in the Visual Studio it works fine, but if i host the Program as Windows Service it fires the same Exception. PLease help me\r\n\r\nThe Problem is the same after installing the Packege manualy\r\n",
      "created_at": "2018-10-01T13:47:30Z",
      "updated_at": "2018-10-01T13:52:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps #7886 helps.",
      "created_at": "2018-10-01T14:46:55Z",
      "updated_at": "2018-10-01T14:46:55Z"
    },
    {
      "author": "c01danjo",
      "author_association": "NONE",
      "body": "Thank you  #7886 worked. I changed my Publish Profile to <RuntimeIdentifier>win10-x64</RuntimeIdentifier> and it worked fine.",
      "created_at": "2018-10-01T15:00:06Z",
      "updated_at": "2018-10-01T15:00:06Z"
    },
    {
      "author": "c01danjo",
      "author_association": "NONE",
      "body": "Thank you #7886 worked!",
      "created_at": "2018-10-01T15:01:43Z",
      "updated_at": "2018-10-01T15:01:43Z"
    },
    {
      "author": "RaphiStein",
      "author_association": "NONE",
      "body": "@c01danjo can you explain what you did exactly, if you can still recall?",
      "created_at": "2019-06-03T15:14:56Z",
      "updated_at": "2019-06-03T15:14:56Z"
    },
    {
      "author": "c01danjo",
      "author_association": "NONE",
      "body": "> @c01danjo can you explain what you did exactly, if you can still recall?\r\n\r\nI changed the property \"RuntimeIdentifier\" to \"win10-x64\" in the publishing configuration. /Properties/{your publishing configuration}.pubxml.",
      "created_at": "2019-06-03T15:25:23Z",
      "updated_at": "2019-06-03T15:25:23Z"
    },
    {
      "author": "RaphiStein",
      "author_association": "NONE",
      "body": "Thanks. I don't seem to have any `.pubxml` files in my project. Perhaps it needs to be created?",
      "created_at": "2019-06-03T15:29:08Z",
      "updated_at": "2019-06-03T15:29:08Z"
    },
    {
      "author": "Toubster",
      "author_association": "NONE",
      "body": "Hello Guys,\r\n\r\nI am having issues when I try this on a Windows Server 2019.\r\nI also tried it using Windows 10 and a Windows Server 2012R2 and it worked fine.\r\nI tried all the methods i found in this issue and in the issue #7886.\r\nWhat else can I try to make it work on Windows Server 2019? \r\n\r\nThanks in advance.",
      "created_at": "2020-04-10T06:56:35Z",
      "updated_at": "2020-04-10T06:56:35Z"
    },
    {
      "author": "ZedTR",
      "author_association": "NONE",
      "body": "I'm having this issue after publishing on the client side using IIS6 to host the web application (asp.net core), I tried everything mentioned above and in other threads but no luck, does anyone have any suggestions? please... (also my publish profile only works with win-x86)",
      "created_at": "2020-04-11T03:18:27Z",
      "updated_at": "2020-04-11T03:20:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is SDK version you use?",
      "created_at": "2020-04-11T06:21:39Z",
      "updated_at": "2020-04-11T06:21:39Z"
    },
    {
      "author": "Toubster",
      "author_association": "NONE",
      "body": "I use the newest ASP.Net Core SDK 3.1.201.\r\n",
      "created_at": "2020-04-11T17:52:53Z",
      "updated_at": "2020-04-11T17:52:53Z"
    },
    {
      "author": "ZedTR",
      "author_association": "NONE",
      "body": "@iSazonov the powershell sdk 6.2 its the one that have microsoft.managemnet.infrastructue 1.0.0, if I upgrade to the latest it switches microsoft.management to 2.0.0.\r\n@Toubster I'm using the latest core 3.1.",
      "created_at": "2020-04-11T23:40:23Z",
      "updated_at": "2020-04-11T23:40:23Z"
    },
    {
      "author": "Toubster",
      "author_association": "NONE",
      "body": "@ZedTR Are you using the Powershell SDK on a Server 2019? If yes, which version have you Installed from the components on the Server and from the Nuget packets?\r\n\r\n**My components versions:**\r\n![grafik](https://user-images.githubusercontent.com/53408989/79075280-2ef59e00-7cf2-11ea-94f0-9b7a449a8bf6.png)\r\n\r\n\r\n**My Nuget packets:**\r\n![grafik](https://user-images.githubusercontent.com/53408989/79075257-053c7700-7cf2-11ea-8d9d-0a635e62e5e5.png)\r\n",
      "created_at": "2020-04-12T17:18:05Z",
      "updated_at": "2020-04-12T17:18:05Z"
    },
    {
      "author": "ZedTR",
      "author_association": "NONE",
      "body": "I'm using it on server 2016, I have PowerShell.sdk, Automation and infrastructure downloaded not the diagnostics or the run time installed. not sure about the components on the sever though! can you please tell me how can I get to see what is installed on my server?\r\n",
      "created_at": "2020-04-13T02:13:39Z",
      "updated_at": "2020-04-13T02:13:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Get-Package -ProviderName NuGet\r\n\r\nPlease use latest PowerShell SDK version.\r\nI guess you have to add the MMI dll manually into your app publish folder.",
      "created_at": "2020-04-13T03:48:02Z",
      "updated_at": "2020-04-13T03:48:02Z"
    },
    {
      "author": "ZedTR",
      "author_association": "NONE",
      "body": "@iSazonov I'm using the latest sdk 7.0.0. I also made sure that I have the management package in the application folder but still no luck. I started to suspect that I might need something called Microsoft Management Framework updated or installed on the server.",
      "created_at": "2020-04-13T03:59:48Z",
      "updated_at": "2020-04-13T03:59:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is targeting in your project?",
      "created_at": "2020-04-13T04:44:48Z",
      "updated_at": "2020-04-13T04:44:48Z"
    },
    {
      "author": "ZedTR",
      "author_association": "NONE",
      "body": ".NET core 3.1",
      "created_at": "2020-04-13T05:53:00Z",
      "updated_at": "2020-04-13T05:53:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The version has a dll loading tracing. You could use the feature for troubleshooting. I don't know whether this works in IIS.\r\n\r\n>  I also made sure that I have the management package in the application folder but still no luck. \r\n\r\nDo you mean that you see mmi dll in your application folder?\r\n\r\nCan you share the exception with stack trace?",
      "created_at": "2020-04-13T06:17:15Z",
      "updated_at": "2020-04-13T06:17:15Z"
    },
    {
      "author": "tfriesner",
      "author_association": "NONE",
      "body": "I to am running into this issue on Windows Server 2019 with .NET Core 3.1.  Except I am running it from a stand alone service.  Here is the exception I get:\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly  'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral,  PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.  File name: 'Microsoft.Management.Infrastructure, Version=1.0.0.0,  Culture=neutral, PublicKeyToken=31bf3856ad364e35' at  System.Management.Automation.Runspaces.AsyncResult.EndInvoke() at  System.Management.Automation.PowerShell.EndInvoke(IAsyncResult asyncResult) at  System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2  endFunction, Action`1 endAction, Task`1 promise, Boolean  requiresSynchronization) --- End of stack trace from previous location where  exception was thrown\r\n--\r\n\r\nI find it interesting that is looking for the 1.0.0.0 version while I have the 2.0.0.0 mmi in my project.  The build will not add the mmi.dll into the application folder and manually adding it will not fix the issue.  I assume its a versioning problem.  How does it determine which version of mmi to load?\r\n\r\nAs a side note this worked as recently as a week ago. I think the problem started after either a recent Visual Studio 2019 or a powershell SDK (????) update.",
      "created_at": "2020-06-24T21:06:13Z",
      "updated_at": "2020-06-24T21:06:13Z"
    },
    {
      "author": "DivyashriVR",
      "author_association": "NONE",
      "body": " I am invoking PoweShell script from .Net Core Console application when I debug the code the PoweShell command is working but when I run the published EXE I am getting below error:\r\nThere is exceptionSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\nFile name: 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at System.Reflection.Assembly.get_ExportedTypes()\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke()\r\n   at EncryptionExe.Program.Main(String[] args).\r\n\r\nIs there any solution for this?",
      "created_at": "2020-07-22T07:10:24Z",
      "updated_at": "2020-07-22T07:10:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DivyashriVR Please use Search to find workarounds in the repo. If you use SDK you should \"manually\" copy the dll to publish directory.",
      "created_at": "2020-07-22T14:22:27Z",
      "updated_at": "2020-07-22T14:22:27Z"
    },
    {
      "author": "DivyashriVR",
      "author_association": "NONE",
      "body": "> @DivyashriVR Please use Search to find workarounds in the repo. If you use SDK you should \"manually\" copy the dll to publish directory.\r\n\r\nHi @iSazonov , I am getting the mentioned error when I run the the trimmed self-contained executable and here I have only 2 files getting generated as in below screenshot:\r\n<img width=\"528\" alt=\"trimmed self-contained single executable\" src=\"https://user-images.githubusercontent.com/49286033/88261139-58579a00-cce3-11ea-89ee-2c2807ff2fbd.PNG\">.\r\n\r\nI have created this self-contained executable with the purpose that I don't want any DLL's to be included in it.\r\n\r\nSo Is there a way to resolve this issue w.r.t self-contained executable.\r\n\r\nThanks\r\n\r\n",
      "created_at": "2020-07-23T07:58:38Z",
      "updated_at": "2020-07-23T07:58:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DivyashriVR I think you need to put MMI.dll near the exe and look a result.",
      "created_at": "2020-07-23T09:45:48Z",
      "updated_at": "2020-07-23T09:45:48Z"
    },
    {
      "author": "DivyashriVR",
      "author_association": "NONE",
      "body": "Hi @iSazonov ,I don't want any dll to be included in my trimmed self-executable.So Is there any way if we can resolve this without adding any dll's to the executable?",
      "created_at": "2020-07-28T10:22:12Z",
      "updated_at": "2020-07-28T10:22:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If you put MMI.dll near the exe and this resolve your issue then you can try to modify your csproj so that include the dll in exe. I hope it is possible.",
      "created_at": "2020-07-28T10:47:46Z",
      "updated_at": "2020-07-28T10:47:46Z"
    },
    {
      "author": "OndrejValenta",
      "author_association": "NONE",
      "body": "Solution for me taken from #7886 was to run *publish* command manually with **win10-x64**. Visual Studio 2019 in the latest update did not included proper libraries into the publish folder next to the exe file while using Publish command on project.\r\n\r\n```\r\ndotnet publish -o .\\publish -r win10-x64\r\n```",
      "created_at": "2020-08-11T23:36:07Z",
      "updated_at": "2020-08-11T23:36:55Z"
    },
    {
      "author": "rodneykahane",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > @c01danjo can you explain what you did exactly, if you can still recall?\r\n> \r\n> I changed the property \"RuntimeIdentifier\" to \"win10-x64\" in the publishing configuration. /Properties/{your publishing configuration}.pubxml.\r\n\r\njust wanted to chime in for anyone else searching this error, changing the RuntimeIdentifier to from \"win-x64\" to \"win10-64\" resolved the **System.IO.FileNotFoundException** error i was receiving.",
      "created_at": "2020-12-07T14:27:38Z",
      "updated_at": "2020-12-07T14:27:38Z"
    },
    {
      "author": "skrubbeltrang",
      "author_association": "NONE",
      "body": "I was also able to solve this after a whole day struggling with this issue: Changed the RunTimeIdentifier attribute in pubxml from \"win-x64\" to \"win10-x64\".\r\nIt was really hard to identify this issue as everything was running smoothly in my application while debugging, and also (mostly when running the published code). Only saw this problem with execution of PowerShell commands in the published code. I used the implicit (default) Runspace in PowerShell and no Exception was thrown before I implemented an explicit Runspace. Then PowerShell automation module generated the error which finally led me to this page:\r\nCould not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified\r\n\r\nWhat an utter waste of a full days work... :-(",
      "created_at": "2021-01-28T17:23:02Z",
      "updated_at": "2021-01-28T17:23:02Z"
    }
  ],
  "created_at": "2018-10-01T10:31:33Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question",
    "Area-Maintainers-Build",
    "Resolution-Answered"
  ],
  "number": 7909,
  "state": "closed",
  "title": "System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'",
  "updated_at": "2021-01-28T17:23:02Z"
}