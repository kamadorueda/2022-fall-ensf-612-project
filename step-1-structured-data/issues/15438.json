{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15438",
  "author": "jdescelliers",
  "body": "Hi,\r\n\r\nThis is half a feature request/bug.\r\n\r\nWhen downloading very large files (> 1GB), `Invoke-Webrequest` will:\r\n- usually crash with a stream too long exception,\r\n- consume huge amount of memory, going beyound 2.5GB or RAM used.\r\n\r\nWhich make this commandlet unsuited for something that would work flawlessly on `wget`.\r\n\r\nDo you have any plans on improving this? How complex would this feature be?",
  "closed_at": "2022-01-08T04:00:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is GN?",
      "created_at": "2021-05-22T19:12:15Z",
      "updated_at": "2021-05-22T19:12:15Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Probably just a typo for gigabyte, but what PowerShell version are you on, IIRC older ones suffered from bad performance due to inefficiencies with the progress stream but that should be less of a problem today.",
      "created_at": "2021-05-23T03:22:45Z",
      "updated_at": "2021-05-25T22:32:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This sounds like more of an issue with the underlying implementation, it's hitting the built-in limits of whatever type of Stream it's using.\r\n\r\nIt might be necessary to download files to a temp location so we can chunk the download data as it's received and avoid storing the entirety of a very large file into a single Stream object.",
      "created_at": "2021-05-23T13:53:55Z",
      "updated_at": "2021-05-23T13:53:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jdescelliers What version of PowerShell do you observe this issue? I believe the large file download issues was fixed by @iSazonov's PR https://github.com/PowerShell/PowerShell/pull/11095, which replaced `MemoryStream` with async streams. The fix was available in 7.1. Can you try on 7.1 and see if you observe the same?",
      "created_at": "2021-05-25T19:15:18Z",
      "updated_at": "2021-05-25T19:15:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@jdescelliers it would be useful to know:\r\n\r\n- What platform and version of PowerShell you're experiencing this with (`$PSVersionTable` will tell you this)\r\n- What the exception and the stack trace of that exception are (`Get-Error` will tell you that in PS 7)\r\n\r\nI'm currently testing this out with PS 7.2-preview.5 on my Windows 10 machine by downloading [a 10 GB file](https://speed.hetzner.de/10GB.bin) and will report back on what happens.",
      "created_at": "2021-05-25T20:21:04Z",
      "updated_at": "2021-05-25T20:21:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "So after running this yesterday, `iwr` ran for a few hours. I didn't compare it to, say, a browser, so I'm not sure if it was the site or the cmdlet.\n\nBut it didn't throw for me.",
      "created_at": "2021-05-26T15:21:40Z",
      "updated_at": "2021-05-26T15:21:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jdescelliers Please share $PSVersionTable.",
      "created_at": "2021-05-26T18:31:24Z",
      "updated_at": "2021-05-26T18:31:24Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "And the output of `Get-Error` if there is an error",
      "created_at": "2021-05-26T18:53:19Z",
      "updated_at": "2021-05-26T18:53:19Z"
    },
    {
      "author": "jdescelliers",
      "author_association": "NONE",
      "body": "So a bit of context:\r\n- Windows terminal version: 1.8.1444.0\r\n- `%PSVersionTable` output:\r\n````\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n````\r\n\r\n- file downloaded: Ubuntu ISO - I needed a large file to test this, so the command is: \r\n```powershell\r\nInvoke-WebRequest -Uri https://releases.ubuntu.com/20.04.2.0/ubuntu-20.04.2.0-desktop-amd64.iso -Method Get\r\n````\r\n- Error: `Invoke-WebRequest: Stream was too long.`\r\n- `Get-Error output:\r\n````powershell\r\nException             :\r\n    Type       : System.IO.IOException\r\n    TargetSite :\r\n        Name          : Write\r\n        DeclaringType : System.IO.MemoryStream\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    StackTrace :\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.Initialize()\r\n   at Microsoft.PowerShell.Commands.WebResponseContentMemoryStream.ToArray()\r\n   at Microsoft.PowerShell.Commands.WebResponseObject.InitializeContent()\r\n   at Microsoft.PowerShell.Commands.WebResponseObjectFactory.GetResponseObject(HttpResponseMessage response, Stream\r\nresponseStream, ExecutionContext executionContext)\r\n   at Microsoft.PowerShell.Commands.InvokeWebRequestCommand.ProcessResponse(HttpResponseMessage response)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n    Message    : Stream was too long.\r\n    Source     : System.Private.CoreLib\r\n    HResult    : -2146232800\r\nCategoryInfo          : NotSpecified: (:) [Invoke-WebRequest], IOException\r\nFullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\nInvocationInfo        :\r\n    MyCommand        : Invoke-WebRequest\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 2\r\n    Line             : Invoke-WebRequest -Uri https://releases.ubuntu.com/20.04.2.0/ubuntu-20.04.2.0-desktop-amd64.iso\r\n-Method Get\r\n    PositionMessage  : At line:1 char:1\r\n                       + Invoke-WebRequest -Uri https://releases.ubuntu.com/20.04.2.0/ubuntu-2 \u2026\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : Invoke-WebRequest\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n````\r\n- Memory usage of `pwsh.exe` when the exeption was raised: 2.1GB which isn't released as of writing this comment.\r\n- Theorical connection speed 1GB / Ethernet used.\r\n\r\nOn the same URL, `wget` 1.20.3 uses roughtly 30MB of RAM for 30MB/s download speed.\r\n",
      "created_at": "2021-06-02T20:47:18Z",
      "updated_at": "2021-06-02T20:47:18Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You need to specify `-OutFile` to store the data into a file and bypass this problem. The default behaviour is to store the response in memory and that has limits as you've encountered.",
      "created_at": "2021-06-02T20:59:47Z",
      "updated_at": "2021-06-02T20:59:47Z"
    },
    {
      "author": "jdescelliers",
      "author_association": "NONE",
      "body": "Yes. It works when using `-OutFile`, there are still multiple issues that may need to be treated separately:\r\n- High memory usage: on a 2nd attempt, download peaked around 30MB/s and memory usage was steady at 96MB so more than 3 times the needed RAM: is it related to how .NET Core allocates memory in large chunks?\r\n- that memory is not released back to the OS when the download is complete,\r\n- I didn't see any mention in the documentation of `Invoke-Webrequest`  that the response body would be stored in memory unless ``-OutFile` is provided,\r\n- shouldn't `-Outfile` be able to be \"smarter\" by using the `filename` that may be included in the response `Content-Disposition: attachment` header? ",
      "created_at": "2021-06-05T23:50:26Z",
      "updated_at": "2021-06-05T23:50:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> * shouldn't `-Outfile` be able to be \"smarter\" by using the `filename` that may be included in the response `Content-Disposition: attachment` header?\r\n\r\nPerhaps we already have such issue.\r\n\r\n> I didn't see any mention in the documentation of Invoke-Webrequest that the response body would be stored in memory unless ``-OutFile` is provided,\r\n\r\nNo need explicitly document this because it is how pipeline works - we should accumulate data before sending it to pipeline.\r\n\r\n> that memory is not released back to the OS when the download is complete,\r\n\r\nI guess .Net Core GC is too lazy.\r\n\r\n> High memory usage\r\n\r\nMaybe we should see if we can do better.",
      "created_at": "2021-06-06T09:39:24Z",
      "updated_at": "2021-06-06T09:39:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as \"Waiting on Author\" and has not had any activity for **7 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-08T04:00:45Z",
      "updated_at": "2022-01-08T04:00:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The original question was answered. For discussion on further improvements, please search for existing related issues or create new issue if no related issue is found.",
      "created_at": "2022-01-10T20:09:07Z",
      "updated_at": "2022-01-10T20:09:07Z"
    }
  ],
  "created_at": "2021-05-22T15:10:57Z",
  "number": 15438,
  "state": "closed",
  "title": "Invoke-webrequest unable to download large files - stream too long",
  "updated_at": "2022-01-10T20:09:07Z"
}