{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8396",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nThis PR includes some changes and cleanups that will reduce the startup time. Each commit is self-contained, and the commit message serves as a summary of the changes in the commit.\r\n- Rename `s_wasSystemPolicyDebugPolicy` to `s_allowDebugOverridePolicy` to make it less confusing. Also slightly refactor `HelperSecurity.psm1` and `ConstrainedLanguageDebugger.Tests.ps1` to remove unneeded code. There is no functional change in this commit.\r\n- Remove the unneeded static property `IsInbox`, as PowerShell Core won't be shipped in-box with Windows in the foreseeable feature. Even if we do in future, we won't be needing it because Windows PowerShell will probably be gone by that time.\r\n   - This static property was hit at startup time when constructing the value for `$env:PSModulePath`, and it will in turn cause `IsNanoServer` and `IsIoT` to be evaluated, all of which will trigger access to the Registry. By removing `IsInbox`, that can be all avoided.\r\n- Update 'BindRunspace' to avoid getting all commands and unneeded method calls.\r\n   - `BindRunspace` retrieves all available commands from the session state, but for the most common scenario of creating/opening a Runspace, the retrieved commands are never get used afterwards. The method is updated to avoid retrieving all commands unless it's necessary.\r\n   - The method is also updated to add check before calling into a `ProcessXXX` method, so that we can avoid some unneeded method calls.\r\n- Avoid creating a `IsSafeValueVisitor` every time when `IsScriptBlockInFactASafeHashtable` runs.\r\n   - The static method `IsSafeValueVisitor.IsAstSafe` creates an instance of `IsSafeValueVisitor` every time it runs. Given that `IsScriptBlockInFactASafeHashtable` gets called relatively frequently in `PerformSecurityCheck`, this will result in some GC pressure as it will generate transient objects. This is updated to reuse a `IsSafeValueVisitor` singleton with the default `SafeValueContext`.\r\n   - The `Default` and `_safeValueContext` fields are made `readonly`, so it cannot be changed by reflection.\r\n   - The `_visitCount` is changed to `uint` type, so an attacker cannot change the value of it to a negative number in order to practically increase the max visit count limit.\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-12-06T02:29:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The _visitCount is changed to uint type, so an attacker cannot change the value of it to a negative number in order to practically increase the max visit count limit.\r\n\r\nCurrently runtime has `Unsafe.As` method and similar others. Can these methods be used to change the value with reflection?",
      "created_at": "2018-12-05T03:42:48Z",
      "updated_at": "2018-12-05T03:42:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Currently runtime has Unsafe.As method and similar others. Can these methods be used to change the value with reflection?\r\n\r\n@iSazonov I don't think `uint` field can be set with a negative value by reflection.",
      "created_at": "2018-12-06T00:15:34Z",
      "updated_at": "2018-12-06T00:15:34Z"
    }
  ],
  "created_at": "2018-12-04T21:50:47Z",
  "number": 8396,
  "state": "closed",
  "title": "Some more changes and cleanup to reduce the startup time",
  "updated_at": "2018-12-06T02:32:55Z"
}