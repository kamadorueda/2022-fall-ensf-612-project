{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10004",
  "author": "cdmihai",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\nCompile the following with dotnet build\r\n```c#\r\nusing System;\r\n\r\nnamespace exitcodes\r\n{\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            var returnValue = args.Length == 1 ? int.Parse(args[0]) : 0;\r\n\r\n            Console.WriteLine($\"I shall return {returnValue}\");\r\n\r\n            return returnValue;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nWrite the following script \r\n```powershell\r\ndotnet run 1\r\nWrite-Host \"LastExitCode=$LastExitCode\"\r\n\r\n$LastExitCode=0\r\n\r\ndotnet run 1\r\nWrite-Host \"LastExitCode=$LastExitCode\"\r\n```\r\n\r\nRun the script:\r\n```powershell\r\n.\\exitcode.ps1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\nI shall return 1\r\nLastExitCode=1\r\nI shall return 1\r\nLastExitCode=1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\nI shall return 1\r\nLastExitCode=1\r\nI shall return 1\r\nLastExitCode=0\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.18362 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}        \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-06-26T22:05:45Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Modify the last line of your script to this:\r\n```\r\nWrite-Host \"LastExitCode=$LastExitCode, `$global:LastExitCode=$global:LastExitCode\"\r\n```\r\nWhen you assigned `0` to $LastExitCode a few lines above this one, you made a local copy of `$LastExitCode`.  You are **not** changing the value of the globally scoped $LastExitCode.  After that, when you access `$LastExitCode` with no scope modifier, PowerShell looks in the local scope first, then in the next scope up until it reaches the global scope.  \r\n\r\nYou can avoid this issue by always using the global scope modifier e.g. `$global:LastExitCode` to access this variable.",
      "created_at": "2019-06-26T03:56:33Z",
      "updated_at": "2019-06-26T03:56:33Z"
    },
    {
      "author": "cdmihai",
      "author_association": "NONE",
      "body": "Thanks! Is there a powershell strictness level that disallows implicit sneaky super scope overriding without an explicit override keyword?",
      "created_at": "2019-06-26T20:10:19Z",
      "updated_at": "2019-06-26T20:10:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In general, modifying a variable that originates in a different scope will result in it being copied (kinda like F#'s \"masking\" behaviour with variables) to the local scope if you're not specifying the scope to modify it at, IIRC.",
      "created_at": "2019-06-26T20:36:04Z",
      "updated_at": "2019-06-26T20:36:04Z"
    },
    {
      "author": "cdmihai",
      "author_association": "NONE",
      "body": "Thanks for the info. Wish there was a way to turn off automatic variable copying, but at least I understand what's going on now :)",
      "created_at": "2019-06-26T22:05:45Z",
      "updated_at": "2019-06-26T22:05:45Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yeah, in PowerShell I've always referred to it as `copy on write`.  In PowerShell's dynamic scoping approach (as opposed to lexical scoping) it's about the only way to maintain your sanity.  :-)  For example, I write a script that you use.  Where you invoke my scirpt, you have a variable named `$mypath`.  Down in my script, I also have a variable called `$mypath`.  If my modifications to that variable affected your version of `$mypath` - you'd be pulling your hair trying to figure out how/who changed your variable's value.  :-)  ",
      "created_at": "2019-06-27T01:23:20Z",
      "updated_at": "2019-06-27T01:23:20Z"
    },
    {
      "author": "cdmihai",
      "author_association": "NONE",
      "body": "Yea, dynamic scoping is not my kind of strudel :)",
      "created_at": "2019-07-01T16:51:37Z",
      "updated_at": "2019-07-01T16:51:37Z"
    }
  ],
  "created_at": "2019-06-25T23:51:04Z",
  "number": 10004,
  "state": "closed",
  "title": "LastExitCode not honored after being manually written to",
  "updated_at": "2019-07-01T16:51:37Z"
}