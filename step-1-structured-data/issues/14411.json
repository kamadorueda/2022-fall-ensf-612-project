{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14411",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nUse System.Text.Json instead of Newtonsoft.Json in PSConfiguration.\r\n\r\nPerf win is ~11% in startup scenario (pwsh -c exit) with two config files (user and system). It is ~60 ms on my system.\r\n\r\nBreaking change because System.Text.Json have many minor (by design) breaking changes compared with Netonsoft.Json.\r\nSo I had to change `\"true\"` on `true` in powershell.config.json file in tests.\r\n\r\nBefore the PR:\r\n![image](https://user-images.githubusercontent.com/22290914/138145267-4e696470-916f-471a-b398-112ac9cb012e.png)\r\n\r\nAfter the PR:\r\n![image](https://user-images.githubusercontent.com/22290914/138145478-e4a1f0b9-740a-4ec9-b4eb-bcec9f6d9589.png)\r\n\r\n\r\n## PR Context\r\n\r\nRelated #14268\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-12-24T02:00:13Z",
      "updated_at": "2020-12-24T02:00:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Does Team want this in 7.2? \r\nWe could benefit from JsonNode (new in .Net 6.0).",
      "created_at": "2021-09-18T15:25:26Z",
      "updated_at": "2021-09-18T15:25:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-26T02:00:45Z",
      "updated_at": "2021-09-26T02:00:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Rebased to move to .Net 7 RC1.",
      "created_at": "2022-09-26T17:56:11Z",
      "updated_at": "2022-09-26T17:56:11Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `187` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +94 -93\r\nPercentile : 57.4%\r\n\r\nTotal files changed: 9\r\n\r\nChange summary by file extension:\r\n.cs : +82 -82\r\n.ps1 : +12 -11\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ0MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ0MTEiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ0MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-09-26T18:14:49Z",
      "updated_at": "2022-09-26T18:14:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't fully understand the gains of this work, especially given that it's a breaking change.\r\n\r\n> Breaking change because System.Text.Json have many minor (by design) breaking changes compared with Netonsoft.Json.\r\nSo I had to change \"true\" on true in powershell.config.json file in tests.\r\n\r\n- From the perspective of startup time improvement, how much of the gain is related to spinning up a task to warm up JSON parsing in `InitialSessionState.cs`? Also, it's hard to reason from the attached screenshots in the PR description. Some benchmarking similar to https://github.com/PowerShell/PowerShell/pull/8341#issue-384623150 would be helpful to see the perf difference.\r\n\r\n- From the perspective of mitigating assembly loading conflicts, we still have a hard dependency to `Newtonsoft.Json` in the Utility module, so switching to `System.Text.Json` in PSConfiguraiton handling doesn't really solve the problem.",
      "created_at": "2022-09-26T23:18:44Z",
      "updated_at": "2022-09-26T23:18:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't fully understand the gains of this work, especially given that it's a breaking change.\r\n\r\nIntention is to remove dependency on Newtonsoft.Json at all. It is impossible to do this in one PR, only step by step. \r\nToday we have active PR for Test-Json. Then we could update other two cmdlets.\r\n\r\nBefore I continue with the PR. I'd want to get a conclusion from MSFT team - do we want to rid of Newtonsoft.Json in the milestone?",
      "created_at": "2022-09-27T04:34:53Z",
      "updated_at": "2022-09-27T04:34:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> do we want to rid of Newtonsoft.Json in the milestone?\r\n\r\nI think this largely depends on whether we can retain the same behavior as of today. If breaking changes are inevitable, then I personally tend to not making the change, but of course, it would be helpful to understand the scale and risky level of those breaking changes.\r\n\r\nBesides, I have 2 more concerns:\r\n\r\n- Completely avoid `Newtonsoft.Json` is helpful to some extent to the assembly conflict issue, but it won't really solve the problem -- too many modules are depending on that library, which may use different versions due to different cadency of the releases. So, IMO, educating module authors to avoid the problem for their modules is the right way to go (hence I made https://github.com/daxian-dbw/PowerShell-ALC-Samples).\r\n- Some modules assume that PowerShell 7.x ships with `Newtonsoft.Json`, and removing that dependency is a breaking change to those modules.",
      "created_at": "2022-09-27T05:36:48Z",
      "updated_at": "2022-09-27T05:42:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think this largely depends on whether we can retain the same behavior as of today.\r\n\r\n.Net implementation fully follows JSON standard. So users cannot say that PowerShell cmdlets do not work correctly.\r\nWe have a lot of tests to help us understand how many differences there are. See #18141 for example.\r\n\r\nCurrent JSON cmdlets could be published on PowerShellGet site in a compatibility module.\r\n\r\n> Some modules assume that PowerShell 7.x ships with Newtonsoft.Json, and removing that dependency is a breaking change to those modules.\r\n\r\nIt seems .Net continue distribute Newtonsoft.Json.",
      "created_at": "2022-09-27T06:03:00Z",
      "updated_at": "2022-09-27T06:03:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-10-04T14:01:23Z",
      "updated_at": "2022-10-04T14:01:23Z"
    },
    {
      "author": "floh96",
      "author_association": "NONE",
      "body": "@daxian-dbw can you mark this issue for Committee Review to get a conclusion and move this forward?",
      "created_at": "2022-10-04T14:17:13Z",
      "updated_at": "2022-10-04T14:17:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee Please review to decide whether this PR is desired. Please see the comments starting from https://github.com/PowerShell/PowerShell/pull/14411#issuecomment-1258755659 for reference and context.",
      "created_at": "2022-10-04T16:24:52Z",
      "updated_at": "2022-10-04T16:24:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We agree that this is the right change towards removing dependency on NewtonSoft the for the engine to read `powershell.config.json`.  The breaking change for `powershell.config.json` seems unlikely to hit real world scenarios due to differences we understand for NewtonSoft.  Additional changes in JSON cmdlets, for example, need to be evaluated on a case-by-case basis so this statement isn't an automatic acceptance of further changes.  We also expect that we cannot immediately remove shipping NewtonSoft even if PS7 itself removes all dependencies and need a migration story for modules (and potentially scripts) that may explicitly depend on it.",
      "created_at": "2022-10-05T21:25:54Z",
      "updated_at": "2022-10-05T21:25:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-10-13T02:01:25Z",
      "updated_at": "2022-10-13T02:01:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After merging SG for PSVersionTable the config reading takes 20% in startup scenario.",
      "created_at": "2022-10-13T12:15:08Z",
      "updated_at": "2022-10-13T12:15:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-10-20T14:01:28Z",
      "updated_at": "2022-10-20T14:01:28Z"
    }
  ],
  "created_at": "2020-12-14T05:40:11Z",
  "number": 14411,
  "state": "open",
  "title": "Replace Newtonsoft.Json with System.Text.Json in PSConfiguration",
  "updated_at": "2022-10-20T14:01:28Z"
}