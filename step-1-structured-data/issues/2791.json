{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2791",
  "author": "kittholland",
  "body": "The FullyQualifiedErrorID as described in https://msdn.microsoft.com/en-us/library/ms714465(v=vs.85).aspx is used: \"for scripts that handle specific error conditions with specific error handlers.\"\r\n\r\nCurrently this can be accomplished with conditional logic such as a Switch ($PSItem.FullyQualifiedErrorID) inside a general Catch block, but it would be nice if the FullyQualifiedErrorID were treated as a first class property for catching errors.\r\n\r\nThis property is generally more specific than the exception type and always includes the Cmdlet/Function name that generated it. It is easy to create your own using Write-Error with the string ErrorID parameter.",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Perhaps this is another area where PowerShell could borrow from C# and have exception handling filters e.g.\r\n```\r\ncatch [Exception] if ($PSItem.FullyQualifiedErrorID -eq ...) {\r\n```\r\nAlthough that is starting to feel a bit advanced for a shell scripting language.  :-)",
      "created_at": "2016-11-28T16:43:33Z",
      "updated_at": "2016-11-28T16:47:50Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "to me, a possible simple syntax would be:\r\n\r\ncatch 'NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand'\r\n{ }",
      "created_at": "2016-11-28T17:18:17Z",
      "updated_at": "2016-11-28T17:18:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I like this idea and the proposed syntax.\r\n\r\nSome thoughts/questions:\r\n\r\n* Multiple strings should be allowed, like `catch \"aaa\",\"bbb\"`\r\n* Should we support wildcards, e.g. `catch \"*GetServiceCommand\"`",
      "created_at": "2016-11-28T18:48:54Z",
      "updated_at": "2016-11-28T18:48:54Z"
    },
    {
      "author": "briandrennan",
      "author_association": "NONE",
      "body": "My personal sentiment is that multiple strings should be allowed, and the input type should probably be `System.String[]`. Wildcards would also provide a very nice shortcut syntax, per the example you put for `catch \"*GetServiceCommand\"`.",
      "created_at": "2016-12-04T18:22:54Z",
      "updated_at": "2016-12-04T18:22:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "` catch \"aaa\",\"bbb\" ` say nothing about `FullyQualifiedErrorID` \ud83d\ude15 Why not filter by any other properties of exception? Like @rkeithhill 's idea:\r\n`try {} catch filter() do {} `\r\n",
      "created_at": "2016-12-05T18:44:04Z",
      "updated_at": "2016-12-05T18:44:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Things may have changed, but LINQ expression trees did not support `filter` when I last looked. They have support in the api, but no code generation support, I believe due to issues in the JIT.\r\n\r\nThat doesn't mean we couldn't implement exception filtering anyway, but it might not work like it does in C# (e.g., unwinding behavior might differ).\r\n\r\nI think using an exception filter will be less obvious to many folks - it's more verbose. Of course it's more powerful, but I doubt that power is needed in PowerShell much.",
      "created_at": "2016-12-05T19:48:25Z",
      "updated_at": "2016-12-05T19:48:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Another option. The `catch` expects types and we cannot break it. Therefore we need a prefix to say that  next is not a type, but something else. It was also good for UX to use a tab completion.\r\n\r\n```powershell\r\ntry {}\r\ncatch : FullyQualifiedErrorID  \"aaa\", \"bbb\" {}\r\ncatch ( FullyQualifiedErrorID )   \"aaa\", \"bbb\" {}\r\n\r\n```",
      "created_at": "2016-12-06T12:16:31Z",
      "updated_at": "2016-12-06T12:16:31Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I know this is an ancient issue but it annoyed me enough that there wasn't a short way to do this I looked it up. Was there any movement on this or is it still up for grabs?",
      "created_at": "2021-01-15T23:55:48Z",
      "updated_at": "2021-01-15T23:55:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Was there any movement on this or is it still up for grabs?\r\n\r\nIt is still up for grabs. You can continue the discussion.",
      "created_at": "2021-01-20T06:18:08Z",
      "updated_at": "2021-01-20T06:18:08Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "In that case do we really need a special syntax? Why not just take the fully qualified as a string and determine logic based on whether it is a type definition or a string?\r\n\r\ncatch `[exception]` {\r\n\r\n}\r\n\r\nvs \r\n\r\ncatch 'FullyQualifiedErrorId' {\r\n\r\n}",
      "created_at": "2021-01-20T15:24:31Z",
      "updated_at": "2021-01-20T15:24:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think PowerShell parser would allow this. \r\nhttps://github.com/PowerShell/PowerShell/blob/c406f9fe68b7bee1bc4695f70d9dba86b3061ad4/src/System.Management.Automation/engine/parser/Parser.cs#L5450",
      "created_at": "2021-01-20T17:46:54Z",
      "updated_at": "2021-01-20T17:46:54Z"
    }
  ],
  "created_at": "2016-11-28T16:27:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Up-for-Grabs"
  ],
  "number": 2791,
  "state": "open",
  "title": "Enable Catch by FullyQualifiedErrorID",
  "updated_at": "2021-01-20T17:46:54Z"
}