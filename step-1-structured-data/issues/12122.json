{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12122",
  "author": "PaulHigin",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR addresses Issue #11478, by implementing runspace reuse.\r\n\r\n## PR Context\r\n\r\nThe current ForEach-Object -Parallel implementation creates a new runspace for each loop iteration to ensure maximum isolation.  However, this can be a significant performance and resource hit, especially for loops that do a small amount of work compared to creating runspaces.  Or if there are a lot of iterations where each performs significant work, memory usage climbs drastically even though runspace resources are released timely.  The dotNet GC allows very large memory usage before collecting available resources.  Manually calling GC.Collect() helps significantly, bringing memory usage way down, but is onerous to implement in script.\r\n\r\nThe easiest and cleanest solution is to reuse runspaces in a pool.  However, there may be side effects of state being leaked between iterations, although runspace.ResetRunspaceState() is used.\r\n\r\nThe fix is to add a runspace pool from which runspace objects are drawn and returned.\r\n\r\nAlso added -UseNewRunspace switch to ForEach-Object -Parallel parameter set, to allow option to create new runspace per iteration, per review feedback from committee.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: 5609\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-03-23T21:00:44Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see a comment in code that ResetRunspaceState() resets a debugger state. Is it ok?",
      "created_at": "2020-03-16T17:14:21Z",
      "updated_at": "2020-03-16T17:14:21Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  I am not aware of any issues.  But let me know if there is something specific you are concerned about.",
      "created_at": "2020-03-16T17:44:00Z",
      "updated_at": "2020-03-16T17:44:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin I am thinking about a scenario in which an user set a breakpoint - will the breakpoint works well if we reset and reuse runspaces?",
      "created_at": "2020-03-16T17:48:17Z",
      "updated_at": "2020-03-16T17:48:17Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "That would be advanced debugging indeed.  We currently don't support setting overall foreach parallel session state (although that is something we can consider for the future), so like any other state, breakpoints would need to be set for each loop iteration.  In this case we definitely want to reset the runspace breakpoint state otherwise all instances will be stopped in the debugger.",
      "created_at": "2020-03-16T18:10:52Z",
      "updated_at": "2020-03-16T18:10:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Adding committee review tag, to consider whether this change can be taken.",
      "created_at": "2020-03-16T18:23:23Z",
      "updated_at": "2020-03-16T18:23:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can accept and document the debugger behavior (maybe add warning in code) - if user want debug the user can remove `-Parallel` parameter and debug.\r\n\r\nFor reference https://github.com/PowerShell/PowerShell/blob/320656c8deb21d1c9e5d34bc8f6b67a69c06597d/src/System.Management.Automation/engine/InitialSessionState.cs#L3295-L3296\r\n\r\nFrom the comment in the code we need to review \"the event, transaction and debug managers\".",
      "created_at": "2020-03-17T03:16:52Z",
      "updated_at": "2020-03-17T03:16:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we believe that the majority of use cases are not impacted by state leaking by not using a new runspace and the benefits for perf and memory usage outweigh the risks.  We should optionally add a `-UseNewRunspace` type switch, but would not block this PR for that.  We would consider changing the default behavior if feedback indicates such a decision is warranted.",
      "created_at": "2020-03-18T22:34:41Z",
      "updated_at": "2020-03-18T22:34:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need to document the new behavior and this \"Reset the event, transaction and debug managers\".",
      "created_at": "2020-03-19T04:30:58Z",
      "updated_at": "2020-03-19T04:32:20Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  There should be no new behavior.  But if there is a breaking change then we can address it at that time.",
      "created_at": "2020-03-19T17:30:41Z",
      "updated_at": "2020-03-19T17:30:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:03:26Z",
      "updated_at": "2020-04-23T18:03:26Z"
    }
  ],
  "created_at": "2020-03-13T18:19:02Z",
  "number": 12122,
  "state": "closed",
  "title": "Implement `ForEach-Object -Parallel` runspace reuse",
  "updated_at": "2020-04-23T18:03:26Z"
}