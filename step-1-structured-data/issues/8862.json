{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8862",
  "author": "powercode",
  "body": "# Summary of the new feature/enhancement\r\n\r\nBy using a concrete type, instead of `PSObject`, both import speed and memory usage can be improved. \r\n\r\nAs it is today, Import-Csv is almost useless for larger datasets, since the overhead of our NoteProperties is 48 bytes, not counting the name and the value. When the imported values are integers, that is a blowup-factor of ~20.\r\n\r\nThese numbers are from my prototype:\r\n\r\n| Destination | Time | Memory used |\r\n| ----- | :-----: | :------: |\r\n| PSObject | 01:34 | 19Gb |\r\n| class with int props | 01:02 | 490Mb |\r\n| class with string props | 00:10 | 4.2Gb |\r\n\r\nBy keeping it as strings, the import speed is vastly improved. By converting to integers, the speed is still improved, and the memory requirements are vastly improved.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nSee https://github.com/PowerShell/PowerShell/pull/8860.\r\n\r\nThe gist is to generate expression trees, that sets the properties or call the constructor, on an instance of the provided type.\r\n\r\nThe use of the constructor allows for custom type conversion, where there are no language conversions from string to the property type.\r\n\r\nThe type needs to have members that match the names of the columns in the CSV. \r\nMaybe we should provide a way of providing alternate headers to map to existing objects?\r\n\r\nData.csv\r\n```csv\r\nText, Integer,Date\r\nHi,42,2016-12-24\r\nBye,4711,2016-12-25\r\n```\r\n\r\n```powershell\r\nclass MyCsv {\r\n   [string] $Text\r\n   [int] $Integer\r\n   [DateTime] $Date\r\n}\r\n$d = Import-Csv -OutputType ([MyCsv]) -Path .\\data.csv\r\n```\r\nI also implemented ctor calls, that takes precedence.\r\n\r\n```powershell\r\nclass MyCsv2 {\r\n   MyCsv2([string] $text, [int] $integer, $date){\r\n       $this.Name = $this.text\r\n       $this.Number = $integer * 100\r\n       $this.When = $dateTime\r\n   }\r\n   [string] $Name\r\n   [long] $Number\r\n   [DateTime] $When\r\n}\r\n$e = Import-Csv -OutputType ([MyCsv2]) -Path .\\data.csv\r\n```\r\n\r\nI would like to see a discussion about the feature set, error handling, names for parameters etc.",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "This really got a lot of traction :)\r\nSeems like an area that comes up as problematic in the wild from time to time.\r\n\r\n",
      "created_at": "2019-03-13T22:57:34Z",
      "updated_at": "2019-03-13T22:57:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Only just saw this now - seems well worth doing.\r\n",
      "created_at": "2019-11-09T16:48:45Z",
      "updated_at": "2019-11-09T17:44:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> problematic in the wild from time to time.\r\n\r\nJust came across https://stackoverflow.com/q/58660818/45375, where an out-of-memory exception occurred even in a _streaming_ scenario; that is, the objects weren't even collected in full in memory and instead just piped back to `Export-Csv`.\r\n\r\nIs the problem in this case one of mounting memory pressure due to lack of garbage collections? Would it make sense to build periodic garbage collection into the command?\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/58660818/memory-exception-while-filtering-large-csv-files\">Memory exception while filtering large CSV files</a></strong></div><div>getting memory exception while running this code. Is there a way to filter one file at a time and write output and append after processing each file. Seems the below code loads everything to memory...</div></blockquote>",
      "created_at": "2019-11-09T17:48:35Z",
      "updated_at": "2019-11-09T17:48:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "https://stackoverflow.com/a/60356120/45375 may give this issue a bit more exposure.\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/60353691/powershell-importing-16mb-csv-into-powershell-variable-creates-600mbs-of-powe\">PowerShell: Importing 16MB CSV Into PowerShell Variable Creates >600MB's of PowerShell Memory Usage</a></strong></div><div>I'm trying to understand why PowerShell's memory balloons so much when I import a file that's ~16MB's as a variable. I can understand there's additional memory structure around that variable but I'...</div></blockquote>",
      "created_at": "2020-02-22T19:55:12Z",
      "updated_at": "2020-02-22T19:55:15Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Shouldn't this be done (or also possible) via a calculated property, like:\r\n```PowerShell\r\n$e = Import-Csv -Path .\\data.csv -Property\r\n    @{Name = 'Name'; Type = [string]},\r\n    @{Name = 'Number'; Type = [long]},\r\n    @{Name = 'When'; Type = [DateTime]}\r\n}\r\n```\r\nWhere the default type is a `PSNoteProperty`.\r\n\r\nI guess that a calculated `Type` property attribute also makes sense for (some of) the existing cmdlets (e.g. `Sort-Object`)  that support calculated properties via the `-Property` parameter.\r\n\r\nAt second thought, I think this isn't possible as the property types of a `PSCustomObject` can't be changed itself only the type of the object contained by the `PSNoteProperty` but that wouldn't safe any memory...  \ud83d\ude12",
      "created_at": "2020-02-23T10:02:15Z",
      "updated_at": "2020-02-23T12:25:37Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Yet another thought to consider:  \r\nA `[DataTable]` (with `[string]` type columns) appears to consume a little more memory then a **class with string props** (~4.5Gb) but might just require a simple **`-AsDataTable`** switch. Besides a `[DataTable]` also easily converts into a `[PSCustomObject[]]`.\r\n",
      "created_at": "2020-02-23T13:44:30Z",
      "updated_at": "2020-02-23T13:48:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting ideas, @iRon7, but they are _complementary_ to what is being proposed here, so I encourage you to create new issues:\r\n\r\n* Even with the current, `[pscustomobject]`-only output, being able to specify column (property) types could be helpful - possibly combined with the next proposal.\r\n\r\n  * However, my sense is that concisely specifying _types_ is more important than also being able to _rename_ columns, so something like `-ColumnType @{ Id = [long]; Date = [datetime] }`, which would allow you to specify output types for a given _subset_ of columns identified by name would make more sense to me; those columns not mentioned would remain `[string]`-typed.\r\n\r\n* Producing optimized standard-type output such as `[DataTable]` would also be handy, as a simpler alternative to creating a custom output type up front (as proposed here). \r\n  * I haven't personally looked into it, but @iSazonov has suggested looking into `IDataView` for similar purposes - see #8855\r\n   * #11027 proposes introducing `-AsHashtable` for outputting (ordered) hashtables.\r\n\r\nAlso, something that probably fits better into the context of _this_ issue and the associated PR (#8860) in terms of implementation, is what @bergmeister has [suggested before](https://github.com/PowerShell/PowerShell/pull/8860#issuecomment-462191253) (emphasis added):\r\n\r\n> Do you think it would make sense to let the cmdlet **create a default type of the ResultType based on the CSV header** (i.e. create a default class with string properties for-each column)? This way the average consumer would still benefit from it without having to specify complex parameters and defining the custom class would then be an additional, optional optimisation on top of it?\r\n\r\n\r\n",
      "created_at": "2020-02-23T18:18:33Z",
      "updated_at": "2020-02-23T18:29:32Z"
    }
  ],
  "created_at": "2019-02-10T23:19:13Z",
  "number": 8862,
  "state": "open",
  "title": "Feature Request: Add OutputType parameter to Import-Csv ",
  "updated_at": "2020-02-23T18:29:32Z"
}