{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1982",
  "author": "lzybkr",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nRun a command that's not installed on your Linux machine, e.g. `dtrace`.\n## Expected behavior\n\n```\njasonsh@jasonsh-ubd02:~$ dtrace\nThe program 'dtrace' is currently not installed. You can install it by typing:\nsudo apt-get install systemtap-sdt-dev\n```\n## Actual behavior\n\n```\nPS> dtrace                                                                                                               \ndtrace : The term 'dtrace' is not recognized as the name of a cmdlet, function, script file, or operable program. Check \nthe spelling of the name, or if a path was included, verify that the path is correct and try again.\nAt line:1 char:1\n+ dtrace\n+ ~~~~~~\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\nPS /home/jasonsh> $PSVersionTable                                                                                        \n\nName                           Value                                                                                    \n----                           -----                                                                                    \nPSVersion                      6.0.0-alpha                                                                              \nPSEdition                      Core                                                                                     \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                  \nBuildVersion                   3.0.0.0                                                                                  \nGitCommitId                    v6.0.0-alpha.9                                                                           \nCLRVersion                                                                                                              \nWSManStackVersion              3.0                                                                                      \nPSRemotingProtocolVersion      2.3                                                                                      \nSerializationVersion           1.1.0.1                                                                                  \n\n\nPS /home/jasonsh> uname -v                                                                                               \n#49~14.04.1-Ubuntu SMP Wed Jun 29 20:22:11 UTC 2016\n\n```\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "That would be nice!  Is there some repo/registry that maintains the mapping of \"command to pkg name\" for the various Linux distro's, as well as the pkg mgr to use (apt-get vs yum vs Install-Module)?\n",
      "created_at": "2016-08-20T19:31:29Z",
      "updated_at": "2016-08-20T19:32:10Z"
    },
    {
      "author": "nerdshark",
      "author_association": "NONE",
      "body": "This isn't built-in `bash` functionality; it's normally defined as an error-handler callback (for [error 127](http://tldp.org/LDP/abs/html/exitcodes.html)) in one of the system-wide shell profiles (probably in `/etc/bashrc`, `/etc/profile`, or `/etc/profile.d/*`). \n\n@rkeithhill It's not likely. Distros that support this kind of functionality generally do two or three things: \n- maintain a database of files owned by installed packages;\n- provide downloadable databases of repositories' package contents;\n- and provide an online, searchable database of package contents.\n\nI don't think that using or maintaining an unofficial, centralized database of command-to-package mappings or package contents for multiple versions of multiple distros is the right approach. Instead, I think that Powershell should provide relevant error-handler hook points (or use existing ones) in the command loop and let Powershell packagers write callbacks tailored to their specific OS/package manager combination. This is in line with the existing practice above, and should require minimal effort to maintain. \n",
      "created_at": "2016-08-21T04:30:38Z",
      "updated_at": "2016-08-21T07:46:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Need some api in PSGallery to enable this",
      "created_at": "2018-01-31T04:30:26Z",
      "updated_at": "2018-01-31T04:30:26Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": ">  I think that Powershell should provide relevant error-handler hook points (or use existing ones) in the command loop \r\n\r\nFYI: there's been a \"command not found\" action available in PowerShell since version 3.\r\n\r\n```powershell\r\n$executioncontext.InvokeCommand.CommandNotFoundAction = { \r\n    param ($e, $e2)  \r\n\r\n   $e2.StopSearch = $true\r\n   $e2.CommandScriptblock = {\r\n       Write-Verbose -Verbose ` \r\n          \"Look for a module containing the command '$e somewhere\"}.GetNewClosure()\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2018-05-23T20:19:00Z",
      "updated_at": "2018-05-23T20:19:00Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "It turns out that the gallery does give you a way to look up modules containing a command `Find-Module -Command`. So adding that to the hook code, you get something like this:\r\n```powershell\r\n$ExecutionContext.InvokeCommand.CommandNotFoundAction = {\r\n    param ($n, $e)\r\n\r\n    $e.StopSearch = $true\r\n    $e.CommandScriptBlock = {\r\n        Write-Host -ForegroundColor Yellow `\r\n            -Verbose \"Command '$n' was not found; searching on-line for modules with this command\"\r\n        $result = Find-Module -Command $n\r\n        if ($result)\r\n        {\r\n            $result | Out-String | Write-Host -ForegroundColor Yellow\r\n        }\r\n        else\r\n        {\r\n            Write-Host -ForegroundColor Yellow \"No matching modules were found.\"\r\n        }\r\n    }.GetNewClosure()\r\n}\r\n```\r\nThe response from the gallery can be a bit slow, but you can always cancel the lookup with ctrl-C. ",
      "created_at": "2018-05-24T23:00:30Z",
      "updated_at": "2018-05-24T23:00:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Opened https://github.com/PowerShell/PowerShellGet/issues/287, if they can get the perf down to 100ms or less, I think we can add this capability into PSCore6 (but probably need to have it timeout after 250ms to not impact the interactive experience)",
      "created_at": "2018-05-25T00:24:19Z",
      "updated_at": "2018-05-25T00:24:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Web response time is not predictable. Can we use local cache like for help files? We could download a catalog and only check the catalog version and suggest users to update it.",
      "created_at": "2018-05-25T04:48:06Z",
      "updated_at": "2018-05-25T04:48:06Z"
    },
    {
      "author": "Jawz84",
      "author_association": "CONTRIBUTOR",
      "body": "What about changing the `CommandNotFoundException` to this:   \r\n```\r\n<data name=\"CommandNotFoundException\" xml:space=\"preserve\">\r\n    <value>The term '{0}' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nYou can also try to find a module containing {0} online:\r\nFind-Module -Command {0}</value>\r\n```\r\nIt's not as fancy as looking up an actual module automatically, but it does point users in the right direction, and it's super easy to implement.\r\n\r\nMaybe the extra line I propose here should only be displayed when `{0} -match \"^\\w+-\\w+$\"` (this probably is not 100% correct regex to capture CmdLet verb-noun, but you get the idea).",
      "created_at": "2018-07-12T12:04:05Z",
      "updated_at": "2018-07-12T12:12:36Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "I believe this functionality belongs to package management, but of course, it can/should be shipped together with PowerShell. I did [proof-of-concept](https://github.com/iricigor/psaptgetupdate) module which finds required information in about **20ms**, so adding suggestions is not a problem. It is inspired with `apt-get update` from Linux, and it follows what Ilya described [above](https://github.com/PowerShell/PowerShell/issues/1982#issuecomment-391940004). More information is in [the issue](https://github.com/PowerShell/PowerShellGet/issues/287) Steve opened.",
      "created_at": "2018-11-01T18:03:47Z",
      "updated_at": "2018-11-01T18:20:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It will nice to have a public API (in PowerShellGet?) for fast search from the local cache - we could use the API in PowerShell engine for Help and IntelliSense subsystems. Perhaps PowerShell engine need generic API to search from some sources (preinstalled modules, custom modules, native commands and so on).",
      "created_at": "2018-11-02T05:41:54Z",
      "updated_at": "2018-11-02T05:41:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Can also integrate with winget",
      "created_at": "2020-06-10T14:29:52Z",
      "updated_at": "2020-06-10T14:29:52Z"
    }
  ],
  "created_at": "2016-08-20T19:02:32Z",
  "labels": [
    "Issue-Enhancement",
    "Usability",
    "WG-Interactive-Console"
  ],
  "number": 1982,
  "state": "open",
  "title": "Command not found should suggest how to install like in bash",
  "updated_at": "2020-08-20T19:05:00Z"
}