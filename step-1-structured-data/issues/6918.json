{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6918",
  "author": "alx9r",
  "body": "This results in the true cause of errors being obscured whenever an error passes through `ForEach-Object` or `Where-Object` from the site of the error to the user.  The consequences of this are broader than might be apparent at first glance.  That is because the affected errors includes any error that occurred downstream in the pipeline pursuant to an object output by `ForEach-Object` or `Where-Object`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\ntry\r\n{\r\n    1 | ForEach-Object {\r\n        0 -gt 0,0\r\n    }\r\n}\r\ncatch\r\n{\r\n    $_.InvocationInfo.PositionMessage\r\n}\r\n\r\ntry\r\n{\r\n    1 | & { process { \r\n        0 -gt 0,0 \r\n    }}\r\n}\r\ncatch\r\n{\r\n    $_.InvocationInfo.PositionMessage\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:4 char:9\r\n+         0 -gt 0,0\r\n+         ~~~~~~~~~~~~~~~~\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:15 char:9\r\n+         0 -gt 0,0\r\n+         ~~~~~~~~~\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:3 char:9\r\n+     1 | ForEach-Object {\r\n+         ~~~~~~~~~~~~~~~~\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:15 char:9\r\n+         0 -gt 0,0\r\n+         ~~~~~~~~~\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.2                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.2                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @alx9r I didn't quite understand this statement:\r\n> That is because the affected errors includes any error that occurred downstream in the pipeline pursuant to an object output by ForEach-Object or Where-Object.\r\n\r\nCould you expand on this a bit? Thanks.",
      "created_at": "2018-05-24T22:05:10Z",
      "updated_at": "2018-05-24T22:05:10Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "> Could you expand on this a bit? Thanks.\r\n\r\nHi @BrucePay .  I seem to have misinterpreted what I was seeing.  I mistook the misleading contents of `.PositionMessage` as being caused by `Foreach-Object` not passing through error records like `{}.Invoke()`  (#3018).  But this looks more like a manifestation of a [not-so-useful position message noted by @lzybkr](https://github.com/PowerShell/PowerShell/issues/3647#issuecomment-297208232).  The error record in my OP indeed includes a correct `.ScriptStackTrace` and `.Exception`.  It's just `.InvocationInfo` that has puzzling contents. Whether the contents is puzzling doesn't seem to depend on the use of `Foreach-Object`, though.\r\n\r\nThe less-than-helpful position messages sometimes have a dramatic mismatch between the top of the `.ScriptStackTrace` and the site to which `.InvocationInfo` refers.  The mismatch sometimes results in navigating to an entirely different module which turns out to be unrelated.  That slows troubleshooting.  I guess that's what I was seeing when I wrote \"The consequences of this are broader than might be apparent at first glance.\"  \r\n\r\nHere is a contrived example of such a mismatch:\r\n\r\n```PowerShell\r\nfunction e {\r\n    param ( [Parameter(ValueFromPipeline)] $x )\r\n    process { f }\r\n}\r\n\r\nfunction f { g }\r\n\r\nNew-Module {\r\n    function g { 0-gt 0,0 }\r\n} | Import-Module\r\n\r\ntry\r\n{\r\n    e\r\n}\r\ncatch\r\n{\r\n    $_.ScriptStackTrace\r\n    $_.InvocationInfo.PositionMessage\r\n}\r\n```\r\n\r\nThe error occured in a module on line 9.  But `.InvocationInfo` doesn't mention anything about that line.  Instead `.InvocationInfo` refers to line 14 which is at the opposite end of the `.ScriptStackTrace` and isn't even in the module where the error originated.",
      "created_at": "2018-05-25T20:37:57Z",
      "updated_at": "2018-05-25T20:37:57Z"
    }
  ],
  "created_at": "2018-05-22T14:58:17Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 6918,
  "state": "open",
  "title": "ForEach-Object and Where-Object supercede ErrorRecords from their scriptblock with their own",
  "updated_at": "2018-05-25T20:37:57Z"
}