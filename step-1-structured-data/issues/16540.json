{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16540",
  "author": "PowershellNinja",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nLoad the following function:\r\n\r\n```Powershell\r\nfunction ConvertTo-Fahrenheit {\r\n    param\r\n    (\r\n        [parameter(mandatory = $true)]\r\n        $cels\r\n    )\r\n\r\n    Write-Host \"Data Type: $($cels.GetType().Name)\"\r\n\r\n    $fahr = ($cels * 9) / 5 + 32\r\n    return $fahr\r\n}\r\n```\r\nRun the function without defining a parameter, then input \"30\" (or any numerical value) for the parameter \"cels\" when asked to provide the value for the mandatory parameter:\r\n```Powershell\r\nPS C:\\Scripts> ConvertTo-Fahrenheit\r\n\r\ncmdlet ConvertTo-Fahrenheit at command pipeline position 1\r\nSupply values for the following parameters:\r\ncels: 30\r\nData Type: String\r\n60606060606060638\r\n```\r\nThe result is... strange and does not have any obvious mathematical logic.\r\n\r\nSecond, run the function again and directly provide the same numerical value:\r\n```Powershell\r\nPS C:\\Scripts> ConvertTo-Fahrenheit -cels 30\r\nData Type: Int32\r\n86\r\n```\r\nThis time, result is what I would have expected.\r\n\r\n\n\n### Expected behavior\n\n```console\nI call the function and the type assumption / conversion should work the same regardless of if I provide the parameter directly to the function, or if I provide it over the \"mandatory parameter\" prompt.\n```\n\n\n### Actual behavior\n\n```console\nWhen I call the function and provide the numeric value directly, it is correctly assumed and typed as integer.\r\nIf I call the function without parameter and then provide the same numeric value to the \"mandatory parameters\" prompt, it is interpreted as a string.\r\n\r\nIf the parameter is strongly typed as integer, both versions work the same.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u00d4\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-05T12:00:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nPS>  \"30\"*9\r\n\r\n303030303030303030\r\n\r\nPS>\"30\"*9/5+32\r\n\r\n60606060606060638\r\n```",
      "created_at": "2021-12-02T16:08:46Z",
      "updated_at": "2021-12-02T16:08:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you want to enforce a data type, it's generally best to annotate the parameter definition appropriately. Otherwise, as you saw, the default type for values entered at a prompt is a string.",
      "created_at": "2021-12-02T16:29:41Z",
      "updated_at": "2021-12-02T16:29:41Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> If you want to enforce a data type, it's generally best to annotate the parameter definition appropriately. Otherwise, as you saw, the default type for values entered at a prompt is a string.\r\n\r\nIt's expected because effectively it's read host  and that will get a string.  This one comes a surprise though \r\n```\r\nConvertTo-Fahrenheit 60\r\nData Type: Int32\r\n140\r\n\r\nConvertTo-Fahrenheit 60.5\r\nData Type: Double\r\n140.9\r\n\r\n ConvertTo-Fahrenheit -40\r\nData Type: String\r\nCannot convert value \"-40-40-40-40-40-40-40-40-40\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\"\r\n\r\n```\r\nBut \r\n```\r\n-40 * 9\r\n\r\n-360\r\n```\r\nand if I modify the function to take piped input\r\n```\r\n-40 | ConvertTo-Fahrenheit\r\nData Type: Int32\r\n-40\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-02T19:18:23Z",
      "updated_at": "2021-12-02T19:18:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, parsing rules are in effect when typing command arguments or expressions, but not at a Read-Host prompt.",
      "created_at": "2021-12-02T19:23:23Z",
      "updated_at": "2021-12-02T19:23:23Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Yeah, parsing rules are in effect when typing command arguments or expressions, but not at a Read-Host prompt.\r\n\r\nExcept with negative numbers,  -1 in arguments will treated as a string,  but expressions will treat -1 as a number (as above); \r\n",
      "created_at": "2021-12-02T20:30:12Z",
      "updated_at": "2021-12-02T20:30:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, the parsing rules differ a little bit in command arguments vs expressions, but the point was more just that PS doesn't really parse anything at all that's given to it as a prompt response.",
      "created_at": "2021-12-02T20:53:17Z",
      "updated_at": "2021-12-02T20:53:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dynamic typing is power fundamental PowerShell feature and we have to pay for this.",
      "created_at": "2021-12-03T05:02:09Z",
      "updated_at": "2021-12-03T05:02:09Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Dynamic typing is power fundamental PowerShell feature and we have to pay for this-\r\n\r\nIt's not really Dynamic typing which is causing the problem, in fact the OP could solve his problem using dynamic typing\r\n `$fahr = ($cels * 9) / 5 + 32`    \r\nwill produce 9 copies of a string    \r\n` $fahr = (9* $cels) / 5 + 32`   \r\n Will convert the string to a number and multiply by 9. Any \"ninja\" should know that and probably wouldn't write ```$value = ...; return $value. ``` but not now, as the saying goes I'm adding insult to ninjary \r\n\r\nThe answer to his question is \r\n** If you want a parameter to be mandatory, and user input to work, you have to allow for the prompt to be a read-host and the result will be a string**\r\n\r\nI raised a side pointL if you do something like \r\n`-1 | convert`    \r\nor \r\n`[math]::pi  | convert` \r\n\r\nWhat comes before the | sign is an *expression* and is evaluated so -1 or 3.1415 goes down the pipeline bt\r\n`convert   `[math]::pi  `   sees a string literal - unless the expression is put in brackets.  It comes as a surprise to most people that -1 is not treated as a numeric literal but an expression.   \r\n ",
      "created_at": "2021-12-04T09:40:46Z",
      "updated_at": "2021-12-04T09:40:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-05T12:00:50Z",
      "updated_at": "2021-12-05T12:00:50Z"
    },
    {
      "author": "PowershellNinja",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your answers @iSazonov @jhoneill , I wasn't aware that the prompt for a mandatory parameter is using Read-Host, that explains the behavior though - thanks for your time",
      "created_at": "2021-12-09T10:26:54Z",
      "updated_at": "2021-12-09T10:26:54Z"
    }
  ],
  "created_at": "2021-12-02T13:47:04Z",
  "labels": [
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 16540,
  "state": "closed",
  "title": "Inconsistent Parameter Type Conversion in Function",
  "updated_at": "2021-12-09T10:26:54Z"
}