{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9035",
  "author": "timoline",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIt would be great if the following cmdlets are provided by default\r\n\r\n- ConvertFrom-Ini\r\n- ConvertTo-Ini\r\n\r\nThese cmdlet needs to convert ini from and to a psobject\r\n\r\nexample system.ini\r\n\r\n\r\n```\r\n; for 16-bit app support\r\n[386Enh]\r\nwoafont=dosapp.fon\r\nEGA80WOA.FON=EGA80WOA.FON\r\nEGA40WOA.FON=EGA40WOA.FON\r\nCGA80WOA.FON=CGA80WOA.FON\r\nCGA40WOA.FON=CGA40WOA.FON\r\n\r\n[drivers]\r\nwave=mmdrv.dll\r\ntimer=timer.drv\r\n\r\n[mci]\r\n```\r\n\r\nexpected output\r\n\r\n```\r\n Get-Content \"c:\\windows\\system.ini\" | ConvertFrom-Ini | fl\r\n\r\n386Enh  : @{woafont=dosapp.fon; EGA80WOA.FON=EGA80WOA.FON; EGA40WOA.FON=EGA40WOA.FON; CGA80WOA.FON=CGA80WOA.FON; CGA40WOA.FON=CGA40WOA.FON}\r\ndrivers : @{wave=mmdrv.dll; timer=timer.drv}\r\n```",
  "closed_at": "2022-08-17T10:01:21Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you add a reference to Ini schema?",
      "created_at": "2019-03-03T12:06:47Z",
      "updated_at": "2019-03-03T12:06:47Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "https://en.wikipedia.org/wiki/INI_file",
      "created_at": "2019-03-03T12:11:20Z",
      "updated_at": "2019-03-03T12:11:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looking at [this section](https://en.wikipedia.org/wiki/INI_file#Varying_features) it seems pretty clear that a well-defined schema doesn't really exist, and such a cmdlet will most likely be required to figure out which of the variants is being used when parsing the file. ",
      "created_at": "2019-03-03T12:25:15Z",
      "updated_at": "2019-03-03T12:25:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is no standard such as RFC we can not implement these cmdlets for all platforms (being portable).\r\n\r\nAlso modern config files usually use JSON, YAML or XML not Ini.",
      "created_at": "2019-03-03T12:53:41Z",
      "updated_at": "2019-03-03T12:53:41Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "> There is no standard such as RFC we can not implement these cmdlets for all platforms (being portable).\r\n> \r\n> Also modern config files usually use JSON, YAML or XML not Ini.\r\n\r\nFunny you say this and I agree with you....\r\nbut currently Windows is still using these kind of config files...",
      "created_at": "2019-03-03T12:56:38Z",
      "updated_at": "2019-03-03T12:56:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> currently Windows is still using these kind of config files\r\n\r\nYes, only new cmdlets must be portable. \r\nI believe INI files can be easily parsed by a PowerShell script.",
      "created_at": "2019-03-03T16:31:10Z",
      "updated_at": "2019-03-03T16:31:10Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "Sure it can be done by a powershell script.\r\nBut if Windows is still using these kind of INI's, powershell should support it by default.\r\n\r\nRegistry and all kind of other Windows only features are supported....it doesn't make sense to **not** implement this from an user perspective",
      "created_at": "2019-03-03T17:57:58Z",
      "updated_at": "2019-03-03T18:06:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #7542 \r\n\r\n@DarwinJS @mklement0 Perhaps you can add more about perspectives of INIs on Windows and Unix-s.",
      "created_at": "2019-03-03T18:57:36Z",
      "updated_at": "2019-03-03T18:57:36Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Sure.\r\n\r\nI have been doing software deployment on both of these systems for well over a decade.\r\n\r\nHere is a good overview and proof of fairly extensive linux support: https://en.wikipedia.org/wiki/INI_file.  It accurately points out Microsoft's steering away from them when the registry came about.\r\n\r\nThe INI file \"schema\" drifted a lot by incorrect usage of developers when they needed to get creative for things it did not handle well (which is why OS/2's registry was brought forward into Windows NT).\r\n\r\nYou can get a sense for it by analyzing the apis - to see the APIs, search for \"PrivateProfile\" from this page: https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-getprivateprofilestringa\r\n\r\nInterestingly, now with Microsoft getting OpenSSH running on Windows, we regress to the stone age by configuring it with a CONF file.\r\n\r\nWhile INIs weren't great - CONF files are a huge antipattern - including for security.\r\n\r\nSince they do not enforce any type of structure they must be parsed with RegEx's - which opens up a lot of risk that a desired locked-down configuration won't be applicable to all systems and relies on the skill of every individual automator to make something that is both incisive and comprehensive.\r\n\r\nDue to this risk, most automators end up simply replacing the whole file - including with configuration management systems like chef, puppet, ansible, powershell DSC, etc, etc.\r\n\r\nThe problem with doing that is that it is the perspective of a fresh system setup.  Wiping out existing configurations on existing in-place systems for a new \"default\" can cause many problems in large environments where more than one mechanism many need to manage these files or some of their values may need to be user editable and persisted for non-security concerning settings.\r\n\r\nSo while I thought I could have no more hate for INI files - I embrace them with love compared to CONF files. ;)\r\n\r\nIf it were up to me - OpenSSH would optionally support an INI file and have it as the authoritative configuration if present.  Those who prefer the much less manageable and less secure CONF file could still use it by making sure an INI does not exist.\r\n\r\nSo I would say that not only is there a historic case for supporting them - they are eons ahead of the structureless CONF files that are so prevalent on Linux.",
      "created_at": "2019-03-03T19:59:48Z",
      "updated_at": "2019-03-03T20:02:18Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Whilst I understand the request, this to me is just another https://github.com/PowerShell/PowerShell/issues/3607 and I will point you to this comment in that issue https://github.com/PowerShell/PowerShell/issues/3607#issuecomment-458306488 and also this prior comment from @SteveL-MSFT https://github.com/PowerShell/PowerShell/issues/3607#issuecomment-457296230\r\n\r\nI personally have very little use for `Ini` or `yaml` files so to have this boxed into Pwsh seems a waste for me \r\n\r\nThe direction that the PSTeam are looking at is to publish a meta module to the PowerShell Gallery that can be used by those that need it and are looking for suggested items in this Issue https://github.com/PowerShell/PowerShell/issues/7542 which ties in with their ideas for this https://github.com/PowerShell/PowerShell/issues/5681 - which I think is the right way to go about it going forward",
      "created_at": "2019-03-03T20:28:21Z",
      "updated_at": "2019-03-03T20:28:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "While `ini` files are less popular today, [toml](https://github.com/toml-lang/toml) (roughly a superset of `ini`) has seen significant adoption in the `Rust` community and has gained the attention of some .Net folks, e.g. [Tomlyn](https://github.com/xoofx/Tomlyn).\r\n\r\nI think it would be useful to have with `toml` support and add some restrictions when converting to/from ini. That said, I'm not sure it belongs in the core of PowerShell.",
      "created_at": "2019-03-04T20:52:56Z",
      "updated_at": "2019-03-04T20:52:56Z"
    },
    {
      "author": "ChadMcCaffery",
      "author_association": "NONE",
      "body": "As it happens, I wrote scripts a few years ago that convert .ini & .inf files into objects. For .ini files, it produces a hashtable, because some section names can contain characters that cannot be converted to properties. I added them here: https://github.com/ChadMcCaffery/MiscPowershell. ",
      "created_at": "2019-03-05T17:52:48Z",
      "updated_at": "2019-03-05T17:53:08Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Wouldn't `ConvertFrom-String` help here rather than having a cmdlet ?",
      "created_at": "2019-03-07T03:44:17Z",
      "updated_at": "2019-03-07T03:44:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`ConvertFrom-String` was never bundled with PS Core. `ConvertFrom-StringData` is available, but behaves a bit differently. You could potentially use it for simple INI files, but it wouldn't be able to handle the section headers or anything more complex.",
      "created_at": "2019-03-07T04:37:35Z",
      "updated_at": "2019-03-07T04:37:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Support for TOML would definitely make this desirable _cross-platform_ functionality.\r\n\r\nIn the meantime, the [3rd-party `PSIni` module](https://github.com/lipkau/PsIni) seems to be a popular choice, available [from the PowerShell Gallery](https://www.powershellgallery.com/packages/PsIni); you can see it in action in [this Stack Overflow answer](https://stackoverflow.com/a/55341293/45375). Caveat: There is _no data-type support_:\r\n* on writing to an INI file, `.ToString()` serialization is applied\r\n* on reading, everything is read _as a string_.\r\n\r\n---\r\n\r\nAs for in-box vs. download on demand:\r\n\r\nI think what matters in the end is to have officially maintained or endorsed and curated functionality - whether maintained by the core team or by the community.\r\n\r\nFrom a pure convenience perspective, having everything in-box is great, but obviously unrealistic. \r\n\r\nThe next best thing is (a) knowing that an official solution exists that is (b) easily discoverable and (c) easily installable on demand (and I think `Install-Module` qualifies).\r\n\r\n",
      "created_at": "2019-03-25T21:03:31Z",
      "updated_at": "2019-03-25T21:04:03Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "I think it should be in box for this.  It is used as part of Windows and is a big hole in PowerShell OS coverage.  I'm also worried about a very small module not being maintained very well.  If it is maintained by the core team, then bugs will be addressed with other core items.  I looked at PSIni and it seems to have some rather large issues still, bad enough that I would rather use my own homegrown parser for it.",
      "created_at": "2020-03-03T20:34:54Z",
      "updated_at": "2020-03-03T20:34:54Z"
    },
    {
      "author": "shewitt-au",
      "author_association": "NONE",
      "body": "I think it would be handy too. In fact, its absence complicates my life and stuns me. I find the philosophical cross-platform arguments against its inclusion amusing. INI files, while not common on Linux, do crop up. On Windows they are still quite common, in my case in the \u201cZone.Identifier\u201d stream of downloaded files. I don\u2019t see push for the removal of the registry provider because it\u2019s platform dependent. INI files are not platform dependent, just more common on Windows.",
      "created_at": "2021-10-20T01:32:05Z",
      "updated_at": "2021-10-20T01:32:05Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "this gets a +1 from me. \r\nwas jus stunned it was not available when trying to autocomplete",
      "created_at": "2022-08-12T10:38:53Z",
      "updated_at": "2022-08-12T10:38:53Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "> I think it would be handy too. In fact, its absence complicates my life and stuns me. I find the philosophical cross-platform arguments against its inclusion amusing. INI files, while not common on Linux, do crop up. On Windows they are still quite common, in my case in the \u201cZone.Identifier\u201d stream of downloaded files. I don\u2019t see push for the removal of the registry provider because it\u2019s platform dependent. INI files are not platform dependent, just more common on Windows.\r\n\r\nWith systemd they are now common even on linux.",
      "created_at": "2022-08-13T17:57:35Z",
      "updated_at": "2022-08-13T17:57:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we were to use TOML, two basic questions arise: what would be the representation of this in PowerShell and what restrictions could be imposed to conform to the INI?",
      "created_at": "2022-08-13T18:46:56Z",
      "updated_at": "2022-08-13T18:46:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like there are some modules on powershellgallery.com specifically for working with ini files.  It doesn't seem like this is something we need as part of PowerShell itself.",
      "created_at": "2022-08-15T18:58:08Z",
      "updated_at": "2022-08-15T18:58:08Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "sorry, this is kind of a non-argument imho.\r\nA lot of cmdlets  were psmodules before or there was another solution for it, but that didn't stop you for implementing it...",
      "created_at": "2022-08-16T04:36:41Z",
      "updated_at": "2022-08-16T04:36:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as declined and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-17T10:01:20Z",
      "updated_at": "2022-08-17T10:01:20Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "I honestly think that with how modules work today, \"there is a module for that\" is not even remotely a good argument. \r\nSupport for the most basic of configuration filetypes is not worthy of putting it into the release bundle?\r\nWhy is CSV in there? or JSON?",
      "created_at": "2022-08-17T17:19:09Z",
      "updated_at": "2022-08-17T17:19:09Z"
    },
    {
      "author": "stangm",
      "author_association": "NONE",
      "body": "> Looks like there are some modules on powershellgallery.com specifically for working with ini files. It doesn't seem like this is something we need as part of PowerShell itself.\r\n\r\nThat's like the old \"I don't use it, so I don't understand why anyone else would.\"  Windows itself still has files in INI format, this is long long overdue.  But, people have been asking for it since Powershell came out, and they still haven't done it, because although they said powershell was for admins, they prioritized putting in programmer level things.   And XML and JSON were more important to the programmers.\r\n",
      "created_at": "2022-09-22T21:50:46Z",
      "updated_at": "2022-09-22T21:50:46Z"
    }
  ],
  "created_at": "2019-03-03T12:04:12Z",
  "number": 9035,
  "state": "closed",
  "title": "ConvertFrom-Ini, ConvertTo-Ini",
  "updated_at": "2022-09-22T21:50:47Z"
}