{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11714",
  "author": "scotthardwick",
  "body": "I happened to notice that a recent code change (https://github.com/PowerShell/PowerShell/pull/11611) has added the -AsUTC switch to the Get-Date command and that got me to thinking about checking out how this was going to really simplify life. I then started wondering what else Get-Date needed to be highly useful.  So I revisited the Get-Date code and various projects I have done over the last few years.\r\n\r\nLooking at src/Microsoft.PowerShell.Commands.Utility/commands/utility/GetDateCommand.cs\r\nwe already have four special formats that were introduced in PS5 \"FileDate\", \"FileDateUniversal\", \"FileDateTime\", and \"FileDateTimeUniversal\"\r\n\r\n```\r\nGet-Date -Format \"FileDate\" # yyyyMMdd\r\n# which is equivalent to Get-Date -Format \"yyyyMMdd\" or (Get-Date -UFormat \"%F\") -Replace '-',''\r\nGet-Date -Format \"FileDateUniversal\" # yyyyMMddZ\r\n#which is equivalent to Get-Date -AsUTC -Format \"yyyyMMdd'Z'\" or (Get-Date -UFormat \"%FZ\") -Replace '-',''\r\nGet-Date -Format \"FileDateTime\"  # yyyyMMddTHHmmssffff\r\n# which is equivalent to Get-Date -Format \"yyyyMMdd'T'HHmmssffff\"\r\nGet-Date -Format \"FileDateTimeUniversal\"  # yyyyMMddTHHmmssffffZ\r\n# which is equivalent to Get-Date -AsUTC -Format \"yyyyMMdd'T'HHmmssffff'Z'\"\r\n```\r\n\r\nMy suggestion is that four equally useful special formats that should be added are SecondsSinceEpoch (or UnixTime or UnixEpoch or whatever is the most appropriate label) and ISO8601 (or the profile RFC3339 as a label may be more apt).\r\nIf you use many REST APIs, or JSON you may find these come up quite frequently.\r\n\r\n```\r\nGet-Date -Format \"SecondsSinceEpoch\" # (in UTC)\r\nGet-Date -Format RFC3339datetime\r\n# equates to Get-Date -Format o or ([Newtonsoft.Json.JsonConvert]::SerializeObject($(Get-Date -AsUTC))) -Replace '\"',''\r\nGet-Date -Format RFC3339fulldate\r\n# equates to Get-Date -Format \"yyyy-MM-dd\"\r\nGet-Date -Format RFC3339fulltime\r\n# equates to Get-Date -Format \"HH:mm:ss.fffffffK\"\r\n```\r\n\r\nCould these value be gotten via other means? Sure!  Just as the existing special formats could be.\r\n\r\nI currently use these two functions to get back and forth with the UnixEpoch.\r\n\r\n```\r\nfunction Convert-DateTimeToUnixTime([DateTime]$DateTimeVar) {\r\n    # Output is UTC.\r\n    if ($DateTimeVar.Kind -ne \"Utc\") { $DateTimeVar = $DateTimeVar.ToUniversalTime() }\r\n    $unixEpochStart = New-Object DateTime (1970, 1, 1, 0, 0, 0, ([DateTimeKind]::Utc))\r\n    [int]($DateTimeVar - $unixEpochStart).TotalSeconds\r\n}\r\n\r\nfunction Convert-UnixTimeToDateTime([int]$UnixTime) {\r\n    # Output is UTC.  ToLocalTime can be used after the fact or added in as a switch.\r\n    (New-Object DateTime(1970, 1, 1, 0, 0, 0, 0, [DateTimeKind]::Utc)).AddSeconds($UnixTime)\r\n}\r\n```\r\n\r\n\r\nAnyway, I thought I would propose this and see what others thought.\r\n\r\nBest!\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@scotthardwick Please move second proposal in new issue. ",
      "created_at": "2020-01-29T14:17:06Z",
      "updated_at": "2020-01-29T14:17:06Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": "@iSazonov I have done as you requested and separated the two proposals.",
      "created_at": "2020-01-29T15:07:47Z",
      "updated_at": "2020-01-29T15:07:47Z"
    }
  ],
  "created_at": "2020-01-29T00:00:53Z",
  "number": 11714,
  "state": "open",
  "title": "Add Four New Special Formats to Get-Date",
  "updated_at": "2020-01-30T03:26:12Z"
}