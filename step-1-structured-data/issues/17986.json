{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17986",
  "author": "wgross",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI'm implementing a custom cmdlet provider and stumbled upon an issue with provider qualified path:\r\n- When getting an item with a rooted path like `drive:/path/to/item` the provider instance has assigned a PSDriveInfo instance on invocation by the base provider.\r\n- When getting an item with a provider qualified path: `provider\\qualified::drive:/path/to/item` the provider is invoked without having a PSDriveInfo instance assigned.\r\n\r\nWithin the provider I can compensate by parsing the drive name from the path and fetch the drive info from the session state: `SessionState.Drive.Get(\"drive\")`. \r\n\r\nAlso this changes the returned item which can be observed by the user:\r\n- `Get-item C:\\ | fl *` shows a PSDrive property.\r\n- 'Get-item  \"Microsoft.PowerShell.Core\\FileSystem::c:\\ | fl *\" doesn't show a PSDrive property. \r\n\r\nI've debugged this with the code base for v7.2.6 and it look to me that `LocationGlobber.GetProviderPath(..)` should return the drive info in this case as well or should be called a second time with the provider name removed from the paths maybe? \r\n\n\n### Expected behavior\n\n```console\nPS> (get-item \"Microsoft.PowerShell.Core\\FileSystem::c:\\\").PSDrive -eq $null\r\nFalse\n```\n\n\n### Actual behavior\n\n```console\nPS> (get-item \"Microsoft.PowerShell.Core\\FileSystem::c:\\\").PsDrive -eq $null\r\nTrue\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u00d4\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-08-29T19:08:09Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "A provider qualified path doesn't really reference the PSDrive. In this case, it just happens that the PSDrive shares the same name as the fully qualified path. This is made a little bit more clear with the registry provider:\r\n\r\n```powershell\r\nGet-Item Registry::HKEY_LOCAL_MACHINE\\Software\r\n```\r\n\r\nTechnically that references the same path as the PSDrive `HKLM:\\` but the provider qualified syntax does not use PSDrives. You can even do `Get-Item Registry::HKLM:\\Software` and it won't be able to find the path because that resolution doesn't happen.",
      "created_at": "2022-08-29T18:36:23Z",
      "updated_at": "2022-08-29T18:36:23Z"
    },
    {
      "author": "wgross",
      "author_association": "NONE",
      "body": "Thanks for the quick reponse!\r\n\r\nJust to clarify this for myself:\r\nUsing a provider qualified path delegates the path resolution (including the drives) to the provider implementation. \r\nThis is similar to a call of a static method vs an instance method in C# where the instance method would be  the resolution of a non-provider qualified path?\r\n\r\nTherefore what I did as a workaround (getting the PSDrive myself) is the intended behavior for a cmdlet provider?",
      "created_at": "2022-08-29T18:49:01Z",
      "updated_at": "2022-08-29T18:49:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Thanks for the quick reponse!\r\n> \r\n> Just to clarify this for myself: Using a provider qualified path delegates the path resolution (including the drives) to the provider implementation.\r\n\r\nWell it's more that it just doesn't resolve PSDrives at all. It's saying \"here's the 'provider path', don't try to resolve it like a 'PSPath'\".\r\n\r\nThis is similar to a call of a static method vs an instance method in C# where the instance method would be the resolution of a non-provider qualified path?\r\n\r\nYeah kinda. If you consider `PSDrive` to be sort of like a virtual dispatch table of paths.\r\n\r\n> Therefore what I did as a workaround (getting the PSDrive myself) is the intended behavior for a cmdlet provider?\r\n\r\nWell you're not dealing with a `PSPath`, you're dealing with a provider path. Even file system will have provider paths that don't resolve to a `PSDrive`, e.g. `Get-Item FileSystem::\\\\localhost\\c$\\Windows`\r\n\r\nAnd probably only `FileSystem` will actually have PSDrive names line up exactly with literal path elements. I would say that the intended behavior is not to assume that a given provider path has an associated `PSDrive`.\r\n\r\n",
      "created_at": "2022-08-29T19:05:37Z",
      "updated_at": "2022-08-29T19:05:37Z"
    },
    {
      "author": "wgross",
      "author_association": "NONE",
      "body": "I see, thank you!",
      "created_at": "2022-08-29T19:08:02Z",
      "updated_at": "2022-08-29T19:08:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This is definitely a departure from basic PowerShell concepts. Fixing this was declined in #5785.",
      "created_at": "2022-08-30T04:48:09Z",
      "updated_at": "2022-08-30T04:48:09Z"
    }
  ],
  "created_at": "2022-08-29T16:39:26Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 17986,
  "state": "closed",
  "title": "PSDriveInfo is null for Get-Item -Path <provider qualified path>",
  "updated_at": "2022-08-30T04:48:09Z"
}