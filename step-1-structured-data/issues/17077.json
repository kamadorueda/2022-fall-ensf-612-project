{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17077",
  "author": "MiguelBarro",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n```pwsh\r\n> $res = 1..3 | % -Parallel { \r\n   $o = [pscustomobject]@{'a'=$_};\r\n   Add-Member -InputObject $o -Type ScriptMethod -Name GetA -Value {$this.a} -force -PassThru }\r\n> $res.GetA()\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\n> $res.GetA()\r\n1\r\n2\r\n3\r\n```\r\n\r\nwhich is the actual behavior if `-Parallel` is not used as in:\r\n```pwsh\r\n> $res = 1..3 | % { \r\n   $o = [pscustomobject]@{'a'=$_};\r\n   Add-Member -InputObject $o -Type ScriptMethod -Name GetA -Value {$this.a} -force -PassThru }\r\n> $res.GetA()\r\n```\r\n\r\n### Actual behavior\r\n\r\n```console\r\n> $res.GetA()\r\nOperationStopped: Object reference not set to an instance of an object.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nException             :\r\n    Type       : System.NullReferenceException\r\n    TargetSite :\r\n        Name          : MethodInvokerWorker\r\n        DeclaringType : System.Management.Automation.EnumerableOps, System.Management.Automation, Version=7.2.2.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message    : Object reference not set to an instance of an object.\r\n    Data       : System.Collections.ListDictionaryInternal\r\n    Source     : System.Management.Automation\r\n    HResult    : -2147467261\r\n    StackTrace :\r\n   at System.Management.Automation.EnumerableOps.MethodInvokerWorker(CallSite invokeMemberSite, IEnumerator enumerator, Object[] args, ExecutionContext context, List`1 result, Boolean& foundMethod)\r\n   at System.Management.Automation.EnumerableOps.MethodInvoker(PSInvokeMemberBinder binder, Type delegateType, IEnumerator enumerator, Object[] args, Type typeForMessage)\r\n   at CallSite.Target(Closure , CallSite , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : OperationStopped: (:) [], NullReferenceException\r\nFullyQualifiedErrorId : System.NullReferenceException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : $res.GetA()\r\n    PositionMessage  : At line:1 char:1\r\n                       + $res.GetA()\r\n                       + ~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-05-19T06:51:00Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ooh, that's a fun one. \r\n\r\nI'm not sure there's going to be able to be a solution to this.\r\n\r\nPowerShell scriptblocks are bound to the runspace they're created in by design, so yeah attaching a script method to an object and trying to use that in another runspace is going to cause some issues.\r\n\r\nMight be something for the documentation of `ForEach-Object` to mention, there's a fair few pitfalls you can hit with `-Parallel` \ud83d\ude14 ",
      "created_at": "2022-03-29T12:51:00Z",
      "updated_at": "2022-03-29T12:51:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I agree it's unlikely to be fixable. A better error message would be ideal though. A NRE should probably never be surfaced to user code. If I had to guess, it's due to the bound runspace no longer existing.\r\n\r\n`Get-Error` results for `$res[0].GetA()` gives a better stack trace:\r\n\r\n```python\r\nException             :\r\n    Type       : System.NullReferenceException\r\n    TargetSite :\r\n        Name          : InvokeWithPipe\r\n        DeclaringType : scriptblock\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message    : Object reference not set to an instance of an object.\r\n    Data       : System.Collections.ListDictionaryInternal\r\n    Source     : System.Management.Automation\r\n    HResult    : -2147467261\r\n    StackTrace :\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior, Object\r\ndollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Boolean propagateAllExceptionsToTop, List`1\r\nvariablesToDefine, Dictionary`2 functionsToDefine, Object[] args)\r\n   at System.Management.Automation.ScriptBlock.DoInvokeReturnAsIs(Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior,\r\nObject dollarUnder, Object input, Object scriptThis, Object[] args)\r\n   at System.Management.Automation.PSScriptMethod.InvokeScript(String methodName, ScriptBlock script, Object this, Object[] arguments)\r\n   at System.Management.Automation.PSScriptMethod.Invoke(Object[] arguments)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : OperationStopped: (:) [], NullReferenceException\r\nFullyQualifiedErrorId : System.NullReferenceException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : $res[0].GetA()\r\n    PositionMessage  : At line:1 char:1\r\n                       + $res[0].GetA()\r\n                       + ~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```",
      "created_at": "2022-03-29T13:54:09Z",
      "updated_at": "2022-03-29T13:55:02Z"
    },
    {
      "author": "MiguelBarro",
      "author_association": "NONE",
      "body": "I understand the runspace issue on the scriptblocks.\r\nThough, sometimes a workaround is as good as a fix \ud83d\ude05. What about recreating the Scriptblocks in the new runspace when `ForEach-Object` pushes the objects back to the pipeline?\r\nAn *ugly as hell* example:\r\n```pwsh\r\n> $res = 1..3 | % -Parallel { $o = [pscustomobject]@{'a'=$_}; `\r\n                      Add-Member -InputObject $o -Type ScriptMethod -Name GetA -Value {$this.a} -force -PassThru} `\r\n            | % { # postprocessing to fix scriptblocks by creating a copy into this runspace\r\n            foreach ( $name in ($_ | Get-Member -MemberType ScriptMethod).name)\r\n            {\r\n                 Add-Member -InputObject $_ -MemberType ScriptMethod -Name $name `\r\n                            -Value ([ScriptBlock]::Create($_.$name.Script)) -Force -PassThru \r\n            }}\r\n> $res.GetA()\r\n1\r\n3\r\n2\r\n```\r\nNote that `ScriptMethods` and `ScriptProperties` often only reference `$this` contents.",
      "created_at": "2022-03-30T07:17:47Z",
      "updated_at": "2022-03-30T07:17:47Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": ".net has parrallel array named ConcurrentBag. I'm guessing that you want an object's property to be a concurrent array.\r\nI remember that the manual suggested:\r\nThread-safe objects, such as thread-safe queues, thread-safe stacks, thread-safe hash tables, should only be used in foreach-object -Parallel.\r\n",
      "created_at": "2022-03-30T16:40:44Z",
      "updated_at": "2022-03-30T17:11:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin is there something we can do here to give the user a better error message, perhaps?",
      "created_at": "2022-03-31T22:14:03Z",
      "updated_at": "2022-03-31T22:14:27Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We already search the Ast for some known thread safety issues in the scriptlbock, but missed this case.  I agree that this should be included.  ",
      "created_at": "2022-03-31T22:42:53Z",
      "updated_at": "2022-03-31T22:42:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine:\r\n\r\nWe don't think it's likely this could easily work as might be expected, but we think it's reasonable that we could provide a more informative error message to users when this is attempted. Exposing a NullReferenceException in this case is a bug, and we should have a null check here so that we can give a better error message.\r\n\r\nThe underlying issue appears to be that the ScriptMethods are attached to a secondary runspace created by ForEach-Object -Parallel, and then called after the secondary runspaces are disposed, creating the scenario where the runspace the scriptblock is bound to has been destroyed.\r\n\r\n/cc @sdwheeler it would probably be a good idea to mention in the documentation for `-Parallel` and also the documentation for `Add-Member` that objects with attached script methods cannot be safely passed between runspaces.",
      "created_at": "2022-03-31T23:35:22Z",
      "updated_at": "2022-03-31T23:35:22Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @PaulHigin Could someone file a [docs issue](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/new/choose) and include the pertinent details?",
      "created_at": "2022-04-01T13:32:44Z",
      "updated_at": "2022-04-01T13:32:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Doc issue: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/8713",
      "created_at": "2022-04-01T20:50:19Z",
      "updated_at": "2022-04-01T20:50:19Z"
    }
  ],
  "created_at": "2022-03-29T08:44:13Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Issue-Discussion",
    "WG-Cmdlets-Core",
    "Documentation Needed"
  ],
  "number": 17077,
  "state": "closed",
  "title": "ForEach-Object -Parallel breaks pipeline objects ScriptMethods",
  "updated_at": "2022-05-19T06:51:00Z"
}