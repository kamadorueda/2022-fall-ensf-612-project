{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16658",
  "author": "kilasuit",
  "body": "### Summary of the new feature / enhancement\n\nAdd Alias to the `URI` parameter on Invoke-WebRequest & Invoke-RestMethod\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-09-08T09:01:22Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How do you decode URI and URL acronyms?\r\n\r\nIs it more correct use URL instead of URI?\r\nhttps://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn\r\n\r\nI don't think so.",
      "created_at": "2021-12-21T03:38:59Z",
      "updated_at": "2021-12-27T04:31:06Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> I mean perhaps it is more correct use URL and have URI as alias?\r\n\r\nPerhpas it may have been, but as we have had this for 12 years now (since 2009) I would say that changing the parameter name has potential to be a breaking change whereas adding an alias should have next to little impact",
      "created_at": "2021-12-21T05:01:23Z",
      "updated_at": "2021-12-21T05:01:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could swap name and alias without a breaking change.",
      "created_at": "2021-12-21T05:18:43Z",
      "updated_at": "2021-12-27T04:31:24Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I don't see the benefit in doing so which is why I've intentionally only looked to add an alias as this is the smallest amount of change needed possible to make the UX better in this instance",
      "created_at": "2021-12-21T05:27:49Z",
      "updated_at": "2021-12-21T05:27:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In this case, I don't see the point of changing anything at all, since as you said it has been like this for many years.\r\n(Although it would make sense to use the correct term URL for the parameter name.)\r\n\r\nAlso URL is a URI - so everything is correct.",
      "created_at": "2021-12-21T05:32:28Z",
      "updated_at": "2021-12-22T05:51:24Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This to me enough reason for adding it to improve interactive UX - https://twitter.com/darrel_miller/status/1473076816445382658?s=20\n\n<blockquote><img src=\"https://pbs.twimg.com/profile_images/514918509743058944/b_PCXdXv_400x400.jpeg\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/darrel_miller/status/1473076816445382658\">Darrel Miller on Twitter</a></strong></div><div>\u201c@ToddKlindt @alexandair Yes.  I discovered this because I always get it wrong.  I always instinctively type -url.\u201d</div></blockquote>",
      "created_at": "2021-12-21T05:37:42Z",
      "updated_at": "2021-12-21T05:37:44Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I'd be happy to keep the parameter as URI but have an alias as URL. At the same time, making URL the parameter and setting URI to be an alias works too. ",
      "created_at": "2021-12-21T11:59:38Z",
      "updated_at": "2021-12-21T11:59:38Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This simple example is **why**  I am not willing to change the parameter name nor have I raised PR #16659 to do so as it will break anyone that uses this way to inspect functions/cmdlets programatically & is why I mentioned \r\n> changing the parameter name has potential to be a breaking change\r\n\r\n![image](https://user-images.githubusercontent.com/6355225/146930071-82846b81-fb8d-4f72-af3b-e261fcbe4c7e.png)\r\n",
      "created_at": "2021-12-21T12:33:47Z",
      "updated_at": "2021-12-21T12:33:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I have to work with someone else's PowerShell library which use URL (If my memory from the the 1990s, is a URL doesn't have parameters it's a pointer to fixed page, and a URI _may_ have parameters and be a dynamic page. All URLs are URIs but not all URIs are URLs).  \r\nJumping back and forth between people who think it should be one and the other has left me convinced that everything that uses either should define the other one as an alias. Doubly with lower case l / upper case I looking the same, \r\n  \r\n  ",
      "created_at": "2021-12-21T17:09:18Z",
      "updated_at": "2021-12-21T17:09:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also worth noting that `InvokeWebRequestCommand` is technically inheritable externally. So changing the property (parameter) name would be a breaking change.\r\n\r\nAlias should be fine from that perspective though.\r\n\r\n(Note: not weighing in on whether it is worth doing)",
      "created_at": "2021-12-21T18:09:52Z",
      "updated_at": "2021-12-21T18:09:52Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "`Uri` is the first positional parameter, optional for its explicit name in the command. Therefore, there is no need to specify it in interactive mode. And in a script or function the parameter can be named as you like.\r\n```\r\nPS > iwr example.com\r\n```\r\n\r\n```\r\nfunction Get-WebRequest\r\n{\r\n    param (\r\n        [Parameter(Mandatory)]\r\n        [uri] $Url\r\n    )\r\n    Invoke-WebRequest -Uri $url\r\n}\r\n\r\nGet-WebRequest -Url 'https://example.com'\r\n```",
      "created_at": "2021-12-21T19:26:50Z",
      "updated_at": "2021-12-21T19:26:50Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "One thing that might make adding the alias annoying is for tab completion. Currently I can do `-Ur<tab>` and it will autocomplete for me. Granted this is an edge case but just thought I would share this would no longer work.",
      "created_at": "2021-12-27T02:31:32Z",
      "updated_at": "2021-12-27T02:31:32Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 In my build with the url alais in tab completion & Crtl+Shift still works as I would expect them to.",
      "created_at": "2021-12-27T15:30:27Z",
      "updated_at": "2021-12-27T15:30:27Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It does for whatever my tab completion setting is. In this case I type in `-Ur` press tab and nothing is completed. I either have to use 2 tabs to get a list of options or press ctrl+space to get all options.\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/147515211-80aefd00-3a1d-4d42-947f-bd9edd6a461b.png)\r\n\r\nI know there are other tab completions that act differently, i.e. cycles through the options but I just wanted to make sure that this would affect at least mine.",
      "created_at": "2021-12-28T00:22:54Z",
      "updated_at": "2021-12-28T00:22:54Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jborean93 In my build with the url alais in tab completion & Crtl+Shift still works as I would expect them to.\r\n\r\nif psreadline  has the EditMode option set to  Windows or vi it will cycle through options so ur <tab>  will go to uri then <tab> again will go to URL\r\n \r\nIf editmode is set to Emacs and there is more than one match for what you have typed you get nothing on the first tab press, than a list of matches on the second press but they don't complete. Since I expect the first I can't understand how anyone thinks this makes sense, and I'm sure anyone who expects this things people who expect the first one are equally bonkers. \r\n\r\n\r\n",
      "created_at": "2021-12-28T16:45:35Z",
      "updated_at": "2021-12-28T16:45:35Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Totally understand it\u2019s configurable, everyone has their own preferences :) just wanted to share the potential downside of this type of change.",
      "created_at": "2021-12-28T21:28:36Z",
      "updated_at": "2021-12-28T21:28:36Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "> Since I expect the first I can't understand how anyone thinks this makes sense, and I'm sure anyone who expects this things people who expect the first one are equally bonkers.\r\n\r\nFrom my experience, completing to the nearest unambiguous match and showing the available options if needed is the default terminal experience on every non-Windows device. So I would expect most Linux and networking guys to use this kind of tab completion over the cycle style.  \r\nI like it because it lets me tab complete as I'm typing and the PowerShell command naming scheme makes it great. For example: `Get-NetF<Tab>` completes to `Get-NetFirewall` and shows me my options then I can add an R and tab complete to Get-NetFirewallRule. With cycle I would have to press tab 7 times from `Get-NetF` or practically typed in the full command before hitting tab.  \r\nIt's also great for parameters where you can get a static list of all the parameters like this: \r\n![image](https://user-images.githubusercontent.com/42123497/148311640-d93f5f9f-96bf-4582-b152-2eb9aef7b961.png)\r\nThis is a custom key handler I made but it takes inspiration from the 1.2 version of PSReadline.",
      "created_at": "2022-01-06T01:14:19Z",
      "updated_at": "2022-01-06T01:14:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > Since I expect the first I can't understand how anyone thinks this makes sense, and I'm sure anyone who expects this things people who expect the first one are equally bonkers.\r\n> \r\n> From my experience, completing to the nearest unambiguous match and showing the available options if needed is the default terminal experience on every non-Windows device. \r\n\r\nIn a bit of serendipity @doctordns  is on this thread. I've known him since at least 1994 when he taught one of Microsoft's first classes on \"Chicago\" which was named that week as \"Windows 95\". NT at that point still had the Windows 3.1 interface and everyone in the class railed against the \"Start\" menu which was appearing for the first time. More than a quarter of a century Thomas's comment that \"The new one is more intuitive, but your intuition has been bent by years of experience\" has stayed with me. \r\n\r\nI'm not disputing that Unix shells of the 1970s set a pattern of behaviour, which later Unix/Linux shells have retained. That doesn't mean there is no possibility of improvement. \r\n\r\nWhen your example has  `interfaceIndex` and `interfaceAlias`  as well as `InformationAction` and `InformationVariable` making the user type `informationA`  or `interfacei` before completing requires them to do more work than cycling through the options with tab (or selecting from a list called up with ctrl+space).  If the jobs of tab completion are to reduce typing and help the user discover commands and parameters, then way which Windows PowerShell introduced does those jobs better.   As someone who has embraced this way, _of course_ I think it is the best way invented to date. But the idea behind psreadline was to extend what PowerShell could do, including supporting people who don't want things to work that way - those _whose intuition has been bent by years of experience_.  My hunch is whichever options one sets for the shell, one looks at users of the opposite option with incomprehension. \r\n\r\nAll that said. What @jborean93  points out is valid and important.  \r\n\r\n1. If an unambiguous shortening of a parameter name is typed, it may be preferable to expand it to the full name by pressing tab\r\n2.  If  anything was unambiguous making it ambiguous can be problematic. In this case it changes the behaviour for a set of users in a way which certainly would feel like a breaking change to them.  A fix of \"Just use `-UR`  (don't expand the name once PowerShell can handle it)\" or \"Change your PsReadline options\" isn't desirable for them.  \r\n3. If the cmdlets in question had implemented the proposed alias from Day 1 there would be no complaint.  But retro-fitting it  has consequences. \r\n\r\n \r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n",
      "created_at": "2022-01-06T10:24:01Z",
      "updated_at": "2022-01-06T10:24:01Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Thanks for remembering the Chicago training. I got asked if I wanted to do the TTT sessions for this product and I said yes. Each time I did it, the Friday before I'd get a FedEx full of floppy disks and a copy of the latest course. It meant for a wild ride. The change from the WIndows 3.1 UI through NT4 and beyond meant retraining muscle memory. I am not sure if those words were mine, but there sentiment is - and as I get to grips with Win11, the words remain true.\r\n\r\nI am not sure what harm would be being done by adding a parameter alias (URL) to the URI parameter.\r\n",
      "created_at": "2022-01-08T19:56:38Z",
      "updated_at": "2022-01-08T19:56:38Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> It does for whatever my tab completion setting is. In this case I type in `-Ur` press tab and nothing is completed. I either have to use 2 tabs to get a list of options or press ctrl+space to get all options.\r\n> \r\n> ![image](https://user-images.githubusercontent.com/8462645/147515211-80aefd00-3a1d-4d42-947f-bd9edd6a461b.png)\r\n> \r\n> I know there are other tab completions that act differently, i.e. cycles through the options but I just wanted to make sure that this would affect at least mine.\r\n\r\n@jborean93 - this would be the same in functionality as you would get for `-ErrorAction` or `-ErrorPrefererence` which currently will show you both aliases and non-aliases on all cmdlets (I use this as a simple example of already existing similar functionality)\r\n\r\n![image](https://user-images.githubusercontent.com/6355225/151961681-7403f774-0edd-43d0-92e2-f006c1bf839d.png)\r\n\r\nWould you find it suitable for an additional setting (surfaced in PSReadline) that allows the configuration of showing aliases or not when tab completing on parameters? As I think that would likely cover the issue that you raise here, whilst extending the flexibility of configurabilty in PSReadline only slightly. ",
      "created_at": "2022-02-01T11:36:33Z",
      "updated_at": "2022-02-01T11:36:33Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "The Working Group has reviewed this and it creates a breaking change to the user experience. We don't see the value to the customer over the breaking change.",
      "created_at": "2022-08-31T20:12:23Z",
      "updated_at": "2022-08-31T20:12:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-09-01T21:01:25Z",
      "updated_at": "2022-09-01T21:01:25Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@theJasonHelmick I think this more falls under the Interactive UX WG under Console than the Utility Cmdlets WG. ",
      "created_at": "2022-09-06T22:08:33Z",
      "updated_at": "2022-09-06T22:08:33Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit - agreed - removed tag for Utility Cmdlet WG.",
      "created_at": "2022-09-06T22:19:40Z",
      "updated_at": "2022-09-06T22:19:40Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit - This was reviewed by the Interactive WG and closed by design. Did you mean to reopen?",
      "created_at": "2022-09-06T22:24:12Z",
      "updated_at": "2022-09-06T22:24:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-09-08T09:01:20Z",
      "updated_at": "2022-09-08T09:01:20Z"
    }
  ],
  "created_at": "2021-12-21T03:15:37Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console",
    "Resolution-By Design"
  ],
  "number": 16658,
  "state": "closed",
  "title": "Add URL alias to URI parameters on Invoke-WebRequest & Invoke-RestMethod",
  "updated_at": "2022-10-05T18:01:29Z"
}