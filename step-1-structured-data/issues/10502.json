{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10502",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$namedTuple = [Range]::new(0, 0).GetOffsetAndLength(0)\r\n$namedTuple.Offset\r\n$namedTuple.Length\r\n```\r\n\r\n# Expected behavior\r\n\r\n`Offset` is translated to `Item1` and `Length` is translated to `Item2`\r\n\r\n```none\r\n0\r\n0\r\n```\r\n\r\n# Actual behavior\r\n\r\nTuple items must be referred to by their real property names (e.g. `Item1` and `Item2`).\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Notes\r\n\r\nNamed tuples are implemented in metadata.  The method that returns the tuple is annotated with the `TupleElementNames` attribute.  In the example, the method is annotated with this attribute:\r\n\r\n```csharp\r\n[return: TupleElementNames(new string[] { \"Offset\", \"Length\" })]\r\npublic ValueTuple<int, int> GetOffsetAndLength(int length);\r\n```\r\n\r\nThe item names cannot be inferred from the value itself, but `PSInvokeMemberBinder` could attach `PSAliasProperty`'s to the tuple after invocation.\r\n\r\nCurrently this probably isn't all that important. In the version of Core included in7.0.0-preview.3, there are only two public API's in the BCL that return named tuples (the other is `Enumerable.Zip<,>(IEnumerable<>,IEnumerable<>)`).",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "I'd be concerned that sticking alias properties on every tuple would be slow. Of course this is a non-issue if tuples aren't used very much. But then if they aren't used, adding the names is unnecessary.  Now what I'd really like is for them to be indexable so I could say `$tuple[0]` instead of `$tuple.Item1`. This would allow you to pass 'arrays' through the pipeline with out having them be shredded. Something like\r\n```powershell\r\n[tuple] (1,2,3,4) | ... shredding goes here ...\r\n```",
      "created_at": "2019-09-09T22:43:32Z",
      "updated_at": "2019-09-09T22:43:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I'd be concerned that sticking alias properties on every tuple would be slow.\r\n\r\nYeah I don't really like it either.  I don't think it would be a big deal for most use cases but at scale it could be pretty nasty. As you said it's not a big deal atm, but it's worth having a conversation about since it seems inevitable that there will eventually be a popular library that uses named tuples heavily.\r\n\r\n > I'd really like is for them to be indexable so I could say `$tuple[0]` instead of `$tuple.Item1`.\r\n\r\nGood news! :) I fixed that for tuples (and other cases where an indexer is an explicit interface implementation) about a year ago with #7633.\r\n\r\n> ```powershell\r\n> [tuple] (1,2,3,4) | ... shredding goes here ...\r\n> ```\r\n\r\nNot that though.  But you can do `[tuple]::Create(1, 2, 3, 'four')` or if you want an array `[tuple]::Create.Invoke(@(1, 2, 3, 4))`.  A new conversion path that calls `Create` would be pretty cool though, good idea.\r\n\r\nI'd also love for the deconstruct syntax to work (#7471).",
      "created_at": "2019-09-10T00:19:15Z",
      "updated_at": "2019-09-10T18:37:51Z"
    }
  ],
  "created_at": "2019-09-09T15:10:50Z",
  "number": 10502,
  "state": "open",
  "title": "Named tuples from C# methods do not retain their names",
  "updated_at": "2021-01-15T14:34:44Z"
}