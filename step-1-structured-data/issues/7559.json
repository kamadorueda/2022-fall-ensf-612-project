{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7559",
  "author": "vexx32",
  "body": "At the moment, PowerShell doesn't really have any reliable and syntactically tidy methods of comparing two arrays.\r\n\r\nThere is probably a lot more that could be done in this area, but one possible addition is a subset operator. We can -contains and -in, but they only work for arrays being compared against singletons; what we need is a `-subset` operator or similar.\r\n\r\nIs `-Intersects` an appropriate verb there?\r\n\r\nThe standard operators could definitely use better collection against collection comparisons.",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That would be a great expression-mode complement to the improvements to `Compare-Object` proposed in #4316.",
      "created_at": "2018-08-17T12:20:24Z",
      "updated_at": "2018-08-17T12:20:24Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 You might want to adjust the title - to me, 'subset' means 'subset of the members of the collection' which is expressed in PowerShell as `$myarray[$start..$end]`.   I would also suggest against using`Intersect` ([System.Linq.Enumerable.Intersect](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.intersect?redirectedfrom=MSDN&view=netframework-4.7.2#System_Linq_Enumerable_Intersect__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__)) since set intersection is a different concept. The name for the LINQ comparison operator is `SequenceEquals` (since `Equals` by default means \"reference equals\"). Note: as a simple workaround for now, you can define an `Eq` method on arrays that compares them:\r\n```powershell\r\nUpdate-TypeData -MemberType ScriptMethod -MemberName Eq -TypeName System.Array -Value {\r\n    param ($x)\r\n    [System.Linq.Enumerable]::SequenceEqual([object[]] $this, [object[]] $x)\r\n}\r\n```\r\nwhich is used like:\r\n```\r\nPSCore (1:185) >  $a=1,2,3\r\nPSCore (1:186) >  $b=1,2,3\r\nPSCore (1:187) >  $a.eq($b)\r\nTrue\r\nPSCore (1:188) >  $a.eq((2,3))\r\nFalse\r\nPSCore (1:189) >\r\n```\r\nUltimately, I don't like introducing a new operator for something so basic. The current behaviour for `-eq` with two arrays is to do a reference comparison of the RHS against the members of the LHS. The _only_ time you get a positive result is if you do something like:\r\n```\r\n$a=1,2,3\r\n , $a -eq $a\r\n```\r\n(note the leading comma) which is pretty obscure. Obviously changing the behaviour of `-eq` is a breaking change. The question is is it worth it? My gut feel is that we should at least have the discussion.",
      "created_at": "2018-08-18T01:14:26Z",
      "updated_at": "2018-08-18T01:14:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You misunderstand, I think. I don't need an $array -isexactly $otherarray. It'd be interesting to have, perhaps, but that might be about it.\r\n\r\nI'm looking for:\r\n```powershell\r\n$SmallArray = 1,2\r\n$BigArray = 1,2,3,4,5\r\n\r\n> $SmallArray -issubsetof $BigArray\r\n$true\r\n```",
      "created_at": "2018-08-18T03:41:08Z",
      "updated_at": "2018-08-18T03:41:08Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Yes - I did misunderstand which is sort of the point :-) Can you please update the title to say `-IsSubset` (`Is` since it's a boolean operator) instead of `-compare`?  Thanks. Note, when we get around to implementing LINQ, most of these operations will be there (Intersect, Union, etc.) courtesy of LINQ so we won't really need this type of operator (well - _operators_ since there would need to be 3 of them: `-IsSubset`, `-cIsSubset` and `-iIsSubset`. And the syntax would be `<collection> -IsSubset <collection>[,<predicateScriptblock>`. Hmm . then there would also need to be a plain `-Subset`, `-cSubset`, `-iSubset` triple, also taking a predicate scriptblock. - so 6 operators total if we want to be consistent and complete which would bring the total operator count to ~78.) So while I like the _functionality_ (thanks for opening the issue), I'm not enamored with the idea of adding more operators to PowerShell. Would the LINQ query \"operators\" be satisfactory for your purposes?\r\n\r\nNote - there's also the alternative approach suggested by @mklement0 in issue #4316 where he proposes that set operations be added to `Compare-Object` that's worth considering.",
      "created_at": "2018-08-19T04:18:52Z",
      "updated_at": "2018-08-19T04:18:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'll update the issue title. :)\r\n\r\nI don't really know what LINQ methods would end up looking like in PS, so I can't say for sure, but if the functionality is there, that's all we need.\r\n\r\nHowever, unlike #4316, these oeprators would return a boolean value. I think it perhaps is still valuable to be able to get a bool wrangled out of two arrays in this fashion without the frankly kludgy code it currently takes to do so! (Though I *do* love the suggestions made in that issue, some of which are just simply over my head!)",
      "created_at": "2018-08-19T04:23:11Z",
      "updated_at": "2018-08-19T04:23:11Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Raw LINQ will look like\r\n```powershell\r\n$bigArray = 1..10\r\n$smallArray = 6,4,5\r\nif ($smallArray.Intersect($bigArray))\r\n{\"it's a subset\"}\r\nelse\r\n{\"It's not a subset\"}\r\n```\r\nwith a predicate, it would look like\r\n```powershell\r\n (gps sm*).Intersect((gps s*), {param ($x, $y) $x.processname -eq $y.processname})\r\n```\r\nor maybe\r\n```powershell\r\n(gps sm*).Intersect((gps s*), {$1.processname -eq $2.processname})\r\n```\r\nif we finally get around to implementing $1, $2, $3, ... for positional arguments :-)",
      "created_at": "2018-08-19T05:15:59Z",
      "updated_at": "2018-08-19T05:15:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Personally, I appreciate the ability to define one's own arguments, but either of those work fairly well!",
      "created_at": "2018-08-19T05:17:38Z",
      "updated_at": "2018-08-19T05:17:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the LINQ examples, @BrucePay.\r\n\r\nWe've talked about method vs. query LINQ syntax [before](https://github.com/PowerShell/PowerShell/issues/2226#issuecomment-385399325).\r\n\r\nDespite the proliferation, I'd love to see _all_ the  [LINQ set operations](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/set-operations) - `Distinct`, `Except`, `InterSect`, `Union` - as _operators too_ (even though these aren't available in C# _query syntax_); e.g.:\r\n\r\n```powershell\r\n$array1 -intersect $array2\r\n$array1 -union $array2\r\n$array1 -except $array2\r\n-distinct $array\r\n```\r\n\r\nI wonder if it's worth also implementing the optional equality-comparer script block as the 2nd RHS operand, or whether to leave this advanced feature to the methods only.\r\n\r\nAs such, I think of the `Compare-Object` enhancements in #4316 as the argument-mode (pipeline) _complement_ to these operators, not as an _alternative_.\r\n\r\n---\r\n\r\nAs for a _Boolean_ form a la `-issubset`:\r\n\r\nI don't have the full picture, but ideally we would enhance the existing `-contains` and `-in` operators to accept an array-valued RHS / LHS:\r\n\r\n```powershell\r\n1..4 -contains 3, 2  # -> $True - a RHS is subset of LHS\r\n3, 2 -in 1..4        # -> $True - LHS is subset of RHS\r\n```\r\n\r\nWhat happens currently is that the unsupported array operand is quietly _stringified_ as it would be inside an expandable string, as the following examples demonstrate:\r\n\r\n```powershell\r\n3, 2 -in 1, '3 2', 4       # -> $True: 3, 2 was stringified to \"3 2\"\r\n1, '3 2', 4 -contains 3, 2 # -> $True; ditto.\r\n```\r\n\r\nThis sounds like a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change to me - i.e., it is unlikely that users depend on this current behavior.\r\n\r\nThat said, I may be missing important aspects.\r\n\r\n",
      "created_at": "2018-08-19T17:13:11Z",
      "updated_at": "2018-08-19T17:13:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think implementing the script block parameter as the 2nd RHS operand is a good idea. It is already present in the `-replace` operator (although I'm not sure that's a LINQ method per se) in PS Core, and although its utility isn't always required, having it at hand without changing syntax is a good thing in my opinion.\r\n\r\n(Also, the general habit of having script blocks as parameters to methods tends to lead to messy syntax with nested parentheses and/or braces, and it just looks *off*.)\r\n\r\nIs that what's happening with `-contains` and `-in` at the moment? Woah... That explains a lot. And yes, I would *love* for this to be an expansion to the capabilities of `-contains` and `-in`; they're in that sort of place where you'd expect this kind of thing to work... but at the moment, it doesn't.",
      "created_at": "2018-08-19T17:22:52Z",
      "updated_at": "2018-08-19T17:22:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32:\r\n\r\nThe problem with the 2nd RHS operand is that it's potentially ambiguous:\r\n\r\n```powershell\r\n{ 'foo' }, { 'bar' }, { 'baz' }  -contains { 'baz' }, { 'foo' }, { <# ... #> }\r\n```\r\n\r\nHow do you determine whether the last script block passed is part of the array or whether it is the 2nd operand,  the equality-comparer?\r\n\r\nTo avoid ambiguity you'd have to _nest_ the RHS array (1st operand), which is awkward.\r\n\r\n```powershell\r\n{ 'foo' }, { 'bar' }, { 'baz' }  -contains (, { 'baz' }, { 'foo' }), { <# equality comparer #> }\r\n```\r\n",
      "created_at": "2018-08-19T17:33:58Z",
      "updated_at": "2018-08-19T17:33:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, that's true.\r\n\r\nBut in honesty, it's *difficult* in some scenarios with .NET methods to use methods that have array parameters anyway. PowerShell reads what we normally write as arrays as different method parameters in most cases; you have to really go out of your way to indicate that what you're passing is an array designed to go to one parameter.\r\n\r\nIt's awkward *either* way, in my opinion.",
      "created_at": "2018-08-19T18:23:48Z",
      "updated_at": "2018-08-19T18:23:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\nYes, calling _methods_ can be tricky business, given that you're entering a world that wasn't designed with PowerShell in mind. Generally, PowerShell is helpful in anticipating what your intent is when you call methods, but there are definite pitfalls, some of them unavoidable, because they are outside of PowerShell's control, as [this striking example](https://github.com/PowerShell/PowerShell/issues/3809#issuecomment-302804271) demonstrates.\r\n\r\nThus, PowerShell-native features are always preferable.\r\n\r\nIn this case, however, it seems to me that the only way to get a familiar and predictable PowerShell experience is by _not_ exposing the advanced equality-comparer feature - unless there is a syntax we haven't considered yet that is more PowerShell-like.\r\n\r\nEven the awkward _nested_  passing of the RHS array from my previous comment  is ultimately ambiguous.\r\n\r\nConsider that all operators that currently accept multiple RHS operands (`-replace`, `-split`, am I missing any?) treat the list of operands as an _array_ and rely on the operands themselves to be _scalars_, which avoids any ambiguity.\r\n\r\nSo, unless we can come up with an unambiguous syntax that doesn't require unfamiliar syntax for the majority uses cases (where the default equality comparer will do), I suggest we leave the advanced use case of a custom equality comparer to the realm of methods.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-08-19T21:34:12Z",
      "updated_at": "2018-08-19T21:34:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think there's a really good way to do this without altering the default array syntax, honestly, or creating a distinct difference between method parameter delimiters and array item delimiters, e.g.,\r\n\r\n```powershell\r\n[string]::Split('a', 'b', 'c' | 4 | [System.StringSplitOptions]::None)\r\n```\r\n(That would also be terrible because pipeline, but I'm not sure there're *any* good candidates for such a thing.)",
      "created_at": "2018-08-19T21:58:58Z",
      "updated_at": "2018-08-19T21:58:58Z"
    }
  ],
  "created_at": "2018-08-17T11:14:41Z",
  "number": 7559,
  "state": "open",
  "title": "Add Subset Operator ($Array -IsSubset $Array)",
  "updated_at": "2018-08-20T10:59:55Z"
}