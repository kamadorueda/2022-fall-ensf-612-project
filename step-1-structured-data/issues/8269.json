{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8269",
  "author": "mklement0",
  "body": "`Update-Help -Scope AllUsers` requires running with administrative privileges.\r\n\r\nCurrently, the command doesn't fail until _after_ content has been downloaded.\r\n\r\nInstead, an _up-front_ check should be performed, with an error message clearly stating that elevation / running with `sudo` is required.\r\n\r\nAs an aside: The error message you currently get _at the end_ only contains the reason for the problem _on Windows_, and the wording of the message is Windows-specific.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nRun the following from a NON-elevated / NON-`sudo` session:\r\n\r\n```powershell\r\nUpdate-Help -Scope AllUsers\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n~~Unless run from an elevated console / session started with `sudo`, an error should occur right away, stating the requirement.~~\r\n[See @DHowett-MSFT's feedback below] An attempt should be made up front to write to the target directory (irrespective of whether the current process is elevated / running with `sudo`), and, if that fails, an error should be reported right away, recommending running as admin.\r\n\r\nAlternatively, we could consider attempting self-elevation on demand.\r\n\r\nActual behavior\r\n---------------\r\n\r\nA  lengthy download process operation is performed, only to fail at the _end_ due to lack of privileges.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core 6.2.0-preview.1 on macOS 10.14.1\r\nPowerShell Core 6.2.0-preview.1 on Ubuntu 16.04.5 LTS\r\nPowerShell Core 6.2.0-preview.1 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\nWindows PowerShell v5.1.17134.228 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently we have internally `IsElevated()`which do the check only on Windows.\r\nPerhaps we could add geteuid() in psl-native https://stackoverflow.com/questions/4159910/check-if-user-is-root-in-c\r\nRelated #7343",
      "created_at": "2018-11-15T11:05:54Z",
      "updated_at": "2018-11-15T11:08:15Z"
    },
    {
      "author": "DHowett-MSFT",
      "author_association": "NONE",
      "body": "This is definitely a problem that's worth fixing, but I **don't** believe the correct solution is to \"check who's calling\". There is a number of valid scenarios that would allow a mere mortal, uid > 0, to `Update-Help -Scope AllUsers`:\r\n\r\n- The user is in a group (say `powershell-admins`) that is allowed write access to the powershell directory\r\n- The user has been granted explicit write access to the help folder\r\n- The user has installed powershell in their home folder, to which they always have \"AllUsers\" level access.\r\n\r\nThe only correct way to check whether a user is allowed to write somewhere is to [try to write there](https://github.com/PowerShell/PowerShell/issues/2286#issuecomment-248072242).",
      "created_at": "2018-11-15T19:08:31Z",
      "updated_at": "2018-11-15T19:08:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @DHowett-MSFT, though the error message if write access is denied should still contain the please-run-as-admin recommendation.",
      "created_at": "2018-11-15T19:13:06Z",
      "updated_at": "2018-11-15T19:13:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> please-run-as-admin recommendation\r\n\r\nAs system administrator I can disable access specially for admins and allow for regular users \ud83d\ude04 \r\n\r\nI suggest \"Please make sure that you have a write access to the path: ...\"",
      "created_at": "2018-11-16T04:02:59Z",
      "updated_at": "2018-11-16T04:02:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: That will be less helpful in the _typical_ scenario, where the answer is: run as admin. We can combine the two, however: \"please run as administrator or ensure that you have write access to /path/to/...\"",
      "created_at": "2018-11-16T04:20:58Z",
      "updated_at": "2018-11-16T04:20:58Z"
    }
  ],
  "created_at": "2018-11-14T19:26:21Z",
  "labels": [
    "WG-Interactive-HelpSystem",
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 8269,
  "state": "open",
  "title": "Update-Help -Scope AllUsers should check for administrative privileges up front and provide a meaningful error message",
  "updated_at": "2018-11-16T04:20:58Z"
}