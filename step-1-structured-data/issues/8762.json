{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8762",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nfunction :\" any name$(hello$a)\" {} # successful\r\nfunction :\" any name$(hello$a\" {} # unsuccessful\r\n\r\n```\r\n\r\nI would not have expected that placing a $( inside a function name, inside quotes (which do not become part of the function name) would ~not~ require the closing ')'.\r\n\r\nI suspect this is a larger problem in the tokenizer which is not separating out that it is just processing a function name and really thinks its working an expandable string.  I've witnessed and found the bug report regarding 'missing closing parenthesis in expandable strings even when in comments` (was a while back).\r\n\r\nAny chance this would be changed in the future?  I have been experimenting with the VS Code's PowerShell Syntax to handle the complex function names PowerShell permits.  This would seem to be a non-breaking change if it only affected tokenizing during function names.\r\n\r\nOr is there some unseen feature going on here?\r\n\r\n\r\n# Environment data\r\n\r\nBehavior is the same on 6.2.0pr3, 6.1.2, and before.",
  "closed_at": null,
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I think I have problem in understanding this part:\r\n\r\n> I would not have expected that placing a $( inside a function name, inside quotes (which do not become part of the function name) would not require the closing ')'.\r\n\r\nThis means:\r\n\r\n> You expect putting '$(' inside a function name inside (double) quotes would require the closing ')'.\r\n\r\nThen what you're seeing is just expected by you.\r\n\r\nI wouldn't expect people naming functions with\r\n\r\n```powershell\r\nfunction :\" any name$(hello$a)\" {} # successful\r\nfunction :\" any name$(hello$a\" {} # unsuccessful\r\n```\r\n\r\nBut the first statement creates a function with name `: any name$(hello$a)` (literal), and can be invoked with `& ': any name$(hello$a)'`. The second statement doesn't go through now, but if we compare it to the previous example, that should create a function named `: any name$(hello$a` (literal).\r\n\r\nAlternatively, you could create the latter function in imagination by\r\n\r\n```powershell\r\nfunction :' any name$(hello$a' { 1 | out-host }\r\n# or, equivalently\r\nfunction :\" any name`$(hello`$a\" { 1 | out-host }\r\n\r\n& ': any name$(hello$a' # prints 1\r\n```\r\n\r\nThat said, this is not to dismiss this issue. As seen in your first example, that string is **not** expandable. But those names are really weird! And interestingly, you must **begin** your function name without quotes.",
      "created_at": "2019-01-28T09:10:18Z",
      "updated_at": "2019-01-28T09:10:18Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "sorry, @GeeLaw , I double negative'd that one...  :)\r\n\r\nCorrect, so far I cannot start a function name with a quoted text, as in to start it with a space, but if you use a scope modifier (ie `function local:\" hello\" {}`), your effective function name starts with a space, which you can access via `&` and a quoted string.  It is possible to make the first character of a function name a quote though, using a backtick.  ``` function `\"hello`\" {} ``` is function `\"hello\"`.\r\n\r\nI am just trying to make the syntax highlighter work the same way the tokenizer does, as I never know what users might throw at it.",
      "created_at": "2019-01-28T10:00:22Z",
      "updated_at": "2019-01-28T10:00:22Z"
    }
  ],
  "created_at": "2019-01-28T08:27:08Z",
  "number": 8762,
  "state": "open",
  "title": "[BUG] function name with quoted region $( causes subexpression",
  "updated_at": "2019-01-28T22:22:48Z"
}