{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7471",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$tuple = [Tuple]::Create(1, 1)\r\n$item1, $item2 = $tuple\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n`Tuple.Item1` is assigned to `$item1` and `Tuple.Item2` is assigned to `$item2`\r\n\r\nActual behavior\r\n---------------\r\n\r\n`$tuple` is assigned to `$item1`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\nWhile `Tuple` types aren't used frequently in PowerShell there are a few other default types that have `Deconstruct` methods like `DictionaryEntry` and `KeyValuePair<,>`.",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "For tuples, i definitely agree. (In fact I think we should have more support for tuples (i.e. being able to cast an array to a tuple) being able to \"index\" on a tuple so $mytuple[0] is equivalent to $mytuble.Item2, etc.).",
      "created_at": "2018-08-07T14:20:31Z",
      "updated_at": "2018-08-07T14:20:31Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Would love to be able to do stuff like this.\r\n\r\n```powershell\r\n$domain, $username = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name -split \"\\\"\r\n```\r\ninstead of this\r\n```powershell\r\n$arr = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name -split \"\\\"\r\n$domain = $arr[0]\r\n$username = $arr[1]\r\n```",
      "created_at": "2018-08-08T15:36:34Z",
      "updated_at": "2018-08-09T10:17:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@thezim Your sample already works. (on Windows with -split \"\\\\\")",
      "created_at": "2018-08-09T03:34:45Z",
      "updated_at": "2018-08-09T03:34:55Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "It would be neat to have language syntax for tuples.",
      "created_at": "2018-08-10T17:04:47Z",
      "updated_at": "2018-08-10T17:04:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The title is misleading as this already works with arrays:\r\n`$one, $two = 1,2` works as expected.\r\n\r\nIt doesn't work with tuples, though, and I agree that should be rectified.",
      "created_at": "2018-08-13T18:03:45Z",
      "updated_at": "2018-08-13T18:03:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Sorry for the confusion in terminology, when I refer to an array literal assignment I mean an `AssignmentStatementAst` where the left hand side is an `ArrayLiteralAst`.",
      "created_at": "2018-08-13T23:59:19Z",
      "updated_at": "2018-08-13T23:59:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please update the issue header.",
      "created_at": "2018-08-14T06:00:06Z",
      "updated_at": "2018-08-14T06:00:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Thanks @iSazonov, title has been updated.\r\n\r\nAlso I should fully clarify what I mean by `Deconstruct`.\r\n\r\nC# 7 added support for assigning each item of a tuple to a different variable in a single assignment.\r\n\r\n```csharp\r\nTuple<int, string> tuple = Tuple.Create(1, \"test\");\r\nvar (first, second) = tuple;\r\n```\r\n\r\nThe way this works is by looking for an instance or extension method named `Deconstruct` that has `out` parameters for each item.  For tuple, this works because of the extension methods in `System.TupleExtensions`.  The `Deconstruct` extension method that would be used in the above example has this signature:\r\n\r\n```csharp\r\npublic static void Deconstruct<int, string>(this Tuple<int, string> value, out int item1, out string item2);\r\n```\r\n\r\n[More information](https://docs.microsoft.com/en-us/dotnet/csharp/deconstruct)",
      "created_at": "2018-08-14T13:20:10Z",
      "updated_at": "2018-08-14T13:20:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "An extension method? Hmm. Well, as long as it's being called from the core parsing logic side of things that should be OK since you're still in a C# realm.\r\n\r\nExtension methods aren't available from PS itself at present, but this should still work, I think",
      "created_at": "2018-08-14T14:00:47Z",
      "updated_at": "2018-08-14T14:00:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have an issue about extension methods.",
      "created_at": "2018-08-15T04:31:16Z",
      "updated_at": "2018-08-15T04:31:16Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I don't know...\r\n\r\nI think any feature that needs extension method support should be stuck waiting for extension method support -- like the rest of us. I don't like the idea that we might support this **one** extension method just because we wish to call it automatically \ud83d\ude1b",
      "created_at": "2020-06-13T05:12:49Z",
      "updated_at": "2020-06-13T05:12:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul the feature request itself doesn't actually require extension method resolution, though it would make it a lot more consistent.  That said, can you elaborate a bit more on the objection?  If a system for resolving extension methods internally within the engine was added for this feature, it would partially add support with less risk. That'd make a full implementation potentially a lot easier down the road.",
      "created_at": "2020-06-22T18:14:24Z",
      "updated_at": "2020-06-22T18:14:24Z"
    }
  ],
  "created_at": "2018-08-07T14:12:10Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 7471,
  "state": "open",
  "title": "Assigning to an array literal of variables (LHS) should support Deconstruct methods",
  "updated_at": "2020-06-22T18:14:24Z"
}