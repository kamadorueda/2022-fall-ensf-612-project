{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11175",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nWith the present state of things, we can use null-conditional syntax to retrieve properties or call methods if the object we're pulling from is not null.\r\n\r\nWe can also do a null-conditional method invocation with something like this:\r\n\r\n```powershell\r\n$var.CallMe?.Invoke($args)\r\n```\r\n\r\nThis allows us to call a method if and only if the method is actually present on the object. I think we can do a little better here and just enable a less awkward syntax:\r\n\r\n```powershell\r\n$var.CallMe?($args)\r\n```\r\n\r\n/cc @adityapatwardhan \r\n\r\nWould love to hear everyone's thoughts on this. \ud83d\ude42 ",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I like this syntax.  \r\n\r\nI _think_ in  `$var.CallMe?`  the ? would **not** be seen as valid character in the member name so ?() can be used as \"null-conditional Arguments\" \r\nThis sidesteps the problem that ?. has with variable names. because `$var?`  **is** a valid name the conventional way to do the call is `${var}?.CallMe('any','any','time')` which is a bit clunky. \r\nNot understanding the reasons \"?.\" was selected over, say `\".?\"` I don't feel able to criticize that. But this is cleaner. \r\n\r\n\r\n\r\n",
      "created_at": "2019-11-23T14:00:59Z",
      "updated_at": "2019-11-23T14:00:59Z"
    }
  ],
  "created_at": "2019-11-23T03:15:53Z",
  "number": 11175,
  "state": "open",
  "title": "Expand Null-Conditional Syntax to Method Calls",
  "updated_at": "2019-11-24T12:23:03Z"
}