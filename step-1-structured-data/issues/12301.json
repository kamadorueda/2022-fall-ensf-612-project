{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12301",
  "author": "TylerLeonhardt",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nfixes https://github.com/PowerShell/PowerShell/issues/12297\r\n\r\nThis adds copying `CmdletInfo` to the `Command` class's `Clone()`. I also added a few tests for the `PSCommand` type (more should be added for coverage as it seems that this type is not tested at all it seems...) which includes a test that covers the code change.\r\n\r\n## PR Context\r\n\r\nPowerShell Editor Services uses the `PSCommand` type _everywhere_. For whatever reason, there's an `PowerShell.AddCommand(CmdletInfo cmdletInfo)` but not a `PSCommand.AddCommand(CmdletInfo cmdletInfo)`. To work around this, we have an extension method that does:\r\n\r\n`PowerShell.AddCommand(new Command(cmdletInfo))`... however, this exposed another bug as we take the `PSCommand` type and set it directly on the `PowerShell` instance:\r\n\r\n```\r\npowerShell.Commands = psCommand\r\n```\r\n\r\nThis would trigger cmdlet discovery for commands regardless of if they had a `CmdletInfo` associated with it because deep down, the `CmdletInfo` property on the underlying `Command` object would not get cloned...\r\n\r\nThis PR makes sure it also gets cloned. Take a look at the very last test added which fails before this change, but passes after it.\r\n\r\nPSES could take advantage of this if it was backported to PS 7.0. In the meantime, we have to [copy commands manually](https://github.com/PowerShell/PowerShellEditorServices/pull/1258/files#diff-39fdedf9e00646e4c04b7deaa1225bb6R744-R751)... (naturally this is what we will have to do for Windows PowerShell... but for PS7 we can use this.\r\n\r\ncc @SeeminglyScience \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-05-11T20:17:44Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Will we fix #12295 here too?",
      "created_at": "2020-04-16T04:05:34Z",
      "updated_at": "2020-04-16T04:05:34Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I can, but I wasn't sure if that change was worthy of making servicing.\n\nBut I did think this one was worthy.",
      "created_at": "2020-04-16T05:09:41Z",
      "updated_at": "2020-04-16T05:09:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I want to directly ask if this introduces the possibility of cloning a command, running on a different thread and then corrupting command info state somehow due to thread safety issues\r\n\r\nThe answer is: yes, it could cause thread safe issue when using `FunctionInfo`, `FilterInfo`, `ScriptInfo` and maybe `ExternalScriptInfo` in a different Runspace because the ScriptBlock associated with those `CommandInfo` object has Runspace affiliation to the Runspace they come from. The Runspace affiliation will cause the execution of them be marshaled back to the original Runspace, which could potentially cause deadlock or corruption of the original Runspace. We have an issue on this ( #4003) that was observed by using a PowerShell class instance in a different Runspace.\r\n\r\nHowever, the public API `PowerShell.AddCommand(CommandInfo commandInfo)` already make it possible to add a `CommandInfo` object from Runspace A to the PowerShell instance that will be invoked on Runspace B. From that perspective, making this change doesn't expose a new issue, but just make the existing issue easier to be hit by users \ud83d\ude05\r\n\r\nGiven that, I'm fine making this change, but hesitating if this change should be serviced (will leave that decision to @SteveL-MSFT)",
      "created_at": "2020-04-16T21:49:40Z",
      "updated_at": "2020-04-16T21:49:40Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Just to clarify, I'm totally fine also adding a `Clone()` to `CommandInfo` so that `Command.Clone()` also clones the `CommandInfo` if you think this will alleviate the issue a bit.\r\n\r\nMost `*Info` classes already have a \"clone constructor\".",
      "created_at": "2020-04-16T21:58:08Z",
      "updated_at": "2020-04-16T21:58:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> adding a Clone() to CommandInfo so that Command.Clone()\r\n\r\nThat won't solve the problem. You will have to create a script block because `FunctionInfo` has a ScriptBlock property. There is no way to guarantee that script block is created in the target Runspace where the cloned `FunctionInfo` is going to be invoked.\r\nThe thread safe issue needs to be solved in the engine, it's essentially a bug in the event processing code.",
      "created_at": "2020-04-16T22:02:18Z",
      "updated_at": "2020-04-16T22:03:55Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "if this doesn't go back to servicing I'll maybe try to add #12295 to it. It'd be a shame to have the silly workaround in PSES for PS7 though... ",
      "created_at": "2020-04-16T22:06:40Z",
      "updated_at": "2020-04-16T22:06:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> However, the public API PowerShell.AddCommand(CommandInfo commandInfo) already make it possible to add a CommandInfo object from Runspace A to the PowerShell instance that will be invoked on Runspace B. From that perspective, making this change doesn't expose a new issue, but just make the existing issue easier to be hit by users \ud83d\ude05\r\n\r\nRight, that's what I was thinking and just wanted to check that my understanding was ok. In that case, I'm happy.",
      "created_at": "2020-04-16T22:34:00Z",
      "updated_at": "2020-04-16T22:34:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The thread safe issue needs to be solved in the engine, it's essentially a bug in the event processing code.\r\n\r\nDo you mean that API proposed in the PR will fixed too?\r\nIf no I'd add Obsolete() warning to prevent users from erroneous use.",
      "created_at": "2020-04-17T03:22:03Z",
      "updated_at": "2020-04-17T03:24:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I'll maybe try to add #12295 to it\r\n\r\n@TylerLeonhardt Please don't. This PR has been reviewed and let's keep the scope as is. You can submit a new PR for that work.",
      "created_at": "2020-04-20T18:48:39Z",
      "updated_at": "2020-04-20T18:48:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov The issue can be exposed in other ways beyond those APIs.",
      "created_at": "2020-04-20T18:51:40Z",
      "updated_at": "2020-04-20T18:51:40Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry macos",
      "created_at": "2020-05-11T18:51:27Z",
      "updated_at": "2020-05-11T18:51:27Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2020-05-11T18:51:48Z",
      "updated_at": "2020-05-11T18:51:48Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.3)\n",
      "created_at": "2020-05-19T18:09:54Z",
      "updated_at": "2020-05-19T18:09:54Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov Please don't mark something for backport without discussing using the teams channel.",
      "created_at": "2020-06-04T21:44:41Z",
      "updated_at": "2020-06-04T21:44:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 I expect that \"Consider\" in \"7.0.x-Servicing-Consider\" says that the label is for the discussion. And \"approved\" in label is for already discussed commits. Yes?",
      "created_at": "2020-06-05T03:05:33Z",
      "updated_at": "2020-06-05T03:05:33Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov But, you have been marking issue that clearly don't need to be back ported and often we don't have much time to triage once a release has been declared.  I though using the teams channel would be a good way to discuss the bar.\r\n\r\nOn this one, it's for PSES and they don't need it back ported.",
      "created_at": "2020-06-05T20:58:31Z",
      "updated_at": "2020-06-05T20:58:31Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I'm saying no to the backport because @daxian-dbw showed concern [here](https://github.com/PowerShell/PowerShell/pull/12301#issuecomment-614914839)",
      "created_at": "2020-06-05T22:02:22Z",
      "updated_at": "2020-06-05T22:02:22Z"
    }
  ],
  "created_at": "2020-04-11T19:23:20Z",
  "number": 12301,
  "state": "closed",
  "title": "Add CmdletInfo to Command Clone()",
  "updated_at": "2020-06-05T22:02:22Z"
}