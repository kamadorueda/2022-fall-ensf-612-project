{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14743",
  "author": "agaace",
  "body": "Justification:\r\nOne might want to have a robust API that will let users operate on say, a set of instances, where they can:\r\n- Set a number of instances to a given fixed total value of instances (verb: set), for example: `Set-Instances 50`\r\n- Add/remove a specific number of instances (verbs: add/remove), for example: `Add-Instances 5`\r\n- Figure out an appropriate number of instances to add automatically or increase/decrease by some known factor, for example: `Increase-Instances`\r\n\r\nI'm aware that you could, in theory overload the `Add` verb and implement `Increase` as a parameterless `Add` command (`Add-Instances` would act just as `Increase-Instances`, but would do something completely different from `Add-Instances 5`).\r\n\r\nThe problem with that is:\r\n- I am forced to write overly complex functions that do multiple things all at once, rather than splitting them to smaller functions that do just one thing well => this goes against the principle of single responsibility in programming, as well as is error prone - more complex functions tend to be harder to debug.\r\n- My functionality depends on the user providing optional parameters that can be easily omitted by the user and lead to user errors. For example, if my my script spins up cloud VMs at $200/pop it would be expensive for the user to *think* they're adding just 1 instance with `Add-Instances 1`, and then forgetting that optional parameter, running `Add-Instances` instead and incurring a $2,000 cost.\r\n- I am no longer in control and can no longer choose how to divide my module into functions, this choice is made for me by an eco-system that provides a limited range of function names and artificially forces me to reuse the same name for different tasks. It forces me into building a smaller but more complex API surface area, i.e. users will use fewer commands but will be forced to use a lot more parameters, a lot of them optional, which isn't always a good thing when building an API.\r\n- The argument that only supporting `Add` verb increases discoverability doesn't apply here. In this case we can support  *both* the easily discoverable and highly predictable `Add` verb *and* the little more advanced and requiring reading some documentation first `Increase` verb.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I think you might need some better examples. \r\nGenerally  `Add-` commands add one of something, and usually specify something to make the new instance unique. Adding 10 one just does `1..10 | % {add-thing  parameters}  `\r\nThe `add-thing {give me 10 more and work out IDs}`  scenario is unusual. \r\n\r\n`Set ... n` sets the value of an existing thing to n. So you might have `Set-Pool -membercount n` and the set command figures out what has to be  done to make it so. \r\nFor making a pool bigger there is also Expand (though this is paired with compress for make smaller).  So `Expand-Pool -members 20`\r\n\r\n> * My functionality depends on the user providing optional parameters that can be easily omitted by the user and lead to user errors. For example, if my my script spins up cloud VMs at $200/pop it would be expensive for the user to _think_ they're adding just 1 instance with `Add-Instances 1`, and then forgetting that optional parameter, running `Add-Instances` instead and incurring a $2,000 cost.\r\n\r\nThis would imply that (unlike other `add` commands ) this one defaults to repeating 10 times, which sounds like a bad choice. \r\n\r\nI'm not sure about decrease as \"remove 10 from a pool of 20\" without selection criteria.  `Get-Poolmember | select -first 10 | remove-poolMember` seems dangerous. \r\n \r\n\r\n\r\n\r\n",
      "created_at": "2021-02-09T19:01:24Z",
      "updated_at": "2021-02-09T19:01:24Z"
    },
    {
      "author": "agaace",
      "author_association": "NONE",
      "body": "@jhoneill Please note this example above is super simplified, so I don't have to elaborate on the specific business needs. What seems like a \"bad choice\" for you might be a good business logic choice for me.\r\n\r\nHowever, the bottom line for me is: I don't think the choice of a scripting language should dictate what kind of business functionality I can and cannot implement with it, do you? I don't think the job of a scripting language is to evaluate my business needs and inform me that something is a \"bad idea\" from a business perspective, do you?\r\n\r\nSo with that in mind, I simply need to `Add` something, `Set `something and *also* to `Increase` something, with all of these verbs having a slightly different meaning and slightly different functionality.\r\n\r\nI can't believe I'm even having to spend this much time debating what to name my function, just so it complies with a language best practice/requirement.. 100x more time spent on coming up with a proper name than the time it took me to implement said function.. \ud83e\udd26\r\n",
      "created_at": "2021-02-10T10:51:42Z",
      "updated_at": "2021-02-10T10:58:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "FWIW I'd go with a switch on this. Two parameter sets like:\r\n\r\n```powershell\r\nAdd-Thing -Amount 10\r\nAdd-Thing -AutoScale\r\n```\r\n\r\n---\r\n\r\nAs for direct feedback about the verbs, I'm not sure `Increase` implies something different than `Add`. If a verb were to be added for \"scale up/down\" commands it should be different enough to understand that there's a difference at glance.",
      "created_at": "2021-02-10T19:52:08Z",
      "updated_at": "2021-02-10T19:52:08Z"
    }
  ],
  "created_at": "2021-02-09T09:50:25Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 14743,
  "state": "open",
  "title": "Add new approved verbs: \"Increase\" and \"Decrease\"",
  "updated_at": "2022-01-20T23:44:07Z"
}