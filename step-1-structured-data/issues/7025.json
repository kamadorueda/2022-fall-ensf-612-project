{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7025",
  "author": "kilasuit",
  "body": "The PSModulePath on PowerShell Core includes 2 similar entries as per the below screenshot that perhaps could be tidied up to only have the two required directories and whilst this issue is primarily to begin a discussion and understand pros and cons of any potential changes \r\n\r\n![image](https://user-images.githubusercontent.com/6355225/41034428-6f28d07c-6981-11e8-86ae-af194c2a477d.png)\r\n\r\nFor avoidance of confusion the directories that I am pointing to are\r\n\r\n```\r\nC:\\Program Files\\PowerShell\\Modules - All Users Location  \r\nc:\\program files\\powershell\\6-preview\\Modules - PowerShell Core version Install location\r\n\r\n```\r\n\r\nI believe that this is from historical reason as in Windows PowerShell we have the following default paths where modules are installed,\r\n\r\n```\r\n%UserProfile%\\Documents\\WindowsPowerShell\\Modules - User Location\r\n%ProgramFiles%\\WindowsPowerShell\\Modules - All Users Location\r\n%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\Modules - Bundled Modules Location\r\n```\r\nWhilst this makes sense for Windows PowerShell where the core modules that are shipped are not being updated, I don't think this makes sense going forward as there updates coming to many of the \"Core\" modules that could be decoupled like requested in #1979 allowing Windows PowerShell users to get a subset of these updates as, when and IF they are available back to Windows PowerShell or even to older versions of PowerShell Core. I know that this is very likely to be very edge case but it's something that in some cases updates to modules shipped with PowerShell Core won't be neccessarily tied to updates to the main PowerShell Core engine or underlying dotnet core functionality so you could have \r\n\r\nWhilst this would raise some complexity in working out if there is a better solution -\r\n\r\nSteps to reproduce\r\n------------------\r\nInstall PowerShell Core 6.1.0-preview.2 on a Windows OS (this reproduces on Win10/2016)\r\n\r\n```powershell\r\n$env:psmodulepath -split ';'\r\n```\r\n\r\nExpected behaviour\r\n-----------------\r\nI'd expect this shows 2 paths as this doesn't inherit from the actual env var on windows as per #6850 (something I disagree with but that's not for this issue)\r\n\r\nSo I would expect it to show \r\n\r\nUser Path \r\nMachine path - this should be C:\\PowerShell\\$version\\Modules\r\n\r\nThe reason is that whilst SxS is a *supposed* benefit of PowerShell Core - realistically most orgs will standardise on 1 version and work from that version and test on a higher version when it becomes available if it fixes an issue with their existing setup - this is how it has been for ages and the realist in me doesn't expect this to change massively any time soon.\r\n\r\n\r\nActual behaviour\r\n---------------\r\nAs explained above the 3 locations exist to be able to enable / allow the SxS functionality to enable modules that were installed via PowerShellGet to persist across PowerShell core SxS installs\r\n\r\nOne of the issues with this is due to performance reasons - which is why we have in the community been trying to stop 3rd Party installers etc adding more entries to the PSModulePath (looking at SSMS, Azure Powershell SharePointPNP etc)  \r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@kilasuit \r\n>  test on a higher version when it becomes available if it fixes an issue with their existing setup \r\n\r\nOr adds significant new functionality. And how will they do that without SxS?\r\n\r\n> this is how it has been for ages \r\n\r\nThat's because there was never been a choice. Prior to PowerShell Core, you could only have 1 version of PowerShell on the box. \r\n\r\n",
      "created_at": "2018-06-13T19:20:01Z",
      "updated_at": "2018-06-13T19:20:01Z"
    }
  ],
  "created_at": "2018-06-08T16:26:06Z",
  "number": 7025,
  "state": "open",
  "title": "[Discussion] PSModulePath for PowerShell Core has some similar entries that could potentially be simplified ",
  "updated_at": "2018-06-13T19:20:01Z"
}