{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4143",
  "author": "splatteredbits",
  "body": "You can't turn off verbose output when importing modules by setting the `-Verbose` switch's value to `$false`. \r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$VerbosePreference = 'Continue'\r\nImport-Module -Name 'PSDesiredStateConfiguration' -Verbose:$false -Force\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nI would expect there to be no verbose output when importing the module.\r\n```none\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\nI see verbose output:\r\n```none\r\nVERBOSE: Exporting function 'Configuration'.\r\nVERBOSE: Exporting function 'New-DSCCheckSum'.\r\nVERBOSE: Exporting function 'Get-DscResource'.\r\nVERBOSE: Exporting function 'ConvertTo-MOFInstance'.\r\nVERBOSE: Exporting function 'Get-MofInstanceText'.\r\nVERBOSE: Exporting function 'Get-PositionInfo'.\r\nVERBOSE: Exporting function 'Node'.\r\nVERBOSE: Exporting function 'Update-ConfigurationErrorCount'.\r\nVERBOSE: Exporting function 'Get-ConfigurationErrorCount'.\r\nVERBOSE: Exporting function 'Set-PSDefaultConfigurationDocument'.\r\nVERBOSE: Exporting function 'Get-PSDefaultConfigurationDocument'.\r\nVERBOSE: Exporting function 'Get-PSCurrentConfigurationNode'.\r\nVERBOSE: Exporting function 'Set-PSCurrentConfigurationNode'.\r\nVERBOSE: Exporting function 'Set-NodeResources'.\r\nVERBOSE: Exporting function 'Test-NodeResources'.\r\nVERBOSE: Exporting function 'Add-NodeKeys'.\r\nVERBOSE: Exporting function 'Get-InnerMostErrorRecord'.\r\nVERBOSE: Exporting function 'Initialize-ConfigurationRuntimeState'.\r\nVERBOSE: Exporting function 'ValidateUpdate-ConfigurationData'.\r\nVERBOSE: Exporting function 'Test-ModuleReloadRequired'.\r\nVERBOSE: Exporting function 'Configuration'.\r\nVERBOSE: Exporting function 'ImportCimAndScriptKeywordsFromModule'.\r\nVERBOSE: Exporting function 'Write-NodeMOFFile'.\r\nVERBOSE: Exporting function 'ValidateNodeResources'.\r\nVERBOSE: Exporting function 'ValidateNoCircleInNodeResources'.\r\nVERBOSE: Exporting function 'StrongConnect'.\r\nVERBOSE: Exporting function 'Test-MofInstanceText'.\r\nVERBOSE: Exporting function 'Get-EncryptedPassword'.\r\nVERBOSE: Exporting function 'Get-PublicKeyFromStore'.\r\nVERBOSE: Exporting function 'Get-PublicKeyFromFile'.\r\nVERBOSE: Exporting function 'New-DSCCheckSum'.\r\nVERBOSE: Exporting function 'ThrowError'.\r\nVERBOSE: Exporting function 'Write-Log'.\r\nVERBOSE: Exporting function 'WriteFile'.\r\nVERBOSE: Exporting function 'ReadEnvironmentFile'.\r\nVERBOSE: Exporting function 'Get-DscResource'.\r\nVERBOSE: Exporting function 'GetResourceFromKeyword'.\r\nVERBOSE: Exporting function 'GetCompositeResource'.\r\nVERBOSE: Exporting function 'AddDscResourceProperty'.\r\nVERBOSE: Exporting function 'AddDscResourcePropertyFromMetadata'.\r\nVERBOSE: Exporting function 'GetSyntax'.\r\nVERBOSE: Exporting function 'CheckResourceFound'.\r\nVERBOSE: Exporting function 'GetImplementingModulePath'.\r\nVERBOSE: Exporting function 'GetModule'.\r\nVERBOSE: Exporting function 'IsHiddenResource'.\r\nVERBOSE: Exporting function 'GetPatterns'.\r\nVERBOSE: Exporting function 'IsPatternMatched'.\r\nVERBOSE: Exporting alias 'sacfg'.\r\nVERBOSE: Exporting alias 'tcfg'.\r\nVERBOSE: Exporting alias 'gcfg'.\r\nVERBOSE: Exporting alias 'rtcfg'.\r\nVERBOSE: Exporting alias 'glcm'.\r\nVERBOSE: Exporting alias 'slcm'.\r\nVERBOSE: Exporting function 'Get-DscConfiguration'.\r\nVERBOSE: Exporting function 'Test-DscConfiguration'.\r\nVERBOSE: Exporting function 'Get-DscLocalConfigurationManager'.\r\nVERBOSE: Exporting function 'Restore-DscConfiguration'.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n                                                   \r\nName                           Value               \r\n----                           -----               \r\nPSVersion                      4.0                 \r\nWSManStackVersion              3.0                 \r\nSerializationVersion           1.1.0.1             \r\nCLRVersion                     4.0.30319.42000     \r\nBuildVersion                   6.3.9600.16406      \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0}\r\nPSRemotingProtocolVersion      2.2                 \r\n```\r\n",
  "closed_at": "2017-06-30T19:37:35Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like this is a problem in existing _production_ versions, but not in PowerShell Core as of v6-beta.3 (the current release here), so you should probably report this at [uservoice.com](https://windowsserver.uservoice.com/forums/301869-powershell).\r\n",
      "created_at": "2017-06-30T00:15:12Z",
      "updated_at": "2017-06-30T00:15:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, @SteveL-MSFT:\r\n\r\nCan you please clarify the exact policy for when issues should be reported _here_, as opposed to at uservoice.com?\r\n\r\nMy understanding is:\r\n\r\n* If the issue is _not_ (no longer) present in the _this repository's master branch_ (loosely speaking: in the current _Core_ release), it should be reported at uservoice.com rather than here.\r\n\r\n  * If it _is_ present here, it is hopefully _enough_ to report it _just_ here, and not _also_ at uservoice.com, correct?\r\n\r\n* In other words: issues that _only_ affect _officially released production versions_ should be reported at uservoice.com.\r\n\r\n\r\nCan you confirm this understanding?\r\n\r\nWe should update https://github.com/PowerShell/PowerShell/blob/master/.github/ISSUE_TEMPLATE.md\r\naccordingly (I'm happy to do that, once I have clarity).\r\n",
      "created_at": "2017-06-30T14:07:08Z",
      "updated_at": "2017-06-30T14:07:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Tangent alert (may be of interest to some; I'm sharing it, because it baffled me initially):\r\n\r\nThe processing of `-Verbose:$false` is somewhat unusual in this case:\r\n\r\nUnless you take extra action, passing `-SomeSwitch:$false`  and _omitting_ `-SomeSwitch` are equivalent.\r\nThe `$SomeSwitch` parameter variable will be a `[switch]`-typed variable whose `.IsPresent` property (a somewhat unfortunate choice of property name) is `$False` in _both_ cases.  \r\nFrom what I understand, that is the intent behind `-SomeSwitch:$false`, which normally only exists to facilitate _programmatic_ construction of a command line.\r\n\r\nThe only way to distinguish these two cases is to do something like `$PSBoundParameters.ContainsKey('SomeSwitch')` (or its C# equivalent in a compiled cmdlet), which is apparently what happens here (in PowerShell _Core_, where this issue's problem does _not_ happen any longer): `$PSBoundParameters.ContainsKey('SomeSwitch')` returning `$True` despite `$SomeSwitch.IsPresent` returning `$False` implies that `-SomeSwitch:$False` was passed.\r\n\r\nThus, `-Verbose:$false` functioning as a signal to _override_ the `$VerbosePreference` variable (as opposed to having _no effect_, which is what seemingly happens in the current production versions) is a semantic anomaly, but it is helpful and documented.\r\n\r\n\r\n\r\n",
      "created_at": "2017-06-30T14:17:36Z",
      "updated_at": "2017-06-30T14:17:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 This repo is specifically for PSCore6 so issues that don't repro with latest version of PSCore6 should not be reported here.  Windows PowerShell issues should be reported on UserVoice and are handled differently.  If the issue repros on both, I would say in general report on both.  However, if it's not a blocking issue, I would recommend just reporting it here with the expectation we would only fix it in PSCore6.\r\n\r\nI believe @joeyaiello is working on a blog post to clarify some of this.",
      "created_at": "2017-06-30T19:36:29Z",
      "updated_at": "2017-06-30T19:36:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: That's helpful, thanks - quick follow-up: Going forward (v6+), will _Windows PowerShell_ be built directly from _this_ repo as well?",
      "created_at": "2017-06-30T19:39:42Z",
      "updated_at": "2017-06-30T19:39:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I must add that there are PowerShell modules from other product groups. Reports on them are better sent by Windows 10 Preview Feedback tool.",
      "created_at": "2017-07-01T17:12:05Z",
      "updated_at": "2017-07-01T17:12:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Future is that PowerShell Core will replace Windows PowerShell. I believe Microsoft retains standard support lifecycle for Windows PowerShell will only develop the Core version.",
      "created_at": "2017-07-01T17:15:45Z",
      "updated_at": "2017-07-01T17:15:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 Windows PowerShell 5.1 in Win10 is not built from this repo.  This repo is effectively a fork from the closed source that is in Windows.  When there are changes that meet the servicing bar for Windows PowerShell 5.1, the workflow my team follows is to make the change in PSCore6 first, then we port it to the Windows code base.  To clarify a statement by @iSazonov, there are no plans to *replace* Windows PowerShell 5.1 with PowerShell Core 6.0 inbox.  Windows PowerShell 5.1 will be the inbox version of PowerShell on Windows for the indefinite future which we will continue to support.  Once PowerShell Core 6 gets to GA *and* we get all the Windows partner teams to ensure compatibility with their modules, then we'll decide the relationship of Windows and PSCore6 (putting stuff in Windows isn't as simple as just doing an xcopy...)",
      "created_at": "2017-07-05T16:18:24Z",
      "updated_at": "2017-07-05T16:18:24Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Guys!  I've seen many times Windows PowerShell issues been presented in GitHub.  Is there a way that in the main page this is properly explained?\r\n\r\nThis will clear any confusion about Windows PowerShell vs PowerShell Core.  Also, providing the appropriate links to Windows PowerShell Uservoice.\r\n\r\nThis will definitely help!!\r\n\r\n:)",
      "created_at": "2017-07-05T16:31:21Z",
      "updated_at": "2017-07-05T16:31:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad excellent point, I'll update the readme",
      "created_at": "2017-07-05T16:40:01Z",
      "updated_at": "2017-07-05T16:40:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Thank you for that important clarification and for planning to post it more prominently.",
      "created_at": "2017-07-05T18:57:53Z",
      "updated_at": "2017-07-05T18:57:53Z"
    }
  ],
  "created_at": "2017-06-29T19:52:21Z",
  "number": 4143,
  "state": "closed",
  "title": "Import-Module cmdlet doesn't respect -Verbose:$false switch",
  "updated_at": "2017-07-05T18:57:53Z"
}