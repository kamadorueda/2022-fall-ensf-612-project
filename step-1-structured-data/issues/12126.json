{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12126",
  "author": "JacksonKearl",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\nMacOS 10.14.6\r\n```\r\ndotnet tool install --global PowerShell\r\nln -s /Users/jkearl/.dotnet/tools/pwsh /usr/local/bin/pwsh\r\nvim /etc/shells  # add /usr/local/bin/pwsh\r\npwsh # works\r\nexit\r\nchsh -s /usr/local/bin/pwsh\r\n```\r\n\r\nopen new terminal\r\n\r\n```\r\nLast login: Sat Mar 14 00:05:26 on ttys005\r\nUnhandled exception. System.ComponentModel.Win32Exception (2): No such file or directory\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start(String fileName, String arguments)\r\n   at Microsoft.PowerShell.GlobalTool.Shim.EntryPoint.Main(String[] args)\r\n\r\n[Process completed]\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Sat Oct 12 00:02:19 PDT 2019; root:xnu-4903.278.12~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan\r\n\r\nI am not sure that pwsh from global tools is designed to being used as standalone shell and moreover as default shell.\r\nPerhaps @rjmholt could add more info.\r\n",
      "created_at": "2020-03-14T16:29:58Z",
      "updated_at": "2020-03-14T16:36:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Currently, the dotnet-tool PowerShell version can indeed not function as the default shell on macOS, because it is invoked with `-l` there, which fails:\r\n\r\n```powershell\r\nPS> ~/.dotnet/tools/pwsh -l\r\nUnknown option: -l\r\n.NET Core SDK (3.1.102)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n...\r\n```\r\n\r\nThe problem happens on reinvocation via `/bin/sh`.\r\n\r\nThe divergent behavior of the dotnet-tool PowerShell version is a recurring problem, which notably includes severely broken parsing of command-line arguments in general - see #11747\r\n\r\nI think it is certainly desirable to allow a dotnet-tool installed version to act as the default shell.",
      "created_at": "2020-03-14T18:52:55Z",
      "updated_at": "2020-03-20T15:42:31Z"
    },
    {
      "author": "JacksonKearl",
      "author_association": "NONE",
      "body": "I have explicitly disabled passing `-l` and still lget the error",
      "created_at": "2020-03-14T20:34:56Z",
      "updated_at": "2020-03-14T20:34:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@JacksonKearl, out of curiosity: how did you disable `-l`?",
      "created_at": "2020-03-14T20:48:51Z",
      "updated_at": "2020-03-14T20:48:51Z"
    },
    {
      "author": "JacksonKearl",
      "author_association": "NONE",
      "body": "I'm using hyper, and it has a setting for shell launch parameters.",
      "created_at": "2020-03-14T20:53:18Z",
      "updated_at": "2020-03-14T20:53:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In short: \r\n\r\n* The **problem** is related to **the dotnet-tool-installed version being a _framework-dependent_ application**.\r\n\r\n* As a **workaround**, tell your terminal to start PowerShell as follows:\r\n\r\n```sh\r\n/bin/sh -lc 'PATH=~/\".dotnet:$PATH\" DOTNET_ROOT=~/.dotnet ~/.dotnet/tools/pwsh'\r\n```\r\n\r\n---\r\n\r\n(I realized that creating a default login shell via Terminal.app, for instance, doesn't actually use option `-l` to request a login shell, but sets `$0` (the first argument passed to the binary) to `-<shellBinaryName>`, with the `-` prefix by convention requesting a _login_ shell - and a regularly installed PowerShell version does seem to honor that.)\r\n\r\nGiven how you invoke PowerShell, the problem is not directly related to having configured it as your _default shell_  - though that doesn't work either.\r\n\r\nWhen I try what you tried with [Hyper](https://hyper.is/) analogously with [iTerm2](https://www.iterm2.com/) - that is, launch the shell executable explicitly, without options - I get a different error message:\r\n\r\n```none\r\nA fatal error occurred. The required library libhostfxr.dll could not be found.\r\nIf this is a self-contained application, that library should exist in [~/.dotnet/tools/.store/powershell/7.0.0/powershell/7.0.0/tools/netcoreapp3.1/any/]\r\nIf this is a framework-dependent application, install the runtime in the global location [/usr/local/share/dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location or register the runtime location in [/etc/dotnet/install_location]\r\n```\r\n\r\nThis suggests that the dotnet-tool-installed version is a _framework-dependent_ application, and that it therefore needs to be told where to find the .NET Core _runtime_ (if it isn't in `/usr/local/share/dotnet` or listed in file `/etc/dotnet/install_location`).\r\n\r\nIf I do tell it where to find the runtime - e.g. by launching via `/bin/sh -c 'DOTNET_ROOT=~/.dotnet ~/.dotnet/tools/pwsh'`  - I do _on occasion_ get the error message you saw, but more typically I just see `Unhandled exception`.\r\n\r\nHowever, the error you saw can reliably be reproduced as follows:\r\n\r\n* Enter a pristine shell that doesn't have the usual `/etc/profile` environment variables as follows: `env -i /bin/sh`\r\n\r\n* From that shell, run `DOTNET_ROOT=~/.dotnet ~/.dotnet/tools/pwsh`\r\n\r\nAs it turns out, it is not only env. var `DOTNET_ROOT` that must point to `~/.dotnet`, but this directory must also be in the `PATH` variable.\r\n\r\nTherefore, the following startup command works:\r\n\r\n```sh\r\n/bin/sh -lc 'PATH+=~/.dotnet DOTNET_ROOT=~/.dotnet ~/.dotnet/tools/pwsh'\r\n```\r\n\r\nHowever, trying to use a `dotnet tool`-installed PowerShell version as the _default shell_ presents a bootstrapping problem, even if you were to add these entries to `/etc/profile`, given that `pwsh` when invoked as a login shell must be able to start _first_, before re-invoking itself via `/bin/sh -l` in order to ensure processing of `/etc/profile`.\r\n\r\n",
      "created_at": "2020-03-14T22:32:52Z",
      "updated_at": "2020-03-24T21:29:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@JacksonKearl, I've added a workaround and more findings to my previous comment.",
      "created_at": "2020-03-15T20:01:22Z",
      "updated_at": "2020-03-16T05:26:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have an report that dash is broken in the scenario. See #12058",
      "created_at": "2020-03-16T04:20:02Z",
      "updated_at": "2020-03-16T04:20:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I had to amend my previous comment again; what it comes down to: not only must `DOTNET_ROOT` be set to `~/.dotnet`, but the latter must also be listed in `PATH`.\r\n\r\nThe linked issue doesn't apply, because there is no `dash` on macOS; `/bin/sh` is, in essence, `bash` on macOS (it's a separate binary that is a custom build of `bash` with a few changes hard-coded; verify with `sh --version`).\r\n\r\nAlso, I just saw that we're actually using `/bin/zsh -l` on macOS, though I'm unclear on why.",
      "created_at": "2020-03-16T06:23:11Z",
      "updated_at": "2020-03-24T21:30:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks for in-depth investigating the issue!\r\n\r\n> The linked issue doesn't apply, because there is no dash on macOS;\r\n\r\nIt was more for @rjmholt experience who works on improvements of the login shell feature code.\r\n\r\n> presents a bootstrapping problem\r\n\r\nShould we delegate this problem to MSFT team?\r\n\r\n> As it turns out, it is not only env. var DOTNET_ROOT that must point to ~/.dotnet, but this directory must also be in the PATH variable.\r\n\r\nThe same question. Also should we fix PowerShell global tool installer to add the path in PATH variable?\r\n",
      "created_at": "2020-03-16T06:44:27Z",
      "updated_at": "2020-03-16T06:44:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think we must first decide  whether we want to officially support the `dotnet tool`-installed version as a user's default shell.\r\n\r\nI think it won't be possible if we keep it as a framework-dependent application. \r\nBut changing that may not be an option for this installation method (I know little about .NET tools).\r\n\r\nFor running it as a terminal emulator's manually configured startup shell we at least have a workaround now.\r\n\r\n> Also should we fix PowerShell global tool installer to add the path in PATH variable?\r\n\r\nI don't think that would help: macOS has no single location (anymore) for defining environment variables that GUI applications (which includes terminal emulators) all see.",
      "created_at": "2020-03-16T10:23:00Z",
      "updated_at": "2020-03-24T21:30:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is global tools installed in user profile?",
      "created_at": "2020-03-16T11:18:17Z",
      "updated_at": "2020-03-16T11:18:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "From what I can tell, global tools by default always install in `$HOME/.dotnet/tools`, across platforms, i.e., the installation is by default always in a user-specific location.\r\n\r\n",
      "created_at": "2020-03-16T14:33:13Z",
      "updated_at": "2020-03-16T14:33:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for confirmation my guess! In the case global tools installer does not change system global configs and we can not expect that the system can start the shell well out of the user session. In particular, as result pwsh cannot find a custom .Net installation.\r\nIn other words, the installer only configures _the user profile_ so that pwsh works well. And any attempt to use it from another profile (or system init) is doomed.\r\n",
      "created_at": "2020-03-16T14:41:49Z",
      "updated_at": "2020-03-16T14:47:05Z"
    },
    {
      "author": "JacksonKearl",
      "author_association": "NONE",
      "body": "@mklement0\r\n> As a workaround, tell your terminal to start PowerShell as follows:\r\n> /bin/sh -lc 'PATH=~/\".dotnet:$PATH\" DOTNET_ROOT=~/.dotnet ~/.dotnet/tools/pwsh'\r\n\r\nThis gives me error:\r\n```\r\nA fatal error occurred. The required library libhostfxr.dylib could not be found.\r\nIf this is a self-contained application, that library should exist in [/Users/jkearl/.dotnet/tools/.store/powershell/7.0.0/powershell/7.0.0/tools/netcoreapp3.1/any/].\r\nIf this is a framework-dependent application, install the runtime in the global location [/usr/local/share/dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location or register the runtime location in [/etc/dotnet/install_location].\r\n\r\nThe .NET Core runtime can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?missing_runtime=true&arch=x64&rid=osx.10.14-x64\r\n```\r\n\r\nIs there a different way to install powershell that would make using it as a default shell work better?",
      "created_at": "2020-03-24T21:04:30Z",
      "updated_at": "2020-03-24T21:04:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Is there a different way to install powershell that would make using it as a default shell work better?\r\n\r\nYes, if you use the official installer package (`*.pkg`) available for download from this repo (https://github.com/PowerShell/PowerShell#get-powershell) or, if you have Homebrew installed, with `brew cask install powershell` - see [the instructions for macOS](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-macos?view=powershell-7).\r\n\r\nThat way, PowerShell will be installed as a self-contained (not framework-dependent) application, and the problem shouldn't occur.\r\n\r\n---\r\n\r\nThat said, you _can_ make this work with the .NET global tool version, even as the default shell - I'll post a summary later.\r\n\r\nAs for the workaround for use as a terminal startup command:\r\n\r\nSorry I didn't make clearer that `~/.dotnet` in the workaround was a placeholder for whatever the .NET Core SDK / runtime installation directory is on your system - by default, it is `/usr/local/share/dotnet`.\r\n\r\nTherefore the abstract form of the workaround is:\r\n\r\n```sh\r\n/bin/sh -lc 'PATH=\"<dotnet-install-dir>:$PATH\" DOTNET_ROOT=\"<dotnet-install-dir>\" ~/.dotnet/tools/pwsh'\r\n```\r\n\r\nWith the standard location:\r\n\r\n```sh\r\n/bin/sh -lc 'PATH=\"/usr/local/share/dotnet:$PATH\" DOTNET_ROOT=\"/usr/local/share/dotnet\" ~/.dotnet/tools/pwsh'\r\n```\r\n\r\n(Strictly speaking, you don't need the `DOTNET_ROOT=...` part with the _standard_ location, but you need it with any nonstandard one.)\r\n\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-03-24T21:28:50Z",
      "updated_at": "2020-03-24T21:28:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The short of it is:\r\n\r\nIf  **PowerShell is installed as a  .NET global tool**, and you want to **configure it as your _default shell_**.\r\n\r\n* With a **_standard, machine-level_ .NET Core SDK / runtime installation** in **_standard locations_:**\r\n\r\n  * on **Linux** (at least on Ubuntu), **should work as-is** (CLI `dotnet` symlinked to `/usr/bin`, install directory in standard location `/usr/share/dotnet/`).\r\n\r\n  * on **macOS** (CLI `dotnet` symlinked to `/usr/local/bin`, install directory in standard location `/usr/local/share/dotnet`), **requires extra, one-time configuration that involves `sudo`**, and therefore requires administrative privileges:\r\n\r\n    * `sudo launchctl config system path /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet`\r\n\r\n* With a **.NET Core installation in a _custom location_**:\r\n  *  **Careful extra configuration** is required on both platforms, **requiring `sudo`** - see bottom section.\r\n\r\n---\r\n\r\nAs a **less invasive alternative that doesn't require `sudo`**, instead of defining `pwsh` as your default shell, **configure your terminal emulator to launch PowerShell as follows**:\r\n\r\n  * **Linux**:\r\n\r\n    * With a _standard_ installation:\r\n\r\n       * `/bin/sh -c 'exec ~/.dotnet/tools/pwsh'`\r\n\r\n    * With a _custom_ installation (substitute the full path of your custom .NET install directory for `<dotnet-root-dir>`):\r\n\r\n       * `/bin/sh -c 'PATH=\"<dotnet-root-dir>:$PATH\" DOTNET_ROOT=\"<dotnet-root-dir>\" exec ~/.dotnet/tools/pwsh'`\r\n\r\n\r\n  * **macOS**:\r\n\r\n    * With a _standard_ installation:\r\n\r\n       * `/bin/sh -lc 'PATH=\"/usr/local/share/dotnet:$PATH\" exec ~/.dotnet/tools/pwsh'`\r\n\r\n    * With a _custom_ installation (substitute the full path of your custom .NET install directory for `<dotnet-root-dir>`):\r\n\r\n       * `/bin/sh -lc 'PATH=\"<dotnet-root-dir>:$PATH\" DOTNET_ROOT=\"<dotnet-root-dir>\" exec ~/.dotnet/tools/pwsh'`\r\n\r\n---\r\n\r\n@iSazonov, the section below addresses this comment of yours:\r\n>  the system can start the shell well out of the user session. In particular, as a result pwsh cannot find a custom .Net installation.\r\nIn other words, the installer only configures the user profile so that pwsh works well. \r\n\r\n## Background information, default shell use with _custom_ .NET installations:\r\n\r\nThe .NET Core SDK installer adds the .NET global tools directory  to `$env:PATH` _system-wide_, even though it is a _user_ location. That is, each user sees _their_ `~/.dotnet/tools` directory in `$env:PATH`:\r\n\r\n  * On macOS, this directory added via plaint-text file `/etc/paths.d/dotnet-cli-tools`, which `/etc/profile` processes by invoking `/usr/libexec/path_helper`.\r\n\r\n  * On Linux, it is shell script `/etc/profile.d/dotnet-cli-tools-bin-path.sh`, also processed by `/etc/profile`.\r\n\r\nHowever, it isn't the _tools_ directory that matters here, **it is the location of the `dotnet` CLI and the .NET _install_ directory (inside of which the runtimes are located)  that matters - both of them must be discoverable when a _framework-dependent_ .NET application** - such as `pwsh` if installed as a .NET global tool - starts.\r\n\r\n(Whether the _tools_ directory is discoverable is irrelevant in this scenario, because in order to define a shell as the default shell, its _full path_ is passed to `cshsh -s` anyway).\r\n\r\nThe `dotnet` CLI and the install directory _are_ discoverable with standard installations of the .NET Core SDK / runtime.\r\n\r\nHowever, the challenge is that this discoverability _always_ (macOS) / _situationally_ (Linux) depends on having processed `/etc/profile` and `~/.profile` _first_.\r\n\r\nThat is a catch-22 (bootstrapping problem) for a framework-dependent PowerShell:  Because It cannot process these files itself (but needs to, if invoked as a _login_ shell), it can only process them by reinvoking itself via `/bin/sh -l` (or equivalent). But in order to do so it needs to be able to start first - which, by default, it _categorically cannot_ (macOS) / _situationally cannot_ (Linux).\r\n\r\n---\r\n\r\n### macOS\r\n\r\nWith a **standard installation** (via the official `.pkg` installer, as used by `brew cask install dotnet-sdk`), a framework-dependent application:\r\n\r\n* _can_ discover the install directory due its presence in its _standard location_, `/usr/local/share/dotnet/`\r\n\r\n* _cannot_ discover the `dotnet` CLI, because it is symlinked to from `/usr/local/bin/dotnet`, and `/usr/local/bin/` is only added to `$env:PATH` _via `/etc/profile`_; on macOS, _non-shell_(-launched) processes - such as GUI applications - see _only_ the following directories in `$env:PATH`: `/usr/bin:/bin:/usr/sbin:/sbin`\r\n\r\nTrying to work around this catch-22 by creating a symlink to the CLI in `/usr/bin`, for instance, is tempting, but the macOS SIP (System Integrity Protection) feature prevents that.\r\n\r\nThe fix is to **add the install directory (where the CLI resides as well) to the _system-level default `$env:PATH` value_**, after its default entries, using `launchctl`, which **requires `sudo`** and therefore _administrative privileges_ (and a reboot for the change to take effect).\r\n(Note that attempts to modify the user-level definition are seemingly quietly ignored).\r\n\r\n```\r\nsudo launchctl config system path /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet\r\n```\r\n\r\nNote that this has two implications, though I generally wouldn't expect them to be problematic:\r\n\r\n* Even non-shell(-launched) processes (GUI apps) then see this new `$env:PATH ` entry.\r\n\r\n* Shell(-launched) processes see the new `$env:PATH` entry _before_ any additional entries are made via `/etc/profile` / `~/.profile` / their own initialization files.\r\n\r\nWith a **custom installation** of .NET Core, **_additional work_ is required**:\r\n\r\n* First, adapt and submit the `sudo launch` command above with the full path of your custom install directory substituted for `/usr/local/share/dotnet`.\r\n\r\n* Then, create plain-text file `/etc/dotnet/install_location` (requires `sudo`; create directory `/etc/dotnet` on demand) and place the full path of your custom install directory in there.\r\n\r\nNote that the alternative method for making a custom install directory location discoverable - environment variable `DOTNET_ROOT` is _not_ an option, because macOS - by design, for security reasons - doesn't offer a way to set environment variables other than `PATH` at the system level.\r\n\r\n---\r\n\r\n### Linux (as tested on Ubuntu 18.04)\r\n\r\nWith a **standard installation** (`sudo apt install powershell-sdk-<major>-<minor>`; e.g., `sudo apt install powershell-sdk-3-1` as of PowerShell 7.0), everything should work as-is:\r\n\r\nNeither the discoverability of the CLI nor the install directory depend on `/etc/profile` processing in that case (`/usr/bin`, where the `dotnet` CLI symlink is placed, is in `$env:PATH` by virtue of being defined in `/etc/environment`, and the CLI can discover the install directory in its standard location, `/usr/share/dotnet/`).\r\n\r\nWith a **custom installation** of .NET Core, **_additional work_ is required**, which **requires `sudo`** and therefore administrative privileges:\r\n\r\n* First, if not already present, create a symlink to the `dotnet` CLI in one of the `$env:PATH` directories _listed directly in `/etc/environment`,_ such as `/usr/bin` or `/usr/local/bin` (requires `sudo`). \r\n  * Note that, for instance, a `snap`-installed PowerShell version creates a  `/snap/bin/dotnet` symlink, but `/snap/bin` is only added to `$env:PATH` if `/etc/profile` is processed.\r\n\r\n* Then, create plain-text file `/etc/dotnet/install_location` (requires `sudo`; create directory `/etc/dotnet` on demand) and place the full path of your custom install directory in there.\r\n\r\nNote: It may be tempting to try a user-level configuration via `~/.profile`, but that won't work in all situations:\r\n\r\n* It _does_ work  when you log on _locally_, via the desktop environment, because a hidden `/bin/bash` instance then processes `/etc/profile` and `~/.profile` _at logon time_ (at least on Ubuntu,  where the GNOME-based desktop is initialized that way), and all processes in that session inherit the resulting environment modifications. It is for this reason that - unlike on macOS - Linux terminal emulators do _not_ launch shells as _login_ shells, because it isn't necessary.\r\n\r\n* However, it does _not_ work in `ssh` sessions, where the user's default shell _is_ invoked as a _login_ shell, and is itself expected to process `/etc/profile` and `~/.profile`\r\n\r\n\r\n",
      "created_at": "2020-03-25T15:03:19Z",
      "updated_at": "2021-01-28T04:44:35Z"
    },
    {
      "author": "JacksonKearl",
      "author_association": "NONE",
      "body": "thanks for your help, I'm using the \r\n```\r\n/bin/sh -lc 'PATH=\"/usr/local/share/dotnet:$PATH\" DOTNET_ROOT=\"/usr/local/share/dotnet\" ~/.dotnet/tools/pwsh'\r\n```\r\napproach as I want Hyper to use Powershell but Terminal.app to use zsh. (for easy context switching)\r\n\r\nIt all seems to work well with this setup. \r\n\r\nMaybe add this info to the README?",
      "created_at": "2020-03-25T15:16:53Z",
      "updated_at": "2020-03-25T15:18:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it, @JacksonKearl.\r\n\r\nNote the list of current bugs when PowerShell is used as a .NET global tool (all CLI-related):\r\n\r\n* CLI argument handling is broken with respect to arguments with embedded spaces and quotes: #11747\r\n\r\n* On macOS, you can't use `pwsh` to launch another instance (use `~/.dotnet/tools/pwsh` as a workaround): #12205\r\n\r\n* `-l` / `-login` doesn't work: #12176\r\n",
      "created_at": "2020-03-25T20:48:41Z",
      "updated_at": "2021-01-27T18:45:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan \r\n\r\n",
      "created_at": "2020-03-25T21:55:53Z",
      "updated_at": "2020-03-25T21:55:53Z"
    },
    {
      "author": "BillyONeal",
      "author_association": "NONE",
      "body": "Lots of tools expect a \"pwsh\" found on the PATH to be usable; is it possible for us to detect that the pwsh herein needs the above handholding so that we may skip over it? It's causing build failures for vcpkg customers.",
      "created_at": "2021-01-27T18:31:45Z",
      "updated_at": "2021-01-27T18:31:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan who could investigate the issue with _global tool_.",
      "created_at": "2021-01-28T04:25:00Z",
      "updated_at": "2021-01-28T04:25:00Z"
    }
  ],
  "created_at": "2020-03-14T07:12:49Z",
  "labels": [
    "Issue-Bug",
    "Area-Maintainers-Build"
  ],
  "number": 12126,
  "state": "open",
  "title": "Unhandled exception. System.ComponentModel.Win32Exception (2): No such file or directory on trying to set pwsh as default shell",
  "updated_at": "2021-01-28T04:44:35Z"
}