{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16341",
  "author": "andvant",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nIf during variable assignment you get an error (such as ItemNotFoundException), the variable will have weird behavior when used with -notlike and -notmatch operators (they will return false). Whereas even non-existent or null variables will behave normally (return true if used with -notlike and -notmatch).\r\n\n\n### Expected behavior\n\n```console\nPS> $brokenVar = Get-Item \"nonexistent\"\r\nPS> if ($brokenVar -notlike \"pattern\") { echo \"true\" } else { echo \"false\" }\r\ntrue\n```\n\n\n### Actual behavior\n\n```console\nPS> $brokenVar = Get-Item \"nonexistent\"\r\nPS> if ($brokenVar -notlike \"pattern\") { echo \"true\" } else { echo \"false\" }\r\nfalse\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.5\r\nPSEdition                      Core\r\nGitCommitId                    7.1.5\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks like when a variable value is `AutomationNull.Value`, as can happen in error cases, the `-notlike` and `-notmatch` operators don't evaluate at all, no value is returned:\r\n\r\n```ps1\r\n$autoNull = [System.Management.Automation.Internal.AutomationNull]::Value\r\n$autoNull -notlike 'aaaa' # no output\r\n$autoNull -notmatch 'aaaa' # no output\r\n```\r\n\r\nSo as a result they register as \"false\" in an if statement, because nothing is returned from the expression. I can see why this might occur, but it's unclear what the \"correct\" behaviour would be here, to me.",
      "created_at": "2021-11-01T12:45:12Z",
      "updated_at": "2021-11-01T12:45:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> but it's unclear what the \"correct\" behaviour would be here, to me.\r\n\r\nChanging the behavior will be huge breaking change. :-)",
      "created_at": "2021-11-01T17:54:32Z",
      "updated_at": "2021-11-01T17:54:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye. Either we fix it, which potentially could break some things, or we document it. If we document it, we'll need to detail which operators behave this way and which don't, I imagine more than just these are probably affected.",
      "created_at": "2021-11-01T18:19:46Z",
      "updated_at": "2021-11-01T18:19:46Z"
    }
  ],
  "created_at": "2021-10-30T11:43:41Z",
  "number": 16341,
  "state": "open",
  "title": "Error assigned to variable makes -notlike and -notmatch operators behave incorrectly",
  "updated_at": "2021-11-01T18:19:46Z"
}