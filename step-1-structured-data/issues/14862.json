{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14862",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nFor an interactive PowerShell user it is important to know if and what experimental features are currently enabled - if any.\r\n\r\n* In a _stable_ / LTS version, the expectation may be that NONE are enabled, so if any are, it's helpful to be notified.\r\n\r\n  * Experimental features may _inadvertently_ be enabled, namely if, in a previously installed or side-by-side _preview_ version features were ever selectively enabled or disabled with `-Scope CurrentUser` - which is the default scope.  The resulting `\"$(Split-Path $PROFILE.CurrentUserAllHosts)/powershell.config.json\"` file takes effect for _all_ installed versions, and overrides `\"PSHOME/powershell.config.json\"`\r\n\r\n* In _preview_ versions - which by default come with all experimental features _enabled_ - it is additionally important to know which ones are _not_ enabled in a given session, since, after using selective disabling, newly introduced features may end up DISABLED in preview versions installed later (as explained above).\r\n\r\n  * Additionally, showing in effect _all_ experimental features helps with discovering new ones.\r\n\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nUpdate: See the  [alternative, less verbose proposal below](https://github.com/PowerShell/PowerShell/issues/14862#issuecomment-784481300).\r\n\r\nOn entering an interactive session, show something like the following:\r\n\r\n**For PREVIEW versions:**\r\n\r\nShow _both_ the enabled and disabled experimental features, grouped by state:\r\n\r\n```powershell\r\n@\"\r\nPowerShell 7.2.0-preview.3\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nENABLED experimental features:\r\n  $((Get-ExperimentalFeature | Where-Object -not Enabled).Name)\r\nDISABLED experimental features:\r\n  $((Get-ExperimentalFeature | Where-Object Enabled).Name)\r\n\"@\r\n```\r\n\r\nIt would additionally be helpful if features added since the previous stable release could be highlighted.\r\n\r\n**For STABLE / LTS versions:**\r\n\r\n\r\nShow only _enabled_ experimental features (if any - see [@rkeithhill's more sophisticated version](https://github.com/PowerShell/PowerShell/issues/14862#issuecomment-782742059)).\r\n\r\n```powershell\r\n@\"\r\nPowerShell 7.2.0-preview.3\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nEnabled experimental features (type 'help about_experimental_features' for help):\r\n  $((Get-ExperimentalFeature | Where-Object -not Enabled).Name)\r\n\"@\r\n```\r\n\r\n---\r\n\r\nAs [@DHowett notes](https://github.com/PowerShell/PowerShell/issues/14862#issuecomment-782992511), all this extra text should be considered part of the \"logo\" and should therefore be suppressed if `-NoLogo` is passed to the CLI.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Or maybe this for stable:\r\n```powershell\r\n& {$OFS = ', '; @\"\r\nPowerShell 7.2.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\n$($exp = Get-ExperimentalFeature | Where-Object -not Enabled\r\n  $exp ? \r\n    \"`nEnabled Experimental features:`n  $($exp.Name)`n`nType 'help' to get help. Type 'help about_experimental_features' to get help on experimental features.\" : \r\n    \"Type 'help' to get help.\"\r\n  )\r\n\r\n\"@}\r\n```\r\nOutputs this:\r\n```\r\nPowerShell 7.2.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\n\r\nEnabled Experimental features:\r\n  PSCultureInvariantReplaceOperator, PSImplicitRemotingBatching, PSNotApplyErrorActionToStderr, PSSubsystemPluginModel, Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace, PSDesiredStateConfiguration.InvokeDscResource\r\n\r\nType 'help' to get help. Type 'help about_experimental_features' to get help on experimental features.\r\n\r\n02-20 13:06:26 49>\r\n```\r\nor this:\r\n```\r\nPowerShell 7.2.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n02-20 13:07:04 50>\r\n```\r\n\r\n",
      "created_at": "2021-02-20T20:07:49Z",
      "updated_at": "2021-02-20T20:07:49Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "If we commit to this, I'd really hope that it's suppressed by `-NoLogo`.",
      "created_at": "2021-02-22T02:18:19Z",
      "updated_at": "2021-02-22T02:18:19Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I wish GitHub had more reaction emojis.  I'd like to \ud83d\udcaf @DHowett's comment above.  :-)",
      "created_at": "2021-02-22T02:21:20Z",
      "updated_at": "2021-02-22T02:22:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate both suggestions. @DHowett, I've noted your suggestion in the OP; @rkeithhill, I've linked to your improved command from the OP.\r\n",
      "created_at": "2021-02-22T02:47:56Z",
      "updated_at": "2021-02-22T02:47:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This will rather annoy users as it does with the new version notification and the large logo (we already have such issues).\r\nIt would make sense as a one-time function of the installer to show release notes and turned on experimental features.",
      "created_at": "2021-02-22T06:22:15Z",
      "updated_at": "2021-02-22T06:22:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> It would make sense as a one-time function of the installer\r\n\r\nI like that idea _separately_ - it's not one or the other.\r\n\r\nGiven that not everyone uses official installers, that information is better shown in the terminal on first startup (unless suppressed with `-NoLogo`). This should probably be a separate proposal.\r\n\r\n---\r\n\r\n> This will rather annoy users as it does with the new version notification\r\n\r\nOne person's annoyance is another person's feature.\r\n\r\nAs in the version notification case, to me the sensible _default_ behavior is to _show_ this information, while given users an _opt-out_ - as we have done via the `POWERSHELL_UPDATECHECK` environment variable.\r\n\r\n---\r\n\r\nAs for how much of an annoyance it would be:\r\n\r\n* In _stable_ versions (including LTS):\r\n  *  You _wouldn't_ see a notification under normal circumstances, because if you want the official, stable environment, you shouldn't have experimental features turned on.\r\n  * If they're turned on _accidentally_, you'll probably fix that problem there and then, and the notification will go away.\r\n  * Conversely, if turning them on was intentional, the notification is a good reminder to have that the behavior of the session will be nonstandard.\r\n\r\n* In _preview_ versions:\r\n\r\n  *  Preview users are a self-selecting demographic to be begin with: someone who installs a preview version is prepared to deal with being inconvenienced - through possible instability alone - for the sake of getting a preview of functionality to come.\r\n  * Since experimental features are an important part of preview versions - and may indeed be the reason someone installs a preview version to begin with - having reminders of what's turned on and what is not is helpful. \r\n\r\nI suppose one way to reduce the amount of information shown is that if _all_ experimental features are enabled, to only state that in the abstract, rather than enumerating all the feature names.\r\n\r\n\r\n\r\n",
      "created_at": "2021-02-22T12:45:47Z",
      "updated_at": "2021-02-22T12:46:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @joeyaiello @theJasonHelmick to comment.",
      "created_at": "2021-02-22T19:11:37Z",
      "updated_at": "2021-02-22T19:11:37Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "I'm really not in favor of a bunch of blather on the screen when I start the shell. I can easily find out what experimental features are enabled. If you need this personally, it's very easy to add it to your profile, but I don't believe you've made the argument sufficiently to enable this for all users every time the shell starts.",
      "created_at": "2021-02-23T19:23:00Z",
      "updated_at": "2021-02-23T19:23:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't believe you've made the argument sufficiently\r\n\r\n[The OP](https://github.com/PowerShell/PowerShell/issues/14862#issue-812669616) argues specific points, separately for stable and preview versions, including the point that in stable versions you normally _wouldn't_ see additional information and that if something _is_ shown it is important to show it, and that in preview versions you'd want to know which are and are not enabled.\r\n\r\nWhich of these arguments do you think are insufficient, and why?\r\n\r\n",
      "created_at": "2021-02-23T19:39:00Z",
      "updated_at": "2021-02-23T19:41:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "With respect to the _amount_ of extra information shown, one way to reduce it is to apply _exception_ logic, that is to effectively issue an _abstract warning_ if the configuration is unusual, namely:\r\n\r\n* In a _stable_ version, if at least one experimental feature is _enabled_, say something like: \r\n  * `WARNING: At least one experimental feature is in enabled. Type 'help about_experimental_features' for help.`\r\n\r\n* In a _preview_ version, where all features are _enabled_ by default, warn if at least one experimental feature is _disabled_:\r\n  * `WARNING: At least one experimental feature is in disabled. Type 'help about_experimental_features' for help.`\r\n\r\nIn practice, I suspect such warnings would rarely show if we stopped sharing user-level configuration files across side-by-side versions and if we reversed the exclusion logic for preview versions. Currently, it is very easy to _unwittingly_ enable or disable experimental features - see #14891.",
      "created_at": "2021-02-23T20:15:13Z",
      "updated_at": "2021-02-23T20:35:12Z"
    }
  ],
  "created_at": "2021-02-20T17:39:57Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 14862,
  "state": "open",
  "title": "Show what experimental features are turned on at the start of interactive sessions",
  "updated_at": "2021-02-23T22:45:57Z"
}