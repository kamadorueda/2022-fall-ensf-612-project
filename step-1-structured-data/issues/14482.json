{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14482",
  "author": "eabase",
  "body": "I just installed the latest `PowerShell 7.2.0-preview.2` and yet again the pwsh link that appear on desktop has the classic broken command line garbage, as reported in several places (see #11685 and issues repos within) . \r\n\r\nSo I copied the old link I had, from and for pwsh `6.1.1`, and modified it to be exactly the same (as above) as far as its adjustable in the file `properties`. The result is that the **old** link with new paths is working perfectly! Going through some link forensics from [here](https://github.com/libyal/liblnk/issues/47) I noticed that the two symlinks are different by ~40 bytes and by structure. This is only visible by hexedit/hexdump and not even the `lnkinfo.exe` forensic tool. \r\n\r\nSo unlike what was previously believed, **this does not seem to be a PSReadLine issue.**\r\n\r\nThe real question now, is why symlinks are created differently for the installers in the last 1.5 years? \r\n\r\n## Steps to reproduce\r\n\r\n* Install latest powershell\r\n* Open desktop terminal shell\r\n* type anything\r\n\r\n## Expected behavior\r\n\r\nNo pwsh terminal cmd line garbage\r\n\r\n## Actual behavior\r\n\r\nshows broken ctrl characters  \r\n```text\r\n$ s [104m\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n$  $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nand\r\n\r\n```powershell\r\n\r\n-----------------------------------------------------------------------\r\n  PowerShell Version    : 7.2.0-preview.2\r\n  OS Name               : Microsoft Windows 8.1 (64-bit)\r\n  OS Version            : 6.3.9600  [2014-08-16 00:50:01]\r\n  OS BuildLabEx         : 9600.19880\r\n  OS HAL                : 6.3.9600.18969\r\n  OS Kernel             : 6.3.9600.18217\r\n  OS UBR                : 19893\r\n  -------------------------------------------------------\r\n  on Host               : xxxx\r\n  as User               : xxxx\r\n  with Privilege        : Normal\r\n  -------------------------------------------------------\r\n  ExecutionPolicy:\r\n      MachinePolicy     : Undefined\r\n      UserPolicy        : Undefined\r\n      Process           : Undefined\r\n      CurrentUser       : Bypass\r\n      LocalMachine      : RemoteSigned\r\n\r\n  Firewall:\r\n      Status            : OK\r\n\r\n  Console Settings:\r\n      Type              : ConsoleHost\r\n      OutputEncoding    : Unicode (UTF-8)\r\n      Color Capability  : 151\r\n      Registry VT Level : 1\r\n      CodePage (input)  : 437\r\n      CodePage (output) : 437\r\n      Mode (input)      : N/A\r\n      Mode (output)     : N/A\r\n      Buffer Size (W H) : 150 9009\r\n      PSReadLine version: 2.1.0-beta2\r\n\r\n```\r\n\r\n---\r\n\r\n\r\n#### Alternatively\r\n\r\nCreate a new symlink with Powershell using:\r\n```powershell\r\n$ New-Item -ItemType SymbolicLink -Path C:\\Users\\xxxx\\Desktop\\pwss -Target \"C:\\Program Files\\PowerShell\\7-preview\\pwsh.exe\"\r\n\r\n$ Get-ChildItem C:\\Users\\xxxx\\Desktop\\pwss | fl\r\n\r\n    Directory: C:\\Users\\xxxx\\Desktop\r\n\r\nName           : pwss\r\nLength         : 0\r\nCreationTime   : 2020-12-22 19:54:21\r\nLastWriteTime  : 2020-12-22 19:54:21\r\nLastAccessTime : 2020-12-22 19:54:21\r\nMode           : -a---l\r\nLinkType       : SymbolicLink\r\nTarget         : {C:\\Program Files\\PowerShell\\7-preview\\pwsh.exe}\r\nVersionInfo    : File:             C:\\Users\\xxxx\\Desktop\\pwss\r\n                 InternalName:     pwsh.dll\r\n                 OriginalFilename: pwsh.dll\r\n                 FileVersion:      7.2.0.0\r\n                 FileDescription:  pwsh\r\n                 Product:          PowerShell\r\n                 ProductVersion:   7.2.0-preview.2 SHA: 47ef533b2edd5f4cfae5adb9533613f142dc4315\r\n                 Debug:            False\r\n                 Patched:          False\r\n                 PreRelease:       False\r\n                 PrivateBuild:     False\r\n                 SpecialBuild:     False\r\n                 Language:         Language Neutral\r\n```\r\nThat is also broken. \r\n\r\nThe same info for the *old* (modified symlink for pwsh preview ) that is working, is: \r\n\r\n```powershell\r\n $ Get-ChildItem C:\\Users\\xxxx\\Desktop\\pwsh7b.lnk | fl\r\n\r\n    Directory: C:\\Users\\xxxx\\Desktop\r\n\r\nName           : pwsh7b.lnk\r\nLength         : 1716\r\nCreationTime   : 2020-12-22 05:33:18\r\nLastWriteTime  : 2020-12-22 05:36:06\r\nLastAccessTime : 2020-12-22 05:33:18\r\nMode           : -a----\r\nLinkType       :\r\nTarget         : {}\r\nVersionInfo    : File:             C:\\Users\\xxxx\\Desktop\\pwsh7b.lnk\r\n                 InternalName:\r\n                 OriginalFilename:\r\n                 FileVersion:\r\n                 FileDescription:\r\n                 Product:\r\n                 ProductVersion:\r\n                 Debug:            False\r\n                 Patched:          False\r\n                 PreRelease:       False\r\n                 PrivateBuild:     False\r\n                 SpecialBuild:     False\r\n                 Language:\r\n```\r\n\r\nUnfortunately, this seem to be a more general problem, as it is not clear why these *symlinks* are looking so different. \r\n\r\n1. Are they even *symlinks*? \r\n2. Why doesn't the working links show the *type* as a `symlink`? \r\n3. Why are the link target not reported?\r\n\r\nThe lnkinfo.exe tool is not able to read the `New-Item` created `SymbolicLink`s... While looking at them in Cygwin, the seem more like a cygwin softlink, reporting: \r\n```bash\r\n# \\ls -lh pwss\r\nlrwxrwxrwx 1 Administrators None 55 Dec 22 19:54 pwss -> /cygdrive/c/Program Files/PowerShell/7-preview/pwsh.exe\r\n```\r\n\r\nThe same issue occurs, for any new \"terminal\" type of links. For example the Anaconda created one's have the same issue. \r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Are they even symlinks?\r\n\r\nI have no idea what the issue is but a `.lnk` file is a shortcut file and not a symbolic link. This is why the `LinkType` is empty and it has no target. Technically a shortcut does have a target but PowerShell hasn't implemented support for getting the target. You would need to use COM to achieve that.\r\n\r\nThe simple way is\r\n\r\n```powershell\r\n$shell = New-Object -ComObject (\"WScript.Shell\")\r\n$shortcut = $shell.CreateShortcut('C:\\my\\shortcut.lnk')\r\n$shortcut.TargetPath\r\n```\r\n\r\nUnfortunately this method does not support all shortcut targets. It will probably work in this case but there are times when `TargetPath` will be blank yet the shortcut does have a target path. To get the proper path you need some more complex C# code like what Ansible uses https://github.com/ansible-collections/community.windows/blob/main/plugins/modules/win_shortcut.ps1.\r\n\r\nYou could always just see the path by looking at the file properties in explorer though.",
      "created_at": "2020-12-22T19:10:20Z",
      "updated_at": "2020-12-22T19:14:34Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "@jborean93 \r\n\r\nYep, that certainly helps to know. :see_no_evil:  I was sure Win shortcuts was the same as symbolic links. So then I suppose I need to change the title from \"`symlink`\" to \"`shortcut`\". Either way, how and where is the shortcut file structure defined? \r\n",
      "created_at": "2020-12-22T19:14:28Z",
      "updated_at": "2020-12-22T19:15:01Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "I was [informed](https://github.com/libyal/liblnk/issues/47#issuecomment-749729041) that there is a *metadata* field in the shortcut. \r\n1. Any idea what this is used for? \r\n2. Where is it processed and used? ",
      "created_at": "2020-12-22T19:55:07Z",
      "updated_at": "2020-12-22T19:55:07Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "I have found a solution to this issue. It has something to do with the parsing of the console color properties within the terminal shortcut, and contained in the *metadata* property store data block. I managed to fix the broken shortcut, by editing the color definitions, resulting in about 4 different byte location changes. The byte [structure of a windows shortcut](https://github.com/libyal/liblnk/blob/main/documentation/Windows%20Shortcut%20File%20(LNK)%20format.asciidoc#6-extra-data) seem to be mostly unknown apart from that researched by some reverse engineering specialists. \r\n\r\nWhy editing the colors individually is breaking terminal ANSI character behavior, is still unknown. This is after all a powershell constructed `SymbolicLink`. \r\n\r\n--- \r\n\r\n### The manual solution\r\n\r\n1. open the properties of the shortcut that is causing the problem\r\n2. open the properties of a shortcut that is **not** having the problem\r\n3. select the color tab and compare the color boxes **`[]`** of both. \r\n4. Then try to edit the colors of the broken shortcut. (You'll need to edit first the color codes for the box that is broken, then click on the color box that should be activated. These steps are shown in the pictures below. \r\n\r\n![pwsh_terminal_shortcut_issue1](https://user-images.githubusercontent.com/52289379/102938751-971d9600-44b5-11eb-9f2f-ea8720b5de5b.png)\r\n\r\n\r\n![pwsh_terminal_shortcut_issue_fix1](https://user-images.githubusercontent.com/52289379/102938692-79e8c780-44b5-11eb-8b50-7169937a5a87.png)\r\n\r\n![pwsh_terminal_shortcut_issue_fix2](https://user-images.githubusercontent.com/52289379/102938694-7b19f480-44b5-11eb-99c8-72894043310e.png)\r\n\r\n---\r\n\r\nThe resulting binary diff can be shown to change 4 bytes at these locations of the shortcut. \r\n\r\n![pwsh_terminal_shortcut_issue_fix3](https://user-images.githubusercontent.com/52289379/102937878-ca5f2580-44b3-11eb-82b4-8a1c6dff6b50.png)\r\n\r\nThese numbers turn out to coincide with the registry items as so:\r\n```bash\r\n# HKCU:\\Console\\<symlink_path>\r\n97      -->     17      - ScreenColors  : 23\r\n01      -->     00      - ColorTable01  : \"2nd color box from the left\"\r\n24 54   -->     00 ff   - ColorTable09  : \"10th color box from the left\"\r\n```\r\n\r\nThe console colors are probably part of this structure:\r\n\r\n* https://github.com/libyal/liblnk/blob/main/documentation/Windows%20Shortcut%20File%20(LNK)%20format.asciidoc#621-console-color-flags\r\n\r\nThis bring up several questions. \r\n* Where exactly are these colors specified for default created windows *shortcuts* and *SymbolicLinks*?\r\n* How can we access and edit the console color fields when making links and shortcuts.\r\n* Is there a way to automatically fix all terminal shortcuts in one go?\r\n* Are there any registry items controlling these?\r\n* What are, and where are the official MS data structures for shortcuts and symbolic links?  \r\n(So we don't have to spend years and countless hours of hacking and reverse engineering to be able to figure out and solve these problems.)\r\n\r\n--- \r\n\r\nThis will hopefully resolve a large number of issues related to command line garbage. Such as:\r\n\r\n* https://github.com/PowerShell/PowerShell/issues/11685\r\n* https://github.com/PowerShell/PowerShell/issues/13057\r\n* https://github.com/PowerShell/PSReadLine/issues/1110\r\n* https://github.com/PowerShell/PSReadLine/issues/1508\r\n* https://github.com/PowerShell/PSReadLine/issues/1888\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/8692283?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/libyal/liblnk\">libyal/liblnk</a></strong></div><div>Library and tools to access the Windows Shortcut File (LNK) format - libyal/liblnk</div></blockquote>",
      "created_at": "2020-12-22T22:54:04Z",
      "updated_at": "2020-12-23T01:17:44Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Where exactly are these colors specified for default created windows shortcuts and SymbolicLinks?\r\n\r\nThe conhost settings are stored in a shortcut as you've seen. The format as you've seen is a binary file but it is definitely documented. You can see the structure of the conhost settings in a shortcut/.lnk at [MS-SHLINK 2.5.1 ConsoleDataBlock](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/e6b432b4-5a49-4826-9c25-e28695e8dd0c). When it comes to conhost settings there are 4 locations Windows uses:\r\n\r\n1. The defaults in conhost itself - you cannot touch these\r\n2. Your user account's specific settings in `HKCU:\\Console`\r\n3. A binary specific setting in `HKCU:\\Console\\<exe path>`\r\n4. Shortcut (.lnk) specific settings\r\n\r\nThe priority goes from lowest to highest, i.e conhost settings in a shortcut will trump anything else. When changing the settings the `Defaults` option sets option 2, and `Properties` sets option 4 if you opened it through a shortcut (.lnk) or 3 if it's just a normal path/symbolic link.\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/102942101-28b1f580-4500-11eb-9a78-c869eab2fff3.png)\r\n\r\nSymbolic links have no special meaning here, they would just act like a different path so option 4 does not apply here. When testing that behaviour that's exactly what I see, any changes to the conhost properties are set under `HKCU:\\Console\\<symlink path>`.\r\n\r\n> How can we access and edit the console color fields when making links and shortcuts.\r\n\r\nThe official way is to open up the application using the shortcut and make the changes through the normal conhost properties. Any changes you make there will be set on the shortcut itself. There's probably third party tools out there that can do this for you and you could even create your own parser yourself if you really wanted to but dealing with binary data in PowerShell isn't the easiest thing to do.\r\n\r\nAs mentioned above symbolic links are treated the same as a normal path, that is any settings are stored in the registry (option 3) and not in the symbolic link itself.\r\n\r\n> Is there a way to automatically fix all terminal shortcuts in one go?\r\n\r\nYou can clear out any settings under `HKCU:\\Console\\` so it always uses your default profile's settings. You would still need to deal with shortcut files yourself in another way. Changing the binary data would be quite cumbersome to my recommendation would be to delete and recreate the shortcut yourself (or just not use them at all).\r\n\r\n> Are there any registry items controlling these?\r\n\r\nYes, as mentioned above `HKCU:\\Console` controls your user's default settings, and `HKCU:\\Console\\<path>` controls a path specific one.\r\n\r\n> What are, and where are the official MS data structures for shortcuts and symbolic links?\r\n\r\nShortcut files are documented under the [MS-SHLLINK](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/e6b432b4-5a49-4826-9c25-e28695e8dd0c) protocol. They are a shell implementation and sit at a higher layer than where PowerShell sits. There's probably boundless documentation on this format ranging from basic end user setup details all the way to the format of the file.\r\n\r\nSymbolic links don't matter at all in this case. They are treated as just another path to the executable and based on the conhost settings they can have their own custom configuration if you so desire. In this case you should not treat symbolic links are any different from a normal path.\r\n\r\nNow going forward conhost is considered a legacy product. The replacement from Microsoft is Windows Terminal which has been massively improved from conhost and handles things like Unicode characters and colours whereas conhost is quite limited. When using Windows Terminal then these conhost settings do not apply at all as it has it's own configuration settings.\r\n\r\nIf you wanted to learn more about conhost settings https://devblogs.microsoft.com/commandline/understanding-windows-console-host-settings/ is a great guide which goes further in depth to what I've mentioned here.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/02/properties-520x600.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/03/cropped-CommandLineIcon-1-192x192.png\" height=\"14\"> Windows Command Line</div><div><strong><a href=\"https://devblogs.microsoft.com/commandline/understanding-windows-console-host-settings/\">Understanding Windows Console Host Settings | Windows Command Line</a></strong></div><div>Welcome to the first of several posts that describe some of the inner workings of the Windows Console. This post was written by Craig Loewen (our awesome 2017 summer intern), and Paul Campbell (SDE on Windows Console, Cmd, & Bash on Windows).</div></blockquote>",
      "created_at": "2020-12-22T23:30:25Z",
      "updated_at": "2020-12-22T23:30:28Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "Great super good answer. Thank you, that clarifies a lot. \r\n\r\nSince you mention it's legacy and this use case is for W81, I suppose this will never be fixed? (Or is/will windows terminal be available also for W81?)",
      "created_at": "2020-12-23T01:23:11Z",
      "updated_at": "2020-12-23T01:23:11Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I doubt it would ever be fixed as it's a fundamental problem with how conhost deals with console output. I don't believe it's anything that PowerShell can really deal with as the problem exists outside of it. Windows Terminal also cannot be backported to Windows 8.1 as it uses APIs only added in a particular Windows 10 build.",
      "created_at": "2020-12-23T03:08:37Z",
      "updated_at": "2020-12-23T03:08:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is exact repro steps? \r\n1. Install PS 6\r\n2. Run PS with desktop shortcut and check colors - work as expected\r\n3. Save the shortcut\r\n4. Uninstall PS 6 and install PS 7 on the same OS\r\n5. Run PS with desktop shortcut and check colors - one color is broken\r\n6. Replace PS7 shortcut with PS 6 shortcut and replace path to point to PS 7 - colors work as expected.\r\n\r\n@eabase Can you confirm?",
      "created_at": "2020-12-23T04:25:20Z",
      "updated_at": "2020-12-23T04:27:22Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Speaking as the owner of both conhost and the Windows Terminal (both of which are [open-source](https://github.com/microsoft/terminal)), I'd like to clear up a few misconceptions.\r\n\r\n> conhost ... [legacy] ... [not supported]\r\n\r\nWe're avoiding the term \"legacy\" for the console host. It is an important and foundational part of Windows, and it is not becoming unsupported. It underpins all console applications, _even inside Windows Terminal._\r\n\r\nThe product here that is unsupported is Windows 8.1. It predates almost all of our conhost changes, from VT support to word wrap to all of the allocation and memory and performance improvements. _That_ version of Windows will not be receiving any further conhost _or Terminal_ updates\u00b9.\r\n\r\n> Symbolic links don't matter at all in this case.\r\n\r\nThere is a bug in Windows that results in an application launched from a symbolic link being _told_ that it was launched from a shell link (!) whose path _is the symbolic link (!)_ \u00b2. This may confuse some applications. This [confuses conhost](https://github.com/microsoft/terminal/issues/7650) in a way that causes it to treat \"L\" or \"F\" as a hotkey (globally!) that will give the launched console window focus.\r\n\r\n> [some stuff about colors]\r\n\r\nWindows PowerShell made a [what should arguably be considered significant] mistake when it shipped and permanently redefined colors 5 and 6, as well as the default foreground/background colors, using its in-box lnk file. This is not normal, and should not be relied on. The color indices are fairly unyielding, and using the \"powershell default\" colors will cause you trouble literally everywhere else.\r\n\r\nOpen-source PowerShell fixed this. \r\n\r\n> ConsoleDataBlock ... undocumented\r\n\r\n[Here's the source](https://github.com/microsoft/terminal/blob/main/src/propslib/ShortcutSerialization.cpp) for the part of conhost that reads the shell link and pulls properties out of it. Our source is our documentation in many regards.\r\n\r\n> Escape character garbage ... [hex editing my shortcut file]\r\n\r\n> I doubt it would ever be fixed as it's a fundamental problem with how conhost deals with console output.\r\n\r\n**Nothing stored in the shortcut file will ever change the VT parsing behavior on Windows 8.1.** That functionality _does not exist_ in conhost.exe as of Windows 8.1. An application such as powershell emitting VT sequences to a console host that doesn't support it is an application bug.\r\n\r\n(@jborean93) This is not a \"fundamental problem,\" it is a feature that was implemented in the _seven years_ since Windows 8.1 shipped.\r\n\r\n> Where exactly are these colors specified for default created windows shortcuts and SymbolicLinks?\r\n\r\nDefault settings are all [here](https://github.com/microsoft/terminal/blob/683f4e28d3628a6a9a696fbd7cb6f23f036cb61f/src/host/settings.cpp#L99-L131). The campbell color table is [here](https://github.com/microsoft/terminal/blob/683f4e28d3628a6a9a696fbd7cb6f23f036cb61f/src/types/colorTable.cpp#L11-L28).\r\n\r\nShell links by default have _no_ color information. If your shell link doesn't have a console block, settings are loaded in the order @jborean93 described.\r\n\r\n\u00b9 Rumor has it that a build of conhost from our open-source repository (OpenConsole, \"Host.EXE\") _will run on Windows 8.1._ YMMV. NO WARRANTY, EXPRESS OR IMPLIED. If it runs, it will support all modern console features from Windows 10.\r\n\r\n\u00b2 This will result in the application opening an executable _as a lnk file_ and attempting to parse it. Not awesome.",
      "created_at": "2020-12-24T00:49:22Z",
      "updated_at": "2020-12-24T02:15:43Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarifying @DHowett!",
      "created_at": "2020-12-24T01:07:20Z",
      "updated_at": "2020-12-24T01:07:20Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "@iSazonov  Yes, exactly. (But don't need to uninstall PS6.)",
      "created_at": "2020-12-25T00:48:19Z",
      "updated_at": "2020-12-25T00:48:19Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "@DHowett \r\nThank you Dustin for such a detailed and interesting answer.\r\n\r\n> Rumor has it that a build of conhost from our open-source repository (OpenConsole, \"Host.EXE\") will run on Windows 8.1.\r\n\r\nI love rumor's and would be happy to test, but how is that done? Just replacing `conhost.exe` with `Host.EXE`?  \r\n\r\n",
      "created_at": "2020-12-25T00:52:00Z",
      "updated_at": "2020-12-25T00:52:00Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "@eabase yes. Make sure you use a Release build, otherwise the performance will be quite unpleasant. ",
      "created_at": "2020-12-25T02:56:16Z",
      "updated_at": "2020-12-25T02:56:16Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "<details>\r\n\r\n<summary>This is really OT</summary>\r\n\r\nI couldn't find any statically pre-built exe's. Extracted Windows Terminal appx and ran terminals, only to get hit with a missing DLL\r\n**`api-ms-win-core-wow-64-l1-1-1.dll`**\r\n\r\nWhat is special about that one?\r\nCan I throw in one found on a different system?\r\n\r\n</details>\r\n",
      "created_at": "2020-12-25T05:22:34Z",
      "updated_at": "2020-12-25T05:22:34Z"
    }
  ],
  "created_at": "2020-12-22T18:21:12Z",
  "number": 14482,
  "state": "open",
  "title": "powershell core installations are creating desktop symlinks that breaks PSReadLine w. garbage chars",
  "updated_at": "2020-12-25T05:22:35Z"
}