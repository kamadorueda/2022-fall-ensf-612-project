{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3040",
  "author": "MysticRyuujin",
  "body": "Steps to reproduce\r\n------------------\r\n(new-object System.Net.WebClient).Proxy.GetProxy(\"http://www.msn.com\").Host\r\n(new-object System.Net.WebClient).Proxy.GetProxy(\"www.msn.com\").Host\r\n(new-object System.Net.WebClient).Proxy.GetProxy(\"http://www.msn.com\").Host\r\n\r\nExpected behavior\r\n-----------------\r\n1. Output of Proxy Server Hostname\r\n2. Error: \"This operation is not supported for a relative URI.\"\r\n3. Output of Proxy Server Hostname\r\n\r\nActual behavior\r\n---------------\r\n1. Output of Proxy Server Hostname\r\n2. Error: \"This operation is not supported for a relative URI.\"\r\n3. \"www.msn.com\"\r\n\r\nThis output of the URI continues until I close/reopen PowerShell\r\n\r\nEnvironment data\r\n----------------\r\n$PSVersionTable:\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.0.10586.117\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.10586.117\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n$StackTrace:\r\nPS H:\\> $StackTrace\r\n   at System.Uri.get_IsLoopback()\r\n   at System.Net.WebProxy.IsBypassedManual(Uri host)\r\n   at System.Net.WebProxy.GetProxy(Uri destination)\r\n   at CallSite.Target(Closure , CallSite , Object , String )",
  "closed_at": "2017-02-28T17:13:19Z",
  "comments": [
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "I did a little more digging, this issue only happens when I am using a PAC file from an automatic configuration script. If I manually assign a proxy server, the command behaves as expected, but with an automatic configuration script being used it behaves as posted.",
      "created_at": "2017-01-24T20:56:10Z",
      "updated_at": "2017-01-24T20:56:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Isn't this an issue with the WebClient class and not PowerShell?  Do you get expected behavior with just C#?",
      "created_at": "2017-01-24T22:15:00Z",
      "updated_at": "2017-01-24T22:15:00Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "Here is why I think this is a PowerShell issue:\r\n\r\nI'm using New-Object to instance a new System.Net.WebClient each time I run the command, the failure of the second command should have no impact on a New-Object\r\n\r\nSecond, the following code works:\r\n```\r\n$Source = @'\r\nusing System;\r\nusing System.Net;\r\n\r\npublic class ProxyTest\r\n{\r\n   public static void Main()\r\n   {\r\n      using (WebClient client = new WebClient())\r\n        {\r\n            Uri myUri = new Uri(\"http://www.google.com\");\r\n            var proxy = client.Proxy.GetProxy(myUri);\r\n            Console.WriteLine(proxy.ToString());\r\n            try\r\n            {\r\n                myUri = new Uri(\"www.google.com\");\r\n                proxy = client.Proxy.GetProxy(myUri);\r\n                Console.WriteLine(proxy.ToString());\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Expected Failure\");\r\n            }\r\n            myUri = new Uri(\"http://www.google.com\");\r\n            proxy = client.Proxy.GetProxy(myUri);\r\n            Console.WriteLine(proxy.ToString());\r\n        }\r\n   }\r\n}\r\n'@\r\nAdd-Type -TypeDefinition $Source -Language CSharp\r\n[ProxyTest]::Main()\r\n```\r\nCORRECT PROXY\r\nExpected Failure\r\nCORRECT PROXY\r\n",
      "created_at": "2017-01-25T14:39:57Z",
      "updated_at": "2017-01-25T14:42:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is seems the key here is `using (WebClient client = new WebClient())`",
      "created_at": "2017-01-25T16:11:03Z",
      "updated_at": "2017-01-25T16:11:03Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "@iSazonov forgive me if I don't fully understand, I'm certainly not an expert nor a professional programmer...\r\n\r\nI don't understand why using what seems to me as a fully disposable command has any impact on additional usage of that command?\r\n\r\n(New-Object System.Net.WebClient).Proxy.GetProxy()\r\n\r\nI'm not storing it as a variable or making any calls back to it and each time it's run I'm specifically creating a New-Object am I not?\r\n\r\nI simply do not know enough to reproduce the issue in C# accurately / exactly the same as the supplied PowerShell would generate.",
      "created_at": "2017-01-25T17:28:09Z",
      "updated_at": "2017-01-25T17:28:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I am not an expert too. \r\nI only suggested an experiment with replacing `using (WebClient client = new WebClient())` in `WebClient client = new WebClient()`",
      "created_at": "2017-01-25T17:51:27Z",
      "updated_at": "2017-01-25T17:51:27Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "Works as expected\r\n\r\n```\r\n$Source = @'\r\nusing System;\r\nusing System.Net;\r\n\r\npublic class ProxyTest\r\n{\r\n   public static void Main()\r\n   {\r\n        WebClient client = new WebClient();\r\n        Uri myUri = new Uri(\"http://www.google.com\");\r\n        var proxy = client.Proxy.GetProxy(myUri);\r\n        Console.WriteLine(proxy.ToString());\r\n        try\r\n        {\r\n           myUri = new Uri(\"www.google.com\");\r\n           proxy = client.Proxy.GetProxy(myUri);\r\n           Console.WriteLine(proxy.ToString());\r\n        }\r\n        catch\r\n        {\r\n            Console.WriteLine(\"Expected Failure\");\r\n        }\r\n        myUri = new Uri(\"http://www.google.com\");\r\n        proxy = client.Proxy.GetProxy(myUri);\r\n        Console.WriteLine(proxy.ToString());\r\n   }\r\n}\r\n'@\r\n```\r\nAlso works as expected:\r\n```\r\n$Source = @'\r\nusing System;\r\nusing System.Net;\r\n\r\npublic class ProxyTest\r\n{\r\n   public static void Main()\r\n   {\r\n        WebClient client1 = new WebClient();\r\n        Uri myUri = new Uri(\"http://www.google.com\");\r\n        var proxy = client1.Proxy.GetProxy(myUri);\r\n        Console.WriteLine(proxy.ToString());\r\n        try\r\n        {\r\n           WebClient client2 = new WebClient();\r\n           myUri = new Uri(\"www.google.com\");\r\n           proxy = client2.Proxy.GetProxy(myUri);\r\n           Console.WriteLine(proxy.ToString());\r\n        }\r\n        catch\r\n        {\r\n            Console.WriteLine(\"Expected Failure\");\r\n        }\r\n        WebClient client3 = new WebClient();\r\n        myUri = new Uri(\"http://www.google.com\");\r\n        proxy = client3.Proxy.GetProxy(myUri);\r\n        Console.WriteLine(proxy.ToString());\r\n   }\r\n}\r\n'@\r\n```\r\n\r\nI think maybe that last one is a little more \"what I think should be happening\" based on my understanding of my use of New-Object",
      "created_at": "2017-01-25T17:56:41Z",
      "updated_at": "2017-01-25T17:56:41Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "Adding a Try {} Catch {} to the second command does not change the PowerShell behavior either, it still just prints \"www.msn.com\" on the third and additional runs:\r\nTry { (new-object System.Net.WebClient).Proxy.GetProxy(\"www.msn.com\").Host } Catch {}",
      "created_at": "2017-01-25T18:05:16Z",
      "updated_at": "2017-01-25T18:47:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm not able to repro the original issue making it difficult to investigate further.  I created a simple pac file:\r\n\r\n```\r\nfunction FindProxyForURL(url, host) {\r\n\r\nif ( url == \"www.google.com\" ) {\r\n         return \"PROXY 10.10.10.10\";\r\n}\r\nelse {\r\n        return  \"DIRECT\";\r\n}\r\n\r\n}\r\n```\r\n\r\nChrome, Edge, and IE all observe the Internet Options settings when I set that pac as the auto configure file and behaves as I expect: failing on www.google.com, working for everything else.\r\n\r\nWhen using the WebClient class, it doesn't appear to use my pac at all.",
      "created_at": "2017-01-27T00:46:44Z",
      "updated_at": "2017-01-27T00:46:44Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I recreated your issue, I think...I'm not sure how you configured your stuff but here's what I found:\r\n\r\n#1. I altered your \"url ==\" to \"host ==\"\r\n`if ( host == \"www.google.com\" ) {`\r\n\r\n#2. When I used a local file as in _file://c:\\temp\\test.pac_ both IE and WebClient ignored it. Apparently that's depreciated but Chrome still accepted it. I had to actually host it on an http:// site. Once I did both of those things the WebClient started using it...not sure how you setup your pac file...\r\n\r\nEDIT: Issue still exists, attached screenshot\r\n![2017-01-27_17-34-41](https://cloud.githubusercontent.com/assets/8877131/22391455/fc5aab38-e4b6-11e6-8002-dd056681ffaa.png)\r\n",
      "created_at": "2017-01-27T23:27:55Z",
      "updated_at": "2017-01-27T23:35:32Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "Are there any guides out there for how one might debug an issue like this?",
      "created_at": "2017-02-26T15:26:37Z",
      "updated_at": "2017-02-26T15:26:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The original test recreate `WebClient` object. Then the problem is not in it. The object has `Proxy` property to be initialized by static method [WebRequest.DefaultWebProxy](https://github.com/dotnet/corefx/blob/master/src/System.Net.WebClient/src/System/Net/WebClient.cs#L202) This may be the place where the problem is. Next hop is [here](https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/WebRequest.cs#L567) Next hop is [here](https://github.com/dotnet/corefx/blob/master/src/System.Net.Requests/src/System/Net/SystemWebProxy.cs#L32)\r\nPerhaps the exception in the second test, somehow \"destroys\" this static property or \"overlaps\" it.\r\n\r\n@daxian-dbw Could you comment on this issue and  specify the right direction to fix?",
      "created_at": "2017-02-26T17:18:15Z",
      "updated_at": "2017-02-26T17:18:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is, in fact, an issue with `WebClient` (not sure if it's by design, though).\r\nThe key factor in play is how `String` is converted to `Uri` in powershell. powershell uses `Uri(<uri-string>,\u2002UriKind.RelativeOrAbsolute)` for the conversion, which is the same as used in `System.UriTypeConverter.ConvertFromString(String)`.\r\n\r\nTherefore, the pure C# equivalent should be like this:\r\n```\r\nvoid Main()\r\n{\r\n\tSystem.Net.WebClient client = new System.Net.WebClient();\r\n\tUri uri_absolute = new Uri(\"http://www.msn.com\", System.UriKind.RelativeOrAbsolute);\r\n\tUri uri_relative = new Uri(\"www.msn.com\", System.UriKind.RelativeOrAbsolute);\r\n\t\r\n\tConsole.WriteLine(client.Proxy.GetProxy(uri_absolute).Host);\r\n\t\r\n\ttry { client.Proxy.GetProxy(uri_relative); }\r\n\tcatch { Console.WriteLine(\"Exception\"); }\r\n\t\r\n\tConsole.WriteLine(client.Proxy.GetProxy(uri_absolute).Host);\r\n}\r\n```\r\nAnd the output is:\r\n```\r\n10.10.10.10\r\nException\r\nwww.msn.com\r\n```",
      "created_at": "2017-02-28T07:39:30Z",
      "updated_at": "2017-02-28T07:40:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Many thanks for C# reproduction!\r\n\r\n@MysticRyuujin  Could you open Issue in CoreCLR?\r\n",
      "created_at": "2017-02-28T12:48:35Z",
      "updated_at": "2017-02-28T12:48:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@MysticRyuujin I'm afraid this is not a CoreCLR/.NET Core bug as the type `System.Net.WebClient` is not even available in .NET Core. But please do try them to see if they can redirect you to the right channel to report this issue.\r\n\r\nI'm closing this issue as `Resolution-external`.",
      "created_at": "2017-02-28T17:13:19Z",
      "updated_at": "2017-02-28T17:13:19Z"
    }
  ],
  "created_at": "2017-01-24T20:32:12Z",
  "number": 3040,
  "state": "closed",
  "title": "System.Net.WebClient.Proxy.GetProxy fails after bad/relative URI",
  "updated_at": "2017-02-28T17:13:19Z"
}