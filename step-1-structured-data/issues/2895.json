{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2895",
  "author": "nmbradford",
  "body": "Im working with an API that seems to not comply with the accepted standard for if-match header (value string must be enclosed in quotes), although this is apparently quite common and is accommodated in native PowerShell iwr/irm.  PowerShell core behaves differently and rejects the header when building the request.  Modifying the API (commercial product) to comply is not an option unfortunately.\r\n\r\nSteps to reproduce\r\n------------------\r\n```powershell\r\n$headers = @{}\r\n$headers.Add(\"if-match\",\"12345\")\r\nInvoke-WebRequest -Uri \"http://httpbin.org/headers\" -Headers $headers\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nWorks on native PowerShell\r\n\r\n```powershell\r\nInvoke-WebRequest -Uri \"http://httpbin.org/headers\" -Headers $headers\r\nStatusCode        : 200                                                                                                                                                                                                                                                   \r\nStatusDescription : OK                                                                                                                                                                                                                                                    \r\nContent           : {                                                                                                                                                                                                                                                     \r\n                      \"headers\": {                                                                                                                                                                                                                                        \r\n                        \"Host\": \"httpbin.org\",                                                                                                                                                                                                                            \r\n                        \"If-Match\": \"12345\",                                                                                                                                                                                                                          \r\n                        \"User-Agent\": \"Mozilla/5.0 (Windows NT; Windows NT 10.0; en-AU) WindowsPowerShell/5.1.14393.206\"                                                                                                                                                  \r\n                      }                                                                                                                                                                                                                                                   \r\n                    }                                                                                                                                                                                                                                                     \r\n                                                                                                                                                                                                                                                                          \r\nRawContent        : HTTP/1.1 200 OK                                                                                                                                                                                                                                       \r\n                    Connection: keep-alive                                                                                                                                                                                                                                \r\n                    Access-Control-Allow-Origin: *                                                                                                                                                                                                                        \r\n                    Access-Control-Allow-Credentials: true                                                                                                                                                                                                                \r\n                    Content-Length: 182                                                                                                                                                                                                                                   \r\n                    Content-Type: application/json                                                                                                                                                                                                                        \r\n                    Date: Fri, 16 Dec 2016 05:06:38 GM...                                                                                                                                                                                                                 \r\nForms             : {}                                                                                                                                                                                                                                                    \r\nHeaders           : {[Connection, keep-alive], [Access-Control-Allow-Origin, *], [Access-Control-Allow-Credentials, true], [Content-Length, 182]...}                                                                                                                      \r\nImages            : {}                                                                                                                                                                                                                                                    \r\nInputFields       : {}                                                                                                                                                                                                                                                    \r\nLinks             : {}                                                                                                                                                                                                                                                    \r\nParsedHtml        : mshtml.HTMLDocumentClass                                                                                                                                                                                                                              \r\nRawContentLength  : 182                                                                                                                                                                \r\n```\r\nActual behavior\r\n---------------\r\nFails on linux\r\n```powershell\r\nInvoke-WebRequest -Uri \"http://httpbin.org/headers\" -Headers $headers\r\nInvoke-WebRequest : The format of value '12345' is invalid.\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri \"http://httpbin.org/headers\" -Headers $headers\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Invoke-WebRequest], FormatException\r\n    + FullyQualifiedErrorId : System.FormatException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```\r\nNote: enclosing the value in quotes allows the header to be accepted by iwr/irm, but the API I'm attempting to consume from PowerShell Core does not accept the value when enclosed in quotes.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.14\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\n```\r\n",
  "closed_at": "2017-07-14T17:24:21Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "This is an issue with the .NET core implementation of HTTP header parsing:\r\n\r\nMessage        : The format of value '12345' is invalid.\r\nData           : {}\r\nInnerException : \r\nTargetSite     : System.Object ParseValue(System.String, System.Object, Int32 ByRef)\r\nStackTrace     :    at System.Net.Http.Headers.HttpHeaderParser.ParseValue(String value, Object storeValue, Int32& index)\r\n                    at System.Net.Http.Headers.HttpHeaders.ParseAndAddValue(String name, HeaderStoreItemInfo info, String value)\r\n                    at System.Net.Http.Headers.HttpHeaders.Add(String name, String value)\r\n                    at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetRequest(Uri uri)\r\n                    at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n                    at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n                    at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n                 341\r\nHelpLink       : \r\nSource         : System.Net.Http\r\nHResult        : -214623303",
      "created_at": "2017-05-24T19:35:27Z",
      "updated_at": "2017-05-24T19:35:27Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@nmbradford have you opened an issue with corefx?  \r\nAlso, I'm a little confused by your statement Note: enclosing the value in quotes allows the header to be accepted by iwr/irm\r\nPerhaps I'm misreading your statement but the syntax you illustrated does not result in a quoted string being passed to the underlying API.",
      "created_at": "2017-06-12T23:15:12Z",
      "updated_at": "2017-06-12T23:15:12Z"
    },
    {
      "author": "nmbradford",
      "author_association": "NONE",
      "body": "Correct - the syntax in my example does not contain quoted string as the header value, and demonstrates the different behaviour between the two platforms.  \r\n\r\nMy comment about quoting the value is intended to provide more information, but is not represented in the example.  \r\n\r\nTo be clear, if you do enclose the value in quotes on Core, an exception is not thrown (although that was not a useful workaround for me in this scenario as the API I was interacting with did not accept the value when quoted.)\r\n\r\nI have not raised an issue with corefx.",
      "created_at": "2017-06-12T23:36:35Z",
      "updated_at": "2017-06-12T23:36:35Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@nmbradford At this point, I think that's the only viable path.  The code path I'm seeing goes through ParseMultipleEntityTags in GenericHeaderParser.cs.  Either that code path would need to be more forgiving or a separate if-match parser would be needed.  I don't see how we can work around it in PowerShell.",
      "created_at": "2017-06-12T23:51:24Z",
      "updated_at": "2017-06-12T23:51:24Z"
    },
    {
      "author": "nmbradford",
      "author_association": "NONE",
      "body": "yes - that's my point, on Windows it is more forgiving :).  I realise the issue is in corefx (and Ive already worked around it by building the webrequest myself rather than using iwr), but to users of Powershell Core, it still represents a problem.",
      "created_at": "2017-06-13T00:08:02Z",
      "updated_at": "2017-06-13T00:08:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dantraMSFT can you open an issue in corefx and link it to this?  ",
      "created_at": "2017-06-13T00:16:26Z",
      "updated_at": "2017-06-13T00:16:26Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "Will do, Steve.\r\n@nmbradford   Would you mind providing a couple of example header values and the details of what you are doing to work around it.  I'd like to be specific when I create the issue.\r\nThanks.",
      "created_at": "2017-06-13T00:53:37Z",
      "updated_at": "2017-06-13T00:53:37Z"
    },
    {
      "author": "nmbradford",
      "author_association": "NONE",
      "body": "no prob.  My initial post has steps to repro for the failure scenario.  For the header to be accepted on Core, try this (with quoted string): \r\n```\r\n$headers[\"if-match\"] = \"`\"12345`\"\"\r\nInvoke-WebRequest -Uri \"http://httpbin.org/headers\" -Headers $headers\r\n```\r\nIn order to work around it, I'm not using IWR at all any more, instead constructing the httpclient request object directly and using the DefaultRequestHeaders.TryAddWithoutValidation() method rather than the DefaultRequestHeaders.add() method that IWR is using.\r\n",
      "created_at": "2017-06-13T01:04:41Z",
      "updated_at": "2017-06-13T01:04:41Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "I've created an issue in the CoreFX repo: https://github.com/dotnet/corefx/issues/20994\r\n",
      "created_at": "2017-06-13T17:19:48Z",
      "updated_at": "2017-06-13T17:19:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps another way to solve this would be to expose a `-SkipHeaderValidation` switch?  cc @joeyaiello ",
      "created_at": "2017-06-13T19:52:22Z",
      "updated_at": "2017-06-21T18:26:31Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello are you fine with Steve's suggestion or do you have other ideas?",
      "created_at": "2017-06-21T17:48:41Z",
      "updated_at": "2017-06-21T17:48:41Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I would go with `-SkipHeaderValidation`, yeah. ( @SteveL-MSFT changed it from `-NoHeaderValidation` \ud83d\ude09 )",
      "created_at": "2017-06-21T18:33:19Z",
      "updated_at": "2017-06-21T18:33:19Z"
    },
    {
      "author": "nmbradford",
      "author_association": "NONE",
      "body": "Agree - this would be an easier workaround, but then iwr and irm would behave differently on Windows/non windows platforms (meaning scripts would not be portable without platform detection)?",
      "created_at": "2017-06-22T03:12:26Z",
      "updated_at": "2017-06-22T03:12:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@nmbradford it would behave the same on Windows and Linux as long as you're using PSCore6.  We have already added new capabilities to the webcmdlets that won't be in Windows PowerShell 5.1",
      "created_at": "2017-06-22T05:21:37Z",
      "updated_at": "2017-06-22T05:21:37Z"
    },
    {
      "author": "jimwAtMs",
      "author_association": "NONE",
      "body": "I assume running 6.0 release has this fix, but passing in empty header gets a format exception, but on PS 5 it does not.\r\n\r\nThis works on 5 \r\nInvoke-WebRequest -Uri $uri -Method Post  -Headers @{Authorization=\"\"} @params\r\n\r\nOn 6 it gets this error.  Removing the Authorization header gets around it.\r\nInvoke-WebRequest : The format of value '' is invalid.",
      "created_at": "2018-01-24T12:26:22Z",
      "updated_at": "2018-01-24T12:26:22Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@jimwAtMs PowerShell Core now has strict header parsing on by default. Any headers passed to `-Headers` that are standards defined (such as `Authorization`) will result in a format error if the value is not standards compliant. You can bypass header validation with `-SkipHeaderValidation`\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/docs/BREAKINGCHANGES.md#changes-to-web-cmdlets\r\n\r\nMore info: https://get-powershellblog.blogspot.com/2017/11/powershell-core-web-cmdlets-in-depth.html#L08",
      "created_at": "2018-01-24T12:40:56Z",
      "updated_at": "2018-01-24T12:40:56Z"
    },
    {
      "author": "jimwAtMs",
      "author_association": "NONE",
      "body": "Thanks @markekraus",
      "created_at": "2018-01-24T13:11:38Z",
      "updated_at": "2018-01-24T13:11:38Z"
    }
  ],
  "created_at": "2016-12-16T05:19:47Z",
  "number": 2895,
  "state": "closed",
  "title": "invoke-webrequest and invoke-restmethod -headers parameter is more restrictive on PowerShell Core than on PowerShell Native",
  "updated_at": "2018-01-24T13:11:38Z"
}