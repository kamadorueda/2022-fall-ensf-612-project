{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14909",
  "author": "jhoneill",
  "body": "\r\n\r\n## Steps to reproduce\r\n\r\nThe help [here](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_outputtypeattribute?view=powershell-7.1) has an example which I have modified for clarity below\r\n```powershell\r\nfunction Get-User {\r\n  [CmdletBinding()]\r\n  [OutputType([System.Collections.Hashtable], ParameterSetName=\"Name\")]\r\n  [OutputType(\"System.io.file\", ParameterSetName=\"ID\")]\r\n  Param (\r\n    [parameter(Mandatory=$true, ParameterSetName=\"ID\")]\r\n    [Int[]] $UserID,\r\n\r\n    [parameter(Mandatory=$true, ParameterSetName=\"Name\")]\r\n    [String[]]    $UserName\r\n  )\r\n}\r\n```\r\nif `-userid `is specified it returns a file , if `-username` is specified it returns a hash table, So one would expect       \r\n`get-user  -id 1234 | select <tab>`    \r\nto cycle through the properties of file objects, but in fact it cycles through hash table properties. This happens in 7.1.2 and in the Windows PowerShell 5 ISE so I think it is a longstanding thing - and not a psreadline issue. \r\n\r\nI can't speak for other people's use but my main reason for setting output is for tab completion, but it appears that if multiple output types are given one is always selected  whatever parameter sets  say - changing the order they are declared, setting a default parameter set , putting all parameters in the ID set did not change the selection from hash table (nor does it appear to be alphabetical from the place where I first hit it) .  \r\n\r\n\r\n## Expected behavior\r\nTab expansion evaluates the parameter set and selects the correct object. If this isn't practical the help should spell out that multiple output types have limited use. \r\n\r\n## Actual behavior\r\nSee above\r\n\r\n## Environment data\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.2                       \r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}       \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That would make for a nice enhancement.\r\n\r\nNote that the current behavior isn't to pick _one_ type, but to use them _all_ and show the _union_ of their properties.\r\nYou didn't see that, because [`System.IO.File`](https://docs.microsoft.com/en-US/dotnet/api/System.IO.File) is a static class _without properties_ (also, just to avoid confusion: the parameter name in your example should be `-UserId`, not `-Id`).\r\n\r\nTo demonstrate:\r\n\r\n```powershell\r\nPS> & {\r\n    function foo { \r\n      [OutputType([regex], ParameterSetName='A')]\r\n      [OutputType([hashtable], ParameterSetName='B')]\r\n      [CmdletBinding(DefaultParameterSetName='A')] \r\n      param(\r\n       [Parameter(ParameterSetName='A')] $A, \r\n       [Parameter(ParameterSetName='B')] $B\r\n      )\r\n      \"...\" \r\n    } \r\n    $cmd = 'foo -A a | Select-Object '; (TabExpansion2 $cmd -cursorColumn $cmd.Length).CompletionMatches.CompletionText\r\n}\r\n# Sorted list of the *union* of [regex] and [hashtable] properties.\r\nCount\r\nIsFixedSize\r\nIsReadOnly\r\nIsSynchronized\r\nKeys\r\nMatchTimeout\r\nOptions\r\nRightToLeft\r\nSyncRoot\r\nValues\r\n```",
      "created_at": "2021-02-26T14:47:49Z",
      "updated_at": "2021-02-26T14:47:49Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> That would make for a nice enhancement.\r\n> \r\n> Note that the current behavior isn't to pick _one_ type, but to use them _all_ and show the _union_ of their properties.\r\n> You didn't see that, because [`System.IO.File`](https://docs.microsoft.com/en-US/dotnet/api/System.IO.File) is a static class _without properties_ \r\n\r\nThe example on docs used a string and an Int and I thought \"That's no good, no properties on an int\" so I went for two random types and picked file instead of file info.  And  just a moment ago I was talking about the phrase \"hoist by his own petard\" :-)  \r\n\r\nMy real world example is a function which might return something with a ton of properties or something with 3 and 3 will get lost in the others.  So the substantive \"Return [only] the right properties\" stands, but  thanks for fixing my confusion  - I had a dim memory of it being the union but I couldn't get that, Doh!\r\n\r\n> (also, just to avoid confusion: the parameter name in your example should be `-UserId`, not `-Id`).\r\nI've fixed that :-) \r\n",
      "created_at": "2021-02-26T15:13:00Z",
      "updated_at": "2021-02-26T15:13:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This was a big disappointment for me when I found out it just always assumed all output types.  It'd be nice if type inference used the pseudo parameter binder to narrow down the results, though it's probably not a small work item. Also may noticeably slow down tab completion in some scenarios without some work on static analysis performance.",
      "created_at": "2021-02-26T17:00:07Z",
      "updated_at": "2021-02-26T17:01:11Z"
    }
  ],
  "created_at": "2021-02-26T13:07:57Z",
  "number": 14909,
  "state": "open",
  "title": "Multiple Output types do not work for tab expansion as the help suggests",
  "updated_at": "2021-03-01T22:20:35Z"
}