{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5763",
  "author": "mklement0",
  "body": "Note: This issue may well be just a symptom of  #5579; if so, it still may be of interest, because it demonstrate that the linked issue has real-world consequences.\r\n\r\nPreference variable `$OutputEncoding` determines the encoding used to send text to external utilities.\r\n\r\nIn the _global_ scope, assigning the output from a `New-Object` call or, generally, a _command_ (as opposed to an _expression_) works fine.\r\n\r\nHowever, **in a _non-global_ scope, such as inside a function, it does not: assigning output from a _command_ to `$OutputEncoding` is effectively ignored.**\r\n\r\nFor simplicity, the example below uses `Write-Output` in a somewhat contrived manner, but **an attempt to use `New-Object` to instantiate a specific encoding, e.g., `New-Object System.Text.Utf8Encoding`, would exhibit the same problem: it would be ignored.**\r\n\r\nThe **workaround** is to apply `.psobject.BaseObject` to `New-Object`'s result, or, in PSv5+,  to use `[<encoding>]::new()` instead.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nOn Windows:\r\n\r\n```powershell\r\nfunction foo0 { '\u00fc' | findstr '\u00fc'  }\r\nfunction foo1 { $OutputEncoding = [Console]::OutputEncoding; '\u00fc' | findstr '\u00fc'  }\r\n# Same as foo1, except that Write-Output is used to produce output.\r\nfunction foo2 { $OutputEncoding = Write-Output ([Console]::OutputEncoding); '\u00fc' | findstr '\u00fc'  }\r\n\r\nfoo0; '---'; foo1; '---'; foo2\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n---\r\n\u00fc\r\n---\r\n\u00fc\r\n```\r\n\r\nNote that `foo0`, perhaps surprisingly, does _not_ output anything, because the default `$OuputEncoding` value - UTF-8 in PowerShell Core and ASCII in Windows PowerShell - results in output that prevents `findstr.exe` from matching non-ASCII characters.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n---\r\n\u00fc\r\n---\r\n```\r\n\r\nThat is, only the _expression-based_ assignment to the (non-global) `$OutputEncoding` variable took effect, not the _command-based_ one.\r\n\r\nThe command-based one seems to _quietly fall back to ASCII_.\r\n\r\nAlso note that this issue won't arise on _Unix_ platforms, where PowerShell now emits UTF-8 by default and external utilities such as `grep` expect just that.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-rc.2 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "`Write-Output [Console]::OutputEncoding` -> `Write-Output ([Console]::OutputEncoding)`\r\n\r\n[Culprit line](https://github.com/PowerShell/PowerShell/blob/master@%7B2017-12-30%7D/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1800). Should call `PSObject.Base` before `as`.",
      "created_at": "2017-12-30T04:32:39Z",
      "updated_at": "2017-12-30T04:32:39Z"
    }
  ],
  "created_at": "2017-12-30T02:34:56Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 5763,
  "state": "open",
  "title": "Preference variable $OutputEncoding in child scopes misbehaves with encodings created with New-Object / commands rather than expressions",
  "updated_at": "2020-02-10T02:43:12Z"
}