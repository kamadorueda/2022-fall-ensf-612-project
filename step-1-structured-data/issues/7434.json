{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7434",
  "author": "faraazahmad",
  "body": "Fix #4235 \r\n\r\n## PR Summary\r\n\r\nWrite non-terminating error when `Get-FormatData` doesn't found a type definition for the provided type,\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed - Issue link: #4235 \r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-10T04:34:03Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=7434) <br/>All CLA requirements met.",
      "created_at": "2018-08-02T06:06:42Z",
      "updated_at": "2018-08-02T06:09:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems we could use [TypeLoadException](https://msdn.microsoft.com/en-us/library/system.typeloadexception(v=vs.110).aspx)",
      "created_at": "2018-08-02T07:28:42Z",
      "updated_at": "2018-08-02T07:28:54Z"
    },
    {
      "author": "faraazahmad",
      "author_association": "CONTRIBUTOR",
      "body": "Some of those obvious comments were already there, so I didn't mess with them.",
      "created_at": "2018-08-02T08:12:54Z",
      "updated_at": "2018-08-02T08:19:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Is the fix good for you?",
      "created_at": "2018-08-02T10:49:49Z",
      "updated_at": "2018-08-02T10:49:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I added new commit to address your comment, please update your review.",
      "created_at": "2018-08-06T05:44:51Z",
      "updated_at": "2018-08-06T05:44:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @dantraMSFT Please update your review.",
      "created_at": "2018-08-08T05:24:50Z",
      "updated_at": "2018-08-08T05:24:50Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "HANG ON ... This is a **breaking** change to the function!!! \r\n\r\nDoes `-ErrorAction SilentlyContinue` work, or are you now forcing everyone to wrap this in a try/catch block?",
      "created_at": "2018-08-09T16:20:08Z",
      "updated_at": "2018-08-09T16:20:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul this is a non-terminating error",
      "created_at": "2018-08-09T16:29:23Z",
      "updated_at": "2018-08-09T16:29:23Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT it still breaks code like this, right?\r\n\r\n```powershell\r\nif(!(Get-FormatData $Type)) {\r\n   Update-FormatData -TypeName $Type ...\r\n}\r\n```\r\n\r\nI mean, in the sense that we now get an error where there was none, even though the user had _deliberately handled_ the situation **correctly** the way the cmdlet worked before.\r\n\r\nAre we only doing this because we think nobody uses it, or would you accept a PR for `Get-Module` too?\r\n\r\n_**This command follows the exact same semantics as `Get-Module` and may return **multiple** entries even without a wildcard. That's why it returns silently when it finds nothing.**_",
      "created_at": "2018-08-10T21:52:58Z",
      "updated_at": "2018-08-10T22:16:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul:\r\n\r\nYes, for someone who relied on the previous _de facto_ behavior, this would be a breaking change.\r\n\r\nThat in itself may be reason enough to not make the change - I have no sense of and have made no attempt to assess the real-world impact. What do you think the real-world impact is?\r\n\r\nOn the other end of the spectrum: _any_ bug fix is a breaking change: what used to break / work nonsensically before now no longer does.\r\n\r\nBut let us be clear re:\r\n\r\n> _deliberately handled the situation_ **correctly** \r\n\r\n_Correctly_ in this situation means:\r\n\r\n* inferred from the _de facto_ behavior\r\n\r\n* with no supporting evidence from the documentation\r\n\r\n* despite the behavior being inconsistent with that of other cmdlets.\r\n\r\nAnd, indeed, the same applies to the current behavior of `Get-Module`: with a non-wildcard argument it should _not_ default to quietly outputting \"nothing\" (`[System.Management.Automation.Internal.AutomationNull]::Value`)\r\n\r\n> or would you accept a PR for Get-Module too?\r\n\r\nIn that vein: either yes, or  document the surprising existing behavior - see #7498\r\n\r\nAs an aside: \r\n\r\n> may return multiple entries even without a wildcard.\r\n\r\nUnless you're referring to `Get-Module`'s `-ListAvailable` switch - an explicit opt-in to _multiple_ matches - neither `Get-Module` nor `Get-FormatData`  return multiple matches with _non-wildcard_ arguments.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-08-11T02:55:29Z",
      "updated_at": "2018-08-11T02:55:29Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "It's ironic that I'm the one arguing this -- I argued rather passionately against the no-output, no-error design pattern years ago in a discussion on the PowerShell MVP mailing list! Although at the time, my argument was _specifically_ against commands that behave differently when you have a simple name, versus a wildcard (thus allowing the possibility of multiple items).\r\n\r\nUltimately I was rather deluged with examples _from the broader ecosystem_ (Exchange, SCSM, etc.) showing examples of commands quietly returning nothing when they could have returned many things.  My point is that this is how PowerShell commands behave, in general:\r\n\r\n### _If the command **can** return MULTIPLE items_, then when there is nothing to return, they just return nothing. That's a deliberate design choice.\r\n\r\nAnd yes, you're wrong @mklement0, when you say that those commands don't return multiple items with simple parameters. Here are some concrete examples.\r\n\r\n```posh\r\n# There are about *eight* default rules that affect ScriptInfo, for example:\r\nGet-FormatData System.Management.Automation.ScriptInfo\r\n\r\n# Users can have multiple versions of the same module imported because of dependencies.\r\n# We can import multiple versions of Pester as an example...\r\n# (most of us have 3.4.0 and a newer one, right?):\r\nGet-Module Pester -ListAvailable | Import-Module\r\nGet-Module Pester\r\n```\r\n\r\nBut it's not just those, most of the default `Get` commands do this **if** they _could_ return multiple items:\r\n\r\n#### During the first command of your session, there's no history (or, do `Clear-History; Get-History`)\r\n```posh\r\nGet-History\r\n```\r\n\r\n#### When a folder is empty\r\n```posh\r\nmkdir emptyfolder\r\nGet-ChildItem .\\emptyfolder\r\n```\r\n\r\n#### When there's no input:\r\n```posh\r\nGet-Unique\r\n# Or even ...\r\nGet-ChildItem .\\EmptyFolder\\ | Get-Unique\r\n# Or even ...\r\nGet-ChildItem .\\EmptyFolder\\ | Get-Random\r\n```\r\n\r\n#### When there are no sessions\r\n```posh\r\nGet-PSSession\r\n```\r\n\r\n#### When there are no commands\r\n```posh\r\nGet-Command -Verb Build\r\n```\r\n\r\n#### When there's no TypeData:\r\n```posh\r\nGet-TypeData System.Boolean\r\n```\r\n\r\n#### When there's no Jobs:\r\n```posh\r\nGet-Job\r\n```\r\n\r\n#### When there's no scheduled jobs\r\n```posh\r\nGet-ScheduledJob\r\n```\r\n\r\n#### When the clipboard is empty, as after KeePass\r\n```posh\r\nSet-Clipboard $null \r\nGet-Clipboard\r\n```\r\n\r\nI trust I don't need to go through and test _every_ `Get` command to make the point?",
      "created_at": "2018-08-12T04:37:11Z",
      "updated_at": "2018-08-12T04:39:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul:\r\n\r\n> It's ironic that I'm the one arguing this \r\n\r\nI hear you, but let me ask you this before I address your examples:\r\n\r\n* Despite your earlier misgivings, do all the behaviors you list now make sense to you?\r\n\r\n* Do you believe that all of them apply directly to the case at hand?\r\n\r\n",
      "created_at": "2018-08-12T05:09:38Z",
      "updated_at": "2018-08-12T05:09:38Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "They make sense:\r\n\r\n1. They are returning what's there.\r\n2. They are consistent to the principle that if the command can return multiple items, in any particular case where there is nothing to return, they return that -- without error.\r\n\r\nObviously in a lot of these cases, it's very clear that there's not an error. That is (if you understood the situation), you didn't actually expect there to be any child items, history, jobs, content, sessions, etc...\r\n\r\nI think all of them are examples of the rule, and serve to show that this cmdlet was correct without the PR.\r\n\r\n----\r\n\r\nFor what it's worth:\r\n\r\n**If** we were willing to break the backward compatibility of PowerShell, then I would be happy to argue again this design pattern and try to convince the world that **all** commands should have the same output behavior regardless of _how many_ items they might output:\r\n\r\n1. Users (and developers) can't always tell _when_ this will be the case.\r\n2. Although it's a \"common\" design pattern, it's clearly not well-known or documented.\r\n\r\nBut in reality, changing this behavior across all the built-in commands would break _too much_, and there's no way to actually \"fix\" it because too many commands are outside the control of this team.  We should therefore _not_ alter the expectations of design, and thus, should not change commands.",
      "created_at": "2018-08-13T15:04:13Z",
      "updated_at": "2018-08-13T15:05:43Z"
    },
    {
      "author": "faraazahmad",
      "author_association": "CONTRIBUTOR",
      "body": "I have to agree with @Jaykul , this makes sense. For example, if I `ls` an empty directory, the expected behaviour would be to not print anything, and not throw an error.",
      "created_at": "2018-08-14T13:41:49Z",
      "updated_at": "2018-08-14T13:41:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The issue is not about _output_ behavior, so what I should've said earlier is: unless you explicitly opt in with switches such as `-ListAvailable`, specifying a literal name _targets a specific, single entity_ (and how many objects are output as a result is incidental).\r\n\r\nThe issue is that if you're asking for a _specific entity_ by its _literal_ name (as opposed to a wildcard pattern), not finding that entity should be an _error_.\r\n\r\n(By contrast, a _wildcard pattern_ quietly producing no output if no matches are found makes sense (`Get-FormatData *NoSuch*`), because instead of saying \"give me entity x\" you're saying \"give me whatever entities happen to match this pattern, if any\".)\r\n\r\nThis is how it currently works in _most_ cmdlets, `Get-Module` and `Get-TypeData` being the only other exceptions that I'm aware of - and they should be fixed as well, or - if that is considered too breaking a change - their aberrant behavior should be documented; I've created an issue for `Get-TypeData` as well: #7521\r\n\r\nTo quote @BrucePay [from the `Get-Module` issue](https://github.com/PowerShell/PowerShell/issues/7498#issuecomment-412662115) that I've opened: \r\n\r\n> As a matter of _convention_, we usually generate an error for a non-wildcard query e.g. `get-item nosuchitem` returns a error, but `get-module nosuchmodule` quietly returns nothing.\r\n\r\n\r\nNone of @Jaykul's other examples therefore apply: \r\n\r\n* Targeting _no_ specific entity (e.g., `Get-History`) is a different use case: you're asking for existing entities to be _enumerated_.\r\n\r\n*  As for `Get-ChildItem .\\emptyfolder`: the named specific entity is _found_, and it just so happens that the information _about_ that entity results in no output, but, as stated, that is incidental. What matters is that if the entity is _not_ found, an error is reported: `Get-ChildItem NoSuchDir`\r\n\r\n",
      "created_at": "2018-08-14T15:22:29Z",
      "updated_at": "2018-08-15T03:49:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nIf this fix is ultimately kept, I suggest amending the error message in 2 ways:\r\n\r\n* Make it clear that what couldn't be found wasn't a _type per se_, but that type's _formatting data_  _loaded into the current session_.\r\n\r\n* Given the need to to always specify the _full_ type name (that is, you cannot omit the `System.` component and you cannot use type accelerators), the error message should provide a hint to that effect.\r\n\r\nTherefore, instead of `The type name '{0}' could not be found.`, perhaps we could say:\r\n\r\n```none\r\nNo formatting data for type name '{0}' has been loaded into the current session.\r\nNote that type names must be specified exactly as defined and are typically full .NET type names.\r\n```",
      "created_at": "2018-08-14T16:37:47Z",
      "updated_at": "2018-08-14T16:37:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and we also discussed it in this morning's Community Call.  We agreed that the intent is that if a literal is passed and is not found, it should return a non-terminating error.  Cmdlets that don't have this behavior have bugs.  In cases where it's explicit or implicit filtering, it should return nothing.  We also agreed that we should revert this change and revisit making cmdlets consistent in 6.2.  Finally, the real issue is that we are missing Test-* cmdlets so users had to rely on current behavior with Get-* cmdlets to see if something exists and we should add those cmdlets in the future.",
      "created_at": "2018-08-16T18:15:10Z",
      "updated_at": "2018-08-16T18:15:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I think you're going to break so very many things -- that 6.2 needs to be 7.0 to be semantic",
      "created_at": "2018-08-16T18:52:57Z",
      "updated_at": "2018-08-16T18:52:57Z"
    },
    {
      "author": "essentialexch",
      "author_association": "NONE",
      "body": "Lord have mercy... once you do this, WPS and CPS are completely different languages that just happen to be related. Forget about moving scripts between the two.",
      "created_at": "2018-08-16T21:41:46Z",
      "updated_at": "2018-08-16T21:41:46Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I heard today in the @PowerShell/powershell-committee Community Call that we're going to revert this and work towards consistency and `Test-*` cmdlets across the board. \r\n\r\n@SteveL-MSFT if we agree that's the case, will the revert make RC? GA? ",
      "created_at": "2018-08-16T21:51:31Z",
      "updated_at": "2018-08-16T21:51:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The @PowerShell/powershell-maintainers will be reverting this commit, but that won't happen for RC where we are already in process of release but will make it for GA.  @iSazonov if you are available, can you revert this as the other maintainers are working on the release?",
      "created_at": "2018-08-16T21:53:51Z",
      "updated_at": "2018-08-16T21:53:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT The commit already reverted by @TravisEz13 \r\n\r\nHave we a tracking issue to address the PowerShell Committee conclusion about Get-* and Test-* cmdlets.",
      "created_at": "2018-08-17T03:44:05Z",
      "updated_at": "2018-08-17T03:48:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov The discussion is continuing in https://github.com/PowerShell/PowerShell/issues/7498.  I've created https://github.com/PowerShell/PowerShell/issues/7562 for new Test- cmdlets",
      "created_at": "2018-08-17T16:16:36Z",
      "updated_at": "2018-08-17T16:16:36Z"
    },
    {
      "author": "faraazahmad",
      "author_association": "CONTRIBUTOR",
      "body": "Didn't know my first contribution to Powershell could stir up so back and forth :sweat_smile:. Is it safe to delete the branch?",
      "created_at": "2018-08-17T17:17:27Z",
      "updated_at": "2021-09-15T12:22:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@faraazahmad I think it's a healthy discussion.  Yes, you can delete the branch.",
      "created_at": "2018-08-17T17:29:01Z",
      "updated_at": "2018-08-17T17:29:01Z"
    }
  ],
  "created_at": "2018-08-02T06:06:31Z",
  "number": 7434,
  "state": "closed",
  "title": "Throw error on entering non-existing type in Get-FormatData",
  "updated_at": "2021-09-15T12:22:47Z"
}