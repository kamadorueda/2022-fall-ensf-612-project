{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14985",
  "author": "4mitch",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\nHello! \r\nDuring debugging legacy code I faced with weird behaviour. \r\nI have a module without _Export-ModuleMember_ statements. And two nested invoked scripts. And it occurs that variables defined in imported module are not available in script imported the module - this is ok, because no _Export-ModuleMember_ . But! but these variables become visible in next nested script! And even after I imported one more module there with redefining variables with same name. And again, imported module variables become visible in one more nested invoked script \ud83e\udd14\r\n\r\nBut the main point that this is a case only when I wrapped _Invoke-Expression_ command into function, which resides in that imported module.\r\n\r\n## Steps to reproduce\r\n\r\nHow to reproduce - download enclosed files into folder and run \r\n`& {.\\MainScript.ps1}`. This will results in what shown in **Actual behavior** part - **unexported** (leaked) variable $WAT1 is **visible** from nested scripts scope (btw it does not have `(Get-Variable WAT1).Module` property value!). But it should not be visible, since it is not exported from the module.\r\n\r\n[ImportModuleScopeLeakExample.zip](https://github.com/PowerShell/PowerShell/files/6118448/ImportModuleScopeLeakExample.zip)\r\n\r\n\r\nMainScript.ps1\r\n```powershell\r\n\r\nImport-Module -Name ${PSScriptRoot}\\ModuleTEST_wo_Export_1.psm1 -Force\r\n\r\n\r\ntry {\r\n    Get-Variable WAT1 -ErrorAction Stop\r\n    Write-Host \"I don't want to read that line, must be alredy catched due to error in previous line.\" -ForegroundColor Red\r\n}\r\ncatch [System.Management.Automation.ItemNotFoundException] {\r\n    Write-Host \"I awaits this catch, cause WAT1 is not exported.\"\r\n}\r\n\r\nWrite-Host \"Here WAT1 should not be visible here $WAT1 ***\"\r\n\r\ninvoke-exp -scriptfile  \"${PSScriptRoot}\\Level1ChildScript.ps1\"\r\n# Invoke-Expression '.\\Level1ChildScript.ps1'\r\n\r\ntry {\r\n    $(Get-Variable WAT1 -ErrorAction Stop | select Value )\r\n    Write-Host \"I don't want to read that line, must be alredy catched due to error in previous line.\" -ForegroundColor Red\r\n}\r\ncatch [System.Management.Automation.ItemNotFoundException] {\r\n    Write-Host \"I awaits this catch, cause WAT1 is not exported.\"\r\n    Write-Host \"Still no WAT1 variable awaited here.\"\r\n}\r\n\r\n\r\n```\r\n\r\nLevel1ChildScript.ps1\r\n```powershell\r\nImport-Module -Name ${PSScriptRoot}\\ModuleTEST_wo_Export_2.psm1 -Force\r\n\r\ntry {\r\n    Get-Variable WAT1 -ErrorAction Stop\r\n    Write-Host \"    I don't want to read that line, must be alredy catched due to error in previous line.\" -ForegroundColor Red\r\n}\r\ncatch [System.Management.Automation.ItemNotFoundException] {\r\n    Write-Host \"    I awaits this catch cause WAT1 is not exported.\"\r\n}\r\nWrite-Host \"    Here WAT1 should not be visible here - $WAT1 ***\"\r\n\r\n\r\n# Invoke-Expression  ${PSScriptRoot}\\Level2ChildScript.ps1\r\n# . ${PSScriptRoot}\\Level2ChildScript.ps1\r\n\r\ninvoke-exp -scriptfile  ${PSScriptRoot}\\Level2ChildScript.ps1\r\n\r\ntry {\r\n    $(Get-Variable WAT1 -ErrorAction Stop | select Value )\r\n    Write-Host \"    I don't want to read that line, must be alredy catched due to error in previous line.\" -ForegroundColor Red\r\n}\r\ncatch [System.Management.Automation.ItemNotFoundException] {\r\n    Write-Host \"    I awaits this catch, cause WAT1 is not exported.\"\r\n    Write-Host \"    Still no WAT1 variable awaited here.\"\r\n}\r\n```\r\n\r\nLevel2ChildScript.ps1\r\n```powershell\r\n\r\ntry {\r\n    Get-Variable WAT1 -ErrorAction Stop\r\n    Write-Host \"        I don't want to read that line, must be alredy catched due to error in previous line.\" -ForegroundColor Red\r\n}\r\ncatch [ItemNotFoundException] {\r\n    Write-Host \"        I awaits this catch cause WAT1 is not exported.\"\r\n}\r\nWrite-Host \"        Here WAT1 should not be visible here - $WAT1 ***\"\r\n```\r\n\r\nModuleTEST_wo_Export_1.psm1\r\n```powershell\r\n$WAT1 = 'SUPER PUPER ONE FROM MODULE 1!'\r\n\r\nfunction send-message_wait_color(){\r\n\tparam([string] $functionName)\r\n\twrite-host \"Start processing function:$functionName..\" -ForegroundColor Yellow\r\n}\r\n\r\nfunction send-message_complete_color(){\r\n\tparam([string] $functionName)\r\n    write-host $functionName is Done -ForegroundColor Green\r\n}\r\n\r\nfunction invoke-exp(){\r\n\tparam([string] $scriptfile,[string] $filepath='')\r\n    send-message_wait_color -functionName \"deployment of: $scriptfile\"\r\n\tInvoke-Expression $scriptfile\r\n    send-message_complete_color -functionName \"deployment of: $scriptfile\"\r\n}\r\n```\r\n\r\nModuleTEST_wo_Export_2.psm1\r\n```powershell\r\n$WAT1 = 'SUPER PUPER ONE FROM MODULE 2!'\r\n\r\nfunction invoke-exp(){\r\n\tparam([string] $scriptfile,[string] $filepath='')\r\n    send-message_wait_color -functionName \"deployment of: $scriptfile\"\r\n\tInvoke-Expression $scriptfile\r\n    send-message_complete_color -functionName \"deployment of: $scriptfile\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\n\r\nPS C:\\dev\\PowerShell\\BUG> & {.\\MainScript.ps1 }\r\nI awaits this catch, cause WAT1 is not exported.\r\nHere WAT1 should not be visible here  ***\r\n    I awaits this catch cause WAT1 is not exported.\r\n    Here WAT1 should not be visible here -  ***\r\n        I awaits this catch cause WAT1 is not exported.\r\n        Here WAT1 should not be visible here -  ***\r\n    I awaits this catch, cause WAT1 is not exported.\r\n    Still no WAT1 variable awaited here.\r\nI awaits this catch, cause WAT1 is not exported.\r\nStill no WAT1 variable awaited here.\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nPS C:\\dev\\PowerShell\\BUG> & {.\\MainScript.ps1 }\r\nI awaits this catch, cause WAT1 is not exported.\r\nHere WAT1 should not be visible here  ***\r\nStart processing function:deployment of: C:\\dev\\PowerShell\\BUG\\Level1ChildScript.ps1..\r\n\r\nName                           Value\r\n----                           -----\r\nWAT1                           SUPER PUPER ONE FROM MODULE 1!\r\n    I don't want to read that line, must be alredy catched due to error in previous line.\r\n    Here WAT1 should not be visible here - SUPER PUPER ONE FROM MODULE 1! ***\r\nStart processing function:deployment of: C:\\dev\\PowerShell\\BUG\\Level2ChildScript.ps1..\r\nWAT1                           SUPER PUPER ONE FROM MODULE 2!\r\n        I don't want to read that line, must be alredy catched due to error in previous line.\r\n        Here WAT1 should not be visible here - SUPER PUPER ONE FROM MODULE 2! ***\r\ndeployment of: C:\\dev\\PowerShell\\BUG\\Level2ChildScript.ps1 is Done\r\n\r\nValue : SUPER PUPER ONE FROM MODULE 1!\r\n\r\n    I don't want to read that line, must be alredy catched due to error in previous line.\r\ndeployment of: C:\\dev\\PowerShell\\BUG\\Level1ChildScript.ps1 is Done\r\nI awaits this catch, cause WAT1 is not exported.\r\nStill no WAT1 variable awaited here.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2021-03-16T13:37:13Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`Invoke-Expression` will invoke the script in whatever the current scope is.  In this case, that'll be the wrapper function.\r\n\r\nThis is one of the reasons why it's generally preferred to use scriptblocks instead as they'll be bound the session state they're created in.  e.g.:\r\n\r\n```powershell\r\nfunction Invoke-Wrapper {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [ValidateNotNull()]\r\n        [scriptblock] $Action\r\n    )\r\n    end {\r\n        Write-Host 'before'\r\n        . $Action\r\n        Write-Host 'after'\r\n    }\r\n}\r\n```",
      "created_at": "2021-03-10T17:27:55Z",
      "updated_at": "2021-03-10T17:27:55Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "> `Invoke-Expression` will invoke the script in whatever the current scope is. In this case, that'll be the wrapper function.\r\n> \r\n> This is one of the reasons why it's generally preferred to use scriptblocks instead as they'll be bound the session state they're created in. e.g.:\r\n\r\nOk. But I cannot see how this explains why **non-exported Variables** leak from imported module is such strange way. For me it looks like a bug.",
      "created_at": "2021-03-10T17:52:37Z",
      "updated_at": "2021-03-10T17:52:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Can those repro steps be reduced to the specific code that doesn't behave how you expect?",
      "created_at": "2021-03-10T18:09:01Z",
      "updated_at": "2021-03-10T18:09:01Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "I added a description right after **Steps to reproduce** header. Reduced code is `& {.\\MainScript.ps1}`. Is this sufficient for you? \r\nOr you mean to make a single script to repro? \ud83e\udd14\r\n",
      "created_at": "2021-03-10T18:36:47Z",
      "updated_at": "2021-03-10T18:37:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Like smallest total content that still shows the issue.  Makes it a lot easier to see where specifically the difference is if that makes sense",
      "created_at": "2021-03-10T18:45:09Z",
      "updated_at": "2021-03-10T18:45:09Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "Good! I did my best to reduce it as much as possible :) As for me, it looks a bit cleaner now, what do you think?",
      "created_at": "2021-03-10T19:48:48Z",
      "updated_at": "2021-03-10T19:48:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Can you confirm if this also demonstrates the issue?\r\n\r\n```powershell\r\n$module1 = New-Module {\r\n    $Internal = 'Module 1'\r\n\r\n    function Invoke-Exp {\r\n        param([string] $ScriptFile)\r\n        Invoke-Expression $ScriptFile\r\n    }\r\n}\r\n\r\n$module2 = New-Module {\r\n    $Internal = 'Module 2'\r\n\r\n    function Invoke-Exp {\r\n        param([string] $ScriptFile)\r\n        Invoke-Expression $ScriptFile\r\n    }\r\n}\r\n\r\nImport-Module -ModuleInfo $module1 -Force\r\n\"Value is: $Internal\"\r\nInvoke-Exp '\r\n    Import-Module -ModuleInfo $module2\r\n    \"Value is: $Internal\"\r\n    Invoke-Exp ''\"Value is: $Internal\"''\r\n    \"Value is: $Internal\"\r\n'\r\n\r\n\"Value is: $Internal\"\r\n```\r\n\r\nReturning:\r\n```raw\r\nValue is:\r\nValue is: Module 1\r\nValue is: Module 2\r\nValue is: Module 1\r\nValue is:\r\n```",
      "created_at": "2021-03-10T20:22:48Z",
      "updated_at": "2021-03-10T20:23:16Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "> Can you confirm if this also demonstrates the issue?\r\n\r\nYes, I confirm this. Looks pretty similar to my case. I thought that to have it in separate files is important.\r\n",
      "created_at": "2021-03-10T20:41:35Z",
      "updated_at": "2021-03-10T20:41:35Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "@daxian-dbw Hi! Could you please remove \"Waiting on Author\" tag?",
      "created_at": "2021-03-12T08:18:41Z",
      "updated_at": "2021-03-12T08:18:41Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Sorry I got caught up with something else.\r\n\r\nSo this behavior is expected, the `Invoke-Expression` is running in the scope of the module.  Nothing is actually leaking here, just the expression is being invoked in a scope where the variable is visible.",
      "created_at": "2021-03-12T15:19:39Z",
      "updated_at": "2021-03-12T15:19:39Z"
    },
    {
      "author": "4mitch",
      "author_association": "NONE",
      "body": "Wow! Thank you! Now I can see that. Please close the ticket!\r\nI must be careful with all that scope. Seems better not to use module variables in functions at all. All other functions from module will behave similar \ud83e\udd14 like this\r\n\r\n```\r\n$module1 = New-Module {\r\n    $Internal = 'Module 1'\r\n\r\n    function Get-Var {\r\n        param ($name)\r\n        Get-Variable -Name $name -Scope script\r\n    }\r\n\r\n    function Invoke-Exp {\r\n        param([string] $ScriptFile)\r\n        Invoke-Expression $ScriptFile\r\n    }\r\n}\r\n\r\n$module2 = New-Module {\r\n    $Internal = 'Module 2' \r\n    function Get-Var {\r\n        param ($name)\r\n        Get-Variable -Name $name -Scope script\r\n    }\r\n\r\n    function Invoke-Exp {\r\n        param([string] $ScriptFile)\r\n        Invoke-Expression $ScriptFile\r\n    }\r\n}\r\n\r\nImport-Module -ModuleInfo $module1 -Force\r\n$Internal = 'Script'\r\n\"Var value is: $((Get-Var -name Internal).Value)\"\r\nInvoke-Exp '\r\n    Import-Module -ModuleInfo $module2\r\n    \"Var value is: $((Get-Var -name Internal).Value)\"\r\n    \"Var value is: $((Get-Var -name Internal).Value)\"\r\n'\r\n\r\n\"Var value is: $((Get-Var -name Internal).Value)\"\r\n```\r\n\r\nReturning:\r\n\r\n```\r\nVar value is: Module 1\r\nVar value is: Module 2\r\nVar value is: Module 2\r\nVar value is: Module 1\r\n```",
      "created_at": "2021-03-16T13:37:13Z",
      "updated_at": "2021-03-16T13:37:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Seems better not to use module variables in functions at all.\r\n\r\nI'd more recommend avoiding `Invoke-Expression` tbh.  The scriptblock method of managing callbacks [described in this comment](https://github.com/PowerShell/PowerShell/issues/14985#issuecomment-795781155) avoids all those issues as scriptblocks are bound to the module they're created in.\r\n\r\n`Invoke-Expression` has a lot of other issues as well.  Potential security issues if used with user input, no error/verbose/etc streams, limited `$MyInvocation` info, no `begin` or `process` blocks, and poor performance to name a few.",
      "created_at": "2021-03-16T13:52:49Z",
      "updated_at": "2021-03-16T13:52:49Z"
    }
  ],
  "created_at": "2021-03-10T13:08:00Z",
  "number": 14985,
  "state": "closed",
  "title": "When Invoke-Expression wrapped in function then Import-Module leads to weird variable scope leaking",
  "updated_at": "2021-03-16T13:52:50Z"
}