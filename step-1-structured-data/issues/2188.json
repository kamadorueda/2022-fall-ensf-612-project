{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2188",
  "author": "SRGOM",
  "body": "Sorely missing the ability of being able to go to previous directory without any previous action.\n",
  "closed_at": "2018-06-26T07:21:39Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Good point! We probably should add `cd -` syntax at the same time.\n",
      "created_at": "2016-09-05T17:23:51Z",
      "updated_at": "2016-09-05T17:23:51Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@SRGOM For now you can use `Push-Location` (alias pushd) and `Pop-Location` (alias popd).\n",
      "created_at": "2016-09-05T17:24:12Z",
      "updated_at": "2016-09-05T17:24:12Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@vors if you're going to do that then go all the way and implement a directory history stack e.g.:\n\n```\n13> cd\n\n     # Directory Stack:\n   --- ----------------\n     0 C:\\Users\\Keith\n     1 C:\\Users\\Keith\\GitHub\\PowerShell\\Plaster\n     2 C:\\Users\\Keith\\GitHub\\rkeithhill\\PowerShellEditorServices\n     3 C:\\Users\\Keith\\GitHub\\rkeithhill\\vscode-powershell\n     4 C:\\Users\\Keith\\GitHub\\rkeithhill\\vscode-powershell\\scripts\n     5 C:\\Users\\Keith\\GitHub\\rkeithhill\\vscode-powershell\n->   6 C:\\Users\\Keith\\GitHub\\rkeithhill\n\n~\\GitHub\\RKEITHHILL\n14> cd -\n~\\GitHub\\rkeithhill\\vscode-powershell\n15> cd -\n~\\GitHub\\rkeithhill\\vscode-powershell\\scripts\n16> cd +\n~\\GitHub\\rkeithhill\\vscode-powershell\n17> cd -1\n~\\GitHub\\PowerShell\\Plaster\n18> cd $profile\n~\\Documents\\WindowsPowerShell\n19> cd c:\\program files\nC:\\program files\n```\n\nSee https://github.com/Pscx/Pscx/blob/master/Src/Pscx/Modules/CD/Pscx.CD.psm1\n",
      "created_at": "2016-09-05T17:40:45Z",
      "updated_at": "2016-09-05T17:40:45Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill `cd -` actually was part of https://github.com/PowerShell/PowerShell/issues/1083#issuecomment-228840665 \n\nIs this history stack used in other shells?\n",
      "created_at": "2016-09-05T19:03:34Z",
      "updated_at": "2016-09-05T19:03:34Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@vors Take Command supports this: https://jpsoft.com/help/index.htm?cd.htm\n\nIn fact, you will probably find several PowerShell modules that implement CD history in different ways.  The one above is from PSCX.  I've seen other modules that retain history and use fuzzy matching to find the directory with auto-completion as you type IIRC.  There's likely enough variation here that this functionality is best implemented by 3rd party modules.\n",
      "created_at": "2016-09-05T19:19:55Z",
      "updated_at": "2016-09-05T19:19:55Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "That's what I think. There are a lot of approaches for advanced usage and they are implemented or could be implemented as additional modules. Core functionality should be conservative and universal. PowerShell team agreed that `cd -` should be included in the core `cd`, but that's probably where we stop.\n",
      "created_at": "2016-09-05T20:07:10Z",
      "updated_at": "2016-09-05T20:07:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'm a bit confused. If `cd -` is in the core cd, doesn't that make `cd` into `pushd` and `popd`?\n\nOr perhaps I should say: maybe you should implement `cd` as a **function** which calls `pushd` (or `popd`).\n",
      "created_at": "2016-09-05T23:33:13Z",
      "updated_at": "2016-09-05T23:35:21Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> If cd - is in the core cd, doesn't that make cd into pushd and popd?\n\nNo, because it will only keep knowledge about 1 previous location. And this location could be `$env:OLDPWD` which would address the original issue described by @SRGOM \n",
      "created_at": "2016-09-06T00:30:35Z",
      "updated_at": "2016-09-06T00:30:35Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "I should note that I wouldn't want this to be specific to OS-Linux, although yes such a functionality isn't present in Windows already. \n\nLook at http://linux.die.net/man/1/zshoptions if you want to know what all options zsh has.  A lot of us use a lot of options over there. \n\nI would love to use an actual programming language with a clean syntax as my shell but I will not give up the ease of access that comes with bash/zsh. I will list a few power tools/options that come to my mind that are absolutely indispensable to me and the power users I know. \n\n1) History, big deal for most. I have this `setopt histfindnodups histignoredups histignorespace`. I want to be able to search through it, and very quickly\n\n2) Moving around- I use github:rupa/z which is a fuzzy matcher. You think you can show a navigable dropdown in fuzzy `cd` mode? Maybe call it zd? z doesn't have a dropdown but its still very cool \n\n3) Completion/editing - one area where I feel PSReadLine is lacking compared to  bash/zsh. (Or maybe I don't know enough? Please correct me). Can't do Ctrl-X Ctrl-E (edit command in EDITOR), Alt-s, cycle through completions in bash or just repeated tabs in zsh. \n\nTBC- I don't want PoSh to grow haphazardly like bash/zsh which are really pathetic for anything but interactive use. I also love the long-names, it makes my history so much better to read. But it's just very lacking for interactive use. \n\nI hope you guys incorporate features from zsh while keeping Powershell consistent and solid. \n",
      "created_at": "2016-09-06T02:19:16Z",
      "updated_at": "2016-09-06T02:19:16Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you for the thoughtful feedback!\n\nYes, definitely not only on unix. We would like to keep the experience as close as it possible on all platforms.\n\nAbsolutely agree about history. In fact, the very first PS code that I wrote was https://github.com/vors/PersistentHistory (yes, PowerShell didn't have persistent history built-in, kind of crazy). Meanwhile, **PSReadLine** was included in the out-of-the-box package and it addressed a lot of interactive usage issues, including history.\nI.e. `histfindnodups histignoredups` == `Set-PSReadlineOption -HistoryNoDuplicates`.\n`Ctrl-X Ctrl-E` is probably not in the standard keybindings, but can be added with `Set-PSReadlineKeyHandler`\n\nFor moving around, there are projects inspired by `autojump` and `z.sh`\n\nhttps://github.com/tkellogg/Jump-Location\nhttps://github.com/vors/ZLocation\n\nThey haven't been ported to Unix yet, but ZLocation probably would be [at some point](https://github.com/vors/ZLocation/issues/32).\nAlso, as @rkeithhill mentioned, PSCX has a replacement for `cd`. The point here is: there are a lot of different approaches about moving around and I don't think that we should pick THE ONE to be included in the core. They are already implemented (or could be implemented) as 3rd party modules.\nMeanwhile, cerating things (like `cd -`) could and probably should be included in the out-of-the-box expirience, because it's well established and expected in unix shells.\n",
      "created_at": "2016-09-06T04:31:32Z",
      "updated_at": "2016-09-06T04:31:32Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your reply, @vors. I agree about a careful boundary about what should be in powershell and what should be outside. I do think that certain useful functionality should be added-on by default using external packages, PS-Readline itself being a great example.\n",
      "created_at": "2016-09-06T16:52:33Z",
      "updated_at": "2016-09-06T16:52:45Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "I think I agree about the history part btw- it doesn't belong in Powershell itself (just like a lot of things don't). I'm right now on Linux and not liking how zsh/bash handle history order and timestamps(love everything else history-related). Maybe there's a need to stop and think about the right way of doing things. \n",
      "created_at": "2016-09-11T09:59:23Z",
      "updated_at": "2016-09-11T09:59:23Z"
    },
    {
      "author": "Bill-Stewart",
      "author_association": "NONE",
      "body": "If we are talking about a location history (like command history, except locations only), then yes please.",
      "created_at": "2017-01-31T15:39:20Z",
      "updated_at": "2017-01-31T15:39:20Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Can you please rename the issue title to reflect its current state better. Something like `Add support for 'cd -'`?",
      "created_at": "2018-05-26T21:13:04Z",
      "updated_at": "2018-05-26T21:13:04Z"
    }
  ],
  "created_at": "2016-09-05T15:34:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Hacktoberfest"
  ],
  "number": 2188,
  "state": "closed",
  "title": "Add support for 'cd -'",
  "updated_at": "2018-06-29T15:04:19Z"
}