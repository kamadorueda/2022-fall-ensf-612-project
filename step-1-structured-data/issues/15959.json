{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15959",
  "author": "mklement0",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen calling external programs on Unix-like platforms, native globbing can be bypassed on demand with single- or double-quoting an argument; e.g., `/bin/echo '*'`\r\n\r\nThe same should work with selectively escaping globbing metacharacters with `` ` `` in _unquoted_ arguments, but currently doesn't.\r\n\r\n```powershell\r\n# On Unix\r\n/bin/echo `*\r\n```\n\n### Expected behavior\n\n```console\n*\n```\n\n\n### Actual behavior\n\n```console\nThe names of all files and directories are output, because globbing was unexpectedly still applied.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPowerShell Core 7.2.0-preview.8 on Unix-like platforms.\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-09-07T20:00:45Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Why expected behavior is `*` output? In bash `echo *` outputs string with all files and directories in current location (space separated). In pwsh ```/bin/echo `*``` outputs string of unhidden files and directories",
      "created_at": "2021-08-20T07:45:00Z",
      "updated_at": "2021-08-20T07:45:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Because `` `* `` is an _escaped_ `*` character, to be used _verbatim_ - just like `'*'`, which _does_ bypass native globbing.\r\n",
      "created_at": "2021-08-20T15:32:56Z",
      "updated_at": "2021-08-20T15:32:56Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Escaping is not equivalent quoting. You pass the escaped character to receive it as is. So that it is not lost or it is not interpreted in some other way. So `/bin/echo` gets everything as it is. Maybe I'm wrong, but that's how I understand this.",
      "created_at": "2021-08-20T17:16:03Z",
      "updated_at": "2021-08-20T17:16:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, escaping is equivalent to quoting  - just two different ways of achieving the same effect; compare `` Write-Output `| ``  to `Write-Output '|'`\r\n\r\n> You pass the escaped character to receive it as is\r\n\r\nThat's precisely the point, and passing `*` as-is means just that: the external executable `/bin/echo` should receive `*` verbatim and therefore also print it verbatim.\r\n\r\nNote that _no (native) shell is involved_ in such a call.\r\n \r\nIt is _PowerShell_ that _emulates_ a feature of POSIX-compatible shells - hence the name native globbing - and the external utility being invoked sees the _results_ of that. And if I'm telling _PowerShell_ to treat a character verbatim, it should therefore not apply this emulation - irrespective of the syntax form used.\r\n\r\n",
      "created_at": "2021-08-20T17:24:19Z",
      "updated_at": "2021-08-20T17:24:19Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> compare ```Write-Output `|``` to `Write-Output '|'`\r\n\r\n```powershell\r\nPS > /bin/echo `|\r\n|\r\nPS >\r\n```\r\nPerhaps the  `*` character is a special character for `/bin/echo`, which should \u0435xplicitly be in quotation marks.",
      "created_at": "2021-08-20T19:34:01Z",
      "updated_at": "2021-08-20T19:34:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "No, `*` has no special meaning to `/bin/echo`.\r\n\r\nThis is purely about _PowerShell_ respecting the explicitly signaled intent to treat a character verbatim, which _if unquoted or unescaped_ would have special meaning (a _situational_ metacharacter that only acts a such when (a) calling _external programs_ and (b) on Unix-like platforms only).\r\n\r\n(The same applies to `?` and `[`.)",
      "created_at": "2021-08-20T19:39:33Z",
      "updated_at": "2021-08-20T19:42:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "And, to be clear, programs on Unix receive arguments as an array of verbatim values - they have no information about what particular shell with what particular quoting/escaping syntax was used to translate a command line into that array of verbatim values. For instance, ``/bin/echo `|``, `/bin/echo '|'` and `/bin/echo \"|\"` all result in the _same_ invocation of `/bin/echo`, namely with an argument array whose 2nd  element contains verbatim `|` (the 1st element is the executable name or path itself).",
      "created_at": "2021-08-20T19:48:14Z",
      "updated_at": "2021-08-20T19:49:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine discussed this issue in today's meeting.\r\n\r\nOur opinion is that this issue with wildcards is not exclusive to the native command globbing behaviour &mdash; although, yes, the ability to use quotes to quietly bypass the globbing behaviour is specific to this experimental feature.\r\n\r\nGiven that there is currently a workaround that will likely suffice for most use cases, which @mklement0 outlines in the initial post, we would prefer effort be spent investigating more complete fixes for the issues with wildcard escaping that currently exist, rather than trying to design exceptions to the wildcard handling specifically for this feature. If a robust solution can be found to that issue (see #7999; there is also some relevant discussion in #7399), it would become trivial to incorporate the solution into the behaviour of this feature as well.\r\n\r\nIdeally the functionality of this feature should match the behaviour of wildcard globbing as implemented in provider cmdlets.\r\n\r\nGiven that, we don't think this specific issue makes sense to fix in isolation, and it would be likely to result in additional confusion when such a workaround would subsequently fail to work with wildcards in other areas of pwsh.",
      "created_at": "2021-09-03T02:51:53Z",
      "updated_at": "2021-09-03T02:51:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Resolving this one as a duplicate of #7999 as the root cause is ultimately the wildcard handling.",
      "created_at": "2021-09-05T04:07:13Z",
      "updated_at": "2021-09-05T04:07:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to note an important distinction, @vexx32:\r\n\r\n* #7999 is about how _cmdlets / providers_ treat wildcard expressions that they see _after_ the parameter binder has bound arguments. That is, `Get-Item *`, ``Get-Item `*`` (the bareword parsing eats the `` ` ``), `Get-Item '*'`, and `Get-Item \"*\"` are - and should be - equivalent, because `Get-Item` sees verbatim `*` in all cases.\r\n\r\n* By contrast, we're talking about an _intentional anomaly when calling external programs on Unix_, in service of emulating a different shell's behavior: as in POSIX-compatible shells, what matters is whether the argument is _quoted_ / has _individual metacharacters escaped_ (e.g., _from Bash_, compare `echo *` with `echo \\*` / `echo '*'` / `echo \"*\"`), in which case _no_ globbing must be applied. \r\n  * Therefore, the solution must be implemented at the level of the code that parses the raw argument and decides whether native globbing is to be performed.\r\n\r\n\r\n\r\n",
      "created_at": "2021-09-06T14:54:48Z",
      "updated_at": "2021-09-06T19:50:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'd agree that the code path here is somewhat separate to the one originally mentioned in #7999. However, the problem is likely caused by similar handling of input -- both use WildcardPattern -- and I think we were all more or less in agreement that it would counterintuitive to implement a partial fix that only addresses this issue instead of generalising the fix to also resolve the original issue for #7999.\r\n\r\nI think it's definitely worth mentioning that in #7999 and we can incorporate this facet into the original issue as well. \ud83d\ude42 \r\n",
      "created_at": "2021-09-06T19:36:46Z",
      "updated_at": "2021-09-06T19:36:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-09-07T20:00:44Z",
      "updated_at": "2021-09-07T20:00:44Z"
    }
  ],
  "created_at": "2021-08-19T22:07:41Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Duplicate",
    "OS-macOS",
    "OS-Linux",
    "WG-Engine-Providers"
  ],
  "number": 15959,
  "state": "closed",
  "title": "Native globbing doesn't respect bypassing via the escape character (backtick) in unquoted arguments",
  "updated_at": "2021-09-07T20:00:45Z"
}