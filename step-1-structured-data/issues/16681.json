{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16681",
  "author": "FastEddy1114",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nSelect-Object -Quiet does not return $false when the -Pattern is not found as documented at https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/select-string?view=powershell-7.2 It actually returns $null instead if the -Pattern is not found.\r\n\r\nSimple test is as follows:\r\n`\"xxxHELLOaaa\" | Select-String \"HELLO\" -SimpleMatch -Quiet`\r\nreturns $true as expected\r\n\r\n`\"xxxHELLOaaa\" | Select-String \"HaLLO\" -SimpleMatch -Quiet`\r\nreturns nothing/$null unexpectedly, it should return $false\n\n### Expected behavior\n\n```console\n`\"xxxHELLOaaa\" | Select-String \"HaLLO\" -SimpleMatch -Quiet`\r\n$false\n```\n\n\n### Actual behavior\n\n```console\n`\"xxxHELLOaaa\" | Select-String \"HaLLO\" -SimpleMatch -Quiet`\r\n$null\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![pwsh-screenshot](https://user-images.githubusercontent.com/47258351/147780106-1ae7fc1a-f38b-4c03-a0e3-0489c176cfa5.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I think it\u2019s a bug,\r\nSelect-String -Pattern \"xxx\" -Path  'd:\\xxx2.txt' -Quiet # can return false",
      "created_at": "2021-12-31T09:47:16Z",
      "updated_at": "2021-12-31T09:47:48Z"
    },
    {
      "author": "FastEddy1114",
      "author_association": "NONE",
      "body": "> I think it\u2019s a bug, Select-String -Pattern \"xxx\" -Path 'd:\\xxx2.txt' -Quiet # can return false\r\n\r\nYou're right searching for a pattern within a file does work and return $true or $false as expected.  It is when piping in data or using a variable as the -InputObject that it fails to return $false if the pattern is not found.\r\n\r\n`$Text = \"hello\"`\r\n`Select-String -InputObject $Text -Pattern \"hello\" -Quiet` returns $true as expected.\r\n`Select-String -InputObject $Text -Pattern \"hallo\" -Quiet` returns $null unexpectedly.",
      "created_at": "2021-12-31T14:01:32Z",
      "updated_at": "2021-12-31T14:01:32Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I think this is not matter as `$null ? $true : $false` returns `False`\r\nAnother thing is that the documentation states that if there is a mismatch `False` should be returned.",
      "created_at": "2021-12-31T15:11:39Z",
      "updated_at": "2021-12-31T15:11:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I think this is not matter as `$null ? $true : $false` returns `False` Another thing is that the documentation states that if there is a mismatch `False` should be returned.\r\n\r\nIt is only a problem with something like ` $matches =  select-string  -Quiet -Pattern \"foobar\" -InputObject $text`  if the code then checks for `$matches -eq $false`  `if ($matches)` or `if (-not $matches)` are fine.  \r\n\r\nThe behaviour is odd AND doesn't match what the documentation says  \r\n`dir *.xml | select-string -quiet -pattern \"foobar\" `  returns true or false **for each file** so we get this .  \r\n```\r\n> (dir *.xml | select-string  -Quiet -Pattern roobaf)\r\nFalse\r\nFalse\r\nFalse\r\n```\r\nAny multi-member array is treated as Boolean true even if every member is false so \r\n```\r\n> [boolean](dir *.xml | select-string  -Quiet -Pattern roobaf)\r\nTrue\r\n```\r\n\r\nHowever  `select-string -Quiet -Pattern Bearer -Path *.xml` returns a single false\r\n\r\nI can imagine both cases being relied on so any change is likely to be a breaking one. So it looks like the answer is to fix the documentation. \r\n",
      "created_at": "2022-01-02T13:52:46Z",
      "updated_at": "2022-01-02T13:52:46Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "hi @jhoneill :\r\nYour example brings unnecessary confusion.\r\nMust exclude select-string for multiple elements, because this theme does not consider $true, $false, $true.\r\nOnly limited to: select-string -Quiet -Pattern xxx -Path onefile.txt.\r\nIf a single keyword is not found, it should return $false, or $null ",
      "created_at": "2022-01-07T07:00:56Z",
      "updated_at": "2022-01-07T07:09:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@kasini3000  \r\nTo reduce the confusion: \r\n\r\n- With piped text the result is `true` or `null`\r\n- With path parameter the result is a single `true` or `false` , even if multiple items are specified or the path is a wildcard.\r\n- With multiple piped files a `true` or `false` _per file_ is returned  \r\n\r\nMost tests will treat `null` as false so the inconsistency the OP reported is only an issue if code explicitly checks for `$false`\r\n\r\nThe behaviour is inconsistent; _if any change is made the consideration should be given to making the piped files behave the same way as a wild card value or multiple values for the path parameter_ \r\n```\r\nps >  select-string -path .\\Expand*.ps1 -Pattern excel -Quiet\r\nTrue  # three files began \"expand\" and contain \"excel\" \r\n\r\nps >  select-string -path .\\Expand*.ps1 -Pattern ecxel -Quiet\r\nFalse  # three files began \"expand\" and did not contain \"ecxel\"\r\n\r\nps >  dir .\\Expand*.ps1   | select-string -Pattern ecxel -Quiet\r\nFalse\r\nFalse\r\nFalse \r\n# if file objects are piped in I get an array result which will be treated as true\r\n\r\nps > type .\\Expand*.ps1   | select-string -Pattern ecxel -Quiet\r\n#returns  null  because text streams don't return false\r\n\r\nps > type .\\Expand*.ps1   | select-string -Pattern excel -Quiet\r\nTrue  # a single true because the files are one text steam\r\n```\r\n\r\n",
      "created_at": "2022-01-07T14:57:51Z",
      "updated_at": "2022-01-07T15:01:01Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "@jhoneill jhoneill\r\nTo reduce the confusion: \r\nMultiple elements may be return $true, $false, $true. or $true, $true. $false, or more ... \r\n\r\n\r\n* only talk Single file. Do you know what is a single file ?\r\n* only talk Single element on the right side of the pipe .eg: \r\ntype .\\Expand*.ps1   | foreach-object { select-string -Pattern excel -Quiet -file $_}\r\n* only talk  -Quiet\r\n",
      "created_at": "2022-01-07T17:04:20Z",
      "updated_at": "2022-01-07T17:04:20Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@kasini3000   I don't see any need the limit the discussion to only one of the ways that `-Quiet` does not behave as documented.  \r\n>    `-Quiet` Indicates that the cmdlet returns a Boolean value (True or False),  \r\n\r\nThe OP wasn't passing any files, but piping text in which case it doesn't return a Boolean for 'no match found'.  You said it was a bug, running with `-Path` works: True on both counts:  if the `-Path` specifies one file or many the result is a boolean, as the documentation says.  It is sometimes necessary to pipe file objects which returns an array of Booleans instead of a Boolean. \r\n ",
      "created_at": "2022-01-07T17:40:56Z",
      "updated_at": "2022-01-07T17:40:56Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "@FastEddy1114 \r\nTo reduce ambiguity, would you like to change the title to ?\r\n\r\n```\r\nSelect-String -Quiet return $null instead of $false on single file or element when pipe or -InputObject\r\n```",
      "created_at": "2022-01-08T08:00:43Z",
      "updated_at": "2022-01-08T08:00:43Z"
    },
    {
      "author": "FastEddy1114",
      "author_association": "NONE",
      "body": "> @FastEddy1114 To reduce ambiguity, would you like to change the title to ?\r\n> \r\n> ```\r\n> Select-String -Quiet return $null instead of $false on single file or element when pipe or -InputObject\r\n> ```\r\n\r\nNo, I really don't think changing the title is necessary.  While yes, I discovered this using piped text and in -InputObject variable array that doesn't stop the inconsistencies that @jhoneill found from being true as well.  The title still makes sense that the command is not working as documented, there are just more of these cases known now.  So either the code needs updated to work as documented in all cases or the documentation needs updated to clarify the expected results based on the use case of the command.",
      "created_at": "2022-01-08T19:40:19Z",
      "updated_at": "2022-01-08T19:40:19Z"
    }
  ],
  "created_at": "2021-12-30T18:52:24Z",
  "number": 16681,
  "state": "open",
  "title": "Select-String -Quiet not working as documented",
  "updated_at": "2022-01-08T19:40:19Z"
}