{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10355",
  "author": "giggio",
  "body": "# Steps to reproduce\r\n\r\nOn Linux, install PowerShell global tool as per the blog post from the PowerShell team:\r\n\r\nhttps://devblogs.microsoft.com/powershell/introducing-powershell-as-net-global-tool/\r\n\r\n```powershell\r\ndotnet tool install --global PowerShell\r\n```\r\n\r\nThen run, from bash:\r\n\r\n````bash\r\npwsh -c Get-ChildItem\r\npwsh --version\r\n````\r\n\r\n\r\n# Expected behavior\r\n\r\nThe global dotnet tool works as a regular pwsh install, so, to run a command, you would run:\r\n\r\n```bash\r\npwsh -c Get-ChildItem\r\n```\r\n\r\nAnd the output would be successful.\r\n\r\n# Actual behavior\r\n\r\n\r\nBoth will fail. AFAIK any command with an argument will fail. This is what I get when I run the first one:\r\n\r\n````\r\n-Command : The term '-Command' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\n````\r\n\r\nAnd the second one:\r\n\r\n````\r\nMissing expression after unary operator '--'.                                                                                                                            At line:1 char:3                                                                                                                                                         + --version                                                                                                                                                              +   ~~~~~~~                                                                                                                                                              Unexpected token 'version' in expression or statement.       \r\n````\r\n\r\nAlso, if you run without `-C` (or `-Command`), it works, which is not expected:\r\n\r\n````bash\r\npwsh Get-ChildItem\r\n````\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Linux 4.4.0-18362-Microsoft #1-Microsoft Mon Mar 18 12:02:00 PST 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis is running on WSL on Ubuntu 19.04.",
  "closed_at": "2020-01-16T21:58:49Z",
  "comments": [
    {
      "author": "giggio",
      "author_association": "NONE",
      "body": "I believe this is a broader issue from #10301.",
      "created_at": "2019-08-14T22:32:52Z",
      "updated_at": "2019-08-14T22:32:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan ",
      "created_at": "2019-08-15T11:25:11Z",
      "updated_at": "2019-08-15T11:25:11Z"
    },
    {
      "author": "kzu",
      "author_association": "NONE",
      "body": "This also happens on Windows and Mac, btw, and 7.0.0-rc.1 fixes it all (from https://github.com/PowerShell/PowerShell/issues/10301). Yay!",
      "created_at": "2020-01-16T20:17:57Z",
      "updated_at": "2020-01-16T20:28:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye, this is fixed in the RC1 version. I believe we're expecting RC2 to be released soon, and v7 should have a full release in February as well. Closing this for now as it is resolved here, just waiting on the release lifecycle. \ud83d\ude42 ",
      "created_at": "2020-01-16T21:58:49Z",
      "updated_at": "2020-01-16T21:58:49Z"
    }
  ],
  "created_at": "2019-08-14T22:32:16Z",
  "number": 10355,
  "state": "closed",
  "title": "pwsh as a dotnet global tool doesn't accept any parameter",
  "updated_at": "2020-01-16T21:58:49Z"
}