{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5940",
  "author": "alx9r",
  "body": "Consider the following enum that resides in a deeply-nested namespace:\r\n\r\n```PowerShell\r\nAdd-Type @'\r\nnamespace Some { namespace Deeply { namespace NestedNamespace {\r\n    public enum AnEnum {\r\n        One = 1,\r\n        Two,\r\n        Three,\r\n        Four\r\n    }\r\n}\r\n}\r\n}\r\n'@\r\n```\r\n\r\n\"One\" can be accessed from the enum using the fully-qualified type as follows:\r\n\r\n```PowerShell\r\n[Some.Deeply.NestedNamespace.AnEnum]::One\r\n```\r\n\r\nThe length of the namespace prefixes make use of the enum awkward.  PowerShell involving such enums quickly becomes dominated by repetition of `Some.Deeply.NestedNamespace`.  Here is a snippet that demostrates this.  (I copied this from a current project, and just changed the token names.):\r\n\r\n```PowerShell\r\n    if\r\n    (\r\n        $PSCmdlet.ParameterSetName -ne 'parameterSetA' -and\r\n        $ParamA -notin [Some.Deeply.NestedNamespace.AnEnum]::One,[Some.Deeply.NestedNamespace.AnEnum]::Two\r\n    )\r\n    {\r\n        $someVar= @{\r\n            [Some.Deeply.NestedNamespace.AnEnum]::Three = [System.Exception]::new('message.')\r\n            [Some.Deeply.NestedNamespace.AnEnum]::Four= [System.Management.Automation.ErrorRecord]::new(\r\n                [System.Exception]::new('message.'),\r\n                'Error',\r\n                [System.Management.Automation.ErrorCategory]::OperationStopped,\r\n                $null\r\n            )\r\n        }.$ParamA\r\n    }\r\n```\r\n\r\nIdeally, this could be rewritten making use of type accelerators as follows:\r\n\r\n```PowerShell\r\n    if\r\n    (\r\n        $PSCmdlet.ParameterSetName -ne 'parameterSetA' -and\r\n        $ParamA -notin [anenum]::One,[anenum]::Two\r\n    )\r\n    {\r\n        $someVar= @{\r\n            [anenum]::Three = [exception]::new('message.')\r\n            [anenum]::Four= [errorrecord]::new(\r\n                [System.Exception]::new('message.'),\r\n                'Error',\r\n                [errorcategory]::OperationStopped,\r\n                $null\r\n            )\r\n        }.$ParamA\r\n    }\r\n```\r\n\r\n[`Add-TypeAccelerator.ps1`](https://gallery.technet.microsoft.com/scriptcenter/Add-Type-Accelerators-to-b59908eb) is available from gallery.  It looks like the API used to add custom type accelerators was changed from PowerShell 2 to 3 and again from PowerShell 4 to 5.  This makes me wonder the following:\r\n\r\n1. Is there a _supported_ way for users to create type accelerators?\r\n2. Is there some other way to reduce namespace repetition when referring to types?",
  "closed_at": "2018-01-18T22:34:40Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There is no supported way of adding a type accelerator.\r\n\r\nV5 introduced `using namepsace ...` to address the issue of long type names.",
      "created_at": "2018-01-18T22:09:52Z",
      "updated_at": "2018-01-18T22:09:52Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Thanks @lzybkr.  ",
      "created_at": "2018-01-18T22:34:40Z",
      "updated_at": "2018-01-18T22:34:40Z"
    }
  ],
  "created_at": "2018-01-18T22:02:15Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 5940,
  "state": "closed",
  "title": "Is there a supported way for users to create type accelerators?",
  "updated_at": "2018-02-08T06:44:18Z"
}