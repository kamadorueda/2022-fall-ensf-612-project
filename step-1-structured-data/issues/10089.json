{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10089",
  "author": "atruskie",
  "body": "# Summary of the new feature/enhancement\r\n\r\nI would like more information about the last _ReadLine_ command that was executed. I'm primarily thinking about tooling enhancements for interactive scenarios (in particular for customising `Prompt`), but I can think of a bunch of other uses for this information.\r\n\r\nI'm thinking this `$LastCommand` automatic variable should serve a similar role to `$MyInvocation`.  However, unlike `$MyInvocation`, `$LastCommand` information would be available after the command had run, and not be overwritten in a function call. \r\n\r\n`$LastCommand` should basically be supplied every time the `Prompt` function needs to be invoked.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nAfter every \"read line\" command is executed, set the `$global:LastCommand` automatic variable is set to an object, with the following fields:\r\n\r\n```\r\n@{\r\n  # The command that ReadLine/PSReadLine asked PowerShell to run\r\n  [string]Command = \"..\"\r\n  # Time spent executing the command (similar to what is stored in Get-History items at the moment\r\n  # but it will also work for commands that are not added to history for some reason\r\n  [TimeSpan]Elapsed = ...\r\n  # A list of the exit codes for any native commands that were run (there could be many)\r\n  [int[]]ExitCodes = @(...)\r\n  # Like $Error but scoped to the last command\r\n  [ErrorRecord[]]$Error\r\n  # Like $? but better\r\n  Status = \"OK\"\r\n  # Link to history for some useful synergies, or null if not added\r\n  [int]HistoryId = 123\r\n}\r\n```\r\n\r\nI think the real drawcard here is `Status`. It would be an Enum/string that could capture all of PowerShell's diverse forms of error:\r\n\r\n- \"OK\"/\"Completed\" indicated a command/pipeline indicated without any failures\r\n- \"CompletedWithErrors\" would reflect a pipeline that completed but still populated the `$Error` record (e.g. in cases of `SilentlyContinue`)\r\n- \"Failed\" where a terminating error (like `throw`) stops execution\r\n- \"Cancelled\" when `ctrl+c` stops execution\r\n- \"Empty\" - not sure if this one is necessary but it would reflect cases where `ReadLine` was supplied an empty string and the effective command was a noop\r\n- ... and any I missed\r\n\r\n\r\n# Alternatives\r\n\r\n## Why not `$?`\r\n\r\n- `$?` is dismissed as soon as you run any other command. This an issue others have run into:\r\n  - https://github.com/PowerShell/PowerShell/issues/9363\r\n  - https://github.com/dahlbyk/posh-git/blob/a64e5e073f6ce4dcd01394965bf0bbc91a0e3016/src/posh-git.psm1#L32\r\n- `$?` is not always updated. Especially when a ReadLine is cancelled, or is an empty string\r\n\r\n## Why not `$Error`\r\n\r\nBecause it doesn't capture cancelled commands, empty commands, or native commands.\r\n\r\n## Why not `$LASTEXITCODE`\r\n\r\n`$LASTEXITCODE` is only set when native commands run. But annoyingly, the value is not automatically dismissed. In Bash this is not a big deal (I think) because every command executed has an exit code that updates last exit code (again, mostly speculation). However, in PowerShell, if you run a native command, then run a PowerShell command, which may fail or succeed, then checking the $LASTEXITCODE is misleading. It does represent the last exit code of the last native tool that was run, but this may not be the last user-supplied command or even the last 10 commands.\r\n\r\nThis is not a big deal in a script, because an author understands this context. But from a tooling perspective, there's no way to understand what just happened unless you start parsing the supplied command. I figure PowerShell could do this for me.\r\n\r\n## Why not use Get-History or augment it with new fields\r\n\r\n`Get-History` is great but its goal is not well aligned with providing information about the user's last command. Get-History actually supplies information about the last command, that is not a duplicate, and that was not cancelled, or an empty string...\r\n\r\nI'm interested in what happens in and around a user typing a command. Get-History I think shouldn't capture all the information in my proposal and just continue recording history.\r\n\r\n# Open questions\r\n\r\n- The name `$LastCommand` is IMO nice, but probably a poor choice. Other choices:\r\n  - `$LastReadline`\r\n  - `$LastPrompt`\r\n  - `$LastResult`\r\n- The names, types, and variables in the `$LastCommand` could all probably be improved\r\n- I'm only thinking about an interactive scenario. I'm not sure my suggestion has any meaning inside a script...\r\n- If it is only useful in interactive scenarios, it could be supplied to the `Prompt` function as an argument, rather than being set as a global variable\r\n- I'm not wholly familiar with all the types of errors\r\n- There is a security concern with getting access to the commands that were run, but it is no worse than hijacking PSReadLine's  `[Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState` method anyway.\r\n\r\n# Related links\r\n\r\n- https://github.com/PowerShell/PowerShell/issues/9363\r\n- https://github.com/PowerShell/PowerShell/issues/7853\r\n  - A similar idea, that got derailed with a non-solution\r\n- https://github.com/PowerShell/PowerShell/issues/9140",
  "closed_at": null,
  "comments": [
    {
      "author": "atruskie",
      "author_association": "NONE",
      "body": "@chuanjiao10: `$^` and `$$` can be useful but come nowhere near exposing enough useful information.\r\n\r\n```\r\n> ls | ? { $_.Name -eq 'blah' } | Select-Object\r\n> \"$^;$$\"\r\nls;Select-Object\r\n```\r\n\r\nIt misses the middle token altogether.",
      "created_at": "2019-09-27T01:00:36Z",
      "updated_at": "2019-09-27T01:00:36Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "I like the overall sentiment here and was going to request something similar, though I would prefer to see this information (perhaps in addition to what was suggested) in the history. I already have a `$prompt` function that makes use of history (along with some types-added script properties) but can't really approximate the behavior suggested in this feature request for the reasons given. How `$LASTEXITCODE` is handled - specifically that it's not reset - and because `$?` is always `$true`  in the `$prompt` function (perhaps this is set after `$prompt` is invoked?) means I need this support in PowerShell itself.",
      "created_at": "2019-12-05T11:33:35Z",
      "updated_at": "2019-12-05T11:33:35Z"
    }
  ],
  "created_at": "2019-07-10T02:14:29Z",
  "number": 10089,
  "state": "open",
  "title": "Feature Request: LastCommand automatic variable",
  "updated_at": "2019-12-05T11:33:35Z"
}