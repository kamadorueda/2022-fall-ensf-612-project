{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8370",
  "author": "bergmeister",
  "body": "## PR Summary\r\n\r\nThere are only 1 failing test on Windows due to Compatibility section in application manifest not being embedded in pwsh.exe (https://github.com/dotnet/core-setup/issues/4963).\r\n\r\n.Net Core 3.0 adds one reference assembly and also a `.nupkg.metadata` file for each shipped module containing the hash, which I ignore for the installer.\r\n\r\nRemoved dependency on rcedit to embed manifest and update assembly file properties as .Net Core 3.0 SDK supports same capabilities from csproj file.  Due to this change, the fileversion and productversion embedded as rouces in pwsh.exe has changed to their desired format defined in the csproj.  Tests were updated to account for this difference.\r\n\r\n.Net Core 3.0 supports writing to reserved device names (like CON which writes to the console as expected; didn't test COM or LPT but presumably they would write to the COM and printer ports), so updated code to only check for `CLOCK$` as a reserved device name.\r\n\r\n_Breaking Change_ By default, long paths are returned by the FileSystemProvider whereas before, it would retain the short path.   This change is due to a change in .Net Core 3.0 behavior related to long paths which invalidated existing tests that used `$TestDrive` which is built from `$env:TEMP` which has a short path (if the username is > 8 characters which is the case on AzPipelines for Windows).\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-04-19T01:23:59Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister As discussed previously we'll release 6.2 _before_ release .Net Core 3.0 so 6.2 should be on 2.1 version. I'd expect moving to 3.0 at april-may 2019.\r\nFirst public preview 3.0 was announced for the end of 2018 and release May 2019. Only after release 3.0 we free to use it in the repo. You could keep the branch locally and update it.",
      "created_at": "2018-11-30T15:00:06Z",
      "updated_at": "2018-11-30T15:00:06Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the point of this is rather to check/monitor compatibility with .Net Core 3 early so that the .Net team has time to fix issues *before* they release.",
      "created_at": "2018-11-30T15:35:36Z",
      "updated_at": "2018-11-30T15:35:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should definitely move to .Net Core 3.0 as early as possible after 6.2.  It would make sense to use this PR to stage this and we can have it as one of the first PRs merged for 6.3.",
      "created_at": "2019-01-10T02:00:41Z",
      "updated_at": "2019-01-10T02:00:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we need to move from 3.0 Preview1 to latest build - there is already many updates.",
      "created_at": "2019-01-10T05:36:20Z",
      "updated_at": "2019-01-10T05:36:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov moving to 3.0.100-preview-009817 latest coherent build so that crossgen works",
      "created_at": "2019-01-10T05:44:06Z",
      "updated_at": "2019-01-10T06:01:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Windows path tests failed.",
      "created_at": "2019-01-10T06:31:02Z",
      "updated_at": "2019-01-10T06:31:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem on Windows is that `$env:TEMP` for a long username returns a 8.3 path.  Made a few fixes to the tests using [FileInfo] to resolve the 8.3 path to long path.  Doesn't feel right, but not sure what else we can do.  This only affects systems (like VSTS CI on Windows) where the username is > 8 characters thus having a difference where $TestDrive has a 8.3 path due to $env:TEMP but in all other cases, the long path is returned.\r\n\r\nIn another test, looks like [Environment]::OSVersion returns 6.2 on Win10 rather than 10.0.  This [issue](https://github.com/dotnet/corefx/issues/29395) seems to indicate they don't plan to fix this so we may need to use a different way to validate.",
      "created_at": "2019-01-10T07:12:16Z",
      "updated_at": "2019-01-10T07:12:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Doesn't feel right, but not sure what else we can do. \r\n\r\nIs this Pester issue or PowerShell Core issue?\r\n\r\nPerhaps the issues have the same reason:\r\n```\r\n2019-01-10T07:19:42.9037265Z       [-] -WorkingDirectory should be processed before profiles 577ms\r\n2019-01-10T07:19:42.9424552Z         ParameterBindingException: Parameter 'BeExactly' cannot be specified in parameter set 'Legacy'.\r\n2019-01-10T07:19:42.9434168Z         at <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Host/ConsoleHost.Tests.ps1: line 602\r\n\r\n```\r\n```\r\n2019-01-10T07:27:37.3941778Z     [-] validate Type resolution should prefer the assembly loaded by Import-Module \r\n2019-01-10T07:27:37.3943343Z       Expected strings to be the same, but they were different.\r\n2019-01-10T07:27:37.3943907Z       Expected length: 95\r\n2019-01-10T07:27:37.3944175Z       Actual length:   103\r\n2019-01-10T07:27:37.3944385Z       Strings differ at index 15.\r\n2019-01-10T07:27:37.3944601Z       Expected: 'C:\\Users\\VSSADM~1\\AppData\\Local\\Temp\\2142ba62-a5e7-41a8-8973-6e70f56ea490\\cmdlet\\TestCmdlet.dll'\r\n2019-01-10T07:27:37.3944868Z       But was:  'C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\2142ba62-a5e7-41a8-8973-6e70f56ea490\\cmdlet\\TestCmdlet.dll'\r\n2019-01-10T07:27:37.3945106Z       --------------------------^\r\n2019-01-10T07:27:37.3945353Z       129:         $location | Should -Be $cmdletDllPath\r\n2019-01-10T07:27:37.3945768Z       at <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Language\\Parser\\Conversions.Tests.ps1: line 129\r\n```",
      "created_at": "2019-01-10T07:36:25Z",
      "updated_at": "2019-01-10T07:48:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "> Is this Pester issue or PowerShell Core issue?\r\n\r\nThe behavior I'm seeing is probably technically correct although it's not clear to me why it wasn't failing already.  For a user that has a long username, on Windows, their $env:TEMP folder (which is what Pester uses for $TestDrive) is something like: \"c:\\Users\\longna\\~1\\AppData\\local\\temp\".  The test does something with the filesystem which returns \"c:\\Users\\longnameuser\\AppData\\local\\temp\" and the test compares the two which don't match and thus the test fails.  Pester could have a new `Should` to compare paths and say that the two are functionally equivalent, but I wouldn't say it's a Pester problem or PSCore problem since `$env:TEMP` is literally \"c:\\Users\\longna~1\\AppData\\local\\temp\"",
      "created_at": "2019-01-10T15:37:25Z",
      "updated_at": "2019-01-10T17:11:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What API we use for $env:TEMP? It seems it could be fixed in .Net Core.",
      "created_at": "2019-01-10T17:16:23Z",
      "updated_at": "2019-01-10T17:16:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "> What API we use for $env:TEMP? It seems it could be fixed in .Net Core.\r\n\r\nShould just be `[System.Environment]::GetEnvironmentVariable()`.  Which returns the 8.3 version of the path on 3.0 and 2.1 so that hasn't changed.",
      "created_at": "2019-01-10T17:23:29Z",
      "updated_at": "2019-01-10T17:23:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Opened https://github.com/dotnet/corefx/issues/34506 to cover the OSVersion regression in corefx for 3.0",
      "created_at": "2019-01-10T19:31:27Z",
      "updated_at": "2019-01-10T19:31:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The OSVersion issue is somehow the application manifest we embed in pwsh.exe is missing the compatibility section.  Investigating.",
      "created_at": "2019-01-11T01:51:48Z",
      "updated_at": "2019-01-11T01:51:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Figured out the OSVersion problem, the application manifest isn't being embedded correctly into pwsh.exe.  Opened https://github.com/dotnet/core-sdk/issues/267\r\n",
      "created_at": "2019-01-11T03:49:36Z",
      "updated_at": "2019-01-11T03:49:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I run simple C# code in .Net Core 3.0 (ver 3.0.100.10076 )\r\n```c#\r\nConsole.WriteLine(\"Result: {0}\", Environment.GetEnvironmentVariable(\"TEMP\"));\r\n```\r\n and get\r\n`C:\\Users\\ADMINI~1\\AppData\\Local\\Temp`",
      "created_at": "2019-01-16T10:05:31Z",
      "updated_at": "2019-01-16T10:05:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `$env:TEMP` is defined with the short path (probably for compatibility reasons), so it will return exactly the value of that env var.  So that is expected.",
      "created_at": "2019-01-17T03:46:23Z",
      "updated_at": "2019-01-17T03:46:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT As for compatibility section in manifest - maybe we could accept the breaking change for OS version string or there is other compatibility problems (that we don't catch in tests)?",
      "created_at": "2019-01-19T06:05:09Z",
      "updated_at": "2019-01-19T06:05:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov we can leave that test for now pending result from .Net Core investigation since we're not going to merge this til after 6.2 GA which isn't til March.",
      "created_at": "2019-01-19T06:26:35Z",
      "updated_at": "2019-01-19T06:26:35Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Will we revisit the inclusion of WinForms/WPF after this PR? At the moment those binaries do not make it into the `publish` or `ref` folder. I think this is because they have to be opted into via using `<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">` instead of `<Project Sdk=\"Microsoft.NET.Sdk\">`.  and for Winforms e.g. `<UseWindowsForms>true</UseWindowsForms>` in the `.csproj` (at least this was my impression when looking at the examples that `dotnet new winforms` or `dotnet new wpf` create). I tried applying such a change to `TypeCatalogGen.csproj` locally but that did not seem to fix it...\r\nI upstreamed the branch in the meantime to keep up to date with master and avoid integration issues.\r\nAlthough the Linux and macOs builds are green in this repo, the `After Success` task fails in my fork builds [here](https://github.com/bergmeister/PowerShell/commits/netcore3.0) (my forks builds work fine for master btw), at first I though it might be a problem with the period in the branch name but the same problems happen in a cloned branch with a name that does not have the period, can you comment on that @TravisEz13 ?\r\nOut of curiosity Steve: Why are the commits force-pushed?",
      "created_at": "2019-01-19T14:47:32Z",
      "updated_at": "2019-01-19T16:18:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister I force push when I'm adding some traces or trying something to understand why it fails in VSTS but not locally.  No reason to have those changes in the commit history.",
      "created_at": "2019-01-19T23:40:28Z",
      "updated_at": "2019-01-19T23:40:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister also, we want winforms and WPF",
      "created_at": "2019-01-19T23:41:08Z",
      "updated_at": "2019-01-19T23:41:08Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Thanks for the info. I enabled WinForms/WPF in `powershell-win-core.csproj`, which seems to work fine but I am not sure if we are supposed to add similar changes to the `TypeGen` project as well\r\n![image](https://user-images.githubusercontent.com/9250262/51433756-6ee1e880-1c49-11e9-9fb3-daa25d4abfc7.png)\r\n",
      "created_at": "2019-01-20T00:22:48Z",
      "updated_at": "2019-01-20T00:22:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Porting of WinForms and WPF is only at the beginning of the path and it is hardly stable. I would postpone this to the next milestone to reduce the amount of what we need to catch and fix in a short period of time. Moreover, it is unlikely that all APIs will be ported there at once.",
      "created_at": "2019-01-20T18:17:29Z",
      "updated_at": "2019-01-20T18:17:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister typegen doesn't need it\r\n\r\n@iSazonov we're likely changing our support lifecycle to match .Net Core LTS/non-LTS which makes 6.3 a non-LTS release.  In that case, we want to get as much features out as possible from .Net Core so we can test compatibility and open issues",
      "created_at": "2019-01-21T23:33:36Z",
      "updated_at": "2019-01-21T23:33:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT My thoughts were about free time slots and free resources. We can not do everything at once. It would be nice if you published a public roadmap and a time line for the next stage so that everyone could work together effectively. I hope this helps your team attract more help from the community.",
      "created_at": "2019-01-22T03:15:56Z",
      "updated_at": "2019-01-22T03:15:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, my plan is to have a new roadmap blog published this month",
      "created_at": "2019-01-22T17:02:33Z",
      "updated_at": "2019-01-22T17:02:33Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov agreed on the roadmap. We've been chewing on lots of stuff internally, I'd like to get some stuff squared away around early Feb, will have more details after that for sure. ",
      "created_at": "2019-01-23T19:58:05Z",
      "updated_at": "2019-01-23T19:58:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's still some problem with long paths.  Following up with .Net team to determine what api changed and if intentional as I can't isolate what api is returning different results with 3.0.  Seems like it's a regression and not intentional as other file apis in 3.0 happily return a short path.  Also need to add a test case to handle this (with most recent changes):\r\n\r\n```powershell\r\nPS C:\\Users\\reallylongname\\repos\\PowerShell> New-PSDrive -PSProvider FileSystem -Root $env:temp -Name temp\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\ntemp              513.65        414.92 FileSystem    C:\\Users\\REALLY~1\\AppData\\Local\\Te\u2026\r\n\r\nPS C:\\Users\\reallylongname\\repos\\PowerShell> cd temp:\r\nPS temp:\\..\\..\\..\\..\\..\\>\r\n```\r\n",
      "created_at": "2019-01-23T21:00:36Z",
      "updated_at": "2019-01-23T21:00:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "After discussing with .Net team, the long filename change is not expected.  Reverting the change to always resolve to long filename in filesystemprovider.  Will need to debug to understand what changed in .Net Core 3.0 and open issue in corefx repo.",
      "created_at": "2019-01-24T01:10:51Z",
      "updated_at": "2019-01-24T01:10:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing and reopening to see if I can get CI going again",
      "created_at": "2019-01-26T06:20:30Z",
      "updated_at": "2019-01-26T06:20:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like only one failure which should be fixed by https://github.com/PowerShell/PowerShell/pull/8761\r\n\r\nSpoke too soon.  Still a bunch of failures on Windows.",
      "created_at": "2019-01-29T06:35:49Z",
      "updated_at": "2019-01-29T19:05:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "crossgen is returning exit code 139 on Linux and macOS which causes CI to fail.  Created https://github.com/dotnet/coreclr/issues/22276",
      "created_at": "2019-01-29T21:29:34Z",
      "updated_at": "2019-01-29T21:29:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Reverted attempt to move to newer 3.0 release since it caused more problems",
      "created_at": "2019-02-21T05:57:29Z",
      "updated_at": "2019-02-21T05:57:29Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "We should try the new preview3 that got published yesterday",
      "created_at": "2019-03-08T05:52:00Z",
      "updated_at": "2019-03-08T05:52:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since 6.2-GA was forked we can actively work on the PR.\r\nI think we need rebase and then move to 3.0-Preview3.",
      "created_at": "2019-03-08T12:11:45Z",
      "updated_at": "2019-03-08T12:11:45Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I tried to update to `preview3` locally but unless I made a mistake, I cannot even do a `dotnet restore`. It seems there are no matching Asp.Net Core Nuget packages. The version available on NuGet [here](https://www.nuget.org/packages/Microsoft.AspNetCore.App/3.0.0-preview3-19153-02) is only version `3.0.0-preview3-19153-02` and does not match the requirements of projects depending on it. I get lots of errors similar to this:\r\n```\r\nC:\\PowerShell\\src\\Microsoft.PowerShell.SDK\\Microsoft.PowerShell.SDK.csproj : error NU1603: Microsoft.PowerShell.SDK depends on runtime.win-x64.Microsoft.AspNetCore.App (>= 3.0.0-preview3-27503-5) but runtime.win-x64.Microsoft.AspNetCore.App 3.0.0-preview3-27503-5 was not found. An approximate best match of runtime.win-x64.Microsoft.AspNetCore.App 3.0.0-preview4-19121-08 was resolved. [C:\\PowerShell\\src\\powershell-win-core\\powershell-win-core.csproj]\r\n....\r\nC:\\PowerShell\\src\\powershell-win-core\\powershell-win-core.csproj : error NU1603: pwsh depends on runtime.win-x64.Microsoft.AspNetCore.App (>= 3.0.0-preview3-27503-5) but runtime.win-x64.Microsoft.AspNetCore.App 3.0.0-preview3-27503-5 was not found. An approximate best match of runtime.win-x64.Microsoft.AspNetCore.App 3.0.0-preview4-19121-08 was resolved.\r\n```\r\nTo me this looks like the Asp.Net Core Team needs to publish a newer `preview3` version of their `Microsoft.AspNetCore.App` Nuget package to fulfill those requirements. Do you know more details @DamianEdwards ?\r\nI pushed to a temporary branch [here](https://github.com/bergmeister/PowerShell/tree/netcore3.0_preview3) in [this](https://github.com/bergmeister/PowerShell/commit/278656d3d86ee070162a5845d27027ecd63591b3) commit, the build [here](https://christophbergmeister.visualstudio.com/PowerShell/_build/results?buildId=792) shows the same symptoms that I see locally.",
      "created_at": "2019-03-08T12:56:32Z",
      "updated_at": "2019-03-08T20:22:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder how we depend on Microsoft.AspNetCore.App?",
      "created_at": "2019-03-08T14:15:31Z",
      "updated_at": "2019-03-08T14:15:31Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@bergmeister I try to compile your .net v3 branch and found the same symptom.\r\n\r\nIf I remove 'RuntimeFrameworkVersion' on PowerShell.Common.props and Test.Common.props , it lets me compile.\r\n\r\nI also rollback your change to Microsoft.WindowsDesktop.App\r\n[branch:netcore3.0_preview3](https://github.com/fmichaleczek/PowerShell/commit/445f50e50932919042e8dd221826ef9d52c683fa)\r\n\r\n**dotnet.exe -info** \r\n```\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [c:\\program files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\nThere is a version's conflict between  all Microsoft.*.App runtimes and PowerShell.Common.props\r\nI read all previous what's news about dotnet and aspnet, i don't found anything interesting.\r\n",
      "created_at": "2019-04-12T01:08:29Z",
      "updated_at": "2019-04-12T01:11:06Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@fmichaleczek At the moment we are waiting for preview4 to fix problems like that. If you want to try out a working version of netcore3 you could try using a daily build or checkout one of the older commits on this branch that used preview1 or preview2",
      "created_at": "2019-04-12T06:36:18Z",
      "updated_at": "2019-04-12T06:36:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like Preview.4 just became available, I'll move the build to that version",
      "created_at": "2019-04-18T20:45:59Z",
      "updated_at": "2019-04-18T20:45:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Moving this to a working branch on PS/PS",
      "created_at": "2019-04-19T01:23:43Z",
      "updated_at": "2019-04-19T01:23:43Z"
    }
  ],
  "created_at": "2018-11-30T12:37:19Z",
  "number": 8370,
  "state": "closed",
  "title": "WIP Use early preview of .Net Core 3.0",
  "updated_at": "2019-04-23T22:03:49Z"
}