{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4293",
  "author": "mklement0",
  "body": "When comparing two sets of objects, it is currently somewhat cumbersome to retrieve only those objects exclusive to _one_ side of the comparison:\r\n\r\n```powershell\r\n$left = 1, 2, 3, 4\r\n$right = 1, 3, 4, 5\r\n\r\n# Left-side only: -> 2\r\n(Compare-Object $left $right | Where-Object SideIndicator -eq '<=').InputObject\r\n\r\n# Right-side only: -> 5\r\n(Compare-Object $left $right | Where-Object SideIndicator -eq '=>').InputObject\r\n```\r\n\r\nWishful thinking:\r\n\r\n```powershell\r\n$left = 1, 2, 3, 4\r\n$right = 1, 3, 4, 5\r\n\r\n# Left-side only: -> 2\r\nCompare-Object $left $right -LeftOnly -PassThru\r\n\r\n# Right-side only: -> 5\r\nCompare-Object $left $right -RightOnly -PassThru\r\n```\r\n\r\n* `-LeftOnly` and `-RightOnly` would be mutually exclusive and incompatible with `-ExcludeDifferent`\r\n\r\n* The existing `-PassThru` switch omits the custom-object wrapper with the side indicator that is created by default (despite the documentation claiming \"Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.\" - see https://github.com/PowerShell/PowerShell-Docs/issues/1461).\r\n\r\n* To achieve left-\"join\" and right-\"join\" logic, simply add the existing `-IncludeEqual` switch.\r\n\r\n<sup>Note: I'm using \"join\" in double quotes, because no joining (merging of data) in the usual sense happens - only different or identical objects are returned.</sup>\r\n\r\nNote that the _left_  / _right_ terminology is not currently part of `Compare-Object`, but I feel it is descriptive and intuitive (cf. SQL join terminology).\r\n\r\nThus, additionally, the following parameter aliases could be introduced:\r\n\r\n* `-LeftObject` as an alias for `-ReferenceObject`\r\n* `-RightObject` as an alias for `-DifferenceObject`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4\r\n```\r\n",
  "closed_at": "2017-07-21T12:41:19Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "More native:\r\n`Join-Object  -Left -Right -Union -Intersection`",
      "created_at": "2017-07-19T08:50:02Z",
      "updated_at": "2017-07-19T08:50:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: `Join-Object` is not appropriate, because `Compare-Object` performs no joining (merging) of data - it only returns different or identical objects (I've updated the original post to clarify that).\r\n\r\nWhile a bona fide SQL-style `Join-Object` cmdlet would be great, it would be a much bigger undertaking.\r\n\r\nBy contrast, what I'm proposing here is a relatively simple addition to the existing `Compare-Object` functionality.",
      "created_at": "2017-07-19T18:06:01Z",
      "updated_at": "2017-07-19T18:06:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The question is what is the comparison for? I think getting the end list is more useful - Compare-Object returns comparison results then we should filter the results and get the end list for processing.\r\nInternally ` Join-Object ` will be based on `Compare-Object`.",
      "created_at": "2017-07-19T18:18:21Z",
      "updated_at": "2017-07-19T18:18:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Building a future `Join-Object` on `Compare-Object` sounds promising.\r\n\r\nI don't understand the rest of your statement, but let me try to clarify what this issue is about:\r\n\r\n`Compare-Object` currently makes it easy to find:\r\n\r\n* only unique objects (property sets)\r\n* only identical objects (property sets)\r\n* or both\r\n\r\nHowever, the unique objects currently invariably are the unique objects from _both_ sides, whereas it is not uncommon - see [this SO question](https://stackoverflow.com/q/45193418/45375), for instance - to only want _one_ side's unique objects - this is what `-Left[Difference]Only` and `-Right[Difference]Only` would provide.\r\n\r\nNote that the existing `-PassThru` already only returns the (matching) input objects as-is, and with getting only _one_ side's unique objects, you don't even lose information by omitting the wrapper with the `.SideIndicator` property.\r\n(That said, if you add `-IncludeEqual`, you do lose information.)\r\n\r\n\r\n\r\n \r\n",
      "created_at": "2017-07-19T18:34:06Z",
      "updated_at": "2017-07-19T18:37:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I would prefer classic terms:\r\n- Union (A \u222a B)\r\n- Intersection (A \u2229 B)\r\n- Symmetric difference (A \u2206 B)\r\n- Relative complement (A \u2216 B)",
      "created_at": "2017-07-20T14:41:16Z",
      "updated_at": "2017-07-20T14:41:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "First things first: I definitely like the idea.\r\n\r\nLet's see how these concepts map onto how `Compare-Item` currently works:\r\n\r\n* Union (A \u222a B)\r\n\r\n`Compare-Object $A $B -IncludeEqual -PassThru`\r\n\r\n* Intersection (A \u2229 B)\r\n\r\n`Compare-Object $A $B -IncludeEqual -ExcludeDifferent -PassThru`\r\n\r\n* Symmetric difference (A \u2206 B)\r\n\r\n`Compare-Object $A $B  -PassThru`\r\n\r\n* Relative complement (A \u2216 B)\r\n\r\n`Compare-Object $A $B  | ? SideIndicator -eq '=>' | % InputObject`\r\n\r\nThus, new parameters `-Union`, `-Intersection`, `-SymmetricDifference`, and `-Complement` could be introduced that are effectively aliases / shortcuts to the commands above.\r\n\r\nNote that since _2_ sets are by definition involved, I think the shorter `-Complement` will do instead of `-RelativeComplement`.\r\n\r\nOne thing to note is the _order_ in which objects are output - this is not currently documented (from a _set_ perspective, order doesn't matter, but for subsequent processing it may), and I haven't dug into the source to verify, but from what I can tell, it is:\r\n\r\n* `==` (identical) objects first\r\n* `>=` right-side-only objects next\r\n* `<=` left-side-only objects last\r\n\r\nNote that all commands above effectively suppress the custom-object wrapper with the `.SideIndicator` property and return the selected input objects directly.\r\n\r\nOn a related note, I wonder if something like a new `-Group` switch would make sense in order to return a _hashtable_ of original objects grouped by what is currently the `.SideIndicator` value; e.g.:\r\n\r\n```powershell\r\n$A = 1, 2, 3, 4\r\n$B = 1, 3, 4, 5\r\n\r\n# Wishful thinking\r\nCompare-Object -Group -Union $A $B\r\n```\r\n\r\nwhich would yield the equivalent of:\r\n\r\n```powershell\r\n@{\r\n  '==' = 1, 3, 4\r\n  '<=' = , 2\r\n  '=>' = , 5\r\n}\r\n```\r\n\r\nUnless you think this needs refining / you want to discuss further, I'll update the initial post and the issue's title.\r\n",
      "created_at": "2017-07-20T16:26:25Z",
      "updated_at": "2017-07-20T16:28:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">Thus, new parameters  -Union ,  -Intersection ,  -SymmetricDifference , and  -Complement  could be introduced that are effectively aliases / shortcuts to the commands above.\r\n\r\nI see it as parameter sets.\r\n\r\n>Note that since 2 sets are by definition involved, I think the shorter  -Complement  will do instead of  -RelativeComplement .\r\n\r\nAgree.\r\n\r\n> something like a new  -Group  switch would make sense in order to return a hashtable of original objects \r\n\r\nMaybe `-AsHashTable`?",
      "created_at": "2017-07-20T17:37:15Z",
      "updated_at": "2017-07-20T17:37:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I see it as parameter sets.\r\n\r\nYes, absolutely - they would complement the old parameter sets (which could then be considered deprecated).\r\n\r\n> Maybe `-AsHashTable`?\r\n\r\nWhile that nicely parallels `Group-Object`, the difference is that there you _always_ get a group, and `-AsHashTable` simply changes the _format_ used to represent that group.\r\n\r\nHere, we're actually changing the _structure_ of the output fundamentally.\r\n\r\nThat said, perhaps the `Group-Object` analogy is more helpful, so I'm open to the idea, though it's certainly something that can be decided later.\r\n\r\nI'll write up a summary of our conversation, presumably as a new issue (I'll close this one).\r\nThanks for all your input.\r\n",
      "created_at": "2017-07-20T17:51:58Z",
      "updated_at": "2017-07-20T17:51:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for tagging, @SteveL-MSFT, but I'm closing this in favor of the rewritten, more focused #4316",
      "created_at": "2017-07-21T12:41:19Z",
      "updated_at": "2017-07-21T12:41:29Z"
    }
  ],
  "created_at": "2017-07-19T03:31:50Z",
  "labels": [
    "Issue-Enhancement",
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 4293,
  "state": "closed",
  "title": "Suggestion: Add parameters to Compare-Object that directly support retrieval of left-side-only or right-side-only objects",
  "updated_at": "2017-07-21T12:41:29Z"
}