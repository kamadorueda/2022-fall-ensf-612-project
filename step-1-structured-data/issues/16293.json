{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16293",
  "author": "jeanga",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nMy repro steps:\r\n- Download the Enterprise WDK: https://docs.microsoft.com/en-us/windows-hardware/drivers/other-wdk-downloads\r\n- Mount the ISO (Mount-DiskImage -ImagePath S:\\iso\\dev\\EWDK_fe_release_20348_210507-1500.iso).\r\n- From a \"cmd.exe\" prompt, run LaunchBuildEnv.cmd amd64\r\n- Start Powershell 7.2 RC1: \"c:\\Program Files\\PowerShell\\7-preview\\pwsh.exe\"\r\n- Run MSBuild.exe\r\n\r\nBut I do _not_ think this is linked to the EWDK but the fact I'm running a exe from a mounted iso.\r\n(was running just fine with 7.1.5 or the previous 7.2 preview)\r\n\n\n### Expected behavior\n\n```console\nSuccessfully run msbuild.exe\n```\n\n\n### Actual behavior\n\n```console\nOperationStopped: Incorrect function. : 'E:\\Program Files\\Microsoft Visual Studio\\2019\\BuildTools\\\\MSBuild\\Current\\Bin\\MSBuild.exe'\n```\n\n\n### Error details\n\n```console\nException             :\r\n    Type       : System.IO.IOException\r\n    TargetSite :\r\n        Name          : GetImmediateLinkTarget\r\n        DeclaringType : System.IO.FileSystem, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral,\r\nPublicKeyToken=7cec85d7bea7798e\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    Message    : Incorrect function. : 'E:\\Program Files\\Microsoft Visual\r\nStudio\\2019\\BuildTools\\\\MSBuild\\Current\\Bin\\MSBuild.exe'\r\n    Data       : System.Collections.ListDictionaryInternal\r\n    Source     : System.Private.CoreLib\r\n    HResult    : -2147024895\r\n    StackTrace :\r\n   at System.IO.FileSystem.GetImmediateLinkTarget(String linkPath, Boolean isDirectory, Boolean throwOnError, Boolean\r\nreturnFullPath)\r\n   at System.IO.FileSystem.ResolveLinkTarget(String linkPath, Boolean returnFinalTarget, Boolean isDirectory)\r\n   at System.IO.File.ResolveLinkTarget(String linkPath, Boolean returnFinalTarget)\r\n   at System.Management.Automation.NativeCommandProcessor.IsWindowsApplication(String fileName)\r\n   at System.Management.Automation.NativeCommandProcessor.InitNativeProcess()\r\n   at System.Management.Automation.NativeCommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput,\r\nCommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections,\r\nFunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : OperationStopped: (:) [], IOException\r\nFullyQualifiedErrorId : System.IO.IOException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : msbuild.exe\r\n    PositionMessage  : At line:1 char:1\r\n                       + msbuild.exe\r\n                       + ~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-rc.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/7120091/138485846-43319be4-5350-4fd2-80bc-28c434fee32d.png)\r\n",
  "closed_at": "2021-10-30T15:54:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeanga ~~Please open new issue in .Net Runtime repository and link that issue.~~\r\n\r\nUnbelievable, I just prepared a performance fix for this code which just gets rid of this `ResolveLinkTarget` and fixes this problem in PowerShell :-)",
      "created_at": "2021-10-22T17:40:06Z",
      "updated_at": "2021-10-23T14:28:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After further study, I think this is purely a PowerShell problem, since it is correct that System.IO.File.ResolveLinkTarget() causes an IO exception for file systems (ISO, FAT, ...) that _does not support reparse points_.",
      "created_at": "2021-10-23T14:31:37Z",
      "updated_at": "2021-10-23T14:32:08Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Heh I thought we fixed this as per https://github.com/PowerShell/PowerShell/issues/13605 but looks like it regressed again. Seems like https://github.com/PowerShell/PowerShell/pull/16295 (or some other PR) should include some tests for this specific scenario to stop it from happening once again.",
      "created_at": "2021-10-23T21:47:32Z",
      "updated_at": "2021-10-23T21:47:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "To add a test we need to create an ISO file with exe file on the fly.",
      "created_at": "2021-10-25T02:57:47Z",
      "updated_at": "2021-10-25T02:57:47Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Not necessarily, you just need a file system that doesn't support reparse points. I see 2 easy-ish ways to do this\r\n\r\n* Create a VHDX and format it as FAT32 (or even just FAT)\r\n* Create an ISO\r\n  * While possible through COM it's quite verbose, here is an example where I recreated an ISO for unattended Hyper-V installs https://gist.github.com/jborean93/b16f34069a614a2206093137e7da7b01\r\n\r\nYou can the use `Mount-DiskImage` to mount either the ISO or VHDX for the test and try and run the executable placed in that volume.\r\n\r\nThe VHDX scenario is simple to replicate\r\n\r\n```powershell\r\n$vhdx = 'C:\\temp\\vhdx\\my.vhdx'\r\nif (Test-Path -Path $vhdx) {\r\n    Remove-item -Path $vhdx -Force\r\n}\r\n\r\nSet-Content create_vhdx.txt @\"\r\ncreate vdisk file=\"$vhdx\" maximum=20 type=fixed\r\nselect vdisk file=\"$vhdx\"\r\nattach vdisk\r\nconvert mbr\r\ncreate partition primary\r\nformat fs=fat\r\nassign letter=\"T\"\r\ndetach vdisk\r\n\"@\r\n\r\ndiskpart.exe /s (Get-Item .\\create_vhdx.txt).FullName\r\nMount-DiskImage -ImagePath $vhdx | Out-Null\r\n\r\n# Copy binary to T:\\ and do test\r\nCopy-Item C:\\Windows\\System32\\whoami.exe T:\\whoami.exe\r\nT:\\whoami.exe\r\n\r\nDismount-DiskImage -ImagePath $vhdx\r\n```\r\n\r\nTo avoid diskpart you could use PInvoke to call [CreateVirtualDisk](https://docs.microsoft.com/en-us/windows/win32/api/virtdisk/nf-virtdisk-createvirtualdisk), creating the partition and formatting should also be doable using various PowerShell cmdlets as well if you wanted to avoid `diskpart.exe` altogether\r\n\r\nI have verified the VHDX example also excises this problematic code as the FAT format doesn't support reparse points.",
      "created_at": "2021-10-25T04:09:15Z",
      "updated_at": "2021-10-25T04:11:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Thanks! I added the test.",
      "created_at": "2021-10-25T09:08:42Z",
      "updated_at": "2021-10-25T09:08:42Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks @iSazonov appreciate adding the test, should hopefully stop this from recurring in the future!",
      "created_at": "2021-10-26T03:04:36Z",
      "updated_at": "2021-10-26T03:04:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16310, which has now been successfully released as `v7.2.0`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0)\n",
      "created_at": "2021-11-08T16:11:19Z",
      "updated_at": "2021-11-08T16:11:19Z"
    },
    {
      "author": "jeanga",
      "author_association": "NONE",
      "body": "Verified fixed! Thanks!",
      "created_at": "2021-11-08T20:54:10Z",
      "updated_at": "2021-11-08T20:54:10Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16310, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T19:59:30Z",
      "updated_at": "2021-12-16T19:59:30Z"
    }
  ],
  "created_at": "2021-10-22T15:55:02Z",
  "number": 16293,
  "state": "closed",
  "title": "OperationStopped: Incorrect function when running an exe from a mounted ISO",
  "updated_at": "2021-12-16T19:59:30Z"
}