{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6934",
  "author": "BrucePay",
  "body": "## PR Summary\r\n\r\nFixed issue #6855 by renaming the class that does all the work from `MshExpression` to `PSPropertyExpression`, making the class public and then in `MeasureObjectCommand`, lifting it up to the parameter level. Previously the implementation exposed the `-Property` as `string` then wrapped it internally as a `PSPropertyExpression`. Now the parameter type is `PSPropertyExpression` directly allowing for both wildcard strings and scriptblocks.  Note that this is technically a breaking change (the public type of the parameter has changed) but this was reviewed by the committee and approved. (The vast majority of changes in this PR are due to the renaming. The code changes are relatively small.)\r\n\r\n`PSPropertyExpression` now lives in a public namespace where it can be used by cmdlet and script authors to easily add the same type of functionality to their commands. \r\n\r\nI also modified `PSPropertyExpression` to treat hashtables as objects so that\r\n```\r\n@{prop = 3} | measure-object prop\r\n```\r\nand\r\n```\r\n@{prop = 3} | measure-object {$_.prop}\r\n```\r\nwill work the identically. (Previously the example using just the property name would just fail.)\r\n\r\n#### Breaking Change Summary\r\n\r\nThis PR brings in a breaking change in an edge case:\r\n> This could be a breaking change when it comes to the ConstrainedLanguage mode.\r\n@{prop = 3} | measure-object Count works in ConstrainedLanguage mode today, but with this change, the conversion from Hashtable to PSCustomObject will throw exception.\r\n\r\nIt has been reviewed by the committee and agreed to accept this breaking change.\r\nPlease see the discussion at https://github.com/PowerShell/PowerShell/pull/6934#discussion_r193243793 for more information.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-06-20T07:23:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We should get PowerShell Committee conclusion for new public API.",
      "created_at": "2018-05-25T06:25:24Z",
      "updated_at": "2018-05-25T06:25:24Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov We reviewed this in the last committee meeting and approved the name. I thought @SteveL-MSFT had updated the bug to reflect this but I don't see it. ",
      "created_at": "2018-05-29T03:20:47Z",
      "updated_at": "2018-05-29T03:20:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay Thanks! I am extecting that the PR will marked by the label.\r\nSeems we lost all MSFT team in recent weeks. I wonder.",
      "created_at": "2018-05-29T03:26:47Z",
      "updated_at": "2018-05-29T03:26:47Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Oops - I had the wrong issue number in the comment so you might have looked at the wrong issue. #6855 is, in fact, marked \"Committee Reviewed\".",
      "created_at": "2018-06-01T00:11:39Z",
      "updated_at": "2018-06-01T00:11:39Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Says we're ignoring CodeFactor issues for now.",
      "created_at": "2018-06-01T19:37:43Z",
      "updated_at": "2018-06-01T19:37:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov FYI - Most of my team has been involved with helping port existing Windows PowerShell modules owned by other teams to work with PSCore6 so you may find us not as active.  Hopefully we'll be back to fully engaged by end of June (or mostly engaged).",
      "created_at": "2018-06-01T21:09:37Z",
      "updated_at": "2018-06-01T21:09:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'm glad that this process began. I do not see this leading to corrections in PowerShell Core - it convinces me that PowerShell Core is very good! :smile:",
      "created_at": "2018-06-02T10:15:11Z",
      "updated_at": "2018-06-02T10:15:11Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @BrucePay  Sorry for the late review.  To answer Dongbo's question, from a security point of view I think this is Ok.  MshExpression (now PSPropertyExpression) takes a ScriptBlock in its constructor which it will invoke.  But as long as the passed in ScriptBlock is created in a constrained environment it will be marked accordingly and the script block will be invoked with CL mode constraints.  \r\n\r\nA constructor also takes a string \"expression\", but as near as I can tell it is never evaluated as script and is used to look up properties.  Is this correct?\r\n\r\nHowever, we should include a CL mode test to ensure the expression scriptblock is run in CL mode.",
      "created_at": "2018-06-14T17:45:03Z",
      "updated_at": "2018-06-14T17:45:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> A constructor also takes a string \"expression\", but as near as I can tell it is never evaluated as script and is used to look up properties. Is this correct?\r\n\r\n@PaulHigin Yes, that's correct. It's for property lookup.",
      "created_at": "2018-06-14T19:08:55Z",
      "updated_at": "2018-06-14T19:08:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and is fine with this breaking change which is likely only an edge case, but the positive impact for most users is beneficial",
      "created_at": "2018-06-14T20:23:23Z",
      "updated_at": "2018-06-14T20:23:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin New commits have been pushed. Can you please update your review? Thanks",
      "created_at": "2018-06-18T18:53:57Z",
      "updated_at": "2018-06-18T18:53:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@BrucePay I just noticed that we didn't run feature tests for this PR CI. Can you please push another commit with `[feature]` in the commit message? That will trigger the feature test run. You can also update the current head commit by running `git commit --amend` in your local `brucepay_MeasureObject` branch, and then forcing push to the remote by `git push --force-with-lease <your fork repo> brucepay_MeasureObject`. Thanks!",
      "created_at": "2018-06-19T00:01:24Z",
      "updated_at": "2018-06-19T00:01:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@BrucePay I have submitted a dummy commit to trigger the feature test run for this PR.",
      "created_at": "2018-06-19T16:47:08Z",
      "updated_at": "2018-06-19T16:47:08Z"
    }
  ],
  "created_at": "2018-05-25T01:10:41Z",
  "number": 6934,
  "state": "closed",
  "title": "Fix for #6855 - Measure-Object should handle scriptblock properties.",
  "updated_at": "2018-10-15T21:44:56Z"
}