{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14462",
  "author": "JustinGrote",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nImplementation of https://github.com/PowerShell/PowerShell/issues/13282\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\nThis PR adds the `-SSHTransportPath` parameter to allow specification of a custom ssh executable. While it can be used to use a custom version of OpenSSH for compatibility or troubleshooting reasons,  the primary impetus is to enable transport authors to substitute their own executables in order to provide alternative transports (such as websockets, rendevous, Azure Bastion-like services, phone-home debug sessions, etc.), since all Powershell does is spawn ssh and then pass stdin/stdout PSRemoting XML to/from the program.\r\n\r\nThis PR is intended to be as low impact and non-breaking as possible, and as such the Arguments passed to the command do not change and are not customizable, however they do provide all the information required to establish a session so a custom wrapper can translate the SSH arguments into whatever working options it requires.\r\n\r\nThis is intended as a low-impact stop gap until the PSRemoting engine is decoupled into a subsystem and a proper CustomTransportHandler interface is provided.\r\n\r\n## WIP to complete\r\n\r\n- [ ] @PaulHigin in the case the executable is not found, it currently gets wrapped and throws a generic eventing error, is it OK to adjust the eventing error with the file not found exception?\r\n- [ ] Tests\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-01-07T15:51:29Z",
  "comments": [
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "It was indeed a very minor change, now if all we could do was to add command-line parameters to be passed to the executable instead of the OpenSSH command-line, it would be fully usable! Great work. Again, I am surprised how little changes were required in the end, great work!",
      "created_at": "2020-12-19T00:21:21Z",
      "updated_at": "2020-12-19T00:21:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2021-01-06T08:00:07Z",
      "updated_at": "2021-01-06T08:00:07Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin awaiting your feedback on the WIP items, thanks.",
      "created_at": "2021-01-06T14:48:56Z",
      "updated_at": "2021-01-06T14:48:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We believe the right abstraction to allow for custom transports is planned work for 7.2 to enable separate PS subsystems for transports.  This will be more work on the transport author side, but will ensure adherence to expectations for transports and allow more flexibility on the remoting protocol used and installable as a module.  For this reason, we would not accept this PR.",
      "created_at": "2021-01-06T23:21:38Z",
      "updated_at": "2021-01-06T23:21:38Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Understood, the goal of this PR was to provide a stop-gap to that eventual work with the assumption it would be an involved process at least a year out, however if it is going to be scheduled for 7.2 then that's a close enough timeframe. Thank you for your consideration.",
      "created_at": "2021-01-07T15:51:29Z",
      "updated_at": "2021-01-07T15:51:29Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@awakecoding FYI, it was rejected",
      "created_at": "2021-01-19T17:19:20Z",
      "updated_at": "2021-01-19T17:19:26Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "> @awakecoding FYI, it was rejected\n\nI know, it's a bummer. I understand that a different design approach was decided and potentially planned for 7.2, but I still think it is overkill and complementary to this first approach. I am just concerned that we may end up without a solution before the feature freeze for 7.2 given the much larger scope of a plugin system and all the stuff that goes with it.",
      "created_at": "2021-01-19T17:58:45Z",
      "updated_at": "2021-01-19T17:58:45Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT @joeyaiello Last case I'll make for this and I'll drop it since the community call wasn't a great forum and the Q&A didn't post my full explanation.\r\n\r\nI absolutely 100% hear your concerns about supportability and the fact you have to live with the changes, and I agree with @SteveL-MSFT that the original solution was the \"hack\" to begin with as the hardcoded .exe. I absolutely also think that the remoting transport infrastructure should unlock the seal/private on the transporthandler class or reimplemented as an interface so that it can be reimplemented as required which is clearly @PaulHigin's original design, the problem is that it's difficult to do plugins in a \"powershelly\" way for that as its architected and it's not worth heavily reimplementing if it's moving out to a subsystem.\r\n\r\nI also totally agree that moving it into a separate subsystem is the best long term solution and I look forward to that, however given the strained priorities of the already burdened team I'm very dubious this will make 7.2 once the real intricacies, edge cases, etc. get involved with moving it out to a subsystem.\r\n\r\nAs to the comment from @joeyaiello on \"totally fine using a fork\", the problem here is that it is a client operation, so without wide adoption, asking everyone to install a custom powershell just to use a custom transport is antithetical to the purpose, which is to make powershell remoting more easily accessible via phone home techniques, Azure Relay, websockets, etc.\r\n\r\nSo, that being said,\r\n\r\nFrom a **support standpoint** this should be seen as fixing the hack and not introducing a new one. ssh.exe should have never been hardcoded, at the very least it should have been made available as a settings variable, which is basically what this does.  **it does not require the Powershell team to endorse custom transports, to support their implementation or use, or to support users who use them**, any less than the Powershell team would be expected to support custom Extension Vaults made for Secret Management. So I don't think the support argument is a valid argument unless there's something I'm missing, because I didn't hear a specific support scenario that you are concerned about \"living with\" for the next 3-5 years.\r\n\r\nIn terms of \"user whiplash\", I don't imagine you plan to rip out the entire remoting system, instead have the subsystem run side-by-side with a toggleable option. If you plan to rip out parameters like -SSHTransport as a breaking change then that's going to have a lot more impact to users by far. So this wouldn't create whiplash, it would be one method of implementation and then the subsystem would become a new one.\r\n\r\nSo, I ask to reconsider from that standpoint, at least as an experimental feature which I'm happy to adjust it to be, but I won't press any more on it. Thanks for your time and all you do, the gravity of decisions that have to be made for a product that has a massive installation base and a reputation for high quality and stability are not lost on me, I just think the standard arguments being made in that regard do not apply here.",
      "created_at": "2021-01-21T18:49:58Z",
      "updated_at": "2021-01-21T18:53:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "As the implementer of the SSH transport feature, I can tell you that we thought long and hard about shelling out to SSH.  The implementation is less than ideal and fraught with problems that were difficult to deal with.  But we decided to go with it anyway because SSH is ubiquitous and the value of using it was great.\r\n\r\nBut I feel the case for extending it in a general way is much less compelling.  If we are going to provide for pluggable remoting transports, I strongly feel we should do it in a much more robust way.",
      "created_at": "2021-01-21T19:12:34Z",
      "updated_at": "2021-01-21T19:12:34Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin the current choice may be seen as less than ideal, but it works, and from what has been discussed in the community calls, using something other than OpenSSH is very unlikely to be supported officially due to the strict security review requirements. \r\n\r\nThe way it currently works is likely to remain the only way it works for a long time, and it's not necessarily a bad thing: by launching ssh.exe as a subprocess and interacting with it using nothing more than standard input/output streams, you have effectively decoupled the OpenSSH client from PowerShell in a manner very similar to how the OpenSSH server is very decoupled from the PowerShell server through the OpenSSH subsystem interface.\r\n\r\nLet me explain: on the OpenSSH server, one needs to configure a \"powershell\" subsystem with a command to execute. When the OpenSSH server sees the \"powershell\" subsystem it just calls that command (PowerShell in SSH server mode) and interacts with it using nothing more than standard input/output streams. Sounds familiar? That's exactly the same as on the client, except with roles reversed (OpenSSH calls PowerShell on the server, PowerShell calls OpenSSH on the client).\r\n\r\nWhat we're asking for only makes the current SSH implementation more flexible, such that any executable with any parameters can be launched as a replacement of the OpenSSH client. Maybe you feel the current approach is not satisfactory, which is why you'd rather not improve it to make it possible to override those two, but that's really all we're asking for. It would open a world of possibilities, and I can confirm that it works perfectly well in our replacement transport that now ships as part of our product.\r\n\r\nIn other words, **we can transform \"unsatisfactory\" OpenSSH integration into pure gold with a minor tweak** allowing anybody to pass explicitly the following:\r\n\r\n- SSH client executable (other than ssh.exe)\r\n- SSH client parameters (array of arguments)\r\n\r\nIf we can do that, we've just made the client-side integration on par with the server-side integration. The OpenSSH server lets you specify any command and arguments for a given subsystem name, so I don't see why the PowerShell client wouldn't be able to accept any command and arguments, especially if they are to be passed explicitly to PowerShell, requiring no specific registration or plugin system.\r\n\r\nLast but not least, I would consider this minor improvement/fix a complement to any future custom transport extensibility. Even with a full custom transport plugin system, the current OpenSSH client integration will likely always remain, so it wouldn't bring additional technical debt into the core project. As long as PowerShell supports calling \"ssh.exe\", this would remain supported with very limited code to \"maintain\".\r\n\r\nTo conclude, I should stress the fact that this already works extremely well today, it is just a real pain to override. I have to place an executable named \"ssh.exe\" in a directory that I prepend to the PATH, and then I have to modify my replacement executable to accept the same command-line arguments as ssh.exe, but read its real command line parameters through an environment variable instead. The only \"hack\" here is what has to be done today to override the parameters that currently cannot be passed explicitly. Don't make us beg, but please reconsider this, it is extremely valuable for so little.",
      "created_at": "2021-01-21T19:47:59Z",
      "updated_at": "2021-01-21T19:47:59Z"
    }
  ],
  "created_at": "2020-12-18T23:35:11Z",
  "number": 14462,
  "state": "closed",
  "title": "WIP: Add -SSHTransportPath Parameter",
  "updated_at": "2022-07-14T00:50:08Z"
}