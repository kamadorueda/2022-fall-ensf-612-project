{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13399",
  "author": "anmenaga",
  "body": "# PR Summary\r\n\r\nThis PR is in context of [DSC changes for PowerShell 7](https://github.com/PowerShell/PowerShell-RFC/pull/265).\r\nP0 end-to-end scenario that we are enabling here consists of 3 components: PowerShell core (SMA dll), `PSDesiredStateConfiguration` module, GuestConfigAgent.\r\nThis PR addresses the first part - updates to DSC code in SMA dll to remove dependency on MOF/MMI APIs, therefore making DSC cross-platform and enabling GuestConfigAgent scenarios.\r\nFocus is on [class-based DSC resources](https://github.com/PowerShell/PowerShell/issues/13731).\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/13731\r\n\r\nAt this point this PR is not a breaking change: existing (MOF/MMI-based) DSC code will continue to work as it was and will continue to be the default mechanism for DSC operations (for now).\r\nCross-platform DSC updates of this PR are done as an alternative mechanism for DSC operations; to use them:\r\n1) `PSDesiredStateConfiguration` **v3** module has to be installed;\r\n2) `PS7DscSupport` experimental feature has to be enabled.\r\n\r\nExample:\r\n![U18ClassDscCapture](https://user-images.githubusercontent.com/11860095/104243583-a12c1800-5415-11eb-88e4-38fb6cd1d6f9.png)\r\n\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Support only DSC class based resources](https://github.com/PowerShell/PowerShell/issues/13731)\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6470\r\n- **Testing - New and feature**\r\n    - [X] N/A or can only be tested interactively:\r\n      - new code requires DSC v3 module which is not published yet;\r\n      - DSC code in SMA is essentially a set of utility functions (expected to be moved to DSC module repo); proper test automation belongs to DSC module repo;\r\n      - existing test automation in this repo ensures no regressions in MOF/MMI-based implementation.\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [X] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-02-02T22:47:54Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Are there performance comparisons? It would be very amazing if new schema worked slower than original.",
      "created_at": "2020-08-11T12:26:29Z",
      "updated_at": "2020-08-11T12:26:29Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "The cmdlet name to convert MOF to JSON doesn't fit the naming conversions. It looks only to be one directional not bi-directional. `Convert-CimMofToJson` to something like `ConvertTo-DscJsonSchema`. The PS verb description for `Convert` indicates bi-directional and `ConvertTo` is one directional.\r\n\r\n`Convert` - Changes the data from one representation to another when the cmdlet supports bidirectional conversion or when the cmdlet supports conversion between multiple data types.\r\n`ConvertTo` - Converts from one or more types of input to a primary output type (the cmdlet noun indicates the output type).",
      "created_at": "2020-08-11T17:37:39Z",
      "updated_at": "2020-08-11T17:37:39Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Updated PR Summary to reflect recent changes.",
      "created_at": "2020-08-20T21:09:02Z",
      "updated_at": "2020-08-20T21:09:02Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan @SteveL-MSFT @bagajjal @TravisEz13  Please have another look at this. Thank you.",
      "created_at": "2020-08-20T21:20:20Z",
      "updated_at": "2020-08-20T21:20:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga Please resolve the merge conflict.",
      "created_at": "2020-08-21T05:54:13Z",
      "updated_at": "2020-08-21T05:54:13Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "`Codacy` errors are in existing mof code. Fixing them per recommendations actually broke some tests, so leaving them as is.",
      "created_at": "2020-08-21T21:38:08Z",
      "updated_at": "2020-08-21T23:46:47Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan @SteveL-MSFT @bagajjal @TravisEz13 Please have another look at this. Thank you.\r\nI think the main review focus should be on changes in `Parser.cs` because that alters existing code path and has theoretical potential to cause regressions.",
      "created_at": "2020-09-01T21:06:00Z",
      "updated_at": "2020-09-01T21:14:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga @SteveL-MSFT This PR cause a huge amount of duplicate code with slight differences (JSON vs. MOF). It will be hard to maintain and work with in future -- think about the work in 7.2 to separate out DSC from SMA as a subsystem. Are we going to delete the MOF related code in 7.2? If not and if we are going to keep both for a long period of time, then we probably will need to refactor the code to consolidate them.\r\n\r\n[Update] The refactoring ask doesn't block this PR, but should be a follow-up work item.\r\n\r\nAlso, a general question about tests. How much DSC tests do we have for both the existing code and new code in this PR? (may not be in this repo) We will need solid amount of tests for the \"DSC as a subsystem\" work in 7.2.",
      "created_at": "2020-09-02T17:23:40Z",
      "updated_at": "2020-09-02T20:38:52Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> If not and if we are going to keep both for a long period of time, then we probably will need to refactor the code to consolidate them.\r\n\r\nYeah I also had this thought, that common parser code might be best implemented in a shared way (like an abstract base class)",
      "created_at": "2020-09-02T17:33:23Z",
      "updated_at": "2020-09-02T17:33:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Given some of the concerns about the code, we will be deferring this to 7.2",
      "created_at": "2020-09-02T20:58:17Z",
      "updated_at": "2020-09-02T20:58:17Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "`It will be hard to maintain and work with in future -- think about the work in 7.2 to separate out DSC from SMA as a subsystem. Are we going to delete the MOF related code in 7.2`\r\nYes. well, maybe not in 7.2 (there is ongoing conversation with Joey and Nitin about this) but soon. The main point of refactoring / creating a modified copy (as opposed to surgical changes in existing code)  was to make removal of mof code easy (additionally, it is much easier than consolidation (that I've tried originally) and much lower chance of regressions) - just get rid of `Mof*.cs` files and remove corresponding calls from the parser.",
      "created_at": "2020-09-02T20:59:42Z",
      "updated_at": "2020-09-02T22:00:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Other thoughts are about backward compatibility:\r\n    - for 5.1 we could use Windows PowerShell compatibility feature\r\n    - for 7.0 ?\r\n\r\nThinking about backward compatibility with 7.0 we could consider implementing two DSC subsystems - 1. modern Json, 2. old MOF. In the case users could load DSC subsystem they need. We could have tests splitted by subsystem.\r\nLater we could easily remove old code.",
      "created_at": "2020-09-03T04:19:24Z",
      "updated_at": "2020-09-03T04:20:55Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-09-10T14:00:09Z",
      "updated_at": "2020-09-10T14:00:09Z"
    },
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "I assume the goal is to get rid of the definitions of `Microsoft.Management.Infrastructure.CimInstance`, `Microsoft.Management.Infrastructure.CimProperty` and so on, within PowerShell's codebase ?\r\n\r\nIf JSON parsing is the issue, I'd actually favor dropping completely the MOF/JSON based resource type, and make Class-based resource the only and great way to create/consume resources in PS7+.\r\n\r\nIf the  MOF/JSON are not backward compatible anyway (Because [we need to change](https://github.com/search?p=7&q=org%3Adsccommunity+CimInstance&type=Code) `[CimInstance]` type to `[PSObject]` for embedded types in the resources), then at least if we move all resources to Class-based DSC resource, **we do the change once and for all**, and _that_ is backward compatible with 5.1 (afaik).\r\n\r\nNow, I'm not sure I remember how to return an embedded type object in the `Get()` of a Class-based DSC resource, does it still use use `New-CimInstance`, as the `Invoke-DscResource` works?\r\n\r\n```PowerShell\r\n# CimCmdlets only on Windows\r\n$cimInstance = New-CimInstance -ClassName ClassSubType `\r\n    -Namespace root/microsoft/Windows/DesiredStateConfiguration `\r\n    -Property @{Property1 = 'test' } `\r\n    -ClientOnly\r\n\r\n$InvokeDscrParam = @{\r\n        Name     = 'ClassRsrcWithSubType'\r\n        ModuleName = 'mod1'\r\n        Property = @{\r\n            Ensure          = 'present'\r\n            Name            = 'present'\r\n            SubTypeProperty = $cimInstance\r\n        }\r\n    }\r\n\r\n$GetResult = Invoke-DscResource @InvokeDscrParam -Method Get\r\n```\r\n\r\nCurrently on linux we can replace the `New-CimInstance` cmdlet with:\r\n```PowerShell\r\n$cimInstance = [Microsoft.Management.Infrastructure.CimInstance]::new(\"ClassSubType\",'root/microsoft/Windows/DesiredStateConfiguration')\r\n    $cimProperty1 = [Microsoft.Management.Infrastructure.CimProperty]::Create('Property1','test', [cimtype]::String, [Microsoft.Management.Infrastructure.CimFlags]::none)\r\n    $cimInstance.CimInstanceProperties.Add($cimProperty1)\r\n```\r\n\r\nBut in this case anyway, if it was converted to a class-based DSC resource, the \"natural\" way would be to use a `[ClassSubType]::new()`.\r\nAnother good reason to completely do away with those JSON/MOF/PSObject intermediary?\r\nAlso within the resource it's easier to have code to do either way depending on version (if `v5.1` use `New-CimInstance` else `[ClassSubType]::new()`).\r\n\r\nDoing so, we could instead write a script to convert a MOF-based resource to a Class based one to ease the transition. @johlju already [has a command to read the MOF to generate the documentation](https://github.com/dsccommunity/DscResource.DocGenerator/blob/master/source/Private/Get-MofSchemaObject.ps1), generating a PS class from it with appropriate attributes would be a day's work.\r\n\r\nI don't see the benefit of making it even more confusing on users and people learning, and I don't see myself explaining why there's a MOF, a JSON, or a class way of doing it... And even if JSON is new, they should use Class anyway.\r\n\r\nI know a breaking change is a pain, but **if we have to have one**, lets make the best use of it.\r\n\r\n/cc @johlju @PlagueHO @dsccommunity @bagajjal ",
      "created_at": "2020-09-11T07:37:40Z",
      "updated_at": "2020-09-11T07:50:58Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you @gaelcolas for your input.\r\n\r\n> I assume the goal is to get rid of the definitions of `Microsoft.Management.Infrastructure.CimInstance`, `Microsoft.Management.Infrastructure.CimProperty` and so on, within PowerShell's codebase ?\r\n\r\nYes.\r\n\r\n> If JSON parsing is the issue, I'd actually favor dropping completely the MOF/JSON based resource type, and make Class-based resource the only and great way to create/consume resources in PS7+.\r\n\r\nJSON parsing is Not the issue. Or you meant \"If MOF parsing is the issue...\" ?\r\nAnd I agree that Class-based resources are better (and easier to deal with / less prone to bugs from engineering point of view).\r\n\r\n> we could instead write a script to convert a MOF-based resource to a Class based one to ease the transition\r\n\r\nAgree. This could go as a cmlet in `PSDesiredStateConfiguration` module right next to `ConvertTo-DscJsonSchema` that is there.",
      "created_at": "2020-09-16T21:53:00Z",
      "updated_at": "2020-09-16T21:53:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-09-24T02:00:07Z",
      "updated_at": "2020-09-24T02:00:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-10-21T20:00:05Z",
      "updated_at": "2020-10-21T20:00:05Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Updated PR summary to reflect recent changes, specifically [support only DSC class based resources](https://github.com/PowerShell/PowerShell/issues/13731).\r\nAlso Import-Module call in the parser was removed.",
      "created_at": "2021-01-11T23:25:10Z",
      "updated_at": "2021-01-11T23:25:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "356 - too much conversations! Maybe move the work in new PR?",
      "created_at": "2021-01-14T04:20:23Z",
      "updated_at": "2021-01-14T04:20:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt Can you please update your review? Thanks",
      "created_at": "2021-02-01T20:00:23Z",
      "updated_at": "2021-02-01T20:00:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga Great work!",
      "created_at": "2021-02-03T09:05:05Z",
      "updated_at": "2021-02-03T09:05:05Z"
    }
  ],
  "created_at": "2020-08-11T08:23:20Z",
  "number": 13399,
  "state": "closed",
  "title": "Cross-platform updates to DSC code in SMA DLL",
  "updated_at": "2021-02-03T09:05:05Z"
}