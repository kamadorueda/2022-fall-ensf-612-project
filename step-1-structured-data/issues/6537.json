{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6537",
  "author": "ghost",
  "body": "In Unix we have:\r\n\r\n```\r\ncurl -O https://github.com/PowerShell/PowerShell/archive/master.zip\r\n\r\n# and\r\n\r\nwget https://github.com/PowerShell/PowerShell/archive/master.zip\r\n```\r\n\r\nwhich download the file called master.zip at PWD.\r\n\r\nIn PowerShell, we have to specify the filename:\r\n\r\n```\r\ncurl -O master.zip https://github.com/PowerShell/PowerShell/archive/master.zip\r\n```\r\n\r\nand prints the contents to stdout without -OutFile (or -O, -Ou, -Out, -OutF, -OutFi, -OutFil).\r\n\r\nSometimes target URL is read from resources other than manual input and file names are long, less human readable, and we are supposed to preserve the filenames. That requires extra processing / string manipulation cost, which is bit of an inconvenience.\r\n\r\nPlease add a shorthand `-Save` switch to make it less wordy, so we can do:\r\n\r\n\r\n```\r\niwr -Save https://github.com/PowerShell/PowerShell/archive/master.zip\r\n```",
  "closed_at": "2018-04-17T14:02:49Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@kasper3 This is a commonly requested feature. I have investigated adding something similar and it is possible, but not as simple as one would hope. The value of `Invoke-WebRequest` and `Invoke-RestMethod` is in their processing of output from remote endpoints. As such, much of their code is devoted to that purpose as opposed to downloads. This makes integrating download specific features troublesome.\r\n\r\nI have been drafting an RFC for the inclusion of a new download specific cmdlet. In the move to PowerShell Core the Web Cmdlets lost their ability to work with FTP and FILE URIs. There have also been asks to support downloading of files over other protocols such as SFTP, FTPS, SCP/SSH, etc. There are other download specific features that have been requested including the one in this issue.\r\n\r\nRather than overload the current Web Cmdlets with download features, I would rather have a separate cmdlet that becomes the primary cmdlet for all file download functionality.\r\n\r\nI made an exception with the `-Resume` feature as that was currently a huge pain point and not something users could easily work around. However, for the automatic save path detection/creation feature, I would rather that be held off for the new cmdlet and not included in `Invoke-WebRequest` and `Invoke-RestMethod`. I already plan for this to be a default feature that would work like this:\r\n\r\n```powershell\r\nInvoke-Download $uri\r\n```\r\n\r\nThe file would be saved in the current path and the automatic naming logic would be very similar to wget.",
      "created_at": "2018-03-31T10:43:57Z",
      "updated_at": "2018-03-31T10:43:57Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "A new cmdlet without specifying the switch sounds good, but would it preseve semantics of wget or curl for stdout piping / redirection?\r\n\r\n`curl https://vi.stackexchange.com/ -vs >curl-output.txt 2>&1`\r\n(https://stackoverflow.com/questions/5427454/how-do-i-pipe-or-redirect-the-output-of-curl-v)\r\n\r\n`wget -qO- http://example.com > wget-output.txt 2>&1`\r\n(`-O-` is equivalent to `-O /dev/stdout`, see this thread https://superuser.com/questions/321240/how-do-you-redirect-wget-to-standard-out/321241)\r\n\r\nCurrently, I am using this kind of approach with Invoke-WebRequest (https://github.com/dotnet/cli/issues/8958):\r\n\r\n```posh\r\n(curl https://raw.githubusercontent.com/dotnet/cli/master/scripts/register-completions.ps1).Content`\r\n    | out-file -append -encoding ASCII -filepath $PROFILE\r\n```",
      "created_at": "2018-03-31T11:11:50Z",
      "updated_at": "2018-03-31T11:11:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@kasper3 Can you be more specific about what you are trying to do?\r\n\r\nIt's important to note that making things work 100% like curl/wget and 100% like bash are not the goals of either the existing cmdlets, the new cmdlet, nor PowerShell. It's a different language and a different ecosystem, so things will be different in how they are used, what they do, and how they do it.\r\n\r\nBut if there is something specific that you think is missing, please be more specific and I'll see if it's something needed or something that is already possible.\r\n\r\nThe download cmdlet would be downloading files. The current web cmdlets would be for working with output from remote endpoints. They would not have full feature parity between them. If you need remote data in PowerShell and not as a saved file, you would use the web cmdlets. if you needed to download the remote file and save it to disk you would use the download cmdlet. Making the download cmdlet put content to PowerShell output streams would not be its objective.",
      "created_at": "2018-03-31T11:40:56Z",
      "updated_at": "2018-03-31T11:40:56Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "I don't see how \"ability to pipe data as well\" in addition to save file is a non-objective of command/utility tbh. The ask is to have a utlity that can:\r\n\r\n1. download a file from remote resource:\r\n    a. without specifying destination file name\r\n    b. with specified destination file name\r\n2. pipe download stream to stdout\r\n\r\nIWR does 1b and 2. The ask is to add 1a. The ask is NOT to lose 1b or 2 when implementing 1a.",
      "created_at": "2018-03-31T12:35:36Z",
      "updated_at": "2018-03-31T12:36:14Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@kasper3 \r\n\r\nIn PowerShell, cmdlets and functions should _Do One Thing_. Processing the output is a separate thing. \r\n\r\nFor example. I give you the url `https://contoso.com/getfile?ID=18657357`. The download cmdlet will download this and file. But what kind of file is it? is it text? if it is text, what encoding do I use? Do I need to care bout a BOM? How do I determine that? How do I let you override that? Do you need a byte stream? what about a IO Stream?\r\n\r\nThat is a bunch of additional logic to put the file in standard out. The code in this cmdlet would have to stay on top of all the changes in the PowerShell ecosystem with regards to file content handling so that there are no surprises. \r\n\r\nHowever, we have cmdlets that already do that logic and do stay on top of it all like `Get-Content`.\r\n\r\nWhat I planned for the output of the download cmdlet is to return the item it creates with `-PassThru`. then you could do\r\n\r\n```powershell\r\nInvoke-Download $Uri -PassThru | Get-Content | DoStuffWithContent\r\n```",
      "created_at": "2018-03-31T12:47:58Z",
      "updated_at": "2018-03-31T12:50:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "FYI PowerShell/PowerShell-RFC#124",
      "created_at": "2018-03-31T18:31:05Z",
      "updated_at": "2018-03-31T18:31:05Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I'm closing as this is a duplicate of #6618 where there is more discussion on the topic.",
      "created_at": "2018-04-17T14:02:49Z",
      "updated_at": "2018-04-17T14:02:49Z"
    }
  ],
  "created_at": "2018-03-31T07:58:56Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 6537,
  "state": "closed",
  "title": "Invoke-WebRequest -Save (without specifying the name)",
  "updated_at": "2018-04-17T14:02:50Z"
}