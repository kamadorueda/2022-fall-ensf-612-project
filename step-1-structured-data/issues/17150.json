{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17150",
  "author": "andyrobbins",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am experiencing a problem with runspaces created with ForEach-Object -Parallel. I believe each runspace should always have access to all default modules and cmdlets, but I am seeing inconsistencies where sometimes a runspace does not appear to have access to default modules and cmdlets.\r\n\r\nThe problem is reproducible when specifying a ThrottleLimit of 1, but is more reliably reproduced when specifying a ThrottleLimit greater than 1.\n\n### Expected behavior\n\n```console\nExpected behavior, and the behavior that sometimes does occur:\r\n\r\nPS /Users/andyrobbins> Get-Date\r\n\r\nWednesday, April 13, 2022 12:03:54 PM\r\n\r\nPS /Users/andyrobbins> function GetDate {Get-Date}\r\nPS /Users/andyrobbins> New-Variable -Name 'GetDateDefinition' -Value (Get-Content function:GetDate) -Force\r\nPS /Users/andyrobbins> @(1..3) | ForEach-Object -ThrottleLimit 1 -Parallel { $function:GetDateThread = $using:GetDateDefinition; GetDateThread}\r\n\r\nWednesday, April 13, 2022 12:03:54 PM\r\nWednesday, April 13, 2022 12:03:54 PM\r\nWednesday, April 13, 2022 12:03:54 PM\n```\n\n\n### Actual behavior\n\n```console\nActual behavior, which happens only some of the time:\r\n\r\nPS /Users/andyrobbins> Get-Date\r\n\r\nWednesday, April 13, 2022 12:03:54 PM\r\n\r\nPS /Users/andyrobbins> function GetDate {Get-Date}\r\nPS /Users/andyrobbins> New-Variable -Name 'GetDateDefinition' -Value (Get-Content function:GetDate) -Force\r\n\r\nPS /Users/andyrobbins> @(1..3) | ForEach-Object -ThrottleLimit 1 -Parallel { $function:GetDateThread = $using:GetDateDefinition; GetDateThread}\r\n\r\nWednesday, April 13, 2022 12:04:05 PM\r\nGet-Date: The term 'Get-Date' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nWednesday, April 13, 2022 12:04:05 PM\n```\n\n\n### Error details\n\n```console\nGet-Date: The term 'Get-Date' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n```\n\n\n### Environment data\n\n```powershell\nPS /Users/andyrobbins> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Darwin 21.1.0 Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:01 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T6000\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Users\\andyrobbins> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n<img width=\"1029\" alt=\"Screen Shot 2022-04-13 at 12 07 31 PM\" src=\"https://user-images.githubusercontent.com/842644/163253024-b8d99175-1452-4246-984c-114dcaa1543a.png\">\r\n<img width=\"1167\" alt=\"Screen Shot 2022-04-13 at 12 07 57 PM\" src=\"https://user-images.githubusercontent.com/842644/163253051-9d4358f0-f10d-4561-ace8-89e675217728.png\">\r\n<img width=\"1018\" alt=\"Screen Shot 2022-04-13 at 12 11 24 PM\" src=\"https://user-images.githubusercontent.com/842644/163253062-4fea5113-2e88-4af5-b3c9-e1430ac1da16.png\">\r\n",
  "closed_at": "2022-04-15T20:00:41Z",
  "comments": [
    {
      "author": "andyrobbins",
      "author_association": "NONE",
      "body": "I believe this is a repeat of this issue: https://github.com/PowerShell/PowerShell/issues/16461 ",
      "created_at": "2022-04-13T19:18:00Z",
      "updated_at": "2022-04-13T19:18:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah this should throw since you're attempting to bring over a `ScriptBlock` as is.\r\n\r\nThe code that does this check currently may need to be updated to unwrap `PSObject`s. /cc @PaulHigin ",
      "created_at": "2022-04-13T19:30:17Z",
      "updated_at": "2022-04-13T19:30:17Z"
    },
    {
      "author": "andyrobbins",
      "author_association": "NONE",
      "body": "Thank you @SeeminglyScience.\r\n\r\nI found that the workaround posted [here](https://github.com/PowerShell/PowerShell/issues/16461#issuecomment-967759037) by @daxian-dbw appears to fix the issue:\r\n\r\n<img width=\"1407\" alt=\"Screen Shot 2022-04-13 at 12 58 46 PM\" src=\"https://user-images.githubusercontent.com/842644/163260324-22a0c515-693b-4933-96ba-c7bd89304f2b.png\">\r\n\r\nI collapsed the example multi-line script shared by @daxian-dbw into one line only to be able to fit more examples into the same screen space.",
      "created_at": "2022-04-13T20:00:26Z",
      "updated_at": "2022-04-13T20:00:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This illustrates the dangers of simply copying state (such as variables) from one runspace to another.  Some objects are not safe because they have runspace affinity or are just not thread safe dotNet types.  I recommend using PowerShell modules instead of functions and ensuring those modules are imported (either by explicitly importing or having them in the $env:PSModulePath paths).\r\n\r\nThis work item (#12240) is to add an option to copy state for `ForEach-Object -Parallel`.  But it is difficult to know what state is safe to copy.  Plus it degrades performance if much of the current state is not needed, and performance is usually a high priority when `ForEach-Object -Parallel` is used.",
      "created_at": "2022-04-13T20:18:27Z",
      "updated_at": "2022-04-13T20:18:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Just to clarify, there is something potentially actionable here since it's evading the scriptblock check. This if:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/7cc9c874730e87b06dbe54d50e77c1c472996c54/src/System.Management.Automation/engine/InternalCommands.cs#L422-L431\r\n\r\nMight need to be:\r\n\r\n```csharp\r\nif (item is ScriptBlock or PSObject { BaseObject: ScriptBlock })\r\n{\r\n    // etc\r\n}\r\n```",
      "created_at": "2022-04-14T02:03:53Z",
      "updated_at": "2022-04-14T02:03:53Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience  Yes, but the point of this Issue is that the author expects ForEach-Object -Parallel to duplicate the original session into all parallel sessions, and this just isn't possible.  Adding a check for PSObject scriptblocks needs to be created in a separate issue.",
      "created_at": "2022-04-14T16:06:13Z",
      "updated_at": "2022-04-14T16:06:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Ah good point Paul, I've opened #17152 to track. Thanks!",
      "created_at": "2022-04-14T17:04:44Z",
      "updated_at": "2022-04-14T17:04:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-04-15T20:00:40Z",
      "updated_at": "2022-04-15T20:00:40Z"
    }
  ],
  "created_at": "2022-04-13T19:14:14Z",
  "number": 17150,
  "state": "closed",
  "title": "Inconsistent Availability of Built-in cmdlets in Parallel Runspace",
  "updated_at": "2022-04-15T20:00:41Z"
}