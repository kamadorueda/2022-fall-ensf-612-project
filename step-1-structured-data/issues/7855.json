{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7855",
  "author": "mklement0",
  "body": "<sup>Follow-up from #7715; related to #7713, #7537, and #5797.</sup>\r\n\r\n**A pattern is emerging for asking cmdlets to output \"bare\" objects**, which means output objects that:\r\n\r\n* are _not_ decorated with `NoteProperty` members, the way lines read from a file with `Get-Content` are, for instance.\r\n\r\n* are _not_ wrapped in instances of a _helper_ type, the way that `Select-String` or `Compare-Object` output is, for instance.\r\n\r\nThere are three, not mutually exclusive motivations for requesting such \"bare\" output:\r\n\r\n* Improved performance (see #7537)\r\n* Getting output objects of the desired type _directly_ (see #7713)\r\n* Getting \"untainted\" output objects, without `NoteProperty` members that subsequent processing may act on in an undesired fashion (see #5797)\r\n\r\nThere are probably more existing cmdlets that could benefit from the pattern, as would future ones.\r\n\r\nIn line with PowerShell's commitment to consistency, **a _common (shared) parameter name_ should be used in all these cases.**\r\n\r\n`-Bare` makes the most sense to me.\r\n\r\nTo avoid confusion with `-Raw` as implemented in `Get-Content` - which simply reads the whole file while still decorating the resulting string - #7715 proposed deprecating `-Raw` in favor of a more descriptive name such as `-Whole`. (Note that by _deprecating_ I don't mean to imply _removing_ support for `-Raw`, just documenting `-Whole` first and mentioning `-Raw` as a legacy name).\r\n\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core 6.1.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Could you please list all affected cmdlets (from the repo) in the description?",
      "created_at": "2018-09-25T04:52:15Z",
      "updated_at": "2018-09-25T04:52:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Do you mean additional cmdlets that _could_ benefit from this pattern? ",
      "created_at": "2018-09-25T04:54:38Z",
      "updated_at": "2018-09-25T04:54:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, it will help PowerShell Committee to review and approve if they see the full list.\r\n",
      "created_at": "2018-09-25T05:28:25Z",
      "updated_at": "2018-09-25T05:28:25Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 @iSazonov We've already reviewed this issue as part of #7715. The committee unanimously agreed that we are going to continue to use the existing pattern `-Raw` as the parameter to indicate that an object should be returned unadorned. (What exactly that means is up to the cmflet author.) Adding a new, largely indistinguishable parameter is undesirable as it will add confusion while providing no tangible benefit.",
      "created_at": "2018-09-26T01:24:41Z",
      "updated_at": "2018-09-26T01:24:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: #7715 was focused on _paving the way_ for the pattern proposed here - and the feedback suggested that the larger pattern and benefit perhaps wasn't fully considered in the decision.\r\n\r\nHence, this issue was opened, which focuses on the bigger picture.\r\n\r\n> Adding a new, largely indistinguishable parameter\r\n\r\nThe pattern proposed is here is clearly distinguishable in intent from what the - unfortunately named - `-Raw` currently does in the context of `Get-Content`, as described.\r\n\r\nWith the proposed deprecation (without removal) of `-Raw`, the distinction problem goes away (not for legacy code, but going forward).\r\n\r\n> while providing no tangible benefit.\r\n\r\nThe benefit is the pattern described in the initial post, for which we have concrete uses already. \r\nI'm sure there are more, and, once the pattern is established, future cmdlets can take advantage too.\r\n\r\n",
      "created_at": "2018-09-26T01:32:01Z",
      "updated_at": "2018-09-26T01:32:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "And, just to give a dying horse another wack:\r\n\r\n> the existing pattern `-Raw` as the parameter to indicate that an object should be returned unadorned.\r\n\r\n`Get-Content`'s `-Raw` doesn't return anything _unadorned_ (undecorated), it just _changes the output partitioning_ and _still adorns_.  \r\n\r\nIn a _very loose_ sense you can consider that reading the input \"raw\", but this loose sense:\r\n\r\n* gets in the way of a _meaningful, reusable pattern_, given that  we now want `Get-Content` to output _truly undecorated_ _lines_ as well (#7537; i.e., without changing the output partitioning) - and I think retaining the existing `-Raw` while introducing something `-RawLines` isn't a great solution in and of itself, let alone impeding the establishment of a well-defined general pattern.\r\n\r\n* is in itself poorly descriptive of the very specific action performed by `Get-Content -Raw` (hence the suggested alias `-Whole`).\r\n\r\n",
      "created_at": "2018-09-26T01:51:47Z",
      "updated_at": "2018-09-26T01:51:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "OK, one more for the road:\r\n\r\nNote: The premise is that there is value in establishing a general pattern using a shared parameter name and in applying it to #7713 and perhaps #5797, among others.\r\n\r\n> What exactly that [`-Rare`] means is up to the cmdlet author.\r\n\r\nIt _is_ an option to live with the loose definition of `-Raw`, but:\r\n\r\n* we'd then have to live with the `-Raw` `-RawLines` confusion within `Get-Content`, and the general confusion over the distinctly different `Get-Content -Raw` behavior.\r\n\r\n* `-Raw`, especially in the context of file I/O has a distinct connotation of raw _bytes_, which is inapplicable.\r\n\r\nBy contrast:\r\n\r\n* `-Bare` better connotes \"lack of decoration\".\r\n\r\n* With `Get-Content`'s `-Raw` deprecated, the specific function it performs can be given a more descriptive name, such as `-Whole` (and `-Whole` in itself could become a standardized name for read-everything-at-once, but at this time I'm unaware of other cmdlets that could use it).\r\n\r\n\r\n",
      "created_at": "2018-09-26T02:27:21Z",
      "updated_at": "2018-09-26T02:27:21Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n>  and the feedback suggested that the larger pattern and benefit perhaps wasn't fully considered in the decision.\r\n\r\nIt was. Sorry if that was unclear.",
      "created_at": "2018-09-26T22:37:49Z",
      "updated_at": "2018-09-26T22:37:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay, but further clarification is needed:\r\n\r\nTo quote @SteveL-MSFT's summary:\r\n\r\n> The current use of -Raw is acceptable and therefore no reason to make the proposed change. We would support a proposal to add a type parameter for streaming line-by-line w/o annotations although we did not come to agreement on the naming. -Bare is not different enough from -Raw to communicate functional differences.\r\n\r\nThis tells me that the decision was entirely focused on rejecting the proposal to deprecate `-Raw` _as currently used with `Get-Content`_, and what to name the new parameter that fits the pattern described in this issue _in the context of `Get-Content`_.\r\n\r\nAside from my obvious preference for this deprecation (without removal - I'll stop saying that now, consider it implied; \"deemphasizing\" is just too clunky), **_this_ proposal's gist is to _introduce a general parameter pattern_ with _a_ shared name** - while my naming preference is clearly `-Bare`, that is just _one_ suggestion.\r\n\r\n**Committing to this pattern means the newly agreed-upon name should be used in  #7713, #7537, and perhaps #5797, as well as going forward.**\r\n\r\nBy your own reasoning,\r\n\r\n> \"Raw\" in this context means, \"undecorated\", \"not cooked\", etc.\r\n> In PowerShell we try to choose a single term and apply it consistently so that, even if it does not seem intuitive to a person, they only have to learn it once. Sometimes we choose a sub-optimal term but we live with it because you should only have to learn something once. \r\n> [...] use the existing pattern -Raw as the parameter to indicate that an object should be returned unadorned.\r\n\r\nIn other words, this issue:\r\n\r\n* just asks more formally for defining and establishing the use of a `-Raw`-like parameter pattern.\r\n\r\n* and to you `-Raw` is an acceptable name for this general pattern, because what `Get-Content -Raw` currently does fits in as well, correct?\r\n\r\nIf so, and everyone's happy with this `-Raw` deal (if you will), then that leaves just one, incidental question:\r\n\r\nWhat to name the new _streaming line-by-line w/o annotations_ parameter for `Get-Content`, given that `-Raw` is already taken there. \r\nGiven the `-Raw` deal, the name `-RawLines`, which [you yourself have pondered](https://github.com/PowerShell/PowerShell/issues/7537#issuecomment-413461691), sounds just fine to me.\r\n\r\n\r\n\r\n",
      "created_at": "2018-09-27T02:17:10Z",
      "updated_at": "2018-09-27T02:17:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Y'know, thinking on that a bit, @mklement0, although it would be a more significant change... I would consider simply *replacing* the `-Raw` parameter with your proposed `-RawLines` parameter.\n\nThere's no need for an extra parameter; as has been noted in the associated issues at least once, `-ReadCount` can already be used to read the file in one go. Additionally, use of that *is* backwards compatible.\n\nSo while old code would need to be updated to work properly with the new version (thus a breaking change, I suppose), new code would be relatively backwards compatible, *if* the read-all-at-once was all that it was being used for. And if the undecorated output was required, it would be restricted to the newer versions.",
      "created_at": "2018-09-27T02:32:32Z",
      "updated_at": "2018-09-27T02:32:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\nI think _removing_ `-Raw` would be too drastic a change (and with my proposal it wouldn't go away, we'd just tell people to use its new alias, `-Whole`, from now on).\r\n\r\nActually, what `-Raw` does (read the entire file as a _single string_) can _not_ be done with `-ReadCount`: the latter is a _chunking_ mechanism that is still array-based; `-ReadCount 0` reads all lines at once, but puts them into an _array_.\r\n\r\nThere's no _functional_ problem with naming the new parameter for reading lines _undecorated_ (but still line-by-line) `-RawLines`, but it will cause confusion, because what \"raw\" means in `-Raw` vs. `-RawLines` is then quite distinct.\r\n\r\n---\r\n\r\nAs an aside: \r\n\r\nSomewhat ironically, the only parameter that ever deserved to be called `-Raw` - the undocumented `Format-Hex -Raw`, which asked for a raw byte representation in certain contexts - is now obsolete.\r\n\r\nWith my proposal, there would be no more (non-obsolete, non-deprecated) `-Raw` parameter - _for now_.\r\n\r\nThat said, there's no reason not to revive it _where appropriate_, given that,  despite `-Raw` and `-Bare` having substantial semantic overlap, the following distinction can be useful:\r\n\r\n* `-Raw` ... ask for _uninterpreted_ data (typically, _raw bytes_)\r\n\r\n* `-Bare` ... ask for _undecorated_ data (without NoteProperties and, in a wider sense, not wrapped in a helper type that provides metadata)\r\n\r\nThere, I feel better now, although you could ask: hasn't that poor equine suffered enough?\r\n\r\n\r\n\r\n",
      "created_at": "2018-09-27T20:35:27Z",
      "updated_at": "2018-09-27T20:37:18Z"
    },
    {
      "author": "dgc",
      "author_association": "NONE",
      "body": "If this proposal or some variant of it were to go ahead then I would suggest this as a general pattern:\r\n\r\n `[-OutputMode {Raw | RawLines | ...}]`\r\n\r\nIt would make it clear at a glance to the casual user that there are options to affect the output of the cmdlet and that there is a choice between a set of distinct modes.\r\n\r\nIf I came across a future `Get-Content` cmdlet that had `-Bare` or `-RawLines` in the parameters then I would have to read further on into the documentation before I realised they merely configured the output. Also, I don't think it would be obvious that they were mutually exclusive until stated.\r\n\r\nEDIT: OK, I see now that that `-Raw` and `-Bare` can be combined in your last post.",
      "created_at": "2018-12-01T22:44:32Z",
      "updated_at": "2018-12-01T23:02:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dgc: \r\n\r\nWhile `-Raw` and `-Bare` could be separate switches with distinct meanings, they'd be mutually exclusive.\r\n\r\nNote that there's no need to distinguish between `Raw` and `RawLines`, because the aspect of _partitioning the output_ has nothing to do with the semantics of the `-Bare` switch proposed here (_undecorated/non-wrapped objects)_ - and is worth keeping separate.\r\n\r\nThe partitioning aspect, which is not common, is covered in `Get-Content` as follows:\r\n\r\n*  The unfortunately named `-Raw` (get the _whole file_, as a _single string_).  As stated, if `Get-Content`'s `-Raw` were aliased to, say, `-Whole`, any confusion would go away.\r\n\r\n*  `-ReadCount` (get groups of _lines_ as _arrays_) has more of a potential to be generically useful _under that name_ (or at least a _different_ one), namely for partitioning the stream of input objects into arrays of fixed size - see #8270\r\n\r\n",
      "created_at": "2018-12-01T23:07:28Z",
      "updated_at": "2018-12-01T23:07:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dgc: \r\n\r\nTo reframe my previous comment in light of the decision that `-Raw` will be retained as the general switch name for requesting non-decorated/non-wrapped output:\r\n\r\nThe need for the `-Raw` / `-RawLines` distinction should not arise outside of `Get-Content`, where it only arises in order to preserve backward compatibility. ",
      "created_at": "2018-12-02T15:23:07Z",
      "updated_at": "2018-12-02T15:23:07Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "I went exploring, and maybe irrelevant but for the record, found a few other more things which, if you squint a bit, fit this issue's described pattern of asking a cmdlet to return a more basic output, or switch to another commonly desired output, or do less work for improved performance. Not all related to \"undecorated\" output, exactly:\r\n\r\n - `Get-Date` returns a `[DateTime]`, and `-Format 'yyyy-mm-dd'` returns `[string]`.\r\n - `Test-Connection` returns `[TestConnectionCommand+PingReport]`, and `-Quiet` returns `[bool]`.\r\n - `ConvertTo-Xml` returns `[XmlDocument]`, and `-As String` makes it return a `[string]`.\r\n - `Get-Variable` returns `[PSVariable]` but with `-ValueOnly` it returns just the variable value.\r\n - `Get-CimInstance` has `-KeyOnly` and `-Shallow` to ask it to get less information (KeyOnly is documented as \"[returns key parameters only ..] reduces the amount of data transferred over the network.\" - presumably that's a performance reason).\r\n - `Get-ComputerInfo -Property BiosCaption` asks it to return less information, just like feeding it through `| select BiosCaption` would .. but apparently still makes you wait as long as it takes to get all the information, so it doesn't seem to be a performance reason. Help says it \"Specifies, as a string array, the computer properties in which this cmdlet displays.\" as if it's intended to be an output *display* option for a user.\r\n - `Measure-Command` returns `[GenericMeasureInfo]` but with `-Lines` it switches to `[TextMeasureInfo]` (to try and behave like the `wc` utility?).\r\n \r\nand existing in Windows PowerShell, but not PS 6.1:\r\n\r\n - `Get-Clipboard` has a `-Raw` parameter which ignores newlines.\r\n - `Get-EventLog` has `-AsBaseObject` which \"Indicates that this cmdlet returns a standard System.Diagnostics.EventLogEntry object for each event. Without this parameter, Get-EventLog returns an extended PSObject object with additional EventLogName, Source, and InstanceId properties.\"",
      "created_at": "2019-03-27T09:15:47Z",
      "updated_at": "2019-03-27T09:58:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Test-Connection returns Win32_PingStatus, and -Quiet returns [bool].\r\n\r\nCurrently we don't use Win32_PingStatus - please update your message.",
      "created_at": "2019-03-27T09:33:04Z",
      "updated_at": "2019-03-27T09:33:04Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov updated.",
      "created_at": "2019-03-27T09:57:40Z",
      "updated_at": "2019-03-27T09:57:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @HumanEquivalentUnit.\r\n\r\nThe  patterns I see in your examples is to ask for an _alternative_ output data type or only _part of_ the usual output objects.\r\n\r\nWith respect to an alternative data type, it is what the `-As<type>` switches in _some_ of the examples do.\r\n\r\nYou could argue that `-ValueOnly` should therefore be `-AsValue`, and `-Quiet` (which isn't really quiet, only _quieter_) should be `-AsBoolean`, and, though a less clear-cut case, perhaps `-KeyOnly` should be `-AsKey`.\r\n\r\nSimilarly, `Get-ChildItem`'s `-Name` could be `-AsName`, and it is an example of how the reasonable expectation that asking for something _simpler_ or for _less_ also results in _better performance_ doesn't always hold: see #9119 - just like you found with `Get-ComputerInfo -Property` in #9234.\r\n\r\n`Get-Clipboard`'s  use of `-Raw` is just as unfortunate as `Get-Content`'s - I've previously proposed \r\n`-Whole` in  #7715, but, based on the above, `-AsString` could work too (though, while more consistent, it is a tad more obscure in this specific case).\r\n\r\n`Get-EventLog`'s `-AsBaseObject` is a good example of what this issue calls for: requesting the usual output object, but _undecorated_ (without tacked-on ETS properties); thus, it should be `-Raw` (though I wonder if I've expressed my preference for `-Bare` before).\r\n\r\n`Measure-Object`'s  `-Line`, `-Word` and `-Character` switches are interesting, because they only not only result in a different type of output object, but also _change the input processing_ to count _inside_ of the input objects, i.e., the lines, words, and characters inside multi-line strings. `TextMeasureInfo` is derived from the abstract `MeasureInfo` class,  just like the default `GenericMeasureInfo` output type.",
      "created_at": "2019-03-27T12:45:55Z",
      "updated_at": "2019-03-27T13:14:53Z"
    }
  ],
  "created_at": "2018-09-24T16:30:19Z",
  "number": 7855,
  "state": "open",
  "title": "Introduce a common parameter pattern for requesting undecorated / not-wrapped-in-helper-types output objects",
  "updated_at": "2019-03-27T13:14:53Z"
}