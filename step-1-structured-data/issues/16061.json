{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16061",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote:\r\n\r\n* `Select-String` is used as an example, but I presume the problem is fundamental to how arguments are bound in _binary_ cmdlets - _script_ cmdlets (advanced functions) do _not_ exhibit the problem.\r\n\r\n* The example uses an ordered hashtable whose `.Keys` collection is of type `System.Collections.Specialized.OrderedDictionary+OrderedDictionaryKeyValueCollection`, which implements `ICollection` and `IEnumerable`; _unordered_ hashtables (`System.Collections.Hashtable+KeyCollection`, same interfaces) are equally affected - I don't know what the general pattern is, however.\r\n\r\n```powershell\r\n$ht = [ordered] @{\r\n  'two' = 1\r\n  'one' = 1\r\n}\r\n\r\n'-- use of @(...) (or cast to string[]): OK'\r\n'one', 'two' | Select-String -Quiet -Pattern @($ht.Keys)\r\n# !! BROKEN\r\n'-- no cast'\r\n'one', 'two' | Select-String -Quiet -Pattern $ht.Keys\r\n'-- no cast with input matching the stringified key collection as a single-element array'\r\n'two one' | Select-String -Quiet -Pattern $ht.Keys\r\n```\r\n\r\nWhat seems to be happening is that, instead of creating an array of values from the elements of the collection, the collection _as a whole_ is stringified (elements joined with spaces) and the result becomes a _single-element_ array.\r\n\r\n### Expected behavior\r\n\r\n```console\r\n-- use of @(...) (or cast to string[]): OK\r\nTrue\r\n-- no cast\r\nTrue\r\n-- no cast with input matching the stringified key collection as a single-element array\r\nTrue\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n-- use of @(...) (or cast to string[]): OK\r\nTrue\r\n-- no cast\r\n-- no cast with input matching the stringified key collection as a single-element array\r\nTrue\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.9\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> I don't know what the general pattern is, however.\r\n\r\nThe pattern here is that the parameter binder only ever attempts an unchecked conversion to `IList` before deciding whether the parameter argument is to be coerced or wrapped as a single-element array. Since the key collections don't implement `IList`, the parameter binder treats it as a scalar and wraps it instead of attempting any actual conversion of the contained elements.\r\n\r\nDefault parameter binding behavior could be updated to allow coercion of a less specific interface (eg. `ICollection`) instead of `IList`, but I suspect it will require some significant work.",
      "created_at": "2021-10-03T13:55:30Z",
      "updated_at": "2021-10-03T13:56:08Z"
    },
    {
      "author": "Knele83",
      "author_association": "NONE",
      "body": "https://github.com/PowerShell/PowerShell/issues/16061#issuecomment-932956381",
      "created_at": "2021-10-03T14:11:09Z",
      "updated_at": "2021-10-03T14:11:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine discussed this issue today.\r\n\r\nThe proposal makes sense to some extent but there is concern that implementing this (widening the allowed interface from `IList` to `ICollection`) could be a breaking change.  Imagine in a pipeline object binding scenario:\r\n\r\n - Before the change, the object A cannot be bound to -Param1, and thus bound to -Param2 -- this happens to be the expected behavior.\r\n - After the change, the object A is bound to -Param1 -- this would break the existing script.\r\n\r\nThis request requires further investigation.",
      "created_at": "2021-10-15T02:03:00Z",
      "updated_at": "2021-10-15T02:03:00Z"
    }
  ],
  "created_at": "2021-09-07T15:00:25Z",
  "number": 16061,
  "state": "open",
  "title": "Specialized collections do not bind correctly to array-typed parameters of binary cmdlets",
  "updated_at": "2021-10-15T12:14:30Z"
}