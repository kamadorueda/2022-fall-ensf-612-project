{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18067",
  "author": "MartinGC94",
  "body": "### Summary of the new feature / enhancement\n\nPowerShell allows you to define functions like this:\r\n```\r\nfunction MyFunction ($param1, $param2)\r\n{}\r\n```\r\nand that syntax is great for small internal functions you use inside a module. Unfortunately there's no way to add attributes to such functions. You need to move the parameters inside the function, add the `param` keyword and add the attributes to that param block instead.  \r\nThis is also a little strange for functions that take no parameters or functions that exclusively use dynamic parameters because you need to add that empty param block if you want to assign any attributes.\n\n### Proposed technical implementation details (optional)\n\nThis is the syntax I expect to work:\r\n```\r\n[OutputType([string])]\r\nfunction MyFunction ($param1, $param2)\r\n{\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Generally we advise people to write a `param()` block , and if you do \r\n`type function:\\myFunction `  you'll see that the _syntax_ of a script block  contains Param(), and the `function` _statement_ prepends something in () to the _statement block_ with `param ` \r\n\r\nIntroducing new alternative syntax for something which already works allows someone to write code which _should_ work with older versions in a way that _doesn't_  \r\n\r\nSyntax-wise this \r\n```\r\n[OutputType([string])]\r\nfunction MyFunction ($param1, $param2)\r\n```\r\n is something we do see in c# , and we do use it for PowerShell variable / parameter declarations. To my eye it jars to have something which affects a statement before the statement keyword. That could be fixed, but the previous objection remains - time spent working on something which guides to style would tell people not to use would probably be seen as wasted. \r\n\r\n\r\n  \r\n\r\n",
      "created_at": "2022-09-10T16:15:05Z",
      "updated_at": "2022-09-10T16:15:05Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "In my opinion, such a simplified syntax as `function ($arg1, $arg2) {}` is used for embedding in scripts when the type of output data is precisely known. This is not even a function,  as a purpose, but a subroutine for organizing the structure of the script.",
      "created_at": "2022-09-10T16:41:42Z",
      "updated_at": "2022-09-10T16:41:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe OutputType is only for cmdlets.",
      "created_at": "2022-09-10T19:47:03Z",
      "updated_at": "2022-09-10T19:47:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I believe OutputType is only for cmdlets.\r\n\r\nActually when I was testing it I found you can *attach* it a variable. Why anyone *would* is another question\r\nAnd \r\n[outputType([String])]\r\nParam()\r\n\r\nas the first two lines in a PS1 file works. \r\n",
      "created_at": "2022-09-10T19:56:48Z",
      "updated_at": "2022-09-10T19:56:48Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill I didn't realize there were such recommendations. The default \"function\" snippet that ISE has uses that syntax, it's only the advanced function snippets that use the param block.  \r\nEven though it's just 1 more line, it feels like unnecessary bloat to define the param block inside the function like that.\r\n\r\n@237dmitry Yes, that's exactly how I use it but I also want tab completion to work and I need the OutputType attribute to give the completion code enough info to give meaningful completions.",
      "created_at": "2022-09-10T20:02:03Z",
      "updated_at": "2022-09-10T20:02:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@MartinGC94  \r\n\r\nI've been steering people to this for years,   https://github.com/PoshCode/PowerShellPracticeAndStyle it's the defacto style guide   and  https://github.com/PoshCode/PowerShellPracticeAndStyle/blob/master/Style-Guide/Code-Layout-and-Formatting.md   says use `[cmdletbinding()]` everywhere, which requires a `param ()` inside the statement block,  although in one place this guide _does_ show non-advanced functions the parameters outside. I'm sure I didn't just morph \"be advanced cmdlet-ready\" into \"only use the `param()` syntax\" myself - I've been saying it for so long I've forgotten the origin.  \r\n\r\nOn snippets -  https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_keywords?view=powershell-7.2  says `begin` / `process` / `end` and `param` are - as language keywords - written with an lower-case letter (like `function` , `for` , `if` , `while`  etc). But the the ISE snipets capitalize them (and don't follow the layout rules which are built into the  VS code extension - \"don't put { on it's own line, in a statement, any more than you would in a foreach-object or where object cmdlet\")     \r\nSo I wouldn't take the snippets as gospel on style, (code in help is gloriously inconsistent). \r\n\r\nIn a .ps1 you write` param ()` \r\nIn a scriptblock passed to `invoke-command` or `&` you write `param()`\r\nA  `function` statement can build a script block to be saved to `function:` by adding parameters, as a `param()`, to the _statement block_ (the bit between `{` and `}` in a _statement_ is _not_ a _script block_, but a function _is_ a saved script block).  I've always seen this ability as a crutch for people who don't write code _as_ PowerShell, but are  trying to write JavaScript, or VBS or C#  _in_ PowerShell. It's often a signpost that what follows will need re-writing.    \r\nBut the _block_ in the `function` statement should be the whole of the definition (and that means comment based help INSIDE which is also wrong in the snippets). That way we can remove the `function` line and the final `}` and make it a ps1 file or replace the starting part with `{` and use it as a script block  or go in the other direction just as simply. \r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://opengraph.githubassets.com/59fcaf12c2eb018567cd55717c2b6c60f947916547d11ff54aa73c479c70a513/PoshCode/PowerShellPracticeAndStyle\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PoshCode/PowerShellPracticeAndStyle\">GitHub - PoshCode/PowerShellPracticeAndStyle: The Unofficial PowerShell Best Practices and Style Guide</a></strong></div><div>The Unofficial PowerShell Best Practices and Style Guide - GitHub - PoshCode/PowerShellPracticeAndStyle: The Unofficial PowerShell Best Practices and Style Guide</div></blockquote>\n<blockquote><img src=\"https://opengraph.githubassets.com/59fcaf12c2eb018567cd55717c2b6c60f947916547d11ff54aa73c479c70a513/PoshCode/PowerShellPracticeAndStyle\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PoshCode/PowerShellPracticeAndStyle\">PowerShellPracticeAndStyle/Code-Layout-and-Formatting.md at master \u00b7 PoshCode/PowerShellPracticeAndStyle</a></strong></div><div>The Unofficial PowerShell Best Practices and Style Guide - PowerShellPracticeAndStyle/Code-Layout-and-Formatting.md at master \u00b7 PoshCode/PowerShellPracticeAndStyle</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_keywords\">about Language Keywords - PowerShell</a></strong></div><div>Describes the keywords in the PowerShell scripting language.</div></blockquote>",
      "created_at": "2022-09-11T00:47:12Z",
      "updated_at": "2022-09-11T00:47:14Z"
    }
  ],
  "created_at": "2022-09-10T15:09:13Z",
  "number": 18067,
  "state": "open",
  "title": "Allow use of attributes before the function definition",
  "updated_at": "2022-09-14T18:08:25Z"
}