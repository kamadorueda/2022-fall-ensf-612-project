{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2798",
  "author": "jpsnover",
  "body": "One of the big problems we have had in the language has been not knowing whether the following expression was going to return a single element or an array:\r\n\r\n$x = gps $name\r\n\r\nWe fixed this longstanding problem by masking over the issue allowing elements to be treated as arrays.  e.g.\r\n\r\n(gps -id 0).count\r\n(gps -id 0).length\r\n\r\nWhen you enable strictmode - it complains about these and it shouldn't.\r\nI'm about to enable strictmode on a large collection of scripts and I'm sure that is going to find lots of these issue and modifying the code is not going to make the code any better - it will just cause a lot of work and reduce my reliability.",
  "closed_at": null,
  "comments": [
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "Bumping this because this is something I would also like to see",
      "created_at": "2017-08-08T18:30:25Z",
      "updated_at": "2017-08-08T18:30:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to provide some additional info:\r\n\r\n* The problem occurs with `Set-StrictMode -Version 2` or higher, where attempts to access non-existing properties result in a statement-terminating error (e.g., `The property 'Count' cannot be found on this object. Verify that the property exists.`).  \r\n   * Basically, PowerShell unexpectedly treats properties `.Count` and `.Length` as non-existent, even though it normally adds them itself.\r\n\r\n* Fortunately, the other feature related to unifying scalars and collections - indexing - works irrespective of what strict mode is in effect (e.g., `(gps -id 0)[0]`).\r\n",
      "created_at": "2017-11-03T03:26:12Z",
      "updated_at": "2017-11-03T03:26:12Z"
    },
    {
      "author": "nebosite",
      "author_association": "NONE",
      "body": "Me too!   I just added strict mode to my script to help me not call functions incorrectly and now I've lost the cool automatic Count property.   Please fix this!",
      "created_at": "2018-01-05T17:17:39Z",
      "updated_at": "2018-01-05T17:17:39Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "Any update on this?\r\nJust noticed, that it also applies for explicitly defined arrays, which is quite irritating:\r\n```powershell\r\nSet-StrictMode -Version 7\r\n[pscustomobject[]]$a = $null # e.g. returned by something like 1..5 | Where-Object {$false}\r\n$a.Count\r\n```\r\n\r\nIt is especially cumbersome, as checking for the count of elements cannot be done in the same manner as if it was 1 or 2 elements, so an if statement would become like this:\r\n\r\n```powershell\r\nif (-not [bool](Get-Member -InputObject $a -Name \"Count\" -ErrorAction SilentlyContinue)) {\r\n  # Zero Elements\r\n} elseif ($a.Count -eq 1) {\r\n  # One Element\r\n} else {\r\n  # More than one element\r\n}\r\n```\r\n\r\nIt just throws the property not found exception, despite being an array and therefore having that attribute:\r\n```\r\nThe property 'Count' cannot be found on this object. Verify that the property exists.\r\nAt line:1 char:1\r\n+ $a.Count\r\n+ ~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], PropertyNotFoundException\r\n    + FullyQualifiedErrorId : PropertyNotFoundStrict\r\n```\r\n\r\nEdit:\r\nAlso these forms work:\r\n```powershell\r\nSet-StrictMode -Version 7\r\n$myArray = @()\r\n$myArray.Count\r\n$myArray2 = New-Object int[] 0\r\n$myArray2.Count\r\n$list = New-Object Collections.Generic.List[Int]\r\n$list.Count\r\n```\r\nBut unintuitively this one doesn't\r\n```powershell\r\nSet-StrictMode -Version 7\r\n$a = 1,2,3,4 | Where-Object {$_ -eq 5}\r\n$a.Count\r\n# And even more confusingly:\r\nfunction a {\r\n  [OutputType([Int64])]param($a)\r\n  return $a.Where{$_ -gt 5}\r\n}\r\n[Int64[]]$notWorking = 1..5 | a\r\n$notWorking.Count\r\n[pscustomobject[]]$butWorks = 1..5 | a\r\n$butWorks.Count\r\n```\r\nFor the last two it gets even stranger:\r\n```\r\n\r\n# And the really confusing part:\r\nPS C:\\> [pscustomobject[]]\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     PSObject[]                               System.Array\r\n\r\nPS C:\\> [Int64[]]\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Int64[]                                  System.Array\r\n```\r\nTherefore both variables should be of that type and behave as such and not the same as $null.",
      "created_at": "2020-08-20T02:14:51Z",
      "updated_at": "2020-08-20T02:58:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell lets you assign `$null` or (`[System.Management.Automation.Internal.AutomationNull]::Value`, which is what commands that produce no output technically return) to variables that are constrained to:\r\n\r\n* a reference type, which includes arrays and collection types, in which case these values are stored _as-is_ (e.g., \r\n`[int[]] $a = $null` stores `$null` in `$a`)\r\n* a value type, if these values can be _converted to_ that type (e.g, `[int] $i = $null`, which stores `0` in `$a`)\r\n\r\nOperating on a reference-type-constrained variable set to `$null` or  `[System.Management.Automation.Internal.AutomationNull]::Value` then operates on these values, which by definition have no properties - other than the engine-intrinsic `.Count` (and its `.Length` alias).\r\n(Yes, actual array instances have a `.Count` property via the `ICollection` interface, but no instance exists in this case).\r\n\r\nWith strict mode off or at `-Version 1`, `$null.Count` and `$null.Length` do work and return `0`, as expected.\r\nWith `-Version 2` and above, we're again seeing the problem described in the OP:\r\n\r\n```powershell\r\nPS> Set-StrictMode -Off; [int[]] $a = $null;  $a.Count, $a.Length\r\n0\r\n0\r\n\r\nPS> Set-StrictMode -Version 2; [int[]] $a = $null;  $a.Count, $a.Length\r\nPropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-20T03:26:54Z",
      "updated_at": "2020-08-20T03:37:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can also do this now:\r\n\r\n```powershell\r\n[int[]] $a = $null\r\n$itemCount = ($a)?.Count ?? 0\r\n```",
      "created_at": "2020-08-20T14:10:11Z",
      "updated_at": "2020-08-20T14:10:11Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "Is that still experimental?\r\n7.0.3 returns only this: `You must provide a value expression following the '?' operator.`\r\n\r\nEdit: Yes it is and it's called PSNullConditionalOperators",
      "created_at": "2020-08-20T21:35:28Z",
      "updated_at": "2020-08-20T21:40:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, @agowa338; it's still an experimental feature in the current preview (7.1.0-preview.6.) as well.\r\n\r\nTo refocus on the original problem:\r\n\r\n* It is baffling that the PowerShell engine does not to recognize the properties _it itself adds_ to all objects (that don't already have them) as available properties. True, these engine-added properties (termed [_intrinsic members_](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Intrinsic_Members)) aren't bona fide properties of an object itself (in a .NET type sense), but what matters is that they are _usable_ and _have meaningful values_.\r\n\r\n* Not doing so severely diminishes the utility of `Set-StrictMode -Version 2` and above; personally, `Set-StrictMode -Version 1` is the highest version I ever use.\r\n\r\n\r\n",
      "created_at": "2020-08-20T22:46:17Z",
      "updated_at": "2021-06-09T13:47:10Z"
    },
    {
      "author": "vatsan-madhavan",
      "author_association": "NONE",
      "body": "I just encountered this problem and came across this issue - +1. I'm using the following workaround for `.Count` property for now:\r\n\r\n```pwsh\r\n$oCount = if ($o -is [array]) { ([array]$o).Count } else { 1 }\r\n```\r\n",
      "created_at": "2021-03-17T00:51:30Z",
      "updated_at": "2021-03-17T00:51:30Z"
    }
  ],
  "created_at": "2016-11-29T00:58:19Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 2798,
  "state": "open",
  "title": "Set-Strictmode should not complain about COUNT & LENGTH properties on elements",
  "updated_at": "2021-06-09T13:47:10Z"
}