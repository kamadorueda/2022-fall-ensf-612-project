{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14703",
  "author": "B-Art",
  "body": "2012-12-31 in Powershell 7.1.1 still gives week 53 should be 1 When using:\r\n`\r\n(Get-Culture).Calendar.GetWeekOfYear('2012-12-31', (Get-Culture).DateTimeFormat.CalendarWeekRule, (Get-Culture).DateTimeFormat.FirstDayOfWeek)\r\n`\r\nThe formula should be based on the number of Thursdays in THIS year and must be starting with a Thursday or a Wendsday( When this is a Leapyear.)\r\n'2012-01-01' is a Sunday.....?\r\n\r\nProbably the issue exist because Sunday = 0 instead of Monday.\r\n\r\nhttp://week-number.net/calendar-with-week-numbers-2012.html\r\n\r\n<blockquote><div><strong><a href=\"http://week-number.net/calendar-with-week-numbers-2012.html\">2012 calendar with Week Numbers - What week is it?</a></strong></div></blockquote>\r\n\r\n_Originally posted by @B-Art in https://github.com/PowerShell/PowerShell/issues/11534#issuecomment-772867962_",
  "closed_at": "2021-02-04T17:22:00Z",
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Which culture is that, anyway?\n\nPossible fixes, starting from the most feasible:\n\n* Change the expression to use the [ISOWeek](https://docs.microsoft.com/dotnet/api/system.globalization.isoweek?view=net-5.0) class. The expression would then not work in Windows PowerShell.\n* Change .NET Runtime to use the ISO week numbering for that culture, perhaps by defining a new subclass of Calendar that overrides GetWeekOfYear. This would make some sense if people living in that culture use ISO week numbers in speech and in printed calendars. [CLDR Week Data](http://www.unicode.org/reports/tr35/tr35-dates.html#Week_Data) may be relevant.\n* Change PowerShell to detect that your expression tries to call Calendar.GetWeekOfYear, and sneakily call ISOWeek.GetWeekOfYear instead. Would surprise users.\n* Change Calendar.GetWeekOfYear in .NET Runtime to use ISO week numbers if CalendarWeekRule.FirstFourDayWeek is specified with DayOfWeek.Monday. Was previously rejected because of the risk that it would break applications.",
      "created_at": "2021-02-04T06:07:27Z",
      "updated_at": "2021-02-04T06:17:10Z"
    },
    {
      "author": "B-Art",
      "author_association": "NONE",
      "body": "It is Dutch Culture.\r\nI solved it by skipping Sunday (because it is [int]0) and add/substract the other days to Thursday:\r\n\r\n`\r\nfunction Get-WeekNumber([datetime]$DT = (Get-Date)) {\r\n\t(Get-Culture).Calendar.GetWeekOfYear((Get-Date($DT)).AddDays(\r\n\t\\[int]((\\[int](Get-Date($DT)).DayOfWeek) -gt 0)*(4 - (\\[int](Get-Date($DT)).DayOfWeek) )\r\n\t), ((Get-Culture).DateTimeFormat.CalendarWeekRule), ((Get-Culture).DateTimeFormat.FirstDayOfWeek))\r\n}\r\n\r\nGet-WeekNumber('2013-01-01')\r\nGet-WeekNumber('2012-12-31')\r\nGet-WeekNumber('2012-12-30')\r\nGet-WeekNumber('2012-12-29')\r\n`\r\nThis works as a bugfix.",
      "created_at": "2021-02-04T07:17:42Z",
      "updated_at": "2021-02-04T07:20:50Z"
    },
    {
      "author": "B-Art",
      "author_association": "NONE",
      "body": "UICulture has a different bug than Culture:\r\n\r\n`\r\n(28..31).foreach({(Get-UICulture).Calendar.GetWeekOfYear(\"2012-12-$($_)\", ((Get-UICulture).DateTimeFormat.CalendarWeekRule), ((Get-UICulture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n52\r\n52\r\n53\r\n53\r\n\r\n`\r\n(28..31).foreach({(Get-Culture).Calendar.GetWeekOfYear(\"2012-12-$($_)\", ((Get-Culture).DateTimeFormat.CalendarWeekRule), ((Get-Culture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n52\r\n52\r\n52\r\n53\r\n\r\nThe correct answer would be:\r\n52\r\n52\r\n52\r\n1\r\n",
      "created_at": "2021-02-04T07:39:07Z",
      "updated_at": "2021-02-04T07:41:26Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "What is the UICulture, then?  If it is U.S. English, then perhaps it is correct to use non-ISO week numbers there.",
      "created_at": "2021-02-04T08:00:01Z",
      "updated_at": "2021-02-04T08:01:14Z"
    },
    {
      "author": "B-Art",
      "author_association": "NONE",
      "body": "`\r\n(Get-UICulture).DateTimeFormat\r\n`\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : /\r\nFirstDayOfWeek                   : Sunday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy h:mm:ss tt\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : h:mm:ss tt\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : M/d/yyyy\r\nShortTimePattern                 : h:mm tt\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {S, M, T, W\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n\r\nFailed:\r\n`\r\n(22..31).foreach({(Get-UICulture).Calendar.GetWeekOfYear(\"2012-12-$($_)\", ((Get-UICulture).DateTimeFormat.CalendarWeekRule), ((Get-UICulture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n51\r\n52\r\n52\r\n52\r\n52\r\n52\r\n52\r\n52\r\n53\r\n53\r\n\r\nFrom the first of the folowing year:\r\n\r\n`\r\n(1..7).foreach({(Get-UICulture).Calendar.GetWeekOfYear(\"2013-1-$($_)\", ((Get-UICulture).DateTimeFormat.CalendarWeekRule), ((Get-UICulture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2",
      "created_at": "2021-02-04T15:33:56Z",
      "updated_at": "2021-02-04T15:33:56Z"
    },
    {
      "author": "B-Art",
      "author_association": "NONE",
      "body": "`\r\n(Get-Culture).DateTimeFormat\r\n`\r\nAMDesignator                     :\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : -\r\nFirstDayOfWeek                   : Monday\r\nCalendarWeekRule                 : FirstFourDayWeek\r\nFullDateTimePattern              : dddd d MMMM yyyy HH:mm:ss\r\nLongDatePattern                  : dddd d MMMM yyyy\r\nLongTimePattern                  : HH:mm:ss\r\nMonthDayPattern                  : d MMMM\r\nPMDesignator                     :\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : yyyy-MM-dd\r\nShortTimePattern                 : HH:mm\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {zo, ma, di, wo\u2026}\r\nShortestDayNames                 : {Z, M, D, W\u2026}\r\nDayNames                         : {zondag, maandag, dinsdag, woensdag\u2026}\r\nAbbreviatedMonthNames            : {jan., feb., mrt., apr.\u2026}\r\nMonthNames                       : {januari, februari, maart, april\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregoriaanse kalender\r\nAbbreviatedMonthGenitiveNames    : {jan., feb., mrt., apr.\u2026}\r\nMonthGenitiveNames               : {januari, februari, maart, april\u2026}\r\n`\r\n(22..31).foreach({(Get-Culture).Calendar.GetWeekOfYear(\"2012-12-$($_)\", ((Get-Culture).DateTimeFormat.CalendarWeekRule), ((Get-Culture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n51\r\n51\r\n52\r\n52\r\n52\r\n52\r\n52\r\n52\r\n52\r\n53\r\n\r\n`\r\n(1..7).foreach({(Get-Culture).Calendar.GetWeekOfYear(\"2013-1-$($_)\", ((Get-Culture).DateTimeFormat.CalendarWeekRule), ((Get-Culture).DateTimeFormat.FirstDayOfWeek))})\r\n`\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n",
      "created_at": "2021-02-04T15:37:36Z",
      "updated_at": "2021-02-04T15:37:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@B-Art You are calling a .NET API [`Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)`](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.calendar.getweekofyear?view=net-5.0). If you have question about the behavior of that API, please open an issue in https://github.com/dotnet/runtime or post a question in their [Discussions](https://github.com/dotnet/runtime/discussions).\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2021-02-04T17:21:59Z",
      "updated_at": "2021-02-04T17:22:02Z"
    }
  ],
  "created_at": "2021-02-03T22:53:54Z",
  "number": 14703,
  "state": "closed",
  "title": "2012-12-31 in Powershell 7.1.1 still gives week 53 should be 1 When using: Calendar.GetWeekOfYear",
  "updated_at": "2021-02-04T17:22:02Z"
}