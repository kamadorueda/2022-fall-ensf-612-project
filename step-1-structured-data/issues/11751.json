{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11751",
  "author": "pmahend1",
  "body": "# Steps to reproduce\r\n\r\n1. Open PowerShell\r\n\r\n```powershell\r\nPowerShell 7.0.0-rc.2\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nWarning: PowerShell detected that you might be using a screen reader and has disabled PSReadLine for compatibility purposes. If you want to re-enable it, run 'Import-Module PSReadLine'\r\n```\r\n1. Type any PowerShell command\r\n\r\n> Note  : I upgraded from Windows 10 Home to Windows 10 Education by the way.\r\n\r\n![image](https://user-images.githubusercontent.com/21352870/73600886-34ca4880-4525-11ea-91c0-1111fec8d1c5.png)\r\n\r\n# Expected behavior\r\n\r\nFor PowerShell commands the color should be yellow\r\n\r\n# Actual behavior\r\n\r\n- Commands Color is not Yellow\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-03-20T02:37:56Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@pmahend1 coloring is provided by the PSReadLine module rather than PowerShell itself.\r\n\r\nCan you verify that PSReadLine is imported with `Get-Module PSReadLine`?",
      "created_at": "2020-02-02T00:35:10Z",
      "updated_at": "2020-02-02T00:35:10Z"
    },
    {
      "author": "pmahend1",
      "author_association": "NONE",
      "body": "By default it's not getting imported. Why?\r\nI imported, it works as expected. I don't have any screen reader on, but still it says I have one.. Not even narrator. ",
      "created_at": "2020-02-02T02:45:15Z",
      "updated_at": "2020-02-02T02:45:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@pmahend1 Do you have one installed? Just having NVDA installed is enough to trigger it for me.  Might be worth opening an issue in PSReadLine, but I believe that's just how the win32 API they use works.\r\n\r\nA workaround is to put `Import-Module PSReadLine` in your `$profile`.",
      "created_at": "2020-02-02T04:21:23Z",
      "updated_at": "2020-02-02T04:21:23Z"
    },
    {
      "author": "pmahend1",
      "author_association": "NONE",
      "body": "@SeeminglyScience  I dont know which program is being considered as screenreader.\r\n`Import-Module PSRreadLine` does work , and I got to know `PSReadLine` is another github repository, but I see someone [added code to check this and turn off PSReadLine](https://github.com/PowerShell/PowerShell/blob/a1c2d3c9777530030031e3404ac72dfd4f1b1b3e/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHost.cs#L1637) in Powershell Core. \r\n\r\nCan that be reverted?\r\n\r\nOr how I can check which application is causing it?",
      "created_at": "2020-02-04T20:03:30Z",
      "updated_at": "2020-02-04T20:12:55Z"
    },
    {
      "author": "neospect",
      "author_association": "NONE",
      "body": "Just upgraded to PowerShell 7.0.0 final and I am getting that same unexpected behavior (no color highlighting for syntax) and warning by default. I have neither NVDA nor any other screen reader, that I know of.\r\n\r\nWarning: PowerShell detected that you might be using a screen reader and has disabled PSReadLine for compatibility purposes. If you want to re-enable it, run 'Import-Module PSReadLine'.",
      "created_at": "2020-03-05T23:26:09Z",
      "updated_at": "2020-03-05T23:26:09Z"
    },
    {
      "author": "pmahend1",
      "author_association": "NONE",
      "body": "@neospect Do this.\r\n```shell\r\nPS>$PROFILE\r\nC:\\Users\\<BlahBlah>\\Documents\\Powershell-Core\\PowerShell_profile.ps1\r\n```\r\n\r\nOpen and add this line to \r\n```shell\r\nImport-Module PSReadline\r\n```",
      "created_at": "2020-03-06T01:01:29Z",
      "updated_at": "2020-03-06T01:01:29Z"
    },
    {
      "author": "galversonNU",
      "author_association": "NONE",
      "body": "I have added \"Import-Module PSReadLine\" to the top of my $PROFILE. I now get colored syntax but I still get the warning every time I start a shell. It appears to come before $PROFILE gets executed. How to stop this junk! I don't even have NVDA.",
      "created_at": "2020-03-17T14:03:04Z",
      "updated_at": "2020-03-17T14:03:04Z"
    },
    {
      "author": "pmahend1",
      "author_association": "NONE",
      "body": "@galversonNU same here. I was not able to identify which is that screen reader. Could be any application like Adobe, Firefox Chrome which have accessibility mode.\r\nWish there was some code to check it\r\n",
      "created_at": "2020-03-17T14:07:53Z",
      "updated_at": "2020-03-17T14:07:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Here, run this:\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition '\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic static class ScreenReaderFixUtil\r\n{\r\n    public static bool IsScreenReaderActive()\r\n    {\r\n        var ptr = IntPtr.Zero;\r\n        try\r\n        {\r\n            ptr = Marshal.AllocHGlobal(sizeof(int));\r\n            int hr = Interop.SystemParametersInfo(\r\n                Interop.SPI_GETSCREENREADER,\r\n                sizeof(int),\r\n                ptr,\r\n                0);\r\n\r\n            if (hr == 0)\r\n            {\r\n                throw new Win32Exception(Marshal.GetLastWin32Error());\r\n            }\r\n\r\n            return Marshal.ReadInt32(ptr) != 0;\r\n        }\r\n        finally\r\n        {\r\n            if (ptr != IntPtr.Zero)\r\n            {\r\n                Marshal.FreeHGlobal(ptr);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void SetScreenReaderActiveStatus(bool isActive)\r\n    {\r\n        int hr = Interop.SystemParametersInfo(\r\n            Interop.SPI_SETSCREENREADER,\r\n            isActive ? 1u : 0u,\r\n            IntPtr.Zero,\r\n            Interop.SPIF_SENDCHANGE);\r\n\r\n        if (hr == 0)\r\n        {\r\n            throw new Win32Exception(Marshal.GetLastWin32Error());\r\n        }\r\n    }\r\n\r\n    private static class Interop\r\n    {\r\n        public const int SPIF_SENDCHANGE = 0x0002;\r\n\r\n        public const int SPI_GETSCREENREADER = 0x0046;\r\n\r\n        public const int SPI_SETSCREENREADER = 0x0047;\r\n\r\n        [DllImport(\"user32\", SetLastError = true, CharSet = CharSet.Unicode)]\r\n        public static extern int SystemParametersInfo(\r\n            uint uiAction,\r\n            uint uiParam,\r\n            IntPtr pvParam,\r\n            uint fWinIni);\r\n    }\r\n}'\r\n\r\nif ([ScreenReaderFixUtil]::IsScreenReaderActive()) {\r\n    [ScreenReaderFixUtil]::SetScreenReaderActiveStatus($false)\r\n}\r\n```\r\n\r\nThe flag for if a screen reader is active is persistent.  So if an application *at some point* set the flag and then crashed before disabling it (or was written poorly), that flag will stay.  This script will turn the flag off.  This won't help if you still have a program that is actively setting the flag, but will help in the scenario I described.",
      "created_at": "2020-03-17T15:04:38Z",
      "updated_at": "2020-03-17T15:04:38Z"
    },
    {
      "author": "galversonNU",
      "author_association": "NONE",
      "body": "Dear Patrick,\n\nThat does indeed appear to fix the recurring warning.\n\nThanks very much!\n\nBest regards,\nGeorge\n\n\n",
      "created_at": "2020-03-18T14:38:47Z",
      "updated_at": "2020-03-18T14:38:52Z"
    },
    {
      "author": "NotNotWrongUsually",
      "author_association": "NONE",
      "body": "Worth mentioning, that for me the culprit was a key in Computer\\HKEY_CURRENT_USER\\Control Panel\\Accessibility\\Blind Access. I set \"On\" to 0 and the problem disappeared. I have no clue how it got enabled to begin with.",
      "created_at": "2020-03-29T08:02:55Z",
      "updated_at": "2020-03-29T08:02:55Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> Here, run this:\r\n> \r\n> ```powershell\r\n> Add-Type -TypeDefinition '\r\n> using System;\r\n> using System.ComponentModel;\r\n> using System.Runtime.InteropServices;\r\n> \r\n> public static class ScreenReaderFixUtil\r\n> {\r\n>     public static bool IsScreenReaderActive()\r\n>     {\r\n>         var ptr = IntPtr.Zero;\r\n>         try\r\n>         {\r\n>             ptr = Marshal.AllocHGlobal(sizeof(int));\r\n>             int hr = Interop.SystemParametersInfo(\r\n>                 Interop.SPI_GETSCREENREADER,\r\n>                 sizeof(int),\r\n>                 ptr,\r\n>                 0);\r\n> \r\n>             if (hr == 0)\r\n>             {\r\n>                 throw new Win32Exception(Marshal.GetLastWin32Error());\r\n>             }\r\n> \r\n>             return Marshal.ReadInt32(ptr) != 0;\r\n>         }\r\n>         finally\r\n>         {\r\n>             if (ptr != IntPtr.Zero)\r\n>             {\r\n>                 Marshal.FreeHGlobal(ptr);\r\n>             }\r\n>         }\r\n>     }\r\n> \r\n>     public static void SetScreenReaderActiveStatus(bool isActive)\r\n>     {\r\n>         int hr = Interop.SystemParametersInfo(\r\n>             Interop.SPI_SETSCREENREADER,\r\n>             isActive ? 1u : 0u,\r\n>             IntPtr.Zero,\r\n>             Interop.SPIF_SENDCHANGE);\r\n> \r\n>         if (hr == 0)\r\n>         {\r\n>             throw new Win32Exception(Marshal.GetLastWin32Error());\r\n>         }\r\n>     }\r\n> \r\n>     private static class Interop\r\n>     {\r\n>         public const int SPIF_SENDCHANGE = 0x0002;\r\n> \r\n>         public const int SPI_GETSCREENREADER = 0x0046;\r\n> \r\n>         public const int SPI_SETSCREENREADER = 0x0047;\r\n> \r\n>         [DllImport(\"user32\", SetLastError = true, CharSet = CharSet.Unicode)]\r\n>         public static extern int SystemParametersInfo(\r\n>             uint uiAction,\r\n>             uint uiParam,\r\n>             IntPtr pvParam,\r\n>             uint fWinIni);\r\n>     }\r\n> }'\r\n> \r\n> if ([ScreenReaderFixUtil]::IsScreenReaderActive()) {\r\n>     [ScreenReaderFixUtil]::SetScreenReaderActiveStatus($false)\r\n> }\r\n> ```\r\n> \r\n> The flag for if a screen reader is active is persistent. So if an application _at some point_ set the flag and then crashed before disabling it (or was written poorly), that flag will stay. This script will turn the flag off. This won't help if you still have a program that is actively setting the flag, but will help in the scenario I described.\r\n\r\nI am getting this error:\r\n```\r\nProgram.cs(1,1): error CS8652: The feature 'top-level statements' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version. [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(1,26): error CS1002: ; expected [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(1,26): error CS1010: Newline in constant [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(1,26): error CS1011: Empty character literal [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(1,27): error CS1002: ; expected [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(2,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(3,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(4,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(65,2): error CS8803: Top-level statements must precede namespace and type declarations. [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(65,2): error CS1010: Newline in constant [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(65,2): error CS1011: Empty character literal [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(65,3): error CS1002: ; expected [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(67,5): error CS1525: Invalid expression term '[' [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(67,26): error CS7000: Unexpected use of an aliased name [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(68,26): error CS1001: Identifier expected [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(68,56): error CS1056: Unexpected character '$' [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\nProgram.cs(68,63): error CS1002: ; expected [C:\\Users\\alan\\Desktop\\Fixer\\Fixer.csproj]\r\n```",
      "created_at": "2020-09-17T04:43:22Z",
      "updated_at": "2020-09-17T04:43:22Z"
    },
    {
      "author": "LinearDynamics",
      "author_association": "NONE",
      "body": "This issue was affecting us with VSCode's terminal window.\r\nRunning @SeeminglyScience's script as a .ps1 file worked for me. \r\nBut I'd like to know what a 'screen reader' is and what are the popular ones. \r\n",
      "created_at": "2020-09-18T18:36:33Z",
      "updated_at": "2020-09-18T18:36:33Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> Worth mentioning, that for me the culprit was a key in Computer\\HKEY_CURRENT_USER\\Control Panel\\Accessibility\\Blind Access. I set \"On\" to 0 and the problem disappeared. I have no clue how it got enabled to begin with.\r\n\r\nI checked this particular registry key and its value was 1. I changed it to 0 and now I don't have any issues",
      "created_at": "2020-09-19T04:07:37Z",
      "updated_at": "2020-09-19T04:07:37Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> Here, run this:\r\n> \r\n> ```powershell\r\n> Add-Type -TypeDefinition '\r\n> using System;\r\n> using System.ComponentModel;\r\n> using System.Runtime.InteropServices;\r\n> \r\n> public static class ScreenReaderFixUtil\r\n> {\r\n>     public static bool IsScreenReaderActive()\r\n>     {\r\n>         var ptr = IntPtr.Zero;\r\n>         try\r\n>         {\r\n>             ptr = Marshal.AllocHGlobal(sizeof(int));\r\n>             int hr = Interop.SystemParametersInfo(\r\n>                 Interop.SPI_GETSCREENREADER,\r\n>                 sizeof(int),\r\n>                 ptr,\r\n>                 0);\r\n> \r\n>             if (hr == 0)\r\n>             {\r\n>                 throw new Win32Exception(Marshal.GetLastWin32Error());\r\n>             }\r\n> \r\n>             return Marshal.ReadInt32(ptr) != 0;\r\n>         }\r\n>         finally\r\n>         {\r\n>             if (ptr != IntPtr.Zero)\r\n>             {\r\n>                 Marshal.FreeHGlobal(ptr);\r\n>             }\r\n>         }\r\n>     }\r\n> \r\n>     public static void SetScreenReaderActiveStatus(bool isActive)\r\n>     {\r\n>         int hr = Interop.SystemParametersInfo(\r\n>             Interop.SPI_SETSCREENREADER,\r\n>             isActive ? 1u : 0u,\r\n>             IntPtr.Zero,\r\n>             Interop.SPIF_SENDCHANGE);\r\n> \r\n>         if (hr == 0)\r\n>         {\r\n>             throw new Win32Exception(Marshal.GetLastWin32Error());\r\n>         }\r\n>     }\r\n> \r\n>     private static class Interop\r\n>     {\r\n>         public const int SPIF_SENDCHANGE = 0x0002;\r\n> \r\n>         public const int SPI_GETSCREENREADER = 0x0046;\r\n> \r\n>         public const int SPI_SETSCREENREADER = 0x0047;\r\n> \r\n>         [DllImport(\"user32\", SetLastError = true, CharSet = CharSet.Unicode)]\r\n>         public static extern int SystemParametersInfo(\r\n>             uint uiAction,\r\n>             uint uiParam,\r\n>             IntPtr pvParam,\r\n>             uint fWinIni);\r\n>     }\r\n> }'\r\n> \r\n> if ([ScreenReaderFixUtil]::IsScreenReaderActive()) {\r\n>     [ScreenReaderFixUtil]::SetScreenReaderActiveStatus($false)\r\n> }\r\n> ```\r\n> \r\n> The flag for if a screen reader is active is persistent. So if an application _at some point_ set the flag and then crashed before disabling it (or was written poorly), that flag will stay. This script will turn the flag off. This won't help if you still have a program that is actively setting the flag, but will help in the scenario I described.\r\n\r\nOh! I was supposed to run this as a PowerShell script.",
      "created_at": "2020-09-19T04:09:02Z",
      "updated_at": "2020-09-19T04:09:02Z"
    },
    {
      "author": "ValZapod",
      "author_association": "NONE",
      "body": "Will just mention that this also disables Ctrl-R reverse search, very problematic (part of PSReadLine, I suppose). Computer\\HKEY_CURRENT_USER\\Control Panel\\Accessibility\\Blind Access helps indeed. But this is bad and happens when you update from 1909 to 2009 as I did.",
      "created_at": "2020-12-10T08:39:02Z",
      "updated_at": "2020-12-10T08:39:02Z"
    },
    {
      "author": "PritKalariya",
      "author_association": "NONE",
      "body": "Running the program with .ps1 worked for me as well.\r\nThank you  @SeeminglyScience ",
      "created_at": "2020-12-10T18:35:43Z",
      "updated_at": "2020-12-10T18:35:43Z"
    },
    {
      "author": "PritKalariya",
      "author_association": "NONE",
      "body": "Every time I open my terminal it shows the same error that I'm using a screen recorder even though I'm not. \r\n\r\n![Screenshot 2020-12-23 152848](https://user-images.githubusercontent.com/71484962/102984454-9cb9c100-4533-11eb-832f-0274cc32bced.png)\r\n\r\n\r\nI even changed the settings to \"off\" but no luck! It happens every time I open a new terminal.\r\n\r\n![Screenshot 2020-12-23 150431](https://user-images.githubusercontent.com/71484962/102984124-18ffd480-4533-11eb-8646-ea20557cb439.png)\r\n ",
      "created_at": "2020-12-23T09:59:55Z",
      "updated_at": "2020-12-23T09:59:55Z"
    },
    {
      "author": "skoobeeb",
      "author_association": "NONE",
      "body": "In my case I suspect it was was caused by enabling Voice Dictation. The problem also persisted after editing of $profile - being fixed by the script of @ghost 19.09.2020",
      "created_at": "2021-02-27T08:58:25Z",
      "updated_at": "2021-02-27T08:58:25Z"
    },
    {
      "author": "rohit1205",
      "author_association": "NONE",
      "body": "hello guys pls help me as i am stuck in vs code earlier there was only a warning that you might be using a screen reader that has disabled PSReadLine if you want to reenable it run ' Import-Module PSReadLine'. then i get to know the solution of this after runing the above given code in .ps1 file and then the warning was not coming but still vs code is not working like i am not able to get any output in terminal it is just showing that code is running when i reclick on it , it again shows code is already running but it is not asking me for input and not showing any output ",
      "created_at": "2021-08-20T07:27:42Z",
      "updated_at": "2021-08-20T07:27:42Z"
    }
  ],
  "created_at": "2020-02-02T00:07:13Z",
  "number": 11751,
  "state": "closed",
  "title": "No different color for syntax ",
  "updated_at": "2021-08-20T07:27:42Z"
}