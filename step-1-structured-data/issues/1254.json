{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1254",
  "author": "lzybkr",
  "body": "Run `gvim`\nExpected: powershell not blocked\nActual: powershell blocked until gvim exits\n",
  "closed_at": "2016-11-01T21:15:31Z",
  "comments": [
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "## Steps to reproduce\n\nSet-content c:\\textfile.txt\nnotepad c:\\textfile.txt\n\n## Expected behavior\n\nPowershell will open a notepad window and display a new command prompt line.\n\n## Actual behavior\n\nPowershell opens the window, but blocks and does not display a new command prompt line.\n\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n`````` powershell\nName                           Value\n----                           -----\nPSRemotingProtocolVersion      2.3\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\nGitCommitId                    v0.5.0-146-g9eda67b00c8cd787d000438537192a524bb280ab-dirty\nPSEdition                      Core\nBuildVersion                   3.0.0.0\nCLRVersion\nPSVersion                      5.1.10032.0```\n``````\n",
      "created_at": "2016-07-01T16:50:11Z",
      "updated_at": "2016-07-01T16:50:11Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "On OS X **bash** and **fish** behaves this way (blocks). I guess on Linux too.\nDo we want to fix only windows and have platform-specific difference in behavior?\n\nI personally like windows behavior (non-blocking).\nMaybe we can make it a setting, like `$NewWindowPreference`? Then put platform specific defaults.\n",
      "created_at": "2016-07-02T06:32:12Z",
      "updated_at": "2016-07-02T06:32:39Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Seems like relevant code:\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L517\n\n``` csharp\nif (this.Command.MyInvocation.PipelinePosition < this.Command.MyInvocation.PipelineLength)\n{\n    // Never background unless you're at the end of a pipe.\n    // Something like\n    //    ls | notepad | sort.exe\n    // should block until the notepad process is terminated.\n    background = false;\n}\nelse\n{\n    background = true;\n    if (startInfo.UseShellExecute == false)\n    {\n        background = IsWindowsApplication(nativeProcess.StartInfo.FileName);\n    }\n}\n```\n\nIsWindowsApplication is not implemented for CoreCLR.\n",
      "created_at": "2016-07-03T08:50:16Z",
      "updated_at": "2016-07-03T08:51:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Do we have to mimic the bash behavior for everything? For this one, I like the windows behavior, and I think we can bring it to OSX and *Unix.\n",
      "created_at": "2016-07-03T15:39:47Z",
      "updated_at": "2016-07-03T15:39:47Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I like windows behavior better too.\n",
      "created_at": "2016-07-03T19:02:34Z",
      "updated_at": "2016-07-03T19:02:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This all comes back around to #716. There is no cross platform way to answer \"is Windows application\" as the concept doesn't exist elsewhere, hence the need to be able to background a task with &.\n",
      "created_at": "2016-07-03T19:07:19Z",
      "updated_at": "2016-07-03T19:07:19Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Is there a way to do a good guess? I very often bump into this with `gitk`.\n",
      "created_at": "2016-07-03T19:10:39Z",
      "updated_at": "2016-07-03T19:10:39Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@BrucePay, do you remember the conclusion we came to at the usability sync discussing this?\n",
      "created_at": "2016-07-03T19:12:46Z",
      "updated_at": "2016-07-03T19:12:46Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Our conclusion was that most apps fork, so it's not a big issue anymore, but where it is, & is the idiom folks rely on.\n\nMy opinion was that we could do better, but I had no concrete solution. Maybe it's possible to use heuristics, e.g. determine that it uses certain shared libraries.\n",
      "created_at": "2016-07-03T21:00:20Z",
      "updated_at": "2016-07-03T21:00:20Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Ah, thanks @lzybkr.\n",
      "created_at": "2016-07-05T20:23:07Z",
      "updated_at": "2016-07-05T20:23:07Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "Correct me if I'm wrong but the challenge is that there is no programmatic way to know when you would want to run a binary in the background or not.   Ergo, we need to follow the Bash model and do a great job supporting &.\n",
      "created_at": "2016-08-25T02:46:07Z",
      "updated_at": "2016-08-25T02:46:07Z"
    }
  ],
  "created_at": "2016-06-30T22:43:32Z",
  "number": 1254,
  "state": "closed",
  "title": "Starting windows process on core blocks",
  "updated_at": "2016-11-01T21:30:00Z"
}