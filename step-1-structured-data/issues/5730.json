{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5730",
  "author": "ghost",
  "body": "My eyes were scanning for something like \"In 2017, finally PowerShell team has added...\" while reading this QA https://stackoverflow.com/questions/3038337/powershell-resolve-path-that-might-not-exist. \ud83d\ude1e \r\n\r\nFor users to skip existence check, please consider adding a parameter to `Resolve-Path` cmdlet something similar to one of the following option:\r\n\r\n```powershell\r\nResolve-Path -Unresolved <arg>     # OR\r\nResolve-Path -Unmonitored <arg>    # OR\r\nResolve-Path -Pretend <arg>        # OR\r\nResolve-Path -Force <arg>          # OR\r\nResolve-Path -SkipExistence <arg>\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kasper3 Thanks for your report! Could you please add repo steps in the issue description?",
      "created_at": "2017-12-21T13:20:39Z",
      "updated_at": "2017-12-21T13:20:39Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@iSazonov, it's not a bug report but a feature request to add a parameter in Resolve-Path cmdlet",
      "created_at": "2017-12-21T16:22:34Z",
      "updated_at": "2017-12-21T16:22:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I ask repo steps because it is easy to understand _desire behavior_ in simple script context - we could use such sample scripts as base for tests.\r\n\r\nPerhaps we need Normalize-Path cmdlet.",
      "created_at": "2017-12-22T11:29:32Z",
      "updated_at": "2017-12-22T11:29:32Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "In dotnet it's called `Path.GetFullPath`, so perhaps `Get-FullPath` cmdlet?\r\nEven better, a more familiar analogous to Unix' readlink https://linux.die.net/man/2/readlink, perhaps `Get-ReadLink` cmdlet (with `readlink` alias) to match with POSIX std.\r\n\r\n```powershell\r\nGet-ReadLink ~/.nuget\r\n# -> c:\\Users\\username\\.nuget\r\n\r\nmkdir /temp\r\nmkdir /temp/tE$T\r\nreadlink /temp/te$t\\some\\non/existing/path  # casing of tE$T is wrong on purpose\r\n# -> c:\\temp\\tE$T\\some\\non\\existing\\path  (with correct casing)\r\n```\r\n\r\nThe UNC path rules on Windows are quite detailed to get covered by any interpreter. See @JeremyKuhne's implementation https://github.com/JeremyKuhne/WInterop. Not sure to what extent they can be covered in PowerShell as currently BCL seems to lack some cases.\r\n\r\nNote readlink also resolves the symlink. On Windows soft/hard links and Junctions can be covered by the same semantics?\r\n\r\nWe can also start with simple usecases (without symlinks and UNCs) and then gradually include more features in subsequent releases.",
      "created_at": "2017-12-26T22:56:08Z",
      "updated_at": "2017-12-26T22:56:08Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "this came up today and a suggestion was to use $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath( $InputPath )\r\nbut given we have Resolve-Path or Convert-Path these should have the [switch] as suggested above.",
      "created_at": "2018-06-05T23:56:16Z",
      "updated_at": "2018-06-05T23:56:16Z"
    }
  ],
  "created_at": "2017-12-21T00:29:47Z",
  "labels": [
    "Issue-Discussion",
    "WG-Engine-Providers"
  ],
  "number": 5730,
  "state": "open",
  "title": "Resolve-Path param that allows skipping IfExists check",
  "updated_at": "2018-06-05T23:56:17Z"
}