{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2511",
  "author": "atanasa",
  "body": "This is similar to #2211 but for CentOS. This is probably still an issue with dotnet but maybe powershell can patch it in a similar way as the OS X patch. I haven't found a workaround yet.\n## Steps to reproduce\n\nRun:\n\n``` powershell\n$handler = new-object \"System.Net.Http.HttpClientHandler\"\n$handler.ServerCertificateCustomValidationCallback = { $true }\n$client = new-object \"System.Net.Http.HttpClient\" -Arg @($handler)\n$client.GetStringAsync(\"https://google.com\").GetAwaiter().GetResult()\n```\n## Expected behavior\n\nAn error telling you that there is no runtime context on the thread. Which means the execution reached the validation script block.\n## Actual behavior\n\nError:\n\n```\nException calling \"GetResult\" with \"0\" argument(s): \"The libcurl library in \nuse (7.29.0) and its SSL backend (\"NSS/3.19.1 Basic ECC\") do not support \ncustom handling of certificates. A libcurl built with OpenSSL is required.\"\nAt line:1 char:1\n+ $client.GetStringAsync(\"https://google.com\").GetAwaiter().GetResult()\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : PlatformNotSupportedException\n```\n## Environment data\n\n``` powershell\n> $PSVersionTable\nName                           Value                                           \n----                           -----                                           \nPSVersion                      6.0.0-alpha                                     \nPSEdition                      Core                                            \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \nBuildVersion                   3.0.0.0                                         \nGitCommitId                    v6.0.0-alpha.11                                 \nCLRVersion                                                                     \nWSManStackVersion              3.0                                             \nPSRemotingProtocolVersion      2.3                                             \nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": "2017-06-30T22:30:11Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Do you know if CentOS ships--inbox or via yum--a libcurl built with libssl? \n",
      "created_at": "2016-10-25T21:30:39Z",
      "updated_at": "2016-10-25T21:30:39Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "I couldn't find one. One of my users found one here:\nhttp://ftp.riken.jp/Linux/cern/centos/7/cern/x86_64/repoview/letter_l.group.html\nbut that does not look official.\n\nThe workaround is to download the libcurl-openssl package from there, then install it with yum localinstall and run\n\n```\nexport LD_LIBRARY_PATH=/opt/shibboleth/lib64/:$LD_LIBRARY_PATH\n```\n\n to redirect powershell to discover the new dynamic library.\n",
      "created_at": "2016-10-26T07:36:48Z",
      "updated_at": "2016-10-26T07:38:35Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "Exporting LD_LIBRARY_PATH might redirect other executables (e.g. python) to use the new dynamic library. That might be breaking some of them. To limit the scope of the export, one option is to create a bash script that would act as a shortcut for launching powershell.\nExample shortcut script:\n\n``` bash\n#!/bin/bash\nexport LD_LIBRARY_PATH=/opt/shibboleth/lib64/:$LD_LIBRARY_PATH\npowershell\n```\n\nI tried setting the env variable inside powershell instead of bash, but for some reason that didn't affect the dynamic library resolution.\n",
      "created_at": "2016-10-26T07:55:14Z",
      "updated_at": "2016-10-26T07:55:14Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Just for reference, this looks like the upstream CoreFX bug: dotnet/corefx/issues/10146 \n",
      "created_at": "2016-10-28T15:59:00Z",
      "updated_at": "2016-10-28T15:59:00Z"
    },
    {
      "author": "vmkdaily",
      "author_association": "NONE",
      "body": "Hi all,\r\nPatiently waiting for this to get fixed.  I'm hoping to run Powershell and PowerCLI on CentOS (without downloading bits from Japan).  Thanks for your support!",
      "created_at": "2016-12-25T17:28:17Z",
      "updated_at": "2016-12-25T17:28:17Z"
    },
    {
      "author": "ryangurazov",
      "author_association": "NONE",
      "body": "Hi, please provide an update on the issue.\r\nVery much needed and your effort is very much appreciated.\r\nThank you.",
      "created_at": "2017-02-22T21:32:14Z",
      "updated_at": "2017-02-22T21:32:14Z"
    },
    {
      "author": "getSurreal",
      "author_association": "NONE",
      "body": "I installed libcurl-openssl from [rpm.pbone.net](http://rpm.pbone.net/index.php3/stat/4/idpl/33795971/dir/centos_7/com/libcurl-openssl-7.43.0-1.1.x86_64.rpm.html) and overwrote the existing libcurl and was able to make a connection with VMware's PowerCLI Core.\r\n\r\n `mv /opt/shibboleth/lib64/libcurl.so.4.3.0 /usr/lib64`",
      "created_at": "2017-03-01T16:05:58Z",
      "updated_at": "2017-03-01T16:05:58Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Looks like we are going to face the same issue on OpenSUSE (at least 13.2)",
      "created_at": "2017-03-06T04:40:02Z",
      "updated_at": "2017-03-06T04:40:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Upstream issue has been moved to dotnet/wcf/issues/1792. \r\n\r\n@ryangurazov @getSurreal we're really blocked without the fix to that issue. ",
      "created_at": "2017-03-06T17:37:27Z",
      "updated_at": "2017-03-06T17:37:27Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This is dependent on wcf, so it's not a beta1 blocker, but given the current milestone that it's assigned to over there, we're hoping it gets fixed in the beta1 milestone. ",
      "created_at": "2017-03-20T23:13:09Z",
      "updated_at": "2017-03-20T23:13:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`HttpClientHandler.DangerousAcceptAnyServerCertificateValidator` is added to .NET Core 2.0 to support the scenario of having `ServerCertificateCustomValidationCallback` always returns true. See the issue https://github.com/dotnet/corefx/issues/19709 and the corresponding PR https://github.com/dotnet/corefx/pull/19941\r\n\r\nThe `-SkipCertificateCheck` parameter of `Invoke-WebRequest` and `Invoke-RestMethod` will be fixed to work on OSX and CentOS by PR #3887. This issue is essentially a duplicate of #3648.",
      "created_at": "2017-06-01T06:06:12Z",
      "updated_at": "2017-06-01T06:06:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Verified that this is fixed by PR #3887 \r\n```\r\nPS /> cat /etc/centos-release\r\nCentOS Linux release 7.3.1611 (Core)\r\nPS />\r\nPS /> Invoke-WebRequest -Uri 'https://expired.badssl.com'\r\nInvoke-WebRequest : Peer certificate cannot be authenticated with given CA certificates\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri 'https://expired.badssl.com'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\nPS />\r\nPS /> Invoke-WebRequest -Uri 'https://expired.badssl.com' -SkipCertificateCheck\r\n\r\nStatusCode        : 200\r\nStatusDescription : OK\r\nContent           : <!DOCTYPE html>\r\n                    <html>\r\n                    <head>\r\n                      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n                      <link rel=\"shortcut icon\" href=\"/icons/favicon-red.ico\"/>\r\n                      <link rel=\"apple-touch-icon\" href=\"/i...\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Server: nginx/1.10.0\r\n                    Date: Wed, 14 Jun 2017 22:10:41 GMT\r\n                    Connection: keep-alive\r\n                    ETag: \"5939cdd8-1d5\"\r\n                    Cache-Control: no-store\r\n                    Accept-Ranges: bytes\r\n\r\n                    <!DOCTYPE html>\r\n                    <html>\r\n                    <head>\r\n                      <meta...\r\nForms             :\r\nHeaders           : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]],\r\n                    [ETag, System.String[]]...}\r\nImages            : {}\r\nInputFields       : {}\r\nLinks             : {}\r\nParsedHtml        :\r\nRawContentLength  : 469\r\nRelationLink      : {}\r\n```",
      "created_at": "2017-06-14T22:13:34Z",
      "updated_at": "2017-06-14T22:13:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We are moving back to .NET Core 2.0.0-preview1 via PR #4026 due to regressions in the latest .NET Core 2.0.0-preview2 (dotnet/corefx#21095). So re-open this bug.",
      "created_at": "2017-06-15T21:03:48Z",
      "updated_at": "2017-06-15T21:03:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We moved to .NET Core 2.0.0-preview3 via PR #4144. I have verified that this issue is fixed.\r\n\r\n```\r\nPS /> cat /etc/centos-release                                                                               CentOS Linux release 7.3.1611 (Core)\r\nPS />\r\nPS /> Invoke-WebRequest -Uri 'https://expired.badssl.com'                                                   Invoke-WebRequest : Peer certificate cannot be authenticated with given CA certificates\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri 'https://expired.badssl.com'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequest\r\n   Command\r\nPS /> Invoke-WebRequest -Uri 'https://expired.badssl.com' -SkipCertificateCheck                             \r\n\r\nStatusCode        : 200\r\nStatusDescription : OK\r\nContent           : <!DOCTYPE html>\r\n                    <html>\r\n                    <head>\r\n                      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n                      <link rel=\"shortcut icon\" href=\"/icons/favicon-red.ico\"/>\r\n                      <link rel=\"apple-touch-icon\" href=\"/i...\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Server: nginx/1.10.3\r\n                    Date: Fri, 30 Jun 2017 22:29:43 GMT\r\n                    Connection: keep-alive\r\n                    ETag: \"595583e8-1d5\"\r\n                    Cache-Control: no-store\r\n                    Accept-Ranges: bytes\r\n\r\n                    <!DOCTYPE html>\r\n                    <html>\r\n                    <head>\r\n                      <meta...\r\nForms             :\r\nHeaders           : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]],\r\n                    [ETag, System.String[]]...}\r\nImages            : {}\r\nInputFields       : {}\r\nLinks             : {}\r\nParsedHtml        :\r\nRawContentLength  : 469\r\nRelationLink      : {}\r\n```",
      "created_at": "2017-06-30T22:30:10Z",
      "updated_at": "2017-06-30T22:30:10Z"
    },
    {
      "author": "ljckennedy",
      "author_association": "NONE",
      "body": "Just installed the latest as reference here:\r\nhttps://github.com/PowerShell/PowerShell/blob/master/docs/installation/linux.md#centos-7\r\n\r\nand hit this issue passing a client cert:\r\nInvoke-webrequest -Method $method -Uri $protocol$server$resource -Header $header  -certificate $certs -UseBasicParsing -Verbose\r\n\r\nIs this a different issue?\r\n\r\nNB:  No issue on ubuntu..",
      "created_at": "2017-10-26T21:09:09Z",
      "updated_at": "2017-10-26T21:27:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@ljckennedy it is the same issue. cert configurations of CentOS and macOS use something other than libcurl-ssl and as a result the underlying CoreFX cannot perform certificate based authentication.",
      "created_at": "2017-10-26T23:24:13Z",
      "updated_at": "2017-10-26T23:24:13Z"
    },
    {
      "author": "ljckennedy",
      "author_association": "NONE",
      "body": "Ok.  I assumed marked as 'Closed' meant it was fixed.",
      "created_at": "2017-10-26T23:53:01Z",
      "updated_at": "2017-10-26T23:53:01Z"
    },
    {
      "author": "anderssonjohan",
      "author_association": "NONE",
      "body": "Is this only fixed when using Invoke-WebRequest or should the hack using the callback of the ServicePointManager still work?\r\n\r\nI'm trying to use the old hack because of code that uses System.Net.WebClient.DownloadString.\r\nI have just updated everything (powershell and curl) using homebrew and still get the error:\r\n\r\n```\r\nSystem.Net.WebException: An exception occurred during a WebClient request. ---> System.PlatformNotSuppor\r\n                        tedException: The handler does not support custom handling of certificates with this combination of libc\r\n                        url (7.57.0) and its SSL backend (\"OpenSSL/1.0.2n\").\r\n                           at System.Net.HttpWebRequest.GetResponse()\r\n                           at System.Net.WebClient.GetWebResponse(WebRequest request)\r\n                           at System.Net.WebClient.DownloadBits(WebRequest request, Stream writeStream)\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Net.WebClient.DownloadBits(WebRequest request, Stream writeStream)\r\n                           at System.Net.WebClient.DownloadDataInternal(Uri address, WebRequest& request)\r\n                           at System.Net.WebClient.DownloadString(Uri address)\r\n```\r\n\r\n```powershell\r\nPS > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Darwin 17.2.0 Darwin Kernel Version 17.2.0: Fri Sep 29 18:27:05 PDT 2017; root:xnu-4570.20.62~...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
      "created_at": "2017-12-13T22:02:20Z",
      "updated_at": "2017-12-13T22:02:20Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "`ServicePointManager` is not sup[ported by `Invoke-WebRequest` and `Invoke-RestMethod` on PowerShell Core as they now use the `HttpClient` API which does not honor any settings in `ServicePointManager`.\r\n\r\n\r\nOn macOS Certificate Authentication and Certificate Validation is currently not supported by any API due to limitations between Apple's Security.Framework and CoreFX (.NET Core). This is being tracked on https://github.com/PowerShell/PowerShell/issues/4650",
      "created_at": "2017-12-13T22:40:16Z",
      "updated_at": "2017-12-13T22:41:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I should note that `-SkipCertificateCheck` does work on macOS and is the only available option. ",
      "created_at": "2017-12-13T22:43:39Z",
      "updated_at": "2017-12-13T22:43:39Z"
    },
    {
      "author": "liger1978",
      "author_association": "NONE",
      "body": "Still getting this on CentOS 7 when using` Invoke-RestMethod -Certificate $cert...`\r\n\r\nError:\r\n```\r\nInvoke-RestMethod : The handler does not support client authentication certificates with this combination of libcurl (7.29.0) and its SSL backend (\"NSS/3.34\")\r\n```",
      "created_at": "2018-07-25T12:56:14Z",
      "updated_at": "2018-07-25T12:56:14Z"
    },
    {
      "author": "liger1978",
      "author_association": "NONE",
      "body": "Forget it, installing  powershell-preview (`6.1.0~preview.4-1.rhel.7`) fixes this.",
      "created_at": "2018-07-25T13:25:22Z",
      "updated_at": "2018-07-25T13:25:22Z"
    }
  ],
  "created_at": "2016-10-20T14:34:41Z",
  "number": 2511,
  "state": "closed",
  "title": "On CentOS Powershell uses the system libcurl that does not support custom SSL certificate validation",
  "updated_at": "2018-07-25T13:25:22Z"
}