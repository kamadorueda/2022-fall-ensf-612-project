{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15667",
  "author": "RRohi",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n### Steps to reproduce\r\n\r\nSource: Ubuntu, pwsh 7.1.3\r\nDestination: Windows 10, PowerShell 5.1\r\n\r\nAsking for Chrome MainWindowTitle's from the Windows 10 machine. A PS Session is made from Ubuntu to Windows 10 machine.\r\n\r\n```powershell\r\n$PWD = ConvertTo-SecureString -String 'secretP@55' -AsPlainText -Force\r\n$Creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ('DomainName\\myAdmin', $PWD)\r\n\r\nInvoke-Command -ComputerName 'win10box' -Credential $Creds -Authentication Negotiate -ScriptBlock { Get-Process -Name chrome | Where-Object MainWindowTitle -like '*github*' } -ErrorAction SilentlyContinue\r\n```\r\n\r\nNote: `gss-ntlmssp` package needs to be installed on Ubuntu to successfully connect to Windows host.\r\n\r\nPS! Found another difference in results. MainWindowHandle value is always 0 when asking remotely. But I'm more interested in the title.\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nExpecting a list of chrome processes where at least one process has MainWindowTitle set.\r\nWhen I run the Get-Process cmdlet on the Windows machine I get a short list of chrome processes and one of them has the title of the website currently open.\r\n\r\nWithout filtering with MainWindowTitle:\r\n\r\n\r\nGet-Process -Name chrome\r\n\r\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\r\n-------  ------    -----      -----     ------     --  -- -----------\r\n    386      32    12360      26748       0.44   2628   2 chrome\r\n    177      12     2696       7436       0.03   2660   2 chrome\r\n    244      16     9200      15836       0.16   3888   2 chrome\r\n    232      17     9480      15464       0.05   3972   2 chrome\r\n    787      40    57572     115884     174.81   4436   2 chrome\r\n    386      68   182404     264544       7.70   5740   2 chrome\r\n    227      18    13136      20712       0.11   7884   2 chrome\r\n   1198      53    47684     102368       2.19   8144   2 chrome\r\n\r\n\r\nWhen adding the MainWindowTitle filter:\r\n\r\n```powershell\r\nGet-Process -Name chrome | Where-Object MainWindowTitle -like '*github*'\r\n\r\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\r\n-------  ------    -----      -----     ------     --  -- -----------\r\n   1307      59    49960     104668       2.02   8144   2 chrome\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nWhen running the same `Get-Process` cmdlet through `Invoke-Command`, the MainWindowTitle value is always null for all the processes.\r\nMeaning that when filtering for a specific title name, the result will be nothing/empty.\r\n\r\n\r\n$PWD = ConvertTo-SecureString -String 'secretP@55' -AsPlainText -Force\r\n$Creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ('DomainName\\myAdmin', $PWD)\r\n\r\nInvoke-Command -ComputerName 'win10box' -Credential $Creds -Authentication Negotiate -ScriptBlock { Get-Process -Name chrome | Where-Object MainWindowTitle -like '*github*' } -ErrorAction SilentlyContinue\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Linux 5.4.0-1051-azure #53~18.04.1-Ubuntu SMP Fri Jun 18 22:32:58 UTC 2021\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n`Get-Process` run locally on Windows 10 (PowerShell 5.1):\r\n\r\n![image](https://user-images.githubusercontent.com/20452819/123349907-8e8c4200-d562-11eb-8d32-ef59b51d833f.png)\r\n\r\nThe same process queried from Ubuntu (pwsh 7.1.3), using `Invoke-Command`:\r\n\r\n![Screenshot 2021-06-25 031017](https://user-images.githubusercontent.com/20452819/123350327-694c0380-d563-11eb-8c67-99edbed10547.png)\r\n",
  "closed_at": "2021-06-25T11:14:39Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Could you please clarify how deserialization works?\r\n If Process object is re-created then Unix implementation for the property is to return empty string https://github.com/dotnet/runtime/blob/7833828914a42f8c99dfa6f18ccd47f99dc2b56e/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L1002\r\n\r\n\n\n<blockquote><img src=\"https://opengraph.githubassets.com/844d2ba51bc97206d17d6c14bef63518be39fb69175099d23700fd5e386472b2/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2021-06-25T03:43:44Z",
      "updated_at": "2021-06-25T03:43:46Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I cannot replicate this, I can also verify that the `MainWindowTitle` is serialized as a string which is expected. Here is the captured pipeline output when doing `Get-Process notepad` on a Windows host.\r\n\r\n```xml\r\nType      : Data\r\nPSGuid    : 1b43925d-bd4f-42f4-a5d5-7aa9ded215c9\r\nStream    : Default\r\nFragments : ObjectID   : 8\r\n            FragmentID : 0\r\n            Start      : True\r\n            End        : True\r\n            Length     : 5173\r\nMessages  : ObjectID    : 8\r\n            Destination : Client\r\n            MessageType : PIPELINE_OUTPUT\r\n            RPID        : 37102187-8fac-41c6-9e82-5fd7803535be\r\n            PID         : 1b43925d-bd4f-42f4-a5d5-7aa9ded215c9\r\n            Object      :\r\n<Obj RefId=\"0\">\r\n  <TN RefId=\"0\">\r\n    <T>System.Diagnostics.Process</T>\r\n    <T>System.ComponentModel.Component</T>\r\n    <T>System.MarshalByRefObject</T>\r\n    <T>System.Object</T>\r\n  </TN>\r\n  <ToString>System.Diagnostics.Process (notepad)</ToString>\r\n  <Props>\r\n    <S N=\"SafeHandle\">Microsoft.Win32.SafeHandles.SafeProcessHandle</S>\r\n    <S N=\"Handle\">3148</S>\r\n    <I32 N=\"BasePriority\">8</I32>\r\n    <B N=\"HasExited\">false</B>\r\n    <DT N=\"StartTime\">2021-06-25T18:37:16.8575853+10:00</DT>\r\n    <I32 N=\"Id\">1552</I32>\r\n    <S N=\"MachineName\">.</S>\r\n    <S N=\"MaxWorkingSet\">1413120</S>\r\n    <S N=\"MinWorkingSet\">204800</S>\r\n    <Obj N=\"Modules\" RefId=\"1\">\r\n      <TN RefId=\"1\">\r\n        <T>System.Diagnostics.ProcessModuleCollection</T>\r\n        <T>System.Collections.ReadOnlyCollectionBase</T>\r\n        <T>System.Object</T>\r\n      </TN>\r\n      <IE>\r\n        <S>System.Diagnostics.ProcessModule (notepad.exe)</S>\r\n        <S>System.Diagnostics.ProcessModule (ntdll.dll)</S>\r\n        <S>System.Diagnostics.ProcessModule (KERNEL32.DLL)</S>\r\n        <S>System.Diagnostics.ProcessModule (KERNELBASE.dll)</S>\r\n      </IE>\r\n    </Obj>\r\n    <I64 N=\"NonpagedSystemMemorySize64\">12896</I64>\r\n    <I32 N=\"NonpagedSystemMemorySize\">12896</I32>\r\n    <I64 N=\"PagedMemorySize64\">2760704</I64>\r\n    <I32 N=\"PagedMemorySize\">2760704</I32>\r\n    <I64 N=\"PagedSystemMemorySize64\">214160</I64>\r\n    <I32 N=\"PagedSystemMemorySize\">214160</I32>\r\n    <I64 N=\"PeakPagedMemorySize64\">3174400</I64>\r\n    <I32 N=\"PeakPagedMemorySize\">3174400</I32>\r\n    <I64 N=\"PeakWorkingSet64\">14942208</I64>\r\n    <I32 N=\"PeakWorkingSet\">14942208</I32>\r\n    <I64 N=\"PeakVirtualMemorySize64\">2203504959488</I64>\r\n    <I32 N=\"PeakVirtualMemorySize\">186736640</I32>\r\n    <B N=\"PriorityBoostEnabled\">true</B>\r\n    <S N=\"PriorityClass\">Normal</S>\r\n    <I64 N=\"PrivateMemorySize64\">2760704</I64>\r\n    <I32 N=\"PrivateMemorySize\">2760704</I32>\r\n    <S N=\"ProcessName\">notepad</S>\r\n    <S N=\"ProcessorAffinity\">65535</S>\r\n    <I32 N=\"SessionId\">1</I32>\r\n    <Obj N=\"Threads\" RefId=\"2\">\r\n      <TN RefId=\"2\">\r\n        <T>System.Diagnostics.ProcessThreadCollection</T>\r\n        <T>System.Collections.ReadOnlyCollectionBase</T>\r\n        <T>System.Object</T>\r\n      </TN>\r\n      <IE>\r\n        <S>System.Diagnostics.ProcessThread</S>\r\n        <S>System.Diagnostics.ProcessThread</S>\r\n        <S>System.Diagnostics.ProcessThread</S>\r\n      </IE>\r\n    </Obj>\r\n    <I32 N=\"HandleCount\">237</I32>\r\n    <I64 N=\"VirtualMemorySize64\">2203473371136</I64>\r\n    <I32 N=\"VirtualMemorySize\">155148288</I32>\r\n    <B N=\"EnableRaisingEvents\">false</B>\r\n    <I64 N=\"WorkingSet64\">14893056</I64>\r\n    <I32 N=\"WorkingSet\">14893056</I32>\r\n    <Nil N=\"SynchronizingObject\" />\r\n    <S N=\"MainModule\">System.Diagnostics.ProcessModule (notepad.exe)</S>\r\n    <TS N=\"PrivilegedProcessorTime\">PT0.015625S</TS>\r\n    <TS N=\"TotalProcessorTime\">PT0.046875S</TS>\r\n    <TS N=\"UserProcessorTime\">PT0.03125S</TS>\r\n    <S N=\"MainWindowHandle\">264468</S>\r\n    <S N=\"MainWindowTitle\">Untitled - Notepad</S>\r\n    <B N=\"Responding\">true</B>\r\n    <Nil N=\"Site\" />\r\n    <Nil N=\"Container\" />\r\n  </Props>\r\n  <MS>\r\n    <S N=\"Name\">notepad</S>\r\n    <I32 N=\"SI\">1</I32>\r\n    <I32 N=\"Handles\">237</I32>\r\n    <I64 N=\"VM\">2203473371136</I64>\r\n    <I64 N=\"WS\">14893056</I64>\r\n    <I64 N=\"PM\">2760704</I64>\r\n    <I64 N=\"NPM\">12896</I64>\r\n    <S N=\"Path\">C:\\WINDOWS\\system32\\notepad.exe</S>\r\n    <S N=\"CommandLine\">\"C:\\WINDOWS\\system32\\notepad.exe\" </S>\r\n    <Nil N=\"Parent\" />\r\n    <S N=\"Company\">Microsoft Corporation</S>\r\n    <Db N=\"CPU\">0.046875</Db>\r\n    <S N=\"FileVersion\">10.0.19041.1 (WinBuild.160101.0800)</S>\r\n    <S N=\"ProductVersion\">10.0.19041.1</S>\r\n    <S N=\"Description\">Notepad</S>\r\n    <S N=\"Product\">Microsoft\u00ae Windows\u00ae Operating System</S>\r\n    <S N=\"__NounName\">Process</S>\r\n  </MS>\r\n</Obj>\r\n```\r\n\r\nThe value itself is present and set as expected.\r\n\r\n```xml\r\n<TS N=\"TotalProcessorTime\">PT0.046875S</TS>\r\n<TS N=\"UserProcessorTime\">PT0.03125S</TS>\r\n<S N=\"MainWindowHandle\">264468</S>\r\n<S N=\"MainWindowTitle\">Untitled - Notepad</S>\r\n<B N=\"Responding\">true</B>\r\n<Nil N=\"Site\" />\r\n<Nil N=\"Container\" />\r\n```\r\n\r\nI even tested this against Chrome that has loaded Git Hub and it was able to filter by `MainWindowTitle` and return the proper value back.",
      "created_at": "2021-06-25T08:45:02Z",
      "updated_at": "2021-06-25T08:45:02Z"
    },
    {
      "author": "RRohi",
      "author_association": "NONE",
      "body": "What do you mean by \"doing Get-Process notepad on a Windows host\", @jborean93?",
      "created_at": "2021-06-25T08:53:25Z",
      "updated_at": "2021-06-25T08:53:25Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I opened `notepad.exe` on a Windows host. I then connect to said Windows host, with both a WSMan and inter process session, and ran `Get-Process notepad`. The output I get back includes the window title and I can verify that it's also included in the raw PSRP CLIXML exchange. I also tested this with a chrome instance that had GitHub opened. Maybe in this particular case the chrome window is elevated and your account doesn't have the rights to view that information when running from a network logon. I'm not 100% how access permissions work for actual windows but I can verify the data is serialized and returned if it is present on the remote host.",
      "created_at": "2021-06-25T08:56:49Z",
      "updated_at": "2021-06-25T09:01:29Z"
    },
    {
      "author": "RRohi",
      "author_association": "NONE",
      "body": "My issue is not querying processes on the Windows host itself. This is fine.\r\n\r\nThe problem appears when I query Windows processes from a Ubuntu machine, using `Invoke-Command`.\r\n\r\n```powershell\r\nPS /home/user> Invoke-Command -ComputerName $Target -Credential $Creds -Authentication Negotiate -ScriptBlock { Get-Process -Name chrome | Select-Object ProcessName, MainWindowTitle }\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n\r\nProcessName     : chrome\r\nMainWindowTitle :\r\nPSComputerName  : VM004\r\nRunspaceId      : 86ff2d47-52c1-4bf9-9c67-856084d1e949\r\n```\r\n\r\nOne of these objects should not have MainWindowTitle as null.",
      "created_at": "2021-06-25T09:24:36Z",
      "updated_at": "2021-06-25T09:24:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The issue here isn't to do with serialization but rather the isolation between the Windows session/desktops. .NET can only get the title if there is a valid `MainWindowHandle` and there is no valid `MainWindowHandle` when running in a PSRemoting session for 2 reasons:\r\n\r\n* The PSRemoting process is run in session 0 in a non-interactive desktop which cannot contain any windows so [EnumWindows](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows) can't enumerate anything there\r\n* The processes outside of the PSRemoting session, like your `chrome` example, live in a completely different desktop and `EnumWindows` will only enumerate windows in the current desktop.\r\n\r\nBecause of this you won't be able to filter by window title in your PSSession. There's nothing that PowerShell or .NET can do about this as it's a limitation of Windows and its security model.",
      "created_at": "2021-06-25T10:59:43Z",
      "updated_at": "2021-06-25T10:59:43Z"
    },
    {
      "author": "RRohi",
      "author_association": "NONE",
      "body": "ok, thanks for the info @jborean93 ",
      "created_at": "2021-06-25T11:14:39Z",
      "updated_at": "2021-06-25T11:14:39Z"
    }
  ],
  "created_at": "2021-06-25T00:16:55Z",
  "labels": [
    "Issue-Question",
    "WG-Remoting"
  ],
  "number": 15667,
  "state": "closed",
  "title": "Get-Process over Invoke-Command has incomplete results",
  "updated_at": "2021-06-25T11:14:41Z"
}