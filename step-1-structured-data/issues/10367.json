{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10367",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdd support to ternary operator `<condition> ? <if-true> : <if-false>`. It results in a `TernaryExpressionAst`.\r\nAddress #3239 \r\nRFC: https://github.com/PowerShell/PowerShell-RFC/pull/218\r\nThe old draft PR where a lot of discussions happened: #10161\r\n\r\nThe ternary operator behaves like the simplified if-else statement. The `condition-expression` will always be evaluated, and its result will be converted to boolean to determine which branch will be evaluated next:\r\n- `if-true-expression` will execute if the condition's result is evaluated as `true`\r\n- `if-false-expression` will execute if the condition's result is evaluated as `false`\r\n\r\n## PR Context\r\n\r\nTernary operator has lower precedence than binary operator, so you can write `$a -eq $b ? \"Hello World\" : [int]::MaxValue`.\r\nIn order to make the number constant expression work naturally with ternary operators, such as in `return ${succeed}?0:1`, characters `?` and `:` are made start-new-token chars conditionally when scanning for numbers.\r\nWhen it's known for sure that we are expecting an expression, allowing a generic token like `123?` is not useful and bound to result in parsing errors.\r\nIn those cases, we will force to start a new token upon seeing characters `?` and `:` when scanning for a number, so that that number constant expressions can work with ternary operators more intuitively.\r\n\r\nNote that, the implicit line continuance for `?` support was reverted in the latest code change based on the feedback I received within the team.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSTernaryOperator`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4648\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-04T20:22:34Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 Your comments have been addressed. Can you please take another look?",
      "created_at": "2019-08-20T20:19:39Z",
      "updated_at": "2019-08-20T20:19:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan and @JamesWTruher Your comments are addressed. I rebased the branch with the master branch. The last 2 commits are changes that addressed your comments. Please take another look, thanks!",
      "created_at": "2019-08-27T18:53:57Z",
      "updated_at": "2019-08-27T18:53:57Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@JamesWTruher Can you update your review?",
      "created_at": "2019-09-04T18:09:17Z",
      "updated_at": "2019-09-04T18:09:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we should have only one CL-* label.",
      "created_at": "2019-09-05T05:58:00Z",
      "updated_at": "2019-09-05T05:58:00Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov \tWith experimental, we should have a second, but only experimental.",
      "created_at": "2019-09-05T20:24:36Z",
      "updated_at": "2019-09-05T20:24:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:52:08Z",
      "updated_at": "2019-09-19T17:52:08Z"
    }
  ],
  "created_at": "2019-08-15T18:28:18Z",
  "number": 10367,
  "state": "closed",
  "title": "Support ternary operator in PowerShell language",
  "updated_at": "2019-09-19T17:52:08Z"
}