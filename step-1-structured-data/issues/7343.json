{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7343",
  "author": "bradwilson",
  "body": "When writing a PowerShell script, it would be nice to know if you're running in an elevated context (UAC in Windows, as root on *nix). You can do platform-specific things today, but it should be easily available without regard to platform.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "CoreFx has an open issue to add API support: https://github.com/dotnet/corefx/issues/27304\r\n\r\nDepending on how that goes (whether it's Unix specific, for example), perhaps we should consider a `$IsAdmin` automatic variable.",
      "created_at": "2018-07-23T21:50:59Z",
      "updated_at": "2018-07-23T21:50:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have `Test-IsElevated` in out HelpersCommon.psm1.  We could re-implement it on C#. Although the use of `whoami/id` is under question.",
      "created_at": "2018-09-28T10:02:27Z",
      "updated_at": "2018-09-28T11:23:08Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like the CoreFx issue was closed and the recommended solution was to:\r\n\r\nhttps://github.com/dotnet/runtime/issues/25118#issuecomment-367407469\r\n\r\n> To check if you are running as `root` on Unix:\r\n> \r\n> 1. add a PackageReference to [Mono.Posix.NETStandard](https://www.nuget.org/packages/Mono.Posix.NETStandard/)\r\n> 2. Change `IsAdminstrator` to the following:\r\n> \r\n> ```cs\r\n>         public static bool IsAdministrator =>\r\n>             RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?\r\n>                 new WindowsPrincipal(WindowsIdentity.GetCurrent())\r\n>                     .IsInRole(WindowsBuiltInRole.Administrator) :\r\n>                 Mono.Unix.Native.Syscall.geteuid() == 0; \r\n> ```\r\n\r\n",
      "created_at": "2020-10-13T18:35:43Z",
      "updated_at": "2020-10-13T18:35:43Z"
    },
    {
      "author": "bradwilson",
      "author_association": "NONE",
      "body": "This is what I landed on:\r\n\r\n```powershell\r\n$isDesktop = ($PSVersionTable.PSEdition -eq \"Desktop\")\r\n\r\nif ($isDesktop -or $IsWindows) {\r\n    $windowsIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()\r\n    $windowsPrincipal = new-object 'System.Security.Principal.WindowsPrincipal' $windowsIdentity\r\n    $isAdmin = $windowsPrincipal.IsInRole(\"Administrators\") -eq 1\r\n}\r\nelse {\r\n    $isAdmin = ((& id -u) -eq 0)\r\n}\r\n```\r\n\r\nDoesn't make sense to add a reference to `Mono.Postix.NETStandard` from PowerShell.",
      "created_at": "2020-10-14T02:01:17Z",
      "updated_at": "2020-10-14T02:01:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is better to have in .Net.\r\n\r\n.Net team asks to open new issue with API proposal. If you want to get any progress I suggest to open such issue there while they plans .Net 6.0.",
      "created_at": "2020-10-14T03:30:26Z",
      "updated_at": "2020-10-14T03:31:51Z"
    },
    {
      "author": "bradwilson",
      "author_association": "NONE",
      "body": "@iSazonov This doesn't need to be a .NET feature. It could absolutely be a PowerShell feature.",
      "created_at": "2020-10-14T03:33:09Z",
      "updated_at": "2020-10-14T03:33:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We prefer to follow .Net in the repository.\r\n\r\nThe API is problematic because it depends on platforms. It should take into account all Unix clones and specific \"platforms\" like WebAssembly/Blazor. This requires complex testing and discussion.\r\n",
      "created_at": "2020-10-14T03:38:39Z",
      "updated_at": "2020-10-14T03:38:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could utilize to implement https://github.com/PowerShell/PowerShell/issues/7343#issuecomment-707932238:\r\n```c#\r\n    [DllImport(\"libc\")]\r\n    public static extern uint geteuid();\r\n```",
      "created_at": "2021-01-15T06:05:23Z",
      "updated_at": "2021-01-15T06:07:45Z"
    }
  ],
  "created_at": "2018-07-23T21:46:42Z",
  "number": 7343,
  "state": "open",
  "title": "Add a platform agnostic way to detect when running elevated",
  "updated_at": "2021-01-15T06:07:45Z"
}