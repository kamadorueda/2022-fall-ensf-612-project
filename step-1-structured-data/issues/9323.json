{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9323",
  "author": "danports",
  "body": "Compile the following program against 6.2.0 or 6.1.3 (I've tried both) and run it on a Linux machine (I've been using an [Docker image based on Ubuntu](https://hub.docker.com/r/danports/dotnet-runtime-powershell/dockerfile)), with the appropriate arguments (e.g. `mywindowsserver myusername mypassword`).\r\n\r\n```c#\r\npublic static void Main(string[] args)\r\n{\r\n    var connectionInfo = new WSManConnectionInfo\r\n    {\r\n        ComputerName = args[0],\r\n        Credential = new PSCredential($@\"{args[0]}\\{args[1]}\", new NetworkCredential(string.Empty, args[2]).SecurePassword),\r\n        AuthenticationMechanism = AuthenticationMechanism.Negotiate,\r\n        OperationTimeout = 0,\r\n        IdleTimeout = (int)TimeSpan.FromMinutes(20).TotalMilliseconds\r\n    };\r\n    using (var runspace = RunspaceFactory.CreateRunspace(connectionInfo))\r\n    {\r\n        Console.WriteLine(\"Connecting...\");\r\n        runspace.Open();\r\n        Console.WriteLine(\"Connected; running script...\");\r\n\r\n        using (var shell = PowerShell.Create())\r\n        {\r\n            shell.Runspace = runspace;\r\n            shell.Commands.AddScript(@\"\r\nWrite-Host \"\"Sleeping for 90 seconds...\"\"\r\nSleep 90\r\nWrite-Host \"\"Done!\"\"\r\n\");\r\n            shell.Invoke();\r\n        }\r\n        Console.WriteLine(\"Finished.\");\r\n    }\r\n}\r\n```\r\n\r\nThe program should exit after 90 seconds, but instead it hangs forever (even if you reboot the server!). On Windows, the program does exit as expected after 90 seconds.\r\n\r\n# Analysis\r\nI've enabled and reviewed the OMI client logs, which show that the client socket is timing out after one minute:\r\n```\r\nDEBUG: null(0): _CreateConnectorSocket - OK exit. socket: 76, secure: 0, timeout: 01:00.000\r\nERROR: null(0): _RequestCallback - Timed out. socket: 76, result: 1004 (MI_RESULT_TIME_OUT)\r\n```\r\n\r\nThat one minute timeout appears to be a default value hard coded in the OMI client:\r\nhttps://github.com/Microsoft/omi/blob/4a0b6ebabdce442c3e526cd47fb326425aeed79a/Unix/http/httpclient_private.h#L24\r\nhttps://github.com/Microsoft/omi/blob/049c361978731425549f35067ab25b0b14febd01/Unix/http/httpclient.c#L1868\r\n\r\nThe `WSManConnectionInfo.OperationTimeout` value is passed through various layers [to the server](https://github.com/Microsoft/omi/blob/b66f6468838c7074c2b3f03eb1344a5958e1aced/Unix/wsman/wsmanclient.c#L763), but does not appear to be used anywhere else (e.g. to configure client timeouts in libmi).\r\n\r\nSo there are likely at least two issues here:\r\n1. PowerShell does not correctly handle client timeouts when they do occur.\r\n2. PowerShell does not attempt to configure client timeouts in libmi.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Could you please comment the Issue?",
      "created_at": "2019-04-09T18:08:28Z",
      "updated_at": "2019-04-09T18:08:28Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "I've dug further into this and it appears the problem is a result of setting `OperationTimeout = 0`. libmi only sets its internal socket timeout [if one is specified by the client](https://github.com/Microsoft/omi/blob/b66f6468838c7074c2b3f03eb1344a5958e1aced/Unix/wsman/wsmanclient.c#L719); otherwise it uses its default of one minute. So I think this is still a bug (the PowerShell stack shouldn't hang in this situation), but it's a pretty specific edge case, and can be easily worked around by setting `OperationTimeout` to a non-zero value.",
      "created_at": "2019-04-10T14:33:28Z",
      "updated_at": "2019-04-10T14:33:28Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It looks like this has already been analyzed (thanks @danports !).\r\n\r\nI know that when this OMI 'bridge' was written, many WSMan details were left out or not fully implemented and it looks like this is one of them.\r\n\r\nI agree that the workaround is to just not set the OperationTimeout value to zero.",
      "created_at": "2019-04-10T18:27:03Z",
      "updated_at": "2019-04-10T18:27:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #8233 ",
      "created_at": "2019-04-11T03:14:10Z",
      "updated_at": "2019-04-11T03:14:10Z"
    }
  ],
  "created_at": "2019-04-08T20:57:53Z",
  "labels": [
    "Issue-Bug",
    "WG-Remoting"
  ],
  "number": 9323,
  "state": "open",
  "title": "Executing commands that run for longer than one minute in a remote runspace (from a Linux client to a Windows server) causes the client to hang forever when OperationTimeout = 0",
  "updated_at": "2019-04-11T03:14:10Z"
}