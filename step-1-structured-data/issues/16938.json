{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16938",
  "author": "Tarjei-stavanger",
  "body": "### Summary of the new feature / enhancement\n\nI want my and other PowerShell script to not be dependent on the current culture that the user is using. Frankly, it also applies to my CMD scripts as well.\r\n\r\n**Examples** \r\nWith the local culture being \"nb-NO\".\r\nThe local \"Administrators\" group is called \"Administratorer\" and that applies to scripts as well.\r\nThe Firewall display group \"Remote Desktop\" is \"Eksternt Skrivebord\".\r\n\r\nIt would be nice to have a way of indicating that a script should be run in a standard environment where the local culture names don't apply.\r\n\r\nI think such an environment should have the date as standard being YYYY-MM-DD. Such dates are instantly sortable right out of the box.\r\n\r\nHaving exceptions opens a can of worms. It might be better to be able to specify culture for human readable output. \r\n\r\n$fishNumber = $fishNumber.Culture( Get-Culture );\n\n### Proposed technical implementation details (optional)\n\nI think that a standardized environment should be dependent on a statement. Either included with the current culture settings or as a statement.\r\n\r\ne.g. Set-Script-Culture  'PS-standard';  ( As a matter of principle I would prefer Script-Culture-Set  'PS-Standard' )",
  "closed_at": "2022-03-03T12:00:44Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "`Get-Culture \"\" ` \r\nReturns the \"Invariant\" culture, which is mostly  US English with stupid least significant in the middle dates, but with 24 clock instead of 12 hour.\r\nIn your profile or in a script you can put \r\n```\r\n[System.Threading.Thread]::CurrentThread.CurrentCulture = Get-Culture \"\"\r\n```\r\nTo make it use that culture or \r\n```\r\n[System.Threading.Thread]::CurrentThread.CurrentCulture = Get-Culture \"nb-NO\"\r\n```\r\nTo be consistently Norwegian ",
      "created_at": "2022-03-01T15:45:56Z",
      "updated_at": "2022-03-01T15:45:56Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "This is a Windows problem not a PowerShell problem. Local users/groups have their real name changed in localized versions of Windows, that's why even if you install an English language pack the group names keep their localized name. If you want to do something with the built-in groups you need to use their wellknown SIDs. This also prevents you from running into issues on systems where people have manually renamed the groups/users.  \r\nAs for the firewall displayname, I think it uses the MUI files for the current language to get the name and even if you could force it to use English, you would still need to actually install those language files.",
      "created_at": "2022-03-02T00:10:26Z",
      "updated_at": "2022-03-02T00:10:26Z"
    },
    {
      "author": "Tarjei-stavanger",
      "author_association": "NONE",
      "body": "I tested the Get-Culture \"\" solution with PowerShell 7.2.1 and 5.1. I also tried \"en-US\". It does not work in either version.\r\n\r\nIn 7.2.1, the date is ok with a 24 hour clock, but the examples I used are still valid. In 5.1, Get-culture does not take parameters.",
      "created_at": "2022-03-02T06:39:34Z",
      "updated_at": "2022-03-02T06:39:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As @MartinGC94 said it is how Windows works. It is impossible to change this in PowerShell and in any application. For well-known group and account names you could use workarounds like using SID.\r\n\r\nNotice, PowerShell Engine uses Invariant culture, PowerShell Formatting System uses Current culture.",
      "created_at": "2022-03-02T08:02:39Z",
      "updated_at": "2022-03-02T08:03:41Z"
    },
    {
      "author": "Tarjei-stavanger",
      "author_association": "NONE",
      "body": "Just because the problem originates in Windows does not mean that it is not a PowerShell problem.\r\n\r\nWith increasing localization, Windows desktop is probably going to be a difficult environment for scripting outside the English speaking communities.",
      "created_at": "2022-03-02T08:21:36Z",
      "updated_at": "2022-03-02T08:21:36Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": ">  it is how Windows works. It is impossible to change this in PowerShell and in any application. \r\n\r\n> Just because the problem originates in Windows does not mean that it is not a PowerShell problem.\r\n\r\nIt is problem which **affects** PowerShell. It is not a problem where the solution is in PowerShell's hands.  \r\n\r\n@iSazonov  there is an issue with script portability,  because so much PowerShell is created on Windows in an English version (and we have \"Time zone for the clock\", \"country you're in\", \"Language to speak to you with\", \"how your data should be formatted\" as subtly different things) , some shared code won't use language independent names. \r\nThe OP is probably going to write better scripts knowing that most of the world doesn't use \"Eksternt Skrivebord\" but authors working in English assume \"Remote Desktop\" is universal. That's a problem for the broader ecosystem, but not something PowerShell itself can fix. \r\n",
      "created_at": "2022-03-02T11:36:35Z",
      "updated_at": "2022-03-02T11:36:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-03-03T12:00:44Z",
      "updated_at": "2022-03-03T12:00:44Z"
    },
    {
      "author": "rokejulianlockhart",
      "author_association": "NONE",
      "body": "Is somebody able to forward this to the developers of Windows?",
      "created_at": "2022-03-30T22:29:52Z",
      "updated_at": "2022-03-30T22:29:52Z"
    }
  ],
  "created_at": "2022-03-01T10:31:13Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 16938,
  "state": "closed",
  "title": "Standardized context for PowerShell",
  "updated_at": "2022-03-30T22:29:52Z"
}