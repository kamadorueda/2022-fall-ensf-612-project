{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11314",
  "author": "DHowett-MSFT",
  "body": "# Steps to reproduce\r\n\r\nInstall powershell as a dotnet global tool. Run a long-running thing (like Start-Sleep), and then press <kbd>Ctrl+C</kbd>\r\n\r\n# Expected behavior\r\n\r\nI am returned to a powershell prompt.\r\n\r\n```none\r\nC:\\Users\\duhowett>.\\.dotnet\\tools\\pwsh\r\nPowerShell 6.2.3\r\n\r\n(dhowett-dev2) ~ % start-sleep 10\r\n^C\r\n(dhowett-dev2) ~ % # i am returned to a powershell prompt\r\n```\r\n\r\n# Actual behavior\r\n\r\nThe [dotnet tool shim](https://github.com/adityapatwardhan/PowerShell/blob/master/src/Microsoft.PowerShell.GlobalTool.Shim/GlobalToolShim.cs) hosting powershell terminates and returns control to _cmd_, but powershell remains connected to the console and reads input simultaneously. PowerShell and CMD share the input buffer, and neither of them can agree on what goes into it.\r\nIf you manage to exit cmd, powershell re-asserts control.\r\n\r\nThe `dir` in the snippet below came from _cmd_\r\n\r\n```none\r\nC:\\Users\\duhowett>.\\.dotnet\\tools\\pwsh\r\nPowerShell 6.2.3\r\n\r\n(dhowett-dev2) ~ % start-sleep 10\r\n^C\r\nC:\\Users\\duhowett>\r\n(dhowett-dev2) ~ % dir\r\n Volume in drive C is Cesium\r\n Volume Serial Number is E499-450A\r\n\r\n Directory of C:\\Users\\duhowett\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/14316954/70569164-43603900-1b4e-11ea-9102-e72dbc6d98a3.png)\r\n\r\nThe blue `d` came from powershell, and the `ir` came from cmd.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-02-26T23:45:29Z",
  "comments": [
    {
      "author": "Zenexer",
      "author_association": "NONE",
      "body": "This isn't limited to pwsh as a dotnet global tool.  pwsh.exe exits whenever Ctrl + C is pressed in a long-running child process if pwsh.exe has been invoked from another terminal, e.g. powershell.exe or cmd.exe.  This makes it impossible to kill long-running native commands without also killing the whole terminal.\r\n\r\nFor example, the following works as expected:\r\n\r\n1. Press <kbd>Win</kbd> + <kbd>R</kbd>\r\n2. Type `pwsh.exe`\r\n3. Press <kbd>Enter</kbd>\r\n4. Run a long-running native command in pwsh (an EXE, not a cmdlet)\r\n5. Press <kbd>Ctrl</kbd> + <kbd>C</kbd> while the command is running\r\n6. The command will exit; pwsh will not\r\n\r\nHowever, the following occurs, but isn't expected behavior:\r\n\r\n1. Press <kbd>Win</kbd> + <kbd>R</kbd>\r\n2. Type `cmd.exe`\r\n3. Press <kbd>Enter</kbd>\r\n4. Run a long-running native command in pwsh (an EXE, not a cmdlet)\r\n5. Press <kbd>Ctrl</kbd> + <kbd>C</kbd> while the command is running\r\n6. Both the command and pwsh exit; you're brought back to cmd.exe.\r\n\r\nThe following unexpected behavior also occurs, as described in #3869:\r\n\r\n1. Open a PowerShell Core session in [Windows Terminal](https://github.com/microsoft/terminal/)\r\n2. Run a long-running native command in pwsh (an EXE, not a cmdlet)\r\n5. Press <kbd>Ctrl</kbd> + <kbd>C</kbd> while the command is running\r\n6. Both the command and pwsh exit; the Windows Terminal tab will close.\r\n\r\nThis means pwsh is very difficult to use for anything serious in Windows Terminal, since cancelling a command kills the whole shell.",
      "created_at": "2019-12-19T14:07:30Z",
      "updated_at": "2019-12-19T14:07:30Z"
    },
    {
      "author": "Zenexer",
      "author_association": "NONE",
      "body": "Update: I was on 6.2.3 when I observed that behavior.  I've since installed 7.0.0-rc1 and am no longer able to reproduce it.  There's a possibility I had installed it as a dotnet global tool before, but I thought I downloaded it directly from GitHub.  This time I installed it via the MSI on GitHub.",
      "created_at": "2019-12-19T14:54:44Z",
      "updated_at": "2019-12-19T14:54:44Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "FWIW, I'm seeing this behavior in Windows Terminal with PowerShell installed via https://scoop.sh. Both 6.2.3 and 7.0.0-rc1 are acting similarly for me. Here's the output from 7.0.0-rc1:\r\n```\r\nC:\\Users\\brian>where pwsh\r\nC:\\Users\\brian\\scoop\\shims\\pwsh.exe\r\n\r\nC:\\Users\\brian>pwsh --version\r\nPowerShell 7.0.0-rc.1\r\n\r\nC:\\Users\\brian>pwsh\r\nPowerShell 7.0.0-rc.1\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS C:\\Users\\brian> start-sleep 10\r\n^C\r\nC:\\Users\\brian>\r\nPS C:\\Users\\brian> gci\r\n'gci' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\nStarting in `cmd.exe`, we can see that PowerShell version 7.0.0-rc.1 is the default `pwsh` and is located at `C:\\Users\\brian\\scoop\\shims\\pwsh.exe`.\r\n\r\nRunning `start-sleep 10`, then pressing `ctrl+c` to stop the sleep results in a return to `cmd.exe`, with the PS prompt being output once for some reason. Attempting to run a PowerShell cmdlet results in a failure showing that we are, in fact, in `cmd.exe`. \n\n<blockquote><div><strong><a href=\"https://scoop.sh/\">Scoop</a></strong></div></blockquote>",
      "created_at": "2019-12-29T17:13:01Z",
      "updated_at": "2019-12-29T17:13:03Z"
    },
    {
      "author": "DHowett-MSFT",
      "author_association": "NONE",
      "body": "Unless Scoop is using the dotnet global tool wrapper shipped with PowerShell, this is likely an issue affecting all Scoop-shimmed console-subsystem binaries. It\u2019s almost certainly worth filing a duplicate of this issue on them so they can fix it for everyone.",
      "created_at": "2019-12-30T05:18:32Z",
      "updated_at": "2019-12-30T05:18:32Z"
    },
    {
      "author": "DenisBalan",
      "author_association": "NONE",
      "body": "Powershell Core installed as dotnet global tool.\r\nsame behaviour (***only under windows terminal***) on Compress-Archvie func, while asking for Path[0], press CTRL+C, no scoop installed.\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.4\r\nOS                             Microsoft Windows 10.0.19555\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n```\r\ncmdlet Compress-Archive at command pipeline position 1\r\nSupply values for the following parameters:\r\nPath[0]:\r\n[process exited with code 3221225786]\r\n```\r\n![image](https://user-images.githubusercontent.com/33955091/73589387-67048780-44de-11ea-86ba-886fb9a1af4b.png)\r\n",
      "created_at": "2020-02-01T08:36:05Z",
      "updated_at": "2020-02-01T08:36:05Z"
    },
    {
      "author": "DHowett-MSFT",
      "author_association": "NONE",
      "body": "Yes- this happens because Windows Terminal tracks the process that it has spawned, which in this case is the dotnet global tool wrapper. The wrapper is intercepting `^C` and terminating when it shouldn\u2019t.",
      "created_at": "2020-02-01T21:36:54Z",
      "updated_at": "2020-02-01T21:36:54Z"
    },
    {
      "author": "shanselman",
      "author_association": "NONE",
      "body": "@SteveL-MSFT This is interesting and we should figure this out. I means that anyone using PowerShell like this loses the whole process when pressing Ctrl-C\r\n\r\n@KathleenDollard for visibility. This makes PowerShell installed as a dotnet global tool not really usable.\r\n![image](https://user-images.githubusercontent.com/2892/74584220-b63dc400-4f84-11ea-9fea-a159b4ca3d4a.png)\r\n",
      "created_at": "2020-02-15T07:49:54Z",
      "updated_at": "2020-02-15T07:52:29Z"
    },
    {
      "author": "ssg",
      "author_association": "NONE",
      "body": "This happens so frequently, like whenever I want to stop the output of a long \"dir\" with Ctrl-C that I had to stop using Windows Terminal.",
      "created_at": "2020-02-19T06:51:19Z",
      "updated_at": "2020-02-19T06:51:19Z"
    },
    {
      "author": "shanselman",
      "author_association": "NONE",
      "body": "@ssg I am very sympathetic and I'll work to get it fixed, but a better solution would be to NOT use Pwsh as a .NET global Tool. Just install PowerShell Core and you won't have this issue and you can use Windows Terminal.",
      "created_at": "2020-02-19T17:26:39Z",
      "updated_at": "2020-02-19T17:26:39Z"
    },
    {
      "author": "inv2004",
      "author_association": "NONE",
      "body": "Please increase priority of the issue, I just moved from conemu, but the bug makes terminal+core near useless for work.",
      "created_at": "2020-02-20T23:03:47Z",
      "updated_at": "2020-02-20T23:03:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As noted, current mitigation is to install via the MSI or zip instead.",
      "created_at": "2020-02-20T23:17:42Z",
      "updated_at": "2020-02-20T23:17:42Z"
    },
    {
      "author": "inv2004",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nIt is clear about msi, thank you.\r\n\r\nCould you please clarify about zip, because I supposed that it is the same that scoop does.",
      "created_at": "2020-02-20T23:20:37Z",
      "updated_at": "2020-02-20T23:20:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@inv2004 we also publish a zip pkg for Windows.  You can just unzip and run the contained `pwsh` executable.  I don't use scoop myself, so can't comment on that.  The team is currently busy with the rc.3 release, so perhaps someone can look at it to understand the complexity of a fix after that.  Can't commit to be addressed by 7.0 GA, but we can service it with a 7.0.1 release once a fix is understood.",
      "created_at": "2020-02-20T23:27:06Z",
      "updated_at": "2020-02-20T23:27:06Z"
    },
    {
      "author": "ssg",
      "author_association": "NONE",
      "body": "@shanselman This workaround is great and it works, thanks! But the first hit on Google for downloading PowerShell Core still suggests dotnet global tool as the first option in the Tip box, and doesn't warn the user about implications, could it be revised at least?: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows\">Installing PowerShell Core on Windows - PowerShell</a></strong></div><div>Information about installing PowerShell Core on Windows</div></blockquote>",
      "created_at": "2020-02-20T23:36:02Z",
      "updated_at": "2020-02-20T23:36:04Z"
    },
    {
      "author": "shanselman",
      "author_association": "NONE",
      "body": "Personally, I agree @ssg that while PowerShell Core installed via a .NET Global Tool would be the ideal way to get PWSH on a machine, we shouldn't recommend it OR we should include a warning that it won't work with Windows Terminal for now. @sdwheeler @KathleenDollard",
      "created_at": "2020-02-21T01:16:25Z",
      "updated_at": "2020-02-21T01:16:25Z"
    },
    {
      "author": "brad-jones",
      "author_association": "NONE",
      "body": "> Unless Scoop is using the dotnet global tool wrapper shipped with PowerShell, this is likely an issue affecting all Scoop-shimmed console-subsystem binaries. It\u2019s almost certainly worth filing a duplicate of this issue on them so they can fix it for everyone.\r\n\r\nPretty simple fix in the end, just wasn't immediately obvious to me so here is what I did.\r\n\r\nJust edit Windows Terminal settings such that your using `pwsh.exe` directly and not using the scoop shim.\r\n\r\nOriginally I had:\r\n```json\r\n{\r\n    \"guid\": \"{b91d6aa8-b68c-416b-89b4-f29a2abebdcd}\",\r\n    \"name\": \"Windows PowerShell Core\",\r\n    \"commandline\": \"pwsh.exe\", // which resolves to C:\\Users\\brad.jones\\scoop\\shims\\pwsh.exe\r\n    \"hidden\": false,\r\n    \"fontSize\": 10,\r\n    \"padding\": \"1\",\r\n    \"icon\": \"C:\\\\Users\\\\brad.jones\\\\Pictures\\\\PowerShell_Core_6.0_icon.png\",\r\n    \"startingDirectory\": \"%USERPROFILE%\"\r\n}\r\n```\r\n\r\nUpdated to:\r\n```json\r\n{\r\n    \"guid\": \"{b91d6aa8-b68c-416b-89b4-f29a2abebdcd}\",\r\n    \"name\": \"Windows PowerShell Core\",\r\n    \"commandline\": \"C:\\\\Users\\\\brad.jones\\\\scoop\\\\apps\\\\powershell-core\\\\current\\\\pwsh.exe\",\r\n    \"hidden\": false,\r\n    \"fontSize\": 10,\r\n    \"padding\": \"1\",\r\n    \"icon\": \"C:\\\\Users\\\\brad.jones\\\\Pictures\\\\PowerShell_Core_6.0_icon.png\",\r\n    \"startingDirectory\": \"%USERPROFILE%\"\r\n}\r\n```",
      "created_at": "2020-02-27T21:52:44Z",
      "updated_at": "2020-02-27T21:52:44Z"
    },
    {
      "author": "inv2004",
      "author_association": "NONE",
      "body": "@brad-jones \r\nAwesome. So simple and I can confirm that it works perfect.\r\n\r\n```json\r\n            \"commandline\": \"%USERPROFILE%\\\\scoop\\\\apps\\\\pwsh\\\\current\\\\pwsh.exe\",\r\n```",
      "created_at": "2020-02-27T22:07:10Z",
      "updated_at": "2020-02-27T22:07:10Z"
    },
    {
      "author": "burzum",
      "author_association": "NONE",
      "body": "I agree with @ssg, the docs should mention that you need to use the msi package and not the dotnet tool installation. Searching for the cause of the problem finally brought me this issue here. I hope this is going to get fixed soon. Besides that: Nice job! The new terminal might replace cmdr for me. \ud83d\udc4d ",
      "created_at": "2020-03-02T14:24:41Z",
      "updated_at": "2020-03-02T14:24:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11959, which has now been successfully released as `v7.0.0`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0)\n",
      "created_at": "2020-03-04T17:00:30Z",
      "updated_at": "2020-03-04T17:00:30Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "I can confirm this is still a problem with PowerShell 7.0.0 on Windows 10 build 1909 with Windows Terminal 0.11.1251.0\r\n\r\n![image](https://user-images.githubusercontent.com/466713/81423590-8298b300-9109-11ea-8f08-6fd3b38ea1fc.png)\r\n\r\n![image](https://user-images.githubusercontent.com/466713/81423596-862c3a00-9109-11ea-9df7-6a6c20cb3b35.png)\r\n\r\n@SteveL-MSFT please re-open the ticket",
      "created_at": "2020-05-08T15:54:37Z",
      "updated_at": "2020-05-08T15:54:37Z"
    },
    {
      "author": "f0ff886f",
      "author_association": "NONE",
      "body": "Are you using scoop? If you're using scoop then you need to make sure you're not using the global shim for `pwsh.exe` and use `scoop/apps/pwsh/current/pwsh.exe` or replace your shim with the C-based alternative that doesn't come with showstopping problems like the one above, see https://github.com/lukesampson/scoop/issues/3634",
      "created_at": "2020-05-08T15:59:35Z",
      "updated_at": "2020-05-08T15:59:35Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "I installed PowerShell 7 with Scoop. Here is the default configuration in Windows Terminal. It's using `source` instead of `commandline`.\r\n\r\n```json\r\n            {\r\n                \"guid\": \"{574e775e-4f2a-5b96-ac1e-a2962a402336}\",\r\n                \"hidden\": false,\r\n                \"name\": \"PowerShell\",\r\n                \"source\": \"Windows.Terminal.PowershellCore\",\r\n\t\t\"colorScheme\": \"Galaxy\"\r\n            }\r\n```",
      "created_at": "2020-05-08T16:02:59Z",
      "updated_at": "2020-05-08T16:02:59Z"
    },
    {
      "author": "f0ff886f",
      "author_association": "NONE",
      "body": "Then replace your shims and it'll start working. it's a scoop issue, not a powershell issue.",
      "created_at": "2020-05-08T17:41:53Z",
      "updated_at": "2020-05-08T17:41:53Z"
    },
    {
      "author": "younger-1",
      "author_association": "NONE",
      "body": "> > Unless Scoop is using the dotnet global tool wrapper shipped with PowerShell, this is likely an issue affecting all Scoop-shimmed console-subsystem binaries. It\u2019s almost certainly worth filing a duplicate of this issue on them so they can fix it for everyone.\r\n> \r\n> Pretty simple fix in the end, just wasn't immediately obvious to me so here is what I did.\r\n> \r\n> Just edit Windows Terminal settings such that your using `pwsh.exe` directly and not using the scoop shim.\r\n> \r\n> Originally I had:\r\n> \r\n> ```json\r\n> {\r\n>     \"guid\": \"{b91d6aa8-b68c-416b-89b4-f29a2abebdcd}\",\r\n>     \"name\": \"Windows PowerShell Core\",\r\n>     \"commandline\": \"pwsh.exe\", // which resolves to C:\\Users\\brad.jones\\scoop\\shims\\pwsh.exe\r\n>     \"hidden\": false,\r\n>     \"fontSize\": 10,\r\n>     \"padding\": \"1\",\r\n>     \"icon\": \"C:\\\\Users\\\\brad.jones\\\\Pictures\\\\PowerShell_Core_6.0_icon.png\",\r\n>     \"startingDirectory\": \"%USERPROFILE%\"\r\n> }\r\n> ```\r\n> \r\n> Updated to:\r\n> \r\n> ```json\r\n> {\r\n>     \"guid\": \"{b91d6aa8-b68c-416b-89b4-f29a2abebdcd}\",\r\n>     \"name\": \"Windows PowerShell Core\",\r\n>     \"commandline\": \"C:\\\\Users\\\\brad.jones\\\\scoop\\\\apps\\\\powershell-core\\\\current\\\\pwsh.exe\",\r\n>     \"hidden\": false,\r\n>     \"fontSize\": 10,\r\n>     \"padding\": \"1\",\r\n>     \"icon\": \"C:\\\\Users\\\\brad.jones\\\\Pictures\\\\PowerShell_Core_6.0_icon.png\",\r\n>     \"startingDirectory\": \"%USERPROFILE%\"\r\n> }\r\n> ```\r\n\r\nAwesome workaround!\r\nFor me, may this is more concise~\r\n```\r\n\"commandline\": \"%SCOOP%/apps/pwsh/current/pwsh.exe\"\r\n```",
      "created_at": "2021-04-24T03:22:15Z",
      "updated_at": "2021-04-24T03:22:15Z"
    },
    {
      "author": "spyder007",
      "author_association": "NONE",
      "body": "For what it's worth, and for those who might not know the difference:\r\n\r\nWhen using chocolatey, installing the `powershell.portable` will give you the \"dotnet global\" behavior and will close when Ctrl-C is pressed on a long running task.\r\n\r\nInstall the `powershell-core` chocolatey package instead.",
      "created_at": "2021-08-11T13:40:08Z",
      "updated_at": "2021-08-11T13:40:08Z"
    }
  ],
  "created_at": "2019-12-10T21:10:57Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 11314,
  "state": "closed",
  "title": "pwsh as a dotnet global tool exhibits very unusual behavior with Ctrl-C",
  "updated_at": "2021-08-11T13:40:08Z"
}