{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7928",
  "author": "p0W3RH311",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS C:\\> $a = 0..10\r\nPS C:\\> # Negative indexing\r\nPS C:\\> $a[-1]\r\n10\r\nPS C:\\> $a[-3]\r\n8\r\nPS C:\\> # List slices (a[start..end])\r\nPS C:\\> $a[2..8]\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\nPS C:\\>  # List slices with negative indexing\r\nPS C:\\> $a[-4..-2]\r\n7\r\n8\r\n9\r\nPS C:\\> # List slices with step (a[start..end:step])\r\nPS C:\\> $a[2..8:2] # 2 step\r\nPS C:\\> # 2 4 6 8\r\nPS C:\\>\r\nPS C:\\> # List slices with negative step (2 step)\r\nPS C:\\> $a[0..10:-2]\r\nPS C:\\> # 10 8 6 4 2 0\r\nPS C:\\>\r\n```\r\n\r\none useful example with this: check palindrome\r\n```powershell\r\n\r\n$s = 'hello world'\r\n$s[0..$s.length:-1] -eq $s\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@p0W3RH311 I'm a bit confused. I _think_ what you're asking for is actually just a step option on ranges correct? Or is there something wrong with slices that you want changed/fixed? And your palindrome example should be\r\n```powershell\r\n-join $s[($s.length-1)..0] -eq $s\r\n```\r\n(You need the `-join` because slices on strings returns character arrays. The unary `-join` glues the characters back into a string.)",
      "created_at": "2018-10-03T03:20:00Z",
      "updated_at": "2018-10-03T03:20:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In some other languages this is done with a slightly different syntax: `0..2..$n` which might perhaps be more intuitive. That said, I'd imagine there are more changes that would be necessary to make that a working solution.",
      "created_at": "2018-10-03T10:55:54Z",
      "updated_at": "2018-10-03T10:55:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@p0W3RH311: Since all but the last 2 commands in your code relate to the _new_ functionality you're looking for (stepping), can I suggest you remove the others, which simply demonstrate _current_ behavior (or at least make the distinction clear)?\r\n\r\nStepping sounds like  a handy feature to have, but note that it would have to be implemented on the _range operator_ (`..`), given that there's no special array-subscript syntax in PowerShell.\r\n\r\nIf that is feasible, however, the up-side is that stepping then becomes available even outside the context of array slicing.\r\n\r\nThere are other slicing improvements I think would be great, but they indeed would require special handling inside an array index - see #7940\r\n",
      "created_at": "2018-10-03T17:45:55Z",
      "updated_at": "2018-10-03T17:45:55Z"
    },
    {
      "author": "mayursss",
      "author_association": "NONE",
      "body": "``` ps1\r\nPS C:\\> # List slices with step (a[start..end:step])\r\nPS C:\\> $a[2..8:2] # 2 step\r\nPS C:\\> # 2 4 6 8\r\nPS C:\\>\r\nPS C:\\> # List slices with negative step (2 step)\r\nPS C:\\> $a[0..10:-2]\r\nPS C:\\> # 10 8 6 4 2 0\r\nPS C:\\>\r\n```\r\nI use below to do same. I agree it will be easier if we get option to splice array with steps.\r\n``` ps1\r\n$a = (0..10)\r\n$a[2..8] | foreach { if($_ % 2 -eq 0) {$_}}\r\n$a[-1..-9] | foreach { if($_ % 2 -eq 0) {$_}}\r\n```",
      "created_at": "2018-10-04T10:13:04Z",
      "updated_at": "2018-10-04T10:13:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Don't have time to find the official C# 8 docs but this blog post docs the new \"range\" operator in C#.  Is there anything here that PS could borrow?  https://neelbhatt.com/2018/05/26/c-8-0-expected-features-part-iv-something-new-for-indexes-and-ranges/",
      "created_at": "2018-10-05T16:56:36Z",
      "updated_at": "2018-10-05T16:56:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @rkeithhill - I had no idea this was coming. It looks like _stepping_, as requested by this issue, is not part of what's coming to C# 8, so the discussion is more relevant to #7940 - I suggest we continue the discussion there.",
      "created_at": "2018-10-05T21:08:04Z",
      "updated_at": "2018-10-05T21:08:04Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay Is there anything that prevents us form using the C#8 syntax?\r\n\r\nSo that the range operator, within the context of a collection indexing operation, gets hat-support :)\r\n",
      "created_at": "2019-01-13T21:45:12Z",
      "updated_at": "2019-01-13T21:45:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I see no reason why the hat/caret character couldn't be used to denote an index token... And the range operator could then have overloads that take index types, and give out the c# style of indexing object.",
      "created_at": "2019-01-13T21:47:27Z",
      "updated_at": "2019-01-13T21:47:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good points, but can I suggest we limit _this_ issue to the _stepping_ proposal and continue the _range_ discussion in #7940, which already has more detail, notably in https://github.com/PowerShell/PowerShell/issues/7940#issuecomment-427503911?",
      "created_at": "2019-01-14T12:48:10Z",
      "updated_at": "2019-01-14T12:48:10Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@p0W3RH311 C# doesn't appear to do stepping (at least not yet). Also remember that ranges are not just used for slices e.g.\r\n```powershell\r\nforeach ($i in 1..10) { $i }\r\n1..10 | foreach { $_ * 2 }\r\n$x = 1..5; $myArray[$x]\r\n```\r\netc. so restricting the hat operator to slices would be a little weird. And `^` as a prefix operator is somewhat problematic since you can have a function named `^` (I did for years). Finally PowerShell already does most of what C# will do but with some strange idiosyncrasies, so I suspect that adding the hat operator now would just add to the confusion. \r\n\r\nGetting back to stepping, my thought had been to simply do, as @vexx32 suggests, `1..10..2`. (Another planned but unimplemented feature from V1 time frame. )\r\n",
      "created_at": "2019-01-14T22:40:35Z",
      "updated_at": "2019-01-14T22:40:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay regarding use of hat operator and slicing from arrays, my inclination would be to do as c# does and simply adopt it's Index and Range data types. \r\n\r\nA `^5` would be an index value owing to the hat operator. A `4..^2` is a true Range type for the same reason, the 4 being implicitly converted to an index type.\r\n\r\nIf we want to allow more versatile uses of Index type items, we could use `5^` for 'from-start' indexes and `^5` for 'from-end' indexes. This would be largely unnecessary, though, as regular integers should be able to be converted to an index value pretty easily as a from-start value in any context where it is needed.",
      "created_at": "2019-01-14T23:40:01Z",
      "updated_at": "2019-01-14T23:44:24Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 If PowerShell didn't have ranges, then I might agree. If we were starting from scratch I might agree. But PowerShell already has ranges with defined semantics which are not the same as the upcoming semantics for C#. Replacing the _existing_ range behaviour would certainly be a BIG breaking change. Trying to retrofit/merge the new C# semantics into PowerShell would make ranges much more complicated and confusing.",
      "created_at": "2019-01-15T20:51:59Z",
      "updated_at": "2019-01-15T20:51:59Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Should we have new syntax for slices? My eyes bleed everytime I write `$array[2..($array.Length - 2)]`.",
      "created_at": "2019-01-16T15:14:07Z",
      "updated_at": "2019-01-16T15:14:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode:\r\n\r\nIndeed we should - and the discussion of their specifics is well underway in #7940 (the only thing not covered there is _stepping_, hence my previous suggestion to limit discussion _here_ to stepping - though perhaps we should merge the two discussions).\r\n\r\nDid I mention #7940?\r\n\r\nBefore I forget: please check out #7940.\r\n\r\nP.S.: #7940 is worth a look.\r\n\r\nP.P.S.: I think #7940 is devoted to that very topic.\r\n\r\n\r\n",
      "created_at": "2019-01-16T15:31:01Z",
      "updated_at": "2019-01-16T15:31:01Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \ud83d\ude0a",
      "created_at": "2019-01-16T17:55:01Z",
      "updated_at": "2019-01-16T17:55:01Z"
    }
  ],
  "created_at": "2018-10-03T00:23:12Z",
  "labels": [
    "Issue-Question",
    "WG-Language"
  ],
  "number": 7928,
  "state": "open",
  "title": "add List slices with step",
  "updated_at": "2019-01-16T17:55:01Z"
}