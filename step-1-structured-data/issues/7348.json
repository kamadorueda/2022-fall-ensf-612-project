{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7348",
  "author": "powercode",
  "body": "A lot of tooling (performance/debugging) are helped by debug symbols.\r\n\r\nCan we publish these, preferably on the microsoft public symbol server, or, worst case as a downloadable symbol package?\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For GA builds, we should see about minimally providing a downloadable symbol package (needed for non-Windows anyways) and also see about publishing to Msft symsrv.",
      "created_at": "2018-07-24T17:08:21Z",
      "updated_at": "2018-07-24T17:08:21Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've been looking into this and there are a couple of things:\r\n- Because we crossgen PowerShell, PDBs would only be available on Windows with a normal release (see https://github.com/dotnet/coreclr/pull/4572 and https://github.com/dotnet/coreclr/issues/3131)\r\n- We're currently not generating those PDBs and aren't quite set up to publish them. So it would take a little bit of work to do that.\r\n- Either way, the only way to support debugging on Linux is to release a whole new Debug build, which would be considerably more work.\r\n\r\nSo it may be possible for us to generate and publish PDBs on Windows only, but two counter points are:\r\n- Debugging support wouldn't be cross platform\r\n- Being open source, it's relatively straightforward to get a Debug build the old fashioned way\r\n\r\n@powercode I'm guessing the main reason for wanting PDBs of published releases is to do performance analysis on optimised (i.e. crossgenned) builds?",
      "created_at": "2018-08-06T23:27:43Z",
      "updated_at": "2018-08-06T23:27:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt If customers use PowerShell Core SDK they can analize _their_ applications and they need to see PowerShell Core symbols too.\r\n\r\nI expect that most of the applications will be cross-platform so it is ok to get only Windows PDBs.",
      "created_at": "2018-08-07T05:06:15Z",
      "updated_at": "2018-08-07T05:09:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The SDK PDBs may be a different ask, since the SDK is built differently. I'm following up with @adityapatwardhan.",
      "created_at": "2018-08-07T17:18:45Z",
      "updated_at": "2018-08-07T17:18:45Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Just found a relevant comment in the source (and documenting it here):\r\nhttps://github.com/PowerShell/PowerShell/blob/f858e6d2073c71a85e1a5e830c39a589bf88f3ad/build.psm1#L2246-L2252",
      "created_at": "2018-08-07T19:51:55Z",
      "updated_at": "2018-08-07T19:51:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Given the work needed and limited value due to current constraints, I'm moving this to `future`.",
      "created_at": "2018-08-07T22:34:08Z",
      "updated_at": "2018-08-07T22:34:08Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Just to document what I've discovered so far:\r\n\r\n- `crossgen.exe` needs to be run twice:\r\n    + once to generate the NGEN binaries\r\n    + once *on the NGEN binaries* to generate the PDB files\r\n- To do this, it should be a simple matter of uncommenting the comment I linked above and wrapping it with `if ($Environment.IsWindows) { }`.\r\n- However, I'm currently hitting an issue where `crossgen.exe` doesn't like `Microsoft.CodeAnalysis.CSharp.ni.dll`:\r\n    ```\r\n    Error generating PDB for 'Microsoft.CodeAnalysis.CSharp.ni.dll': The system cannot find the file specified. (Exception from HRESULT: 0x80070002)\r\n    Error: file \"Microsoft.CodeAnalysis.CSharp.ni.dll\" or one of its dependencies was not found\r\n    ```\r\n- I've verified that `Microsoft.CodeAnalysis.CSharp.ni.dll`, `Microsoft.CodeAnalysis.CSharp.dll` and `Microsoft.CodeAnalysis.dll` are all present in `$platformAssembliesPath`.\r\n- Note that `/MissingDependenciesOK` [cannot be used with `/CreatePDB`](https://github.com/dotnet/coreclr/blob/fde763073fcce978141bf0b31e4479df507acfb8/src/tools/crossgen/crossgen.cpp#L751-L755) in the second `crossgen.exe` call. Adding or removing it in the first call doesn't seem to make any difference.'\r\n\r\nBut debug symbols should all work without the crossgenned PDBs -- the crossgen PDBs are just going to be needed for performance analysis on Windows.",
      "created_at": "2018-08-07T22:47:37Z",
      "updated_at": "2018-08-07T22:50:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder how PerfView get crossgened PDBs on the fly.",
      "created_at": "2018-08-08T03:42:17Z",
      "updated_at": "2018-08-08T03:42:17Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt My use case is to be able to ask users to capture traces with WPR/XPerf and be able to analyze the captured traces.\r\n\r\nI have no problem doing profiling on my one box with my own build, but there are many scenarios where that isn't practical.\r\n",
      "created_at": "2018-08-08T08:49:41Z",
      "updated_at": "2018-08-08T08:49:41Z"
    }
  ],
  "created_at": "2018-07-24T11:58:37Z",
  "labels": [
    "Area-Maintainers-Build"
  ],
  "number": 7348,
  "state": "open",
  "title": "Make pdbs available for released builds",
  "updated_at": "2018-08-08T08:49:41Z"
}