{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9461",
  "author": "sba923",
  "body": "# Steps to reproduce\r\n\r\n```\r\nGet-ChildItem -Recurse $env:OneDrive\r\n```\r\n\r\nwith PowerShell Core 6.2.0 outputs the same results as:\r\n\r\n```\r\nGet-ChildItem $env:OneDrive\r\n```\r\n\r\nIn other words, the subfolders are not recursed into.\r\n\r\nThis can be verified easily with:\r\n\r\n````\r\nPS C:/Users/steph> (Get-ChildItem $env:OneDrive).Count\r\n174\r\nPS C:/Users/steph> (Get-ChildItem -Recurse $env:OneDrive).Count\r\n174\r\n````\r\n\r\n\r\nThis works properly with Windows PowerShell 5.1:\r\n\r\n````\r\nPS C:/Users/steph> (Get-ChildItem $env:OneDrive).Count\r\n174\r\nPS C:/Users/steph> (Get-ChildItem -Recurse $env:OneDrive).Count\r\n158122\r\n````\r\n\r\n\r\n# Expected behavior\r\n\r\n```\r\nGet-ChildItem -Recurse $env:OneDrive\r\n```\r\n\r\nshould enumerate all files and folders in the OneDrive sync tree.\r\n\r\n# Actual behavior\r\n\r\n```\r\nGet-ChildItem -Recurse $env:OneDrive\r\n```\r\n\r\nenumerates only the files and folders at the root of the OneDrive sync tree.\r\n\r\n# Environment data\r\n\r\n```\r\nPS C:/Users/steph> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:/Users/steph> (gi \"C:\\Users\\steph\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\").VersionInfo\r\n\r\nProductVersion   FileVersion      FileName\r\n--------------   -----------      --------\r\n19.043.0304.0007 19.043.0304.0007 C:\\Users\\steph\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\r\n```\r\n\r\nOS Version: 10.0.17763.437",
  "closed_at": "2019-05-07T00:28:01Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #9246",
      "created_at": "2019-04-26T06:24:10Z",
      "updated_at": "2019-04-26T06:24:10Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Hope this is not a side effect of #8745... I'll build a 6.2.0 without that change and see what I get.",
      "created_at": "2019-04-26T07:42:54Z",
      "updated_at": "2019-04-26T07:42:54Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I hate to say, but commenting out the one line that's the core of #8745:\r\n\r\n````\r\nNativeMethods.RtlSetProcessPlaceholderCompatibilityMode(NativeMethods.PHCM_EXPOSE_PLACEHOLDERS);\r\n````\r\n\r\n**does** \"repair\" `Get-ChildItem -Recurse $env:OneDrive`.\r\n\r\nNow I have to investigate why exposing the placeholders breaks `Get-ChildItem -Recurse`.",
      "created_at": "2019-04-27T06:29:33Z",
      "updated_at": "2019-04-27T06:29:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference #8315\r\n\r\n/cc @SteveL-MSFT for information. Perhaps we need help from Windows file system team to review the code.",
      "created_at": "2019-04-27T09:05:40Z",
      "updated_at": "2019-04-27T09:09:30Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Haven't checked the code yet, but it could be that PowerShell Core doesn't recurse into directories **that are reparse points**.\r\n\r\nHere's what I get with Windows PowerShell:\r\n\r\n````\r\nPS C:/Users/steph> gci -rec $env:onedrive | ? { $_.fullname -match 'somedir' } | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n\r\nFullName                                                   Attributes HexAttributes\r\n--------                                                   ---------- -------------\r\nC:\\Users\\steph\\OneDrive\\somedir               Directory, ReparsePoint 0x00000410\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile1.txt                 4199968 0x00401620\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile2.txt                 4199968 0x00401620\r\n````\r\n\r\nThe same thing in PowerShell Core 6.2.0 yields:\r\n\r\n````\r\nPS C:/Users/steph> gci -rec $env:onedrive | ? { $_.fullname -match 'somedir' } | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n\r\nFullName                                     Attributes HexAttributes\r\n--------                                     ---------- -------------\r\nC:\\Users\\steph\\OneDrive\\somedir Directory, ReparsePoint 0x00000410\r\n````\r\n\r\nWhereas my private build of PowerShell Core 6.2.0 with the aforementioned line commented out yields:\r\n\r\n````\r\nPS netcoreapp2.1/win7-x64/publish> gci -rec $env:onedrive | ? { $_.fullname -match 'somedir' } | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n\r\nFullName                                      Attributes HexAttributes\r\n--------                                      ---------- -------------\r\nC:\\Users\\steph\\OneDrive\\somedir                Directory 0x00000010\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile1.txt    4194336 0x00400020\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile2.txt    4194336 0x00400020\r\n````\r\n\r\nTo be continued...\r\n",
      "created_at": "2019-04-28T11:20:37Z",
      "updated_at": "2019-04-28T11:20:37Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "After checking that .NET Core's `EnumerateDirectories()` behaves the same as .NET Framework's, I think I've found the culprit.\r\n\r\n`System.Management.Automation\\namespaces\\FileSystemProvider.cs` contains the following logic for recursing into subdirectories:\r\n\r\n````\r\n                            // if \"Hidden\" is explicitly specified anywhere in the attribute filter, then override\r\n                            // default hidden attribute filter.\r\n                            if (Force || !hidden || isFilterHiddenSpecified || isSwitchFilterHiddenSpecified)\r\n                            {\r\n                                // We only want to recurse into symlinks if\r\n                                //  a) the user has asked to with the -FollowSymLinks switch parameter and\r\n                                //  b) the directory pointed to by the symlink has not already been visited,\r\n                                //     preventing symlink loops.\r\n                                if (tracker == null)\r\n                                {\r\n                                    if (InternalSymbolicLinkLinkCodeMethods.IsReparsePoint(recursiveDirectory))\r\n                                    {\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                                else if (!tracker.TryVisitPath(recursiveDirectory.FullName))\r\n                                {\r\n                                    WriteWarning(StringUtil.Format(FileSystemProviderStrings.AlreadyListedDirectory,\r\n                                                                   recursiveDirectory.FullName));\r\n                                    continue;\r\n                                }\r\n\r\n                                Dir(recursiveDirectory, recurse, depth - 1, nameOnly, returnContainers, tracker);\r\n                            }\r\n````\r\n\r\nIf I understand correctly, this means that, while Windows PowerShell seems to follow directory symbolic links (reparse points), PowerShell Core doesn't unless you specify `-FollowSymlink`. \r\n\r\nThis hypothesis is corroborated by what I get in PowerShell Core 6.2.0 when adding `-FollowSymlink`:\r\n\r\n````\r\nPS C:/Users/steph> gci -rec -FollowSymlink $env:onedrive | ? { $_.fullname -match 'somedir' } | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n\r\nFullName                                                   Attributes HexAttributes\r\n--------                                                   ---------- -------------\r\nC:\\Users\\steph\\OneDrive\\somedir               Directory, ReparsePoint 0x00000410\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile1.txt                 4199968 0x00401620\r\nC:\\Users\\steph\\OneDrive\\somedir\\somefile2.txt                 4199968 0x00401620\r\n````\r\n\r\nWhere do we go from here? Close this issue as \"by design\", and document that PowerShell Core has a known incompatibility with / behavior change from Windows PowerShell 5.1?\r\n",
      "created_at": "2019-04-28T18:43:58Z",
      "updated_at": "2019-04-28T18:43:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I think this one's a fairly clear \"by design\". It should already be documented, but users of OneDrive mightn't often be aware that it makes such use of symlinks.",
      "created_at": "2019-04-28T19:08:20Z",
      "updated_at": "2019-04-28T19:08:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It come from #4020",
      "created_at": "2019-04-29T06:16:54Z",
      "updated_at": "2019-04-29T06:16:54Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, that's linked to that improvement to `Get-ChildItem` which results in \"nicer\" behavior with symlinks over Windows PowerShell.\r\n\r\nTake the following structure with an intentional loop:\r\n\r\n- `c:\\tmp\\somedir_on_c\\symlink_to_d` is a true directory symlink to `d:\\tmp\\somedir_on_d`\r\n- `d:\\tmp\\somedir_on_d\\symlink_to_c` is a true directory symlink to `c:\\tmp\\somedir_on_c`\r\n\r\nIn Windows PowerShell, here's what you get with `Get-ChildItem -Recurse C:\\tmp\\somedir_on_c\\`:\r\n\r\n````\r\n    Directory: C:\\tmp\\somedir_on_c\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:58                real_subdir\r\nd----l       2019-04-29     08:58                symlink_to_d\r\n-a----       2019-04-29     08:58             80 file1.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\real_subdir\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:58             80 file2.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:59                real_subfolder\r\nd----l       2019-04-29     09:00                symlink_to_c\r\n-a----       2019-04-29     08:59             80 file3.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\real_subfolder\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:59             80 file4.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:58                real_subdir\r\nd----l       2019-04-29     08:58                symlink_to_d\r\n-a----       2019-04-29     08:58             80 file1.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\real_subdir\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:58             80 file2.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:59                real_subfolder\r\nd----l       2019-04-29     09:00                symlink_to_c\r\n-a----       2019-04-29     08:59             80 file3.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\real_subfolder\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:59             80 file4.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:58                real_subdir\r\nd----l       2019-04-29     08:58                symlink_to_d\r\n-a----       2019-04-29     08:58             80 file1.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\real_subdir\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:58             80 file2.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:59                real_subfolder\r\nd----l       2019-04-29     09:00                symlink_to_c\r\n-a----       2019-04-29     08:59             80 file3.txt\r\n\r\n[\u2026]\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlin\r\n    k_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       2019-04-29     08:59                real_subfolder\r\nd----l       2019-04-29     09:00                symlink_to_c\r\n-a----       2019-04-29     08:59             80 file3.txt\r\n\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlin\r\n    k_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\symlink_to_c\\symlink_to_d\\real_subfolder\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-04-29     08:59             80 file4.txt\r\nGet-ChildItem : The name of the file cannot be resolved by the system.\r\n\r\nAt line:1 char:1\r\n+ Get-ChildItem -Recurse C:\\tmp\\somedir_on_c\\\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ReadError: (C:\\tmp\\somedir_..._d\\symlink_to_c:String) [Get-ChildItem], IOException\r\n    + FullyQualifiedErrorId : DirIOError,Microsoft.PowerShell.Commands.GetChildItemCommand\r\nGet-ChildItem : The name of the file cannot be resolved by the system.\r\n\r\nAt line:1 char:1\r\n+ Get-ChildItem -Recurse C:\\tmp\\somedir_on_c\\\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ReadError: (C:\\tmp\\somedir_..._d\\symlink_to_c:String) [Get-ChildItem], IOException\r\n    + FullyQualifiedErrorId : DirIOError,Microsoft.PowerShell.Commands.GetChildItemCommand\r\n````\r\n\r\nThanks to #4020, with PowerShell Core 6.2.0 you get:\r\n\r\n````\r\n    Directory: C:\\tmp\\somedir_on_c\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----        2019-04-29    08:58                real_subdir\r\nd----l        2019-04-29    08:58                symlink_to_d\r\n-a----        2019-04-29    08:58             80 file1.txt\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\real_subdir\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        2019-04-29    08:58             80 file2.txt\r\n````\r\n\r\nand if you add `-FollowSymlink` you get:\r\n\r\n````\r\n    Directory: C:\\tmp\\somedir_on_c\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----        2019-04-29    08:58                real_subdir\r\nd----l        2019-04-29    08:58                symlink_to_d\r\n-a----        2019-04-29    08:58             80 file1.txt\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\real_subdir\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        2019-04-29    08:58             80 file2.txt\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----        2019-04-29    08:59                real_subfolder\r\nd----l        2019-04-29    09:00                symlink_to_c\r\n-a----        2019-04-29    08:59             80 file3.txt\r\n\r\n    Directory: C:\\tmp\\somedir_on_c\\symlink_to_d\\real_subfolder\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        2019-04-29    08:59             80 file4.txt\r\nWARNING: Skip already-visited directory C:\\tmp\\somedir_on_c\\symlink_to_d\\symlink_to_c.\r\n````\r\n\r\nThe problem with OneDrive is that it uses reparse points in a way that's not identical to true directory symlinks, and as of now I haven't been able to find a way to distinguish them from code (especially for directories that have just been created by the OneDrive client, and for which the user has _never_ explicitly tagged them as `Free up space` or `Always keep on this device`--see the `old` folder in the example below), whereas File Explorer clearly _does_ makes the difference:\r\n\r\n````\r\nPS C:\\tmp\\somedir_on_c> Get-Item C:\\tmp\\somedir_on_c\\symlink_to_d\\ | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n>>\r\n\r\nFullName                                       Attributes HexAttributes\r\n--------                                       ---------- -------------\r\nC:\\tmp\\somedir_on_c\\symlink_to_d\\ Directory, ReparsePoint 0x00000410\r\n\r\n\r\nPS C:\\tmp\\somedir_on_c> Get-Item C:\\users\\steph\\onedrive\\somedir\\ | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n>>\r\n\r\nFullName                         Attributes HexAttributes\r\n--------                         ---------- -------------\r\nC:\\users\\steph\\onedrive\\somedir\\    1049616 0x00100410\r\n\r\n\r\nPS C:\\tmp\\somedir_on_c> Get-Item C:\\users\\steph\\onedrive\\old | Select FullName, Attributes, @{Name='HexAttributes'; Expression={(\"0x{0:x}\" -f $_.Attributes)}}\r\n>>\r\n\r\nFullName                                 Attributes HexAttributes\r\n--------                                 ---------- -------------\r\nC:\\users\\steph\\onedrive\\old Directory, ReparsePoint 0x00000410\r\n````\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881407-9b837880-6a60-11e9-84ea-118047f7059a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881420-a3431d00-6a60-11e9-9e2c-97646da8adae.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881448-bbb33780-6a60-11e9-90c8-f550f4aee6f9.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881464-c8379000-6a60-11e9-84c7-0669e16a3b0f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881504-e43b3180-6a60-11e9-9323-2e2ae10d08ca.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/56881517-ed2c0300-6a60-11e9-8d7b-70071423cf77.png)\r\n\r\nAt this point I have the following two interrogations:\r\n1. Where is the change of behavior of `Get-ChildItem -Recurse` between Windows PowerShell and PowerShell Core documented?\r\n2. Would there be a way to have PowerShell Core \"transparently\" work with the OneDrive sync folder like Windows PowerShell does? This would require determining whether a directory reparse point is a directory symlink or a OneDrive directory placeholder, and IMVHO only the devs who own the OneDrive \"Files on Demand\" sync architecture know how to do that...\r\n\r\n",
      "created_at": "2019-04-29T07:38:10Z",
      "updated_at": "2019-04-29T07:38:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. I think we had not documented issue for the old PR.\r\n2. I guess Windows has special attributes for OneDrive and the attributes was enhanced in Windows 10 that's why I'm ping @SteveL-MSFT to ask Windows file system team for help. We have some issue for OnDrive.",
      "created_at": "2019-04-29T08:40:26Z",
      "updated_at": "2019-04-29T08:40:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'll see if I can locate OneDrive owners to determine how to detect it is OneDrive.  \r\n\r\nAs for the change in behavior, it's already documented: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-6 (search for -FollowSymLink).  If you think additional text is needed, please open an issue in the PowerShellDocs repo.",
      "created_at": "2019-04-29T23:34:44Z",
      "updated_at": "2019-04-29T23:34:44Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: what's especially important to be able to understand is how to tell that a folder that's just been created by the OneDrive client's initial setup (placeholder creation) and that has the exact same attributes (0x00000410) as a true directory symlink is not a directory symlink! Thanks for the links to the documentation I'll check it out and suggest improvements if needed via the PowerShellDocs repo.\r\n\r\nBefore I started working on #8315 and #8745 I did quite some reverse engineering of the new attributes / new usage of existing attributes, see [this spreadsheet](https://1drv.ms/x/s!AjBPRo9wXw9s4t0Rqnbtg-9QHSNSwQ).",
      "created_at": "2019-04-30T07:52:39Z",
      "updated_at": "2019-04-30T07:52:39Z"
    }
  ],
  "created_at": "2019-04-25T07:36:00Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Fixed",
    "WG-Engine-Providers"
  ],
  "number": 9461,
  "state": "closed",
  "title": "Get-ChildItem -Recurse doesn't work on the OneDrive sync folder",
  "updated_at": "2019-05-07T03:42:23Z"
}