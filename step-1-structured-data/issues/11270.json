{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11270",
  "author": "mklement0",
  "body": "# PR Summary\r\n\r\nFix #4237\r\n\r\n## PR Context\r\n\r\nIn order to support older remoting clients, certain format data that requires v5.1+ is not returned from `Get-FormatData` by default (only if `-PowerShellVersion 5.1` is passed).\r\n\r\nIn _local_ invocations, this behavior is unexpected: all available format data should be returned.\r\n\r\nThis PR fixes that, both for direct local invocations and for invocations in background jobs.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---subfmission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5076\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-04-08T00:37:14Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 can you look at the test failures?",
      "created_at": "2019-12-06T17:34:19Z",
      "updated_at": "2019-12-06T17:34:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, I'll focus on fixing the fundamental problem first. A preliminary investigation showed that the problem was just one of _duplicates_ in the output, strangely; applying `Select-Object -Unique` before counting / comparing made the problem go away.\r\n\r\n",
      "created_at": "2019-12-06T22:06:02Z",
      "updated_at": "2019-12-06T22:06:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, looking into this further my conclusion is that this PR has simply unmasked _an unrelated problem that should be investigated separately_.\r\n\r\nFor now, I've restored the semantics of the original test by passing `-PowerShellVersion 5.0` to the `Get-FormatData` commands in the original tests, which makes them succeed.\r\n\r\nAs for what may be going on:\r\n\r\nThe current format-data definitions contain _duplicates_:\r\n\r\nSome types are covered _both_ by a dedicated definition (where `.TypeNames` references a _single_ type) _and_ by a _multi-type_ definition (where `.TypeNames` contains multiple type names).\r\n\r\n```powershell\r\n$dataWithMultipleTypes = Get-FormatData -PowerShellVersion 5.1 | Where { $_.TypeNames.Count -gt 1 }\r\n$dataWithSingleType = Get-FormatData -PowerShellVersion 5.1 | Where { $_.TypeNames.Count -eq 1 }\r\n\r\n# Find all single-type definitions also covered by multiple-type definitions.\r\n$dataWithSingleType | ? { foreach ($fd in $dataWithMultipleTypes) { if ($fd.TypeNames -contains $_) { return $true } } }\r\n```\r\n\r\nThis currently yields:\r\n\r\n```none\r\nTypeNames                                                        FormatViewDefinition\r\n---------                                                        --------------------\r\n{System.Security.Cryptography.X509Certificates.X509Certificate2} {ThumbprintTable}\r\n{System.Management.Automation.ApplicationInfo}                   {ApplicationInfo, System.Management.Automation.ApplicationInfo}\r\n{System.Management.Automation.ScriptInfo}                        {ScriptInfo, System.Management.Automation.ScriptInfo}\r\n{System.Management.Automation.ExternalScriptInfo}                {ExternalScriptInfo}\r\n{System.Management.Automation.FunctionInfo}                      {FunctionInfo}\r\n{System.Management.Automation.FilterInfo}                        {FilterInfo}\r\n{System.Management.Automation.AliasInfo}                         {AliasInfo, System.Management.Automation.AliasInfo}\r\n{System.Management.Automation.CmdletInfo}                        {System.Management.Automation.CmdletInfo}\r\n{System.Management.Automation.PSDriveInfo}                       {System.Management.Automation.PSDriveInfo}\r\n```\r\n\r\n* Is there a good reason for this duplication?\r\n* If so, what are the precedence rules, and is `Update-FormatData` expected to load the duplicates too?",
      "created_at": "2019-12-08T23:31:17Z",
      "updated_at": "2019-12-08T23:31:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 adding `| % { Get-FormatData -PowerShellVersion 5.1 -TypeName $_.TypeNames }` to your example, it seems that the duplication is for a base type and derived types.  So that seems to be fine.  As for ordering, with the exception of Out-of-Band types (like errors), it should go in order of the psobject.typenames list.",
      "created_at": "2019-12-09T17:51:38Z",
      "updated_at": "2019-12-09T17:51:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT \r\n\r\nThere is genuine duplication, with _dormant_ duplicates among the built-in formats - see #11307\r\n\r\nI suspect that this duplication ultimately causes the round-trip `Get-FormatData` test to fail with `-PowerShellVersion 5.1` (or this fix in place), but that's a separate issue - see #11308",
      "created_at": "2019-12-10T15:59:16Z",
      "updated_at": "2019-12-10T15:59:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, are there concerns around the public method added to `InternalTestHooks`? Apart from that, I think this is ready to be merged.",
      "created_at": "2019-12-11T22:12:21Z",
      "updated_at": "2019-12-11T22:12:21Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@mklement0 Please have a look at the merge conflicts",
      "created_at": "2020-01-03T18:35:24Z",
      "updated_at": "2020-01-03T18:35:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan, I've resolved the merge conflict.\r\n\r\nThe PowerShell-CI-static-analysis  failure seems like a transient one (\"SocketException: Network is unreachable\") - not sure how to restart the test.",
      "created_at": "2020-01-08T01:16:49Z",
      "updated_at": "2020-01-08T01:16:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry static",
      "created_at": "2020-01-08T02:31:51Z",
      "updated_at": "2020-01-08T02:31:51Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2020-01-08T02:32:39Z",
      "updated_at": "2020-01-08T02:32:39Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@mklement0 There seems to be another merge conflict. Please have a look.",
      "created_at": "2020-01-30T22:44:46Z",
      "updated_at": "2020-01-30T22:44:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan , I've resolved the (trivial) conflict in favor of preferring a whitespace after the unary form of the `,` operator (`, <operand>` rather than `,<operand>`), which looks cleaner to me (it's also what auto-formatting in VSCode does).",
      "created_at": "2020-01-31T03:35:19Z",
      "updated_at": "2020-01-31T03:35:19Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@mklement0 Thanks for your contribution!",
      "created_at": "2020-04-08T00:37:28Z",
      "updated_at": "2020-04-08T00:37:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:02:41Z",
      "updated_at": "2020-04-23T18:02:41Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\nPlease see the update I posted yesterday that still exists in PS 7.2.0 to an issue I previously reported about issues with Get-FormatData / Export-FormatData / Update-FormatData.\r\n\r\nHere's the link with a detailed example that is 100% reproducible with PS 7.2.0\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/9300\r\n\r\nA quick summary would be that:\r\n\r\nA roundtrip of format data using Get-FormatData / Export-FormatData / Update-FormatData results in broken output.\r\n\r\nThe 2 main issues are:\r\n\r\nWhen format data has a custom control it is not returned by Get-FormatData and therefore is lost on the roundtrip.\r\n\r\nWhen format data contains more than 1 TypeName, Get-FormatData seems to get both but ExportFormat data only exports the first 1 so additional types are lost in the roundtrip.\r\n\r\nThis can be seen in the PS source code\r\n\r\nPowerShell-7.2.0/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/FileSystem_format_ps1xml.cs\r\n\r\nwhere the custom control is created and shared between views and where a view has more than 1 TypeName.\r\n\r\nIt is frustrating to see these problems still exist in the latest PS when they have existed and reported so long ago.\r\n\r\nGet-FormatData / Export-FormatData / Update-FormatData are GREAT feaures but the *.format.ps1xml files should never have been removed until the replace actually was fully functional.\r\n\r\nFixing Export-FormatData to include all TypeNames seems like it should be a fairly easy fix since Get-FormatData appears to have them.\r\n\r\nFixing the CustomControl situation seems more complicated since it is shared.\r\n\r\nHere's a thought:\r\n\r\nDirectoryInfo / FileInfo objects have the PSParentPath note property which looks like this:\r\n\r\n    string PSParentPath=Microsoft.PowerShell.Core\\FileSystem::/home/joe\r\n\r\nAdd a new note property ParentPath\r\n\r\n    string ParentPath=/home/joe\r\n\r\nThen all of the places that are using the shared custom control for their GroupBy could just be changed to reference ParentPath and there would no longer be a need for the custom control!\r\n\r\n            <GroupBy>\r\n                <PropertyName>ParentPath</PropertyName>\r\n            </GroupBy>\r\n\r\nThis seems like a fairly easy change and by eliminating the shared custom control you remove the more difficult situation to fix.\r\n\r\nWhat do you think?\r\n\r\nJoe\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-11-12T15:28:45Z",
      "updated_at": "2021-11-12T15:28:45Z"
    }
  ],
  "created_at": "2019-12-05T16:52:27Z",
  "number": 11270,
  "state": "closed",
  "title": "In local invocations, do not require -PowerShellVersion 5.1 for Get-FormatData in order to see all format data.",
  "updated_at": "2021-11-12T15:28:45Z"
}