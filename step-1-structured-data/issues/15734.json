{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15734",
  "author": "plastikfan",
  "body": "### Summary of the new feature / enhancement\r\n\r\nEver since beginning to use PowerShell I have been plagued by the problem of square brackets appearing in file system paths. However, I have since learned to use an effective but incorrect workaround. Instead of using **-Path**, I have exclusively been using **-LiteralPath**, but this cuts me off from being able to use wildcards.\r\n\r\nIt appears to me that **-LiteralPath** was introduced to 'fix' this, but actually I now realise that this was not the correct fix to implement (unless there is some other issue of which I'm not currently aware). Instead of using **-LiteralPath**, I should instead have been using -Path but then escaping the returned paths using [[System.Management.Automation.WildcardPattern]::Escape](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.wildcardpattern.escape?view=powershellsdk-7.0.0),\r\n\r\neg\r\n\r\n```powershell\r\ngci | % { [System.Management.Automation.WildcardPattern]::Escape($_.FullName) }\r\n```\r\n\r\nThe next item in the pipeline (not shown), can now use the pipeline item with a -Path parameter. However, this is cumbersome and highlights to me that the LiteralPath solution was a misnomer.\r\n\r\nI know the LiteralPath can't be removed because of legacy reasons, but its presence has caused me to write a lot of incorrect code, which I should probably go back and update.\r\n\r\nEDIT: this was the original request but not was was intended, see my updated comment\r\n```\r\nInstead, why can't we have a third option that actually replaces the use of **Path**/**LiteralPath**, ___EscapedPath___ (they could be deprecated without being removed). This would mean the the user can retain the use of wildcards using a single parameter. I would like to see this parameter to be introduced to all those standard powershell commands that use **Path**/**LiteralPath**, including but not limited to:\r\n\r\n+ Rename-Item\r\n+ Move-Item\r\n+ Remove-Item\r\n+ Copy-Item\r\n\r\nParadoxically, **New-Item** does not use LiteralPath, so I'm not sure how it handles wilcard characters in file system paths.\r\n```\r\n\r\nOther commands like Get-ChildItem/Get-Item should be updated to return pre-escaped Paths.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Actually, I've realised that my request is not quite right. There is no need to introduce a new parameter **EscapedPath**. rather, we can abandon *LiteralPath* and any function that yields a path, should just return it already escaped, so that means that commands like **Get-ChildItem**/**Get-Item** would need to be changed and the other commands that I have mentioned would remain unchanged. Or you could introduce a new switch parameter to **Get-ChildItem**/**Get-Item** let's call it ___Escape___  which would invoke the escaping of paths. (Title changed to reflect this)\r\n",
      "created_at": "2021-07-07T10:49:41Z",
      "updated_at": "2021-07-07T10:55:16Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "There are a lot of use cases mixed in with paths and I think returning the wildcard escaped variant for the output here is wrong. I could be using the full path for many things unrelated to these cmdlet, e.g. calling a .NET function, writing the value to a file, etc. All these values don't understand the concept of wildcards and it would be wrong for them to contain them IMO. \r\n\r\nOne of the methods to avoid all this pain is to pipe the objects into each other, e.g.\r\n\r\n```powershell\r\n$item = Get-Item -LiteralPath 'C:\\temp\\[folder]'\r\n\r\n# Do stuff with $item\r\n\r\n$item | Remove-Item\r\n```\r\n\r\nThis works because the `-LiteralPath` accept input by property name and it has an alias `PSPath` that matches to the `PSPath` outputted by `Get-Item`. This means that it's essentially the same as doing `Remove-Item -LiteralPath $item.PSPath`.\r\n\r\n> Paradoxically, **New-Item** does not use LiteralPath, so I'm not sure how it handles wilcard characters in file system paths.\r\n\r\nIt's simple, `New-Item` creates something and thus doesn't have a concept of wildcards at all. Wildcards are only useful when you are trying to interact with existing objects",
      "created_at": "2021-07-07T20:24:54Z",
      "updated_at": "2021-07-07T20:24:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess we could add an flag in source cmdlet if an object comes from file system (vs from user) so that cmdlet consumer can see if it really need to do globbing for Path parameter.\r\nWe could consider real Exists property of FileSystemInfo class if we don't get perf penalty.",
      "created_at": "2021-11-30T06:15:45Z",
      "updated_at": "2021-11-30T06:19:36Z"
    }
  ],
  "created_at": "2021-07-07T10:28:23Z",
  "number": 15734,
  "state": "open",
  "title": "Introduce 'Escape' parameter for commands that yield paths (eg Get-ChildItem)",
  "updated_at": "2021-11-30T06:19:36Z"
}