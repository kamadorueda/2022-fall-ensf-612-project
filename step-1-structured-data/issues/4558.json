{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4558",
  "author": "mklement0",
  "body": "<sup>Follow-up to #4545.</sup>\r\n\r\n* With _expressions_, simply _wrapping a script block in another script block_ changes the output behavior with respect to culture-sensitivity, at least with respect to passing a number literal to an unconstrained parameter.\r\n\r\n* With _commands_ - e.g., `Write-Host` and `Write-Output` a _single script block_ is enough.\r\n\r\n@lzybkr's [assessment of this problem](https://github.com/PowerShell/PowerShell/issues/4545#issuecomment-321656251):\r\n\r\n> I forget exact details, but the current culture is reset for reasons I never understood. I thought it was done in the host after each command line, but it looks like it's done more often than that.\r\n\r\nThis resetting isn't _categorical_: as the command below shows, the default output of a literal is still localized, and `[cultureinfo]::currentculture` still reports the specified culture.\r\n\r\nSo the questions is: In what way is the culture reset (if that's what's going on) and what are the implications?\r\n\r\n---\r\n\r\n### With _commands_ using cmdlets `Write-Host` and `Write-Output` and a single script block:\r\n\r\nSteps to reproduce\r\n-------------------\r\n\r\n```powershell\r\n# The only difference between the 2 commands is that the 2nd one is wrapped in an \r\n# script block.\r\n[cultureinfo]::CurrentCulture = 'de-DE';  [cultureinfo]::CurrentCulture.Name; Write-Host 1.2; Write-Output 1.2\r\n[cultureinfo]::CurrentCulture = 'de-DE';  & { [cultureinfo]::CurrentCulture.Name; Write-Host 1.2; Write-Output 1.2 }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n1,2\r\n1,2\r\nde-DE\r\n---\r\n1,2\r\n1,2\r\nde-DE\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nde-DE\r\n1,2\r\n1,2\r\n---\r\nde-DE\r\n1.2   # !! Due to calling a script block, the output of the unconstrained parameter value changed.\r\n1.2   # ditto\r\n```\r\n\r\nAs an aside: Moving the `[cultureinfo]::CurrentCulture = 'de-DE'` statement _into the script block_ would make the problem go away.\r\n\r\n---\r\n\r\n### With _expressions_ and _nested_ script blocks:\r\n\r\nWhile the nesting of the script blocks in the example command below is contrived, I actually ran into this problem in a real-world scenario:\r\nI'm using a function called `Use-Culture` (inspired by [this oldie-but-goodie blog post](https://rkeithhill.wordpress.com/2009/10/21/windows-powershell-2-0-string-localization/) by @rkeithhill) that accepts a script block to be executed in the context of a specified culture that is temporarily switched to, with invocations such as `Use-Culture de-DE { & { $Args[0]  } 1.2 }`, in which script blocks are nested.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# The only difference between the 2 commands is that the 2nd one is wrapped in an \r\n# extra script block.\r\n[cultureinfo]::CurrentCulture = 'de-DE'; & { $Args[0]; 1.2; [cultureinfo]::currentculture.Name } 1.2\r\n'---'\r\n[cultureinfo]::CurrentCulture = 'de-DE'; & { & { $Args[0]; 1.2; [cultureinfo]::currentculture.Name } 1.2 } \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n1,2\r\n1,2\r\nde-DE\r\n---\r\n1,2\r\n1,2\r\nde-DE\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n1,2\r\n1,2\r\nde-DE\r\n---\r\n1.2   # !! Due to the nested script block, the output of the unconstrained parameter value changed.\r\n1,2\r\nde-DE\r\n```\r\n\r\nNote that the fact that the non-nested invocation's unconstrained parameter value is output in culture-sensitive format - it uses `,` as the decimal mark - is actually a _bug_ - see #4557.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2017-08-11T20:35:08Z",
  "number": 4558,
  "state": "open",
  "title": "Use of script blocks can result in different output behavior with respect to culture-sensitivity",
  "updated_at": "2017-09-14T15:23:01Z"
}