{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3343",
  "author": "erwinwildenburg",
  "body": "This fixes #3311 \r\n\r\nAfter the nullcheck the PowerShell code executes sucessfully from .NET Core.",
  "closed_at": "2017-03-16T16:57:31Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "\r\nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\n_Thanks,\nMicrosoft Pull Request Bot_",
      "created_at": "2017-03-16T12:24:35Z",
      "updated_at": "2017-03-16T12:24:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@erwinwildenburg the type `Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase` should always be resolved, otherwise, it indicates incorrect setup of the powershell assembly load context.\r\n\r\nI left a comment in #3311 to explain what the target scenarios are for the APIs `SetPowerShellAssemblyLoadContext` and `InitializeAndCallEntryMethod` respectively. When building your application with .NET CLI, powershell assemblies are in the TPA list, and thus latter API should be used to bootstrap your application. I also attached an example application project in my comment, and hopefully, it can help you understand the pattern.\r\n\r\nI will also update our documentation to include the topic of host powershell core. It's an important scenario that we shouldn't have overlooked.",
      "created_at": "2017-03-16T16:57:31Z",
      "updated_at": "2017-03-16T16:57:31Z"
    }
  ],
  "created_at": "2017-03-16T12:24:31Z",
  "number": 3343,
  "state": "closed",
  "title": "Null check for securityDescriptorCommandsBaseType",
  "updated_at": "2017-03-16T16:57:31Z"
}