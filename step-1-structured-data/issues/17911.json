{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17911",
  "author": "Jaykul",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThis code now only executes correctly when there's a breakpoint on it.\r\n\r\n### Expected behavior\r\n\r\n```PowerShell\r\nfunction Test-Recursively {\r\n    [CmdletBinding()]param($InputObject)\r\n    if ($t -is [string] -and [string]::IsNullOrWhiteSpace($t)) {\r\n        $t += \"  \"\r\n    } else {\r\n        $t = \"  \"\r\n    }\r\n    $result = \"$t.`n\"\r\n\r\n    $null, $InputObject = $InputObject\r\n    if ($InputObject) {\r\n        $result += Test-Recursively $InputObject\r\n    }\r\n    $result\r\n}\r\n\r\nTest-Recursively 1,2,3\r\n```\r\n\r\nShould Output:\r\n\r\n```console\r\n  .\r\n    .\r\n      .\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nThe `if` block doesn't work as expected:\r\n\r\n```console\r\nTest-Recursively 1,2,3\r\n  .\r\n  .\r\n  .\r\n```\r\n\r\nIf I put the code in a file and set a breakpoint on line 4, it works again:\r\n\r\n```PowerShell\r\nSet-PSBreakpoint Repro.ps1 4 -Action {}\r\nTest-Recursively 1,2,3\r\n  .\r\n    .\r\n      .\r\n```\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.22622\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n![image](https://user-images.githubusercontent.com/192942/185032828-b5915c9e-4dff-4d1b-b8e2-acdf8bb227c8.png)\r\n",
  "closed_at": "2022-08-25T21:01:19Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Note that if I change line 4 from:\r\n```PowerShell\r\n        $t += \"  \"\r\n```\r\nTo:\r\n```PowerShell\r\n        $t = $t + \"  \"\r\n```\r\n\r\nThis problem goes away. \r\n\r\nIt seems like this has been a bug for a long time, but I just don't understand the conditions that cause \"+=\" to just completely stop doing it's thing.",
      "created_at": "2022-08-17T04:30:53Z",
      "updated_at": "2022-08-17T04:30:53Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I think I have seen this before but it needs someone with better search skills than me - search doesn't like being asked for issues containing += \r\n\r\n```\r\n$i = $i + 1 \r\n$i ++ \r\n$i += 1 \r\n```\r\nShould be the same.  \r\n\r\nThe first is `$local:i = $whatever:i + 1 ` \r\nThe last is  `$local:i = $local:i + 1`  and so fails \r\nI would expect the middle one to work like the last but it works like the first.\r\n\r\nWeirdly it is different if I run it in Windows Powershell normally, and `powershell -version 2 -noprofile` \r\n\r\n```\r\nPS>  $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.22000.832\r\n...\r\n\r\nPS>  function Test-Recursively {\r\n>>     param($InputObject)\r\n>>       Write-Verbose -Verbose \"t was $t\" ; $t += 1\r\n>>      Write-Verbose -Verbose $t\r\n>>      $null, $InputObject = $InputObject\r\n>>      if ($InputObject) { Test-Recursively $InputObject}\r\n>>      $t\r\n>>  }\r\n\r\nPS>  test-Recursively 1,2,3\r\nVERBOSE: t was\r\nVERBOSE: 1\r\nVERBOSE: t was 1\r\nVERBOSE: 1\r\nVERBOSE: t was 1\r\nVERBOSE: 1\r\n1\r\n1\r\n1\r\n\r\nPS>  powershell -version 2 -noprofile\r\nWindows PowerShell\r\nCopyright (C) 2009 Microsoft Corporation. All rights reserved.\r\n\r\nPS> function Test-Recursively {\r\n>>     param($InputObject)\r\n>>       Write-Verbose -Verbose \"t was $t\" ; $t += 1\r\n>>      Write-Verbose -Verbose $t\r\n>>      $null, $InputObject = $InputObject\r\n>>      if ($InputObject) { Test-Recursively $InputObject}\r\n>>      $t\r\n>>  }\r\n>>\r\n\r\nPS > test-Recursively 1,2,3\r\nVERBOSE: t was\r\nVERBOSE: 1\r\nVERBOSE: t was 1\r\nVERBOSE: 2\r\nVERBOSE: t was 2\r\nVERBOSE: 3\r\n3\r\n2\r\n1\r\n```\r\n\r\n",
      "created_at": "2022-08-17T13:17:47Z",
      "updated_at": "2022-08-17T13:17:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "We talked this over a bit over discord and it seems like this is a bug that has existed for a long time, but in this case was masked by Pester code coverage adding breakpoints.\r\n\r\nThe bug being that the code gen for `+=` statements assumes that the current value is also an optimized local.\r\n\r\nSo in the case of this scriptblock:\r\n\r\n```powershell\r\n$n += 1\r\n```\r\n\r\nThe optimized code gen will look like this:\r\n\r\n```csharp\r\nlocals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(PSVariableAssignmentBinder.Get())(\r\n    Fake.Dynamic<Func<CallSite, object, int, object>>(\r\n        PSBinaryOperationBinder.Get(ExpressionType.Add, ignoreCase: true, scalarCompare: false))(\r\n            locals.Item009,\r\n            1));\r\n```\r\n\r\nWhen it should look like this:\r\n\r\n```csharp\r\nlocals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(PSVariableAssignmentBinder.Get())(\r\n    Fake.Dynamic<Func<CallSite, object, int, object>>(\r\n        PSBinaryOperationBinder.Get(ExpressionType.Add, ignoreCase: true,scalarCompare: false))(\r\n             VariableOps.GetVariableValue(Fake.Const<VariablePath>(\"n\"), context, Fake.Const<VariableExpressionAst>(\"$n\"),\r\n             1));\r\n```\r\n\r\nThe workaround is to use `$n = $n + 1` or `$n++` instead which should be equivalent, but is not in this case due to this bug.\r\n\r\n---\r\n\r\nNote that this bug also exists in 5.1 (and possibly earlier). Opening up to the Engine WG to discuss as it would be a breaking change.",
      "created_at": "2022-08-17T14:32:14Z",
      "updated_at": "2022-08-17T14:32:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think the original issue is #11297 - backstory starts [here](https://github.com/PowerShell/PowerShell/issues/11297#issuecomment-564224819).",
      "created_at": "2022-08-18T13:38:42Z",
      "updated_at": "2022-08-18T13:38:42Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0  yes, that's the one I remember. (It took me multiple attempts to read what was being said properly)    \r\nThanks for finding it.        ",
      "created_at": "2022-08-18T15:07:04Z",
      "updated_at": "2022-08-18T15:07:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine discussed this and the related issue #11297 yesterday.\r\n\r\nWe agree that is is somewhat buggy and inconsistent behaviour that `$a += $b` does not behave the same as `$a = $a + $b` in some circumstances. However, given this was a change made in PowerShell v3 and has remained the same way in the years since, we do not think this level of a breaking change can be accepted. \r\n\r\nRather, we should look to update our documentation so that users are as aware as possible that this discrepancy exists and know the right ways to work around it when they need to do so.\r\n\r\n@sdwheeler I am unsure which document this information should go into, but we need to capture and possibly expand on the notes linked in #11297 - https://github.com/nightroman/PowerShellTraps/tree/main/Basic/Compound-assignment-operators.\r\n\r\nCurrently it seems as though the only place this is documented is the WMF v3 release notes, so we need to call this out in (I guess?) our operator documentation. I believe this affects all compound assignment operators (`+=`, `*=`, `-=`, and `/=`) as well.\r\n\r\nHowever, for these issues specifically we determined that there is not going to be an opportunity to change the behaviour, and that doing so is extremely non-trivial due to the nature of how and why the change was introduced. As such, we will be marking these issues as Won't Fix.\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/c296e9980cdddb00fd77033475cc362dfeaca238e2cd65b122ba06455fb038e6/nightroman/PowerShellTraps\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/nightroman/PowerShellTraps\">PowerShellTraps/Basic/Compound-assignment-operators at main \u00b7 nightroman/PowerShellTraps</a></strong></div><div>Collection of PowerShell traps and oddities. Contribute to nightroman/PowerShellTraps development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-08-23T20:05:40Z",
      "updated_at": "2022-08-23T20:08:34Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "This is documented in https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_assignment_operators\r\n\r\nPlease open a Docs issue and provide the information needed in the changes to docs.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_assignment_operators\">about Assignment Operators - PowerShell</a></strong></div><div>Describes how to use operators to assign values to variables.</div></blockquote>",
      "created_at": "2022-08-23T20:09:11Z",
      "updated_at": "2022-08-23T20:09:14Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 @sdwheeler \r\n\r\nCan we at least get a `Set-StrictMode` error `\"use $x = $x + 1 instead of $x += 1\"` when `$x` is in outer scope? It should be relatively easy to implement in all compound assignment operators.\r\n\r\n`Set-StrictMode` is such an awesome tool for helping users not to fall into known pitfalls without introduction breaking changes, we should use it more. ",
      "created_at": "2022-08-23T20:13:13Z",
      "updated_at": "2022-08-23T20:14:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Other folks would know better than I do on that, but I don't think there's a reliable way StrictMode could enforce that short of just preventing usage of `+=` and other compound operators completely, without introducing the potential for excessive slowdowns on parsing/running most scripts. Recursive scope lookups quickly get expensive, which is probably part of the reason that this optimisation was introduced in the first place.",
      "created_at": "2022-08-23T20:38:43Z",
      "updated_at": "2022-08-23T20:39:37Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I can look into it and try to create a PoC that could be measured. Just comparing the target variable scope to the current one sounds like it would work. ",
      "created_at": "2022-08-23T20:59:14Z",
      "updated_at": "2022-08-23T20:59:14Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, I did more testing and I think the proper resolution is to add new `Set-StrictMode` version to not allow compound assignment operate on non-existent variables. Since compound assignment have to retrieve the value anyway, it would see it does not exist and error out, without any performance impact. In the error, we could say that it does not use dynamic scope, so use long form instead if you want this behavior:\r\n\r\n```pwsh\r\n> function Test-Increment { $x++; $x }\r\n> function Test-Assign { $x = $x + 1; $x }\r\n> function Test-CompoundAssign { $x += 1; $x }\r\n> Set-StrictMode -Version 3.0\r\n> Test-Increment\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n> Test-Assign\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n> Test-CompoundAssign\r\n1\r\n```\r\n\r\nI can create a new issue with feature request for the `Set-StrictMode -Version 4.0`, and we can keep this one closed as won't fix to not introduce breaking behavior without opt-in.",
      "created_at": "2022-08-24T06:40:07Z",
      "updated_at": "2022-08-24T06:40:07Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Is the null-coalescing assignment operator `??=` considered a compound operator? For example, does it support dynamic scoping?\r\n\r\nEDIT: Nevermind. I tested it. It is the same - no dynamic scoping.",
      "created_at": "2022-08-24T14:29:01Z",
      "updated_at": "2022-08-24T14:36:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-25T21:01:18Z",
      "updated_at": "2022-08-25T21:01:18Z"
    }
  ],
  "created_at": "2022-08-17T04:09:38Z",
  "number": 17911,
  "state": "closed",
  "title": "Dynamic variable scope is broken for +=",
  "updated_at": "2022-08-25T21:01:19Z"
}