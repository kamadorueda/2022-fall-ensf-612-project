{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3112",
  "author": "SteveL-MSFT",
  "body": "The Unix way to specify proxy seems to be via HTTP_Proxy and HTTPS_Proxy env vars",
  "closed_at": "2020-07-16T11:47:10Z",
  "comments": [
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "The Windows way is to honour the system proxy in control panel -> internet options -> connections -> LAN settings.",
      "created_at": "2017-02-09T14:15:44Z",
      "updated_at": "2017-02-09T14:15:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The Windows way should already been honored by .Net on Windows",
      "created_at": "2017-02-09T17:39:08Z",
      "updated_at": "2017-02-09T17:39:08Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Shouldn't the *nix way be honored by .NET as well? ",
      "created_at": "2017-02-09T20:07:15Z",
      "updated_at": "2017-02-09T20:07:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello yes, looks like CoreFx supports whatever libcurl supports (https://github.com/dotnet/corefx/issues/11757) so we may just need to also document this",
      "created_at": "2017-02-09T20:12:07Z",
      "updated_at": "2017-02-09T20:12:07Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Invoke-RestMethod was not using my system proxy today (PS5, Win7) I had to use the -Proxy parameter.",
      "created_at": "2017-02-09T20:35:53Z",
      "updated_at": "2017-02-09T20:35:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As far as I can tell, the web cmdlets never used the system proxy on Windows so having them suddenly start using the system proxy would be a breaking change.  Need someone to do a bit more research on this so we don't have a breaking change.",
      "created_at": "2017-02-10T17:42:33Z",
      "updated_at": "2017-02-10T17:42:33Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "If you have a system proxy (or, more likely a .pac) then all your internet traffic is going through those rules anyway. That is, according to the .pac, it will use a proxy or not as appropriate. To be clear: when I say PowerShell should respect the proxy I don't mean it should use a fixed proxy host, it should respect how the system is configured to use, or not, a proxy. Used properly, I can't see how it would break things: anything you can't access by respecting the proxy, you can't access in Chrome, IE etc.",
      "created_at": "2017-02-10T18:17:04Z",
      "updated_at": "2017-02-10T18:17:04Z"
    },
    {
      "author": "tibmeister",
      "author_association": "NONE",
      "body": "Ran into a similar issue and ended up defining $env:HTTP_PROXY and $env:HTTPS_PROXY with the URL of http://<username>:<password>@<proxy>:<port>.  This seems to be a quick workaround, at least on my CentOS test box.",
      "created_at": "2017-02-16T04:59:07Z",
      "updated_at": "2017-02-16T04:59:07Z"
    },
    {
      "author": "jakara",
      "author_association": "NONE",
      "body": "as native curl and wget is coming to windows, I dont see the behavior of iwr will be changed at all:\r\ncurl an wget will honor the unix way, am I right?",
      "created_at": "2018-05-03T12:17:08Z",
      "updated_at": "2018-05-03T12:17:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@jakara I will consider possibly adding support for this in iwr and irm for the 6.2.0 release, it's a bit too late in the cycle for 6.1.0.\r\n\r\nIn the mean time this is a kind of work around that works cross platform:\r\n\r\n```powershell\r\n$PSDefaultParameterValues[\"invoke-webrequest:proxy\"] = $env:http_proxy\r\n```\r\n\r\nAdd that to your profile or in the initialization of your scripts.",
      "created_at": "2018-05-03T14:31:15Z",
      "updated_at": "2018-05-03T14:31:15Z"
    },
    {
      "author": "jakara",
      "author_association": "NONE",
      "body": "@markekraus that's great! ",
      "created_at": "2018-05-09T04:21:02Z",
      "updated_at": "2018-05-09T04:21:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to clarify, given that the variable names in this issue's title used mixed case: on Unix-like platforms, where case matters, these variables are [commonly _lowercase_ (`http_proxy`, `https_proxy`)](https://unix.stackexchange.com/a/212972/54804).",
      "created_at": "2018-10-16T19:49:25Z",
      "updated_at": "2018-10-16T19:49:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This was implemented in .Net 3+ in new HttpClient.",
      "created_at": "2020-07-16T11:47:10Z",
      "updated_at": "2020-07-16T11:47:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sdwheeler Was this already documented for the web cmdlets?",
      "created_at": "2020-07-16T11:48:38Z",
      "updated_at": "2020-07-16T11:48:38Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Yes, this is documented.",
      "created_at": "2020-07-16T16:35:08Z",
      "updated_at": "2020-07-16T16:35:08Z"
    }
  ],
  "created_at": "2017-02-08T05:11:23Z",
  "labels": [
    "Area-Maintainers-Documentation",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 3112,
  "state": "closed",
  "title": "Invoke-WebRequest and Invoke-RestMethod should honor HTTP_Proxy and HTTPS_proxy env vars",
  "updated_at": "2020-07-16T16:35:08Z"
}