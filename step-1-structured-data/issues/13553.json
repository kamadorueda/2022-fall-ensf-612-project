{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13553",
  "author": "Joe-Zer0",
  "body": "## Summary of the new feature/enhancement\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nIt would be nice for Out-File to create missing parent folders.  Possibly require the -Force flag for this to take effect.\r\n\r\nCurrently to safely output to a file in a different folder, it's safest to preface your command with a New-Item -Force command.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": "2020-09-08T19:43:26Z",
  "comments": [
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "Adding more detail.  To me this is what I would expect to happen with the -Force flag.  This could possible be classified as a bug, although I labeled it as an enhancement to be safe.\r\n\r\n## Current Behavior\r\n```\r\n\u276f tree\r\n+ C:\\temp\r\n\u276f 'example error' | Out-File 'logs/error-log.txt' -Force\r\nOut-File: Could not find a part of the path 'C:\\temp\\logs\\error-log.txt'.\r\n```\r\n\r\n## Desired Behavior\r\n```\r\n\u276f tree\r\n+ C:\\temp\r\n\u276f 'example error' | Out-File 'logs/error-log.txt' -Force\r\n\u276f tree\r\n+ C:\\temp\r\n  + logs\r\n    - error-log.txt\r\n\u276f cat .\\logs\\error-log.txt\r\nexample error\r\n```",
      "created_at": "2020-09-02T13:05:07Z",
      "updated_at": "2020-09-02T13:05:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While desired-state functionality is a wonderful thing, the problem is that (a) users have come to expect `-Force` to have a specific meaning with respect to `Out-File` (to override a read-only attribute on Windows) and (b) to overload a single flag with multiple, unrelated behaviors is problematic.\r\n\r\nIt's not as concise, but you can use `New-Item`'s `-Force` flag:\r\n\r\n```powershell\r\n'foo' | Out-File \"$(New-Item -Force -Type Directory logs)/error-log.txt\"\r\n````\r\n",
      "created_at": "2020-09-02T19:57:03Z",
      "updated_at": "2020-09-02T19:57:03Z"
    },
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "I can understand where overloading the functionality of the Force flag could be problematic.  I propose adding a new flag to achieve this functionality.  While the statement you provided above works, it hurts readability.  I feel like it's reasonable for the end user to expect that Out-File has the ability to create the file (and parent directories) that it's trying to write to.  I also feel like this would desired functionality by end users.  Of course this is just my opinion, but if others agree, I think this would be a valuable feature to add.",
      "created_at": "2020-09-02T20:54:26Z",
      "updated_at": "2020-09-02T20:54:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood, but at this point I suggest you close _this_ issue, and create a new one, using the \"Feature Request/Idea\" template, in which you can:\r\n\r\n* present the proposal along with suggesting a specific (switch) parameter name.\r\n\r\n* also consider how and which _additional_ file-creating cmdlets - notably `Set-Content`, which is the faster choice if the input objects already are strings - could be covered.\r\n\r\n",
      "created_at": "2020-09-02T21:21:28Z",
      "updated_at": "2020-09-02T21:21:28Z"
    },
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "This thread was created by selecting Feature Request/Idea.  My initial comment recommended the Force flag since it matches the functionality of New-Item. I'm not familiar enough with this repository to feel comfortable recommending anything more specific than the desire for Out-File to be capable of generating parent folders. I'm open to suggestions, and I'd happily create a new topic to propose that. ",
      "created_at": "2020-09-02T22:16:07Z",
      "updated_at": "2020-09-02T22:16:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry - I missed that you had indeed used the right template - it was @iSazonov who removed the `Issue-Enhancement` label and replaced with `Issue-Question` (which is the default for the _bug_ template).\r\n\r\nMy sense was that the `-Force` aspect of your suggestion - which I think we now agree was a dead end - created a _distraction_, so I proposed creating a new \"Feature Request/Idea\" post - which I still recommend: you can simply _mention_ the aspect of perhaps needing to cover additional cmdlets, soliciting input from others.\r\n",
      "created_at": "2020-09-02T22:23:32Z",
      "updated_at": "2020-09-02T22:23:32Z"
    },
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "Ok, thank you, I will try that. Do you have any suggestion what the flag should be named?  I'm not aware or anything with similar functionality to take cues from.",
      "created_at": "2020-09-02T22:35:36Z",
      "updated_at": "2020-09-02T22:35:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Joe-Zer0, good question re name for the switch (flag) - I don't think there is a precedent (except in `New-Item -Type Directory`, where the already ruled-out `-Force` serves that purpose) and I can't think of anything that strikes the right balance between concision and descriptiveness - something like `-CreateDirectoryOnDemand` feels clunky.\r\n\r\nPerhaps that's an indication that the functionality doesn't really belong there, which is my personal sense.\r\n\r\nBut I don't want to discourage you from creating a proposal - feel free to create it and see what others say.\r\n",
      "created_at": "2020-09-06T19:08:22Z",
      "updated_at": "2020-09-06T19:08:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`-Force` isn't required for `New-Item -Type Directory` (though it is if you're doing `-Type File` and targeting a file path that contains nonexistent directories).\r\n\r\nBut yeah, personally I'm kind of feeling this doesn't belong in `Out-File` itself.",
      "created_at": "2020-09-06T21:30:58Z",
      "updated_at": "2020-09-06T21:30:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": " @vexx32, `-Force`  _is_ required if you want _desired-state_ functionality, which is what this issue is about.\r\n\r\nThat is, if you want `New-Item -Type Directory` to either create the target directory _on demand_ (and return information about it) or return information about an _existing_ target directory at the specified path, `-Force` is required.\r\n\r\nHowever, you bring up a good point: with `New-Item -Type File` (`-Type File` being the default), creating the parent directory on demand _does_ work; thus, @Joe-Zer0's command could have been rewritten as:\r\n\r\n```powershell\r\n# Replace any existing logs/error-log.txt file\r\n#  *or* \r\n# create the /logs/ subdir. on demand an create the 'error-log.txt' file in it.\r\nNew-Item -Force 'logs/error-log.txt' -Value 'example error'\r\n```\r\n\r\n",
      "created_at": "2020-09-06T22:32:00Z",
      "updated_at": "2020-09-06T22:32:00Z"
    },
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "I was previously using \"if Test-Path\" prior to my output redirection.  Since this doesn't seem to be getting much traction, I decided to adapt some sample code that @mklement0 posted.  It's a bit cleaner that having extra if statements.  I also switched back to the redirection operator since I had no use for any Out-File flags.\r\n```\r\nrandom command > $(New-Item logs/error-log.txt -Force)\r\n```\r\nThis is a fairly clean method of redirecting output while ensuring the destination file exist.  Thanks for both of your help and feedback!",
      "created_at": "2020-09-08T19:43:25Z",
      "updated_at": "2020-09-08T19:43:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Joe-Zer0, that's a nice idiom, thanks for sharing.\r\n\r\nYou can even make it (ever so slightly) shorter by using `(...)` rather than `$(...)`.\r\nIn case you're curious about the difference and when to use which, see [this SO answer](https://stackoverflow.com/a/58248195/45375).\r\n",
      "created_at": "2020-09-08T19:54:22Z",
      "updated_at": "2020-09-08T19:54:22Z"
    },
    {
      "author": "Joe-Zer0",
      "author_association": "NONE",
      "body": "@mklement0 \r\nThanks for that SO link. I've recently been realizing I've been using $() more than I should. That helps me with understanding when it's actually necessary. ",
      "created_at": "2020-09-08T20:07:42Z",
      "updated_at": "2020-09-08T20:07:42Z"
    }
  ],
  "created_at": "2020-08-31T20:01:33Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 13553,
  "state": "closed",
  "title": "Out-File should create missing parent folders",
  "updated_at": "2020-09-09T03:43:05Z"
}