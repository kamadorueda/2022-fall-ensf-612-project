{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11860",
  "author": "techvslife",
  "body": "# Steps to reproduce\r\n```powershell\r\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") \r\n```\r\n# Expected behavior\r\n```\r\nreturn GAC = True (as Powershell 5 does):\r\nGAC    Version        Location\r\n---    -------        --------\r\nTrue  v4.0.30319     C:\\WINDOWS\\Microsoft.NET\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMO\\v4.0_15.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.Smo.dll \r\n```\r\n# Actual behavior\r\n```\r\nreturns GAC = False:\r\nGAC    Version        Location\r\n---    -------        --------\r\nFalse  v4.0.30319     C:\\WINDOWS\\Microsoft.NET\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMO\\v4.0_15.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.Smo.dll \r\n```\r\n# Environment data\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-02-21T00:00:33Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A couple of general points:\r\n\r\n* `LoadWithPartialName()` has been [declared _obsolete_](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadwithpartialname):\r\n\r\n> The overloads of the `Assembly.LoadWithPartialName` method are obsolete and have been retained for backward compatibility. The non-obsolete alternative is` Assembly.Load(String)`.\r\n\r\n* .NET Core no longer has a GAC (Global Assembly Cache).\r\n\r\nThe GAC applies to the .NET Framework (FullClr), and I generally wouldn't expect assemblies located there to be loadable from .NET Core (PowerShell Core) - unless they were explicitly compiled for cross-.NET-edition compatibility (against a .NET Standard version).\r\n\r\nWhat is the exact problem you're experiencing, and what do you _expect_ to happen?\r\n\r\n\r\n",
      "created_at": "2020-02-17T00:04:23Z",
      "updated_at": "2020-02-17T00:04:23Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "The error on that line prevents scripting of SQL Server objects in the rest of the script. The script functions fine in Powershell 5, but not at all in Powershell 7.  I appreciate that line is now deprecated, but I don't know how to rework it to make it compatible with Powershell 7--I'm lifting standard SQL Server scripting routines without familiarity with Powershell. Thanks.\r\n\r\nAs for as Assembly.LoadString(), that's not a functional substitute here--gives this error:\r\n\r\n>  Method invocation failed because [System.Reflection.Assembly] does not contain a method named 'LoadString'.",
      "created_at": "2020-02-19T04:14:07Z",
      "updated_at": "2020-02-19T04:20:43Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "fyi, here's a fuller excerpt of the code. \r\n```\r\n#NOTE: DOES NOT WORK WITH POWERSHELL 7, only with ps5.\r\n$server = \".\"\r\n$dbname = \"MyDbs\"\r\n$path = \"C:\\MyPath\\ScriptTextOutput\\\"\r\nfunction ScriptDbsIntoFolders([string]$server, [string]$dbname, [string] $path) {\r\n\r\n    # code from https://blogs.technet.microsoft.com/heyscriptingguy/2010/11/04/use-powershell-to-script-sql-database-objects/ by Aaron Nelson\r\n    # modified to add the path as a variable and remove the drop code.\r\n#[System.Reflection.Assembly]::LoadString(\"Microsoft.SqlServer.SMO\") | out-null  #DOES not work \r\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SqlManagementObjects\") | out-null #does not work with ps7\r\n    $SMOserver = New-Object ('Microsoft.SqlServer.Management.Smo.Server') -argumentlist $server    \r\n    #$SMOserver = New-Object ('Microsoft.SqlServer.SqlManagementObjects') -argumentlist $server\r\n    $db = $SMOserver.databases[$dbname]\r\n \r\n    $Objects += $db.StoredProcedures\r\n    $Objects += $db.Synonyms\r\n    $Objects += $db.Tables\r\n    $Objects += $db.Triggers\r\n \r\n    #Build this portion of the directory structure out here in case scripting takes more than one minute.\r\n\r\n    $SavePath = $path #+ \"\\\" + $($dbname)\r\n\r\n \r\n    foreach ($ScriptThis in $Objects | where {!($_.IsSystemObject)}) {\r\n        #Need to Add Some mkDirs for the different $Fldr=$ScriptThis.GetType().Name\r\n        $scriptr = new-object ('Microsoft.SqlServer.Management.Smo.Scripter') ($SMOserver)\r\n        $scriptr.Options.AnsiFile = $true\r\n        $scriptr.Options.AppendToFile = $false\r\n        $scriptr.Options.AllowSystemObjects = $false\r\n        $scriptr.Options.Bindings = $true\r\n        $scriptr.Options.ClusteredIndexes = $true\r\n        $scriptr.Options.ColumnStoreIndexes = $true\r\n        $scriptr.Options.ContinueScriptingOnError = $true\r\n        $scriptr.Options.Default = $true\r\n        $scriptr.Options.DriAll = $true\r\n        $scriptr.Options.DriIncludeSystemNames = $false\r\n        $scriptr.Options.Encoding = [System.Text.Encoding]::UTF8\r\n        $scriptr.Options.ExtendedProperties = $true\r\n        $scriptr.Options.IncludeHeaders = $false\r\n        $scriptr.Options.Indexes = $true\r\n        $scriptr.Options.NoCollation = $true\r\n        $scriptr.Options.NonClusteredIndexes = $true\r\n        $scriptr.Options.OptimizerData = $false\r\n        $scriptr.Options.Permissions = $false\r\n        $scriptr.Options.SchemaQualify = $true\r\n        $scriptr.Options.SchemaQualifyForeignKeysReferences = $true\r\n        $scriptr.Options.ScriptData = $false\r\n        $scriptr.Options.ScriptDrops = $false\r\n        $scriptr.Options.ScriptOwner = $false\r\n        $scriptr.Options.ScriptSchema = $true\r\n        $scriptr.Options.Statistics = $false\r\n        $scriptr.Options.ToFileOnly = $true\r\n        $scriptr.Options.TargetServerVersion = \"Version150\"\r\n        $scriptr.Options.Triggers = $true\r\n        $scriptr.Options.WithDependencies = $false\r\n        $scriptr.Options.XmlIndexes = $true\r\n        \r\n        \r\n\r\n        <#This section builds folder structures.  Remove the date folder if you want to overwrite#>\r\n\r\n        $TypeFolder = $ScriptThis.GetType().Name\r\n\r\n        if ((Test-Path -Path \"$SavePath\\$TypeFolder\") -eq \"true\") {\"Scripting Out $TypeFolder $ScriptThis\"} \r\n        else {new-item -type directory -name \"$TypeFolder\"-path \"$SavePath\"}\r\n        $ScriptFile = $ScriptThis -replace \"\\[|\\]\"\r\n        $scriptr.Options.FileName = \"$SavePath\\$TypeFolder\\$ScriptFile.SQL\"\r\n\r\n        #This is where each object actually gets scripted one at a time.\r\n        $scriptr.Script($ScriptThis)\r\n\r\n    } #This ends the loop\r\n\r\n} #This completes the function\r\n\r\nScriptDbsIntoFolders -server $server -dbname $dbname -path $path\r\n\r\n```",
      "created_at": "2020-02-19T04:27:06Z",
      "updated_at": "2020-02-19T04:27:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The method name is `LoadFile`, not `LoadString`, but the best way to load well-known assemblies in PowerShell is to use `Add-Type -AssemblyName`, and to load assemblies in a given location with `Add-Type -LiteralPath`.\r\n\r\nBoth your outputs represent _successful_ loading of the assembly per se, not errors - though as stated, I wouldn't expect the version in the GAC to necessarily work in PowerShell Core, but I have no personal experience.\r\n\r\n[This blog post](http://www.maxtblog.com/2017/11/streamlining-sql-server-management-objects-smo-in-powershell-core/) suggests that you'll have to install [this NuGet package](https://www.nuget.org/packages/Microsoft.SqlServer.SqlManagementObjects) in PowerShell Core.\r\n\r\n---\r\n\r\nGenerally, please note that this repository isn't for general support questions, only for reproducible problems with PowerShell Core itself (/cc @SteveL-MSFT).\r\n\r\nSee [this comment](https://github.com/PowerShell/PowerShell/issues/11804#issuecomment-587263124) for guidance.",
      "created_at": "2020-02-19T04:29:14Z",
      "updated_at": "2020-02-19T04:29:14Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "Thanks, that appears to be the right direction to resolve this, but installation still fails with this error:\r\n> Install-Package: Dependency loop detected for package 'Microsoft.SqlServer.SqlManagementObjects'.\r\n\r\nThough not a bug, this is a backwards incompatibility with what I'd guess would be a big use case of Powershell: Sql Server admin. ",
      "created_at": "2020-02-19T04:47:36Z",
      "updated_at": "2020-02-19T04:47:36Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "This seems to be relevant:\r\nhttps://github.com/microsoft/sqltoolsservice/issues/891",
      "created_at": "2020-02-19T04:51:02Z",
      "updated_at": "2020-02-19T04:51:02Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "Directions there (to use \"a non-vanilla PS\" with the \"package manager\"), still leave me a dependency loop, but at least I have another place to post about this.....\r\n\r\n> Install-Package : Dependency loop detected for package 'Microsoft.SqlServer.SqlManagementObjects'.\r\n> At line:1 char:1\r\n> + Install-Package -Name Microsoft.sqlserver.SqlManagementObjects -Scope ...\r\n> + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n>     + CategoryInfo          : Deadlock detected: (Microsoft.SqlServer.SqlManagementObjects:String) [Install-Package],\r\n>    Exception\r\n>     + FullyQualifiedErrorId : DependencyLoopDetected,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
      "created_at": "2020-02-19T04:55:09Z",
      "updated_at": "2020-02-19T04:56:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@techvslife, yes, that [dependency-loop issue](https://github.com/oneget/oneget) sounds annoying.\r\n\r\nA - cumbersome and possibly impractical - workaround is to download and extract the NuGet package manually.\r\n\r\nLooking at the broader picture, a re-architected PowerShellGet module (v3) that no longe depends on the PackageManagement (OneGet) module is being worked on: https://github.com/PowerShell/PowerShell-RFC/pull/237\r\n\r\nNow that we know that the solution lies elsewhere, please consider closing this issue.",
      "created_at": "2020-02-19T13:59:52Z",
      "updated_at": "2020-02-19T13:59:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-02-21T00:00:28Z",
      "updated_at": "2020-02-21T00:00:28Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "I'm grateful for your help, and I realize I'll have to get help elsewhere (note: though \"msftbot\" closed this, the issue is unresolved).  \r\nThere is no solution that I can see (except I guess to wait for a future PowerShellGet v3 module):\r\nDownloading and extracting the NuGet package locally doesn't work, because there are further dependency loop messages down the line:\r\n`Install-Package: Dependency loop detected for package 'Microsoft.Data.SqlClient'.`",
      "created_at": "2020-02-25T00:40:39Z",
      "updated_at": "2020-02-25T00:42:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "According to the https://www.nuget.org/packages/Microsoft.SqlServer.SqlManagementObjects, \r\nthe dependencies are https://www.nuget.org/packages/Newtonsoft.Json/ (which is part of PowerShell) and https://www.nuget.org/packages/System.Data.SqlClient/, so if you if you download and extract the latter manually too (without `Install-Package`), it may work.\n\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.sqlserver.sqlmanagementobjects/150.18208.0/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.SqlServer.SqlManagementObjects/\">Microsoft.SqlServer.SqlManagementObjects 150.18208.0</a></strong></div><div>The SQL Server Management Objects (SMO) Framework is a set of objects designed for programmatic management of Microsoft SQL Server and Microsoft Azure SQL Database.</div></blockquote>\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/newtonsoft.json/12.0.3/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Newtonsoft.Json/\">Newtonsoft.Json 12.0.3</a></strong></div><div>Json.NET is a popular high-performance JSON framework for .NET</div></blockquote>\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/system.data.sqlclient/4.8.1/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/System.Data.SqlClient/\">System.Data.SqlClient 4.8.1</a></strong></div><div>Provides the data provider for SQL Server. These classes provide access to versions of SQL Server and encapsulate database-specific protocols, including tabular data stream (TDS)\n\nCommonly Used Types:\nSystem.Data.SqlClient.SqlConnection\nSystem.Data.SqlClient.SqlException\nSystem.Data.SqlClient.SqlParameter\nSystem.Data.SqlDbType\nSystem.Data.SqlClient.SqlDataReader\nSystem.Data.SqlClient.SqlCommand\nSystem.Data.SqlClient.SqlTransaction\nSystem.Data.SqlClient.SqlParameterCollection\nSystem.Data.SqlClient.SqlClientFactory\n \nWhen using NuGet 3.x this package requires at least version 3.4.</div></blockquote>",
      "created_at": "2020-02-25T02:13:20Z",
      "updated_at": "2020-02-25T02:13:23Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "Thank you--unfortunately that fails for me, with this error:\r\n**Install-Package: Object reference not set to an instance of an object.**\r\n",
      "created_at": "2020-02-28T19:01:16Z",
      "updated_at": "2020-02-28T19:01:16Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "--Let me try it another way.",
      "created_at": "2020-02-28T19:01:43Z",
      "updated_at": "2020-02-28T19:01:43Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "How would you recommend installing the extracted package?",
      "created_at": "2020-02-28T19:09:47Z",
      "updated_at": "2020-02-28T19:09:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear: I meant _avoiding_ `Install-Package` in order to _work around_ the dependency-loop issue.\r\n\r\n> How would you recommend installing the extracted package?\r\n\r\nYou need to place the relevant DLLs somewhere where your scripts can load them with `Add-Type -LiteralPath`.\r\n\r\nLocating the relevant DLL's _inside the extracted package_ can itself be a challenge - see #6724\r\n\r\nAs far as I know, there is no established location for where to place helper assemblies _globally_, aside from bundling them with a _module_.\r\n\r\nThe alternative is therefore to _package the DLLs as a PowerShell module_ and place them in a directory listed in `$env:PSModulePath` (in short: put them in a folder and create a module manifest with the same name as the folder that loads the DLLs), which then allows the DLLs to  either be auto-loaded via their module or loaded `Import-Module` (by mere name).\r\n\r\n\r\n",
      "created_at": "2020-02-29T14:52:43Z",
      "updated_at": "2020-03-01T17:14:42Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "I got pretty far, despite the dependency bug in the powershell package manager with respect to nuget packages. But basically this is unresolved, and the SMO code won't work in Powershell 7. \r\nNow I get this error:\r\n> New-Object: Could not load file or assembly 'Microsoft.Data.SqlClient, Version=1.10.19324.4, Culture=neutral, PublicKeyToken=23ec7fc2d6eaa4a5'. The system cannot find the file specified.\r\n\r\nThat's after the last line of this code:\r\n```\r\n$smopath = Join-Path ((Get-Package Microsoft.SqlServer.SqlManagementObjects).Source | Split-Path) (Join-Path lib netstandard2.0);\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.Smo.dll);\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.ConnectionInfo.dll);\r\n$sqldll_path = Join-Path ((Get-Package Microsoft.Data.SqlClient).Source | Split-Path) (Join-Path lib netstandard2.0);\r\nAdd-Type -Path (Join-Path $sqldll_path Microsoft.Data.SqlClient.dll);\r\n\r\n$SqlSrvConn = new-object Microsoft.SqlServer.Management.Common.SqlConnectionInfo(\".\", \"sa\", \"mypassword\")\r\n$SmoServer = New-Object Microsoft.SqlServer.Management.SMO.Server($SqlSrvConn)\r\n```\r\n\r\nInterestingly, the following code works perfectly fine--so I think MS did NOT port the entire server-side SMO code to .net core, or there is a bug in the attempt. Or maybe it's an issue with the buggy powershell install of nuget packages. Have no idea.\r\n```\r\n$sqlConn = New-Object System.Data.SqlClient.SqlConnection(\"Server=.;Database=MyDbs;Trusted_Connection=yes;\")\r\n$sqlConn.Open()\r\n$sqlcmd = $sqlConn.CreateCommand()\r\n$query = \u201cselect FName, LName from Customersorder by LName, FName;\u201d\r\n$sqlcmd.CommandText = $query\r\n$adp = New-Object System.Data.SqlClient.SqlDataAdapter $sqlcmd\r\n$data = New-Object System.Data.DataSet\r\n$adp.Fill($data) | Out-Null\r\n$data.Tables\r\n```",
      "created_at": "2020-02-29T18:36:58Z",
      "updated_at": "2020-02-29T18:36:58Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "Thank you for your help--I did make progress, but not there yet. \r\nTo clarify, Powershell really does know where the file Microsoft.Data.SqlClient.dll is (that's correctly given by Add-Type), but it's still not working. Perhaps there's a versioning issue? that's the kind of thing that gets to be a mess when package install fails on you, which is why you want package install to work .... ",
      "created_at": "2020-02-29T18:40:58Z",
      "updated_at": "2020-02-29T18:40:58Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "*If* it is a version issue (which it may not be), there are 22 (!) copies of the file Microsoft.Data.SqlClient.dll on my desktop, so not clear which one to use (some are identical, most are not).  The one I'm using (to which $sqldll_path points) is at:\r\n`C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\lib\\netstandard2.0\r\n`\r\n\r\nBut fwiw, these are the 22 copies:\r\n\r\n> C:\\>dir Microsoft.Data.SqlClient.dll /s\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\lib\\net46\r\n> 02/14/2020  12:39 AM         1,920,472 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\lib\\netcoreapp2.1\r\n> 02/14/2020  12:38 AM           346,584 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\lib\\netstandard2.0\r\n> 02/14/2020  12:38 AM           339,928 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\ref\\net46\r\n> 02/14/2020  12:38 AM            69,592 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\ref\\netcoreapp2.1\r\n> 02/14/2020  12:38 AM            66,008 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\ref\\netstandard2.0\r\n> 02/14/2020  12:38 AM            60,376 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\runtimes\\unix\\lib\\netcoreapp2.1\r\n> 02/14/2020  12:38 AM         1,155,032 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\runtimes\\unix\\lib\\netstandard2.0\r\n> 02/14/2020  12:38 AM         1,122,776 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\runtimes\\win\\lib\\net46\r\n> 02/14/2020  12:39 AM         1,920,472 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\runtimes\\win\\lib\\netcoreapp2.1\r\n> 02/14/2020  12:38 AM         1,266,648 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.Data.SqlClient.1.1.1\\runtimes\\win\\lib\\netstandard2.0\r\n> 02/14/2020  12:38 AM         1,217,496 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\lib\\net46\r\n> 11/20/2019  09:58 PM         1,921,496 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\lib\\netcoreapp2.1\r\n> 11/20/2019  09:58 PM           346,584 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\lib\\netstandard2.0\r\n> 11/20/2019  09:58 PM           339,928 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\ref\\net46\r\n> 11/20/2019  09:58 PM            69,592 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\ref\\netcoreapp2.1\r\n> 11/20/2019  09:58 PM            66,008 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\ref\\netstandard2.0\r\n> 11/20/2019  09:58 PM            59,864 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\runtimes\\unix\\lib\\netcoreapp2.1\r\n> 11/20/2019  09:58 PM         1,158,616 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\runtimes\\unix\\lib\\netstandard2.0\r\n> 11/20/2019  09:58 PM         1,125,848 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\runtimes\\win\\lib\\net46\r\n> 11/20/2019  09:58 PM         1,921,496 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\runtimes\\win\\lib\\netcoreapp2.1\r\n> 11/20/2019  09:58 PM         1,270,232 Microsoft.Data.SqlClient.dll\r\n> \r\n> C:\\Users\\usr\\.nuget\\packages\\microsoft.data.sqlclient\\1.1.0\\runtimes\\win\\lib\\netstandard2.0\r\n> 11/20/2019  09:58 PM         1,220,560 Microsoft.Data.SqlClient.dll",
      "created_at": "2020-02-29T19:11:18Z",
      "updated_at": "2020-02-29T23:32:36Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "This might be a bug, but I thought I was using the latest version (that should in theory have fixed it).\r\nhttps://github.com/dotnet/SqlClient/issues/260\r\n",
      "created_at": "2020-02-29T22:23:15Z",
      "updated_at": "2020-02-29T22:24:17Z"
    },
    {
      "author": "techvslife",
      "author_association": "NONE",
      "body": "Thank you for your advice -- I finally did get it working. There is a bug (a bug as far as using it in net.core) that's still uncorrected -- at least until v2 preview of microsoft.data.sqlclient. I had to use this beta version:\r\nmicrosoft.data.sqlclient.2.0.0-preview1.20021.1.nupkg\r\nI'm not sure how to get that to install naturally given the issues with Install-Package and nuget, so all I did was refer to it on disk as you suggested (hope all of this gets fixed soon, whether it's nuget or .netcore or ps or sqldev or some other MS team--no one likes to spend a day or two on installation!):\r\n\r\n> $sqldll_path = \"C:\\Users\\usr\\ps\\microsoft.data.sqlclient.2.0.0-preview1.20021.1\\runtimes\\win\\lib\\netstandard2.0\"\r\n> Add-Type -Path (Join-Path $sqldll_path Microsoft.Data.SqlClient.dll);",
      "created_at": "2020-02-29T22:55:22Z",
      "updated_at": "2020-03-01T23:45:05Z"
    }
  ],
  "created_at": "2020-02-15T19:35:44Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11860,
  "state": "closed",
  "title": "Error trying to script using the Sql Server 2019 SMO object model",
  "updated_at": "2020-03-01T23:45:05Z"
}