{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12572",
  "author": "StewartRyanSony",
  "body": "<!--\r\n\r\n\r\n-->\r\n\r\n\r\nHello,\r\n\r\nI've run into a problem trying to encrypt a short string (password) using a public certificate. The code I have works just fine in PowerShell 5.1 but throws errors when using PowerShell 7\r\n\r\nEncrypt a string with the following Code\r\n\r\n```powershell\r\nFunction Encrypt-Asymmetric {\r\n    [CmdletBinding()]\r\n    [OutputType([System.String])]\r\n    param(\r\n        [Parameter(Position=0, Mandatory=$true)][ValidateNotNullOrEmpty()][System.String]\r\n        $ClearText,\r\n        [Parameter(Position=1, Mandatory=$true)][ValidateNotNullOrEmpty()][ValidateScript({Test-Path $_ -PathType Leaf})][System.String]\r\n        $PublicCertFilePath\r\n    )\r\n    # Encrypts a string with a public key\r\n    $PublicCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($PublicCertFilePath)\r\n    $ByteArray = [System.Text.Encoding]::UTF8.GetBytes($ClearText)\r\n    $EncryptedByteArray = $PublicCert.PublicKey.Key.Encrypt($ByteArray,$true)\r\n    $EncryptedBase64String = [Convert]::ToBase64String($EncryptedByteArray)\r\n    \r\n    Return $EncryptedBase64String \r\n    }\r\n    $ClearText = \"ExampleP@ssw0rd\"\r\n    $PublicCertFilePath = \"C:\\certs\\ExampleCert.crt\"\r\n    $EncryptedString = Encrypt-Asymmetric $ClearText $PublicCertFilePath\r\n    \r\n```\r\n\r\n# Expected behavior\r\n\r\nThe Variable $EncryptedString should contain a string representing the encrypted version of the clear text string provided\r\n\r\n```powershell\r\nScripts> $EncryptedString = Encrypt-Asymmetric $ClearText $PublicCertFilePath\r\nScripts> $EncryptedString\r\nNkBujkyO1oEy/vV9QsHpCbpsixA9SBVTOfTi98c8fHDuqZ+HpY3wVtMm3CAH8izN0zbpVTu0EZkuo3kH/AMn3ymZ5ZkAeoAbobCIsZ9fKhxERsNU+rVroYDZ5mR6WX4ywPca621zWrdT8t/2L1DXrspKDU6skNqcffPw4escwmSsiengcbkbWIkZ+NlfbJPuPu0F6GUhYJZJLmmKRZkxJKYYga4qb3AROpxy3IyMp2v67ZR0GnpRsd1+46FKjoRi89yd3MKRlvLxl/XkHQ546/uF6mEUBKJ4bbnGdaiEvAvXjQLKiT3GXUdfAaANzYaxU5XUAX7cjVWcdFChByrV8g==\r\nScripts>\r\n```\r\n\r\n# Actual behavior\r\n\r\nI receive the following errors\r\n\r\n```powershell\r\nScripts> $EncryptedString = Encrypt-Asymmetric $ClearText $PublicCertFilePath\r\nMethodException:\r\nLine |\r\n  13 |      $EncryptedByteArray = $PublicCert.PublicKey.Key.Encrypt($ByteArra \u2026\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot convert argument \"padding\", with value: \"True\", for \"Encrypt\" to type \"System.Security.Cryptography.RSAEncryptionPadding\": \"Cannot convert value \"True\" to type \"System.Security.Cryptography.RSAEncryptionPadding\". Error: \"Invalid cast from 'System.Boolean' to 'System.Security.Cryptography.RSAEncryptionPadding'.\"\"\r\nMethodInvocationException:\r\nLine |\r\n  14 |      $EncryptedBase64String = [Convert]::ToBase64String($EncryptedByte \u2026\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Exception calling \"ToBase64String\" with \"1\" argument(s): \"Value cannot be null. (Parameter 'inArray')\"\r\n```\r\n\r\n# Environment data\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2020-05-06T20:09:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Run `$PublicCert.PublicKey.Key.Encrypt` and see available overloads.",
      "created_at": "2020-05-05T07:03:57Z",
      "updated_at": "2020-05-05T07:03:57Z"
    },
    {
      "author": "StewartRyanSony",
      "author_association": "NONE",
      "body": "In PowerShell 5.1 I get the following\r\n```powershell\r\nScripts> $PublicCert.PublicKey.key.Encrypt\r\n\r\nOverloadDefinitions\r\n-------------------\r\nbyte[] Encrypt(byte[] rgb, bool fOAEP)\r\nbyte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)\r\n```\r\n\r\nIn PowerShell 7 I get\r\n```powershell\r\nScripts> $PublicCert.PublicKey.key.Encrypt\r\n\r\nOverloadDefinitions\r\n-------------------\r\nbyte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)\r\n```\r\n\r\nWhy should there be a difference in the overloads between the versions? Isn't this part of .net?",
      "created_at": "2020-05-06T00:07:11Z",
      "updated_at": "2020-05-06T00:07:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, if there's an overload missing, it's almost certainly because it had to be removed during the transition to .NET Core and hasn't been added back yet / was deemed not worth the effort. You might need to check in with the .NET folks in the [dotnet/runtime](/dotnet/runtime) repo and see what they reckon. \ud83d\ude42 ",
      "created_at": "2020-05-06T01:03:13Z",
      "updated_at": "2020-05-06T01:03:13Z"
    },
    {
      "author": "StewartRyanSony",
      "author_association": "NONE",
      "body": "@iSazonov, @vexx32,\r\n\r\nThanks for the hints. So yes indeed , it seems that `byte[] Encrypt(byte[] rgb, bool fOAEP)` is not a valid overload in this version of .net core even though Microsoft's documentation says it's still available in all versions of .net.\r\n\r\nThere are virtually no examples of PowerShell code out there where anyone uses the `byte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)` overload, so this really forced me to learn how all this stuff works and not just go off of code posted on the internet.\r\n\r\nIf anyone stumbles across this thread looking up the same error here's an example of what it should look like. Replace line 13 in my script above with this:\r\n```powershell\r\n$EncryptedBytes = $Cert.PublicKey.Key.Encrypt($EncodedString, [System.Security.Cryptography.RSAEncryptionPadding]::OaepSHA256)\r\n```\r\n\r\nThanks,\r\nRyan\r\n",
      "created_at": "2020-05-06T20:09:46Z",
      "updated_at": "2020-05-06T20:09:46Z"
    }
  ],
  "created_at": "2020-05-04T21:07:21Z",
  "number": 12572,
  "state": "closed",
  "title": "Problem encrypting a string with a public certificate",
  "updated_at": "2020-05-06T20:09:47Z"
}