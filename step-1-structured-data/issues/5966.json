{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5966",
  "author": "vors",
  "body": "This is really a dupe of #3417 but I wanted to spell out the exact consequences of this problem  and maybe encourage the team to create unix-compatible nuget packages for the GA 6.0.1 release.\r\n\r\nThe problem is in the `#ifdef UNIX` that we have.\r\nThe nuget packages published to myget only has windows binaries which are compiled without `UNIX` define (obviously).\r\n\r\nThat leads to runtime failures when trying to host powershell inside dotnet core application on linux and mac, such as https://github.com/Jaykul/Jupyter-PowerShell .\r\n\r\nSteps to reproduce\r\n------------------\r\nCreate a simple application that uses `InitialSessionState`\r\n```csharp\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace MygetDemo {\r\n    public class ISSDemo {\r\n        public static void Main(string[] args) {\r\n            var iss = InitialSessionState.CreateDefault2();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWith csproj file to build it\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.0</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Collections.NonGeneric\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nRun it with\r\n```\r\ndotnet restore\r\ndotnet run --framework=netcoreapp2.0\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nNo error\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nMicrosoft (R) Build Engine version 15.6.12.27473 for .NET Core                                                              \r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 38.48 ms for /Users/vors/dev/powershell-host-demo/Demo.csproj.\r\n\r\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'System.Management.Automation.Runspaces.InitialSessionState' threw an exception. ---> System.TypeInitializationException: The type initializer for 'System.Management.Automation.Utils' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Microsoft.Win32.Registry' threw an exception. ---> System.PlatformNotSupportedException: Registry is not supported on this platform.\r\n   at Microsoft.Win32.RegistryKey.OpenBaseKeyCore(RegistryHive hKey, RegistryView view)\r\n   at Microsoft.Win32.Registry..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Platform.get_IsNanoServer()\r\n   at System.Management.Automation.Platform.get_IsInbox()\r\n   at System.Management.Automation.Utils..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Runspaces.InitialSessionState..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault2()\r\n   at MygetDemo.ISSDemo.Main(String[] args) in /Users/vors/dev/powershell-host-demo/Program.cs:line 6\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                       \r\n----                           -----                                                                                       \r\nPSVersion                      6.0.0                                                                                       \r\nPSEdition                      Core                                                                                        \r\nGitCommitId                    v6.0.0                                                                                      \r\nOS                             Darwin 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.3...\r\nPlatform                       Unix                                                                                        \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                     \r\nPSRemotingProtocolVersion      2.3                                                                                         \r\nSerializationVersion           1.1.0.1                                                                                     \r\nWSManStackVersion              3.0  \r\n```\r\n\r\nThe failure comes from this code\r\nhttps://github.com/PowerShell/PowerShell/blob/beffdcf94d00b51d9339bb26dbc0e477cd147c92/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L68-L93\r\n\r\n",
  "closed_at": "2018-02-26T23:35:10Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "relevant issue in Jupyter-PowerShell https://github.com/Jaykul/Jupyter-PowerShell/issues/12",
      "created_at": "2018-01-20T04:29:43Z",
      "updated_at": "2018-01-20T04:32:47Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I'd really ask the team to consider creating compatible packages as a follow up for GA. I know that `dotnet` tool lacks support for it but I think for the GA release this really worth doing, even if that means doing it with lots of manual labor. That would enable so many cool x-plat scenarios.",
      "created_at": "2018-01-20T04:36:35Z",
      "updated_at": "2018-01-20T04:36:35Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Desperately need this for my project(s).",
      "created_at": "2018-01-21T05:08:26Z",
      "updated_at": "2018-01-21T05:08:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could use Windows Compatibility Pack. But it is preview and require .Net Core 2.1 preview. I don't know can we already use this? /cc @daxian-dbw ",
      "created_at": "2018-01-21T16:39:33Z",
      "updated_at": "2018-01-21T16:39:58Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Hmm, I don't follow: how does Windows Compatibility Pack relate to that?\r\n\r\n![image](https://user-images.githubusercontent.com/816680/35198079-095f53d6-fe9e-11e7-94ab-5e09a3fa2978.png)\r\n\r\nThings like Registry will not work on unix, all we need is include binaries that we already have in a proper runtime/platform folder in a NuGet package.",
      "created_at": "2018-01-21T19:24:36Z",
      "updated_at": "2018-01-21T19:29:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "WCP don't solve this automatically. We should review our code and wrap such code (#if UNIX ) with `RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) { ... }`.\r\nTo find the code we can use [API Analyzer](https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/)\r\n\r\nhttps://github.com/dotnet/designs/blob/master/accepted/compat-pack/compat-pack.md\r\nhttps://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/\r\n",
      "created_at": "2018-01-22T05:43:19Z",
      "updated_at": "2018-01-22T05:43:19Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think we need to switch from platform-specific binaries to runtime checks. The platform-specific binaries are working ... \r\n\r\nBut if there are platform-specific binaries, then they need to be shipped in the [nuget packages](https://powershell.myget.org/feed/powershell-core/package/nuget/Microsoft.PowerShell.SDK), so we can build software that works.\r\n\r\nYou know:\r\n```\r\nruntimes/win-x86/native/...\r\nruntimes/win-x64/native/...\r\nruntimes/linux-x64/native/...\r\nruntimes/osx-x64/native/...\r\n...\r\n```",
      "created_at": "2018-01-26T04:47:46Z",
      "updated_at": "2018-01-26T04:48:01Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan or is *this* the bug you fixed in the Myget packages? ",
      "created_at": "2018-02-20T23:11:13Z",
      "updated_at": "2018-02-20T23:11:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "This will be fixed when #6167 is merged and the new Nuget Packages are released.",
      "created_at": "2018-02-21T18:26:47Z",
      "updated_at": "2018-02-21T18:26:47Z"
    }
  ],
  "created_at": "2018-01-20T04:28:43Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 5966,
  "state": "closed",
  "title": "Published nuget packages are windows only",
  "updated_at": "2018-02-27T03:46:26Z"
}