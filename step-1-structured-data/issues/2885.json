{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2885",
  "author": "wpostma",
  "body": "My most frequent annoyance on Powershell is typing in a Unix command that everybody knows and unlike ls, or echo or cd, it doesn't just work.  The one I find myself missing most often is `which`, which I define on my own system as:\r\n\r\n```\r\nfunction which($name)\r\n{\r\n    Get-Command -Name $name | Select-Object -ExpandProperty Definition\r\n}\r\n\r\n```\r\n\r\nThat makes me happy on my computer and sad on everyone else's computer where I can't just go install my powershell profile, so I have to go copy and paste that from somewhere into my session, just so I can save myself typing the horrific long forms in over and over. It seems to me that `which` is so darn useful that the above alias should just exist by default in powershell.\r\n\r\nSearching for a binary in the path is a frequent task, and the above long-form command that my alias saves you from typing is among the most egregious examples of a COBOL-like verbosity in PowerShell that I find completely distasteful.  I can't remember all that crap.  `which foo` and you're done.  \r\n\r\nNow that powershell is cross platform, and a very useful tool on any system where it can run, including Unix systems, it seems that `which` should make the trip.  `which` defined as above, works for aliases, and, functions, and binary tools on the path.  That makes it an essential tool in your toolbox, and should be covered by the \"obviously, should just work\" criteria.\r\n\r\n",
  "closed_at": "2017-10-08T08:32:33Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I totally understand the appeal (and I'm currently copying that into my own personal profile). Unfortunately, this is dangerous for reasons outlined in #1901 and #929. tl;dr: *especially* in non-Windows scenarios, shells shouldn't plaster over native binaries on the box because users expect the binaries that they're used to (e.g. `ls -la` or `rm -rf` should just work on Linux boxes). \r\n\r\nIn this particular instance, unless we implement [all the switches available to GNU `which`](https://linux.die.net/man/1/which), we're going to get in trouble with people on the *nix side. \r\n\r\nThat being side, I believe we should *eventually* do some kind of module that gives PowerShell power users aliases like this. ",
      "created_at": "2016-12-14T22:07:33Z",
      "updated_at": "2016-12-14T22:07:33Z"
    },
    {
      "author": "wpostma",
      "author_association": "NONE",
      "body": "Ah.  Yes, I can see the need to not hide \"which\" if it's already in the path.  For such a purpose, I think then a new Powershell syntax needs to be defined that allows for polyfills (that is, do not replace which if it's in the path). \r\n\r\nCurrent Powershell semantics make it impossible for me to write this and have my profile automatically create a function if there is NO command found matching the name `which`:\r\n\r\n\r\n```\r\ntry  { Get-Command -Name which \r\n } \r\ncatch <#CommandNotFoundExeception#> { function which($name)\r\n  {\r\n     Get-Command -Name $name | Select-Object -ExpandProperty Definition\r\n  }\r\n }\r\n```\r\n\r\n",
      "created_at": "2016-12-15T19:39:54Z",
      "updated_at": "2016-12-15T19:40:47Z"
    },
    {
      "author": "DerpMcDerp",
      "author_association": "NONE",
      "body": "The \"see\" command is more feature rich (and shorter to type too):\r\n\r\nhttp://poshcode.org/5164",
      "created_at": "2016-12-16T03:58:50Z",
      "updated_at": "2016-12-16T03:58:50Z"
    },
    {
      "author": "wpostma",
      "author_association": "NONE",
      "body": "How is that command different than the built in `Get-Command` that my which function example has? I didn't see how it's called see from that code either? ",
      "created_at": "2016-12-16T12:06:02Z",
      "updated_at": "2016-12-16T12:06:02Z"
    },
    {
      "author": "DerpMcDerp",
      "author_association": "NONE",
      "body": "> I didn't see how it's called `see` from that code either?\r\n\r\nThere is an alias up top:\r\n\r\n```PowerShell\r\nNew-Alias see Get-CommandDefinition\r\n```\r\n\r\n> How is that command different than the built in `Get-Command` that my which function example has?\r\n\r\n1. `see` unrolls aliases automatically and tells you the name of the cmdlets and dlls they're in, e.g.\r\n\r\n```PowerShell\r\n<#PS#> New-Alias foo bar\r\n<#PS#> New-Alias bar ls\r\n\r\n<#PS#> which foo\r\nbar\r\n<#PS#> which Get-ChildItem\r\nGet-ChildItem [[-Path] <string[]>] [[-Filter] <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint32>] [-Force] [-Name] [-UseTransaction] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]\r\n\r\nGet-ChildItem [[-Filter] <string>] -LiteralPath <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint32>] [-Force] [-Name] [-UseTransaction] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]\r\n\r\n<#PS#> see foo\r\n#A: foo -> bar\r\n#A: bar -> ls\r\n#A: ls -> Get-ChildItem\r\n# Microsoft.PowerShell.Commands.Management.dll\r\n#   Microsoft.PowerShell.Commands.GetChildItemCommand\r\n\r\nGet-ChildItem [[-Path] <string[]>] [[-Filter] <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint32>] [-Force] [-Name] [-UseTransaction] [<CommonParameters>]\r\n\r\nGet-ChildItem [[-Filter] <string>] -LiteralPath <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint32>] [-Force] [-Name] [-UseTransaction] [<CommonParameters>]\r\n```\r\n\r\n2. `see` can tell you if the function is in a module, e.g.\r\n\r\n```PowerShell\r\n<#PS#> which PSConsoleHostReadline\r\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\r\n\r\n<#PS#> see PSConsoleHostReadline\r\n#F: PSReadline\\PSConsoleHostReadline\r\n\r\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\r\n```",
      "created_at": "2016-12-17T00:13:26Z",
      "updated_at": "2016-12-17T00:13:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is dup #1975 ",
      "created_at": "2017-10-08T08:32:33Z",
      "updated_at": "2017-10-08T08:32:33Z"
    }
  ],
  "created_at": "2016-12-14T20:40:23Z",
  "number": 2885,
  "state": "closed",
  "title": "Unix style which command should be built in as an alias.",
  "updated_at": "2017-10-08T08:32:50Z"
}