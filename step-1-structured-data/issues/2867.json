{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2867",
  "author": "ilgrank",
  "body": "Hello Everyone\r\nPsCore 6.x's Invoke-Webrequest is missing on the most 'loved' Ps 'classic' features, ie the ability to parse web pages and turn them into explorable objects.\r\n\r\nSteps to reproduce\r\n------------------\r\n$test=invoke-webrequest -url http://www.github.com\r\n\r\nExpected behavior\r\n-----------------\r\n$test.ParsedHtml \r\n$test.AllElements\r\n(amont others) are missing:\r\n\r\nMicrosoft Powershell :\r\n![psclassic](https://cloud.githubusercontent.com/assets/4583412/21061793/200fed48-be4e-11e6-88ac-98a06d79be34.png)\r\n\r\nCore Poweshell:\r\n![pscore](https://cloud.githubusercontent.com/assets/4583412/21061794/20177a72-be4e-11e6-991b-63e36dd15583.png)\r\n\r\n\r\nActual behavior\r\n---------------\r\nthese properties are missing\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```\r\nCLRVersion\r\nSerializationVersion 1.1.0.1\r\nPSRemotingProtocolVersion 2.3\r\nPSEdition Core\r\nWSManStackVersion 3.0\r\nBuildVersion 3.0.0.0\r\nGitCommitId v6.0.0-alpha.13\r\nPSVersion 6.0.0-alpha\r\nPSCompatibleVersions {1.0, 2.0, 3.0, 4.0...}\r\n\r\n```\r\n\r\nI have hope to have web parsing capabilities in PSCore!\r\nThanks everyone!",
  "closed_at": "2020-10-19T19:52:41Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello  FYI: Full PowerShell essentially uses Internet Explorer to do the HTML parsing. This is likely to be problematic to replicate on .NET core.",
      "created_at": "2017-02-18T00:42:35Z",
      "updated_at": "2017-02-18T00:42:35Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay I'd still like to investigate after we look at whatever ends up shipping .NET Standard 2.0 ",
      "created_at": "2017-03-01T23:38:21Z",
      "updated_at": "2017-03-01T23:38:21Z"
    },
    {
      "author": "jakerobinson",
      "author_association": "NONE",
      "body": "What's the best alternative if this is low priority? Any low effort workarounds for parsing HTML in core?",
      "created_at": "2017-05-03T02:24:27Z",
      "updated_at": "2017-05-03T02:24:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": ".Net Std 2.0 doesn't solve this.  There is another issue where we discussed the need to leverage an OSS html parser rather than rely on a web browser being available (https://github.com/PowerShell/PowerShell/issues/2867), doing that work should also resolve this one.",
      "created_at": "2017-05-03T16:39:42Z",
      "updated_at": "2017-05-03T16:39:42Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "May I propose using https://github.com/servo/html5ever?  Loosely speaking, Servo is the next generation of Firefox written in Rust. You can writing your bindings against https://github.com/utkarshkukreti/select.rs which is written on top of html5ever. \r\n\r\nUnlike some of the other parts of OSS community which in the past haven't colloborated with their own specific list of companies, Rust community is incredibly open and collaborative. VSCode uses a rust-coded library- https://github.com/BurntSushi/ripgrep/ whose author made changes specifically to accomodate them- @BurntSushi . \r\n\r\nThere's also https://github.com/google/gumbo-parser which doesn't seem maintained right now and Chromium but I don't know how easy it is to pull in external code.  \r\n\r\nPS: I am an honorary member of the Rust action strike force, which pressures people into rewriting already existing codebases into Rust. No I'm not, lol, there's no such thing. I'm just a Linux user who wishes to be able to parse html with `iwr`. ",
      "created_at": "2017-06-20T04:24:50Z",
      "updated_at": "2017-06-20T05:50:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@SRGOM I don't have any affinity to any particular html parser, but certainly one that is maintained is more desirable.  I know that @iSazonov had proposed looking at some other OSS ones as well.",
      "created_at": "2017-06-20T17:22:43Z",
      "updated_at": "2017-06-20T17:22:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It was in #3267 - AngleSharp. I now believe that AngleSharp is a lightweight and sufficient solution to this Issue. The use of more powerful engines should be discussed further (For example, if we want to migrate completely to a similar engine).",
      "created_at": "2017-06-21T18:07:50Z",
      "updated_at": "2017-06-21T18:07:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Rather than having this as part of the webcmdlets, these should be separate as html cmdlets which can be used against local files.",
      "created_at": "2018-02-06T18:06:26Z",
      "updated_at": "2018-02-06T18:06:26Z"
    },
    {
      "author": "MSAdministrator",
      "author_association": "NONE",
      "body": "I am guessing this is still considered for the future?  ",
      "created_at": "2018-07-11T16:19:44Z",
      "updated_at": "2018-07-11T16:19:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@MSAdministrator Yes, it is still considered for the future. ",
      "created_at": "2018-07-11T20:42:24Z",
      "updated_at": "2018-07-11T20:42:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MSAdministrator `Up-for-Grabs` delegate this to community :-). Feel free to write RFC to start the dev process.",
      "created_at": "2018-07-12T07:53:39Z",
      "updated_at": "2018-07-12T07:53:39Z"
    },
    {
      "author": "MSAdministrator",
      "author_association": "NONE",
      "body": "Submitted RFC for `ConvertFrom-Html` here: https://github.com/PowerShell/PowerShell-RFC/pull/137 ",
      "created_at": "2018-07-15T01:57:04Z",
      "updated_at": "2018-07-15T01:57:04Z"
    },
    {
      "author": "wyzerd",
      "author_association": "NONE",
      "body": "Why has this been changed to default of -UseBasicParsing?\r\nThis is the cause of the issue. I was using the scripts property for gathering information from the marketplace.visualstudio.com and now that property is missing causing my automation script to fail. This really shouldn't be a RFC but a request to restore original functionality. All that needs to be done to fix this is remove that hidden flag.",
      "created_at": "2018-10-05T22:16:24Z",
      "updated_at": "2018-10-05T22:16:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@wyzerd Windows PowerShell relied on Internet Explorer to parse the html.  Since Internet Explorer wasn't available in most platforms we support with PowerShell Core 6 (nanoserver, Linux, macOS), it made sense to default to `-UseBasicParsing`.  @MSAdministrator's proposal for `ConvertFrom-Html` is a better solution rather than marrying the parsing capability to the web cmdlets (like parsing a local html file).",
      "created_at": "2018-10-05T22:57:18Z",
      "updated_at": "2018-10-05T22:57:18Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "MS is trusted for a backwards compatibility. It's okay to miss features but please don't add or remove things silently. It breaks trust. ",
      "created_at": "2018-10-05T23:59:50Z",
      "updated_at": "2018-10-05T23:59:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It wasn't removed silently. There were several announcement blog posts, including at least two or three from the main man behind the change, and it was documented in the patch notes and I believe is also in the updated help documentation.",
      "created_at": "2018-10-06T00:49:00Z",
      "updated_at": "2018-10-06T00:49:00Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32- You know what I'm trying to say but yes silently wasn't the right word to use. Please don't change default behavior that already works. ",
      "created_at": "2018-10-06T00:56:06Z",
      "updated_at": "2018-10-06T00:56:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There wasn't really much of a choice given they wanted to support multiple platforms, really. It's unfortunate, but as Steve mentions it's probably best to look at alternate solutions than to keep it tied down to a past solution that would inevitably break.\n\nMS as a whole is moving away from IE to Edge, so I'm sure that having IE as a dependency isn't desirable, regardless of how much it might be convenient for some. ",
      "created_at": "2018-10-06T01:01:16Z",
      "updated_at": "2018-10-06T01:01:16Z"
    },
    {
      "author": "wyzerd",
      "author_association": "NONE",
      "body": "@SteveL-MSFT,\r\nThanks for the explanation. It never occurred to me that IE would have been the used as part of the library. In consideration of the evolution of Powershell, I suppose it made sense in 3.0 when it was generated specifically for Windows. I still think ConvertFrom-Html is sort of a hack (no offense intended). For maximum compatibility, it would be better to have rewrite the library to parse the HTML in a similar manner that the IE Library did it and return a compatible object type.\r\n\r\n\r\nWhile -UseBasicParsing removes the one class defined by IE (mshtml library), it also removes other objects unnecessarily, Scripts, AllElements, Forms to name a few that are readily available. It seems it should be easier to override the ParsedHtml than to write a crutch app to append to the call.\r\n",
      "created_at": "2018-10-06T02:00:47Z",
      "updated_at": "2018-10-06T02:00:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@wyzerd This would mean porting IE that is not real.",
      "created_at": "2018-10-06T16:24:17Z",
      "updated_at": "2018-10-06T16:24:17Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@wyzerd \r\n\r\n> it should be easier to override the ParsedHtml than to write a crutch app to append to the call.\r\n\r\nThis is an Open Source project. So if you feel this is a low level of effort, you are free to create a pull request to do so. \ud83d\ude03 ",
      "created_at": "2018-10-06T17:07:24Z",
      "updated_at": "2018-10-06T17:07:24Z"
    },
    {
      "author": "wyzerd",
      "author_association": "NONE",
      "body": "@markekraus \r\nTo be fair, I didn't say low level. However, writing ConvertFrom-HTML is likely to be more complex than an override of the single element of the HtmlWebResponseObject. Saddest part about it is I don't even care about that single mshtml element. What I want is the scripts element that is completely compatible, but removed because of the implementation. \r\n\r\nIt is a good suggestion though and I really could use the time to sharpen my tools. ",
      "created_at": "2018-10-06T20:48:09Z",
      "updated_at": "2018-10-06T20:48:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> However, writing ConvertFrom-HTML is likely to be more complex than an override of the single element of the HtmlWebResponseObject.\r\n\r\nI'm not sure it is more complex. Besides, there are other needs for a ConvertFrom-HTML object besides Web Cmdlet results. \r\n\r\nI also think separating HTML parsing from IWR is the right move even if IE was x-plat and we could still use the same underlying API on all supported systems. The default HTML parsing and the reliance on IE is one very common Windows PowerShell pain-point for using IWR in headless environments. (Because IE had to be configured before first use). \r\n\r\nIMO, the design choices in the early IWR and IRM to break the singe responsibility principle in favor of ease of use has hamstrung the cmdltes to this day. Decoupling these cmdlets from their dependencies and opening those dependencies to more general use is good move, even if it is a breaking change to do so. ",
      "created_at": "2018-10-06T23:23:19Z",
      "updated_at": "2018-10-06T23:23:19Z"
    },
    {
      "author": "thenecroscope",
      "author_association": "NONE",
      "body": "Hi,\r\n\r\nCan I check if there is any progress on this out of interest? Will this be resolved/added into Powershell 7 and / or .Net Core 3? Perhaps I should raise the request with the .net Core team. This was a really handy feature.\r\n\r\nMany thanks!\r\nSteve",
      "created_at": "2019-06-18T08:00:20Z",
      "updated_at": "2019-06-18T08:00:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since  new Microsoft Edge is based on Chromium we could discover Chromium engine on system and utilize the API.",
      "created_at": "2020-03-14T18:41:34Z",
      "updated_at": "2020-03-14T18:41:34Z"
    },
    {
      "author": "jdelforno",
      "author_association": "NONE",
      "body": "Ran into this today as well.\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core \r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0`",
      "created_at": "2020-07-28T06:31:40Z",
      "updated_at": "2020-07-28T06:31:40Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I think @kamome283 module is a better way with AngleSharp than try to communicate with an external process. \r\nhttps://github.com/kamome283/AngleParse\r\n\n\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/26428614?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/kamome283/AngleParse\">kamome283/AngleParse</a></strong></div><div>HTML parsing and processing tool for PowerShell. Contribute to kamome283/AngleParse development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-07-28T12:15:04Z",
      "updated_at": "2020-07-28T12:15:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems that the community has helped fill in this gap with modules on PowerShellGallery to specifically handle parsing html.",
      "created_at": "2020-10-19T19:52:41Z",
      "updated_at": "2020-10-19T19:52:41Z"
    },
    {
      "author": "francisco-lafe",
      "author_association": "NONE",
      "body": "So, simply put, this Invoke-WebRequest cmdlet is not compatible for PS7 if I developed a script on PS5? \r\nGiven that all the online information is mixed and you never know when they're talking about PS5 or PS7.",
      "created_at": "2021-09-13T17:26:19Z",
      "updated_at": "2021-09-13T17:26:19Z"
    },
    {
      "author": "wisemoth",
      "author_association": "NONE",
      "body": "> Given that all the online information is mixed and you never know when they're talking about PS5 or PS7.\r\n\r\nTo be fair the documentation hosted at Microsoft makes it very easy to choose between (Windows) Powershell 5.1 and (say) Powershell 7.1; for example:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.1\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-5.1\r\n\r\nThere you can (for example) see different text for `-UseBasicParsing`\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest\">Invoke-WebRequest (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Invoke-WebRequest cmdlet sends HTTP and HTTPS requests to a web page or web service. It parses the response and returns collections of links, images, and other significant HTML elements. This cmdlet was introduced in PowerShell 3.0. Beginning in PowerShell 7.0, Invoke-WebRequest supports proxy configuration defined by environment variables. See the Notes section of this article.  Important The examples in this article reference hosts in the contoso.com domain. This is a fictitious domain used by Microsoft for examples. The examples are designed to show how to use the cmdlets. However, since the contoso.com sites do not exist, the examples do not work. Adapt the examples to hosts in your environment.  </div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest\">Invoke-WebRequest (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Invoke-WebRequest cmdlet sends HTTP, HTTPS, FTP, and FILE requests to a web page or web service. It parses the response and returns collections of forms, links, images, and other significant HTML elements. This cmdlet was introduced in Windows PowerShell 3.0.  Note By default, script code in the web page may be run when the page is being parsed to populate the ParsedHtml property. Use the -UseBasicParsing switch to suppress this.   Important The examples in this article reference hosts in the contoso.com domain. This is a fictitious domain used by Microsoft for examples. The examples are designed to show how to use the cmdlets. However, since the contoso.com sites do not exist, the examples do not work. Adapt the examples to hosts in your environment.  </div></blockquote>",
      "created_at": "2021-09-13T18:27:55Z",
      "updated_at": "2021-09-13T18:27:56Z"
    },
    {
      "author": "serialhex",
      "author_association": "NONE",
      "body": "@wisemoth did you intentionally make 2 links to the same thing for invoke-webrequest?  because both of those links point to the same URL and give the same information (for PowerShell 7,2).  If you're trying to say that the information is not mixed then doing this disproves your point...",
      "created_at": "2021-12-12T19:55:34Z",
      "updated_at": "2021-12-12T19:55:34Z"
    },
    {
      "author": "francisco-lafe",
      "author_association": "NONE",
      "body": "> @wisemoth did you intentionally make 2 links to the same thing for invoke-webrequest? because both of those links point to the same URL and give the same information (for PowerShell 7,2). If you're trying to say that the information is not mixed then doing this disproves your point...\r\n\r\nYou're using the link previews created by github....",
      "created_at": "2021-12-13T15:34:26Z",
      "updated_at": "2021-12-13T15:34:26Z"
    },
    {
      "author": "serialhex",
      "author_association": "NONE",
      "body": "Huh, i guess I am... I sit corrected.  Why isn't the preview of the complete link? ehhh... automated technology failing us all again!  Sorry about that.",
      "created_at": "2021-12-13T17:03:47Z",
      "updated_at": "2021-12-13T17:03:47Z"
    }
  ],
  "created_at": "2016-12-09T19:31:49Z",
  "number": 2867,
  "state": "closed",
  "title": "Invoke-Webrequest is missing some properties, like .ParsedHtml and .AllElements",
  "updated_at": "2021-12-13T17:03:47Z"
}