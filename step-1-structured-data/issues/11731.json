{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11731",
  "author": "scotthardwick",
  "body": "Similar to the recent PR that added the -AsUTC switch to Get-Date, we should also have the ability to set Local DateTimeKind as well.\r\n\r\nExamples of how this would work:\r\n\r\n```\r\nGet-Date \"1/12/2020 4:00pm\" -Format \"MM/dd/yyyy HH:mm K\"\r\n# The DateTimeKind here is Unspecified, so result is 01/12/2020 16:00\r\n\r\nGet-Date ((Get-Date \"1/12/2020 4:00pm\").ToUniversalTime()) -Format \"MM/dd/yyyy HH:mm K\"\r\nGet-Date \"1/12/2020 4:00pm\" -AsUTC -Format \"MM/dd/yyyy HH:mm K\"\r\n# The DateTimeKind here is Utc, so result is 01/12/2020 22:00 Z\r\n\r\nGet-Date ((Get-Date \"1/12/2020 4:00pm\").ToLocalTime()) -Format \"MM/dd/yyyy HH:mm K\"\r\nGet-Date \"1/12/2020 4:00pm\" -AsLocal -Format \"MM/dd/yyyy HH:mm K\"\r\n# The DateTimeKind here is Local, so result is 01/12/2020 10:00 -06:00\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea.\r\nFor the sake of completeness, `-AsUnspecified` would be helpful too, if you're expressly looking for an abstract point in time.\r\n\r\nI assume the intent of the `-As*` switches is to either _directly output_ a `[datetime]` instance with the indicated `.Kind` value (`UTC`, `Local`, `Unspecified`), or to make such an instance _the basis for applying the `-Format` / `-UFormat` format_.\r\n\r\nWe have to be careful about the logic of interpreting the _input_, however:\r\n\r\nFrom what I can tell, only `Get-Date -Date` with either a _string_ argument (except strings explicitly indicating UTC or containing a time-zone offset) or a `[datetime]` instance whose `.Kind` is `Unspecified` currently results in the _output_ `[datetime]` instance having `.Kind` `Unspecified`; otherwise, it is `Local` (or will be `Utc` with `-AsUtc`).\r\n\r\nThe tricky part is that `Unspecified` instances are treated _situationally_ either as representing UTC _or_ as representing LOCAL time:\r\n\r\n* `.ToUniversalTime()` interprets an `Unspecified` instance as `Local`\r\n* `.ToLocalTime()`  interprets an `Unspecified` instance as `Utc`(!)\r\n\r\nTherefore, as also implied by your last example command:\r\n\r\n```powershell\r\n# NOTE: Interprets the given date *as UTC*\r\nPS> (Get-Date \"1/12/2020 4:00pm\").ToLocalTime()\r\n\r\nSunday, January 12, 2020 11:00:00 AM   # e.g., in the US Eastern time zone\r\n\r\n```\r\n\r\nThis is .NET's behavior, over which we have no control, but I wonder if surfacing this behavior via\r\n`-AsLocal` would cause confusion:\r\n\r\n```powershell\r\n# !! If we just call .ToLocalTime() behind the scenes, we get the same behavior as above:\r\n# !! The given date is interpreted *as UTC* and then *converted to a local date*.\r\nGet-Date \"1/12/2020 4:00pm\" -AsLocal\r\n```\r\n\r\nMy expectation would be that the nominal date given (in text form) would be interpreted _as-is_ as a local date; which is the equivalent  of:\r\n\r\n```powershell\r\nPS> [datetime]::new((Get-Date \"1/12/2020 4:00pm\").Ticks, 'Local') | Select DateTime, Kind\r\n\r\nDateTime                             Kind\r\n--------                             ----\r\nSunday, January 12, 2020 4:00:00 PM Local\r\n```\r\n\r\nNote how the unspecified input date string was now interpreted _as_ a local time, as reflected in the output `[datetime]` instance, which has `.Kind` `Local`, as requested.\r\n\r\n",
      "created_at": "2020-01-30T20:51:12Z",
      "updated_at": "2020-01-30T20:51:12Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "+1 @mklement0.  I would expect it to use:\r\n\r\n```powershell\r\n[datetime]::Parse(\r\n    '4pm',\r\n    [cultureinfo]::CurrentCulture,\r\n    [Globalization.DateTimeStyles]::AssumeLocal)\r\n```",
      "created_at": "2020-01-31T13:41:09Z",
      "updated_at": "2020-01-31T13:41:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience, but note that since the `-Date` parameter is `[datetime]`-typed, I think it is the _parameter binder_ that performs the parsing up front (culture-_sensitively_, due to being a _cmdlet_ argument, as opposed to the culture-_invariant_  parsing that happens with _casts_ or _advanced functions_, which is a won't-fix inconsistency; see #6989)\r\n\r\nTherefore, I think `Get-Date` already sees the parsed result, which is a `[datetime]` instance with a `.Kind` value of `Unspecified` - hence my suggestion to use `[datetime]::new(<ticks>, <kind>)`.",
      "created_at": "2020-01-31T13:52:53Z",
      "updated_at": "2020-01-31T13:52:53Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": "@mklement0  and @SeeminglyScience Thanks for joining in!\r\n\r\nIf we are including all three DateTimeKind options, do you think we need a parameter more like\r\n-AsDateTimeKind Utc\r\n-AsDateTimeKind Local\r\n-AsDateTimeKind Unspecified\r\n?\r\n\r\n-AsUTC hasn't been part of a formal release yet, so now would be the time to change it if the PowerShell team was going to?\r\n",
      "created_at": "2020-01-31T14:58:59Z",
      "updated_at": "2020-01-31T14:58:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'd say, given that there's only _3_ enumeration values whose number is unlikely to grow, it's easier on users to use distinct switches, `-AsUtc`, `-AsLocal`, `-AsUnspecified`.",
      "created_at": "2020-01-31T15:01:58Z",
      "updated_at": "2020-01-31T15:01:58Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": "@mklement0 Fair point. I can accept that ;-)",
      "created_at": "2020-01-31T15:04:23Z",
      "updated_at": "2020-01-31T15:04:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Then again, for invocation with programmatically constructed parameters something like `-AsKind Utc|Local|Unspecified` is preferable...\r\n\r\nHaving our cake and eating it too (providing `-AsUtc` as an effective alias of `-AsKind Utc`, ...) is also an option, but might get confusing / be a pain to implement (many parameter sets).\r\n\r\n",
      "created_at": "2020-01-31T15:10:45Z",
      "updated_at": "2020-01-31T15:10:45Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": ";-)  I have only started posting suggestions for PowerShell in the last few days and I hate to ask for the moon, so I am trying to be semi-conservative in my asks.  I will take it either way ;-)",
      "created_at": "2020-01-31T15:13:33Z",
      "updated_at": "2020-01-31T15:13:33Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Since we're adding multiple options here for the kind it should be an enum not switch parameter. Right now if we add `-AsUtc` and `-AsLocal` and `-AsUnspecified` those three switch parameters will need to be in separate parameter sets since you can't have multiple passed at the same time.",
      "created_at": "2020-02-04T22:14:44Z",
      "updated_at": "2020-02-04T22:14:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "[As stated before](https://github.com/PowerShell/PowerShell/issues/11731#issuecomment-580772269), for _programmatic_ construction of arguments `-AsKind <kind>` is preferable; that doesn't necessary preclude _also_ providing _convenience aliases_ (`-AsUtc` for `-AsKind Utc`, ...; they wouldn't be the first of their kind), but I get that this (a) could be a paint to _implement_ (proliferation of parameter sets) and (b) the duplication could cause _conceptual confusion_. \r\n\r\nIn short: I'm personally fine with _only_ implementing `-AsKind <kind>`, if that's the consensus.\r\n\r\nHowever, we should then act quickly, before 7.0 GA ships with the recently implemented `-AsUtc` switch.",
      "created_at": "2020-02-04T22:21:08Z",
      "updated_at": "2020-02-04T22:23:16Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Do you have any examples of a alias switch parameter mapping to another parameter? ",
      "created_at": "2020-02-05T23:18:09Z",
      "updated_at": "2020-02-05T23:18:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The one that readily comes to mind is `Get-Location -Stack` for `Get-Location -StackName ''`, but, if memory serves, there are more; they're not easy to search for.\r\n",
      "created_at": "2020-02-05T23:38:36Z",
      "updated_at": "2020-02-05T23:38:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "More relatable examples:\r\n\r\n* In `Get-ChildItem`: `-Directory` / for `Attributes -Directory`, `-File` for `-Attributes !Directory`, `-Hidden` for `-Attributes Hidden`, `-ReadOnly` for `-Attributes ReadOnly`, `-System` for `Attributes System`. \r\n\r\n* In `Import-Module`: `-Global` for `-Scope Global` (\"The `Global` parameter is equivalent to the `Scope` parameter with a value of `Global`.\" - [help](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/import-module?view=powershell-7)).\r\n\r\nI'm curious, though, @ThomasNieto: Are you asking not just because you were curious / weren't convinced that there is such a thing, or are you philosophically opposed to the concept?",
      "created_at": "2020-02-06T02:57:47Z",
      "updated_at": "2020-02-06T02:59:35Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I was unaware of them or had used them without knowing. The concern I have with them is that you can get into scenarios like this where you can pass conflicting parameters. Normally tab completion will prevent a user from passing parameters that cannot be used together. In the first example `-Global` and `-Scope` can't be used together but is allowed by tab completion since they're in the same parameter set. The second example is where both can be used at the same time if all attributes are met.\r\n\r\nTo sum it up, I think convenience parameters have a place where they can be used in conjunction with the other parameter. PowerShell has done a good job with parameter sets protecting the user from passing parameters that cannot be used together through tab completion and help.\r\n\r\n```powershell\r\nC:\\> Import-Module AssignedAccess -Global -Scope Local\r\nImport-Module: The 'Global' and 'Scope' parameters cannot be specified together. Remove one of these parameters, and then try running the command again.\r\n```\r\n\r\n```powershell\r\nC:\\> Get-ChildItem -Attributes Directory -Hidden\r\n\r\n\r\n    Directory: C:\\\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd--hs           12/4/2019 10:42 PM                $Recycle.Bin\r\nl--hs           12/4/2019 11:35 PM                Documents and Settings -> C:\\Users\r\nd--h-            2/3/2020 10:09 AM                ProgramData\r\nd--hs           12/4/2019 11:35 PM                Recovery\r\nd--hs            2/5/2020  6:09 PM                System Volume Information\r\n```",
      "created_at": "2020-02-06T03:21:53Z",
      "updated_at": "2020-02-06T03:21:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> or had used them without knowing.\r\n\r\nThat's a testament to their usefulness.\r\n\r\n> To sum it up, I think convenience parameters have a place where they can be used in conjunction with the other parameter\r\n\r\nWhile you _can_ squeeze combinations out of `-File`/ `-Directory`, ... vs. `-Attributes`, it's awkward and potentially self-defeating:\r\n\r\n```powershell\r\n# Allowed, but nonsensical\r\nGet-ChildItem -File -Attributes directory\r\n\r\n# The more intuitive way to write your example, using shortcut aliases only\r\nGet-ChildItem -Directory -Hidden\r\n```\r\n\r\nThe far more typical case is to use one _or_ the other; if there's something you cannot model with combining the shortcut aliases alone, you're better off using _just_ `-Attributes`.\r\n\r\nWith _single-choice_ enumerations - as in the case of `-Global` vs. `-Scope Global` and in our case, `-AsUtc`, ... vs. `-AsKind Utc` - conceptual confusion doesn't even arise, because the shortcut aliases _mustn't_ be combined with the verbose parameter.\r\n\r\nAs such, these single-choice scenarios strike me as the _ideal_ use case for shortcut aliases.\r\n\r\nThat `Import-Module` currently implements this exclusion awkwardly is not an argument against the concept.\r\n\r\nSimilarly, the fact that _implementing_ such mutual exclusion is currently cumbersome is not an argument - it just means that we need  to make implementing this easier, as has been attempted before, in this since-withdrawn RFC: https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0001-Mutual-Exclusion-Parameters-and-Properties.md\r\n\r\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>",
      "created_at": "2020-02-06T03:47:21Z",
      "updated_at": "2020-02-06T03:48:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To continue the discussion from https://github.com/PowerShell/PowerShell/pull/13084#discussion_r454955330, where @iSazonov  wrote:\r\n\r\n> I guess the DateTimeKind was added to mitigate Datetime type limitations (today we could use DateTimeOffset). **I do not think that we should use DateTimeKind broadly**.\r\n\r\nAgreed that `[datetimeoffset]` is always the better choice, but`Get-Date` is  currently a wrapper for `[datetime]` only and for reasons of backward compatibility it will have to remain that way, at least by default. \r\n\r\nTherefore, it makes sense to support it more fully, and to also offer `-AsLocal` and `-AsUnspecified` / `-AsKind <kind>`.\r\n\r\nA possible alternative is to eliminate the `Unspecified` kind from `Get-Date` as follows, in which case _only_ implementing `-AsUtc` would be sufficient:\r\n\r\n* Unless `-AsUtc` is passed, _always_ return a `Local` date.\r\n\r\nThis would mean that commands such as `Get-Date 2020-1-1`, which currently return an `Unspecified` date, would then return a `Local` date, which may be more in line with what users expect.\r\n\r\nTechnically, though, it is a breaking change.\r\n\r\n\r\n",
      "created_at": "2020-07-16T09:13:15Z",
      "updated_at": "2020-07-16T09:13:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "AsUTC was added in Preview only (#11611) and we can replace it with general parameter like `-AsKind <kind>` or `-DateTimeKind <kind>`. No needs exist for other parameters.\r\n\r\n/cc @brendandburns ",
      "created_at": "2020-07-16T10:54:23Z",
      "updated_at": "2020-07-16T10:58:05Z"
    },
    {
      "author": "aetos382",
      "author_association": "CONTRIBUTOR",
      "body": "I think it would be complete to take [TimeZoneInfo](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo) (or its `Id`) instead of [DateTimeKind](https://docs.microsoft.com/en-us/dotnet/api/system.datetimekind) (in which case the output would be [DateTimeOffset](https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset)).\r\nAs a special case of `TimeZoneInfo`, it supports `UTC` and `Local`.\r\n\r\n---\r\n\r\nFor example, I may want to know what time '10:00 AM PDT' is in Japanese time (this format is often used as the start time for some event).\r\nSo, I think it would be useful if I could convert the time zone as follows.\r\n\r\n`Get-Date -Date '2020-07-25 10:00' -TimeZone PDT -AsTimeZone JST`\r\n\r\nBut, time zone abbreviations such as 'PDT' and 'JST' are not specified in ISO 8601 and are not official.\r\nAlso, it is unclear whether 'JST' refers to 'Japan Standard Time' or 'Jerusalem Standard Time'.\r\nThus, I am not sure if we should accept these notations as arguments.\r\n\r\nThis command will accept the following formats.\r\nBut, if the command only accepts values in the following form, I don't think this specification is so useful.\r\nBecause before I can use the command, I have to find out the official name of the time zone or its offset.\r\n\r\n`Get-Date -Date '2020-07-25 10:00' -TimeZone 'America/Los_Angeles' -AsTimeZone 'Asia/Tokyo'`\r\n`Get-Date -Date '2020-07-25 10:00' -Offset -7 -AsOffset +9`",
      "created_at": "2020-07-24T20:44:10Z",
      "updated_at": "2020-07-24T20:59:44Z"
    },
    {
      "author": "aetos382",
      "author_association": "CONTRIBUTOR",
      "body": "I think we should be cautious about using `SwitchParameter` and `ParameterSetName` together, as they don't work well together.\r\nFor example, not setting `-AsUTC` is equivalent to specifying `-AsUTC:$false`.\r\nHowever, if `-AsUTC` and `-AsLocal` are mutually exclusive by parameter set, then if `-AsUTC` is not set, `-AsLocal` can be set, but if `-AsUTC:$false` is specified, `-AsLocal` cannot be set.",
      "created_at": "2020-07-24T21:36:57Z",
      "updated_at": "2020-07-24T21:36:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@aetos382 RE: parameter sets - yes, that's how it's designed, you're not supposed to be able to use them together. Switches supporting a `-Switch:$false` option doesn't change that, really, I don't think that allowing both for that reason is very clear or sensible. It's much clearer to show users via parameter sets (which are directly reflected in the syntax diagrams in the `Get-Help` output) which switches can and can't be used in tandem. It would be pointless and confusing to display a syntax diagram that _seems_ to allow both, when in practice only one can be used.\r\n\r\nAs for the time zone suggestion, it would be best if you requested that in a new issue as it is an entirely separate request IMO.",
      "created_at": "2020-07-24T22:39:02Z",
      "updated_at": "2020-07-24T22:39:12Z"
    }
  ],
  "created_at": "2020-01-30T16:49:08Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 11731,
  "state": "open",
  "title": "Add -AsLocal switch to Get-Date",
  "updated_at": "2020-07-24T22:39:12Z"
}