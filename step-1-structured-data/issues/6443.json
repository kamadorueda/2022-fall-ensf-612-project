{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6443",
  "author": "musm",
  "body": "Powershell 6 is slow to start up compared to powershell\r\n```\r\nfunction time($block) {\r\n    $sw = [Diagnostics.Stopwatch]::StartNew()\r\n    &$block\r\n    $sw.Stop()\r\n    $sw.Elapsed\r\n}\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n5      1      17115  1\r\n\r\nvs\r\n\r\nMajor  Minor  Patch  PreReleas BuildLabel\r\n                     eLabel\r\n-----  -----  -----  --------- ----------\r\n6      0      2\r\n\r\n\r\nmus@mus-laptop ~\r\n> time {powershell -NoProfile -c exit}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 233\r\nTicks             : 2337327\r\nTotalDays         : 2.70523958333333E-06\r\nTotalHours        : 6.492575E-05\r\nTotalMinutes      : 0.003895545\r\nTotalSeconds      : 0.2337327\r\nTotalMilliseconds : 233.7327\r\n\r\n\r\n\r\nmus@mus-laptop ~\r\n> time {pwsh -NoProfile -c exit}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 540\r\nTicks             : 5400421\r\nTotalDays         : 6.25048726851852E-06\r\nTotalHours        : 0.000150011694444444\r\nTotalMinutes      : 0.00900070166666667\r\nTotalSeconds      : 0.5400421\r\nTotalMilliseconds : 540.0421\r\n\r\n\r\n\r\n\r\n\r\n> time {cmd /c exit}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : **42**\r\nTicks             : 426119\r\nTotalDays         : 4.93193287037037E-07\r\nTotalHours        : 1.18366388888889E-05\r\nTotalMinutes      : 0.000710198333333333\r\nTotalSeconds      : 0.0426119\r\nTotalMilliseconds : 42.6119\r\n\r\n\r\n\r\nWinver: 17115.1\r\n\r\n```\r\n",
  "closed_at": "2020-12-07T19:35:20Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like assemblies aren't being crossgen'd so startup time is affected by JIT\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.1> [System.Reflection.AssemblyName]::GetAssemblyName(\"${pwd}\\System.Management.Automation.dll\") | fl *\r\n\r\n\r\nName                  : System.Management.Automation\r\nVersion               : 6.0.1.0\r\nCultureInfo           :\r\nCultureName           :\r\nCodeBase              :\r\nEscapedCodeBase       :\r\nProcessorArchitecture : MSIL\r\nContentType           : Default\r\nFlags                 : PublicKey\r\nHashAlgorithm         : SHA1\r\nVersionCompatibility  : SameMachine\r\nKeyPair               :\r\nFullName              : System.Management.Automation, Version=6.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n```\r\n",
      "created_at": "2018-03-21T02:57:43Z",
      "updated_at": "2018-03-21T02:57:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like assemblies are being crossgen'd.  However, getting many messages from crossgen.exe that certain things aren't supported, which means those methods stay as MSIL (which probably explains why the assembly says it's MSIL).  This also means that the MSIL needs to be JIT on startup.  I think this is what's impacting the startup performance.  We'll need to continue this investigation to see if anything we can do here.",
      "created_at": "2018-03-21T18:02:11Z",
      "updated_at": "2018-03-21T18:02:11Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Honestly even powershell 5 is very slow **(6 times slower)** than CMD. It would be good to have powershell 6 within 2~3 times the speed of  cmd. \r\n\r\nFor example on my computer python is only 2 times slower than CMD to start...\r\n",
      "created_at": "2018-03-21T20:45:35Z",
      "updated_at": "2018-03-21T20:45:35Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "It would be great to have better startup time since custom profiles add on top of that. But honestly, PowerShell easily makes up those seconds when it comes to getting stuff done (not only in terms of time to run but also the time to write the code/command) \ud83d\ude04 ",
      "created_at": "2018-03-24T00:10:15Z",
      "updated_at": "2018-03-24T00:10:15Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "> It would be great to have better startup time since custom profiles add on top of that. But honestly, PowerShell easily makes up those seconds when it comes to getting stuff done (not only in terms of time to run but also the time to write the code/command) \ud83d\ude04\r\n\r\n\r\nHonestly, this is not a very good argument. Same thing could be said about windows start up times or python start up times. First time to boot/startup is pretty important. ",
      "created_at": "2018-03-25T18:32:11Z",
      "updated_at": "2018-03-25T18:32:11Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "On the other hand, cmd.exe is a native exe that does next to nothing on startup. pwsh.exe is a managed exe that sets up a complex execution environment. \r\n\r\nWe should of course strive to improve the startup performance, but comparing to completely different environments with very diffrent capabilities is not really relevant.\r\n",
      "created_at": "2018-03-25T20:04:24Z",
      "updated_at": "2018-03-25T20:04:24Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "> On the other hand, cmd.exe is a native exe that does next to nothing on startup. pwsh.exe is a managed exe that sets up a complex execution environment.\r\n\r\nWe should of course strive to improve the startup performance, but comparing to completely different environments with very diffrent capabilities is not really relevant.\r\n\r\nAgreed, which is why I included Powershell 6 and Python 3 performance relative to CMD. It seems that powershell should be able to be within 2-3 times the startup speed of CMD, putting it in line with other interactive languages.",
      "created_at": "2018-03-25T20:06:55Z",
      "updated_at": "2018-03-25T20:06:55Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "> Agreed, which is why I included Powershell 6 and Python 3 performance relative to CMD. It seems that powershell should be able to be within 2-3 times the startup speed of CMD, putting it in line with other interactive languages.\r\n\r\nBeing 'interactive' is just one trait of many. The environments are _very_ different. \r\nPowerShell has an adaptable type system that abstracts many different underlying type systems. It has an extensible formatting system that renders objects to text. It has an object based pipeline. It has an adaptable prompt, tab completion etc.\r\n\r\nAll of these takes time to initialize, especially the extensible types and formatting systems.\r\n\r\nAs Steve said, there is an issue with the assemblies not being crossgen-ed as they should, so we spend quite a lot of extra time jitting IL. That must be fixed.\r\n\r\nBut even with that fixed, there are differences in scope and the dependencies on the CLR/DLR that will make powershell slower to start than cmd and python.\r\n",
      "created_at": "2018-03-26T00:31:18Z",
      "updated_at": "2018-03-26T00:31:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I would venture to guess that if python were to have a more expressive REPL and a deep framework available and ready to use on the first line, its load times would be on-par with `pwsh`. I have seen plenty of python scripts with long init times due to dependency loading for more advanced uses. Python starts fast by default because it loads with less available by default. Comparing the start times between PowerShell and other shells and scripting languages is a bit hard to do unless they are all closer in default feature parity. none of the languages I have experience with come with as mush on-by-default as PowerShell does (for better or worse).",
      "created_at": "2018-03-26T01:08:34Z",
      "updated_at": "2018-03-26T01:08:34Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "One idea is to do the   jitting  the first time the function is called (which will make the first time to actually call the function slow, but subsequent calls fast).  In addition to this, a set of  frequently utilized functions can be precompiled/jitted functions on startup.",
      "created_at": "2018-03-30T18:13:27Z",
      "updated_at": "2018-03-30T18:13:27Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@musm, the whole product is crossgen:ed. What @SteveL-MSFT  said in the beginning is that something in this process is failing which makes process startup slower.",
      "created_at": "2018-03-30T18:36:32Z",
      "updated_at": "2018-03-30T18:36:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't think there's much we can do in 6.1.0.  Will follow-up with dotnetcore team.",
      "created_at": "2018-06-18T17:47:23Z",
      "updated_at": "2018-06-18T17:47:23Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I feel like this conversation got unecessarily defensive.\r\n\r\nWe all know that some of the tools mentioned are like comparing a sedan to a coupe. So what? Do you want to start comparing performance of actual scripts in these tools doing actual tasks? _None of that actually matters, because the simple topic in the original post is correct:_ \r\n\r\nThe startup time of **PowerShell** 6.0.2 is around **_double_** that of **PowerShell** 5.1\r\n\r\nThe startup time of other scripting languages just serves to put the speed in perspective: even though it's measured in milliseconds, even the \"faster\" speed is slow.",
      "created_at": "2018-06-20T04:42:08Z",
      "updated_at": "2018-06-20T04:42:08Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I would close as well because the regression that happened once is fixed and 6.1 launches now like a rocket.",
      "created_at": "2018-06-20T06:16:53Z",
      "updated_at": "2018-06-20T06:16:53Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm not seeing any sort of improvement in launch time on 6.1 preview-3.  It is disappointing that 6.1 is slower to launch than both 5.1 and 6.0.2 given all the perf improvement talk on .NET Core 2.1:\r\n![image](https://user-images.githubusercontent.com/5177512/41657742-92520476-7451-11e8-9aab-d5d27d57125e.png)\r\n\r\n",
      "created_at": "2018-06-20T12:18:50Z",
      "updated_at": "2018-06-20T12:18:50Z"
    },
    {
      "author": "santoro-mariano",
      "author_association": "NONE",
      "body": "Powershell 5.1 vs Powershell 6.2:\r\n\r\n![2019-06-18-11-05-45](https://user-images.githubusercontent.com/15754816/59700872-f19baf00-91b9-11e9-9c8e-150c3f0fdae5.gif)\r\n\r\nOS Name: Microsoft Windows Server 2016 Standard\r\nOS Version: 10.0.14393 N/A Build 14393",
      "created_at": "2019-06-18T16:25:08Z",
      "updated_at": "2019-06-18T16:25:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like we still have an issue with 7-preview.1.  .NET team is already working on improvements to startup, we should continue to check this with new previews.\r\n\r\n```powershell\r\nPS C:\\Users\\slee> $total = 0; 1..100 | % { $total += (Measure-Command { powershell -nop -nologo -c 1 }).TotalMilliseconds };$total/100\r\n190.219938\r\nPS C:\\Users\\slee> $total = 0; 1..100 | % { $total += (Measure-Command { pwsh-preview -nop -nologo -c 1 }).TotalMilliseconds };$total/100\r\n452.461919\r\nPS C:\\Users\\slee> $total = 0; 1..100 | % { $total += (Measure-Command { pwsh -nop -nologo -c 1 }).TotalMilliseconds };$total/100\r\n346.560211\r\n```\r\n",
      "created_at": "2019-06-20T15:00:50Z",
      "updated_at": "2019-06-20T15:01:02Z"
    },
    {
      "author": "eedwards-sk",
      "author_association": "NONE",
      "body": "```pwsh\r\n> $total = 0; 1..100 | % { $total += (Measure-Command { pwsh-preview -nop -nologo -c 1 }).TotalMilliseconds };$total/100;\r\n394.33809\r\n```\r\n\r\nstill quite slow on `7.0.0-preview.2`, as well",
      "created_at": "2019-08-14T18:47:31Z",
      "updated_at": "2019-08-14T18:47:31Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "For Steve's [one-liners](https://github.com/PowerShell/PowerShell/issues/6443#issuecomment-504060576), I have (on Windows):\r\n\r\n| PS version | Time (ms) |\r\n| ----------- | ----------- |\r\n| 5.1            | 404           |\r\n| 6.2.2         | 444           |\r\n| 7.0.0-preview.2 |                    546 |\r\n| 7.0.0-dailypreview3-30639 |  494 |",
      "created_at": "2019-08-15T13:48:55Z",
      "updated_at": "2019-08-15T15:51:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Obviously we added some commits at 7.0 Preview3 time which slow down startup compared with 6.2.\r\nI prepared a fix which remove ~10ms in the Steve's test.\r\nAnd I am thinking about still another fix which I hope save some ms.",
      "created_at": "2019-08-21T12:38:27Z",
      "updated_at": "2019-08-21T12:38:27Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "I have often decided to use `bash` (via git for Windows, not WSL) purely because it starts up \"nearly instantly\" enough. Powershell (any version I've tried, including Core / 6) is slow enough on the machine I have to use at work.\r\n\r\nSlow startup time is also a big criticism I've heard from more Linuxy people I've talked to. I've convinced some of them that structured objects are better than text, but the startup time and general sluggishness compared to other shells puts them off.",
      "created_at": "2019-08-21T12:45:05Z",
      "updated_at": "2019-08-21T12:45:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's still work to be done to improve startup perf.  Using an updated version of my [test](https://gist.github.com/SteveL-MSFT/157ee8bbac939582b8b859584676c795):\r\n\r\n```\r\nPSVersion       Time (ms)\r\n---------       ---------\r\n5.1.18362.10000    169.64\r\n6.2.1              311.96\r\n7.0.0-preview.3    399.98\r\n```\r\n\r\nNote that without major changes, it's unlikely we will be as fast as 5.1 because it uses ngen which means .NET Framework does native compilation for your specific system on the first cold start of powershell.exe.  .NET Core doesn't have ngen so we rely on crossgen to pre-compile to a target architecture, but crossgen isn't as complete as ngen in generating native code because it's precompiled rather than at runtime.\r\n",
      "created_at": "2019-08-21T16:03:05Z",
      "updated_at": "2019-08-21T16:05:20Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Whilst further optimising the startup would be nice, we should not forget that this startup performance is one thing, but PowerShell's general performance also plays an important part where potentially more time can be shaved off. My profile takes nearly a second due to some modules like `posh-git` taking a long time to load. Due to general improvements, 7.0 is still faster than 6.2 to use for me simply because my `$Profile` loads faster. Out of curiosity: would it be e.g. possible to import a module in a non-blocking way as jobs don't work in this scenario? Using `Invoke-Pester` the first time takes over a second as well the first time due to the module needing to be imported (the module is currently not optimised with the module builder pattern to squeeze everything into a monolithic file at build time) and I see this part of the negative, laggy experience that PowerShell has in some scenarios (don't even get me started on tab completion, which sometimes takes seconds and even cancellation of a it takes ages....)",
      "created_at": "2019-08-21T16:25:33Z",
      "updated_at": "2019-08-21T16:32:38Z"
    },
    {
      "author": "eedwards-sk",
      "author_association": "NONE",
      "body": "Having used PowerShell 2/3 extensively back on Windows, then having used bash/sh extensively on Linux, the startup time difference is absolutely staggering.\r\n\r\nWhere it really makes it painful for someone on Linux, is when running executable scripts using a shebang. Typically with bash you write a lot of scripts with a shebang, e.g `#!/usr/bin/env bash`\r\n\r\nyou also also might run numerous scripts in a row that call other scripts that also use the shebang\r\n\r\ne.g.\r\n\r\n./foo\r\n```\r\n#!/usr/bin/env bash\r\n\r\n./bar\r\n```\r\n\r\n./bar\r\n```\r\n#!/usr/bin/env bash\r\n\r\necho \"Hello from bar!\"\r\n```\r\n\r\nWith bash/sh, this isn't a problem, you don't really notice any speed issues opening subshells / new processes like this.\r\n\r\nYou also might be calling numerous executable scripts in a row from the interactive shell.\r\n\r\nThe reason this matters, is that with pwsh, using the shebang (`#!/usr/bin/env pwsh`) causes each script ran to run as slow as that \"first startup\".\r\n\r\nThat means taking the example above, calling `foo` would take 2x the time it takes to just run `pwsh`.\r\n\r\nIt also means that running multiple powershell scripts (that use shebangs) in an interactive shell (either from say bash, or even already from powershell), is extremely slow.\r\n\r\nCompare this to when you first run `pwsh`, and then from inside that shell, run the exact same scripts but as `.ps1` files rather than relying on the shebang. It runs basically instantaneously (within the existing pwsh process).\r\n\r\nTo me, this is the biggest issue with the slow pwsh startup. It's not that it's slow on startup the first time that really matters, it's the fact that using shebangs means it makes every single invocation that slow or slower.\r\n\r\nSwitching from using shebangs to making everyone type `pwsh -File foo.ps1` or whatever, is not a smooth transition. Speaking from experience, I never call bash scripts by typing `bash foo.bash`, I make them executable and call them directly.",
      "created_at": "2019-08-21T16:32:02Z",
      "updated_at": "2019-08-21T16:32:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">My profile takes nearly a second due to some modules like posh-git taking a long time to load. \r\n\r\n> don't even get me started on tab completion, which sometimes takes seconds and even cancellation of a it takes ages....\r\n\r\nIt seems a root of the issue is discussed in #10309 - Safer API slow down the import module code path notably (there is extra double call the Safer API!).",
      "created_at": "2019-08-22T03:19:16Z",
      "updated_at": "2019-08-22T03:20:00Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "I still am finding pwsh is twice as slow on the latest version compared to powershell",
      "created_at": "2019-10-16T19:35:05Z",
      "updated_at": "2019-10-16T19:35:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quoted my comment on a related issue https://github.com/PowerShell/PowerShell/issues/7402#issuecomment-576943388\r\n> From 5.1 to 6.0/6.1/6.2, the worse startup time was mainly because of the use of `crossgen` vs. `ngen`. `ngen`, which is used by `powershell.exe`, generates more efficient code as it's targeting the particular machine the code runs on; while `crossgen` has to target a wide range of machines and thus generates code that's less efficient but more resilient.\r\nIn 6.2 time frame, #8341 improved the startup time by about 25% comparing with 6.1.\r\n>\r\n> From 6.2 to 7.0, the startup time regressed mainly because .NET Core started to use the Ready-to-Run format for `System.Private.CoreLib.dll` and maybe a few other core libraries. They were ngen'ed previously.",
      "created_at": "2020-01-23T22:13:06Z",
      "updated_at": "2020-01-23T22:13:06Z"
    },
    {
      "author": "gulshan",
      "author_association": "NONE",
      "body": "Can this be compiled with CoreRT?",
      "created_at": "2020-01-24T01:46:34Z",
      "updated_at": "2020-01-24T01:46:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quote from the CoreRT README.md:\r\n\r\n> Unsupported features: Dynamic loading (e.g. Assembly.LoadFile), dynamic code generation (e.g. System.Reflection.Emit), Windows-specific interop (e.g. COM, WinRT)\r\n\r\nPowerShell depends on the Dynamic Language Runtime (DLR) which heavily depends on dynamic code generation. Also, dynamic loading is a fundamental requirement for PowerShell.",
      "created_at": "2020-01-24T17:40:38Z",
      "updated_at": "2020-01-24T17:40:38Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Powershell 7 times:\r\n\r\n![image](https://user-images.githubusercontent.com/4319522/77037011-b4519100-6986-11ea-8d5a-1f27e93f35bb.png)\r\n\r\n\r\npwsh 2.2x slower  than powershell\r\n",
      "created_at": "2020-03-19T06:09:51Z",
      "updated_at": "2020-03-19T06:10:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I was going to upgrade because 5.1 has a font issue, but version 7 is half the speed as others have said.\r\n\r\n@nu8 Just to be clear, it's only the startup suffering the perf degradation. The steady runtime performance is much better in PowerShell 7. So unless you are heavily relying on `pwsh -c` or `pwsh -file` in your daily workflow, it should be good for you to upgrade to PowerShell 7.",
      "created_at": "2020-06-08T23:23:30Z",
      "updated_at": "2020-06-08T23:23:30Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "That's precisely the issue and the reason I opened this @nu8.\r\n\r\nI suspect we are not the only ones preaching about this.\r\n\r\nI right click and open PowerShell in the current directory **many** times a day. It's painfully slow, especially when I compare it to the **near instant** times of, say, launching WSL.\r\n ",
      "created_at": "2020-06-19T06:05:18Z",
      "updated_at": "2020-06-19T06:05:18Z"
    },
    {
      "author": "Bouke",
      "author_association": "NONE",
      "body": "The testing here is all without loading a profile (`-NoProfile`) and looking at startup times of a shell of almost 1 second. I would consider even 0.1 second as being a tad on the slow side.\r\n\r\n|Version|Startup Time|\r\n|-|-|\r\n|5|0.3s|\r\n|6.2.3|4.5s|\r\n|7.0.2|0.6s|\r\n\r\nMind you that with plugins enabled startup will suffer even more. I have two plugins enabled: PoshGit and Z-AutoJump. My startup time with these two plugins is:\r\n\r\n|Version|Startup Time|\r\n|-|-|\r\n|5|2.0s|\r\n|6.2.3|4.8s|\r\n|7.0.2|2.2s|\r\n\r\nCompare that with startup times on macOS (iTerm):\r\n|Shell|Startup Time|\r\n|-|-|\r\n|zsh 5.7.1 (no plugins)|0.00s|\r\n|zsh 5.7.1 (with lots of plugins)|0.14s|\r\n|pwsh 7.0.0 (no plugins)|0.43s|\r\n",
      "created_at": "2020-07-09T18:26:36Z",
      "updated_at": "2020-07-09T19:18:02Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "@Bouke totally agree.  Note,  posh-git is notoriously bad for adding at least 500ms to the start time.\r\n\r\nAnd yes even 1 second is a ridiculous start time for an interactive shell.  Start times need to  get under 100ms for the best UX. ",
      "created_at": "2020-07-09T18:29:50Z",
      "updated_at": "2020-07-09T18:29:50Z"
    },
    {
      "author": "Isti115",
      "author_association": "NONE",
      "body": "As someone, who has pwsh as his default shell under linux, this greatly affects me, so I would much appreciate any possible improvement! Not only is launching a terminal window noticeably slower, but I just cannot have quick powershell scripts run on my hotkeys. (Which I have quite a few of that I rely on, since I'm using [sway](https://github.com/swaywm/sway) as a window manger.)\r\n\r\nI need to go back to bash or perl for these purposes, which are much more infuriating to write stuff in, than powershell, which is in my opinion a much better system overall, that's why I'm sticking to it, even though there are quite a few small inconveniences. (Such as for example the '<' file redirection operator missing, which is expected by some programs, such as vim, but luckily it can be fixed by telling it to use pipes instead.)\r\n\r\nAnyway, some updates that make `pwsh -c` viable for more or less instantaneous small things would be very welcome!\r\nThanks for all the work of the development team, my life is already much better by having a shell with proper syntax and programmability (e.g. the `| % { }` foreach and such things are awesome! That same thing would be so much more complicated in bash...) instead of the _\"everything's just text, use cut, sed, awk, grep, ...\"_ mess that all the POSIX compatible shells are!",
      "created_at": "2020-07-16T11:19:51Z",
      "updated_at": "2020-07-16T11:23:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Isti115 Fundamental problem is that managed runtime initialization is significantly slower than native code. .Net team made many improvements but managed will never be as fast as native at startup.\r\nIn the repo performance improvements was also made. I do not think we can make more in the milestone.\r\n\r\nCheat: you can create and run simple C# infinite service with one function - load all PowerShell dlls.\r\n(As result all dlls will be already in memory before you run PowerShell)\r\n(For the service you can use PowerShell too - run and Start-Sleep -Seconds 65535.)\r\n",
      "created_at": "2020-07-16T15:58:49Z",
      "updated_at": "2020-07-16T15:58:49Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Can parts of the initialization be done after the REPL is started? \r\n1. Initialize necessary code for the REPL\r\n2. Initialize everything else afterwards.",
      "created_at": "2020-07-16T16:01:28Z",
      "updated_at": "2020-07-16T16:01:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think REPL is more for C# scripts.\r\nFor PowerShell there is a hosting idea from Jason but it is not easy to implement I guess.",
      "created_at": "2020-07-16T16:45:20Z",
      "updated_at": "2020-07-16T16:45:20Z"
    },
    {
      "author": "Isti115",
      "author_association": "NONE",
      "body": "Hmm, reading all the suggestions I came up with the idea of a simple PowerShell script running continuously in the background reading a FIFO as it's input and executing whatever commands get piped in there. I know that this is a very messy solution, because variables and contexts could get mixed up, but if I am careful enough when writing the commands and ensure that they have no side effects (I mean, in terms of the execution context, otherwise it would make no sense to run the commands at all. :smile:) this could work.",
      "created_at": "2020-07-21T15:11:51Z",
      "updated_at": "2020-07-21T15:11:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We started new wave of startup scenario optimizations in #14268. Join us for contributing, reviewing and testing!\r\nAlso we expect many improvements for .Net 6.0 from .Net team - we will benefit from this automatically.",
      "created_at": "2020-12-03T07:54:49Z",
      "updated_at": "2020-12-03T07:54:49Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Closing in favor of the more actionable issue that @iSazonov wrote (thanks!), #14268 \r\n\r\nThis is something we should always strive to improve, but I think this thread has gone somewhat stale in terms of actionable technical info. ",
      "created_at": "2020-12-07T19:35:20Z",
      "updated_at": "2020-12-07T19:35:39Z"
    },
    {
      "author": "89z",
      "author_association": "NONE",
      "body": "Given the age of this issue, it seems it might be quite a while still until this is addressed in a serious way, if ever. And I am tired of dealing with the Unicode issues of 5.1. So I think it might be a good time to finally upgrade for me. So in the interest of finding the least bad option, I did my test again, against all the minor versions to current. The test:\r\n\r\n~~~\r\nMeasure-Command { .\\pwsh -noprofile -c exit }\r\n~~~\r\n\r\nVersion | Milliseconds\r\n--------|-------------\r\n5.1     | 83\r\n6.0.0   | 201\r\n6.1.0   | 214\r\n6.2.0   | 184\r\n7.0.0   | 217\r\n7.1.0   | 203\r\n7.1.1   | 214\r\n\r\nSo based on this, I will probably start using version 6.2.0, and just keep checking every minor version to see if things have improved.",
      "created_at": "2020-12-08T02:54:24Z",
      "updated_at": "2021-05-30T14:08:01Z"
    },
    {
      "author": "sergeevabc",
      "author_association": "NONE",
      "body": "Dear fellows, I am tired that PS 5.1 currently installed on my Windows 7 x64 (please, don\u2019t even mention W10) is unable to properly execute BOM-less *.ps1 with UTF8 strings (e.g. `$singer = \"Bj\u00f6rk\"; echo $singer` outputs as Bj\u0413\u00b6rk). That's why I downloaded both (portable) PS 6.2.7 and 7.2.0p7 and run as follows `pwsh.exe .\\test.ps1`. Indeed, they have no problem outputting UTF8, but the execution time is 2x slower: 320ms (5) vs 694ms (7) vs 760ms (6). Delay is noticeable and annoying. \r\n\r\nI am not a developer to grasp all the aforementioned mumbo jumbo on why the progress turned into regress, but I remember [there was a trick][1] to make early versions of PS run faster by `ngen install`. Is there something similar here, or we're doomed?\r\n\r\n[1]: https://superuser.com/questions/627077/windows-powershell-is-taking-long-time-to-start-the-first-time-after-windows-log?noredirect=1&lq=1",
      "created_at": "2021-07-04T12:23:18Z",
      "updated_at": "2021-07-04T12:32:27Z"
    }
  ],
  "created_at": "2018-03-20T23:18:41Z",
  "number": 6443,
  "state": "closed",
  "title": "pwsh is 2  times slower than powershell to load",
  "updated_at": "2021-07-04T12:32:27Z"
}