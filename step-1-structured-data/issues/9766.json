{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9766",
  "author": "vector-sec",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```python\r\nimport json, uuid, subprocess, base64\r\n\r\nPSCODE = '''\r\n[CmdletBinding()]\r\nparam\r\n(\r\n    $payload = (Read-Host -AsSecureString)\r\n)\r\nGet-Host\r\n'''\r\n\r\ndef base64_encode_powershell(input_string):\r\n    \"\"\"\r\n        Encodes input value in UTF-16 Little Endian, making it suitable for use with powershell's encoded command argument.\r\n    \"\"\"\r\n    byte_string = input_string.encode('utf-16-le')\r\n    encoded_data = base64.b64encode(byte_string)\r\n    return encoded_data\r\n\r\ndef create_ps_file(ps_name, ps_content):\r\n        ps_path = ps_name\r\n        with open(ps_path, 'w+') as file:\r\n            file.write(ps_content)\r\n        return ps_path\r\n\r\nps_args = {}\r\nps_args['URL'] = \"https://google.com\"\r\npayload = base64_encode_powershell(json.dumps(ps_args))\r\nps_path = create_ps_file('ps_' + str(uuid.uuid4()).replace('-','') + '.ps1', PSCODE)\r\noutput = subprocess.Popen([\"pwsh\", ps_path], stdin = subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\nstdout, stderr = output.communicate(payload)\r\nprint stdout\r\n```\r\n\r\n# Expected behavior\r\nstdout in the Python code should contain the output of Get-Host\r\n```none\r\nName             : ConsoleHost\r\nVersion          : 6.2.1\r\nInstanceId       : 5168dee8-2e5c-4967-9d78-b53372cf351d\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserI\r\n                   nterface\r\nCurrentCulture   : en-US\r\nCurrentUICulture : en-US\r\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n```\r\n\r\n# Actual behavior\r\nstdout in the Python code is empty, as is stderr\r\n```none\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Note\r\nThe expected behavior is observed when using PowerShell 5 on a Windows system, using the exact same Python code (except for changing pwsh to powershell.exe and adding a -f to the args in the subprocess call.\r\n",
  "closed_at": "2021-01-15T10:39:53Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Close as stale issue. Feel free to continue discussion.",
      "created_at": "2021-01-15T10:39:53Z",
      "updated_at": "2021-01-15T10:39:53Z"
    }
  ],
  "created_at": "2019-05-30T12:56:02Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 9766,
  "state": "closed",
  "title": "Powershell hangs or dies silently when running Read-Host -AsSecureString when invoked via Python subprocess",
  "updated_at": "2021-01-15T10:39:53Z"
}