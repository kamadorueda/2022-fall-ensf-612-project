{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4716",
  "author": "mklement0",
  "body": "<sup>Related: #4715.</sup>\r\n\r\nCurrently, compiled cmdlets apparently don't reflect in their parameter metadata which parameters support wildcard patterns.\r\n\r\nBy contrast, advanced functions that have `[SupportsWildcards()]`-decorated parameters already do, at least with `Get-Command`.\r\n\r\nTwo distinct fixes are required, it seems:\r\n\r\n* Consistently decorate parameters of compiled cmdlets that support wildcard patterns with the `[SupportsWildcards()]` attribute.\r\n\r\n* Make sure that the output from `Get-Help -Parameter` reflects that attribute.\r\n\r\n-------\r\n\r\nCurrently, whether a given compiled cmdlet's parameter supports wildcards must be gleaned from the _help description_.\r\n\r\n```powershell\r\n# Get-Command:\r\n# Attributes of the -Path parameter give no indication that wildcards are supported, \r\n# even though they are.\r\n> Get-Command Get-Item | % Parameters | % Path | % Attributes\r\n\r\n\r\nPosition                        : 0\r\nParameterSetName                : Path\r\nMandatory                       : True\r\nValueFromPipeline               : True\r\nValueFromPipelineByPropertyName : True\r\nValueFromRemainingArguments     : False\r\nHelpMessage                     : \r\nHelpMessageBaseName             : \r\nHelpMessageResourceId           : \r\nDontShow                        : False\r\nTypeId                          : System.Management.Automation.ParameterAttribute\r\n\r\n\r\n# Get-Help:\r\n# The only way to discover wildcard support is via Get-Help, via the parameter *description*.\r\n# Note that the attributes *contradict* the description:\r\n> Get-Help Get-Item -Parameter Path\r\n\r\n-Path <String[]>\r\n    Specifies the path to an item. This cmdlet gets the item at the specified location.\r\n    Wildcards are permitted.  # !! This is the ONLY indication that wildcards are supported.\r\n    This parameter is required, but the parameter name (\"Path\") is optional.\r\n    \r\n    Use a dot (.) to specify the current location. Use the wildcard character (*) to specify all the items in the current location.\r\n    \r\n    Required?                    true\r\n    Position?                    1\r\n    Default value                none\r\n    Accept pipeline input?       true (ByValue, ByPropertyName)\r\n    Accept wildcard characters?  false    #  !! Contradicts the above.\r\n    \r\n\r\n```\r\n\r\n--- \r\n\r\nBy contrast, advanced functions at least allow programmatic discovery via `Get-Command`:\r\n\r\n```powershell\r\nfunction foo { param([SupportsWildcards()] $Bar) $Bar }\r\nGet-Command foo | % Parameters | % Bar | Select-Object Attributes\r\n```\r\n\r\nThe above yields:\r\n\r\n```powershell\r\nKey Attributes                                                                   \r\n--- ----------                                                                   \r\n    {__AllParameterSets, System.Management.Automation.SupportsWildcardsAttribute}\r\n```\r\n\r\nHowever, using `Get-Help -Parameter` still doesn't reflect the attribute:\r\n\r\n```powershell\r\n> Get-Help foo -Parameter Bar\r\n\r\n-Bar <Object>\r\n    \r\n    Required?                    false\r\n    Position?                    0\r\n    Accept pipeline input?       false\r\n    Parameter set name           (All)\r\n    Aliases                      None\r\n    Dynamic?                     false\r\n    \r\n```\r\n\r\nIf you use comment-based help, however, the attribute _is_ reflected, although the output format changes significantly:\r\n\r\n```powershell\r\n<#\r\n.SYNOPSIS\r\n  Short description\r\n.DESCRIPTION\r\n  Long description\r\n.EXAMPLE\r\n  Example of how to use this cmdlet\r\n.EXAMPLE\r\n  Another example of how to use this cmdlet\r\n#>\r\nfunction foo { param([SupportsWildcards()] $Bar) $Bar }\r\n```\r\n\r\nNote how wildcard support is now reflected [_update_: formerly, the output format would change in the presence of comment-based help, and the wildcard attribute was labeled  \"globbing\"; this seems to be fixed as of at least PowerShell Core 7.1.0-preview.5]\r\n\r\n```powershell\r\n> Get-Help foo -Parameter Bar\r\n\r\n-Bar <Object>\r\n    \r\n    Required?                    false\r\n    Position?                    1\r\n    Default value                \r\n    Accept pipeline input?       false\r\n    Accept wildcard characters?  true\r\n```\r\n\r\n# Environment\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.7\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Help not showing it should be a separate issue",
      "created_at": "2017-09-19T20:09:45Z",
      "updated_at": "2017-09-19T20:09:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: In the documentation repo or here?",
      "created_at": "2017-09-19T23:34:01Z",
      "updated_at": "2017-09-19T23:34:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 looks like platyPS has support for this, so it appears to simply be a doc issue.  Thanks!\r\n",
      "created_at": "2017-09-20T00:43:21Z",
      "updated_at": "2017-09-20T00:43:21Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello / @SteveL-MSFT \r\nI have been working on a project to clean up the documentation so that it properly reflects which paramters support wildcards. This is a list of the paramters that need to be marked with the `[SupportsWildcards()]` option. Can we get some cycles to address this problem? \r\n\r\nModule | Cmdlet | Parameter\r\n-- | -- | --\r\nCimCmdlets | Get-CimClass | ClassName\r\nCimCmdlets | Get-CimClass | MethodName\r\nCimCmdlets | Get-CimClass | QualifierName\r\nCimCmdlets | Get-CimSession | Name\r\nCimCmdlets | Remove-CimSession | Name\r\nMicrosoft.PowerShell.Archive | Compress-Archive | Path\r\nMicrosoft.PowerShell.Core | Clear-History | CommandLine\r\nMicrosoft.PowerShell.Core | Disable-PSSessionConfiguration | Name\r\nMicrosoft.PowerShell.Core | Disconnect-PSSession | Name\r\nMicrosoft.PowerShell.Core | Enable-PSSessionConfiguration | Name\r\nMicrosoft.PowerShell.Core | Export-ModuleMember | Alias\r\nMicrosoft.PowerShell.Core | Export-ModuleMember | Cmdlet\r\nMicrosoft.PowerShell.Core | Export-ModuleMember | Function\r\nMicrosoft.PowerShell.Core | Export-ModuleMember | Variable\r\nMicrosoft.PowerShell.Core | ForEach-Object | MemberName\r\nMicrosoft.PowerShell.Core | Get-Verb | Verb\r\nMicrosoft.PowerShell.Core | Get-Command | Name\r\nMicrosoft.PowerShell.Core | Get-Command | Noun\r\nMicrosoft.PowerShell.Core | Get-Command | ParameterName\r\nMicrosoft.PowerShell.Core | Get-Command | ParameterType\r\nMicrosoft.PowerShell.Core | Get-Command | Verb\r\nMicrosoft.PowerShell.Core | Get-Help | Component\r\nMicrosoft.PowerShell.Core | Get-Help | Functionality\r\nMicrosoft.PowerShell.Core | Get-Help | Name\r\nMicrosoft.PowerShell.Core | Get-Help | Parameter\r\nMicrosoft.PowerShell.Core | Get-Help | Path\r\nMicrosoft.PowerShell.Core | Get-Help | Role\r\nMicrosoft.PowerShell.Core | Get-Job | Command\r\nMicrosoft.PowerShell.Core | Get-Job | Name\r\nMicrosoft.PowerShell.Core | Get-Module | Name\r\nMicrosoft.PowerShell.Core | Get-PSSessionConfiguration | Name\r\nMicrosoft.PowerShell.Core | Import-Module | Alias\r\nMicrosoft.PowerShell.Core | Import-Module | Cmdlet\r\nMicrosoft.PowerShell.Core | Import-Module | Function\r\nMicrosoft.PowerShell.Core | Import-Module | Name\r\nMicrosoft.PowerShell.Core | Import-Module | Variable\r\nMicrosoft.PowerShell.Core | New-Module | Function\r\nMicrosoft.PowerShell.Core | New-ModuleManifest | AliasesToExport\r\nMicrosoft.PowerShell.Core | New-ModuleManifest | CmdletsToExport\r\nMicrosoft.PowerShell.Core | New-ModuleManifest | DscResourcesToExport\r\nMicrosoft.PowerShell.Core | New-ModuleManifest | FunctionsToExport\r\nMicrosoft.PowerShell.Core | New-ModuleManifest | VariablesToExport\r\nMicrosoft.PowerShell.Core | New-PSRoleCapabilityFile | VisibleAliases\r\nMicrosoft.PowerShell.Core | New-PSRoleCapabilityFile | VisibleCmdlets\r\nMicrosoft.PowerShell.Core | New-PSRoleCapabilityFile | VisibleExternalCommands\r\nMicrosoft.PowerShell.Core | New-PSRoleCapabilityFile | VisibleFunctions\r\nMicrosoft.PowerShell.Core | New-PSRoleCapabilityFile | VisibleProviders\r\nMicrosoft.PowerShell.Core | New-PSSessionConfigurationFile | VisibleAliases\r\nMicrosoft.PowerShell.Core | New-PSSessionConfigurationFile | VisibleCmdlets\r\nMicrosoft.PowerShell.Core | New-PSSessionConfigurationFile | VisibleExternalCommands\r\nMicrosoft.PowerShell.Core | New-PSSessionConfigurationFile | VisibleFunctions\r\nMicrosoft.PowerShell.Core | New-PSSessionConfigurationFile | VisibleProviders\r\nMicrosoft.PowerShell.Core | Receive-Job | ComputerName\r\nMicrosoft.PowerShell.Core | Receive-Job | Name\r\nMicrosoft.PowerShell.Core | Remove-Job | Name\r\nMicrosoft.PowerShell.Core | Remove-Module | Name\r\nMicrosoft.PowerShell.Core | Remove-PSSession | Name\r\nMicrosoft.PowerShell.Core | Save-Help | Module\r\nMicrosoft.PowerShell.Core | Stop-Job | Name\r\nMicrosoft.PowerShell.Core | Test-ModuleManifest | Path\r\nMicrosoft.PowerShell.Core | Test-PSSessionConfigurationFile | Path\r\nMicrosoft.PowerShell.Core | Unregister-PSSessionConfiguration | Name\r\nMicrosoft.PowerShell.Core | Update-Help | Module\r\nMicrosoft.PowerShell.Core | Where-Object | Value\r\nMicrosoft.PowerShell.Diagnostics | Get-Counter | Counter\r\nMicrosoft.PowerShell.Diagnostics | Get-Counter | ListSet\r\nMicrosoft.PowerShell.Diagnostics | Get-WinEvent | ListLog\r\nMicrosoft.PowerShell.Diagnostics | Get-WinEvent | ListProvider\r\nMicrosoft.PowerShell.Diagnostics | Get-WinEvent | LogName\r\nMicrosoft.PowerShell.Diagnostics | Get-WinEvent | Path\r\nMicrosoft.PowerShell.Diagnostics | Get-WinEvent | ProviderName\r\nMicrosoft.PowerShell.Diagnostics | Import-Counter | Counter\r\nMicrosoft.PowerShell.Diagnostics | Import-Counter | ListSet\r\nMicrosoft.PowerShell.Diagnostics | Import-Counter | Path\r\nMicrosoft.PowerShell.LocalAccounts | Get-LocalUser | Name\r\nMicrosoft.PowerShell.Management | Add-Content | Exclude\r\nMicrosoft.PowerShell.Management | Add-Content | Filter\r\nMicrosoft.PowerShell.Management | Add-Content | Include\r\nMicrosoft.PowerShell.Management | Add-Content | Path\r\nMicrosoft.PowerShell.Management | Clear-Content | Exclude\r\nMicrosoft.PowerShell.Management | Clear-Content | Filter\r\nMicrosoft.PowerShell.Management | Clear-Content | Include\r\nMicrosoft.PowerShell.Management | Clear-Content | Path\r\nMicrosoft.PowerShell.Management | Clear-Item | Exclude\r\nMicrosoft.PowerShell.Management | Clear-Item | Filter\r\nMicrosoft.PowerShell.Management | Clear-Item | Include\r\nMicrosoft.PowerShell.Management | Clear-ItemProperty | Exclude\r\nMicrosoft.PowerShell.Management | Clear-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Copy-Item | Exclude\r\nMicrosoft.PowerShell.Management | Copy-Item | Filter\r\nMicrosoft.PowerShell.Management | Copy-Item | Include\r\nMicrosoft.PowerShell.Management | Copy-Item | Path\r\nMicrosoft.PowerShell.Management | Copy-ItemProperty | Exclude\r\nMicrosoft.PowerShell.Management | Copy-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Get-ChildItem | Exclude\r\nMicrosoft.PowerShell.Management | Get-ChildItem | Filter\r\nMicrosoft.PowerShell.Management | Get-ChildItem | Include\r\nMicrosoft.PowerShell.Management | Get-ChildItem | Name\r\nMicrosoft.PowerShell.Management | Get-ChildItem | Path\r\nMicrosoft.PowerShell.Management | Get-ComputerInfo | Property\r\nMicrosoft.PowerShell.Management | Get-Content | Exclude\r\nMicrosoft.PowerShell.Management | Get-Content | Filter\r\nMicrosoft.PowerShell.Management | Get-Content | Include\r\nMicrosoft.PowerShell.Management | Get-Content | Path\r\nMicrosoft.PowerShell.Management | Get-EventLog | LogName\r\nMicrosoft.PowerShell.Management | Get-EventLog | Message\r\nMicrosoft.PowerShell.Management | Get-EventLog | Source\r\nMicrosoft.PowerShell.Management | Get-EventLog | UserName\r\nMicrosoft.PowerShell.Management | Get-HotFix | Description\r\nMicrosoft.PowerShell.Management | Get-Item | Exclude\r\nMicrosoft.PowerShell.Management | Get-Item | Filter\r\nMicrosoft.PowerShell.Management | Get-Item | Include\r\nMicrosoft.PowerShell.Management | Get-Item | Stream\r\nMicrosoft.PowerShell.Management | Get-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Get-ItemPropertyValue | Exclude\r\nMicrosoft.PowerShell.Management | Get-ItemPropertyValue | Filter\r\nMicrosoft.PowerShell.Management | Get-ItemPropertyValue | Include\r\nMicrosoft.PowerShell.Management | Get-Process | Name\r\nMicrosoft.PowerShell.Management | Get-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Get-Service | Exclude\r\nMicrosoft.PowerShell.Management | Get-Service | Include\r\nMicrosoft.PowerShell.Management | Get-Service | Name\r\nMicrosoft.PowerShell.Management | Get-Service | RequiredServices\r\nMicrosoft.PowerShell.Management | Get-TimeZone | Name\r\nMicrosoft.PowerShell.Management | Invoke-Item | Exclude\r\nMicrosoft.PowerShell.Management | Invoke-Item | Filter\r\nMicrosoft.PowerShell.Management | Join-Path | ChildPath\r\nMicrosoft.PowerShell.Management | Join-Path | Path\r\nMicrosoft.PowerShell.Management | Move-Item | Exclude\r\nMicrosoft.PowerShell.Management | Move-Item | Filter\r\nMicrosoft.PowerShell.Management | Move-ItemProperty | Exclude\r\nMicrosoft.PowerShell.Management | Move-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Move-ItemProperty | Include\r\nMicrosoft.PowerShell.Management | New-Item | Path\r\nMicrosoft.PowerShell.Management | Push-Location | Path\r\nMicrosoft.PowerShell.Management | Remove-Item | Path\r\nMicrosoft.PowerShell.Management | Remove-ItemProperty | Exclude\r\nMicrosoft.PowerShell.Management | Remove-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Remove-PSDrive | Name\r\nMicrosoft.PowerShell.Management | Rename-ItemProperty | Include\r\nMicrosoft.PowerShell.Management | Restart-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Restart-Service | Exclude\r\nMicrosoft.PowerShell.Management | Restart-Service | Include\r\nMicrosoft.PowerShell.Management | Restart-Service | Name\r\nMicrosoft.PowerShell.Management | Resume-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Resume-Service | Exclude\r\nMicrosoft.PowerShell.Management | Resume-Service | Include\r\nMicrosoft.PowerShell.Management | Set-Clipboard | Path\r\nMicrosoft.PowerShell.Management | Set-Content | Exclude\r\nMicrosoft.PowerShell.Management | Set-Content | Filter\r\nMicrosoft.PowerShell.Management | Set-Content | Include\r\nMicrosoft.PowerShell.Management | Set-Content | Path\r\nMicrosoft.PowerShell.Management | Set-Item | Exclude\r\nMicrosoft.PowerShell.Management | Set-ItemProperty | Filter\r\nMicrosoft.PowerShell.Management | Set-Location | Path\r\nMicrosoft.PowerShell.Management | Show-ControlPanelItem | CanonicalName\r\nMicrosoft.PowerShell.Management | Show-ControlPanelItem | Name\r\nMicrosoft.PowerShell.Management | Split-Path | Path\r\nMicrosoft.PowerShell.Management | Start-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Start-Service | Exclude\r\nMicrosoft.PowerShell.Management | Start-Service | Include\r\nMicrosoft.PowerShell.Management | Stop-Process | Name\r\nMicrosoft.PowerShell.Management | Stop-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Stop-Service | Exclude\r\nMicrosoft.PowerShell.Management | Stop-Service | Include\r\nMicrosoft.PowerShell.Management | Stop-Service | Name\r\nMicrosoft.PowerShell.Management | Suspend-Service | DisplayName\r\nMicrosoft.PowerShell.Management | Suspend-Service | Exclude\r\nMicrosoft.PowerShell.Management | Suspend-Service | Include\r\nMicrosoft.PowerShell.Management | Suspend-Service | Name\r\nMicrosoft.PowerShell.Management | Test-Path | Exclude\r\nMicrosoft.PowerShell.Management | Test-Path | Filter\r\nMicrosoft.PowerShell.Management | Test-Path | Include\r\nMicrosoft.PowerShell.Management | Test-Path | Path\r\nMicrosoft.PowerShell.Security | Get-Acl | Exclude\r\nMicrosoft.PowerShell.Security | Get-Acl | Filter\r\nMicrosoft.PowerShell.Security | Get-Acl | Include\r\nMicrosoft.PowerShell.Security | Get-Acl | Path\r\nMicrosoft.PowerShell.Security | Get-AuthenticodeSignature | FilePath\r\nMicrosoft.PowerShell.Security | Set-Acl | Exclude\r\nMicrosoft.PowerShell.Security | Set-Acl | Filter\r\nMicrosoft.PowerShell.Security | Set-Acl | Include\r\nMicrosoft.PowerShell.Security | Set-Acl | Path\r\nMicrosoft.PowerShell.Utility | Add-Type | AssemblyName\r\nMicrosoft.PowerShell.Utility | Add-Type | OutputAssembly\r\nMicrosoft.PowerShell.Utility | Clear-Variable | Exclude\r\nMicrosoft.PowerShell.Utility | Clear-Variable | Include\r\nMicrosoft.PowerShell.Utility | Clear-Variable | Name\r\nMicrosoft.PowerShell.Utility | Export-Alias | Name\r\nMicrosoft.PowerShell.Utility | Export-Alias | Path\r\nMicrosoft.PowerShell.Utility | Export-PSSession | CommandName\r\nMicrosoft.PowerShell.Utility | Format-Custom | Property\r\nMicrosoft.PowerShell.Utility | Format-Hex | Path\r\nMicrosoft.PowerShell.Utility | Format-Table | Property\r\nMicrosoft.PowerShell.Utility | Format-Wide | Property\r\nMicrosoft.PowerShell.Utility | Get-Alias | Definition\r\nMicrosoft.PowerShell.Utility | Get-Alias | Exclude\r\nMicrosoft.PowerShell.Utility | Get-Alias | Name\r\nMicrosoft.PowerShell.Utility | Get-FileHash | Path\r\nMicrosoft.PowerShell.Utility | Get-FormatData | TypeName\r\nMicrosoft.PowerShell.Utility | Get-TraceSource | Name\r\nMicrosoft.PowerShell.Utility | Get-TypeData | TypeName\r\nMicrosoft.PowerShell.Utility | Get-Variable | Exclude\r\nMicrosoft.PowerShell.Utility | Get-Variable | Include\r\nMicrosoft.PowerShell.Utility | Get-Variable | Name\r\nMicrosoft.PowerShell.Utility | Import-Alias | Path\r\nMicrosoft.PowerShell.Utility | Import-PowerShellDataFile | Path\r\nMicrosoft.PowerShell.Utility | Measure-Object | Property\r\nMicrosoft.PowerShell.Utility | Select-Object | ExcludeProperty\r\nMicrosoft.PowerShell.Utility | Select-Object | Property\r\nMicrosoft.PowerShell.Utility | Select-String | Exclude\r\nMicrosoft.PowerShell.Utility | Select-String | Include\r\nMicrosoft.PowerShell.Utility | Select-String | Path\r\nMicrosoft.PowerShell.Utility | Select-Xml | Path\r\nMicrosoft.PowerShell.Utility | Set-PSBreakpoint | Command\r\nMicrosoft.PowerShell.Utility | Set-TraceSource | Name\r\nMicrosoft.PowerShell.Utility | Set-Variable | Exclude\r\nMicrosoft.PowerShell.Utility | Set-Variable | Include\r\nMicrosoft.PowerShell.Utility | Sort-Object | Property\r\nMicrosoft.PowerShell.Utility | Tee-Object | FilePath\r\nMicrosoft.PowerShell.Utility | Unblock-File | Path\r\nMicrosoft.WsMan.Management | Enable-WSManCredSSP | DelegateComputer\r\nPackageManagement | Find-Package | Name\r\nPackageManagement | Find-PackageProvider | Name\r\nPackageManagement | Get-Package | Name\r\nPowershellGet | Find-Module | Name\r\nPowershellGet | Find-Script | Name\r\nPowershellGet | Get-InstalledScript | Name\r\nPowershellGet | Save-Module | Path\r\nPowershellGet | Save-Script | Path\r\nPowershellGet | Test-ScriptFileInfo | Path\r\nPowershellGet | Update-Module | Name\r\nPowershellGet | Update-ModuleManifest | AliasesToExport\r\nPowershellGet | Update-ModuleManifest | CmdletsToExport\r\nPowershellGet | Update-ModuleManifest | FunctionsToExport\r\nPowershellGet | Update-ScriptFileInfo | Path\r\nPSDesiredStateConfiguration | Get-DscResource | Name\r\n\r\n",
      "created_at": "2019-08-30T00:29:21Z",
      "updated_at": "2019-08-30T00:29:21Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think this is just a doc issue since creating a function with `SupportsWildcards` attribute doesn't show if the parameter supports wildcards. Seems the help system needs to check for this attribute and add the `Accept wildcard characters? true|false` message.\r\n\r\n```powershell\r\nC:\\> function Test-Wildcards { param([SupportsWildcards()][string]$Name) }\r\nC:\\> Get-Help Test-Wildcards -Parameter Name\r\n\r\n-Name <string>\r\n\r\n    Required?                    false\r\n    Position?                    0\r\n    Accept pipeline input?       false\r\n    Parameter set name           (All)\r\n    Aliases                      None\r\n    Dynamic?                     false\r\n```",
      "created_at": "2020-08-04T17:43:47Z",
      "updated_at": "2020-08-04T17:43:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ThomasNieto, yes, it's not _consistently_ shown; as noted in the OP, it is curiously the presence of _comment-based help_ that makes the attribute show.\r\n\r\n",
      "created_at": "2020-08-04T18:15:27Z",
      "updated_at": "2020-08-04T18:15:27Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "I think I may have found why it works for comment-based help but not for a command with no defined help.\r\n\r\nIf no comment-based help or external help for a command (cmdlet/function), help is generated from the command syntax. `GetPSObjectFromCmdletinfo` after a few methods finally calls `AddParameterProperties` which adds all the parameter information. This method does not have logic for `globbing` that comment-based parser generates.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4597b41396f8f24f73f0b43a26b8876efea0b0ec/src/System.Management.Automation/help/CommandHelpProvider.cs#L373\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/help/DefaultCommandHelpObjectBuilder.cs#L410\r\n\r\nComment-based parser adds `globbing` property.\r\nhttps://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/help/HelpCommentsParser.cs#L124",
      "created_at": "2020-08-04T20:31:06Z",
      "updated_at": "2020-08-04T20:31:06Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Opened PR #13353 to fix functions not displaying if a parameter supports wildcards when no comment-based help is present. I had to add logic to add the `globbing` property if `[SupportsWildcards]` is present and update the `ExtendedCmdletHelpInfo#parameter` view to display the `globbing` property.\r\n\r\n```powershell\r\nC:\\> function foo { param($Bar) $Bar }\r\nC:\\> Get-Help foo -Parameter Bar\r\n\r\n-Bar <Object>\r\n\r\n    Required?                    false\r\n    Position?                    0\r\n    Accept pipeline input?       false\r\n    Parameter set name           (All)\r\n    Aliases                      None\r\n    Dynamic?                     false\r\n    Accept wildcard characters?  false\r\n\r\n\r\n\r\nC:\\> function foo { param([SupportsWildcards()] $Bar) $Bar }\r\nC:\\> Get-Help foo -Parameter Bar\r\n\r\n-Bar <Object>\r\n\r\n    Required?                    false\r\n    Position?                    0\r\n    Accept pipeline input?       false\r\n    Parameter set name           (All)\r\n    Aliases                      None\r\n    Dynamic?                     false\r\n    Accept wildcard characters?  true\r\n```",
      "created_at": "2020-08-04T23:39:02Z",
      "updated_at": "2020-08-04T23:43:07Z"
    }
  ],
  "created_at": "2017-08-31T03:07:56Z",
  "number": 4716,
  "state": "open",
  "title": "Ensure programmatic discoverability of parameters that support wildcard patterns",
  "updated_at": "2020-10-16T18:47:09Z"
}