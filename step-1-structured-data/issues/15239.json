{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15239",
  "author": "mklement0",
  "body": "See also: #15250, #15261, #15276  - see overview in #15143.\r\n\r\nThe new-in-preview.5 `PSNativeCommandArgumentPassing` experimental feature aims to fix the longstanding problem with passing arguments to external programs, notably arguments with _embedded_ `\"` chars. and empty-string arguments. (see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606 for a summary of the previously required workarounds; #14692 is the PR that implemented the experimental feature).\r\n\r\nThe experimental feature:\r\n\r\n* _fully_ fixes the problem on Unix-like platforms.\r\n\r\n* _partially_ fixes it on Windows, because vital accommodations for high-profile CLIs are missing - see #15143\r\n\r\n* **_breaks_ `cmd /c` (`cmd /k`) calls**, where a command line for `cmd.exe` is passed as a _single string_ - which is **a common workaround for the problems with the previous behavior** (see https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-800418898)\r\n\r\nAs explained in https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-800376364, the old, broken behavior must be _retained_ in this very specific scenario, because `cmd.exe` actually _requires_ this broken behavior.\r\n\r\n## Steps to reproduce\r\n\r\nNote: To see the problem, you must use PowerShell Core 7.2.0-preview.5, with experimental feature `PSNativeCommandArgumentPassing` enabled and preference variable `$PSNativeCommandArgumentPassing` set to `'Standard'` (the default).\r\n\r\n```powershell\r\ncmd /c 'echo \"3\"'\r\ncmd /c \"echo `\"$(1+2)`\"\"\r\n```\r\n\r\n(Note that `cmd.exe`'s internal `echo` command _retains_ double-quoting _as passed on the command line_.)\r\n\r\n## Expected behavior\r\n\r\n```none\r\n\"3\"\r\n\"3\"\r\n```\r\n\r\nThis is the old - and in this exceptional case _correct_ - behavior.\r\n\r\n## Actual behavior\r\n\r\n```none\r\n\\\"3\\\"\r\n\\\"3\\\"\r\n```\r\n\r\nEmbedded `\"` chars. were passed escaped as `\\\"` - while this is _generally_ the right thing to do, it isn't when calling `cmd /c` or `cmd /k` with a command line passed as a single string.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.5\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-04-15T15:36:44Z",
  "number": 15239,
  "state": "open",
  "title": "Experimental feature PSNativeCommandArgumentPassing breaks cmd /c calls with embedded double quotes",
  "updated_at": "2021-06-09T21:45:19Z"
}