{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16562",
  "author": "JoeSalmeri",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nGet-Help for ps 7.1.5 and ps 7.2.0 shows\r\n\r\n The valid UFormat specifiers are displayed in the following table:\r\n\r\n| Format specifier |                                 Meaning                      |         Example          |\r\n| ---------------------- | ------------------------------------------------------- | --------------------------  |\r\n| `%u`                    | Day of the week - number                         | Sunday = 0               |\r\n\r\n05/01/2022 is a Sunday therefore the -uFormat %u should return 0\r\nps 7.1.5 correctly  returns 0 for Sunday \r\nps 7.2.0 incorrectly returns 7 for Sunday\r\n\r\nI also tested other \"Sunday\" dates and got the same results.\r\n\r\nThe DayOfWeek property correctly returns Sunday and using [int} for the DayofWeek correctly returns 0 so the new issue being reported is caused by the -uFormat %u changes that occurred in 7.2.0 as shown by the following code:\r\n\r\n    ps 7.1.5\r\n\r\n        Get-Date 05/01/2022 -uformat %u           # returns 0              - Correct\r\n        (Get-Date 05/01/2022).DayOfWeek         # returns Sunday    - Correct\r\n        [int](Get-Date 05/01/2022).DayOfWeek   # returns 0              - Correct\r\n\r\n\r\n    ps 7.2.0\r\n\r\n        Get-Date 05/01/2022 -uformat %u            # returns 7              - Wrong\r\n        (Get-Date 05/01/2022).DayOfWeek          # returns Sunday    - Correct\r\n        [int](Get-Date 05/01/2022).DayOfWeek    # returns 0              - Correct\r\n\r\nAll code above was executed without my pwsh profile loaded (pwsh -noprofile)\r\n\r\nThis issue exists with ps 7.2.0 running on Linux and on Windows 10.\r\n\r\nI also tested the issue on Linux using ps 7.1.3 and 7.1.4 and like 7.1.5 they do NOT have the issue.  \r\n\r\nI found the following old issue for Get-Date -Uformat, however, it is from 09/04/2017 and the issue I'm reporting was broken by the changes in 7.2.0 as it worked correctly in ps 7.1.3, 7.1.4, and 7.1.5 (and earlier versions too as I have used this code for many years all the way back to ps 7.0)\r\n\r\n    https://github.com/PowerShell/PowerShell/issues/4750\r\n\r\n\r\n\n\n### Expected behavior\n\n```console\nDocumented above for ps 7.1.5 and ps 7.2.0\n```\n\n\n### Actual behavior\n\n```console\nDocumented above for ps 7.1.5 and ps 7.2.0\n```\n\n\n### Error details\n\n```console\nNo errors occur, PS 7.2.0 just returns the the wrong value (7) for a Sunday date instead of the correct value 0 as per the documentation as per how it has worked in prior PS versions.\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Linux 5.15.5-1-default #1 SMP Thu Nov 25 09:36:40 UTC 2021 (83fc974)\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-08T12:00:47Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is `Get-Date 05/01/2022` output?",
      "created_at": "2021-12-06T16:00:21Z",
      "updated_at": "2021-12-06T16:00:21Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nps 7.1.5 Sunday, May 1, 2022 12:00:00 AM\r\nps 7.2.0 Sunday, May 1, 2022 12:00:00 AM\r\n\r\nAs show above in my bug report both 7.1.5 and 7.2.0 know that 05/01/2022 is a Sunday and\r\n[int](Get-Date 05/01/2022).DayOfWeek both return 0 but -uformat %u returns 0 (correctly for 7.1.5) and returns 7 (incorrectly for 7.2.0)\r\n\r\nSince they both return Sunday and both return 0 for [int] DayOfWeek it seems pretty clear that the -uformat %u code is what changed and is broken.\r\n\r\nDid you try the examples I originally provided and get different results?\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-06T16:12:59Z",
      "updated_at": "2021-12-06T16:12:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Doc for 7.2 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-date?view=powershell-7.2\r\n> <html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\n%u | Numeric day of the week (1-7) | Monday = 1, Sunday = 7\r\n-- | -- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-date\">Get-Date (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Get-Date cmdlet gets a DateTime object that represents the current date or a date that you specify. Get-Date can format the date and time in several .NET and UNIX formats. You can use Get-Date to generate a date or time character string, and then send the string to other cmdlets or programs. Get-Date uses the computer's culture settings to determine how the output is formatted. To view your computer's settings, use (Get-Culture).DateTimeFormat. </div></blockquote>",
      "created_at": "2021-12-06T16:13:44Z",
      "updated_at": "2021-12-06T16:13:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See also https://github.com/PowerShell/PowerShell/issues/4750#issuecomment-754365382",
      "created_at": "2021-12-06T16:16:24Z",
      "updated_at": "2021-12-06T16:16:24Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov @SteveL-MSFT \r\n\r\nGet-Help Get-Date -Full disagrees with what you posted\r\n\r\nDid you see that in my bug report?  Here it is again.\r\n\r\nGet-Help for ps 7.1.5 and ps 7.2.0 shows\r\n\r\n The valid UFormat specifiers are displayed in the following table:\r\n\r\n| Format specifier |                                 Meaning                      |         Example          |\r\n| ---------------------- | ------------------------------------------------------- | --------------------------  |\r\n| `%u`                    | Day of the week - number                         | Sunday = 0               |\r\n\r\nSunday has returned 0 in every version of powershell all the way back to powershell 5.1\r\n\r\nHere it is on Windows 10 powershell 5.1\r\n\r\nPS C:\\Users\\Joe> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1320\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1320\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS C:\\Users\\Joe> Get-Date 05/01/2022 -uformat %u\r\n0\r\n\r\nHere it is converted to int on powershell 5.1\r\n\r\nPS C:\\Users\\Joe> [int](Get-Date 05/01/2022).DayOfWeek\r\n0\r\n\r\n\r\n\r\nWhy would a change like this be made which breaks all existing code over the last 5 to 10 years ?\r\n\r\nI don't understand why this change was made.\r\n\r\nIn other UNRELATED bugs which I have reported I have been told that Yes what you found is a bug but we aren't fixing it because doing so would break people's code that depends on that behavior.\r\n\r\nIn this case pwsh 7.2.0 made a change from Sunday=0 to Sunday=7 breaking all existing code out there which depended on the documented behavior (which Get-Help Get-Date still has documented that way).   It's not even a bug in the older versions of powershell / pwsh.\r\n\r\n\r\nWhy would such a change be made when real bugs in other code won't be fixed because of code that depended on the broken behavior???   In this case the bug was created in 7.2.0.\r\n\r\nThis does not make sense to break existing code when there is no good reason to make the change to Sunday now equals 7.\r\n\r\nWhy would Get-Date 05/01/2022 -uformat %u return 7 but [int](Get-Date 05/01/2022).DayOfWeek return 0?\r\n\r\nObviously if MS really wants to change Sunday to 7 now instead of 0 somebody did an incomplete change because they forgot to update the documentation and [Int} DayOfWeek still says that Sunday = 0.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-06T16:36:25Z",
      "updated_at": "2021-12-06T16:41:27Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "> See also [#4750 (comment)](https://github.com/PowerShell/PowerShell/issues/4750#issuecomment-754365382)\r\n\r\nYes, I listed that OLD bug report in my initial bug report, however, what I reported is a change in PS 7.2.0 that was made which broke all existing code all the way back to powershell 5.1 that depended on the documented behavior.\r\n\r\nI am confused as to why were are debating this issue?\r\n\r\nClearly 7.2.0 changed the documented behavior breaking existing code for no good reason and did not even do a complete job of making the change.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-06T16:39:07Z",
      "updated_at": "2021-12-06T16:43:44Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov @SteveL-MSFT \r\n\r\nHere's the (Get-Culture).DateTimeFormat from ps 7.2.0 (7.1.5 returns the same)\r\n\r\n(Get-Culture).datetimeformat\r\n\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : /\r\nFirstDayOfWeek                   : Sunday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy h:mm:ss tt\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : h:mm:ss tt\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : M/d/yyyy\r\nShortTimePattern                 : h:mm tt\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {S, M, T, W\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n\r\nNote that the culture information says\r\n\r\nFirstDayOfWeek                   : Sunday\r\nCalendarWeekRule              : FirstDay\r\n\r\nSo culture also says that Sunday should be 0 like it has always been.\r\n\r\nThe ps 7.1 documentation also clearly states that Sunday = 0\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-date?view=powershell-7.1\r\n\r\n%u | Day of the week - number | Sunday = 0\r\n\r\nAs does the powershell 5.1 documentation\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Get-Date?view=powershell-5.1\r\n\r\n%u | Day of the week - number | Sunday = 0\r\n\r\n\r\nI see that this issue now has \"Resolution-Answered\" tag,\r\n\r\nThis issue has NOT been answered because no explanation has been given as to why this code breaking change was made which has been documented since at least powershell 5.1 to say that Sunday = 0?\r\n\r\nThis needs to be fixed.   We cannot have code breaking changes made for no good reason.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-06T16:58:34Z",
      "updated_at": "2021-12-06T17:01:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "pwsh should have a consistency on all platforms.\r\n%u is Unix format, it works right on Unix but not on Windows in previous versions. This was qualified as a bug. Now the behavior follows _ISO standard_ on all platforms.",
      "created_at": "2021-12-06T17:12:51Z",
      "updated_at": "2021-12-06T17:13:18Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov @SteveL-MSFT \r\n\r\nI agree TOTALLY that it should be consistent across platforms, however, this statement you made\r\n\r\n    \"%u is Unix format, it works right on Unix but not on Windows in previous versions.\"\r\n\r\nis simply NOT true.\r\n\r\nIt *WAS* consistent on both Windows and Linux BEFORE the changes were made in PS 7.2.0\r\n\r\nPrior to this change ALL prior versions of pwsh and powershell that I have used all the way back to powershell 5.1, so 5.1, 6.x, 7.x, 7.1.3, 7.1.4, 7.1.5 returned 0 for Sunday on BOTH Windows and Linux platforms ( where ps was available ).   \r\n\r\nMy existing code was regularly run on BOTH Windows and Linux platforms all the way back to Windows 7 and powershell 5.1 and on various Linux distros and Sunday always returned that it was 0.\r\n\r\nWindows 7 came out in 2009 so to saying that it did NOT working right on Windows in previous versions was absolutely not a true statement as my code has been running for the last 12 YEARS.\r\n\r\nWhen PS 6.x and 7.x came out I also started running the SAME ps code on Linux machines and in all cases the code worked flawlessly because Sunday consistently returned 0.\r\n\r\nAs I said above, [int]( Get-Date 05/01/2022).DayOfWeek still returns 0 so still treats Sunday as 0.\r\n\r\nWe need an answer which reflects the actual facts as to why this was changed because saying that it was inconsistent across platforms is not a fact as my code has worked fine for 12 years until this change was made.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-06T17:36:18Z",
      "updated_at": "2021-12-06T17:36:18Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov @SteveL-MSFT \r\n\r\nThis change NOT only breaks existing code but it violates basic documented design principles of PS.\r\n\r\nThey [System.DayOfWeek] enum returns that Sunday = 0\r\n\r\nIf you run this code\r\n\r\n    [System.Enum]::getvalues([type][System.DayOfWeek]) | ForEach-Object { echo \"$_ $($_.value__)\" }\r\n\r\nIt returns:\r\n\r\nSunday 0\r\nMonday 1\r\nTuesday 2\r\nWednesday 3\r\nThursday 4\r\nFriday 5\r\nSaturday 6\r\n\r\nThe same results are returned on BOTH Windows and Linux even on PowerShell 5.1 on Windows!\r\n\r\nThis change is also inconsistent with basic fundamental powershell concepts that say that lists type items are zero based (just like in C and other languages).\r\n\r\n\r\nHere is the PS 7.2.0 documentation for about_enum:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_enum?view=powershell-7.2\r\n\r\nShort description\r\n\r\nThe enum statement is used to declare an enumeration. An enumeration is a distinct type that consists of a set of named labels called the enumerator list.\r\n\r\nLong description\r\nThe enum statement allows you to create a strongly typed set of labels. That enumeration can be used in the code without having to parse or check for spelling errors.\r\n\r\n****Enumerations are internally represented as integers with a starting value of zero. The first label in the list is assigned the value zero.** The remaining labels are assigned with consecutive numbers.**\r\n\r\nIn the definition, labels can be given any integer value. Labels with no value assigned take the next integer value.\r\n\r\n\r\n[System.DayOfWeek} is an enumerator therefore according to the PS documentation enumerators are ZERO based.\r\n\r\nSo you cannot use values of Monday=1 through Sunday=7 because they violate the PS documented design of enumerators.\r\n\r\nYou also cannot change the [System::DayOfWeek] enum to use values 1-7 because then you will break all the code out there that used that enum because they would then get different values than they have previously gotten on ALL prior versions of PS!\r\n\r\nThis code change also creates the following issue\r\n\r\n       Get-Date 05/01/2022 -uFormat %u                 returning that Sunday = 7\r\n\r\n       [int](Get-Date 05/01/2022).DayOfWeek           returning that Sunday = 0\r\n\r\n\r\nI am struggling to see how such a simple bug report which documents a change that breaks existing code which worked on Windows and Linux all the way back to PowerShell 5.1 is not being seen a problem???\r\n\r\nWhoever accepted this code change clearly did not consider the implications and code breakage and they did not make sure that the change was complete and not half done.\r\n\r\nHow are these issues going to be resolved because you clearly cannot have some code return that Sunday = 7 and other code return that Sunday = 0 and how are you going to resolve the PS documentation for enums say that they are ZERO based.\r\n\r\nIt seems pretty clear to me that the solution is to revert this change because ALL other options I have discussed (or additional changes listed above) will break existing code all the way back to PowerShell 5.1.   \r\n\r\nI know I have repeated that multiple times because I want to stress the significance of of the issue.\r\n\r\nHow can you justify a code breaking change for something that was **not even a bug** and ignore more serious things **which are really BUGS** (like the fact that Copy-Item cannot produce consistent results) with the reason that fixing the Copy-Item bug would be code breaking???\r\n\r\nIt seems that the thought process is backwards:\r\n\r\nWe should NOT allow code breaking changes for something that is NOT REALLY a bug\r\n\r\nand \r\n\r\nWe should ALLOW code breaking changes to fix something that is REALLY a bug\r\n\r\n\r\nI've been a developer for over 30 years and programmed in more languages that I can count.\r\n\r\nI seriously doubt that most developers would think it makes sense to make code breaking changes for something that is NOT a bug and I also believe that those same developers would support code breaking changes that are to fix a bug.   \r\n\r\nIsn't that why we fix bugs in the first place?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_enum\">about Enum - PowerShell</a></strong></div><div>The `enum` statement is used to declare an enumeration. An enumeration is a distinct type that consists of a set of named labels called the enumerator list.</div></blockquote>",
      "created_at": "2021-12-06T19:53:37Z",
      "updated_at": "2021-12-06T19:53:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Again, %u is exclusively Unix format for years and it comes from ISO 8601. Unix `date` utility works so for years. See [example](https://github.com/PowerShell/PowerShell/issues/4750#issuecomment-754365382).\r\nMain rule for pwsh is to be consistent across platforms. So Gate-Time -UFormat was fixed to follow ISO 8601 standard and Unix behavior.\r\n\r\nIn fact, pwsh already has hundreds of changes that are incompatible with Windows PowerShell, and each new version widens the gap. There is no other way but to test your scripts when upgrading to a new version.\r\n\r\n",
      "created_at": "2021-12-07T03:44:02Z",
      "updated_at": "2021-12-07T03:44:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-08T12:00:46Z",
      "updated_at": "2021-12-08T12:00:46Z"
    }
  ],
  "created_at": "2021-12-06T15:48:37Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 16562,
  "state": "closed",
  "title": "pwsh 7.20 broke Get-Date -uformat results",
  "updated_at": "2021-12-08T12:00:47Z"
}