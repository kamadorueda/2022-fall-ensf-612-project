{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11531",
  "author": "TylerLeonhardt",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n1. Put any executable (ex. `myExe`) at the following path: `~/foo/`\r\n1. Add that path to your PATH\r\n```powershell\r\n$env:PATH = \"~/foo$([System.IO.Path]::PathSeparator)$env:PATH\"\r\n```\r\nTry to tab complete your executable or just run `myExe`\r\n\r\n# Expected behavior\r\n\r\nThe executable `myExe` is run.\r\n\r\nThis works just fine in bash and zsh and things like .NET global tools rely on the `~` support in the PATH so we should really fix this.\r\n\r\n## caveat\r\n\r\nBash seems to do more - it can handle variables inside of the PATH but that seems like overkill and I can't think of any example that uses that \"feature\".\r\n\r\nWe handle tilda pretty much everywhere else, we should be able to support it in application resolution.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nThe term 'myExe' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-daily.20200108\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-daily.20200108\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Sun Dec  1 18:59:03 PST 2019; root:xnu-4903.278.19~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": "2020-01-14T18:24:27Z",
  "comments": [
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "unfortunately, this means that you can't run .NET global tools in PowerShell without manual PATH changes",
      "created_at": "2020-01-08T22:56:00Z",
      "updated_at": "2020-01-08T22:56:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Does it come form https://github.com/dotnet/cli/issues/9321 ?",
      "created_at": "2020-01-09T04:58:00Z",
      "updated_at": "2020-01-09T04:58:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Part of this issue looks like a natural result of how Windows handles variables in PATH -- it supports cmd-type variables like `%USERPROFILE%` but essentially nothing else.\r\n\r\nI guess you could add special handling for additional tokens, but there's always the question of how far you want to go. At the end of the day no matter what you do, the dotnet tools using this kind of thing would only be usable from powershell, and essentially nowhere else in Windows.",
      "created_at": "2020-01-09T05:06:39Z",
      "updated_at": "2020-01-09T05:06:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, modifying system env variable in non-standard way is not good because other applications will do not understand this.\r\nAlso we can create file or directory with \"~\" name that could lead to path conflict.",
      "created_at": "2020-01-09T05:22:42Z",
      "updated_at": "2020-01-09T06:46:40Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I'm not asking for modification of the environment variable. I'm saying that on command discovery, we also treat `~` as the home directory.",
      "created_at": "2020-01-09T06:40:02Z",
      "updated_at": "2020-01-09T06:40:02Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Resolving variables is out of scope for this issue and I don't think I've ever seen PATH abuse like that so we probably don't need to have that discussion until an ask comes around. ",
      "created_at": "2020-01-09T06:41:53Z",
      "updated_at": "2020-01-09T06:41:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt You modify PATH in your repo steps so now I don't understand the issue. Do you mean that PATH already has \"~\" in PATH before pwsh started and we should handle this path?",
      "created_at": "2020-01-09T06:49:33Z",
      "updated_at": "2020-01-09T06:49:33Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Yes. .NET global tools add the following path to the PATH:\r\n\r\n```\r\n~/.dotnet/tools\r\n```\r\n\r\nThey do this on macOS by putting a file here:\r\n\r\n```\r\nPS > cat /etc/paths.d/dotnet-cli-tools\r\n~/.dotnet/tools\r\n```\r\n\r\nThis is at the OS level and not within PowerShell. This path on the PATH works fine in bash (meaning my .NET global tools do resolve just fine) but in PowerShell, it can't understand the `~` so global tools just don't resolve.",
      "created_at": "2020-01-09T17:00:40Z",
      "updated_at": "2020-01-09T17:00:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Shouldn't dotnet global tools be doing a platform check and using `%USERPROFILE%` instead for that purpose on Windows?",
      "created_at": "2020-01-09T17:07:37Z",
      "updated_at": "2020-01-09T17:07:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Not sure about the behavior on Windows, but he's talking about the macOS behavior.\r\n\r\nIf bash supports expanding <kbd>~</kbd> for command resolution then I agree that PowerShell should do the same (at least on the platforms that typically support it).\r\n\r\nThere seems to be a lot of confusion on the ask, so I'm going to try to clarify.  @TylerLeonhardt feel free to correct anything I get wrong:\r\n\r\nWhen using macOS (and probably *nix, someone will need to confirm):\r\n\r\n- Installing a dotnet global tool adds `~/.dotnet/tools` to `$env:PATH`\r\n- Bash already handles resolving <kbd>~</kbd> in `$env:PATH`\r\n- PowerShell does not resolve <kbd>~</kbd> in `$env:PATH` for any platform\r\n- But should support it's resolution on platforms that already support it outside of PowerShell",
      "created_at": "2020-01-09T17:21:24Z",
      "updated_at": "2020-01-09T17:21:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, I missed that. Thanks for clarifying! Yeah, on Unix systems that support `~` natively, PS should be supporting it in `$env:PATH` as well, absolutely.",
      "created_at": "2020-01-09T17:26:26Z",
      "updated_at": "2020-01-09T17:26:26Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> on Unix systems that support ~ natively\r\n\r\nFor some more context, we looked into it and some other tools that care about `PATH` on macOS didn't seem to be `~` or env var aware. There's a natural question of \"whose API is `PATH`?\", but it seems that bash has a particular behaviour here that's worth at least partially replicating",
      "created_at": "2020-01-09T18:30:40Z",
      "updated_at": "2020-01-09T18:30:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem is [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandPathSearch.cs#L414).  `[System.IO.Directory]::Exists(\"~\")` returns false.  We would need to handle `~` expansion.  How much of [Bash](https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html) behavior would we want to replicate?  The right place to perform the expansion is probably [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandDiscovery.cs#L1330)",
      "created_at": "2020-01-09T19:27:32Z",
      "updated_at": "2020-01-09T19:27:32Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Iterative makes sense here... Considering we have a pretty important scenario (.NET Global Tools) that uses just a regular tilda, that's probably a good place to start. In other words, supporting the first 2 scenarios on that Bash link:\r\n\r\n> ~\r\n> The value of $HOME\r\n>\r\n> ~/foo\r\n> $HOME/foo",
      "created_at": "2020-01-09T20:31:25Z",
      "updated_at": "2020-01-09T20:31:25Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "We've had a bit more discussion on this:\r\n\r\n- The OS cares about `PATH`, since it's used for [`execvp(3)`](https://linux.die.net/man/3/execvp)\r\n- The OS [does not expand `~`](https://stackoverflow.com/a/52084998) in that context\r\n- Some utilties, like `which` also do not expand `~`\r\n- But some others do, like `nano`/`vim`\r\n\r\nSo some questions I think are:\r\n\r\n- Should PowerShell expand `~` for its own PATH discovery purposes?\r\n- Should PowerShell expand `~` in arguments to native commands?\r\n- Should PowerShell expand `~` in PATH/other env vars before passing them through to subprocesses?\r\n- Should PowerShell do similar things with env vars within PATH etc. ?\r\n\r\nMy own thinking is that we should do the first and nothing more, since the first is convenient without breaking things, but the others all have the possibility of creating serious headaches.",
      "created_at": "2020-01-09T21:59:52Z",
      "updated_at": "2020-01-09T21:59:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From https://github.com/dotnet/cli/issues/9321 I am not sure that this will work on MacOs and zsh.",
      "created_at": "2020-01-10T12:56:35Z",
      "updated_at": "2020-01-10T12:56:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11552, which has now been successfully released as `v7.0.0-rc.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:39:01Z",
      "updated_at": "2020-01-16T23:39:01Z"
    }
  ],
  "created_at": "2020-01-08T22:54:02Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Engine-Providers"
  ],
  "number": 11531,
  "state": "closed",
  "title": "Handle ~ in PATH",
  "updated_at": "2020-01-16T23:39:02Z"
}