{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7995",
  "author": "rjmholt",
  "body": "`Set-PSBreakpoint` currently doesn't have a `-LiteralPath` parameter to set breakpoints in scripts. This means that setting a breakpoint in strangely named files like `hello [there].ps1` or on *nix `whoisth*s?.ps1` is harder than it should be.\r\n\r\nSee https://github.com/PowerShell/PowerShellEditorServices/pull/765 for a scenario where this has caused issues.",
  "closed_at": null,
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "`Set-PSBreakpoint` doesn't have a path parameter either. It just has `-Script` (which is poorly named, given the confusion with the `ScriptBlock` type).\r\n\r\nTo resolve this, I propose the following:\r\n\r\n1. Treat paths passed into `Get-PSBreakpoint` and `Set-PSBreakpoint` as literal paths.\r\n1. Update the `-Script` parameter on those cmdlets to accept pipeline input by property name.\r\n1. Add `PSPath` as a parameter alias for the `-Script` parameter on each of those cmdlets.\r\n1. Consider renaming `-Script` as `-FilePath` to match other PowerShell cmdlets that accept a literal path with no wildcard support, and add `-Script` as an alias for backwards compatibility.\r\n1. Consider adding a `-Script` (`-FilePath`) parameter that accepts pipeline input by property value with a `PSPath` alias in a new parameter set that would be added to `Enable-/Disable-/Remove-PSBreakpoint` to make it easier for users to turn breakpoints on or off or remove them according to their path with less pipelining.\r\n\r\nRationale:\r\n\r\n* Since the `-Script` parameter (or `-FilePath` parameter if we rename it) accepts multiple values, it is trivial for users who actually want to set a breakpoint on multiple files to do so using other cmdlets that support wildcard paths, in a pipeline.\r\n* Today if someone wants to get/set/enable/disable/remove a breakpoint on multiple files, since `-Script` does not support pipeline input, and since that parameter isn't on the enable/disable/remove cmdlets, it is much harder than it should be to do that, requiring all files to be in the same folder or using a loop to set the breakpoints. These changes would make that much easier.\r\n\r\nAs for risk, these are breakpoint cmdlets, which are intended for interactive use. Someone could have an automated process to set breakpoints on a bunch of files though as part of their dev/test cycle, and be interrupted by such a change. Still, that's dev/test, not production, and I think the risk is pretty low and worth considering.\r\n\r\nThoughts?",
      "created_at": "2019-07-11T20:25:52Z",
      "updated_at": "2019-07-11T20:25:52Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Maybe these cmdlets should just define the normal `Path/LiteralPath` parameters and configure `Script` as an alias for one of the two?",
      "created_at": "2019-07-11T21:10:17Z",
      "updated_at": "2019-07-11T21:10:17Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "My hesitancy there is:\r\n\r\n1. Parameter set bloat. \r\n1. The breakpoints that are created are associated with actual files, not wildcards, \r\n1. I sincerely doubt setting a breakpoint using a wildcard adds value today. It certainly doesn't for me, and if it does for others, it's limited to a single folder (i.e. if you want to limit breakpoints to your module, you need to use pipelines/other commands anyway to get all of the files in a folder hierarchy). Also, since it results in one breakpoint being created _per file_ that matches the wildcard, it's not that user friendly. The only use case I can come up with where I might restrict breakpoints to certain files would be if I'm debugging a module and I want to scope breakpoints to all files within that module, which means structure, which means pipelining actual files, not wildcards.",
      "created_at": "2019-07-11T21:20:42Z",
      "updated_at": "2019-07-11T21:20:42Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Good point on not needing wildcard support. So OK, only need a `Path` parameter with the appropriate pipeline bindings and aliases for PSPath and Script.",
      "created_at": "2019-07-11T23:30:14Z",
      "updated_at": "2019-07-11T23:30:31Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Wouldn't it be nice if a `-Path` parameter (perhaps with a certain attribute) implicitly included a `-LiteralPath` parameter. I'm sure there are flaws to that idea and here's probably a bad place to discuss it all in full, but just felt I should blurt it out.",
      "created_at": "2019-07-15T06:29:41Z",
      "updated_at": "2019-07-15T06:29:41Z"
    }
  ],
  "created_at": "2018-10-11T16:40:20Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 7995,
  "state": "open",
  "title": "Add -LiteralPath parameter to Set-PSBreakpoint",
  "updated_at": "2019-07-15T06:29:41Z"
}