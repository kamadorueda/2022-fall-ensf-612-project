{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14509",
  "author": "agowa338",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a user I want my `ForEach-Object -Parallel` jobs to be evenly distributed so that they finish at about the same time (and not all except one and that one continues running for an excessive extra amount of time).\r\n\r\n## Example use case\r\n\r\n1. This one works, but creates a thread for each and every host and because of the \"initialization part\" (loading the module and connecting to the server) it becomes quite bottlenecked.\r\n```powershell\r\n$ansibleInventory[\"all\"][\"children\"].GetEnumerator() ` # List of hosts grouped by tenant\r\n| Where-Object {$null -ne $_.Value[\"hosts\"]} ` # Filter out all tenants without hosts\r\n| ForEach-Object {$_.Value[\"hosts\"].GetEnumerator()} ` # Get a list of all host objects.\r\n| ForEach-Object -Throttlelimit 20 -UseNewRunspace -AsJob -Parallel {\r\n  Import-Module \"VMware.PowerCLI\"\r\n  Connect-ViServer ...\r\n  Do-Stuff\r\n}\r\n```\r\n\r\n2. Iterating over each tenant in parallel and within that loop iterate over each customer vm. This however results in an uneven distribution. For example customer 0-9 have 100 vms each, but customer 10 has 1000 vms. We're now basically back at single threaded performance.\r\n```powershell\r\n$ansibleInventory[\"all\"][\"children\"].GetEnumerator() ` # List of hosts grouped by tenant\r\n| Where-Object {$null -ne $_.Value[\"hosts\"]} ` # Filter out all tenants without hosts\r\n| ForEach-Object -Throttlelimit 20 -UseNewRunspace -AsJob -Parallel {\r\n  $_.Value[\"hosts\"].GetEnumerator() `\r\n  | ForEach-Object {\r\n    Import-Module \"VMware.PowerCLI\"\r\n    Connect-ViServer ...\r\n    Do-Stuff\r\n  }\r\n} `\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nAdding either a `Batch-Object -Size` command, or add `-BatchSize` as an additional parameter to `ForEach-Object`\r\n```powershell\r\n$ansibleInventory[\"all\"][\"children\"].GetEnumerator() `\r\n| Where-Object {$null -ne $_.Value[\"hosts\"]} `\r\n| ForEach-Object {$_.Value[\"hosts\"].GetEnumerator()} `\r\n| ForEach-Object -Throttlelimit 20 -BatchSize 20 -UseNewRunspace -AsJob -Parallel {\r\n  Import-Module \"VMware.PowerCLI\"\r\n  Connect-ViServer ...\r\n  Do-Stuff\r\n}\r\n```\r\nor\r\n```powershell\r\n$ansibleInventory[\"all\"][\"children\"].GetEnumerator() `\r\n| Where-Object {$null -ne $_.Value[\"hosts\"]} `\r\n| ForEach-Object {$_.Value[\"hosts\"].GetEnumerator()} `\r\n| Batch-Object -Size 20`\r\n| ForEach-Object -Throttlelimit 20 -UseNewRunspace -AsJob -Parallel {\r\n  $_ | ForEach-Object {\r\n    Import-Module \"VMware.PowerCLI\"\r\n    Connect-ViServer ...\r\n    Do-Stuff\r\n  }\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> 1. because of the \"initialization part\" (loading the module and connecting to the server) it becomes quite bottlenecked.\r\n\r\nIs the server the same for all threads? And why do you need to import the module in every thread but not before?",
      "created_at": "2020-12-29T18:30:47Z",
      "updated_at": "2020-12-29T18:30:47Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "The commands of the module were not available if I imported it (only) before and not within the `-Parallel` foreach block.\r\n\r\nIf I just use a single threaded ForEach, a simple `|ForEach-Object {Do-Stuff}` is enough, but as soon as it is Parallel the module is out of scope...",
      "created_at": "2020-12-29T18:52:47Z",
      "updated_at": "2020-12-29T18:55:14Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "```\r\nPS /home/user> Import-Module ./test.psm1\r\nPS /home/user> a     \r\nWARNING: test   \r\nPS /home/user> 1..2 | ForEach-Object -Parallel {a} \r\na: The term 'a' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\na: The term 'a' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS /home/user> cat ./test.psm1\r\nfunction a() {\r\n  Write-Warning \"test\"\r\n}\r\nPS /home/user>\r\n```",
      "created_at": "2020-12-29T19:00:15Z",
      "updated_at": "2020-12-29T19:00:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please share PowerShell version as issue template ask.",
      "created_at": "2020-12-30T02:38:24Z",
      "updated_at": "2020-12-30T02:38:24Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "The feature request template doesn't, but here you go:\r\n$PSVersionTable\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Linux 5.9.14-arch1-1 #1 SMP PREEMPT Sat, 12 Dec 2020 14:37:12 +0000\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2020-12-30T09:11:08Z",
      "updated_at": "2020-12-30T09:11:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If I understand your intent correctly, then a general-purpose batching mechanism may solve your problem. Such a mechanism is proposed in #8270.\r\n\r\nAlso, can you please update the OP to provide a syntax-highlighting hint for the code blocks? Currently, the code is hard to read; use ` ```powershell `\r\n\r\n",
      "created_at": "2020-12-30T15:43:30Z",
      "updated_at": "2020-12-30T15:43:30Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Not to shill myself too much but I recently published my SplitCollection module to the PS gallery which splits arrays into smaller arrays like this:\r\n```\r\nPS C:\\> $DemoArray=1..20\r\nPS C:\\> $SplitArray=Split-Collection -InputObject $DemoArray -ChunkSize 2\r\nPS C:\\> $SplitArray.Count\r\n10\r\nPS C:\\> $SplitArray[0].Count\r\n2\r\nPS C:\\> $SplitArray=Split-Collection -InputObject $DemoArray -AmountOfParts 2\r\nPS C:\\> $SplitArray.Count\r\n2\r\nPS C:\\> $SplitArray[0].Count\r\n10\r\n```\r\nI think this should work in your scenario OP. For anyone curious the source code is available here: https://github.com/MartinGC94/SplitCollection/blob/master/SplitCollection/SplitCollectionCommand.cs\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/42123497?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MartinGC94/SplitCollection\">MartinGC94/SplitCollection</a></strong></div><div>Contribute to MartinGC94/SplitCollection development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-12-30T22:07:18Z",
      "updated_at": "2020-12-30T22:07:20Z"
    }
  ],
  "created_at": "2020-12-29T18:06:15Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Core"
  ],
  "number": 14509,
  "state": "open",
  "title": "Feature Request: ForEach-Object BatchSize Parameter",
  "updated_at": "2020-12-31T04:29:07Z"
}