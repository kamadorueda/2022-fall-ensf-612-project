{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10875",
  "author": "ashmind",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a PowerShell user, I would like to have a consistent way to check if a property exists on an object in a strict mode, whatever type of object it is.\r\n\r\n## Problem\r\n\r\nCurrently this works the same way for Hashtable/custom object/etc:\r\n```\r\n$x.Property\r\n```\r\n\r\nAnd this works to check if the property exists, if I am *not* in a strict mode:\r\n```\r\nif ($x.Property) { ... }\r\n```\r\n\r\nHowever in strict mode, there is no good alternative.\r\n\r\n`$x.PSObject.Properties` does not work for `Hashtable` and other similar cases. `Contains`/`ContainsKey` works for hashtables and dictionaries, but not for objects.\r\n\r\n## Request\r\n\r\nI would like to have some special way to check that property exists that would work in the same way as `$x.Property` -- for custom objects, hashtables and anything else.\r\n\r\nNote that I don't agree with #9086 which suggests to completely remove existence checks in strict mode -- in a lot of cases they are very useful and catch valid issues. What I want is to be able to do a check easily, something like:\r\n```\r\nif ($x -hasproperty 'A') { ... }\r\n```\r\n^ That is an example, I am not too tied to any specific syntax.",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Does this work for you ? \r\n```\r\n>$host.psobject.Properties.name -contains \"UI\"\r\nTrue\r\n>$host.psobject.Properties.name -contains \"stuff\"\r\nFalse\r\n```\r\n",
      "created_at": "2019-10-24T10:04:03Z",
      "updated_at": "2019-10-24T10:04:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If the primary goal is to be able to safely access a non-existent property even in strict mode, see the proposal to add null-soaking (null-conditional) access and null-coalescing at #3240 \r\n\r\nStrictly speaking, that won't allow you to distinguish between a non-existent property and one that happens to have a `$null` value, though.\r\n\r\n@jhoneill: Nice; an idiom that is slightly more efficient (though it may not matter in practice), because it avoids creating an array of names first:\r\n\r\n```powershell\r\n# Works even with Set-StrictMode -Version Latest\r\nPS> [bool] $host.psobject.Properties['UI']; [bool] $host.psobject.Properties['nosuch']\r\nTrue\r\nFalse\r\n```\r\n\r\nIt doesn't provide the desired symmetry with hashtables, though (which exists on _getting_ the property / entry) - which I personally don't consider problematic, especially if null-soaking becomes available.\r\n\r\nAs an aside, @ashmind: `if ($x.Property)` would also be `$false` with any _existing_ property whose value happens to be \"falsy\", such as `0`; `if ($null -ne $x.Property)` is a better test.\r\n",
      "created_at": "2019-10-24T13:51:55Z",
      "updated_at": "2019-10-24T13:56:34Z"
    },
    {
      "author": "ashmind",
      "author_association": "NONE",
      "body": "> $host.psobject.Properties.name -contains \"UI\"\r\n\r\nNot really, `@{ UI=1 }.psobject.Properties.name -contains \"UI\"` => `False`\r\n\r\n> see the proposal to add null-soaking (null-conditional) access and null-coalescing at #3240\r\n\r\nYep as long as it is not just for `$null` it would work.\r\n\r\nI think it's worth keeping this issue open for now, in case they only implement `$null?.` there and we'll need some other solution for non-existent property.\r\n",
      "created_at": "2019-10-24T18:27:49Z",
      "updated_at": "2019-10-24T19:15:06Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "@mklement0 : I hope that *null-soaking* makes into **Preview 6** (before feature freeze)\r\n@ashmind :\r\n```powershell\r\n> ([PSCustomObject]@{UI=1}).PSObject.Properties.Name\r\nUI\r\n> ([PSCustomObject]@{UI=1}).GetType().Name\r\nPSCustomObject\r\n> @{UI=1}.GetType().Name\r\nHashtable\r\n```",
      "created_at": "2019-10-24T21:20:35Z",
      "updated_at": "2019-10-24T21:21:28Z"
    },
    {
      "author": "ashmind",
      "author_association": "NONE",
      "body": "@kborowinski Fair enough, seems like I can always do this:\r\n```powershell\r\nfunction Test-Property([object] $x, [string] $name) {\r\n    return (([PSCustomObject]$x).PSObject.Properties.Name -contains $name)\r\n}\r\n```\r\nand it works for Hashtable/PSCustomObject/Class/etc.\r\n\r\nThis is very useful to know, though I think a simpler syntax would still be great.",
      "created_at": "2019-10-25T06:05:11Z",
      "updated_at": "2019-10-25T06:05:36Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "@ashmind :  I think that simpler syntax would be better as well, or that *null-soaking* makes into **Preview 6**",
      "created_at": "2019-10-25T09:24:11Z",
      "updated_at": "2019-10-25T09:24:11Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > $host.psobject.Properties.name -contains \"UI\"\r\n> \r\n> Not really, `@{ UI=1 }.psobject.Properties.name -contains \"UI\"` => `False`\r\n> \r\nHash tables are awkward because the . notation is not accessing a member. \r\n$h.ui is a shortcut for $h[\"UI\"] \r\nIf you're using strict mode I'd guess you know when $x is a hashtable ? So just avoid the \".\" syntax. Where . is accessing a _true_ member, going via properties works. \r\n",
      "created_at": "2019-10-25T11:59:44Z",
      "updated_at": "2019-10-25T11:59:44Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "```powershell\r\n$x.PSObject.Properties.Name -contains $name\r\n```\r\nis slow because it creates an array of all the property names, then searches that array.\r\n\r\nBetter is:\r\n```powershell\r\n$null -ne $x.PSObject.Properties.Item($name)\r\n```",
      "created_at": "2019-10-26T23:00:40Z",
      "updated_at": "2019-10-26T23:00:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @felixfbecker, which is why I suggested  the following, [more concise variant above](https://github.com/PowerShell/PowerShell/issues/10875#issuecomment-545928075):\r\n\r\n```powershell\r\n[bool] $x.psobject.Properties[$name]\r\n```",
      "created_at": "2019-10-26T23:07:18Z",
      "updated_at": "2019-10-26T23:07:18Z"
    },
    {
      "author": "DarkLite1",
      "author_association": "NONE",
      "body": "We have a case where we are checking for properties and nested properties of a `[PSCustomObject]` like this:\r\n\r\n```powershell\r\n        #region Set properties\r\n        $SplashScreenParams = @{\r\n            Image     = $null\r\n            Timeout   = $null\r\n            MaxWidth  = $null\r\n            MaxHeight = $null\r\n            Topmost   = $null\r\n        }\r\n\r\n        # Boolean values like Topmost can be true/false\r\n        # that's why we compare to $null instead of if($Topmost){$action}\r\n\r\n        foreach ($PropName in @($SplashScreenParams.Keys.GetEnumerator())) {\r\n            Write-Verbose \"Get '$PropName' value\"\r\n            $PropValue = $null\r\n\r\n            if ($null -ne $Settings.Default.$PropName) {\r\n                $PropValue = $Settings.Default.$PropName\r\n                Write-Verbose \"Default setting '$PropValue'\"\r\n            }\r\n\r\n            if ($null -ne $Settings.Country.$CountryCode.$PropName) {\r\n                $PropValue = $Settings.Country.$CountryCode.$PropName\r\n                Write-Verbose \"Country '$CountryCode' setting '$PropValue'\"\r\n            }\r\n\r\n            $MemberOfGroupDNs | Where-Object {\r\n                $Settings.Group.PSObject.Properties.Name -contains $_\r\n            } | ForEach-Object {\r\n                if ($null -ne $Settings.Group.$_.$PropName) {\r\n                    $PropValue = $Settings.Group.$_.$PropName\r\n                    Write-Verbose \"Group '$_' setting '$PropValue'\"\r\n                }\r\n            }\r\n\r\n            if ($null -ne $PropValue) {\r\n                $SplashScreenParams.$PropName = $PropValue\r\n                Write-Verbose \"Set '$PropName' to '$PropValue'\"\r\n            }\r\n        }\r\n        #endregion\r\n```\r\nThis code is quite readable. When applying `Set-StrictMode -Version Latest` this fails gloriously. So for this clean code to be compliant a property check like:\r\n```powershell\r\n$null -ne $Settings.Country.$CountryCode.$PropName\r\n```\r\nneeds to be replaced by\r\n```powershell\r\n([bool] $Settings.Country.PSObject.Properties[$CountryCode]) -and \r\n([bool] $Settings.Country.$CountryCode.PSObject.Properties[$PropName])`\r\n```\r\nThis seems to be very long to write.\r\n",
      "created_at": "2019-10-29T14:03:39Z",
      "updated_at": "2019-10-29T14:13:36Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@DarkLite1  \r\nWhen it is a hash table DON'T use the . notation use [$propname] instead.\r\nSplashScreen params is a hashtable\r\nSettings.default should be hash table, if it **IS** a PS Custom object it was probably made from a hash table \r\nSettings .country  should be a hashTable of countryCode=HashTable_of_settings (again if it is a custom object I'm guessing it was made from a hash table) \r\netc. \r\n\r\n\r\nAn observation. \r\nStrict mode can ensure a script doesn't reference non-existent properties, which is based on the assumption that the properties of all objects are known at design time. \r\nThis does not combine well with code which uses PSObject to create objects whose properties are not fixed.\r\nHaving flexible properties requires something to check for the existence of a property purely to prevent strict mode from causing an error and skipping a line of \"good\" code.   \r\nA better policy would be to create a custom type which always has the required properties. \r\n\r\nI'll also say I think using strict mode **at all**  - is no longer the good practice it was before things like PSScriptAnalyzer\r\n\r\n- It skips lines and throws **non terminating** errors meaning code will continue having not executed some lines which would have worked. \r\n- Authors only learn of their mistakes via run-time errors. \r\n- Coverage is patchy   `Get-ChildItem(\"\\\",\"\\users\")` skips with an error, `Get-ChildItem(\"\\users\")` runs. So does `new-object ValidateSet(@(1,2,3))`\r\n\r\nInteresting PSScriptAnalyzer pulls up variables which are initialized without being used but not variables which are used without being initialized, which is the level 1 check for strict mode. \r\n\r\n\r\n",
      "created_at": "2019-10-29T17:31:06Z",
      "updated_at": "2019-10-29T17:32:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We considered this problem not long after `Set-StrictMode` was added. The leading option at the time looked something like:\r\n```powershell\r\nif (unstrict { $obj.Property }) { ... }\r\n```\r\n\r\nThe idea was to disable strict mode completely even though this issue was the primary use case. You can have a close approximation of this today with:\r\n\r\n```powershell\r\nfunction unstrict([ScriptBlock]$scriptBlock) {\r\n    Set-StrictMode -Off\r\n    & $scriptBlock\r\n}\r\n```\r\nUnfortunately this never seemed important enough relative to all the other improvements/fixes so it remained a rough idea.\r\n",
      "created_at": "2019-10-29T21:03:20Z",
      "updated_at": "2019-10-29T21:03:20Z"
    },
    {
      "author": "DarkLite1",
      "author_association": "NONE",
      "body": "@jhoneill Thanks again for the great advice. I'll be using the `$hash['property']` way from now on. One thing of note is that `$Settings` is coming from a `json` like so:\r\n```json\r\n{\r\n    \"ExcludedGroup\": [\r\n        \"CN=No Splash screen,DC=contoso,DC=net\"\r\n    ],\r\n    \"Default\": {\r\n        \"Image\": null,\r\n        \"Timeout\": 20,\r\n        \"Topmost\": false,\r\n        \"MaxWidth\": 1100,\r\n        \"MaxHeight\": 680\r\n    },\r\n    \"Country\": {\r\n        \"GBR\": {\r\n            \"Image\": \"\\\\\\\\contoso.net\\\\SplashScreen\\\\HS_Splash_GBR.jpg\",\r\n            \"Timeout\": 30,\r\n            \"Topmost\": true,\r\n            \"MaxWidth\": null,\r\n            \"MaxHeight\": null\r\n        }\r\n    },\r\n    \"Group\": {\r\n        \"CN=Special splash,OU=Groups,DC=contoso,DC=net\": {\r\n            \"Image\": \"\\\\\\\\contoso.net\\\\SplashScreen\\\\Special_Splash.jpg\",\r\n            \"Timeout\": null,\r\n            \"Topmost\": true,\r\n            \"MaxWidth\": null,\r\n            \"MaxHeight\": null\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nImported with \r\n```powershell\r\n$Settings = Get-Content -LiteralPath $SettingsFilePath -EA Stop | ConvertFrom-Json\r\n```\r\n\r\nThis makes it a `[PSCustomObject]` by default. I could consider converting it to a `HashTable` it that would make more sense.\r\n\r\nBack on topic: It's one thing to check if a property is available on the object another thing if it is `$null`. In my case it only matters if there is a value in that property, all other stuff I'm not interested in.",
      "created_at": "2019-10-30T07:56:43Z",
      "updated_at": "2019-10-30T07:56:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@DarkLite1  \r\nBeen there and done that with JSON/PSCustomObjects/HashTables - this might save you doing it from scratch \r\n\r\n[Convert-PSCustomObject.zip](https://github.com/PowerShell/PowerShell/files/3788566/Convert-PSCustomObject.zip)\r\n\r\n (amazing what I have in my PowerShell folder) ",
      "created_at": "2019-10-30T11:32:57Z",
      "updated_at": "2019-10-30T11:33:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note that in PowerShell Core `ConvertFrom-Json` now has an `-AsHashTable` switch.",
      "created_at": "2019-10-30T12:49:17Z",
      "updated_at": "2019-10-30T12:49:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, strict mode is a nice idea, but without the language features to support it I can't say I've ever seen it be useful by any measure. PSSA has been _much_ more useful in my opinion. \ud83d\ude15 ",
      "created_at": "2019-10-30T13:22:55Z",
      "updated_at": "2019-10-30T13:22:55Z"
    },
    {
      "author": "ili101",
      "author_association": "NONE",
      "body": "Best workaround I found is `$o.psobject.Properties['NoSuchProperty']?.Value` (not working with HashTables).\r\nhttps://stackoverflow.com/questions/64772035/powershell-object-cannot-be-found-with-strictmode-latest\r\n\r\nWill also be nice to have something like `$o | Where-Object NoSuchProperty -ne 100 -NonStrict`.\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/64772035/powershell-object-cannot-be-found-with-strictmode-latest\">Powershell object cannot be found with strictmode latest</a></strong></div><div>I am trying to get below to work under set-strictmode -version latest, it works completely fine without strict mode, unfortunately it's a requirement to have latest strictmode in my environment.\nWh...</div></blockquote>",
      "created_at": "2022-07-04T18:49:24Z",
      "updated_at": "2022-07-04T18:49:26Z"
    }
  ],
  "created_at": "2019-10-23T19:56:27Z",
  "number": 10875,
  "state": "open",
  "title": "Check if a property exists on an object in a strict mode",
  "updated_at": "2022-07-04T18:49:26Z"
}