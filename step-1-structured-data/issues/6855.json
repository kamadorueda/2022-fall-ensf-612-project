{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6855",
  "author": "mklement0",
  "body": "<sup>This issue arose out of #6837.</sup>\r\n\r\nMotivation:\r\n\r\n`Sort-Object`'s `-Property` not only supports property _names_ (the typical case), but also _script blocks_ that are evaluated for each input object and thereby enable sorting criteria _derived_ from properties, which is a powerful feature (also found, in essence, in `Select-Object`); e.g.:\r\n\r\n```powershell\r\n# Sort by only the numerical part of the input, via a script-block parameter argument.\r\nPS> 'z1', 'a0', 'b10' | Sort-Object -Property { [int] $_.Substring(1) }\r\na0\r\nz1\r\nb10\r\n```\r\n\r\nSuggestion:\r\n\r\nIt would be handy if `Measure-Object` supported analogous use; e.g.:\r\n\r\n```powershell\r\n# Count the  odd numbers in the input.\r\nPS> 1, 2, 3 | Measure-Object -Sum -Property { $_ % 2 }  # wishful thinking\r\n2\r\n```\r\n\r\nTo that end:\r\n\r\n* The `-Property` parameter's data type would have to change from`[string[]]` to `[object[]]`\r\n* In the event of a script block getting passed, it would have to be evaluated for each input object and used in lieu of a simple property access on the input object.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": "2018-08-30T19:38:12Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "It's actually just a 3-line change with Property going from [string[]] to [MshExpression[]]. The downside is that MshExpression is an internal (and unfortunately named) class. So about 30 files need to be changed to do this properly (rename MshExpression -> PSPropertyExpression and make it public.) ",
      "created_at": "2018-05-15T02:05:55Z",
      "updated_at": "2018-05-15T02:05:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay, but wouldn't changing the type to `[object[]]` do, accompanied by internal logic to see if each object passed is either a `[scriptblock]` or a `[string]` (or something that can be coerced to a string)?\r\n\r\nThat's how `Sort-Object` seems to do it.",
      "created_at": "2018-05-15T02:10:57Z",
      "updated_at": "2018-05-15T02:11:29Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "`MshExpression` is a class that can be constructed from either a string _or_ a scriptblock. It encapsulates the logic for extracting a property value from an object.  It's already used by `Measure-Object` internally but because `Property` is typed as `string`, the script block aspect isn't exposed. Changing the parameter to be of type `MshExpression` automatically exposes the scriptblock functionality.  ",
      "created_at": "2018-05-15T07:24:55Z",
      "updated_at": "2018-05-15T07:24:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay. \r\n\r\nMy point was that if `Sort-Object` types its `-Property` parameter `[object[]]` _publicly_ and uses `[MshExpression]` _internally_, can't `Measure-Object` do the same, thereby saving us from having to make [a renamed] `[MshExpression]`  public?",
      "created_at": "2018-05-15T12:31:07Z",
      "updated_at": "2018-05-15T12:31:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  `MshExpression` should be called `PSPropertyExpression` and `Measure-Object -Property` type should be changed to `PSPropertyExpression`.  `Sort-Object` can be fixed in a separate PR.  This is a breaking change because the type is changing, but existing scripts should not be impacted as a string can be coerced to a PSPropertyExpression.",
      "created_at": "2018-05-16T22:22:30Z",
      "updated_at": "2018-05-16T22:23:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's good to hear, @SteveL-MSFT.\r\n\r\nWe should consider doing the same thing not only for `Sort-Object`, but also for `Select-Object`.\r\n\r\nNote, however, that additional considerations apply, because **both commands accept a _hashtable_ in addition to a script block**:\r\n\r\n* `Sort-Object` only requires a hashtable if you want to reverse the sort direction on a per property/expression basis:\r\n\r\n```powershell\r\nPS> 'z1', 'a0', 'b10' | Sort-Object -Property @{ Descending=$True; Expression = { [int] $_.Substring(1) }\r\nb10\r\nz1\r\na0\r\n```\r\n\r\n* In the case of `Select-Object` use of a hashtable is actually the _typical_ case, because in the absence of a _name_ for the property created by the script block the script block's literal string contents becomes the name:\r\n\r\n```powershell\r\n# With just a script block, the resulting property name is the *expression source code*:\r\nPS> 1 | Select-Object { $_ * 10 }\r\n\r\n $_ * 10\r\n---------\r\n       10\r\n\r\n# Typical case: provide a hashtable wrapper for the expression that names the property:\r\nPS> 1 | Select-Object @{ Name='TimesTen'; Expression = { $_ * 10 } }\r\n\r\nTimesTen\r\n--------\r\n      10\r\n\r\n```",
      "created_at": "2018-05-18T14:42:37Z",
      "updated_at": "2018-05-18T14:42:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S: In addition to later changing `Sort-Object`, `Group-Object`  should be changed too.",
      "created_at": "2018-05-27T23:24:04Z",
      "updated_at": "2018-05-27T23:24:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "... and `ConvertTo-Html` - see #6994",
      "created_at": "2018-06-04T20:16:56Z",
      "updated_at": "2018-06-04T20:16:56Z"
    }
  ],
  "created_at": "2018-05-11T13:56:44Z",
  "number": 6855,
  "state": "closed",
  "title": "Allow Measure-Object to accept ad-hoc script-block arguments in lieu of property names",
  "updated_at": "2018-09-05T07:18:42Z"
}