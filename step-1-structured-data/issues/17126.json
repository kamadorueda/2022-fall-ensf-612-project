{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17126",
  "author": "end-user",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have authorized access to an artifact repository in DevOps.  I registered the package source in PS.  When I try to find a package in that source, I'm prompted to use the 'devicelogin' URL with a code.  However, it says \"Selected user account does not exist in tenant\" and I need an external account.  How can I use my existing access to the artifact feed through PS?\r\n\r\n```\r\nRegister-PackageSource -Name \"EdFi\" -Location https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json -ProviderName NuGet\r\n\r\nFind-Package EdFi.Suite3.Installer.WebApi -Source EdFi\r\n```\n\n### Expected behavior\n\n```console\nList of available packages that match the ones listed on https://dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_artifacts/feed/EdFi\n```\n\n\n### Actual behavior\n\n```console\n[Minimal] [CredentialProvider]DeviceFlow: https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json\r\n[Minimal] [CredentialProvider]ATTENTION: User interaction required.\r\n\r\n    **********************************************************************\r\n\r\n    To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code A8DX6AUAX to authenticate.\r\n\r\n    **********************************************************************\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-04-12T16:00:44Z",
  "comments": [
    {
      "author": "end-user",
      "author_association": "NONE",
      "body": "Oh, I should mention that the `Register-PackageSource` works fine when opened through VS, which is why I think this is a PS issue.\r\n![image](https://user-images.githubusercontent.com/4923193/162531774-4979a3fc-f774-4afc-9ebe-f05ea5fbe54e.png)\r\n",
      "created_at": "2022-04-08T21:10:37Z",
      "updated_at": "2022-04-08T21:10:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The `Register-PackageSource` provided in the Visual Studio console is unfortunately from a different module than the one resolvable outside of it. The issue would need to be opened in OneGet/oneget.\r\n\r\nThat said, my personal recommendation would be to just use the one inside of VS if that is the functionality you need. OneGet/oneget serves a similar but also quite different purpose and is mostly in maintenance mode.",
      "created_at": "2022-04-11T14:39:47Z",
      "updated_at": "2022-04-11T14:39:47Z"
    },
    {
      "author": "end-user",
      "author_association": "NONE",
      "body": "Well, I wasn't using `Register-PackageSource` from within VS, and I don't know why there are so many almost-compatible modules/features/functionality between all the MS products.  I was just approaching this like \"it's an artifact repository, I should be able to reference it and use a package manager to fetch a resource from it\".  I assumed that NuGet/OneGet was the chosen package management provider, and the project author publishes the powershell scripts as NuGet packages. I was just trying to use it as intended, in an automated way.",
      "created_at": "2022-04-11T14:51:50Z",
      "updated_at": "2022-04-11T14:51:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-04-12T16:00:43Z",
      "updated_at": "2022-04-12T16:00:43Z"
    }
  ],
  "created_at": "2022-04-08T21:07:51Z",
  "labels": [
    "Resolution-External"
  ],
  "number": 17126,
  "state": "closed",
  "title": "User does not exist in tenant when trying to access DevOps artifact feed as PackageSource",
  "updated_at": "2022-04-12T16:00:44Z"
}