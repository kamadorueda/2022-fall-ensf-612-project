{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17520",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nUndoubtedly an edge case, but it makes me wonder whether other discrepancies between single-object dot notation (property access) and member-enumeration-based dot notation exist:\r\n\r\n```powershell\r\n@{ 42 = 'foo' }.42           # OK -> 'foo'\r\n\r\n(@{ 42 = 'foo1' }, @{ 42 = 'foo2' }).42  -join ', ' # !! No output\r\n```\r\n\r\nNote that  the problem does _not_ occur with _string_-valued hashtable keys (which is what's typical), e.g. \r\n`(@{ a42 = 'foo1' }, @{ a42 = 'foo2' }).a42  -join ', '`\r\nSimilarly, the following works as expected:\r\n`([pscustomobject] @{ 42 = 'foo1' }, [pscustomobject] @{ 42 = 'foo2' }).42  -join ', '`\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nfoo\r\nfoo1, foo2\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nfoo\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.4\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "**Supplementary** \r\n\r\n> ```powershell\r\n>   @{  42  = 'foo' }.42      #Returns \"foo\"\r\n>  (@{  42  = 'foo' }).42     #Returns \"foo\"\r\n> @(@{  42  = 'foo' }).42     #Returns nothing\r\n> @(@{ \"42\" = 'foo' }).42     #Returns \"foo\"\r\n> ```\r\n\r\nIt appears the member operator converts its operand to a string when processing members of an array. \r\n",
      "created_at": "2022-06-13T09:17:13Z",
      "updated_at": "2022-06-13T09:17:13Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "It never worked because \"selector\" `.42` is expected to be a string, so expression `(@{ 42 = 'foo1' }, @{ 42 = 'foo2' }).42` is incorrect itself",
      "created_at": "2022-06-13T16:41:40Z",
      "updated_at": "2022-06-13T16:41:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@scriptingstudio, please note the first example in the OP, which _does_ work: `@{ 42 = 'foo' }.42` - the issue at hand is that with _member-access enumeration_ it doesn't.",
      "created_at": "2022-06-13T16:47:56Z",
      "updated_at": "2022-06-13T16:47:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To put it differently: the promise of member-access enumeration is that:\r\n\r\n```powershell\r\n(@{ 42 = 'foo1' }, @{ 42 = 'foo2' }).42 # !! BROKEN\r\n```\r\n\r\nis shorthand for:\r\n\r\n```\r\n@{ 42 = 'foo1' }, @{ 42 = 'foo2' } | ForEach-Object { $_.42 }   # OK\r\n```\r\n\r\nClearly, the promise isn't being fulfilled here.\r\n",
      "created_at": "2022-06-13T16:51:48Z",
      "updated_at": "2022-06-13T16:51:48Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "That is NOT shorthand, because your array is not array of psobjects  ",
      "created_at": "2022-06-13T16:56:05Z",
      "updated_at": "2022-06-13T16:56:05Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "psobject property type is always a string, but a hashtabe is a diff story  ",
      "created_at": "2022-06-13T16:58:19Z",
      "updated_at": "2022-06-13T16:58:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This issue is about the behavior of the member-access operator, `.` - it doesn't matter what .NET type it operates on, and that with hashtables, as a syntactic convenience, it allows accessing entries _as if they were_ properties.\r\n\r\nThe point is that  if a given `.` access works with a given scalar, it should work via member-access enumeration on a collection of such scalars.\r\n\r\nOtherwise, we're faced with a confusing inconsistency for which I see no justification; see also: https://github.com/PowerShell/PowerShell/issues/17514.\r\n",
      "created_at": "2022-06-13T17:03:46Z",
      "updated_at": "2022-06-13T17:04:29Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> It never worked because \"selector\" `.42` is expected to be a string, so expression `(@{ 42 = 'foo1' }, @{ 42 = 'foo2' }).42` is incorrect itself\r\n\r\n@scriptingstudio  yes., that would be fine if `@{ 42 = 'foo1' }.42`  did not work either.  \r\n\r\n@mklement0  `$h = @{ 42 = 'foo1' } ; $h.42`   \r\nreturns nothing but  `$h = @{ \"42\" = 'foo1' } ; $h.42` returns foo1 so it looks like its the @{}. combination is processed differently from everything  else - it's no applicable to other hashtables \r\n```\r\n (@{ 42 = 'foo1' }, @{ 42 = 'foo2' } | ForEach-Object { $_.42 } \r\n```\r\nOutputs nothing.\r\n\r\n\r\n",
      "created_at": "2022-06-13T19:43:24Z",
      "updated_at": "2022-06-13T19:43:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill, I think you swapped the two scenarios:\r\n\r\n```powershell\r\n$h = @{ 42 = 'foo1' } ; $h.42   # -> 'foo1': property \"name\" type ([int]) matches the type of the hash-entry key.\r\n\r\n$h = @{ '42' = 'foo1' } ; $h.42   # -> $null; property \"name\" type does *not* match\r\n\r\n# Quoting fixes the mismatch\r\n$h = @{ '42' = 'foo1' } ; $h.'42'   # -> 'foo1'\r\n```\r\n\r\nThis distinction is tricky, for sure, and specific to hash tables, but it has always worked this way - and it is a separate issue from the one at hand.\r\n",
      "created_at": "2022-06-13T20:10:57Z",
      "updated_at": "2022-06-13T20:10:57Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0 \r\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/16209593/173437788-2e98c87a-7331-44d3-bf44-3362e8e04d5a.png\">\r\n\r\n\r\nThat's what I got which showed $h.42 converted 42 to a string",
      "created_at": "2022-06-13T20:19:27Z",
      "updated_at": "2022-06-13T20:19:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside: while switching to `[pscustomobject]` avoids this particular problem -  `$o = [pscustomobject] @{ '42' = 'foo1' } ; $o.42` works without needing to quote the property name - the fact that a property name is generally parsed _as a number literal_ if it _looks like one_ can also break `[pscustomobject]` access; e.g.:\r\n\r\n```powershell\r\n$o = [pscustomobject] @{ '1L' = 'foo1'; '1' = 'why me?' } ; $o.1L  # -> !! 'why me?'\r\n```\r\n\r\nThat is, the `1L` in  `.1L` was parsed as a `[long]` with value `1`, and the stringified version of it is just `'1'`, so that was the property that was accessed.\r\n\r\nOr, for even more fun:\r\n\r\n```powershell\r\n $o = [pscustomobject] @{ '15' = 'why me?' } ; $o.0xf # -> !! 'why me?'\r\n```",
      "created_at": "2022-06-13T20:19:43Z",
      "updated_at": "2022-06-14T15:09:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": " Can you explain this, because it beats me :-) \r\n<img width=\"666\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16209593/173440317-9c46c836-6ab7-447d-9a8c-69b2d9874cd2.png\">\r\n",
      "created_at": "2022-06-13T20:33:20Z",
      "updated_at": "2022-06-13T20:33:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill, that is very curious - the behavior on the right side is what I expect and see consistently; I have no explanation for the left side. Can you consistently reproduce the left-side behavior and, if so, how?\r\n",
      "created_at": "2022-06-13T20:49:36Z",
      "updated_at": "2022-06-13T20:49:36Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0  I still had the window I tested in the first time open, so I've just dumped the history out and reproduced it. But I can't see anything which would change the the behaviour of the member operator.\r\nIt's in this gist if you want to have a play \r\nhttps://gist.github.com/jhoneill/7239a13c0faaa2b875c267ea093464dd  \r\n\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/7239a13c0faaa2b875c267ea093464dd\">odd.ps1</a></strong></div><div>GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
      "created_at": "2022-06-13T21:00:14Z",
      "updated_at": "2022-06-13T21:00:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks - just dot-sourcing a script with these commands does _not_ surface the issue for me. Either way, it seems clear that we're dealing with a separate bug.\r\n",
      "created_at": "2022-06-13T21:13:34Z",
      "updated_at": "2022-06-13T21:13:34Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I got it down to this\r\n<img width=\"1133\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16209593/173460291-c12c9233-b63e-4a94-be5a-287a75741d72.png\">\r\n\r\nIt's almost like the member operator remembers that it has seen a string property \"42\" causing it to change behaviour - try with and without line 2 :-) \r\n```\r\n$psco = [pscustomobject]@{ 42 = 'foo1' }\r\n$Psco.42\r\n$h = @{ 42 = 'foo1' }\r\n$h.42\r\n$h = (@{ \"42\" = 'foo1' })\r\n$h.42\r\n```\r\n\r\n",
      "created_at": "2022-06-13T22:54:05Z",
      "updated_at": "2022-06-13T22:54:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great sleuthing, @jhoneill; what an insidious bug (though probably rare in the wild); I've taken the liberty of reporting it in #17525",
      "created_at": "2022-06-14T15:02:50Z",
      "updated_at": "2022-06-14T15:02:50Z"
    }
  ],
  "created_at": "2022-06-11T16:55:05Z",
  "labels": [
    "Issue-Bug",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 17520,
  "state": "open",
  "title": "Member-access enumeration doesn't work with numeric hashtable keys",
  "updated_at": "2022-07-25T16:51:24Z"
}