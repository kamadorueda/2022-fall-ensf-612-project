{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8036",
  "author": "DaveCrown",
  "body": "<!--\r\n\r\nwhen launching pwsh from zsh, i am unable to connect to the psgallery, Find-Module hust hangs. Launching from bash i can run find module\r\n\r\nI am running on a fully patched install of Fedora Linux 28 with zsh 5.5.1 installed from the fedora repos.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```\r\npwsh\r\nfind-module\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n``` \r\nmodules are returned\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\npwsh hangs.\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Linux 4.18.13-200.fc28.x86_64 #1 SMP Wed Oct 10 17:29:59 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2018-10-16T09:29:15Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Are you referring to the `http_proxy` environment variable, as described [here](https://www.cyberciti.biz/faq/linux-unix-set-proxy-environment-variable/), for instance?\r\n\r\nSince we're talking about environment variables, the shell that you're calling _from_ shouldn't matter.\r\n\r\nSomeone with more domain knowledge will hopefully join the conversation, but here's a quick pointer: The absence of the string `http_proxy` in the source code of PowerShell itself and the `PowerShellGet` module suggests that PowerShell is currently unaware of this variable altogether, so this may have to turn into a (more fully fleshed out) feature request.\r\n\r\n\r\n",
      "created_at": "2018-10-15T20:57:26Z",
      "updated_at": "2018-10-15T20:57:26Z"
    },
    {
      "author": "DaveCrown",
      "author_association": "NONE",
      "body": "That is correct. I\u2019m using an environment variable, that I declare in /etc/environment making it systemwide. Bash and zsh both use that file.",
      "created_at": "2018-10-15T21:14:43Z",
      "updated_at": "2018-10-15T21:14:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "From what I can tell, the definitions in `/etc/environment` are read by the system itself and all user processes inherit these environment variables, so what your default shell is shouldn't matter (even PowerShell itself would be fine).\r\n\r\nIn short: PowerShell should _see_ `$env:http_proxy`, but it seems it simply doesn't do anything with it.\r\n\r\n",
      "created_at": "2018-10-15T21:28:18Z",
      "updated_at": "2018-10-15T21:28:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To elaborate a little: it isn't Bash or zsh _itself_ that respects the `http_proxy` environment variable, it is _external utilities_ such as `curl` that respect it.\r\n\r\nIf you were to invoke such utilities from PowerShell, they should work as usual.\r\n\r\nBy contrast, PowerShell's built-in analogous functionality, such as `Invoke-WebRequest`, seemingly does _not_ respect `http_proxy`, so making it do so would be a feature request (assuming my analysis is correct).\r\n",
      "created_at": "2018-10-16T00:41:57Z",
      "updated_at": "2018-10-16T00:41:57Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "You can try the workaround in #3112 until it is supported.",
      "created_at": "2018-10-16T01:35:26Z",
      "updated_at": "2018-10-16T01:35:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @thezim - hadn't even occurred to me to search for \"http_proxy\" in _this_ repo...\r\n\r\n@SteveL-MSFT, can you please close this as a duplicate?",
      "created_at": "2018-10-16T01:41:09Z",
      "updated_at": "2018-10-16T01:41:09Z"
    },
    {
      "author": "DaveCrown",
      "author_association": "NONE",
      "body": "I just have to remember to run it from bash, and it works like a champ. ",
      "created_at": "2018-10-16T01:43:04Z",
      "updated_at": "2018-10-16T01:43:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@DaveCrown: \r\n\r\nRun what from Bash? If you're calling external utilities such as `curl`, it shouldn't matter whether you're calling them from Bash or PowerShell.\r\n\r\nOr are you saying that you're seeing a difference there? If so, that would warrant further investigation.",
      "created_at": "2018-10-16T01:47:15Z",
      "updated_at": "2018-10-16T01:47:15Z"
    },
    {
      "author": "DaveCrown",
      "author_association": "NONE",
      "body": "Sorry, thought I had thatbdetail in there. When I run pwsh from bash, Import-Module works fantastic. When I run it from zsh, it won\u2019t connect. I keep all my proxy config in /etc/environment, so that I don\u2019t have to manage proxy settings for root.",
      "created_at": "2018-10-16T01:53:35Z",
      "updated_at": "2018-10-16T01:53:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`Import-Module`? Do you mean `Find-Module`, as in your original post?\r\n\r\nDo both Bash and zsh show the desired variables in the environment before you invoke `pwsh`(`echo $http_proxy`, for instance)?\r\n\r\nWhat does verbose output show when `Find-Module` hangs (`Find-Module -Verbose`)?\r\n\r\n",
      "created_at": "2018-10-16T02:26:12Z",
      "updated_at": "2018-10-16T02:26:12Z"
    }
  ],
  "created_at": "2018-10-15T19:34:19Z",
  "number": 8036,
  "state": "closed",
  "title": "pwsh launched from zsh doest not respect proxy environment vars.",
  "updated_at": "2018-10-16T09:29:15Z"
}