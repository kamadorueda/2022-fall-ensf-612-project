{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6616",
  "author": "Chirishman",
  "body": "Int32 keys cannot be defined in a hashtable literal if they match a string key, even if they are strongly typed but Int16 and Int64 keys can.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n#Can Be Defined\r\n\r\n@{ [int16]1 = 1; [int64]1 = 1; [int32]1 = 1 }\r\n@{ [int16]1 = 1; [int64]1 = 1; 1 = 1 }\r\n@{ [int16]1 = 1; [int64]1 = 1; '1' = 1 }\r\n\r\n#Cannot Be Defined\r\n\r\n@{ [int16]1 = 1; [int64]1 = 1; 1 = 1;  '1' = 1 }\r\n@{ [int16]1 = 1;  [int64]1 = 1; [int32]1 = 1; 1 = 1 }\r\n@{ [int16]1 = 1;  [int64]1 = 1; [int32]1 = 1; '1' = 1 }\r\n\r\n#tl;dr\r\n<#Fail#>    @{[int32]1=1; '1'=1}\r\n<#Work#>    @{[int16]1=1; '1'=1}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nEither strictly enforce uniqueness of hashtable keys between string and int16 and int64 as is done with int32 or allow hashtable keys to be nonunique if their datatypes are different and either way document as such.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.251\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.251\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n@BrucePay  - Tagging you as requested\r\n\r\nEdit:\r\nI was thinking that this might have at one point had some relation to looking up elements of a hashtable via dot notation. It looks like for numerals to be treated as a string here they must be wrapped in quotes while alpha characters are always treated as strings.\r\n\r\n```powershell\r\nPS> $a=@{'1'='a'}\r\nPS> $a.1\r\nPS> $a.'1'\r\na\r\nPS> $a=@{'a'='a'}\r\nPS> $a.a\r\na\r\nPS> $a=@{1='a'}\r\nPS> $a.'1'\r\nPS> $a.1\r\na\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@Chirishman Thanks for opening this. I'll take a look.",
      "created_at": "2018-04-10T17:01:14Z",
      "updated_at": "2018-04-10T17:01:14Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I do think this was done originally because the dot syntax for accessing a property always converts the value to a string. V2 reports the same error, so it's definitely not a new(ish) thing.\r\n\r\nIt might be overly restrictive, but you can always use apis to construct your hashtable.",
      "created_at": "2018-04-10T17:06:09Z",
      "updated_at": "2018-04-10T17:06:09Z"
    },
    {
      "author": "Chirishman",
      "author_association": "NONE",
      "body": "@lzybkr  Did you see my edit above re: dot syntax not always casting to string?",
      "created_at": "2018-04-10T17:41:18Z",
      "updated_at": "2018-04-10T17:41:18Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@Chirishman - I did. I can't test V1, but I think that might have changed between V1 and V2, possibly by me.",
      "created_at": "2018-04-10T17:47:35Z",
      "updated_at": "2018-04-10T17:47:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> you can always use apis to construct your hashtable.\r\n\r\nActually, a cast is all it takes to bypass the problem, so, @Chirishman, your tl;dr example actually shows the _workaround_, not the failure:\r\n\r\n```powershell\r\n@{ 1 = 'int'; '1' = 'string' } # BREAKS\r\n@{ [int] 1 = 'int'; '1' = 'string' } # Workaround: use cast\r\n```\r\n\r\n_Any_ numerical cast bypasses the problem at definition time.\r\n\r\nIn short: Given that a cast bypasses the problem and allows later access to both keys, **the problem affects only hashtable _literals_.**\r\n\r\n---\r\n\r\nHowever, when accessing the keys later there is a **pitfall** as well:\r\n\r\nWhile the distinction between numeric keys (unquoted; e.g., `1`) and string keys (quoted; e.g., `'1'`) works in principle, the specific integer type chosen is based on the value:\r\n\r\n`[int]` (`[int32]`) by default, with implicit widening to `[int64]` -> `[decimal]` -> `[double]` as \r\nneeded to accommodate larger values.\r\n\r\nThus, if the key type is `[int64]`, for instance, but a given key value is small enough to fit into `[int]`, the lookup won't work, and an indexed lookup with an explicit cast must be used.\r\n\r\n```powershell\r\n$ht = @{ [int64] 1 = 'int'; '1' = 'string' }\r\n\r\n$ht.1 # !! FAILS, because 1 is treated as [int]\r\n$ht[1] # ditto\r\n\r\n$ht[[int64] 1]  # OK - using index syntax with a cast is the only option in this case.\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-11T02:43:37Z",
      "updated_at": "2018-04-11T02:49:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: The problem applies to keys that look like floating-point literals too (without the spurious duplicate problem, they become `[double]` keys):\r\n\r\n```powershell\r\n@{ 1.2 = 'double'; '1.2' = 'string' }  # BREAKS\r\n```\r\n\r\nIn short: All the usual number-literal parsing rules apply (including negative numbers, hex. numbers, exponential notation, type-specifier suffixes).\r\n\r\nAlso note that the faulty hash-table-literal duplicate detection clearly goes out of its way to treat an unquoted number-like key as a string:\r\n\r\n```powershell\r\n@{ 1L =  'long'; '1' = 'string' }  # STILL BREAKS; despite the attempt to type 1 as [long]\r\n```\r\n\r\n---\r\n\r\nAs an aside:\r\n\r\nPerhaps surprisingly, accessing a `[double]` key works even with dot notation, even though it looks like _nested_ access:\r\n```powershell\r\n@{ 1.2 = 'double' }.1.2   # OK\r\n```\r\n\r\nEven mixing that with nested access works:\r\n```powershell\r\n@{ 1.2 = @{ 3 = '1-2-3' } }.1.2.3   # OK too \r\n```\r\n",
      "created_at": "2018-04-11T03:15:10Z",
      "updated_at": "2018-04-11T03:24:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.P.S.: \r\n\r\nPerhaps a more puzzling example:\r\n\r\n```powershell\r\n@{ 1e2 = 'double'; '100' = 'string' }  # BREAKS\r\n```\r\n\r\nHaven't looked at the source code, but it seems that the duplicate-detection mechanism performs the equivalent of `1e2 -eq '100'`; i.e., the string-valued RHS is coerced to the LHS's number type before comparing, whereas using a cast is seemingly taking a different code path.\r\n\r\n",
      "created_at": "2018-04-11T11:42:46Z",
      "updated_at": "2018-04-11T11:42:46Z"
    }
  ],
  "created_at": "2018-04-10T16:31:33Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 6616,
  "state": "open",
  "title": "Non-uniform behavior when defining a hashtable literal",
  "updated_at": "2018-04-11T11:42:46Z"
}