{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13146",
  "author": "mklement0",
  "body": "Note: This may be an exotic scenario that is easily avoided (no reason to ever use `return` this way), but I just came across it on [Stack Overflow](https://stackoverflow.com/q/62804051/45375), and the behavior is surprising and unhelpful.\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# The assignment is *ignored* due to `return`, and the output goes straight to the success output stream.\r\n$var = return 'foo'\r\n\r\n$var | Should -BeExactly 'foo'\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because the assignment is *ignored* (the variable isn't even created) due to use of `return`.\r\nThe output goes straight to the success output stream and therefore prints to the display here.\r\n\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.5\r\n```\r\n",
  "closed_at": "2020-07-09T17:25:12Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The RHS is executed before any assignment happens.  Works the same as any other flow control statement like `$a = throw`/`$a = continue`.  Probably should have been a parse error when assignments started allowing statements on the RHS, though I'm not sure it'd be worth doing now. ~~(**Edit:** wasn't a thing)~~ (**Edit 2:** I don't know what's real anymore)  Maybe a PSSA rule?",
      "created_at": "2020-07-09T16:38:28Z",
      "updated_at": "2020-07-09T17:47:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "As far as I know, assignment has always allowed full statements on the RHS. Because of this arrangement of the grammar, it would be very difficult, if not impossible, to turn this into a parse error. If nothing else, it would turn the RHS of assignments into a strange and confusing subset of the allowed statement grammar.\r\n\r\nI'd say this is most like the old `func_call(i++, i++)` in C. It's syntactically allowed, but semantically not a good idea.",
      "created_at": "2020-07-09T17:04:28Z",
      "updated_at": "2020-07-09T17:04:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience and @rjmholt - I'm personally happy with a \"won't-fix\" / \"as-designed\" classification , but I wanted the potential pitfall recorded.\r\n\r\nPerhaps a candidate for the [docs wiki](https://github.com/MicrosoftDocs/PowerShell-Docs/wiki)?",
      "created_at": "2020-07-09T17:11:22Z",
      "updated_at": "2020-07-09T17:11:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated the [SO answer](https://stackoverflow.com/a/62817875/45375) based on the feedback, so I'm happy to close this.\r\n\r\nAs an aside, @rjmholt: there is a [second answer](https://stackoverflow.com/a/62817188/45375) there that summarizes (and links to) our discussion in #10967 (using statements in pipelines / as expressions).",
      "created_at": "2020-07-09T17:24:38Z",
      "updated_at": "2020-07-09T17:25:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As far as I know, assignment has always allowed full statements on the RHS.\r\n\r\nI could have sworn there was a time back in the dark ages of v2 or 1 where you couldn't have an `if` statement on the RHS...  Maybe I'm thinking of `return` statements? \ud83e\udd37 anyway thanks for the correction \u2764\ufe0f \r\n",
      "created_at": "2020-07-09T17:26:22Z",
      "updated_at": "2020-07-09T17:26:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I could have sworn there was a time back in the dark ages of v2 or 1 where you couldn't have an if statement on the RHS\r\n\r\n@SeeminglyScience You are right, and it was relaxed to allow statement on the right hand side of assignment in v3.\r\nA parsing error is possible by semantic checks, but may not be worth the effort.",
      "created_at": "2020-07-09T17:30:42Z",
      "updated_at": "2020-07-09T17:30:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm... I just tried `$var = if ($true) { 'yay' }` and `$var = foreach ($i in 1..10) { $i }` in v2, and it worked.\r\n\r\nHowever, something related is indeed broken, all the way up to v5.1 (fine since v6), although the scenario is very specific:\r\n\r\n```powershell\r\n# Breaks in *Windows PowerShell* - OK in PowerShell Core.\r\n@{\r\n  Foo = if ($true) { \"yes\" } # Value is an `if` statement that LACKS AN `else` and there's NO OTHER ENTRY on the SAME LINE\r\n  Bar = 'Baz' # !! Any key AFTER triggers the error\r\n}\r\n```",
      "created_at": "2020-07-09T17:39:01Z",
      "updated_at": "2020-07-09T17:39:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience You are right, and it was relaxed to allow statement on the right hand side of assignment in v3.\r\n> A parsing error is possible by semantic checks, but may not be worth the effort.\r\n\r\nSee that's what I thought but then:\r\n\r\n> Hmm... I just tried `$var = if ($true) { 'yay' }` and `$var = foreach ($i in 1..10) { $i }` in v2, and it worked.\r\n\r\nI tried it too with `-verison 2` and it worked.  I know there are  some scenarios where `-version 2` doesn't work exactly the same but I wouldn't have thought this would be one. You know if it was back ported? or maybe a change between 1 and 2?\r\n\r\nAt least I know I'm not crazy \ud83d\ude00 ",
      "created_at": "2020-07-09T17:46:05Z",
      "updated_at": "2020-07-09T17:46:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I know there are some scenarios where `-version 2` doesn't work exactly the same\r\n\r\nThat's good to know (`-version 2` is what I used too) - would have never occurred to me.\r\n\r\n",
      "created_at": "2020-07-09T17:51:21Z",
      "updated_at": "2020-07-09T17:51:21Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> That's good to know (`-version 2` is what I used too) - would have never occurred to me.\r\n\r\nFull disclosure, that's what I've **heard**.  I don't remember anything specific or having ran into anything personally (though I also don't use it super often) so ymmv",
      "created_at": "2020-07-09T17:55:42Z",
      "updated_at": "2020-07-09T17:55:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Hmm... I just tried `$var = if ($true) { 'yay' }` and `$var = foreach ($i in 1..10) { $i }` in v2, and it worked.\r\n\r\nAh, then I must remember it wrong. It could be a v1 -> v2 change. I doubt it would be ported back to v2 if it was done in v3, as v3 was a huge rewritten of a lot stuff.\r\n\r\n> However, something related is indeed broken, all the way up to v5.1 (fine since v6), although the scenario is very specific:\r\n\r\nI think this one was fix by https://github.com/PowerShell/PowerShell/pull/7002",
      "created_at": "2020-07-09T18:52:56Z",
      "updated_at": "2020-07-09T18:52:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @daxian-dbw. \r\n\r\nCan you tell us definitely if there can ever be a difference between running a later version with `-version 2` and a stand-alone v2 version and, if so, what those difference are?",
      "created_at": "2020-07-09T19:45:31Z",
      "updated_at": "2020-07-09T19:46:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't think there is any difference between running a stand-alone v2 version and running `powershell -v 2`.\r\nThe reason to have `powershell -v 2` was that there were breaking changes introduced in v3 and we needed a way for users to keep using v2 without worrying about anything broken. So by definition, it shouldn't allow any difference.\r\n\r\nI believe the v2 assemblies that are in-box for `powershell -v 2` to work were just a redistribution of those from a stand-alone v2 version. So, more precisely, there shouldn't be any difference code-wise.",
      "created_at": "2020-07-09T21:44:12Z",
      "updated_at": "2020-07-09T23:08:38Z"
    }
  ],
  "created_at": "2020-07-09T16:04:44Z",
  "number": 13146,
  "state": "closed",
  "title": "`return` on the RHS of an assignment ignores the assignment",
  "updated_at": "2020-07-09T23:08:38Z"
}