{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14685",
  "author": "plastikfan",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\n\r\n-->\r\n\r\nTrying to solve parameter binding issues for a command's parameters is difficult, because generally the error message that is returned generally has nothing in it to help you resolve the problem.\r\n\r\nTypically, you'll see something like this:\r\n\r\n>  ParameterBindingException: Parameter set cannot be resolved using the specified named parameters. One or more parameters issued cannot be used together or an insufficient number of parameters were provided.\r\n\r\nThis is not helpful. As an alternative, the user can try to use get-command -syntax. The problem with this however is that it returns a bunch of parameter set info for all sets defined for a command, except that for each set, the parameter set name is not shown. Eg:\r\n\r\n```powershell\r\n\u03bb get-command Rename-Many -syntax\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> [-Drop <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> -Anchor <array> -End [-Drop <string>] [-Relation <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> -Anchor <array> -Start [-Drop <string>] [-Relation <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> -Anchor <array> [-Drop <string>] [-Relation <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> -End [-Drop <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> -Start [-Drop <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Prepend <string> [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Append <string> [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n```\r\n\r\nAnd the corresponding faulty definition:\r\n\r\n```powershell\r\n  param\r\n  (\r\n    [Parameter(Mandatory, ValueFromPipeline = $true)]\r\n    [System.IO.FileSystemInfo]$underscore,\r\n\r\n    [ValidateScript( { { $(test-ValidPatternArrayParam -Arg $_ -AllowWildCard ) } })]\r\n    [Parameter(ParameterSetName = 'MoveToStart', Mandatory)]\r\n    [Parameter(ParameterSetName = 'MoveToEnd', Mandatory)]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridStart', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridEnd', Mandatory)]\r\n    [Parameter(ParameterSetName = 'NoMoveUpdate', Mandatory)]\r\n    [array]$Pattern,\r\n\r\n    [Parameter(ParameterSetName = 'MoveToStart')]\r\n    [Parameter(ParameterSetName = 'MoveToEnd')]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor')]\r\n    [Parameter(ParameterSetName = 'HybridStart')]\r\n    [Parameter(ParameterSetName = 'HybridEnd')]\r\n    [Parameter(ParameterSetName = 'NoMoveUpdate')]\r\n    [string]$Drop,\r\n\r\n    [ValidateScript( { $(test-ValidPatternArrayParam -Arg $_) })]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridStart', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridEnd', Mandatory)]\r\n    [array]$Anchor,\r\n\r\n    [ValidateSet('before', 'after')]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor')]\r\n    [Parameter(ParameterSetName = 'HybridStart')]\r\n    [Parameter(ParameterSetName = 'HybridEnd')]\r\n    [string]$Relation = 'after',\r\n\r\n    [Parameter(ParameterSetName = 'MoveToStart', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridStart', Mandatory)]\r\n    [switch]$Start,\r\n\r\n    [Parameter(ParameterSetName = 'MoveToEnd', Mandatory)]\r\n    [Parameter(ParameterSetName = 'HybridEnd', Mandatory)]\r\n    [switch]$End,\r\n\r\n    [ValidateScript( { { $(test-ValidPatternArrayParam -Arg $_) } })]\r\n    [Parameter(ParameterSetName = 'MoveToStart')]\r\n    [Parameter(ParameterSetName = 'MoveToEnd')]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor')]\r\n    [Parameter(ParameterSetName = 'HybridStart')]\r\n    [Parameter(ParameterSetName = 'HybridEnd')]\r\n    [Parameter(ParameterSetName = 'NoMoveUpdate')]\r\n    [array]$Copy,\r\n\r\n    [Parameter(ParameterSetName = 'MoveToStart')]\r\n    [Parameter(ParameterSetName = 'MoveToEnd')]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor')]\r\n    [Parameter(ParameterSetName = 'HybridStart')]\r\n    [Parameter(ParameterSetName = 'HybridEnd')]\r\n    [Parameter(ParameterSetName = 'NoMoveUpdate')]\r\n    [string]$With,\r\n\r\n    [Parameter(ParameterSetName = 'MoveToStart')]\r\n    [Parameter(ParameterSetName = 'MoveToEnd')]\r\n    [Parameter(ParameterSetName = 'MoveToAnchor')]\r\n    [Parameter(ParameterSetName = 'HybridStart')]\r\n    [Parameter(ParameterSetName = 'HybridEnd')]\r\n    [Parameter(ParameterSetName = 'NoMoveUpdate')]\r\n    [string]$Paste,\r\n\r\n    [Parameter(ParameterSetName = 'Prepend', Mandatory)]\r\n    [string]$Prepend,\r\n\r\n    [Parameter(ParameterSetName = 'Append', Mandatory)]\r\n    [string]$Append,\r\n\r\n    [Parameter()]\r\n    [ValidateScript( { -not($PSBoundParameters.ContainsKey('Directory')); })]\r\n    [switch]$File,\r\n\r\n    [Parameter()]\r\n    [ValidateScript( { -not($PSBoundParameters.ContainsKey('File')); })]\r\n    [switch]$Directory,\r\n  )\r\n```\r\n(which for some reason fails when invoked as:  gci \\<params\\> | Rename-Many -Pattern 'foo' -Start -WhatIf\r\nAll I know is that Anchor is the problem, *Anchor* should not be required, but PowerShell disagrees, but why?)\r\n\r\nThis is for a command (Rename-Many) that I'm currently building. I have defined 8 parameter sets, (currently not working as expected) and I'm trying to fix the definition. I can estimate which of those entries is for which parameter set, but when you're trying to resolve an issue, you really want powershell to tell you how it's determining the parameter set, rather than you yourself trying to guess what's happening (well I mean applying the rules of parameter sets as documented). \r\n\r\nFor each entry in that result set, using the -synax option, can we also have the parameter set name dislayed. This would help out in resolving issues in parameter binding.\r\n\r\nFor example, the first entry returned:\r\n\r\n```powershell\r\nRename-Many -underscore <FileSystemInfo> -Pattern <array> [-Drop <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n```\r\n\r\nThis result does not tell me which parameter set it refers to. We need the parameter set name to be displayed somewhere in the result.\r\n\r\nBy the way, if you could let me know if there are some other techniques/tools (I've tried Trace-Command to no avail) that can help with parameter binding issues, I would be grateful.\r\n\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": "2021-01-31T21:32:14Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that showing the parameter-set names would be helpful, which has previously been suggested in #6856 (albeit with `-?` / `Get-Help` in general).\r\n\r\n",
      "created_at": "2021-01-31T21:01:47Z",
      "updated_at": "2021-01-31T21:08:44Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Ah ok. That issue talks about that info not being helpful to the end user, which is fair enough, but we as developers need another way of finding this out even if the end user does not. Jsut because the user maybe not interested in the parameter set name, its presence would not be deterimental to them, so in a way I don't understand the reticence. That issue has been opened a while now but not addressed or closed, so what' s gonna happen to it?\r\n\r\nParameter set resolution is difficult as it is and we need some way to help debug these issues.\r\n",
      "created_at": "2021-01-31T21:09:01Z",
      "updated_at": "2021-01-31T21:09:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the meta problem: It's always a good question as to what happens to old, seemingly abandoned proposals. Renewed interest, even via an accidental duplicate or near-duplicate may revive the discussion, but it's important to (a) link to old proposals and (b) agree on where the discussion should continue.\r\n\r\nMy guess is that the reticence is around two aspects:\r\n\r\n* Parameter-set names are considered an implementation detail, not public information - though I don't think it would be a problem to expose them, because they do carry useful information even for the end user, even though the need to show them may be more pressing for developers.\r\n\r\n   * As long as no one expects these names to be part of a public contract, I don't think showing them is problematic.\r\n\r\n* Syntax-diagram output would get longer by 1-2 lines _per parameter set_, which with `-?` could make them (partially) scroll off screen in smaller windows and even with `Get-Command -Syntax` may no longer fit on a single screen.\r\n\r\nEven if the parameter-set names were _not_ to be shown with `-?`, `Get-Help`, and only shown with `Get-Command -Syntax` and possibly also `Get-Help -Full`, what is unequivocally helpful to both end users and developers is to highlight the _unique_ parameters in each parameter set, as suggested @bpayette [here](https://github.com/PowerShell/PowerShell/issues/6856#issuecomment-388473915) (a comment that also makes the two points above).",
      "created_at": "2021-01-31T21:22:54Z",
      "updated_at": "2021-01-31T21:22:54Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Actually, I just reviwed the chat on that other issue (#8692) and somebody has written a function that implements this as I need, as this is a duplcate, I'll close.",
      "created_at": "2021-01-31T21:27:49Z",
      "updated_at": "2021-01-31T21:27:49Z"
    }
  ],
  "created_at": "2021-01-31T20:55:18Z",
  "labels": [],
  "number": 14685,
  "state": "closed",
  "title": "Feature Request: Get-Command -syntax should display the parameter set name for each parameter set",
  "updated_at": "2021-02-02T17:20:34Z"
}