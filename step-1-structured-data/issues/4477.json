{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4477",
  "author": "iSazonov",
  "body": "From https://github.com/PowerShell/PowerShell/pull/4084#issuecomment-312478357\r\n\r\nWe could enhance and unify Ranges. Currently Min and Max values are allowed but user can want to exclude them. Ex., \"Positive\" exclude zero. So the \"Positive\" range looks:\r\n```powershell\r\nValidateRange(0, int.MaxValue, RangeOption.ExcludeMin)\r\n```\r\n\"Negative\":\r\n```powershell\r\nValidateRange( -int.MaxValue, 0, RangeOption.ExcludeMax)\r\n```\r\nExclude both (allow 0.5):\r\n```powershell\r\nValidateRange( 0, 1, RangeOption.ExcludeMin+RangeOption.ExcludeMax)\r\n```\r\n\r\nAnd we can move `switch (rangeKind)` to a constructor (with assigning a specific error message) and implement general ValidateElement method.\r\n\r\n",
  "closed_at": "2021-08-25T04:12:06Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 Please confirm if you plan continue the work.",
      "created_at": "2017-08-03T09:23:01Z",
      "updated_at": "2017-08-03T09:23:01Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "yes @iSazonov , please assign to me",
      "created_at": "2017-08-03T14:24:51Z",
      "updated_at": "2017-08-03T14:24:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I wonder if this is really necessary.\r\nIt's only useful for double/float ranges and I don't think those are used very often.",
      "created_at": "2017-08-03T16:15:09Z",
      "updated_at": "2017-08-03T16:15:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "double/float ranges - it is really _limitation_ in ValidRangeAttribute - why we allow it for [int] but block for double/float? - we're provoking customers to use workarounds.\r\n\r\nWith enumerations the enhancement can be usefull too. Ex., if we want only exclude minimal and maximal values: 1,3,5,7 -> ValidateRange(1,7, ExcludeMin+ExcludeMax) - we accept only 3 and 5. If later we add 2: 1,2,3,5,7 -> ValidateRange(1,7, ExcludeMin+ExcludeMax) - we accept now 2, 3 and 5 without change the attribute.",
      "created_at": "2017-08-04T06:24:50Z",
      "updated_at": "2017-08-04T06:24:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It's really not that useful for doubles because equality is not precise.\r\n\r\nI feel like this complicates a simple attribute for little benefit. Enums are usually sequential and it's easier to understand an inclusive range.\r\n\r\nAs a parallel, the `..` operator is always closed and I've never seen a request to support open intervals.",
      "created_at": "2017-08-04T18:33:53Z",
      "updated_at": "2017-08-04T18:33:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I've never seen a request to support open intervals\r\n\r\nIt's not a bug to open immediately a support case. So a script writer just uses a bypass.",
      "created_at": "2017-08-06T17:52:28Z",
      "updated_at": "2017-08-06T17:52:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Features and new apis should be added for the right reasons. It's not enough that someone might need to write some code - here is a very brief list of things I think about when considering new features:\r\n* Does the feature introduce or remove complexity for the user?\r\n* Does the feature introduce or remove complexity in the implementation?\r\n* If the feature introduces complexity - will there be a net benefit? Will it help enough people to justify the feature?\r\n* What do we lose in introduce the feature?\r\n\r\nIn my mind, this feature does not help enough people to justify the time spent reviewing the design and implementation and ensuring it gets tested and documented correctly.\r\n\r\nPowerShell has enough users - if nobody has complained about this, you're probably right that they worked around it, but it also tells me it doesn't come up often enough to warrant even one complaint.",
      "created_at": "2017-08-07T18:28:36Z",
      "updated_at": "2017-08-07T18:28:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thank you for your deep explanation. It would be good to have in our documentation next to breaking change requirements.\r\n\r\n1. Does the feature introduce or remove complexity for the user? - No and no.\r\n2. Does the feature introduce or remove complexity in the implementation? - It is short and simple code.\r\n3. If the feature introduces complexity - will there be a net benefit? Will it help enough people to justify the feature? It is simple. The net benefit is that it closes the only and final omission to get a complete solution. We can't appreciate how many people want this, because now they're using workarounds.\r\n4. The main difficulty may be to distinguish int anf float parameter types. This can actually create complexity.\r\n\r\n\r\nA separate question we left in the past PR is that we should remove second code path and implement general ValidateElement method.\r\n\r\n",
      "created_at": "2017-08-08T04:35:18Z",
      "updated_at": "2017-08-08T04:35:18Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I disagree on 1. - it might remove complexity for the rare case, but in the common case, there are additional options that must be considered - so instead of one decision, now I must make two or three.\r\n\r\nOften I see unnecessary complexity and I think this happens due to feature creep - adding something seemed reasonable at the time, but the accretion of features results in a mess over the long term.",
      "created_at": "2017-08-08T16:22:07Z",
      "updated_at": "2017-08-08T16:22:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's also very subjective. It also gives rise to complexity if it falls short of our expectations. You like Positive/Negative. I would preffer [classic math terms](https://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology):\r\n(a, b)\r\n(a, b]\r\n[a, b)\r\n[a, b]",
      "created_at": "2017-08-09T08:18:17Z",
      "updated_at": "2017-08-09T08:18:17Z"
    }
  ],
  "created_at": "2017-08-03T09:22:08Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 4477,
  "state": "closed",
  "title": "Enhance ValidateRange attributes",
  "updated_at": "2021-08-25T04:12:06Z"
}