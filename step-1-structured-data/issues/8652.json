{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8652",
  "author": "mklement0",
  "body": "Note: This is a regression from Windows PowerShell.\r\n\r\nThe error occurs when `.Open()` is called.\r\n\r\nNote that equivalent code written in and run from PowerShell does _not_ exhibit this problem (#8643  shows an example).\r\n\r\n# Steps to reproduce\r\n\r\nCreate a .NET Core console application with the following code and run it with `dotnet run`:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace Sample\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var runspace = RunspaceFactory.CreateOutOfProcessRunspace(null))\r\n            {\r\n              runspace.Open();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe application should run and exit quietly, with exit code `0`.\r\n\r\n# Actual behavior\r\n\r\nThe exit code is `134`, and the following error message is printed:\r\n\r\n```none\r\n\r\nUnhandled Exception: System.Management.Automation.Remoting.PSRemotingTransportException: An error occurred while starting the background process. Error reported: No such file or directory. ---> System.ComponentModel.Win32Exception: No such file or directory\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Management.Automation.Runspaces.PowerShellProcessInstance.Start()\r\n   at System.Management.Automation.Remoting.Client.OutOfProcessClientSessionTransportManager.CreateAsync()\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Runspaces.AsyncResult.EndInvoke()\r\n   at System.Management.Automation.Runspaces.Internal.RunspacePoolInternal.EndOpen(IAsyncResult asyncResult)\r\n   at System.Management.Automation.Runspaces.Internal.RemoteRunspacePoolInternal.Open()\r\n   at System.Management.Automation.Runspaces.RunspacePool.Open()\r\n   at System.Management.Automation.RemoteRunspace.Open()\r\n   at Sample.Program.Main(String[] args) in /path/to/Program.cs:line 13\r\n```\r\n\r\nAdditionally, the `dotnet` host may crash.\r\n\r\n# Environment data\r\n\r\n```none\r\nTargets netcoreapp2.1 and netcoreapp2.2 with\r\nMicrosoft.PowerShell.SDK NuGet package v6.2.0-preview.3 on:\r\nmacOS 10.14.2\r\nUbuntu 18.04.1 LTS\r\nMicrosoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just wondering!!\r\n\r\nWhich version of the PowerShell SDK we are talking about??\r\n\r\n:)",
      "created_at": "2019-01-15T18:19:03Z",
      "updated_at": "2019-01-15T18:19:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @MaximoTrinidad; I've modified the \"Environment data\" section to state the NuGet package version.",
      "created_at": "2019-01-15T18:49:54Z",
      "updated_at": "2019-01-15T18:49:54Z"
    },
    {
      "author": "Sjark",
      "author_association": "NONE",
      "body": "This also happens when targeting netcoreapp3.0 with nuget package:\r\nSystem.Management.Automation version 6.2.3\r\n\r\nThis seems to happen cause it can't find the pwsh.exe file.\r\nIn my project, it looks for pwsh.exe in folder: \r\n\"bin\\Debug\\netcoreapp3.0\\runtimes\\win-x64\\lib\\netcoreapp2.1\", \r\n\r\nbut the only files that are there is: \r\n\"Microsoft.PowerShell.CoreCLR.Eventing.dll\"\r\n\"System.Management.Automation.dll\".\r\n\r\nIt would be nice if you had the option to specifiy the pwsh.exe path when creating a new PowerShellProcessInstance, that way you can use a version of pwsh already deployed to the machine you are running on.\r\n\r\n",
      "created_at": "2019-11-06T19:39:06Z",
      "updated_at": "2019-11-06T19:39:06Z"
    },
    {
      "author": "LunicLynx",
      "author_association": "NONE",
      "body": "@Sjark \r\nJust found this hack to set another path\r\n```csharp\r\nvar pspi = new PowerShellProcessInstance();\r\npspi.Process.StartInfo.FileName = @\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\";\r\npspi.Process.Start();\r\nvar runspace = RunspaceFactory.CreateOutOfProcessRunspace(new TypeTable(new string[0]), pspi);\r\n```",
      "created_at": "2019-11-14T15:39:27Z",
      "updated_at": "2019-11-14T15:39:53Z"
    },
    {
      "author": "Sjark",
      "author_association": "NONE",
      "body": "Just tested the workaround @LunicLynx provided using System.Management.Automation@7.0.0-preview.4.\r\n\r\nThis worked great when pointing to pwsh.exe 7.0.0-preview.4.\r\n\r\nI also tried targeting Windows Powershell like in the comment above, this failed cause it tried to start powershell 2.0 for some reason.\r\n\r\nThis can be fixed by adding:\r\n```csharp\r\npspi.Process.StartInfo.Arguments = $\" -Version 5.1{pspi.Process.StartInfo.Arguments}\";\r\n```\r\n\r\nThis workaround works great, but it would be nice to be able to configure this when creating new PowerShellProcessInstance.",
      "created_at": "2019-11-15T19:39:08Z",
      "updated_at": "2019-11-15T19:39:08Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "This problem still applies to PowerShell 7.0.0 final.",
      "created_at": "2020-03-26T11:31:14Z",
      "updated_at": "2020-03-26T11:31:14Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Just ran into this in 7.0.1 as well. \r\n\r\nManually setting `Process.StartInfo.FileName` to \"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" (still) works on Windows, but this will be a mess to monkey-patch in a serverless deployment \ud83d\ude12 ",
      "created_at": "2020-05-26T20:24:37Z",
      "updated_at": "2020-05-26T20:24:37Z"
    },
    {
      "author": "arunswarnam",
      "author_association": "NONE",
      "body": "`pspi.Process.StartInfo.FileName = @\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\";` . Is there a way for this workaround to be able to run on all platforms supported by PSCore by detecting the path at execution rather than hard coding?",
      "created_at": "2020-05-28T15:18:17Z",
      "updated_at": "2020-05-28T15:18:17Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "The runtime detection _is_ the problem:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/5f28df120ab95ebb8871d19d3bdb8046c5b9817c/src/System.Management.Automation/engine/Utils.cs#L490-L492\r\n\r\nNot sure what the most robust method for detecting `$PSHome` for a specific version at runtime would be",
      "created_at": "2020-05-28T21:03:59Z",
      "updated_at": "2020-05-28T21:03:59Z"
    },
    {
      "author": "Sjark",
      "author_association": "NONE",
      "body": "If locating `$PSHome` for a given version at runtime is the problem, there should at least be an option to set it in the constructor of `PowerShellProcessInstance`",
      "created_at": "2020-05-29T07:32:44Z",
      "updated_at": "2020-05-29T07:32:44Z"
    },
    {
      "author": "ZazioMDT",
      "author_association": "NONE",
      "body": "I just ran into this using 7.0.3.  I fixed it by passing in 5.1 in the version field. \r\n\r\n            using (PowerShellProcessInstance instance = new PowerShellProcessInstance\r\n                (new Version(5, 1), null, null, true))\r\n            {\r\n                using (Runspace rs = RunspaceFactory.CreateOutOfProcessRunspace(\r\n                    new TypeTable(Array.Empty<string>()), instance))\r\n                {\r\n\r\nI tried out the StartInfo.FileName but then Write-Information was an unrecognized command.  This lead me to look into whether I was passing a correct version to the PowerShellProcessInstance constructor.  I had the Version at 5.0, I changed it to 5.1 and it started working.  I removed the FileName and it continued to work.",
      "created_at": "2020-07-17T17:25:34Z",
      "updated_at": "2020-07-17T17:25:34Z"
    }
  ],
  "created_at": "2019-01-15T18:16:06Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 8652,
  "state": "open",
  "title": "PowerShell SDK: Opening an out-of-process runspace fails",
  "updated_at": "2020-07-17T17:25:34Z"
}