{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15916",
  "author": "dennisameling",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nOriginally reported to the Visual Studio team, which indicated that this is apparently a PowerShell issue: https://developercommunity.visualstudio.com/t/class-177f0c4a-1cd3-4de7-a32c-71dbbb9fa36d-missing/1491726#T-N1499903\r\n\r\n(Run on an ARM64 device with Windows 11, e.g. a Surface Pro X)\r\n- Open x64 or ARM64 `pwsh`\r\n- `git clone https://github.com/nodejs/node-gyp`\r\n- `cd node-gyp`\r\n- `pwsh -ExecutionPolicy Unrestricted -Command \"Add-Type -Path .\\lib\\Find-VisualStudio.cs; [VisualStudioConfiguration.Main]::PrintJson()\"`\r\n\r\nYou can also simply copy the contents of https://github.com/nodejs/node-gyp/blob/master/lib/Find-VisualStudio.cs to a file if you don't want to clone the whole repo.\r\n\r\nNote that this works as expected on x86 `pwsh` and `powershell` on an ARM64 device (see screencast below) - only x64 and ARM64 are affected.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS C:\\repos\\node-gyp> pwsh -ExecutionPolicy Unrestricted -Command \"Add-Type -Path .\\lib\\Find-VisualStudio.cs; [VisualStudioConfiguration.Main]::PrintJson()\"\r\n[{\"path\":\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Preview\",\"version\":\"17.0.31606.5\",\"packages\":[\"Microsoft.VisualStudio.Product.Community\",\"Microsoft.V.....\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS C:\\repos\\node-gyp> pwsh -ExecutionPolicy Unrestricted -Command \"Add-Type -Path .\\lib\\Find-VisualStudio.cs; [VisualStudioConfiguration.Main]::PrintJson()\"\r\nMethodInvocationException: Exception calling \"PrintJson\" with \"0\" argument(s): \"Retrieving the COM class factory for component with CLSID {177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D} failed due to the following error: 80040154 Klasse is niet geregistreerd (0x80040154 (REGDB_E_CLASSNOTREG)).\"\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nSee above\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\nSee below a side-by-side of PowerShell x86, x64 and ARM64, respectively, running on an ARM64 Surface Pro X with Windows 11. The script works on x86 PowerShell, but not x64 and ARM64.\r\n\r\nhttps://user-images.githubusercontent.com/17739158/129261076-c1729ff3-1824-4e8d-a260-2b6d87e7aa1a.mp4\r\n\r\n",
  "closed_at": "2021-08-13T12:34:25Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw for information.",
      "created_at": "2021-08-13T03:28:30Z",
      "updated_at": "2021-08-13T03:28:30Z"
    },
    {
      "author": "dennisameling",
      "author_association": "NONE",
      "body": "Closing this issue as a Microsoft employee, despite what was being said earlier, confirmed that [this is not a PowerShell but a VS issue](https://developercommunity.visualstudio.com/t/class-177f0c4a-1cd3-4de7-a32c-71dbbb9fa36d-missing/1491726#T-N1499903-N1502782).",
      "created_at": "2021-08-13T12:34:25Z",
      "updated_at": "2021-08-13T12:34:25Z"
    },
    {
      "author": "ZacWalk",
      "author_association": "NONE",
      "body": "Small update on this: From VS 17.2 preview 3, support will be added allowing the Microsoft.VisualStudio.Setup.Configuration component to be instantiated in an ARM64 process. \r\n\r\nIndeed this is not a powershell issue rather a problem that an ARM64 compatible version of this component does not currently exist. Unfortunately the Developer Community issue is already closed and I cannot comment there.",
      "created_at": "2022-04-11T14:28:48Z",
      "updated_at": "2022-04-11T14:28:48Z"
    },
    {
      "author": "dennisameling",
      "author_association": "NONE",
      "body": "I actually noticed this a few days ago indeed - there's now a `C:\\ProgramData\\Microsoft\\VisualStudio\\Setup\\arm64ec` folder which registers the ARM64 component. This resolves the issue I reported originally \ud83c\udf89 ",
      "created_at": "2022-04-11T14:35:06Z",
      "updated_at": "2022-04-11T14:35:06Z"
    }
  ],
  "created_at": "2021-08-12T20:00:02Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Resolution-External"
  ],
  "number": 15916,
  "state": "closed",
  "title": "Class 177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D missing on Windows 11 ARM64 when using PowerShell x64 or ARM64",
  "updated_at": "2022-04-11T14:35:06Z"
}