{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7692",
  "author": "mklement0",
  "body": "if a cmdlet's mandatory parameter is `[System.Collections.Generic.List[string]]`-typed (rather than `[string[]]`), passing multiple values works from the command line (`-AllowedScopes a, b`), but misbehaves when PowerShell prompts for the values.\r\n\r\nThe problem seems to be limited to `[string]`-typed lists.\r\n\r\nOther collection types may be affected too.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Define a simple cmdlet.\r\nAdd-Type -TypeDefinition @'\r\nusing System.Collections.Generic;\r\nusing System.Management.Automation;\r\n\r\nnamespace MyCmdlets\r\n{\r\n    [Cmdlet(\"Add\", \"Client\")]\r\n    public class AddClient : Cmdlet\r\n    {\r\n        [Parameter(Mandatory = true)]\r\n        public List<string> AllowedScopes;\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            WriteObject(AllowedScopes.Count);\r\n            foreach (var scope in AllowedScopes) {\r\n                WriteObject(scope);\r\n            }\r\n        }\r\n    }\r\n}\r\n'@ -PassThru | % Assembly | Import-Module\r\n\r\nAdd-Client -AllowedScopes a, b\r\n\r\n'---'\r\n\r\n# Let PowerShell prompt and pass the same values as above interactively:\r\n# Type: a<Enter>b<Enter><Enter>\r\nAdd-Client\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n2\r\na\r\nb\r\n---\r\n\r\ncmdlet Add-Client at command pipeline position 1\r\nSupply values for the following parameters:\r\nAllowedScopes[0]: a\r\nAllowedScopes[1]: b\r\nAllowedScopes[2]:\r\n2\r\na\r\nb\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n2\r\na\r\nb\r\n---\r\n\r\ncmdlet Add-Client at command pipeline position 1\r\nSupply values for the following parameters:\r\nAllowedScopes[0]: a\r\nAllowedScopes[1]: b\r\nAllowedScopes[2]:\r\n1\r\na b\r\n```\r\n\r\nThat is, `a` and `b` were concatenated with a space and assigned to a _single_ list element of the `AllowedScopes` parameter.\r\n\r\nIt seems that PowerShell's stringifies the entire array `'a', 'b'` and uses that as the only list element.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-rc.1 on macOS 10.13.6\r\nPowerShell Core v6.1.0-rc.1 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-rc.1 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\nWindows PowerShell v5.1.17134.165 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Yeah - looks like a bug during type conversion in the parameter binder. It can be easily repro'ed using a function: \r\n```powershell\r\nfunction doit {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Mandatory)]\r\n        [System.Collections.Generic.List[string]]\r\n            $x\r\n    )\r\n    ,$x\r\n}\r\n```\r\nIt does work properly if the parameter is declared `[string[]]`.",
      "created_at": "2018-09-03T01:00:19Z",
      "updated_at": "2018-09-03T01:00:19Z"
    }
  ],
  "created_at": "2018-09-02T19:44:12Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets"
  ],
  "number": 7692,
  "state": "open",
  "title": "Automatic prompting for mandatory string-typed generic list parameter binds values incorrectly",
  "updated_at": "2018-09-03T01:01:14Z"
}