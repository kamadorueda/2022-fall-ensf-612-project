{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3323",
  "author": "powercode",
  "body": "Add a CodeMethod to extend System.Diagnostics.Process with and Environment property, returning a hashtable of the Environment variables for the process.",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "#3322 On all supported platforms, the implementation for getting one is almost identical to getting the other. (i.e. cmdline vs env)\r\n",
      "created_at": "2017-05-07T08:57:04Z",
      "updated_at": "2017-05-07T08:58:08Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "It would probably need to be a hashtable instance with a case sensitive comparer for OSX/Linux, as their environments' keys are CS. ",
      "created_at": "2017-05-31T19:43:09Z",
      "updated_at": "2017-05-31T19:43:21Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode I am interested on helping with this issue. First time contributor here\r\n\r\nAfter a dive in the codebase I have a couple of points:\r\n\r\n* System.Diagnostics.Process is part of the .Net Core framework, which means we have to use extensions methods, am I correct that the class to modify should be [ProcessCodeMethods](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/ProcessCodeMethods.cs)?\r\n* If so, should this extension method be part of Process objects retrieved by the **_-Process_** cmdlets? Because the _GetParentProcess_ method, which is in the ProcessCodeMethods file, is not part of the Process object retrieved by Get-Process cmldet (I locally confirmed it).\r\n",
      "created_at": "2018-12-30T03:06:10Z",
      "updated_at": "2018-12-30T03:06:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@renehernandez Yeah, that looks about the right place to put it. \r\n\r\nI believe that those methods aren't applied to the `Process` objects as-is; instead, `CodeProperty` methods are applied as ETS methods to the objects when they're retrieved by the Get-Process cmdlet. \r\n\r\nSee here for how it's done with applying the `Parent` property to process objects, referencing the internal helper method:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f31750c0d122b0d33976f16802454f0ca58418a5/src/System.Management.Automation/engine/Types_Ps1Xml.cs#L278-L279",
      "created_at": "2018-12-30T03:46:55Z",
      "updated_at": "2018-12-30T04:19:17Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Thanks, that solved the puzzle between the methods and the members of the Process object from the **\\*-Process** cmdlets. \r\n\r\nI think I have enough to get started working on it",
      "created_at": "2018-12-30T03:57:57Z",
      "updated_at": "2018-12-30T03:57:57Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "For what I have been reading, there is no standard implementation in .Net to get the runtime environment variables for a given process.\r\n\r\nAs far as existing properties in the `Process` class, the [`StartInfo`](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo?view=netcore-2.2) property provides `Environment` and `EnvironmentVariables` properties which may store custom envvar applied before starting the process, but may be `null` otherwise.\r\n\r\nThe best line of development that I could find was to leverage the ideas and example from [gapotchenko](https://blog.gapotchenko.com/eazfuscator.net/reading-environment-variables).\r\n\r\nAny ideas?",
      "created_at": "2019-01-02T19:58:21Z",
      "updated_at": "2019-01-02T19:58:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @iSazonov do either of you fine folks have any experience in this area? A quick read through that blog post looks like it might require some p/invoke on Windows at the very least.\r\n\r\nPerhaps we ought to check with the .NET Core folks to see if they have plans to fix this issue in the Process class itself. A quick search on the CoreFX repo seems to indicate it hasn't been raised as an issue there yet, if a search of the obvious keywords are any indication.",
      "created_at": "2019-01-02T20:04:10Z",
      "updated_at": "2019-01-02T20:04:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it should be implemented in CoreFX at first. Feel free to contribute there.",
      "created_at": "2019-01-03T08:48:47Z",
      "updated_at": "2019-01-03T08:48:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree with @iSazonov that I would start by raising the issue in corefx",
      "created_at": "2019-01-08T19:05:56Z",
      "updated_at": "2019-01-08T19:05:56Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "See https://github.com/dotnet/corefx/issues/20252\r\n",
      "created_at": "2019-01-14T13:07:04Z",
      "updated_at": "2019-01-14T13:07:04Z"
    }
  ],
  "created_at": "2017-03-13T20:37:20Z",
  "labels": [
    "Issue-Enhancement",
    "Waiting - DotNetCore",
    "WG-Cmdlets-Management"
  ],
  "number": 3323,
  "state": "open",
  "title": "Extend Process with Environment Property",
  "updated_at": "2021-06-08T20:27:09Z"
}