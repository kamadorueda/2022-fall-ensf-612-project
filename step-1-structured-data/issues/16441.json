{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16441",
  "author": "Jaykul",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n`$PSStyle` has completely broken the PrivateData colors. Setting them no longer changes anything.\r\n\r\n![image](https://user-images.githubusercontent.com/192942/141235572-13f54390-51d2-4069-8952-6188eefba82b.png)\n\n### Expected behavior\n\n```console\nThe colors on `$Host.PrivateData` should affect the output\n```\n\n\n### Actual behavior\n\n```console\nChanges to `$Host.PrivateData` don't do anything anymore\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\nThis is what I expected:\r\n![image](https://user-images.githubusercontent.com/192942/141236901-724dbf60-77d5-430f-bdf4-3e9ae6174dab.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT ",
      "created_at": "2021-11-11T04:50:03Z",
      "updated_at": "2021-11-11T04:50:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "$Host.PrivateData works if there is no virtual terminal or it is disabled.",
      "created_at": "2021-11-11T05:13:05Z",
      "updated_at": "2021-11-11T05:13:05Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Setting them no longer changes anything.\r\n\r\nIf I change `$PSStyle.Progress.View` to `Classic` then the progress colors are from `$Host.PrivateData.Progress*`",
      "created_at": "2021-11-11T08:09:19Z",
      "updated_at": "2021-11-11T08:09:19Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Hm.  Error output obeys `$Host.PrivateData.ErrorForegroundColor` but not `$Host.PrivateData.ErrorBackgroundColor` for me, and only when `$ErrorView = ConciseView`.  For any other value of `$ErrorView`, no coloration is applied.\r\n\r\nMeanwhile, the `Get-Error` cmdlet applies `$PSStyle.Formatting.Error` coloration to the value of the returned object's `Exception.Message` property, as well as to the position-marking tildes of `InvocationInfo.PositionMessage`",
      "created_at": "2021-11-11T22:47:16Z",
      "updated_at": "2021-11-11T22:47:16Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "So **WITH NO NOTICE** a bunch of code was broken that customized error and verbose output colors, and **there is now no way** to customize them in a **compatible** fashion, except to feature-sniff for types/versions and _do it both ways_.\r\n\r\nI raised this MONTHS AGO as a **_REGRESSION BUG_** and I feel like it was completely brushed off and basically ignored. \r\n\r\nWhat is going on with prioritization of development over there?!?",
      "created_at": "2022-07-30T20:10:41Z",
      "updated_at": "2022-07-30T20:10:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dwtaber Error for classic view was a bug that was fixed via https://github.com/PowerShell/PowerShell/pull/17705\r\n\r\n@Jaykul the WGs are working through issues, but haven't gotten to this one.  I would propose to have a new `$PSStyle.Formatting.UsePrivateDataColors` set to `$true` by default which would have the old stream output use the old settings.  We could automatically flip this to `$false` if any of the new formatting colors are set.",
      "created_at": "2022-07-30T21:15:04Z",
      "updated_at": "2022-07-30T21:15:04Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "This did not (and does not) need to be one or the other. The new thing _could have_ been implemented on top of the old. If you implement it as automatic switching, you risk total confusion, when **all the colors** change when someone meant to change only one...\r\n\r\nPerhaps the more helpful thing would be to use the new `$PSStyle` but **update it automatically** when the PrivateData values are set. That is, treat `PrivateData` as a `[ConsoleColor]` _limited_ setter for `$PSStyle.Formatting`.\r\n\r\nSo if something runs: `$Host.PrivateData.ErrorForeground = \"Red\"` then in addition to updating PrivateData, you could also set ``$PSStyle.Formatting.Error += $PSStyle.Foreground.Red`` \r\n\r\nOr if they run `$Host.PrivateData.ErrorForeground = \"Black\"; $Host.PrivateData.ErrorBackground = \"Red\"` you could also set ``$PSStyle.Formatting.Error = $PSStyle.Foreground.Black + $PSStyle.Background.Red``\r\n\r\nAlthough right now, I'm not sure if the current formatting **supports** setting background colors. It seems broken to me.\r\n\r\n\r\n",
      "created_at": "2022-07-30T21:53:47Z",
      "updated_at": "2022-07-30T22:06:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul that is also an option.  The only problem is if then the user updates `$PSStyle`, it would not be possible to reflect that back into `PrivateData` unless they happen to use one of the 8 colors only.  It might just be something that gets documented and could be ok.",
      "created_at": "2022-07-30T21:58:09Z",
      "updated_at": "2022-07-30T21:58:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Actually, there's a problem with your proposal.  `$Host.PrivateData` is managed by the host (ConsoleHost, EditorServices, etc...), so every host would have to adopt that pattern.  `PrivateData` is just a PSObject so a host can have whatever they want in there.  The colors are just a de facto convention.",
      "created_at": "2022-07-30T22:07:04Z",
      "updated_at": "2022-07-30T22:07:04Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I think going one way would probably be good enough. I mean, I have code for converting from 16bit colors to 16 colors.",
      "created_at": "2022-07-30T22:07:32Z",
      "updated_at": "2022-07-30T22:07:32Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> Actually, there's a problem with your proposal. `$Host.PrivateData` is managed by the host (ConsoleHost, EditorServices, etc...), so every host would have to adopt that pattern. `PrivateData` is just a PSObject so a host can have whatever they want in there. The colors are just a de facto convention.\r\n\r\nSo what you're saying is that the HOST is still trying to set the colors, but the engine is injecting escape sequences into the text that override the host's settings?",
      "created_at": "2022-07-30T22:08:28Z",
      "updated_at": "2022-07-30T22:08:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Write-Error`, `Write-Verbose`, etc... are host callbacks.  It's up to the host to decide how to display them.  Here's the relevant section for ConsoleHost: https://github.com/PowerShell/PowerShell/blob/edac193cf05a540b1f5f59f23fd1eb29c2776ce1/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1395-L1402.  Currently, if VT is supported, it goes the VT route and by-passes the older code path that relies on `[Console]` APIs that accept `[ConsoleColor]` and overrides the color codes in the string (the string value still contains them).\r\n\r\nSo in the end, it's up to the host to decide what to do.  This was an unfortunate design choice early on.  ",
      "created_at": "2022-07-30T22:29:52Z",
      "updated_at": "2022-07-30T22:29:52Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "So, bottom line: you added a new, _non-host_ way of injecting virtual terminal escape sequences for the same purposes that already existed in the host, _and then_ changed the default host so that if it thinks it's running in a terminal that supports escape sequences ... it just ignores **it's own settings**. \r\n\r\nIs that right? Is backward compatibility just out the window forever?",
      "created_at": "2022-07-31T02:24:21Z",
      "updated_at": "2022-07-31T02:26:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": " I've proposed a solution due to the limitations of the existing design.  You had a different proposal which seemed good at first until I looked into it and it's not feasible.  If you have an alternate proposal, let's discuss it. ",
      "created_at": "2022-07-31T03:53:56Z",
      "updated_at": "2022-07-31T03:53:56Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'm frustrated, but I don't know _how_ I didn't understand that you'd deliberately deprecated PrivateData. Honestly, I don't think there's any point in putting a switch in. It would basically be the same as setting `$ENV:TERM = \"dumb\"` right?\r\n\r\nWriting a warning that they're deprecated when someone sets those properties (in a host that `SupportsVirtualTerminal`?) would be nice, so people can be reminded those things are now useless ... but unless we can do that, I think we might as well just close this \"as designed\". \ud83d\ude23",
      "created_at": "2022-08-01T03:48:37Z",
      "updated_at": "2022-08-01T03:48:37Z"
    }
  ],
  "created_at": "2021-11-11T04:27:06Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 16441,
  "state": "open",
  "title": "$Host.PrivateData colors are completely broken in PowerShell 7.2",
  "updated_at": "2022-08-01T03:48:37Z"
}