{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17282",
  "author": "BinaryWizard904",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe [null-coalescing assignment operator `??=`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#null-coalescing-assignment-operator-) is supposed to \"assign the value of its right-hand operand to its left-hand operand only if the left-hand operand evaluates to null.\" However, if the left-hand operand is strongly typed this assignment fails, even if the type is nullable such as a string.  For example, the one-liner `[string]$y = $null; $y ??= \"test\"; $y`, silently fails to assign a value to `$y`.\r\n\r\nThis issue also interacts very oddly with **ValidateSet**, where it actually produces an error.  A simple example of this is the function below.\r\n```\r\nfunction Test-NullCondAssignment{\r\n\t[CmdletBinding()]\r\n\tParam (\r\n\t\t[ValidateSet(\"None\",\"Read\",\"ReadOverrideEffectiveIdentity\")]\r\n\t\t[string]$DatasourceAccessRight\r\n\t)\r\n\t$DatasourceAccessRight ??= \"Read\"\r\n\t$DatasourceAccessRight\r\n}\r\n\r\nTest-NullCondAssignment\r\n```\r\nThrows the error:\r\n```\r\nMetadataError: untitled:Untitled-1:7:2\r\nLine |\r\n   7 |      $DatasourceAccessRight ??= \"Read\"\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The variable cannot be validated because the value  is not a valid value for the DatasourceAccessRight variable.\r\n```\r\nHowever if you remove the typing from `$DatasourceAccessRight` the function succeeds.  If you remove the **ValidateSet** the assignment silently fails just like the one-liner.\n\n### Expected behavior\n\n```console\nPS> [string]$y = $null; $y ??= \"test\"; $y\r\ntest\r\nPS> Test-NullCondAssignment\r\nRead\n```\n\n\n### Actual behavior\n\n```console\nPS> [string]$y = $null; $y ??= \"test\"; $y\r\n\r\nPS> Test-NullCondAssignment\r\nMetadataError: untitled:Untitled-1:7:2\r\nLine |\r\n   7 |      $DatasourceAccessRight ??= \"Read\"\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The variable cannot be validated because the value  is not a valid value for the DatasourceAccessRight variable.\n```\n\n\n### Error details\n\n```console\nException             : \r\n    Type        : System.Management.Automation.ValidationMetadataException\r\n    ErrorRecord : \r\n        Exception             : \r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The variable cannot be validated because the value  is not a valid value for the DatasourceAccessRight variable.\r\n            HResult : -2146233087\r\n        CategoryInfo          : MetadataError: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : ValidateSetFailure\r\n        InvocationInfo        : \r\n            ScriptLineNumber : 7\r\n            OffsetInLine     : 2\r\n            HistoryId        : -1\r\n            ScriptName       : untitled:Untitled-1\r\n            Line             : $DatasourceAccessRight ??= \"Read\"\r\n\r\n            PositionMessage  : At untitled:Untitled-1:7 char:2\r\n                               +     $DatasourceAccessRight ??= \"Read\"\r\n                               +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            PSCommandPath    : untitled:Untitled-1\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at Test-NullCoalescing, untitled:Untitled-1: line 7\r\n                                at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : \r\n        Name          : SetValue\r\n        DeclaringType : psvariable\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The variable cannot be validated because the value  is not a valid value for the DatasourceAccessRight variable.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  : \r\n   at System.Management.Automation.PSVariable.SetValue(Object value)\r\n   at System.Management.Automation.VariableOps.SetVariableValue(VariablePath variablePath, Object value, ExecutionContext executionContext, AttributeBaseAst[] attributeAsts)\r\n   at System.Management.Automation.Interpreter.FuncCallInstruction`5.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : MetadataError: (:) [], ValidationMetadataException\r\nFullyQualifiedErrorId : ValidateSetFailure\r\nInvocationInfo        : \r\n    ScriptLineNumber : 7\r\n    OffsetInLine     : 2\r\n    HistoryId        : -1\r\n    ScriptName       : untitled:Untitled-1\r\n    Line             : $DatasourceAccessRight ??= \"Read\"\r\n\r\n    PositionMessage  : At untitled:Untitled-1:7 char:2\r\n                       +     $DatasourceAccessRight ??= \"Read\"\r\n                       +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    PSCommandPath    : untitled:Untitled-1\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at Test-NullCoalescing, untitled:Untitled-1: line 7\r\n                        at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}       \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-08T00:00:43Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "When you strongly type something as string, `$null` will be converted to an empty string. So while `string` is nullable, it's special cased to be treated like it isn't (and like it's default value is `''`).\r\n\r\nThis will work as expected with other reference types:\r\n\r\n```powershell\r\n[IO.DirectoryInfo] $directory = $null\r\n$directory ??= 'C:\\Program Files'\r\n$directory\r\n```\r\n\r\n```console\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-r--            5/4/2022 11:08 AM                Program Files\r\n```\r\n",
      "created_at": "2022-05-06T20:14:53Z",
      "updated_at": "2022-05-06T20:14:53Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-08T00:00:42Z",
      "updated_at": "2022-05-08T00:00:42Z"
    }
  ],
  "created_at": "2022-05-06T19:49:01Z",
  "number": 17282,
  "state": "closed",
  "title": "Null-coalescing assignment operator ??= Fails When Assigning to Strongly-Typed Variables",
  "updated_at": "2022-05-08T00:00:43Z"
}