{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2208",
  "author": "oising",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\n``` powershell\n> [Collections.Generic.List[int]]@(1)\n```\n\nor\n\n``` powershell\n> [Management.Automation.LanguagePrimitives]::ConvertTo(@(1), [Collections.Generic.List[int]])\n```\n\nNote that casting @(1,2) will succeed. Only the case @(1) fails. This is a _regression_ because it functions correctly in v4.\n## Expected behavior\n\nCasts to an instance of `List<int>` containing a single element: 1\n## Actual behavior\n\n`Exception calling \"ConvertTo\" with \"2\" argument(s): \"Cannot convert the \"System.Object[]\" value of type \"System.Object[]\" to type \"System.Int32\".\"`\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.0.10586.494\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.10586.494\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": "2017-02-23T07:10:06Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Confirmed. Thank you, @oising !\n",
      "created_at": "2016-09-08T04:28:33Z",
      "updated_at": "2016-09-08T04:28:33Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "**Workaround**\n\nGiven that `[System.Collections.Generic.List[int]]1` works (remove the array wrapper), it can be coerced to work generally by wrapping the target in a subexpression:\n\n``` powershell\n> $a = @(1)\n> [System.Collections.Generic.List[int]]$($a)\n1\n> $a = @(1,2,3)\n> [System.Collections.Generic.List[int]]$($a)\n1\n2\n3\n```\n",
      "created_at": "2016-09-08T12:37:44Z",
      "updated_at": "2016-09-08T12:37:44Z"
    }
  ],
  "created_at": "2016-09-08T04:06:43Z",
  "number": 2208,
  "state": "closed",
  "title": "v5 Regression: Casting object[] to more narrow generic collection fails with a single element, but not with two",
  "updated_at": "2017-02-23T07:10:07Z"
}