{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6280",
  "author": "NicolasDorier",
  "body": "Step to reproduce\r\n\r\nUsing [EchoArgs](https://chocolatey.org/packages/echoargs)\r\n\r\nActual:\r\n```\r\nPS C:> EchoArgs.exe \"\"\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\"\r\n```\r\n\r\nExpected:\r\n```\r\nPS C:> EchoArgs.exe \"\"\r\nArg 0 is <>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"\"\r\n```\r\n\r\nWorkaround with back tilt:\r\n\r\n```\r\nPS C:> EchoArgs.exe `\"`\"\r\nArg 0 is <>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"\"\r\n```\r\n\r\nIs it expected behavior ? If so, this is easy way for foot shooting.\r\n\r\nUsing a variable has the same issue, need to use the back tilt:\r\n\r\n```\r\nPS C:> EchoArgs.exe `\"$(variable)`\"\r\nArg 0 is <>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"\"\r\n```\r\n\r\nIf failing to use back tilt, and variable is empty string, the argument get ignored.\r\n\r\n```\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n5      1      16299  98\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This repros with PSCore6.  Although the backtick is a viable workaround, it seems like we shouldn't drop an argument that is explicitly an empty string.",
      "created_at": "2018-03-01T02:14:54Z",
      "updated_at": "2018-03-01T02:14:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like this is fixed in corefx 2.1 https://github.com/dotnet/corefx/issues/25456\r\n",
      "created_at": "2018-03-01T05:52:31Z",
      "updated_at": "2018-03-01T05:52:31Z"
    },
    {
      "author": "NicolasDorier",
      "author_association": "NONE",
      "body": "This is interesting, so this is a bug of the underlying `Process` class.\r\n\r\nThis seems weird though, why escaping with backtick would work though?",
      "created_at": "2018-03-01T07:27:59Z",
      "updated_at": "2018-03-01T07:27:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`` `\"`\" `` is actually only a workaround on _Windows_; it doesn't work on Unix.\r\n\r\n",
      "created_at": "2018-03-01T17:41:33Z",
      "updated_at": "2018-03-01T17:41:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Without having looked a the source, I suspect there are _2_ layers of bugs at play here:\r\n\r\n* One in PowerShell itself, where an empty string is dropped in formulating the command line to invoke behind the scenes.\r\n\r\n* If the PowerShell bug is worked around with `` `\"`\" `` to force literal inclusion of `\"\"` in the command line, _then_ the CoreFX bug kicks in, but only on _Unix_.\r\n",
      "created_at": "2018-03-02T17:03:25Z",
      "updated_at": "2018-03-02T17:03:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 you are correct that there is a bug in PowerShell itself, I found the corefx issue since I made a change to fix the PowerShell issue so that an empty string gets passed, but it still didn't work as expected.  To fix this, I'll need to submit a PR that pulls in the appropriate version of corefx with their fix along with a fix on our side.",
      "created_at": "2018-03-02T23:36:52Z",
      "updated_at": "2018-03-02T23:36:52Z"
    },
    {
      "author": "NicolasDorier",
      "author_association": "NONE",
      "body": "So in summary, with .NET 2.1 the back tick workaround should work on linux though?",
      "created_at": "2018-03-04T19:02:39Z",
      "updated_at": "2018-03-04T19:02:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In combination with the PowerShell-side fix that @SteveL-MSFT mentioned, _you won't need a workaround anymore_.\r\n\r\nIn fact, I would consider the workaround a bug in itself: `` `\"`\" `` asks that two _literal_ `\"` chars. be passed as an argument and thus what the target program should end up seeing is just that; to put in PowerShell terms: `'\"\"'`, not `''` (the empty string).",
      "created_at": "2018-03-04T19:07:28Z",
      "updated_at": "2018-03-04T19:08:59Z"
    },
    {
      "author": "NicolasDorier",
      "author_association": "NONE",
      "body": "interesting, I think fixing this workaround might break quite a lot of script though, I can't believe nobody got into the problem before.",
      "created_at": "2018-03-04T19:16:45Z",
      "updated_at": "2018-03-04T19:16:45Z"
    },
    {
      "author": "pcrockett",
      "author_association": "NONE",
      "body": "Hm, for some reason backticking the way you all suggested didn't work for me, but I do have a workaround that does work. I wrote a simple bash script (`countparams`) to test:\r\n\r\n```\r\n#!/bin/bash\r\necho Number params: $#\r\n```\r\n\r\nRunning `./countparams foo \"\" bar` in _bash_ yields this:\r\n\r\n> Number params: 3\r\n\r\nIn PowerShell, running both `./countparams foo \"\" bar` _and_ ``./countparams foo `\"`\" bar`` yields the wrong result:\r\n\r\n> Number params: 2\r\n\r\nThe solution I found was this:\r\n\r\n    \"./countparams foo `\"`\" bar\" | /bin/bash\r\n\r\nwhich yields the correct result:\r\n\r\n> Number params: 3\r\n\r\nUbuntu 16.04, PowerShell version 6.1.0-preview.2\r\n",
      "created_at": "2018-05-17T22:07:46Z",
      "updated_at": "2018-05-17T22:07:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@pcrockett: Yes, the `` `\"`\" `` workaround only works on _Windows_ (as stated) - and it's bittersweet, because not only should it not be necessary, it also _shouldn't work_.\r\n\r\nKudos for the Unix workaround.\r\nSince you're effectively passing an a single string as a piece of source code for evaluation by `bash`, you don't need  `` `\"`\" `` per se (which in your case are only need in order to embed `\"` inside `\"...\"`, by PowerShell's _internal_ rules; a such `\"\"\"\"` would work too).\r\n\r\nThus, the following two variants work too:\r\n\r\n```sh\r\n# Pass the Bash command as a *double*-quoted PS string.\r\n\"./countparams foo '' bar\" | /bin/bash\r\n\r\n# Pass the Bash command as a *single*-quoted PS string.\r\n'./countparams foo \"\" bar' | /bin/bash\r\n```",
      "created_at": "2018-05-17T23:28:08Z",
      "updated_at": "2018-05-17T23:28:08Z"
    },
    {
      "author": "lucy",
      "author_association": "NONE",
      "body": "Is there ANY portable way to pass an empty string to a native command right now? None of the various workarounds I've seen (`'\"\"'`, `\"''\"`, `[String]::Empty`, `` `\"`\" ``, etc...) seem to work on every powershell version.",
      "created_at": "2022-06-18T20:18:19Z",
      "updated_at": "2022-06-18T20:18:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Workaround `'\"\"'` works in both Windows PowerShell and PowerShell (Core) on all platforms up to at least v7.2.4, but breaks in 7.3 _preview_ versions with the `PSNativeCommandArgumentPassing` experimental feature turned on - and may break:\r\n * if that experimental feature (a) becomes an official feature in 7.3 ...\r\n * ... and (b) the fix becomes the _default_ behavior (as opposed to requiring _opt-in_ via the `$PSNativeCommandArgumentPassing` preference variable).\r\n\r\nThe [`Native` module](https://github.com/mklement0/Native) (`Install-Module Native`; authored by me), has an `ie` function (short for: Invoke Executable), which is a polyfill that provides sane,  workaround-free, cross-edition (v3+) and cross-platform behavior that is also forward-compatible (it'll continue to work, irrespective of what happens in 7.3; believe  me, I wish there were no need for such a module.)\r\n\r\n\r\n\r\n",
      "created_at": "2022-06-18T23:29:49Z",
      "updated_at": "2022-06-20T05:46:31Z"
    },
    {
      "author": "NicolasDorier",
      "author_association": "NONE",
      "body": "maybe we should ping somebody from MS that they are going to break something @SteveL-MSFT ",
      "created_at": "2022-06-20T05:34:30Z",
      "updated_at": "2022-06-20T05:34:30Z"
    }
  ],
  "created_at": "2018-03-01T02:05:01Z",
  "number": 6280,
  "state": "open",
  "title": "Powershell dropping empty string argument",
  "updated_at": "2022-06-20T05:46:31Z"
}