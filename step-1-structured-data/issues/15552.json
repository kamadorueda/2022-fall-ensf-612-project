{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15552",
  "author": "JohnLudlow",
  "body": "## Summary of the new feature/enhancement\r\n\r\nThe documents folder has always been where modules user-scoped are kept, and that's always been ok, but I recently discovered some problems with this as I've been getting more familiar with Azure and my work laptop maps Documents to OneDrive. This can be problematic for a few reasons, such as OneDrive not syncing correctly or trying to restore a bunch of files from a module I just uninstalled. This is particularly an issue with larger modules (or groups of modules) such as Az.*\r\n\r\nWe can certainly wish OneDrive was better at its job, but really these files shouldn't be there - they are not documents. The user is not expected to edit them or look at them. They are more akin to application files or application data. There's no value to them being in OneDrive other than to transfer them to another machine, and that can be better achieved by having a script in OneDrive that calls PSDepend or PowerShellGet to install modules on that other machine.\r\n\r\nI have updated my profile script to remove this path but it reappears after running `install-module`.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n1. Remove `Documents\\PowerShell\\Modules` from the `$env:PSModulePath` default. Select a new default path such as `~\\PowerShell\\Modules` or `$env:localappdata\\PowerShell\\Modules`\r\n2. Offer a cmdlet or documentation to move the existing modules to the new location, and optionally update the value of the environment variable.\r\n3. Additionally, offer to move the existing modules and update the value of the environment variable during the install. (That way the user has the choice to make the install take care of it or do it later at a time of their choosing).",
  "closed_at": null,
  "comments": [
    {
      "author": "jeroenlandheer",
      "author_association": "NONE",
      "body": "A few extra things to consider when putting this up for triage:\r\n\r\n- When I install a module on one machine and I am later at a different PC, OneDrive updates the modules folder... but `Upgrade-Module` doesn't work anymore, because it says the module wasn't installed with `Install-Module` ... (which it was, just not at the machine I'm working on.) \r\n- If your module folder is big loading PowerShell can take a (very) long time because it will wait until OneDrive has pulled all the files to your machine.\r\n\r\nI think this change should happen... hopefully soon. I think storage for these modules should be in the `%userpfile%\\AppData\\Local` folder, this is the place for things that should not get synced with other machines.\r\n\r\nPS: I create PowerShell modules... I have a lot of them... and they are all on my OneDrive now. \ud83d\ude12 ",
      "created_at": "2021-06-27T18:08:04Z",
      "updated_at": "2021-06-30T17:39:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeroenlandheer Do you mean _Update-Module_? If so you couls discuss in PowerShellGet repository.",
      "created_at": "2021-06-28T03:19:42Z",
      "updated_at": "2021-06-28T03:19:42Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "@iSazonov Would the PowerShellGet guys be able to change the default value of `$env:PSModulePath` and update the installer to optionally update it on upgrade?\r\n\r\nThough there should probably be a second issue in PowerShellGet to respect the value, not overwrite it.",
      "created_at": "2021-06-30T08:10:14Z",
      "updated_at": "2021-06-30T08:10:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JohnLudlow Any changes related to PSModulePath are breaking changes. We need to keep backward compatibility.\r\n",
      "created_at": "2021-06-30T09:02:34Z",
      "updated_at": "2021-06-30T09:02:34Z"
    },
    {
      "author": "jeroenlandheer",
      "author_association": "NONE",
      "body": "@iSazonov Sorry, that was a typo. This should indeed go there too, but don't you think they will choose the location of the modules where they install them... based on whatever this teams says it should be?  (AFAIK there's no way to customize this with settings, but that's something for another day.)\r\n\r\nIf paths for _loading_ the modules is the primary function of `PSModulePath`, this issue can be solved quite easily:\r\n1. Designate a folder somewhere in `%LocalAppData%\\...` \r\n2. Tell others that installing modules in this folder is best practice.\r\n3. Put _both_ paths in `PSModulePath` (i.e. `%LocalAppData%\\..`  and `%userprofile%\\Documents\\...`)\r\n4. Ensure the new location is added to new installations in the PSModulePath environment variable.\r\n\r\nNo need to move stuff around, new things get installed in `%LocalAppData%\\..` and old modules that are still in the user's documents folder keep working. Maybe this doesn't even require a code change in PowerShell, just some changes in the installer.\r\n\r\nAnd now we're on this subject, in Windows installations, modules which are installed on the local machine are installed by default in the `Program files\\PowerShell\\Modules` folder. I think the correct place for this should be `%AllUsersProfile%\\...` (often called `C:\\ProgramData`) \r\n\r\nAFAIK the functionality of `PSModulePath` itself doesn't change with all of this, so this is technically not a breaking change.\r\n\r\nHope this helps.",
      "created_at": "2021-06-30T18:09:10Z",
      "updated_at": "2021-06-30T18:09:10Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "@jeroenlandheer Indeed, and if I do want to move the older modules to the new folder (I probably would, in my case), there are some options:\r\n\r\n* Offer to do that in the installer\r\n* Offer a tool (such as a cmdlet) to do it post-install\r\n* Offer documentation that says \"you can copy everything from `<old location>` to `<new location>`\"\r\n\r\nAny of those would work for me, but some people may appreciate it being done for them.\r\n\r\nAnd you're absolutely correct IMHO about the Windows Modules. The only modules that should be there are ones that are installed as part of PowerShell and shouldn't be removed.",
      "created_at": "2021-07-01T08:19:14Z",
      "updated_at": "2021-07-01T08:19:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> AFAIK the functionality of `PSModulePath` itself doesn't change with all of this, so this is technically not a breaking change.\r\n\r\nWhile I agree that it would be hard to claim this is explicitly a breaking change of an API, it would still be disruptive.  There has never been a supported way of determining the module paths of different scopes, e.g. no `PSModuleInfo.AllUsersModuleRepository` or similar.  Any tools looking to interact with the module directories explicitly has been required to hard code the path, so any location change here will break these tools.\r\n\r\n(Note that I'm not necessarily advocating against it, but it's something that needs to be considered)",
      "created_at": "2021-07-01T13:28:40Z",
      "updated_at": "2021-07-01T13:28:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Related: https://github.com/PowerShell/PowerShell/issues/7082#issuecomment-397710807",
      "created_at": "2021-08-11T22:12:55Z",
      "updated_at": "2021-08-11T22:12:55Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Previously discussed in #8069 too",
      "created_at": "2021-08-11T22:39:29Z",
      "updated_at": "2021-08-11T22:39:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "So we reviewed this on the @PowerShell/powershell-committee today, but also this is something I've personally done some thinking on in the past.\r\n\r\nThe mangling on particular locations on the PSModulePath is something we've seen users impacted by repeatedly. For example: https://github.com/PowerShell/vscode-powershell/issues/2824#issuecomment-667355371.\r\n\r\nAnother important point is that the CurrentUser and AllUsers module paths are actually configurable in the powershell.config.json:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/e2c23fc5bd035251bed71413ad7c467c99dafd76/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L1304-L1305\r\n\r\nSo there is a concept of both the *default* CurrentUser module path and the actual one.\r\n\r\nHowever, there's currently no way to communicate the actual one, so the default is the implicit contract between PowerShell's module system (`Import-Module`/`Get-Module`/command lookup) and PowerShellGet. I was hoping to improve that in #7082, but even without that the contact being implicit means there's room to get it wrong.\r\n\r\nToday it seems that both PowerShell 7 and PowerShellGet agree that the default CurrentUser module path lies under the `MyDocuments` path, but evidence suggests that this wasn't always the case.\r\n\r\nThe big issue now is that OneDrive configurations override the MyDocuments folder and cause this unexpected migration.\r\n\r\nBut additionally, the actual CurrentUsers module path could be overridden with a configuration. And this is something that things like the PowerShell Azure Functions worker would want to do given the radically different environment in which it operates. Except that there's no way for PowerShellGet to pick this up.\r\n\r\nIn terms of changing the default PSModulePath, there have been a lot of proposals to fix PSModulePath in various ways. Changing the CurrentUser path away from MyDocuments is going to break PowerShellGet, since it depends on the same location being used. However, the MyDocuments path clearly presents problems, and both the proposed alternatives (`$env:LOCALAPPDATA\\PowerShell\\Modules` and `$HOME\\PowerShell\\Modules`) make sense.\r\n\r\nSo in terms of recommendations:\r\n\r\n- The Engine Working Group has also been asked to review this, to go into a bit more technical depth.\r\n- An API of some kind that gives both the default and actual module path components is probably a good direction to go in.\r\n- In terms of backward compatibility, tooling can look for this API and fall back to the traditional defaults.\r\n- The committee didn't decide on whether or not the default path should be changed. We want a chance for the Engine WG to discuss this, and also want to talk to the OneDrive team to understand things a bit better here.",
      "created_at": "2021-08-11T23:43:15Z",
      "updated_at": "2021-08-11T23:43:15Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "@rjmholt That's a great summary. Thanks.\r\n\r\nWe'll see what the Engine Working Group say",
      "created_at": "2021-08-13T09:31:51Z",
      "updated_at": "2021-08-13T09:31:51Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "With behavior of OneDrive the WG agrees that we need to come up with a proper solution, however the scenarios have a high level of complexity which is exacerbated by the need that other PS tools also need to be able to use whatever solution is made available. \r\n\r\nThe WG proposes that PS should provide an API which allows tools to query for the default location of modules.  The tool chain also needs to be able to query PS so the values are consistent.\r\n\r\nWe propose that an RFC is needed to define the behaviors, not only for PowerShell proper but for tools like PowerShellGet.\r\n\r\nWe think at least the following requirements need to be addressed in the RFC:\r\n- where is the default location for PSModulePath (system and/or user)\r\n- how may this default location be modified\r\n- how is the API used by PS and the other tools\r\n- how are misconfigurations handled (non-existing paths, multiple paths, etc)",
      "created_at": "2021-08-23T20:58:06Z",
      "updated_at": "2021-08-23T20:58:06Z"
    },
    {
      "author": "ShadowXVII",
      "author_association": "NONE",
      "body": "+1. Nuget doesn't have this problem because it uses `Profile Root\\.nuget` -- though perhaps long term the %LOCALAPPDATA% would make more sense for the user modules for PowerShell.\r\n\r\nIt's like syncing a .git repo in OneDrive! Unnecessary.\r\n\r\nWhichever solution comes up, it should be configurable for devices, i.e. via InTune or PowerShell so we can make it consistent for all our developers.",
      "created_at": "2021-10-06T06:17:54Z",
      "updated_at": "2021-10-06T06:18:38Z"
    },
    {
      "author": "mikhey",
      "author_association": "NONE",
      "body": "Would a dot folder work here possibly? i.e. `~/.pwsh/` OR `~/.pwsh-modules`  I'm thinking of about Powershell running on other systems, Linux MacOS etc - if it could be consistent across platforms that would help \"yugely\" too.   Well, I think at least.   \r\n\r\nI came across this as I'm looking to considerably cut down my documents folder when looking at OneDrive backup and I was hoping there was a way I could have PSGet use another folder.  I'm still looking into what my options for this are - not sure if just changing `PSModulePath` env variable alone would do the trick.",
      "created_at": "2021-10-18T11:40:13Z",
      "updated_at": "2021-10-18T11:40:13Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "@mikhey Changing `PSModulePath` works until you do `Install-Module` which breaks it again\r\n\r\nA `~/.pswh` folder (or whatever it gets called) would work, just as long as it's not somewhere OneDrive will try and mess with it",
      "created_at": "2021-10-18T16:46:20Z",
      "updated_at": "2021-10-18T16:46:20Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "My preference is `~\\.pwsh` (or `~\\.powershell`) on Windows.  The Microsoft guidance is to use `~\\AppData\\Local\\Microsoft\\PowerShell` or some folder like that under `~\\AppData\\Local`.  My problem with that is `AppData` is hidden which doesn't make for a great user experience when you tell folks to edit their `~\\AppData\\Local\\Microsoft\\PowerShell\\profile.ps1` script.  If they try to **navigate** to that file via File Explorer they're likely to get tripped up by the \"missing\" `AppData` dir.\r\n\r\nAlso, I notice that many other tools on Windows are now using `~\\.<tool>` folders:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/137774907-10d96fda-f2a6-41f3-9091-6c88695d12ea.png)\r\n",
      "created_at": "2021-10-18T16:55:50Z",
      "updated_at": "2021-10-18T16:55:50Z"
    },
    {
      "author": "mikhey",
      "author_association": "NONE",
      "body": "@JohnLudlow yeah, I was thinking of making it a symlink, but OneDrive doesn't like that for the backups.  After I realized that I had much more space than I thought it did, I just let it go to OneDrive. \n\nWhile it may have become a non-issue for me regarding OneDrive, I do feel it is something that should be addressed. \n\nThis has probably been mentioned before, but off the top of my head a few things to look at for an implementation could be:\n\n- Configurable use profile file to explicitly set primary user modules install path - for backward compatibility/support\n- A PowerShell environment variable or method that can be queried to locate user modules (cross module dependency)\n- Upon first run of PowerShell or installing/updating/removing a module, the user should be offered to move modules to the \"Out of Documents folder\" location to the new \"preferred\"/standard user profile location. \n",
      "created_at": "2021-10-18T20:28:09Z",
      "updated_at": "2021-10-18T20:28:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Would a dot folder work here possibly?\r\n\r\nAs @rkeithhill said, those dot folders pollute `$HOME`, and even though they're not displayed, they still need to be processed by programs that examine the Home directory, creating a sort of tragedy-of-the-commons problem where more and more applications putting their configurations and data in a directory based in the Home directory adds up to slower filesystem performance for unrelated tasks.\r\n\r\nPowerShell actually already conforms to the [XDG base directory specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) on *nix, which is a standard intended to solve this problem. PowerShell data files, including modules, are stored in `$env:XDG_DATA_HOME/powershell`, which defaults to `$HOME/.local/share/powershell`.\r\n\r\nThe issue then is that Windows doesn't really offer a clear answer here, because its philosophy is to separate users from configurers/application installers.\r\n\r\nWorth noting is that the XDG standard is configurable with a sensible default, and I imagine we want the same, we just need to weigh configurability against complexity (mainly for anyone developing against our decision) and performance.",
      "created_at": "2021-10-18T21:50:31Z",
      "updated_at": "2021-10-18T21:50:31Z"
    },
    {
      "author": "dafzor",
      "author_association": "NONE",
      "body": "@rkeithhill and dot files are supposed to also be hidden, but **Windows is not linux** so dot files are left always visible.\r\n\r\nSo I'd like to add my voice here in asking to please respect the platform conventions on Windows and use the appropriate AppData folder, and in the same way use XDG on Linux and whatever macOS specifies for it's convention.\r\n\r\nAs for accessibility for profile editing, I think that's already covered by using `<editor of choice> $PROFILE` which will work regardless of platform.\r\n\r\nAt most adding a `$PROFILEHOME` as an alias for `(Get-ChildItem $PROFILE).Directory.FullName` if the user wants to open the folder for any reason?\r\n",
      "created_at": "2021-12-10T03:22:51Z",
      "updated_at": "2021-12-10T03:24:10Z"
    },
    {
      "author": "codaamok",
      "author_association": "NONE",
      "body": "I'm just stopping by to express my frustration with how things are today. I'm happy to read about positive discussions for change, though!\r\n\r\nTrying to update `PSModulePath` in your profile or via registry ([like the docs suggest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_psmodulepath?view=powershell-7.2#modifying-psmodulepath)) is pointless, because as previously mentioned, as soon as you use `Install-Module`, the env var is clobbered again within the session with the undesired OneDrive Documents folder. You'll also notice that `Install-Module` seems to ignore `PSModulePath`, too, as it wants to always search in `MyDocuments\\[Windows]PowerShell`:\r\n\r\n![image](https://user-images.githubusercontent.com/6683266/147689452-08d1df2c-f4cb-4e71-9b90-68532f2c4ff4.png)\r\n\r\nTo workaround this, you need to update your MyDocuments (aka 'Personal') folder to no longer be in the OneDrive folder. [This seems to work well for me](https://support.microsoft.com/en-us/topic/configuration-of-the-my-documents-folder-dfd9a90d-8f80-18d6-e7cc-f1566fc3b10b):\r\n\r\n1. Right-click My Documents (on the desktop), and then click Properties.\r\n2. In the Target box, type the new path to the My Documents folder, or click Move to browse to the folder and if needed, create a new My Documents folder. If the path you type does not exist, you are prompted to confirm that you want to create a new folder.\r\n3. Click ~Yes to move files from the old My Documents location to the new location, or~ click No if you do not want to move these files. Note that if you click No, the files in the old location are not deleted, but they are no longer visible from My Documents after the change. \r\n\r\n![image](https://user-images.githubusercontent.com/6683266/147690043-76892c7e-82dc-48cb-9b33-7229a46c0abe.png)\r\n\r\nFigured I'd share this in case anyone needed it /shrug",
      "created_at": "2021-12-29T17:50:00Z",
      "updated_at": "2021-12-29T17:54:19Z"
    },
    {
      "author": "billti",
      "author_association": "NONE",
      "body": "Just to plus one on the pain and urgency here. I just lost half a day trying to figure out exactly the issue @jeroenlandheer mentioned back on June last year, namely trying to Update-Module on a machine fails because I installed the module on a difference machine, and both are sync'ing my documents via OneDrive.\r\n\r\nBeside the issue above this causes, I'm now syncing over 900MB of PowerShell files to my OneDrive account, and I only have two modules installed! (The 'Az' and the 'Microsoft.Graph' modules - which I suspect are in common usage).\r\n\r\nI'm probably just going to stop using OneDrive or install for AllUsers, but it was time consuming and frustrating to figure this out.",
      "created_at": "2022-01-25T00:48:19Z",
      "updated_at": "2022-01-25T00:48:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I want to bring this problem to the attention of @PowerShell-Committee and @Area-PowerShellGet group.\r\nI think it is good time to make the breaking change, preserve Document folder for module searching but install in new and more appropriate folder in user profile. The some for all user folder (machine-wide) - c:\\ProgramData as right place. Also it makes sense to review where we place user profile (and, specially, profiles and config files of  host applications).\r\nMaybe create RFC?\r\n/cc @SteveL-MSFT ",
      "created_at": "2022-01-25T03:36:55Z",
      "updated_at": "2022-01-25T03:36:55Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "The `C:\\ProgramData` was recently dropped by Git for Windows team due to the amount of confusion it creates: https://github.com/git-for-windows/git/pull/2358 Let's forget about this directory once for all.",
      "created_at": "2022-01-25T14:59:02Z",
      "updated_at": "2022-01-25T14:59:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The `C:\\ProgramData` was recently dropped by Git for Windows team due to the amount of confusion it creates: [git-for-windows/git#2358](https://github.com/git-for-windows/git/pull/2358) Let's forget about this directory once for all.\r\n\r\nI see nothing there that could be useful for PowerShell. Config files and profiles are that must be clearly documented. And it is one thing to _have_ an opportunity and another thing to _use_ it. Some of the profile and config capabilities of Windows PowerShell are apparently lost at the moment. This restricts developers from using standard features. This is not good.",
      "created_at": "2022-01-25T15:37:48Z",
      "updated_at": "2022-01-25T15:37:48Z"
    },
    {
      "author": "billti",
      "author_association": "NONE",
      "body": "There are a number of teams at Microsoft that I'm sure have a ton of research and failures to learn from in this space. Nuget, npm, VS Code extensions, etc. seem to have solved similar problems on Windows in a cross-platform ecosystem. Folks like @zkat have a wealth of experience they might be able to share (or point us to people who can) to come to the best solution for PowerShell.",
      "created_at": "2022-01-25T18:57:11Z",
      "updated_at": "2022-01-25T18:57:11Z"
    },
    {
      "author": "RobertKlohr",
      "author_association": "NONE",
      "body": "I want to add another point to the discussion when considering this change.\r\n\r\nIf you have [Controlled Folder Access](https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/enable-controlled-folders) enabled then PowerShell is no longer able to install or update modules that reside in the default modules folder in the current user scope e.g., C:\\Users\\[user]\\Documents\\PowerShell or C:\\Users\\[user]\\Documents\\WindowsPowerShell.\r\n\r\nThe only way to fix this issue is to enable PowerShell for Controlled Folder Access bypass but doing that is explicitly against Microsoft's configuration recommend, and for good reason.\r\n\r\nAs Standard User\r\n![image](https://user-images.githubusercontent.com/39203582/155379303-4d0f6297-4700-4745-8311-8e4e9883ae11.png)\r\n\r\nAs Administrator\r\n![image](https://user-images.githubusercontent.com/39203582/155379878-ab7871e2-1789-4f3d-bfd6-fb4f0c3eb7fd.png)\r\n\r\n![image](https://user-images.githubusercontent.com/39203582/155379277-c167738c-0e0d-4139-938e-c4fdc725420b.png)\r\n",
      "created_at": "2022-02-23T17:36:22Z",
      "updated_at": "2022-02-23T18:12:37Z"
    },
    {
      "author": "JakeMoe",
      "author_association": "NONE",
      "body": "I'm hitting this issue with Controlled Folder Access as well.  Our IT Apps department wants to start migrating things from legacy systems to newer PowerShell scripts, but they can't install the modules needed because Defender gets in the way, and they don't have admin access on their systems (only IT Operations have that).  I'd rather not blanket exclude powershell.exe / pwsh.exe from controlled folder access (which is what Microsoft Support told me I'd need to do), as that sounds like a Very Bad Idea (tm).  I suppose I could deploy scripts via Intune that would install modules in AllUser scope, but that'd then require me to manage their module updates as well, and ideally the user should be able to manage their own modules.",
      "created_at": "2022-07-17T22:39:23Z",
      "updated_at": "2022-07-17T22:40:09Z"
    },
    {
      "author": "ShadowXVII",
      "author_association": "NONE",
      "body": "Let's make a decision here! Snooze!\r\n\r\nThe Windows standard (AppData\\Local) is fine. And makes sense. While I like dot paths, they're a *nix convention so can understand why the PowerShell team wouldn't apply this UNLESS they're not wanting a Windows-specific code change. This (I assume) is the same reason .dotnet and other teams have used dot paths.",
      "created_at": "2022-07-17T23:45:49Z",
      "updated_at": "2022-07-17T23:45:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee has re-discussed this recently.  The ideal solution is:\r\n\r\n1. expose a public API in SMA.dll for apps to discover the system, shared, and user module paths.  Even our own modules like PowerShellGet are currently hardcoded to Documents (on Windows anyways)\r\n2. ideally, $env:PSModulePath is JUST an env var and pwsh.exe doesn't manipulate it trying to infer user intentions (this was inherited behavior form powershell.exe), however, this would be a breaking change.  Basically, if certain system, shared, and user paths are not in the env var, PowerShell assumes this was a mistake and adds them except for some specific conditions\r\n3. the actual location would probably be AppData on Windows.  On non-Windows, it's already outside of Documents.  Do we need a migration story for users with PS7 already installed?  A clean install is easy, but an existing PS7 means modules are likely already in Documents.  Seems to me a cmdlet to explicitly migrate may be best solution to avoid any surprises to the user.\r\n\r\nOpen to ideas/thoughts on this.",
      "created_at": "2022-07-20T16:23:58Z",
      "updated_at": "2022-07-20T16:23:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. Since we say about fundamental behavior for years I think we need to put this in RFC.\r\n2. We have no need to change system module path\r\n3. There is a problem in how PowerShell process x86 and non-x86 paths for shared module paths. We should make this consistent. I think we have no need a migration path for the case (only if a experimental feature)\r\n4. This change may be most sensitive for user module paths. Migration options:\r\n    4.1 Experimental feature\r\n    4.2 Installer warning\r\n    4.3 Compatibility mode with chaining new path then old path. \r\n",
      "created_at": "2022-07-21T03:41:11Z",
      "updated_at": "2022-07-21T03:41:11Z"
    },
    {
      "author": "chrisbues",
      "author_association": "NONE",
      "body": "Agree with the rest of the commenters that AppData makes the most sense on Windows. This also clears things up with module location path as well, given that OneDrive Known Folder Move's Documents redirection only applies at the explorer level.",
      "created_at": "2022-07-21T17:06:05Z",
      "updated_at": "2022-07-21T17:06:05Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Given that PowerShell already uses `$env:XDG_DATA_HOME/powershell` which defaults to `$HOME/.local/share/powershell` on Linux  ...\r\n\r\n### Can we just let PowerShell on Windows support `$env:XDG_DATA_HOME` too?\r\n\r\nPowerShell could just silently fall back to the current location if it's not set.\r\n\r\nThen **users** could choose to set `$env:XDG_DATA_HOME` to `$Home` **or** `$env:LOCALAPPDATA` ... or `$env:APPDATA` \ud83d\ude28 ... or even the current default `$Home\\Documents` or `$Home\\OneDrive - MyCompany\\Documents` \ud83d\ude06 \r\n\r\n### There's no reason this should be a breaking change\r\n\r\nFrankly, it can be done purely in PowerShellGet, because only users who set `$env:XDG_DATA_HOME` would need to also add `$env:XDG_DATA_HOME\\powershell\\modules` to their `$env:PSModulePath` (and `$env:XDG_DATA_HOME\\powershell\\scripts` to their `$env:PATH`)\r\n\r\nBut even when you want to add support to PowerShell by default, you can add it without removing the current location",
      "created_at": "2022-07-21T17:14:10Z",
      "updated_at": "2022-07-21T17:33:28Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Engine WG discussed this issue today\r\n\r\n### Points raised by the committee\r\n\r\nWe fully agree that SMA.dll should offer better insights into module path preferences through its public API surface - it's currently too opaque, and .\r\n\r\nWe also generally agree that PowerShell should, long-term, move towards `$env:LOCALAPPDATA` as the _preferred_ root for user-specific application data (modules included) on Windows, but certainly **not** as a breaking change. \r\nInstead, we recommend a \"slow march\" approach - establish and introduce a new path root, switch official host application logic defaults gradually, and continue supporting both paths for module discovery in parallel. \r\n\r\nGiven the scope and expected impact of introducing a change like this (however carefully), the proposal should indeed be published as an RFC, and evaluated in the larger context of the ecosystem around PowerShell (tooling with hardcoded module paths, etc.). We don't have capacity to commit to producing the initial draft, but welcome additional input from the community and the committee.\r\n\r\n\r\n### `XDG_DATA_HOME`\r\n\r\nWe further discussed @Jaykul's suggestion to support `$env:XDG_DATA_HOME` for establishing a user-defined path root for PowerShell-specific user data. \r\n\r\nWe agree on its potential usefulness, but recommend **not** implementing support for `$env:XDG_DATA_HOME` in isolation. Instead, we would like to evaluate the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) holistically, and then give a more comprehensive recommendation on whether (and how) to support it consistently on Windows - please create a separate issue for this if that sounds valuable @Jaykul, we're happy to re-review it :) ",
      "created_at": "2022-07-21T22:07:36Z",
      "updated_at": "2022-07-21T22:08:08Z"
    },
    {
      "author": "jeroenlandheer",
      "author_association": "NONE",
      "body": "If I read all of this it seems that everyone is in agreement that the \"My Documents\" folder was a poor choice and that on Windows the AppData folder is preferred... but I notice one other thing.\r\n\r\nWhy does this have to take _more than a year_ to make a decision? Software engineers and administrators deal with breaking changes often enough, if something breaks we can handle it... it's not the end of the world. Anoyances like these are causing us more headaches (and time.)\r\n\r\nI look forward to a preview/beta/rc to get this is resolved... soon? \ud83d\ude09",
      "created_at": "2022-07-25T05:10:40Z",
      "updated_at": "2022-07-25T05:10:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MHA1981 Please open question in Discussions.",
      "created_at": "2022-08-05T03:10:06Z",
      "updated_at": "2022-08-05T08:49:19Z"
    },
    {
      "author": "MHA1981",
      "author_association": "NONE",
      "body": "Ok sure",
      "created_at": "2022-08-05T03:30:15Z",
      "updated_at": "2022-08-05T08:49:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is a big enough change that it won't make it into 7.3 which is headed towards RC and we would not want to take such a impactful change at that time.  We should try to get something in early for 7.4 previews.  ",
      "created_at": "2022-08-08T16:59:18Z",
      "updated_at": "2022-08-08T16:59:18Z"
    },
    {
      "author": "bwilsonms",
      "author_association": "NONE",
      "body": "do it! Otherwise I'll need to hack around on my box just so I don't have to wait for stuff to download from ODB",
      "created_at": "2022-08-11T12:32:35Z",
      "updated_at": "2022-08-11T12:32:35Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Is there a timeframe for 7.4 previews?",
      "created_at": "2022-08-11T15:19:05Z",
      "updated_at": "2022-08-11T15:19:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@JohnLudlow the first previews of 7.4 will be coming soon, but this feature won't show up til later",
      "created_at": "2022-09-14T21:41:39Z",
      "updated_at": "2022-09-14T21:41:39Z"
    },
    {
      "author": "fsackur",
      "author_association": "NONE",
      "body": "I'd like to share the workaround we're implementing: junctions. OneDrive does not follow them, but they are transparent to most use cases.\r\n\r\nIIUC, if you do `New-Item -ItemType Junction ~\\Documents\\PowerShell\\Modules -Value ~\\SomeOtherFolder\\Modules`, you're good.\r\n\r\nWe are junctioning individual module folders within `Modules`, and that breaks PowerShellGet's update functionality in PSv5 due to `Get-ChildItem -Recurse` in PackageManagement\\Get-Package, because `gci` doesn't traverse junctions within the provided path with `-Recurse`. (PSv7 does.) To work around that, we copy the `PSGetModuleInfo.xml` files back. PackageManagement then finds the XML files and uses the `InstalledLocation` property, which is junction-agnostic.\r\n\r\nWe didn't use symbolic links because they require admin to create on Windows.",
      "created_at": "2022-10-17T10:54:26Z",
      "updated_at": "2022-10-17T10:54:26Z"
    }
  ],
  "created_at": "2021-06-09T18:46:58Z",
  "number": 15552,
  "state": "open",
  "title": "Let's move PSModulePath out of the documents folder",
  "updated_at": "2022-10-17T10:54:26Z"
}