{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3358",
  "author": "Francisco-Gamino",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nFormat-Hex should support all primitive types (including enums) and arrays of these types  - instead of this random assortment.\r\n\r\nTake a look at the prototype https://gist.github.com/lzybkr/9940b63c8301c31316bdb3ec6305536f written by @lzybkr.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n```\r\n",
  "closed_at": "2019-01-16T11:58:23Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT The enhancement was made. Can we close or there is anything that we should add? ",
      "created_at": "2018-10-31T15:20:31Z",
      "updated_at": "2018-10-31T15:20:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it doesn't appear that the enhancements to `format-hex` addresses this issue.  Based on the gist sample, I think the expectation is that this will work:\r\n\r\n```powershell\r\n[System.Net.HttpStatusCode]::OK | format-hex\r\n```\r\n\r\nWhich still fails.",
      "created_at": "2018-10-31T16:33:40Z",
      "updated_at": "2018-10-31T16:33:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks! I realized the idea. Will look the code.",
      "created_at": "2018-11-01T04:27:21Z",
      "updated_at": "2018-11-01T04:27:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder why Maria did not use Jason code? Was there some discussion internally?",
      "created_at": "2018-11-05T13:11:35Z",
      "updated_at": "2018-11-05T13:11:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov good question, @MiaRomero reports to a different manager, so I don't know what discussions took place or didn't",
      "created_at": "2018-11-05T17:16:01Z",
      "updated_at": "2018-11-05T17:16:01Z"
    },
    {
      "author": "MiaRomero",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT and @iSazonov this was part of my internship project and unfortunately I didn't have time to implement what Jason had recommended.  I wasn't aware of his code until the PR ( #3320) was almost complete and then my internship was over :(",
      "created_at": "2018-11-05T19:05:07Z",
      "updated_at": "2018-11-05T19:05:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@MiaRomero no worries, we just didn't have the context!",
      "created_at": "2018-11-05T19:13:38Z",
      "updated_at": "2018-11-05T19:13:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify. Will continue to look how to adopt the Jason's code.",
      "created_at": "2018-11-06T05:30:46Z",
      "updated_at": "2018-11-06T05:30:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "For anyone looking at this issue, I would also like to point out that the behaviour and handling of piped input is _weird_.\r\n\r\nFor example, if you pipe a series of bytes into it, I would expect a display like this, which I _do_ get if I supply the file path directly:\r\n```\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   EF BB BF 74 65 73 74 0D 0A                       \u00ef\u00bb\u00bftest..\r\n```\r\n\r\nInstead, if I pull the file bytes first with `[System.IO.File]::ReadAllBytes()` and pipe to `Format-Hex`, we get this:\r\n\r\n```\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   EF                                               \u00ef\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   BB                                               \u00bb\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   BF                                               \u00bf\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   74                                               t\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   65                                               e\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   73                                               s\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   74                                               t\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   0D                                               .\r\n\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   0A                                               .\r\n```\r\nWhich is a bit tricky to read! \ud83d\ude04 ",
      "created_at": "2019-01-04T21:31:21Z",
      "updated_at": "2019-01-04T21:32:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is expected because you pipe an _array_. You could read as string and then pipe the string.",
      "created_at": "2019-01-05T15:24:47Z",
      "updated_at": "2019-01-05T15:24:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you read as string, then you miss the BOM, which may well be what you care about. \r\n\r\nMost cmdlets handle a piped array and a directly input array the name. This cmdlet currently does not. If you pass an array directly it works; the handling for piped input is simply at odds with the behaviour for most other cmdlets'.",
      "created_at": "2019-01-05T15:58:37Z",
      "updated_at": "2019-01-05T15:58:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think I address basically everything in #8596\r\n\r\nMany thanks @lzybkr for that concept code that is _far_ cleverer than I could figure out myself without at least a week's work, and thanks @Francisco-Gamino for the link!\r\n\r\n@SteveL-MSFT just because you brought that one up \ud83d\ude09 \r\n![image](https://user-images.githubusercontent.com/32407840/50731769-cc027800-113a-11e9-8728-50aab0c7abe9.png)\r\n\r\nIf there are any improvements I can make further, let me know in the PR, I'll be happy to tackle it. \ud83d\ude04 ",
      "created_at": "2019-01-06T03:40:32Z",
      "updated_at": "2019-01-06T03:40:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 There is #8191",
      "created_at": "2019-01-06T06:30:13Z",
      "updated_at": "2019-01-06T06:30:13Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, is the issue with piping arrays supposed to be fixed?  I just noticed it in 6.2, then found this old thread. ",
      "created_at": "2019-04-18T03:49:19Z",
      "updated_at": "2019-04-18T03:49:19Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Samples:\r\n```PowerShell\r\n[byte[]](1,2,3,4,5,6,7,8,9,0) | format-hex\r\nformat-hex -inputobject ([byte[]](1,2,3,4,5,6,7,8,9,0))\r\n```",
      "created_at": "2019-04-18T03:51:13Z",
      "updated_at": "2019-04-18T03:51:13Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Also, it would be nice to have a switch param like `-Bare` or `-SuppressHeaders` so such `Format-Hex -Inp 65535 -SuppressHeaders` would output simply `0000FFFF`.  And for @msftrncs case:\r\n```\r\n[byte[]](1,2,3,4,5,6,7,8,9,10) | format-hex\r\n```\r\nthe output would be vastly simplified to just:\r\n```\r\n00\r\n01\r\n...\r\n09\r\n0A\r\n```",
      "created_at": "2019-04-18T04:00:14Z",
      "updated_at": "2019-04-18T04:00:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@msftrncs I actually had the same gripe and submitted a PR to attempt to solve that issue more elegantly. See #8674  \ud83d\ude04 \r\n\r\nSeems to be a bit of contention as to whether it's necessary for whatever reason, but personally I think it's a pretty significant improvement in terms of utility. \ud83d\ude42 \r\n\r\n@rkeithhill would `-ValueOnly` make sense there? It definitely would create a much more interesting and versatile output, being a very direct method of converting basically anything to hex format.",
      "created_at": "2019-04-18T04:30:15Z",
      "updated_at": "2019-04-18T04:32:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill @vexx32 Please open new Issue for the suggestion. ",
      "created_at": "2019-04-18T05:25:21Z",
      "updated_at": "2019-04-18T05:25:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov see #9403 ",
      "created_at": "2019-04-18T17:58:50Z",
      "updated_at": "2019-04-18T17:58:50Z"
    }
  ],
  "created_at": "2017-03-17T19:12:39Z",
  "number": 3358,
  "state": "closed",
  "title": "Format-Hex should support all primitive types (including enums) and arrays of these types  - instead of this random assortment.",
  "updated_at": "2019-04-18T17:58:50Z"
}