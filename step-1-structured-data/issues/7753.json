{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7753",
  "author": "cspotcode",
  "body": "I can't figure out how to import a module without a command prefix, when the module's manifest specified a `DefaultCommandPrefix`.  Passing the empty string to `Import-Module -Prefix` does not work.  I also tried passing `[string]::empty`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nCreate the following script module.\r\n```powershell\r\n# test.psd1\r\n@{\r\n    ModuleVersion = '0.0.1'\r\n    FunctionsToExport = '*'\r\n    RootModule = 'test.psm1'\r\n    DefaultCommandPrefix = 'Foo'\r\n}\r\n```\r\n\r\n```powershell\r\n# test.psm1\r\nFunction Test-Function {}\r\n```\r\n\r\n```\r\nImport-Module ./test.psd1 -Prefix ''\r\n(Get-Command -Module test).Name\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTest-Function # <- does not have a prefix\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTest-FooFunction # <- DefaultCommandPrefix is applied\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-rc.1\r\nOS                             Linux 4.4.0-17134-Microsoft #112-Microsoft Thu Jun 07 22:57:00 PST 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-30T12:29:27Z",
  "comments": [
    {
      "author": "cspotcode",
      "author_association": "NONE",
      "body": "This might be the culprit, but I've barely scratched the surface of Import-Module's code, so I'm sure there's a lot I'm missing.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L6928",
      "created_at": "2018-09-10T22:35:00Z",
      "updated_at": "2018-09-10T22:35:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't see feedbacks for the scenario. We need to have a real business scenario to understand if a fix needed.",
      "created_at": "2020-01-30T12:29:27Z",
      "updated_at": "2020-01-30T12:29:27Z"
    },
    {
      "author": "drmacro",
      "author_association": "NONE",
      "body": "Business Scenario:\r\n\r\nI just implemented a module for a non-trivial system we're implementing. The module defines a default prefix to ensure there are no conflicts from a naive import of the module but in fact the module's cmdlets do not conflict with anything we normally have installed, so it would be convenient to be able to override the default module with an empty prefix.\r\n\r\nOf course we could define the module with no prefix but then any import would need to specify a module prefix explicitly, which we could not guarantee.",
      "created_at": "2021-04-20T18:33:29Z",
      "updated_at": "2021-04-20T18:33:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@drmacro I see a contradiction:\r\n- in fact the module's cmdlets do **not conflict** with anything\r\n- we could define the module with no prefix but then **any import** would need to specify a module prefix explicitly",
      "created_at": "2021-04-21T05:51:58Z",
      "updated_at": "2021-04-21T05:51:58Z"
    },
    {
      "author": "drmacro",
      "author_association": "NONE",
      "body": "It's not a contradiction because there's *no guarantee* that our cmdlet names don't conflict with anything in a given user's environment--our names are pretty generic and so could easily conflict.\r\n\r\nBut the bigger point is putting the burden on users to 1) know they need to specify a prefix at import time and 2) do it is a pretty high bar when we can easily set a default prefix, which ensures that *by default* there are no conflicts.\r\n\r\nThe documentation for our module reflects the default prefix.\r\n\r\nBut a user who understands what they're doing and is therefore able to:\r\n\r\n1) Determine that this module has no name conflicts\r\n2) Set the -prefix value on their import, wherever it might be\r\n\r\nShould be able to *remove* the prefix, which they cannot do today.\r\n\r\nThat is, setting a default prefix for a module should, I think, be the norm, with removing it being a special action.",
      "created_at": "2021-04-21T14:19:46Z",
      "updated_at": "2021-04-21T14:19:46Z"
    }
  ],
  "created_at": "2018-09-10T22:18:03Z",
  "number": 7753,
  "state": "closed",
  "title": "Cannot override DefaultCommandPrefix with empty prefix",
  "updated_at": "2021-04-21T14:19:47Z"
}