{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13000",
  "author": "StefanRickli",
  "body": "## Steps to reproduce\r\n\r\n- Install latest PowerShell Core release 7.0.2\r\n- Set the execution policy to \"AllSigned\": In an elevated PS session: `Set-ExecutionPolicy -ExecutionPolicy AllSigned -Scope LocalMachine`\r\n- After closing the elevated PS window, open a new PS window\r\n\r\n## Expected behavior\r\n\r\nDirectly get to the command prompt of the PS window.\r\n\r\n## Actual behavior\r\n\r\nInstead, before getting to the command prompt, I get the following certificate warnings:\r\n\r\n```\r\nPowerShell 7.0.2\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n\r\nDo you want to run software from this untrusted publisher?\r\nFile C:\\program files\\powershell\\7\\Modules\\PSReadLine\\PSReadLine.format.ps1xml is published by CN=Microsoft\r\nCorporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US and is not trusted on your system. Only run scripts\r\n from trusted publishers.\r\n[V] Never run  [D] Do not run  [R] Run once  [A] Always run  [?] Help (default is \"D\"): r\r\n\r\nDo you want to run software from this untrusted publisher?\r\nFile C:\\program files\\powershell\\7\\Modules\\PSReadLine\\PSReadLine.psm1 is published by CN=Microsoft Corporation,\r\nO=Microsoft Corporation, L=Redmond, S=Washington, C=US and is not trusted on your system. Only run scripts from trusted\r\n publishers.\r\n[V] Never run  [D] Do not run  [R] Run once  [A] Always run  [?] Help (default is \"D\"): r\r\nPS C:\\Users\\StefanRickli>\r\n```\r\n\r\n## Environment data\r\n\r\nHere's the signature of the two files in question:\r\n![image](https://user-images.githubusercontent.com/19881323/85182874-43be5700-b28a-11ea-95d5-94728f45ab92.png)\r\n\r\nYou can see that the certificate expired on 02.05.2020. Might this be the problem?\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-16T00:00:23Z",
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "I don't think this is caused by certificate expiration; the file has a timestamp countersignature. From the source code, it seems that the \"untrusted publisher\" prompt appears if the signature is valid but the certificate is not in the Trusted Publishers store.  <https://github.com/PowerShell/PowerShell/blob/01d37887121f5cba743573c40f9d1827adc25a98/src/System.Management.Automation/security/SecurityManager.cs#L279-L293>\r\n",
      "created_at": "2020-06-20T08:19:42Z",
      "updated_at": "2020-06-20T08:19:42Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "I was wondering why Windows PowerShell manages to load its version of PSReadLine without prompting, even when -ExecutionPolicy AllSigned is specified and the certificate is not in the Trusted Publishers store.\r\n\r\nIn PowerShell 7.1.0-preview.3, PSAuthorizationManager.CheckPolicy skips the signature checks if the execution policy is Unrestricted and SecuritySupport.IsProductBinary returns true: <https://github.com/PowerShell/PowerShell/blob/01d37887121f5cba743573c40f9d1827adc25a98/src/System.Management.Automation/security/SecurityManager.cs#L186-L191>\r\n\r\nHowever, the ExecutionPolicy.AllSigned case does not seem to call SecuritySupport.IsProductBinary. Besides, SecuritySupport.IsProductBinary now returns false for the PSReadLine files.\r\n\r\nWindows PowerShell 5.1 on Windows 10 Version 2004:\r\n\r\n```\r\nPS C:\\> (Get-Module -Name PSReadLine).Path\r\nC:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\r\nPS C:\\> [System.Management.Automation.Internal.SecuritySupport]::IsProductBinary(\"C:\\Program Files\\WindowsPowerShell\\Modules\\psreadline\\2.0.0\\PSReadLine.psm1\")\r\nTrue\r\n```\r\n\r\nPowerShell 7.1.0-preview.3 on Windows 10 Version 2004:\r\n\r\n```\r\nPS C:\\> (Get-Module -Name PSReadLine).Path\r\nC:\\program files\\windowsapps\\microsoft.powershellpreview_7.1.3.0_x64__8wekyb3d8bbwe\\Modules\\PSReadLine\\PSReadLine.psm1\r\nPS C:\\> [System.Management.Automation.Internal.SecuritySupport]::IsProductBinary(\"C:\\program files\\windowsapps\\microsoft.powershellpreview_7.1.3.0_x64__8wekyb3d8bbwe\\Modules\\PSReadLine\\PSReadLine.psm1\")\r\nFalse\r\nPS C:\\> [System.Management.Automation.Internal.SecuritySupport]::IsProductBinary(\"C:\\Program Files\\WindowsPowerShell\\Modules\\psreadline\\2.0.0\\PSReadLine.psm1\")\r\nFalse\r\n```\r\n\r\nUtils.IsUnderProductFolder returns true: <https://github.com/PowerShell/PowerShell/blob/01d37887121f5cba743573c40f9d1827adc25a98/src/System.Management.Automation/security/SecuritySupport.cs#L394-L400>\r\n\r\n```\r\nPS C:\\> [System.Management.Automation.Cmdlet].Assembly.GetType(\"System.Management.Automation.Utils\",$true).GetMethod(\"IsUnderProductFolder\", [System.Reflection.BindingFlags]\"Static,NonPublic\").Invoke($null, @(\"C:\\program files\\windowsapps\\microsoft.powershellpreview_7.1.3.0_x64__8wekyb3d8bbwe\\Modules\\PSReadLine\\PSReadLine.psm1\"))\r\nTrue\r\n```\r\n\r\nI guess SignatureHelper.GetSignature then does not set fileSignature.IsOSBinary.\r\n\r\nBecause Utils.IsUnderProductFolder considers PowerShell 7 the product, I think SecuritySupport.IsProductBinary should be changed to return true for binaries that are installed from the PowerShell 7 package, even if they are not OS binaries.",
      "created_at": "2020-06-20T09:29:22Z",
      "updated_at": "2020-06-20T09:29:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is PSReadline version you use?\r\n\r\n/cc @daxian-dbw ",
      "created_at": "2020-06-23T02:52:53Z",
      "updated_at": "2020-06-23T02:52:53Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "@iSazonov on Windows, this is reproducible with the PSReadLine 2.0.1 that installs with PowerShell 7.1.0-preview.3. <https://github.com/PowerShell/PowerShell/blob/01d37887121f5cba743573c40f9d1827adc25a98/src/System.Management.Automation/security/SecuritySupport.cs#L402-L405>",
      "created_at": "2020-06-23T05:03:12Z",
      "updated_at": "2020-06-23T05:03:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I was wondering why Windows PowerShell manages to load its version of PSReadLine without prompting, even when -ExecutionPolicy AllSigned is specified and the certificate is not in the Trusted Publishers store.\r\n\r\nWhat PSReadLine version is Windows PowerShell using? The one that shipped in-box of Windows?",
      "created_at": "2020-07-10T17:46:59Z",
      "updated_at": "2020-07-10T17:46:59Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Yes, I think this the in-box version of PSReadLine:\r\n\r\n```\r\nPS C:\\> Get-Module -Name PSReadLine\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...\r\n\r\n\r\nPS C:\\> (Get-Module -Name PSReadLine).Path\r\nC:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\r\n\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nAnd PowerShell 7 should likewise not prompt when loading the version of PSReadLine that was installed as part of PowerShell 7.",
      "created_at": "2020-07-10T17:51:29Z",
      "updated_at": "2020-07-10T17:51:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "OK, that explains it. The PSReadLine that's shipped in-box of Windows is Windows catalog signed (because it's part of the Windows), so it's trusted by default.\r\nThe `PSReadLine` shipped with PS 7 or installed from PowerShell Gallery is Microsoft signed, but that certificate is not trusted by default, and you need to add it to the trusted publisher to make it work smoothly with `AllSigned` execution policy.",
      "created_at": "2020-07-10T18:09:13Z",
      "updated_at": "2020-07-10T18:09:13Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "That's the explanation, but I don't think the behavior makes sense.\r\nIf the files are part of the PowerShell installation package, then PowerShell should trust them.\r\n\r\nIn contrast, if a user later installs a newer version of PSReadLine from PowerShell Gallery, then I think it's okay to prompt for trust.",
      "created_at": "2020-07-10T18:12:01Z",
      "updated_at": "2020-07-10T18:13:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> That's the explanation, but I don't think the behavior makes sense.\r\nIf the files are part of the PowerShell installation package, then PowerShell should trust them.\r\nIn contrast, if a user later installs a newer version of PSReadLine from PowerShell Gallery, then I think it's okay to prompt for trust.\r\n\r\nWe can further discuss that behavior. Loop in our security SMEs @TravisEz13 and @PaulHigin to comment on this.",
      "created_at": "2020-07-10T18:27:48Z",
      "updated_at": "2020-07-10T18:27:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> We can further discuss that behavior. Loop in our security SMEs @TravisEz13 and @PaulHigin to comment on this.\r\n\r\nUnlike with windows, we have no way of verifying if a file comes from the installation package.  Therefore, the PowerShell execution policy zero trust stance is in effect.  If you want this to change, I would suggest that you file an [feature requests](https://github.com/PowerShell/PowerShell/issues/new?assignees=&labels=Issue-Enhancement&template=Feature_Request.md&title=Feature+Request), with the reasoning and let people discuss the pros and cons.  You can mention this specific issue, but the issue is really all modules.  \r\n\r\nI would recommend the issue be something like this\r\n\r\n```\r\nTitle: Update execution policy to trust the Windows and Microsoft Certificates by default\r\n\r\nDescription:\r\n\r\nAll the modes of execution policy that rely on certificates will prompt if the certificate is not trusted, making these features less useful.\r\n< further explanation >\r\n```\r\n\r\nOr perhaps someone can come up with a better design, but living outside of windows, we don't have system file production (the catalog signing only enabled system file protection) and cannot trust the files that come with the installation.\r\n ",
      "created_at": "2020-07-10T18:40:36Z",
      "updated_at": "2020-07-10T18:40:36Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Should PowerShell 7 with `-ExecutionPolicy AllSigned` implicitly trust the PSReadLine module that is in-box in Windows, when there is nothing related in the user's Trusted Publishers or Untrusted Certificates certificate stores? Currently, PowerShell 7.0.2 prompts for trust when loading that, but Windows PowerShell 5.1 loads it without prompting.\r\n\r\n```\r\nC:\\>\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" -ExecutionPolicy AllSigned\r\nPowerShell 7.0.2\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n\r\nDo you want to run software from this untrusted publisher?\r\nFile C:\\program files\\powershell\\7\\Modules\\PSReadLine\\PSReadLine.format.ps1xml is published by CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US and is not trusted on your\r\nsystem. Only run scripts from trusted publishers.\r\n[V] Never run  [D] Do not run  [R] Run once  [A] Always run  [?] Help (default is \"D\"): D\r\nCannot load PSReadline module.  Console is running without PSReadline.\r\nPS C:\\> Get-AuthenticodeSignature -LiteralPath \"C:\\program files\\powershell\\7\\Modules\\PSReadLine\\PSReadLine.format.ps1xml\"\r\n\r\n\r\n    Directory: C:\\program files\\powershell\\7\\Modules\\PSReadLine\r\n\r\nSignerCertificate                         Status  StatusMessage        Path\r\n-----------------                         ------  -------------        ----\r\n62009AAABDAE749FD47D19150958329BF6FF4B34  Valid   Signature verified.  PSReadLine.format.ps1xml\r\n\r\nPS C:\\> Get-AuthenticodeSignature -LiteralPath \"C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.format.ps1xml\"\r\n\r\n\r\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\r\n\r\nSignerCertificate                         Status  StatusMessage        Path\r\n-----------------                         ------  -------------        ----\r\nA4341B9FD50FB9964283220A36A1EF6F6FAA7840  Valid   Signature verified.  PSReadLine.format.ps1xml\r\n\r\nPS C:\\> Import-Module \"C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\"\r\nImport-Module: Errors occurred while loading the format data file:\r\nC:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.format.ps1xml, , C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.format.ps1xml: The file was skipped because of the following validation exception: File C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.format.ps1xml cannot be loaded. The file C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.format.ps1xml is not digitally signed. You cannot run this script on the current system. For more information about running scripts and setting execution policy, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170..\r\n\r\nPS C:\\> exit\r\n\r\nC:\\>\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -ExecutionPolicy AllSigned\r\nWindows PowerShell\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nTry the new cross-platform PowerShell https://aka.ms/pscore6\r\n\r\nPS C:\\> (Get-Module PSReadLine).Path\r\nC:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\r\n```\r\n\r\n(edited to minimize whitespace in tables)\r\n\r\nOn a related note, it is misleading that Import-Module claims the file \"is not digitally signed\" when the file actually has a valid signature from an untrusted publisher.",
      "created_at": "2020-07-11T11:01:31Z",
      "updated_at": "2020-07-11T19:29:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-13T00:00:06Z",
      "updated_at": "2020-07-13T00:00:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Reopen the issue given @KalleOlaviNiemitalo's question in the last comment.",
      "created_at": "2020-07-13T17:59:35Z",
      "updated_at": "2020-07-13T17:59:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Should PowerShell 7 with -ExecutionPolicy AllSigned implicitly trust the PSReadLine module that is in-box in Windows, when there is nothing related in the user's Trusted Publishers or Untrusted Certificates certificate stores? \r\n\r\nNo, PowerShell Execution Policy is zero-trust.  This was answered [here](https://github.com/PowerShell/PowerShell/issues/13000#issuecomment-656825362)\r\n\r\n> Therefore, the PowerShell execution policy zero trust stance is in effect.",
      "created_at": "2020-07-14T20:34:09Z",
      "updated_at": "2020-07-14T20:34:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-16T00:00:22Z",
      "updated_at": "2020-07-16T00:00:22Z"
    }
  ],
  "created_at": "2020-06-19T22:14:46Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-PSReadLine",
    "Resolution-Answered"
  ],
  "number": 13000,
  "state": "closed",
  "title": "PSReadLine: expired certificates?",
  "updated_at": "2020-07-16T00:00:23Z"
}