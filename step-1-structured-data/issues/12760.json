{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12760",
  "author": "SeeminglyScience",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently, when a cdxml module is imported the engine takes the following steps:\r\n\r\n1. Parse an XML document\r\n1. Build a string representing an entire PowerShell module based on the XML\r\n1. The generated module essentially just builds args for a C# based `CmdletAdapter` implementation\r\n\r\nIf source generators were used instead, the first two steps would be moved to compile time and the last would have less overhead.  They would also be less prone to some of PowerShell's module scope quirks like `ErrorAction` inheritance.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the last would have less overhead.\r\n\r\nWhat do you mean? Performance? More fast startup?",
      "created_at": "2020-05-23T17:10:48Z",
      "updated_at": "2020-05-23T17:10:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> What do you mean? Performance? More fast startup?\r\n\r\nBoth (assuming by start up you mean import time, afaik no cdxml modules are imported at process init).",
      "created_at": "2020-05-23T17:21:49Z",
      "updated_at": "2020-05-23T17:22:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What steps will be?\r\n\r\nImport-Module cdxml\r\n- Parse xml\r\n- Generate C# file\r\n- Compile C# to binary module\r\n- Load binary modue",
      "created_at": "2020-05-24T05:02:34Z",
      "updated_at": "2020-05-24T05:02:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think what @SeeminglyScience is suggesting is that rather than shipping the XML and parsing it into a module at import time, we could create a build task to generate a binary module so that we only need to ship the module DLL. That way, all of that processing is front-loaded and users just end up importing the module DLL directly.",
      "created_at": "2020-05-24T05:15:33Z",
      "updated_at": "2020-05-24T05:15:33Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah, Roslyn source generators attach like analyzers.  Except instead of emitting diagnostic records, they add additional source files to the `obj` path.",
      "created_at": "2020-05-24T13:44:51Z",
      "updated_at": "2020-05-24T13:44:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't understand why it should be in the repo. If a developer want create a binary module the developer can use any tools.",
      "created_at": "2020-05-25T17:10:47Z",
      "updated_at": "2020-05-25T17:10:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Not sure what you mean.\r\n\r\nThis issue is about creating a Roslyn source generator that generates binary modules from cdxml files.",
      "created_at": "2020-05-25T17:21:41Z",
      "updated_at": "2020-05-25T17:21:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This issue is about creating a Roslyn source generator that generates binary modules from cdxml files.\r\n\r\nYou can use Roslyn source generator or another tool to create custom binary module. I ask why it should be in PowerShell repo?",
      "created_at": "2020-05-25T17:39:57Z",
      "updated_at": "2020-05-25T17:39:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure why it wouldn't be, but sure it can go in a new repo I guess.",
      "created_at": "2020-05-25T17:52:16Z",
      "updated_at": "2020-05-25T17:52:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From my understanding you say about new tool/module to create specific binary modules.\r\nI would expect that you describe how this should work in a full-fledged RFC.\r\n",
      "created_at": "2020-05-25T18:07:52Z",
      "updated_at": "2020-05-25T18:07:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> From my understanding you say about new tool/module to create specific binary modules.\r\n\r\nI would say that the suggestion is an alternative/addition to the current cmdletization API that would result in better performance and UX.  It's like saying PowerShell is a compiler, it's not *wrong* but it's not the whole picture.\r\n\r\n> I would expect that you describe how this should work in a full-fledged RFC.\r\n\r\nYeah I think if this gets implemented it might be a good idea for the implementer to submit an RFC.  If this is something you're interested in pursuing, I'd be happy to expand on any particular detail that may be unclear.\r\n\r\n",
      "created_at": "2020-05-25T18:17:07Z",
      "updated_at": "2020-05-25T18:17:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I would say that \r\n\r\nThis is too blurry said. If you have a clear idea, then share the exact specifications.\r\n",
      "created_at": "2020-05-25T18:50:49Z",
      "updated_at": "2020-05-25T18:50:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So currently when a cdxml module is imported, PowerShell reads the cdxml file and uses it to generate a PowerShell script module.  My suggestion is that instead of generating a PowerShell script module, it generates a binary module.  And instead of doing it at import time, it's done at compile time. A good way to do this would be via Roslyn source generators.",
      "created_at": "2020-05-25T18:56:23Z",
      "updated_at": "2020-05-25T18:56:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  it's done at compile time\r\n\r\nWhat will a source be in the case? cdxml? So a developer creates a cdxml, runs the generator to get a dll, then signs, packages and publish the new binary module.\r\nThis workflow raises questions:\r\n- Why does it have to be Roslyn source generator?\r\nIt is one option from many. The tool could be implemented on PowerShell or others.\r\n- Why does it have to be in PowerShell Engine?\r\nObviously it is a _tool_. Current policy is to publish new PowerShell module/tool on PowerShellGet site to get feedback before deciding to include it in Engine.\r\n- Why are performance gains expected?\r\nPowerShell uses psd1 file for discovering and we get no performance wins with binary module.\r\nModule loading is one time operation and we get no performance perceptible wins.\r\nSuch modules use the same cmdlet adapter and we get no performance wins.",
      "created_at": "2020-05-26T03:58:24Z",
      "updated_at": "2020-05-26T03:58:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The vast majority of cdxml modules are owned by Microsoft. Unless we want to make it a separate tool which is just pulled in during build time for any cdxml modules we're shipping with pwsh, it makes the most sense to live in this repo since it's for building PowerShell modules imo.\r\n\r\nModules can go on PowerShellGet, not so much a Roslyn source generator. As far as I know, the current cdxml parser/scrip generator lives in this code base. It makes more sense for this to be here in the same way.",
      "created_at": "2020-05-26T04:04:00Z",
      "updated_at": "2020-05-26T04:04:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The vast majority of cdxml modules are owned by Microsoft. \r\n\r\nSo the new tool is needed only for MSFT? And the ask is \"MSFT, please convert all cdxml modules to binary\"?",
      "created_at": "2020-05-26T04:45:31Z",
      "updated_at": "2020-05-26T04:45:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > it's done at compile time\r\n> \r\n> What will a source be in the case? cdxml? So a developer creates a cdxml, runs the generator to get a dll, then signs, packages and publish the new binary module.\r\n> This workflow raises questions:\r\n> \r\n> * Why does it have to be Roslyn source generator?\r\n>   It is one option from many. The tool could be implemented on PowerShell or others.\r\n\r\nI said:\r\n\r\n> A good way to do this would be via Roslyn source generators.\r\n\r\nIt seems like the obvious choice to me, but an implementer is free to investigate other tools.\r\n\r\n> * Why does it have to be in PowerShell Engine?\r\n>   Obviously it is a _tool_. Current policy is to publish new PowerShell module/tool on PowerShellGet site to get feedback before deciding to include it in Engine.\r\n\r\nFor sure, the implementer is welcome to do that.\r\n\r\n> * Why are performance gains expected?\r\n>   PowerShell uses psd1 file for discovering and we get no performance wins with binary module.\r\n\r\nIn discovery sure, but then you go to run a script module and the binary module is faster.\r\n\r\n>   Module loading is one time operation and we get no performance perceptible wins.\r\n>   Such modules use the same cmdlet adapter and we get no performance wins.\r\n\r\nThere's a lot of PowerShell code generated.  There would be performance gains.\r\n\r\n",
      "created_at": "2020-05-26T10:51:26Z",
      "updated_at": "2020-05-26T10:51:26Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "From https://github.com/PowerShell/PowerShell/issues/13236#issuecomment-662673511\r\n\r\nI think the issues with source generators (or some other DLL generation mechanism) for cmdletisation are:\r\n\r\n- CDXML is checked into Windows, so generating DLLs would need to be done in that code's build steps. But APIs catered to tend to be native/COM APIs rather than .NET ones, so even writing a Source Generator we would (1) need them to be using .NET and (2) need them to be using .NET Core\r\n- CDXML not being DLLs is actually a huge win for PS 7, since CDXML modules were all instantly compatible with PS 7. Compiling things to DLLs would likely set up more issues",
      "created_at": "2020-07-22T20:37:19Z",
      "updated_at": "2020-07-22T20:37:19Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * CDXML is checked into Windows, so generating DLLs would need to be done in that code's build steps.\r\n\r\nFair enough, that does diminish the most obvious value a bit.  It's worth noting though that cmdletization is a public API and cdxml can be used to generate modules based on anything (assuming a custom `CmdletAdapter` is used).  I use it in `EditorServicesCommandSuite` to generate functions from C# classes that can't inherit `PSCmdlet`.\r\n\r\n> But APIs catered to tend to be native/COM APIs rather than .NET ones, so even writing a Source Generator we would (1) need them to be using .NET and (2) need them to be using .NET Core\r\n\r\nDepends where you put it.  It could easily be a console app for instance.\r\n\r\n> * CDXML not being DLLs is actually a huge win for PS 7, since CDXML modules were all instantly compatible with PS 7. Compiling things to DLLs would likely set up more issues\r\n\r\nGenerated code wouldn't be high risk since it would still fall back to whatever `CmdletAdapter` it used for actual implementation.    It's mostly just hooking up arguments.",
      "created_at": "2020-07-22T21:06:12Z",
      "updated_at": "2020-07-22T21:06:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "When I was doing startup performance work for Windows PowerShell 5.1, CDXML was probably the biggest issue that I did not have time to address.\r\n\r\nIdeally CDXML is translated to real code exactly once as part of a Windows build, but one could still generate code on demand and cache the translation.\r\n\r\nAlso note the generated PowerShell seems overly verbose. I'd assumed (but never verified) that a more data driven approach was possible - and that might feel safer than caching generated code.",
      "created_at": "2020-07-22T22:04:34Z",
      "updated_at": "2020-07-22T23:29:56Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> When I was doing startup performance work for Windows PowerShell 5.1, CDXML was probably the biggest issue that I did not have time to address.\r\n\r\nInteresting! Perhaps one possibility is for PowerShell to generate and cache code from CDXML on loading, in a similar way to how `Add-Type` can generate assemblies of how PowerShell classes work",
      "created_at": "2020-07-22T22:07:23Z",
      "updated_at": "2020-07-22T23:59:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> A Source Generator is a .NET Standard 2.0 assembly that is loaded by the compiler along with any analyzers.\r\n\r\n@SeeminglyScience My understanding is that (_please correct me if I'm wrong_): a source generator is an assembly that is shipped along with you SDK nuget package (e.g. `Microsoft.PowerShell.SDK`), that can generate code to the user assembly at its compilation time. In case of CDXML modules, there is no dotnet code for a CDXML module and thus no dotnet compilation involved, so how could a source generator kick in? It looks to me a cmdletization tool that consumes CDXML and spit out C# code is what you want.\r\n\r\n\r\n@lzybkr Does the current way powershell deals with CDXML affect the startup time? The parsing and script writing all happen only if you are importing a CDXML module, right? In my understanding, if we have a tool to turn CDXML modules to dotnet assemblies that interacts with `CmdletAdapter` directly, the benefits are:\r\n1. Faster loading of CDXML modules and faster execution of CDXML cmdlets\r\n2. Reduce the size of `System.Management.Automation.dll`\r\n\r\nAnd IMHO, only (2) can help startup time a bit.",
      "created_at": "2020-07-22T23:57:26Z",
      "updated_at": "2020-07-22T23:58:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience My understanding is that (_please correct me if I'm wrong_): a source generator is an assembly that is shipped along with you SDK nuget package (e.g. `Microsoft.PowerShell.SDK`), that can generate code to the user assembly at its compilation time. In case of CDXML modules, there is no dotnet code for a CDXML module and thus no dotnet compilation involved, so how could a source generator kick in?\r\n\r\nIt looks pretty flexible in that as long as you have a csproj you can use it.  I haven't used it myself so it's totally possible I'm wrong, but basically my idea was to have:\r\n\r\n1. a csproj referencing either the SDK or a nuget with just the source generator.  Probably also referencing the cdxml file with a `None` node\r\n1. the cdxml file\r\n1. Run `dotnet`, it spits out a binary module\r\n\r\n> It looks to me a cmdletization tool that consumes CDXML and spit out C# code is what you want.\r\n\r\nYeah.  Well truthfully a roslyn source generator would be most ideal what I personally use it for so I don't have to ship a separate assembly with just the binary cmdlets.  But yeah something that consumes cdxml and spits out a ready to ship assembly also would work.",
      "created_at": "2020-07-23T00:14:04Z",
      "updated_at": "2020-07-23T00:14:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@daxian-dbw - IIRC, command discovery would generate PowerShell from CDXML and you don't always search CDXML modules, but when you do, it stands out in a profile.\r\n\r\nOne could modify command discovery, but that solution feels too targeted. CDXML modules can be slow to load and the generated code feels quite bloated. For example the `Storage` modules takes 2s to load on my machine and generates nearly 40,000 lines of PowerShell.",
      "created_at": "2020-07-23T00:52:00Z",
      "updated_at": "2020-07-23T00:52:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see a simplest thing we can do is to add a cache for compiled CDXML modules. Since we already have a cache for the command discovery it does not add more security risk. (I'd work on this if MSFT team want and we could include this in 7.1.)\r\n\r\nThe next thing we could do is try to improve the CDXML module compiler.\r\n\r\nI suggest to open new issue for these optimizations and close the issue because RSGs is more for external projects like https://github.com/PowerShell/PlasterBuild and https://github.com/PowerShell/generator-powershell.\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PlasterBuild\">PowerShell/PlasterBuild</a></strong></div><div>Provides common build tasks for PowerShell module projects - PowerShell/PlasterBuild</div></blockquote>\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/generator-powershell\">PowerShell/generator-powershell</a></strong></div><div>Create PowerShell modules and scripts using Yeoman! - PowerShell/generator-powershell</div></blockquote>",
      "created_at": "2020-07-23T05:52:58Z",
      "updated_at": "2020-07-23T05:53:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @lzybkr, I absolutely agree there is space to improve the CDXML modules (loading and execution).\r\n\r\n@iSazonov do you mean caching the generated powershell script for CDXML modules? It's different from the cache for command discovery. The latter only contains metadata information (which command name belongs to which module), but no code for execution. I don't recommend to do it -- it's not an urgent thing that needs to be mitigated with a workaround. If we want to invest in this area, then we should directly improve the `ScriptWriter` and works on the tool that produces assemblies from CDXML files.",
      "created_at": "2020-07-23T06:12:59Z",
      "updated_at": "2020-07-23T06:12:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> do you mean caching the generated powershell script for CDXML modules?\r\n\r\nNo, I mean to generate CDXML script, compile it and cache the assembly. Then we could improve `ScriptWriter`.",
      "created_at": "2020-07-23T06:30:25Z",
      "updated_at": "2020-07-23T06:30:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> No, I mean to generate CDXML script, compile it and cache the assembly.\r\n\r\nThis already sounds like the tool that @SeeminglyScience is asking for \ud83d\ude04",
      "created_at": "2020-07-23T15:06:58Z",
      "updated_at": "2020-07-23T15:06:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "A tool is an external thing. I suggest to do this on the fly and check the cache folder before compile CDXML in next time.",
      "created_at": "2020-07-23T15:15:32Z",
      "updated_at": "2020-07-23T15:15:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see a need to duplicate the effort there. If we're going to have such functionality it makes more sense to me that we segregate its code to a separate dll that a small console app can be built to interface with in a minimal fashion. That way, PowerShell can cache built CDXML modules until their current authors get around to shipping compiled assemblies for them, and authors wanting to write CDXML modules have the option of just shipping the compiled assembly and not requiring PowerShell to perform the caching. \r\n\r\nOver time we could deprecate the caching method and eventually remove the CDXML caching entirely, requiring authors to precompile the modules.",
      "created_at": "2020-07-23T15:37:26Z",
      "updated_at": "2020-07-23T15:37:26Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If one was considering building something that *might* someday get integrated into the Windows build - I would start with a standalone tool that does **not** depend on PowerShell - probably with a simple exe wrapper around a dll that could be consumed by PowerShell.",
      "created_at": "2020-07-23T16:55:39Z",
      "updated_at": "2020-07-23T16:55:39Z"
    }
  ],
  "created_at": "2020-05-22T14:05:21Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 12760,
  "state": "open",
  "title": "Use Roslyn source generators for cdxml cmdletization",
  "updated_at": "2020-07-23T16:55:39Z"
}