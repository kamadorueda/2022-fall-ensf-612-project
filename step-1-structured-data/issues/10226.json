{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10226",
  "author": "msftrncs",
  "body": "# PR Summary\r\n\r\nCorrect completions (Tab/Intellisense) for quoting and escaping for the various kinds of completions available.\r\n\r\n## PR Context\r\n\r\nCompleters of all types seem to have inconsistent quoting and escaping behaviors that often left the resulting completion still unusable, most specially when the completion contained:\r\n - potential wildcard patterns\r\n - escape sequence characters\r\n - curly quotes\r\n - variable interpolation patterns\r\n - specific file system conditions\r\n\r\nThis PR, through a series of commits, brings unity to the completers, implementing methods that were already available in the code and additional methods, where by each type of completer (variable name, member name, argument) utilizes a common quoting and escaping method.\r\n\r\nFix #10006 - Variable (`$` and `@`) name bracing and escaping and empty scope prefixing\r\nFix #10239 - Variable completion has no results with input `$:`\r\nFix #10198 - Member name completion quoting and escaping\r\nFix #9881 - General argument completion quoting and escaping\r\nFix #10218 - Argument completion of `ValidateSetAttribute` values quoting and escaping\r\nFix #7569 - `\\\\Server\\Share With Space` quoting and escaping\r\n\r\nThis PR is still WIP, as it lacks any changes for testing, and it is unknown if it causes any tests to fail.\r\n\r\nTo quote @bergmeister, be gentle.  :)  This is my first work in C#.\r\n\r\n@rkeithhill, from https://github.com/dahlbyk/posh-git/issues/683#issuecomment-501125585, this includes such a method, `[System.Management.Automation.Language.CodeGeneration]::QuoteArgument()`.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a lint I am supposed to be using?   I don't think any of the CodeFactor / Codacy issues would be there if there if I had the linting warnings.  I didn't find any references to a lint in the contributing guide.",
      "created_at": "2019-07-26T07:13:35Z",
      "updated_at": "2019-07-26T07:13:35Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Noting, this PR may conflict with #7407, as this PR attempts to do some of the same things, but not exclusively to file paths.",
      "created_at": "2019-07-28T06:14:42Z",
      "updated_at": "2019-07-28T06:14:42Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "## Broken Tests\r\n\r\nTwo test patterns are currently broke.  The reason for this is that this PR implements a more specific `$` variable interpolation detection to require the argument to be quoted.  The implementation is that, if a `$` character is not followed by a legitimate variable character, that `$` will not itself require the argument to be quoted.\r\n\r\nPatterns failing:\r\n- a file path completion test where `$` appears at the end of the completion\r\n- a Windows only miscellaneous completion test where `$` appears followed by a `\\` in the completion.\r\n\r\nBoth test patterns involve command completions, so the quoting of the path resulted in the completion using the invoke operator `&`.  With this PR's implementation, the quoting and the invoke operator no longer occur.\r\n\r\n## Tests Needed\r\n- Member completion quoting tests, these should probably be similar to the two examples that were previously commented in the code, as I haven't found any tests for them yet, in addition to tests relating to issue #10198.\r\n- Variable completion tests\r\n   - test completions of variable names that require braces and quoting and escaping both for access and for use as an argument.\r\n   - test completions of variable names that have colons in their names, both with and without a scope specified.\r\n   - test completions of variable names that start with `?` but with more than one character, with scope, with complex character requring braces, with scope and complex character, without scope and without complex character.\r\n- Argument value completion tests\r\n   - test escaping of wildcard patterns in a completion for a parameter which accepts them. __\\*\\* IMPORTANT for other work being done around the WildCardPattern class  \\*\\*__\r\n   - test quoting and escaping of curly quoting characters.\r\n   - On Unix OS's test completion of a file name with wildcard characters `*` and `?` (with a parameter supporting wildcards) and doublequotes.  Tests should also be added to other areas to insure these files or folders are accessible, but that is not the scope of this PR (these tests will need to create said files though).\r\n - test `ValidateSetAttribute` completed arguments that require quoting, especially regarding those that could be confused as a parameter name when not quoted.  Include variants related to issue #10218.\r\n\r\nWe'll keep adding to this list to track the tests fixed, needed and added.",
      "created_at": "2019-07-29T02:27:43Z",
      "updated_at": "2019-07-29T02:27:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there a lint I am supposed to be using?\r\n\r\nCodeFactor is based on StyleCop - you can run it locally. Usually we don't request to fix style issue which is not in your code. If there is a lot of style issues please pull new PR to ifx them - we don't want to mess fuctional and style changes in one PR.",
      "created_at": "2019-07-29T05:18:07Z",
      "updated_at": "2019-07-29T05:18:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kwkam Could you please review the PR too?",
      "created_at": "2019-07-29T05:21:12Z",
      "updated_at": "2019-07-29T05:21:12Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "> CodeFactor is based on StyleCop - you can run it locally. Usually we don't request to fix style issue which is not in your code.\r\n\r\nI did notice that a lot of the style errors were not from my code changes (at first I thought they were all in my code, probably because it showed new issues first), and that would make it difficult to let a format-document command run, but it would sure help if I could format-selection and get the easy ones taken care of, and then a lint would show the other suggestions.  That's how the TS/JS repositories I have contributed to work, and its all in VS Code.\r\n\r\nI was able to turn on the 'editor settings' feature of the C# extension and it did change some of the formatting, but it still doesn't warn me that this repository would prefer all IF statements braced, comments spaced out, statements after IF statements spaced out, etc...",
      "created_at": "2019-07-29T06:40:47Z",
      "updated_at": "2019-07-29T06:40:47Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I think I need to have an exception in the argument quoting/bareword checker for commands, as they have a slightly different bareword syntax and I am not accounting for that.",
      "created_at": "2019-08-01T04:51:08Z",
      "updated_at": "2019-08-01T05:21:59Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "That's weird, the Windows test must be skipping the completion tests, because its not failing them, where as the MacOS and Linux tests are failing completion tests (which are currently expected at this time).",
      "created_at": "2019-10-24T06:46:37Z",
      "updated_at": "2019-10-24T06:46:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@msftrncs It is Newline difference.",
      "created_at": "2019-10-24T10:03:52Z",
      "updated_at": "2019-10-24T10:03:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@msftrncs Have you plans to continue?",
      "created_at": "2019-11-23T08:55:59Z",
      "updated_at": "2019-11-23T08:55:59Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I do, having trouble dedicating time.  I do have new commits for improved use of the parser to determine when quoting is required, specially for command name values.",
      "created_at": "2019-11-26T07:01:15Z",
      "updated_at": "2019-11-26T07:01:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see 9-11 tests fails. Is it expected?",
      "created_at": "2019-12-02T04:41:38Z",
      "updated_at": "2019-12-02T04:41:38Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "> I see 9-11 tests fails. Is it expected?\r\n\r\nYes and no, I expected the '$' tests to fail, because an ending `$` doesn't need to be quoted, but the ending ``` ` ``` should have triggered a requirement to quote.  Those tests previously had not failed.\r\n\r\nI also have not yet handled testing, as I am not sure how much of these changes can be specifically tested.",
      "created_at": "2019-12-02T06:40:13Z",
      "updated_at": "2019-12-02T06:40:13Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "At this time, I do expect the completion tests that involve a `$` to fail, as the parser doesn't see them as separate tokens so no need to quote.  However, I need to understand the result regarding the `configuration` keyword.   It appears to be 1 of 3 keywords receiving special treatment.",
      "created_at": "2019-12-02T08:30:35Z",
      "updated_at": "2019-12-02T08:30:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:29Z",
      "updated_at": "2020-05-27T02:03:29Z"
    }
  ],
  "created_at": "2019-07-25T08:23:28Z",
  "number": 10226,
  "state": "open",
  "title": "WIP: Correct completions for quoting and escaping",
  "updated_at": "2021-11-11T22:00:52Z"
}