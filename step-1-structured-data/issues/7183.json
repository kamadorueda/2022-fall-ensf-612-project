{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7183",
  "author": "rjmholt",
  "body": "## PR Summary\r\n\r\nResolves #6992, #6991, #6990. Also see https://github.com/PowerShell/PowerShell-RFC/pull/130.\r\n\r\n- Add `%WINDIR%\\System32\\WindowsPowerShell\\v1.0\\Modules` (Windows PowerShell $PSHOME) to the end of the default PSCore 6 module path (i.e. the module path as initially set at startup).\r\n- Cause an error to be thrown by `Import-Module` when a module with `CompatiblePSEditions` not containing `\"Core\"` is being loaded from the 'System32' module path.\r\n- Suppress output of modules listed by `Get-Module -ListAvailable` from Windows PowerShell $PSHOME when `CompatiblePSEditions` does not contain `\"Core\"`.\r\n- Introduce the `-SkipCompatibilityCheck` switch parameter on both `Import-Module` and `Get-Module` to respectively allow importing incompatible modules and listing incompatible modules.\r\n- Adds a  `PSEdition` column to the `PSModuleInfo` table view format.\r\n- Ensures that completions are not given for incompatible modules on the System32 module path.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n\r\n\r\n",
  "closed_at": "2018-07-16T23:58:41Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I couldn't reply to [one of your comments](https://github.com/PowerShell/PowerShell/pull/7183#discussion_r199331481) for some reason.\r\n\r\nThe `GetModuleForRootedPaths(string[] modulePaths, bool all, bool refresh)` method is a private member method of `ModuleCmdletBase` I think, so to use it from a static method in `ModuleUtils` we would need to find a runspace, instantiate the cmdlet object, get access to the method and fire it off.\r\n\r\nAfter thinking about that, I thought that `PowerShell.Create()...Invoke()` seemed to do most of that. So I've done that here.\r\n\r\nBut maybe there's a more direct way to instantiate a cmdlet in a runspace and fire a method?",
      "created_at": "2018-07-02T17:09:09Z",
      "updated_at": "2018-07-02T17:09:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "So the `Import-Module for Binary Modules in GAC` > `Modules are not loaded from GAC` test failure is something I can't reproduce. I notice the test is not idempotent; it will succeed the first time, and then fail on reruns after that.\r\n\r\nAfter stepping through it all with the debugger, I can't find any difference in the behaviour...",
      "created_at": "2018-07-02T18:24:41Z",
      "updated_at": "2018-07-02T18:24:41Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay + @SteveL-MSFT, can you check to see if the changes I've made meet your requests?",
      "created_at": "2018-07-02T18:25:51Z",
      "updated_at": "2018-07-02T18:25:51Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Should I rebase onto master again to take in your refactoring?",
      "created_at": "2018-07-02T18:26:08Z",
      "updated_at": "2018-07-02T18:26:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We can put off the rebase after the PR has been signed off.",
      "created_at": "2018-07-02T19:34:15Z",
      "updated_at": "2018-07-02T19:34:15Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ok, I believe I've fixed the test failure, but want to document it here.\r\n\r\nI needed to rename my (CompatiblePSEditions) test file...\r\n\r\nThe problem is that the [test for disabling GAC loading](https://github.com/PowerShell/PowerShell/blob/3c079b9d42b5484bdfa6577ac5406bce05f8af02/test/powershell/Modules/Microsoft.PowerShell.Core/Import-Module.Tests.ps1#L102-L116) will not pass if you've already loaded the type it's supposed to not load on, because it caches it. You can verify this easily with:\r\n\r\n```powershell\r\n> Invoke-Pester ./test/powershell/Modules/Microsoft.PowerShell.Core/Import-Module.Tests.ps1\r\n# All succeed\r\n> Invoke-Pester ./test/powershell/Modules/Microsoft.PowerShell.Core/Import-Module.Tests.ps1\r\n# GAC disable test fails\r\n```\r\n\r\nMy tests came before this test, pre-caching types from the System32 module path, causing the load to succeed and thus this test to fail. Renaming the test file to @iSazonov's suggested name of `ModuleCompatiblePSEditions.Tests.ps1` fixed it because that gets executed after `Import-Module.Tests.ps1`.\r\n\r\nI've included a note in my test file.",
      "created_at": "2018-07-03T00:32:18Z",
      "updated_at": "2018-07-03T00:33:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Also, it looks like AppVeyor won't run the tests until I resolve the merge conflict.\r\n\r\nBut I think if I use GitHub's merge resolution, I won't be able to squash my commits properly?\r\n\r\nAnd if I squash myself, we'll lose the commit hygiene for refactoring (may already have been lost by me though...)",
      "created_at": "2018-07-03T00:48:23Z",
      "updated_at": "2018-07-03T00:49:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR was started as WIP and we already have over 67 comments - GitHub becomes very slow.\r\nSo I suggest close the PR, rebase, resolve merge conflits, fix style issues, squash commits and open new PR. add open questions to the new PR description.\r\n\r\n> Renaming the test file to @iSazonov's suggested name of ModuleCompatiblePSEditions.Tests.ps1 fixed it because that gets executed after Import-Module.Tests.ps1.\r\n\r\nUsually we create separate PowerShell instance to pass such tests without side effects.",
      "created_at": "2018-07-03T04:40:56Z",
      "updated_at": "2018-07-03T04:40:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sample to invoke cmdlet:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L4077-L4085",
      "created_at": "2018-07-03T05:15:37Z",
      "updated_at": "2018-07-03T05:15:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we could convert `GetModuleForRootedPaths()` to static.",
      "created_at": "2018-07-03T06:01:42Z",
      "updated_at": "2018-07-03T06:01:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems the idea to cache available and compatible modules was good - this can extremely speed up completions.",
      "created_at": "2018-07-04T03:31:35Z",
      "updated_at": "2018-07-04T03:31:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov agreed on the caching",
      "created_at": "2018-07-05T17:01:32Z",
      "updated_at": "2018-07-05T17:01:32Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It looks like that same test is still failing despite all my attempts to make it work -- assuming a `Get-Module -ListAvailable` is being fired elsewhere to load the PSScheduledJob assembly.\r\n\r\nI'm pretty certain at this point that I've fixed the regressions, so I'm going to try and spin that test out into its own process...",
      "created_at": "2018-07-05T17:09:00Z",
      "updated_at": "2018-07-05T17:09:00Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, @daxian-dbw this is now passing CI",
      "created_at": "2018-07-05T20:17:32Z",
      "updated_at": "2018-07-05T20:17:32Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've just realised there's a problem when the Windows PowerShell module dir comes before the PSCore native $PSHOME on the module path -- you lose all the core (except Microsoft.PowerShell.Core) cmdlets...\r\n\r\nGoing to try and fix it today",
      "created_at": "2018-07-09T22:50:35Z",
      "updated_at": "2018-07-09T22:50:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I think this should be ready to merge now",
      "created_at": "2018-07-16T18:01:41Z",
      "updated_at": "2018-07-16T18:01:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt Can you please respond to all open comments?",
      "created_at": "2018-07-16T21:03:57Z",
      "updated_at": "2018-07-16T21:03:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This feature PR was squash-merged because:\r\n1. The commit history is not reasonably clean.\r\n2. We need to cherry-pick the changes to the `preview-4` release branch.",
      "created_at": "2018-07-17T00:00:23Z",
      "updated_at": "2018-07-17T00:12:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Great work! Thanks!",
      "created_at": "2018-07-17T03:38:46Z",
      "updated_at": "2018-07-17T03:38:46Z"
    }
  ],
  "created_at": "2018-06-26T17:56:56Z",
  "number": 7183,
  "state": "closed",
  "title": "Check CompatiblePSEditions manifest field for modules loaded from Windows PowerShell $PSHOME",
  "updated_at": "2018-07-17T03:38:47Z"
}