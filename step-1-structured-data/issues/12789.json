{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12789",
  "author": "MatejKafka",
  "body": "# Steps to reproduce\r\n 1. Create a `test.psd1` file with following content:\r\n```powershell\r\n@{\r\n\tScript = {\r\n\t\techo \"test\"\r\n\t}\r\n}\r\n```\r\n 2. Import the file:\r\n```powershell\r\n$data = Import-PowerShellDataFile .\\test.psd1\r\n```\r\n 3. Run the script block:\r\n```powershell\r\n& $data.Script\r\n```\r\n\r\n# Expected behavior\r\n\r\nScript block runs and `\"test\"` is printed to output.\r\n\r\n# Actual behavior\r\n\r\nScript block runs, but returns another script block that must be invoked again to actually run the script block content.\r\n\r\nFollowing script illustrates the issue:\r\n```powershell\r\n$data = Import-PowerShellDataFile .\\test.psd1\r\n\r\necho \"BARE:\"\r\necho $data.Script\r\n\r\necho \"INVOKE 1x:\"\r\necho (& $data.Script)\r\n\r\necho \"INVOKE 2x:\"\r\necho (& (& $data.Script))\r\n\r\n\r\n# same hashtable, defined inside a normal script\r\n$data2 = @{\r\n\tScript = {\r\n\t\techo \"test\"\r\n\t}\r\n}\r\n\r\necho \"BARE:\"\r\necho $data2.Script\r\n\r\necho \"INVOKE:\"\r\necho (& $data2.Script)\r\n```\r\nOutput:\r\n![image](https://user-images.githubusercontent.com/6414091/82843941-0bbc3200-9edf-11ea-8d87-21373d8a4080.png)\r\n\r\n\r\n# Environment data\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "General-Fault",
      "author_association": "NONE",
      "body": "Looking for a simple way to test for this condition before executing the scriptblock.\r\nAll I've got so far is:\r\n\r\n```\r\n$result = $data.Script.Invoke()\r\nif ($result -is [System.Collections.ObjectModel.Collection`1[System.Management.Automation.PSObject]] -and $result[0] -is [ScriptBlock] ) {\r\n  $result = $result.Invoke()\r\n}\r\n```",
      "created_at": "2020-11-12T20:38:53Z",
      "updated_at": "2020-11-12T20:38:53Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "I did a bit more exploration around this issue \u2013 it seems this might be intentional, although unfortunate. Using script blocks in .psd1 is apparently not officially supported, as it's supposed to be a static, data-only format. Still, I think this should be either fixed (preferably), or explicitly disapproved with a meaningful error message on import.",
      "created_at": "2021-03-24T15:56:14Z",
      "updated_at": "2021-07-16T23:54:23Z"
    },
    {
      "author": "loleebr",
      "author_association": "NONE",
      "body": "Ran into this issue myself and I agree.  Should be either fixed or a warning given.",
      "created_at": "2021-03-24T17:45:15Z",
      "updated_at": "2021-03-24T17:45:15Z"
    },
    {
      "author": "kort3x",
      "author_association": "NONE",
      "body": "Importing and invoking scriptblocks from psd1 should be supported and this issue should be fixed.",
      "created_at": "2021-05-23T13:58:25Z",
      "updated_at": "2021-05-23T13:58:25Z"
    },
    {
      "author": "kort3x",
      "author_association": "NONE",
      "body": "bump",
      "created_at": "2021-07-16T16:12:23Z",
      "updated_at": "2021-07-16T16:12:23Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "I looked around a bit and wrote down a few notes and links.\r\n\r\nLooking through unit test files, I don't see any explicit test for this behavior.\r\n\r\nImplementation of the cmdlet: https://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/src/Microsoft.PowerShell.Commands.Utility/commands/utility/ImportPowerShellDataFile.cs#L60\r\n\r\nRelevant bits (edited for brevity):\r\n```powershell\r\nvar ast = Parser.ParseFile(resolved, out tokens, out errors);\r\nvar data = ast.Find(static a => a is HashtableAst, false);\r\nreturn data.SafeGetValue(SkipLimitCheck)\r\n```\r\n\r\nRelevant call from `Parser.ParseFile`: https://github.com/PowerShell/PowerShell/blob/102782fbb0bc82310ca8eaba5574fc54e9ca9e6d/src/System.Management.Automation/engine/parser/Parser.cs#L103\r\n\r\nI'd suspect that the `.SafeGetValue` call has something to do with the issue, I'll play with it when I find more time.",
      "created_at": "2022-03-26T22:36:24Z",
      "updated_at": "2022-03-26T22:37:05Z"
    }
  ],
  "created_at": "2020-05-25T21:28:47Z",
  "number": 12789,
  "state": "open",
  "title": "Import-PowershellDataFile double wraps ScriptBlock",
  "updated_at": "2022-03-26T22:37:05Z"
}