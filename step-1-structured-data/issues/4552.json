{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4552",
  "author": "JohnLBevan",
  "body": "When running some commands in sequence, if no `Format-` command is explicitly stated, output may not show.  I believe this occurs when one command formats data as a table, and the subsequent command erroneously attempts to put its data into this same table.\r\n\r\nIssue first observed by LukeZeimet at: https://stackoverflow.com/questions/45637800/powershell-if-condition/45638510?noredirect=1#comment78237014_45638510\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nRunning the following only shows the output of Test-Connection, not of `Get-WmiObject`, despite `Get-WmiObject` giving results / working when run alone:\r\n\r\n```\r\n$computername = 'myComputer'\r\nTest-Connection $computername | select @{Name=\"Computername\";Expression={$_.Address}}, 'Ipv4Address' \r\nGet-WmiObject win32_SystemEnclosure -computername $computername | select serialnumber\r\n\r\nTest-Connection $computername | select @{Name=\"Computername\";Expression={$_.Address}}, 'Ipv4Address' \r\nGet-WmiObject win32_SystemEnclosure -computername $computername | select @{Name=\"Ipv4Address\";Expression={$_.serialnumber}}\r\n \r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nOutput:\r\n```none\r\nComputername  IPV4Address  \r\n------------  -----------  \r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nserialnumber\r\n------------\r\nNone\r\nComputername  IPV4Address  \r\n------------  -----------  \r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nIPV4Address  \r\n------------\r\nNone\r\n```\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nComputername  IPV4Address  \r\n------------  -----------  \r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\n\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\nmyComputer 123.456.789.321\r\n                      None\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                                                                                          \r\n----                           -----                                                                                                                                                          \r\nPSVersion                      5.1.14409.1012                                                                                                                                                 \r\nPSEdition                      Desktop                                                                                                                                                        \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                        \r\nBuildVersion                   10.0.14409.1012                                                                                                                                                \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                \r\nWSManStackVersion              3.0                                                                                                                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                            \r\nSerializationVersion           1.1.0.1   \r\n```\r\n",
  "closed_at": "2017-08-16T14:48:23Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yes, the 300 ms wait was added to improve formatting of column widths, however, this issues seems to be an unintended side-effect.",
      "created_at": "2017-08-14T04:26:19Z",
      "updated_at": "2017-08-14T04:26:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nI'm glad to hear it.\r\n\r\nUnfortunately I just realized that the behavior described in this issue is as designed and _not_ related to the 300 ms. wait - see below (I've also removed my original explanation above).\r\n\r\nSo, unless I'm wrong again, I suggest:\r\n\r\n* closing this issue as as-designed; @JohnLBevan points out that the behavior is gotcha, however, so a documentation-needed label is warranted too.\r\n\r\n* creating a new issue that  focuses on the 300 ms. wait - see #4594\r\n\r\n---\r\n\r\n<sup>(Adapted from https://stackoverflow.com/a/45705068/45375.)</sup>\r\n\r\n**All output produced by a given script** - even across separate commands - is sent to the **same pipeline**.  \r\n(You can think of a command line submitted interactively as an implicit script.)\r\n\r\n**While you can send any mix of data types to a pipeline, its _default display formatting_ is optimized for objects of the _same_ type, as that is the more typical case.**\r\n\r\n<sup>The following is in part based on experimentation - do tell me if I got something wrong.</sup>\r\n\r\nIn the absence of explicit formatting commands (`Format-Table`, `Format-List`, ...), PowerShell automatically chooses a suitable display format, based either on a given type's preconfigured formatting data (see [`Get-Help about_Format.ps1xml`](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/about_Format.ps1xml)) or, in their absence, based on simple rules (4 or fewer properties? -> `Format-Table`; 5 or more? -> `Format-List`).\r\n\r\nHowever, **it is the _first_ object sent to the pipeline that determines the display format for _all_ objects**:\r\n\r\n* In case `Format-Table` is selected, that also means that **the first object _alone_ determines the set of table *columns (properties)*, which can cause subsequent objects to \"disappear\"**, if they don't have the same properties.\r\n\r\n  * The only data types unaffected by this appear to be the .NET base types, such as `[int]` and `[string]` - they print normally, irrespective of what display columns were selected by the first object.\r\n\r\n* In case `Format-List` is selected, there is no problem, as each object's properties are listed individually.\r\n\r\nAgain, note that **even \"disappearing\" objects are just a _display_ problem**: the objects are there, and sending them to another command for further processing works just fine.\r\n\r\n---\r\n\r\n**Why using an explicit formatting command helps:**\r\n\r\nBy **explicitly piping to a `Format-*` cmdlet** (e.g, `[pscustomobject] @{ one = 1; two = 2 } | Format-Table`), you're actually sending _formatting objects_ (various `[Microsoft.PowerShell.Commands.Internal.Format.*]` types) to the pipeline, and PowerShell then effectively passes them through for display.\r\n\r\nAn alternative is to use a ***generic* workaround**: if you **pipe to `Out-Host`** instead (e.g., `[pscustomobject] @{ one = 1; two = 2 } | Out-Host`), in which case:\r\n\r\n  * you bypass the pipeline and print directly to the console (if you're running PowerShell in a regular console window), \r\n  * and the object's *default* formatting view is applied.\r\n\r\nIt is important to note that **these workarounds are suitable only for _display_ purposes**, because the original objects are _lost_ in the process:\r\n\r\n  * When you pipe to a `Format-*` cmdlet explicitly, you replace the original object with objects containing formatting instructions, which are useless for further processing.\r\n\r\n  * When you pipe to `Out-Host`, you send _nothing_ to the script's pipeline.\r\n\r\n",
      "created_at": "2017-08-16T13:59:17Z",
      "updated_at": "2017-08-16T14:47:39Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "Thanks @mklement0; agree that this behaviour makes sense.\r\n\r\nHowever, it's a definite gotcha for the uninitiated / unwary.  \r\n\r\nMany people will want to avoid putting formatting commands in their functions as that then limits their reuse.  Whilst they could avoid the issue by returning the different result types as different properties on a custom object (i.e. thus keeping them clearly distinct in the pipeline, whilst allowing them to be formatted as required down the line), this kind of thing will catch out a lot of people who've not hit it previously.\r\n\r\nIt would be helpful if the implicit `Format-Table` were able to check the pipeline values' `.PSObject.TypeNames` values and where they differ from the previous object, start a new table.  That said, this suggestion would be:\r\n- a breaking chage\r\n- wouldn't resolve the issue in the many cases where all values were `PSCustomObject`s.\r\n\r\nHowever, some solution along those lines would be helpful... Though I suspect it would be an enhancement rather than a bug...\r\n\r\n",
      "created_at": "2017-08-16T14:49:41Z",
      "updated_at": "2017-08-16T14:49:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree that this trips up people and open to suggestions on how to enhance this, however, it should probably be a RFC",
      "created_at": "2017-08-16T15:00:58Z",
      "updated_at": "2017-08-16T15:00:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just some quick food for thought on how to address this:\r\n\r\nBuilding on @JohnLBevan's suggestions, here's a quick-and-dirty prototype for a potential new `Format-Grouped` cmdlet (a working title):\r\n\r\n```powershell\r\nFunction Format-Grouped { \r\n  $Input | Group-Object { \r\n    if ($_ -is [System.Management.Automation.PsCustomObject])\r\n      { [string] $_.psobject.properties.Name }\r\n   else \r\n      { $_.GetType().FullName } \r\n  } | \r\n    ForEach-Object { $_.Group | Out-String }\r\n}\r\n```\r\n\r\nIt groups the pipeline objects by type and outputs each group of objects of the same type with that type's default formatting; in the case of _custom_ objects, they're grouped by shared array of property names.\r\n\r\nA much simpler, streaming function that simply formats each input object _individually_, which notably means that table-formatted objects _each_ get a table header, even if they occur in blocks.\r\n\r\n```powershell\r\nFilter Format-Each { $_ | Out-String }\r\n```\r\n\r\nExample with regular types:\r\n\r\n```powershell\r\n> & { Get-ChildItem -File /; Get-Process | Select-Object -First 2 } | Format-Grouped\r\n\r\n\r\n    Directory: /\r\n\r\n\r\nMode                LastWriteTime         Length Name                                                                                                                              \r\n----                -------------         ------ ----                                                                                                                              \r\n--r---          7/30/16  10:00 PM            313 installer.failurerequests                                                                                                         \r\n--r---          8/10/17   3:53 PM            146 lastlogout_hook.txt                                                                                                               \r\n\r\n\r\n\r\n NPM(K)    PM(M)      WS(M)     CPU(s)     Id  SI ProcessName                                                                                                                      \r\n ------    -----      -----     ------     --  -- -----------                                                                                                                      \r\n      0     0.00       0.00       0.00      0 942                                                                                                                                  \r\n      0     0.00       0.00       0.00      1   1                                                                                                                                  \r\n\r\n```\r\n\r\nExample with custom objects:\r\n\r\n```powershell\r\n> & { [pscustomobject] @{ one = 1; two = 2 }; [pscustomobject] @{ four = 4} } | Format-Grouped\r\n\r\none two\r\n--- ---\r\n  1   2\r\n\r\n\r\n\r\nfour\r\n----\r\n   4\r\n\r\n\r\n```",
      "created_at": "2017-08-16T15:48:01Z",
      "updated_at": "2018-05-16T21:21:17Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "@SteveL-MSFT  is it best that I raise a new issue on here to track this as an RFC, or could we retag this existing issue for that purpose?",
      "created_at": "2017-08-16T18:33:26Z",
      "updated_at": "2017-08-16T18:33:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JohnLBevan We continue in #4594",
      "created_at": "2017-08-21T07:38:01Z",
      "updated_at": "2017-08-21T07:38:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Didn't see @iSazonov reply which sounds good, re-resolving",
      "created_at": "2017-08-22T15:44:08Z",
      "updated_at": "2017-08-22T15:44:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nPerhaps the solution to the asynchronous problem will _implicitly_ give us the behavior that @JohnLBevan suggests here, but we should keep in mind that they are really two separate issues:\r\n\r\n* surprising asynchronous output behavior\r\n\r\n* the first implicit `Format-Table` use locking in the output format for all subsequent commands, even if they output different data\r\n\r\nI've folded a description of the latter into #4594, at least for now.",
      "created_at": "2017-08-22T18:07:17Z",
      "updated_at": "2017-08-22T18:07:17Z"
    }
  ],
  "created_at": "2017-08-11T16:05:39Z",
  "labels": [
    "WG-Engine",
    "Resolution-By Design"
  ],
  "number": 4552,
  "state": "closed",
  "title": "Enable formatting of different object types in same pipeline",
  "updated_at": "2018-05-16T21:21:17Z"
}