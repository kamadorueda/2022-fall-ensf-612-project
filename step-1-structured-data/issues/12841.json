{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12841",
  "author": "schuelermine",
  "body": "This started in PR #12511, in which, in the output field `SideIndicator` of `Compare-Object`, I wanted to change `<=` to `<==` and vice-versa to:\r\n\r\n1. Avoid confusion with `<=` with less-than-or-equal\r\n2. Avoid misrendering of `<=` by fonts that support coding ligatures (See image 1, uploaded by @rkeithhill [here](https://github.com/PowerShell/PowerShell/pull/12511#issuecomment-622509067))\r\n\r\nSeveral alternative solutions have been proposed:\r\n\r\n1. Introduce a new Enum type that represents the possible return values in the `SideIndicator` field more abstractly (idea by @vexx32 [here](https://github.com/PowerShell/PowerShell/pull/12511#issuecomment-622512498))\r\n2. A parameter for `Compare-Object` that sets the output strings for the possible values that could then be set to a custom default value by the user (idea by @adityapatwardhan [here](https://github.com/PowerShell/PowerShell/pull/12511#issuecomment-635524052))\r\n\r\nAgain, see PR #12511 for the exisiting discussion on this topic.\r\n\r\nImage 1:\r\n![](https://user-images.githubusercontent.com/5177512/80831527-3baa3b00-8ba8-11ea-9636-6861f24c043b.png)\r\n\r\nPostscriptum: Mentioning all participants in the PR conversation\r\n@iSazonov @adityapatwardhan @rkeithhill @vexx32",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is the `PSCustomObject` output by `Compare-Object`:\r\n```powershell\r\nPS> $r = Compare-Object (gc .\\t1.ps1) (gc .\\t2.ps1)\r\nPS> $r[0] | fc\r\n\r\nclass PSCustomObject\r\n{\r\n  InputObject = Trap { 'Shame.'; exit 1 }\r\n  SideIndicator = =>\r\n}\r\n\r\nPS> $r | gm\r\n\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName          MemberType   Definition\r\n----          ----------   ----------\r\nEquals        Method       bool Equals(System.Object obj)\r\nGetHashCode   Method       int GetHashCode()\r\nGetType       Method       type GetType()\r\nToString      Method       string ToString()\r\nInputObject   NoteProperty System.String InputObject=Trap { 'Shame.'; exit 1 }\r\nSideIndicator NoteProperty string SideIndicator==>\r\n```\r\nIn a script, a user could do a compare like so `'=>' -eq $r[0].SideIndicator`.  Hence, simply changing strings for the various SideIndicators would be a breaking change.  Converting this to an enum is one possible fix.  However, I still think that would be a breaking change.  Consider this code:\r\n```\r\n$r[0].SideIndicator.StartsWith('=')\r\n```\r\nAn enum doesn't have a `StartsWith()` method and would throw.  \r\n\r\nWhat I propose is that we add a new field to the `PSCustomObject` called `SideIndicatorDisplay` (or something akin to that) which would hold the **new** side indicator strings that would get rendered.  And rendered nicely in a console using a ligature font.  :-)\r\n\r\nThis would require some tinkering with the PSCustomObject i.e., giving it a formal type name and then adding the appropriate formatting XML to render the `InputObject` and the `SideIndicatorDisplay` fields and not the `SideIndicator` field.  The `SideIndicator` would remain unchanged - hence no breaking changes.\r\n\r\nThen we could optionally add the `-SideIndicator` parameter that would allow the user to configure the strings they want to use in the `SideIndicatorDisplay` field.",
      "created_at": "2020-05-29T21:22:49Z",
      "updated_at": "2020-05-29T23:04:38Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "How about keeping `SideIndicator` as a legacy field and using something new to store an Enum that would be more future-proof? I really like the idea of formalizing the side indicator.\r\n\r\nWe could call the new field `Side`",
      "created_at": "2020-05-29T21:39:27Z",
      "updated_at": "2020-05-29T21:39:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah even if there's some duplication of data by maintaining a legacy field, I do think it's more useful to have an abstracted and more clear indicator.\r\n\r\nEvery time I use this cmdlet I _again_ have to look up which side refers to which to make sure I haven't confused them all over again. We don't have `-LeftObject` and `-RightObject`, we have `-ReferenceObject` and `-DifferenceObject`, which is innately confusing.\r\n\r\nI'd ask that the property name and/or value via the enum naming be more indicative of which of the input sets is being referred to. I.e., should explicitly mention `Reference` /`Difference`/`Both` somewhere in the naming so it's clear which items are in which sets.\r\n\r\nAside: I kind of feel like it's a bit weird we _don't_ have a formal object type for this cmdlet. Most other PS-shipped cmdlets define their own class types. Might be a good opportunity to create a class type for it. If we do, we can define the `SideIndicator` property to be a faux-property that just checks the `Side` (or whatever we call it) enum property and emits the backwards-compatible string based on that only when you query it.\r\n\r\nNo point storing string data if we can easily generate it on the flip of a coin based on a couple string `const` values and the enum value.",
      "created_at": "2020-05-29T23:28:43Z",
      "updated_at": "2020-05-29T23:35:55Z"
    }
  ],
  "created_at": "2020-05-29T20:47:59Z",
  "number": 12841,
  "state": "open",
  "title": "Adjusting the SideIndicator output of Compare-Object (Moved discussion from PR #12511)",
  "updated_at": "2020-05-31T04:35:18Z"
}