{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16058",
  "author": "jantari",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen trying to research a different question (\"Does Windows PowerShell 5.1 depend on WSMAN for OutOfProcess Runspaces?\" - and no, I haven't been able to find an answer) I read some remoting-related source code in this repository, and noticed the following:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/17986d88c10eb6271b1aad2ca955889e45e2b285/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1905-L1909\r\n\r\nThis appears to assume that when we get a RunspaceConnectionInfo of Type NewProcessConnectionInfo we must be in PowerShell 5.x or newer, and in order to test this I created jobs on a Windows Server 2012 R2 instance with no upgraded WMF so still running PowerShell 4.0 but I got a ConnectionInfo of type `NewProcessConnectionInfo` there too.\r\n\r\nTo be clear I have no idea what the impact of this possibly wrong version detection could be.\r\nIt looks to me like this would identify PowerShell 4.0+ as PowerShell5 .0+\r\n\r\nI have made a screenshot from my 2012 R2 server below that shows I get a NewProcessConnectionInfo object from a Job:\n\n### Expected behavior\n\n```console\n# Not applicable\n```\n\n\n### Actual behavior\n\n```console\n# Not applicable\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      4.0\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\nCLRVersion                     4.0.30319.42000\r\nBuildVersion                   6.3.9600.19170\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0}\r\nPSRemotingProtocolVersion      2.2\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/25607767/132255306-dce06c15-65be-4bb4-add9-688075bc0714.png)\r\n",
  "closed_at": "2021-09-07T16:56:13Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": ">  (\"Does Windows PowerShell 5.1 depend on WSMAN for OutOfProcess Runspaces?\" - and no, I haven't been able to find an answer) \r\n\r\nDepends, for things like jobs no it does't. It uses the new powershell process' stdio handles to send and receive data. Only `-ComputerName ...` PSRemoting stuff relies on WSMan.\r\n\r\n> To be clear I have no idea what the impact of this possibly wrong version detection could be.\r\nIt looks to me like this would identify PowerShell 4.0+ as PowerShell5 .0+\r\n\r\nThe only place where `GetRemoteServerPsVersion` is used is in `CreatePipeline` https://github.com/PowerShell/PowerShell/blob/17986d88c10eb6271b1aad2ca955889e45e2b285/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1875-L1884 where it is used to swap between a pwsh v2 and v3+ type of pipeline to handle things like `$using:` statements. If the detection was wrong then doing something like this might potentially fail\r\n\r\n```powershell\r\n$var = 'foo'\r\nStart-Job { $using:var } | Wait-Job | Receive-Job\r\n```\r\n\r\nBut when testing it does still work.\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/132258250-3780b614-aba9-4697-865c-9cc0548b2da2.png)\r\n\r\nAt a guess the code for Windows PowerShell 4 is built before v5 was a thing so this current bit of code in PowerShell is not present there, why would it ever know about future versions. Where this might be a problem is if you are running PowerShell 6+ on a host with just Windows PowerShell 4 and state you want to run the job on the Windows PowerShell instance which I don't even know if it's possible. The `NewProcessConnectionInfo` is not even public so it's not like there's 3rd party code out there legitimately using it.",
      "created_at": "2021-09-06T20:20:39Z",
      "updated_at": "2021-09-06T20:20:39Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "> The NewProcessConnectionInfo is not even public so it's not like there's 3rd party code out there legitimately using it.\r\n\r\nThere is [an issue](https://github.com/PowerShell/PowerShell/issues/13435) for that and it also contains a legitimate usecase.\r\n\r\n> Depends, for things like jobs no it does't. It uses the new powershell process' stdio handles to send and receive data. Only -ComputerName ... PSRemoting stuff relies on WSMan.\r\n\r\nThanks for the input. It is quite an important differentiation because WSMAN is not supported in WinPE according to comments in this codebase, and the docs site for [`NamedPipeConnectionInfo`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.namedpipeconnectioninfo) makes it a point to state explicitly that it doesn't have a dependency on WSMan - but since `NewProcessConnectionInfo` is still private, there's no docs for it ...\r\n\r\nI also tested `[System.Management.Automation.Runspaces.RunspaceFactory]::CreateOutOfProcessRunspace($null)` (which is a public API that uses the undocumented `NewProcessConnectionInfo`) inside WinPE and it worked, so I guess that's a good indicator.",
      "created_at": "2021-09-06T21:06:54Z",
      "updated_at": "2021-09-06T21:06:54Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Yep the only thing that uses WSMan is [WSManConnectionInfo](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.wsmanconnectioninfo?view=powershellsdk-7.0.0). It's a sealed class as well so nothing will be inherited that and any other `*ConnectionInfo` classes will use their own transport, the common one being the OutOfProc transports that work over some sort of read/write IO interface.",
      "created_at": "2021-09-06T22:07:22Z",
      "updated_at": "2021-09-06T22:07:22Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "WG-Remoting:\r\n\r\nThe above repro steps runs in WindowsPowerShell version 4, and so is not running any PowerShellCore code and the PowerShellCore code snippet shown above does not apply.\r\n\r\nPowerShellCore only starts child processes for version 5.1 (if available) or the current running PowerShellCore version, so the code snippet is actually correct.  A child process can be started via `Start-Job` cmdlet or `CreateOutOfProcessRunspace` API.\r\n\r\n`Start-Job` takes a `PSVersion` parameter, but only checks it for a value of `5.1`, and otherwise ignores it, starting a session version the same as the currently running version.  So again, the code snippet is actually correct, a new process will always run a version of `5.1` or the current parent version.\r\n\r\nHowever, I did notice that the error message is incorrect if you try to start a job with PowerShell version 2.0.  So I am creating a new [Issue](https://github.com/PowerShell/PowerShell/issues/16062) for that.\r\n\r\nI am closing this Issue since there appears to be no bug.  But please re-open if I am missing something.",
      "created_at": "2021-09-07T16:56:13Z",
      "updated_at": "2021-09-07T16:56:13Z"
    }
  ],
  "created_at": "2021-09-06T19:26:21Z",
  "number": 16058,
  "state": "closed",
  "title": "Remote server PS version detection logic appears to be wrong, misidentify PowerShell 4+ as 5+",
  "updated_at": "2021-09-07T16:56:31Z"
}