{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6583",
  "author": "mklement0",
  "body": "<sup>Supersedes #4472</sup>\r\n\r\nIn said cmdlets, `-Path` is declared as `[string[]]`, so these cmdlets are capable of accepting multiple files, if passed an _array_ of paths; ditto for `-LiteralPath`.\r\n\r\nPassing a (single) _wildcard expression_ that itself resolves to _multiple_ files unexpectedly breaks, however.\r\n\r\nThe culprit may be that  [`ReportMultipleFilesNotSupported()`](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/utils/PathUtils.cs#L276) is called, whose purpose is to prevent resolution to _multiple_ paths, but whose use is not appropriate in this case.\r\n\r\nNote: Potentially, additional cmdlets are affected - you can find the list of _candidates_ (some of which are definitely _not_ affected) as follows:\r\n\r\n```powershell\r\ngcm -parametername path | ? { $_.parametersets.parameters.parametertype -eq [string[]] }\r\n```\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\"one,two`nuno,due\" > file1.csv\r\n\"one,two`nun,deux\" > file2.csv\r\n\r\nImport-Csv -LiteralPath file1.csv, file2.csv\r\n' vs. '\r\nImport-Csv -Path file[12].csv\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\none two \r\n--- --- \r\nuno due \r\nun  deux\r\n vs. \r\nuno due \r\nun  deux\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n\r\none two \r\n--- --- \r\nuno due \r\nun  deux\r\n vs. \r\nImport-Csv : Cannot perform operation because the path resolved to more than one file. This command cannot operate on multiple files.\r\nAt /foo.ps1:21 char:1\r\n+ Import-Csv -Path file[12].csv\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Import-Csv], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : ReadWriteMultipleFilesNotSupported,Microsoft.PowerShell.Commands.ImportCsvCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.2 on macOS 10.13.3\r\nPowerShell Core v6.0.2 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.2 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Since `Import-CSV` already supports reading from multiple files, it seams reasonable to make this change.\r\n\r\nWhat's happening is that, in the `ImportCsvCommand` class, the `ProcessRecord` method calls `PathUtils.OpenStreamReader` which does both path expansion and opens the `StreamReader`.\r\n```\r\nStreamReader streamReader = PatthUtils.OpenStreamReader(this, path, this.Encoding, _isLiteralPath\r\n```\r\nObviously, since only a single stream reader can be returned, the call has to error out if wildcards expand to more than one path. The solution would be to process the paths in two passes. Pass one expands the wildcards and pass 2 does the actual processing (using `LiteralPath`). \r\n\r\nNote that this is specific to the `Import-Csv` cmdlet implementation, so I'm not sure we can make any general assumptions about the others. However @mklement0 If you do have the time/inclination/patience to check them out, that would be cool.\r\n\r\n",
      "created_at": "2018-04-06T19:03:06Z",
      "updated_at": "2018-04-06T19:03:06Z"
    }
  ],
  "created_at": "2018-04-06T17:33:58Z",
  "number": 6583,
  "state": "open",
  "title": "Import-CliXml, Import-Csv, Import-PowerShellDataFile mishandle wildcard-based -Path arguments",
  "updated_at": "2019-11-15T17:40:55Z"
}