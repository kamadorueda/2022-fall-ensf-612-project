{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8119",
  "author": "grongrilla",
  "body": "I am currently developing a .NET Core 2.1 Console application that should be able to execute PowerShell Scripts.\r\n\r\nMy starting point was the example provided in PowerShell-6.1.0\\docs\\host-powershell\\sample-dotnet2.0-powershell.beta.3, but depending on the 6.1 release of PowerShell Core. So when I started implementing more and extending my test powershell script, I ran into an issue concerning `Microsoft.Management.Infrastructure`: \r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n```\r\n\r\nI am assuming Microsoft.Management.Infrastructure provides CimCmdlets?\r\n\r\nI do have the NuGet Package \"Microsoft.Management.Infrastructure\" in my Project, but the DLLs are not published...\r\n\r\nSo I had a look at the PowerShell Release zip: \r\n\r\nthere is a \r\nMicrosoft.Management.Infrastructure, \r\nMicrosoft.Management.Infrastructure.Native, \r\nMicrosoft.Management.Infrastructure.Unmananged and a Microsoft.Management.Infrastructure.CimCmdlets, \r\nwhich have different versions than the DLLs provided in the NuGet Package \"Microsoft.Management.Infrastructure\". \r\nAlso, the NuGet Package only contains Microsoft.Management.Infrastructure and Microsoft.Management.Infrastructure.Native.\r\n\r\nSo, is there something wrong with the Nuget Package? Am I using it wrong? What would I need to do if I want to publish a win-x64 Console App hosting PS scripts that supports CimCmdlets, and a linux-x64 Console App hosting PS scripts that do not support CimCmdlets?\r\n\r\nI also realized that `Get-Modules -ListAvailable` did not work (returned nothing) in my test script because I was missing the psd files, which are available in the \"Modules\" subdir of the PowerShell Release zip.\r\nAre these available as a nuget package? Are they even meant to be redistributed as part of a PowerShell Core Host \".exe\"? Also, when I copy that folder manually to my publish dir, some CmdLets complain about a missing `ref` dir, which is indeed in the PowerShell zip. Same question, is this something specific to pwsh.exe gets redistributed and if I \"need\" it, I am doing something wrong?\r\n\r\nSo I guess my question boilds down to this:\r\n\r\nWhat is the correct way to implement and publish a self-contained .exe that supports (potentially) everything, that pwsh.exe can do, but where I have the possibility to control what is executed, and how (runspace, some additional checks, and so on...). Is these even the \"correct\" way to use PowerShell Core hosting?",
  "closed_at": "2020-08-22T04:00:16Z",
  "comments": [
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Stack Trace of the Exception mentioned above:\r\n```\r\nat System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n```",
      "created_at": "2018-10-25T15:48:09Z",
      "updated_at": "2018-10-25T15:48:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The CimCmdlets are in Microsoft.Management.Infrastructure.CimCmdlets.dll but depends on those other dlls.  The nupkg has the right assemblies as that same nupkg is used to build PSCore6.  However, you do need to specify the runtime when publishing your project so the right assemblies get populated.  The missing .psd1 files has been brought up before, but I can't find the existing issue that was discussing this.",
      "created_at": "2018-10-26T02:49:42Z",
      "updated_at": "2018-10-26T02:49:42Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\nRelevant entries from my csproj:\r\n```\r\n<PropertyGroup Label=\"Globals\">\r\n    <Platforms>x64;x86</Platforms>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <RuntimeIdentifiers>win-x64;win-x64;linux-x64;osx-x64</RuntimeIdentifiers>\r\n    <PreserveCompliationContext>true</PreserveCompliationContext>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Management.Infrastructure\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Management\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Utility\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.ConsoleHost\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.MarkdownRender\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Native\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Security\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.WSMan.Management\" Version=\"6.1.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nNo `Microsoft.Management.*` in my publish for `win-x64`.\r\n\r\nWhat am I doing wrong?\r\n\r\nConcerning the missing `Modules` and `ref` dir; would simply copying from the PowerShell Release zip be a valid solution (untile the issue(?)) is fixed? Or are those files not meant to be available?\r\n",
      "created_at": "2018-10-26T07:10:37Z",
      "updated_at": "2018-10-26T07:10:37Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Had a look at `packages\\microsoft.management.infrastructure\\1.0.0\\runtimes`:\r\n\r\n```\r\nunix\r\nwin-arm\r\nwin-arm64\r\nwin10-x64\r\nwin10-x86\r\nwin7-x64\r\nwin7-x86\r\nwin8-x64\r\nwin8-x86\r\nwin81-x64\r\nwin81-x86\r\n```\r\nSo... no `win-x64`, no `linux-x64`. The exception for my `win-x64` publish:\r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n```\r\n\r\nTries to load the Assembly even though I is not available for the runtime. How am I supposed to solve this? Do I need to target every `win*-x*` seperately and publish seperately?",
      "created_at": "2018-10-26T07:17:40Z",
      "updated_at": "2018-10-26T07:17:40Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Ok, so I had a look at how PowerShell Core 6.1 is build. It looks like you \"target\" win7-x64, which I guess can be considered as the smallest common denominator for Microsoft.Management.Infrastructure.\r\n\r\nWhat I am missing are the CimCmdlets. I would like to make them available when I am \"targetin\" win7-x64 and win7-x32. It seems `Microsoft.Management.Infrastructure.CimCmdlets` is not available via nuget.\r\n\r\nAre there any plans for doing this? Will the `Modules` at some point be available as some sort of package? Or will I have to do a conditional `Include` and have the PowerShell binary distribution available somehwere else than nuget?",
      "created_at": "2018-10-26T13:22:31Z",
      "updated_at": "2018-10-26T13:22:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan ",
      "created_at": "2018-10-26T16:14:47Z",
      "updated_at": "2018-10-26T16:14:47Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bergersn Thanks for the feedback. You do not directly need a reference for `Microsoft.Management.Infrastructure` for using the CimCmdlets. `Microsoft.Management.Infrastructure.CimCmdlets` is missing from the package and we will be working on adding that.",
      "created_at": "2018-10-29T17:27:55Z",
      "updated_at": "2018-10-29T17:27:55Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Thanks you @adityapatwardhan @SteveL-MSFT ",
      "created_at": "2018-10-30T06:42:54Z",
      "updated_at": "2018-10-30T06:43:11Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "@SteveL-MSFT @adityapatwardhan \r\nanything new? cimcmdlets seem to be not available via nuget still.",
      "created_at": "2019-02-25T13:41:39Z",
      "updated_at": "2019-02-25T13:41:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergersn sorry for the delay on this, I believe @adityapatwardhan is concurrently working on this along with other things",
      "created_at": "2019-03-15T22:36:31Z",
      "updated_at": "2019-03-15T22:36:31Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "@SteveL-MSFT @adityapatwardhan \r\nPing-ing again for news. Microsoft.Powershell.SDK 6.2.1 NuGet Package still does not containt reference to CimCmdlets. We really need those. Maybe in 7.0?",
      "created_at": "2019-05-31T08:16:50Z",
      "updated_at": "2019-05-31T08:16:50Z"
    },
    {
      "author": "donaldpb",
      "author_association": "NONE",
      "body": "Also checking in if there has been any development on this as yet? \r\n\r\nWe are also creating a .NET Core app using powerShell scripts and are facing the exact same issue. ",
      "created_at": "2019-06-04T10:14:30Z",
      "updated_at": "2019-06-04T10:14:30Z"
    },
    {
      "author": "SylvainNZ",
      "author_association": "NONE",
      "body": "I posted on StackOverflow about this issue but noone has been able to provide a working solution. I am not looking for using commandlets directly but just to run a script.\r\nhttps://stackoverflow.com/questions/56352672/running-powershell-from-net-core-could-not-load-file-or-assembly-microsoft-ma\r\nThere is a 50points bounty but just one day left ;)",
      "created_at": "2019-06-06T08:40:45Z",
      "updated_at": "2019-06-06T10:50:00Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "> @bergersn Thanks for the feedback. You do not directly need a reference for `Microsoft.Management.Infrastructure` for using the CimCmdlets. `Microsoft.Management.Infrastructure.CimCmdlets` is missing from the package and we will be working on adding that.\r\n\r\n@SteveL-MSFT @adityapatwardhan What exactly is the action item for this ticket?  I can't tell.\r\n\r\nI want Microsoft.Management.Infrastructure.CimCmdlets as a PowerShell package.  I'm going to create an explicit ticket for this, because I don't know what specifically the original post is asking for, and I don't see this as a huge lift to publish Microsoft.Management.Infrastructure.CimCmdlets as a PowerShell package.\r\n\r\n@bergersn I think your confusion may be over how .NET Core does publishing.  Can you post a full csproj and code to GitHub so I fully understand what problem you are having? Microsoft.Management.Infrastructure *should not* be published - IMHO, it should merely be referenced by your `deps.json` file. You can read more about it in this deep-dive by ASP.NET Core developer Nate McMaster (excellent, excellent engineer): https://natemcmaster.com/blog/2017/12/21/netcore-primitives/",
      "created_at": "2019-06-26T16:34:30Z",
      "updated_at": "2019-06-26T16:34:30Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "See: https://github.com/PowerShell/PowerShell/issues/10012",
      "created_at": "2019-06-26T16:39:22Z",
      "updated_at": "2019-06-26T16:39:22Z"
    },
    {
      "author": "marc-dworkin",
      "author_association": "NONE",
      "body": "there is a nuget package (https://github.com/PowerShell/MMI) that exposes the c# cim interfaces (https://docs.microsoft.com/en-us/dotnet/api/microsoft.management.infrastructure.cimsession?view=pscore-6.2.0)\r\n\r\nis there an advantage to a c# dev in going through powershell?\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/MMI\">PowerShell/MMI</a></strong></div><div>Contribute to PowerShell/MMI development by creating an account on GitHub.</div></blockquote>\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.management.infrastructure.cimsession\">CimSession Class (Microsoft.Management.Infrastructure)</a></strong></div></blockquote>",
      "created_at": "2020-02-12T02:21:33Z",
      "updated_at": "2020-02-12T02:21:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "fixed https://www.nuget.org/packages/Microsoft.Management.Infrastructure.CimCmdlets\r\n\n\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.management.infrastructure.cimcmdlets/7.0.3/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.Management.Infrastructure.CimCmdlets/\">Microsoft.Management.Infrastructure.CimCmdlets 7.0.3</a></strong></div><div>Runtime for hosting PowerShell</div></blockquote>",
      "created_at": "2020-08-20T18:58:12Z",
      "updated_at": "2020-08-20T18:58:14Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "@TravisEz13 Sweet!  Thank you very much.",
      "created_at": "2020-08-20T19:06:40Z",
      "updated_at": "2020-08-20T19:06:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as fixed and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-22T04:00:15Z",
      "updated_at": "2020-08-22T04:00:15Z"
    }
  ],
  "created_at": "2018-10-25T15:44:59Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "WG-DevEx-SDK"
  ],
  "number": 8119,
  "state": "closed",
  "title": "Microsoft.Management.Infrastructure.CimCmdlets nuget package should be published",
  "updated_at": "2020-08-22T04:00:17Z"
}