{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17106",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote: \r\n * Conceptually related: #14534\r\n\r\nThe following two statements _should_ be equivalent, but aren't:\r\n\r\n```powershell\r\n# OK - with only a -Path argument, the path is taken *literally*\r\n# Creates a subdir. literally named '[test]' with a file 'test.txt' in it.\r\nNew-Item -Force -Path '[test]\\test.txt'\r\n\r\n# !! BROKEN - with -Name also present, the -Path argument is\r\n# !! interpreted as a *wildcard expression*\r\nNew-Item -Force -Path '[test]' -Name 'test.txt'\r\n```\r\n\r\nWith `-Name` also present, `-Path` is unexpectedly treated _as a wildcard expression_.\r\n\r\n### Expected behavior\r\n\r\nBoth commands should (re)create a subdirectory `[test]` with a file `test.txt` in it, and report a `FileInfo` instance for the latter; e.g.:\r\n\r\n```console\r\n\r\n    Directory: /Users/jdoe/[test]\r\n\r\nUnixMode   User             Group                 LastWriteTime           Size Name\r\n--------   ----             -----                 -------------           ---- ----\r\n-rw-r--r-- jdoe             staff                4/4/2022 17:08              0 test.txt\r\n\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nThe second command is situationally either a quiet no-op, or fails when wildcard pattern `[test]` matches an _existing file_ named `t` or `e` or ... or inappropriately targets an _existing directory_ named `t` or `e` ...\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.3\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "While confusing due to the lack of `-Path` and `-LiteralPath` parameters for the `-Name` parameter set, this is documented and there is even an example https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-item?view=powershell-7.2#example-6-use-wildcards-to-create-files-in-multiple-directories.\r\n\r\nLooks like the docs for the `-Path` parameter need updating though\r\n\r\n> For this cmdlet, the Path parameter works like the LiteralPath parameter of other cmdlets. Wildcard characters are not interpreted. All characters are passed to the location's provider. The provider may not support all characters. For example, you cannot create a filename that contains an asterisk (*) character.\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-item\">New-Item (Microsoft.PowerShell.Management) - PowerShell</a></strong></div><div>The New-Item cmdlet creates a new item and sets its value. The types of items that can be created depend on the location of the item. For example, in the file system, New-Item creates files and folders. In the registry, New-Item creates registry keys and entries. New-Item can also set the value of the items that it creates. For example, when it creates a new file, New-Item can add initial content to the file. </div></blockquote>",
      "created_at": "2022-04-04T23:07:09Z",
      "updated_at": "2022-04-04T23:07:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93, \r\n\r\n* Yes, that inconsistency in the documentation should be fixed.\r\n\r\n* Separately, there's no justification for the current behavior - whether (half)-documented or not - and it should be fixed.\r\n\r\n",
      "created_at": "2022-04-04T23:11:57Z",
      "updated_at": "2022-04-04T23:11:57Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I think there is a use for the present behaviour, so making it more logical would be a breaking change \r\n```\r\ncd $env:temp\r\nmd path1,path2,path3\r\nnew-item -type File -Path pat* -name \"foo\"\r\nnew-item -type File -Path \"path[12345]\" -name \"bar\"\r\n```\r\n\r\nIn fact one might argue that \r\n```\r\nnew-item -type File -Path \"path[12345]\\baz\" -force\r\n```\r\nIs at fault because (e.g.) `get-item \"path[12345]\" `  will get path1,2,3 and not path[12345] \r\nBut then if one tries \r\n```\r\ncopy   4.ico -Destination  \"path[12345]\"\r\n```\r\nThat goes to  path[12345]  and not 1,2 and 3 ! \r\n\r\nThere's a good argument for making it consistent, to which the counter is going to be \"what relies on present behaviour and breaks if we do ?\".  \r\n\r\nIt is certainly not widely known that .Net wildcard (and therefore PowerShell ones) support `[]` in a similar way to regex or that to be sure that [ and ] work in file names they should be escaped (with ` or `` in a double quoted string). \r\n You can't use that for wildcards in cmd but you in bash. (IIRC)\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-04-05T08:33:12Z",
      "updated_at": "2022-04-05T08:34:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* That the parameter name is `-Path` and not `-LiteralPath` confuses the issue, but is a separate problem.\r\n\r\n  * While renaming the parameter would be a serious breaking change, a `-LiteralPath` parameter _alias_ could be introduced.\r\n  * `New-Item`'s `-Path` _mostly_ - and sensibly - acts like `-LiteralPath`, _except_ - confusingly - if `-Name` happens to be specified also.\r\n    * Taking a step back: arguably, there was never a need for a separate `-Name` parameter, given the ease of, say,\r\n        * `New-Item -Path (Join-Path '[test]' 'test.txt')`\r\n\r\n* In the context of _creating_ files, it is confusing and unexpected to treat file paths as _wildcard expressions_. This happens or has historically happened in several places, notably also with `New-Item`'s `-Target` parameter.\r\n\r\n  * While I can only guess, my hunch is that these behaviors were accidental fallouts from the implementation rather than design choices.\r\n  *  E.g., treating the target file in `'foo' > '[2].txt'` as a wildcard makes no sense.\r\n  * Here's the hopefully comprehensive list:\r\n    * #14534 \r\n    * #4726\r\n    * #6729\r\n    * #9225\r\n    * #8988\r\n    * #9202\r\n    * #12168\r\n  * Related problems stemming from _escaped_ representations:\r\n    * #9475\r\n    * #17068\r\n    * #3725\r\n    * #6733\r\n    * #7999\r\n\r\n---\r\n\r\nAs for the impact of fixing the problem:\r\n\r\nAn analogous breaking change - switching to interpretation as a _literal_ path - was considered acceptable in two related cases:\r\n\r\n* [green-lighted, but not yet implemented] Interpret `-Target` arguments as literal paths: https://github.com/PowerShell/PowerShell/issues/13136#issuecomment-659053840\r\n* [implemented in 7.1] #11701\r\n\r\nIn other words: there is precedent for making this - breaking, but arguably bucket-3 - change.\r\n\r\n\r\n",
      "created_at": "2022-04-05T14:12:03Z",
      "updated_at": "2022-04-05T14:12:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": ">   * `New-Item`'s `-Path` _mostly_ - and sensibly - acts like `-LiteralPath`, _except_ - confusingly - if `-Name` happens to be specified also.\r\n>     \r\n>     * Taking a step back: arguably, there was never a need for a separate `-Name` parameter, given the ease of, say,\r\n>       \r\n>       * `New-Item -Path (Join-Path '[test]' 'test.txt')`\r\n\r\nWhile I probably wouldn't say it's a pattern I would have used if I were writing it, it's not difficult to see the thought process. The actual file name is the only part that absolutely can't have wildcards. When you specify it separately, you now know that you can use wildcards to help resolve the container you'll be creating the item in.\r\n\r\nNot my favorite way to solve this issue for sure, but interactively it can be very useful.",
      "created_at": "2022-04-05T16:21:08Z",
      "updated_at": "2022-04-05T16:21:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> The actual file name is the only part that absolutely can't have wildcards.\r\n\r\nAs an aside, which points to the larger mess: The file name _can_ have wildcards, as long they're _resolved_ before trying to create the file.\r\nWhile that is a terrible idea, it is how `>` / `Out-File -Path` and `Set-Content -Path` currently behave, with both complaining if there is _no_ match, and only  the former complaining in the event of _multiple_ matches, whereas the latter writes to all(!) maching files.\r\n\r\n> interactively it can be very useful.\r\n\r\nInteractively, it makes more sense to me to use _tab-completion_ (which also works on interactively typed _wildcards_) for _up-front_ resolution, which also gives you the certainty of knowing ahead of time what specific folder will actually be targeted.\r\n\r\nIn the grand scheme of things, varying the fundamental behavior of a given parameter based on whether another parameter happens to be present as well strikes me as a recipe for everlasting pain and confusion.\r\n\r\nAnd, to me, the only way to avoid the pain and confusion is to stick to one principle: keep wildcard matching out of file-_creating_ cmdlets.",
      "created_at": "2022-04-05T16:48:30Z",
      "updated_at": "2022-04-05T16:53:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As an aside, which points to the larger mess: The file name _can_ have wildcards, as long they're _resolved_ before trying to create the file. While that is a terrible idea, it is how `>` / `Out-File -Path` and `Set-Content -Path` currently behave, with both complaining if there is _no_ match, and only the former complaining in the event of _multiple_ matches, whereas the latter writes to all(!) maching files.\r\n\r\nSorry I was referring to `New-Item` specifically.\r\n\r\n> Interactively, it makes more sense to me to use _tab-completion_ (which also works on interactively typed _wildcards_) for _up-front_ resolution, which also gives you the certainty of knowing ahead of time what specific folder will actually be targeted.\r\n\r\nI hear ya but sometimes it's nice. If it wasn't already there I'd have a hard time arguing in favor of it being added, no doubt.\r\n\r\n---\r\n\r\nFWIW I do sympathize with the state of how literal vs wildcard is handled in general atm. I have some thoughts to help in that regard but that'll be a weekend RFC for me at some point.",
      "created_at": "2022-04-05T17:08:11Z",
      "updated_at": "2022-04-05T17:08:11Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "The cmdlet working group meets today and I may get some views there. \r\nI think there are two things \r\n1.  Use of square brackets in file names. Elsewhere they are normal characters. Windows and unix file systems have their own set of special characters which aren't allowed but square brackets are legal. For the `[` and `]` to be be meta characters and need escaping is a surprise. \r\n2. Inconsistent behaviour. What would be **expect** `New-Item -Force -Path 'My D*\\test.txt'` to do ? error or resolve My Documents ? What if 'My D*' resolves to more than one item - error or create both ? If it doesn't resolve that's an error.  `Test[123]` should do the same thing. Different commands seem to do different things, and `[123]` isn't treated as a wild card everywhere .\r\n",
      "created_at": "2022-04-06T08:22:24Z",
      "updated_at": "2022-04-06T08:22:24Z"
    }
  ],
  "created_at": "2022-04-04T21:08:03Z",
  "labels": [
    "WG-Cmdlets-Management",
    "Needs-Triage"
  ],
  "number": 17106,
  "state": "open",
  "title": "When New-Item -Path is combined with -Name, the -Path argument is inappropriately treated as a wildcard expression",
  "updated_at": "2022-04-06T08:22:24Z"
}