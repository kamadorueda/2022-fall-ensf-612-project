{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6850",
  "author": "Jaykul",
  "body": "Windows PowerShell **correctly** inherits environment variables from the environment -- although it may **add** paths to these variables, it doesn't ignore the existing environment.\r\n\r\nPowerShell Core sets the PSModulePath -- completely ignoring **and overwriting** the existing environment, **including** the default values set in the Windows System Properties control panel...\r\n\r\nThis makes PowerShell Core's PSModulepath basically impossible to **manage**, since it can only be set reliably in a machine profile script --which depend on the _install location_ of the shell, which changes with each release!!\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nFrom Windows PowerShell run:\r\n```powershell\r\n$Env:PSModulePath\r\npwsh -noprofile -command { $Env:PSModulePath }\r\npwsh -noprofile -command { powershell -noprofile -command { $Env:PSModulePath } }\r\n```\r\n\r\nFrom `pwsh` run:\r\n```powershell\r\n$Env:PSModulePath\r\nPowerShell -noprofile -command { $Env:PSModulePath }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\npwsh should respect it's environment.\r\n\r\nActual behavior\r\n---------------\r\n\r\npwsh overwrites it's environment\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2019-11-16T01:29:06Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's explicit [code](https://github.com/PowerShell/PowerShell/blob/8aec1585195e6d4871538aaa2ad2b112cf5fbfee/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L725) clearing the variable",
      "created_at": "2018-05-10T20:22:36Z",
      "updated_at": "2018-05-10T20:22:36Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "yes, but that code is based on the incorrect (or rather, outdated) assumptions that \"The machine-wide and user-wide environment variables are only meaningful for full ps\"\r\n\r\nFirst of all, since PowerShell itself *does not set* those environment variables, there is **no basis** for this assumption. These are environment variables under the control of the user. You have no right to ignore them.\r\n\r\nSecond, as noted on [#2636](https://github.com/PowerShell/PowerShell/issues/2636#issuecomment-322342900), many of the core modules _do_ work. You've even released [a module](https://www.powershellgallery.com/packages/WindowsPSModulePath) predicated on the fact that this is, in fact, **not true** \ud83d\ude09 \r\n\r\nWe can't on the one hand claim that many (or most) modules will just work, and on the other hand say that the environment variable is _so toxic_ that we can't trust users (and enterprises) to deal with it properly. Especially since this breaks all _reasonable_ expectations regarding environment variables.",
      "created_at": "2018-05-10T21:59:10Z",
      "updated_at": "2018-05-10T22:00:16Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Maybe we should have another environment variable  `$ENV:PSModulePathCore`. On startup, if PowerShell Core sees this variable, it uses it otherwise it falls back to `$ENV:PSModulePath`. With two variables, then `powershell` can call `pwsh` and `pwsh` can call `powershell` and everything works. And eventually we can create a `PowerShellCommon` module directory for modules that work with both and that both variables include.",
      "created_at": "2018-05-10T22:18:28Z",
      "updated_at": "2018-05-10T22:18:28Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "A separate `$Env:PSCoreModulePath` environment variable kind-of makes sense.\r\n\r\nHowever, there are probably a lot of scripts and modules using `$Env:PSModulePath` ... I mean, at a minimum, people's profiles, and modules like [PSDepend](/RamblingCookieMonster/PSDepend/). Would you just read it and overwrite `$Env:PSModulePath`? Would that help?\r\n\r\nCould we rely on the modules themselves setting `CompatiblePSEditions`, and let each version of PowerShell ignore modules that aren't compatible?  (Actually, sure this wouldn't work, nevermind. Most of the modules that I'm concerned with are legacy modules which aren't going to be updated with `CompatiblePSEdition` any time soon, but which still work ... )\r\n\r\nBear in mind that in the **_near future_**, the more frustrating problem is _Windows PowerShell_. As new modules come out which take advantage of PowerShell Core functionality, Windows PowerShell won't be able to use them, and **it _does_** inherit the environment variable, already.",
      "created_at": "2018-05-11T14:16:00Z",
      "updated_at": "2018-05-11T14:20:59Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": ">  I mean, at a minimum, people's profiles\r\n\r\nThere are different profiles for desktop and core. You have to expend effort to get them to share common code and work properly. (e.g. no loading `winform` assemblies in your Core profile). So you put edition-specific tweaks in the appropriate profile.\r\n\r\n> However, there are probably a lot of scripts and modules using $Env:PSModulePath\r\n\r\nMost scripts and modules depend on the module path being set correctly for the PS edition they are using. With separate variables, by default they will only load modules from the module directories associated with their shell edition. For things that work directly with PSModulePath, they'll have to be updated to understand PowerShell Core.\r\n\r\n> Could we rely on the modules themselves setting CompatiblePSEditions, and let each version of PowerShell ignore modules that aren't compatible?\r\n\r\nWithout separate 'edition' directories, how do I have both \"core\" and \"desktop\" install paths for a given module/version?  (Nuget does this with `<package>/<version>/lib/<editionEquivalent>` but that would require changing both Core and Windows Powershell so it is unlikely to happen.)\r\n\r\n> Bear in mind that in the near future, the more frustrating problem is Windows PowerShell. As new modules come out which take advantage of PowerShell Core functionality, Windows PowerShell won't be able to use them, and it does inherit the environment variable, already.\r\n\r\nAll the more reason to have separate module paths. I should be able to do\r\n```\r\npowershell {\r\n    Get-ADComputer ...\r\n}\r\n```\r\nfrom `pwsh.exe` and it should just work. ",
      "created_at": "2018-05-11T22:27:04Z",
      "updated_at": "2018-05-11T22:27:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Separate env vars makes sense to me.  I think @BrucePay's proposal makes sense to respect user defined env vars and keep existing behavior for compatibility reasons, although I would call it `PSCoreModulePath`",
      "created_at": "2018-05-11T23:24:14Z",
      "updated_at": "2018-05-11T23:24:14Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Separate env vars doesn't make sense to me\r\n\r\nbut neither was the decision to overwrite the existing 1 on pwsh loading, although I can understand WHY it happened, it doesn't mean I agree that the decision was the right course of action either back then or now going forward.\r\n\r\nI'd personally opt for reverting the explicit code that changed this as IMO this wasn't an ideal change to make \r\n\r\nOtherwise you'd need to change pwsh and a number of other tools, like PowerShellGet to have more unneeded points of complexity where reverting this would in my opinion make much more sense going forward\r\n",
      "created_at": "2018-05-16T15:57:07Z",
      "updated_at": "2018-05-16T15:57:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agrees that this issue warrants an RFC.  @BrucePay has offered to author the RFC.",
      "created_at": "2018-05-16T22:35:21Z",
      "updated_at": "2018-05-16T22:35:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Taking in account #8635 could you please force the RFC?",
      "created_at": "2019-01-15T04:29:54Z",
      "updated_at": "2019-01-15T04:29:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe @BrucePay still plans to author this",
      "created_at": "2019-01-18T16:09:27Z",
      "updated_at": "2019-01-18T16:09:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @joeyaiello The existing RFC PR is here: https://github.com/PowerShell/PowerShell-RFC/pull/133 Perhaps we can discuss this in the next committee RFC meeting on Monday.",
      "created_at": "2019-01-18T19:02:20Z",
      "updated_at": "2019-01-18T19:02:20Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "Any update to where this is at?  Just re-installed pwsh on a machine and it clobbered my psmodulepath for *Windows* powershell which broke psreadline - immediately noticeable.",
      "created_at": "2019-08-06T15:26:35Z",
      "updated_at": "2019-08-06T15:26:35Z"
    },
    {
      "author": "marcinsmialek",
      "author_association": "NONE",
      "body": "While this isn't the solution to this problem, this may be a handy workaround, at least it's how I deal with this issue right now:\r\nFrom PowerShell Core:\r\n1. Install it with remoting / enable remoting\r\n2. Install-Module WindowsCompatibility\r\n3. Import-WinModule LegacyModule\r\n4. Run commands from the LegacyModule shim",
      "created_at": "2019-08-06T16:12:34Z",
      "updated_at": "2019-08-06T16:15:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#10300 is pulled to resolve the issue and others based on PowerShell Committee conclusion.",
      "created_at": "2019-08-06T17:29:19Z",
      "updated_at": "2019-08-06T17:29:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11057, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:36:03Z",
      "updated_at": "2019-11-21T22:36:03Z"
    },
    {
      "author": "MarcoPeraza",
      "author_association": "NONE",
      "body": "This is broken again, at least on insider builds and latest versions of pwsh.",
      "created_at": "2022-10-09T22:21:24Z",
      "updated_at": "2022-10-09T22:21:24Z"
    }
  ],
  "created_at": "2018-05-10T18:40:35Z",
  "labels": [
    "WG-Engine",
    "Resolution-Fixed",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 6850,
  "state": "closed",
  "title": "PowerShell Core doesn't inherit PSModulePath environment variable from the environment",
  "updated_at": "2022-10-09T22:21:24Z"
}