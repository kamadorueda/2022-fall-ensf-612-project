{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10650",
  "author": "mklement0",
  "body": "Note: \r\n\r\n* I don't know whether / what other libraries are affected, or whether Newtonsoft.Json is an unusual one.\r\n\r\n* The bug surfaces only if the input JSON text contains an _array_.\r\n\r\n* The bug is a regression from Windows PowerShell, where it doesn't surface.\r\n\r\n* The error is ultimately the same as in #10652: `Target type System.Collections.IEnumerator is not a value type or a non-abstract class. (Parameter 'targetType')`  - note how the type name is an _interface_, not a _class_.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Parse JSON text into a [JObject] instance.\r\n# Note: To surface the bug, the text must contain an ARRAY\r\n$obj = [Newtonsoft.Json.JsonConvert]::DeserializeObject('{ \"foo\": [ \"bar\" ] }')\r\n\r\n# Apply default output formatting, which fails due to the bug:\r\n{ $obj | Out-String } | Should -Not -Throw\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails, because the implicit output formatting threw an exception.\r\n\r\n```none\r\nTarget type System.Collections.IEnumerator is not a value type or a non-abstract class. \r\n(Parameter 'targetType')\r\n```\r\n\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems it is not PowerShell issue:\r\n```powershell\r\n $obj | Out-String\r\nformat-default: Target type System.Collections.IEnumerator is not a value type or a non-abstract class. (Parameter 'targetType')\r\n\r\nGet-Error\r\n\r\nException             :\r\n    Type       : System.ArgumentException\r\n    Message    : Target type System.Collections.IEnumerator is not a value type or a non-abstract class. (Para\r\nmeter 'targetType')\r\n    ParamName  : targetType\r\n    TargetSite :\r\n        Name          : Convert\r\n        DeclaringType : Newtonsoft.Json.Utilities.ConvertUtils, Newtonsoft.Json, Version=12.0.0.0, Culture=neu\r\ntral, PublicKeyToken=30ad4fe6b2a6aeed\r\n        MemberType    : Method\r\n        Module        : Newtonsoft.Json.dll\r\n    StackTrace :\r\n   at Newtonsoft.Json.Utilities.ConvertUtils.Convert(Object initialValue, CultureInfo culture, Type targetType)\r\n   at Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(JValue instance, ConvertBinder binder, Object& result)\r\n   at CallSite.Target(Closure , CallSite , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Management.Automation.LanguagePrimitives.GetEnumerator(Object obj) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\r\n\\PowerShell\\src\\System.Management.Automation\\engine\\LanguagePrimitives.cs:line 556\r\n   at System.Management.Automation.EnumerableOps.PropertyGetterWorker(CallSite`1 getMemberBinderSite, IEnumerator enume\r\nrator, ExecutionContext context, List`1 result) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Managemen\r\nt.Automation\\engine\\runtime\\Operations\\MiscOps.cs:line 3079\r\n   at System.Management.Automation.EnumerableOps.PropertyGetter(PSGetMemberBinder binder, IEnumerator enumerator) in C:\r\n\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\engine\\runtime\\Operations\\MiscOps.cs:lin\r\ne 3094\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at Microsoft.PowerShell.Commands.PSPropertyExpression.GetValue(PSObject target, Boolean eatExceptions) in C:\\Users\\1\r\n\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilities\\Mshexpression.c\r\ns:line 339\r\n   at Microsoft.PowerShell.Commands.PSPropertyExpression.GetValues(PSObject target, Boolean expand, Boolean eatExceptio\r\nns) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilitie\r\ns\\Mshexpression.cs:line 300\r\n   at Microsoft.PowerShell.Commands.PSPropertyExpression.GetValues(PSObject target) in C:\\Users\\1\\Documents\\GitHub\\iSaz\r\nonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilities\\Mshexpression.cs:line 276\r\n   at Microsoft.PowerShell.Commands.Internal.Format.PSObjectHelper.GetDisplayName(PSObject target, PSPropertyExpression\r\nFactory expressionFactory) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAn\r\ndOutput\\common\\Utilities\\MshObjectUtil.cs:line 100\r\n   at Microsoft.PowerShell.Commands.Internal.Format.PSObjectHelper.GetObjectName(Object x, PSPropertyExpressionFactory\r\nexpressionFactory) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\\r\ncommon\\Utilities\\MshObjectUtil.cs:line 173\r\n   at Microsoft.PowerShell.Commands.Internal.Format.PSObjectHelper.SmartToString(PSObject so, PSPropertyExpressionFacto\r\nry expressionFactory, Int32 enumerationLimit, StringFormatError formatErrorObject) in C:\\Users\\1\\Documents\\GitHub\\iSazo\r\nnov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilities\\MshObjectUtil.cs:line 279\r\n   at Microsoft.PowerShell.Commands.Internal.Format.PSObjectHelper.FormatField(FieldFormattingDirective directive, Obje\r\nct val, Int32 enumerationLimit, StringFormatError formatErrorObject, PSPropertyExpressionFactory expressionFactory) in\r\nC:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilities\\MshOb\r\njectUtil.cs:line 363\r\n   at Microsoft.PowerShell.Commands.Internal.Format.PSObjectHelper.GetExpressionDisplayValue(PSObject so, Int32 enumera\r\ntionLimit, PSPropertyExpression ex, FieldFormattingDirective directive, StringFormatError formatErrorObject, PSProperty\r\nExpressionFactory expressionFactory, PSPropertyExpressionResult& result) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerS\r\nhell\\src\\System.Management.Automation\\FormatAndOutput\\common\\Utilities\\MshObjectUtil.cs:line 491\r\n   at Microsoft.PowerShell.Commands.Internal.Format.ViewGenerator.GetExpressionDisplayValue(PSObject so, Int32 enumerat\r\nionLimit, PSPropertyExpression ex, FieldFormattingDirective directive, PSPropertyExpressionResult& expressionResult) in\r\n C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\FormatViewGene\r\nrator.cs:line 374\r\n   at Microsoft.PowerShell.Commands.Internal.Format.ViewGenerator.GetExpressionDisplayValue(PSObject so, Int32 enumerat\r\nionLimit, PSPropertyExpression ex, FieldFormattingDirective directive) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShe\r\nll\\src\\System.Management.Automation\\FormatAndOutput\\common\\FormatViewGenerator.cs:line 360\r\n   at Microsoft.PowerShell.Commands.Internal.Format.ListViewGenerator.GenerateListViewEntryFromProperties(PSObject so,\r\nInt32 enumerationLimit) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOu\r\ntput\\common\\FormatViewGenerator_List.cs:line 221\r\n   at Microsoft.PowerShell.Commands.Internal.Format.ListViewGenerator.GeneratePayload(PSObject so, Int32 enumerationLim\r\nit) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\FormatVi\r\newGenerator_List.cs:line 80\r\n   at Microsoft.PowerShell.Commands.Internal.Format.InnerFormatShapeCommand.WritePayloadObject(PSObject so) in C:\\Users\r\n\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\BaseFormattingCommand.c\r\ns:line 485\r\n   at Microsoft.PowerShell.Commands.Internal.Format.InnerFormatShapeCommand.ProcessObject(PSObject so) in C:\\Users\\1\\Do\r\ncuments\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\BaseFormattingCommand.cs:lin\r\ne 255\r\n   at Microsoft.PowerShell.Commands.Internal.Format.InnerFormatShapeCommand.ProcessRecord() in C:\\Users\\1\\Documents\\Git\r\nHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\BaseFormattingCommand.cs:line 118\r\n   at Microsoft.PowerShell.Commands.Internal.Format.FrontEndCommandBase.ProcessRecord() in C:\\Users\\1\\Documents\\GitHub\\\r\niSazonov\\PowerShell\\src\\System.Management.Automation\\FormatAndOutput\\common\\BaseCommand.cs:line 178\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord() in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\Syst\r\nem.Management.Automation\\engine\\cmdlet.cs:line 173\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord() in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\\r\nsrc\\System.Management.Automation\\engine\\CommandProcessor.cs:line 387\r\n    Source     : Newtonsoft.Json\r\n    HResult    : -2147024809\r\nCategoryInfo          : NotSpecified: (:) [format-default], ArgumentException\r\nFullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.FormatDefaultCommand\r\nInvocationInfo        :\r\n    MyCommand        : format-default\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 2\r\n    HistoryId        : 28\r\n    Line             :  $obj | Out-String\r\n    PositionMessage  : At line:1 char:2\r\n                       +  $obj | Out-String\r\n                       +  ~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n\r\n```",
      "created_at": "2021-01-15T15:10:10Z",
      "updated_at": "2021-01-15T15:10:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "~~What makes you conclude that, @iSazonov?~~\r\nThe problem surfaces via PowerShell's output formatting system (even just outputting `$obj` by itself triggers the problem). By contrast, `$obj.ToString()` works just fine.\r\n",
      "created_at": "2021-01-15T15:25:37Z",
      "updated_at": "2021-01-15T15:34:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I now see from your output that the call to `Newtonsoft.Json.Utilities.ConvertUtils.Convert(Object initialValue, CultureInfo culture, Type targetType)` is where the problem lies - the question is whether we're passing the wrong `targetType` argument - it sounds like `string` should be passed, not `System.Collections.IEnumerator`.",
      "created_at": "2021-01-15T15:37:10Z",
      "updated_at": "2021-01-15T15:39:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "But I haven't dug deeper, and perhaps resolving #10688 will also resolve this - and there we don't know yet whether the problem is in PowerShell or Json.Net.",
      "created_at": "2021-01-15T15:44:11Z",
      "updated_at": "2021-01-15T15:44:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The error message says that we send System.Collections.IEnumerator to Newtonsoft.Json.Utilities.ConvertUtils.Convert but $obj is JObject\r\nI guess Out-String gets $obj as is. If so the issue comes from Json.NET limitations.\r\n",
      "created_at": "2021-01-15T15:51:40Z",
      "updated_at": "2021-01-15T15:51:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No IEnumerator is in $obj:\r\n```powershell\r\n$obj.GetTYpe().ImplementedInterfaces\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    IJEnumerable`1\r\nTrue     False    IEnumerable`1\r\nTrue     False    IEnumerable\r\nTrue     False    IJsonLineInfo\r\nTrue     False    ICloneable\r\nTrue     False    IDynamicMetaObjectProvider\r\nTrue     False    IList`1\r\nTrue     False    ICollection`1\r\nTrue     False    ITypedList\r\nTrue     False    IBindingList\r\nTrue     False    IList\r\nTrue     False    ICollection\r\nTrue     False    INotifyCollectionChanged\r\nTrue     False    IDictionary`2\r\nTrue     False    ICollection`1\r\nTrue     False    IEnumerable`1\r\nTrue     False    INotifyPropertyChanged\r\nTrue     False    ICustomTypeDescriptor\r\nTrue     False    INotifyPropertyChanging\r\n\r\n```",
      "created_at": "2021-01-15T15:54:20Z",
      "updated_at": "2021-01-15T15:54:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If I understand the error message correctly, Json.NET is saying that `System.Collections.IEnumerator` isn't acceptable as a `type` argument, so the question is: Why we are sending that type, given that we shouldn't?\r\n\r\nSo my _guess_ is that this is connected to #10688 in the sense that PowerShell may be delegating determining the target type to the Json.NET `IDynamicMetaDataProvider` implementation, which then reports the wrong type.",
      "created_at": "2021-01-15T15:56:45Z",
      "updated_at": "2021-01-15T15:56:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PropertyGetterWorker method enumerates recursively and it is called for a value making conversion to enumerator with  JValue.JValueDynamicProxy.TryConvert - the last method throw. I think only debug shows that happens in PropertyGetterWorker.",
      "created_at": "2021-01-15T18:17:48Z",
      "updated_at": "2021-01-15T18:17:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I found https://stackoverflow.com/questions/13968004/how-do-i-use-json-net-to-parse-json-in-powershell and this does not work neither PowerShell Core nor Windows PowerShell. I guess it is specific for  latest Newtonsoft lib.\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/13968004/how-do-i-use-json-net-to-parse-json-in-powershell\">How do I use Json.NET to parse json in PowerShell?</a></strong></div><div>I want to parse JSON in PowerShell but I can't use the new v3 functions that are available in PowerShell. My first thought was to load the JSON.Net assembly and use that to parse the JSON string bu...</div></blockquote>",
      "created_at": "2021-01-16T13:50:01Z",
      "updated_at": "2021-01-16T13:50:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, the linked post is unrelated to the _output-formatting_ problem we're discussing here while the _parsing_ part (`$obj = [Newtonsoft.Json.JsonConvert]::DeserializeObject('{ \"foo\": [ \"bar\" ] }')` still works fine (just call `$obj.ToString()` to verify).\r\n\r\n",
      "created_at": "2021-01-16T14:02:10Z",
      "updated_at": "2021-01-16T14:02:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My bad: that was only half the story: while parsing works in principle, there are display problems with _property access_:\r\n\r\nWhile `$obj.foo[0]` _seemingly_ returns nothing, you need to use the `.Value` property to get the actual value: `$obj.foo[0].Value` returns `bar`.\r\n\r\n`$obj.foo[0]` actually does return a `[Newtonsoft.Json.Linq.JValue]` instance, but by itself it again produces no visible output via the formatting system (while `.ToString()` again works).\r\n\r\nThus, ultimately the root cause _may_ be the same, related to how most Json.NET types are _enumerables_.\r\n",
      "created_at": "2021-01-16T14:14:29Z",
      "updated_at": "2021-01-16T15:53:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since no regression is from Windows PowerShell I think it makes no sense to invest to NewtonSoft Json.NET. If there are other similar scenarios, then we can consider improving this PropertyGetterWorker method.\r\n",
      "created_at": "2021-01-19T08:28:14Z",
      "updated_at": "2021-01-19T08:28:14Z"
    }
  ],
  "created_at": "2019-09-30T14:40:29Z",
  "number": 10650,
  "state": "open",
  "title": "Working directly with certain .NET types, such as Newtonsoft.Json's, is broken: output formatting",
  "updated_at": "2021-04-11T18:58:26Z"
}