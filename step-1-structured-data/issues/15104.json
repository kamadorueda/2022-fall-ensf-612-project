{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15104",
  "author": "LuanVSO",
  "body": "<!--\r\n\r\nThe maintainer may close your issue without further explanation or engagement if:\r\n- You delete this entire template and go your own path;\r\n- You file an issue that has many duplicates;\r\n- You file an issue completely blank in the body.\r\n\r\n-->\r\n\r\n## Description of the new feature/enhancement\r\n<!--\r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\nit would be the same as zsh's precmd_functions, which is a list of functions that are called before every prompt,\r\nthis would allow module makers to add functions to the prompt without overwriting it.\r\n## Proof of concept\r\n\r\nthis allows any script to register a function to run before every command by simply doing \r\n`$prePrompt_functions += \"<function_name>\"` \r\n\r\n``` powershell\r\n$prePrompt_functions = @()\r\n$prevprompt = $Function:prompt\r\nfunction prompt {\r\n\t$prePrompt_functions | Invoke-Expression\r\n\treturn $prevprompt.invoke()\r\n}\r\n```\r\n\r\n<!--\r\nA clear and concise description of what you want to happen.\r\n-->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How order the functions?",
      "created_at": "2021-03-19T03:13:30Z",
      "updated_at": "2021-03-19T03:13:30Z"
    },
    {
      "author": "LuanVSO",
      "author_association": "NONE",
      "body": "Since it is an array, one could check if there are other entries and reorther them if they really really need to",
      "created_at": "2021-03-19T05:11:56Z",
      "updated_at": "2021-03-19T05:12:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we described common scenarios we could make the functionality more smart and convenient.\r\n\r\nFor example, if a module exports a function with a predefined name, then Import-Module could automatically hook it.\r\n\r\n/cc @mklement0",
      "created_at": "2021-03-19T14:19:50Z",
      "updated_at": "2021-03-19T14:20:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Pragmatically speaking, it's quite easy - though somewhat hackish - to inject additional commands into an existing `prompt` function:\r\n\r\n```powershell\r\n$function:prompt = \"write-host new; $function:prompt\"\r\n```\r\n\r\nNote that _removing_ such a command later would be trickier, however (best done via an identifying comment accompanying the injected command)\r\n\r\n---\r\n\r\nIf we want an officially supported mechanism, my recommendation would be to define a new execution-context event, `$ExecutionContext.InvokeCommand.PreExecutionAction`,\r\nas previously pondered at https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751221242, modeled on the existing [`$ExecutionContext.InvokeCommand.PreCommandLookupAction`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.commandinvocationintrinsics.precommandlookupaction) hook - though note that the latter doesn't support attaching _multiple_ event handlers and isn't PowerShell-code-friendly.\r\n\r\n\r\n",
      "created_at": "2021-03-19T17:40:15Z",
      "updated_at": "2021-03-19T17:40:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is seem better to continue the discussion in https://github.com/PowerShell/PowerShell/issues/14484",
      "created_at": "2021-03-19T17:49:16Z",
      "updated_at": "2021-03-19T17:49:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, https://github.com/PowerShell/PowerShell/issues/14484 is a bit of a dead end, however, because it asks for very specific functionality that I don't think will ever be implemented: the ability to _reprint the already-printed prompt string_, based on an event hook to be invoked after _submission_ of a command line, but before its _execution_.\r\n\r\nOnly the latter part - the event hook - is what we're discussing here, and only that is worth considering as an enhancement.\r\nEither way, this issue belongs in the PowerShell repo, not here (the `prompt` function feature is implemented there).\r\n\r\n",
      "created_at": "2021-03-19T18:17:07Z",
      "updated_at": "2021-03-19T18:17:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "IIRC @jaykul's PowerLine module has some functionality like this?",
      "created_at": "2021-03-26T00:10:35Z",
      "updated_at": "2021-03-26T00:10:35Z"
    },
    {
      "author": "LuanVSO",
      "author_association": "NONE",
      "body": "yeah his implementation looks cleaner, but having a way to do that by default on PowerShell nice for the \"ecosystem\"",
      "created_at": "2021-03-26T00:47:03Z",
      "updated_at": "2021-03-26T00:47:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@luanVSO The ask is to allow custom script to run before `prompt` runs, right? How will this technique be used? Can you share some real world examples?",
      "created_at": "2021-06-26T00:12:20Z",
      "updated_at": "2021-06-26T00:12:53Z"
    },
    {
      "author": "LuanVSO",
      "author_association": "NONE",
      "body": "@daxian-dbw  was thinking of this being a way for module authors to add features to the user prompt, with for example support for (osc7 [MS/terminal#3158](https://github.com/microsoft/terminal/issues/3158))\r\n\r\nthis feature idea is from Zsh's [$precmd_functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-precmd_005ffunctions)",
      "created_at": "2021-06-26T00:55:56Z",
      "updated_at": "2021-06-26T01:08:48Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "PowerLine was just a proof of concept, see [Why PowerLine](https://github.com/Jaykul/PowerLine#why-powerline). \r\n\r\nThe goal was always to convince the PowerShell team to change the **default** `prompt` function to\r\n\r\n```PowerShell\r\nfunction prompt {\r\n    -join $prompt.Invoke()\r\n}\r\n```\r\n\r\n.. and put the current prompt into that new global as three statements:\r\n```PowerShell\r\n[System.Collections.Generic.List[ScriptBlock]]$Prompt = @(\r\n    { \"PS \" }\r\n    { $executionContext.SessionState.Path.CurrentLocation }\r\n    { '>' * ($nestedPromptLevel + 1) }\r\n)\r\n```",
      "created_at": "2021-08-28T18:03:39Z",
      "updated_at": "2021-08-28T18:03:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as \"Waiting on Author\" and has not had any activity for **7 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-08T04:00:57Z",
      "updated_at": "2022-01-08T04:00:57Z"
    },
    {
      "author": "LuanVSO",
      "author_association": "NONE",
      "body": "> This issue has been marked as \"Waiting on Author\" and has not had any activity for **7 day**. It has been closed for housekeeping purposes.\r\n\r\nWell I did reply but it seems like  it Didn't remove the tag",
      "created_at": "2022-01-09T23:33:30Z",
      "updated_at": "2022-01-10T21:12:34Z"
    }
  ],
  "created_at": "2021-03-18T18:20:35Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 15104,
  "state": "open",
  "title": "add a prePrompt_functions variable",
  "updated_at": "2022-01-10T21:12:34Z"
}