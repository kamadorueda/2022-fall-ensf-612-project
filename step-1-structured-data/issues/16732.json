{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16732",
  "author": "eabase",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThere are different behavior of console size when running in `pwsh` from desktop vs. using it with `Windows Terminal`.\r\n\r\nTry running the following under each environment:\r\n```powershell\r\n\"$([console]::BufferWidth) $([console]::BufferHeight)\"\r\n\r\n# From pwsh.exe (standalone) where I have used 9001 as buffer height.\r\n120 9001\r\n\r\n# From Windows Terminal (default, whatever that is.)\r\n160 50\r\n\r\n```\n\n### Expected behavior\n\n```console\n\"$([console]::BufferWidth) $([console]::BufferHeight)\"\r\n160 50\n```\n\n\n### Actual behavior\n\n```console\n\"$([console]::BufferWidth) $([console]::BufferHeight)\"\r\n120 9001\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-01-14T00:00:41Z",
  "comments": [
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "It seem that perhaps they are both correct, but then I must ask why (and how) WT is setting:  \r\n` $([console]::BufferHeight) = $([console]::WindowHeight)`?",
      "created_at": "2022-01-11T18:21:49Z",
      "updated_at": "2022-01-11T18:21:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah I don't know that pwsh is doing anything wrong here. There's a deliberate difference between BufferHeight and WindowHeight -- the former is the size of the scrollback buffer, the latter is the actual rendered window size.",
      "created_at": "2022-01-11T18:57:43Z",
      "updated_at": "2022-01-11T18:57:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "On the plus side, if you zoom with the scroll wheel WT knows the screen size has changed. The old-style console host doesn't (until you resize the window forcing a recalculation).  I spent a happy few minutes trying to work out why text was wrapping too soon if I ran powerShell.exe but not if I loaded pwsh or powerShell in WT. ",
      "created_at": "2022-01-12T13:51:36Z",
      "updated_at": "2022-01-12T13:51:36Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "Not sure how I can help here. Is this a WT or pwsh issue?\r\n\r\n*Windows Terminal* is using different settings that I do not have access to (or do not know where they are). In pwsh at least I know where to find most settings in the registry, but for WT, there are literally hundreds of different paths to things related. ",
      "created_at": "2022-01-12T20:38:15Z",
      "updated_at": "2022-01-12T20:38:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Not sure how I can help here. Is this a WT or pwsh issue?\r\n\r\nYou could call it a WT issue but it's more a conpty thing and it's by design. [microsoft/terminal#8312 (comment)](https://github.com/microsoft/terminal/issues/8312#issuecomment-731888271) goes into a bit more detail. Here's the relevant quote:\r\n\r\n> We made a critical mistake approximately forty years ago (\ud83d\ude01) and made the entire buffer (120x9001 or whatever the user requests) available to a console application. There's the viewport (120x30) and the buffer (120x9001), both of which the application can control. It can draw outside of its bounds, and it can know exactly where _in the buffer_ it's printing. Pretty cool!\r\n> \r\n> Applications that have some amount of buffer awareness will eventually reach a point where they're on line 9001 and _oops_ the line under 9001 is **also** line 9001 (because the old line 0 got destroyed and shifted off the top of the buffer.) This bit is the crux of your issue \ud83d\ude04. We call it \"circling.\"\r\n> \r\n> Terminals have never supported that viewport/buffer split. They've only ever offered viewport control, and the buffer was an artifact owned by the terminal itself (because, like, it might have been a line printer or a serial device or a modem . . . instead of a terminal emulator application). That puts the terminal in charge of scrollback, and scrollback is stored in a place where the client application can't see (or change) it.\r\n> \r\n> To account for this difference, ConPTY mode restricts the buffer size to _match the viewport size_. This restriction applies _regardless_ of `ENABLE_VIRTUAL_TERMINAL_PROCESSING` (which is a feature of conhost, even without Terminal involved.)\r\n\r\n",
      "created_at": "2022-01-12T22:56:41Z",
      "updated_at": "2022-01-12T22:56:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-14T00:00:40Z",
      "updated_at": "2022-01-14T00:00:40Z"
    }
  ],
  "created_at": "2022-01-11T18:10:50Z",
  "number": 16732,
  "state": "closed",
  "title": "[console]::BufferHeight now gives wrong info in pwsh standalone, but correct in WT",
  "updated_at": "2022-01-14T00:00:41Z"
}