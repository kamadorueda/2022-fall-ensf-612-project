{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15977",
  "author": "ThierryRassat",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nHello Powershell Teams,\r\n\r\nI have a bug when I use System.Collections.ArrayList in a function. I must use out-null when I add a element to list\r\n\r\nI write this function\r\n\r\nfunction simplefunction\r\n{\r\n    $collection = New-Object System.Collections.ArrayList\r\n    $collection.add(\"Toto\")\r\n    return $collection\r\n}\r\n-> the result about simplefunction is\r\n0\r\nToto\r\n\r\nI must use out-null \r\n\r\nfunction simplefunction\r\n{\r\n    $collection = New-Object System.Collections.ArrayList\r\n    $collection.add(\"Toto\")|out-null\r\n    return $collection\r\n}\r\n\r\n-> the result is now OK when I use this function\r\nToto\r\n\r\nKind Regards\r\nThierry\r\n\r\n\n\n### Expected behavior\n\n```console\nToto\n```\n\n\n### Actual behavior\n\n```console\n0\r\nToto\n```\n\n\n### Error details\n\n```console\nI must used out-null after add function in System.Collections.ArrayList object\n```\n\n\n### Environment data\n\n```powershell\nMicrosoft Powershell 7.1.3\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-08-23T21:06:02Z",
  "comments": [
    {
      "author": "Jammrock",
      "author_association": "NONE",
      "body": "The output is part of the .NET behavior. PowerShell just echoes the return from the Add method.\r\n\r\nhttps://github.com/microsoft/referencesource/blob/master/mscorlib/system/collections/arraylist.cs\r\n\r\n```c#\r\n        // Adds the given object to the end of this list. The size of the list is\r\n        // increased by one. If required, the capacity of the list is doubled\r\n        // before adding the new element.\r\n        //\r\n        public virtual int Add(Object value) {\r\n            Contract.Ensures(Contract.Result<int>() >= 0);\r\n            if (_size == _items.Length) EnsureCapacity(_size + 1);\r\n            _items[_size] = value;\r\n            _version++;\r\n            return _size++;   // <----- This is where the element number in PowerShell comes from.\r\n        }\r\n```\r\n\r\nThe more efficient method of blocking the output is to use \"$null =\". It doesn't impact the Add(), prevents console output, and is faster than pipelining to Out-Null.\r\n\r\n```PowerShell\r\nfunction simplefunction\r\n{\r\n   $collection = New-Object System.Collections.ArrayList\r\n   $null = $collection.add(\"Toto\")\r\n   return $collection\r\n}\r\n```\n\n<blockquote><img src=\"https://opengraph.githubassets.com/4d1c582822437fbc690397819a5efffa01798296f55ebd346da6f613a0596a8b/microsoft/referencesource\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/microsoft/referencesource\">referencesource/arraylist.cs at master \u00b7 microsoft/referencesource</a></strong></div><div>Source from the Microsoft .NET Reference Source that represent a subset of the .NET Framework - referencesource/arraylist.cs at master \u00b7 microsoft/referencesource</div></blockquote>",
      "created_at": "2021-08-23T20:12:57Z",
      "updated_at": "2021-08-23T20:12:59Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You can also use a generic list which has a void Add method\r\n\r\n```powershell\r\n$list = [System.Collections.Generic.List[Object]]::new()\r\n$list.Add(\"foo\")\r\n```\r\n\r\nThe other benefit of a generic list is that you can explicitly set the type of the entries. The example above is set to allow `Object` which is essentially anything but say you wanted a list of strings then do `[System.Collections.Generic.List[String]]::new()`.",
      "created_at": "2021-08-23T20:53:40Z",
      "updated_at": "2021-08-23T20:53:40Z"
    },
    {
      "author": "ThierryRassat",
      "author_association": "NONE",
      "body": "Thank you for yours messages. I do that",
      "created_at": "2021-08-23T21:05:50Z",
      "updated_at": "2021-08-23T21:05:50Z"
    }
  ],
  "created_at": "2021-08-23T18:03:27Z",
  "number": 15977,
  "state": "closed",
  "title": "Function and System.Collections.ArrayList must Out-null",
  "updated_at": "2021-08-24T03:48:04Z"
}