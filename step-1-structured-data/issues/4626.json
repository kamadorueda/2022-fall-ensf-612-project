{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4626",
  "author": "mklement0",
  "body": "<sup>Related: #4715 and #4135.</sup>\r\n\r\nIt is currently **hard to discover if a given cmdlet/function has a `ValueFromRemainingArguments` parameter**, so I suggest we add a _new representation_ to syntax diagrams to signal that a given cmdlet / advanced supports does so.\r\n\r\nWe'll have to decide what an adequate representation is.\r\n\r\nFor instance, `Write-Host -?` shows the following for its `ValueFromRemainingArguments\r\n` `-Object` parameter:\r\n\r\n```powershell\r\n[[-Object] <Object>]\r\n```\r\nwhich does not reflect its \"specialness\" - you can't tell that this parameter enables specifying multiple, independent arguments that are all bound to `-Object`, enabling convenient free-form invocations as `Write-Host a b c` in lieu of (the also supported) `Write-Host -Object a, b, c`\r\n\r\nPerhaps something along the lines of (_updated based on the discussion below_):\r\n\r\n```powershell\r\n[-Object <Object> | <Object> ... ]\r\n```\r\n\r\nWith an array-typed parameter, such as `Join-Path`'s `-AdditionalChildPath`:\r\n\r\n```powershell\r\n[-AdditionalChildPath <string[]> | <string> ...]\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not repo this on Windows PowerShell v5.1.16257.1 (and 10240 too)",
      "created_at": "2017-08-21T06:28:19Z",
      "updated_at": "2017-08-21T06:28:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nSorry - I wasn't clear in my original title and post - please see if the update helps.\r\n\r\n(I was also originally distracted by `Join-Path -?` not showing the new `-AddtionalChildPath` parameter at all - see https://github.com/PowerShell/PowerShell-Docs/issues/1612)",
      "created_at": "2017-08-21T15:00:44Z",
      "updated_at": "2017-08-21T15:00:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`[[-Object] <Object>[, <Object> ...] ]`",
      "created_at": "2017-08-21T15:12:02Z",
      "updated_at": "2017-08-21T15:12:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Well, the `,` is tricky, because we want to convey that you do _not_ need it when taking advantage of the feature. ",
      "created_at": "2017-08-21T15:33:26Z",
      "updated_at": "2017-08-21T15:33:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "` [[-Object] <Object>[[,] <Object> ...] ] `",
      "created_at": "2017-08-21T16:41:56Z",
      "updated_at": "2017-08-21T16:41:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Keep in mind that the parameter type need not be `<Object>`.\r\n\r\nAmong the core cmdlets that have `ValueFromRemainingArguments\r\n` parameters, you'll also see `<string[]>`, for instance (`Get-Command -Syntax Join-Path`, parameter `-AdditionalChildPath`).\r\n\r\nConceptually, a `ValueFromRemainingArguments` parameter is inherently a collection, given that it can bind multiple arguments.\r\n\r\nThe tricky part is that if you don't use the parameter name explicitly, you actually _must_ use individual arguments as opposed to an array to get the equivalent functionality\r\n(at least with advanced functions (as opposed to compiled cmdlets), which brings us back to our perennial favorite, #2035).\r\n\r\nIn the example above, you'd really need two distinct representations:\r\n\r\n`[-AdditionalChildPath <string[]>]`\r\n\r\nor, without parameter name:\r\n\r\n`[<string> ...]`\r\n\r\nSo perhaps the following?\r\n\r\n```powershell\r\n[-AdditionalChildPath <string[]> | <string> ...]\r\n```\r\n",
      "created_at": "2017-08-21T17:36:23Z",
      "updated_at": "2017-08-21T17:40:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If #2035 will be fixed  comma should be here too?  ` [<string>, <string> ...]`\r\nAre there a difference between `-AdditionalChildPath <string[]>` and `-AdditionalChildPath <string>, <string>`?",
      "created_at": "2017-08-21T17:51:52Z",
      "updated_at": "2017-08-21T17:54:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "[As I've argued here](https://github.com/PowerShell/PowerShell/issues/2035#issuecomment-323641345), I strongly feel that it should be fixed in the way that advanced functions already work (read: parameter binding must be fixed for _cmdlets_ - the _opposite_ of what #2035 proposes), which means that in no-parameter-name  invocations you _must not_ use `,` -  because use of `,` changes the semantics to sticking an _array_ into the _first element_ of the parameter variable.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-08-21T18:06:44Z",
      "updated_at": "2017-08-21T18:06:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify! So we are blocked until #2035 will be resolved.",
      "created_at": "2017-08-21T18:19:23Z",
      "updated_at": "2017-08-21T18:19:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Not necessarily, because the `<string> ...` (comma-less) syntax will work either way, irrespective of how #2035 is resolved (incidentally, I just tried to [clarify my arguments](https://github.com/PowerShell/PowerShell/issues/2035#issuecomment-323816221) there).\r\n\r\nThe `<string> ...` (comma-less) syntax is not only the more convenient syntax, it is also the only one that works when you call a PS script from the outside.\r\n\r\nIn short: Either way, the comma-less syntax is the one worth highlighting in the syntax diagram.",
      "created_at": "2017-08-21T18:26:56Z",
      "updated_at": "2017-08-21T18:26:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: To put it differently: You don't need `ValueFromRemainingArguments` at all for the `<string>, <string>, ...` syntax - just a regular positional parameter that accepts an array.\r\n\r\nIt is the `<string> <string> ...` syntax that is unique to `ValueFromRemainingArguments`. ",
      "created_at": "2017-08-21T18:28:58Z",
      "updated_at": "2017-08-21T18:29:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">the comma-less syntax is the one worth highlighting in the syntax diagram.\r\n\r\nThanks! Clear. It is good `[-AdditionalChildPath <string[]> | <string> ...]`",
      "created_at": "2017-08-22T08:22:09Z",
      "updated_at": "2017-08-22T08:22:09Z"
    }
  ],
  "created_at": "2017-08-20T21:18:39Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-HelpSystem"
  ],
  "number": 4626,
  "state": "open",
  "title": "ValueFromRemainingArguments parameters are not reflected as such in syntax diagrams",
  "updated_at": "2017-08-31T07:42:37Z"
}