{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13596",
  "author": "gwsales",
  "body": "## Summary of the new feature/enhancement\r\nEnable logging of command issued at the terminal like legacy PowerShell:800 event codes that log both CommandLine and Payload. \r\n\r\nCurrent module logging for 4103 event codes for both PowerShell 5 and 7 are missing key data points needed for analysis. \r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nCurrently PowerShell v5 still logs both 800 and 4103 event codes when Module Logging is turned on, in v7 this no longer happens so we'll need better logging with existing 4103 event codes. \r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nAdd param1 from \"Windows PowerShell\" event_id 800 into the operational 4103 event logs. ",
  "closed_at": null,
  "comments": [
    {
      "author": "gwsales",
      "author_association": "NONE",
      "body": "Example of why this is needed:\r\nhttps://twitter.com/GrantWSales/status/1291743466523889666\n\n<blockquote><img src=\"https://pbs.twimg.com/media/Ee0xw6gXYAA1Sdk.png:large\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/GrantWSales/status/1291743466523889666\">Grant Sales on Twitter</a></strong></div><div>\u201c@dms1899 For this specific sample, the best option for host detection is PS:800. Look for param3 starting with 'CommandInvocation(Get-Item)' where Get-Item is not in the param1. The 4104's will help investigations, but really hard to use them for detection. cc: @SBousseaden\u201d</div></blockquote>",
      "created_at": "2020-09-08T16:41:41Z",
      "updated_at": "2020-09-08T16:41:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Event id 800 is pipeline execution logging.  That code is still present, need to figure out why it's not logging or how to enable.",
      "created_at": "2020-09-09T05:02:18Z",
      "updated_at": "2020-09-09T05:02:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see 4103 (0x1007) in PowerShell.Core.Instrumentation.man and EventResource.cs but I don't see 800 (0x320) there.",
      "created_at": "2020-09-09T05:04:26Z",
      "updated_at": "2020-09-09T05:04:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It looks like pipeline execution event id, `800`, was replaced with `4103` at some point.  It logs the same information but the details label is slightly different (was 'Context Information:', now is 'Context:').  I assume this was done in the PowerShell 5.x timeframe, since both PowerShell Core and Windows PowerShell 5.1 `4103` event logs have the same format.\r\n\r\nModule logging (event Id 4103) does work with PowerShell Core (v6,7), but it does not currently respect 'Module Logging' group policy setting for Windows PowerShell.  PowerShell Core group policy has its own template and reg key:\r\n`Software\\Policies\\Microsoft\\PowerShellCore\\ModuleLogging`.\r\n\r\nBut you can turn on module logging manually:\r\n\r\n```powershell\r\nGet-Module | foreach { $_.LogPipelineExecutionDetails }\r\nGet-Module | foreach { $_.LogPipelineExecutionDetails = $true }\r\nGet-Module | foreach { $_.LogPipelineExecutionDetails }\r\n```\r\n\r\nOr, I believe you can set it in the PowerShell Core configuration file.",
      "created_at": "2020-09-10T22:12:58Z",
      "updated_at": "2020-09-10T22:12:58Z"
    },
    {
      "author": "gwsales",
      "author_association": "NONE",
      "body": "I agree with @PaulHigin that it looks like 4103 was supposed to replace 800, however PowerShell v5 sill logs both with module logging enabled. The big difference between 800 and 4103 is the logging of scriptblock / commandline that went along with the Payload. \r\n\r\nIf you'd like a log sample please look at this repo: https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES\r\nhttps://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Other/emotet/exec_emotet_ps_800_get-item.evtx\r\n\r\nIf time is spent trying to fix these issues, the most useful thing would be to add the comamndline / scriptblock value from 800 to the \"User Data\" or a new field in the 4103 events. This would likely solve the issue for the long term and future releases of PowerShell.\n\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/20989958?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES\">sbousseaden/EVTX-ATTACK-SAMPLES</a></strong></div><div>Windows Events Attack Samples. Contribute to sbousseaden/EVTX-ATTACK-SAMPLES development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/20989958?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES\">sbousseaden/EVTX-ATTACK-SAMPLES</a></strong></div><div>Windows Events Attack Samples. Contribute to sbousseaden/EVTX-ATTACK-SAMPLES development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-09-10T22:21:43Z",
      "updated_at": "2020-09-10T22:21:46Z"
    },
    {
      "author": "gwsales",
      "author_association": "NONE",
      "body": "Created a few samples. \r\n\r\nLegacy 400 (No corresponding 4XXX event code that logs startup with context info):\r\n```xml\r\n<root>\r\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\r\n    <System>\r\n      <Provider Name=\"PowerShell\" />\r\n      <EventID Qualifiers=\"0\">400</EventID>\r\n      <Version>0</Version>\r\n      <Level>4</Level>\r\n      <Task>4</Task>\r\n      <Opcode>0</Opcode>\r\n      <Keywords>0x80000000000000</Keywords>\r\n      <TimeCreated SystemTime=\"2020-09-10T16:49:20.5920770Z\" />\r\n      <EventRecordID>19443</EventRecordID>\r\n      <Correlation />\r\n      <Execution ProcessID=\"0\" ThreadID=\"0\" />\r\n      <Channel>Windows PowerShell</Channel>\r\n      <Computer>DESKTOP-RIPCLIP</Computer>\r\n      <Security />\r\n    </System>\r\n    <EventData>\r\n      <Data>Available</Data>\r\n      <Data>None</Data>\r\n      <Data>\tNewEngineState=Available\r\n\tPreviousEngineState=None\r\n\r\n\tSequenceNumber=13\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.1\r\n\tHostId=44fd2659-dac3-4be9-a08d-08279a98f78b\r\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n\tEngineVersion=5.1.19041.1\r\n\tRunspaceId=9e719284-e101-4523-88f7-e36ca5e9d152\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=</Data>\r\n    </EventData>\r\n  </Event>\r\n</root>\r\n```\r\nLegacy 800 (Similar to 4103 but contains command line / script block. Matching Payload and ContextInfo):\r\n```xml\r\n<root>\r\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\r\n    <System>\r\n      <Provider Name=\"PowerShell\" />\r\n      <EventID Qualifiers=\"0\">800</EventID>\r\n      <Version>0</Version>\r\n      <Level>4</Level>\r\n      <Task>8</Task>\r\n      <Opcode>0</Opcode>\r\n      <Keywords>0x80000000000000</Keywords>\r\n      <TimeCreated SystemTime=\"2020-09-10T22:29:34.5326155Z\" />\r\n      <EventRecordID>22812</EventRecordID>\r\n      <Correlation />\r\n      <Execution ProcessID=\"0\" ThreadID=\"0\" />\r\n      <Channel>Windows PowerShell</Channel>\r\n      <Computer>DESKTOP-RIPCLIP</Computer>\r\n      <Security />\r\n    </System>\r\n    <EventData>\r\n      <Data>i`cm {e`ch`o (\"Obfu\"+\"s\"+\"`c\"+\"ted\")}</Data>\r\n      <Data>\tDetailSequence=1\r\n\tDetailTotal=1\r\n\r\n\tSequenceNumber=6749\r\n\r\n\tUserId=DESKTOP-RIPCLIP\\Clippy\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.1\r\n\tHostId=7d5cb8a8-0a62-4f52-ba67-09f94d24e1b7\r\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n\tEngineVersion=5.1.19041.1\r\n\tRunspaceId=9e719284-e101-4523-88f7-e36ca5e9d152\r\n\tPipelineId=278\r\n\tScriptName=\r\n\tCommandLine=i`cm {e`ch`o (\"Obfu\"+\"s\"+\"`c\"+\"ted\")}</Data>\r\n      <Data>CommandInvocation(Invoke-Command): \"Invoke-Command\"\r\nParameterBinding(Invoke-Command): name=\"ScriptBlock\"; value=\"e`ch`o (\"Obfu\"+\"s\"+\"`c\"+\"ted\")\"\r\n</Data>\r\n    </EventData>\r\n  </Event>\r\n</root>\r\n```\r\nCurrent 4103 (Similar to 800, matching Payload and ContextInfo with 800's param2 and param3):\r\n```xml\r\n<root>\r\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\r\n    <System>\r\n      <Provider Name=\"Microsoft-Windows-PowerShell\" Guid=\"{a0c1853b-5c40-4b15-8766-3cf1c58f985a}\" />\r\n      <EventID>4103</EventID>\r\n      <Version>1</Version>\r\n      <Level>4</Level>\r\n      <Task>106</Task>\r\n      <Opcode>20</Opcode>\r\n      <Keywords>0x0</Keywords>\r\n      <TimeCreated SystemTime=\"2020-09-10T22:29:34.5334620Z\" />\r\n      <EventRecordID>21964</EventRecordID>\r\n      <Correlation ActivityID=\"{1fe2bf64-877d-0003-e93d-e31f7d87d601}\" />\r\n      <Execution ProcessID=\"7996\" ThreadID=\"5596\" />\r\n      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>\r\n      <Computer>DESKTOP-RIPCLIP</Computer>\r\n      <Security UserID=\"S-1-5-21-2895499743-3664716236-3399808827-1001\" />\r\n    </System>\r\n    <EventData>\r\n      <Data Name=\"ContextInfo\">        Severity = Informational\r\n        Host Name = ConsoleHost\r\n        Host Version = 5.1.19041.1\r\n        Host ID = 7d5cb8a8-0a62-4f52-ba67-09f94d24e1b7\r\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n        Engine Version = 5.1.19041.1\r\n        Runspace ID = 9e719284-e101-4523-88f7-e36ca5e9d152\r\n        Pipeline ID = 278\r\n        Command Name = Invoke-Command\r\n        Command Type = Cmdlet\r\n        Script Name = \r\n        Command Path = \r\n        Sequence Number = 6750\r\n        User = DESKTOP-RIPCLIP\\Clippy\r\n        Connected User = \r\n        Shell ID = Microsoft.PowerShell\r\n</Data>\r\n      <Data Name=\"UserData\">\r\n      </Data>\r\n      <Data Name=\"Payload\">CommandInvocation(Invoke-Command): \"Invoke-Command\"\r\nParameterBinding(Invoke-Command): name=\"ScriptBlock\"; value=\"e`ch`o (\"Obfu\"+\"s\"+\"`c\"+\"ted\")\"\r\n</Data>\r\n    </EventData>\r\n  </Event>\r\n</root>\r\n```",
      "created_at": "2020-09-10T22:58:01Z",
      "updated_at": "2020-09-10T22:58:01Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Ok, I now see the 800 event data ... I was looking in the wrong place for it before.  I presume this was removed from PowerShell Core because it was thought that 4103 provided the same information.  But that doesn't seem to be the case, and we should look at the differences.",
      "created_at": "2020-09-10T23:06:47Z",
      "updated_at": "2020-09-10T23:06:47Z"
    },
    {
      "author": "gwsales",
      "author_association": "NONE",
      "body": "Does adding a milestone mean this could be pulled in for that release?",
      "created_at": "2021-01-18T19:05:43Z",
      "updated_at": "2021-01-18T19:05:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@gwsales Yes, this _could_.",
      "created_at": "2021-01-20T06:45:36Z",
      "updated_at": "2021-01-20T06:45:36Z"
    },
    {
      "author": "gwsales",
      "author_association": "NONE",
      "body": "Is there any way to add comments here when this is considered and skipped or accepted? There doesn't seem to be any progress on this issue since September and I want to make sure this doesn't get overlooked.",
      "created_at": "2021-04-29T15:53:15Z",
      "updated_at": "2021-04-29T15:53:15Z"
    }
  ],
  "created_at": "2020-09-08T16:07:02Z",
  "number": 13596,
  "state": "open",
  "title": "Enable logging of command line with PowerShell module logging (4103)",
  "updated_at": "2021-04-29T17:09:02Z"
}