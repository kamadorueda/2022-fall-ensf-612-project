{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12201",
  "author": "p0W3RH311",
  "body": "\r\nall shell (bash/zsh/csh...etc) have variable Substitution/expansion even cmd.exe\r\nwhy not powershell ?\r\n```\r\n\r\nfor example: based on other shell:\r\n\r\n# Remove the beginning or end of a string\r\nPS> ${myvar#Pattern}    \r\n    ${myvar##Pattern}\r\n\r\n# Search and replace\r\nPS> ${myvar/foo/baz}\r\n\r\n# Make letters uppercase or lowercase\r\nPS>   \r\n\r\n# Remove pattern\r\nPS> ${myvar%pattern}  ${myvar%%pattern}\r\n\r\n# Substring\r\nPS> ${myvar:offset}\r\n    ${myvar:offset:length}\r\n    ${myvar:position}\r\n```\r\n\r\nits breaking change but variable substitution is based in all shell and people use it a lot",
  "closed_at": "2020-03-29T00:00:10Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "These features are all available in other ways. Simply because they don't use an identical syntax does not mean the features are not available. \ud83d\ude42 \r\n\r\n```ps1\r\n<#\r\n    Remove the beginning or end of a string\r\nPS> ${myvar#Pattern}    \r\n    ${myvar##Pattern}\r\n#>\r\n# to trim whitespace\r\n$string.TrimStart() \r\n$string.TrimEnd()\r\n\r\n# to trim both at once\r\n$string.Trim() \r\n\r\n# to trim specific characters from start and end; you can do this with TrimStart and TrimEnd as well\r\n$string.Trim($characters) \r\n```\r\n```ps1\r\n<#\r\n Search and replace\r\nPS> ${myvar/foo/baz}\r\n#>\r\n# Regex operators\r\n$myvar -replace 'foo','baz'\r\n```\r\n```ps1\r\n# Make letters uppercase or lowercase\r\n$string.ToUpper()\r\n$string.ToLower()\r\n```\r\n```ps1\r\n<#\r\n Remove pattern\r\nPS> ${myvar%pattern}  ${myvar%%pattern}\r\n#>\r\n\r\n$string -replace 'pattern'\r\n```\r\n```ps1\r\n<#\r\nSubstring\r\nPS> ${myvar:offset}\r\n    ${myvar:offset:length}\r\n    ${myvar:position}\r\n#>\r\n$string.Substring($startIndex, $length)\r\n$string.Substring($startIndex)\r\n```\r\n\r\nI would recommend you read up on what PowerShell can do, there's a huge amount of help documentation for PowerShell and for .NET which lays out how much it can do. I don't see a real need to reinvent the wheel here. \ud83d\ude42 \r\n\r\nAlso, regarding syntax... we cannot have PowerShell use `$variable:someOtherThing` or `${variable:something}` syntax for variables, since we already use `:` as a scope specifier in variables, and it can invoke PSProviders with that syntax. Additionally, `${var/thing/otherthing}` is currently a perfectly legal variable name in PowerShell; it uses the `${}` syntax to permit otherwise illegal characters to be used in variable names, and that doesn't seem like something that would be worthwhile to change in my opinion. ^^",
      "created_at": "2020-03-25T12:57:04Z",
      "updated_at": "2020-03-25T12:59:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This has actually come up before: #9566",
      "created_at": "2020-03-25T20:05:31Z",
      "updated_at": "2020-03-25T20:05:31Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-03-29T00:00:08Z",
      "updated_at": "2020-03-29T00:00:08Z"
    }
  ],
  "created_at": "2020-03-25T12:00:14Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 12201,
  "state": "closed",
  "title": "variable Substitution/expansion",
  "updated_at": "2020-03-29T00:00:10Z"
}