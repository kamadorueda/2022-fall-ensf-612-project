{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4594",
  "author": "mklement0",
  "body": "<sup>A follow-up to #4552.</sup>\r\n\r\nReference https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/14925213-bug-console-output-appears-out-of-order\r\n\r\nUsers have been stumbling over this for a while (see this 2-year-old [connect.microsoft.com](https://connect.microsoft.com/PowerShell/Feedback/Details/1635172) bug report and various SO questions).\r\n\r\n@PetSerAl provides an in-depth explanation of the problem in [this SO answer](https://stackoverflow.com/a/34858911/45375).\r\n\r\nIn short, he states that, starting in PSv5, an _implicitly_ applied `Format-Table` call now waits 300 ms. before producing output in order to collect a reasonable number of objects to output so as to better determine suitable column widths.\r\n\r\nThat means that subsequent commands get to execute before the `Format-Table` output kicks in,  which results in surprising behavior if these commands produce non-pipeline display output (e.g., with `Write-Host`) or prompt for user input, for instance.\r\n\r\n_Update_: A related problem (irrespective of whether the asynchronous output is a problem) is that the implicit output formatting applied to the first command in a script locks in the implicit formatting for all remaining commands, which, if `Format-Table` is locked in, can lead to objects output by subsequent commands \"disappearing\", as originally detailed in #4552  (e.g.,  \r\n`[pscustomobject] @{ one = 1; two = 2}; [pscustomobject] @{ three = 3}` makes the 2nd custom object \"disappear\", because it doesn't share any properties with the 1st one) - see also: #12825\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n[pscustomobject] @{ one = 1 }  # implicit Format-Table call - in PSv5+, waits 300 ms. before outputting\r\n'hi' | Out-Host # explicit, synchronous, non-pipeline output\r\nRead-Host -Prompt 'Press any key'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPSv4- produces (note how the implicit `Format-Table` output comes _after_ the prompt):\r\n\r\n```none\r\n\r\none\r\n---\r\n  1\r\nhi\r\nPress any key:\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nPSv5+ produces:\r\n\r\n```none\r\n\r\nhi\r\nPress any key:\r\none\r\n---\r\n  1\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The current behavior is `by design`.  If this is a functional issue, I suppose we could have `-AutoSize:$false` not have the timer",
      "created_at": "2017-08-16T14:59:09Z",
      "updated_at": "2017-08-16T14:59:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: \r\n\r\nRe as-designed: I assumed as much, but it's another gotcha that calls for  `Documentation-Needed`.\r\n\r\nRe `-AutoSize`: Note that the problem only occurs with _implicit_ use of `Format-Table`. If you use ` ... | Format-Table` explicitly - whether with or without `-AutoSize` - there is no asynchronous behavior.\r\n\r\nOr are we talking about different things?",
      "created_at": "2017-08-16T16:23:30Z",
      "updated_at": "2017-08-16T16:23:30Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "> Re -AutoSize: Note that the problem only occurs with implicit use of Format-Table. If you use ... | Format-Table explicitly - whether with or without -AutoSize - there is no asynchronous behavior.\r\n```powershell\r\n& {\r\n    [pscustomobject] @{ one = 1 }  # implicit Format-Table call - in PSv5+, waits 300 ms. before outputting\r\n    'hi' | Out-Host # explicit, synchronous, non-pipeline output\r\n    Read-Host -Prompt 'Press any key'\r\n} | Format-Table\r\n```",
      "created_at": "2017-08-16T16:58:23Z",
      "updated_at": "2017-08-16T16:58:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems internally we call Format-Default in the case.",
      "created_at": "2017-08-16T16:59:14Z",
      "updated_at": "2017-08-16T16:59:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl:\r\n\r\nGood point, but what I meant was applying `Format-Table` directly to the command that would otherwise trigger the asynchronous behavior (under the assumption that that command does _not_ have embedded pipeline-bypassing host operations):\r\n\r\n```powershell\r\n[pscustomobject] @{ one = 1 } | Format-Table # outputs synchronously\r\n'hi' | Out-Host # explicit, synchronous, non-pipeline output\r\nRead-Host -Prompt 'Press any key'\r\n```\r\n\r\nNow that I think about it, even that use of `Format-Table`  to force synchronous output can be problematic, because - while fine for _display_ - it replaces the original objects with  _formatting objects_ in the pipeline.\r\n\r\n",
      "created_at": "2017-08-16T17:35:28Z",
      "updated_at": "2017-08-16T17:35:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is dup #1747",
      "created_at": "2017-08-17T18:17:49Z",
      "updated_at": "2017-08-17T18:17:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nIndeed it is, thanks - due to its generic title, I didn't discover it.\r\n\r\nGiven that this issue describes the problem more specifically and includes a command to reproduce it, can I suggest we instead close #1747 as a duplicate?\r\n\r\nHere's its summary:\r\n\r\n@Jaykul states:\r\n> Isn't that the expected result of the delay in Format-Table to get widths for auto-size?\r\n> Do people want to give up that feature to \"fix\" this oddness in output?\r\n\r\n@SteveL-MSFT states:\r\n> This is the side effect of the change we made. @LeeHolmes made the initial change so that we can compute more usable column widths based on objects returned within the first [N units of time].\r\n\r\n@lzybkr states:\r\n> Principle of least surprise - output comes in the order it was written.\r\n> \r\n> This doesn't mean giving up the feature, it just means flushing what was buffered before writing the other stream.\r\n \r\n@joeyaiello  states:\r\n> This is annoying, but I don't think it's a ship blocker.",
      "created_at": "2017-08-18T01:57:03Z",
      "updated_at": "2017-08-18T01:57:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. We can check type output object and flush if the type changed.\r\n2. After ending every pipeline we do some cleanups - at time we can flush the cache too. (We do the same for progress bar hiding.)\r\n\r\nCurrently I don't know what way is better.",
      "created_at": "2017-08-20T09:36:43Z",
      "updated_at": "2017-08-20T09:36:43Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "I had the idea of a -NoWait parameter for Format-Table.  You could set it in advance with $PSDefaultParameterValues, like setting -Encoding to Ascii for Out-File and '>'.  Plus -NoWait's very existence would help document this behavior.  By the way, in a script, implicitly run format-table could wait any amount of time for the second object before showing output.\r\n\r\n```powershell\r\n# no output until script finishes\r\nforeach ($i in 1..60) { \r\n  if ($i -eq 1) { [pscustomobject]@{message = $i} } \r\n  sleep 1\r\n}\r\n```\r\n\r\n",
      "created_at": "2019-12-14T01:34:47Z",
      "updated_at": "2019-12-14T01:46:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Really Format-Table doesn't do any delay, it only creates formatting objects.\r\nThe delay cache is initialized here: https://github.com/PowerShell/PowerShell/blob/ca202da6437f5c9ed334725469f6d8f1cb7e5a2c/src/System.Management.Automation/FormatAndOutput/common/BaseOutputtingCommand.cs#L158\r\n\r\nand implemented here as a queue:\r\nhttps://github.com/PowerShell/PowerShell/blob/ca202da6437f5c9ed334725469f6d8f1cb7e5a2c/src/System.Management.Automation/FormatAndOutput/common/OutputQueue.cs#L71-L77\r\n\r\nIf we could send a message and catch it in the condition we could resolve the issue.\r\nThe message could be dummy `GroupEndData`.\r\nSo we should only get understanding where from and when we could send the message.",
      "created_at": "2019-12-14T11:38:22Z",
      "updated_at": "2019-12-14T11:39:48Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "The following test fails, as of PSVersion                      7.0.2\r\n```powershell\r\n-SPLIT ([CONSOLEKEYINFO], [VERSION] | % { NEW-OBJECT $_ } | OUT-STRING) | SHOULD -CONTAIN 'MAJOR'\r\n```\r\nA partial workaround would be to put a ref object at the beginning of the pipeline, e.g.:\r\n```powershell\r\n& { [VERSION]\r\nNEW-OBJECT CONSOLEKEYINFO\r\nREAD-HOST }\r\n```\r\nThis causes the default formatter to switch to FORMAT-LIST and also flushes the output.  Why it is so remains a mystery.",
      "created_at": "2020-07-16T09:40:10Z",
      "updated_at": "2020-07-16T09:56:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@yecril71pl, this is an unrelated issue: what you're seeing is that in (potentially implicit, as in this case) `Format-Table` formatting the _first_ object locks in the display columns - see https://stackoverflow.com/a/45705068/45375 and https://stackoverflow.com/a/55504393/45375 \n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/45704074/powershell-custom-object-confusion\">Powershell Custom Object Confusion</a></strong></div><div>I was working on a script trying to output two different custom objects; one after another and was having problems, so to simplify, I stripped all the code down to just the minimum:\n\n$beep = new-ob...</div></blockquote>\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/55502047/why-is-the-output-format-changed-when-running-two-powershell-commands-in-one-lin\">Why is the output format changed when running two PowerShell commands in one line?</a></strong></div><div>I'm getting unexpected results when executing two PowerShell commands separated by a semicolon. The output of the second command changes. If I run them in reverse order, I don't see the second comm...</div></blockquote>",
      "created_at": "2020-07-16T09:59:50Z",
      "updated_at": "2020-07-16T09:59:52Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> @yecril71pl, this is an unrelated issue: \r\n\r\nRelated, and by yourself: https://github.com/PowerShell/PowerShell/issues/4552#issuecomment-324106859 .  Besides, as you may wish to have noticed, my workaround also resolves the `READ-HOST` flushing problem.",
      "created_at": "2020-07-16T10:07:14Z",
      "updated_at": "2020-07-16T10:10:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It is only related in the abstract sense that is also a surprising `Format-Table` behavior, but I forgot that I actually \"parked\" this _technically_ unrelated issue in the OP - but only because the original issue, #4552 , was closed.\r\nLater, #12825 was created, which contains further discussion.\r\n\r\nYour workaround isn't one, because none is required for the types in your example (because they have formatting data associated with them), and it is ineffective for types that do need a workaround:\r\n\r\n```powershell\r\n# NOT a workaround: Read-Host prompts first.\r\n& { \r\n  [pscustomobject] @{ one = 1; two = 2; three = 3 }\r\n  READ-HOST \r\n}\r\n```",
      "created_at": "2020-07-16T10:31:07Z",
      "updated_at": "2020-07-16T21:04:49Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "Workaround:\r\n```powershell\r\n& { \r\n[VERSION]\r\n  [pscustomobject] @{ one = 1; two = 2; three = 3 }\r\n  READ-HOST \r\n}\r\n```\r\nWorks like a charm \ud83d\ude3a",
      "created_at": "2020-07-16T10:35:38Z",
      "updated_at": "2020-07-16T10:35:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's still not a workaround: It only _happens_ to work, because `[version]` is of a type (`System.RuntimeType`) that has formatting data associated with it, in which case the asynchronous behavior doesn't occur. \r\n(As an aside: the use of `& { ... }` makes no difference here.)\r\n\r\nIf you use a second `[pscustomobject]` [_update_: _instead_ of `[version]`) or  output the `[pscustomobject]` _first_, for instance, `Read-Host` will again prompt first.\r\n\r\nThe only way to _always_ avoid the asynchronous behavior is to pipe to `Out-Host` or an explicit `Format-*` call (in which case nothing is written to the pipeline) or to pipe to `Out-String` (in which case you output a _string_ to the pipeline).\r\n",
      "created_at": "2020-07-16T10:45:34Z",
      "updated_at": "2020-07-16T13:24:37Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@yecril71pl  This issue exists only in v5+, but yours behave that way since v1.",
      "created_at": "2020-07-16T10:47:59Z",
      "updated_at": "2020-07-16T10:47:59Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> (As an aside: the use of `& { ... }` makes no difference here.)\r\n\r\nThe block is necessary if you paste it into the console.\r\n\r\n> If you use a second `[pscustomobject]`, for instance, `Read-Host` will again prompt first.\r\n\r\nGeez, dude, who do you think I am?\r\n\r\n```powershell\r\n& { \r\n[VERSION]\r\n  [pscustomobject] @{ one = 1; two = 2; three = 3 }  \r\n  [pscustomobject] @{ one = 1; two = 2; three = 3 }\r\n  READ-HOST \r\n}\r\n```\r\n\r\n> IsPublic IsSerial Name                                     BaseType\r\n> -------- -------- ----                                     --------\r\n> True     True     Version                                  System.Object\r\n> \r\n> one   : 1\r\n> two   : 2\r\n> three : 3\r\n> \r\n> \r\n> one   : 1\r\n> two   : 2\r\n> three : 3\r\n> \r\n> MY INPUT\r\n> MY INPUT\r\n\r\nAs I said, `[VERSION]` must go first, otherwise the workaround does not work.\r\n\r\n> The only way to _always_ avoid the asynchronous behavior is to pipe to `Out-Host` or an explicit `Format-*` call (in which case nothing is written to the pipeline) or to pipe to `Out-String` (in which case you output a _string_ to the pipeline).\r\n\r\nIf I ever encounter a situation where the workaround does not work, I shall report back, with your permission.",
      "created_at": "2020-07-16T10:56:16Z",
      "updated_at": "2020-07-16T10:56:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I meant: use a second `[pscustomobject]` _instead_ of `[version]`, but the problem is more easily demonstrated simply by _reversing the output order_:\r\n\r\n```powershell\r\n# Does NOT work: Read-Host prompts first.\r\n& { \r\n  [pscustomobject] @{ one = 1; two = 2; three = 3 }\r\n  [VERSION]\r\n  READ-HOST \r\n}\r\n```\r\n\r\nI don't think having to place an unrelated object whose type has associated formatting data, just so that it triggers synchronous output behavior (and obviously becomes part of the output), qualifies as a workaround.\r\n\r\nThere currently is no good workaround: you're forced to choose between synchronous display (e.g., via `Out-Host`), which means there'll be no pipeline output, and having pipeline input with asynchronous display.\r\n\r\n---\r\n\r\nOn a meta note:\r\n\r\n> Geez, dude, who do you think I am? \r\n\r\nWe are discussing technical issues here, not personalities.\r\nPlease refrain from such flippancy in the future.\r\n\r\n\r\n",
      "created_at": "2020-07-16T11:17:38Z",
      "updated_at": "2020-07-16T11:20:15Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> I meant: use a second `[pscustomobject]` _instead_ of `[version]`, but the problem is more easily demonstrated simply by _reversing the output order_:\r\n\r\nAs I said, `[VERSION]` must go first, otherwise it does not work.  If I had used a custom object instead of `[version]`, it would have become the _first_ one.\r\n\r\n> I don't think having to place an unrelated object whose type has associated formatting data, just so that it triggers synchronous output behavior (and obviously becomes part of the output), qualifies as a workaround.\r\n\r\nI appreciate your disgust, however, it is sufficient for me and I do not know anything better.\r\n\r\n> On a meta note:\r\n> \r\n> > Geez, dude, who do you think I am?\r\n> \r\n> We are discussing technical issues here, not personalities.\r\n> Please refrain from such flippancy in the future.\r\n\r\nIt would have been blatantly incompetent of me if I had not checked that the workaround works with two objects in the pipeline.\r\n",
      "created_at": "2020-07-16T11:28:36Z",
      "updated_at": "2020-07-16T11:35:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "\r\n> It would have been blatantly incompetent of me if I had not checked that the workaround works with two objects in the pipeline.\r\n\r\nNah just would have been a mistake, [we all make 'em](https://github.com/PowerShell/PowerShell/issues/13104#issuecomment-653889203).\r\n\r\nIt's also pretty much impossible to judge someone's competency from a handful of issues.  Even harder to actually keep a mental map of exactly how competent every single community member is.\r\n\r\n",
      "created_at": "2020-07-16T12:28:15Z",
      "updated_at": "2020-07-16T12:28:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Excellent point, @SeeminglyScience.\r\n\r\nAdditionally, in this specific case, the instruction given by me that triggered @yecril71pl's response was misinterpreted:\r\n\r\nThe instruction was poorly phrased (since corrected), but the paragraph that preceded it should have made it clear that the issue is not about _how many_ objects there are in the pipeline, but _whether or not the type of the FIRST one happens to have associated formatting data_.\r\n\r\nAnd that distinction is indeed quite subtle, not something anyone could be expected to recognize readily.\r\n\r\nTherefore: We all make mistakes, and we all misinterpret others' comments on occasion. This only becomes problematic if one takes things _personally_.\r\n\r\n@yecril71pl , another problematic aspect is to use incendiary language such as \"I appreciate your disgust\"; it adds nothing to the discussion and serves merely to antagonize.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-07-16T13:41:00Z",
      "updated_at": "2020-07-16T21:02:48Z"
    },
    {
      "author": "metablaster",
      "author_association": "NONE",
      "body": "Since this behavior happens only with `[pscustomobject]` do you suggest using `[psobject]` as an alternative since it doesn't have this problem?\r\n\r\nI know `psobject` is somewhat slower and works slightly differently (ex. doesn't retain the order of members) but I it's still a good workaround, since there is no need to use hackery and should be easy to update existing code that makes use of `pscustomobject`.",
      "created_at": "2020-12-19T11:26:11Z",
      "updated_at": "2020-12-19T11:26:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@metablaster, the problem isn't specific to `[pscustomobject]` (which is technically the same as `[psobject]` - [`System.Management.Automation.PSObject`](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.PSObject)), it affects _all_ (non-primitive) .NET types that (a) do not have predefined formatting data associated with them and (b) trigger implicit `Format-Table` formatting due to having 4 or fewer properties; e.g.:\r\n\r\n```powershell\r\nPS> [regex] ''; write-host hi  # !!  'hi' prints first\r\n\r\nhi\r\nOptions RightToLeft MatchTimeout\r\n------- ----------- ------------\r\n   None       False -00:00:00.0010000\r\n```\r\n\r\n---\r\n\r\nAs an aside: Use of `[psobject]` in PowerShell code is best avoided; see [this comment](https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616556799) for background information on the unfortunate conflation of `[psobject]` and `[pscustomobject]`.",
      "created_at": "2020-12-19T19:04:53Z",
      "updated_at": "2020-12-19T19:04:53Z"
    },
    {
      "author": "metablaster",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nI took a look at your link where you said `Use [System.Collections.Generic.List[object]]`, for my specific example in previous duplicate issue [#14464][issue] I tried with `Dictionary<TKey,TValue>` which unfortunately results in same unexpected behavior.\r\n\r\nHowever your mention of \"format data\" solved all of my problems and I'm still sticking with `PSCustomObject`\r\nI defined [Format.ps1xml][format] file with custom type and now all problems are gone \ud83d\ude04 \r\n\r\nThanks so much!\r\n\r\n```powershell\r\nforeach ($i in 1..3)\r\n{\r\n\tWrite-Information -MessageData \"Performing operation $i\" -INFA \"Continue\"\r\n\r\n\t[PSCustomObject]@{\r\n\t\tTemplateKey1 = \"A$i\"\r\n\t\tTemplateKey2 = \"B$i\"\r\n\t\tTemplateKey3 = \"C$i\"\r\n                # Cutom type name for Format.ps1xml\r\n\t\tPSTypeName = \"TestType\"\r\n\t}\r\n}\r\n```\r\n\r\n## Actual AND expected behavior\r\n\r\n```\r\nPerforming operation 1\r\n\r\nTemplateKey1     TemplateKey2     TemplateKey3\r\n------------     ------------     ------------\r\nA1               B1               C1\r\nPerforming operation 2\r\nA2               B2               C2\r\nPerforming operation 3\r\nA3               B3               C3\r\n```\r\n\r\n[issue]: https://github.com/PowerShell/PowerShell/issues/14464 \"Visit my issue\"\r\n[format]: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_format.ps1xml?view=powershell-7 \"About Format.ps1xml\"",
      "created_at": "2020-12-19T23:13:22Z",
      "updated_at": "2020-12-19T23:13:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@metablaster: \r\n\r\nGlad to hear it. Yes, associating formatting data with _any_ type avoids the problem. \r\n\r\nRe:\r\n\r\n> you said `Use [System.Collections.Generic.List[object]]`\r\n\r\nI should have made it clearer that this was an entirely _incidental_ aspect of why I linked to [that  comment](https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616556799) - I linked to it solely for the background information on `[psobject]` in the _second_ section.\r\n\r\n",
      "created_at": "2020-12-19T23:21:35Z",
      "updated_at": "2020-12-19T23:21:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A more insidious side effect of the asynchronous behavior is that CLI calls from outside PowerShell can result in _data loss_  due to missing output - see [this Stack Overflow question](https://stackoverflow.com/q/69425902/45375) and \r\n * https://github.com/PowerShell/PowerShell/issues/13985\r\n",
      "created_at": "2021-10-03T22:20:57Z",
      "updated_at": "2022-03-20T02:12:25Z"
    }
  ],
  "created_at": "2017-08-16T13:58:20Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 4594,
  "state": "open",
  "title": "Asynchronous behavior of implicit Format-Table use can have surprising side effects - console output may appear out of order",
  "updated_at": "2022-03-20T02:12:25Z"
}