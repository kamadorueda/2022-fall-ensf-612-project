{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9755",
  "author": "KirkMunro",
  "body": "# Transcript demonstrating the problem\r\n\r\nAs the title says, `ErrorAction.Inquire` needs work. For example, consider the following transcript:\r\n\r\n```none\r\nPS C:\\> $ErrorActionPreference = 'Inquire'\r\nPS C:\\> gps -id 9999999999999999\r\n\r\nAction to take for this exception:\r\nCannot bind parameter 'Id'. Cannot convert value \"9999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small for an Int32.\"\r\n[C] Continue  [I] Silently Continue  [B] Break  [S] Suspend  [?] Help (default is \"C\"): B\r\nGet-Process : Cannot bind parameter 'Id'. Cannot convert value \"9999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small for an Int32.\"\r\nAt line:1 char:9\r\n+ gps -id 9999999999999999\r\n+         ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nPS C:\\> try {gps -id 9999999999999999} catch {}\r\nPS C:\\> gps -id ([int]::MaxValue)\r\n\r\nConfirm\r\nCannot find a process with the process identifier 2147483647.\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): H\r\ngps : The running command stopped because the user selected the Stop option.\r\nAt line:1 char:1\r\n+ gps -id ([int]::MaxValue)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [Get-Process], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : ActionPreferenceStop,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nPS C:\\> $WarningPreference = 'Inquire'\r\nPS C:\\> Write-Warning 'boo'\r\nWARNING: boo\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): h\r\nWrite-Warning : The running command stopped because the user selected the Stop option.\r\nAt line:1 char:1\r\n+ Write-Warning 'boo'\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [Write-Warning], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : ActionPreferenceStop,Microsoft.PowerShell.Commands.WriteWarningCommand\r\n```\r\n\r\nThis transcript demonstrates the following issues:\r\n1. The message you receive when prompted as a result of `ActionPreference.Inquire` differs depending on the event that occurred. For terminating errors, users are properly asked what action they would like to take for the exception. For non-terminating errors, users are shown the heading \"Confirm\", with an error message if the Inquire prompt was displayed as a result of a non-terminating error, or a question asking users if they want to continue if the Inquire prompt was displayed as a result of a non-error message (warning, debug, verbose, progress).\r\n1. If a terminating error is the cause for the message, the prompt appears too late, such that it will not appear at all if a terminating error is suppressed by a naked catch statement. This makes it difficult for users to properly troubleshoot errors in the system, because they may have something being suppressed that they don't know about.\r\n1. The options users can choose from differ depending on whether or not the Inquire prompt appeared due to a terminating exception or a non-terminating message, even though the underlying actions taken from those options are the same.\r\n1. For non-terminating messages (non-terminating errors, or debug, verbose, warning or progress messages), the options are simply incorrect. There is no \"Yes to All\" functionality for these messages from Inquire. \"Yes to All\" is really \"Silently Continue\", except for these messages it's not silent at all. For everything except non-terminating errors, the message is displayed first. For non-terminating errors, the message is displayed after the Inquire prompt. So \"Yes to All\" aka \"SilentlyContinue\" is just broken.\r\n1. The usefulness of the `[S] Suspend` option becomes questionable once PR #8205 is approved/merged. This point is a little forward thinking, but if we can enter the debugger in response to an error, terminating or not (something which is now possible as part of that PR), then the value of entering a nested prompt diminishes greatly and it would be more valueable to have a `[D] Debug` option that enters the debugger instead (this keeps the user in the current scope, lets them look at the location in the script, step through the code, continue execution, terminate the script, etc.).\r\n\r\n# Expected behavior\r\n\r\n1. Whether `ActionPreference.Inquire` is checked because of a terminating error or a non-terminating message...\r\n    1. ...the options presented to users should be identical, as follows:\r\n        `[C] Continue  [I] Silently Continue  [S] Stop  [D] Debug  [?] Help (default is \"C\"):`\r\n        This includes the following changes:\r\n        - `[B] Break` has been replaced with `[S] Stop` to match `ActionPreference.Stop`.\r\n        - `[S] Suspend` has been replaced with `[D] Debug` to allow users to enter the debugger (this depends on PR #8205).\r\n    1. ...the prompt and the options presented to users should appear before the corresponding message is shown in all cases so that the behavior is consistent, and so that the message can be suppressed with `[I] Silently Continue` (which should work).\r\n1. For non-terminating messages resulting in `ActionPreference.Inquire` displaying a prompt...\r\n    1. ...the prompt caption should state `Action to take for this [error|warning]:` or `Action to take for this [verbose|debug|progress] message:`.\r\n    1. ...the prompt message should show the actual message that will be displayed.\r\n1. For terminating messages resulting in `ActionPreference.Inquire` displaying a prompt...\r\n    1. ... the check should happen earlier (like the check to enter the debugger in PR #8205) so that users can receive the prompt even for exceptions that don't appear.\r\n\r\nWith these changes in place, the transcript above would instead show as follows:\r\n\r\n```none\r\nPS C:\\> $ErrorActionPreference = 'Inquire'\r\nPS C:\\> gps -id 9999999999999999\r\n\r\nAction to take for this exception:\r\nCannot bind parameter 'Id'. Cannot convert value \"9999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small for an Int32.\"\r\n[C] Continue  [I] Silently Continue  [S] Stop  [D] Debug  [?] Help (default is \"C\"): s\r\nGet-Process : Cannot bind parameter 'Id'. Cannot convert value \"9999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small for an Int32.\"\r\nAt line:1 char:9\r\n+ gps -id 9999999999999999\r\n+         ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nPS C:\\> try {gps -id 9999999999999999} catch {}\r\n\r\nAction to take for this exception:\r\nCannot bind parameter 'Id'. Cannot convert value \"9999999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small\r\nfor an Int32.\"\r\n[C] Continue  [I] Silently Continue  [S] Stop  [D] Debug  [?] Help (default is \"C\"): s\r\nGet-Process : Cannot bind parameter 'Id'. Cannot convert value \"9999999999999999999\" to type \"System.Int32\". Error: \"Value was either too large or too small for an Int32.\"\r\nAt line:1 char:14\r\n+ try {gps -id 9999999999999999999} catch {}\r\n+              ~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Get-Process], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nPS C:\\> gps -id ([int]::MaxValue)\r\n\r\nAction to take for this error:\r\nCannot find a process with the process identifier 2147483647.\r\n[C] Continue  [I] Silently Continue  [S] Stop  [D] Debug  [?] Help (default is \"C\"): s\r\ngps : The running command stopped because the user selected the Stop option.\r\nAt line:1 char:1\r\n+ gps -id ([int]::MaxValue)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [Get-Process], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : ActionPreferenceStop,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nPS C:\\> $WarningPreference = 'Inquire'\r\nPS C:\\> Write-Warning 'boo'\r\n\r\nAction to take for this warning:\r\nboo\r\n[C] Continue  [I] Silently Continue  [S] Stop  [D] Debug  [?] Help (default is \"C\"): s\r\nWrite-Warning : The running command stopped because the user selected the Stop option.\r\nAt line:1 char:1\r\n+ Write-Warning 'boo'\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [Write-Warning], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : ActionPreferenceStop,Microsoft.PowerShell.Commands.WriteWarningCommand\r\n```\r\n\r\n# Actual behavior\r\n\r\nSee transcript shown above.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'd like to fix these issues once #8205 is accepted/merged, assuming y'all are OK with them @SteveL-MSFT. Since these changes pertain to interactive use only (`ActionPreference.Inquire` responses cannot be scripted), they would be non-breaking, and they would catch the `ActionPreference.Inquire` feature up to the latest functionality while fixing a bundle of issues in it.",
      "created_at": "2019-05-29T17:00:26Z",
      "updated_at": "2019-05-29T17:00:26Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@KirkMunro First - thanks for the detailed write-up! Second - I haven't had coffee yet so I'm going to ask some stupid questions which you've probably already answered. My main question is why should the inquire prompt have the _same_ behaviour for _different_ kinds of messages? For example, offering \"Yes to all\" makes no sense for a terminating error but it definitely makes sense for non-terminating errors. The goal of `Inquire` was to inspect the messages and then take appropriate action based on that message - skip the message, skip all of the messages, halt execution or enter a subshell/debugger to examine the state of the system to see what's happening, etc. But the set of operations needs to change for different types of messages.  What am I missing?",
      "created_at": "2019-05-29T17:38:25Z",
      "updated_at": "2019-05-29T17:38:25Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for coming back so quickly with questions, @bpayette. Since I don't necessarily have all of the history behind why things are the way they are, I often just look at the end user experience. I tried many ways to get `Inquire` with a response of `Yes to All` to actually suppress all further prompts without any success whatsoever. For example, I tried the following, with and without SupportsShouldProcess, and was always prompted for each item, in both PowerShell 5.1 and 6.2 (sorry that I don't have any older versions handy to test this with right now).\r\n\r\n```none\r\nPS C:\\> $ErrorActionPreference = 'Inquire'\r\nPS C:\\> & {[CmdletBinding(SupportsShouldProcess)]param(); gps -id 1234; gps -id 1234}\r\n\r\nConfirm\r\nCannot find a process with the process identifier 1234.\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): a\r\ngps : Cannot find a process with the process identifier 1234.\r\nAt line:1 char:51\r\n+ ...  {[CmdletBinding(SupportsShouldProcess)]param(); gps -id 1234; gps -i ...\r\n+                                                      ~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (1234:Int32) [Get-Process], ProcessCommandException\r\n+ FullyQualifiedErrorId : NoProcessFoundForGivenId,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\n\r\nConfirm\r\nCannot find a process with the process identifier 1234.\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): a\r\ngps : Cannot find a process with the process identifier 1234.\r\nAt line:1 char:65\r\n+ ... etBinding(SupportsShouldProcess)]param(); gps -id 1234; gps -id 1234}\r\n+                                                             ~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (1234:Int32) [Get-Process], ProcessCommandException\r\n+ FullyQualifiedErrorId : NoProcessFoundForGivenId,Microsoft.PowerShell.Commands.GetProcessCommand\r\n```\r\n\r\nI'm fine if there need to be some differences between terminating/non-terminating support based on what is possible, but those differences need to be rationalized for today (since this functionality was in version 1.0 and pre-dates the PowerShell debugger), the bugs need to be fixed, the functionality should tie into the debugger instead of having suspend, and the wording and choices needs to be cleaned up.\r\n\r\nI had thought what you described was the original intent until I ran a bunch of tests to figure out why I haven't tried using this functionality in many years, which usually stems from running into issues and realizing it's just broken). Even then, though, if it was working that way, that makes `Inquire` work like a conditional `Confirm` for non-terminating messages, vs like a light-weight debugger prompt for terminating messages? It's certainly confusing. I don't have my heart set on one approach or the other, as long as it is consistent at the least (with obvious technical differences) and rational.\r\n\r\nHere's an example showing how the wording presented right now for non-terminating errors is just odd:\r\n\r\n```none\r\nConfirm\r\nCannot find a process with the process identifier 1234.\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"):\r\n```\r\n\r\nConfirm what? That it cannot find that process? And the help doesn't really help. Here's what that says:\r\n\r\n```none\r\nY - Continue with only the next step of the operation.\r\nA - Continue with all the steps of the operation.\r\nH - Stop this command.\r\nS - Pause the current pipeline and return to the command prompt. Type \"exit\" to resume the pipeline.\r\n```\r\n\r\nIs `[Y] Yes` really a step like it sounds in the description (i.e. \"_only_ the next step of the operation\")? That's not accurate. Is `[A] Yes to All` really continuing \"with all steps of the operation\"? That's not entirely accurate either. Doesn't that just mean continue, like in the debugger?\r\n\r\nPlus where options can be consistent (i.e. `Halt` vs `Break`), they should be consistent.\r\n\r\nI'll think about this some more with the idea that users should be able to run a command without further prompts if desired. Maybe that should be an explicit option that is very clear in the choices: \"Run to completion\" (maybe ignoring Inquire prompts of any type at that point, not just for the specific message type that occurred).",
      "created_at": "2019-05-29T18:53:11Z",
      "updated_at": "2019-05-29T18:55:29Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Just to share more questions while they are top of mind, to drive this closer to a solution:\r\n\r\n1. What is the benefit of allowing users to Silently Continue an exception (suppressing the message on their screen)? When would you ever gain value from doing that based on `ActionPreference.Inquire`?\r\n1. Would this be a more rational, consistent set of options that could be applied both to terminating and non-terminating errors?\r\n    `[C] Continue [P] Continue without further prompts [S] Stop [D] Debug [?] Help (default is \"C\"):`\r\n\r\nThis answers your question about why they should have the same prompting (terminating vs non-terminating). You're right, `Yes to All` doesn't make sense for terminating. But `Continue` makes sense to both, and `Continue without further prompts` (or better wording) also makes sense to both.\r\n\r\nThis also highlights the confusion with the wording, because what you guys meant by `Silently Continue` here may have been `Continue without further prompts`, but those are two different things, are they not? Because it wouldn't suppress errors like `SilentlyContinue` does...it would just stop the `Inquire` prompting from occurring.",
      "created_at": "2019-05-29T19:10:09Z",
      "updated_at": "2019-05-29T19:10:29Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro  \r\n> What is the benefit of allowing users to Silently Continue an exception \r\n\r\nIf you're running a script and you're looking for the nth exception, skipping them until you get to the right one makes sense to me. But you could also `Continue` without much difference in effect.\r\n\r\n> Would this be a more rational, consistent set of options that could be applied both ...\r\n\r\n\"Continue without further prompts\" doesn't make any sense. It's not going to continue the current operation because it was a terminating error. (BTW - the context of these prompts is the current command/pipeline, not the script running the pipeline.)\r\n\r\nAnyway, it sounds like there are significant bugs in the implementation. \"We\" :-) should probably fix the bugs first before deciding to change the behaviour based on a faulty impression of how things work.)\r\n",
      "created_at": "2019-05-31T19:40:39Z",
      "updated_at": "2019-05-31T19:40:39Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay \r\n\r\n> ... it sounds like there are significant bugs in the implementation. \"We\" :-) should probably fix the bugs first before deciding to change the behaviour based on a faulty impression of how things work.\r\n\r\nI'm not completely in agreement with you on that point. I would suggest the following instead:\r\n\r\n1. \"We\" identify all of the intended current behaviours of `ActionPreference.Inquire`. I'm just talking about documentation here. Based on this discussion I think I'm closer to understanding the use cases, but it would be worth putting them to text to make sure it is all covered. You're right that we shouldn't make changes based on a faulty impression of how it works.\r\n1. \"We\" identify the current bugs in the implementation based on the intended current behaviours of the feature. There seem to be multiple significant issues right now.\r\n1. \"We\" revisit the original design and decide if it is still appropriate or not, talk about a new design, and based on that discussion determine if it is better to fix the current issues or just replace what's there with what we really want now.\r\n\r\nThat last point is key for me because `ActionPreference.Inquire` pre-dates the PowerShell debugger, and I believe while it's design may have been well thought out for PowerShell 1.0, I feel it quickly became antiquated and of questionable value in PowerShell 2.0 and later. Since we're approaching PowerShell 7.0, it seems like a great time to turn this questionable-valued feature (that I even suggested in another discussion could probably be yanked from PowerShell, given it's very limited usefulness and buggy implementation) into something that people can and will use. I'd much prefer spending some time on an RFC on a new design that makes more sense for `PowerShell 7` and implementing that design than waste time fixing bugs in a feature that \"nobody uses\" (I literally know no one -- 12 years of working with PowerShell in the community, and aside from when someone would run into `ActionPreference.Inquire` behavior as a result of `-Debug`, which has since been updated such that `-Debug` now just sets `$DebugPreference` to `ActionPreference.Continue`, I've never seen a single person explicitly use `ActionPreference.Inquire`).\r\n\r\nThoughts?",
      "created_at": "2019-06-06T15:29:08Z",
      "updated_at": "2019-06-06T17:00:40Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Just to add a data point to this: I [tweeted](https://twitter.com/Poshoholic/status/1136657800074055680) a question about `ActionPreference.Inquire` Thursday last week, which was retweeted a number of times, and not a single person responded. Literally, crickets, so I followed up on it, and have had some responses, confirming that they don't use the feature. It will be interesting to see if other responses show up or not...",
      "created_at": "2019-06-10T19:21:38Z",
      "updated_at": "2019-06-10T19:21:38Z"
    }
  ],
  "created_at": "2019-05-29T16:55:14Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 9755,
  "state": "open",
  "title": "ActionPreference.Inquire is inconsistent and needs some redesign",
  "updated_at": "2019-09-29T17:21:56Z"
}