{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16427",
  "author": "iRon7",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n```PowerShell\r\nSet-StrictMode -Version Latest\r\n$TempFile = New-TemporaryFile\r\n$TempPath = Join-Path $Env:Temp ('Folder_' + [Guid]::NewGuid())\r\n$TempFolder = New-Item -ItemType Directory -Path $TempPath\r\nCopy-Item -Path $TempFile -Destination $TempFolder\r\n$TempFolder |Should -Exist\r\n(Get-ChildItem $TempFolder).Count |Should -Be 1\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nNo Error\r\n\r\n\r\n### Actual behavior\r\n\r\n> PropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\n\r\n\r\n### Error details\r\n\r\nWith `Set-StrictMode -Off` the `(Get-ChildItem $TempFolder).Count ` return `1` which shows that the property does exist\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\n\r\n@iRon7  This is by design.  Strict mode emits errors when you reference a property that does not exist.  As a workaround you can coerce the result into an array type:\r\n\r\n```powershell\r\n@(Get-ChildItem $TempFolder).Count \r\n```",
      "created_at": "2021-11-15T23:02:25Z",
      "updated_at": "2021-11-15T23:02:25Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@PaulHigin,\r\n\r\nThanks for the answer.\r\n\r\n> As a workaround you can coerce the result into an array type:\r\n\r\n**What is the catch?**\r\n\r\nWhat is the difference behind the scene?\r\nApparently there is no *direct* relation with member enumeration as this doesn't give an error:\r\n``` PowerShell\r\n([PSCustomObject]@{ Count = 3 }).Count\r\n```\r\n\r\nSo I guess it has something to do with an deferred execution.\r\nI used to state that assigning a pipeline or using parenthesis will break it, now I have second thoughts whether this is always the case for using parenthesis. I suspect now that:\r\n```PowerShell\r\n(Get-ChildItem $TempFolder) |ForEach-Object { ... }\r\n```\r\nis smart and actually still emitting each item one by one despite the parenthesis.\r\nAnd only when it is forced to an array it will choke the pipeline:\r\n```PowerShell\r\n@(Get-ChildItem $TempFolder) |ForEach-Object { ... }\r\n```\r\nOr???",
      "created_at": "2021-11-16T07:27:24Z",
      "updated_at": "2021-11-16T07:27:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "There is no catch.  The above syntax simply wraps the object in an array so that the `Count` property is valid, when in strict mode.  PowerShell has rules about when to unwrap an array type.\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.2\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays\">Everything you wanted to know about arrays - PowerShell</a></strong></div><div>Arrays are a fundamental language feature of most programming languages.</div></blockquote>",
      "created_at": "2021-11-16T16:57:18Z",
      "updated_at": "2021-11-16T16:57:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`Count` is also a binder construct though, similar to the `ForEach` and `Where` methods. It's supposed to exist on any object including scalars. I'm not necessarily trying to assert that it shouldn't error, I just want to make sure that's taken into account.",
      "created_at": "2021-11-16T17:07:02Z",
      "updated_at": "2021-11-16T17:07:02Z"
    },
    {
      "author": "penser-jata",
      "author_association": "NONE",
      "body": "`Count` not only exists on every object, it is also explicitly (and magically) present on no object at all.\r\n`$null.Count` gives 0 \r\nThe behavior of `.Count`, (0 for null, 1 on any scalar object, the number of elements in collections) is _intended_, extremely _useful_, and _documented_.\r\nStrictMode is not aware of the very special semantics of `.Count`, so you basically can't use the two of them at the same time.",
      "created_at": "2021-11-17T16:51:43Z",
      "updated_at": "2021-11-17T16:51:43Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Thanks for the answers and information.\r\nIt took me a while to see this thru but `Get-ChildItem $TempFolder` could potentially return nothing ([System.Management.Automation.Internal.AutomationNull](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.internal.automationnull)) and `()` indeed doesn't have a `Count` property\r\n\r\nI have closed the issue (**`Resolution-Answered`**).",
      "created_at": "2021-11-17T18:00:16Z",
      "updated_at": "2021-11-17T18:00:16Z"
    },
    {
      "author": "penser-jata",
      "author_association": "NONE",
      "body": "But you can use Count on 'nothing' and it will return zero.\r\nAnd for a single object you get one.\r\nNo 'real' property is needed .\r\nThat is the beauty of the feature.\r\n\r\nThis wasn't there for the first five years but was added in version 3.\r\nExperience showed that you often had to use the work around suggested above by @PaulHigin where you create an array for single objects. (A little ugly and with non-zero perf cost)\r\n\r\nIn that version we also got the equally magic feature where where you can treat any object like an array, so this works and gives 1:\r\n```\r\n$a = 1\r\n$a[0]\r\n\r\n```\r\nInterestingly, StrictMode seems to be aware of this 'synthetic indexing operator' and does not complain, but barfs on the the closely related 'synthetic Count property'\r\n\r\nThis issue is really a valid bug report and deserves to stay open.\r\n",
      "created_at": "2021-11-17T18:39:54Z",
      "updated_at": "2021-11-17T18:39:54Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Ok, I am not able to qualify this further. To prevent that I have reopen/close it repeatedly, I will leave it up to you (@SeeminglyScience, @iSazonov ?) to change it again.",
      "created_at": "2021-11-17T18:51:31Z",
      "updated_at": "2021-11-17T18:51:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I don't have permissions to reopen (@vexx32?) but the `Count` engine intrinsic property works fine on autonull in non-strict (returns `0`) so I'm  inclined to say it should do the same in strict.  If it returned nothing I would say the error makes sense.",
      "created_at": "2021-11-17T19:08:18Z",
      "updated_at": "2021-11-17T19:10:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That makes sense to me. If strict mode is intended to by design restrict usage of otherwise ubiquitous properties provided by the engine, that should be well documented. Given that it's not (as far as I'm aware?), I would be inclined to assume it's more of an accident of implementation and we should see if it's feasible to rectify the issue.",
      "created_at": "2021-11-17T20:13:52Z",
      "updated_at": "2021-11-17T20:14:06Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Something similar happens with the `Count` property of default array parameters:\r\n\r\n```PowerShell\r\nfunction Test {\r\n    [CmdletBinding()] param(\r\n        [String[]]$StringArray\r\n    )\r\n    $StringArray.Count\r\n}\r\nSet-StrictMode -Version Latest\r\nTest\r\n```\r\n\r\n> `The property 'Count' cannot be found on this object. Verify that the property exists.`\r\n\r\nThe workaround is to default it to an empty array: `[String[]]$StringArray = @()`\r\n\r\n---\r\n\r\n\ud83d\udc4e This isn't  the same issue as initial reported, see [@mklement0](https://github.com/mklement0)'s [comment [on 7 Dec 2021]](https://github.com/PowerShell/PowerShell/issues/16427#issuecomment-988036107):\r\n\r\n> your `[string[]]` `$StringArray` parameter example can be reduced to `$null.Count`, because unbound reference-type parameters (without default values) are `$null`.",
      "created_at": "2021-11-29T12:56:47Z",
      "updated_at": "2022-02-04T08:15:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\nWe do not see a security issue here, as strict mode is not a security feature.  This is a language issue and we will update the label.",
      "created_at": "2021-11-29T22:53:04Z",
      "updated_at": "2021-11-29T22:53:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note that this problematic behavior was first reported in\r\n* https://github.com/PowerShell/PowerShell/issues/2798\r\n\r\n#15526 also discusses the inconsistency, but argues for the _opposite_ resolution; to borrow from [my comment there](https://github.com/PowerShell/PowerShell/issues/15526#issuecomment-883592333):\r\n\r\nEngine-supplied members such as `.Count`, `.Length`, scalar `[...]`, `.psobject`, `ForEach()`, .... now have an official name:  [_intrinsic members_](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Intrinsic_Members).\r\n\r\nIt makes much more sense to make them _consistently_ available, _irrespective of strict mode_.\r\n\r\nThis is _already true for most of them,_ but inexplicably not for `.Count` and `.Length` (`[pscustomobject]` being the only exception), despite their tremendous usefulness in unified handling of scalars and collections.\r\n\r\nSimplest repro:\r\n\r\n```powershell\r\n# .Count fails on all types without their own .Count property  *except* [pscustomobject]`\r\n# Applies analogously to .Length\r\n& { Set-StrictMode -Version 2; [pscustomobject] @{ foo=1 }.Count; 'foo'.Count; $null.Count }\r\n```\r\n\r\n@iRon7, your `[string[]] $StringArray` parameter example can be reduced to `$null.Count`, because unbound reference-type parameters (without default values) are `$null`.\r\n\r\n\r\n",
      "created_at": "2021-12-07T15:31:46Z",
      "updated_at": "2021-12-07T15:31:46Z"
    }
  ],
  "created_at": "2021-11-10T10:40:41Z",
  "number": 16427,
  "state": "open",
  "title": "`Set-StrictMode 2`: False positive for references to the `Count` property",
  "updated_at": "2022-02-04T08:15:30Z"
}