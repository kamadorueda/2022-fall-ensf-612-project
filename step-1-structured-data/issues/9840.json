{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9840",
  "author": "atanasa",
  "body": "I have a module that loads a nested binary module (due to support for desktop and core editions). The binary module defines a provider that has a default PSDrive.\r\nWhen calling `Get-ChieldItem <qualified path>` it fails with \"Cannot find a provider with the name '...'\". This has changed since 6.0 when it used to work.\r\n\r\nI have created a sample repro module:\r\n\r\n[ReproProviderNameMismatch.zip](https://github.com/PowerShell/PowerShell/files/3261220/ReproProviderNameMismatch.zip)\r\n\r\nSummary:\r\n- The module must be nested to get this to reproduce\r\n- The provider must do something at initialization time that triggers a capture of the Provider.FullName (or something like that). In my case this is the PSDriveInfo constructor probably:\r\n```c#\r\n      protected override Collection<PSDriveInfo> InitializeDefaultDrives() {\r\n         var drive = new PSDriveInfo(\r\n            \"defaultSampleDrive\",\r\n            ProviderInfo,\r\n            \"/\",\r\n            \"Sample default drive\",\r\n            null);\r\n         var result = new Collection<PSDriveInfo> {drive};\r\n         return result;\r\n      }\r\n```\r\n\r\n**If the InitializeDefaultDrives in the sample is removed, then the issue would not be reproduced.**\r\n\r\n# Steps to reproduce\r\n1. Build the sample module with `dotnet build`\r\n2. Load the module from the build output and run the following:\r\n```powershell\r\nimport-module \"...ReproModule.psd1\"\r\n\r\nNew-PSDrive -Name \"prv1\" -Root \"/\" -PSProvider \"SamplePrv\"\r\n\r\n$item = get-item \"prv1:\\test.txt\"\r\n$item | fl *\r\n\r\nGet-ChildItem $item.PSPath\r\n```\r\n3. Observe the PSPath value\r\n\r\n# Expected behavior\r\nThe command to return the item like this:\r\n\r\n```none\r\nPSPath                          PSProvider            PSIsContainer Name\r\n------                          ----------            ------------- ----\r\nReproModule\\SamplePrv::test.txt ReproModule\\SamplePrv         False test.txt\r\n```\r\nProbably the PSPath value should be:\r\n```\r\nPSPath        : ReproModule\\SamplePrv::test.txt\r\n```\r\n\r\n# Actual behavior\r\nPSPath value is:\r\n```\r\nPSPath        : module\\SamplePrv::test.txt\r\n```\r\n\r\nThe command fails with:\r\n\r\n```none\r\nGet-ChildItem : Cannot find a provider with the name 'module\\SamplePrv'.\r\nAt line:1 char:1\r\n+ Get-ChildItem $item.PSPath\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (module\\SamplePrv:String) [Get-ChildItem], ProviderNotFoundException\r\n+ FullyQualifiedErrorId : ProviderNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-04-28T03:24:05Z",
  "comments": [
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "This is probably also affecting other provider-related cmdlets. We are seeing that when calling `New-PSDrive -Name someName -Root 'drive:/...' -PSProvider ...` the call to the provider implementation (`PSDriveInfo NewDrive(PSDriveInfo requestedDrive)`) receives the root in the form of a PSPath instead of the root in the provider path which was the case before. Looking at the code of `GetProviderRootFromSpecifiedRoot`, it looks like the provider full name might be involved in the resolution of the PSPath to the provider path.\r\n\r\nIs there some way to enable the tracing that is present in the path resolution code?",
      "created_at": "2019-06-06T14:50:15Z",
      "updated_at": "2019-06-06T14:50:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See LocationGlobber and PathResolution from Get-TraceSource",
      "created_at": "2019-06-13T09:50:58Z",
      "updated_at": "2019-06-13T09:50:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-10-03T12:00:35Z",
      "updated_at": "2019-10-03T12:00:35Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "This is not a question but a report of an issue. The issue has not been solved, please reopen the issue.",
      "created_at": "2019-10-03T15:13:05Z",
      "updated_at": "2019-10-03T15:13:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you repo with latest 7.0 build?",
      "created_at": "2019-10-03T15:28:31Z",
      "updated_at": "2019-10-03T15:28:31Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "It still reproduces with preview 4:\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.4\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2019-10-04T11:09:57Z",
      "updated_at": "2019-10-04T11:09:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@atanasa I compiled your sample module and do not see the issue with latest PowerShell 7.0 build..",
      "created_at": "2020-01-31T09:03:11Z",
      "updated_at": "2020-01-31T09:03:11Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "I am able to reproduce it with rc2. I am testing on Windows 10.\r\n\r\nThe error output is:\r\n```Get-ChildItem: Cannot find a provider with the name 'module\\SamplePrv'.```\r\n\r\nStack trace:\r\n```\r\nPS C:\\Program Files\\PowerShell\\7-preview> $e = $error[0]\r\nPS C:\\Program Files\\PowerShell\\7-preview> $e.Exception\r\n\r\nErrorRecord                 : Cannot find a provider with the name 'module\\SamplePrv'.\r\nItemName                    : module\\SamplePrv\r\nSessionStateCategory        : CmdletProvider\r\nWasThrownFromThrowStatement : False\r\nTargetSite                  : System.Management.Automation.ProviderInfo GetSingleProvider(System.String)\r\nStackTrace                  :    at System.Management.Automation.SessionStateInternal.GetSingleProvider(String name)\r\n                                 at System.Management.Automation.LocationGlobber.GetProviderPath(String path,\r\n                              CmdletProviderContext context, Boolean isTrusted, ProviderInfo& provider, PSDriveInfo&\r\n                              drive)\r\n                                 at System.Management.Automation.SessionStateInternal.GetChildItems(String path,\r\n                              Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n                                 at System.Management.Automation.ChildItemCmdletProviderIntrinsics.Get(String path,\r\n                              Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n                                 at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()\r\nMessage                     : Cannot find a provider with the name 'module\\SamplePrv'.\r\nData                        : {}\r\nInnerException              :\r\nHelpLink                    :\r\nSource                      : System.Management.Automation\r\nHResult                     : -2146233087\r\n```\r\n\r\nThe `$PSTableVersion`:\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis is the compiled version of the module:\r\n[ReproModule.zip](https://github.com/PowerShell/PowerShell/files/4139417/ReproModule.zip)\r\n\r\n",
      "created_at": "2020-01-31T12:50:00Z",
      "updated_at": "2020-01-31T12:50:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@atanasa Thanks! I can repo. It comes from SnapIn history. The name `module\\SamplePrv` looks like SnapIn name and not all code was leaned up from SnapIn support.\r\n\r\nError starts here:\r\nhttps://github.com/PowerShell/PowerShell/blob/c4e144b13e1209a6a723160d38be9f11ab45b8da/src/System.Management.Automation/engine/SessionStateProviderAPIs.cs#L786\r\nand\r\nhttps://github.com/PowerShell/PowerShell/blob/c4e144b13e1209a6a723160d38be9f11ab45b8da/src/System.Management.Automation/engine/MshSnapinQualifiedName.cs#L65-L81\r\n\r\nThe GetInstance() method has 11 references so it's very risky to change. \r\n@atanasa I suggest to find a workaround and/or redesign your module. Perhaps @SeeminglyScience know a workaround.\r\n\r\n@SteveL-MSFT I think the old SnapIn code could be removed in next milestone. It seems it currently is a source of tricky issues for users and developers.",
      "created_at": "2020-01-31T14:31:00Z",
      "updated_at": "2020-01-31T14:31:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov the class is named snapin, but it's just provider code.  Also this is actually a side effect of #8831.  Since the full name is cached now, creating those drives on initialization locks in the name at the wrong time.\r\n\r\nYou can verify this by clearing the cached field via reflection:\r\n\r\n```powershell\r\n$provider = Get-PSProvider SamplePrv\r\n$provider.GetType().GetField('_fullName', 60).SetValue($provider, $null)\r\n$item = get-item \"prv1:\\test.txt\"\r\n$item.PSPath\r\n# ReproModule\\SamplePrv::test.txt",
      "created_at": "2020-01-31T15:15:33Z",
      "updated_at": "2020-01-31T15:15:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Also this is actually a side effect of #8831.\r\n\r\nThe ProviderInfo class is immutable. It makes me think that a root reason of the issue is still different.\r\n",
      "created_at": "2020-01-31T17:37:15Z",
      "updated_at": "2020-01-31T17:37:41Z"
    },
    {
      "author": "atanasa",
      "author_association": "NONE",
      "body": "I agree with @SeeminglyScience. The \"immutability\" does not contradict that explanation. The issue is triggered by the early initialization of `ProviderInfo.FullName` that calls into `ModuleInfo.Name`. `ModuleInfo.Name` is not immutable and its name is updated at a later point for some reason. As `ProviderInfo.FullName` is immutable, it is not update to reflect the new name of the module.",
      "created_at": "2020-02-03T12:08:29Z",
      "updated_at": "2020-02-03T12:08:29Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov does have a point, it's puzzling.  So I took a deeper look.\r\n\r\nFirst, this actually has a much simpler repro and isn't related to nested modules at all. All you need is a `RootModule` dll with a file name different from the name declared in the module manifest.\r\n\r\nThe problem is that provider drive initialization happens before the module is renamed to match the manifest here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a34d0f3e808659b0c07b8fdac83aaae1dae43c21/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L3085-L3086\r\n\r\nThe caching is still why it happens, but not in the way I expected.",
      "created_at": "2020-02-03T13:37:02Z",
      "updated_at": "2020-02-03T13:37:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I pulled direct fix. It is not nice but the code is tricky too :-) \r\n@SeeminglyScience Thanks for pointing where nested module name updated.",
      "created_at": "2020-02-03T14:23:59Z",
      "updated_at": "2020-02-03T14:23:59Z"
    }
  ],
  "created_at": "2019-06-06T11:05:42Z",
  "number": 9840,
  "state": "closed",
  "title": "Get-ChieldItem fails with \"Cannot find a provider ...\" on version 6.2.1",
  "updated_at": "2020-04-28T03:24:18Z"
}