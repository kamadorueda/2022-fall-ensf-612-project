{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7021",
  "author": "bergmeister",
  "body": "## PR Summary\r\n\r\nCloses #6944 \r\n\r\nFollowing PR #6945 , further reduce the total build time (without any disadvantages) by around **5 minutes** by making sure there is a more even split between the 2 build jobs (the 2nd build job used to be much shorter).\r\nTherefore this PR moves also the `xUnit` and `Pester`-Admin tests into the 2nd build job. If it is a daily/feature test commit, then the feature tests will also happen (only) in the 2nd build job. Because both jobs now run tests, the `failfast` option was removed. The final question from my side is whether running tests in 2 build jobs is OK for the daily build, which uploads code coverage results?\r\n\r\nThe time to wait for the AppVeyor build results is now 15 +/- 2 minutes, which is a huge improvement to what used to be around 28 minutes before the build matrix was introduced.\r\n\r\nIn the future, we could possibly run the feature tests in an optional 3rd build job once `AppVeyor` implements conditional build matrices here: https://github.com/appveyor/ci/issues/2299\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-06-11T21:18:52Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  can you push a commit with `[Feature]` at this beginning on it.  This will cause the CI to run like our nightly build which runs more tests.  I want to validate that none of those extra tests depend on another test being run from the tests you have split out.",
      "created_at": "2018-06-07T23:29:22Z",
      "updated_at": "2018-06-07T23:30:53Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "OK, it seems, when using `[feature]`, there are only around 800 tests in the 2nd build matrix but there should be nearly 2000, I need to look into that, maybe I have missed one condition in the test function. But otherwise it's fine",
      "created_at": "2018-06-08T06:46:15Z",
      "updated_at": "2018-06-08T17:39:18Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  thanks for investigating the results",
      "created_at": "2018-06-08T17:17:05Z",
      "updated_at": "2018-06-08T17:17:05Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 I found the reason for the missing unelevated Pester feature tests and I fixed it. I consider the PR ready for review again now, I just pushed the last simplification commit.\r\nOne important question that might be a blocker: In `Invoke-AppVeyorAfterTest`, code coverage results get uploaded for daily/feature builds. Is this a problem now with tests (and results) being spread across 2 build jobs? Maybe in the case of an actual daily build (i.e. not a feature commit, the `Test-DailyBuild` function does not disambiguate them) we need to run all tests in one job then.",
      "created_at": "2018-06-08T18:46:34Z",
      "updated_at": "2018-06-08T19:54:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  The last feature build was still 678 tests short... I'm trying to take a quick look why...\r\n[Feature build with 7975 tests](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9647)\r\n[Your feature build with 7296 test](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9645)\r\n",
      "created_at": "2018-06-08T23:58:46Z",
      "updated_at": "2018-06-08T23:58:46Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "With the Feature tag, the elevated tests should be [633](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9647/job/qdw8xw03ced1cntr#L5230), while only [114](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9645/job/igj5vhlnlf4l2d89#L603) were run with your PR.\r\n\r\nUpdate:\r\n[Looks like one of the machines in the matrix made the wrong decision about `Test-DailyBuild`.](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9645/job/igj5vhlnlf4l2d89#L53)\r\n\r\nUpdate-2:\r\nMy best guess is that AppVeyor is only to populating `$env:APPVEYOR_REPO_COMMIT_MESSAGE` on the first machine in the matrix.",
      "created_at": "2018-06-09T00:00:45Z",
      "updated_at": "2018-06-09T00:14:52Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 I pushed another `[feature]` commit and this time the build results [here](https://ci.appveyor.com/project/PowerShell/powershell/build/v6.1.0-preview.9664) were fine (i.e. had roughly the expected number of tests with 7974).\r\nYour analysis about `$env:APPVEYOR_REPO_COMMIT_MESSAGE` is probably correct but I can only speculate why it was not set in the 2nd build job of the build that you referenced. Maybe it was because it was triggered by a push that included 3 commits (a merge commit to pull upstream changes in, a commit from myself and then the empty feature commit at last), which might have confused AppVeyor... I tried something similar again below (ie. `git pull upstream master; git commit -m '[feature]' --allow-empty; git push` to check if that might have been the reason but it worked again, therefore I can only conclude we must have had a flaky build for unknown reasons.\r\nWhat do you think about my [question](https://github.com/PowerShell/PowerShell/pull/7021#issuecomment-395853603) about code coverage of the daily build?",
      "created_at": "2018-06-10T10:02:42Z",
      "updated_at": "2018-06-10T13:07:59Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister Code coverage does not use the AppVeyor workflow so this change should not be an issue.",
      "created_at": "2018-06-11T18:09:18Z",
      "updated_at": "2018-06-11T18:09:18Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  I was discussing the impact of FailFast with other team members.  @JamesWTruher  Mentioned that we would like to always have logs of tests results (even if it is that tests were canceled.)   FailFast defeats this and we don't get logs to any canceled tests.  Could you disable FailFast?  We don't view this as a critical part of this optimization.",
      "created_at": "2018-06-11T18:41:31Z",
      "updated_at": "2018-06-11T18:41:31Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 OK. Sounds good. This PR already has `FailFast` removed, I am thinking the same way, especially now with tests running in both build jobs.",
      "created_at": "2018-06-11T21:14:44Z",
      "updated_at": "2018-06-11T21:14:44Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister sorry I messed that.",
      "created_at": "2018-06-11T21:16:47Z",
      "updated_at": "2018-06-11T21:16:47Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister \r\nTravis-CI has a similar feature https://docs.travis-ci.com/user/customizing-the-build/#Build-Matrix\r\nWe are considering refactoring Travis-CI in a similar way and enabling the feature tests by default on both systems.  This would eliminate the most of the time gains you have given us but give us better coverage in the CI system.  This is just an FYI in case you are interested in contributing.",
      "created_at": "2018-06-11T21:23:37Z",
      "updated_at": "2018-06-11T21:23:37Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  And thanks for this work.",
      "created_at": "2018-06-11T21:23:49Z",
      "updated_at": "2018-06-11T21:23:49Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 You're welcome, I quite enjoy working with CI systems and tweaking them. I also like it now to be able to get complete results now again in 15 minutes, which is close to how it was when PowerShell was in Alpha state.\r\nI have not worked with `Travis` yet myself and having `AppVeyor` fast is sufficient for me because I am now more interested on Windows as the platform and rarely have PRs that break non-Windows platforms. Therefore don't expect a PR from my side at the moment.\r\n\r\nIf you think about always running feature tests, then I think it would be the best to do that in an optional 3rd build job that could be implemented in an easier  fashion once `AppVeyor` implements conditional build matrices here: https://github.com/appveyor/ci/issues/2299\r\n\r\nIt would be interesting if you guys could setup a Travis CI build for PSSA to get coverage for Mac (AppVeyor now officially supports Ubuntu images and I can tell from experience that they work very well, are very fast and the AppVeyor support is awesome, just a few days ago they fixed a bug in production for me in less than an hour or me raising it). You could therefore consider moving the Linux tests to AppVeyor.",
      "created_at": "2018-06-11T21:46:07Z",
      "updated_at": "2018-06-11T21:53:20Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister \r\n> If you think about always running feature tests, then I think it would be the best to do that in an optional 3rd build job once AppVeyor implements conditional build matrices here: appveyor/ci#2299\r\n\r\nI don't think we would wait for conditional matrices.  We would just add another job with no condition that would run all the time.\r\n\r\n> AppVeyor now officially supports Ubuntu images and I can tell from experience that they work very well ...\r\n\r\nI have discussed with other team members moving the PowerShell Core Linux tests from Travis-CI to AppVeyor.  I agree that they seem faster and I prefer the AppVeyor feature set and support over Travis-CI.  If we were to move to AppVeyor, we would probably run both for some time to prove that they are reliable.  Currently, I have the PowerShell-Docker tests all running in AppVeyor as testing on Linux should be equivalent of testing on macOS for what we are delivering in that repo.",
      "created_at": "2018-06-11T21:56:27Z",
      "updated_at": "2018-06-11T21:56:27Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Yes, just running the feature tests in a 3rd job would be OK for me as well.\r\nJust as an aside/idea, one could also consider dogfooding VSTS hosted images (that support all 3 platforms) and VSTS currently has a preview feature of offering a public read-only view. What would be great about VSTS is that one only needs to build once and can then kick off multiple release definitions with the artifacts. VSTS supports YAML already for builds and soon for release definitions as well.",
      "created_at": "2018-06-11T22:13:26Z",
      "updated_at": "2018-06-11T22:14:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister We have considered VSTS.  I have already reserved `powershell.visualstudio.com`.  One issue I'm aware of, VSTS Hosted Linux uses an Ubuntu container not a VM and our tests currently have issues with containers.  There is a PR to get this partially working https://github.com/PowerShell/PowerShell/pull/6953.  I doubt the author will do more work.  I'm fine as long as the build works, we tag tests somehow as not working with docker and file an issue to fix the tests (hopefully with some sort of breakout into smaller pieces.)\r\n\r\nI plan to move PowerShell-Docker to VSTS when I get the issues worked out (the CI builds aren't running even though the webhook fires.)",
      "created_at": "2018-06-12T00:18:47Z",
      "updated_at": "2018-06-12T00:18:47Z"
    }
  ],
  "created_at": "2018-06-07T21:25:15Z",
  "number": 7021,
  "state": "closed",
  "title": "AppVeyor build matrix: more efficient build job split to reduce total time by another 5 minutes",
  "updated_at": "2018-06-12T00:18:47Z"
}