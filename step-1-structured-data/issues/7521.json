{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7521",
  "author": "mklement0",
  "body": "Follow-up from #7434 and related to #7498.\r\n\r\nNote that this is a longstanding, albeit undocumented, behavior, and changing it now may break existing scripts, so there are two possible resolutions:\r\n\r\n* Conclude that changing this would break too many scripts and therefore make do with  _documenting_ the surprising / inconsistent behavior.\r\n\r\n* Conclude that this is a [Bucket 3 change](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) and make the change nonetheless.\r\n\r\nThe current behavior - quietly returning nothing and signaling success in `$?` - deviates from the typical behavior of asking for specific entities with literal names, e.g., `Get-Item NoSuch`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nAsk for nonexistent type data with a type name that _doesn't include wildcard characters_:\r\n\r\n```powershell\r\nGet-TypeData NoSuchType\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nA non-terminating error indicating that no such type data is loaded into the current session.\r\n`$?` should indicate `$False`\r\n\r\nThe error message should be similar to the one for `Get-FormatData` (which is suboptimal as of this writing), which, modeled on my [suggestion here](https://github.com/PowerShell/PowerShell/pull/7434#issuecomment-412936239), could be something like:\r\n```none\r\nNo extended type data for type name '{0}' has been loaded into the current session.\r\nNote that type names must be specified exactly as defined and are typically full .NET type names.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nNothing (`[System.Management.Automation.Internal.AutomationNull]::Value`) is output, and `$?` reflects `$True`.\r\n\r\nWhile this behavior may make sense for _wildcard_-based arguments, it doesn't for literal ones.  \r\n\r\nCompare this to the behavior of cmdlets such as `Get-Item`, `Get-ChildItem`, `Get-Content`, ..., which all fail if a given non-wildcard path doesn't identify an _existing_ file.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.4 on macOS 10.13.6\r\nPowerShell Core v6.1.0-preview.4 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-preview.4 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\nWindows PowerShell v5.1.17134.165 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I really like the idea of the change, but I believe it will break *a lot* of existing scripts.  Take this function for example.\r\n\r\n```powershell\r\nfunction Test-Function {\r\n    [CmdletBinding()]\r\n    param()\r\n    begin {\r\n        # Arbitrary intialization code\r\n        if (-not (Get-Module ModuleThatMightChangeCodePath)) {\r\n            Write-Warning 'Recommended module was not found'\r\n        }\r\n    }\r\n    end {\r\n        if ($false) {\r\n            # Conditional error hit, caller can use `ErrorAction` to determine how this is handled.\r\n            Write-Error 'Possible problem!'\r\n        }\r\n\r\n        # Do real work. This won't be hit if Get-Module writes a non-terminating error and\r\n        # ErrorAction is stop\r\n        return $true\r\n    }\r\n}\r\n\r\n# Returns $true if condition is not hit.\r\nTest-Function -ErrorAction Stop\r\n\r\nfunction Get-Module {\r\n    [CmdletBinding()]\r\n    param([string] $Name)\r\n    end {\r\n        Write-Error 'Not found'\r\n    }\r\n} \r\n\r\n# Always fails during initialization\r\nTest-Function -ErrorAction Stop\r\n```\r\n\r\nThis is something I do pretty frequently.  Use a command like `Get-Module` while doing some validation and then continue on with the rest of the command.  Now since the error `Get-Module` would throw is non terminating, alone it doesn't really affect anything.  But if I use this function in a script, and I expect to be able to force that *expected* error to be terminating, that function breaks unexpectedly.\r\n\r\nI suspect this is a pretty common pattern, and the discussed change would significantly hurt script portability if it was made across the board.\r\n\r\n",
      "created_at": "2018-08-17T16:56:19Z",
      "updated_at": "2018-08-17T16:56:19Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "In the community call, it was mentioned that there really should be `Test-Module` function to do it. The problem is the breaking change.\r\n\r\nI think we should take a step back from these types of changes and focus on a deprecation process to manage breaking changes. Upgrading versions should require minimal changes to existing code to make it easy to update to incremental releases and have warnings and error messages to help a scripter update their code. \r\n\r\nFor example, this fix could have a warning to migrate to a new `Test-Module` cmdlet if trying to test for a condition. ",
      "created_at": "2018-08-18T03:56:58Z",
      "updated_at": "2018-08-18T03:56:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, by itself it does break the breaking change contract.  However, in this specific case we agree the current behavior is wrong and inconsistent with our desired intent.  Agree that this is a bucket 3 risk and don't expect users to leverage this cmdlet in automation, so we are ok with accepting this change.",
      "created_at": "2018-11-07T23:51:47Z",
      "updated_at": "2018-11-07T23:51:47Z"
    }
  ],
  "created_at": "2018-08-14T15:20:34Z",
  "labels": [
    "Up-for-Grabs",
    "Issue-Discussion",
    "Breaking-Change",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 7521,
  "state": "open",
  "title": "Get-TypeData with a non-wildcard type name that  matches no loaded type data quietly returns nothing",
  "updated_at": "2018-11-07T23:53:49Z"
}