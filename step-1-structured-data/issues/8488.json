{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8488",
  "author": "Meir017",
  "body": "## Question\r\n\r\nIs there a reason that all of the tests are written in powershell and there are no tests for the internals? (parser, tokenizer) or is it just for legacy reasons?\r\n\r\nHaving the tests written in C# will improve the development process since we'll be able to debug the tests properly",
  "closed_at": "2018-12-21T22:41:45Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I can't say for sure, but I suspect the answer might include the phrase \"that's a lot of work\". The tokenizer alone is over 7k lines of code, and Parser.cs is somewhere around 12k if memory serves? I shudder at the thought of the sheer amount of tests you'd need to effectively check all of that thoroughly.\r\n\r\nIt may also be too time consuming to run tests across the entire codebase in both languages; if the functionality can be assured in the resulting language, that might be sufficient and a little more pragmatic than doubling up on tests; PowerShell is made to run PowerShell script and not just its own C# code, after all, in a sense.\r\n\r\nBut I would be interested to hear the PS team's perspective, indeed! \ud83d\ude04 ",
      "created_at": "2018-12-18T21:55:55Z",
      "updated_at": "2018-12-18T21:56:30Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Actually, there were some C# tests for the parser, but they were never open sourced. Coverage was minimal, it turns out to be much easier and expressive to write tests in PowerShell.\r\n\r\nAnother big issue with C# tests is setting up internal state - something that happens naturally when tests are written in PowerShell. This was a frequent problem when the design of internals changed - tests were broken because they were dependent on that internal state in some not very useful way.\r\n\r\nLastly - the interactive nature of PowerShell combined with an iterative development style with small changes and frequent testing generally makes the development process straight forward. I've personally found many of my own parser bugs because `PSReadLine` was invoking the parser on every key, most of those bugs would be very tedious to write tests for.\r\n\r\nNow having said this - there are important scenarios that should not be tested from PowerShell. Hosting applications can use PowerShell without using script. Some bugs were missed because even though we had tests, they were written in PowerShell and did not cover the hosting scenario. This is perhaps orthogonal to the question though because it was specifically about the parser.",
      "created_at": "2018-12-19T06:44:30Z",
      "updated_at": "2018-12-19T06:44:30Z"
    },
    {
      "author": "Meir017",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr Thank you for the detailed answer,\r\n\r\n1. could you elaborate a bit about the internal state?\r\n2. how does writing the tests using PowerShell solve this issue?\r\n3. couldn't you just use the same internal state for all of the tests?\r\n\r\n ",
      "created_at": "2018-12-19T06:57:04Z",
      "updated_at": "2018-12-19T06:57:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It's been too long so I don't remember specifics about the internal state, just the pain, there was a lot of private reflection used.\r\n\r\nOne of the goals of the original C# tests was to test in isolation, true unit tests. That turns out to be difficult because there is a lot of coupling between components. Those tests solved that problem by using private reflection to set up the state (e.g. create a minimal runspace) in just the right way to keep the parser happy.\r\n\r\nWhen you write in PowerShell, you typically don't need to do that, the state (like a runspace) is already constructed.\r\n\r\nBut really - productivity is the biggest reason why the tests are largely PowerShell. I'm a big fan of static languages for reliability, so I'm reluctant to say PowerShell is a clear win for testing the PowerShell parser, but ultimately I think the gain in productivity (no compile and interactive command line development) leads to more tests with better coverage.",
      "created_at": "2018-12-19T07:21:52Z",
      "updated_at": "2018-12-19T07:21:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I refreshed xUnit test in last month and catch some race conditions. One was partially fixed (access to powershell.config.json). Second on MacOS is still opened.\r\nSo I found these tests useful especially for _hosting scenarios_.\r\nNow I believe that hosting scenarios are not reliable until we increase the number of xUnit tests. (Perhaps this is due to the above internal states.)\r\nIt will also allow us to control public interfaces.\r\nI opened #8400 to track xUnit tests.",
      "created_at": "2018-12-19T18:37:09Z",
      "updated_at": "2018-12-19T18:37:09Z"
    }
  ],
  "created_at": "2018-12-18T20:52:59Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8488,
  "state": "closed",
  "title": "add C# unit tests for the compiler",
  "updated_at": "2018-12-21T22:41:45Z"
}