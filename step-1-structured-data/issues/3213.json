{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3213",
  "author": "lzybkr",
  "body": "The cmdlet `Import-PowerShellDataFile` incorrectly assumes a `psd1` file is a simple hashtable like most typical module manifests.\r\n\r\nThe `psd1` file format actually allows many other things - the data could be a simple expression, array, etc.\r\n\r\nAnd in fact, a valid module manifest can also be more complicated.  For example, the following is a valid module manifest:\r\n\r\n```PowerShell\r\n@{} + @{ RootModule = \".\\foo.psm1\"; ModuleVersion = \"1.0.0\" }\r\n```\r\n\r\nThe above may seem contrived, but it end up being a useful way of conditionally including keys in a module manifest, e.g. based on an environment variable.",
  "closed_at": null,
  "comments": [
    {
      "author": "AlanMcBee",
      "author_association": "NONE",
      "body": "I have a less-contrived exampled that is hurting me now.\r\n\r\nMS Documentation says (see [Modules with compatible PowerShell Editions](https://docs.microsoft.com/en-us/powershell/scripting/gallery/concepts/module-psedition-support?view=powershell-7.2#option-2-use-psedition-variable-in-the-psd1-file-to-load-the-proper-dlls)) that a recommended way to create modules with support for multiple editions (Core + Desktop) is to use a check for `$PSEdition` in the `psd1` file. \r\n\r\nThis works fine for regular module usage. The `psd1` passes the `Test-ModuleManifest` check, and it imports and works just fine.\r\n\r\nHowever, I am trying to automate parts of the process of updating the manifest. Specifically, bumping the version number and rebuilding the various `*ToExport` keys (e.g. `FunctionsToExport` etc.). For this, I've been trying to use the safe(r) `Import-PowerShellDataFile`, but it complains with `InvalidOperationException`: `Cannot generate a PowerShell object for a ScriptBlock evaluating dynamic expressions.`\r\n\r\nIn my case, I can more or less ignore the offending entries in the `psd1` file (I'll be using `Invoke-Expression` when `Import-PowerShellDataFile` fails). But I need to use Option 2 (i.e. using the `$PSEdition` check) because I am using newer code syntax (null-coalescing) in the `ScriptsToProcess` script file for the Core edition, and a backward-compatible shim for the Desktop edition.\r\n\r\nPerhaps a simple switch on the `Import-PowerShellDataFile` that allows a minimal evaluation, such as only the AST that allows either this `$PSEdition` check, or simple string manipulation, etc.? Or maybe a parameter to select the language mode? Like `-LanguageMode RestrictedLanguage`, for instance?",
      "created_at": "2021-12-31T03:22:03Z",
      "updated_at": "2021-12-31T05:26:32Z"
    }
  ],
  "created_at": "2017-02-27T01:07:44Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 3213,
  "state": "open",
  "title": "Import-PowerShellDataFile incorrectly assumes psd1 is a single hashtable",
  "updated_at": "2021-12-31T05:26:32Z"
}