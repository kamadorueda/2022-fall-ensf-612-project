{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12137",
  "author": "tig",
  "body": "I'm building a Powershell CmdLet for awesome printing. It should function just like `Out-Print` but with all the bells and whistles of [winprint](https://tig.github.io/winprint).\r\n\r\n```powershell\r\nPS> get-help out-winprint\r\nNAME\r\n    Out-WinPrint\r\n\r\nSYNTAX\r\n    Out-WinPrint [[-Name] <string>] [-SheetDefintion <string>] [-ContentTypeEngine <string>]\r\n    [-InputObject <psobject>] [<CommonParameters>]\r\n\r\nALIASES\r\n    wp\r\n```\r\n\r\nFor this to work, I need to take the input stream (`InputObject`) of my `PSCmdLet` implementation and pass it through `Out-String` so it's all expanded and formatted. I'm thinking the best way to do this is to use `CommandInvocationIntrinsics.InvokeScript` to invoke `out-string`, which should give me the output as a string.\r\n\r\n\r\n```csharp\r\n            var text = this.SessionState.InvokeCommand.InvokeScript(@\"Out-String\", true, PipelineResultTypes.None, InputObject, null);\r\n            this.WriteObject(text, false);\r\n```\r\n\r\n# Expected behavior\r\n\r\nIf I understand how this is supposed to work, the var `text` above should be a `string` and `WriteObject` call should display what `out-string` would display (namely the result of `get-help out-winprint`).\r\n\r\n```none\r\nPS> get-help out-winprint -full | out-winprint\r\n\r\nNAME\r\n    Out-WinPrint\r\n\r\nSYNTAX\r\n    Out-WinPrint [[-Name] <string>] [-SheetDefintion <string>] [-ContentTypeEngine <string>]\r\n    [-InputObject <psobject>] [<CommonParameters>]\r\n\r\nALIASES\r\n    wp\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\nHowever, in reality `text` is string[] = { \"\" } (an array of strings with one element, an empty string).\r\n\r\n```none\r\nPS> get-help out-winprint -full | out-winprint\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nPerhaps I'm reading the docs incorrectly? \r\n\r\nSO question here: https://stackoverflow.com/questions/60712580/invoking-cmdlet-from-a-c-based-pscmdlet-providing-input-and-capturing-output",
  "closed_at": "2020-03-17T19:23:39Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you ever figure this one out... do let me know! I've been considering adding something like this to one of my own cmdlets. /cc @SeeminglyScience I know we've discussed some of this, so I'm hoping you might be able to point out what's wrong here / if there's a bug here we need to fix \ud83d\udc96 ",
      "created_at": "2020-03-16T21:00:14Z",
      "updated_at": "2020-03-16T21:00:14Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "And, FWIW, I've tried probably a dozen other ways to run `Out-String` from w/in a `PSCmdLet`. None worked (probably because I don't know what I'm doing). \r\n\r\nI've also tried to find other ways to format the input...",
      "created_at": "2020-03-16T21:16:18Z",
      "updated_at": "2020-03-16T21:16:18Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@tig Try this:\r\n```csharp\r\n    [Cmdlet(VerbsData.Out, \"WinPrint\")]\r\n    [OutputType(typeof(string))]\r\n    public class OutWinPrintCommand : System.Management.Automation.Cmdlet\r\n    {\r\n        [Parameter(ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]\r\n        public PSObject InputObject { get; set; }\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            var commandInfo = new CmdletInfo(\"Out-String\", typeof(Microsoft.PowerShell.Commands.OutStringCommand));\r\n            using var ps = System.Management.Automation.PowerShell.Create(RunspaceMode.CurrentRunspace);\r\n            ps.AddCommand(commandInfo);\r\n            ps.AddParameter(\"InputObject\", this.InputObject);\r\n            var result =  ps.Invoke<string>();\r\n            this.WriteObject(result, true);\r\n        }\r\n    }\r\n```\r\n\r\nresults in following:\r\n```powershell\r\nPS C:\\> Get-Help Out-WinPrint | Out-WinPrint\r\n\r\nNAME\r\n    Out-WinPrint\r\n\r\nSYNTAX\r\n    Out-WinPrint [-InputObject <psobject>] [<CommonParameters>]\r\n\r\n\r\nALIASES\r\n    None\r\n```",
      "created_at": "2020-03-16T23:11:42Z",
      "updated_at": "2020-03-16T23:11:42Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "Woot! That works.\r\n\r\n![image](https://user-images.githubusercontent.com/585482/76811681-11e3b300-67b8-11ea-96b6-4476bbf71964.png)\r\n\r\nHowever, it doesn't explain why `InvokeScript` is not working. Thanks a ton Andrew.",
      "created_at": "2020-03-17T00:58:48Z",
      "updated_at": "2020-03-17T00:58:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The *script* `Out-String` doesn't do anything with input.  You'd need to do `$input | Out-String`.\r\n\r\nThe example in the OP is the equivalent of `$input | & { Out-String }`. The example that works is equivalent to `Out-String -InputObject $input`.  The latter will work just fine depending on what you're trying to do. If you wanted to do this in `ProcessRecord` and capture table formatting iteratively you would want to use the `SteppablePipeline` API.",
      "created_at": "2020-03-17T01:17:28Z",
      "updated_at": "2020-03-17T01:19:55Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "> The _script_ `Out-String` doesn't do anything with input. You'd need to do `$input | Out-String`.\r\n\r\nI don't understand this. The implementation of `out-string`, from what I can see, absolutely uses `InputObject` when `-InputObject` is not specified. \r\n\r\n> The example that works is equivalent to `Out-String -InputObject $input`. The latter will work just fine depending on what you're trying to do. If you wanted to do this in `ProcessRecord` and capture table formatting iteratively you would want to use the `SteppablePipeline` API.\r\n\r\nI get now why @anmenaga's suggestion works. However, I'm seeing behavior after further testing that has me concerned about creating a new runspace here.\r\n\r\nThus, I want to figure out how to make `InvokeScript` work.\r\n\r\nI tried this, but it is not working either. I may still be missing something on how this is all supposed to work:\r\n\r\n    var result = this.SessionState.InvokeCommand.InvokeScript(@\"Out-String -InputObject $input\", true, PipelineResultTypes.None, null, _psObjects);\r\n\r\nI think this matches the pattern used in the create `new CmdLetInfo` example, doesn't i?\r\n\r\n",
      "created_at": "2020-03-17T18:15:13Z",
      "updated_at": "2020-03-17T18:15:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > The _script_ `Out-String` doesn't do anything with input. You'd need to do `$input | Out-String`.\r\n> \r\n> I don't understand this. The implementation of `out-string`, from what I can see, absolutely uses `InputObject` when `-InputObject` is not specified.\r\n\r\nYes, the command `Out-String` does handle input.  `InvokeScript` doesn't construct a single command processor with the command you specify, it invokes a script with the contents you provide. That's why it's functionally equivalent to `$input | & { Out-String }` (which does *not* actually handle input).\r\n> \r\n> > The example that works is equivalent to `Out-String -InputObject $input`. The latter will work just fine depending on what you're trying to do. If you wanted to do this in `ProcessRecord` and capture table formatting iteratively you would want to use the `SteppablePipeline` API.\r\n> \r\n> I get now why @anmenaga's suggestion works. However, I'm seeing behavior after further testing that has me concerned about creating a new runspace here.\r\n\r\nUse `PowerShell.Create(RunspaceMode.CurrentRunspace)` instead.  Make sure to test piping multiple objects.\r\n\r\n> Thus, I want to figure out how to make `InvokeScript` work.\r\n> \r\n> I tried this, but it is not working either. I may still be missing something on how this is all supposed to work:\r\n> \r\n> ```\r\n> var result = this.SessionState.InvokeCommand.InvokeScript(@\"Out-String -InputObject $input\", true, PipelineResultTypes.None, null, _psObjects);\r\n> ```\r\n> I think this matches the pattern used in the create `new CmdLetInfo` example, doesn't i?\r\n\r\n`null` needs to be the input you're trying to pass, right now you're specifying the parameter `args` which would put it in `$args`. Or leave it in `args` and use the variable `$args` instead.  Though you probably need to pipe, I don't think `Out-String`'s `InputObject` handles enumerating arrays. Also again make sure to test passing multiple objects.\r\n\r\nAlso `PipelineResultTypes.None` should probably be `Output`.  It doesn't actually make a difference right now since it doesn't look like that's hooked up properly, but if it's ever fixed your code will break.\r\n",
      "created_at": "2020-03-17T18:47:58Z",
      "updated_at": "2020-03-17T18:47:58Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "Ah... This works equivalently to the `CmdletInfo` example:\r\n\r\n    var result = this.SessionState.InvokeCommand.InvokeScript(@\"$input | Out-String\", true, PipelineResultTypes.None, _psObjects, null);\r\n        string text = result[0].ToString();\r\n\r\nSince my `ProcessRecord` expands arrays, this works as hoped when $input has multiple items:\r\n\r\n        protected override void ProcessRecord() {\r\n            if (InputObject == null || InputObject == AutomationNull.Value) {\r\n                return;\r\n            }\r\n\r\n            IDictionary dictionary = InputObject.BaseObject as IDictionary;\r\n            if (dictionary != null) {\r\n                // Dictionaries should be enumerated through because the pipeline does not enumerate through them.\r\n                foreach (DictionaryEntry entry in dictionary) {\r\n                    ProcessObject(PSObject.AsPSObject(entry));\r\n                }\r\n            }\r\n            else {\r\n                ProcessObject(InputObject);\r\n            }\r\n\r\n        }\r\n\r\nSo, false-alarm. `InvokeScript` works as advertised (although the documentation is horrible). I'm closing this issue and thanking y'all profusely for your patience.\r\n",
      "created_at": "2020-03-17T19:23:39Z",
      "updated_at": "2020-03-17T20:26:35Z"
    }
  ],
  "created_at": "2020-03-16T20:43:12Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 12137,
  "state": "closed",
  "title": "InvokeCommand.InvokeScript not returning Output",
  "updated_at": "2020-03-17T20:26:35Z"
}