{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1979",
  "author": "kilasuit",
  "body": "Now that we have PowerShell Open Sourced we should really move to decouple all of the modules that are shipped \"inbox\" into their own repos so that updates to these can be make separately to the core engine and can also be pulled from the PowerShell Gallery\r\n\r\nHowever this brings a number of additional challenges that warrants a detailed discussion and a plan of action as not to break the current build process.\r\n\r\nModules that should be decoupled and pulled in as submodules\r\n- [x]  - PowerShellGet **Priority**\r\n- [x]  - PackageManagement (this may already be out there in the OneGet Repo)\r\n- [x]  - Microsoft.PowerShell.ODataUtils\r\n- [x]  - PSReadline (already decoupled just needs to become a submodule)\r\n- [x]  - PowerShell.Archive (as above)\r\n- [x]  - Pester (as above but submodule to point to Pester not current submodule)\r\n- [ ]  - CimCmdlets\r\n- [ ]  - Microsoft.PowerShell.Diagnostics\r\n- [ ]  - Microsoft.PowerShell.LocalAccounts\r\n- [ ]  - Microsoft.PowerShell.Management\r\n- [ ]  - Microsoft.PowerShell.Security\r\n- [ ]  - Microsoft.WSMan.Management\r\n- [ ]  - PowerShell.Utility\r\n- [ ]  - PSDiagnostics\r\n- [ ]  - PSScheduledJob\r\n- [ ]  - PSWorkflow\r\n- [ ]  - PSWorkflowUtility \r\n\r\nThis is especially more important as in the differing subfolders in https://github.com/PowerShell/PowerShell/tree/master/src/Modules there are a number of code duplications due to the modules residing in multiple folders which is rather unnecessary and adds unneeded complexity for management of this repository going forward. \r\n",
  "closed_at": "2018-11-21T15:30:58Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We have definite plans to do this for some of the modules like PackageManagement, PowerShellGet, Pester, and PSReadline.\n\nUtility and Management might not be worth the hassle because of implicit or explicit circular dependencies.\n",
      "created_at": "2016-08-20T14:28:20Z",
      "updated_at": "2016-08-20T14:28:20Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I thought it may have been \"on the plans\" but couldn't see an issue for it so felt it best to raise one for visibility\n",
      "created_at": "2016-08-20T14:54:09Z",
      "updated_at": "2016-08-20T14:54:09Z"
    },
    {
      "author": "Carringguns",
      "author_association": "NONE",
      "body": "Thanks im not free and clear yet. Little cleanup still. But want go to the source and offer you the data. and its running state im keeping in a loop.\n",
      "created_at": "2016-08-20T15:03:28Z",
      "updated_at": "2016-08-20T15:03:28Z"
    },
    {
      "author": "Carringguns",
      "author_association": "NONE",
      "body": "Its design to eexplore when mission complete. Love this one. Better than most ive seen\n",
      "created_at": "2016-08-20T15:05:09Z",
      "updated_at": "2016-08-20T15:05:09Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "- [ ] PSReadLine @andschwa \n- [ ] Archive @vors\n- [ ] Pester @vors #1371\n\nThe current proposition is the following:\nMake sure that upstream version is suitable as a drop-in replacement.\nIf not, massage it to the point, when it is.\n\nReplace code by a git submodule.\n\ncc @andschwa @lzybkr \ncc @dlwyatt (for Pester)\n",
      "created_at": "2016-09-02T18:41:47Z",
      "updated_at": "2016-09-02T18:56:24Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Oh yeah. I can help save the history for PSReadLine (and fix incoming changes on the upstream repo).\n",
      "created_at": "2016-09-02T18:53:00Z",
      "updated_at": "2016-09-02T18:53:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@andschwa sweet, then I will assume you will take care about PSReadLine\n",
      "created_at": "2016-09-02T18:54:46Z",
      "updated_at": "2016-09-02T18:54:46Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Okay, sounds good.\n",
      "created_at": "2016-09-02T18:56:40Z",
      "updated_at": "2016-09-02T18:56:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "ODataUtils should be split out as well\n",
      "created_at": "2016-09-07T17:00:30Z",
      "updated_at": "2016-09-07T17:00:30Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "It is probably a bit late to change it, but Is there a better way to organize all the repos under https://github.com/PowerShell to handle splitting the code base more? \n\nIt makes perfect since to break out the modules, but it is a bit messy right now with all of the individual DSC repos + Documentation + RFC. There are 6 pages of repos already. I can imagine a dozen more springing up to clean up the code base and dozens more for new things.\n\nSomething to keep in mind for those of us watching the Repos! A landing page dedicated to source would probably be enough of it is self-maintaining (or just maintained). \n",
      "created_at": "2016-09-08T02:35:48Z",
      "updated_at": "2016-09-08T02:35:48Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "@dragonwolf83 - Agreed, probably worth opening an issue for this, although not sure where you would do that, given that it's an org-level issue : )\n\nCould go as simple as a readme that points to the various repos, with a little organization... or even something like GitHub Pages.  Ideally, the community could submit PRs and issues, so IMHO a Microsoft hosted site (unless fed by CI/CD from GitHub) would be less appropriate.\n\nCheers!\n",
      "created_at": "2016-09-10T00:47:04Z",
      "updated_at": "2016-09-10T00:47:04Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> A landing page dedicated to source would probably be enough of it is self-maintaining (or just maintained).\n\nI don't think it's worth the effort to be honest.\n\nThis is a generically applicable statement for any big github organization.\nTake https://github.com/Microsoft or https://github.com/google as examples.\n\nHow people are finding repos in these cases?\nTrying to list all the repos is not practical. There are projects that only a handful of people are interested in. With modern search engines (and also GitHub search) it's easy to find a particular project or explore interesting projects.\n\nAlso https://github.com/dotnet has a [github-pages hosted site](https://dotnet.github.io/) for the org, but there is no list of all projects there.\n",
      "created_at": "2016-09-10T00:59:50Z",
      "updated_at": "2016-09-10T01:00:19Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Talking about lists, there are a lot of lists under \"awesome\" umbrella.\n\nhttps://awesome.re\nhttps://github.com/alebcay/awesome-shell\n\nMaybe **awesome-powershell** would be something that community is interested in?\n",
      "created_at": "2016-09-10T06:27:13Z",
      "updated_at": "2016-09-10T06:27:13Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I'll update the Issue to include a list of modules that I think should be decoupled where reasonably possible and then if we raise a new issue for each module then we can track it properly as well with tasklists to see the progress\n",
      "created_at": "2016-09-12T10:03:06Z",
      "updated_at": "2016-09-12T10:03:06Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@vors @lzybkr  @andschwa @SteveL-MSFT - Please see the list of modules I think that need to be decoupled from this repository is now updated at the top of this issue in my initial comment\n",
      "created_at": "2016-09-12T13:19:43Z",
      "updated_at": "2016-09-12T13:19:43Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@vors @lzybkr @andschwa @SteveL-MSFT  - any further thoughts/comments to the suggested list at all?\n",
      "created_at": "2016-09-29T14:17:11Z",
      "updated_at": "2016-09-29T14:17:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kilasuit thanks for taking the lead on this.  the list looks good\n",
      "created_at": "2016-09-29T15:57:24Z",
      "updated_at": "2016-09-29T15:57:24Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I think we should be clear about the trade-offs and goals here.\nThings like Pester **must** be separate because it's a separate project, it just happened to be very central for out testing and we are using our fork temporarely.\n\nSo essentially for anything that is makes sense to be shipped on the gallery and updated from the gallery, we can do the decoupling. I.e. PSReadLine.\n\nDecoupling _can reduce complexity, but it can also create it_.\nI don't see value in separating core modules like `Microsoft.PowerShell.Management`: would it be intended to update from the gallery? If I need to fix a bug that spans across SMA and Microsoft.PowerShell.Management in this decoupling, it would be way harder.\n\nI think these module should stay in the repo:\n- PowerShell.Utility\n- Microsoft.PowerShell.Diagnostics\n- Microsoft.PowerShell.Management\n- Microsoft.PowerShell.Security\n- Microsoft.WSMan.Management\n- PSDiagnostics\n- CimCmdlets\n\nThese modules are for the Full CLR builds and hence again should stay in the repo\n- PSScheduledJob\n- PSWorkflow\n- PSWorkflowUtility\n",
      "created_at": "2016-09-29T23:21:04Z",
      "updated_at": "2016-09-29T23:21:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Microsoft.WSMan.Management and CimCmdlets should be separate since those two are related and likely used together should probably be in same repo.\n",
      "created_at": "2016-09-29T23:39:54Z",
      "updated_at": "2016-09-29T23:39:54Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors you mention:\n\n> Replace code by a git submodule.\n\nBut we're currently under the impression of bringing most of these pieces in via packages (PSReadLine, PowerShellGet, and Pester at least). We want to reduce submodules. Is that okay with you?\n",
      "created_at": "2016-10-06T20:29:23Z",
      "updated_at": "2016-10-06T20:29:23Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@andschwa as @lzybkr mentioned in #2405 pulling them in via packages is the right way long term as this will allow for a much better side by side story & could also make way for a better downlevel story too\n",
      "created_at": "2016-10-06T20:48:49Z",
      "updated_at": "2016-10-06T20:48:49Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I generally agree with @vors about which modules should stay in the PowerShell/PowerShell repo.\n\nMy line in the sand to decide what stays vs what is submoduled would be whether or not module updates are already or may become later available to downlevel versions of PowerShell.  If module updates do apply to downlevel versions of PowerShell, then use a submodule so that the module can be maintained independently as one that works for multiple versions of PowerShell, allowing for updates to be leveraged by all supported versions.  If not, then keep it in the PowerShell/PowerShell repo because it is bound to that project.\n\nPowerShellGet already has downlevel version support (although I don't think the way downlevel support is done in that module right now is the way to go, so there's some work to do there).  PSScriptAnalyzer has downlevel version support.  Microsoft.PowerShell.Archive is outside of PowerShell/PowerShell already, and currently requires version 5+, but it will have downlevel version support shortly once I submit my pull request.  Other core modules listed above in @vors post should stay in the main project IMHO.\n",
      "created_at": "2016-10-07T15:07:34Z",
      "updated_at": "2016-10-07T15:07:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I see some value in breaking out all modules - e.g. the recent improvement to `Join-Path` in `Microsoft.PowerShell.Management` and `Get-Credential` in `Microsoft.PowerShell.Security` are both useful and shouldn't require updating to a newer version of PowerShell.\n\nThat said, decoupling a couple of the core modules has some risk, so I'd consider that lower priority.\n",
      "created_at": "2016-10-07T16:07:20Z",
      "updated_at": "2016-10-07T16:07:20Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "PSGet and OneGet are separated in #2711\n",
      "created_at": "2016-11-20T08:04:04Z",
      "updated_at": "2016-11-20T08:04:04Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello  - please have a look over this issue from 2016.\r\n\r\nIs there any chance could we get some update/traction on this to make things easier/better going forward PowerShell 6.1 onwards",
      "created_at": "2018-03-05T20:31:33Z",
      "updated_at": "2018-03-05T20:31:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The only thing left to complete is PSReadline.\r\nI agree with @vors and don't see any benefit in moving out the rest of the modules. No one is actively developing these modules now. What prevents? Does someone have a big additions to (ex.) Odatautil in their repositories? Why can not commit here?\r\n\r\nI would have seen more benefits in moving very popular cmdlets to this repository after they became stable.\r\n",
      "created_at": "2018-03-06T05:28:15Z",
      "updated_at": "2018-03-06T05:28:15Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Bumping this for a review as PSReadline was recently decoupled and there is still a checklist (checked off PSReadline just now) that needs to be confirmed/denied if/when there are plans to do so  ",
      "created_at": "2018-06-14T02:08:57Z",
      "updated_at": "2018-06-14T02:08:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "ODataUtils and Pester is in separate repos.",
      "created_at": "2018-06-14T05:30:35Z",
      "updated_at": "2018-06-14T05:31:25Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "updated the checkboxes - thanks @iSazonov ",
      "created_at": "2018-06-14T13:32:42Z",
      "updated_at": "2018-06-14T13:32:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can close the issue. All works is done. The remaining modules will still be in this repository as discussed. \r\n/cc @SteveL-MSFT ",
      "created_at": "2018-11-21T14:38:15Z",
      "updated_at": "2018-11-21T14:38:15Z"
    }
  ],
  "created_at": "2016-08-20T13:37:28Z",
  "number": 1979,
  "state": "closed",
  "title": "Decouple the bundled modules to seperate Repo's",
  "updated_at": "2018-11-21T15:30:58Z"
}