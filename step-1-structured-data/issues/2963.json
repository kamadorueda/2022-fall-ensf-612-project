{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2963",
  "author": "juneb",
  "body": "Steps to reproduce\r\n------------------\r\n1. Define some PowerShell classes in a module file (ClassTester.psm1).\r\n2. In the manifest, leave RootModule empty and place the module name in the NestedModules key value.\r\n```\r\nModuleToProcess = ''\r\nNestedModules = 'ClassTester.psm1'\r\n```\r\n3. In a script, use a Using module statement to import the module and its classes, use the New static method to instantiate one of the classes defined in ClassTester.psm1, and then use New-Object on the same class. \r\n\r\n```\r\nusing module ClassTester\r\n$myDog = [Dog]::New('Fido')\r\n$myDog.Bark()\r\n\r\nNew-Object -TypeName Dog -ArgumentList 'Fluffy'\r\n$myDog.Bark()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nBoth the New method and New-Object cmdlet should work.\r\n\r\nActual behavior\r\n---------------\r\nNew works, but New-Object generates an error.\r\n\r\n```\r\n'Woof!,' said Fido  # New method works\r\nNew-Object : Cannot find type [Dog]: verify that the assembly containing this type is loaded.\r\nAt C:\\ps-test\\Test-ClassTester.ps1:22 char:11\r\n+ $fluffy = New-Object -TypeName Dog -ArgumentList 'Fluffy'\r\n+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n    + FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n```\r\nName                           Value\r\n----                           -----\r\nGitCommitId                    v6.0.0-alpha.14\r\nPSRemotingProtocolVersion      2.3\r\nBuildVersion                   3.0.0.0\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nCLRVersion\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "xavylon",
      "author_association": "NONE",
      "body": "Solution: The issue is that you must call the constructor via a method call when you invoke the New-Object cmdlet. See the attached example code.\r\n\r\n```powershell\r\n# A constuctor is a method. It must be called as such.\r\n# you cannot use a argument list for this.\r\n\r\n$dog = New-Object Dog(\"Fido\")\r\n$dog.bark()\r\n```",
      "created_at": "2017-06-14T11:38:58Z",
      "updated_at": "2018-04-13T23:32:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@xavylon: \r\n\r\nThere is _no_ syntax issue here:\r\n\r\n`New-Object -TypeName Dog -ArgumentList 'Fido'` _is_ the proper (if verbose) way to call a constructor via `New-Object`; its concise equivalent is `New-Object Dog Fido` (yes, the quotes are optional here).\r\n\r\nIn your example, `Dog(\"Fido\")` is _not_ a method call; it's a syntax based on a misconception that's unfortunately very common and persists because it just so _happens_ to work:\r\n\r\n`New-Object` is a _command_ and therefore accepts _arguments_ in _argument mode_, not expression mode (you can only perform method calls in the latter).\r\n\r\n`Dog` and `(\"Fido\")` are therefore separate _positional arguments_, which bind to `-TypeName` and `-ArgumentList`, respectively.\r\n\r\n\r\n",
      "created_at": "2018-04-14T20:27:02Z",
      "updated_at": "2018-04-14T20:27:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@juneb:\r\n\r\nFrom what I can tell - at least as of PowerShell Core v6.0.2 - even the static `::new()` method doesn't see classes from nested modules.\r\n\r\nIt looks like the crux of the issue is that nested modules are imported with the (equivalent of) `Import-Module` rather than `using`, rendering any of the nested module's classes inaccessible - whether via `::new()` or via `New-Object`.\r\n",
      "created_at": "2018-04-14T20:37:29Z",
      "updated_at": "2018-04-14T20:37:29Z"
    }
  ],
  "created_at": "2017-01-06T01:53:18Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 2963,
  "state": "open",
  "title": "New-Object doesn't work with classes in nested modules",
  "updated_at": "2018-04-14T20:37:30Z"
}