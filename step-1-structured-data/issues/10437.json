{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10437",
  "author": "HumanEquivalentUnit",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nPS C:\\> ${test?} = 2\r\nPS C:\\> ${testA} = 3\r\nPS C:\\> Get-Variable -Name 'test?'    # this acts as a wildcard but there's no -LiteralName\r\n\r\nName                           Value\r\n----                           -----\r\ntest?                          2\r\ntestA                          3\r\n```\r\n\r\nSimilar behaviour with `Get-Member -Name 'Test?'` acting as a wildcard with no -LiteralName to avoid that:\r\n\r\n```powershell\r\nPS C:\\> $o=[pscustomobject]@{\r\n>>  'test?' = 1\r\n>>  'testA' = 2\r\n>> }\r\nPS C:\\> $o | get-member -name 'test?'    # should get 1 property, exact match, \r\n                                         # or have a way to do that\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\nName  MemberType   Definition\r\n----  ----------   ----------\r\ntest? NoteProperty int test?=1\r\ntestA NoteProperty int testA=2\r\n```\r\n\r\nUnexpectedly, putting a backtick escape by the question mark gets the first variable, but backtick in a single quoted string is  literal backtick, so that's not the variable's name. This broken(?) workaround does not behave the same for Get-Member:\r\n\r\n```powershell\r\nPS C:\\> Get-Variable -Name 'test`?'    # does get 1 match, but should get 0\r\n\r\nName                           Value\r\n----                           -----\r\ntest?                          2\r\n\r\nPS C:\\> PS C:\\> $o | get-member -name 'test`?'    # correctly does not, \r\n                                                  # but inconsistent with get-variable\r\nPS C:\\>\r\n```\r\n\r\n----\r\n\r\nRelated to backticks in variable names, but perhaps a separate issue, setting a variable with a backtick in the name behaves strangely:\r\n\r\n```powershell\r\nPS C:\\> ${test`?} = 5\r\nPS C:\\> get-variable test*\r\n\r\nName                           Value\r\n----                           -----\r\ntest?                          5               # name missing backtick?\r\n\r\nPS C:\\> New-Variable -Name 'test`?' -Value 6    # this does keep backtick in the name\r\nPS C:\\> get-variable te*\r\n\r\nName                           Value\r\n----                           -----\r\ntest?                          5\r\ntest`?                         6        # from new-variable \r\n\r\nPS C:\\> ${test`?}    \r\n5                            # wrong value, should be 6?\r\n```\r\n\r\n # Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@HumanEquivalentUnit \r\n\r\n> Unexpectedly, putting a backtick escape by the question mark gets the first variable, \r\n\r\nWhy do you say this is unexpected? It's just normal PowerShell quoting. The backtick quotes\r\nthe question mark (wildcard character) so it matches literally. And of course if you have double quotes, you need two backticks.\r\n\r\nBTW: the *-variable commands are \"funny\" because they are essentially unnecessary. Pretty much every thing you need to do with variables can be done with the provider cmdlets (which do have `-literalpath`. For example:\r\n```powershell\r\nget-item -literal variable:test?\r\n```\r\nThe variable cmdlets were created in version 1 so there would be an example of a \"complete cmdlet family\". \r\n\r\nI'm afraid I don't understand your comments WRT `Get-Member`. As near as I can everything works fine.\r\n\r\n> Related to backticks in variable names, but perhaps a separate issue, setting a variable with a backtick in the name behaves strangely:\r\n\r\nYes. Don't do that :-)  Embedding the escape character in a name is going to make things awkward.\r\n",
      "created_at": "2019-08-27T20:22:01Z",
      "updated_at": "2019-08-27T20:22:01Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> Why do you say this is unexpected? [..] I'm afraid I don't understand your comments WRT Get-Member. As near as I can everything works fine.\r\n\r\nI think of backtick as an escape character at parse time (for line continuation), or in expandable strings. I expected a literal string to make it a literal backtick, and having it treated as an escape character lower down the stack felt like it was being reinterpreted from passive literal character back to active escape character, and that felt surprising.\r\n\r\nI can see that I ought to be more nuanced and careful around wildcarding, but unless I'm still confused (quite possible), I think `Get-Variable` acts how you describe with the backtick treating it as an escape and a literal question mark, and `Get-Member` acts closer to how I expected, treating it as a literal backtick and a literal question mark; these two examples seem like they should behave the same regarding backtick and question mark, and return one thing each, but they don't:\r\n\r\n```powershell\r\n${test?}=1\r\nget-variable -name 'test`?'    # has output\r\n\r\n[pscustomobject]@{'test?'=1} | get-member -name 'test`?'    # no output\r\n```\r\n\r\n> BTW: the *-variable commands are \"funny\" because they are essentially unnecessary. Pretty much every thing you need to do with variables can be done with the provider cmdlets (which do have -literalpath.\r\n\r\nThat is interesting; the `variable:` provider is one I have not explored much at all.\r\n\r\n> Yes. Don't do that :-) \r\n\r\nhaha, ok :-)   I was only exploring, not about to use it in production code.",
      "created_at": "2019-08-29T23:52:17Z",
      "updated_at": "2019-08-29T23:53:14Z"
    }
  ],
  "created_at": "2019-08-23T19:31:49Z",
  "number": 10437,
  "state": "open",
  "title": "Get-Variable and Get-Member don't handle names with \"?\" because of wildcarding",
  "updated_at": "2019-08-29T23:53:14Z"
}