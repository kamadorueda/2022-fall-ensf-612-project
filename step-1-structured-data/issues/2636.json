{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2636",
  "author": "joeyaiello",
  "body": "If you start Windows PowerShell from PowerShell Core, you get the `$env:PSModulePath` from PowerShell Core. \r\n\r\nIn my opinion, this should be a `6.0.0` blocker. Also, if any work needs to be done in Windows PowerShell to fix this, we should do it ASAP. \r\n\r\nSteps to reproduce\r\n------------------\r\nFrom PowerShell Core:\r\n```powershell\r\nStart-Process powershell\r\n```\r\n\r\nThis will open a new instance of Windows PowerShell. From this instance:\r\n```powershell\r\n$env:PSModulePath\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n`C:\\Users\\jaiello\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules`\r\n\r\nAlso, PSReadline should load. \r\n\r\nActual behavior\r\n---------------\r\n`C:\\Users\\jaiello\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules;c:\\program files\\powershell\\6.0.0.12\\Modules`\r\n\r\nAlso, PSReadline doesn't load because it can't be found. \r\n\r\nEnvironment data\r\n----------------\r\nFor PowerShell Core:\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\nGitCommitId                    v6.0.0-alpha.12\r\nCLRVersion\r\nBuildVersion                   3.0.0.0\r\nPSRemotingProtocolVersion      2.3\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n```\r\n\r\nFor Windows PowerShell;\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14931.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14931.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2018-08-29T21:05:56Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is expected because subprocess always inherits environment variables of parent process. If we change the default behavior it can confuse users.\r\nWe would backup `PSModulePath` on startup and restore before create subprocess. Or create `$env:PSModulePath_Backup` and check it on PowerShell startup. The second is seems easier.",
      "created_at": "2017-03-09T15:06:40Z",
      "updated_at": "2017-03-09T15:06:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree with @iSazonov this is `by-design` as child processes are expected to inherit environment from parent.  The way to address this may be to have PSModulePath in https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0015-PowerShell-StartupConfig.md",
      "created_at": "2017-03-09T19:23:01Z",
      "updated_at": "2017-03-09T19:23:01Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I understand why it happens, but I think our story for side-by-side Windows PS/PS Core could be dependent upon this not being obtuse if Standard 2.0 doesn't provide the level of compatibility we need. It's just non-obvious to people. ",
      "created_at": "2017-04-17T18:11:59Z",
      "updated_at": "2017-04-17T18:11:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Then the only way is to abandon the environment variable to both versions and use a global variable from the configuration file(s).",
      "created_at": "2017-04-17T18:24:22Z",
      "updated_at": "2017-04-17T18:24:22Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I wouldn't say the *only* way, but yes that's how I would naively implement it. You could also query the machine env variable in other ways. \r\n\r\nEither way, I didn't mean to imply we should update this right now. It's just important that we revisit it as compat testing for 2.0 progresses. We have to optimize for the glide path from Windows PS to PS Core. ",
      "created_at": "2017-04-17T18:27:20Z",
      "updated_at": "2017-04-17T18:27:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Mark the Issue with Wait-NetStandard20?\r\n\r\nStill the only ways :-)\r\n- add PSModulePathCore\r\n- use core path prefix in PSModulePath:   \"c:\\temp; core:c:\\powershellCoreModules\"",
      "created_at": "2017-04-17T18:36:08Z",
      "updated_at": "2017-04-17T18:36:08Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Adding label to reassess after we analyze FullCLR/CoreCLR compat",
      "created_at": "2017-04-17T21:47:42Z",
      "updated_at": "2017-04-17T21:47:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps we could consider having `PSModulePath` defined in [StartupConfig](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0015-PowerShell-StartupConfig.md) instead of a different env var if we go down the breaking change path",
      "created_at": "2017-05-11T16:10:58Z",
      "updated_at": "2017-05-11T16:10:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This should be an RFC",
      "created_at": "2017-05-16T21:49:39Z",
      "updated_at": "2017-05-16T21:49:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello now that we can use many Windows PowerShell modules from within PSCore6, I'm moving this out of 6.0.0-HighPriority",
      "created_at": "2017-08-15T00:08:25Z",
      "updated_at": "2017-08-15T00:08:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello @SteveL-MSFT Seems we resolved the Issue in 6.1.0. Can we close?",
      "created_at": "2018-08-29T13:44:13Z",
      "updated_at": "2018-08-29T13:44:13Z"
    }
  ],
  "created_at": "2016-11-05T22:52:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 2636,
  "state": "closed",
  "title": "Windows PowerShell inherits PSModulePath from PowerShell Core",
  "updated_at": "2018-08-29T21:05:56Z"
}