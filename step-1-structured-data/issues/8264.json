{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8264",
  "author": "erwinwolff",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nIt happens with this C# code using automation.\r\n\r\n```\r\nusing (PowerShell PowerShellInstance = PowerShell.Create())\r\n{\r\nPowerShellInstance.AddScript(File.ReadAllText(Path.Combine(_configuration[repoPath], \"build.ps1\")));\r\nvar output = PowerShellInstance.Invoke();\r\n}\r\n```\r\n\r\nwithin the build.ps1 script this command is executed:\r\n\r\n`nuget update -self`\r\n\r\nThere are no errors when executed in an actual command console. However, when the C# automation is used the output is limited to:\r\n\r\n```\r\nChecking for updates from https://www.nuget.org/api/v2/.\r\nCurrently running NuGet.exe 4.7.1.\r\nNuGet.exe is up to date.\r\n```\r\nAnd then the execution of build.ps1 is over.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe powershell instance loads and executes the build script to its very end. Including the nuget update.\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nAt some point, nuget.exe (not a powershell script) executes, quits and also prematurely kills the build.ps1 script.\r\n\r\n",
  "closed_at": "2018-11-19T12:01:39Z",
  "comments": [
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "These packages are used  \r\n\r\n```\r\n<PackageReference Include=\"Dapper\" Version=\"1.50.5\" />\r\n    <PackageReference Include=\"libgit2sharp\" Version=\"0.25.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Common\" Version=\"2.9.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.WSMan.Management\" Version=\"6.1.0\" />\r\n    <PackageReference Include=\"MySqlConnector\" Version=\"0.45.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json.Schema\" Version=\"3.0.10\" />\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.1.0\" />\r\n```",
      "created_at": "2018-11-14T13:21:55Z",
      "updated_at": "2018-11-14T13:21:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Does the script work as expected if you run nuget without parameter \"self\"?",
      "created_at": "2018-11-14T13:35:13Z",
      "updated_at": "2018-11-14T13:35:13Z"
    },
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "Within the regular command console: yes\r\nWithin the Powershell Automation context: no\r\n",
      "created_at": "2018-11-14T13:44:37Z",
      "updated_at": "2018-11-14T13:44:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you share more information (sample script and C# code) in gist?",
      "created_at": "2018-11-14T15:14:09Z",
      "updated_at": "2018-11-14T15:14:09Z"
    },
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "sure",
      "created_at": "2018-11-14T15:14:30Z",
      "updated_at": "2018-11-14T15:14:30Z"
    },
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "After some more researched it turned out NuGet wasn't the cause of the problems. It was a Write-Host debug message that wasn't appended to the PSObject output collection. Strangely, the output of \"echo\" is, but the output of \"Write-Host\" isn't.\r\n\r\nWhat brings me to the next point: why is the output of Write-Host not added to the PSObject collection? It would have saved me time debugging.",
      "created_at": "2018-11-15T11:52:11Z",
      "updated_at": "2018-11-15T11:52:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect that `Write-Host` writes to informational stream if no console is.",
      "created_at": "2018-11-15T12:24:42Z",
      "updated_at": "2018-11-15T12:24:42Z"
    },
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "No it doesn't\r\n\r\n![2018_11_15_13_38_59_consoleapp3_debugging_microsoft_visual_studio](https://user-images.githubusercontent.com/602021/48553506-0cccd600-e8dc-11e8-9c15-5b0b2d72a2de.png)\r\n",
      "created_at": "2018-11-15T12:40:58Z",
      "updated_at": "2018-11-15T12:40:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Write-Host doesn't write to output. It writes to the Information stream within PS. \r\n\r\nIf you want its output to be sent to the output stream, you can append `6>&1` ",
      "created_at": "2018-11-15T12:50:57Z",
      "updated_at": "2018-11-15T13:00:41Z"
    },
    {
      "author": "erwinwolff",
      "author_association": "NONE",
      "body": "Isn't it odd that a function called \"Write-Host\" doesn't write to the output?",
      "created_at": "2018-11-15T13:05:22Z",
      "updated_at": "2018-11-15T13:05:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell can works without console. In the case Write-Host output is not silently ignored - it writes to Informational stream.  https://blogs.technet.microsoft.com/heyscriptingguy/2014/03/30/understanding-streams-redirection-and-write-host-in-powershell/",
      "created_at": "2018-11-15T13:09:20Z",
      "updated_at": "2018-11-15T13:09:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Odd? Not really. If you want to write to output, there's the `Write-Output` function. `Write-Host` is designed to write to the _interactive_ console display without placing objects in the standard output stream, as there are many cases users want informational displays without having to later filter them out of their output collections. \ud83d\ude04 ",
      "created_at": "2018-11-15T13:18:02Z",
      "updated_at": "2018-11-15T13:18:02Z"
    }
  ],
  "created_at": "2018-11-14T13:17:01Z",
  "number": 8264,
  "state": "closed",
  "title": "Powershell 6 stops executing when internal normal executable finishes",
  "updated_at": "2018-11-19T13:00:40Z"
}