{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5809",
  "author": "daxian-dbw",
  "body": "The tasks that I can think of are:\r\n1. maybe replace the singleton with static methods\r\n2. schema check\r\n3. synchronize updating the configuration file from multiple processes.\r\n   - we currently have a read/write lock to protect updating/reading the config file. The lock doesn't help synchronize writing access from multiple processes.\r\n4. holding the config file in one process (e.g. `write` access or `none` share) will cause a new pwsh instance to crash at startup because it cannot access the config file and we don't deal with the `IOException`.\r\n   - we could return default value when the config file is not accessible, but need to consider to not allow bypassing security settings because of that.\r\n      - one option: have two sets of default values for security settings. One set is used when the config file doesn't exist or the security setting is not defined in the file; the other set is used when the file exists but not accessible, to enforce all security features that are configurable in the config file.\r\n\r\n#### Repro step for 4:\r\nFirst, run the following code to hold the config file of the current pwsh\r\n```\r\n$path = \"path-to-powershell.config.json\"\r\n$mode = \"Open\"\r\n$access = \"Read\"\r\n$share = \"None\"\r\n\r\n$file = [System.IO.File]::Open($path, $mode, $access, $share)\r\n```\r\nThen, start a new instance of the pwsh, and it will crash.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could make public API to enable developers to work consistently with config files.",
      "created_at": "2018-01-07T17:52:25Z",
      "updated_at": "2018-01-07T17:52:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems currently we read config option step-by-step by demand. I think re-read all config file(s) in one step and cache it is more optimal.",
      "created_at": "2018-01-07T18:01:30Z",
      "updated_at": "2018-01-07T18:01:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Suggestions:\r\n- use Windows PowerShell GPO by default to not allow users ignore security and Enterprise policies for PowerShell\r\n- add new GPO branch for PowerShell Core to allow Enterprises configure Windows PowerShell and PowerShell Core separately.\r\n- use GPO policies (Software\\Policies\\Microsoft\\Windows\\PowerShell) and GPO config options (Software\\Microsoft\\Windows\\PowerShell)\r\n- we want #5804 RegisterGPNotification we should do the same for config files too.",
      "created_at": "2018-01-07T18:19:02Z",
      "updated_at": "2018-01-07T18:19:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Configuration priority:\r\n\r\nWindows | Unix\r\n-| -\r\nGPO Computer Policy for PowerShell Core | File\r\nGPO Computer Policy for Windows PowerShell | -\r\nFile Computer-Wide Version | File Computer-Wide Version\r\nGPO User Policy | ?\r\nFile Local Version | File Local Version\r\nFile User-Wide (AppData) | File User-Wide\r\nGPO Computer Config | ?\r\nGPO User Config | ?\r\n",
      "created_at": "2018-01-07T18:57:47Z",
      "updated_at": "2018-01-07T18:57:47Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "`GPO Computer Policy for Windows PowerShell` is not considered when in PS Core as this policy is for a separate product.  If we want to honor policy for Windows PowerShell, we should not introduce a policy for `PowerShell Core`.",
      "created_at": "2018-01-08T18:56:28Z",
      "updated_at": "2018-01-08T18:58:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov @TravisEz13 GPO policy related discussion should happen in a new issue. This issue is for improving the APIs for reading settings from `powershell.config.json` file. The precedence order of policy related settings is another layer on top of the configuration APIs, not the configuration APIs themselves.",
      "created_at": "2018-01-08T19:46:55Z",
      "updated_at": "2018-01-08T19:48:32Z"
    }
  ],
  "created_at": "2018-01-06T23:55:38Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 5809,
  "state": "open",
  "title": "Improve the configuration APIs in PSConfiguration.cs",
  "updated_at": "2019-02-22T18:00:26Z"
}