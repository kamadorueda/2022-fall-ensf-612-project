{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6528",
  "author": "rjmholt",
  "body": "Not my idea, but had a conversation with someone last week (and asked him to open an issue...).\r\n\r\nHe has many situations where cmdlets have a number of common parameters and then each has one or two of its own. So what he'd like to do is:\r\n\r\n```powershell\r\n$commonParameters = @{\r\n    Foo = \"Duck\"\r\n    Bar = \"Moo\"\r\n}\r\n\r\nStart-FirstThing <splat-syntax>$commonParameters + @{ Arg = 6 }</splat-syntax>\r\n\r\nStart-SecondThing <splat-syntax>$commonParameters + @{ Quux = \"Bang\" }</splat-syntax>\r\n```\r\n\r\nNow, I know there are a bunch of ways to come close to this and a few workarounds. **But**, I personally like the sentiment that *expressions* should be splattable, rather than *variables*.",
  "closed_at": "2018-04-03T00:35:06Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "So this\r\n\r\n```powershell\r\n$Params = @{\r\n    Name = 'Get-Command'\r\n    Module = 'Microsoft.PowerShell.Core'\r\n}\r\nget-command @Params -CommandType 'Cmdlet' -All\r\n```\r\n\r\nand this\r\n\r\n```powershell\r\n$Params = @{\r\n    Name = 'Get-Command'\r\n    Module = 'Microsoft.PowerShell.Core'\r\n}\r\n$Params2 = @{\r\n    CommandType = 'Cmdlet'\r\n    All = $true\r\n}\r\nget-command @Params @Params2\r\n````\r\n\r\nAre already doable. If those combined with [RFC0002](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md), would that fulfill what they are seeking?",
      "created_at": "2018-03-29T17:35:09Z",
      "updated_at": "2018-03-29T17:35:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "for example\r\n\r\n```powershell\r\nStart-FirstThing @commonParameters @@( Arg = 6; Baz = 'Foo' }\r\n```",
      "created_at": "2018-03-29T17:36:58Z",
      "updated_at": "2018-03-29T17:36:58Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Aha! I searched for issues, but should have looked in the RFCs too. Yes, @lzybkr's RFC describes this perfectly.",
      "created_at": "2018-03-29T18:09:37Z",
      "updated_at": "2018-03-29T18:09:37Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, as @markekraus  points out, please see the existing [Generalized Splatting RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md) \r\n\r\nOn a more specific note regarding command mode syntax, in the following:\r\n```\r\nStart-FirstThing <splat-syntax>$commonParameters + @{ Arg = 6 }\r\n```\r\n`+` and `@{Arg = 6}` will be parsed as discrete arguments. `+` is just an argument value token in command mode, as in:\r\n```\r\nPS[1] (43) > write-output 2 + 2 # Command with 3 arguments\r\n2\r\n+\r\n2\r\nPS[1] (44) > write-output 2+2 # Command with 1 argument\r\n2+2\r\nPS[1] (45) > write-output (2+2) # Command with 1 argument, () denote expressions\r\n4\r\n```\r\nNow using the notation proposed in the RFC, I think your example would be something like:\r\n```\r\nStart-FirstThing @$($commonParameters + @{ Arg = 6 })\r\n```\r\nor just\r\n```\r\nStart-FirstThing @commonParameters @@{ Arg = 6 }\r\n```\r\n",
      "created_at": "2018-03-29T18:11:36Z",
      "updated_at": "2018-03-29T18:11:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay, yes, sorry, the `<splat-syntax>` things were supposed to denote some splat expression wrapper to unite the expression components under a common AST node that itself is an argument to the command.\r\n\r\nBut I think `@$( ... )` does that job nicely.",
      "created_at": "2018-03-29T18:47:36Z",
      "updated_at": "2018-03-29T18:47:36Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Closing in favour of the [Generalized Splatting RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md)",
      "created_at": "2018-04-03T00:35:06Z",
      "updated_at": "2018-04-03T00:35:06Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "I was about to open a feature request based on this topic, so I'm glad github suggested this thread to me!  The links above are dead, but here is the proper one:\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md\r\n\r\n\r\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>\r\n\r\nIt is unfortunate no one has taken this up in the three years since the RFC as not having an intermediate variable for splatting would be pleasant.",
      "created_at": "2019-12-02T02:59:33Z",
      "updated_at": "2019-12-02T03:01:29Z"
    }
  ],
  "created_at": "2018-03-29T16:58:44Z",
  "number": 6528,
  "state": "closed",
  "title": "Feature Request: Hashtable expression splatting",
  "updated_at": "2019-12-02T03:01:29Z"
}