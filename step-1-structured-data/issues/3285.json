{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3285",
  "author": "mklement0",
  "body": "Currently, a script/function's parameter is only considered _bound_ if an actual value was supplied by the _caller_.\r\n\r\nNotably, this means that parameter _default values_ are _not_ reflected in  `$PSBoundParameters`, which decreases its usefulness when the intent is to pass _all_ parameter values through to another command via splatting (`@PSBoundParameters`).\r\n\r\nIf there's a good reason to keep the current behavior (if only for the sake of not making a breaking change), perhaps another automatic variable, such as `$PSParametersWithValue`, could be introduced.\r\n\r\nFor a real-world example and workarounds, see [this Stack Overflow question](http://stackoverflow.com/q/42677229/45375).",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I've written a function `Get-ParameterValue` several times for this purpose. Particularly when splatting to another function it's awkward to have to deal with it by hand. It would be nice if there was a `$PSNonEmptyParameters` or `$PSParametersWithValues` or something.",
      "created_at": "2017-03-11T16:18:42Z",
      "updated_at": "2017-03-11T16:20:25Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "There is a strong reason not to change the current behavior: the presence of a member in this collection tells you that the parameter was actually specified in the command call i.e. that the formal parameter was bound hence the name \"PSBoundParameters\". You'll have to add a new variable if you want different semantics. ",
      "created_at": "2017-04-19T23:07:45Z",
      "updated_at": "2017-04-19T23:07:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Adding a new property is reasonable though - we have `BoundPositionally` list of strings - we could a similar `BoundDefaultValue` list.",
      "created_at": "2017-04-19T23:10:55Z",
      "updated_at": "2017-04-19T23:10:55Z"
    },
    {
      "author": "True-Demon",
      "author_association": "NONE",
      "body": "I realize this issue has long been stale, but for those of us who want a realistic solution, I have implemented some rather simple boilerplate code for it.\r\n\r\n```\r\nforeach($key in $MyInvocation.MyCommand.Parameters.Keys){\r\n    $value = Get-Variable $key -ValueOnly -EA SilentlyContinue\r\n    if($value -and !$PSBoundParameters.ContainsKey($key)) {$PSBoundParameters[$key] = $value}\r\n}\r\n```\r\n\r\n~~My alternate method didn't work as I anticipated. Sorry for not double-checking before posting.~~",
      "created_at": "2018-07-27T20:20:23Z",
      "updated_at": "2018-07-29T00:03:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @True-Demon, but the issue is still open; it sounds like the plan is to eventually implement it, but it's unclear when.",
      "created_at": "2018-07-27T20:26:06Z",
      "updated_at": "2018-07-27T20:26:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for your workarounds:\r\n\r\nThe first one is great, but I don't think the second one will work, though, because `$MyInvocation.MyCommand.Parameters` contains only metadata, not values, from what I can tell.",
      "created_at": "2018-07-27T21:17:26Z",
      "updated_at": "2018-07-27T21:17:26Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 That's why he calls get-variable \ud83d\ude09 \r\n\r\nHere's mine, which I mentioned earlier. It's basically the same thing, except that it merges with PSBoundParameters (and is in function form, so you can dot-source it, and includes tests to make _sure_ you dot-sourced it)\r\n\r\nhttps://gist.github.com/Jaykul/c623c45d32329cadac9e7622937e1b76",
      "created_at": "2018-07-27T22:38:32Z",
      "updated_at": "2018-07-27T22:38:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul:\r\n\r\n> That's why he calls get-variable\r\n\r\nYes, in the first snippet, which indeed works (as stated - though I'd use `$null -ne $value` rather than just `$value` as a slightly more robust conditional to infer the presence of a value from; it too modifies `$PSBoundParameters` directly).\r\n\r\nHowever, my comment was about the second snippet, which I interpret to make the claim that `$MyInvocation.MyCommand.Parameters` would essentially already give us what this issue requests as an enhancement, which is not the case; specifically, I was referring to:\r\n\r\n> you can use the native $MyInvocation.MyCommand.Parameters, which contains all parameter keys & values, bound, null, default, or otherwise\r\n\r\nMy point was that `$MyInvocation.MyCommand.Parameters` seemingly contains just metadata, not values (neither bound nor default ones).\r\n\r\nThanks for sharing your Gist, which is a nicely packaged solution.\r\nSounds like we have viable workarounds now.\r\nLet's hope that we soon won't need them anymore.\r\n\r\n\r\n",
      "created_at": "2018-07-28T01:56:47Z",
      "updated_at": "2018-07-29T02:50:33Z"
    },
    {
      "author": "True-Demon",
      "author_association": "NONE",
      "body": "You're right, I made the mistake of assuming before I posted that. I've omitted that since it doesn't apply in order to prevent leading others astray.",
      "created_at": "2018-07-29T00:03:52Z",
      "updated_at": "2018-07-29T00:03:52Z"
    },
    {
      "author": "stinos",
      "author_association": "NONE",
      "body": "@True-Demon @Jaykul did you never get into trouble with these workarounds in combination with dynamic parameters? Problem is `Get-Variable` gets any variable so in case of dynamic parameters it won't find their default because those parameters aren't available with their name in the scope, so instead it looks further so if there happens to be another, unrelated, variable with the same name in the scope it will use that. E.g.\r\n\r\n```\r\n$foo = 1\r\n\r\nfunction Bar {\r\ndynamicparam(\r\n  # Create \"foo\" dynamic here with default 2\r\n)\r\n# Oops, this returns 1, no matter what was passed.\r\nGet-Variable \"foo\"\r\n}\r\n```\r\n",
      "created_at": "2021-03-14T07:53:59Z",
      "updated_at": "2021-03-14T07:53:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@stinos, you can use `Get-Variable -Scope Local` to limit lookup to the current scope:\r\n\r\n```powershell\r\nforeach ($key in $MyInvocation.MyCommand.Parameters.Keys) {\r\n  $value = if ($PSBoundParameters.ContainsKey($key)) { $PSBoundParameters[$key] } \r\n           else { Get-Variable -Scope Local -ErrorAction Ignore -ValueOnly $key }\r\n}\r\n```\r\n",
      "created_at": "2022-03-05T23:56:34Z",
      "updated_at": "2022-03-06T12:30:46Z"
    },
    {
      "author": "stinos",
      "author_association": "NONE",
      "body": "@mklement0 thanks for posting that, I've actually been using something like that myself but apparently forgot to report back here.",
      "created_at": "2022-03-06T09:44:44Z",
      "updated_at": "2022-03-06T09:44:44Z"
    }
  ],
  "created_at": "2017-03-08T18:22:13Z",
  "number": 3285,
  "state": "open",
  "title": "Suggestion: Also include parameter default values in $PSBoundParameters or provide a similar variable that does",
  "updated_at": "2022-03-06T12:30:46Z"
}