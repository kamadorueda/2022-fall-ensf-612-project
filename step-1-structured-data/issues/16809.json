{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16809",
  "author": "daxian-dbw",
  "body": "Use this issue to track my review comment https://github.com/PowerShell/PowerShell/pull/12412#discussion_r793031059 regarding `PSMethodInvocationConstraints.GenericTypeParameters`.\r\n\r\nThere are 2 problems with invocation of method with generic arguments today:\r\n1. For `$a.MethodName[type-A]($arg)`, if `[type-A]` cannot be resolved at all, there is no good error message on what type name cannot be resolved.\r\n2. For `$a.MethodName[type-A]($arg)`, if `[type-A]` can be resolved at run time (new assembly gets loaded or so), it won't be honored, because we only attempt to resolve the type at compilation time in compiler.\r\n\r\nIt's not a problem for `PSMethodInvocationConstraints.ParameterTypes`, because for any argument conversion, if we cannot resolve the type when constructing `PSMethodInvocationConstrains` (namely, the element in `ParameterTypes` is `null`), then we will just use the [effective argument type](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CoreAdapter.cs#L1427) in `FindBestMethodImpl`.\r\n\r\nThe fix would be to refactor `PSMethodInvocationConstraints.GenericTypeParameters` somewhat, to allow a compile-time unresolvable type to fall back to [TypeOps.ResolveTypeName](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L2116) in `FindBestMethodImpl`. That method will take care of the type loaded at run time, as well as generating better error message when a type name really cannot be resolved.",
  "closed_at": "2022-02-03T19:58:02Z",
  "comments": [],
  "created_at": "2022-01-26T23:19:52Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 16809,
  "state": "closed",
  "title": "Refactor `PSMethodInvocationConstraints` to make it able to work with types that not available at compilation time but loaded at runtime",
  "updated_at": "2022-02-03T19:58:06Z"
}