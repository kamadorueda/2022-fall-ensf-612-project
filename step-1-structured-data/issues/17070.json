{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17070",
  "author": "CodeAJGit",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n[about_Trap](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Trap) states that trap statements may be defined anywhere within a given scope, but always apply to all statements in that scope. When using input processing methods (begin, process, end), variables act as though there is a consistent scope however the trap statement does not. Below is an extended example of this action.\r\n\r\n```\r\nbegin {\r\n    Write-Output \"Block is: begin\"\r\n    \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n    \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"begin\" -Option Private -PassThru).Value\r\n\r\n    trap {\r\n        Write-Output \"Block is: trap\"\r\n        \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n        \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"trap\" -Option Private -PassThru).Value\r\n        continue\r\n    }\r\n}\r\n\r\nprocess {\r\n    Write-Output \"Block is: process\"\r\n    \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n    \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"process\" -Option Private -PassThru).Value\r\n\r\n    throw \"error\"\r\n}\r\n\r\nend {\r\n    Write-Output \"Block is: end\"\r\n    \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n    \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"end\" -Option Private -PassThru).Value\r\n}\r\n\r\n```\r\n\r\nUsing the trap statement outside of the input processing methods (begin, process, end) causes unexpected token and/or not recognized term errors. A workaround seems to be to use the source or dot operator on the input processing method blocks to bring them into the same scope. I am not sure if this was intended as using this method does not allow continued execution.\r\n\r\n```\r\ntrap {\r\n    Write-Output \"Block is: trap\"\r\n    \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n    \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"trap\" -Option Private -PassThru).Value\r\n    continue\r\n}\r\n\r\n. {\r\n    begin {\r\n        Write-Output \"Block is: begin\"\r\n        \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n        \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"begin\" -Option Private -PassThru).Value\r\n\r\n\r\n    }\r\n\r\n    process {\r\n        Write-Output \"Block is: process\"\r\n        \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n        \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"process\" -Option Private -PassThru).Value\r\n\r\n        #throw \"error\"\r\n    }\r\n\r\n    end {\r\n        Write-Output \"Block is: end\"\r\n        \"Scope is: \" + (Get-Variable -Name Scope -Scope Private -ErrorAction SilentlyContinue).Value\r\n        \"Set Scope to : \" + (Set-Variable -Name Scope -Scope Private -Value \"end\" -Option Private -PassThru).Value\r\n    }\r\n}\r\n```\r\n\r\nIf it is intended that the trap statement is bound by script blocks, that should be documented as it not currently intuitive.\n\n### Expected behavior\n\n```console\nBlock is: begin\r\nScope is:\r\nSet Scope to : begin\r\nBlock is: process\r\nScope is: begin\r\nSet Scope to : process\r\nBlock is: trap\r\nScope is:\r\nSet Scope to : trap\r\nBlock is: end\r\nScope is: process\r\nSet Scope to : end\n```\n\n\n### Actual behavior\n\n```console\nBlock is: begin\r\nScope is:\r\nSet Scope to : begin\r\nBlock is: process\r\nScope is: begin\r\nSet Scope to : process\r\nException: \\test-trap.ps1:21\r\nLine |\r\n  21 |      throw \"error\"\r\n     |      ~~~~~~~~~~~~~\r\n     | error\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-27T00:01:01Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> ... anywhere within a given scope ...\r\n\r\nI think this is a doc issue. It should be **_within a given script block_**. The trap statement only covers statements within the same script block.\r\n\r\nYou need to put the trap in the same block (script block) where exception is thrown, or use try/catch in the same block.\r\nIf you don't attempt to continue execution from the exception, a new feature introduced in PowerShell 7.3 preview supports a new `clean` block for resource cleanup, which will act on exception thrown from any of the begin, process, or end blocks.\r\n",
      "created_at": "2022-05-25T18:27:51Z",
      "updated_at": "2022-05-25T18:27:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Opened the doc issue: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/8865",
      "created_at": "2022-05-25T19:15:28Z",
      "updated_at": "2022-05-25T19:15:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-27T00:01:00Z",
      "updated_at": "2022-05-27T00:01:00Z"
    }
  ],
  "created_at": "2022-03-27T17:18:02Z",
  "number": 17070,
  "state": "closed",
  "title": "input processing methods (begin, process, end) do not share scope for trap statements",
  "updated_at": "2022-05-27T00:01:01Z"
}