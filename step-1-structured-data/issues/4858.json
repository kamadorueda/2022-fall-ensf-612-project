{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4858",
  "author": "joandrsn",
  "body": "I have added the function `Remove-Service` to the Management module.\r\nThe functions `New-Service` and `Set-Service` were already present, I thought it would be a good idea to have a `Remove-Service`\r\n\r\nIssue #4717",
  "closed_at": "2017-09-21T00:24:40Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "\r\n@joandrsn,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\n_Thanks,\nMicrosoft Pull Request Bot_",
      "created_at": "2017-09-18T15:56:23Z",
      "updated_at": "2017-09-18T15:56:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@joandrsn  it looks like the cmdlet doesn't export. I can repro on win10 x64. No clue why, though.",
      "created_at": "2017-09-18T21:39:55Z",
      "updated_at": "2017-09-18T21:39:55Z"
    },
    {
      "author": "joandrsn",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus If I import the cmdlet with my import statement that I previously committed (and removed again), I can get it to work. Somehow the travis build gets the module imported (it doesn't fail).\r\nI'm not sure why that is. \r\nIf I try a `Get-Command Get-Service` I get a version 3.1.0.0 and after importing the .dll i get 6.0.0.0",
      "created_at": "2017-09-18T21:48:53Z",
      "updated_at": "2017-09-18T21:48:53Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@joandrsn I guess you need to add them to the exports here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/Modules/Windows-Core/Microsoft.PowerShell.Management/Microsoft.PowerShell.Management.psd1\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/Modules/Unix/Microsoft.PowerShell.Management/Microsoft.PowerShell.Management.psd1\r\n\r\n",
      "created_at": "2017-09-18T21:53:59Z",
      "updated_at": "2017-09-18T21:53:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joandrsn Please add `Remove-Service` in DefaultCommands.Tests.ps1 to pass CI.",
      "created_at": "2017-09-19T14:33:55Z",
      "updated_at": "2017-09-19T14:33:55Z"
    },
    {
      "author": "joandrsn",
      "author_association": "CONTRIBUTOR",
      "body": "I think I figured it out.\r\nI changed the inheritance from `Cmdlet` to `PSCmdlet` to use `ParameterSetName` instead of `_ParameterSetName`.\r\nThis meant I had to rewrite a test which used the class directly. Unfortunatly, the test was too complicated for me to rewrite in the same function as before, so I split the test into 4 separate tests.\r\nAlso I'm not sure if the last test actually does anything. On my computer, the service was already running. So maybe I should create a service and then change that service? Looking for feedback.",
      "created_at": "2017-09-19T19:41:15Z",
      "updated_at": "2017-09-19T19:41:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I think this probably needs to be reverted. I believe `ServiceBaseCommand` intentionally derives from `Cmdlet` so that the service cmdlets can be directly invoked. This would likely be a Bucket 1 or 2 Breaking Change. ",
      "created_at": "2017-09-19T20:03:41Z",
      "updated_at": "2017-09-19T20:03:41Z"
    },
    {
      "author": "joandrsn",
      "author_association": "CONTRIBUTOR",
      "body": "Do you have a suggestion on how I would be able to use `ParameterSetName` instead? I can't currently see the solution if changing the inheiritance to `PSCmdlet` would be a breaking change.",
      "created_at": "2017-09-19T20:15:16Z",
      "updated_at": "2017-09-19T20:15:16Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I think it was using `_ParameterSetName` \"by design\" as `ParameterSetName` is not available in commands that derive from `Cmdlet` instead of `PSCmdlet`. `RemoveServiceCommand` could derive from `PSCmdlet` but that would break the derived methods. `ServiceBaseCommand` could be switched to derive from `PSCmdlet`, but that would probably take a review committee approval.\r\n\r\nLooking for guidance from other cmdlets, many of them are using \r\n\r\n```csharp\r\nif (InputObject != null)\r\n```\r\nand\r\n```csharp\r\nif (Name != null)\r\n```\r\n\r\nExample [`RenameLocalGroupCommand`](https://github.com/PowerShell/PowerShell/blob/fb7c7b038b720fc78d92662ac3405029b8db625c/src/Microsoft.PowerShell.LocalAccounts/LocalAccounts/Commands/RenameLocalGroupCommand.cs#L188)\r\n\r\nI lean towards either switching to the null checks or just leaving it as `_ParameterSetName`. I can see benefits to the Service Cmdlets being directly invoked fro host apps, so Moving to `PSCmdlet` seems like a bad option.\r\n\r\n@SteveL-MSFT @iSazonov thoughts?",
      "created_at": "2017-09-19T21:38:07Z",
      "updated_at": "2017-09-19T21:38:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems like the best solution here (preferring simplicity) is to revert back to deriving from `Cmdlet` as it originally was which perhaps was intentional.  Would like to see the tests back to being `-TestCases` as it seems there a bunch of similar code having split up due to the change in inheritance. ",
      "created_at": "2017-09-20T00:49:20Z",
      "updated_at": "2017-09-20T00:49:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Oops, I again got an artifact \ud83d\ude04 \r\nI unlike using _ParameterSetName because it is marked as \"internal\" and available through a hack with  `InternalsVisibleTo`.\r\nSo I agree that we should revert last changes and remove `_ParameterSetName`.",
      "created_at": "2017-09-20T05:10:47Z",
      "updated_at": "2017-09-20T05:10:47Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@joandrsn Thanks for your contribution!",
      "created_at": "2017-09-21T00:24:56Z",
      "updated_at": "2017-09-21T00:24:56Z"
    },
    {
      "author": "PingPongSet",
      "author_association": "NONE",
      "body": "What vesion of PowerShell is Remove-service available for? What about version 4?",
      "created_at": "2019-01-15T11:49:00Z",
      "updated_at": "2019-01-15T11:49:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PingPongSet Windows PowerShell is frozen. All new features will be only added to PowerShell Core. Feel free download latest version, try and feedback.",
      "created_at": "2019-01-15T14:25:45Z",
      "updated_at": "2019-01-15T14:25:45Z"
    },
    {
      "author": "PingPongSet",
      "author_association": "NONE",
      "body": "@iSazonov What vesion of PowerShell is Remove-service available for? ",
      "created_at": "2019-01-15T16:09:20Z",
      "updated_at": "2019-01-15T16:09:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PingPongSet I don' remember the version but you could look release notes for PowerShell Core 6.0. Also make only sense download latest PowerShell Core 6.0 version.",
      "created_at": "2019-01-16T03:18:17Z",
      "updated_at": "2019-01-16T03:18:17Z"
    }
  ],
  "created_at": "2017-09-18T15:56:19Z",
  "number": 4858,
  "state": "closed",
  "title": "[Feature]Added Remove-service to Management module",
  "updated_at": "2019-01-16T03:18:17Z"
}