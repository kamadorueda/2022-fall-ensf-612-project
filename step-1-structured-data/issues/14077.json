{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14077",
  "author": "mhintzke",
  "body": "## Summary of the new feature/enhancement\r\n\r\nPowerShell comes with native support for build modules using the `New-ModuleManifest` cmdlet, but doesn't necessarily come with the ability to describe a runtime's dependencies outside of a module. Just like Node runtime project's can use a `package.json` to describe the dependencies it has on npm libraries or .NET can use `.csproj` files to reference NuGet package (e.g. The runtime takes a dep. on a library which might also take dep. on more libraries creating a dep. graph), Nothing stops a runtime from wanting to take a dep. on a PowerShell module.\r\n\r\nUse cases:\r\n\r\nSimple use case - I want to share a `.ps1` file with a colleague that deps. on 5 other modules without have to go through the process to build my own module and export functions, etc.  Today my colleague would need to have those 5 modules installed and imported on their device for my `ps1` file to run correctly. Sure you could just add the `Install-Module` cmdlet directly in the ps1, but it feels better to separate the concerns of my application code and my dependencies and have a more declarative approach to an infrastructural problem.\r\n\r\nA complex use case - A Node project that that uses `node-pty` to spawn `pwsh` processes that run arbitrary PowerShell.  A dockerfile is used to run `Install-Module` across a plethora of modules needed. Then after forking the `pwsh` process, it needs to import those same modules to perform it's duties. There does not seem to be a good way (that I have found at least) to document this kind of manifest and have it used to generate a valid runtime environment.  Currently, if my process requires 25 modules to run, I need to explicitly install and import each one.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nTo model it after the already tried and tested solutions that .NET and npm have used, I think introducing a `modules.json` file that describes the modules and their required versions via semantic versioning (Similar to how npm does [here](https://docs.npmjs.com/cli/v6/using-npm/semver)) is an acceptable approach. Once that file is created and your dependencies are described in the manifest, you could run `Install-Module` with no arguments and it would simply look for a `modules.json` file in your folder (and possibly the ancestors) and use that file to both Install and potentially Import modules in bulk.\r\n\r\nWith this change, you would no longer have to rely on a PowerShell profile to perform \"automatic\" loading of modules as it would be at a project (folder) level and not confined to the scope of a \"user\" on a device.  This makes powershell projects and libraries more portable when the consuming technology is not a PS module itself as in the case of my Node use case above or even just a vanilla .ps1 file you wanted to shared with a co-worker via git.\r\n\r\nOne caveat to this all would be that where npm and NuGet package management involves adding the packages into the workspace where they can be gitignored and discarded between builds with a `git clean`, `Install-Module` currently only installs in a global location to the device which means you mutate the device's state and have no good way of \"cleaning up\" afterwards like you would with a `bin` or `node_modules` folder.",
  "closed_at": "2020-11-14T19:00:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mhintzke The topic is more for PowerShellGet. Currently MSFT team works actively on V3. You could read about the version in their blog and feedback in https://github.com/PowerShell/PowerShellGet and in https://github.com/PowerShell/PowerShell-RFC/pull/237\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShellGet\">PowerShell/PowerShellGet</a></strong></div><div>PowerShellGet is the package manager for PowerShell - PowerShell/PowerShellGet</div></blockquote>",
      "created_at": "2020-11-13T16:42:53Z",
      "updated_at": "2020-11-13T16:42:55Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-11-14T19:00:03Z",
      "updated_at": "2020-11-14T19:00:03Z"
    }
  ],
  "created_at": "2020-11-13T00:53:32Z",
  "labels": [
    "Issue-Enhancement",
    "Area-PowerShellGet",
    "Resolution-External"
  ],
  "number": 14077,
  "state": "closed",
  "title": "A PowerShell workspace dependency module manifest",
  "updated_at": "2020-11-14T19:00:05Z"
}