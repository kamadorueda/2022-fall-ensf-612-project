{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7894",
  "author": "copdips",
  "body": "Hello @PowerShellTeam,\r\n\r\nI use vim and python repl in windows local session, both work fine.\r\n\r\nBut over PsRemoting session, none of them works, it seems that this is because Powershell PsRemoting session is not interactive by design. This design makes our windows admin life a little bit tough.\r\n\r\nPsEdit for remote editing is not easy to use, and doesn't work for every circumstances.\r\n\r\nWould you plan to make PsRemoting interactive in the future ?\r\n\r\nOr would you plan to release a simple console mode editor? I'm not expecting to have the same features as vim, just search, edit is largely enough for beginning.\r\n",
  "closed_at": "2018-10-05T22:58:18Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Partially dup #7581 and #7295.",
      "created_at": "2018-09-29T18:22:24Z",
      "updated_at": "2018-09-29T18:22:24Z"
    },
    {
      "author": "copdips",
      "author_association": "NONE",
      "body": "Yes, I'd like to raise this issue to call Powershell.team's attention, because I've never heard from their voice about this topic. I really hope of being informed if there's any blueprint.",
      "created_at": "2018-09-29T19:11:58Z",
      "updated_at": "2018-09-29T19:11:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Or would you plan to release a simple console mode editor?\r\n\r\nPowerShell is a shell and engine not editor. PSReadline allow to edit history script blocks. For other scenarios, you can always run a more suitable external editor and vim too.\r\n",
      "created_at": "2018-09-29T20:35:29Z",
      "updated_at": "2018-09-29T20:35:29Z"
    },
    {
      "author": "copdips",
      "author_association": "NONE",
      "body": "I agree that Powershell is not an editor, this is not its job. But I haven't found an editor that works over WinRM so far. Maybe it's impossible for the current version or maybe it's very difficult to implement. \r\n\r\nPerhaps Powershell team (or WinRM team as my wish only refers to the remote session) could release some guidelines to give the developers some ideas how to design a pure Windows console editor. That would be great.\r\n\r\nBTW, I love PSReadline a lot, it makes our Windows admin life much happier, thanks for the great work.",
      "created_at": "2018-09-29T21:00:40Z",
      "updated_at": "2018-09-29T21:00:40Z"
    },
    {
      "author": "copdips",
      "author_association": "NONE",
      "body": " I found [this blog](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) from @bitcrazed talking about the ConPTY, maybe this is the light that we're always looking for.",
      "created_at": "2018-09-29T22:02:52Z",
      "updated_at": "2018-09-29T22:02:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for link to Win32 ConPTY. \r\nA problem is that the API is only on latest Windows preview builds and PowerShell Core should works from Windows 7 version. We could use winpty and then migrate to ConPTY. Although it looks too difficult to support. On the other hand, it could be an independent project in which an alternative conhost will be implemented (as well as a GUI). All this is said for the local console.\r\nAnd again, as for remote console, current PowerShell remoting is engine-engine object oriented. Although we use implicitly pty on Unix if transport is SSH there can not be two foreground applications by design. So we'll need to switch between foreground and background on local and remote systems synchronously. This means that we will need to completely remake our conhost, which will require several ported APIs that are not yet available (not only ConPTY).",
      "created_at": "2018-09-30T17:49:29Z",
      "updated_at": "2018-09-30T17:49:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is a known limitation of PSRP.  However, if you don't need to remote objects from A to B and just want an interactive remote shell that you can use PowerShell, you can always just use ssh and start pwsh on the remote side.",
      "created_at": "2018-10-05T22:01:38Z",
      "updated_at": "2018-10-05T22:01:38Z"
    },
    {
      "author": "copdips",
      "author_association": "NONE",
      "body": "Thx for the confirmation, ssh is indeed my current workaround.\r\nAnd as mentionned by @iSazonov, really hope there'll be an independent project to make it available in the pure powershell.",
      "created_at": "2018-10-05T22:09:08Z",
      "updated_at": "2018-10-05T22:12:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@copdips there have been discussions and even some experiments to enable console GUIs in PowerShell Core, however, it's not a focus at this time but would love to see it enabled in the future",
      "created_at": "2018-10-05T22:58:18Z",
      "updated_at": "2018-10-05T22:58:18Z"
    }
  ],
  "created_at": "2018-09-29T16:35:57Z",
  "number": 7894,
  "state": "closed",
  "title": "Is it possible to make PsRemoting session interactive and a simple full console editor",
  "updated_at": "2018-10-05T22:58:18Z"
}