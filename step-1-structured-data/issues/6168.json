{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6168",
  "author": "pkjaer",
  "body": "I'm having some issues calling a WCF service from Linux. \r\nThe same code works fine on Windows. \r\n\r\nI'm getting this error when trying to use basic authentication:\r\n\r\n`The HTTP request is unauthorized with client authentication scheme 'Basic'. The authentication header received from the server was 'Basic realm=\"local.realm\"'.\r\n`\r\n\r\nThe service is hosted in IIS on a Windows machine.\r\nUnfortunately, I cannot share the web service or the code behind it.\r\n\r\nThe client was generated as a \"Connected Service\" in Visual Studio 2017.\r\nThe source code for the module is available on GitHub:\r\nhttps://github.com/pkjaer/tridion-powershell-modules/tree/pwsh-core-support/Tridion.Community.PowerShell\r\n\r\nSpecifically, the generated client is here:\r\nhttps://github.com/pkjaer/tridion-powershell-modules/blob/pwsh-core-support/Tridion.Community.PowerShell/Tridion.Community.PowerShell/Connected%20Services/CoreService/Reference.cs\r\n\r\nAnd the class that sets up the bindings and such is here:\r\nhttps://github.com/pkjaer/tridion-powershell-modules/blob/pwsh-core-support/Tridion.Community.PowerShell/Tridion.Community.PowerShell/Client.cs\r\n\r\nNone of the bindings work on Linux currently, but I figured the `BasicHttpBinding` would be the easiest to get running first.\r\n\r\nSince it works in PowerShell 6 on a Windows machine, but not on Linux, I'm thinking there is something in the OS that behaves differently. \r\n\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe client is able to communicate with the WCF service using Basic authentication and a BasicHttpBinding.\r\n\r\n\r\nActual behavior\r\n---------------\r\nAny call to the service gives the following error:\r\n\r\n```\r\nThe HTTP request is unauthorized with client authentication scheme 'Basic'. \r\nThe authentication header received from the server was 'Basic realm=\"local.realm\"'.\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.1                                           \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.1                                          \r\nOS                             Linux 3.10.0-693.11.6.el7.x86_64 #1 SMP Thu D...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n \r\n```\r\n(Above is for RHEL but I've tried Ubuntu (16 & 17) as well, with the same result)",
  "closed_at": "2019-09-28T18:52:52Z",
  "comments": [
    {
      "author": "pkjaer",
      "author_association": "NONE",
      "body": "No one has any ideas?",
      "created_at": "2018-03-13T09:26:21Z",
      "updated_at": "2018-03-13T09:26:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Could you please look the Issue? \r\n@pkjaer Could you please create more simple repo so we can debug?",
      "created_at": "2018-03-13T10:35:44Z",
      "updated_at": "2018-03-13T10:35:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pkjaer Looking at the code one issue I potentially see is that the settings is using a PSCredential object imported from `Import-Clixml`. On Linux, you cannot serialize PSCredential objects to CLIXML because `SecureString` does not have Windows DPAPI to encrypt/decrypt the secrets with. The result is that null is likely being used for the user/password when WCF client sends the basic auth. ",
      "created_at": "2018-03-14T19:59:07Z",
      "updated_at": "2018-03-14T19:59:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> On Linux, you cannot serialize PSCredential objects to CLIXML because SecureString does not have Windows DPAPI to encrypt/decrypt the secrets with.\r\n\r\nBased on the Issue should we throw (PlatformNotSupportedException) in this situation?",
      "created_at": "2018-03-15T05:44:08Z",
      "updated_at": "2018-03-15T05:44:08Z"
    },
    {
      "author": "pkjaer",
      "author_association": "NONE",
      "body": "@markekraus That's great info! Is there an alternative that will allow me to store the credentials between sessions, on all supported platforms?\r\n\r\nI will double-check, but I believe I was testing it with credentials specified directly in the parameters to the function (not loading it from a file). So I don't think that is the root issue, in this case.",
      "created_at": "2018-03-15T09:26:58Z",
      "updated_at": "2018-03-15T09:26:58Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> Is there an alternative that will allow me to store the credentials between sessions, on all supported platforms?\r\n\r\nCurrently, no. There is a \"community\" project in its infancy to create a cross-platform and cross-version password storage and retrieval solution that allow you to bring your own secure storage (such as KeePass, DPAPI, encrypted sqlite, etc) through a PSProvider drive. But it's still in the conceptualization phase and is mostly the brainchild of @Jaykul. \r\n\r\nYou can still use some form of encrypted store, but you will have a \"chicken and egg\" scenario where you have to store the secret to unlock the encrypted secret in plain text.\r\n\r\nOn Linux, the common practice for secrets is to store them in plain text in a file or as an environment variable. (Assuming the system is not shared and you are the owner). You could allow for password override based on the presence of an environment variable in your settings restore functions. You can still convert a plain-text string to  SecureString in Linux to attach to the PSCredential object. On windows you could still store the password in CLIXML file and on Linux you could store the password in an environment variable and the module logic would determine which to use.",
      "created_at": "2018-03-15T11:14:43Z",
      "updated_at": "2018-03-15T11:14:43Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I think in this case the errors were being suppressed because it should have been noticeable. If you try to import a CLIXML that has a SceureString in it (which you would need to have copied from another computer or something), you get `Unable to load DLL 'CRYPT32.dll': The specified module or one of its dependencies could not be found.` on Linux/macOS/not-windows. You get the same when you try to export a `SecureString`.\r\n\r\nI think there is an open issue on improving that message already.",
      "created_at": "2018-03-15T11:21:24Z",
      "updated_at": "2018-03-15T11:21:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for remainder - the Issue https://github.com/PowerShell/PowerShell/issues/1654",
      "created_at": "2018-03-15T11:35:54Z",
      "updated_at": "2018-03-15T11:35:54Z"
    }
  ],
  "created_at": "2018-02-16T16:18:40Z",
  "number": 6168,
  "state": "closed",
  "title": "WCF client fails on Linux but works on Windows",
  "updated_at": "2019-09-28T18:52:52Z"
}