{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7337",
  "author": "mklement0",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n\r\nRequest a minimum version of 1.6.0 and - nonsensically - a maximum version of 1.5.0:\r\n\r\n```powershell\r\nGet-Module -ListAvailable -FullyQualifiedName @{ ModuleName='PowerShellGet'; ModuleVersion='1.6.0'; MaximumVersion='1.5.0' }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI think a statement-terminating error indicating that `MaximumVersion`  must be greater or equal to `ModuleVersion` (which uses _minimum_ logic) would be more helpful than the current behavior.\r\n\r\nIf feasible, this validation should be tied to fully qualified module names themselves, wherever they are accepted.\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe argument is quietly accepted and therefore results in no output (because, by definition, no modules match).\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3 on macOS 10.13.6\r\nPowerShell Core v6.1.0-preview.3 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-preview.3 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n\\Windows PowerShell v5.1.17134.165 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2018-07-23T13:23:27Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Core"
  ],
  "number": 7337,
  "state": "open",
  "title": "Get-Module accepts nonsensical combinations of ModuleVersion and MaximumVersion entries for -FullyQualifiedName",
  "updated_at": "2018-07-25T12:05:55Z"
}