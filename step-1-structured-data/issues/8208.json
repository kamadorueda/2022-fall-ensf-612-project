{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8208",
  "author": "Zhentar",
  "body": "I have two script blocks, \"A\" and \"B\". I want to invoke \"A\", and then later invoke \"B\", and have variables set by \"A\" available to \"B\". I've found a number of ways to achieve that by itself; the wrinkle however is that I also need `$_` to be populated when \"A\" is invoked.\r\n\r\nThis (seems to) do exactly what I want:\r\n```cs\r\nvar invokeWithinModule = new PSModuleInfo(false);\r\nscript = invokeWithinModule.NewBoundScriptBlock(script);\r\nvar result = script.DoInvokeReturnAsIs(useLocalScope: false,\r\n                                       errorHandlingBehavior: 2 /*writeToCurrentErrorPipe */,\r\n                                       dollarUnder: inputObject,\r\n                                       input: AutomationNull.Value,\r\n                                       scriptThis: AutomationNull.Value,\r\n                                       args: null);\r\n```\r\n\r\nThe only trouble being that `DoInvokeReturnAsIs` is not a public function.\r\n\r\nI've been trying to find a way to do this without touching other peoples' `private`s or `internal`s, and have not had any success; there does not seem to be any public API surface that both invokes without local scope and populates underbar (except for `Measure-Command`, but that outputs to a null pipe). I've also tried intermediate script blocks and using the dot source operator, e.g.:\r\n```cs\r\nscript = invokeWithinModule.NewBoundScriptBlock(script);\r\nvar invokeWrapperBlock = invokeWithinModule.NewBoundScriptBlock(ScriptBlock.Create(\"$args[0] | . $args[1]\"));\r\nresults = invokeWithinModule.SessionState.InvokeCommand.InvokeScript(false, invokeWrapperBlock, null, inputObject, script);\r\n```\r\nBut for reasons beyond my ken the code in \"script\" never sees `$_` (or anything else from the wrapper) at all.\r\n\r\nIs there a decent way to achieve this? Should there be?",
  "closed_at": "2019-09-29T09:55:52Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The closest to what you want to achieve is `ScriptBlock.InvokeWithContext`, e.g.\r\n\r\n```powershell\r\n{ $_ }.InvokeWithContext(\r\n    @{},\r\n    [System.Collections.Generic.List[psvariable]][psvariable]::new('_', 'underBarValue'),\r\n    @())\r\n# underBarValue\r\n```\r\n\r\nThat *does* create a new scope though, so it isn't perfect.\r\n\r\nIt would be nice if there was a `useLocalScope` parameter on `InvokeWithContext`, or even an API closer to `DoInvokeReturnAsIs` where you could explicitly set `dollarUnder`, `scriptThis`, `args`, `input` and `useLocalScope` would be really useful. (`errorHandlingBehavior` is probably unnecessary for a public API though)",
      "created_at": "2018-11-08T15:32:39Z",
      "updated_at": "2018-11-08T15:32:39Z"
    }
  ],
  "created_at": "2018-11-08T04:39:00Z",
  "number": 8208,
  "state": "closed",
  "title": "Invoking a ScriptBlock without a local scope but with underbar?",
  "updated_at": "2019-09-29T09:55:52Z"
}