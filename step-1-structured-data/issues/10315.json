{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10315",
  "author": "ThreeFive-O",
  "body": "As per [.NET Platform compatibility rule DE0006](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) and [PowerShell coding guidelines](docs/dev-process/coding-guidelines.md) non-generic collections shouldn't be used.\r\n\r\nIn particular relevant for PowerShell would be `System.Collections.ArrayList` and `System.Collections.Hashtable`.\r\n\r\nMost occurrences of `ArrayList` are in C# code obviously, but some can be found in Pester test files too (due to the lack of an internal dynamic array type in PowerShell).\r\n\r\nThose two styles are found in Pester tests:\r\n- `New-Object System.Collections.ArrayList`\r\n- `[System.Collections.ArrayList]::new()`\r\n\r\n**C# code**\r\nThe replacement of the non-generic collections in C# code by the generic ones might be non-trivial due to the type problems. For new code and code changes the rule should be followed as the replacement is an on-going process.\r\n\r\n**Pester tests**\r\nFor Pester test files the PowerShell syntax should be favored over the explicitly typed C# equivalents:\r\n\r\n- `System.Collections.Hashtable` -> `@{}`\r\n- `System.Collections.ArrayList` -> `@()` (though being of type `Array`; in most cases the performance can be neglected using `+=` operator on `@()` on very small arrays; some instances might be refactored to use a `ForEach` loop which returns an `Array`)",
  "closed_at": "2019-09-06T03:47:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell engine uses ArrayList as base type in PSObject and special variables, also it uses ArrayList for serialization and remoting. Changing this is huge breaking change.\r\n\r\nNevertheless, there are places where we use ArrayList unjustifiably and this can be fixed. Code becomes more readable and reliable.",
      "created_at": "2019-08-09T06:53:48Z",
      "updated_at": "2019-08-09T06:53:48Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Also to be clear, DE0006 recommends avoiding the use of non-generic collections in _new_ code. For existing code we can consider the benefits gained from converting to generic collections where possible (i.e. for PowerShell, where such changes would be non-breaking), but that's it.",
      "created_at": "2019-08-09T13:23:29Z",
      "updated_at": "2019-08-09T13:23:29Z"
    },
    {
      "author": "ThreeFive-O",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov and @KirkMunro I agree that the fundamental architecture of PowerShell should stay as it is.\r\n\r\n> DE0006 recommends avoiding the use of non-generic collections in _new_ code.\r\nThis is what I meant with on-going replacement. \r\n\r\n@TravisEz13 @adityapatwardhan Not sure who is best informed about this, but do **Codacy** and **CodeFactor** have rules with an error or warning when using non-generic collections?\r\n\r\nFrom @iSazonov's PR #10333 I can't find any hint that would suggest that Codacy or CodeFactor recognized the change from non-generic to generic collections (I would have guessed it should be marked as fixed issue in the logs of Codacy or CodeFactor).",
      "created_at": "2019-08-09T13:47:35Z",
      "updated_at": "2019-08-09T13:47:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have never seen such warnings from Codacy or CodeFactor.",
      "created_at": "2019-08-09T13:59:28Z",
      "updated_at": "2019-08-09T13:59:28Z"
    },
    {
      "author": "ThreeFive-O",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I guessed so \u2639\r\n\r\nI'm not familiar with the tools, but maybe there is the possibility to implement custom rules or have some other tool do the check in the CI pipeline.",
      "created_at": "2019-08-09T14:05:01Z",
      "updated_at": "2019-08-09T14:05:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We have adjusted Codacy and CodeFactor rules before; I think @TravisEz13 has worked with it, or maybe @daxian-dbw?",
      "created_at": "2019-08-09T14:47:55Z",
      "updated_at": "2019-08-09T14:47:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Individual rules are adjusted by configuration files in the repo.  See the services web site for instructions, on how to add a configuration.\r\n\r\nCodacy has been disable for C# because it is using an old version of C# for analysis",
      "created_at": "2019-08-09T17:14:47Z",
      "updated_at": "2019-08-09T17:15:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Most of ArrayList  was replaced. I close this because remaining ArrayList is used in engine and remoting.",
      "created_at": "2019-09-06T03:47:50Z",
      "updated_at": "2019-09-06T03:47:50Z"
    }
  ],
  "created_at": "2019-08-07T12:59:01Z",
  "number": 10315,
  "state": "closed",
  "title": "DE0006: Non-generic collections shouldn't be used (especially in Pester tests)",
  "updated_at": "2019-09-06T03:47:50Z"
}