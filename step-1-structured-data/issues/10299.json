{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10299",
  "author": "romero126",
  "body": "# Summary of the new feature/enhancement\r\n\r\nRecently I have been a look at creating a PSProvider that mirrors the robustness of the FileSystemProvider.\r\nIn rebuilding the functionality for Get-Content / Set-Content to include features like\r\n`Raw`, `Tail`, `ReadCount`, `TotalCount`, `Delimiter` Requires a ton of effort to impliment.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nCreate a new base class `StreamContentReaderWriter`\r\n\r\nIt will pivot off of `System.IO.Stream` which is a base class for many Stream Class objects including `System.IO.FileStream` and `System.IO.MemoryStream`\r\n\r\nExample Base Constructor:\r\n    public StreamContentReaderWriter(System.IO.Stream stream, Encoding encoding, bool usingByteEncoding, Provider provider, bool isRawStream)\r\n\r\nThis refactor would allow for many compatable features that PowerShell inately provides also allowing us to pivot off of external tools like `Ships` or `Simplex`",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Some example usages would be awesome as well, but this sounds like something that would really make working with providers and building providers much easier. :) ",
      "created_at": "2019-08-05T15:49:06Z",
      "updated_at": "2019-08-05T15:49:06Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "A Zip file PS Provider? Yeah!  And if this proposal helps with that, thumbs up!",
      "created_at": "2019-08-05T23:15:56Z",
      "updated_at": "2019-08-05T23:15:56Z"
    }
  ],
  "created_at": "2019-08-05T06:08:33Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Providers"
  ],
  "number": 10299,
  "state": "open",
  "title": "Refactor FileSystemContentReaderWriter to support IO Streams",
  "updated_at": "2019-08-06T11:10:35Z"
}