{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11939",
  "author": "curegit",
  "body": "I found the `pwsh` command doesn't parse positional integer parameters as expected when they are negative. This doesn't happen if you use the `powershell` command in windows cmd.\r\n\r\n# Steps to reproduce\r\n\r\n`script.ps1` is as below.\r\n```powershell\r\nParam([Int]$number)\r\nWrite-Host $number\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n$ pwsh script.ps1 -1\r\n-1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n$ pwsh script.ps1 -1\r\n0\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.4\r\nOS                             Darwin 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan  9 20:58:23 PST 2020; root:xnu-6153.81.5~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@curegit can you verify the behaviour when explicitly using `-Command` v.s. `-File` parameters for pwsh and powershell?\r\n\r\n```\r\npwsh -Command Script.ps1 -1\r\npowershell -Command Script.ps1 -1\r\n\r\npwsh -File Script.ps1 -1\r\npowershell -File Script.ps1 -1\r\n```",
      "created_at": "2020-02-24T14:03:35Z",
      "updated_at": "2020-02-24T14:03:35Z"
    },
    {
      "author": "curegit",
      "author_association": "NONE",
      "body": "@vexx32 \r\n\r\n```bat\r\n>powershell -Command script.ps1 -1\r\n-1\r\n\r\n>powershell -File script.ps1 -1\r\n0\r\n\r\n```\r\n\r\n```sh\r\n$ pwsh -Command ./script.ps1 -1\r\n-1\r\n$ pwsh -File ./script.ps1 -1\r\n0\r\n```\r\n\r\nIt doesn't make sense to me. I think all characters appeared after the File parameter are interpreted as script parameters from seeing the `pwsh` help.",
      "created_at": "2020-02-25T03:34:29Z",
      "updated_at": "2020-02-25T03:34:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm not clear on why there's this difference here. @mklement0 I think has run into this before and might have some insight here...\r\n\r\nBut the reason for the difference between pwsh and powershell when not specifying -Command or -File I think is due to the default action being changed between WinPS and pwsh.",
      "created_at": "2020-02-25T03:50:23Z",
      "updated_at": "2020-02-25T03:50:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32 : indeed, the default CLI parameter has changed from `-Command` to `-File` in PowerShell Core, so as to properly support Unix shell scripts with shebang lines.\r\n\r\n`-File` fundamentally processes the arguments that follow the target script path differently than `-Command`:\r\n\r\n`-File` interprets the arguments _verbatim_ rather than subjecting them to the usual in-process parameter-parsing and binding (which `-Command` also does).\r\n\r\nHowever - and this appears to be the bug at hand - `-File` apparently _blindly_ interprets `-`-prefixed tokens as parameter _names_, even though `-1` is during regular (in-process) parsing is _never_ considered a parameter _name_, because parameter names starting with a _digit_ aren't supported.\r\n\r\nIn effect, it seems, `-1` is mistakenly treated as an _undeclared (switch) parameter_, which is collected in `$args` rather than being bound _positionally_, as a _number_, to parameter `-number`.\r\n\r\nYou can verify this by declaring `script.ps1` as follows, using the `[CmdletBinding()]` attribute to cause _undeclared_ parameters / arguments to cause an _error_:\r\n\r\n```powershell\r\n[CmdletBinding()]\r\nparam([Int]$number)\r\n\"-number: [$number]\"\r\n```\r\n\r\n-> `A parameter cannot be found that matches parameter name '1'`\r\n\r\nThe only workaround is to use `-number -1` (_named_ argument passing) instead of `-1`; `(-1)` is _not_ an option, due to the aforementioned _verbatim_ interpretation of the arguments.\r\n\r\nNote that a variation of this issue has come up before with respect to Booleans passed to `[switch]` / `[bool]` parameters and has _partially_ been fixed in PR #4178, though #10838 remains unsolved.",
      "created_at": "2020-03-01T22:27:33Z",
      "updated_at": "2020-03-01T22:29:02Z"
    }
  ],
  "created_at": "2020-02-24T09:26:01Z",
  "number": 11939,
  "state": "open",
  "title": "pwsh doesn't parse positional negative integer parameters correctly",
  "updated_at": "2020-03-01T22:29:02Z"
}