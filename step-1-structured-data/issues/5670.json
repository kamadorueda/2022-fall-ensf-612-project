{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5670",
  "author": "heaths",
  "body": "I have 2 different .NET Framework modules - \"MSI\" and \"VSSetup\" both available on the PSGallery - that are not automatically loading in Core like they do in desktop. I've tried installing them for CurrentUser and for AllUsers, but when typing one of their cmdlets - even when discoverable (i.e. exported via ModuleInfo) - the module is not loaded automatically.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\ninstall-module MSI -scope currentuser -force\r\nget-msiproductinfo\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n# module is loaded and output returned, e.g.\r\nProductCode                            ProductVersion      ProductName\r\n-----------                            --------------      -----------\r\n{90160000-008C-0000-0000-0000000FF1CE} 16.0.8827.2036      Office 16 Click-to-Run Extensibility Component\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nget-msiproductinfo : The term 'get-msiproductinfo' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ get-msiproductinfo\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (get-msiproductinfo:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                                                                    \r\n----                           -----                                                                                    \r\nPSVersion                      6.0.0-rc                                                                                 \r\nPSEdition                      Core                                                                                     \r\nGitCommitId                    v6.0.0-rc                                                                                \r\nOS                             Microsoft Windows 10.0.16299                                                             \r\nPlatform                       Win32NT                                                                                  \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                  \r\nPSRemotingProtocolVersion      2.3                                                                                      \r\nSerializationVersion           1.1.0.1                                                                                  \r\nWSManStackVersion              3.0                                                                                      \r\n```\r\n",
  "closed_at": "2018-02-21T00:28:30Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is working fine for me with 6.0.0-rc.  Did you install them with PSCore6 or with Windows PowerShell?  They have independent PSModulePaths.  If you want to use modules installed from Windows PowerShell in PSCore6, you can use https://www.powershellgallery.com/packages/WindowsPSModulePath/1.0.0",
      "created_at": "2017-12-12T00:50:29Z",
      "updated_at": "2017-12-12T00:50:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I can repro this. on \r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\n$Module = Get-Module -ListAvailable MSI\r\n'Aliases: {0}' -f ($Module.ExportedAliases.Keys -join ', ')\r\n'Cmdlets: {0}' -f ($Module.ExportedCmdlets.Keys -join ', ')\r\n'Functions: {0}' -f ($Module.ExportedFunctions.Keys -join ', ')\r\n```\r\n\r\n6.0.0-rc results:\r\n\r\n```none\r\nAliases:\r\nCmdlets: \r\nFunctions: Install-MSIAdvertisedFeature, Get-MSIComponentState, Get-MSISharedComponentInfo\r\n```\r\n\r\n5.1 results:\r\n\r\n```none\r\nAliases: \r\nCmdlets: Add-MSISource, Clear-MSISource, Edit-MSIPackage, Export-MSIPatchXml, Get-MSIComponentInfo, Get-MSIFeatureInfo, Get-MSIFileHash, Get-MSIFileType, Get-MSILoggingPolicy, Get-MSIPatchInfo, Get-MSIPatchSequence, Get-MSIProductInfo, Get-MSIProperty, Get-MSISource, Get-MSISummaryInfo, Get-MSITable, Get-MSIRelatedProductInfo, Install-MSIPatch, Install-MSIProduct, Measure-MSIProduct, Remove-MSILoggingPolicy, Remove-MSISource, Repair-MSIProduct, Set-MSILoggingPolicy, Test-MSIProduct, Uninstall-MSIPatch, Uninstall-MSIProduct\r\nFunctions: Get-MSIComponentState, Get-MSISharedComponentInfo, Install-MSIAdvertisedFeature\r\n```\r\n\r\nThe `psd1` for this module has \r\n\r\n```none\r\nCmdletsToExport = '*'\r\nFunctionsToExport = '*'\r\n```\r\n\r\nOn 5.1, that is picking up the available cmdlets on on 6.0.0 it is not.",
      "created_at": "2017-12-12T11:59:18Z",
      "updated_at": "2017-12-12T11:59:18Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT yes these were installed under PowerShell Core - same session as when I tried to load them. They are also installed under PowerShell 5 but I am aware these have separate `$PSModulePath` values by default (mine still do).\r\n\r\nAfter I closed and restarted PowerShell Core, running `get-msiproductinfo` worked correctly. But I also noticed my binary module (even though it does use a _PSD1_ file, the effective `RootModule` is indeed a DLL) is not showing any exported commands in Core:\r\n\r\n```\r\n> get-module -list msi, vssetup\r\n\r\n    Directory: C:\\Users\\heaths\\Documents\\PowerShell\\Modules\r\n\r\nModuleType Version    Name                                ExportedCommands                                              \r\n---------- -------    ----                                ----------------                                              \r\nScript     3.2.26.... MSI                                 {Get-MSIProductInfo, Remove-MSILoggingPolicy, Install-MSIPr...\r\n\r\n    Directory: C:\\program files\\powershell\\6.0.0-rc\\Modules\r\n\r\nModuleType Version    Name                                ExportedCommands                                              \r\n---------- -------    ----                                ----------------                                              \r\nBinary     2.0.1.3... VSSetup                                                                                           \r\n```\r\nHowever, in PowerShell desktop the same module works:\r\n```\r\n> get-module -list msi, vssetup\r\n\r\n    Directory: C:\\Users\\heaths\\Documents\\WindowsPowerShell\\Modules\r\n\r\nModuleType Version    Name                                ExportedCommands                                             \r\n---------- -------    ----                                ----------------                                             \r\nScript     3.2.26.... MSI                                 {Get-MSIProductInfo, Remove-MSILoggingPolicy, Install-MSIP...\r\nBinary     2.0.1.3... VSSetup                             {Get-VSSetupInstance, Select-VSSetupInstance}                \r\n```\r\nIt is installed per-user, but even when _VSSetup_ was installed per-user in Core it yields the same results (i.e. no exported commands). That said, this is a .NET Framework assembly targeting .NET 4.5 (I have desktop environments I need to support and 4.5 is nearly ubiquitous on Win7 even though it's not installed by default).",
      "created_at": "2017-12-12T22:44:09Z",
      "updated_at": "2017-12-12T22:45:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should investigate this to understand what is happening",
      "created_at": "2017-12-12T22:53:37Z",
      "updated_at": "2017-12-12T22:53:37Z"
    },
    {
      "author": "jayshah19949596",
      "author_association": "NONE",
      "body": "Hello...  I am facing the same issue.. any solution??",
      "created_at": "2017-12-26T08:26:08Z",
      "updated_at": "2017-12-26T08:26:08Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "Does adding `CmdLetsToExport` with the exported cmdlets to your VSSetup module change the behavior?",
      "created_at": "2018-01-09T07:36:03Z",
      "updated_at": "2018-01-09T07:36:03Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "It already declares `CmdletsToExport`.",
      "created_at": "2018-01-09T21:14:38Z",
      "updated_at": "2018-01-09T21:14:38Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not seeing it in the VSSetup module's `VSSetup.psd1`.\r\n\r\n``` PowerShell\r\n    PS:> Get-Content .\\VSSetup.psd1\r\n    # Copyright (C) Microsoft Corporation. All rights reserved.\r\n    # Licensed under the MIT license. See LICENSE.txt in the project root for license information.\r\n    @{\r\n    GUID = '440e8fb1-19c4-4d39-8f75-37424bc4265a'\r\n    Author = 'Microsoft Corporation'\r\n    CompanyName = 'Microsoft Corporation'\r\n    Copyright = 'Copyright (C) Microsoft Corporation. All rights reserved.'\r\n    Description = 'Visual Studio Setup PowerShell Module'\r\n    ModuleVersion = '2.0.1.32208'\r\n    PowerShellVersion = '2.0'\r\n    CLRVersion = '2.0'\r\n    ModuleToProcess = 'Microsoft.VisualStudio.Setup.PowerShell.dll'\r\n    RequiredAssemblies = 'Microsoft.VisualStudio.Setup.PowerShell.dll'\r\n    TypesToProcess = 'VSSetup.types.ps1xml'\r\n    PrivateData = @{\r\n      PSData = @{\r\n        ProjectUri = 'https://github.com/Microsoft/vssetup.powershell'\r\n        LicenseUri = 'https://github.com/Microsoft/vssetup.powershell/raw/d07df303d5/LICENSE.txt'\r\n      }\r\n    }\r\n    }\r\n```\r\n\r\nI was just curious if it was updated to correctly use `CmdletsToExport`, would it behave as expected?",
      "created_at": "2018-01-10T03:24:17Z",
      "updated_at": "2018-01-10T03:24:17Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, must have been thinking of another module I own. I do call this in my `RootModule`'s PSM1 file:\r\n\r\n```powershell\r\nExport-ModuleMember -Cmdlet * -Variable VSSetupVersionTable\r\n```\r\n\r\nSo I'll need both then? How many places must I export?",
      "created_at": "2018-01-10T18:08:19Z",
      "updated_at": "2018-01-10T18:08:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@heaths best practice is to use a psd1 manifest and explicitly list the cmdlets that are exported.  The reason is that there is a significant performance penalty when PowerShell is searching for cmdlets if it has to parse your psm1 file and determine which cmdlets are exported compared to just parsing the psd1 file.",
      "created_at": "2018-01-10T18:36:41Z",
      "updated_at": "2018-01-10T18:36:41Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "By listing them in the psd1, you don't have to call `Export-ModuleMember`",
      "created_at": "2018-01-10T18:41:39Z",
      "updated_at": "2018-01-10T18:41:39Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "That does work, yes.",
      "created_at": "2018-01-12T01:00:14Z",
      "updated_at": "2018-01-12T01:00:14Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I understand the dilemma and have fixed my module, but in the interest of back-compat would it be worth it to only parse PSM1 files if the PSD1 does not explicitly list any cmdlets, functions, variables, etc., i.e. if it populates one you could probably assume everything exportable is specified?\r\n\r\nIf not, you could probably go ahead and close this.",
      "created_at": "2018-02-17T16:08:30Z",
      "updated_at": "2018-02-17T16:09:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@heaths I believe this issue is somewhat mitigated by this PSScriptAnalyzer rule: https://github.com/PowerShell/PSScriptAnalyzer/issues/434, so I'm closing this for now.",
      "created_at": "2018-02-21T00:28:30Z",
      "updated_at": "2018-02-21T00:28:30Z"
    }
  ],
  "created_at": "2017-12-11T23:04:19Z",
  "labels": [
    "WG-Engine",
    "Resolution-External"
  ],
  "number": 5670,
  "state": "closed",
  "title": "Some modules are not automatically imported",
  "updated_at": "2018-03-24T17:59:35Z"
}