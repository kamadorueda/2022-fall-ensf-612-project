{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9154",
  "author": "mklement0",
  "body": "Generally, PowerShell retains the data type of the LHS in an arithmetic operation, if the LHS's data type is already wide enough / supports non-integral numbers in order to accommodate the result.\r\n\r\nWith a `[decimal]`-typed RHS, that appears not to be the case - the `[decimal]` type is enforced as the result type, which can break the calculation.\r\n\r\nPerhaps was the idea was not to lose precision, which could happen if the `[decimal]` were converted to a `[double]`, but the behavior is both inconsistent and surprising.\r\n\r\n# Steps to reproduce\r\n\r\nDivide an (implicitly typed) `[double]` by an (implicitly typed) `[decimal]`.\r\n\r\n```powershell\r\n79228162514264337593543950335.0 / 10000000000000000000\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n7922816251.42643\r\n```\r\n\r\nThat is, the result should be a `[double]`,  as you would get if you forced the RHS to a `[double]` too (`79228162514264337593543950335.0 / 10000000000000000000.0`)\r\n\r\n# Actual behavior\r\n\r\nThe following error occurs:\r\n\r\n```none\r\nValue was either too large or too small for a Decimal.\r\n...\r\n```\r\n\r\n\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-rc.1\r\nWindows PowerShell v5.1 \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Why does specifying a trailing `.0` force a number which can be represented as a [decimal] to be represented as a much less capable [double]?   The trailing zero has no value in the representation of the number, either in resolution or scale, only certainty, and neither double nor decimal have provision for certainty (at least not of the decimal portion).  In other words, the error is wrong, the value is not too large for a [decimal].  However, after its converted to [double], the loss of precision results in a rounding up, so later when it tries to implicitly convert it to a higher precision type ([decimal]) the number is just now too big).\r\n\r\nI think conversions are always towards the type that has the highest precision (which is almost always the type that takes more space), not the type that is either left or right.",
      "created_at": "2019-03-21T04:40:01Z",
      "updated_at": "2019-03-21T04:40:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Conversions are usually to the type on the LHS. If both types are numeric, then both types are cast into the numerically \"wider\" type of the two (whichever can hold the larger values, essentially, which is not necessarily the highest precision).\r\n\r\n`1.0` is parsed into a `double` the exact same way in c# and probably other languages also. Double is the default floating-point number for powershell. If you want it to be a decimal, you need to apply the `d` suffix: `1.0d`\r\n\r\n",
      "created_at": "2019-03-21T10:38:38Z",
      "updated_at": "2019-03-21T10:38:38Z"
    }
  ],
  "created_at": "2019-03-17T22:12:28Z",
  "number": 9154,
  "state": "open",
  "title": "A [decimal]-typed RHS in an arithmetic operation unexpectedly forces the result into a [decimal], which can fail",
  "updated_at": "2019-03-21T10:38:38Z"
}