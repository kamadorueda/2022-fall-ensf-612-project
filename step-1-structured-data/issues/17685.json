{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17685",
  "author": "TonyStachnicki",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nStarting with a user profile / home directory called C:\\Users\\tonys\r\nCreate a separate home directory called D:\\Users\\tonys\r\nMove unhidden folders into the new folder, using Microsoft-approved methods.\r\nRun command: net user tonys /homedir:D:\\Users\\tonys\r\nSign-off/sign-on.\r\nThe values of %HOMEDRIVE% and $ENV:HOMEDRIVE are now \"D: \".\r\nBut in PowerShell the values of $HOME and the \"~\" character are still \"C:\\Users\\tonys\".\r\n\r\nI have reproduced this using .zip versions 6.2.4, 7.0.0, 7.2.5, and 7.3.0 preview 5.\r\n\r\nThe documentation for the Get-PSProvider cmdlet defines the Home property of the FileSystem provider as  $env:homedrive\\$env:homepath or $home.\r\nLink: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-psprovider?view=powershell-7.2\r\n\n\n### Expected behavior\n\n```console\nPS C:\\Users\\tonys> $ENV:HOMEDRIVE\r\nD:\r\nPS C:\\Users\\tonys> $HOME\r\nD:\\Users\\tonys\r\nPS C:\\Users\\tonys> (Resolve-Path ~).Path\r\nD:\\Users\\tonys\n```\n\n\n### Actual behavior\n\n```console\nPS C:\\Users\\tonys> $ENV:HOMEDRIVE\r\nD:\r\nPS C:\\Users\\tonys> $HOME\r\nC:\\Users\\tonys\r\nPS C:\\Users\\tonys> (Resolve-Path ~).Path\r\nC:\\Users\\tonys\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "What do  `[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)` and `$env:UserProfile` return\r\n",
      "created_at": "2022-07-14T21:33:15Z",
      "updated_at": "2022-07-14T21:33:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Unfortunately, PowerShell  on Windows has always used the value of  `$env:USERPROFILE` as `$HOME` and `~` (in the `FileSystem` provider), which is only _by default_ the same as  `${env:HOMEDRIVE}${env:HOMEPATH}`\r\n\r\nIf the home directory is configured to differ from the profile location, you'll have to use the latter, at least currently.\r\n\r\n\r\n\r\n",
      "created_at": "2022-07-14T21:37:37Z",
      "updated_at": "2022-07-14T21:37:37Z"
    },
    {
      "author": "TonyStachnicki",
      "author_association": "NONE",
      "body": "<kbd>[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)</kbd> and <kbd>$env:UserProfile</kbd> both return \"C:\\Users\\tonys\".",
      "created_at": "2022-07-14T22:11:45Z",
      "updated_at": "2022-07-14T22:11:45Z"
    },
    {
      "author": "TonyStachnicki",
      "author_association": "NONE",
      "body": "It seems to me that the user profile and the home directory are two logically separate folders that share the same physical folder in Windows. Is it at all likely that <kbd>$HOME</kbd> will be changed to <kbd>$env:HOMEDRIVE$env:HOMEPATH</kbd> in the near future, or ever?\r\n\r\n",
      "created_at": "2022-07-14T22:22:06Z",
      "updated_at": "2022-07-14T22:22:06Z"
    },
    {
      "author": "TonyStachnicki",
      "author_association": "NONE",
      "body": "[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)\n and $env:UserProfile both return \"C:\\Users\\tonys\".\n",
      "created_at": "2022-07-15T07:35:35Z",
      "updated_at": "2022-07-15T07:35:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> It seems to me that the user profile and the home directory are two logically separate folders that share the same physical folder in Windows. Is it at all likely that $HOME will be changed to $env:HOMEDRIVE$env:HOMEPATH in the near future, or ever?\r\n\r\nThere **are** two functions - IIRC profile was originally the home of NTUser.Dat - and is set for each user in the registry,    \r\nand the home directory was where users put personal files. The two are moved independently if  `net user tonys /profilepath:newDir` is combined with the `/homedir`  version everything is in one places otherwise you get the functions delivered from different directories.  \r\n\r\nWhen the two are different, whether ~ should be home or profile is arguable both ways but changing it will inevitably break things.   \r\nI did a scan for things that use $home and found that most of the use is combined with \\Documents (and in a few cases with \\Pictures) when the script should use `[System.Environment]::GetFolderPath()`. These scripts will fail when `Documents` etc are moved under `onedrive` for example (I have one machine set that way). \r\n Having $home as  `%HomeDrive%%HomeDir%`  instead of `%userProfile%` would mean these scripts have a chance of working when home <> profile.  \r\n So I can see that `$home` **MIGHT** be changed.  How likely or how soon ? That depends on persuading people that what it fixes is worth fixing and doing so has little chance of side effects. That probably needs a bigger scan of how it is used.   \r\n\r\n",
      "created_at": "2022-07-15T12:39:43Z",
      "updated_at": "2022-07-15T12:41:10Z"
    },
    {
      "author": "TonyStachnicki",
      "author_association": "NONE",
      "body": "I have run my PCs with the \"Known\" and OneDrive folders in folder\nD:\\Users\\tonys for many years.\nI use a PowerShell profile script to set up each session with what I\nconsider to be the correct $HOME variable and have been happy with the\nresults.\nI find this folder arrangement is very good for backup and recovery.\nI can restore Windows partitions without upsetting my data partition and\nvice-versa.\n\nA few weeks ago I discovered that I could change the HOMEDRIVE using the\n\"net user\" command.\nThis works for the Command Prompt, the working directory is now\n\"D:\\Users\\tonys\".\nAnd for expanded string properties in the registry, %HOMEDRIVE% is replaced\nby \"D:\".\nI was disappointed to find that although PowerShell has $Env:HOMEDRIVE set\nto \"D:\", the $HOME variable has not changed.\n\nHowever I can understand that the benefits of changing $HOME to use the\nHOMEDRIVE are small and many other users might experience problems.\n\n",
      "created_at": "2022-07-16T12:17:39Z",
      "updated_at": "2022-07-16T12:17:42Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Is there a reason why you have left the profile on C: and not used the second `net user` command to move it to D: as well ? \r\n\r\nIt's a minority of people who split the drive into multiple partitions, and of those only the ones who put home on one and keep profile on the other are going to hit this issue.  For everyone else it doesn't matter if $home is set homedrive\\homepath, or userprofile. It's been the latter (wrongly) for ever.  For the few affected something will be fixed if it is changed. But $home isn't used by many things, and where it is used it's not reliable. The advice really should be not to rely on $home but where things do, life can be made better for a few people by changing. So can you provide a list of things that aren't working because $home is wrong ? Because if it's just an annoyance that an unused variable has the wrong value in some \"edge cases\" it's hard to see it getting attention. \r\n\r\n \r\n\r\n \r\n",
      "created_at": "2022-07-16T13:41:45Z",
      "updated_at": "2022-07-16T13:41:45Z"
    },
    {
      "author": "TonyStachnicki",
      "author_association": "NONE",
      "body": "I like the fact that all the software is on the \"C\" volume and it's easy to\nremove changes by restoring this volume, without affecting my personal\nfiles on the \"D\" volume.\nThe AppData folder in \"C:\\Users\\tonys\" contains application packages.\nThe registry hive files in \"C:\\Users\\tonys\" contain software configuration\nsettings.\nSo these programs and settings stay in sync with the operating system and\nthe other application software.\n\nWhen I reinstall Windows, I choose to completely replace the old system, so\neverything on the \"C\" volume is reset to a clean state.\nI have a PowerShell script that uses the \"KnownFolder\" programming\ninterface functions to change the folder paths of the relocated folders to\nthe appropriate \"D:\\Users\\tonys\" folders.\nI have never had any problems with this approach.\n\nFor years I have used a PowerShell profile script to set $HOME and the\ninitial working directory to my preferred location, so I don't have to hard\ncode values in the rest of my code.\nI will just carry on using this script.\n",
      "created_at": "2022-07-16T15:19:43Z",
      "updated_at": "2022-07-16T15:19:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the importance of `$HOME` and its if-the-current-location-is-a-file-system-location equivalent, `~`:\r\n\r\nIt's an invaluable, cross-platform way to refer to the current user's home directory, and, at least from what I can tell, frequently used - but it has inherent challenges:\r\n\r\nGiven the variable's name:\r\n\r\n* From a Windows-only perspective (which applies to  _Windows PowerShell_), it should always have been the equivalent of `%HOMEDRIVE%HOMEPATH%` (expressed in `cmd.exe` terms), not the value of `%USERPROFILE%`, which only _by default_ is the same as the former.\r\n  * The distinction between the two location is where _data_ (home) is stored  vs. where _configuration_ (profile) is stored.\r\n  * As an aside: Arguably, _Windows itself_ should provide a _single_ environment variable that reflects the value of `%HOMEDRIVE%HOMEPATH%`\r\n\r\n* On Unix-like platforms, there's no such distinction, and `$HOME` reliably refers to the user's home directory.\r\n\r\nGiven the _cross-platform_ nature of PowerShell Core, there is an inherent tension:\r\n\r\n* The _current_ definition of `$HOME` reliably refers to where _some_ applications - notably those with a Unix heritage or those designed with multi-platform support - store their _configuration_ information (e.g, `~/.dotnet`)\r\n\r\n* On Unix-like platforms, it also _reliably_ refers to where a user's data (documents) are stored, but on Windows it does so only _situationally_, depending on the host machine's configuration.\r\n\r\nIn short: To resolve this tension and to account for other platform differences , true _platform-agnostic abstractions_ are needed - see #6966\r\n\r\n\r\n\r\n",
      "created_at": "2022-07-16T22:54:15Z",
      "updated_at": "2022-07-16T22:54:15Z"
    }
  ],
  "created_at": "2022-07-14T21:06:50Z",
  "labels": [
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 17685,
  "state": "open",
  "title": "HOMEDRIVE is D: but $HOME and ~ still use C:",
  "updated_at": "2022-07-21T22:41:56Z"
}