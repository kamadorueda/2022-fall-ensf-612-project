{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1909",
  "author": "richardszalay",
  "body": "I have an assembly-based power shell module (pshosts) that I'd like to port to ps-core. \n\nObviously my first steps are going to be compiling the assembly for .net core, but I'm at a loss for what needs to be done for the module declaration. For example, does ps-core define any additional psm1 syntax for specifying supported platforms or having separate assemblies for full vs core clrs?\n\nI realise its early days right now, but any help would be appreciated.\n",
  "closed_at": "2019-03-28T21:11:22Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "as of PS 5.1 (avail in win10 & will be in Server 2016) there is an additional property available in the PowerShell Module Manifests called CompatiblePSEditions\n\nThis currently supports Desktop & Core as the possible options and I believe that the PSScriptAnalyzer has been updated to be able to scan for this.\n\nHowever\n\nAs soon as you add that the module is unable to be installed on downlevel PS versions like PSv2 - PSv5 (currently)\n\nI know this is something that myself and other MVP's have been discussing in the last few days.\n\nBut I would be doing what you are suggesting and trying to recompile for .NET core anyway as that should still run on .NET Full versions (note should because I'm not 100% on that)\n",
      "created_at": "2016-08-18T20:48:43Z",
      "updated_at": "2016-08-18T20:48:43Z"
    },
    {
      "author": "richardszalay",
      "author_association": "NONE",
      "body": "Hrm, dropping support for PSv3-5 would be a deal breaker for me, I think, especially since I already distribute via the psgallery so I wouldn't be able to split it via distribution channel. Are there any plans for that to change? (you did say \"currently\")\n\nStill, in the meantime I'll look at getting it working under pscore so I'm ready when things change (or those versions become irrelevant - if you know anyone on the psgallery side of things, tell them that OS/PSversion download statistics would be handy :)\n",
      "created_at": "2016-08-18T22:41:04Z",
      "updated_at": "2016-08-18T22:41:04Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I'd need to dig out some notes but yes this as it is currently. Plans around how this works going forward are still tbd I believe\n",
      "created_at": "2016-08-18T23:58:45Z",
      "updated_at": "2016-08-18T23:58:45Z"
    },
    {
      "author": "richardszalay",
      "author_association": "NONE",
      "body": "No problems, at least I'll be prepared. \n",
      "created_at": "2016-08-19T00:57:16Z",
      "updated_at": "2016-08-19T00:57:16Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't this as good a place as anywhere to discuss this? @kilasuit, @KirkMunro @rkeithhill \n\nObviously `PSEdition = Core` is **not** required to get the module to load, and **cannot** be used without breaking backwards compatibility anyway.\n\n## The problem\n1. You need to ship **one module** because the PowerShellGallery doesn't currently handle having multiple architecture-specific versions of assemblies.\n2. You need to load the right assembly at run time\n\n### Solution Ideas\n1. Fix it at **install time**: Fix the PowerShellGallery and the module to be able to publish multiple modules based on the PSEdition **and/or** PSVersion, and download the right version automatically, or the specified version on demand, or all versions.\n2. Fix it at **load time**: Decide on a convention (probably just use the same [convention](https://docs.nuget.org/create/enforced-package-conventions) that [NuGet uses](http://blog.nuget.org/20141014/in-the-platform.html) right?) and make `Add-Type -Assembly` and `RequiredAssemblies` _and also_ `RootModule` to load the right assembly automatically.\n",
      "created_at": "2016-08-20T19:22:47Z",
      "updated_at": "2016-08-20T19:22:47Z"
    },
    {
      "author": "gigi81",
      "author_association": "NONE",
      "body": "I tried to port one of my assembly based ps modules to ps core on Linux and managed to make it work. I have the same issue as @richardszalay pointed out on how to publish the module to the psgallery so I would as well appreciate any suggestion.\n\nIf I can add to the conversation a secondary issue I experienced is that when I build the module (dll) in the dotnet core project, the nuget dependencies are not copied to the output folder. My understanding is that this is by dotnet core design, and there is no way around it. Dependencies are only copied to the output directory when publishing a command line executable. So, just for the sake of testing, I copied the dependencies manually. Some of the dependencies were actually not required (like all the System.\\* that are already loaded by the powershell assembly), so I also add to remove the redundant dependencies. This makes the task of packaging the resource quite painful.\nIt would be nice if somehow the dependencies could be installed directly from nuget when installing the package. Maybe adding the dependency list on the module manifest.\n",
      "created_at": "2016-08-20T22:14:23Z",
      "updated_at": "2016-08-20T22:14:23Z"
    },
    {
      "author": "richardszalay",
      "author_association": "NONE",
      "body": "Any updates on this? I've seen `.NetCore` module suffix from the Azure and AWS teams. Google Cloud doesn't publish to the PS Gallery so they simply provide a separate download.\r\n\r\nI'd be happy if that were the guidance, but I'd also be happy with any official guidance.\r\n\r\n(as a reminder, this is the scenario where I'd like to retain compatibility with PowerShell 3 while also supporting PsCore)",
      "created_at": "2016-12-03T22:48:18Z",
      "updated_at": "2016-12-03T22:48:18Z"
    },
    {
      "author": "richardszalay",
      "author_association": "NONE",
      "body": "... or is this one of those things that will be a non-issue with netcore 2.0?",
      "created_at": "2016-12-04T05:29:53Z",
      "updated_at": "2016-12-04T05:29:53Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "For what it's worth, a binary module can be constructed now targeting .Net Standard 1.6 that will work _just fine_ in full Windows PowerShell with Full Framework as well as PowerShell Core. If you don't need to add functionality per OS, there shouldn't be any need to do anything tricky.",
      "created_at": "2017-01-14T06:03:47Z",
      "updated_at": "2017-01-14T06:03:47Z"
    },
    {
      "author": "richardszalay",
      "author_association": "NONE",
      "body": "Thanks Jaykul,\r\n\r\nDoes this apply to a specific version of PSCore?\r\n\r\nAlso does this mean no longer having to make a change to the manifest (thereby losing support for PS < 5) to support PSCore?",
      "created_at": "2017-01-14T07:15:00Z",
      "updated_at": "2017-01-14T07:15:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@richardszalay this PR https://github.com/PowerShell/PowerShell/pull/3095 has documentation on producing portable modules that work on both Windows PowerShell and PowerShell Core",
      "created_at": "2017-03-06T19:13:45Z",
      "updated_at": "2017-03-06T19:13:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We've published some documentation on this so I believe we can consider this closed:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/learn/writing-portable-modules?view=powershell-6\r\n\r\nalso see\r\n\r\nhttps://devblogs.microsoft.com/powershell/powershell-standard-library-build-single-module-that-works-across-windows-powershell-and-powershell-core/\r\n",
      "created_at": "2019-03-28T21:11:22Z",
      "updated_at": "2019-03-28T21:11:22Z"
    }
  ],
  "created_at": "2016-08-18T20:28:42Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Documentation",
    "Resolution-Fixed"
  ],
  "number": 1909,
  "state": "closed",
  "title": "Publish guidance for existing PS modules",
  "updated_at": "2019-03-28T21:11:30Z"
}