{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6815",
  "author": "DarwinJS",
  "body": "I updated the installer with a bug fix so that it would recognize preview releases and now it takes them by default.\r\n\r\nI noticed that yum update now takes subsequent preview releases - but I'm uncertain whether that is because I already took a preview or if the yum repository is serving up the latest regardless of preview status.\r\n\r\nAs a consumer of both the installer-powershell.sh script and the Microsoft Linux repositories, I think opting into previews should be under the control of the installer and default to stable only.\r\n\r\nI can foresee how that would mean a special switch on install-powershell.sh should be necessary, but I don't know if the repository is setup properly to serve only stable by default?",
  "closed_at": "2018-06-25T18:44:43Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @TravisEz13 @SteveL-MSFT ",
      "created_at": "2018-05-03T17:01:39Z",
      "updated_at": "2018-05-03T17:01:39Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The linux package should be renamed to `powershell-preview` for non-stable releases so people can choose if they want stable or preview.\r\nEither this issue should be changed to do that or we should file a new issue.",
      "created_at": "2018-05-03T21:47:35Z",
      "updated_at": "2018-05-03T21:48:29Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking a switch for the regular package - like package installers.\r\n",
      "created_at": "2018-05-04T01:19:42Z",
      "updated_at": "2018-05-04T01:19:42Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "In any case it just currently pulls the latest tag and pulls the release - it needs some logic to ignore prereleases - not too challenging if it will ONLY ever be \"prerelease\" but if it has to support full semantic versions where any character or dash indicates a prerelease - that is more challenging.\r\n\r\nI guess the version based tag pull could also be limited to distros that don't have a repository (still quite a few right?)\r\n\r\nD.",
      "created_at": "2018-05-04T01:23:03Z",
      "updated_at": "2018-05-04T01:23:03Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The issue is it shouldn't even be the same package in the first place.  You should have to opt-in to getting the preview releases.",
      "created_at": "2018-05-04T17:10:09Z",
      "updated_at": "2018-05-04T17:10:09Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "install-powershell.sh is not a package - it is a method for installing packages.  So I'm advocating that like package managers the script adopt the same approach of a switch which controls opt-in to prereleases.\r\n\r\nI'm also trying to express that splitting into two scripts does not lessen development as the same logic to avoid or consume prerelease tagged packages must be built and used in both in order to continue serviing any install target that is not repo based.\r\n\r\nSo there does not seem to be speed of development nor simplicity benefits to splitting into two scripts.",
      "created_at": "2018-05-05T10:43:28Z",
      "updated_at": "2018-05-05T10:45:05Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I have a follow up question - should prereleases be publish here - this is why the script finds them at all: https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/metadata.json\r\n\r\nShould this be in a separate file for prereleases?",
      "created_at": "2018-05-05T10:50:42Z",
      "updated_at": "2018-05-05T10:50:42Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like the releases are not being properly tagged as prereleases - so will it will also be up to parsing to determine prerelease status?\r\n\r\n![image](https://user-images.githubusercontent.com/11597190/39664413-e97f5c32-5050-11e8-885a-ea16e6498162.png)\r\n\r\nThis screenshot also shows that it is actually \"releases\" that are the exeption.",
      "created_at": "2018-05-05T14:41:50Z",
      "updated_at": "2018-05-05T14:49:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder too why we don't set the check box.",
      "created_at": "2018-05-05T18:06:55Z",
      "updated_at": "2018-05-05T18:06:55Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like it can be change retroactively. I'll defer the actual change to @TravisEz13 or @daxian-dbw as I'm not sure if changing it would break anything.",
      "created_at": "2018-05-07T09:41:28Z",
      "updated_at": "2018-05-07T09:41:28Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@daxian-dbw  told me not to tag any release as pre-release.  I'm not sure why.",
      "created_at": "2018-05-08T21:13:33Z",
      "updated_at": "2018-05-08T21:13:33Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "So two complexities push this beyond my bash skills and my current time for doing this update:\r\n- detecting prereleases based on parsing\r\n- getting a complete release list *without* json parsing\r\n\r\nI'm not keen on the implications of trying to pull a json parser *package* onto target systems as that would likely disable support for a lot of systems that could otherwise work.  Some of these would be in the grey area in terms of official support (like amazon linux) - but it would still seem weird to lose support over an intermediary tool requirement - especially since these are some of the toughest targets for adoption - so making it even harder for a trite reason seems like an adoption anti-pattern.\r\n\r\nAnyone have coding experience doing github full version enumerations in pure bash?",
      "created_at": "2018-05-08T21:49:48Z",
      "updated_at": "2018-05-08T21:49:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "|distro | problem | implementation |\r\n|------|----------|----------------|\r\n|debian| package | package Mgr |\r\n|redhat| package | package Mgr |\r\n|susue | script      | tar gz            |\r\n|macos| working  | brew             |\r\n|amazonlinux| script| tar gz     |\r\n\r\nThe problem is actually with our package where the script is using the inbox package manage. The issue is only in your script for two of the distros.  I would suggest just hard coding the latest stable version in those two scripts.  We should fix the package manager issues.",
      "created_at": "2018-05-08T22:32:56Z",
      "updated_at": "2018-05-08T22:32:56Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "A promising start:\r\n\r\n`curl https://api.github.com/repos/PowerShell/PowerShell/releases | grep -Po '\"tag_name\":(\\d*?,|.*?[^\\\\]\",)' | awk -F':' '{print $2}'`",
      "created_at": "2018-05-09T12:20:41Z",
      "updated_at": "2018-05-09T12:20:41Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Can anyone help with the statement so I can get one list of preview releases and one of product (based on presence or lack of \"-\" or characters) ?\r\n\r\nLooking for arrays without the quotes and commas.\r\n\r\nI'm not sure how just regular sorting will work of those two lists - but I could work that part out.\r\n",
      "created_at": "2018-05-09T16:08:04Z",
      "updated_at": "2018-05-09T16:08:27Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Looking for feedback on this code.  Only tested on CentOS.\r\n\r\nFYI - I'm not trying to create a universal bash github version enumerator (only compat with powershell project) - so it may contain some assumptions - for instance, that all prerelease identifiers sort with the most recent last in the case an overlapping version number is used between prereleases and that all versions start with 3 leading numeric segments.\r\n\r\n```\r\necho \"All Versions\"\r\ncurl https://api.github.com/repos/PowerShell/PowerShell/releases | grep -Po '\"tag_name\":(\\d*?,|.*?[^\\\\]\",)' | grep -Po '\\d.\\d[\\da-z.-]*'\r\n\r\nlastprodrelease=$(curl https://api.github.com/repos/PowerShell/PowerShell/releases | grep -Po '\"tag_name\":(\\d*?,|.*?[^\\\\]\",)' | grep -Po '\\d+.\\d+.\\d+[\\da-z.-]*' | grep -v '[a-z]' | sort | tail -n1)\r\n\r\necho \"Latest Regular Version: $lastprodrelease\"\r\n\r\nlastprerelease=$(curl https://api.github.com/repos/PowerShell/PowerShell/releases | grep -Po '\"tag_name\":(\\d*?,|.*?[^\\\\]\",)' | grep -Po '\\d+.\\d+.\\d+[\\da-z.-]*' | grep '[a-z]' | sort | tail -n1)\r\n\r\necho \"Latest Prerelease Version: $lastprerelease\"\r\n```\r\n\r\n**I have added a proper PR that uses the above code - if you have concerns about the code please add them to the PR instead of this issue.**",
      "created_at": "2018-05-10T09:05:17Z",
      "updated_at": "2018-05-10T11:09:42Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "#6405 seems to track the same thing.",
      "created_at": "2018-05-18T00:37:29Z",
      "updated_at": "2018-05-18T00:37:29Z"
    }
  ],
  "created_at": "2018-05-03T16:25:44Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 6815,
  "state": "closed",
  "title": "Proper prerelease handling for install-powershell.sh and linux respositories",
  "updated_at": "2018-06-26T05:00:37Z"
}