{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9799",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\n## 1: ParameterSetName\r\n\r\n### Currently\r\n`ParameterSetName` is very long, wordy, and redundant in its name, given that it's specifically attached _to_ a `Parameter` attribute.\r\n\r\n```powershell\r\nparam(\r\n    [Parameter(Position = 0, Mandatory, ParameterSetName = 'MySet')]\r\n)\r\n```\r\nThis seems super unnecessary and makes for attribute declarations that become kind of unwieldy.\r\n\r\n### Proposal\r\n\r\nWe could implement either:\r\n1. Support for the `[Alias()]` attribute on attribute members when matching names supplied in the attribute declaration.\r\n2. Add a ghost property (getter/setter pointing back at the original property).\r\n\r\nI'd propose a shorter name such as simply `SetName` as being entirely sufficient. I feel there's no need to completely restate `Parameter` in `ParameterSetName`.\r\n\r\n```powershell\r\nparam(\r\n    [Parameter(Position = 0, Mandatory, SetName = 'MySet')]\r\n    $MyParam\r\n)\r\n```\r\n\r\n## 2: ValueFrom* Properties\r\n\r\nThese are also very wordy and could, I feel, be improved from a usability standpoint without really losing out on verbosity. If this were an `Enum[]` property it would be significantly simpler to state and much less lengthy.\r\n\r\n### Currently\r\n\r\n\r\n```powershell\r\nparam(\r\n    [Parameter(Position = 0, Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, ValueFromRemainingArguments)]\r\n    $MyParam\r\n)\r\n```\r\n\r\n```powershell\r\nparam(\r\n    [Parameter(Position = 0, Mandatory, ValueFrom = 'Pipeline', 'PipelineByPropertyName')]\r\n    $MyParam\r\n)\r\n```\r\n\r\nAgain, this could be implemented without removing the existing ones by simply having the setter for this property set the related existing properties. It would exist simply to make it significantly simpler to write _and_ read these declarations.\r\n\r\nThoughts? \ud83d\ude04 ",
  "closed_at": null,
  "comments": [
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "I think this is eminently worth doing and would improve readability",
      "created_at": "2019-06-02T06:08:50Z",
      "updated_at": "2019-06-02T06:08:50Z"
    },
    {
      "author": "Graham-Beer",
      "author_association": "NONE",
      "body": "I like this as well and doesn't effect backwards compatibility.",
      "created_at": "2019-06-02T14:54:10Z",
      "updated_at": "2019-06-02T14:54:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think duplication (aliasing) in any form of language constructions is bad practice which turns a language into a secret cipher. It just kills readability.\r\nModern IDEs with IntelliSense save us from typing long names. And modern best practice is to use self-descriptive names that can be long. So I'd consider the issue as \"by design and won't fix\". \r\nIt is worth noting that this design is very simple and straightforward. And it has a significant problem that we should really solve - _it cannot describe any complex set of parameters_. As a result, we are forced to use dynamic parameters or, more often, simply add logic to the code to say which parameters can be used together and which not (with lost tab completion).\r\nThere is another scenario that we cannot implement for this reason - tab completion for native commands.\r\nI suggest not to waste time on cosmetic aliasing but focus on creating a new design. (With new names, maybe short :-) )\r\n",
      "created_at": "2019-06-04T17:04:56Z",
      "updated_at": "2019-06-04T17:04:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov do you have concrete proposals for what such a new design would entail? Sounds interesting \ud83d\ude04 ",
      "created_at": "2019-06-17T20:44:51Z",
      "updated_at": "2019-06-17T20:44:51Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'm against this for several reasons:\r\n\r\n1. It creates more work for toolmakers without adding value.\r\n1. It creates unnecessary duplication.\r\n1. I'm not convinced that the proposed alternative enhances discoverability nor do I think it makes it easier to learn.\r\n1. `ParameterSetName` is clear. `SetName` is not.",
      "created_at": "2019-06-18T01:09:05Z",
      "updated_at": "2019-06-18T01:09:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "1 & 2, fair.\r\n\r\n3 -- maybe? It's easier to write and read imo.\r\n4 -- in the context it'll be used, it's perfectly clear. `[Parameter(SetName = 'Set2')]` ",
      "created_at": "2019-06-18T01:37:33Z",
      "updated_at": "2019-06-18T01:37:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "4. Parameters have `ValidateSet`. Part of your proposal even suggested putting validators inside of the Parameter attribute. Suddenly you have multiple \"Set\" terms that could be confused. OTOH `ParameterSetName` is clear and unambiguous.",
      "created_at": "2019-06-18T01:48:52Z",
      "updated_at": "2019-06-18T01:48:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure what you mean. I wasn't proposing putting validators in the Parameter attribute. \ud83d\ude15 ",
      "created_at": "2019-06-18T02:09:31Z",
      "updated_at": "2019-06-18T02:09:31Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, crossed wires. I blame the fact that it's approaching midnight here. But regardless, I like the explicit distinction that ParameterSetName gives me. SetName feels...not specific enough, and a potential point of confusion.",
      "created_at": "2019-06-18T02:22:18Z",
      "updated_at": "2019-06-18T02:22:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd37\u200d\u2642 it's not like what I propose would _stop_ you from using the full name. I just feel it's unnecessarily redundant in the `Parameter` attribute to have a property that has `Parameter` as a prefix as well.",
      "created_at": "2019-06-18T02:29:53Z",
      "updated_at": "2019-06-18T02:30:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> do you have concrete proposals for what such a new design would entail? Sounds interesting \r\n\r\nI do not know the solution and so far I only see difficulties with the current attributes.\r\n- Existing tools are very simple to create one-two level parameter sets. \r\n- Further complexity grows exponentially. We have to apply dynamic parameters, which can also be difficult and inconvenient. As well as perform special processing in the begin block.\r\n- It is also impossible (relatively speaking) to create a single set of parameters for several cmdlets like Path, LiteralPath, Encoding (that resembles interfaces).\r\n- This could work also for external commands so that we could implement tabcompletion for them.\r\n\r\nIdeally, this could be a single attribute (cmdlet/wrapper class) with definitions based on some notation and a parser. I guess it is not too difficult. The main difficulty will arise with the integration into the existing binding mechanism without regressions.",
      "created_at": "2019-06-18T12:03:04Z",
      "updated_at": "2019-06-18T12:03:04Z"
    }
  ],
  "created_at": "2019-06-02T06:05:08Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 9799,
  "state": "open",
  "title": "[Parameter] attribute additions",
  "updated_at": "2019-06-18T12:03:05Z"
}