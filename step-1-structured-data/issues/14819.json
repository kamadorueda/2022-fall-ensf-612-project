{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14819",
  "author": "SteveL-MSFT",
  "body": "If a cmdlet uses `ThrowTerminatingError()` then that ErrorRecord is not affected by the common `-ErrorAction` parameter.  However, it is affected by `$ErrorActionPreference`.  This inconsistency is not a regression from Windows PowerShell 5.1, but is a cause of lots of user confusion.  Note that `-ErrorAction Break` DOES work because the [code](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/MshCommandRuntime.cs#L2099) explicitly checks for that, but other values are not checked. \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nInvoke-WebRequest https://foo.lskdjf -ErrorAction ignore\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nNothing\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nError printed\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.3\r\nOS                             Darwin 20.3.0 Darwin Kernel Version 20.3.0: Thu Jan 21 00:07:06 PST 2021; root:xnu-7195.81.3~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I've always been confused as to what `WriteError()` and `ThrowTemrinatingError()` was for. I always assumed the latter was meant for exceptions and shouldn't be affected by either `-ErrorAction` or `$ErrorActionPreference` but it would be good to get some further clarification in the docs or at least the .NET docs for these methods.",
      "created_at": "2021-02-16T23:55:26Z",
      "updated_at": "2021-02-16T23:55:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93, please see https://github.com/PowerShell/PowerShell-Docs/issues/1583",
      "created_at": "2021-02-17T01:43:26Z",
      "updated_at": "2021-02-17T01:43:26Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I do think a change here would in the long run be an overall positive change, and I'd like to see it personally.\r\n\r\nI'm not sure what you could actually change here without causing some real weird breaks though.  It seems like a significantly higher risk than what y'all would typically go for.",
      "created_at": "2021-02-17T18:14:39Z",
      "updated_at": "2021-02-17T18:14:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Here's a possible way forward:\r\n\r\n* Eliminate _statement_-terminating errors altogether and have only _one_ kind of terminating error: _runspace_-terminating ones (what I've been calling \"script-terminating\" error for simplicity, given that not every PowerShell user knows or needs to know what a runspace is); that is, `.ThrowTerminatingError()` would then terminate the runspace by default as well, just like `throw` already does.\r\n\r\n   * Honestly, I'm not even sure if  _statement_-terminating errors were ever meant to be introduced as such. Certainly, their elimination would make this particular headache go away and greatly simplify error handling overall.\r\n\r\n* Given the breaking nature of this change, it needs to be _opt-in_, via a new preference variable, say `$PSErrorHandling`, with enumeration values `Legacy` (default, old behavior) and `Standard` (new behavior), following the pattern proposed for the breaking change needed to fix argument-passing to external programs - see https://github.com/PowerShell/PowerShell/pull/14692#issuecomment-773391188\r\n\r\n  * This would additionally provide the opportunity to properly integrate error handling with respect to native applications, instead of introducing a separate `$PSNativeCommandErrorAction` preference variable - see the native error-handling RFC: https://github.com/PowerShell/PowerShell-RFC/pull/277/files\r\n\r\n\r\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/12662278?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC/pull/277\">Native Command Error Handling by theJasonHelmick \u00b7 Pull Request #277 \u00b7 PowerShell/PowerShell-RFC</a></strong></div><div>Link to original: #261</div></blockquote>",
      "created_at": "2021-02-17T18:27:24Z",
      "updated_at": "2021-02-17T18:28:16Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Some history/context:\r\n\r\n@mklement0  wrote:\r\n>  I'm not even sure if statement-terminating errors were ever meant to be\r\n\r\nThey are absolutely by design. Statement terminating exceptions are intended to mimic shell semantics. An error in a pipeline (optionally) writes a message then terminates the pipeline and sets `$?`. \r\n\r\nNow PowerShell error objects are much richer than traditional shell errors so one of the scenarios we had in mind was error recovery/remediation based on the contents of the error records. For example, if you're deleting a lot of files and there are some failures, the error records record which files were not deleted and why. This allows you to take additional actions in the script to delete those files. \r\n\r\nError disposition is also much richer in PowerShell through `-ErrorAction` and `$ErrorActionPreference`.  Unfortunately rich semantics also imply additional complexity. The more choices you can make implies more things to think about.\r\n\r\nPowerShell 1.0 also had `trap` (taken collectively from the Posix shell, Perl 6 and VB.) Trap has the interesting characteristic that it allows you to resume execution after an exception at the next statement in the current lexical context. \r\n\r\nUnfortunately `trap` was difficult to use when dealing with typical \"programmer\" scenarios so in PowerShell V2 we introduced `try/catch` . Now you have even more choices. This becomes especially tricky when you start to (inevitably) blend the various semantics.\r\n\r\nAnd one more dimension of complexity - expressions vs commands. For performance reasons, an expression is not evaluated in the context of the pipeline processor so it has slightly different error semantics.\r\n\r\nPhilosophically, our goal was such that if you wrote shell-style code, then you would get (enhanced) shell semantics and if you wrote programmer-style code (implied by the use of `try/catch`) then you would get (mostly) programmer semantics.\r\n\r\nThis doesn't mean that there aren't bugs (there are) or that we got the design totally right. However, tweaking the existing semantics without a total scenario review is unlikely to make things better, just different implying new confusion not less confusion. I do think it would be interesting to do the full scenario review and see if a new \"error mode\" makes sense. (Note: if we did an error mode it would have to be a compile-time switch i.e. `#requires` rather than yet another runtime preference variable.) \r\n\r\n> I've been calling \"script-terminating\" error for simplicity\r\n\r\nYes - this is the preferred terminology. 'Runspace terminating' is inaccurate as the error doesn't \"terminate\" the runspace, just the currently executing set of statements i.e. the script.\r\n\r\n",
      "created_at": "2021-02-25T00:32:27Z",
      "updated_at": "2021-02-25T00:32:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the correction re terminology, @BrucePay - let me try to put that aspect to rest:\r\n\r\nWe had a conversation about this before, in 2018: As I was trying to conceptualize [and document](https://github.com/PowerShell/PowerShell-Docs/issues/1583) PowerShell's error handling, in particular the _two types_ of terminating errors, I intuitively came up with \"script-terminating\", not knowing the true unit of execution being terminated.\r\n\r\nYou [eventually said](https://github.com/PowerShell/PowerShell/issues/3798#issuecomment-384107047):\r\n\r\n> Script-terminating is generally fine. Or \"terminates the current thread of execution\".\r\n\r\nUnfortunately, I then mistakenly ran with _runspace_-terminating whenever I wanted to be more technically accurate (while still also mentioning _script-terminating_).\r\n\r\nTo summarize:\r\n\r\n* _script-terminating_ definitely makes sense as a friendly term to use in the documentation, which also works for less technical users, who may not even have the term _thread_ on their radar.\r\n\r\n* _thread-terminating_ is  technically clearer and avoids the ambiguity around terminating \"the currently executing script (file / block), as opposed to its _caller_\" vs. \"the implicit top-level script block in the current thread and therefore the entire thread\".\r\n\r\n",
      "created_at": "2021-02-25T14:36:04Z",
      "updated_at": "2021-02-25T18:53:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * _thread-terminating_ is  technically clearer\r\n\r\nThe full phrase \"the current thread of execution\" is unfortunately sorta needed there as it doesn't actually terminate the thread (in 99.99% of cases).  It's difficult to come up with good terminology for this.  Maybe \"call stack terminating\"? That's going to be mostly meaningless to a lot of folks probably.",
      "created_at": "2021-02-25T14:51:44Z",
      "updated_at": "2021-02-25T14:51:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for having started this tangent, but I'd like to get a resolution, because I think terminology is important - perhaps we can hide the tangential discussion once we've reached a shared understanding.\r\n\r\nPerhaps the better approach is to give up the quest for a more accurate term, given that the official one should be the friendly \"script-terminating\", and that with the right interpretation of \"script\" (a PowerShell thread's implicit top-level script block, right?) it is even defensible as technically accurate.\r\n\r\nThis would mean:\r\n\r\n* Officially introducing the term in the proposed conceptual `about_Error_Handling` topic.\r\n\r\n* Providing a technically accurate description there.\r\n\r\nAnd in order to have clarity on what that description should be:\r\n\r\n> It doesn't actually terminate the thread (in 99.99% of cases).\r\n\r\nAre you referring to the fact that in an _interactive_ session the underlying exception is _caught_, which thereby prevents termination?\r\nThat would still make such an error thread-terminating _by default, if uncaught_, as in the following example, right?\r\n\r\nAnd how would the addition of the word \"current\" make a difference, given that I think of it as implied?\r\n\r\n\r\n```powershell\r\n# I presume that the `throw` terminates the thread in this case, right?\r\n[PowerShell]::Create().AddScript('\"in\"; throw \"exception\"; \"out\"').Invoke()\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-02-25T15:34:52Z",
      "updated_at": "2021-02-25T18:53:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay, there are multiple problematic aspects with PowerShell's current error handling, so why not take this opportunity to perform the full scenario review you propose:\r\n\r\n* The lack of proper documentation and official terminology, which https://github.com/MicrosoftDocs/PowerShell-Docs/issues/1583 addresses, but it's obviously no substitute for official documentation.\r\n\r\n* The lack of integration of native-executable calls into PowerShell's error handling.\r\n\r\n* The complexity stemming from multiple constructs, as you've discussed.\r\n\r\n* The surprising asymmetries around the _two types_ of _terminating_ errors that exist, which is what prompted creation of this issue:\r\n\r\n  * `-ErrorAction` only affects _non_-terminating errors, while `$ErrorActionPreference` also affects _statement_-terminating errors (promotes them to _script_-terminating ones).\r\n  * A binary cmdlet can _only_ throw a _statement_-terminating error.\r\n  * PowerShell code can _only_ throw a _script_-terminating error, with `throw` (unless you go out of your way - available in an advanced script/functions only - to call `$PSCmdlet.ThrowTerminatingError()`, which is both obscure and cumbersome).\r\n\r\n---\r\n\r\nAs you state, a change in this area would inevitably be breaking and require an _opt-in_; a concern regarding a `#require` directive would again be to ensure _lexical_ scoping rater than the usual dynamic one that affects all descendant scopes - the same issue that just came up in the context of https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-784578379.\r\n\r\n---\r\n\r\n> Statement terminating exceptions are intended to mimic shell semantics. \r\n\r\nIt is the _non_-terminating errors that mimic shell semantics, while offering additional features (log of errors in `$Error`, per-command error collection with `-ErrorVariable`).\r\n\r\n`cmd.exe` offers no terminating errors at all, whereas POSIX-compatible shells offer the equivalent of `$ErrorActionPreference = 'Stop'`, i.e. _script_-terminating errors via `set -e` (which is [often eschewed](http://mywiki.wooledge.org/BashFAQ/105) in favor or per-call error handling with `|| exit`; we now offer something similar, but with more cumbersome syntax (`|| $(exit $LASTEXITCODE)` or, if `throw` is sufficient, `|| $(throw)`).\r\n\r\nThese shells themselves have no concept of _statement_-terminating errors (although individual executables can choose to abort pipeline processing by closing their end of the pipe prematurely).\r\n\r\nPowerShell's _statement_-terminating errors offer a way to abort a pipeline _instantly, as a whole_, in case an error condition so severe is encountered that _further pipeline processing makes no sense_. Statement-terminating errors also occur in expressions, such as when .NET methods throw an exception.\r\n\r\nThe question is whether it is helpful to _by default_ terminate _only_ the pipeline / statement being executed.\r\n\r\nTo me, it isn't: given that it indicates an error condition that is _severe_, the more sensible behavior is to terminate the _script_.\r\n\r\nThat is, we can make do without the concept of a _statement_-terminating error and only have _one_ type of terminating error: the _script_-terminating error:\r\n\r\n* This amounts to a substantial conceptual simplification that automatically makes the above-mentioned asymmetries go away.\r\n* Those who want a script-terminating error to be _in effect_ only statement(-block)-terminating can and should use `try` / `catch` (or `trap`, but my sense is that it is rarely used anymore).\r\n\r\nI believe that this, along with integrating external-executable calls (treat nonzero exit codes as _non_-terminating errors, but escalate to script-terminating with `$ErrorActionPreference = 'Stop'`, with the selective exceptions discussed in the [Native Command Error Handling RFC](https://github.com/PowerShell/PowerShell-RFC/blob/717787c26ff50d5e9130c34aadc5c4d5b9c86b64/1-Draft/RFC00XX-Native-Command-Error-Handling.md)), would go a long way toward solving the current problems.\r\n\r\n",
      "created_at": "2021-02-25T18:35:17Z",
      "updated_at": "2021-02-25T18:35:17Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Perhaps the better approach is to give up the quest for a more accurate term, given that the official one should be the friendly \"script-terminating\", and that with the right interpretation of \"script\" (a PowerShell thread's implicit top-level script block, right?) it is even defensible as technically accurate.\r\n\r\nWhen talking about implementation, \"pipeline\" is probably the word to use there. It would be confusing to use in documentation, but a pipeline is sort of the rawest measurement of a unit of execution in PowerShell.\r\n\r\nFor example, this code:\r\n\r\n```csharp\r\nPowerShell.Create().AddCommand(\"Get-ChildItem\").Invoke()\r\n\r\n// or more similar to what ConsoleHost does:\r\nusing var pipeline = runspace.CreatePipeline();\r\npipeline.Commands.Add(new Command(\"Get-ChildItem\", isScript: false));\r\npipeline.Invoke();\r\n```\r\n\r\nThere's no script there, it's just a pipeline processor that looks up the command info and creates a command processor.\r\n\r\nNone of this is to say that \"script-terminating\" isn't the right term to use for docs, I honestly don't know.  Just giving you the full picture.\r\n\r\n> Are you referring to the fact that in an _interactive_ session the underlying exception is _caught_, which thereby prevents termination?\r\n\r\nI would say that is generally a good way to look at it, and probably a good way to present it when not talking about implementation specifics.\r\n\r\nIf we were being the absolute strictest of nitpicky, the thread is only terminated when one of these happens:\r\n\r\n1. The `Runspace` is set to `PSThreadOptions.ReuseThread` and is GCed\r\n2. The `Runspace` is set to `PSThreadOptions.UseNewThread` and the current top level pipeline is completed (successfully or otherwise)\r\n3. The `Runspace` is set to `PSThreadOptions.UseCurrentThread` and an exception is not caught by the caller\r\n\r\n`ReuseThread` is what most hosts (including `ConsoleHost`) use.  Since execution is actually handled on a different thread controlled by the `Runspace` object, the actual thread itself won't really terminate.\r\n\r\n(P.S. I wrote this before your second post but then got distracted.  I still haven't read the second one FYI, so sorry if my delayed answer equated to more work or something)",
      "created_at": "2021-02-25T18:48:06Z",
      "updated_at": "2021-02-25T18:48:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate the detailed explanation, @SeeminglyScience - I've hidden my previous comments on that topic.\r\nMy conclusion is that \"script-terminating\" should do for documentation purposes (and even for discussions here), and we can discuss how to explain what that means to a less technical audience in the context of authoring the proposed `about_Error_Handling` topic.",
      "created_at": "2021-02-25T18:57:54Z",
      "updated_at": "2021-02-25T18:57:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree that the intent of `ThrowTerminatingError()` is not to be affected by either `-ErrorAction` nor `$ErrorActionPreference` which is only intended to elevate non-terminating errors to be statement terminating and this is a bug.  However, we are concerned about breaking existing scripts that may be depending upon this behavior which has been there since at least PowerShell 2.0.  Since 7.2 is a LTS, we would not take a change here, but can revisit for 7.3 at the earliest.",
      "created_at": "2021-03-03T23:28:14Z",
      "updated_at": "2021-03-03T23:28:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT\r\n\r\n> intended to elevate non-terminating errors to be statement terminating and this is a bug.\r\n\r\nNo, `-ErrorAction Stop` and `$ErrorActionPreference = 'Stop'` elevate errors to _script_-terminating (_fatal_ ) ones, not to _statement_-terminating ones - and that is part of the asymmetry [discussed previously](https://github.com/PowerShell/PowerShell/issues/14819#issuecomment-786114099).\r\n\r\nThat is, if we resolved this simply by making  `$ErrorActionPreference = 'Stop'` no longer act on _statement_-terminating errors, we'd just be introducing a _different_ asymmetry:\r\n\r\n* It would mean taking away the ability to use `$ErrorActionPreference = 'Stop'` to _abort on errors of any type_, which is a common and useful idiom, because _statement_-terminating errors would then be exempt.\r\n\r\n* Conversely, this means that the only way to elevate a statement-terminating error to a script-terminating (fatal) one would then be to wrap _individual_ statements (or groups) _explicitly_ in `try { ... } catch { throw }` - or to use `trap { break }`, but `trap` seems to have fallen out of favor.\r\n\r\nI may have mentioned this before, but if we simplified the model to only _two_ types of errors: _fatal_ (the current script-terminating ones) and _non-fatal_ (non-terminating), these asymmetries and headaches would go away.\r\n(The word \"terminating\" is now problematic, given the ambiguity of the _scope_ of the termination).\r\n\r\nSince a breaking change is required either way, I suggest breaking things in a more useful manner.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-03-04T13:59:13Z",
      "updated_at": "2021-03-04T13:59:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I agree it may be worth while to consider a proposal that is breaking, but would avoid user confusion for the next \"10 years\".  We should certainly continue that conversation.\r\n\r\nThe @PowerShell/powershell-committee did discuss the need to use `try..catch` or `trap` to elevate an error, but that is the current originally intended design and we were not considering in that discussion a major break",
      "created_at": "2021-03-04T23:55:17Z",
      "updated_at": "2021-03-04T23:55:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood, @SteveL-MSFT, but my point was that even limiting ourselves to fixing the bug (from the perspective of the original design intent):\r\n\r\n* results in (different) behavior _that is still unhelpful_.\r\n* _does_ amount to a major break.\r\n\r\nTo put it differently: we have a major break on our hands either way (which will require an _opt-in_); the bug fix is _not_ worth making, and I suggest taking the opportunity to get it right for the next \"10 years\".\r\n",
      "created_at": "2021-03-06T16:21:09Z",
      "updated_at": "2021-03-06T16:21:09Z"
    }
  ],
  "created_at": "2021-02-16T21:52:52Z",
  "number": 14819,
  "state": "open",
  "title": "Cmdlet.ThrowTerminatingError() is not affected by `-ErrorAction`",
  "updated_at": "2021-03-06T16:21:09Z"
}