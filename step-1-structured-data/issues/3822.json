{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3822",
  "author": "1RedOne",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nIt seems that changes to coreclr and clr.dll have introduced a new fatal error behavior into PowerShell.  This problem seems to be contained (in my lazy testing) to changes introduced with Windows 10 build number 15063. \r\n\r\nSteps to reproduce\r\n------------------\r\n    #Import a custom type (this one exposes properties of DeviceFriendlyName,Id,LastSeenTime)\r\n    Update-TypeData -PrependPath $PSScriptRoot\\Types.ps1xml -Verbose\r\n\r\n    #Add this type to an object\r\n    $results  | ForEach {$_.PSobject.TypeNames.Insert(0,'AirWatch.Automation.Object.Device') } \r\n\r\n    #Try to reference a property which doesn't exist \r\n    #  (I'm typoing on DeviceFriendlyName as DeviceFriendlyNam\r\n    $results | ForEach {\r\n        #Below command kills PowerShell\r\n        \"About to process $($_.DeviceFriendlyNam)\"\r\n        Some-Cmdlet\r\n    }\r\n    \r\n\r\nExpected behavior\r\n-----------------\r\n**PowerShell SHOULD instead continue and ignore the incorrect property name**\r\n\r\n     About to process \r\n     #cmdlets continue\r\n\r\nActual behavior\r\n---------------\r\n    #Long Pause\r\n    Process is terminating due to StackOverflowException\r\n\r\nPowerShell console crashes, Windows Event log gets created.\r\n\r\n```\r\nTimeCreated  : 5/19/2017 11:20:02 AM\r\nProviderName : Application Error\r\nId           : 1000\r\nMessage      : Faulting application name: powershell.exe, version: 2.0.0.2106, time stamp: 0x5907ff0b\r\n               Faulting module name: coreclr.dll, version: 4.6.25301.2, time stamp: 0x590795de\r\n               Exception code: 0xc00000fd\r\n               Fault offset: 0x00000000000fdf09\r\n               Faulting process id: 0x56d0\r\n               Faulting application start time: 0x01d2d0b16bb82eba\r\n               Faulting application path: C:\\Program Files\\PowerShell\\6.0.0-beta.1\\powershell.exe\r\n               Faulting module path: C:\\Program Files\\PowerShell\\6.0.0-beta.1\\coreclr.dll\r\n               Report Id: 015391b8-0bd9-4661-828a-61623b308c3f\r\n               Faulting package full name:\r\n               Faulting package-relative application ID:\r\n\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n\r\nName                           Value                                                                                   \r\n----                           -----                                                                                   \r\nPSVersion                      6.0.0-beta                                                                              \r\nPSEdition                      Core                                                                                    \r\nBuildVersion                   3.0.0.0                                                                                 \r\nCLRVersion                                                                                                             \r\nGitCommitId                    v6.0.0-beta.1                                                                           \r\nOS                             Microsoft Windows 10.0.15063                                                            \r\nPlatform                       Win32NT                                                                                 \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                 \r\nPSRemotingProtocolVersion      2.3                                                                                     \r\nSerializationVersion           1.1.0.1                                                                                 \r\nWSManStackVersion              3.0                                                                                     \r\n\r\n\r\n\r\n\r\n```\r\n",
  "closed_at": "2017-09-29T17:47:22Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@1RedOne Can you please also share the `types.ps1xml` file you were using? That will be very helpful.",
      "created_at": "2017-05-19T17:06:20Z",
      "updated_at": "2017-05-19T17:06:20Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "Certainly!  Here is the exact file that I'm using.  https://gist.github.com/1RedOne/0d690dbe68ddb4125a5e7bd80cf1a588",
      "created_at": "2017-05-19T18:54:42Z",
      "updated_at": "2017-05-19T18:54:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@1RedOne Thanks for sharing the type file. The script property defined in the type file is basically recursively calling itself, and hence the stack overflow.\r\n\r\npowershell shouldn't crash in this case. Instead, it should throw 'ScriptCallDepthException', just like what it does when recursively calling a function:\r\n```\r\nfunction bar { bar }\r\nbar\r\nThe script failed due to call depth overflow.\r\n    + CategoryInfo          : InvalidOperation: (0:Int32) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : CallDepthOverflow\r\n```",
      "created_at": "2017-05-19T22:38:14Z",
      "updated_at": "2017-05-19T22:38:20Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "Should have known I actually caused the issue!  Would you mind pointing out\nwhich line the issue was in? :)\n\nOn May 19, 2017 6:38 PM, \"Dongbo Wang\" <notifications@github.com> wrote:\n\n@1RedOne <https://github.com/1redone> Thanks for sharing the type file. The\nscript property defined in the type file is basically recursively calling\nitself, and hence the stack overflow.\npowershell shouldn't crash in this case. Instead, it should throw\n'ScriptCallDepthException', just like what it does when recursively calling\na function:\n\nfunction bar { bar }\nbar\nThe script failed due to call depth overflow.\n    + CategoryInfo          : InvalidOperation: (0:Int32) [],\nParentContainsErrorRecordException\n    + FullyQualifiedErrorId : CallDepthOverflow\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<https://github.com/PowerShell/PowerShell/issues/3822#issuecomment-302826680>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/ABMJir68JyYmxIY3ZrWuljrFbQoHr4Duks5r7hnggaJpZM4NgrbD>\n.\n",
      "created_at": "2017-05-20T19:26:02Z",
      "updated_at": "2017-05-20T19:26:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Every script property defined in the `types.ps1xml` file is calling the script property itself. For example, \r\nThe getter of `CompromisedStatus` is `$this.CompromisedStatus`.\r\n```\r\n   <ScriptProperty>\r\n        <Name>CompromisedStatus</Name>\r\n        <GetScriptBlock>\r\n          $this.CompromisedStatus\r\n        </GetScriptBlock>\r\n    </ScriptProperty>\r\n   <ScriptProperty>\r\n        <Name>DeviceFriendlyNam</Name>\r\n        <GetScriptBlock>\r\n          $this.DeviceFriendlyNam\r\n        </GetScriptBlock>\r\n    </ScriptProperty>\r\n```\r\nIf you want to define a script property to shadow a property with the same name from the underlying object, you should use `$this.psbase.CompromisedStatus` in the getter.",
      "created_at": "2017-05-22T23:55:49Z",
      "updated_at": "2017-05-23T00:03:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we close the Issue or we plan a fix?",
      "created_at": "2017-09-29T08:38:12Z",
      "updated_at": "2017-09-29T08:38:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think we can close this.",
      "created_at": "2017-09-29T17:47:22Z",
      "updated_at": "2017-09-29T17:47:22Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks guys, this was actually my issue all along.",
      "created_at": "2017-11-01T15:04:52Z",
      "updated_at": "2017-11-01T15:04:52Z"
    }
  ],
  "created_at": "2017-05-19T15:32:43Z",
  "number": 3822,
  "state": "closed",
  "title": "Hard crash when referencing an invalid property name",
  "updated_at": "2017-11-01T15:04:53Z"
}