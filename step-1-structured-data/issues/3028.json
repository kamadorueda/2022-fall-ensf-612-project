{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3028",
  "author": "Ciantic",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nIn Windows Run dialog type this:\r\n`PowerShell.exe -WindowStyle Hidden -Command ping www.microsoft.com`\r\n\r\nExpected behavior\r\n-----------------\r\nThere should be no window, right now you can't start powershell without window flashing, making it rather useless e.g. for scheduled tasks.\r\n\r\n*Note* I think this is intended behavior, but it's confusing and new option is probably required. If you search how to run a powershell in scheduled task, the go-to workaround is to do a *vbs* script of all things! Such as:\r\n\r\n```\r\nDim shell,command\r\ncommand = \"powershell.exe -nologo -File D:\\myscript.ps1\"\r\nSet shell = CreateObject(\"WScript.Shell\")\r\nshell.Run command,0\r\n```\r\n\r\nThis is not a good thing, powershell needs this feature in the shell itself, scheduled tasks are important feature and having a window flash on scheduled task is a really bad experience.\r\n\r\nActual behavior\r\n---------------\r\nIt flashes the powershell window briefly.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.693\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.693\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "powershell.exe is a console application. The console window is automatically created by the OS when the process starts. The powershell.exe code that processes -WindowStyle Hidden is therefore executed after the console window is opened hence the flash. To fix this, we would need the equivalent of wscript i.e. a win32 host application instead of a console host application.\u00a0",
      "created_at": "2017-01-25T19:45:23Z",
      "updated_at": "2017-01-25T19:45:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Given there's no code change we can do in powershell.exe to address this, I've changed this issue to a feature request to have a wscript-like host to support this type of scenario",
      "created_at": "2017-02-02T21:01:19Z",
      "updated_at": "2017-02-02T21:01:19Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "http://www.f2ko.de/en/p2e.php\r\nand `Power Shell Studio` has a custom host too\r\n",
      "created_at": "2017-02-02T21:16:51Z",
      "updated_at": "2017-02-02T21:16:51Z"
    },
    {
      "author": "rednoah",
      "author_association": "NONE",
      "body": "You could have a `powershellw.exe` which would be a GUI application that doesn't show a console window. Same as what `javaw.exe` and `pythonw.exe` do.",
      "created_at": "2017-06-26T18:27:06Z",
      "updated_at": "2017-06-26T18:27:06Z"
    },
    {
      "author": "Jackbennett",
      "author_association": "NONE",
      "body": "Can `pwsh.exe` get support for this or get pwshw.exe as suggested above? With this pwsh exe being new it seems like a great time to change the behaviour of `-windowstyle hidden`. Nobody has ever used `hidden` and thought \"yep that's what I wanted, flash some screen for a second\". \r\n\r\nIt makes sense that powershell.exe can't be changed after all this time and its legacy.",
      "created_at": "2018-02-16T12:23:18Z",
      "updated_at": "2018-02-16T12:24:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I would support a community contribution to add `pwshw.exe`",
      "created_at": "2018-02-21T00:23:14Z",
      "updated_at": "2018-02-21T00:23:14Z"
    },
    {
      "author": "gtalton",
      "author_association": "NONE",
      "body": "Agree .. this would be consistant with other language executables and solve me having to currently wrap my powershell scripts in vbs scripts.",
      "created_at": "2018-02-21T00:26:19Z",
      "updated_at": "2018-02-21T00:26:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Technically we could do like https://github.com/AvaloniaUI/Avalonia/wiki/Hide-console-window-for-self-contained-.NET-Core-application \r\n```c#\r\neditbin.exe /subsystem:windows yourapp.exe\r\n```\r\n\r\nBut I wonder - if PowerShell Core is portable what is expected behavior on Unix? Can we be unified on all platforms?\r\nRelated discussion https://github.com/dotnet/cli/issues/296 It also mentions that we could use GUI subsystem.\r\n\r\nMaybe @mklement0 have any thoughts?",
      "created_at": "2018-02-21T14:20:52Z",
      "updated_at": "2018-02-21T14:22:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `-WindowStyle` [isn't supported](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L590) on non-Windows",
      "created_at": "2018-02-21T21:32:42Z",
      "updated_at": "2018-02-21T21:32:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, I meant - have we the same behavior on Unix by creating a console? Have we scenarios where we don't want to create the console on Unix?",
      "created_at": "2018-02-22T03:40:28Z",
      "updated_at": "2018-02-22T03:40:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: I haven't really looked into this; the only thing I can tell you, from personal experience, is that invoking `pwsh` invisibly works fine from utilities such as [Alfred 3](https://www.alfredapp.com/) and [TextExpander](https://textexpander.com/)",
      "created_at": "2018-02-22T04:52:52Z",
      "updated_at": "2018-02-22T04:52:52Z"
    },
    {
      "author": "brice-ruppen",
      "author_association": "NONE",
      "body": "What I've been using so far is a shortcut named PS with the Target: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe and the option Run: Minimized\r\nLike this:\r\n`C:\\Windows\\PS Start-Process .`\r\nThe taskbar does flicker but no more console.",
      "created_at": "2018-03-03T15:55:57Z",
      "updated_at": "2018-03-03T15:55:57Z"
    },
    {
      "author": "aresowj",
      "author_association": "NONE",
      "body": "Seems like the `-WindowStyle Hidden` has to be the first parameter of your command line.",
      "created_at": "2018-08-07T17:32:05Z",
      "updated_at": "2018-08-07T17:32:05Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "So, we are starting to support Windows PowerShell now??\r\n\r\nJust a friendly reminder,  if this is a PowerShell Core issue? Please provide the PowerShell Core version as is required when submitting an issues.\r\n\r\nOtherwise, Windows PowerShell need to go thru UserVoice at: https://windowsserver.uservoice.com/forums/301869-powershell\r\n\r\nFor more information see: https://github.com/PowerShell/PowerShell#windows-powershell-vs-powershell-core \r\n\r\n:)",
      "created_at": "2018-08-07T18:16:50Z",
      "updated_at": "2018-08-07T18:16:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@aresowj: While the placement of arguments does matter when calling PowerShell's _CLI_ (given that anything following `-Command` is interpreted as part of the command to execute), (a) the OP's attempt already places it before `-Command` and (b) that doesn't prevent the flashing, for the reasons explained in [@BrucePay's earlier comment](https://github.com/PowerShell/PowerShell/issues/3028#issuecomment-275212445).\r\n\r\n@MaximoTrinidad: While this issue may have started out as focused on Windows PowerShell only, it has long since morphed into a PS Core feature request (which also deserves back-porting to Windows PowerShell).\r\n\r\nTo recap: In order to get fully invisible invocations via the PowerShell CLI:\r\n\r\n* On _Windows_, **a new, separate PowerShell executable (`pwshw.exe`  / `powershellw.exe`) is needed** that is  a _GUI_ application, following the model of the [`python.exe` / `pythonw.exe` pair](https://stackoverflow.com/a/30313091/45375)\r\n\r\n* On macOS and Linux, where the problem doesn't exist, I _presume_ there is no need for a separate executable. For symmetry with Windows,  a simple _symlink_ could be implemented that simply points to the regular `pwsh` executable.\r\n",
      "created_at": "2018-08-07T23:03:54Z",
      "updated_at": "2018-08-07T23:03:54Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Thanks @mklement0! \r\n:)",
      "created_at": "2018-08-08T15:51:04Z",
      "updated_at": "2018-08-08T15:51:04Z"
    },
    {
      "author": "aresowj",
      "author_association": "NONE",
      "body": "Sorry guys, mistook the two Powershells and thanks for your clarification. :)",
      "created_at": "2018-08-12T00:10:20Z",
      "updated_at": "2018-08-12T00:10:20Z"
    },
    {
      "author": "zero77",
      "author_association": "NONE",
      "body": "What about initially starting Powershell in the back ground with a non visible console, then checking for any console window arguments `-WindowStyle` and implementing them.\r\nBut, if none are found it could then start a visible console window.",
      "created_at": "2018-09-03T09:00:29Z",
      "updated_at": "2018-09-03T09:00:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@zero77 I think we mean https://social.msdn.microsoft.com/Forums/en-US/b7a14400-6d72-4fbf-9927-0966f69ef4a2/how-to-open-console-window-in-windows-apllication?forum=csharplanguage",
      "created_at": "2018-09-03T10:11:51Z",
      "updated_at": "2018-09-03T10:11:51Z"
    },
    {
      "author": "Jawz84",
      "author_association": "CONTRIBUTOR",
      "body": "I created an issue in the windows console team issue repo here: https://github.com/Microsoft/console/issues/249",
      "created_at": "2018-09-03T10:44:32Z",
      "updated_at": "2018-09-03T10:44:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@zero77: \r\n\r\n`pwsh.exe` must remain a console-subsystem application to ensure synchronous, standard-streams-connected execution from an existing console window.\r\n\r\nWe therefore need the previously discussed _separate_, GUI-subsystem executable, `pwshw.exe`.  If we want that executable to support _conditional_ creation of a(n invariably new) console window, @iSazonov's link is a helpful starting point.\r\n\r\n@Jawz84: I don't think the console team can help here:\r\n\r\n* A _console-subsystem_ application such as `pwsh.exe` invariably creates a new console window, which happens before the application sees any of its arguments.\r\n\r\n* To only way to _hide_ or _prevent creation_ of this console window is to have a _GUI-subsystem_ application as the entry point. In the simplest case this GUI-subsystem application can be a _stub_ that relays arguments to the console application, but starts it _hidden_.\r\n\r\n",
      "created_at": "2018-09-03T12:51:29Z",
      "updated_at": "2018-09-03T21:38:40Z"
    },
    {
      "author": "Jawz84",
      "author_association": "CONTRIBUTOR",
      "body": "I'll leave the console issue open, see what they think. I see your point, and i know it may be totally impossible. Yet then again, it may be something they would like to consider.\r\n\r\n[Edit:] I've got the answer that this is not currently feasable to make amends for in console. A separate pwshw.exe would be the way to go for now. ",
      "created_at": "2018-09-03T13:56:45Z",
      "updated_at": "2018-09-05T05:26:21Z"
    },
    {
      "author": "Chiramisu",
      "author_association": "NONE",
      "body": "Yikes! Open for nearly two years? This is quite an important feature for SysAdmins.",
      "created_at": "2018-09-06T03:26:41Z",
      "updated_at": "2018-09-06T03:26:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Chiramisu Feel free to offer PR - proposal in my comment above.",
      "created_at": "2018-09-06T04:23:23Z",
      "updated_at": "2018-09-06T04:23:23Z"
    },
    {
      "author": "ibex-are-goats",
      "author_association": "NONE",
      "body": "I concur with this feature request, the default behavior of Powershell when run as a command is befuddling ",
      "created_at": "2018-10-11T11:01:19Z",
      "updated_at": "2018-10-11T11:01:19Z"
    },
    {
      "author": "LNGU",
      "author_association": "NONE",
      "body": "I start seeing this after applying Windows updates. something changed recently?",
      "created_at": "2018-10-30T23:22:28Z",
      "updated_at": "2018-10-30T23:22:28Z"
    },
    {
      "author": "Ciantic",
      "author_association": "NONE",
      "body": "Has anyone looked at what this would require in practice?\r\n\r\nI'm looking at the powershell.exe, and it seems rather simple:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/powershell/Program.cs\r\n\r\nNow, to make it without console, is it just a darn Project setting like changing Output type to \"Windows application\" instead of console application?",
      "created_at": "2018-10-31T10:47:16Z",
      "updated_at": "2018-10-31T10:47:59Z"
    },
    {
      "author": "Jackbennett",
      "author_association": "NONE",
      "body": "There's hasn't been a decision to make pwsh**w**.exe and backport powershell**w**.exe which seems like the only reasonable choice after the [console teams feedback ](https://github.com/PowerShell/PowerShell/issues/3028#issuecomment-418106321) above.\r\n\r\nThis wouldn't be that unusual given `C:\\windows\\System32\\taskhostw.exe` exists. There seems to be a few items using this pattern in windows searching `*w.exe` in `C:\\windows\\System32\\`\r\n\r\nPersonally I'd have thought just changing the pwsh.exe to fix -windowstyle without backporting to powershell.exe is acceptable since its new but nothing is as simple as it seems.\r\n\r\n",
      "created_at": "2018-10-31T11:12:17Z",
      "updated_at": "2018-10-31T11:12:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Ciantic the work should be to replicate `powershell-win-core` and update the `.csproj` file so that `Assembly` is `pwshw` and `OutputType` is `winexe`.  Then changes in `build.psm1` so that we build both.",
      "created_at": "2018-10-31T17:25:16Z",
      "updated_at": "2018-10-31T17:25:26Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "I have created a small tool passing the call to any console tool you want to start windowless through to the original file:\r\n\r\nhttps://github.com/Vittel/RunHiddenConsole\r\n\r\nAfter compiling just rename the executable to \"&lt;targetExecutableName&gt;w.exe\" (append a \"w\"), and put it next to the original executable.\r\nYou can then call e.G. powershellw.exe or pwshw.exe with the usual parameters and it won't pop up a window.\r\n\r\nIf someone has an idea how to check whether the created process is waiting for input, ill be happy to include your solution :)\r\nEDIT:\r\nfound a solution for that problem",
      "created_at": "2018-11-17T20:02:17Z",
      "updated_at": "2018-11-17T23:01:40Z"
    },
    {
      "author": "ibex-are-goats",
      "author_association": "NONE",
      "body": "Compile a release and I will try it sometime! Really great work Vittel :) \ud83d\udc4d \ud83d\udcaf ",
      "created_at": "2018-11-17T20:45:36Z",
      "updated_at": "2018-11-17T20:45:36Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "> Compile a release and I will try it sometime! Really great work Vittel :) \ud83d\udc4d \ud83d\udcaf\r\n\r\ngood idea. did so.",
      "created_at": "2018-11-17T21:33:14Z",
      "updated_at": "2018-11-17T21:33:14Z"
    },
    {
      "author": "C-Duv",
      "author_association": "NONE",
      "body": "For that specific PowerShell issue (occurred on my scheduled tasks) I had ended up using https://github.com/stbrenner/SilentCMD (also C#), I'll give RunHiddenConsole a try...",
      "created_at": "2018-11-17T23:51:26Z",
      "updated_at": "2018-11-17T23:51:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Vittel Thank you for the project! You need to pay attention to input/output/error redirection and perhaps argument escaping.\r\n\r\nIf we will make new pwshw project we should think about defaults: perhaps `-Noprofile` should be.",
      "created_at": "2018-11-18T12:41:59Z",
      "updated_at": "2018-11-18T12:41:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Simply changing `OutputType` to `WinExe` isn't sufficient as netcoreapp2x doesn't support this currently.  Per https://github.com/dotnet/core-setup/issues/196#issuecomment-394786860 looks like we need to wait for netcoreapp30.\r\n\r\nAs @iSazonov alluded, simply building as winexe instead of exe will not be a complete solution.  Some of the existing parameters allowed by pwsh.exe wouldn't work correctly under pwshw.exe (like `-NoExit` as a console window will never show up, it's only for automation).  So things like `-NoProfile` by default and other defaults specific to automation vs interactive would make sense to consider.",
      "created_at": "2018-11-18T19:32:24Z",
      "updated_at": "2018-11-18T19:34:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "| Parameter | Status\r\n| - | -\r\n| -File | \r\n| -Command | \r\n| -ConfigurationName | \r\n| -EncodedCommand | \r\n| -ExecutionPolicy | \r\n| -InputFormat | \r\n| -Interactive | Remove (Not used)\r\n| -NoExit | Remove (Not used)\r\n| -NoLogo | Remove (Not used)\r\n| -NonInteractive | Remove (By default)\r\n| -NoProfile | Remove (By default)\r\n| -OutputFormat | Remove (Not used)\r\n| -Version | Remove\r\n| -WindowStyle | Remove (Not used)\r\n| -WorkingDirectory | \r\n\r\nIf pwshw.exe is for no-console scenario what exe will be for GUI?",
      "created_at": "2018-11-19T03:56:33Z",
      "updated_at": "2018-11-20T03:05:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference. From https://github.com/dotnet/core-setup/pull/3888:\r\n> Ability for an apphost to be renamed. \r\n\r\nbut I don't found docs how to rename.\r\n",
      "created_at": "2018-11-19T04:01:26Z",
      "updated_at": "2018-11-19T04:01:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the helpful parameters table, @iSazonov.\r\n\r\nI think `-NonInteractive` and`-WindowStyle` can be removed too, as they only have meaning in the context of a _console_ window - which the GUI-subsystem executable by definition won't have.\r\n",
      "created_at": "2018-11-19T13:55:25Z",
      "updated_at": "2018-11-19T13:55:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> If `pwshw.exe` is for no-console scenario what exe will be for GUI?\r\n\r\n`pwshw.exe` can do double duty:\r\n\r\n* For automation (run hidden from a scheduled task, for instance)\r\n* For launching GUI-user-interaction-only scripts without an unwanted console window (e.g., scripts that create WinForms UIs).\r\n",
      "created_at": "2018-11-19T14:04:16Z",
      "updated_at": "2018-11-19T14:04:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> For launching GUI-user-interaction-only scripts \u2026\r\n\r\nShould we keep `-WindowStyle` for them?\r\n\r\nAnd what about GUI console?",
      "created_at": "2018-11-19T14:37:30Z",
      "updated_at": "2018-11-19T14:37:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Should we keep `-WindowStyle` for them?\r\n\r\nI don't think that's useful, because there's no telling in advance at what point and through what mechanism a GUI window - if any - will be created, and the code that creates it would have to query PowerShell for its startup parameters somehow in order to respect the value.\r\n\r\nWhat do you mean by _GUI console_? ",
      "created_at": "2018-11-19T17:08:58Z",
      "updated_at": "2018-11-19T17:08:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `pwshw` by definition won't have an interactive console.  `-WindowStyle` is specifically for the console window.  Scripts that leverage WinForms/WPF is independent of the pwshw host.",
      "created_at": "2018-11-19T18:20:52Z",
      "updated_at": "2018-11-19T18:20:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks! Table above was updated.",
      "created_at": "2018-11-20T03:06:17Z",
      "updated_at": "2018-11-20T03:06:17Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'd rather avoid creating a new host for this, and I'd much prefer to solve this with PTYs where they're available. ",
      "created_at": "2019-03-18T20:50:45Z",
      "updated_at": "2019-03-18T20:50:45Z"
    },
    {
      "author": "dardyfella",
      "author_association": "NONE",
      "body": "Here's a workaround for now - the only thing that appears is a PowerShell instance in the taskbar that quickly disappears - no more conhost.exe flashing on the screen.\r\n\r\n```\r\n$WshShell = New-Object -ComObject 'WScript.Shell'\r\n$ShortcutPath = Join-Path -Path $ENV:Temp       -ChildPath 'Temp.lnk'\r\n$TargetPath   = Join-Path -Path $ENV:SystemRoot -ChildPath 'system32\\WindowsPowerShell\\v1.0\\powershell.exe'\r\n$Arguments    = '-ExecutionPolicy Bypass -WindowStyle Hidden -File \"C:\\Temp\\ScriptIWantToRunWithHiddenWindow.ps1\"'\r\n\r\n$Shortcut = $WshShell.CreateShortcut($ShortcutPath)\r\n$Shortcut.TargetPath  = $TargetPath\r\n$Shortcut.Arguments   = $Arguments\r\n$Shortcut.WindowStyle = 7\r\n$Shortcut.Save()\r\n\r\n& explorer.exe $ShortcutPath\r\n```\r\n\r\nEnterprising individuals can combine this technique with psexec.exe -i to remotely run scripts in currently logged on users session.",
      "created_at": "2019-08-15T12:12:48Z",
      "updated_at": "2019-08-15T12:20:22Z"
    },
    {
      "author": "projectje",
      "author_association": "NONE",
      "body": "- This still bring up a quick visible  flash window on my systems\r\n- I tried the silentCMD above but this requires net3.5 which is not installed on some of the 3rd party systems i run this on\r\n\r\nThere doesnt seem to be a solution I think\r\n\r\n",
      "created_at": "2019-08-18T22:20:18Z",
      "updated_at": "2019-08-18T22:20:18Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "Have you checked out the run hidden console GitHub project of mine?\r\nI have intentionally used the lowest requirements possible. It should work on almost all windows versions",
      "created_at": "2019-08-18T22:24:16Z",
      "updated_at": "2019-08-18T22:24:16Z"
    },
    {
      "author": "Roy-Orbison",
      "author_association": "NONE",
      "body": "As @Ciantic mentioned, the best way to work around this issue is by using a VB script:\r\n\r\nIn, say `ps-run.vbs` put\r\n``` vbs\r\nSet objShell = CreateObject(\"Wscript.Shell\")\r\nSet args = Wscript.Arguments\r\nFor Each arg In args\r\n\tobjShell.Run(\"powershell -windowstyle hidden -executionpolicy bypass -noninteractive \"\"&\"\" \"\"'\" & arg & \"'\"\"\"),0\r\nNext\r\n```\r\n\r\nThen use it to run the command you want, e.g. from Windows' scheduled tasks like so\r\n``` ps1\r\nwscript \"C:\\Path\\To\\ps-run.vbs\" \"C:\\Other\\Path\\To\\your-script.ps1\"\r\n```\r\n\r\nI use something like this to run a task frequently without seeing any flashing windows.",
      "created_at": "2019-08-19T00:54:43Z",
      "updated_at": "2019-08-19T00:54:43Z"
    },
    {
      "author": "projectje",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Have you checked out the run hidden console GitHub project of mine?\r\n> I have intentionally used the lowest requirements possible. It should work on almost all windows versions\r\n\r\nI tried it this week and it works without popping up net3.5 requirements. Thanks! Nice. Will keep the VBS one also in mind.\r\n\r\n```\r\nif (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {\r\n    Start-Process PowerShell -Verb RunAs \"-NoProfile -ExecutionPolicy Bypass -Command `\"cd '$pwd'; & '$PSCommandPath';`\"\";\r\n    exit;\r\n}\r\nCopy-Item -Path ($PSScriptRoot + \"\\powershellw.exe\") -Destination \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\" \r\nNew-Item -ItemType File -Path ('C:\\Users\\' + $env.username  + '\\AppData\\Roaming\\check\\Local Store\\scripts\\check.ps1') -Force\r\nCopy-Item -Path ($PSScriptRoot + \"\\check.ps1\") -Destination ('C:\\Users\\' + $env.username  + '\\AppData\\Roaming\\check\\Local Store\\scripts\\check.ps1') -Force\r\n$tasks = Get-ScheduledTask\r\nforeach($task in $tasks) {\r\n    $taskexec = $task.actions.Execute -replace '.*\\\\'\r\n    $taskname = $task.TaskName\r\n    if ($taskexec.ToLower() -eq 'powershellw.exe' -or $taskexec.ToLower() -eq 'silentcmd.exe') {\r\n        Unregister-ScheduledTask -TaskName $taskname -Confirm:$false\r\n    }\r\n}\r\n$a1 = New-ScheduledTaskAction -Execute 'c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershellw.exe'`\r\n    -Argument ('-windowstyle hidden -executionpolicy bypass -file \"C:\\Users\\' + $env.username  + '\\AppData\\Roaming\\check\\Local Store\\scripts\\check.ps1\"')    \r\n$t1 = New-ScheduledTaskTrigger -Daily -At 01:00\r\n$t2 = New-ScheduledTaskTrigger -Once -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration (New-TimeSpan -Hours 23 -Minutes 55) -At 01:00\r\n$t1.Repetition = $t2.Repetition\r\n$s1 = New-ScheduledTaskSettingsSet -Hidden -ExecutionTimeLimit (New-TimeSpan -Hours 1)\r\nRegister-ScheduledTask -Trigger $t1 -Action $a1 -TaskName \"Check\" -Description \"Checks for problems\" -TaskPath \"Checks\" -Settings $s1 -RunLevel Highest\r\n\r\n\r\n\r\n\r\n```",
      "created_at": "2019-08-23T17:49:01Z",
      "updated_at": "2019-08-23T17:51:52Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "PTY? What is that?\n\nEnvoy\u00e9 de mon iPhone\n\n> Le 18 mars 2019 \u00e0 21:51, Joey Aiello <notifications@github.com> a \u00e9crit :\n> \n> I'd rather avoid creating a new host for this, and I'd much prefer to solve this with PTYs where they're available.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
      "created_at": "2019-08-23T21:43:02Z",
      "updated_at": "2019-08-23T21:43:02Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "Simplified version of @Roy-Orbison's VBScript:\r\n\r\n```vbscript\r\nCreateObject(\"Wscript.Shell\").Run(\"powershell -Command \"\"& '<PS command/script path>'\"\"\"),0\r\n```\r\n\r\nTested on my machine with a script I'm working on, seems to work when run with `wscript` from PS prompt or scheduled task.\r\n\r\nUpsides:\r\n* Don't need to put the script path on the `wscript` command line.\r\n* Doesn't set `ExecutionPolicy` to `Bypass`.\r\n\r\nDownsides:\r\n* Need separate VBScript scripts for each PowerShell command.",
      "created_at": "2019-10-30T15:02:37Z",
      "updated_at": "2019-10-30T15:02:37Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "I personally prefer the VBScript solution to `RunHiddenConsole`, since it doesn't involve deploying an unsigned executable to a system directory. However, having an official `pwshw.exe`/`powershellw.exe` would obviously be preferable to either.",
      "created_at": "2019-10-30T15:12:01Z",
      "updated_at": "2019-10-30T15:12:01Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "> I personally prefer the VBScript solution to `RunHiddenConsole`, since it doesn't involve deploying an unsigned executable to a system directory.\r\n\r\nsigning shouldnt be a big deal. you can even do it yourself with a little effort of building it yourself\r\nps: i have also added the option do deploy the tool right next to the scripts you want to execute. so it is not required anymore to set it up in the system next to the powershell executable",
      "created_at": "2019-10-30T15:37:11Z",
      "updated_at": "2019-10-30T15:38:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's good to have workarounds and a third-party solution, but to emphasize @alexbuzzbee's last comment:\r\n\r\nA solution is needed that _comes with PowerShell_.\r\n\r\n---\r\n\r\nAs for the workarounds: note that a VBScript-based solution is even possible without a helper script file, but it is arcane:\r\n\r\nThe following, which you can run from the `Run` dialog (or `cmd.exe`), creates an invisible PowerShell instance that pops up a message box (without showing a console window):\r\n\r\n```\r\nmshta.exe vbscript:(CreateObject(\"WScript.Shell\").Run(\"pwsh -c (New-Object -Com Wscript.Shell).Popup('hi')\",0))(Window.Close)\r\n```\r\n\r\n**Caveat**:  @alexbuzzbee notes that \"[this] solution generates alerts in the Defender ATP Endpoint Protection system [...] so it might not be suitable in an enterprise environment\".\r\n",
      "created_at": "2019-10-30T22:54:33Z",
      "updated_at": "2019-11-01T15:28:02Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "Would it be unreasonable to turn @Vittel's solution into the official solution? It shouldn't be difficult to move the code into the PowerShell repository, modify it to only launch `powershell.exe` or `pwsh.exe`, and build/distribute it with PowerShell.",
      "created_at": "2019-10-31T13:16:10Z",
      "updated_at": "2019-10-31T13:16:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": ".NET Core 3.0 supports building winexe which won't show the console.  I already have a working prototype, just need to clean it up as a PR.",
      "created_at": "2019-11-01T02:10:07Z",
      "updated_at": "2019-11-01T02:10:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I already have a working prototype\r\n\r\nI was on the way too :-) I hope you will simplify `CommandLineParameterParser` (remove EarlyParse?).",
      "created_at": "2019-11-01T03:45:19Z",
      "updated_at": "2019-11-01T03:45:19Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "@mklement0's solution generates alerts in the Defender ATP Endpoint Protection system (it doesn't like `mshta` running PowerShell code), so it might not be suitable in an enterprise environment.",
      "created_at": "2019-11-01T15:16:49Z",
      "updated_at": "2019-11-01T15:16:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @alexbuzzbee, I've added your caveat to my previous comment. I think it is actually the VBScript `CreateObject()` / JScript `new ActiveXObject()` call that triggers the alert; seemingly, `mshta.exe` has been used in malware in the past.",
      "created_at": "2019-11-01T15:31:33Z",
      "updated_at": "2019-11-01T15:31:33Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "@mklement0 ATP appears to be suspicious specifically of `mshta` starting `pwsh`, rather than the `CreateObject()` call.",
      "created_at": "2019-11-01T15:35:44Z",
      "updated_at": "2019-11-01T15:35:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good to know, @alexbuzzbee.\r\n\r\nI based my comment on the fact that executing the following (e.g. from `cmd.exe`) yields an `Access is denied error.` and triggers a Windows Defender alert. \r\n```\r\nmshta vbscript:Execute(\"CreateObject(\\\"WScript.Shell\\\"): Window.Close\")\r\n```\r\n\r\nThe bottom line is that the workaround is probably taking advantage of a loophole, which - as you've reported - can trigger existing security software, and may perhaps be closed altogether in the future.\r\n\r\nYay for @SteveL-MSFT's attempt to implement a proper solution.",
      "created_at": "2019-11-01T15:48:33Z",
      "updated_at": "2019-11-01T15:48:33Z"
    },
    {
      "author": "Chiramisu",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, 2018-02-20\r\n> I would support a community contribution to add `pwshw.exe`\r\n\r\n@SteveL-MSFT, 2019-10-31\r\n> .NET Core 3.0 supports building winexe which won't show the console. I already have a working prototype, just need to clean it up as a PR.\r\n\r\nThis has been a long time coming and will be wonderful for scripting, especially with Task Scheduler, (maybe cron?), etc. Since [PowerShell Core is cross-platform](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell), will this also work on other supported platforms? How about WSL?",
      "created_at": "2020-01-17T07:58:19Z",
      "updated_at": "2020-01-17T07:58:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The winexe prototype worked but is too rough around the edges to make it into 7.0.  For example, if you made a mistake with the command line args, you won't know as there's no output window.  If we follow other tools like wscript.exe, we should show a dialog with appropriate error message.\r\n\r\nAs for non-Windows, Linux and macOS doesn't need the equivalent of winexe as I believe the pwsh process can be started without creating a console window, while Windows requires it because it explicitly differentiates between console and windows apps.  You can certainly use pwsh with Task Scheduler today or cron, etc... already.",
      "created_at": "2020-01-17T22:35:16Z",
      "updated_at": "2020-01-17T22:35:16Z"
    },
    {
      "author": "ttimasdf",
      "author_association": "NONE",
      "body": "Yet another version of VBScript shim with enhancement: Support **passing arguments** to the Powershell Script. This will give us more flexibility on the script to be called. All without a window popup!\r\n\r\npowershell.vbs:\r\n```vbnet\r\nSet args = CreateObject(\"System.Collections.ArrayList\")\r\nFor Each oItem In Wscript.Arguments: args.Add oItem: Next\r\n\r\nCreateObject(\"Wscript.Shell\").Run(\"powershell -windowstyle hidden -File \"\"\" & Join(args.ToArray, \"\"\" \"\"\") & \"\"\"\"),0\r\n```\r\n\r\n\r\n\r\nFor example, I have a powershell script listening to specific Windows event, use Task Scheduler to extract event data and call a PowerShell script to send notification about the event. I created a custom scheduled task with a custom EventTrigger (refer to [a post from Technet](https://social.technet.microsoft.com/Forums/en-US/382b9023-01a9-4131-b2f2-8560b593bc3f/scheduled-task-trigerred-by-event-getting-data-into-the-scripts-as-parameters-question?forum=winserverpowershell) ):\r\n\r\n```xml\r\n    <EventTrigger>\r\n      <Enabled>true</Enabled>\r\n      <Subscription><!-- my custom event filter --></Subscription>\r\n      <ValueQueries>\r\n        <Value name=\"Path\">Event/EventData/Data[@Name=\"Path\"]</Value>\r\n        <Value name=\"ProcessName\">Event/EventData/Data[@Name=\"Process Name\"]</Value>\r\n        <Value name=\"User\">Event/EventData/Data[@Name=\"User\"]</Value>\r\n      </ValueQueries>\r\n    </EventTrigger>\r\n  </Triggers>\r\n```\r\n\r\nAfter that, we could use variable `$(Path)` `$(ProcessName)` `$(User)` inside the event action. For this case, we could call the script as below. Windows will call my `notifier.ps1` whenever an event hit the trigger.\r\n\r\n```powershell\r\nwscript.exe \"C:\\path\\to\\powershell.vbs\" \"C:\\path\\to\\notifier.ps1\" -User $(User) -ProcessName $(ProcessName) -Path $(Path)\r\n```\r\n\r\nThe `powershell.vbs` is absolutely reuseable. \ud83d\ude0f \r\n\r\nOriginal: https://github.com/PowerShell/PowerShell/issues/3028#issuecomment-522375489\r\n\r\n> \r\n> \r\n> As @Ciantic mentioned, the best way to work around this issue is by using a VB script:\r\n> \r\n> In, say `ps-run.vbs` put\r\n> \r\n> ```vbnet\r\n> Set objShell = CreateObject(\"Wscript.Shell\")\r\n> Set args = Wscript.Arguments\r\n> For Each arg In args\r\n> \tobjShell.Run(\"powershell -windowstyle hidden -executionpolicy bypass -noninteractive \"\"&\"\" \"\"'\" & arg & \"'\"\"\"),0\r\n> Next\r\n> ```\r\n> \r\n> Then use it to run the command you want, e.g. from Windows' scheduled tasks like so\r\n> \r\n> ```powershell\r\n> wscript \"C:\\Path\\To\\ps-run.vbs\" \"C:\\Other\\Path\\To\\your-script.ps1\"\r\n> ```\r\n> \r\n> I use something like this to run a task frequently without seeing any flashing windows.\r\n\r\n",
      "created_at": "2020-02-09T11:32:36Z",
      "updated_at": "2020-02-09T11:32:36Z"
    },
    {
      "author": "SpriggsySpriggs",
      "author_association": "NONE",
      "body": "You can use QB64 to create a small EXE to hide the script. QB64 is a C++ interpreter that takes QBASIC code and compiles it into a C++ exe. If you use the `_SHELLHIDE` or `SHELL _HIDE` commands, you can call a PowerShell script from within the EXE without ever showing a PowerShell window at all. I use this in conjunction with `-WindowStyle Hidden` just to be safe but I've never had any issues with it. Example: `SHELL$ = \"PowerShell -WindowStyle Hidden -ExecutionPolicy Bypass \" + CHR$(34) + \"&'\" + _STARTDIR$ + \"\\GetNewDate.ps1';exit $LASTEXITCODE\" + CHR$(34):\r\na = _SHELLHIDE(SHELL$)`\r\nYou can also hide the entire EXE that you compiled using `$SCREENHIDE` so that they don't have to see any part of the program.\r\nIf you have an exit code that you want to pass back to a different area of code, you can use `exit $LASTEXITCODE` when you call your PowerShell script to pass it back to the QB64 EXE. If you want to pass the code from the QB64 EXE then you can use the command `SYSTEM` followed by the code you wish to pass back to the rest of your program/script. Hope this helps someone.",
      "created_at": "2020-05-11T14:14:34Z",
      "updated_at": "2020-05-11T14:15:22Z"
    },
    {
      "author": "Roy-Orbison",
      "author_association": "NONE",
      "body": "Using this now so each invocation gets all arguments, rather than each argument being a separate script, like @ttimasdf's but using a plain array:\r\n```vbscript\r\nDim args()\r\nRedim args(Wscript.Arguments.Count - 1)\r\nFor i = 0 To UBound(args): args(i) = Wscript.Arguments.Item(i): Next\r\nCreateObject(\"Wscript.Shell\").Run(\"powershell -Windowstyle Hidden -ExecutionPolicy Bypass -File \"\"\" & Join(args, \"\"\" \"\"\") & \"\"\"\"), 0\r\n```\r\n\r\nI kept the `-ExecutionPolicy Bypass` because I get silent failures unless I also use `Set-ExecutionPolicy`.  Can't wait for `pwshw.exe`.",
      "created_at": "2020-06-03T02:17:30Z",
      "updated_at": "2020-06-03T02:17:30Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "https://github.com/SeidChr/RunHiddenConsole/releases/download/1.0.0-alpha.2/hiddenw.exe\r\n\r\n@Roy-Orbison \r\nThere you go. Just needs a rename \ud83d\ude09\ud83d\ude05\r\n(Srsly. Name it pwshw.exe, put it in your path, and it should just work)\r\n\r\nReally don't know what takes the pwsh team so long.\r\nIt's not such a big deal\n\n<blockquote></blockquote>",
      "created_at": "2020-06-06T06:43:14Z",
      "updated_at": "2020-06-06T06:43:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Really don't know what takes the pwsh team so long.\r\n\r\nLack of resources. We need more code reviewers and contributors.",
      "created_at": "2020-06-06T19:56:00Z",
      "updated_at": "2020-06-06T19:56:00Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "I configured a PowerShell script to run from Elgato Stream Deck, and it pops a window open. I tried using `-Noninteractive` and `-WindowStyle hidden`, but it still pops up briefly.\r\n\r\n```\r\npwsh -Noninteractive -WindowStyle hidden -Command \"....\"\r\n```",
      "created_at": "2020-08-16T13:33:21Z",
      "updated_at": "2020-08-16T13:33:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I expect we get pwshw in next preview.",
      "created_at": "2020-08-16T17:08:19Z",
      "updated_at": "2020-08-16T17:08:19Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "> I configured a PowerShell script to run from Elgato Stream Deck, and it pops a window open. I tried using `-Noninteractive` and `-WindowStyle hidden`, but it still pops up briefly.\r\n> \r\n> ```\r\n> pwsh -Noninteractive -WindowStyle hidden -Command \"....\"\r\n> ```\r\n\r\nYou could easily get around that popup using the tool i have posted above. Using it every day with my steam deck and startup scripts",
      "created_at": "2020-08-16T18:19:19Z",
      "updated_at": "2020-08-16T18:19:19Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "FYI: Over on the console team we're proposing a way for future applications (and future versions of existing applications) to deal with this. There would be a little overhead[1], but it would give PowerShell the ability to _choose whether to allocate a console window_ when launched in a GUI context.\r\n\r\n[1]: powershell would need to call `AllocConsole` if it determined it wanted to be interactive in a graphical context.\r\n\r\nSpecification pull request: https://github.com/microsoft/terminal/pull/7337",
      "created_at": "2020-08-18T20:52:01Z",
      "updated_at": "2020-08-19T04:03:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DHowett so glad I found out about this before merging my PR!  Would be better for the customer to have a single exe and not worry about winexe versions let alone maintenance costs for the team.",
      "created_at": "2020-08-19T03:56:17Z",
      "updated_at": "2020-08-19T03:56:17Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "But what if I'm calling PowerShell without Windows Terminal? For example, I'm calling pwsh.exe directly from Elgato Stream Deck. The proposed option from the Terminal team wouldn't solve this scenario, or others like it, would it?",
      "created_at": "2020-08-19T05:32:05Z",
      "updated_at": "2020-08-19T05:32:05Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "@pcgeek86 don't let the name fool you! My team and I own the entire windows console subsystem, including how console applications launch and talk to eachother. ",
      "created_at": "2020-08-19T05:41:23Z",
      "updated_at": "2020-08-19T07:07:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@DHowett I take it that means the functionality would only be available on future versions of Windows? So anyone still using downlevel Windows versions is essentially out of luck? \ud83e\udd14 ",
      "created_at": "2020-08-19T07:29:13Z",
      "updated_at": "2020-08-19T07:29:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> An application that is in the console subsystem with a consoleAllocationPolicy of inheritOnly will not present a console when launched from **Explorer**.\r\n\r\nWhat is a behavior for Task Scheduler?",
      "created_at": "2020-08-19T13:10:18Z",
      "updated_at": "2020-08-19T13:10:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DHowett for pwsh, would need a flag to specify that we would want a conpty allocated so that scripts that call console APIs still work",
      "created_at": "2020-08-19T13:22:09Z",
      "updated_at": "2020-08-19T13:22:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Applications like PowerShell may wish to retain \"automatic\" console allocation, and inheritOnly would be unsuitable for them.\r\n\r\nSo the policy does not resolve all PowerShell scenarios and PowerShell should use a workaround again?\r\n\r\nThis reminds me of my PR where I tried to directly use AllocConsole.\r\n",
      "created_at": "2020-08-19T13:29:17Z",
      "updated_at": "2020-08-19T13:31:13Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "> downlevel (@vexx32)\r\n\r\nUnfortunately, this is a limitation on anything my team produces that is part of the console subsystem and can't ship as part of Terminal. We're trying to work on that \ud83d\ude09 \r\n\r\n> What is the behavior for Task Scheduler (@iSazonov)\r\n\r\nSaying \"Explorer\" was a convenient way to say \"any context that does not already have a console\" in fewer words. Rest assured, _anything that launches an `inheritOnly` application without a console will not cause the allocation of a console._\r\n\r\n> Would need a flag to specify (@SteveL-MSFT)\r\n\r\nFortunately, PowerShell already has this in the form of `WindowStyle`. The default mode can be \"_i should call `AllocConsole()`_\" (which will service all console API needs!), unless the user requested hidden launch. The spec only moves the responsibility for allocating a console into (pwsh) so that it can get final control over whether there's a conhost. Since powershell is already set up to handle this case, it's just a few lines delta before/after the \"hidden\" check.\r\n\r\n> does not resolve all PowerShell scenarios (@iSazonov)\r\n\r\nThe spec further explains how powershell would handle this (see above, my reply to Steve). As far as I understand, this resolves _all scenarios called out in this issue and linked issues._ ",
      "created_at": "2020-08-19T17:54:26Z",
      "updated_at": "2020-08-19T17:54:26Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "The principal difference between calling `AllocConsole()`/`AttachConsole()` as you did in your PR and calling `AllocConsole()` when your application is manifested for a different console allocation policy is that the subsystem bit indicates that the spawning shell (cmd, pwsh, bash, ish) should _wait_ for the spawned shell (`pwshw`) to exit, which reduces interference on the console I/O handles.\r\n\r\nIf you have a Windows subsystem application that calls `AttachConsole()` to get back to its hosting console, the spawning shell and the new application will fight over who gets to read input/write output. That's why calling Attach is _never_ workable from a Windows subsystem application, unless you can fully control the shell that spawned you (you cannot.)",
      "created_at": "2020-08-19T17:59:33Z",
      "updated_at": "2020-08-19T17:59:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett Thanks! To be clear the proposal for PowerShell is to use SUBSYSTEM_GUI and inheritOnly?",
      "created_at": "2020-08-19T18:30:46Z",
      "updated_at": "2020-08-19T18:30:46Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "My belief is that `SUBSYSTEM_CUI` and `inheritOnly` would be correct for PowerShell. It gives you the following behaviors:\r\n\r\n1. cmd (`$SHELL`) will wait for pwsh to exit before returning (`SUBSYSTEM_CUI`)\r\n2. when you run it from explorer/tasksched, pwsh can make the decision about creating a new console window (`inheritOnly`)\r\n3. when you run it from cmd/pwsh/(a console shell), pwsh will automatically receive a console window",
      "created_at": "2020-08-19T18:35:45Z",
      "updated_at": "2020-08-19T18:35:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> when you run it from explorer/tasksched, pwsh can make the decision about creating a new console window (inheritOnly)\r\n\r\nHmm, how could PowerShell know that is the process owner - explorer or tasksched?",
      "created_at": "2020-08-19T18:50:03Z",
      "updated_at": "2020-08-19T18:50:03Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "I don't believe that it needs to know.\r\n\r\nHere's why (C++):\r\n\r\n```c++\r\nint main() {\r\n    auto a{ _parseArgs() };\r\n    if (a.WindowStyle != WindowStyle::Hidden)\r\n    {\r\n        AllocConsole();\r\n    }\r\n}\r\n```\r\n\r\nPowerShell **already knows** whether to spawn a window based on whether the user asked it not to. That feature already exists -- and so this is the minimal incremental change to the code that fixes this bug _and_ keeps the original behavior for all other use cases.\r\n\r\nThat provides a good platform on which to build further new behavior.",
      "created_at": "2020-08-19T19:00:27Z",
      "updated_at": "2020-08-19T19:00:27Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@DHowett as @vexx32 mentioned there is still a lot of Server 2012/R2 & 2016 out in the wild so whilst for Win10 & Server 2019 OS variants this seems great going forward I think that for PowerShell we'd need to think of a way around this that's more elegant than the current suggested solution @SteveL-MSFT \r\n\r\n**Unless** you could also port that change into downlevel OS as part of a security patch, as you aren't doing feature updates to them, (which I highly doubt you would)",
      "created_at": "2020-08-20T14:19:15Z",
      "updated_at": "2020-08-20T14:19:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> that the subsystem bit indicates that the spawning shell (cmd, pwsh, bash, ish) should wait for the spawned shell (pwshw) to exit, which reduces interference on the console I/O handles.\r\n\r\nIt should work for PowerShell too. I mean if PowerShell calls an external console app it should follow the new policy too. Will PowerShell get this automatically or we need to add anything in PowerShell?",
      "created_at": "2020-08-21T06:15:31Z",
      "updated_at": "2020-08-21T06:15:31Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "PowerShell would have to opt in as mentioned in the spec. You brought up a great point, though: I believe that applications spawned _by_ an \"inherit-only\" application will pop up console windows, and that's _terrible_. I'll revisit this in the spec, because I believe I know how we can address that.",
      "created_at": "2020-08-21T17:33:01Z",
      "updated_at": "2020-08-21T17:33:01Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "> Unless you could also port that change into downlevel OS\r\n\r\nGotta get the feature done before we can even evaluate it for backporting \ud83d\ude09 but I 100% agree that this limits its utility.",
      "created_at": "2020-08-21T17:33:38Z",
      "updated_at": "2020-08-21T17:33:38Z"
    },
    {
      "author": "jmbeach",
      "author_association": "NONE",
      "body": "Just want to say that if you're launching powershell from another program, there's a chance that it supports hiding child processes. For example, Autohotkey has a \"Hide\" flag for the run command.",
      "created_at": "2020-10-19T21:29:35Z",
      "updated_at": "2020-10-19T21:29:35Z"
    },
    {
      "author": "liangkang1436",
      "author_association": "NONE",
      "body": "guys , i found a simple way to solve this,mybe you dont like it ,but ,it works,\r\n\r\nfirst ,trigger a .vbs script in Task Schedule.\r\n\r\n```\r\nDim WinScriptHost\r\nSet WinScriptHost = CreateObject(\"WScript.Shell\")\r\nWinScriptHost.Run Chr(34) & \"path2file\\buffer.bat\" & Chr(34), 0\r\nSet WinScriptHost = Nothing\r\n```\r\n\r\nthen, call the ps1 script in the buffer.bat\r\n\r\n```\r\nPowerShell.exe -file path2file\\pwsh.ps1\r\n```\r\n\r\nhope this can help",
      "created_at": "2020-11-30T07:19:20Z",
      "updated_at": "2020-11-30T07:19:20Z"
    },
    {
      "author": "arjanvroege",
      "author_association": "NONE",
      "body": "Any update on the timelines? In the meanwhile it looks like the VBS > Powershell is the only solution to hide the window..",
      "created_at": "2021-01-07T11:23:21Z",
      "updated_at": "2021-01-07T11:23:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@arjanvroege Current timeline is \"Future\". We already merged some intermediate PRs but we do not have enough resources to continue this work actively. The project needs active participation of the community members to move forward - `WG-Interactive-Console` work group was created for this.",
      "created_at": "2021-01-07T11:38:45Z",
      "updated_at": "2021-01-07T11:38:45Z"
    },
    {
      "author": "astroboylrx",
      "author_association": "NONE",
      "body": "> https://github.com/SeidChr/RunHiddenConsole/releases/download/1.0.0-alpha.2/hiddenw.exe\r\n> \r\n> @Roy-Orbison\r\n> There you go. Just needs a rename \ud83d\ude09\ud83d\ude05\r\n> (Srsly. Name it pwshw.exe, put it in your path, and it should just work)\r\n> \r\n> Really don't know what takes the pwsh team so long.\r\n> It's not such a big deal\r\n\r\n@SeidChr Would you please elaborate more on how should I use this? I try to run it with my ps script file path as an argument and got\r\n\r\n```\r\n<LogEntry Date=\"2021-03-21 06:59:41\" Severity=\"Error\" Source=\"PowerShellWindowHost.Program.Main\" ThreadId=\"1\">\r\n  <Message>Unable to find target executable name in own executable name.</Message>\r\n</LogEntry>\r\n```\r\n\r\nThanks a lot in advance!\n\n<blockquote></blockquote>",
      "created_at": "2021-03-21T11:01:35Z",
      "updated_at": "2021-03-21T11:01:37Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "> > https://github.com/SeidChr/RunHiddenConsole/releases/download/1.0.0-alpha.2/hiddenw.exe\r\n> > @Roy-Orbison\r\n> > There you go. Just needs a rename \ud83d\ude09\ud83d\ude05\r\n> > (Srsly. Name it pwshw.exe, put it in your path, and it should just work)\r\n> > Really don't know what takes the pwsh team so long.\r\n> > It's not such a big deal\r\n> \r\n> @SeidChr Would you please elaborate more on how should I use this? I try to run it with my ps script file path as an argument and got\r\n> \r\n> ```\r\n> <LogEntry Date=\"2021-03-21 06:59:41\" Severity=\"Error\" Source=\"PowerShellWindowHost.Program.Main\" ThreadId=\"1\">\r\n>   <Message>Unable to find target executable name in own executable name.</Message>\r\n> </LogEntry>\r\n> ```\r\n> \r\n> Thanks a lot in advance!\r\n\r\nThe error you are posting just indicates, that the name of the commandline you are wanting to use does not match the name of my release-executable.\r\n\r\nIf you want to use it for e.G. Powershell Core, which has the executable name of \"pwsh.exe\", then you need to rename the executable file from my release \"pwshw.exe\" (add a \"w\" in the end. it stands for windowless).\r\n\r\nWhen called, my tool parses its own executable name for that pattern (it checks what comes before the \"w\") and tries to find the tool with the name that it found.\r\n\r\nI.E.: if you leave the name as is (\"hiddenw.exe\") it will look for an executable named \"hidden.exe\" in your path. When it cannot find one, it will fail with the error above.\r\n\r\nDepending on how you want to call the renamed file, you may add the folder to your \"path\"-variable or put the file in some place which is already in the \"path\"\r\n\r\n<blockquote></blockquote>",
      "created_at": "2021-03-21T12:06:45Z",
      "updated_at": "2021-03-21T12:13:05Z"
    },
    {
      "author": "astroboylrx",
      "author_association": "NONE",
      "body": "> The error you are posting just indicates, that the name of the commandline you are wanting to use does not match the name of my release-executable.\r\n> \r\n> If you want to use it for e.G. Powershell Core, which has the executable name of \"pwsh.exe\", then you need to rename the executable file from my release \"pwshw.exe\" (add a \"w\" in the end. it stands for windowless).\r\n> \r\n> When called, my tool parses its own executable name for that pattern (it checks what comes before the \"w\") and tries to find the tool with the name that it found.\r\n> \r\n> I.E.: if you leave the name as is (\"hiddenw.exe\") it will look for an executable named \"hidden.exe\" in your path. When it cannot find one, it will fail with the error above.\r\n> \r\n> Depending on how you want to call the renamed file, you may add the folder to your \"path\"-variable or put the file in some place which is already in the \"path\"\r\n\r\n@SeidChr That's very helpful! Thanks again for the detailed explanations. It works great now!\r\n",
      "created_at": "2021-03-22T00:24:31Z",
      "updated_at": "2021-03-22T00:24:31Z"
    },
    {
      "author": "stephen147",
      "author_association": "NONE",
      "body": "This worked for me to get around it. Send it via cmd and use the `/min` parameter.\r\n\r\n`cmd /c start /min \"\" powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass \"& \"\"C:\\path\\to\\your\\file.ps1\"\"\"`",
      "created_at": "2021-04-02T22:52:57Z",
      "updated_at": "2021-04-02T22:52:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@stephen147, hiding a PowerShell invocation _from an existing console window_ is not the problem. What this issue is about is the ability to launch PowerShell _not_ from a console _without having it create a (transient) console window_.\r\n\r\nYour `cmd /c start /min ... ` approach doesn't _solve_ the problem, it just make it _less obvious_, because `cmd.exe` starts up more quickly than PowerShell, so the time that the initial `cmd.exe` console window is visible is fairly short, before the `start /min` kicks in and starts PowerShell hidden.",
      "created_at": "2021-04-02T23:40:22Z",
      "updated_at": "2021-04-02T23:40:22Z"
    },
    {
      "author": "stephen147",
      "author_association": "NONE",
      "body": "I know it doesn't solve the problem. Perhaps _someone_ might find it _useful_.",
      "created_at": "2021-04-03T00:05:08Z",
      "updated_at": "2021-04-03T00:05:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@stephen147, thank you for suggesting a workaround that _mitigates_ the underlying problem. By saying your solution managed to \"get around\" the problem, others may be tempted to infer that your workaround _fully avoids_ the original problem. I just wanted to clarify that it doesn't.",
      "created_at": "2021-04-03T00:19:37Z",
      "updated_at": "2021-04-03T00:19:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > Unless you could also port that change into downlevel OS\r\n> \r\n> Gotta get the feature done before we can even evaluate it for backporting \ud83d\ude09 but I 100% agree that this limits its utility.\r\n\r\n@DHowett What is current status of the project?",
      "created_at": "2021-04-03T04:56:02Z",
      "updated_at": "2021-04-03T04:56:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Interesting workaround https://github.com/dart-lang/sdk/issues/39945#issuecomment-708954846\r\nAnd docs https://github.com/rprichard/win32-console-docs\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/1572855?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/rprichard/win32-console-docs\">rprichard/win32-console-docs</a></strong></div><div>Win32 Console Documentation -- in particular, console/standard handles and CreateProcess inheritance - rprichard/win32-console-docs</div></blockquote>",
      "created_at": "2021-04-03T04:58:05Z",
      "updated_at": "2021-04-03T04:58:07Z"
    },
    {
      "author": "stax76",
      "author_association": "NONE",
      "body": "Here is a simple wrapper app:\r\n\r\nhttps://github.com/stax76/run-hidden\r\n\r\nExample command line:\r\n\r\nrun-hidden powershell -command calc.exe\n\n<blockquote><img src=\"https://opengraph.githubassets.com/a6b216629b2ff5904734109f161d805c37119ce0266b43374384133e82fcdc5d/stax76/run-hidden\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/stax76/run-hidden\">GitHub - stax76/run-hidden: run-hidden allows to run console tools with hidden console window.</a></strong></div><div>run-hidden allows to run console tools with hidden console window. - GitHub - stax76/run-hidden: run-hidden allows to run console tools with hidden console window.</div></blockquote>",
      "created_at": "2021-07-22T09:32:20Z",
      "updated_at": "2021-07-22T09:32:22Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "@stax76 those little wrappers become too many to count them \ud83d\ude48",
      "created_at": "2021-07-22T09:37:58Z",
      "updated_at": "2021-07-22T09:37:58Z"
    },
    {
      "author": "stax76",
      "author_association": "NONE",
      "body": "@SeidChr\r\n\r\nCan you provide URLs? I had searched before I wrote the app, but couldn't find anything.",
      "created_at": "2021-07-22T09:44:17Z",
      "updated_at": "2021-07-22T09:44:17Z"
    },
    {
      "author": "stax76",
      "author_association": "NONE",
      "body": "OK, sorry, found it now:\r\n\r\nhttps://github.com/SeidChr/RunHiddenConsole\r\n\r\nMore complex than mine.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/c5f4ecf4efb30cc193bbf98391b55f258e0b8cbffea80cd904901b243b619b90/SeidChr/RunHiddenConsole\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/SeidChr/RunHiddenConsole\">GitHub - SeidChr/RunHiddenConsole: Created executable can be renamed to powershellw.exe or pwshw.exe and put next to the corresponding assembly. Calls to the added assembly will be forwarded to the console without creating a window.</a></strong></div><div>Created executable can be renamed to powershellw.exe or pwshw.exe and put next to the corresponding assembly. Calls to the added assembly will be forwarded to the console without creating a window....</div></blockquote>",
      "created_at": "2021-07-22T10:11:58Z",
      "updated_at": "2021-07-22T10:12:00Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "it had some time to grow, but started small as well :D\r\n",
      "created_at": "2021-07-22T14:52:19Z",
      "updated_at": "2021-07-22T14:52:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I reviewed this issue and the related [Console Allocation Policy](https://github.com/microsoft/terminal/pull/7337) proposal again today. It looks to me will be pretty straightforward for PowerShell once the proposed `Console Allocation Policy` gets implemented.\r\n\r\nPowerShell will have `<consoleWindowPolicy>hidden</consoleWindowPolicy>` in its fusion manifest, so that it's always attached to a headless console session when launched by Explorer, Task Scheduler, etc. At the startup, PowerShell checks if the console window is visible by `IsWindowVisible`,\r\n- If yes, then it's not the `launched by a GUI Program` scenario, and nothing needs to be done.\r\n- If not, then\r\n   - If `-WindowStyle hidden` is specified, then nothing needs to be done\r\n   - If `-WindowStyle` is not specified (use `Normal` as the default style), or it's specified with a difference value (`Maximized`, `Minimized`, and `Normal`), then PowerShell calls `GetConsoleWindow/ShowWindow` to show the hidden console.\r\n\r\nThis will keep the exact same behavior as of today, while fixing the flashing windows problem.",
      "created_at": "2021-10-07T17:15:55Z",
      "updated_at": "2021-10-07T17:15:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "NativeCommandProcessor sometimes allocates hidden console. Perhaps we will have to re-review this too.",
      "created_at": "2021-10-07T17:40:29Z",
      "updated_at": "2021-10-07T17:40:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Downside is obvious -- this won't work on down-level machines, so the option of `pwshw.exe` is still on the table unless we decide to not support this on down-level OS's.\r\n\r\nIf we decide to support `pwshw.exe`, then I propose to go with a similar approach as if having `<consoleWindowPolicy>hidden</consoleWindowPolicy>` in the fusion manifest:\r\n1. Always create a new hidden console session at the startup, even if `pwshw` is a GUI application.\r\n2. Make `Hidden` the default value for `-WindowStyle`, but allow user to specify other window style values for debug purpose. When a different style value is specified, show the window with that style.\r\n3. Requires either `-c` or `-file` flag to be present, but allow `-noexit` for debug purpose. When `-noexit` is present, show the window with `Normal` style, unless a different non-hidden style is specified to `-WindowStyle`.\r\n\r\nWith the hidden console session, all existing PowerShell script will work (yeah, won't write out or read anything, but it will not crash, and will run just like how it works today with `-windowstyle hidden`).",
      "created_at": "2021-10-07T17:45:53Z",
      "updated_at": "2021-10-07T17:49:29Z"
    },
    {
      "author": "mvelbaum",
      "author_association": "NONE",
      "body": "Another workaround VBScript  that will launch one or more scripts passed as args (great for task scheduling):\r\n\r\n```vb\r\nSet shell = CreateObject(\"WScript.Shell\")\r\nFor Each arg In WScript.Arguments\r\n    shell.Run(\"pwsh -windowstyle hidden -executionpolicy bypass -noninteractive -command \"\"&\"\" \"\"'\" & arg & \"'\"\"\"),0\r\nNext\r\n```\r\n\r\nJust save as `run-ps.vbs` (or whatever) and then run your PS1 scripts as `run-ps.vbs \"path\\to\\myscript.ps1\"`\r\nTested with PowerShell 7 on Win 11.",
      "created_at": "2021-11-20T10:24:29Z",
      "updated_at": "2021-11-20T10:26:12Z"
    },
    {
      "author": "nigelwale",
      "author_association": "NONE",
      "body": "How about Powershell.exe -WindowStyle VeryHidden -Command \"write-host kiss\"",
      "created_at": "2021-12-06T12:43:28Z",
      "updated_at": "2021-12-06T12:43:28Z"
    },
    {
      "author": "JohyC",
      "author_association": "NONE",
      "body": "Maybe we can use vbs + bat + ps1!\r\n\r\nps1:\r\n#https://github.com/songquanpeng/go-file \r\n#i use go-file.exe in PowerShell and hidden windows!\r\n`\r\nD:\\private\\go-file\\go-file.exe -port 80 -token private -path D:\\Share\r\n`\r\n\r\nbat:\r\n`\r\n@echo off\r\nPowerShell.exe -WindowStyle Hidden -Command D:\\private\\go-file\\go-file.ps1 \r\n`\r\n\r\nvbs: \r\n`\r\nset ws=CreateObject(\"WScript.Shell\")\r\nws.Run \"D:\\private\\go-file\\go-file.bat\",0,true\r\n`",
      "created_at": "2021-12-15T04:35:35Z",
      "updated_at": "2021-12-15T04:38:33Z"
    },
    {
      "author": "stax76",
      "author_association": "NONE",
      "body": "I ported run-hidden from C# to C++, so it's a tiny bit faster:\r\n\r\nhttps://github.com/stax76/run-hidden\n\n<blockquote><img src=\"https://opengraph.githubassets.com/0e167042dbea8e7513c8371804bb658571c29d629ec4af7729938248c851f75f/stax76/run-hidden\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/stax76/run-hidden\">GitHub - stax76/run-hidden: run-hidden runs Windows console apps like PowerShell with hidden console window.</a></strong></div><div>run-hidden runs Windows console apps like PowerShell with hidden console window. - GitHub - stax76/run-hidden: run-hidden runs Windows console apps like PowerShell with hidden console window.</div></blockquote>",
      "created_at": "2022-08-04T10:46:19Z",
      "updated_at": "2022-08-04T10:46:21Z"
    }
  ],
  "created_at": "2017-01-22T18:49:08Z",
  "number": 3028,
  "state": "open",
  "title": "Powershell -WindowStyle Hidden still shows a window briefly",
  "updated_at": "2022-08-04T10:46:21Z"
}