{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5250",
  "author": "dantraMSFT",
  "body": "The issue was encountered during implementation of syslog logging.  The output from String.GetHashCode() can vary for a given string when the process or underlying Core CLR version changes. While it's valid for usage in hash tables, it is not intended to be persisted or comparable across processes.\r\n\r\nThe solution would be to provide a GetHashCode method on a utility class, such as StringUtil that provides the same hashing algorithm without incorporating variable data.  \r\n\r\nA good starting point would be GetLegacyNonRandomizedHashCode in https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.Comparison.cs\r\n",
  "closed_at": "2017-10-27T17:37:42Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Previous discussion](https://github.com/PowerShell/PowerShell/pull/5144#discussion_r146748753)\r\n\r\nI don't understand the _purpose_ for which we're writing this hash in log. Can anybody clarify?\r\n\r\nIf we were to use Git SHA hash, we would copy it to Git and find the exact commit and version tag, or we would find the same of even Google with this hash. Also we always write GitCommitId in log at startup - so we can easy find exact version in the log.\r\nIf we calculate our custom hash, it will be unique, but how do we identify the version? We can not do copy-paste-search.",
      "created_at": "2017-10-27T06:17:08Z",
      "updated_at": "2017-10-27T06:17:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe the original issue is that PSCore6 side-by-side with another PSCore6.x version, there needs to be a way to filter out traces for a particular version of PSCore6 as all the traces go to the same log.  I think for this scenario, using `$psversiontable.gitcommitid` is probably fine.  Most users are using the official builds and that value is pretty short.  Developers running custom builds can make use of the full hash.\r\n",
      "created_at": "2017-10-27T08:01:58Z",
      "updated_at": "2017-10-27T08:01:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "13 vs 57 chars. Having 57 chars in development builds looks overkill.\r\n\r\nAs @daxian-dbw  had mentioned we can easily get Git SHA in the same way we're getting GitCommitId from SMA.dll attribute and use 7-14 first chars from the hash.",
      "created_at": "2017-10-27T09:00:33Z",
      "updated_at": "2017-10-27T09:00:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Probability says first 7 chars is probably ok, but it's not guaranteed.",
      "created_at": "2017-10-27T09:12:33Z",
      "updated_at": "2017-10-27T09:12:33Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "I'm closing this issue. The use case no long longer exists in syslog.",
      "created_at": "2017-10-27T17:37:42Z",
      "updated_at": "2017-10-27T17:37:42Z"
    }
  ],
  "created_at": "2017-10-26T23:44:11Z",
  "labels": [
    "Resolution-Won't Fix"
  ],
  "number": 5250,
  "state": "closed",
  "title": "Consider creating a string hash method that produces a repeatable hash code.",
  "updated_at": "2017-10-31T06:44:23Z"
}