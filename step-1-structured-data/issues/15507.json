{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15507",
  "author": "rtestardi",
  "body": "If I open a file for exclusive access and then try and run get-filehash on it, I don't get a terminating error:\r\n\r\n```\r\nPS C:\\temp> try { get-filehash .\\file.txt } catch { \"caught\" }\r\nget-filehash : The file 'C:\\temp\\file.txt' cannot be read: The process cannot access the file 'C:\\temp\\file.txt'\r\nbecause it is being used by another process.\r\nAt line:1 char:7\r\n+ try { get-filehash .\\file.txt } catch { \"caught\" }\r\n+       ~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ReadError: (C:\\temp\\file.txt:PSObject) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : FileReadError,Get-FileHash\r\n```\r\n\r\nWhereas, other cmdlets operating on the same file (file.txt) get a terminating error:\r\n\r\n```\r\nPS C:\\temp> try { copy-item .\\file.txt .\\file2.txt } catch { \"caught\" }\r\ncaught\r\nPS C:\\temp> try { copy-item .\\file3.txt .\\file.txt } catch { \"caught\" }\r\ncaught\r\nPS C:\\temp> try { \"\" | out-file .\\file.txt } catch { \"caught\" }\r\ncaught\r\n```\r\n\r\nWhy are these behaviors inconsistent?\r\n\r\nYet other cmdlets behave like get-filehash:\r\n\r\n```\r\nPS C:\\temp> try { get-filehash .\\file.txt } catch { \"caught\" }\r\nget-filehash : The file 'C:\\temp\\file.txt' cannot be read: The process cannot access the file 'C:\\temp\\file.txt' because it is being used by another process.\r\nAt line:1 char:7\r\n+ try { get-filehash .\\file.txt } catch { \"caught\" }\r\n+       ~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ReadError: (C:\\temp\\file.txt:PSObject) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : FileReadError,Get-FileHash\r\n\r\n\r\nPS C:\\temp> try { Move-Item .\\file.txt .\\file2.txt } catch { \"caught\" }\r\nMove-Item : The process cannot access the file because it is being used by another process.\r\nAt line:1 char:7\r\n+ try { Move-Item .\\file.txt .\\file2.txt } catch { \"caught\" }\r\n+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : WriteError: (C:\\temp\\file.txt:FileInfo) [Move-Item], IOException\r\n    + FullyQualifiedErrorId : MoveFileInfoItemIOError,Microsoft.PowerShell.Commands.MoveItemCommand\r\n\r\n\r\nPS C:\\temp> try { remove-Item .\\file.txt } catch { \"caught\" }\r\nremove-Item : Cannot remove item C:\\temp\\file.txt: The process cannot access the file 'C:\\temp\\file.txt' because it is being used by another process.\r\nAt line:1 char:7\r\n+ try { remove-Item .\\file.txt } catch { \"caught\" }\r\n+       ~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : WriteError: (C:\\temp\\file.txt:FileInfo) [Remove-Item], IOException\r\n    + FullyQualifiedErrorId : RemoveFileSystemItemIOError,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n\r\nPS C:\\temp> try { get-content .\\file.txt } catch { \"caught\" }\r\nget-content : The process cannot access the file 'C:\\temp\\file.txt' because it is being used by another process.\r\nAt line:1 char:7\r\n+ try { get-content .\\file.txt } catch { \"caught\" }\r\n+       ~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ReadError: (C:\\temp\\file.txt:String) [Get-Content], IOException\r\n    + FullyQualifiedErrorId : GetContentReaderIOError,Microsoft.PowerShell.Commands.GetContentCommand\r\n```\r\n\r\nIdeally, it seems we'd want this class of errors to be consistent so script writers know what to expect.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Common rule is - if a cmdlet can get values from pipeline the cmdlet writes non-terminating error. So we should consider to fix Copy-Item cmdlet.",
      "created_at": "2021-11-30T16:46:07Z",
      "updated_at": "2021-11-30T16:46:07Z"
    }
  ],
  "created_at": "2021-06-02T16:15:27Z",
  "number": 15507,
  "state": "open",
  "title": "Inconsistent behavior wrt filesystem errors as terminating errors...",
  "updated_at": "2021-11-30T16:46:15Z"
}