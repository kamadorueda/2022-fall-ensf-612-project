{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15259",
  "author": "amfogor",
  "body": "### Summary\r\n\r\nWhen using the combination of `-Recurse` and `-Path` with a collection of files, `Get-ChildItem` is way slower than `Get-ChildItem -Path $files` or `Get-ChildItem -Recurse -LiteralPath $files`\r\n\r\nSee the summary in https://github.com/PowerShell/PowerShell/issues/15259#issuecomment-822043579 and https://github.com/PowerShell/PowerShell/issues/15259#issuecomment-822517175\r\n\r\n### Repro steps\r\n\r\n```powershell\r\nPS:> cd .\\PowerShell\\src\\System.Management.Automation\r\nPS:> $f = Get-ChildItem -Recurse -File .\r\nPS:> Measure-Command { Get-ChildItem -Path $f } | % TotalMilliseconds\r\n198.2444\r\n# VS\r\nPS:> Measure-Command { Get-ChildItem -Recurse -LiteralPath $f } | % TotalMilliseconds\r\n213.8493\r\n# VS\r\nPS:> Measure-Command { Get-ChildItem -Recurse -Path $f } | % TotalMilliseconds\r\n15967.8931\r\n```\r\n\r\n### Environment\r\n\r\n```\r\nPS:46> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "Why would you use `Get-ChildItem -Recurse` on an array of files to begin with? Seems pointless to me.",
      "created_at": "2021-04-17T14:13:43Z",
      "updated_at": "2021-04-17T14:13:43Z"
    },
    {
      "author": "amfogor",
      "author_association": "NONE",
      "body": "@zett42  It is used in a utility function. So the input can be anything(same as `gci`).\r\n\r\n",
      "created_at": "2021-04-17T14:24:38Z",
      "updated_at": "2021-04-17T14:24:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You measure two commands together. What command is slow? What are you comparing with? Please update repro steps.",
      "created_at": "2021-04-17T15:08:36Z",
      "updated_at": "2021-04-17T15:08:36Z"
    },
    {
      "author": "amfogor",
      "author_association": "NONE",
      "body": "@iSazonov I'm comparing with the code in \"Expected Behavior\". ",
      "created_at": "2021-04-17T16:19:25Z",
      "updated_at": "2021-04-17T16:19:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While the _extent_ of the slowdown should be investigated, your second command should really be:\r\n\r\n```powershell\r\n# -lp == -LiteralPath\r\ngci -R -File -lp $f\r\n```\r\n\r\nOnly that guarantees the expected results, given that your _verbatim_ file paths would otherwise be interpreted as _wildcard patterns_, due to (positionally) binding to `-Path` rather than `-LiteralPath`.\r\n\r\nAs a (beneficial) side effect, the command executes much faster.\r\n",
      "created_at": "2021-04-17T16:54:22Z",
      "updated_at": "2021-04-17T16:54:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It is the use of `-Recurse` in combination with (implied) `-Path` that causes the excessive slowdown - even though in the case at hand - only _file_ paths as input - there is no recursion to perform.\r\n\r\nBy contrast, with `-LiteralPath` the presence or absence of `-Recurse` makes virtually no difference.\r\n",
      "created_at": "2021-04-17T16:57:51Z",
      "updated_at": "2021-04-17T16:57:51Z"
    },
    {
      "author": "amfogor",
      "author_association": "NONE",
      "body": "@mklement0 \r\nThe code here is only to show the issue. Why is everyone nitpicking the hell out of it...\r\n\r\n\r\n",
      "created_at": "2021-04-17T18:08:29Z",
      "updated_at": "2021-04-17T18:08:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's not what I was doing. My comments contained:\r\n\r\n(a) an acknowledgement of the problem - the excessive slowdown when combining `-Path` with `-Recurse` with an array of _file_ paths - in which case the presence of `-Recurse` should make _no difference_ (though an extra check of the item type - file vs. dir. - is then needed, but that wouldn't explain the excessive slowdown).\r\n\r\n(b) an explanation of how the problem can be avoided (`-LiteralPath`), which also happens to be _the right thing to do to begin with_ - unless your intent is truly to pass an array of _wildcard patterns_.\r\n",
      "created_at": "2021-04-17T18:10:54Z",
      "updated_at": "2021-04-18T21:39:25Z"
    },
    {
      "author": "amfogor",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\n> your second command should really be\r\n> Only that guarantees the expected results,\r\n\r\nBy looking at the code you figured that `-LiteralPath` should be used. And that would defeat the whole purpose of the code.\r\n",
      "created_at": "2021-04-17T18:54:18Z",
      "updated_at": "2021-04-17T18:54:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@amfogor, I'm happy to respond to constructive engagement with the arguments that were made.",
      "created_at": "2021-04-17T19:14:40Z",
      "updated_at": "2021-04-17T19:14:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please update the issue with \r\n`$f = Get-ChildItem -R -File -Path . ; Measure-Command { Get-ChildItem -Recurse -File -Path $f }` vs `$f = Get-ChildItem -Recurse -File -Path . ; Measure-Command { Get-ChildItem -File -Path $f }`\r\n\r\n~I can even guess why it works so slowly (case normalization). If so, then the PR with the fix has been waiting for a long time.~",
      "created_at": "2021-04-18T17:58:39Z",
      "updated_at": "2021-04-20T10:05:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, to demonstrate that not case normalization, but the specific combination of `-Path` and `-Recurse` is the pathological case:\r\n\r\nBenchmark code, using only a `10`-element array of file paths:\r\n\r\n```powershell\r\nWrite-Verbose -vb 'Setting up...'\r\n\r\n# Download and define function `Time-Command` on demand (will prompt).\r\nif (-not (Get-Command -ea Ignore Time-Command)) {\r\n  $gistUrl = 'https://gist.github.com/mklement0/9e1f13978620b09ab2d15da5535d1b27/raw/Time-Command.ps1'\r\n  if ((Read-Host \"`n====`n  OK to download and define benchmark function ``Time-Command`` from Gist ${gistUrl}?`n=====`n(y/n)?\").Trim() -notin 'y', 'yes') { Write-Warning 'Aborted.'; exit 2 }\r\n  Invoke-RestMethod $gistUrl | Invoke-Expression 3>$null\r\n  if (-not ${function:Time-Command}) { exit 2 }\r\n}\r\n\r\n# Create an array with all-lowercase file paths ($PROFILE)\r\n$elementCount = 10\r\n$filePathArray = , $PROFILE.ToLowerInvariant() * $elementCount\r\n\r\n# Define the script blocks whose execution to time.\r\n$benchmarks = @(\r\n  {\r\n    Get-ChildItem -Path $filePathArray -File \r\n  }\r\n\r\n  {\r\n    Get-ChildItem -LiteralPath $filePathArray -File \r\n  } \r\n\r\n  {\r\n    Get-ChildItem -Recurse -Path $filePathArray -File\r\n  }\r\n\r\n  {\r\n    Get-ChildItem -Recurse -LiteralPath $filePathArray -File\r\n  } \r\n)\r\n\r\nWrite-Verbose -vb \"Running benchmarks with $elementCount files...\"\r\n\r\n# Get the file once, out of competition, to warm up the cache.\r\n$null = Get-ChildItem -File -LiteralPath $filePathArray[0]\r\n\r\n# Run the benchmarks 10 times and report the averaged results.\r\nTime-Command -Count 10 $benchmarks\r\n```\r\n\r\nResults:\r\n\r\n\r\nOn Windows, I get:\r\n\r\n```none\r\nVERBOSE: Setting up...\r\nVERBOSE: Running benchmarks with 10 files...\r\n\r\nFactor   Secs (10-run avg.) Command                                                  TimeSpan\r\n------   ------------------ -------                                                  --------\r\n1.00     0.004              Get-ChildItem -LiteralPath $filePathArray -File          00:00:00.0043445\r\n1.02     0.004              Get-ChildItem -Path $filePathArray -File                 00:00:00.0044139\r\n1.03     0.004              Get-ChildItem -Recurse -LiteralPath $filePathArray -File 00:00:00.0044683\r\n1,785.74 7.758              Get-ChildItem -Recurse -Path $filePathArray -File        00:00:07.7581985\r\n```\r\n\r\nThat is, adding `-Recurse` to `-Path -File` caused a roughly 2000-fold slowdown(!)\r\n\r\nOn macOS it isn't quite that bad, but still pathological:\r\n\r\n```none\r\nFactor Secs (10-run avg.) Command                                                  TimeSpan\r\n------ ------------------ -------                                                  --------\r\n1.00   0.002              Get-ChildItem -Path $filePathArray -File                 00:00:00.0023656\r\n1.01   0.002              Get-ChildItem -Recurse -LiteralPath $filePathArray -File 00:00:00.0023979\r\n1.02   0.002              Get-ChildItem -LiteralPath $filePathArray -File          00:00:00.0024215\r\n22.71  0.054              Get-ChildItem -Recurse -Path $filePathArray -File        00:00:00.0537165\r\n```",
      "created_at": "2021-04-18T19:06:07Z",
      "updated_at": "2021-04-18T19:24:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> to demonstrate that not case normalization\r\n\r\nYou could compare results for very small folder tree (one-file-folder-tree) and for a folder tree with many nested objects.\r\n(Case normalization does one pinvoke per subfolder name in folder path, and globbing multiply this up to 6 times!)",
      "created_at": "2021-04-19T04:31:58Z",
      "updated_at": "2021-04-19T04:31:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The benchmarks above clearly demonstrate a problem that is _unrelated_ to case normalization, and I suggest we stay focused on that specific problem here.\r\n\r\nTo recap: \r\n\r\n* There is no justification for `-Recurse` to slow things down this dramatically when combined with `-Path` and _file_ paths, given that there is _nothing to recurse on_.\r\n\r\n* The problem doesn't occur with `-LiteralPath`.\r\n\r\n* Clearly, the specific combination of parameters results in unrelated, unexpected extra activity - and that's what we need to fix.\r\n\r\n  * The problem _may_ be related to by-very-very-unfortunate-design behavior discussed in #5699, but given that _full_ file paths are being used here it shouldn't apply; the problem doesn't seem to be related to how large the current directory's subtree is.\r\n\r\n---\r\n\r\nAs for case normalization: It is only ever needed for the recursion _entry points_, never _during enumeration_, as previously discussed in https://github.com/PowerShell/PowerShell/issues/13190#issuecomment-663870047. And if there's too much case normalization currently going on, that needs to be addressed separately.\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-19T14:36:22Z",
      "updated_at": "2021-04-19T14:40:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, it is extra globbing.\r\nProposed fix https://github.com/iSazonov/PowerShell/commit/1c52dc300629e5c79bc18136a2eeeb76b417c329\r\nFeel free If somebody want to pull PR.\r\n(The fix is only cosmetic fix for the specific scenario. To make Globbing fast is very difficult and unobvious work.)\r\n\r\nPS: @mklement0 Please look output with Name parameter in second command. Do you see only empty strings?",
      "created_at": "2021-04-20T11:29:16Z",
      "updated_at": "2021-04-20T11:30:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Looking at the title, that PR definitely sounds like a worthwhile optimization, but note that it isn't globbing per se that's the problem here, given that `Get-ChildItem -Path $filePathArray -File` in the test above performs virtually the same as the non-globbing `Get-ChildItem -LiteralPath $filePathArray -File` variant (with only 10 paths).\r\n\r\nAgain, the addition of `-Recurse` to `-Path` is what triggers the problem, so I suspect that it's some kind of unnecessary traversal that is triggered.\r\n\r\n> look output with Name parameter in second command. Do you see only empty strings?\r\n\r\nAmong the commands in the benchmark code above, the ones with `-Recurse`  - both `-Path` and `-LiteralPath` - indeed produce empty-string output when `-Name` is added.",
      "created_at": "2021-04-20T12:27:59Z",
      "updated_at": "2021-04-20T12:28:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> but note that it isn't globbing per se that's the problem here\r\n\r\nYou can look the very weird code here https://github.com/PowerShell/PowerShell/blob/4d702e010d656681e42164ad02344883836668c9/src/System.Management.Automation/engine/SessionStateContainer.cs#L1320-L1371\r\nAs you see PowerShell creates new filter with `Include` among other things. So it\u2019s not surprising that it works the slowest way.\r\n\r\n(Could you please open new issue for the bug with `-Name` if you have time or such issue already is?)",
      "created_at": "2021-04-20T13:03:38Z",
      "updated_at": "2021-04-20T13:03:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Well, that code does sound like the implementation of the treacherous behavior discussed in #5699. Of course, even in the context of this regrettable feature, when given a _full_ path referring to a _file_, no recursion should ever be performed, even with (positionally implied) `-Path`.\r\n\r\n> Could you please open new issue for the bug with -Name \r\n\r\nPlease see #15283.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-20T17:14:03Z",
      "updated_at": "2021-04-20T17:14:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Well, that code does sound like the implementation of the treacherous behavior discussed in #5699. \r\n\r\nIt seem the code executed only for Path parameter (SuppressWildcardExpansion is false).",
      "created_at": "2021-04-20T17:38:32Z",
      "updated_at": "2021-04-21T04:03:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've been saying all along that the problem is the specific combination of `-Recurse` and `-Path` (the latter implying wildcard matching).\r\n",
      "created_at": "2021-04-20T17:42:46Z",
      "updated_at": "2021-04-21T04:03:55Z"
    }
  ],
  "created_at": "2021-04-17T13:53:50Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine-Performance",
    "WG-Engine-Providers",
    "Area-FileSystem-Provider"
  ],
  "number": 15259,
  "state": "open",
  "title": "Get-ChildItem is super slow when using the combination of `-Recurse` and `-Path` with a collection of files",
  "updated_at": "2021-11-30T07:25:01Z"
}