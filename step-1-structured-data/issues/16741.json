{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16741",
  "author": "jhoneill",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI can't find this with a search but that may be searching for the wrong thing.\r\n\r\nI had a task where the most sensible way to compare two lumps of text was with `diff.exe`  - I'm using the version which is installed with git for convenience -  my script worked in the  PowerShell Integrated Console in VSCode, but anywhere else  I'd see output like this    \r\n` \u2190[31m  Text that should be read \u2190[0m`\r\n\r\nThat is: **an arrow character was printed where there should be an \"Escape\", and the escape sequence was not processed** \r\n\r\nby a process of trial and error I established \r\n```\r\n<<path>>\\diff.exe --help ; $y = \"`e[31m Red Text `e[0m\"; $Y\r\n``` \r\nWould output  correctly  but \r\n```\r\n$x =<<path>>\\diff.exe --help ; $y = \"`e[31m Red Text `e[0m\"; $Y\r\n``` \r\nWould render escape as arrow, but $y and  it would render correctly in a subsequent command .  Output is only corrupted while the command that contains diff.exe is running.   The same behaviour occurred  with   `diff.exe <<params>> | pscmdlet` or `[void](diff.exe <<params>>)` anything which stopped the main output going to the console.  However `git diff` commands don't suffer from the error. `$x = git diff head~1 ; $x = git diff head~1 ;` \r\n\r\n\r\nI found two workarounds \r\n1.  run `Cmd.exe <<path to diff>>  <<params>>   > tempfile`\r\n2. Use `Start-Process -wait -WindowStyle Hidden  -RedirectStandardOutput $diffOutput -FilePath $PathToDiff -ArgumentList  <<params>>`\r\n\r\nNote that in the start-process example, If  `-NoNewWindow` is used instead of `-WindowStyle Hidden` the problem returns\r\n\r\nThe mechanism of the corruption isn't clear but the something seems to bypassing standard output and impact the console for the duration of that command- whether it is possible for PowerShell to trap it is also not clear. \r\nNor is it clear how common this problem is:  it's possible that diff does something unique, or there may be dozens of cases waiting to be discovered. As more people are coming to pwsh from the Linux world and wanting to bring tools they know, AND use of ansi formatting is getting less niche and more mainstream those cases will emerge - if they are there \r\n\r\n\r\n\n\n### Expected behavior\n\n```console\n$x =<<path>\\diff.exe --help ; $y = \"`e[31m Red Text `e[0m\"; $Y\r\n\r\nStores the help from diff in $x, and prints \"Red Text\" in red.\n```\n\n\n### Actual behavior\n\n```console\n$x =<<path>\\diff.exe --help ; $y = \"`e[31m Red Text `e[0m\"; $Y\r\n\r\nStores the help from diff in $x, and prints \"\u2190[31m Red Text \u2190[0m\" \r\nHowever if $y is entered as the next command it prints as a red text. (Commands in the same PS1 file behave like commands joined with \";\"  )\n```\n\n\n### Error details\n\n```console\nNo errors\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\u001b[0m\r\n----                           -----\u001b[0m\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/16209593/149323431-5d2ec03a-c3b2-4628-a678-405418bc8cc2.png)\r\n",
  "closed_at": "2022-06-09T18:37:47Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Likely fixed by #16612",
      "created_at": "2022-01-13T14:56:45Z",
      "updated_at": "2022-01-13T14:56:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jhoneill Based on your comment https://github.com/PowerShell/PowerShell/issues/17510#issuecomment-1150968057, maybe this one can be closed?",
      "created_at": "2022-06-09T17:10:47Z",
      "updated_at": "2022-06-09T17:10:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@daxian-dbw  Yes, the problem no longer happens with 7.3 so I'll close it",
      "created_at": "2022-06-09T18:37:47Z",
      "updated_at": "2022-06-09T18:37:47Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @jhoneill!",
      "created_at": "2022-06-09T18:45:08Z",
      "updated_at": "2022-06-09T18:45:08Z"
    }
  ],
  "created_at": "2022-01-13T11:37:45Z",
  "labels": [
    "WG-Engine-Format"
  ],
  "number": 16741,
  "state": "closed",
  "title": "External application leaks something ANSI-Corrupting into PowerShell session",
  "updated_at": "2022-06-09T18:45:08Z"
}