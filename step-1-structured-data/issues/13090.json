{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13090",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nEnable C# 9.0 features. Mainly to get `is not` for patterns like `if (!(obj is null))` -> `if(obj is not null)`\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-07-21T19:34:09Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looks like there's a test failure on Unix:\r\n\r\n```\r\nDescribing Validate start of console host\r\nAssemblies that are loaded but not expected: System.Reflection.Emit.dll\r\n    [-] No new assemblies are loaded 20ms\r\n      Expected exactly $null, but got @{InputObject=System.Reflection.Emit.dll; SideIndicator==>}.\r\n      119:         $diffs | Should -BeExactly $null\r\n      at <ScriptBlock>, /Users/runner/work/1/s/test/powershell/Host/Startup.Tests.ps1: line 119\r\n```\r\n\r\nI've rerun the tests, but they may fail again",
      "created_at": "2020-07-09T16:08:26Z",
      "updated_at": "2020-07-09T16:20:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Rebased... maybe resolve CI failures.",
      "created_at": "2020-07-09T17:35:40Z",
      "updated_at": "2020-07-09T17:35:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov please resolve conflicts (I know they're because I merged the other PR...)",
      "created_at": "2020-07-10T16:02:34Z",
      "updated_at": "2020-07-10T16:02:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 please re-review",
      "created_at": "2020-07-10T17:28:55Z",
      "updated_at": "2020-07-10T17:28:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze If you want you could cleanup code (I will review) with `var == null` -> `var is null`, `var != null` -> `var is not null` (excluding UI.Internal and WinRM code).",
      "created_at": "2020-07-22T04:19:14Z",
      "updated_at": "2020-07-22T04:19:14Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Yes I can cleanup code. I will open seperate PR for `var == null` -> `var is null` as this is not C# 9 change.",
      "created_at": "2020-07-23T13:05:54Z",
      "updated_at": "2020-07-23T21:14:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:17:58Z",
      "updated_at": "2020-08-17T22:17:58Z"
    }
  ],
  "created_at": "2020-07-03T13:23:23Z",
  "number": 13090,
  "state": "closed",
  "title": "Enable C# 9.0 features",
  "updated_at": "2020-08-17T22:17:58Z"
}