{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9115",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nReplace current niche Suggestions framework with more intuitive & simple Suggestion model that ties directly into ErrorRecord objects.\r\n\r\nExposing as WIP PR so that anyone wanting to give feedback can. This is in no way a concrete final implementation (yet), but hopefully it should give an idea of what we could work with here.\r\n\r\n## Details\r\n\r\n### Steps\r\n\r\n- [x] Implement ~~Error~~SuggestionInfo class\r\n- [x] Add Suggestion member to ErrorRecord and provide constructor for including Suggestions.\r\n- [x] Replace current in-engine Suggestions with new model suggestions.\r\n- [x] Break Suggestions relationship to ConsoleHost so that hosted use cases can leverage suggestions.\r\n- [x] Update ErrorRecord formatting to account for when there is a suggestion.\r\n- [x] Support multiple suggestions for same instance\r\n- [ ] Hide everything inside experimental feature flags.\r\n\r\n### Goals\r\n\r\n* Keep it simple, make it useful.\r\n* Replace current Suggestion framework as seamlessly as possible\r\n* Use readily-available classes and methods with intuitive design for module authors who wish to utilise the framework.\r\n\r\n## PR Context\r\n\r\n@SteveL-MSFT mentioned that the current Suggestion model needed a rework. \ud83e\udd37\u200d\u2642\ufe0f \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Some things to think about:\r\n\r\n* Current suggestions is tied to console host, so certainly we want to break this relationship so that hosted use cases can leverage suggestions\r\n* Suggestions are currently hardcoded into the engine, there should be a way for modules to add suggestions\r\n* ErrorRecord formatting needs to be updated to account for when there is a suggestion\r\n* Support multiple suggestions (the current system supports this today, although it's not really used) for same instance\r\n",
      "created_at": "2019-03-11T17:12:06Z",
      "updated_at": "2019-03-11T17:12:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Cheers, much appreciated!\r\n\r\nCurrently I'm thinking that it may make the most sense to simply require Suggestions to be supplied inside the ErrorRecord itself when creating the error record (or added post-creation by setting the property, if desired). Adding a whole bunch of logic for a suggestion-per-each-error-type model seems... unnecessarily reliant on the engine, when it could just be a simple \"query the ErrorRecord to see if it's got a suggestion available\" when displaying errors.\r\n\r\nI can see an argument for wanting to keep around a suggestion item here and there in some kind of cache I suppose, but equally modules could simply keep a copy of their base Suggestion object in a module-scoped variable or static property for class-based modules. It could even be a base suggestion that you just copy around and supply new arguments to whenever needed.\r\n\r\nI'm currently looking at how best to decouple the suggestions from conhost completely. Need to examine where CommandNotFoundException (for example) is typically generated and where the ErrorRecord for it is built. Some of the others can be implemented in their respective cmdlets themselves or perhaps in the common parameters implementations (for Transaction-related suggestions I suppose?)\r\n\r\nMultiple suggestions wouldn't be too hard, just a matter of allowing it and working out display kinks.\r\n\r\nHalf-thinking aloud, but yeah should be pretty doable. \ud83d\ude04 ",
      "created_at": "2019-03-11T17:41:40Z",
      "updated_at": "2019-03-11T17:41:40Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hey @vexx32, what would you think of creating a meta-issue to track ongoing work on this? :smiley: \r\n I feel like it could be useful to track these discussions since they will hopefully result in multiple PRs and multiple people collaborating on this big work item. :smiley:\r\nHaving said that I might be overestimating the size of this work and so perhaps it isn't actually necessary. Thoughts ?",
      "created_at": "2019-03-11T18:32:25Z",
      "updated_at": "2019-03-11T18:32:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I am hopeful to get a majority of these items done in this PR alone, if not all of them... A meta-issue isn't necessarily a _bad_ idea, either.\r\n\r\nFor the moment I'll hold off as I'm not sure it'll be needed. We can cross that bridge when it comes to it, I suppose? \ud83d\ude04 ",
      "created_at": "2019-03-11T18:36:14Z",
      "updated_at": "2019-03-11T18:36:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Not really sure how to incorporate the following suggestions, partly because they don't seem to be tied to an actual _error_ of any kind. Can you provide some context on these ones? All seem to be transaction-related, but I'm not sure where they'd normally be shown? Would they just show up in _any_ error where the first command is one of the listed command names?\r\n\r\n```csharp\r\nNewSuggestion(\r\n    id: 1,\r\n    category: \"Transactions\",\r\n    matchType: SuggestionMatchType.Command,\r\n    rule: \"^Start-Transaction\",\r\n    suggestion: SuggestionStrings.Suggestion_StartTransaction,\r\n    enabled: true),\r\nNewSuggestion(\r\n    id: 2,\r\n    category: \"Transactions\",\r\n    matchType: SuggestionMatchType.Command,\r\n    rule: \"^Use-Transaction\",\r\n    suggestion: SuggestionStrings.Suggestion_UseTransaction,\r\n    enabled: true)\r\n```\r\n\r\nEDIT: I think the Use-Transaction one can be covered by simply adding it to any errors generated during that command's operation... But I'm not sure how we can add the Start-Transaction one from anywhere else, really. It can't be in the cmdlet itself, because the cmdlet itself doesn't perform any actions that throw errors (that I can see).",
      "created_at": "2019-03-12T02:17:09Z",
      "updated_at": "2019-03-12T10:46:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My cent. We could consider decoupling suggestions in separate module/dll (internal at first).",
      "created_at": "2019-03-12T10:35:17Z",
      "updated_at": "2019-03-12T10:35:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. We *could* do that, but while I can easily decouple the suggestion *items*, I don't really see an effective path to decouple the suggestion framework itself.\r\n\r\nCurrently, I'm attaching it to ErrorRecord in order to have it easily accessible both to the engine and module authors.\r\n\r\nI'll revisit this periodically as I work to see if I can think of a good way to accomplish this. :smile:",
      "created_at": "2019-03-12T10:42:57Z",
      "updated_at": "2019-03-12T10:42:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This could be in Goals.\r\n\r\nI'd expect that suggestion system reacts to different events and it is not tied exclusively to ErrorRecord.",
      "created_at": "2019-03-12T11:55:57Z",
      "updated_at": "2019-03-12T11:55:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I can definitely agree that could potentially be useful, but I think ultimately that would risk creating confusion as to what's being output / what's being *suggested*.\r\n\r\nThe alternative, I suppose, would be to make it properly a kind of InformationRecord that is shown or hidden based on a preference variable of some kind, determined separately to other information records.\r\n\r\nThis would mean whenever you want to add a suggestion, you need to call `WriteInformation()` _as well as_ `WriteError()` in a cmdlet. In script modules we would need to either utilise Write-Information _or_ we would need to create a new Write-Suggestion cmdlet.\r\n\r\nFor ease of use with compiled cmdlets I could add a `Write()` method to the suggestion class itself which calls WriteInformation() perhaps along with some flag to tell the host to check the preference variable, or similar.\r\n\r\nWhat do you think of this approach?",
      "created_at": "2019-03-12T12:07:55Z",
      "updated_at": "2019-03-12T12:10:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not think a scenario in which we could use InformationRecord but it could be.\r\nThis is a special case of my proposal - the system must be able to respond to any events: ErrorRecords, heavy resource consumption (memory, CPU), large remote (de)serialization...",
      "created_at": "2019-03-12T12:32:11Z",
      "updated_at": "2019-03-12T12:32:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I agree that potentially those could be useful suggestions to include.\r\n\r\nHowever, I do not know of any place in the engine that currently monitors such events. I think it would be better to implement the generic case and leave it open-ended for both module authors and the engine to add cases as they need.\r\n\r\nFor this case, I think the generic ErrorRecord or a type inheriting InformationRecord would be best. Then specific suggestions can be added wherever is appropriate.\r\n\r\nEDIT: Although, that does mean that the suggestions would be a bit tricky to use from outside a module / cmdlet in the engine itself, I suppose? But I'm not sure there is a better method presently available that also works in both scenarios. :/",
      "created_at": "2019-03-12T12:36:55Z",
      "updated_at": "2019-03-12T13:27:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 Transactions aren't supported in PSCore6, so you should just remove those existing suggestions.  If the suggestion (pardon the pun) is to output the suggestion to the information stream, I'm not sure if that is useful in this case.  Suggestions are meant for interactive use.  Perhaps we need a separate member for SuggestedFix which would be useful in other cases (like PSReadLine could read that and inline the fix).",
      "created_at": "2019-03-20T00:37:00Z",
      "updated_at": "2019-03-20T00:37:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I was not aware of that. Are you sure? The cmdlets `Start/Stop/Use-Transaction` all seem to be present at least in the codebase still.\r\n\r\nAgreed we could potentially open up such an avenue for PSReadLine's use, not sure if it makes sense necessarily to do in this same PR?\r\n\r\nOne problem I'm having at the moment is that although I've added the additional code to the formatview for ErrorRecord, I don't see it getting written to the console when a generated ErrorRecord is displayed. I've verified that the ErrorRecord contains the expected suggestion from the CommandNotFoundException, but it still isn't showing up in the console.\r\n\r\nIs there something unusual about ErrorRecord's formatview I'm missing here? \ud83d\ude04 ",
      "created_at": "2019-03-20T00:41:45Z",
      "updated_at": "2019-03-20T00:42:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 The code is still there because it's inherited from Windows PowerShell, but if you look in the csproj, those source files are excluded from the build.\r\n\r\nI think we can split the entirety of the suggestions framework work to multiple PRs, so exposing `SuggestedFix` can certainly be separate from this. \r\n\r\nYou can use `Format-List * -Force` to force ErrorRecord not to use it's default formatter.",
      "created_at": "2019-03-20T18:00:52Z",
      "updated_at": "2019-03-20T18:00:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Gotcha.\r\n\r\nYeah, I'm trying to work the suggestion into the default formatter, though. I can see the member present with the correct data, just the changes I made to the formatter for ErrorRecord don't seem to be taking effect, and I don't see anything else that modifies its formatter in the repo. :/",
      "created_at": "2019-03-20T18:03:42Z",
      "updated_at": "2019-03-20T18:03:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT figured out what I was breaking there, it wasn't liking how I set up the getter to modify the object property in-place when it was iterating over a collection.\r\n\r\nCurrent format looks like this: (first is a suggestion from CommandNotFoundException, second is a custom one with two suggestions as a quick test)\r\n\r\n```\r\nPS C:\\Users\\Joel\\AppData\\Local\\Temp> command2\r\ncommand2 : The term 'command2' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ command2\r\n+ ~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (command2:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n \r\nSuggestions:\r\n  The command command2 was not found, but does exist in the current location. PowerShell does not load commands from the current location by default. If you trust this command, instead type: \".\\command2\". See \"get-help about_Command_Precedence\" for more details.\r\n```\r\n\r\n```\r\nPS C:\\Users\\Joel\\AppData\\Local\\Temp> throw $e\r\nhi\r\nAt line:1 char:1\r\n+ throw $e\r\n+ ~~~~~~~~\r\n+ CategoryInfo          : ConnectionError: (:) [], Exception\r\n+ FullyQualifiedErrorId : testID\r\n \r\nSuggestions:\r\n  Hello, this is a test suggestion. Please adjust your headset.\r\n  Thank you, test complete. Please remove the diskette.\r\n```\r\n\r\nScreenshots, since the red doesn't carry through that well in Markdown:\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/54952471-7610c580-4f1c-11e9-98d7-03d3430d0447.png)\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/54952485-7f019700-4f1c-11e9-81de-9f4bce64373f.png)\r\n\r\nAlso, I rewrote the error formatview script for that portion of the display. It was exceedingly finicky to edit without causing issues, hopefully this is a little more robust. \ud83d\ude04 ",
      "created_at": "2019-03-25T20:39:04Z",
      "updated_at": "2019-03-25T20:41:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Rather than picking **a** color, you could try to invert the fg/bg colors e.g.:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/56709130-e3ab3f80-66dc-11e9-8384-9a4da173b598.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/56709156-fa519680-66dc-11e9-9167-2c5b96045dc5.png)\r\n\r\nAlso, how does the suggestion framework not suggest `Get-ChildItem` if I try to execute `Get-Childs`?  :-)",
      "created_at": "2019-04-25T04:05:44Z",
      "updated_at": "2019-04-25T04:07:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill that _would_ be a decent idea. However, the typical format rendering of ErrorRecord happens as it comes from the error stream, meaning the mostly likely colors that'll get rendered in black-on-red by default.\r\n\r\nNot especially great for the intention here, unfortunately. \ud83d\ude15 ",
      "created_at": "2019-04-26T00:50:19Z",
      "updated_at": "2019-04-26T00:50:19Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Did that change?  On 6.2 the suggestion shows in a normal foreground color.  And I can catch the command not found exception but the suggestion text still appears.  Seems like it is writing directly to the console.  In fact, you can't seem to redirect it.  ??",
      "created_at": "2019-04-26T02:51:45Z",
      "updated_at": "2019-04-26T02:51:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeppers, it is, which is one of the reasons I'd rather it be where I have it at the moment; it's very hard to manage at all.\r\n\r\nIn the current release, it writes directly to console. In fact, it's the conhost that handles them completely I think. I moved the suggestions into the ErrorRecord class as a subclass (SuggestionInfo) and then changed the ErrorRecord formatter to incorporate them. As a result... red by default.\r\n\r\nThat could all be done differently, potentially, but it seems to be the most sensible way to go and the most accessible to module developers to add their own as needed / desired.",
      "created_at": "2019-04-26T02:55:21Z",
      "updated_at": "2019-04-26T02:55:21Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I like being able to manage that display (ideally it would only happen \"interactively\").  But this is troubling:\r\n\r\n> As a result... red by default.\r\n\r\nThere is so much red text I'm pretty sure a lot of folks will just miss the suggestion text.  After reading a few lines of informative text and then a few lines of goobledy gook, I think most folks stop reading further.\r\n\r\nMaybe another option is to write the suggestion to the information stream.",
      "created_at": "2019-04-26T04:45:30Z",
      "updated_at": "2019-05-30T00:10:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill I would generally prefer that, but it would mean somehow writing to the information stream from the error stream / formatter, or somehow detecting that there's a suggestion when an error occurs and writing to the information stream directly. \r\n\r\nThat latter option I feel is kinda undesirable because it means there's no discoverability there. The information stream is largely just text, and I can't really think of a good way to write to information when an error occurs, short of the original implementation which is entirely reliant on conhost to make it work, meaning suggestions don't exist in non-standard host setups.\r\n\r\nIt makes the most sense, I feel, to couple it with ErrorRecord. That it also makes sense to change the colour for visibility and clarity of intent complicates things slightly, but not to the point of making it a good idea to move it elsewhere entirely, I think.",
      "created_at": "2019-04-26T09:42:33Z",
      "updated_at": "2019-04-26T09:42:33Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-05-30T00:07:03Z",
      "updated_at": "2019-05-30T00:07:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I need to get back to this... @SteveL-MSFT I think all I have remaining here is to package it inside experimental feature flags, unless you have further comments on the implementation thus far. \ud83d\ude42 \r\n\r\nEDIT: After I fix the tests ;)",
      "created_at": "2019-05-30T01:45:53Z",
      "updated_at": "2019-06-01T21:29:08Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT can you update @vexx32 ?",
      "created_at": "2019-06-27T23:06:17Z",
      "updated_at": "2019-06-27T23:06:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Do the existing tests cover this work?",
      "created_at": "2019-06-27T23:07:33Z",
      "updated_at": "2019-06-27T23:07:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hah, nope. Gotta add some. After I fix whatever's still broken. I'll see if I can do a rebase and then fix up whatever broke soon. Then I can add a couple extra tests here,.. if I haven't already. I might have already got some, have to check. :slightly_smiling_face: \r\n\r\nDo you guys want me to wrap this up as an experimental feature, or plan for it to be a PS7 full feature?",
      "created_at": "2019-06-27T23:29:01Z",
      "updated_at": "2019-06-27T23:30:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please remind me in 2 days.",
      "created_at": "2019-06-27T23:34:44Z",
      "updated_at": "2019-06-27T23:34:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please get failures.",
      "created_at": "2019-06-28T11:01:44Z",
      "updated_at": "2019-06-28T11:01:44Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, this is the reminder you requested 2 days. ago",
      "created_at": "2019-06-29T23:35:03Z",
      "updated_at": "2019-06-29T23:35:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 where should I put tests for this?",
      "created_at": "2019-06-30T12:51:32Z",
      "updated_at": "2019-06-30T12:51:32Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Command Discovery is here, I would say a new suite , in the folder:\r\nhttps://github.com/PowerShell/PowerShell/tree/master/test/powershell/engine/Basic",
      "created_at": "2019-07-01T17:51:12Z",
      "updated_at": "2019-07-01T17:51:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 can you resolve the merge conflict?  I'd like to spend some time on this and see if we can get it into 7.1 preview.1",
      "created_at": "2020-02-06T17:21:27Z",
      "updated_at": "2020-02-06T17:21:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I think that ought to do it. \ud83d\ude42 ",
      "created_at": "2020-02-07T00:24:36Z",
      "updated_at": "2020-02-07T00:24:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:04:02Z",
      "updated_at": "2020-05-27T02:04:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-14T20:00:15Z",
      "updated_at": "2020-06-14T20:00:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How sad it is to see steel a longtime PR. :-(\r\n",
      "created_at": "2020-06-15T04:36:47Z",
      "updated_at": "2020-06-15T04:36:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-30T05:00:11Z",
      "updated_at": "2020-06-30T05:00:11Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "I'd still like to see this happen... what is this about \"shell automation\" moving this from \"to do\" to \"done\"? Wouldn't it be better to leave it as \"to do\", or have a \"stale\" category instead of \"done\"?",
      "created_at": "2020-07-16T05:23:58Z",
      "updated_at": "2020-07-16T05:23:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The code here is mostly good to go. The only real difficult bit is incorporating the suggestions into the ErrorRecord formatter again; the changes required for ConciseView mean that that portion of the code has to be put in from scratch in the newer code.\r\n\r\nI know @SteveL-MSFT expressed interest in possibly picking this up, but I'm guessing the PS folks have been too busy / focused on other things thus far.\r\n\r\nIf you're interested in picking it up yourself I can point you at what would still need fixing if you'd like to take a stab at it. \ud83d\ude42 \r\n\r\nMind you, wouldn't be bad to leave the `Stale` label so folks can sift through old PRs that never got finished and get them sorted later down the line potentially. @TravisEz13, is that something worth looking at? \ud83d\ude42 ",
      "created_at": "2020-07-16T14:23:50Z",
      "updated_at": "2020-07-16T14:23:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The only real difficult bit is incorporating the suggestions into the ErrorRecord formatter again; the changes required for ConciseView mean that that portion of the code has to be put in from scratch in the newer code.\r\n\r\nThe PR is WIP only due to this? If so we could split the work I hope.",
      "created_at": "2020-07-16T15:10:49Z",
      "updated_at": "2020-07-16T15:10:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It might be possible... However, part of the wider code changes is removing the existing suggestions (which were implemented in the default host and are effectively inaccessible to everything else), so if we merge that without having the formatter updated we will have a build where suggestions appear to be missing (unless you inspect the ErrorRecords manually).",
      "created_at": "2020-07-16T15:15:48Z",
      "updated_at": "2020-07-16T15:15:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see you have already changed ConciseView - is it not finished jet?",
      "created_at": "2020-07-16T15:27:16Z",
      "updated_at": "2020-07-16T15:27:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think I had time to properly finish it, no. \ud83d\ude15 \r\n\r\nCould be I just forgot that I did in, in which case feel free to poach the code and attempt a rebase. I remember that being a bit hairy on the formatter file though \ud83d\ude13 ",
      "created_at": "2020-07-16T15:57:39Z",
      "updated_at": "2020-07-16T15:57:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's a shame to lose it...",
      "created_at": "2020-07-16T16:37:27Z",
      "updated_at": "2020-07-16T16:37:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-24T02:00:16Z",
      "updated_at": "2020-07-24T02:00:16Z"
    }
  ],
  "created_at": "2019-03-11T16:39:50Z",
  "number": 9115,
  "state": "open",
  "title": "WIP: Implement Better Suggestions Framework",
  "updated_at": "2021-11-11T22:00:52Z"
}