{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12059",
  "author": "bobfrankly",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\"derp\",\"Derp\" | Select-Object -unique\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nSingle Return of derp\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n[PSCustomObject]@{Name = \"derp\"},[PSCustomObject]@{Name = \"Derp\"} | Select-Object -unique\r\n# Returns one 'derp'\r\n\r\n\"derp\",\"Derp\" | Select-Object -unique\r\n# Returns two, \"Derp\", and \"derp\"\r\n\r\n\"derp\",\"Derp\" | Sort-Object -unique\r\n# Returns One 'derp'\r\n\r\n# Also: This is also the way it behaves in 5.1, if it helps\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BinaryWizard904",
      "author_association": "NONE",
      "body": "Odd, I'd assume case sensitivity would only be an issue on non-Windows implementations per the [Case-Sensitivity In Powershell](https://docs.microsoft.com/en-us/powershell/scripting/whats-new/known-issues-ps6?view=powershell-7#case-sensitivity-in-powershell) known issue.\r\n\r\nHow curious.",
      "created_at": "2020-03-20T21:46:14Z",
      "updated_at": "2020-03-20T21:46:14Z"
    },
    {
      "author": "BinaryWizard904",
      "author_association": "NONE",
      "body": "Well, I'm stumped.  I looked through the [portion](https://github.com/PowerShell/PowerShell/blob/530977440387eff029f36f20497c4a296ac01fda/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Select-Object.cs#L616-L654) of Select-Object code that gets invoked when only the -Unique flag is supplied.   I went down every path I could find from the different comparison methods to cultural differences, to type conversion, but everything appears consistently implemented.\r\n\r\nAside from the questionable choice to hard-code case-sensitivity into `Select-Object -Unique` when [declaring the ObjectCommandComparer](https://github.com/PowerShell/PowerShell/blob/530977440387eff029f36f20497c4a296ac01fda/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Select-Object.cs#L622), I couldn't find much.  \r\n\r\nI mean, that would explain why `\"derp\",\"Derp\" | Select-Object -unique` returns both values, but it doesn't explain why `[PSCustomObject]@{Name = \"derp\"},[PSCustomObject]@{Name = \"Derp\"} | Select-Object -unique` returns only a single value.  As far as I can tell, they should _both_ be case sensitive under the current code.\r\n",
      "created_at": "2020-03-20T22:58:18Z",
      "updated_at": "2020-03-20T22:59:21Z"
    },
    {
      "author": "BrandynThornton",
      "author_association": "NONE",
      "body": "It looks like the issue reported is due to not specifying a Property for comparison. Without the Property the comparison is between the base objects of each PSCustomObject which are equal. The Sort-Object cmdlet has a separate switch parameter to set case sensitivity.\r\n\r\nUpdated example showing difference in behavior, note the two Name values in the first example are different words and not just different case. I would agree that it would be nice if this defaulted to compare all properties rather than none but that could be a breaking change.\r\n```\r\n[PSCustomObject]@{Name = \"derp\"},[PSCustomObject]@{Name = \"lerp\"} | Select-Object -unique\r\n# Returns one 'derp'\r\n\r\n[PSCustomObject]@{Name = \"derp\"},[PSCustomObject]@{Name = \"Derp\"} | Select-Object -unique -Property Name\r\n# Returns two, 'derp' and 'Derp'\r\n\r\n\"derp\",\"Derp\" | Sort-Object -unique -CaseSensitive\r\n# Returns two, 'derp' and 'Derp'\r\n\r\n# Also: This is also the way it behaves in 5.1, if it helps\r\n```",
      "created_at": "2020-03-22T04:17:32Z",
      "updated_at": "2020-03-22T04:17:32Z"
    },
    {
      "author": "BinaryWizard904",
      "author_association": "NONE",
      "body": "Good catch!  Though that behavior is rather alarming as it is both clearly incorrect and an easy mistake for a programmer to make.  The help for Select-Object explicitly states that \"When you select properties, `Select-Object` returns new objects that have only the specified properties,\" so using the  `-Property` parameter to get wholly unique objects without discarding properties is contraindicated.\r\n\r\nIf that change is judged to be too breaking, we need to update the documentation to make it clear that to select unique objects, the proper syntax is `Select-Object -Unique -Property *`.  Probably add a warning message to the same effect as well.",
      "created_at": "2020-03-22T14:28:19Z",
      "updated_at": "2020-03-22T14:30:36Z"
    },
    {
      "author": "bobfrankly",
      "author_association": "NONE",
      "body": "So I ran across this issue dealing with REST style API, which doesn't return json or xml objects, just an array of strings. It's similar to what you'd expect from Get-Content on a raw text file. If a property is required for Select-Object to behave as expected, what is one supposed to use to pull uniques out of an array of strings?",
      "created_at": "2020-03-22T23:40:21Z",
      "updated_at": "2020-03-22T23:40:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@bobfrankly `Sort-Object -Unique` works, but (naturally) is a sorted list.",
      "created_at": "2020-03-22T23:51:39Z",
      "updated_at": "2020-03-22T23:51:39Z"
    },
    {
      "author": "bobfrankly",
      "author_association": "NONE",
      "body": "@vexx32 I get that it *works*, it's listed in original bug report. But what's the design supposed to be? That Select-Object isn't for arrays of strings? Example 4 in the Select-Object appears to state that it's supposed to be used exactly that way. Am I misunderstanding?",
      "created_at": "2020-03-23T00:02:27Z",
      "updated_at": "2020-03-23T00:02:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@bobfrankly I would be inclined to assume that, given PowerShell is typically by default case-insensitive, this case is more likely to be a bug than a design choice.",
      "created_at": "2020-03-23T01:45:26Z",
      "updated_at": "2020-03-23T01:45:26Z"
    },
    {
      "author": "dillardd",
      "author_association": "NONE",
      "body": "Just ran into this today. Sort-Object was the workaround, but it is definitely still broken. Pwsh 7.1.3 on Window 10.",
      "created_at": "2021-03-18T20:51:03Z",
      "updated_at": "2021-03-18T20:51:03Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Wow, I had no idea that this sort of a bug was present in Select-Object. \r\n\r\nIn my case, I needed to preserve order and preserve casing from the original addition. \r\n\r\nMy solution uses a case insensitive hashset that will only add to the list IF the input is not present in the list. Good enough for my small lists. (Thanks SeeminglyScience):\r\n\r\n    $List = [Collections.Generic.HashSet[string]]::new([StringComparer]::OrdinalIgnoreCase)\r\n    \"a\",\"A\",\"B\",\"b\" | Foreach-Object {if (-not $List.Contains($_)) {$null = $List.Add($_)}}\r\n    $List",
      "created_at": "2021-09-07T21:13:37Z",
      "updated_at": "2021-09-07T21:14:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Szeraax, you can simplify and improve the performance of your hash-set approach by passing the input collection as an _argument_ to the constructor\r\n\r\n```powershell\r\n# -> 'a', 'b'\r\n[Collections.Generic.HashSet[string]]::new([string[]] (\"a\",\"A\",\"B\",\"b\"), [StringComparer]::OrdinalIgnoreCase)\r\n```\r\n\r\nNote, however, that hash sets are documented as _unordered_, i.e. the output order is not guaranteed to reflect the input order.\r\nThe same applies to the `Distinct()` LINQ method, which is an alternative that provides _lazy enumeration_ on output.\r\n\r\nUnfortunately, there is no built-in .NET type that implements an _ordered_ hash set, as of .NET 6\r\n\r\nThus, if you wanted to preserve the input order, you'd have to something like  this (which is considerably slower and more memory-intensive than the solution above):\r\n\r\n```powershell\r\n$auxHashSet = [Collections.Generic.HashSet[string]]::new([StringComparer]::OrdinalIgnoreCase)\r\n[array] $distinctInInputOrder = foreach ($str in \"a\",\"A\",\"B\",\"b\") { if ($auxHashSet.Add($str)) { $str } }\r\n```\r\n\r\n",
      "created_at": "2021-10-15T15:03:28Z",
      "updated_at": "2021-10-15T15:03:28Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Wow, that's a really good workaround. Thank you for the additional clarification. 10/10!\r\n\r\nNow... If we only can get a breaking change approved to fix the bug with select object being case sensitive \ud83d\ude02",
      "created_at": "2021-10-15T15:51:19Z",
      "updated_at": "2021-10-15T15:51:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it was helpful, @Szeraax. If I were to guess, a breaking change is not in the cards (even though conceptually it is undoubtedly called for, along with introducing a `-CaseSensitive` switch).\r\nThe next best thing would be to introduce a `-CaseInsensitive` switch.",
      "created_at": "2021-10-15T16:01:24Z",
      "updated_at": "2021-10-15T16:02:15Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Ya, that's the frustrating part of working with powershell. The board is so risk averse/change averse that the only hope I have of not dealing with issues like this and other much wanted community fixes (like 1st class support for classes, inline splatting, etc.) is to use something else besides powershell. :(",
      "created_at": "2021-10-15T16:08:57Z",
      "updated_at": "2021-10-15T16:08:57Z"
    }
  ],
  "created_at": "2020-03-06T18:19:24Z",
  "labels": [
    "Issue-Bug",
    "Up-for-Grabs",
    "WG-Cmdlets-Utility"
  ],
  "number": 12059,
  "state": "open",
  "title": "Select-Object -unique is inconsistently case sensitive",
  "updated_at": "2021-10-15T16:08:57Z"
}