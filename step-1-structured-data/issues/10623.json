{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10623",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nclass Test {\r\n    [bool] Equals([Test] $other) {\r\n        return $true\r\n    }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nNo exception, type is defined successfully.\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\nPS> class Test { [bool] Equals([Test] $other) { return $true } }\r\nAn error occurred while creating the pipeline.\r\n+ CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : RuntimeException\r\n\r\nPS> $Error[0].GetBaseException() | Format-List * -Force\r\nMessage        : Type must be a type provided by the runtime. (Parameter 'types')\r\nParamName      : types\r\nTargetSite     : System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags, System.Reflection.MethodBase[], System.Type[],\r\n                 System.Reflection.ParameterModifier[])\r\nStackTrace     :    at System.DefaultBinder.SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[]\r\n                 modifiers)\r\n                    at System.RuntimeType.GetMethodImplCommon(String name, Int32 genericParameterCount, BindingFlags bindingAttr, Binder\r\n                 binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)\r\n                    at System.RuntimeType.GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv,\r\n                 Type[] types, ParameterModifier[] modifiers)\r\n                    at System.Type.GetMethod(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention,\r\n                 Type[] types, ParameterModifier[] modifiers)\r\n                    at System.Type.GetMethod(String name, Type[] types)\r\n                    at System.Management.Automation.Language.TypeDefiner.DefineTypeHelper.MethodExistsOnBaseClassAndFinal(String\r\n                 methodName, Type[] parameterTypes)\r\n                    at System.Management.Automation.Language.TypeDefiner.DefineTypeHelper.DefineMethod(FunctionMemberAst functionMemberAst)\r\n                    at System.Management.Automation.Language.TypeDefiner.DefineTypeHelper.DefineMembers()\r\n                    at System.Management.Automation.Language.TypeDefiner.DefineTypes(Parser parser, Ast rootAst, TypeDefinitionAst[]\r\n                 typeDefinitions)\r\n                    at System.Management.Automation.Language.Compiler.DefinePowerShellTypes(Ast rootForDefiningTypes, TypeDefinitionAst[]\r\n                 typeAsts)\r\n                    at System.Management.Automation.Language.Compiler.GenerateTypesAndUsings(ScriptBlockAst rootForDefiningTypesAndUsings,\r\n                 List`1 exprs)\r\n                    at System.Management.Automation.Language.Compiler.CompileSingleLambda(ReadOnlyCollection`1 statements,\r\n                 ReadOnlyCollection`1 traps, String funcName, IScriptExtent entryExtent, IScriptExtent exitExtent, ScriptBlockAst\r\n                 rootForDefiningTypesAndUsings)\r\n                    at System.Management.Automation.Language.Compiler.CompileNamedBlock(NamedBlockAst namedBlockAst, String funcName,\r\n                 ScriptBlockAst rootForDefiningTypes)\r\n                    at System.Management.Automation.Language.Compiler.VisitScriptBlock(ScriptBlockAst scriptBlockAst)\r\n                    at System.Management.Automation.Language.Compiler.Compile(CompiledScriptBlockData scriptBlock, Boolean optimize)\r\n                    at System.Management.Automation.CompiledScriptBlockData.ReallyCompile(Boolean optimize)\r\n                    at System.Management.Automation.CompiledScriptBlockData.CompileUnoptimized()\r\n                    at System.Management.Automation.CompiledScriptBlockData.Compile(Boolean optimized)\r\n                    at System.Management.Automation.DlrScriptCommandProcessor.Init()\r\n                    at System.Management.Automation.DlrScriptCommandProcessor..ctor(ScriptBlock scriptBlock, ExecutionContext context,\r\n                 Boolean useNewScope, CommandOrigin origin, SessionStateInternal sessionState, Object dollarUnderbar)\r\n                    at System.Management.Automation.Runspaces.Command.CreateCommandProcessor(ExecutionContext executionContext, Boolean\r\n                 addToHistory, CommandOrigin origin)\r\n                    at System.Management.Automation.Runspaces.LocalPipeline.CreatePipelineProcessor()\r\nData           : {}\r\nInnerException :\r\nHelpLink       :\r\nSource         : System.Private.CoreLib\r\nHResult        : -2147024809\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.4\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis also occurs in Core 6.2.3 but does *not* occur in Windows PowerShell.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we already discussed an issue like this. PowerShell should compile a type before it can use it. So any recursion in type definition (direct or indirect) is impossible.",
      "created_at": "2019-09-25T14:14:31Z",
      "updated_at": "2019-09-25T14:14:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov It works when the method isn't an override candidate.  For example, the same snippet works if you change the method name `Equals` to `Equals2`:\r\n\r\n```powershell\r\nclass Test {\r\n    [bool] Equals2([Test] $other) {\r\n        return $true\r\n    }\r\n}\r\n```\r\n\r\nBasically `DefineTypeHelper.MethodExistsOnBaseClassAndFinal` should return early if the parameter types contain the type currently being defined.",
      "created_at": "2019-09-25T14:37:19Z",
      "updated_at": "2019-09-25T14:37:19Z"
    }
  ],
  "created_at": "2019-09-25T12:15:35Z",
  "number": 10623,
  "state": "open",
  "title": "Defining a type that contains a method with a parameter typed as itself throws when the method is an override candidate",
  "updated_at": "2019-09-25T14:37:20Z"
}