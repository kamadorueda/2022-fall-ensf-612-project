{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4214",
  "author": "dragonwolf83",
  "body": "The muscle memory from switching cmd to powershell is a pain. It is made worse by the fact that it is much longer than typing out cmd or bash. Even with Windows Search in Start, it often picks up the ISE if you have been using it awhile, so typing out the full name is often needed.\r\n\r\nA better name would be posh.exe or other valid extension. It is as long as bash and just one character longer than cmd. Posh has been the accepted abbreviation in the community for all things PowerShell so there is some familiarity there. I don't believe there are any conflicts with other apps that this would cause, but that would need some digging.\r\n\r\nThis could be achieved in two ways.\r\n1. Create a an official shortcut or symbolic link named posh that would reference powershell.exe\r\n2. Rename powershell.exe to posh.exe.\r\n\r\nThe former maintains backwards compatibility and allows the user to choose between posh or powershell.exe. Existing scripts not impacted. \r\n\r\nThe latter could help give more freedom to issues like  #4199 and other POSIX proposals to how the shell is started. However, it is a breaking change and would need to be reviewed for the impact and the branding implication. \r\n\r\nI think making an official posh shortcut is the best option with minimal impact. New documentation could give preference to posh as the way to enter PowerShell.",
  "closed_at": "2017-10-18T00:25:12Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I would like a short alias too, but [this](https://www.commandlinux.com/man-page/man1/posh.1.html) is why we didn't get go with `posh` when we first went out (we talked about it at length). [Appears](https://www.howtoinstall.co/en/ubuntu/xenial/posh) to be still an up-to-date package too. \r\n\r\nOpen to other suggestions, but most of the obvious *sh ones have been taken. After the only wget/curl alias thing, I'd really like to avoid colliding with other packages out there, even if they're less common. ",
      "created_at": "2017-07-19T16:57:27Z",
      "updated_at": "2017-07-19T16:57:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm not too crazy about this whole idea but how about `pwsh`?",
      "created_at": "2017-07-19T17:15:39Z",
      "updated_at": "2017-07-19T17:15:39Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I've never been keen on posh as a shortening of powershell. pwsh seems better but a quick internet search raises some possible issues. if we're going to do this I'd suggest as short as possible so what about just ps?",
      "created_at": "2017-07-19T17:21:31Z",
      "updated_at": "2017-07-19T17:21:31Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "OK - forget that - I just realised ps is an alias for get-process. that would be too confusing",
      "created_at": "2017-07-19T17:26:21Z",
      "updated_at": "2017-07-19T17:26:21Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'm getting strong deja vu right now. \ud83d\ude09 ",
      "created_at": "2017-07-19T17:27:13Z",
      "updated_at": "2017-07-19T17:27:13Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I appreciate PowerShell's readability (when not using aliases) so running `powershell` works fine for me.\r\n",
      "created_at": "2017-07-19T17:28:43Z",
      "updated_at": "2017-07-19T17:28:58Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "`ps` is an existing command on Linux as well. \r\n\r\nSome other ideas are: `pscmd`, `psc`, `monad`, `psh`, `pshell`\r\n\r\nThere is definitely diminishing returns with these names though on whether they really save anything or just add unnecessary confusion if they are even available.",
      "created_at": "2017-07-19T17:31:08Z",
      "updated_at": "2017-07-19T17:31:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`CoreSh`, `pcs`, `psc`",
      "created_at": "2017-07-19T17:56:06Z",
      "updated_at": "2017-07-19T17:56:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Too bad [mosh](https://mosh.org/) is taken.  [psh](http://gnp.github.io/psh/) is taken.  [pshell] returns many hits.  Interestingly, a search for `msh` on both Bing and Google bring up many hits for PowerShell (calling it Microsoft Shell), although there exists a `msh` on Unix (perhaps not used much)",
      "created_at": "2017-07-20T23:26:00Z",
      "updated_at": "2017-07-20T23:26:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\ude04 S#, P#",
      "created_at": "2017-07-21T07:37:46Z",
      "updated_at": "2017-07-21T07:37:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and is open to having a shorter symlink name, but we can't squat on anyone that already exists.  `prsh` seems ok.  ",
      "created_at": "2017-07-26T23:37:51Z",
      "updated_at": "2017-07-26T23:37:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Wait, wait! I got it: `^sh` - or was that `**sh`? (jk).\r\n\r\n`prsh` seems reasonabe - easier to type than `pwsh`, for instance, though `pwrsh` - despite being 1 char. longer - is also worth considering, given that \"pwr\" is a known abbreviation for \"power\".\r\n\r\nAnother, possibly _complementary_ option: provide an _automatic variable_ whose value _invariably_ reflects the very same path of the binary that launched the current session.\r\n\r\n`bash` has `$BASH` for that.\r\n\r\nThe advantage of this approach is that it is impervious to variations in / manipulations of `$env:PATH`.\r\n\r\nWe already have `$PSHOME` - arguably, something like `$PS` is not too much of a stretch.\r\n\r\nThat said, this relates to the discussion about not polluting the global namespace with automatic variables - see #4216.\r\n\r\n",
      "created_at": "2017-07-28T20:45:57Z",
      "updated_at": "2017-07-28T20:46:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".Net Core, CoreFX, CoreCLR, PowerShell Core - we could consider \"core\" as base.",
      "created_at": "2017-07-30T09:15:13Z",
      "updated_at": "2017-07-30T09:15:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`pscore` seems fine to me even if it doesn't end with `sh` although other Committee members vetoed it",
      "created_at": "2017-07-30T17:31:04Z",
      "updated_at": "2017-07-30T17:31:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`pscore` or `coreps` - LGTM.\r\n\r\nWe can remember `monad` and `msh` (mentioned above).",
      "created_at": "2017-07-30T18:45:05Z",
      "updated_at": "2017-07-30T18:45:05Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I like `pwrsh` the best so far.  `pscore` is not bad either although it's getting kind of longish at 6 chars.  Four or less chars is probably ideal but I could live with the 5 chars required by `pwrsh`.",
      "created_at": "2017-07-30T20:20:27Z",
      "updated_at": "2017-07-30T20:28:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My concern about incorporating the word \"core\" is that it carries no useful information on Unix platforms, where there's no other edition that it needs to be distinguished from.\r\n",
      "created_at": "2017-07-30T20:25:10Z",
      "updated_at": "2017-07-30T20:25:10Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@rkeithhill how about `pscx`, ha! PowerShell Core Experience. Though, that did make me think of another, `pscsh`, PowerShell Core Shell. \r\n\r\nI'm torn on some of the same names myself. I like the readability of `pwrsh` and `pscore` but I agree that 5 characters is the limit. 5 characters covers the first word `power` and any more than that you might as well type the full thing. `monad` is a great easter egg and readable, but confusing to those that don't know PowerShell's background. The 4 character `prsh` works well too. \r\n\r\nIt would be good to come up with a final list of names that can be used and do an official poll like the Edge team did. If there are any upcoming PS Community or official events, links to the poll can be given out to try and reach a larger audience.",
      "created_at": "2017-07-30T21:51:50Z",
      "updated_at": "2017-07-30T21:51:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dragonwolf83:\r\n\r\n`pscsh` is dangerously close to `csh` - an association we should avoid.\r\n\r\nAgain, I see no benefit in including the word \"core\", especially if there's a chance that the editions might be unified one day (and on _Windows_, folks seem to have lived comfortably without a short name for _Windows PowerShell_ for a good decade).\r\n\r\nAgreed re obscurity of `monad`.\r\n\r\nMy personal vote is for `pwsh`, `prsh`, or `pwrsh`.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-07-30T22:24:37Z",
      "updated_at": "2017-07-30T22:24:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: In case _Windows PowerShell_ also needs a short name, simply prefixing with `w` could be the solution, although among my favorites that really only (reasonably) rolls off the keyboard as `wprsh`, so in the two-edition short-name scenario my vote is for the `prsh` / `wprsh` pair.",
      "created_at": "2017-07-30T22:41:21Z",
      "updated_at": "2017-07-30T22:42:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">My concern about incorporating the word \"core\" is that it carries no useful information on Unix platforms, where there's no other edition that it needs to be distinguished from.\r\n\r\n:-) Should we rename .Net Core?",
      "created_at": "2017-07-31T03:21:56Z",
      "updated_at": "2017-07-31T03:21:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Should we rename Windows PowerShell \"Windows PowerShell .NET Framework [FullCLR]?\"",
      "created_at": "2017-07-31T03:38:07Z",
      "updated_at": "2017-07-31T03:38:07Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I would vote for `psh`  -- the project you cite as a collision hasn't seen a [release](https://github.com/gnp/psh/releases) in 10 years, and was never in package repos in any case.",
      "created_at": "2017-08-01T02:18:09Z",
      "updated_at": "2017-08-01T02:18:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul:\r\n\r\n`psh`? I dunno - needs more \"core\", if you ask me.\r\n\r\nKidding aside: excellent point about the status of the project and its absence from package repos.\r\n\r\n`psh` has my vote too (and `wpsh` for Windows PowerShell).\r\n\r\n(Pronounced 'pshaw' and 'whiplash', respectively). ",
      "created_at": "2017-08-01T02:36:45Z",
      "updated_at": "2017-08-01T02:36:45Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": ">`psh` has my vote too (and `wpsh` for Windows PowerShell).\r\n> (Pronounced 'pshaw' and 'whiplash', respectively).\r\n\r\nAre you sure we can't just use `posh` on windows, and pronounce them pish posh? \ud83e\udd21 ",
      "created_at": "2017-08-01T02:46:50Z",
      "updated_at": "2017-08-01T02:47:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Pish-tosh! That's too much of a mishmash for the whole mishpocha. \ud83e\udd21",
      "created_at": "2017-08-01T03:01:18Z",
      "updated_at": "2017-08-01T03:01:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">I would vote for  psh  -- the project you cite as a collision hasn't seen a release in 10 years, and was never in package repos in any case.\r\n\r\nNo copywrite problem?",
      "created_at": "2017-08-01T05:14:24Z",
      "updated_at": "2017-08-01T05:14:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> No copyright problems?\r\n\r\nI hope someone who truly _knows_ will weigh in, but my _guess_ is that this won't be a concern for 2 reasons:\r\n\r\n* `psh` is not the official product name, only an initialism (more loosely speaking, acronym) that is merely a technical aid (though in popular usage it may eventually become a common shorthand for the full product name; it _is_ possible to trademark initialisms/acronyms).\r\n\r\n* trademark issues are often about the likelihood of _confusion_ with existing trademarks, and from what we've seen here, at least in the software space there seem to be no collisions (I don't think the creator of the virtually defunct existing `psh` repo will mind or even has a legal case).\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-08-01T13:12:51Z",
      "updated_at": "2017-08-01T13:12:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In case someone wants to experiment / needs an interim solution:\r\n\r\nHere's an all-aliases solution that defines aliases both inside and outside of PowerShell, on all supported platforms: `psh` for PS Core, and `wpsh` for Windows PowerShell.\r\n\r\n* Run the following ONCE to set up aliases OUTSIDE of PowerShell (for `cmd.exe` on Windows, for `bash` on Unix):\r\n\r\n```powershell\r\n  # Note: \r\n  #   * On Unix, this will define alias `psh` for *interactive* Bash sessions,\r\n  #     via initialization file ~/.bashrc (Linux) or ~/.bash_profile (macOS).\r\n  #   * On Windows, this defines doskey.exe-based aliases `psh` and `wpsh`\r\n  #     via registry key [HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor],\r\n  #     value 'AutoRun', and even though *any* cmd.exe instance will run\r\n  #     these alias definitions, they only work in *interactive* ones.\r\n  #     Note that both aliases open a new window.\r\nif ($env:OS -eq 'Windows_NT') {\r\n  $cmd = 'doskey wpsh=start powershell.exe & doskey psh=powershell.exe -nologo -command \"psh\"'\r\n  $currVal =  try { Get-ItemPropertyValue 'HKCU:\\Software\\Microsoft\\Command Processor' AutoRun } catch {}\r\n  if (-not (Select-String -Quiet -SimpleMatch -Pattern \"$cmd\" -InputObject $currVal)) {\r\n    if ($currVal) { $cmd += \" & $currVal\" }\r\n    Set-ItemProperty 'HKCU:\\Software\\Microsoft\\Command Processor' AutoRun $cmd\r\n  }\r\n} else {\r\n  $cmd = 'alias psh=powershell'\r\n  $initFile = (\"$HOME/.bashrc\", \"$HOME/.bash_profile\")[(uname) -eq 'Darwin']\r\n  if (-not (Select-String -Quiet -LiteralPath $initFile -Pattern \"^\\s*$cmd\\b\")) {\r\n    Add-Content -LiteralPath $initFile -Encoding utf8 \"`n$cmd\"\r\n  }\r\n}\r\n```\r\n\r\n* Put the following into your `$PROFILE` to define the same aliases inside of PowerShell - works in both PS Core and Windows PS:\r\n\r\n```powershell\r\n  # ===\r\n  # Portable alias definitions for PowerShell Core (`psh`) \r\n  # and, on Windows, for Windows PowerShell (`wpsh`) too.\r\n  #\r\n  # Place them in $PROFILE.\r\n  #\r\n  # * On Unix, invoking `psh` always runs the new instance in the current terminal window.\r\n  # * On Windows, only invoking the same edition runs in the current console window.\r\n  #   Invoking the respective other edition opens a new window; if you also\r\n  #   pass a command, add -NoExit to keep the new window open.\r\n  #\r\n  # ===\r\n  if ($env:OS -eq 'Windows_NT') { # on Windows\r\n    if ($PSVersionTable.PSEdition -eq 'Core') { # running in a PS Core session\r\n      # PS Core alias: Invoke the same binary that started the current session.\r\n      Set-Alias psh \"$PSHOME\\powershell.exe\"\r\n      # Windows PowerShell alias\r\n      function wpsh {\r\n        # Assume a fixed location in SYSTEM32.\r\n        $exe = \"$env:SYSTEMROOT\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\r\n        $psModulePathSav = $env:PSModulePath\r\n        try {\r\n          # Note: We must remove all *\\PowerShell\\* entries from $env:PSModulePath, because they are Core-specific\r\n          #       and interfere with module loading in Windows PowerShell.\r\n          # Note that Start-Process -UseNewEnvironment is NOT an option: see https://github.com/PowerShell/PowerShell/issues/3545\r\n          $env:PSModulePath = (($env:PSModulePath -split ';') -notmatch '[/\\\\]PowerShell[/\\\\]') -join ';'\r\n          # Start Windows PowerShell in a new window.\r\n          $htArgs = if ($Args.Count) { @{ Args = $Args } } else { @{} } \r\n          Start-Process $exe @htArgs\r\n        } finally {\r\n          $env:PSModulePath = $psModulePathSav\r\n        }\r\n      }\r\n    } else { # running in a Windows PowerShell session\r\n      # PS Core alias:\r\n      Function psh {\r\n        # Given that the PS Core *.exe is not in $env:PATH as of PowerShell Core v6.0.0-beta.5, determine its location.\r\n        # Since multiple versions may be installed, find the highest version installed.\r\n        # Unfortunately on PSv5.1- [semver] ([System.Management.Automation.SemanticVersion]) is not available, so we fall back to the *.exe files' last-write timestamp.\r\n        # WISHFUL THINKING: Set-Alias psh ((Get-ChildItem -Directory $env:ProgramFiles\\PowerShell | Sort-Object -Descending { [semver] $_.Name })[0].FullName + '\\powershell.exe')\r\n        $exe = ((Get-ChildItem -File $env:ProgramFiles\\PowerShell\\*\\powershell.exe | Sort-Object -Descending LastWriteTime)[0].FullName)\r\n        # Note: The Core-specific module directories are automatically added to $env:PSModulePath, so no other action is required.\r\n        # Start PS Core in a new window.\r\n        $htArgs = if ($Args.Count) { @{ Args = $Args } } else { @{} } \r\n        Start-Process $exe @htArgs\r\n      }\r\n      # Windows PowerShell alias: invoke the same executable that started the current session.\r\n      Set-Alias wpsh \"$PSHOME\\powershell.exe\"\r\n    }\r\n  } else { # on Unix (Linux, macOS)\r\n    # Simply invoke the same binary that started the current session.\r\n    Set-Alias psh \"$PSHOME/powershell\"\r\n  }\r\n```",
      "created_at": "2017-08-07T19:48:00Z",
      "updated_at": "2017-08-07T19:50:32Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "What about `Paua`? This is a reference to the beautiful [paua shell](https://www.bing.com/images/search?q=paua+shell&FORM=HDRSC2) (a sea shell from New Zealand). Otherwise I think `psh` is good as well.\r\n![Paua Shell](http://www.gypsygirl.co.za/image/medium/p.jpg) ",
      "created_at": "2017-08-19T19:39:32Z",
      "updated_at": "2017-08-19T19:39:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "You sell seashells from the (New) Zealand Shore? (Just kidding. Beautiful indeed.)",
      "created_at": "2017-08-19T19:51:34Z",
      "updated_at": "2017-08-19T19:51:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Disclaimer: the following is only of interest to [hobby] linguists.\r\n\r\nPhonetically, `paua` only works for [non-rhotic dialects of English](https://en.wikipedia.org/wiki/Rhoticity_in_English) (e.g., UK, NZ, Australia).\r\n\r\nAnd Bostonians.",
      "created_at": "2017-08-20T19:21:11Z",
      "updated_at": "2017-08-20T19:21:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee should close on this for beta.8",
      "created_at": "2017-09-20T04:50:16Z",
      "updated_at": "2017-09-20T04:50:16Z"
    },
    {
      "author": "BladeFireLight",
      "author_association": "NONE",
      "body": "How about Posh6",
      "created_at": "2017-09-21T16:47:16Z",
      "updated_at": "2017-09-21T16:47:16Z"
    },
    {
      "author": "JPRuskin",
      "author_association": "NONE",
      "body": "> How about Posh6\r\n\r\nFeels like that would go out of date faster than putting a version number in a file extension... ;)",
      "created_at": "2017-09-21T17:00:48Z",
      "updated_at": "2017-09-21T17:00:48Z"
    },
    {
      "author": "BladeFireLight",
      "author_association": "NONE",
      "body": "Yes but a shell script that launches it will know what version it's running. ",
      "created_at": "2017-09-21T17:08:50Z",
      "updated_at": "2017-09-21T17:08:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Although I like `posh`, I think the main concern is that there's an existing package for Linux called [Posh](http://manpages.ubuntu.com/manpages/zesty/man1/posh.1.html) so to avoid another `curl` incident, I think the next best option is `pwsh`",
      "created_at": "2017-09-21T19:10:17Z",
      "updated_at": "2017-09-21T19:10:17Z"
    },
    {
      "author": "robderickson",
      "author_association": "NONE",
      "body": "I like `pwsh`. Would have been nice to have 10 years ago. I miss `msh`.",
      "created_at": "2017-09-21T21:48:53Z",
      "updated_at": "2017-09-21T21:48:53Z"
    },
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "I vote for `psh`.\r\n[gnp/psh](https://github.com/gnp/psh/commits/master) hasn't been committed to in nearly 5 years. It may as well be abandonware.",
      "created_at": "2017-09-21T22:23:58Z",
      "updated_at": "2017-09-21T22:23:58Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I hate to say it, but this is one of those things where it might be too hard to gather strong consensus. :\\ \r\n\r\nAt this point, to close things down, and to avoid *any* kind of collision (more \"good faith\" than legal), I'm all in on `pwsh`. \r\n\r\nLet me ask it this way: does anyone have a strong reason *not* to go with `pwsh`? ",
      "created_at": "2017-09-21T22:31:57Z",
      "updated_at": "2017-09-21T22:31:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Would anyone have concerns if `pwsh` is the name of the executable and `powershell` is the symlink/shortcut?",
      "created_at": "2017-09-21T23:16:37Z",
      "updated_at": "2017-09-21T23:16:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Before we make any approves here we should answer what is \"current\" version and how we're going to refer to it and its target version?",
      "created_at": "2017-09-22T14:52:41Z",
      "updated_at": "2017-09-22T14:52:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov not sure I understand your question.  This isn't related to `powershell -v N` if that is what you are asking.  This simply allows using `pwsh` instead of `powershell` (although we would still support spelling out `powershell`).",
      "created_at": "2017-09-22T16:05:48Z",
      "updated_at": "2017-09-22T16:05:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My concern is more about symlinks like powershell -> powershell-6.0.0-beta.7\r\nIf say about language we like aliases in interactive session because it give us a comfort environment but the aliases is big headache in scripts. I see the same for powershell short name - it's probably good for speed type but it may be really problem for directory tree (symlinks).\r\n\r\nAnother thought. Should we think about speed type? Not all proposed cases is good from this perspective.\r\nLast thought is about pronunciation. Interesting, on Russian we use \"\u043f\u043e\u0448\" (\"posh\") and hypocorism \"\u043f\u043e\u0448\u0438\u043a\" (\"poshik\") since PowerShell birth. I guess that any Russian man will vote for \"posh\" or \"psh\".",
      "created_at": "2017-09-22T18:07:54Z",
      "updated_at": "2017-09-22T18:07:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Just to be clear, `pwsh` wouldn't be an alias (in PowerShell terms), it should be something you could call from cmd.exe or a batch file as it physically exists.  Although it's not clear to me how we actually implement this if we want to support both a short name and `powershell` without having two executables (although poweshell.exe is relatively quite small...).\r\n\r\nAs for `posh` and `psh` vs `pwsh`, the primary concern with `posh` and `psh` is that they already exist (regardless how prominent they are).  We had a problem early on with our `curl` alias as it conflicted with an existing native tool and (perhaps we're overly cautious here) we're trying to avoid a similar situation with the short hand which is why we're leaning towards `pwsh`.  Perhaps if I type `pwsh` often enough people will get used to it :)",
      "created_at": "2017-09-22T18:54:53Z",
      "updated_at": "2017-09-22T18:54:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Other side. How we resolve the same in PowerShell? We suggest users aliases and IntelliSense to seed up typing.\r\nWhen we discussed aliases in one of the discussions here, we said that all the current alias should do not readonly - we should allow users to remove/change any aliases . In other words, aliases should not be exclusively standard. Only basic cmdlet names must be standard. From this point of view, we should not offer a \"standard\" alias for \"powershell\" - any community or distributive should be able to choose the name they like and which corresponds to their spirit, also they could offer IntelliSense too.",
      "created_at": "2017-09-23T18:48:53Z",
      "updated_at": "2017-09-23T18:48:53Z"
    },
    {
      "author": "AdilHindistan",
      "author_association": "NONE",
      "body": "@SteveL-MSFT -  I think that 'pwsh' will probably stick with people just fine. \r\n\r\nThat being said, you folks mentioned curl incident as a reason not use 'psh'. I find that problematic as you are simply boxing yourself (us) to a corner by drawing parallels too far! \r\n\r\n'curl' is one of the most used tools in linux world. It is wise to be overly cautious not to repeat 'curl' snafu for *'living' / 'active'* software but why should this courtesy be extended to **abandonware**? \r\n\r\nLet the curl incident teach us a lesson, just not the wrong one.\r\n\r\n",
      "created_at": "2017-09-24T16:40:45Z",
      "updated_at": "2017-09-24T16:40:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In support of @AdilHindistan's advice, let me reiterate @Jaykul's to-the-point analysis (the thread's gotten long, it's hard to keep track):\r\n\r\n> I would vote for psh -- the project you cite as a collision hasn't seen a release in 10 years, and was never in package repos in any case.\r\n\r\nIn other words: The fact that [`psh`]() was seemingly never part of (major) package repositories (I've only checked `apt` (Ubuntu, Debian) and `yum` (Fedora, RedHat)) - i.e., was always a _niche product_ - _and_ that it can for all intents and purposes be considered abandoned after 10+ years of inactivity makes it a perfect candidate.\r\n\r\n(By contrast, the fact that [`posh`](https://www.commandlinux.com/man-page/man1/posh.1.html) is still an available package via `apt`, irrespective of its maintenance status, disqualifies it, in my opinion.)\r\n\r\n\r\n\r\n",
      "created_at": "2017-09-25T03:32:08Z",
      "updated_at": "2017-09-25T03:32:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I would agree with the points made that `psh` is a viable option and should be considered ",
      "created_at": "2017-09-25T04:04:50Z",
      "updated_at": "2017-09-25T04:04:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for how to _implement_ the short name as a symlink / stub, assuming the name of the actual executable will remain `powershell[.exe]`:\r\n\r\nLet's assume that the short name will be, say, `psh` (just to pick one of the names discussed, at random).\r\n\r\n### Unix platforms\r\n\r\nThe installer will _additionally_ have to do the equivalent of the following:\r\n\r\n```sh\r\n# Linux\r\n/usr/bin$ sudo ln -s powershell psh\r\n\r\n# macOS\r\n/usr/local/bin$ sudo ln -s powershell psh\r\n```\r\n\r\nIn other words: create an additional symlink named `psh` that simply points to the existing `powershell` symlink.\r\n\r\nOn macOS, this would result in symlink chain such as the following:\r\n\r\n`/usr/local/bin/psh@ -> /usr/local/bin/powershell@ -> /usr/local/microsoft/powershell/6.0.0-beta.7/powershell`\r\n\r\nAny calling shell, including PS Core itself, would therefore be able to use `psh` as a shorter alternative to `powershell`.\r\n\r\n### Windows\r\n\r\nOn Windows, things are more complicated:\r\n\r\n* at least as of beta.7, from _outside_ of PS _Core_, it is only _Windows_ PowerShell that is in the PATH. \r\n* There should be distinct shorthands for Windows PowerShell vs. Powershell Core for targeted invocation:  `psh` for PS Core and `wpsh` for Windows PS (this name should be fine too, because it is also not in use in the `apt` and `yum` repos).\r\n\r\n#### Windows PS\r\n\r\n_Windows_ PS could define symlinks - one each in `$env:SystemRoot\\System32\\PowerShell\\v1.0` (64-bit) and `$env:SystemRoot\\SysWOW64\\PowerShell\\v1.0` (32-bit) as follows:\r\n\r\n```powershell\r\nSet-Location $PSHOME\r\ncmd /c mklink wpsh.exe powershell.exe\r\n```\r\n\r\nBy virtue of `$PSHOME` being in the `$PATH`, any shell, including PS Core and Windows PS itself, could then invoke Window PS as `wpsh`.\r\n\r\n#### PS Core\r\n\r\nThe shorthand file by itself could be placed in a directory that is in the PATH by default, which would allow invocation even without PS Core's `$PSHOME` itself being in the PATH.\r\n\r\n64-bit-vs.-32-bit considerations don't apply (PS Core is 64-bit only), so `$env:SystemRoot` (typically, `C:\\Windows`) could be chosen.\r\n\r\nUnfortunately, use of _symbolic links_ is at least currently _not_ an option, because PowerShell Core refuses to run when invoked via a symlink that has a different name:\r\n\r\nFrom an _elevated_ PS session:\r\n\r\n```powershell\r\nSet-Location $env:SystemRoot   # typically, C:\\Windows\r\ncmd /c mklink psh.exe \"C:\\Program Files\\PowerShell\\6.0.0-beta.7\\powershell.exe\"\r\n```\r\n\r\nInvoking `psh.exe` fails as follows:\r\n\r\n```none\r\nThe managed DLL bound to this executable: 'powershell.dll', did not match own name 'psh.dll'.\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\n\r\nIf anyone knows of a way around this, do let us know.\r\n\r\n(Curiously, if you define the symlink _without extension_  - `psh` instead of `psh.exe` - invocation succeeds in principle, but no parameters are passed through.)\r\n\r\nA **workaround** is to use a **stub batch file** (again, run from an _elevated_ PowerShell session):\r\n\r\n```powershell\r\nSet-Location $env:SystemRoot   # typically, C:\\Windows\r\n'@\"%ProgramW6432%\\PowerShell\\6.0.0-beta.7\\powershell.exe\" %*' | Set-Content -Encoding ASCII psh.cmd\r\n```\r\n\r\nAny calling shell, including Windows PowerShell and PS Core itself, can then use `psh` as a shorthand for invoking PS Core.\r\n",
      "created_at": "2017-09-25T04:21:03Z",
      "updated_at": "2017-09-25T04:21:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I was thinking the same thing in terms of using a symlink on Linux/macOS and a batch file for Windows (and I wouldn't do anything for Windows PowerShell as that would just stay as `powershell`).  \r\n\r\nIt seems the most obvious thing is that `powershell` is the primary and `psh` is the link, but I was thinking perhaps we should flip that around so that `psh` is the name of the exe and `powershell` is the link.  The reasoning is that with a new audience on non-Windows and to differentiate from Windows PowerShell, it seems that the preference is that people use `psh` to refer to PowerShell Core and `powershell` is just provided for app-compat (perhaps muscle memory for some people as they transition).  However, I know not everyone is sold on this idea.",
      "created_at": "2017-09-25T05:54:22Z",
      "updated_at": "2017-09-25T05:54:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we'll see that `psh` very popular we can swap `powershell` and `psh`.\r\n\r\nFor adding alias may be help https://stackoverflow.com/questions/2016722/one-dll-multiple-projects",
      "created_at": "2017-09-25T12:27:42Z",
      "updated_at": "2017-09-25T12:27:42Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Don't like the idea of psh becoming the exe and  PowerShell being relegated to being a link. You're throwing away 10 years of audience loyalty for potential ease of use on non-Windows where the audience size is unknown and (at least to begin with) potentially small.\r\n\r\nThe more I see of PowerShell v6 the more it seems the existing Windows users are being ignored in an attempt to convince non-Windows users to adopt PowerShell. Where does this process end?",
      "created_at": "2017-09-25T13:38:53Z",
      "updated_at": "2017-09-25T13:38:53Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@RichardSiddaway I don't get the impression that the PowerShell team is ignoring Windows users at all and I am primarily a Windows user with a Windows Phone. I was the one that requested this not out of some Linux concept, but from my own challenges of moving away from cmd to powershell. \r\n\r\nThe fact is, Windows PowerShell is a mature product but not built with cross-platform in mind. To make this work, the initial investment has to be higher towards to cross-platform in the beginning which will benefit both worlds. Things will even out over the next few releases.\r\n\r\nOther than aliases and parameter aliases, I don't see a lot that negatively impacts Windows users. If there is a specific issue that is a concern, then please raise it in those issues. Debate is good for the platform and we do need to make sure nothing special about PowerShell gets lost in the transition.",
      "created_at": "2017-09-25T19:55:51Z",
      "updated_at": "2017-09-25T19:55:51Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@SteveL-MSFT can you provide some more of your reasoning for making `psh` or `pwsh` becomes the .exe? If there benefits that are gained from it, I may be more inclined to favor it.\r\n\r\nOuch on the batch file. Anyway to make the symlink work on Windows? I rather have that than another layer through cmd.",
      "created_at": "2017-09-25T20:08:46Z",
      "updated_at": "2017-09-25T20:08:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dragonwolf83 I would imagine over time, people would prefer typing 3 or 4 characters vs 10, so although we will always supporting typing out `powershell`, it seems like from a long term perspective, we should optimize for the shorter version\r\n\r\nYou comments about Windows PowerShell are spot on.  ",
      "created_at": "2017-09-25T20:12:58Z",
      "updated_at": "2017-09-25T20:12:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dragonwolf83:\r\n\r\n> Ouch on the batch file. Any way to make the symlink work on Windows?\r\n\r\nI hear you. Alas, my [cry for help](https://stackoverflow.com/q/46439072/45375) has received very little attention so far.",
      "created_at": "2017-09-29T01:50:02Z",
      "updated_at": "2017-09-29T01:50:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "powershell.exe is 78k, would it be so bad to have another 78k as psh.exe...",
      "created_at": "2017-09-29T02:39:19Z",
      "updated_at": "2017-09-29T02:39:19Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Having 2 duplicate executables might be an easy solution but could also lead to confusion since I can imagine that users will start pondering whether there is a difference between the 2. If I were new to PowerShell and saw 2 different examples (e.g. on SO) that show how to call/open PowerShell then I would immediately start to wonder which example I should choose because I would assume that there is a difference...",
      "created_at": "2017-09-30T14:51:09Z",
      "updated_at": "2017-09-30T14:51:09Z"
    },
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "IMO this is silly. cmd.exe is largely hidden in Windows 10 1703, so you would seldom launch powershell.exe from the legacy shell.",
      "created_at": "2017-10-04T13:48:53Z",
      "updated_at": "2017-10-04T13:48:53Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "Not a big fan of this - how often are you typing `powershell` that it becomes a problem? (Also, total bikeshed issue ;) ) In Windows 10 and Server 2016, set \"Replace command prompt with Windows PowerShell when I right click the start menu or press Win+X\" and it's as short as Win+x, i  or  in Linux, add an alias to your existing shell with the name you prefer.\r\n\r\nThat said, what about:\r\n\r\n - `ps1` - after the file extension on Windows, short, easy to type, memorable\r\n - `psps` - is short and typeable, but leaves itself open to 'typical M$ bloat' slanging\r\n - `ips`  - as if for Invoke-PowerShell, it doesn't appear to be a package in RedHat or Ubuntu repos and `yum provides \"*/ips\"` shows no binaries to clash with in a quick check\r\n\r\n> Let me ask it this way: does anyone have a strong reason not to go with pwsh?\r\n\r\nIt's ugly and unpronounceable, takes more syllables to say than 'powershell' itself, isn't particularly easy to type, and looks like it derives from internet-speak pwnd/pwnt.",
      "created_at": "2017-10-04T18:19:36Z",
      "updated_at": "2017-10-04T18:19:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we're soon to have PowerShell as the default shell on Windows, the file name (lenght) becomes unimportant.\r\n\r\nPowerShell Core is portable project - we have to think about Unix, too.",
      "created_at": "2017-10-05T05:14:23Z",
      "updated_at": "2017-10-05T05:14:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and where we landed is to have PSCore6 binary called just `pwsh` without an additional shortcut/alias for `powershell`.  The benefit is making it explicit without ambiguity on Windows whether you are using Windows PowerShell or PowerShell Core.  On non-Windows, it's shorter to type and more consistent with other shell naming.  Based on customer feedback, we can always add a `powershell` link/shortcut/alias in the future.",
      "created_at": "2017-10-12T00:53:37Z",
      "updated_at": "2017-10-12T00:53:37Z"
    },
    {
      "author": "jandrusk",
      "author_association": "NONE",
      "body": "My vote is psh.exe. ",
      "created_at": "2017-10-18T19:14:50Z",
      "updated_at": "2017-10-18T19:14:50Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@jandrusk The [PR](https://github.com/PowerShell/PowerShell/pull/5101) already got merged yesterday, so it will be pwsh.exe. Jeffrey has already tweeted about this [here](https://twitter.com/jsnover/status/920728210857345024).",
      "created_at": "2017-10-18T19:51:54Z",
      "updated_at": "2017-10-18T19:51:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Long live the new PassWord  / Per-Week / PoliceWoman SHell!",
      "created_at": "2017-10-19T02:31:05Z",
      "updated_at": "2017-10-19T02:31:05Z"
    },
    {
      "author": "jongross4",
      "author_association": "NONE",
      "body": "My vote would have been to leave it alone.",
      "created_at": "2017-10-19T02:44:38Z",
      "updated_at": "2017-10-19T02:44:38Z"
    },
    {
      "author": "jonathanmedd",
      "author_association": "NONE",
      "body": "So how are we pronouncing pwsh?\r\n\r\np.w.s.h\r\np.wush\r\np.woosh\r\npuh.wush\r\n\r\nHopefully something better than those",
      "created_at": "2017-10-19T08:36:33Z",
      "updated_at": "2017-10-19T08:36:33Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@jonathanmedd I've been using `pwish` like `wish` with a `p`.",
      "created_at": "2017-10-19T08:39:20Z",
      "updated_at": "2017-10-19T08:39:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Given that _pwsh_ is a recursive acronym (similar to _GNU_) - Please, Why pwSH? - I suggest \"pweesh\", like a cute bunny with a lisp saying \"please\".\r\n\r\nKidding aside: \r\n\r\n* While I personally think settling on `pwsh` was unfortunate, I assume that we'll get used to it soon and won't think about it again.\r\n\r\n* As for pronunciation: I personally don't see the need for one, given that the full name is short enough, and to anyone living in the world of PowerShell the mapping will be obvious. (An example from the Unix world: `zsh` is [apparently pronounced `zee shell` or `zed shell`](http://www.softwaretalk.info/how-is-zsh-pronounced.htm), not as a single syllable).",
      "created_at": "2017-10-19T12:06:50Z",
      "updated_at": "2017-10-19T12:09:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "`P-Dub Shell`?\r\n\r\n`P Double U Shell` or `P Double U S H` is just painful to say. More syllables than `PowerShell` but you'd probably want to distinguish `PowerShell` from `pwsh`. Just as `bash` is distinguished from `Bourne-Again Shell`.",
      "created_at": "2017-10-19T12:21:25Z",
      "updated_at": "2017-10-19T12:21:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> you'd probably want to distinguish PowerShell from pwsh\r\n\r\nIn terms of the official full names, [it's _PowerShell Core_ vs. _Windows PowerShell_](https://blogs.msdn.microsoft.com/powershell/2016/08/18/powershell-on-linux-and-open-source-2/) - _PowerShell_ by itself can refer to any edition.\r\nIf it's not clear from the context, adding the appropriate qualifier will disambiguate - and perhaps won't be needed all that often (e.g., in a pure Unix context).\r\n\r\nLonger-term, given that PowerShell Core is the edition that runs on \"all\" platforms, I wouldn't be surprised if _PowerShell_ became a common, informal shorthand for _PowerShell Core_ (the \"default\" PowerShell), with a qualifier - _Windows_ - only used to refer to the Windows edition.\r\n\r\nAs an aside:\r\n\r\n> Just as bash is distinguished from Bourne-Again Shell.\r\n\r\n`bash` _is_ the _Bourne-Again SHell_ - it contrasts with its predecessor, the _Bourne SHell_ (`sh`, \r\nbefore POSIX standardized the language).\r\n",
      "created_at": "2017-10-19T12:36:13Z",
      "updated_at": "2017-10-19T12:36:52Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I'm talking about distinguishing `pwsh` the binary from `PowerShell` the language/shell. Not distinguishing different implementations/platforms of PowerShell. Just as `bash` is used to distinguish the binary from `Bourn-Again SHell`. They are interchangeable, yes, but when you need to distinguish the 2 you need a clear way to pronounce `pwsh`. ",
      "created_at": "2017-10-19T12:44:01Z",
      "updated_at": "2017-10-19T12:47:11Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": "push :smile:",
      "created_at": "2017-10-19T12:44:19Z",
      "updated_at": "2017-10-19T12:44:19Z"
    },
    {
      "author": "jonathanmedd",
      "author_association": "NONE",
      "body": "So maybe:\r\n\r\n`p shell` or `p w shell`",
      "created_at": "2017-10-19T12:50:20Z",
      "updated_at": "2017-10-19T12:50:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus: \r\n\r\nAh, I see, thanks for clarifying.\r\n\r\nIf you want to convey the _exact_ name of the binary, no pronunciation short of _spelling out_ the name will help you (that would only have worked with something like `posh`).\r\n\r\nThus, referring to the _PowerShell binary/executable_ should work for all those already in the know, and for others you'll have to spell it out anyway.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-10-19T12:56:04Z",
      "updated_at": "2017-10-19T12:57:34Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> If you want to convey the exact name of the binary, no pronunciation short of spelling out the name will help you.\r\n\r\nWe will have to agree to disagree on that one \ud83d\ude03. ",
      "created_at": "2017-10-19T13:02:50Z",
      "updated_at": "2017-10-19T13:02:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I understand your _desire_ for that to work - as it does with \"bash\" and \"posh\", for instance - but as your own struggles above attest, it doesn't work with \"pwsh\" - which, it's fair to assume, we're stuck with now.",
      "created_at": "2017-10-19T13:16:18Z",
      "updated_at": "2017-10-19T13:16:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": ">  it doesn't work with \"pwsh\"\r\n\r\nwell, not with that attitude it doesn't! \ud83d\ude09  I have been calling it `pwish` and probably will continue to do so. But I'm just creating a dialogue to see if other come up with something else. `push` is a good one considering the `w` pronunciation in some languages. `pwsh` not completely irredeemable, IMO. maybe everyone will settle on `p w s h`. but it's too early to say \"we're done here\" and consider the matter decided, IMO.",
      "created_at": "2017-10-19T13:21:49Z",
      "updated_at": "2017-10-19T13:22:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ":)  \r\n\r\nYou're right.\r\n\r\nI guess I was focusing too much on the aspect of conveying the _exact spelling_ to someone not yet familiar with PowerShell rather than a short name established _by convention_ for those already in the know (who already know how to map that short name to `pwsh`).",
      "created_at": "2017-10-19T13:30:43Z",
      "updated_at": "2017-10-19T13:30:43Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "What about MSPosh.  Shorter than PowerShell.exe and follows standards, while also doubling as a fun name for [The PowerShell Hero](http://download.microsoft.com/download/9/6/8/968D32C0-EBAC-472C-9CAB-7758366B3AA1/download_files/PowerShell.jpg)?",
      "created_at": "2017-10-19T15:19:41Z",
      "updated_at": "2017-10-19T15:20:03Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@1RedOne the PowerShell hero/avatar will always be PoSH-Chan in my \u2764\ufe0f",
      "created_at": "2017-10-19T15:21:31Z",
      "updated_at": "2017-10-19T15:21:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems PWSH team was rushing to change its name. :-)",
      "created_at": "2017-10-19T15:39:47Z",
      "updated_at": "2017-10-19T15:39:47Z"
    },
    {
      "author": "mkellerman",
      "author_association": "NONE",
      "body": "I vote for pscmd.exe\r\n\r\nwhen typing cmd in windows, it should actually come up! and it's actually replacing the cmd... \r\n\r\nif this is a question of muscle memory, let's fix that problem.. \r\n\r\nif it's just for fun to find it a cool new name, then it should be pscore.exe, since that's what it is.\r\n\r\njust my 2 cents.",
      "created_at": "2017-10-19T18:47:20Z",
      "updated_at": "2017-10-19T18:47:20Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "`pwsh`, the wwrld's fwremwst Wbject-Wriented shell. I'm lwwking fwrward tw new cmdlets continuing this pattern:\r\n\r\n    Get-Cwntent servers.txt | FwrEach-Wbject { \r\n        Invwke-Cwmmand -CwmputerName $_ -Scriptblwck { .. }\r\n    }\r\n\r\n;)\r\n\r\n--\r\n\r\nRef pronunciation, what about \"*powsh*\" said like \"pouch\" or \"couch\" with a soft \"s\". (Think Sean Connery impressionists saying 'pouch').",
      "created_at": "2017-10-20T18:14:24Z",
      "updated_at": "2017-10-20T18:14:24Z"
    },
    {
      "author": "DaleMitchell",
      "author_association": "NONE",
      "body": "```\r\nThe managed DLL bound to this executable: 'pwsh.dll', did not match own name 'powershell.dll'.\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\nI'm guessing this error message is related to this issue. How do I fix this?",
      "created_at": "2017-10-20T19:09:49Z",
      "updated_at": "2017-10-20T19:09:49Z"
    },
    {
      "author": "DaleMitchell",
      "author_association": "NONE",
      "body": "As far as the actual name issue goes, I vote for pwsh, since Bash is the Bourne Again SHell.",
      "created_at": "2017-10-20T19:11:33Z",
      "updated_at": "2017-10-20T19:11:33Z"
    },
    {
      "author": "shiftybit",
      "author_association": "NONE",
      "body": "I vote for PWSH. And I'd pronounce it as push. \r\nI've seen lots in the community using posh though, so that would be my second choice, though I think MS may be trying to get away from calling it posh. ",
      "created_at": "2017-10-20T19:27:52Z",
      "updated_at": "2017-10-20T19:27:52Z"
    },
    {
      "author": "stlth",
      "author_association": "NONE",
      "body": "I vote for **`pwr`**!",
      "created_at": "2017-10-20T23:01:41Z",
      "updated_at": "2017-10-20T23:01:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DaleMitchell how did you get that error?  If you built it yourself, did you reload build.psm1?",
      "created_at": "2017-10-20T23:37:14Z",
      "updated_at": "2017-10-20T23:37:14Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": ">I've seen lots in the community using posh though\r\n\r\nhttps://github.com/dahlbyk/posh-git for example.",
      "created_at": "2017-10-21T00:20:42Z",
      "updated_at": "2017-10-21T00:20:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`pwsh` is pronounced `posh`.  @SaschaNaz POSH already exists as a shell unfortunately",
      "created_at": "2017-10-21T00:22:07Z",
      "updated_at": "2017-10-21T00:22:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Did I miss a @PowerShell/powershell-committee vote on how it's pronounced? :)\r\n\r\nI thought maybe we could pronounce it `Microsoft Next Generation Command Line Interface Shell Experience 2017`, or maybe just, you know, `powershell`.\r\n",
      "created_at": "2017-10-21T00:27:37Z",
      "updated_at": "2017-10-21T00:27:37Z"
    },
    {
      "author": "mkellerman",
      "author_association": "NONE",
      "body": "Won\u2019t use it until Microsoft Next Generation Command Line Interface Shell Experience 2017 Service Pack 2 is released...",
      "created_at": "2017-10-21T00:29:54Z",
      "updated_at": "2017-10-21T00:29:54Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": ">POSH already exists as a shell unfortunately\r\n\r\nYeah, it will be VERY confusing when a user wants posh, tries `sudo apt install posh` and then gets a completely different shell.",
      "created_at": "2017-10-21T00:31:07Z",
      "updated_at": "2017-10-21T00:31:07Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": "BTW, *poh-sh* or *pah-sh*? Most certainly the latter?",
      "created_at": "2017-10-21T00:38:41Z",
      "updated_at": "2017-10-21T00:38:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The package name is still powershell, no change there:\r\n\r\n```bash\r\nsudo apt install powershell\r\n```\r\n",
      "created_at": "2017-10-21T00:38:55Z",
      "updated_at": "2017-10-21T00:38:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A quick (opinionated) state-of-the-debate post:\r\n\r\n* As for the _file name of the binary_: the decision has been made and publicized: `pwsh` it is.\r\n\r\n* As for _pronunciation_:\r\n\r\n  * There is none that can convey the exact spelling of the binary to the _uninitiated_ - no choice but to spell it out.\r\n\r\n   * To the _initiated_, \"PowerShell\" is arguably all that's needed, as it will usually be clear from the context whether one is referring to the _product_ or the _file name of the binary_  (@markekraus's concern); if the latter, the initiated will automatically translate that to `pwsh` in their heads.  \r\nAdd \"Core\" and \"Windows\" to disambiguate, if needed.\r\n\r\n  * Needless to say, the impassioned quest for the definitive informal one-syllable moniker will continue...\r\n    Since an act of mental mapping onto `pwsh` is required in any event, informally established ones such as \"Posh\" may as well see continued use.\r\n\r\n",
      "created_at": "2017-10-22T18:53:33Z",
      "updated_at": "2017-10-22T18:53:33Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Back in the old days when we used MKS Toolkit for cross-platform script support, we used `ksh.exe` but we always called it `KornShell`.  So even though the binary is `pwsh`, I will call it PowerShell.  \r\n\r\nI think this whole \"how do you pronounce the binary name\" issue could have been avoided if the binary name had been `pwrsh` but that ship has sailed.",
      "created_at": "2017-10-22T18:59:21Z",
      "updated_at": "2017-10-22T18:59:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Back in the \"old days\" (does 15 years ago count?) my team called the binary \"kish\", and \"KornShell\" was for general discussion of the shell.\r\n\r\nExample:\r\n\r\n\"Type ooser bin kish then hit enter. Now you are in the KornShell\"\r\n",
      "created_at": "2017-10-22T19:04:32Z",
      "updated_at": "2017-10-22T19:04:32Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> does 15 years ago count?\r\n\r\nIt's somewhat relative to the person I guess.  My experience w/KornShell started 24 years ago.  15 years ago my daughter was a toddler and that doesn't seem that long ago.  Yikes - time flies.\r\n\r\n> my team called the binary \"kish\"\r\n\r\nCan't say I've ever heard it pronounced that way.  :-)",
      "created_at": "2017-10-22T19:16:56Z",
      "updated_at": "2017-10-22T19:16:56Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> Can't say I've ever heard it pronounced that way. :-)\r\n\r\nYea. outside of that team it has always been \"ksh\" or \"KornShell\". But that's kind of the point: discussing how people will pronounce the letters \"pwsh\" (absent \"PowerShell\") and seeing if there is any consensus. It's not a completely serious discussion and nothing is ever going to be an official pronunciation since its an unpronounceable word (no disrespect intended to team-`push`). but it has merit that maybe a popular contender will win out and we will start hearing it in presentations.",
      "created_at": "2017-10-22T19:30:28Z",
      "updated_at": "2017-10-22T19:30:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Before working at Microsoft, I was a Unix person and has always called ksh Korn Shell and csh C Shell.  I don't recall anyone back in those days trying to pronounce them as words :P",
      "created_at": "2017-10-22T20:21:18Z",
      "updated_at": "2017-10-22T20:21:18Z"
    },
    {
      "author": "halr9000",
      "author_association": "CONTRIBUTOR",
      "body": "Could someone concisely explain why a breaking change like this was made? I'm out of the loop (clearly!), and was chatting with @powerschill, and we are just somewhat surprised, given that symlinks are a thing. \r\n\r\nDid my refresher reading on the contributing process just now. I thought this would require an RFC at first, but I can see how this may not apply. Next, I'm looking at the policy on breaking changes (https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md). Can y'all comment on which bucket this change fell into, and so on? \r\n\r\nNot trying to stir up something that's clearly settled, I just want to be able to communicate effectively to others interested who don't go reading specs and issues. Thanks! ",
      "created_at": "2017-10-25T19:49:33Z",
      "updated_at": "2017-10-25T19:49:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@halr9000 https://github.com/PowerShell/PowerShell/issues/4214#issuecomment-335989245",
      "created_at": "2017-10-25T22:20:13Z",
      "updated_at": "2017-10-25T22:20:13Z"
    },
    {
      "author": "RudolfHenning",
      "author_association": "NONE",
      "body": "my 2c. This is a major breaking change. Too many existing batch files in exiting production scenarios already uses powershell.exe to initiate PowerShell scripts. I'm not against providing an additional short command to launch the same executable but removing 'powershell' will cause major havoc. Please provide a way to use both (alias or whatever)",
      "created_at": "2017-10-26T06:23:55Z",
      "updated_at": "2017-10-26T06:23:55Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@RudolfHenning Unlike previous versions of Windows PowerShell, PowerShell Core will operate side-by-side with other version of itself and older versions of Windows PowerShell. There needs to be a way to call both Windows PowerShell and PowerShell core from the command line and from batch scripts without having to call the full path of the intended EXE or without risking the path order resulting in `powershell.exe` calling the wrong version.\r\n\r\nEven after PowerShell Core 6.0 is released, there will continue to be a need to use Windows PowerShell (5.1 and lower) for many Windows-centric tasks as many of the official and community modules and scripts require access to Full CLR objects unavailable in Core. \r\n\r\nAlso, anyone porting their scripts from earlier versions to 6.0 will likely need to make adjustments as there are quite a lot of breaking changes between 5.1 and 6.0. Since the code will need to be touched anyway, the batch can be switched to `pwsh.exe` from `powershell.exe`. If they are not porting PowerShell Core, then nothing will break and the scripts will continue to run with `powershell.exe` using Windows PowerShell.",
      "created_at": "2017-10-26T09:16:52Z",
      "updated_at": "2017-10-26T09:16:52Z"
    },
    {
      "author": "RudolfHenning",
      "author_association": "NONE",
      "body": "Thanks for the explanation. \r\nSince I'm using both Windows and some Linux OS'es the compatibility of my scripts is a concern at times - yes I know the PowerShell libraries on Linux are strictly still Beta. I've invested quite some time and effort in creating scripts for my Linux machines. \r\nAnyway, keep on doing the good work!",
      "created_at": "2017-10-26T10:33:40Z",
      "updated_at": "2017-10-26T10:33:40Z"
    },
    {
      "author": "doxxx",
      "author_association": "NONE",
      "body": "TeamCity's Powershell runner assumes that the executable is called `powershell`. Since there is no Powershell 5 on Linux to cause compatibility problems, the Linux package should have continued to create the `powershell` symlink. This was unnecessary breakage.",
      "created_at": "2017-10-26T19:39:18Z",
      "updated_at": "2017-10-26T19:39:18Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "What the, did I arrive in April? Are we going to remove vowels from PowerShell commandlets next? This must be a joke.",
      "created_at": "2017-10-27T05:22:19Z",
      "updated_at": "2017-10-27T05:22:19Z"
    },
    {
      "author": "WernerMairl",
      "author_association": "NONE",
      "body": "older scripts (docker) using \"powershell -command xxxx\" not working anymore with the new beta-9 release....\r\n\r\nwaiting for the shitstorm\r\n\r\nThere my be a lot of reasons to to a breaking change on the \"most important\" place or entry point, but shortening the command name by 6 bytes and make it less readable is not one of them....\r\nhow often in the past we decide to use a better/longer name inside our code because reading can/must be easier then writing ....\r\n\r\ncust my 2cent\r\nregards\r\nWerner\r\n\r\n",
      "created_at": "2017-10-27T08:16:07Z",
      "updated_at": "2017-10-27T08:23:42Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I'm trying to understand the outrage and failing. \r\n\r\nPeople are complaining that the new name is breaking things, but, PowerShell Core is still in beta. IMO, if someone is using a beta tech in production code they are inviting disaster (I'm using polite language here). The nature of alpha and beta releases is that of being filled with breaking changes. There is no illusion that this is not beta. beta is baked into the version name: `6.0.0-beta.9`.\r\n\r\nThis name change has no effect on Windows PowerShell. It should not be breaking anything you are currently doing in Windows. If you are doing things in Linux, then you need to own up to the fact that you are using a beta version, instead of blaming the beta version for being a beta version. Consider using something else until the stable release is RTM if you cannot handle the breaking changes between beta releases.\r\n\r\nI get that people don't like the name. You can't always get what you want. I personally have hated PowerShell.exe because it is long and awkward to type. `pwsh` is at least less characters for me to mess up. If you look at the discussion thread you can see that multiple options were discussed some of them way worse (IMO) than `pwsh`.\r\n\r\nPeople misunderstand this as some awkward attempt to blend in with the cool Linux kids, when one of the primary motivators for a new binary name is Windows related. Yes, a linux-y name was chosen, but guess what? PowerShell is now a *nix citizen too. I think it's time people get used to that fact. One of the goals of Core is cross-platform portability, So yes, decisions can and will be made with more than Windows in mind.\r\n\r\nso that's my 2 cents worth.",
      "created_at": "2017-10-27T09:14:43Z",
      "updated_at": "2017-10-27T09:14:43Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "> One of the goals of Core is cross-platform portability\r\n\r\nOne part of cross-platform portability is that the same commands should work on both platforms if they do the same thing. Before this change, I could run `powershell` no matter what OS I was using and get the right thing. Now I can no longer do that.\r\n\r\nMaking software that is easy to use means caring properly for a million little things. Using strange and unintuitive names works counter to that.",
      "created_at": "2017-10-27T09:47:02Z",
      "updated_at": "2017-10-27T09:47:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> I could run `powershell` no matter what OS I was using and get the right thing. Now I can no longer do that.\r\n\r\nNot accurate. You could run `powershell` on windows and get Windows PowerShell then run `powersehll` on linux and get PowerShell Core. Now you can run `pwsh` on windows or linux and get PowerShell Core. So NOW we are in the state you desire. where as before we were in an inconsistent state.\r\n\r\n> Using strange and unintuitive names works counter to that.\r\n\r\nwell its clear it's not universally liked, but... what alternative do you suggest? I see everyone griping about the name but no alternatives to the underlying problem this name change addresses. As I said \"You can't always get what you want\"\r\n\r\nNo matter what name was chosen, people would be unhappy.",
      "created_at": "2017-10-27T10:08:54Z",
      "updated_at": "2017-10-27T10:08:54Z"
    },
    {
      "author": "WernerMairl",
      "author_association": "NONE",
      "body": "@markekraus \r\n\r\n- we know that is is a beta - breaking changes are ok!\r\n- i'm a big fan of making better PS on *nix because it helps me to transfer my (PS) knowledge from Windows to *nix\r\n\r\nMy feedback was about usability and the concern of a shitstorm that enforces some re-names again and endless discussions.\r\n\r\n> You could run powershell on windows and get Windows PowerShell then run powersehll on linux and get PowerShell Core. Now you can run pwsh on windows or linux and get PowerShell Core. So NOW we are in the state you desire. where as before we were in an inconsistent state.\r\n\r\nSeparating Windows and Core is really a BETTER reason for the rename then \"Create a shorter name\" !\r\n\r\nI suggest to do more clear communications about that (Issue Title, Release Notes etc)\r\nI have read the first 2-3 pages of this issue and the discussion was only about length....\r\n\r\nother feedback:\r\nIn the last weeks i have done a lot of codings with PS-Core on Docker and *nix\r\nI like it but needs some polishing. \r\nIdea/Suggestion: \r\nif the name is changed from Powershell to pwsh, why not changing the Version from 6.0 to 1.0 (same discussion like the transform from \".Net 5.0\" to \"dotnet core 1.0\r\nBasically CORE is more like a version 1.0 the a version 6, specially on *nix!!\r\n\r\nregards\r\nWerner\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-10-27T11:23:38Z",
      "updated_at": "2017-10-27T11:23:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@WernerMairl There is an open discussion about using 1.0 instead of 6.0.0 #5165. Please go to that thread and read and comment.\r\n\r\nAlso, since you have been using it and have run into things you think need polishing, please check open issues to see if they address what you have run into. If there is an open issue, vote on it or comment  and if not please open a new issue so they can be fixed. Several of us community members are actively engaged in fixing the lower priority issues and the Microsoft Team has been doing an amazing job working the higher priority and more difficult issues. Also, it's never too late to become a contributor yourself!\r\n\r\nOn the issue description and change communication, I agree that there was room for improvement on the communication of this change and why it was necessary. The roles of different people in this repo can be a bit confusing, but I am not a part of the PowerShell team, just a community contributor with (essentially) forum moderation privileges. I can't speak for the PowerShell Team, but I suspect they understand this fact themselves. \r\n\r\nIn their defense, this one is kind of hard to communicate. The majority of complaints seem to stem from the lack of understanding of the similarities and differences between Windows PowerShell and PowerShell Core. In order to effectively communicate this change, they would have needed to also rehash what was spelled out in the [July 14th blog article](https://blogs.msdn.microsoft.com/powershell/2017/07/14/powershell-6-0-roadmap-coreclr-backwards-compatibility-and-more/). Which even then, people are still having difficulty navigating the similarity and differences. I think that it would need a lengthy description as to why the name change was done that many would still not read. I suspect the torches and pitchforks would have come no matter what.",
      "created_at": "2017-10-27T12:06:27Z",
      "updated_at": "2017-10-27T12:06:27Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "> Not accurate. You could run powershell on windows and get Windows PowerShell then run powersehll on linux and get PowerShell Core. Now you can run pwsh on windows or linux and get PowerShell Core. So NOW we are in the state you desire. where as before we were in an inconsistent state.\r\n\r\nI understand what you mean but I counter that this is not what I want. There is a hidden assumption implicit in my statement: I expect PowerShell and PowerShell Core to be completely equivalent as long as I use common features. So far, this has gone without issues in all my use cases.",
      "created_at": "2017-10-27T12:17:41Z",
      "updated_at": "2017-10-27T12:17:41Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@sandersaares  I believe your experience to be one of luck. It certainly doesn't match my experience. Also, I believe that assumption to be dangerous. This is a major version with a ton of documented breaking changes with a completely different underlying platform. This wont be like previous major versions of PowerShell with near 100% backwards compatibility.",
      "created_at": "2017-10-27T12:38:17Z",
      "updated_at": "2017-10-27T12:38:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I see some people still making the false assumption that the changing of the executable name was primarily to save on typing.  I can see how people may have gotten this impression since this original issue that was used for the PR started with a title asking for a shorter name.\r\n\r\nI agree that we can improve our communication as we shouldn't expect everyone to read all the comments that the Committee makes on decisions.  Particularly on a controversial one like this where the [summary](https://github.com/PowerShell/PowerShell/issues/4214#issuecomment-335989245) of the decision is easily lost.\r\n\r\nIt also seems that there is a fundamental misunderstanding of what PowerShell Core 6 is, particularly in relation to Windows PowerShell.  Windows PowerShell 5.1 is still and will be the in-box version of PowerShell on Windows.  My team also continues to support it as needed.  We fully expect customers to continue to rely on Windows PowerShell for as long as they need to which may very well be at least the next 10 years.  I think it was only recently when the downloads of WMF5.1 finally surpassed the downloads of WMF4.0.\r\n\r\nPowerShell Core 6 is the next evolution of PowerShell where it is not only cross platform but also Open Source.  As @markekraus noted, it is a major version change which allowed us more flexibility on accepting breaking changes we would never consider for Windows PowerShell.  Also noted that PowerShell Core 6 is explicitly designed to work side-by-side (not only with Windows PowerShell but other versions of PSCore6).  There should be no ambiguity of what you get on Windows when you type `powershell`.  I'll just note here that the 6.0 vs 1.0 discussion already happened a long time back before we went public and is unlikely going to be reopened.",
      "created_at": "2017-10-27T13:41:36Z",
      "updated_at": "2017-10-27T13:41:36Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@SteveL-MSFT a blog post on the name change would be good. It could cover the main driver for why the name change with a clear example of the problem on Windows. It would also be good to cover why posh and psh didn't make the cut as well. ",
      "created_at": "2017-10-27T15:16:03Z",
      "updated_at": "2017-10-27T15:16:03Z"
    },
    {
      "author": "afkinsey",
      "author_association": "NONE",
      "body": "Maybe set up \"powershell\" as an alias for pwsh during unpacking+install. This just broke a build I was working on for a couple of days until I tracked down this issue. \r\n\r\nEdit: on linux",
      "created_at": "2017-10-27T16:01:09Z",
      "updated_at": "2017-10-27T16:04:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus has a nice blog post that captures the what and whys:\r\n\r\nhttps://get-powershellblog.blogspot.sg/2017/10/why-pwsh-was-chosen-for-powershell-core.html\r\n",
      "created_at": "2017-10-27T23:32:45Z",
      "updated_at": "2017-10-27T23:32:45Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Today I saw the first usage of `pwsh` on SO [here](https://stackoverflow.com/questions/46982628/how-do-i-download-and-install-nuget-packages-with-packagemanagement-module) although I doubt that the person knows about this thread...",
      "created_at": "2017-10-28T16:12:35Z",
      "updated_at": "2017-10-28T16:12:35Z"
    },
    {
      "author": "apjanke",
      "author_association": "NONE",
      "body": "Can we get an official ruling on the pronunciation of `pwsh`? The [PNG spec](https://www.w3.org/TR/2003/REC-PNG-20031110/) includes a pronunciation in its Section 1. May as well provide one for PowerShell; don't want another SCSI \"scuzzy\"/\"sexy\" situation.\r\n\r\nLooks like \"poosh\" to me.",
      "created_at": "2019-10-03T00:27:15Z",
      "updated_at": "2019-10-03T00:27:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@apjanke the generally accepted pronunciation of `pwsh` is `posh`",
      "created_at": "2019-10-03T00:35:29Z",
      "updated_at": "2019-10-03T00:35:29Z"
    },
    {
      "author": "apjanke",
      "author_association": "NONE",
      "body": "Works for me. Thanks for the official confirmation!",
      "created_at": "2019-10-03T00:41:21Z",
      "updated_at": "2019-10-03T00:41:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for alternative pronunciations:<sup>[1]</sup>\r\n\r\n* [_Pish Posh!_](https://en.wiktionary.org/wiki/pish_posh)\r\n\r\n* [_Poppyposh!_](https://www.merriam-webster.com/dictionary/poppycock)\r\n\r\n* _The Shell Formerly Known as PowerShell_ (_TSFKAP_ in [Georgian](https://en.wikipedia.org/wiki/Georgian_language))\r\n\r\n* _The Shell That Dare Not Speak Its Name (Because the Name of Its Executable is Unpronounceable)_ (preferred by [Welsh](https://en.wikipedia.org/wiki/Welsh_language) speakers).\r\n\r\n---\r\n\r\n<sup>[1] [Parody. Not to be taken seriously.](https://en.wikipedia.org/wiki/Poe%27s_law)</sup>",
      "created_at": "2019-10-03T01:44:37Z",
      "updated_at": "2019-10-03T01:44:37Z"
    },
    {
      "author": "Cloudmersive",
      "author_association": "NONE",
      "body": "Why was this never fixed?  It is still \"pwsh\" in Mac/Linux and \"powershell\" in Windows - so broken",
      "created_at": "2021-06-12T17:07:10Z",
      "updated_at": "2021-06-12T17:07:10Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": "> Why was this never fixed? It is still \"pwsh\" in Mac/Linux and \"powershell\" in Windows - so broken\r\n\r\nMaybe because you haven't installed PowerShell Core?",
      "created_at": "2021-06-12T17:17:06Z",
      "updated_at": "2021-06-12T17:17:12Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@Cloudmersive  @saschanaz is right.  Here's why.  There are two different implementations of PowerShell.  The original \"Windows PowerShell\" that has shipped with Windows since Windows 7.  This is powershell.exe and does not run on anything but Windows.  It is built on the desktop version of the .NET Framework (Windows only).\r\n\r\nThen there is the cross-platform version of PowerShell built on .NET Core that started life as \"PowerShell Core\" but has recently been shortened to just \"PowerShell\".  It does not come with Windows atm.  But it runs on Linux, macOS and Windows. You have to install it separately.  This is pwsh.exe.   On Windows,  you will have both powershell.exe and pwsh.exe (if you install it) and they do behave a bit differently due to differences between .NET Framework and .NET Core.  There are folks still using powershell.exe where the move to pwsh.exe would break their scripts.  So we need both names.",
      "created_at": "2021-06-12T18:56:42Z",
      "updated_at": "2021-06-12T18:56:42Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Can someone teach the bot to lock _closed_ posts after a few months so we don't all get pinged when someone zombies them?",
      "created_at": "2021-06-13T04:09:38Z",
      "updated_at": "2021-06-13T04:09:38Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> Why was this never fixed? It is still \"pwsh\" in Mac/Linux and \"powershell\" in Windows - so broken\r\n\r\nWell - it was never broken. PWSH.EXE and POWERSHELL.EXE are two quite different products and are not totally compatible. There are things you can do on one but not the other.\r\n\r\nTL;DR: nothing is broken. \r\n\r\nAnd I agree with @jaykul!",
      "created_at": "2021-06-13T10:23:28Z",
      "updated_at": "2021-06-13T10:23:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Can someone teach the bot to lock closed posts after a few months so we don't all get pinged when someone zombies them?\r\n\r\nI'll lock this issue. Locking *all* old issues is something that's been discussed before, but we have a few active old issues and personally it seems a bit heavy handed to me. Feel free to raise it in a separate discussion, like the community call or similar.",
      "created_at": "2021-06-16T20:18:40Z",
      "updated_at": "2021-06-16T20:18:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have GitHub Discussions now.",
      "created_at": "2021-06-17T02:50:39Z",
      "updated_at": "2021-06-17T02:50:39Z"
    }
  ],
  "created_at": "2017-07-11T01:28:02Z",
  "number": 4214,
  "state": "closed",
  "title": "Create pwsh as a shorter name for calling powershell.exe",
  "updated_at": "2021-06-17T02:50:39Z"
}