{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2091",
  "author": "mirichmo",
  "body": "This issue arose out of the initial work to resolve #1705. The issue is that as currently written, PowerShell requires additional API sets for Windows 7 beyond what CoreCLR ships via the runtime.<platform+arch>.Microsoft.NetCore.WIndows.ApiSets package.\n\nSpecifically, these API sets cannot be resolved\n\n| PInvokeDllName | API Set | Classic DLL |\n| --- | --- | --- |\n| `CreateJobObjectDllName` | api-ms-win-core-job-l2-1-0.dll | kernel32.dll |\n| `GetDCDllName` | ext-ms-win-ntuser-dc-access-ext-l1-1-0.dll | user32.dll |\n| `ReleaseDCDllName` | ext-ms-win-ntuser-dc-access-ext-l1-1-0.dll | user32.dll |\n| `TranslateCharsetInfoDllName` | ext-ms-win-gdi-font-l1-1-1.dll | gdi32.dll |\n| `GetTextMetricsDllName` | ext-ms-win-gdi-font-l1-1-1.dll | gdi32.dll |\n| `GetCharWidth32DllName` | ext-ms-win-gdi-font-l1-1-1.dll | gdi32.dll |\n\nWe need a solution that works for all supported platforms. A few ideas:\n1. Revert back to using the classic DLL names for all DLLImports (might not work for inbox PowerShell Core on Nano Server)\n2. Ship an additional NuGet package that contains the API sets PowerShell requires beyond those shipped by CoreCLR\n3. Modify the missing entries to use the classic DLL while the rest continue to use their API sets\n4. Leave the unresolved packages broken on Windows 7 and documented those deficiencies as unsupported features.\n",
  "closed_at": "2018-07-22T00:40:27Z",
  "comments": [],
  "created_at": "2016-08-26T23:45:54Z",
  "labels": [
    "Resolution-Won't Fix",
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 2091,
  "state": "closed",
  "title": "Determine the Correct Way to Handle PInvoke DLLImports Across all Platforms",
  "updated_at": "2018-07-22T00:40:27Z"
}