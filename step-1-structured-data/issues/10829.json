{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10829",
  "author": "iRon7",
  "body": "I am not sure whether this qualifies as a bug or designed PowerShell behavior related to unrolling objects (which is to my opinion useless for serialized objects)\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$Expression = [ScriptBlock]::Create('[byte[]](1, 2, 3)')\r\n(&$Expression).GetType()\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Byte[]                                   System.Array\r\n```\r\n\r\nI would expect the same behavior as:\r\n\r\n- directly invoking the expression  `([byte[]](1, 2, 3)).GetType()`,\r\n- retrieving the type of an embedded valued array, like: `$Expression = [ScriptBlock]::Create('@{x = [byte[]](1, 2, 3)}'); (&$Expression)['x'].GetType()`\r\n- using the [`ConvertFrom-Expression`](https://www.powershellgallery.com/packages/ConvertFrom-Expression) cmdlet : `(ConvertFrom-Expression $Expression -NoEnumerate).GetType()`.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n```\r\n<sub>(The **byte[]** array is converted to an **object[]** array)</sub>\r\n\r\nThis also happens with methods that return a valued array, e.g.: `$Expression = [ScriptBlock]::Create('\"abc\".ToCharArray()')` and the same happens with other \"evaluate\" cmdlets along with `Invoke-Expression` and `Invoke-Command`  \r\nThis behavior is probably related to: stackoverflow question: [How can I prevent a (serialized) expression to unroll](https://stackoverflow.com/q/56816938/1701026)\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-10-18T13:27:52Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think your assumption is incorrect.\r\n\r\nYour test case is:\r\n```powershell\r\n[scriptblock]::Create('[byte[]](1, 2, 3)')\r\n```\r\n\r\nWhich is identical to just doing:\r\n```powershell\r\n{ [byte[]](1, 2, 3) }\r\n```\r\n\r\nInvoking either of these will cause the collection to be unrolled as it passes through PS's output systems. If you want to prevent this, you would instead need something analogous to:\r\n\r\n```powershell\r\n{ Write-Output -NoEnumerate ([byte[]](1, 2, 3)) }\r\n```\r\n\r\nNote also that this isn't serialized data, it's just strings being parsed into PowerShell script via the standard parser, no different to any script PS processes normally.\r\n\r\nIf you want to serialize data, you can use `Export-CliXml`\r\n\r\n```powershell\r\nExport-CliXml -Path bytes.xml -InputObject ([byte[]](1, 2, 3))\r\n```",
      "created_at": "2019-10-18T13:04:00Z",
      "updated_at": "2019-10-18T13:04:00Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I wonder why the `Write-Output` got the `-NoEnumerate` parameter.  \r\nWouldn't a `-NoEnumerate` parameter for the `Invoke-Command` make sense for the same reason?",
      "created_at": "2019-10-18T13:17:06Z",
      "updated_at": "2019-10-18T13:17:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's not as meaningful, since `Invoke-Command` itself can contain an entire scriptblock with any number of commands; by the time the cmdlet receives any of the output, it's already enumerated. The best it could do is emit the entire `object[]` array as a single item. \ud83d\ude42 ",
      "created_at": "2019-10-18T13:19:11Z",
      "updated_at": "2019-10-18T13:19:11Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Thanks again for the answer and explanation.",
      "created_at": "2019-10-18T13:27:52Z",
      "updated_at": "2019-10-18T13:27:52Z"
    }
  ],
  "created_at": "2019-10-18T11:18:17Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 10829,
  "state": "closed",
  "title": "Serialized PowerShell objects appear to be enumerated",
  "updated_at": "2019-10-18T13:27:52Z"
}