{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15029",
  "author": "c-0815",
  "body": "\r\n**Environment:**\r\n\r\n CentOS 8 Powershell 7.1.3\r\npowershell installed by Microsoft repo\r\n\r\n**Scenario**\r\n\r\n  * ldd for libmi.so shows:\r\n\r\nldd /opt/microsoft/powershell/7/libmi.so\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libmi.so'\r\nlinux-vdso.so.1 (0x00007ffc3ea41000)\r\nlibpthread.so.0 => /lib64/libpthread.so.0 (0x00007ff105ed7000)\r\nlibdl.so.2 => /lib64/libdl.so.2 (0x00007ff105cd3000)\r\nlibpam.so.0 => /lib64/libpam.so.0 (0x00007ff105ac3000)\r\nlibssl.so.1.0.0 => /opt/microsoft/powershell/7/libssl.so.1.0.0 (0x00007ff10582f000)\r\n\r\n**libcrypto.so.1.0.0 => not found**\r\n\r\nlibc.so.6 => /lib64/libc.so.6 (0x00007ff10546c000)\r\n/lib64/ld-linux-x86-64.so.2 (0x00007ff1060f7000)\r\nlibaudit.so.1 => /lib64/libaudit.so.1 (0x00007ff105242000)\r\nlibcrypto.so.1.1 => /lib64/libcrypto.so.1.1 (0x00007ff104d5c000)\r\nlibz.so.1 => /lib64/libz.so.1 (0x00007ff104b45000)\r\nlibcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007ff10493f000)\r\n\r\n  * following the missing reference\r\nls -l libcrypto.so.1.0.0\r\nlrwxrwxrwx  1 root root       25 Mar 10 02:14 libcrypto.so.1.0.0 -> /lib64/libcrypto.so.1.1.1\r\n\r\nbut /lib64/libcrypto.so.1.1.1 is not found on a CentOS 8 system\r\n\r\n**Resolution**\r\ncd /lib64\r\nln -s libcrypto.so.1.1 libcrypto.so.1.1.1\r\n\r\n**Solution**\r\nThe link must reference to /lib64/libcrypto.so.1.1\r\n\r\n\r\nPlease fix this in the rpm Package.\r\n\r\nregards\r\n\r\nRalph\r\n",
  "closed_at": "2021-09-23T22:41:13Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You cannot just change the link for OpenSSL 1.0.x to point to the 1.1.x libraries. While it will get libmi to load you will be unable to use any TLS features due to the API and ABI difference on OpenSSL 1.0.x and the 1.1.x versions. This is the reason why the symlink is pointing to 1.0.x still.",
      "created_at": "2021-03-15T19:04:30Z",
      "updated_at": "2021-03-15T19:04:30Z"
    },
    {
      "author": "c-0815",
      "author_association": "NONE",
      "body": "Hi Jordan,\r\n\r\nplease look at the output of the ls command. In the current 7.1.3 package libcrypto.1.0.0 is **already linked to** libcrypto.so.1.1.1. But version 1.1.1 is not found in /lib64 directory. \r\nIn /lib64 you find:\r\n  * libcrypto.so.1.1  - that links to libcrypto.so.1.1.1g\r\n * libcrypto.so.1.1.1g -  the original library\r\n\r\nuncorrected I get following error:\r\n```\r\n#>$session = New-PSSession -ComputerName server-05 -Credential $cred -Authentication Negotiate\r\n\r\nNew-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\n```\r\nAfter I corrected the link the WSMAN communication works fine.\r\n\r\nbest regards\r\n\r\nRalph\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-03-16T07:39:55Z",
      "updated_at": "2021-03-16T07:41:48Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "So the symlink is pointing to an invalid location and adjusting it to the OpenSSL 1.1.x location gets the library to load. But the issue here is that libmi is compiled against OpenSSL 1.0.x not 1.1.x. These versions are not API and ABI compatible so even if you point the link to the a valid location on your host you will run across issues when it first tries to use something in that library. In your example it\u2019s running over HTTP which doesn\u2019t use OpenSSL, as soon as you target a https endpoint it will fail, maybe even segfault the entire process.\r\n\r\nIn reality the symlinks shouldn\u2019t be pointing to OpenSSL 1.1.x in this package but rather where the OpenSSL 1.0.x ones. This is complicated by the fact that this OpenSSL version may not be available on more modern distros so you have to compile it yourself.",
      "created_at": "2021-03-16T08:54:48Z",
      "updated_at": "2021-03-16T08:54:48Z"
    },
    {
      "author": "c-0815",
      "author_association": "NONE",
      "body": "I understand. But why libmi isn't compiled against OpenSSL 1.1.x in the CentOS8 rpm package?",
      "created_at": "2021-03-16T09:14:06Z",
      "updated_at": "2021-03-16T09:14:06Z"
    },
    {
      "author": "c-0815",
      "author_association": "NONE",
      "body": "I've seen PSWSMan 2.1.0 Package in the Powershell Gallery. Is the OpenSSL Bug fixed, if I install this nuget Package, an exchange the libs. I checked the libmi.so and it is correctly linked against OpenSSL 1.1",
      "created_at": "2021-03-16T09:53:38Z",
      "updated_at": "2021-03-16T09:53:38Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> But why libmi isn't compiled against OpenSSL 1.1.x in the CentOS8 rpm package?\r\n\r\nAnother team in Microsoft maintain the package and they no longer support PowerShell's use case so PowerShell is stuck with what was given to them at the time. Technically they could build it themselves and include it in the distribution but so far they haven\u2019t gone that route.\r\n\r\n> I've seen PSWSMan 2.1.0 Package in the Powershell Gallery\r\n\r\nThats a fork of the libmi package that has been recompiled against OpenSSL 1.1.x on more modern systems. I\u2019m actually the maintainer of that but there is no connection between myself and Microsoft so it isn\u2019t supported here. I do recommend you use it because it fixes more problems than just OpenSSL, you can find more about it here https://github.com/jborean93/omi.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/8462645?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jborean93/omi\">jborean93/omi</a></strong></div><div>Open Management Infrastructure. Contribute to jborean93/omi development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-03-16T10:01:36Z",
      "updated_at": "2021-03-16T10:01:38Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for providing all that context, @jborean93, and for your work on maintaining that fork of OMI. It's still not something we're feel comfortable taking into our package (largely due to lack of time on our side to review all of your changes), but I'm really glad it's out there for the folks that need it.\r\n\r\nGiven the symlink to an appropriately installed OpenSSL 1.0.x package, I'm going to close this one. ",
      "created_at": "2021-03-16T23:42:40Z",
      "updated_at": "2021-03-16T23:42:40Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> It's still not something we're feel comfortable taking into our package \r\n\r\nTotally understandable, I had trouble myself trying to understand the existing codebase due to how complex it all is :) Looking forward to the pluggable transports slated for 7.2 which will hopefully make this even easier to distribute and install.",
      "created_at": "2021-03-16T23:50:25Z",
      "updated_at": "2021-03-16T23:50:25Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello i think there is still an issue with the package here. The symlinks are pointing to the 1.1.x locations and even one of them does not exist. In reality they should either:\r\n\r\n* Point to the expected 1.0.x locations\r\n* Point to the correct 1.1.x locations\r\n\r\nThe first is what strictly should happen but it means OpenSSL 1.0.x must be installed for libmi to load at all. The latter will work for the http situation but will fail if a https endpoint is used, I.e. Exchange Online.",
      "created_at": "2021-03-16T23:56:10Z",
      "updated_at": "2021-03-16T23:56:10Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarification. I was reading it as \"we're linking to 1.0 and I have 1.1, and so 1.0 doesn't exist\", but it looks like we're in a strange mixed state. \r\n\r\nI think we should do the first of the two options you're presenting as HTTP endpoints probably shouldn't be used (and I think in the HTTPS we're very ungraceful in our error). ",
      "created_at": "2021-03-17T00:33:42Z",
      "updated_at": "2021-03-17T00:33:42Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Hmm I might be wrong here, I just installed PowerShell from the Microsoft repo and it has the symlinks pointing to 1.0.x\r\n\r\n```bash\r\n[root@5ebb04b287e1 /]# ls -al /opt/microsoft/powershell/7/lib*\r\n-rw-r--r--. 1 root root 3671090 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.IO.Compression.Native.a\r\n-rw-r--r--. 1 root root  907640 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.IO.Compression.Native.so\r\n-rw-r--r--. 1 root root   18568 Oct 19 18:19 /opt/microsoft/powershell/7/libSystem.IO.Ports.Native.so\r\n-rw-r--r--. 1 root root  425486 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Native.a\r\n-rw-r--r--. 1 root root   75960 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Native.so\r\n-rw-r--r--. 1 root root   36752 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Net.Security.Native.a\r\n-rw-r--r--. 1 root root   14536 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Net.Security.Native.so\r\n-rw-r--r--. 1 root root  997210 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Security.Cryptography.Native.OpenSsl.a\r\n-rw-r--r--. 1 root root  129224 Feb 16 21:55 /opt/microsoft/powershell/7/libSystem.Security.Cryptography.Native.OpenSsl.so\r\n-rw-r--r--. 1 root root 3175376 Feb 16 21:54 /opt/microsoft/powershell/7/libclrjit.so\r\n-rw-r--r--. 1 root root 7109080 Feb 16 21:53 /opt/microsoft/powershell/7/libcoreclr.so\r\n-rw-r--r--. 1 root root  628520 Feb 16 21:46 /opt/microsoft/powershell/7/libcoreclrtraceptprovider.so\r\nlrwxrwxrwx. 1 root root      22 Mar 10 01:13 /opt/microsoft/powershell/7/libcrypto.so.1.0.0 -> /lib64/libcrypto.so.10\r\n-rw-r--r--. 1 root root  635568 Feb 16 21:51 /opt/microsoft/powershell/7/libdbgshim.so\r\n-rw-r--r--. 1 root root  403872 Feb 16 22:19 /opt/microsoft/powershell/7/libhostfxr.so\r\n-rw-r--r--. 1 root root  371112 Feb 16 22:19 /opt/microsoft/powershell/7/libhostpolicy.so\r\n-rw-r--r--. 1 root root  730728 Jul 23  2018 /opt/microsoft/powershell/7/libmi.so\r\n-rw-r--r--. 1 root root 2576624 Feb 16 21:53 /opt/microsoft/powershell/7/libmscordaccore.so\r\n-rw-r--r--. 1 root root 1840448 Feb 16 21:54 /opt/microsoft/powershell/7/libmscordbi.so\r\n-rw-r--r--. 1 root root   30312 Nov  2 23:15 /opt/microsoft/powershell/7/libpsl-native.so\r\n-rw-r--r--. 1 root root  843744 Jul 23  2018 /opt/microsoft/powershell/7/libpsrpclient.so\r\nlrwxrwxrwx. 1 root root      19 Mar 10 01:13 /opt/microsoft/powershell/7/libssl.so.1.0.0 -> /lib64/libssl.so.10\r\n```\r\n\r\nI'm not sure why OP's setup is pointing to the 1.1.x paths but based on this evidence it looks like the PowerShell package is correct. They are also pointing to the proper locations that are installed with the `compat-openssl10` package.\r\n\r\nEdit: This is incorrect, I installed the wrong rpm.",
      "created_at": "2021-03-17T00:46:39Z",
      "updated_at": "2021-03-17T19:09:43Z"
    },
    {
      "author": "c-0815",
      "author_association": "NONE",
      "body": "Is this CentOS8?\r\nbecause in sourcecode of packaging.pm1 in case of CentOS 8 it is linked to 1.1\r\n\r\n    if ($Environment.IsRedHatFamily) {\r\n        switch -regex ($Distribution)\r\n        {\r\n            # add two symbolic links to system shared libraries that libmi.so is dependent on to handle\r\n            # platform specific changes. This is the only set of platforms needed for this currently\r\n            # as Ubuntu has these specific library files in the platform and macOS builds for itself\r\n            # against the correct versions.\r\n            'centos\\.8' {\r\n                New-Item -Force -ItemType SymbolicLink -Target \"/lib64/libssl.so.1.1\" -Path \"$Staging/libssl.so.1.0.0\" > $null\r\n                New-Item -Force -ItemType SymbolicLink -Target \"/lib64/libcrypto.so.1.1.1\" -Path \"$Staging/libcrypto.so.1.0.0\" > $null\r\n            }\r\n            default {\r\n                New-Item -Force -ItemType SymbolicLink -Target \"/lib64/libssl.so.10\" -Path \"$Staging/libssl.so.1.0.0\" > $null\r\n                New-Item -Force -ItemType SymbolicLink -Target \"/lib64/libcrypto.so.10\" -Path \"$Staging/libcrypto.so.1.0.0\" > $null\r\n            }\r\n",
      "created_at": "2021-03-17T07:40:50Z",
      "updated_at": "2021-03-17T07:44:46Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Oh I'm really sorry I must have added the repo for rhel/7 so it was installing the EL7 rpm hence why the links were still pointing to 1.0. Please ignore that post and my comments in https://github.com/PowerShell/PowerShell/issues/15029#issuecomment-800690344 still stand.\r\n\r\nJust as an FYI when the libssl and libcrypto links are pointing to OpenSSL 1.1.x here is the error you get when trying to connect to a HTTPS endpoint\r\n\r\n> pwsh: symbol lookup error: /opt/microsoft/powershell/7/libmi.so: undefined symbol: SSL_library_init\r\n\r\nThis faults the entire process and kicks you out of PowerShell which is definitely not ideal. Adds more weight to the argument that it should still be pointed to the OpenSSL 1.0.x libs and we continue to document that `compat-openssl10` is required here.",
      "created_at": "2021-03-17T19:09:15Z",
      "updated_at": "2021-03-17T19:20:47Z"
    },
    {
      "author": "c-0815",
      "author_association": "NONE",
      "body": "But than the powershell devs should change die linking behavior I showed at my last post for CentOS8",
      "created_at": "2021-03-18T09:42:27Z",
      "updated_at": "2021-03-18T09:42:27Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Yep so that\u2019s the 2nd option I mentioned. I don\u2019t think it\u2019s the right move though as it brings the whole PowerShell process down as soon as you target HTTPS endpoints. The symlinks should still be pointing to the OpenSSL 1.0.x libraries like it does on CentOS 7 and the docs updated to indicate `compat-openssl10` is required for WSMan.",
      "created_at": "2021-03-18T10:28:30Z",
      "updated_at": "2021-03-18T10:28:30Z"
    },
    {
      "author": "mmcnutt",
      "author_association": "NONE",
      "body": "https://bugzilla.redhat.com/show_bug.cgi?id=1879707\r\n\r\nFedora is not packaging compat-openssl10 in Fedora 34. At the moment installing to Fedora 34 leaves WSMan broken\n\n<blockquote><img src=\"extensions/RedHat/web/css/favicons/production.ico?v=0\" width=\"48\" align=\"right\"><div><strong><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1879707\">1879707 \u2013 FTBFS: Remove compat-openssl10 requirement</a></strong></div></blockquote>",
      "created_at": "2021-05-21T03:38:20Z",
      "updated_at": "2021-05-21T03:38:22Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "> https://bugzilla.redhat.com/show_bug.cgi?id=1879707\r\n> \r\n> Fedora is not packaging compat-openssl10 in Fedora 34. At the moment installing to Fedora 34 leaves WSMan broken\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"extensions/RedHat/web/css/favicons/production.ico?v=0\">**[1879707 \u2013 FTBFS: Remove compat-openssl10 requirement](https://bugzilla.redhat.com/show_bug.cgi?id=1879707)**\r\n\r\nI'm also affected by this issue - pwsh as snap on Fedora 34:\r\n\r\n```plaintext\r\n\u279c  pwsh                       \r\nPowerShell 7.1.3\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nNo usable version of libssl was found\r\n[1]    14902 IOT instruction (core dumped)  pwsh\r\n```\r\n\r\n## snap info\r\n\r\n```plaintext\r\n\u279c  snap list powershell \r\nName        Version  Rev  Tracking       Publisher              Notes\r\npowershell  7.1.3    160  latest/stable  microsoft-powershell\u2713  classic\r\n\u279c  snap info powershell \r\nname:      powershell\r\nsummary:   PowerShell for every system!\r\npublisher: Microsoft PowerShell\u2713\r\nstore-url: https://snapcraft.io/powershell\r\ncontact:   https://github.com/powershell/powershell\r\nlicense:   unset\r\ndescription: |\r\n  PowerShell is an automation and configuration management platform.\r\n  It consists of a cross-platform (Windows, Linux, and macOS)\r\n  command-line shell and associated scripting language.\r\n  \r\n  See https://docs.microsoft.com/powershell/scripting/powershell-support-lifecycle for support\r\n  details.\r\ncommands:\r\n  - powershell\r\nsnap-id:      JSNnoJl3EqkMuWoy5Dgq8PMqZ0uNcpie\r\ntracking:     latest/stable\r\nrefresh-date: 2021-04-04\r\nchannels:\r\n  latest/stable:    7.1.3 2021-03-12 (160) 68MB classic\r\n  latest/candidate: 7.1.3 2021-03-12 (160) 68MB classic\r\n  latest/beta:      7.1.3 2021-03-12 (160) 68MB classic\r\n  latest/edge:      7.1.3 2021-03-12 (160) 68MB classic\r\n  lts/stable:       7.0.6 2021-03-12 (161) 60MB classic\r\n  lts/candidate:    7.0.6 2021-03-12 (161) 60MB classic\r\n  lts/beta:         7.0.6 2021-03-12 (161) 60MB classic\r\n  lts/edge:         7.0.6 2021-03-12 (161) 60MB classic\r\ninstalled:          7.1.3            (160) 68MB classic\r\n```\n\n<blockquote><img src=\"extensions/RedHat/web/css/favicons/production.ico?v=0\" width=\"48\" align=\"right\"><div><strong><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1879707\">1879707 \u2013 FTBFS: Remove compat-openssl10 requirement</a></strong></div></blockquote>",
      "created_at": "2021-06-06T22:57:56Z",
      "updated_at": "2021-06-06T22:57:58Z"
    }
  ],
  "created_at": "2021-03-15T14:35:56Z",
  "labels": [
    "Issue-Bug",
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 15029,
  "state": "closed",
  "title": "wrong symlink in CentOS8 Powershell 7.1.3 package",
  "updated_at": "2021-09-24T03:02:36Z"
}