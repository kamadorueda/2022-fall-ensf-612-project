{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9140",
  "author": "chriskuech",
  "body": "# Background\r\n\r\nError handling in PowerShell is extremely messy, by far the primary complaint I have heard about the language, and has actually been cited as a reason to not use PowerShell.  The two major complaints I've heard about error handling are:\r\n* [The two parallel universes of errors](https://github.com/PowerShell/PowerShell/issues/7774)\r\n* Poor handling of errors from binaries (described in this feature request)\r\n\r\n# Current behavior\r\n\r\nWhen running a binary command in PowerShell (ex: `git`) and the binary errors, the command does not always output an error (neither terminating nor non-terminating).  PowerShell clearly detects that the command fails and correctly populates `$?`, but does not integrate with normal error handling mechanisms.  The result is this cumbersome syntax:\r\n\r\n```PowerShell\r\ngit checkout -b master\r\nif (-not $?) {\r\n    throw \"Command failed\"\r\n}\r\n```\r\n\r\n# Summary of the new feature/enhancement\r\n\r\nIf a command sets `$?` to `$false`, then the command should write an error to the error stream.",
  "closed_at": null,
  "comments": [
    {
      "author": "zachChilders",
      "author_association": "NONE",
      "body": "I had to do this hack last week, because DevOps agents seem to have inconsistent behavior interacting with Powershell.\r\n```\r\n$process = Start-Process \"cmake\" -ArgumentList \"-G `\"Visual Studio 15 2017`\" -T `\"LLVM`\" -A $Architecture -S `\"../..`\"\" -Wait -NoNewWindow -RedirectStandardError \"cmake.log\"\r\n\r\nif ($process.ExitCode -ne 0) {\r\n    # Do it again to get past openSSL errors.\r\n    $process = Start-Process \"cmake\" -ArgumentList \"-G `\"Visual Studio 15 2017`\" -T `\"LLVM`\" -A $Architecture -S `\"../..`\"\" -Wait -NoNewWindow\r\n    Exit 0\r\n}\r\n```\r\nBinary failures should throw exceptions just like cmdlets so that they can be handled uniformly.  \r\n",
      "created_at": "2019-03-14T20:23:21Z",
      "updated_at": "2019-03-14T20:23:21Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> PowerShell clearly detects that the command fails and correctly populates $?\r\n\r\nIt makes a guess based on the return value, but the return value can only be a number 0-255; it is a convention that 0 means \"success\" and \"1-255\" mean \"failure\", but it's not universal or mandatory.\r\n\r\n[Robocopy, for one example](https://ss64.com/nt/robocopy-exit.html), reports many different codes for different kinds of \"success\"; you can `robocopy dir1 dir2 /mir` and it copies two new files with no problems, and returns `1` and that means `$?` is False.\r\n\r\nGoing the other way, PowerShell takes a command writing to `stderr` to be a problem, and throws a NativeCommandException - but programs like to write license, or information messages to `stderr` - psexec, and curl do it - and then people get a NativeCommandException, when nothing was wrong. [This is also dependent on the PowerShell host, it's inconsistent](https://stackoverflow.com/a/10666208).\r\n\r\nI'm not saying it shouldn't happen, just that it will still be a bit of a guess, and sometimes wrong. (and a breaking change for every script which runs a native command).\r\n\r\n",
      "created_at": "2019-03-14T23:06:11Z",
      "updated_at": "2019-03-14T23:07:32Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "The convention is returning 0 for success, but this is not a standard. The No.1 principle is to not guess. The variable `$?` is giving you whether the last command returned 0, not whether the last command has an error. Aside from `robocopy`, `fc` uses the return value to indicate whether the files are different, in which case automatically writing an error record is an error. The user might want to and could inspect `$LASTEXITCODE` for error handling.",
      "created_at": "2019-03-15T02:42:12Z",
      "updated_at": "2019-03-15T02:42:12Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "Returning 0 is a [POSIX standard](https://en.wikipedia.org/wiki/Errno.h).  I think PowerShell should be aligned with the rules, not the exceptions to the rules; aligning to the rules means the command behaves generally according to intuition, whereas aligning to the exceptions means adding an `if` statement to every shell command, which I think is very cumbersome, especially considering one of PowerShell's differentiating features is error handling.\r\n\r\nCommon utilities that need to play better with PowerShell already have aliases set up (including `fc`).  PowerShell team could very feasibly provide a similar solution for `robocopy`, especially considering `robocopy` is not cross-platform.",
      "created_at": "2019-03-15T04:08:28Z",
      "updated_at": "2019-03-15T04:11:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@HumanEquivalentUnit, regarding the inconsistent handling of stderr output, see:\r\n\r\n* #3996\r\n* #4002\r\n\r\n@zachChilders, as an aside: there is no need to use `Start-Process` to invoke _console/terminal programs_ such as `cmake` in a _synchronous_ manner - that's what direct invocation is for. See [this Stack Overflow answer](https://stackoverflow.com/a/51334633/45375) for more information.\r\n\r\n",
      "created_at": "2019-03-15T04:15:16Z",
      "updated_at": "2019-03-15T04:29:31Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@chriskuech `fc` (as well as `robocopy`) is just an example, and it has no relation whatsoever with `Format-Custom`. It is also not possible to change the behavior of `fc.exe` unless you want to break batch scripts on Windows.\r\n\r\nThe Wikipedia article you cited is about `errno`, not exit status, which is another concept. I found [here](http://pubs.opengroup.org/onlinepubs/9699919799/) and [here](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf) (page 352).\r\n\r\n> The value of status may be 0, `EXIT_SUCCESS`, `EXIT_FAILURE`, [CX] or any other value, though only the least significant 8 bits (that is, `status & 0377`) shall be available from `wait()` and `waitpid()`; the full value shall be available from `waitid()` and in the `siginfo_t` passed to a signal handler for `SIGCHLD`. \r\n\r\nand\r\n\r\n> Finally, control is returned to the host environment. If the value of status is zero or `EXIT_SUCCESS`, an implementation-de\ufb01ned form of the status successful termination is returned. If the value of status is `EXIT_FAILURE`, an implementation-de\ufb01ned form of the status unsuccessful termination is returned. Otherwise the status returned is implementation-de\ufb01ned.\r\n\r\n**In particular, POSIX standard doesn't say whether exit status 123 means success or failure.** Also, the implementation-defined sense of failure of a native command might not be worth an `ErrorRecord` for the caller in PowerShell.\r\n\r\nAside from that not being a POSIX standard, the methodology of sticking to POSIX standard is good as long as you're only playing with POSIX. However, not all platforms use POSIX. It is much more important to keep consistency among platforms PowerShell would like to support. Moreover, automatically writing error records after native command invocation could create a whole lot of problems for existing scripts who didn't expect them and handled the exit code manually.\r\n\r\nEven if we're speculating the exist status and writing an error record. The design such feature is difficult and may lead to more troubles. For example, are you throwing a terminating error or writing a non-terminating error? What if you want to inspect and wrap the error in a more object-oriented way before it is finally written to the error stream? Do you have to `$ErrorActionPreference='Stop'` and `try-catch` for every native command invocation?\r\n\r\nIn general, I suggest wrapping native commands in a separate PowerShell cmdlet/function, which handles all the conversion between the native, untyped, binary, process-level isolated world and PowerShell.\r\n\r\n@mklement0 It is a very bad idea to invoke native commands directly given PowerShell's way of handling native pipe. Using `Start-Process` avoids object-oriented pipe pollution while allowing the native command to print output to the screen.",
      "created_at": "2019-03-15T04:43:20Z",
      "updated_at": "2019-03-15T04:43:20Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "I don't think there is any dispute that, even if not official, an exit status of `0` conventionally and in most cases means success and non-`0` means error.  I understand that there are some corner cases, but ultimately this behavior is counter-intuitive in the vast majority of cases.  If you look at the issue in the \"Background\" section, I mention another counter-intuitive (and coincidentally improperly documented) error handling behavior (non-terminating errors) that contextualize the justification for this change. \r\n\r\n> are you throwing a terminating error or writing a non-terminating error?\r\n\r\nYou should [always write a non-terminating error](https://github.com/PowerShell/PowerShell/issues/7774)\r\n\r\n> What if you want to inspect and wrap the error in a more object-oriented way before it is finally written to the error stream\r\n\r\nUse normal PowerShell (`$Error` or `$ErrorActionPreference = \"Stop\"` with `try-catch`, or if implemented `-ErrorVariable`).  Whatever the programmer chooses, but the programmer should be able to assume that normal PowerShell will apply.\r\n\r\n> Do you have to `$ErrorActionPreference='Stop'` and `try-catch` for every native command invocation?\r\n\r\nIf the programmer chooses so.  This would mean that if the programmer wants to see _why_ the command failed, they have to add boilerplate.  That would mean less people have to add boilerplate than in the current scenario where the programmer has to add boilerplate just to see _if_ the command failed.\r\n\r\nIf people in this [discussion](https://github.com/PowerShell/PowerShell/issues/6745) agree to break backcompat, I definitely think this issue should be addressed.",
      "created_at": "2019-03-15T05:34:44Z",
      "updated_at": "2019-03-15T05:34:44Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "> I don't think there is any dispute that, even if not official, an exit status of 0 conventionally and in most cases means success and non-0 means error. I understand that there are some corner cases, but ultimately this behavior is counter-intuitive in the vast majority of cases.\r\n\r\nI think you need some research on how many current scripts break (or show otherwise undesired error messages) if we automatically write an error when a native command returns non-zero value.\r\n\r\nI agree that 0 usually means success. But it is quite debatable whether non-0 means error. **For example, GNU `diff` returns 1 for difference found and greater than 1 for errors.**\r\n\r\nW.r.t. #7774, I will make a separate comment in that thread.\r\n\r\nCreating the error record and then catching it is bad for performance, and well-written code should always handle the error and convert them into a readable representation (instead of exit status). The demand to handle them should be prioritized.\r\n\r\nIn addition, it is always the case people want to know why a command fails. If the command has written to `stderr`, one already can read it; otherwise, you want to check `$LASTEXITCODE`.",
      "created_at": "2019-03-15T06:01:00Z",
      "updated_at": "2019-03-15T06:01:00Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "Made the comment to #7774. And after a second thought, it makes no sense to throw a terminating error here because that would complicate the commands. However, I still consider writing an error for every native command returning non-0 too self-asserting and it complicates the life for actual exit status inspectors/handlers.",
      "created_at": "2019-03-15T07:03:39Z",
      "updated_at": "2019-03-15T07:03:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Turns out that this request is a duplicate of #3415, which led to lively debated RFC draft https://github.com/PowerShell/PowerShell-RFC/pull/88.\r\n\r\n@GeeLaw\r\n\r\n> It is a very bad idea to invoke native commands directly given PowerShell's way of handling native pipe. Using Start-Process avoids object-oriented pipe pollution while allowing the native command to print output to the screen.\r\n\r\nThis is a tangent, for sure, but I find your advice highly problematic, so it is worth addressing:\r\n\r\nA core function of any shell - including PowerShell - is the synchronous execution of console programs (command-line utilities), with the invoked program's standard streams connected to the calling shell's.\r\n\r\nWith PowerShell now being multi-platform, this is ever more important, because on Unix platforms there is a wealth of capable - and fast - command-line utilities available.\r\n\r\nWhile PowerShell cannot \"speak objects\" with native programs, it does have a shared language, and that is _text_.\r\n\r\nThe vast majority of command-line utilities \"speak text\", and in the vast majority of cases you want synchronous execution and either want to _capture_ or _suppress_ text output by such utilities, which calls for _direct invocation_, not use of `Start-Process`.\r\n\r\nE.g., get the current branch of the Git repository in the current location:\r\n```powerShell\r\nPS> $currentBranch = git symbolic-ref --short HEAD\r\n```\r\n\r\nEven in the rare cases where a utility outputs _raw byte streams_ - which PowerShell's streams cannot handle - you wouldn't use `Start-Process` - instead, you would synchronously invoke a shell that _can_ handle those byte streams; e.g.:\r\n\r\n```sh\r\n# Generate a file with 100 random bytes.\r\n# The redirection must be handled by `sh`, because PowerShell would interpret the raw\r\n# bytes as text.\r\nPS> sh -c 'dd if=/dev/urandom bs=1 count=100 > t.txt'\r\n```\r\n\r\nI've summarized the considerations when capturing output from external programs in  [this Stack Overflow answer](https://stackoverflow.com/a/35980675/45375). I encourage you to provide feedback there, if you disagree with the above (the answer was written a while ago, pre .NET Core, so raw byte output isn't covered yet).\r\n \r\n\r\n\r\n",
      "created_at": "2019-05-11T12:49:35Z",
      "updated_at": "2019-05-11T12:49:35Z"
    }
  ],
  "created_at": "2019-03-14T20:08:17Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 9140,
  "state": "open",
  "title": "Failed commands should write an error",
  "updated_at": "2019-05-11T12:49:35Z"
}