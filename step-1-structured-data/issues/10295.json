{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10295",
  "author": "msftrncs",
  "body": "In function name and command name parsing, insure that an expandable string\r\ndoes not exist as these are not to be expanded.\r\nIn command name parsing, insure that redirect tokens that will be accepted as\r\ncommands are flagged as such.\r\nIn command argument processing, arguments that originate as 'Operator' tokens have their TokenFlags reverted when switched from an 'operator' TokenKind to a 'Generic' TokenKind.\r\nIn command name processing, treat `DashDash` token as a command name and do not set in motion the 'no more parameters' mode.\r\nIn command argument processing, correct the 'no more parameters' mode so additional 'parameter' tokens are not marked as command names.\r\nIn command name processing, treat `--%` (verbatim argument operator) as a command and do not treat next argument verbatim.\r\nIn function definitions, correct function name token of `--` to be generic, and fix assumptions that generic tokens are string tokens.\r\n\r\nReference #10275, #10347, #10348\r\n\r\nto do\r\n- [ ] Find tests for `--`, add tests to make sure `--` after a command of `--` still works.\r\n- [ ] Find tests for `--%`, add tests to make sure `--%` after a command of `--%` still works.\r\n- [ ] Find tests for redirection operators, add tests to make sure redirection operators as commands do not interfere with redirection operators later in the command statement.\r\n\r\n# PR Summary\r\n\r\nAdjust token polishing to benefit token based highlighting.\r\n\r\n## PR Context\r\n\r\nThe syntax highlighting offered by PSReadLine has always led me through some confusion and I am sure every once in a while it confuses some others as well as to what is really accepted as syntax.  However the issue is not really with PSReadLine but with the tokens that PSReadLine uses for highlighting, rather than using the AST.\r\n\r\nIt would appear that some house keeping tasks are not performed on the token collection after the AST is produced from them.  Some places clean up (set indicator flags) and some places do not.  The most notable item is that tokens that ultimately become `StringExpandableToken` but when processed in to AST are treated as just `StringToken` remain in that form, which then incorrectly informs any downstream applications.\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@JamesWTruher, I think tests could be added to `test\\powershell\\language\\parser\\parsing.tests.ps1`, some `ParseInput` expressions could be constructed to test the tokenizer results of a few sample commands.  I am referencing the ternary operator parsing tests that @daxian-dbw added.  In some ways this is similar to how PSReadLine performs tests of its highlighting, but without simulating the input and output steps.\r\n\r\n- `ParseInput` a sample command,\r\n- verify select tokens are as expected (either by `TokenKind` or `TokenFlag`).\r\n\r\nI'll work on getting this done.",
      "created_at": "2019-09-19T00:06:22Z",
      "updated_at": "2019-09-19T00:06:22Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I've included another commit to demonstrate all the potential highlighting improvements I think should be made within parsing/tokenizing.  However, this also includes two changes to behavior, for `--` and `--%` when used as command names (via invoke operators).  The referenced issues are listed above the PR summary. ",
      "created_at": "2019-09-19T06:28:08Z",
      "updated_at": "2019-09-19T06:28:08Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I've revised the most recent commit to address another `--` highlighting issue, as a function name in a function definition.   For this I used `Token.SetAsCommandArgument`.  This method should probably be more aptly named `SetAsGenericTokenKind`.   However, there was further code that assumed that a `TokenKind.Generic` token would be a `StringToken`, so I had to make some adjustments.",
      "created_at": "2019-09-20T02:21:32Z",
      "updated_at": "2019-09-20T02:21:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:20Z",
      "updated_at": "2020-05-27T02:03:20Z"
    }
  ],
  "created_at": "2019-08-03T03:00:49Z",
  "number": 10295,
  "state": "open",
  "title": "WIP: Demo: Offer Tokenizing Improvements for Highlighting",
  "updated_at": "2021-11-11T22:00:52Z"
}