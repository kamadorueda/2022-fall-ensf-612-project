{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16171",
  "author": "daxian-dbw",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n**On Windows**\r\n\r\n1. Open an elevated pwsh session, and create 2 symbolic links as follows in a folder:\r\n    ```\r\n    New-Item -ItemType SymbolicLink -Path pwsh-symlink -Value $pshome\\pwsh.exe\r\n    New-Item -ItemType SymbolicLink -Path pwsh-double-link -Value .\\pwsh-symlink\r\n    ```\r\n3. Under the same folder, run `.\\pwsh-symlink`, and you will see pwsh console window pops up.\r\n4. Under the same folder, run `.\\pwsh-double-link`, and you will see the \"How do you want to open this file\" window pops up.\r\n\r\n> Note: `Start-Process` doesn't use the final target of a symbolic link either.\r\n\r\n----------------------\r\n\r\nHowever, **it works fine on Unix**\r\n\r\n1. Create 2 symbolic links as follows in a folder:\r\n    ```\r\n    /bin/ln -s /opt/microsoft/powershell/7/pwsh pwsh-link\r\n    /bin/ln -s /home/<user>/tmp/pwsh-link /home/<user>/tmp/pwsh-double\r\n    ```\r\n2. Under the same folder, run `./pwsh-link -c 1+1`, and you will get `2` printed out as the result.\r\n3. Under the same folder, run `./pwsh-double -c 1+1`, and you will get `2` printed out as the result.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nOn Windows:\r\n1. pwsh should know that `pwsh-symlink` is actually a console application, and run into with the current console.\r\n2. pwsh should be able to run `pwsh-double-link`, just like on Unix platforms.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nOn Windows\r\n1. pwsh opens `pwsh-symlink` in a separate console window, which means it doesn't use the link target to check if it's a console application, and thus starts the process with 'UseShellExecute = true'.\r\n2. pwsh cannot run `pwsh-double-link`, because when using `UseShellExecute`, the Shell automatically uses the immediate link target of a symbolic link file, but doesn't do recursive resolution when the immediate link target is again a symbolic link.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nThe latest build from master, and happen on all 7.2.0-preview.9 as well\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n![image](https://user-images.githubusercontent.com/127450/135180968-dc1fc21c-94db-4c11-a4f9-c02a42c9be4f.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/127450/135180988-ff7ddcad-b0b6-46c9-aac7-e8e9a5cda252.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is cmd.exe behavior?\r\n\r\nWe shouldn't regress in `.\\file.txt` scenario if we will fix the issue.",
      "created_at": "2021-09-29T04:29:07Z",
      "updated_at": "2021-09-29T04:30:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This feels related to another issue we discussed in the Engine WG a bit ago where on Unix the PowerShellNative code deliberately seems to _fully_ resolve symlinks and show the final target in output from Get-ChildItem on a folder containing a symlink, whereas on Windows it only shows the next symlink target if there is a chain of symlinks.",
      "created_at": "2021-09-29T12:31:42Z",
      "updated_at": "2021-09-29T12:32:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> his feels related to another issue we discussed in the Engine WG\r\n\r\nI did not found the issue :-(",
      "created_at": "2021-09-29T12:34:58Z",
      "updated_at": "2021-09-29T12:34:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Let me see if I can dig it up... here: https://github.com/PowerShell/PowerShell/issues/13365",
      "created_at": "2021-09-29T14:00:21Z",
      "updated_at": "2021-09-29T14:00:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 Yeah, but that will be resolved after we move to using `LinkTarget` property added in .NET 6.\r\npwsh doesn't resolve a symbolic link when dealing with native command or `Start-Process`, so on Unix plats, I think OS does the work.",
      "created_at": "2021-09-29T14:54:48Z",
      "updated_at": "2021-09-29T14:54:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> We shouldn't regress in .\\file.txt scenario if we will fix the issue.\r\n\r\n@iSazonov You'd better be specific on what scenario that is :) (link to an issue?).",
      "created_at": "2021-09-29T16:00:30Z",
      "updated_at": "2021-09-29T16:00:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > We shouldn't regress in .\\file.txt scenario if we will fix the issue.\r\n> \r\n> @iSazonov You'd better be specific on what scenario that is :) (link to an issue?).\r\n\r\n` .\\file.txt` on Windows opens Notepad. If we will update the code we should add new tests for the scenario with symlinks in path.",
      "created_at": "2021-09-29T18:06:39Z",
      "updated_at": "2021-09-29T18:06:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @vexx32 Yeah, but that will be resolved after we move to using `LinkTarget` property added in .NET 6. pwsh doesn't resolve a symbolic link when dealing with native command or `Start-Process`, so on Unix plats, I think OS does the work.\r\n\r\nI wonder if cmd.exe resolves :-) If so isn't this a problem with the .Net API (Process class)?",
      "created_at": "2021-09-29T18:11:42Z",
      "updated_at": "2021-09-29T18:11:42Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It looks like [CreateProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw) is unable to resolve symbolic links whereas [ShellExecute](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutew) attempts to resolve the first target of a symlink before it creates the process. You can see this in action when using explorer or PowerShell to start a symlink that points directly to an executable (the commandline is the resolved path)\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/135355689-db4891c0-fb61-4f3c-b72f-831640ef8e42.png)\r\n\r\nIn this example I used PowerShell to start `C:\\temp\\link2` which is a symlink that targets `C:\\Windows\\System32\\cmd.exe`. The same applies to starting a symlink in explorer.\r\n\r\nIf I was to manually call `CreateProcess` directly with the link as the file path it fails:\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/135355892-fcc8558c-6afa-4019-927c-0babbc88fe06.png)\r\n\r\nWhereas a manual call to `ShellExecute` works just a simple symlink\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/135356174-d04201a0-544c-406e-92eb-5c5f3f565199.png)\r\n\r\nBut a call to `ShellExecute` with multiple link targets will cause the shell open dialogue box as reported by this issue (and what explorer does)\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/135356289-656fafb2-96f7-4c2c-a147-b3d7483d8914.png)\r\n\r\nSo if this is something that PowerShell wishes to support then it will most likely have to continue resolving the link paths until it reaches the end target before it is invoked so it works for both scenarios.",
      "created_at": "2021-09-29T22:17:58Z",
      "updated_at": "2021-09-29T22:17:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it makes sense to open new issue in .Net Runtime repo since we use Process.Start() too (if we run with shell).",
      "created_at": "2021-09-30T04:03:46Z",
      "updated_at": "2021-09-30T04:04:11Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "\r\nWG: we agree that this may be a bug, but we would like to wait at present for more investigation.\r\n",
      "created_at": "2021-09-30T22:30:57Z",
      "updated_at": "2021-09-30T22:30:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw's original commant from #16165\r\n>I updated the change in IsWindowsApplication to use ResolveLinkTarget(returnFinalTarget: false).\r\nThis is a more of a safe, back-compat change. Ideally, we should resolve a symbolic link earlier, and use the final target to start the process, both in NativeCommandProcessor and Start-Process. As of today, pwsh doesn't use the final target of a symbolic link when starting process on Windows, see #16171.\r\n\r\nI like the idea \"to resolve a symbolic link earlier\".\r\nIf the user intends to run the application, that's what he wants, not to get a strange request for an intermediate name. \r\nAnd we should to have the same behavior on all platforms - if Unix works so automatically and it is well we should do the same on Windows but with a workaround.",
      "created_at": "2021-10-27T07:36:05Z",
      "updated_at": "2021-10-27T07:36:05Z"
    }
  ],
  "created_at": "2021-09-28T23:57:17Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Needs-Investigation"
  ],
  "number": 16171,
  "state": "open",
  "title": "PowerShell doesn't use the final target of a symbolic link when starting a process or running a native command on Windows",
  "updated_at": "2021-10-27T07:36:05Z"
}