{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8262",
  "author": "rjmholt",
  "body": "From https://github.com/PowerShell/PowerShell/pull/8218.\r\n\r\n`Get-Module` using a path in a fully qualified name will skip other constraints in the fully qualified name and be too permissive.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nDescribe 'Get-Module -ListAvailable with path' {\r\n    BeforeAll {\r\n        $moduleName = 'Banana'\r\n        $modulePath = Join-Path $TestDrive $moduleName\r\n        $v1 = '1.2.3'\r\n        $v2 = '4.8.3'\r\n        $v1DirPath = Join-Path $modulePath $v1\r\n        $v2DirPath = Join-Path $modulePath $v2\r\n        $manifestV1Path = Join-Path $v1DirPath \"$moduleName.psd1\"\r\n        $manifestV2Path = Join-Path $v2DirPath \"$moduleName.psd1\"\r\n\r\n        New-Item -ItemType Directory $modulePath\r\n        New-Item -ItemType Directory -Path $v1DirPath\r\n        New-Item -ItemType Directory -Path $v2DirPath\r\n        New-ModuleManifest -Path $manifestV1Path -ModuleVersion $v1\r\n        New-ModuleManifest -Path $manifestV2Path -ModuleVersion $v2\r\n    }\r\n\r\n    It \"Gets all versions by path\" {\r\n        $modules = Get-Module -ListAvailable $modulePath | Sort-Object -Property Version\r\n\r\n        $modules | Should -HaveCount 2\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $manifestV1Path\r\n        $modules[0].Version | Should -Be $v1\r\n        $modules[1].Name | Should -BeExactly $moduleName\r\n        $modules[1].Path | Should -BeExactly $manifestV2Path\r\n        $modules[1].Version | Should -Be $v2\r\n    }\r\n\r\n    It \"Gets all versions by FullyQualifiedName with path with lower version\" {\r\n        $modules = Get-Module -ListAvailable -FullyQualifiedName @{ ModuleName = $modulePath; ModuleVersion = '0.0' } | Sort-Object -Property Version\r\n\r\n        $modules | Should -HaveCount 2\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $manifestV1Path\r\n        $modules[0].Version | Should -Be $v1\r\n        $modules[1].Name | Should -BeExactly $moduleName\r\n        $modules[1].Path | Should -BeExactly $manifestV2Path\r\n        $modules[1].Version | Should -Be $v2\r\n    }\r\n\r\n    It \"Gets high version by FullyQualifiedName with path with high version\" {\r\n        $modules = Get-Module -ListAvailable -FullyQualifiedName @{ ModuleName = $modulePath; ModuleVersion = '2.0' } | Sort-Object -Property Version\r\n\r\n        $modules | Should -HaveCount 1\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $manifestV2Path\r\n        $modules[0].Version | Should -Be $v2\r\n    }\r\n\r\n    It \"Gets low version by FullyQualifiedName with path with low maximum version\" {\r\n        $modules = Get-Module -ListAvailable -FullyQualifiedName @{ ModuleName = $modulePath; MaximumVersion = '2.0' } | Sort-Object -Property Version\r\n\r\n        $modules | Should -HaveCount 1\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $manifestV1Path\r\n        $modules[0].Version | Should -Be $v1\r\n    }\r\n\r\n    It \"Gets low version by FullyQualifiedName with path with low maximum version and version\" {\r\n        $modules = Get-Module -ListAvailable -FullyQualifiedName @{ ModuleName = $modulePath; MaximumVersion = '2.0'; ModuleVersion = '1.0' } | Sort-Object -Property Version\r\n\r\n        $modules | Should -HaveCount 1\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $manifestV1Path\r\n        $modules[0].Version | Should -Be $v1\r\n    }\r\n\r\n    It \"Gets correct version by FullyQualifiedName with path with required version\" -TestCases @(\r\n        @{ Version = $v1 }\r\n        @{ Version = $v2 }\r\n    ) {\r\n        param([version]$Version)\r\n\r\n        switch ($Version)\r\n        {\r\n            $v1\r\n            {\r\n                $expectedPath = $manifestV1Path\r\n                break\r\n            }\r\n\r\n            $v2\r\n            {\r\n                $expectedPath = $manifestV2Path\r\n            }\r\n        }\r\n\r\n        $modules = Get-Module -ListAvailable -FullyQualifiedName @{ ModuleName = $modulePath; RequiredVersion = $Version }\r\n\r\n        $modules | Should -HaveCount 1\r\n        $modules[0].Name | Should -BeExactly $moduleName\r\n        $modules[0].Path | Should -BeExactly $expectedPath\r\n        $modules[0].Version | Should -Be $Version\r\n    }\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nAll tests pass\r\n\r\nActual behavior\r\n---------------\r\n\r\nTests with additional version checks in fully qualified names have their checks ignored.\r\nThis is of the following code:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/79f21b41de0de9b2f68a19ba1fdef0b98f3fb1cb/src/System.Management.Automation/engine/Modules/GetModuleCommand.cs#L547-L557\r\n\r\nWhen a path is specified, the lookup fails and we (perversely) return the module.",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw ",
      "created_at": "2018-11-14T19:40:10Z",
      "updated_at": "2018-11-14T19:40:10Z"
    }
  ],
  "created_at": "2018-11-14T00:26:48Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Core"
  ],
  "number": 8262,
  "state": "open",
  "title": "Get-Module [-ListAvailable] -FullyQualifiedName with path ignores other constraints",
  "updated_at": "2018-11-14T19:40:10Z"
}