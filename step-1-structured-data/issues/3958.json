{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3958",
  "author": "rkeithhill",
  "body": "This addresses the last item in issue #2751.  The implementation supports the following forms of Unicode escape sequences:\r\n\r\n`` \"`u2195\"`` evals to `\u2195`\r\n`` \"`u{4}\"`` evals to control char 0x4 (EOT)\r\n`` \"`u{a9}\"`` evals to `\u00a9`\r\n`` \"`u{2195}\"`` evals to `\u2195`\r\n`` \"`u{1f44d}\"`` evals to `\ud83d\udc4d`\r\n\r\nIn addition, you can use Unicode escape sequences when naming a variable:\r\n```posh\r\n${foo`u{2195}} = 42 # creates variable named: foo\u2195\r\n```\r\nAnd you can specify a Unicode sequence as an argument:\r\n```posh\r\nWrite-Host `u{a9}` Acme` Inc # outputs: \u00a9 Acme Inc\r\n```\r\n**Concerns**\r\n* For the implementation I had to change the signature of `Backtick()` to return a `string` instead of `char`.  This was necessary to support Unicode surrogate pairs like `` \"`u{1f44d}\"`` which consists of two Unicode characters. This required updating six call sites of `Backtick()`.  The primary approach I took was that if the string length was greater than 1, then we have a character from the Unicode astral plane and is not of further interest to the parser. So I put the string in the sb/formatSb StringBuilder and `continue` the scanning loop.  Otherwise, we have a single character, which I assign to the local `c` (char) variable and allow processing in that loop iteration to continue.\r\n\r\n* I had to change the encoding of the `Parser.Tests.ps1` file to UTF8 w/BOM.  That's because Pester apparently reads the file with the default encoding and the Unicode characters I have in the file do not get recognized correctly.  BTW I've noticed this before where `Get-Content` (without specify -Encoding UTF8) on a UTF8 file w/no BOM and with Unicode characters seems to use ASCII encoding and that is no bueno.  \r\n\r\n* For the bracket syntax, I'm only supporting up to 6 hex digits.  The underlying API we use is `Char.ConvertFromUtf32()` and that supports values up to `0x10FFFF`, which 6 hex digits is sufficient to specify.  In fact with 6 digits you can specify invalid values (over 0x10FFFF) - the parser errors appropriately on those.\r\n\r\n* I could use some help with wording on the ParserStrings error messages I added.  Or at the very least, these should be reviewed.  Sorry about the trailing whitespace removal (isn't everybody using VSCode with editor.trimTrailingWhitespace set to true by now?)\r\n\r\n* This will require a change to the EditorSyntax project to get it to properly recognize the bracketed form in a variable declaration.",
  "closed_at": "2017-06-28T05:55:57Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I have addressed most of the issues.  The last remaining issue is the proposed change to `Backtick()` and where we call `ScanUnicodeEscapeSequence()` from.",
      "created_at": "2017-06-08T06:11:20Z",
      "updated_at": "2017-06-08T06:11:20Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Added the breaking change label - it's similar to the break we did for `` `e ``.",
      "created_at": "2017-06-08T19:42:21Z",
      "updated_at": "2017-06-08T19:42:21Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "So the Travis build failed because I assumed that on non-Windows systems, a here string used `[System.Environment]::NewLine` to separate lines.  Apparently that's not true which is somewhat surprising.\r\n```\r\nExpected: {\\nfoo`u2195abc\\n}\r\nBut was:  {\\r\\nfoo`u2195abc\\r\\n}\r\n```",
      "created_at": "2017-06-08T21:16:45Z",
      "updated_at": "2017-06-08T21:17:15Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "A here string will use the newlines that appear in the file - it doesn't matter what environment you are in.",
      "created_at": "2017-06-08T21:23:48Z",
      "updated_at": "2017-06-08T21:23:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The first of the two Travis builds passed.  The second didn't even seem to really get started before it failed.",
      "created_at": "2017-06-08T22:36:29Z",
      "updated_at": "2017-06-08T22:36:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Where does the `about_Escape_Characters.help.txt` file live?  It seems to get copied in during build but doesn't live in this repo AFAICT.",
      "created_at": "2017-06-08T22:42:31Z",
      "updated_at": "2017-06-08T22:42:41Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You can find the help topics by starting on MSDN (e.g. [here](https://msdn.microsoft.com/powershell/reference/5.1/Microsoft.PowerShell.Core/about/about_Escape_Characters)) and then click on `Contribute`.",
      "created_at": "2017-06-08T23:10:22Z",
      "updated_at": "2017-06-08T23:10:22Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Cool. Found the v6 version of the file but I won't make any changes unless/until the PR is accepted.",
      "created_at": "2017-06-08T23:42:42Z",
      "updated_at": "2017-06-08T23:42:42Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell-Docs/blob/bc94e78134be5d14369b6a9cd4c5ea2b61e1d37f/reference/3.0/Microsoft.PowerShell.Core/About/about_Escape_Characters.md",
      "created_at": "2017-06-09T19:57:35Z",
      "updated_at": "2017-06-09T19:57:35Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Thanks for the link but that is for PS 3.0.  I think I should only update the 6.0 version:\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/bc94e78134be5d14369b6a9cd4c5ea2b61e1d37f/reference/6/About/about_Escape_Characters.md\r\n\r\nRight?",
      "created_at": "2017-06-09T20:23:25Z",
      "updated_at": "2017-06-09T20:23:37Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I realize you guys will probably want me to rebase this at some point.  Do you think we are getting close on this?  I feel like it is getting close, modulo error message tweaks.",
      "created_at": "2017-06-10T02:56:27Z",
      "updated_at": "2017-06-10T02:56:27Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@lzybkr @iSazonov  Can you review?",
      "created_at": "2017-06-12T21:23:45Z",
      "updated_at": "2017-06-12T21:23:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "See #2751 for feedback on the decision from the committee - we ask that you remove the fixed width syntax.",
      "created_at": "2017-06-22T01:18:05Z",
      "updated_at": "2017-06-22T01:18:05Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Will do.  BTW I would like to rebase the current state down to one commit first.  Then have this revision be one commit on top of that.  Is that OK?",
      "created_at": "2017-06-22T03:52:24Z",
      "updated_at": "2017-06-22T03:52:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR is very large. Maybe close and open new PR? I believe we lost nothing.",
      "created_at": "2017-06-22T04:05:01Z",
      "updated_at": "2017-06-22T04:05:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Squash and rebase is fine.  I don't see a need for a new PR, we'd need to link to this PR anyway because the discussion here is useful.",
      "created_at": "2017-06-22T18:40:37Z",
      "updated_at": "2017-06-22T18:40:37Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The last commit adopts the C# approach to Unicode sequence lexing and removes IsSurrogatePair() method.\r\n\r\nThe C# approach is to have the esc sequence and Unicode esc lexing return a char but also have an out char surrogateChar (lowSurrogate).\r\n\r\nThis perhaps makes the Backtick() call sites a bit clearer than the use of the IsSurrogateChar() method.\r\n\r\nAlso change from using s_invalidChar as 0xfffd (replacement char typically used when \"rendering\" an invalid byte in the current byte stream e.g UTF-8 reading 0x66, 0xFC, 0x72 - the 0xFC is not valid in this context and an editor might use char 0xFFFD to indicate the character was not valid.  The C# parser returns 0xFFFF (Char.MaxValue) when there is an error and it needs to return something for the return value.\r\n\r\nSee what you think. I can always revert this change.\r\n\r\nTo see the C# version, look here: https://github.com/dotnet/roslyn/blob/94ca919c6b4c94857dc5d58df4e6e10cb8d55c3c/src/Compilers/CSharp/Portable/Parser/Lexer_StringLiteral.cs#L98",
      "created_at": "2017-06-25T22:46:53Z",
      "updated_at": "2017-06-26T01:57:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr  Could you please comment https://github.com/PowerShell/PowerShell/pull/3958#discussion_r123904765 ? It seems like a full imitation to C# too old.",
      "created_at": "2017-06-26T18:41:14Z",
      "updated_at": "2017-06-26T18:41:14Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I would appreciate it if a few folks could review the docs I updated for this feature: https://github.com/PowerShell/PowerShell-Docs/pull/1407/files\r\n\r\ncc @mklement0 \r\n\r\nThanks!",
      "created_at": "2017-06-27T16:07:05Z",
      "updated_at": "2017-06-27T16:07:26Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Docs are merged, @lzybkr  has signed off.   The Committee has reviewed the PR.  Thanks, @rkeithhill   \r\nIf there isn't any additional feedback, I'll merge this soon.",
      "created_at": "2017-06-27T19:52:56Z",
      "updated_at": "2017-06-27T19:52:56Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Thanks.  \r\n\r\nI'd like @lzybkr to take a quick look at my very last [commit](https://github.com/PowerShell/PowerShell/pull/3958/commits/32b879b2711f6113543f5735a7f752db7ffbd6ca) (made after his approval).  It is basically a three line change to make sure we call `Release(sb)` in the error conditions where we return early (before calling `GetStringAndRelease(sb)`. ",
      "created_at": "2017-06-27T19:56:53Z",
      "updated_at": "2017-06-27T19:56:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@rkeithhill - I have no preference on leading zeros - I'm fine either way on this one.",
      "created_at": "2017-06-28T17:54:00Z",
      "updated_at": "2017-06-28T17:54:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is conclusion about surrogate pairs?",
      "created_at": "2017-06-28T18:02:38Z",
      "updated_at": "2017-06-28T18:02:38Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure I have a conclusion on surrogate pairs - but I think I implied it's reasonable to allow them.",
      "created_at": "2017-06-28T18:10:10Z",
      "updated_at": "2017-06-28T18:10:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you please re-read last @mklement0 comments above - we should continue and finish the discussion, and maybe documenting it for users.",
      "created_at": "2017-06-28T18:30:50Z",
      "updated_at": "2017-06-28T18:30:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I did read that comment before replying and don't really have more to say right now - I think what was merged is fine, but I don't have a strong opinion.",
      "created_at": "2017-06-28T18:40:01Z",
      "updated_at": "2017-06-28T18:40:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: I won't be saying anything substantially new over what @lzybkr has already said, but let me attempt a concise summary:\r\n\r\n* C# supports surrogate code points in its `\\uhhhh` syntax - which is unfortunate, given that `\\Uhhhhhhhh` allows you to express any actual _character_ code point _directly_, but it is in line with C#/.NET strings being UTF-16 strings that operate on _code points_ rather than _characters_.\r\n\r\n* The only real disadvantage of allowing surrogate escapes in PowerShell is the introduction of historical baggage, but even that is defensible, since we can't escape the reality of the underlying UTF-16 strings.\r\n\r\n* On the flip side, there are advantages that @lzybkr has already mentioned, notably reuse of existing hex codes (it would be nontrivial to determine the single character code point that is the equivalent of a given surrogate pair), the ability to test APIs with isolated surrogates, and last _and_ least, ease of implementation.\r\n",
      "created_at": "2017-06-28T20:43:36Z",
      "updated_at": "2017-06-28T22:01:55Z"
    }
  ],
  "created_at": "2017-06-07T07:32:00Z",
  "number": 3958,
  "state": "closed",
  "title": "Implement Unicode escape parsing",
  "updated_at": "2019-05-29T15:50:19Z"
}