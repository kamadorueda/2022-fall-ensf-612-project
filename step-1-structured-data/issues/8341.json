{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8341",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nWith this PR, the startup time of `pwsh` gets about `24.5%` improvement on average comparing with the PS Core 6.1.0 official release. The following is an example measurement result by using `BenchmarkDotNet v0.11.2` (the detailed information about this measurement result can be found at the end):\r\n\r\n```\r\n# Warm startup -- with module analysis cache pre-populated\r\npwsh.exe -noprofile -c echo 1\r\n\r\n           Method |     Mean |    Error |    StdDev |\r\n----------------- |---------:|---------:|----------:|\r\n           Pwsh61 | 540.5 ms | 9.381 ms |  8.316 ms |\r\n            WinPS | 332.9 ms | 6.497 ms | 10.675 ms |\r\n pwsh62_optimized | 408.3 ms | 8.936 ms |  9.176 ms |\r\n```\r\n\r\n### Detailed Changes\r\n- Avoid `SecuritySupport.IsProductBinary` and unnecessary AMSI/suspicious code scan at startup time for a regular session\r\n   - Update `CompiledScriptBlockData.IsProductCode` to avoid unnecessary calls to `IsProductBinary`, which attempts to retrieve catalog signature of the target file.\r\n   - Update `PerformSecurityChecks` to skip AMSI and suspicious code scan for the `.psd1` file that contains a safe `HashtableAst` only.\r\n- Use customized `ReadOnlyBag` instead of `ImmutableHashSet` so that we can avoid loading the `System.Collections.Immutable.dll` completely.\r\n- Replace `SHA1` with `CRC32` when generating module analysis cache file name\r\n   - This remove the loading of `System.Security.Cryptography.Algorithms.dll` at startup\r\n- Move `ConvertFrom-SddlString` to C# to remove the `Utility.psm1` file.\r\n- Crossgen `Microsoft.ApplicationInsights.dll` and enable tiered compilation\r\n   - Even pwsh with crossgen assemblies spends a lot time in jitting at the startup, about `191.6ms` comparing with `24.7ms` for Windows PowerShell.\r\n   - Jitting `Microsoft.ApplicationInsights.dll` took about `51.6ms`.\r\n   - By crossgen `Microsoft.ApplicationInsights.dll` and enable tiered compilation, the jitting time drops to about `98.9ms`. Detailed information can be found at the end.\r\n\r\n**NOTE: Each commit is self-contained and the purpose of the commit is described by the commit message. So it would be easier to review per commit.**\r\n\r\n### Compared with Windows PowerShell\r\n\r\nThe optimized pwsh is still about `75ms` slower than Windows PowerShell. The main reason is jitting time difference, even though we crossgen all the assemblies in the table below except for `pwsh.dll`.\r\n\r\nMore work will be done to further bring down the jitting time at startup.\r\n\r\n### Reference Set Improvement\r\n\r\nImpacting memory size loaded from disk (total): 5.9% less pages (606 / 10289 pages), 6% less memory (2.4 / 40.2 mb). The comparison of the image pages being loaded during startup before and after this PR is as follows:\r\n\r\n```none\r\nTotalImagesAdded   : 0\r\nTotalImagesRemoved : 15\r\nTotalImagesChanged : 19\r\nTotalPageChange    : -556\r\n\r\n\r\n   type: Remove\r\n\r\ntype   image                                       pages\r\n----   -----                                       -----\r\nRemove AppxSip.dll                                 21\r\nRemove coml2.dll                                   31\r\nRemove iertutil.dll                                42\r\nRemove mintdh.dll                                  22\r\nRemove msisip.dll                                  7\r\nRemove OpcServices.dll                             53\r\nRemove pwrshsip.dll                                11\r\nRemove System.Collections.Immutable.dll            74\r\nRemove System.Security.Cryptography.Algorithms.dll 38\r\nRemove System.Security.Permissions.dll             14\r\nRemove System.Threading.AccessControl.dll          6\r\nRemove tdh.dll                                     15\r\nRemove urlmon.dll                                  66\r\nRemove wshext.dll                                  12\r\nRemove xmllite.dll                                 13\r\n\r\n   type: Update\r\n\r\ntype   image                                             pages\r\n----   -----                                             -----\r\nUpdate clrjit.dll                                        -4\r\nUpdate combase.dll                                       1\r\nUpdate coreclr.dll                                       -10\r\nUpdate crypt32.dll                                       -70\r\nUpdate KernelBase.dll                                    -3\r\nUpdate Microsoft.PowerShell.Commands.Utility.dll         4\r\nUpdate msasn1.dll                                        -4\r\nUpdate msvcrt.dll                                        -1\r\nUpdate ntdll.dll                                         1\r\nUpdate rpcrt4.dll                                        -2\r\nUpdate sechost.dll                                       -5\r\nUpdate SHCore.dll                                        -10\r\nUpdate shell32.dll                                       -1\r\nUpdate System.Private.CoreLib.dll                        -7\r\nUpdate System.Runtime.Extensions.dll                     -1\r\nUpdate System.Security.Cryptography.Primitives.dll       -3\r\nUpdate System.Security.Cryptography.X509Certificates.dll -2\r\nUpdate windows.storage.dll                               2\r\nUpdate wintrust.dll                                      -16\r\n```\r\n\r\n### Jitting Time Improvement\r\n\r\n#### Windows PowerShell\r\n\r\nWindows PowerShell Assembly Name | JitTime   msec | Num   Compilations | IL   Size | Native   Size | Foreground   msec | Multicore   JIT Background   msec | Tiered   Compilation Background   msec\r\n-- | -- | -- | -- | -- | -- | -- | --\r\nTOTAL | 24.7 | 83 | 1,506 | 16,149 | 24.7 | 0.0 | 0.0\r\nAnonymously Hosted DynamicMethods Assembly | 19.3 | 44 | 0 | 12,517 | 19.3 | 0.0 | 0.0\r\nC:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\...\\System.Management.Automation.dll | 4.3 | 38 | 1,181 | 2,782 | 4.3 | 0.0 | 0.0\r\nC:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\...\\System.Core.dll | 1.1 | 1 | 325 | 850 | 1.1 | 0.0 | 0.0\r\n\r\n#### Before crossgen'ing `Microsoft.ApplicationInsights.dll` and applying tiered compilation\r\n\r\nPWSH   Assembly Name | JitTime   msec | Num   Compilations | IL   Size | Native   Size | Foreground   msec | Multicore   JIT Background   msec | Tiered   Compilation Background   msec\r\n-- | -- | -- | -- | -- | -- | -- | --\r\nTOTAL | 191.6 | 488 | 43,105 | 140,540 | 151.2 | 40.4 | 0.0\r\nE:\\PowerShell\\bin\\latest\\Microsoft.ApplicationInsights.dll | 51.6 | 147 | 9,866 | 30,735 | 51.6 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\System.Management.Automation.dll | 44.4 | 25 | 14,661 | 44,123 | 4.0 | 40.4 | 0.0\r\nE:\\PowerShell\\bin\\latest\\System.Private.CoreLib.dll | 36.0 | 143 | 11,947 | 20,691 | 36.0 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\Microsoft.PowerShell.CoreCLR.Eventing.dll | 22.1 | 80 | 0 | 23,342 | 22.1 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\System.Collections.Concurrent.dll | 17.6 | 34 | 4,018 | 12,261 | 17.6 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\System.Collections.dll | 9.3 | 34 | 1,317 | 3,542 | 9.3 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\System.Linq.dll | 7.6 | 17 | 1,085 | 4,911 | 7.6 | 0.0 | 0.0\r\nAnonymously Hosted DynamicMethods Assembly | 1.4 | 6 | 0 | 543 | 1.4 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\Newtonsoft.Json.dll | 0.8 | 1 | 196 | 357 | 0.8 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\latest\\pwsh.dll | 0.7 | 1 | 15 | 35 | 0.7 | 0.0 | 0.0\r\n\r\n#### After crossgen `Microsoft.ApplicationInsights.dll` and applying tiered compilation\r\n\r\n\r\nUpdated   PWSH Assembly Name | JitTime   msec | Num   Compilations | IL   Size | Native   Size | Foreground   msec | Multicore   JIT Background   msec | Tiered   Compilation Background   msec\r\n-- | -- | -- | -- | -- | -- | -- | --\r\nTOTAL | 98.9 | 422 | 34,500 | 144,231 | 78.3 | 20.5 | 0.0\r\nE:\\PowerShell\\bin\\base\\System.Private.CoreLib.dll | 26.7 | 181 | 12,442 | 36,649 | 26.7 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\base\\System.Management.Automation.dll | 22.7 | 25 | 14,661 | 51,754 | 2.4 | 20.3 | 0.0\r\nE:\\PowerShell\\bin\\base\\Microsoft.PowerShell.CoreCLR.Eventing.dll | 22.1 | 80 | 0 | 22,778 | 22.1 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\base\\System.Collections.Concurrent.dll | 9.9 | 53 | 4,429 | 19,337 | 9.6 | 0.3 | 0.0\r\nE:\\PowerShell\\bin\\base\\System.Collections.dll | 7.0 | 52 | 1,546 | 6,856 | 7.0 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\base\\System.Linq.dll | 5.3 | 23 | 1,211 | 5,770 | 5.3 | 0.0 | 0.0\r\nAnonymously   Hosted DynamicMethods Assembly | 4.1 | 6 | 0 | 543 | 4.1 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\base\\pwsh.dll | 0.7 | 1 | 15 | 51 | 0.7 | 0.0 | 0.0\r\nE:\\PowerShell\\bin\\base\\Newtonsoft.Json.dll | 0.3 | 1 | 196 | 493 | 0.3 | 0.0 | 0.0\r\n\r\n\r\n\r\n### Startup Detailed Measurement Record\r\n\r\n```none\r\n// * Detailed results *\r\nPSStartupTime.Pwsh61: Core(Runtime=Core)\r\nRuntime = .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT; GC = Concurrent Workstation\r\nMean = 540.5245 ms, StdErr = 2.2226 ms (0.41%); N = 14, StdDev = 8.3163 ms\r\nMin = 528.3226 ms, Q1 = 535.3209 ms, Median = 538.9606 ms, Q3 = 544.9347 ms, Max = 559.4117 ms\r\nIQR = 9.6138 ms, LowerFence = 520.9002 ms, UpperFence = 559.3554 ms\r\nConfidenceInterval = [531.1432 ms; 549.9058 ms] (CI 99.9%), Margin = 9.3813 ms (1.74% of Mean)\r\nSkewness = 0.66, Kurtosis = 2.66, MValue = 2\r\n-------------------- Histogram --------------------\r\n[525.303 ms ; 539.307 ms) | @@@@@@@\r\n[539.307 ms ; 562.431 ms) | @@@@@@@\r\n---------------------------------------------------\r\n\r\nPSStartupTime.WinPS: Core(Runtime=Core)\r\nRuntime = .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT; GC = Concurrent Workstation\r\nMean = 332.9168 ms, StdErr = 1.8044 ms (0.54%); N = 35, StdDev = 10.6749 ms\r\nMin = 316.7778 ms, Q1 = 323.8313 ms, Median = 330.4381 ms, Q3 = 340.1557 ms, Max = 356.9562 ms\r\nIQR = 16.3244 ms, LowerFence = 299.3447 ms, UpperFence = 364.6423 ms\r\nConfidenceInterval = [326.4197 ms; 339.4139 ms] (CI 99.9%), Margin = 6.4971 ms (1.95% of Mean)\r\nSkewness = 0.47, Kurtosis = 2.28, MValue = 2.2\r\n-------------------- Histogram --------------------\r\n[313.922 ms ; 324.935 ms) | @@@@@@@@@@\r\n[324.935 ms ; 332.120 ms) | @@@@@@@@@\r\n[332.120 ms ; 341.104 ms) | @@@@@@@@@\r\n[341.104 ms ; 348.303 ms) | @@@\r\n[348.303 ms ; 359.812 ms) | @@@@\r\n---------------------------------------------------\r\n\r\nPSStartupTime.pwsh62_optimized: Core(Runtime=Core)\r\nRuntime = .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT; GC = Concurrent Workstation\r\nMean = 408.2847 ms, StdErr = 2.2256 ms (0.55%); N = 17, StdDev = 9.1764 ms\r\nMin = 387.1787 ms, Q1 = 403.7134 ms, Median = 409.1181 ms, Q3 = 414.1094 ms, Max = 428.8114 ms\r\nIQR = 10.3960 ms, LowerFence = 388.1194 ms, UpperFence = 429.7034 ms\r\nConfidenceInterval = [399.3489 ms; 417.2204 ms] (CI 99.9%), Margin = 8.9358 ms (2.19% of Mean)\r\nSkewness = -0.18, Kurtosis = 3.46, MValue = 2\r\n-------------------- Histogram --------------------\r\n[384.056 ms ; 395.103 ms) | @\r\n[395.103 ms ; 403.504 ms) | @@@\r\n[403.504 ms ; 418.618 ms) | @@@@@@@@@@@@\r\n[418.618 ms ; 431.934 ms) | @\r\n---------------------------------------------------\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.2, OS=Windows 10.0.17763.134 (1809/October2018Update/Redstone5)\r\nIntel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n.NET Core SDK=2.1.500\r\n  [Host] : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n  Core   : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n\r\nJob=Core  Runtime=Core\r\n\r\n           Method |     Mean |    Error |    StdDev |\r\n----------------- |---------:|---------:|----------:|\r\n           Pwsh61 | 540.5 ms | 9.381 ms |  8.316 ms |\r\n            WinPS | 332.9 ms | 6.497 ms | 10.675 ms |\r\n pwsh62_optimized | 408.3 ms | 8.936 ms |  9.176 ms |\r\n\r\n// * Hints *\r\nOutliers\r\n  PSStartupTime.Pwsh61: Core           -> 1 outlier  was  removed\r\n  PSStartupTime.pwsh62_optimized: Core -> 1 outlier  was  detected\r\n\r\n// * Legends *\r\n  Mean   : Arithmetic mean of all measurements\r\n  Error  : Half of 99.9% confidence interval\r\n  StdDev : Standard deviation of all measurements\r\n  1 ms   : 1 Millisecond (0.001 sec)\r\n\r\n// ***** BenchmarkRunner: End *****\r\nRun time: 00:00:38 (38.84 sec), executed benchmarks: 3\r\n```\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-12-02T20:52:40Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> More work will be done to further bring down the jitting time at startup.\r\n\r\nDo you continue in the PR?\r\n\r\n> After crossgen Microsoft.ApplicationInsights.dll and applying tiered compilation\r\n\r\nI don't see Microsoft.ApplicationInsights.dll in the table - no jitting?\r\n\r\nI searched \"Insights\" in our code base and have questions:\r\n1. Do we really need types from the dll in CorePsTypeCatalog.cs? We could remove 239 lines.\r\n2. The dll is used for telemetry. Do we really need load the dll at startup? Seems we could delay the telemetry\r\n3. The telemetry is a static class. We have other static classes. I guess some static classes is initialized at startup (I guess they is initialized at first use time) - does this slow down startup? Make sense to analyze this and try to delay static classes initializations?\r\n\r\nIf `ReadOnlyHashSet` was rewrited I think we could look other classes used in PowerShell Core engine. Maybe it won't speed up the startup but increase performance.\r\n\r\n```\r\nOutliers\r\n  PSStartupTime.Pwsh61: Core           -> 2 outliers were removed\r\n  PSStartupTime.WinPS: Core            -> 4 outliers were removed\r\n  PSStartupTime.pwsh62_optimized: Core -> 1 outlier  was  removed\r\n```\r\nhaving `Outliers` it is not good in the test - seems interference from other processes.\r\n\r\n> Intel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n\r\nI think that an ordinary user computer is 2 physical cores and it would be correct to limit the test to two physical cores. (This may be related to tied compilation)\r\n\r\n",
      "created_at": "2018-11-27T11:55:00Z",
      "updated_at": "2018-11-27T11:55:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I restarted CI-MacOs.",
      "created_at": "2018-11-27T11:56:59Z",
      "updated_at": "2018-11-27T11:56:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Reply to your comment here:\r\n\r\n> > More work will be done to further bring down the jitting time at startup.\r\n>\r\n> Do you continue in the PR?\r\n\r\nNo, that will be in a new PR. The planned work are as follows:\r\n- Generate PDB for crossgen'ed assemblies that can be used by PerfView/WPA, so that I can do further stack analysis on CPU time.\r\n- Crossgen'ed assemblies still leave a high cost of jitting time comparing with ngen. It's probably by design as ngen is targeting a specific CPU while crossgen is targeting a general x64 architecture, but I need to contact .NET Core team to get better understanding and see if there are other options (profile-guided-opt?)\r\n- Ad-hoc code changes to avoid unnecessary work at startup time.\r\n\r\n> I don't see Microsoft.ApplicationInsights.dll in the table - no jitting?\r\n\r\nAfter the change, no IL code needs to be jitted for this dll at startup time.\r\n\r\n> Do we really need types from the dll in CorePsTypeCatalog.cs? We could remove 239 lines.\r\n\r\nYes we do. Type conversion depends on the type catalog. Not all .NET Core assemblies shipped with PS Core are loaded at startup. Today, user can use a type even it's from an assembly that is not loaded yet, because powershell knows which assembly the type is from by looking in the type catalog. Without it, the user needs to know which assembly the type is in, and then load the assembly first before using the type. The type catalog is also used in tab completion, so that powershell can tab complete types that are not loaded yet.\r\n\r\n> The dll is used for telemetry. Do we really need load the dll at startup? Seems we could delay the telemetry\r\n\r\nApplicationInsight telemetry is done in console.dll at startup, as long as the user hasn't opted out.\r\n\r\n> The telemetry is a static class. We have other static classes. I guess some static classes is initialized at startup (I guess they is initialized at first use time) - does this slow down startup? Make sense to analyze this and try to delay static classes initializations?\r\n\r\nThe work that is done in this PR are based on the analysis of Reference Set and Jitting time. Some ad-hoc analysis on the static members might be useful, but I think our efforts should be guided by the measurement data, so our time can be spent on things that matters most.\r\n\r\n> If ReadOnlyHashSet was rewrited I think we could look other classes used in PowerShell Core engine. Maybe it won't speed up the startup but increase performance.\r\n\r\nThe reason to change `ImmutableHashSet` to `ReadOnlyHashSet` is because this only use of `ImmutableHashSet` causes `System.Collections.Immutable.dll` to be loaded at startup, which brings in 74 pages loaded from disk. This shows up as part of the reference set analysis. It might be useful to look at other classes, but again, I think our efforts should be guided by the measurement data.\r\n\r\n> having Outliers it is not good in the test - seems interference from other processes.\r\n\r\nThere is no interference from other pwsh processes when running the tests. `BenchmarkDotNet` starts each process many times, and sometimes there are outliers.\r\n\r\n> I think that an ordinary user computer is 2 physical cores and it would be correct to limit the test to two physical cores. (This may be related to tied compilation)\r\n\r\nThe baseline is the same, and here we care most about the percentage of improvement instead of the actual startup time. As for multi-core background jitting, with changes in this PR, only `20.5ms` are spent in the multi-core background jitting, very small number comparatively, so I don't think it has noticeable effect on the improvement percentage.\r\n",
      "created_at": "2018-11-27T21:14:02Z",
      "updated_at": "2018-11-28T00:53:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The macOS failure appears to be a test code issue:\r\n\r\n```output\r\n2018-11-27T12:24:13.7076000Z Description: Basic os_log tests on MacOS/\r\n2018-11-27T12:24:13.7079830Z Name:        Verifies scriptblock logging\r\n2018-11-27T12:24:13.7084250Z message:\r\n2018-11-27T12:24:13.7088810Z did not recieve at least 18 records but 47 instead.\r\n2018-11-27T12:24:13.7094210Z stack-trace:\r\n2018-11-27T12:24:13.7097880Z at <ScriptBlock>, /Users/vsts/agent/2.142.1/work/1/s/test/tools/Modules/PSSysLog/PSSysLog.psm1: line 904\r\n2018-11-27T12:24:13.7098430Z 904:             throw \"did not recieve at least $MinimumCount records but $($log.Count) instead.\"\r\n```\r\n\r\n(note that `receive` is spelled wrong).  According to the text, the test expects >= 18, but 47 is >= 18, so the validation must be wrong.",
      "created_at": "2018-11-27T22:24:16Z",
      "updated_at": "2018-11-27T22:24:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "For the logging test that was failing in previous macOS CI, it's caused by removing `Utility.psm1`. The test script `$testScriptPath` has `Write-Verbose` in it, so when running `& $powershell -NoProfile -SettingsFile $configFile -Command $testScriptPath`, it triggers the auto-loading of `Utility` module. Before this PR, that results in 19 event logs. With this PR, two events that record the starting and completion of `Utility.psm1` execution are gone, so the total number of event logs becomes 17. I have update the test code, also update `PSSysLog.psm1` to correct the wrong message as @SteveL-MSFT pointed out above.",
      "created_at": "2018-11-28T02:56:27Z",
      "updated_at": "2018-11-28T02:56:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Yes we do. Type conversion depends on the type catalog. Not all .NET Core assemblies shipped with PS Core are loaded at startup. \r\n\r\nBut the dll is loaded at startup. Only \"Type conversion depends on the type catalog\" prevents us from removing the dll from TypeCatalog?\r\n\r\n> ApplicationInsight telemetry is done in console.dll at startup, as long as the user hasn't opted out.\r\n\r\nI understand. My request is - Does the telemetry delay startup or no? If yes we could postpone the telemetry call and loading the dll.\r\n\r\n> There is no interference from other pwsh processes when running the tests. BenchmarkDotNet starts each process many times, and sometimes there are outliers.\r\n\r\nI think these outlies is important to investigate in the startup context. Outlier is _unexpected_ delay. Why we see unexpected delay in the tests? \r\nIt is not for the PR but we shouldn't ignore this.\r\n\r\n\r\n",
      "created_at": "2018-11-28T06:21:36Z",
      "updated_at": "2018-11-28T06:21:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> But the dll is loaded at startup. Only \"Type conversion depends on the type catalog\" prevents us from removing the dll from TypeCatalog?\r\n\r\nNot sure what you mean by \"But the dll is loaded at startup\". Most of the assemblies included in the type catalog file are not loaded at startup.\r\n\r\nEven for the dlls that are loaded at startup, type resolution would be much faster for a type from those dlls because we can avoid the effort to search types from all loaded assemblies to find the one.\r\n\r\n> I understand. My request is - Does the telemetry delay startup or no? If yes we could postpone the telemetry call and loading the dll.\r\n\r\nThe telemetry definitely play a role in the startup time, but I don't know how much after crossgen'ing the dll because I'm not able to analyze the stack info in PerfView/WPA with crossgen'ed assemblies yet.\r\n\r\n> I think these outlies is important to investigate in the startup context.\r\n\r\nEvery run of the test starts those processes many times for measurement, including the warm-up. Not every test has outliers in it. I think it's more related to the factors that is out of our control, such as the OS.\r\n\r\nBTW, I replaced the detailed test record with a most recent run (after `2nd attempt to address comment` commit). You can see that there is only 1 outlier and it's for measuring pwsh 6.1.",
      "created_at": "2018-11-28T19:07:23Z",
      "updated_at": "2018-11-29T03:17:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@lzybkr @PaulHigin @TravisEz13 Can you please look at the new changes to `PerformSecurityChecks()` in `CompiledScriptBlock.cs` ?\r\n\r\nMajor change is on how we decide to skip AMSI/malicious code scan. The previous way to check for skipping `.psd1` files causes security vulnerabilities.\r\n\r\nAn attacker can put arbitrary content in a `.psd1` file, and call `[Parser]::ParseFile()` to get an AST from the `.psd1` file. Then the attacker can create a script block from the Ast by calling `$myAst.GetScriptBlock()`. That script block then will be considered from a `.psd1` file and skip the code scan.\r\n\r\nThe skip-scan condition is changed to:\r\n- the script block should come from a .psd1 file\r\n- the script block is in fact a HashtableAst\r\n- the HashtableAst is safe, by calling `IsSafeValueVisitor.IsAstSafe(hashtableAst, GetSafeValueVisitor.SafeValueContext.Default)`.\r\n\r\nThe API `IsSafeValueVisitor.IsAstSafe` has been used in `GetSafeValueVisitor.GetSafeValue`, which is used in module script analysis code, `Import-PowerShellDataFile`, and the public API `Ast.SafeGetValue()`.",
      "created_at": "2018-11-29T02:41:13Z",
      "updated_at": "2018-11-30T06:22:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have many comments in the PR that is a problem for GitHub web interface. If security concerns have been fixed we could merge and continue with hash function in follow PR.",
      "created_at": "2018-11-29T13:09:21Z",
      "updated_at": "2018-11-29T17:45:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Seems you could merge.",
      "created_at": "2018-11-30T04:05:24Z",
      "updated_at": "2018-11-30T04:05:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@lzybkr Would you like to take another look before I merge?",
      "created_at": "2018-11-30T06:19:45Z",
      "updated_at": "2018-11-30T06:19:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Attempt to address comments + rebased to resolve the conflict in `Microsoft.PowerShell.Commands.Utility.csproj`.\r\n@lzybkr Can you please take another look? Thanks!",
      "created_at": "2018-11-30T19:34:18Z",
      "updated_at": "2018-11-30T19:34:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The failed test is most likely caused by #8346. It's a feature-level test, but the commits in that PR don't have the `[feature]` tag, so the feature tests didn't run for that PR CI.\r\n\r\nHere is the failure:\r\n```\r\n2018-11-30T19:46:25.1215536Z     [-] ConvertFrom-Json deserializes an array of PSObjects (in multiple lines) as a single string. 32ms\r\n2018-11-30T19:46:25.1604605Z       JsonSerializationException: Unexpected end when reading JSON. Path '', line 1, position 3.\r\n2018-11-30T19:46:25.1617847Z       ArgumentException: Conversion from JSON failed with error: Unexpected end when reading JSON. Path '', line 1, position 3.\r\n2018-11-30T19:46:25.1618346Z       at <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Utility/Pester.Commands.Cmdlets.Json.Tests.ps1: line 1457\r\n```",
      "created_at": "2018-11-30T20:22:15Z",
      "updated_at": "2018-11-30T20:22:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Did we lose a bit of performance with latest commits?",
      "created_at": "2018-12-03T03:41:38Z",
      "updated_at": "2018-12-03T03:41:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yeah, it looks so to me. The average startup time improvement compared with PS Core 6.1 drops to `24.5%` in my tests with changes in the master branch. It's a `1.5%` drop on average comparing with before my changing to `IsSafeAst`. I have updated the number and the example test record in the PR description.\r\n\r\nIt's the price for security, I guess :/ But I think we can possibly further improve it by having an internal overload of `IsSafeAst`. The current `IsSafeAst` always creates a new instance of `IsSafeValueVisitor`, but in this case here, we should reuse the same instance instead of creating a new object every time, which might add GC pressure given how frequently this method will be called. But doing this shouldn't help much on the startup time as we only call this method once during the startup `pwsh -noprofile -c echo 1`. I will pursue this lead in my follow-up PRs, which will be out soon.",
      "created_at": "2018-12-03T18:26:54Z",
      "updated_at": "2018-12-03T18:42:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. My comment above:\r\n> In fact, we come from one point - ScriptBlock.CreateDelayParsedScriptBlock(\"string\", isProductCode: true).\r\nI don't review in depth but I don't found the pattern \"isProductCode: false\". Perhaps we could implement separate code path.\r\n\r\n2. We have some frozen PRs from @powercode which can increase overall performance and speed up startup too.\r\n\r\n3.  I will push a PR for using Unicode simple case folding that seed up too.",
      "created_at": "2018-12-04T04:21:29Z",
      "updated_at": "2018-12-04T04:21:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Can you elaborate a bit on the `unicode simple case folding`? I'm not sure what that is.",
      "created_at": "2018-12-04T20:38:02Z",
      "updated_at": "2018-12-04T20:38:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw See here for the discussion on that: https://github.com/PowerShell/PowerShell/issues/8120",
      "created_at": "2018-12-04T20:40:22Z",
      "updated_at": "2018-12-04T20:40:22Z"
    }
  ],
  "created_at": "2018-11-27T04:56:17Z",
  "number": 8341,
  "state": "closed",
  "title": "Improve powershell startup time",
  "updated_at": "2019-05-09T21:06:37Z"
}