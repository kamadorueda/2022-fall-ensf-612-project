{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6944",
  "author": "bergmeister",
  "body": "In the early days when `PowerShell` was still in Alpha state, the `AppVeyor` build took only 10 minutes, now it is nearly half an hour. This was very convenient for me as an early contributor where I could make minor changes without having to setup a dev environment locally and just download the MSI.\r\n![image](https://user-images.githubusercontent.com/9250262/40586019-2a413df8-61b3-11e8-8ea5-371c4f2ef703.png)\r\n\r\nThe free version of AppVeyor can run only 1 job at a time, but using the paid account that is used for PR builds, we can run multiple jobs in parallel when using a [build matrix](https://www.appveyor.com/docs/build-configuration/#build-matrix). They were originally designed for easy building and testing against different configurations and platforms (`PSScriptAnalyzer` uses them as well [here](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/appveyor.yml)) but we could still leverage that by splitting the whole build into independent chunks that will then run in parallel on separate AppVeyor VMs:\r\n- Quick build and running the Pester unit test suite\r\n- Running the XUnit tests\r\n- Running the Pester system tests (e.g. JEA, Admin tests, etc.) that take quite a while\r\n- Running the expensive feature tests\r\n- Full Build (CrossGen, MSI , etc) that produces artifacts.\r\n\r\nUsing this approach, I guess we should be able to go back to times of 10-15 minutes and also receive more test/artifact results faster due to the parallel nature.",
  "closed_at": "2018-06-11T21:18:52Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "A problem is that we should first build a crossgened release and then run tests with the build.\r\nI remember that we had to do specially some xUnit tests sequential.",
      "created_at": "2018-05-27T16:41:32Z",
      "updated_at": "2018-05-27T16:44:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister I'm Ok with this if it means that feature tests are run on every single PR. I think it presents a decent compromise between the need to ensure things aren't broken and making quick changes in markdown. Though, we'd need to ensure it doesn't make becoming a first time contributor to the project an overly burdensome experience too.",
      "created_at": "2018-05-27T17:02:10Z",
      "updated_at": "2018-05-27T17:02:10Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n> A problem is that we should first build a crossgened release and then run tests with the build.\r\n\r\nAs far as I know AppVeyor does not support a similar concept to VSTS with Build and Release tasks where the Release (test) tasks use the artifact from the build. [Parallel testing](https://www.appveyor.com/docs/parallel-testing/) does not seem to have something in there that we could use for PowerShell tests.\r\nAll elements in the build matrix (XUnit, Unit and feature Pester tests) will need some sort of time spent on building as each matrix element is on a different VM, the advantage of parallelism would then only kick in when running the tests. If the XUnit tests need a special initialisation (different build parameters or initialisation, then we need to handle that as a test suite preparation step). Running the feature tests as a special category therefore comes 'for free' because the overall time will then be given by the longest running task. But the point is also to get different test result (and artifacts earlier). I don't know too much about the whole test suites but naively speaking I propose:\r\n- Building in Debug (without CrossGen) and running quick Pester unit tests to cover up `Debug.Assert` and race conditions and get accurate stack traces\r\n- Building in Release with CrossGen and running expensive Pester tests (Admin, JEA and possibly feature tests), depending on the duration, this can be split further\r\n- XUnit tests (with whatever build/initialisation option is required/recommended by the team)\r\n- Full Build (Release, CrossGen, etc.) that produces artifacts but also runs MSI smoke tests, etc.\r\n\r\nTo get an idea how it looks like and start small, we could try to first split only into 2 parts: Testing and ArtifactBuild\r\nIn general, depending on how it goes we could then run tests also in various configurations (Debug/Release, with/without CrossGen)\r\n\r\n@markekraus This should make it easier for first time contributors, because they know then more specifically what failed (e.g. was it a Pester tests, an XUnit test or did they break the MSI). Have a look at this PSSA run [here](https://ci.appveyor.com/project/PowerShell/psscriptanalyzer/build/1.0.2750) for example, where one can see that the tests passed on Windows PowerShell (5.1) but not PowerShell Core (Windows and Linux) and also not on WMF4.",
      "created_at": "2018-05-27T17:31:32Z",
      "updated_at": "2018-05-27T22:04:23Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I have tried a test build with the packaging happening in a different job. The results below show the potential of how simple changes can yield a big speedup. However, one needs a paid account to run multiple build jobs in parallel, therefore this benefit will only apply to PR builds. As long as we don't increase the total build time on a fork too much, then I see this still as an improvement.",
      "created_at": "2018-05-27T20:06:47Z",
      "updated_at": "2018-05-27T20:12:15Z"
    }
  ],
  "created_at": "2018-05-27T12:44:07Z",
  "labels": [
    "Area-Maintainers-Build",
    "Issue-Discussion",
    "Resolution-Fixed"
  ],
  "number": 6944,
  "state": "closed",
  "title": "Speed up AppVeyor builds by using build matrix to split into separate, parallel tasks such as unit tests, system tests and full build of artifacts",
  "updated_at": "2018-06-20T06:13:40Z"
}