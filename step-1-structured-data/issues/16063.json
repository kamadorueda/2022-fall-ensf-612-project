{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16063",
  "author": "AArnott",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nCreate a directory that contains a file whose name is literally `[[NAME]].csproj`. Then run this command from that directory:\r\n\r\n```ps1\r\ngci *csproj |% { get-content $_.FullName }\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nThe content of the file is printed to the console.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nGet-Content: An object at the specified path C:\\VS\\src\\Tests\\SolutionGenerator\\ProjectTemplates\\Lib.UWP\\[[NAME]].csproj does not exist, or has been filtered by the -Include or -Exclude parameter.\r\n```\r\n\r\nI do however note that this command (which auto-completion helps to create) works:\r\n\r\n```ps1\r\nGet-Content '.\\`[`[NAME`]`].csproj'\r\n```\r\n\r\n### Error details\r\n\r\n```console\r\n\u276f get-error\r\n\r\nException             :\r\n    Type    : System.Exception\r\n    Message : An object at the specified path C:\\VS\\src\\Tests\\SolutionGenerator\\ProjectTemplates\\Lib.UWP\\[[NAME]].csproj does not exist, or has been filtered by\r\nthe -Include or -Exclude parameter.\r\n    HResult : -2146233088\r\nTargetObject          :\r\n    Length : 74\r\nCategoryInfo          : ObjectNotFound: (System.String[]:String[]) [Get-Content], Exception\r\nFullyQualifiedErrorId : ItemNotFound,Microsoft.PowerShell.Commands.GetContentCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-Content\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 18\r\n    HistoryId        : 1\r\n    Line             : gci *csproj |% { get-content $_.FullName }\r\n    PositionMessage  : At line:1 char:18\r\n                       + gci *csproj |% { get-content $_.FullName }\r\n                       +                  ~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : get-content\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n                        at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo :\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-09-08T02:43:56Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Brackets are one of the wildcard characters that pwsh recognises. To target a file with those characters in, you can either escape them as you found, or you can use `-LiteralPath` to indicate that the path needs to be taken fully literally. When referencing FileInfo objects' FullName, generally `-LiteralPath` is a better option than the `-Path` parameter (which is the default, if you aren't specifying the parameter by name).",
      "created_at": "2021-09-07T18:16:45Z",
      "updated_at": "2021-09-07T18:16:45Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You can also just pipe the object from `gci` into `Get-Content` directly and it will use the literal path automatically `gci *csproj | get-content`.",
      "created_at": "2021-09-07T18:39:33Z",
      "updated_at": "2021-09-07T18:39:33Z"
    },
    {
      "author": "AArnott",
      "author_association": "NONE",
      "body": "Interesting. I'll use `-LiteralPath` from now on. \r\nLooking at [the docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-content?view=powershell-7.1#parameters) for this cmdlet, I see that `-Path` mentions wildcard interpretation, but it doesn't specify which characters are interpreted as wildcards, so I'm left to assume the standard set of `* ?`. Is there more documentation that I should be discovering?",
      "created_at": "2021-09-08T02:07:25Z",
      "updated_at": "2021-09-08T02:07:25Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards?view=powershell-7.1 contains more info on wildcards in PowerShell.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards\">about Wildcards - PowerShell</a></strong></div><div>Describes how to use wildcard characters in PowerShell.</div></blockquote>",
      "created_at": "2021-09-08T02:26:09Z",
      "updated_at": "2021-09-08T02:26:11Z"
    },
    {
      "author": "AArnott",
      "author_association": "NONE",
      "body": "Thanks.",
      "created_at": "2021-09-08T02:44:01Z",
      "updated_at": "2021-09-08T02:44:01Z"
    }
  ],
  "created_at": "2021-09-07T17:10:41Z",
  "number": 16063,
  "state": "closed",
  "title": "Get-Content fails with paths that contain brackets",
  "updated_at": "2021-09-08T02:44:01Z"
}