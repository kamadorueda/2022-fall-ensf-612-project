{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5168",
  "author": "rkeithhill",
  "body": "If my script `requires` PowerShell Core to run, then on Windows there is no good way to invoke a .ps1 file (say from cmd.exe or Win+r) and have Windows pick the correct version of PowerShell (PS Core or Win PS).  So yeah, this scenario requires that folks configure the `Open` verb to execute the PS1 file extension.  And there can only be one exe for \"Open\": either powershell.exe or pwsh.exe. \r\n\r\nAnother scenario is that you have a build system without support for PowerShell Core yet.  It runs Windows PowerShell.  It would be nice if Windows PowerShell could fire off the appropriate version of PowerShell Core installed on the system if it sees `#requires -Version 6` in the script.  Although using a version for this is less than satisfying.  It would be better in this case to have an edition requirement as well e.g.:\r\n\r\n```\r\n#Requires -Edition Core -Version 6.1.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think the simplest solution here might be to introduce .ps2 which would only be associated to pwsh.exe although it can still run .ps1 if explicitly passed.",
      "created_at": "2017-10-20T03:32:35Z",
      "updated_at": "2017-10-20T03:32:35Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT if we took a page from the PHP handbook, `.ps6` is a good idea. \r\n\r\nIf we took a page from the Python Handbook, we wouldn't do anything at all with file extensions. New extensions become messy and make for transitions between versions supporting multiple versions painful. I realize it would be coercive in the \"you must use `.ps6` for core\" sense, but as people begin to adopt it you start getting modules and projects with mixed extensions. Python ultimately went with the assumption that users would just have to know what they're doing. \r\n\r\nIn any case, I would urge that the decision to add a new extension not be taken lightly. It may be simplest in implementation, but it could have a massive and lasting impact on the PowerShell ecosystem as a whole.",
      "created_at": "2017-10-20T09:43:48Z",
      "updated_at": "2017-10-20T09:43:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus yes, .ps6 would be better if we decide to go that route, but we've been avoiding introducing a new extension for the reasons you mention.  The main problem I can see is that even if we add support for `#requires -v 6.1.0` which automatically tries to find 6.1.0 and execute it, it means we also need to update Windows PowerShell with that logic which means only Win10/Server2016 would get that change.  A workaround (which I don't like) is to use a batch file to wrap scripts in cases where you can't specify `pwsh.exe <script.ps1>`.  ",
      "created_at": "2017-10-20T19:00:31Z",
      "updated_at": "2017-10-20T19:00:31Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Perhaps the install of PowerShell Core on a Windows machine could introduce a \"version selector\" shim (powershell.com??) kind of like VS has when you open a SLN file (and you have multiple versions of VS that could load the SLN).  I don't anticipate this being interactive choice.  It would merely fire up Windows PowerShell unless the script required PowerShell Core - then it would fire up PowerShell Core.  \r\n\r\nI'm not particularly keen on adding a new extension.\r\n",
      "created_at": "2017-10-20T22:25:28Z",
      "updated_at": "2017-10-20T22:25:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think you're asking for shebang support.\r\n\r\nThe extension can't be the answer - new releases will always introduce features, but worse, the version of PowerShell is just one of the variables that impact whether a script will work or not.",
      "created_at": "2017-10-21T15:10:29Z",
      "updated_at": "2017-10-21T15:10:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> The extension can't be the answer - new releases will always introduce features, but worse, the version of PowerShell is just one of the variables that impact whether a script will work or not.\r\n\r\nAgreed.  \r\n\r\n> I think you're asking for shebang support.\r\n\r\nHmm, most of our shebang'd scripts at the moment run on Windows PowerShell just fine.  And it is convenient that I don't have to tell my team they all have to install PowerShell Core on Windows. \r\n\r\nAt some point though, we are going to want to use features only available in PS Core.  It seems like `#requires` is the appropriate way to declare that dependency. Although I'd prefer a new `-Edition` parameter and not solely rely on `-Version` >= 6.  Even though it isn't the plan for Windows PowerShell to ever hit v6.0 - plans change.  Better to have a more \"explicit\" declaration of what is required IMO.",
      "created_at": "2017-10-21T21:08:32Z",
      "updated_at": "2017-10-21T21:08:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`#requires` tells you when you're doing it wrong with an error.\r\n\r\nShebang runs the right version of PowerShell for you implicitly (assuming you specified the right path of course.)\r\n\r\nI'm not saying we can get shebang into Windows, but I still think it's what you're looking for.\r\n",
      "created_at": "2017-10-21T21:30:36Z",
      "updated_at": "2017-10-21T21:30:36Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "hm maybe shbang doesn't need to be in windows. If you could mix `#!` and `#requires`\r\n\r\nassuming shbang support was added in core,\r\n\r\n```powershell\r\n#Requires -Version 6.0\r\n#!c:\\path\\to\\pwsh.exe\r\n```\r\n\r\nif you tried to launch that in 5.1 it would die rightfully so. If you launch it in core it would run fine\r\n\r\n```powershell\r\n#!C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n\r\n<# some 5.1 code #>\r\n``` \r\n\r\nif launched in core, core could launch powershell.exe. if launched in powershell.exe it would just ignore the comment. \r\n\r\nThen the user just places .ps1 to run against pwsh.exe always and pwsh.exe manages the correct one based on shbang.",
      "created_at": "2017-10-21T21:58:31Z",
      "updated_at": "2017-10-21T21:58:49Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "My scenario: user opens PowerShell (v5) from start menu, goes to run my script. Oh no, my script is designed for PowerShell 6!\r\n\r\nIf the user just typed \"pwsh myscript.ps1\" it would work. But now PowerShell 5 chokes on the script with some obscure API error.\r\n\r\nI want v5 to automatically execute v6 instead when it detects some annotation. It should prefer \"pwsh\" in PATH or registry or whereever. I do not wish to hardcode any paths to pwsh in my scripts (especially given that they are crossplatform scripts).\r\n\r\n> it means we also need to update Windows PowerShell with that logic which means only Win10/Server2016 would get that change\r\n\r\nThis limitation would be perfectly acceptable for me.\r\n\r\nAlternatively to a language extension, perhaps a PowerShell module that provides some Invoke-SelfWithV6 command or equivalent?",
      "created_at": "2018-04-25T13:16:04Z",
      "updated_at": "2018-04-25T13:22:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As a workaround, you could do something like this:\r\n\r\n```powershell\r\nif ($PSVersionTable.PSVersion -lt \"6.0\")\r\n{\r\n\tpwsh -f $SCRIPT:MyInvocation.MyCommand.Path\r\n\treturn\r\n}\r\n\r\n$PSVersionTable.PSVersion\r\n```\r\n",
      "created_at": "2018-04-25T17:25:45Z",
      "updated_at": "2018-04-25T17:25:45Z"
    },
    {
      "author": "perennialmind",
      "author_association": "NONE",
      "body": "I love that @markekraus brought up python, since the python community has come up with so many takes on launching the \"right\" python. Version 3.3 added the \"py\" launcher utility, somewhat like the visual studio selector utility. One can specify a version like `py -3 script.py`, but it can also use the version from the shebang line if it's there. More comprehensive utilities (pipenv) pick up requirements from associated files. Whether the signature comprises a shebang line or the `#requires` or a `script.ps1.config`, having a utility to launch the right version of powershell for a given script would be very useful.",
      "created_at": "2018-07-13T21:24:35Z",
      "updated_at": "2018-07-13T21:24:35Z"
    }
  ],
  "created_at": "2017-10-19T17:41:07Z",
  "number": 5168,
  "state": "open",
  "title": "Need ability to make a PowerShell Core script \"automatically\" run under PowerShell Core on Windows",
  "updated_at": "2018-07-13T21:24:35Z"
}