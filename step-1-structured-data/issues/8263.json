{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8263",
  "author": "mklement0",
  "body": "The CLR provides RCWs (runtime-callable wrappers) around instances of COM components to provide managed code a seamless experience of accessing COM objects as if they were managed ones.\r\n\r\nWhen these RCWs get garbage-collected, the underlying COM object is eventually released as well.\r\n\r\nThis works as expected in C# code, but PowerShell variables seemingly never release these RCWs, as demonstrated below, at least not via variables in child scopes that have gone out of scope.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nOn Windows:\r\n\r\n```powershell\r\n# Kill any preexisting Excel instances.\r\nif (gps -ea ignore excel) { spps -name excel }\r\n\r\n# In a child scope, instantiate and quit Excel.\r\n& {\r\n  $xl = New-Object -ComObject Excel.Application\r\n  $xl.Quit()\r\n  # Without setting $x to $null or running Remove-Variable xl\r\n  # the RCW that $xl points to is never released.\r\n  # $xl = $null  # or: Remove-Variable xl\r\n}\r\n\r\n# Wait for the Excel process to disappear.\r\n@'\r\nWaiting for Excel process to disappear, which should only take a few seconds.\r\nIf waiting doesn't terminate, Excel is still alive. Press ^C to stop waiting.\r\n'@\r\nwhile (gps -ea ignore excel) {\r\n  write-host -NoNewline .\r\n  Start-sleep 1\r\n}\r\nwrite-host \"`nExcel process has terminated.\"\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe loop should exit after a few seconds, indicating that the Excel process exited.\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe loop never exits.\r\n\r\nThe only way to get the COM component to be released is by explicitly setting the `$xl` variable to `$null` or by removing the variable altogether with `Remove-Variable xl`.\r\n\r\nThis manual process should not be required.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core 6.2.0-preview.1 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\nWindows PowerShell v5.1.17134.228 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\n```\r\n",
  "closed_at": "2019-08-07T20:26:22Z",
  "comments": [
    {
      "author": "george-chakhidze",
      "author_association": "NONE",
      "body": "I can\u02bct reproduce this using Windows PowerShell `5.1.17763.134`  (Windows `10.0.17763.134`).",
      "created_at": "2018-11-16T12:39:10Z",
      "updated_at": "2018-11-16T12:39:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @george-chakhidze - I don't see it anymore either, neither in WinPS nor in PS Core; perhaps I simply didn't wait long enough. ",
      "created_at": "2019-08-07T20:26:22Z",
      "updated_at": "2019-08-07T20:26:22Z"
    }
  ],
  "created_at": "2018-11-14T03:37:00Z",
  "number": 8263,
  "state": "closed",
  "title": "COM RCWs are seemingly never garbage-collected, causing COM components to linger",
  "updated_at": "2019-08-15T14:08:04Z"
}