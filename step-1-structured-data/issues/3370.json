{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3370",
  "author": "schittli",
  "body": "Good evening\r\n\r\nIs there any real good reason why the \"Sort\" verb is reserved for PowerShell itself?\r\n(I think it proves it's necessity because PowerShell itself **needs** it, too.)\r\n\r\nIt's really common to offer special sort functions for custom objects with specific internal logic to order items.\r\n\r\n(Please don't think about offering a different verb to sort custom things. It makes no sense to distinguish internal and external verbs)\r\n\r\nKind regards, Thomas\r\n\r\n",
  "closed_at": "2019-07-24T19:01:46Z",
  "comments": [
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "I don't understand the issue - since sort is a valid verb it can be used in all noun combinations. Can you clarify what you actually want to achieve and what's blocking you?",
      "created_at": "2017-03-20T21:17:48Z",
      "updated_at": "2017-03-20T21:17:48Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "No Sort is not a valid verb. If we use it in an own module and import it, we get:\r\n\r\n> Import-Module xxx\r\n> VERBOSE: **The 'Sort-IniContent' command** in the PsIni' module was imported, but because its name **does not include an approved verb** it might be difficult to find. For a list of approved verbs, type Get-Verb.\r\n> \r\nI think there is no comprehensible reason to not allow Sort as an approved verb.\r\nKind regards, Thomas",
      "created_at": "2017-03-21T08:26:15Z",
      "updated_at": "2017-03-21T08:26:15Z"
    },
    {
      "author": "Alaknar",
      "author_association": "NONE",
      "body": "Two questions:\r\n\r\n1) Why not use `Get-SortedIniContent` instead?\r\n2) Why not use `Get-IniContent -sort` instead?\r\n\r\nThe reason, as I understand it, is that in order to sort something you use Sort-Object anyway (unless you guys so something completely different with your data).\r\n\r\nOtherwise I don't see a particular reason against adding it.",
      "created_at": "2017-03-21T10:15:28Z",
      "updated_at": "2017-03-21T10:15:28Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "Hi Alaknar\r\n\r\nthanks a lot for your proposals :-)!, \r\n> 1. Why not use Get-SortedIniContent instead?\r\n> 2. Why not use Get-IniContent -sort instead?\r\n\r\nBecause we are working with the IniContent-Object, changes its content - and at some time we would like to sort it.\r\n\r\nTherefore, I thought that \u2026 | Sort-IniContent would be more intuitive because it's similar to  \u2026 | Sort-Object.\r\n\r\nKind regards, Thomas",
      "created_at": "2017-03-21T10:42:52Z",
      "updated_at": "2017-03-21T10:42:52Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I'm struggling to understand why \r\n\r\nget-IniContent | sort-object\r\n\r\ndoesn't work for you\r\n\r\nwhy do you need another sorting mechanism",
      "created_at": "2017-03-21T11:42:07Z",
      "updated_at": "2017-03-21T11:42:07Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "\r\n> why do you need another sorting mechanism\r\n\r\nThe object in the Pipeline is a complex business object and we need a Sort-**Algorithm** to calculate it's right, \"natural order\".\r\n\r\nBecause PowerShell is used in more and more use cases (e.g. the SAP ERP uses PowerShell to access their data), I think it's the natural development to have more complex objects which needs their own Sort-\u2026 command.\r\n\r\nOur PowerShell Module offers the business logic to the user, so he can just work with the business objects.",
      "created_at": "2017-03-21T12:01:00Z",
      "updated_at": "2017-03-21T12:01:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "As I recall, the thinking was that there is are a few universal cmdlets where the PowerShell cmdlet was the only one necessary - `Sort-Object`, `ForEach-Object`, and `Where-Object` - none of those verbs are approved elsewhere.\r\n\r\n`Sort-Object` allows for some very complicated sorting via the `-Property` parameter, here is a contrived example that combines properties in a synthetic property for sorting purposes:\r\n\r\n```PowerShell\r\nclass AB { $a; $b }\r\n$data = [AB[]]$(\r\n    @{a=\"dd\";b=\"aa\"}\r\n    @{a=\"cc\";b=\"zz\"}\r\n    @{a=\"cc\";b=\"mm\"})\r\n$data | Sort-Object -Property @{e={\"{0}{1}\" -f $_.a,$_.b}}\r\n```\r\n\r\nand the output - note the synthetic property is not present, but it is properly sorted if you combine the strings.\r\n\r\n```\r\na  b\r\n-  -\r\ncc mm\r\ncc zz\r\ndd aa\r\n```\r\n\r\nI think there was also the suggestion that if this was still insufficient, that one would add a `-Sort <algorithm>` style parameter to their `Get-SpecialThing` cmdlet.",
      "created_at": "2017-03-21T16:13:21Z",
      "updated_at": "2017-03-21T16:13:38Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "Good evening\r\n\r\nThank you very much for all your support!, **but this is not a technical question.**\r\n\r\nOf course, there are ways to solve the problem to sort complex business objects.\r\nBut in fact, this is the real problem / question:\r\n\r\n1. PowerShell has the great verb-noun concept. We should not break it, because it allows us to use PowerShell in a very intuitive way.\r\n2. I'm pretty sure it's a great concept to hide complexity in Modules, so that users of our modules do not have to remember to use\r\n> $data = [AB[]]$(\r\n>     @{a=\"dd\";b=\"aa\"}\r\n>     @{a=\"cc\";b=\"zz\"}\r\n>     @{a=\"cc\";b=\"mm\"})\r\n> $data | Sort-Object -Property @{e={\"{0}{1}\" -f $_.a,$_.b}}\r\n\r\n\u2026 just to get business objects in the right order.\r\n\r\n3. To add a -sort argument to a Get-SpecialThing cmdlet breaks the great verb-noun rule, because we would like to Sort something and not to get something in a sorted way.\r\n\r\nConclusion:\r\n1. The best way to sort Complex Objects should be Sort-BusinessObjects. Because it has the expected verb-noun naming: Sort a Business Object.\r\n2. It does not make to reserve Verbs for internal commands, just to have them reserved. ;-)\r\n\r\nYou probably recognize that english is my foreign language and I'm fighting with words. A lot. :-)",
      "created_at": "2017-03-21T17:46:49Z",
      "updated_at": "2017-03-21T17:46:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could try to save this cmdlet universal and add the ability to specify not only `Property` but also `Method/Class/Interface` for sorting.",
      "created_at": "2017-03-21T18:08:20Z",
      "updated_at": "2017-03-21T18:08:20Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "First, I totally ack that certain objects and types require complex business logic for proper sorting. That's a very real business problem, so the question from here is \"what's the right technical solution to solve that business problem?\"\r\n\r\nAFAIK, the original intention of reserving `Sort` was to discourage users from writing all sorts of custom sorting cmdlets that are incompatible with one another. The fact that anything *can* be sorted with `Sort-Object` lends itself to being the \"One True Way\" to sort objects. For discoverability's sake, you don't have users having to cycle through `Sort-Int`, `Sort-String`, `Sort-MyObjectFoo`, etc. until they get the right one. \r\n\r\nFrom that perspective, I think the right solution here is to expose some sort of way for you to implement the proper custom sort method in your own output type. For instance, maybe if you implement a `SortObject` method for your output type, we run that thing by default with `Sort-Object` (or maybe you put an attribute on some method or whatever, you get the point). \r\n\r\nThat way, you can house that custom logic in the cmdlet itself, and users can continue to use `Sort-Object` as they would with any other object. \r\n\r\nSide note @schittli: your English is fantastic. I genuinely didn't notice until you said something. Thanks for being patient with us. \ud83d\udc4d ",
      "created_at": "2017-04-18T23:03:17Z",
      "updated_at": "2017-04-18T23:03:17Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Also, just to confirm, you're not blocked on your scenario here, right? A verbose message gets thrown, but that shouldn't actually prevent you from exporting the cmdlet (at least I'd hope so). ",
      "created_at": "2017-04-18T23:04:02Z",
      "updated_at": "2017-04-18T23:04:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have Issue to add interface support in PowerShell classes. This automatically enhance `Sort-Object` capabilities.",
      "created_at": "2017-04-19T03:50:48Z",
      "updated_at": "2017-04-19T03:50:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello @SteveL-MSFT It seems this discussion is exhaustive and it should not be kept open - either allowed or rejected.",
      "created_at": "2019-07-12T08:42:39Z",
      "updated_at": "2019-07-12T08:42:39Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "The most useful solution would be \r\nif PowerShell would allow adding approved verbs to the internal list of approved verbs.\r\n\r\nThat's why: 7 of 10 used modules (from public libraries) creates this warning:\r\n\r\n```\r\nImport-Module xxx\r\nVERBOSE: The \u2026 command in was imported, \r\nbut because its name does not include an approved verb it might be difficult to find.\r\n```\r\n\r\nBecause this warning is displayed **very often**, it is taken ad absurdum - and users just disable it.\r\n\r\n#### Therefore, module developers should be able to extend the list of approved verbs.\r\n#### Thus we get back the usefulness of this warning.\r\n\r\n",
      "created_at": "2019-07-12T09:20:28Z",
      "updated_at": "2019-07-12T09:20:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@schittli The @PowerShell/powershell-committee has approved new verbs in PSCore6.  Allowing module developers to extend the list of approved verbs is counter to the concept of an approved verb list making it easier to discover cmdlets as well as maintaining consistency so that you don't have multiple verbs that mean similar things.\r\n\r\n@iSazonov I believe this is answered, so closing this issue.",
      "created_at": "2019-07-24T19:01:46Z",
      "updated_at": "2019-07-24T19:01:46Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> 2. I'm pretty sure it's a great concept to hide complexity in Modules, so that users of our modules do not have to remember to use\r\n> \r\n> > $data = [AB[]]$(\r\n> > @{a=\"dd\";b=\"aa\"}\r\n> > @{a=\"cc\";b=\"zz\"}\r\n> > @{a=\"cc\";b=\"mm\"})\r\n> > $data | Sort-Object -Property @{e={\"{0}{1}\" -f $_.a,$_.b}}\r\n> \r\n> \u2026 just to get business objects in the right order.\r\n> \r\n\r\nJust define the correct default property key for your object type and you are all set.",
      "created_at": "2020-08-05T14:06:30Z",
      "updated_at": "2020-08-05T14:06:30Z"
    }
  ],
  "created_at": "2017-03-20T00:28:55Z",
  "number": 3370,
  "state": "closed",
  "title": "Why should Sort be a reserved verb and invalid for modules / commands?",
  "updated_at": "2020-08-05T14:06:30Z"
}