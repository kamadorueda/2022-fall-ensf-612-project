{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12411",
  "author": "mklement0",
  "body": "Note: This problem will go away once #7937 is fixed.\r\n\r\nFor better or worse, if you combine `-ExpandProperty` with `-Property`, the properties passed to `-Property` are added as ETS _instance members_ to the object returned by `-ExpandProperty` (as `NoteProperty` members, as with `Add-Member`). (The way these instance members are added is flawed, as discussed in #7937.)\r\n\r\nIf the object returned happens to be an instance of a _value type_ (check with `[<type>].IsValueType`) that _isn't also a .NET primitive type_ (check with `[<type>].IsPrimitive`) - e.g., `[datetime]` - these instance members are _not_ added.\r\n\r\nThis _may_ be related to the fact that wrapping such types in `[psobject]` seems not to work _when saved to a variable_: e.g., `$v = [psobject] [datetime]::now; $v -is [psobject]` returns `$false`, even though for a reference-type instance (e.g., `[IO.DirectoryInfo]::new('/')`) or a .NET primitive type (e.g., `42`) it would return `$true`.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$o = [pscustomobject] @{ one = [datetime]::now; two = [IO.DirectoryInfo]::new('/') }\r\n\r\n# OK: reference-type instance [IO.DirectoryInfo] is properly decorated\r\n#     with the [datetime] instance as NoteProperty 'one'\r\n$newValue = $o | Select-Object -ExpandProperty two -Property one\r\n$newValue.one | Should -BeOfType System.DateTime\r\n\r\n# BROKEN: The non-primitive [datetime] value-type instance is NOT\r\n#         decorated with the [IO.DirectoryInfo] instance as property 'two'.\r\n#                  Note: The Select-Object return value *must be saved in a variable*\r\n#                        for the bug to surface.\r\n$newValue = $o | Select-Object -ExpandProperty one -Property two\r\n$newValue.two | Should -BeOfType System.IO.DirectoryInfo\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe second test fails:\r\n\r\n```none\r\nExpected the value to have type [System.IO.DirectoryInfo] or any of its subtypes, but got $null with type $null.\r\n```\r\n\r\nThe reason is that the `[datetime]` instance stored in `$newValue` did _not_ receive the `.two` NoteProperty member.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.1\r\n```\r\n",
  "closed_at": "2020-04-24T14:02:38Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So during variable assignment, any struct that PowerShell thinks *might* be mutable gets explicitly unboxed and reboxed.  This is only during variable assignment, for example `([psobject](Get-Date)) -is [psobject]` returns true.\r\n\r\nThe conditions which cause PowerShell to assume the struct is mutable are:\r\n\r\n1. The type is not a primitive or enum (which is interesting because enums *are* mutable)\r\n1. There are any public instance fields (even if they're init only)\r\n1. Any public instance properties with a set accessor\r\n1. Any public instance method (since it's not possible to tell if the method mutates the struct internally)\r\n\r\nThis is done because assigning a struct is supposed to copy the struct not the reference to it.  Since the struct is boxed in order to assign it to `object PSVariable.Value`, if this wasn't done then all non-primitive structs would essentially act like reference types in PowerShell.\r\n\r\nThat said, determining if a struct is mutable needs some work.\r\n\r\n1. Fields should be checked for init only\r\n1. Methods should be checked for `ReadOnlyAttribute` decorations\r\n1. The property check might actually be too permissive since getters can mutate. The struct should be determined mutable if there is a setter *or* if there is a getter that is not decorated with `ReadOnlyAttribute`\r\n\r\n**Edit:** actually you can just check for the `ReadOnlyAttribute` decoration on the struct itself... forgot about that.\r\n\r\nAdmittedly, 2 and 3 will result in false positives since the `readonly` syntax for methods is pretty new in C#.\r\n\r\nAlso if the struct is explicitly boxed in a `psobject`, ideally it wouldn't be unboxed.  At the very least it'd be nice if the `psobject` ETS members were copied.  I don't think it's currently possible to make the determination of whether the boxing was explicit though.",
      "created_at": "2020-04-22T12:39:14Z",
      "updated_at": "2020-04-22T13:47:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate the illuminating explanation, @SeeminglyScience.\r\n\r\nSo if I understand correctly, the problem occurs when the `[psobject]`-wrapped `[datetime]` instance with its _wrapper-attached_ ETS member (`storeTypeNameAndInstanceMembersLocally` is `$true`) is saved to a variable, because the wrapper is lost.\r\n\r\nTherefore, fixing  #7937 will indeed fix this particular problem too: if the ETS member is no longer attached to the wrapper and uses the resurrection tables instead, the problem will go away.\r\n\r\nCan I ask you to create a separate issue for the suggested enhancements to detecting whether a non-primitive value-type instance (struct) is mutable?\r\n\r\n@iSazonov, can you please label this issue and #7937 a bug?\r\nIf @SeeminglyScience agrees with my assessment, we can close this one and simply link here from #7937.\r\n\r\n---\r\n\r\n> which is interesting because enums _are_ mutable\r\n\r\n`[enum].IsValueType` is `$false`, but from what I gather only because it is an _abstract_ class; for the same reason, its base class, `[ValueType]` - somewhat paradoxically - reports `$false` for  `[ValueType].IsValueType` as well.\r\n\r\nAny _concrete_ enum implementation (and any concrete value type in general) self-reports as a value type (e.g., `[PlatformId].IsValueType`), so it shouldn't be mutable, right?\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-04-22T17:40:05Z",
      "updated_at": "2020-04-24T14:49:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I appreciate the illuminating explanation, @SeeminglyScience.\r\n> \r\n> So if I understand correctly, the problem occurs when the `[psobject]`-wrapped `[datetime]` instance with its _wrapper-attached_ ETS member (`storeTypeNameAndInstanceMembersLocally` is `$true`) is saved to a variable, because the wrapper is lost.\r\n> \r\n> Therefore, fixing #7937 will indeed fix this particular problem too: if the ETS member is no longer attached to the wrapper and uses the resurrection tables instead, the problem will go away.\r\n\r\nResurrection tables would actually make it worse sorta.  They work by reference, so in this case the key would be the boxed struct.  Since the struct is explicitly unboxed and reboxed, the reference isn't the same anymore.\r\n \r\n> Can I ask you to create a separate issue for the suggested enhancements to detecting whether a non-primitive value-type instance (struct) is mutable?\r\n\r\n\ud83d\udc4d \r\n\r\n> Any _concrete_ enum implementation (and any concrete value type in general) self-reports as a value type (e.g., `[PlatformId].IsValueType`), so it shouldn't be mutable, right?\r\n\r\nStructs can be (and often are) mutable (struct refers to any value type that isn't a primitive iirc).\r\n\r\nBut yeah concrete enums are definitely technically mutable.  Languages just hide that.\r\n\r\n```powershell\r\n$a = [Reflection.BindingFlags]::Instance\r\n$a.value__ = 30\r\n$a.ToInt32($null)\r\n# 30\r\n```",
      "created_at": "2020-04-22T17:58:35Z",
      "updated_at": "2020-04-22T17:58:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also I feel like I should mention that while enums are technically mutable structs, in all other CLI languages (or at least most, but probably all) they're treated more like constants.  For instance, in C# this method:\r\n\r\n```csharp\r\npublic static BindingFlags M()\r\n{\r\n    return BindingFlags.Instance;\r\n}\r\n```\r\n\r\nIs translated into these CIL instructions:\r\n\r\n```cil\r\n.method public hidebysig static \r\n    valuetype [System.Private.CoreLib]System.Reflection.BindingFlags M () cil managed \r\n{\r\n    // Method begins at RVA 0x2050\r\n    // Code size 2 (0x2)\r\n    .maxstack 8\r\n\r\n    IL_0000: ldc.i4.4\r\n    IL_0001: ret\r\n}\r\n```\r\n\r\nWhere `ldc.i4.4` means \"load an int32 with a value of 4 to the stack\".\r\n\r\nIn PowerShell, the actual boxed struct is passed around instead.",
      "created_at": "2020-04-22T18:51:24Z",
      "updated_at": "2020-04-22T18:54:04Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience  WRT to the copying of value types, the goal was to be efficient. Copying all value types (e.g. `int`) was a significant performance. hit. Fortunately the .NET team guidance was to make value types immutable, so there wouldn't be many. So a quick check for mutability was all that was needed. Accidently copying an immutable value type was fine - it just slowed things down a bit. But not copying a mutable type was bad. Ultimately what drove all of this was the fact that the PowerShell console API used mutable value types..  Without the copy fix you couldn't use the PowerShell APIs from PowerShell.  (Note: this is very old code from _before_ CLR 2 was released.)",
      "created_at": "2020-04-22T20:49:21Z",
      "updated_at": "2020-04-22T20:49:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @bpayette  and @SeeminglyScience.\r\n\r\n@SeeminglyScience, I had mistakenly conflated the fundamental inability to obtain a _reference_ to a value-type instance with the in/ability of a value-type instance to modify _itself_ (via methods and settable properties).\r\n\r\nI've used the `.value__` property in the past, never knowing that you can also _set_ it; incidentally, it seems that this property is undocumented - or am I missing something?\r\n\r\n\r\n",
      "created_at": "2020-04-22T21:55:38Z",
      "updated_at": "2020-04-22T21:55:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I've used the `.value__` property in the past, never knowing that you can also _set_ it; incidentally, it seems that this property is undocumented - or am I missing something?\r\n\r\nIt's documented in [EMCA 335 \u00a7I.8.5.2](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf#page=53&zoom=100,0,96) under `CLS Rule 7`.\r\n\r\nThat said, the name is an implementation detail.  Naming the field `value__` is required for CLS compliance, but the CLR itself only requires that the concrete type define exactly one instance field.",
      "created_at": "2020-04-22T22:08:40Z",
      "updated_at": "2020-04-22T22:10:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience:\r\n\r\n> Resurrection tables would actually make it worse sorta. They work by reference, so in this case the key would be the boxed struct\r\n\r\nBut that means that we should clone the resurrection-table entry for the new boxed value, just as you suggested copying the wrapper-attached ETS members (which with the fix for #7937 would all but go away)?\r\n\r\nIf so, it sounds like we should probably create another issue, to complement #12430:\r\n\r\nOn variable assignment, when a mutable struct is detected and re-boxing is necessary:\r\n* copy any wrapper-attached ETS members \r\n* copy any resurrection-table entries.\r\n\r\nIf you agree, could you please create this issue?\r\n\r\nAlso, is the following edge case unavoidable?\r\n\r\n```powershell\r\nPS> Add-Type 'public struct Foo { public int Bar; }'; ($val = [Foo]::new()).Bar = 1; $val.Bar\r\n0\r\n```\r\n\r\nI presume that a copy was created on assignment to `$val`, which doesn't see the assignment performed on the original value, in the context of the expression.\r\n",
      "created_at": "2020-04-23T20:29:06Z",
      "updated_at": "2020-04-23T20:29:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * copy any resurrection-table entries.\r\n> \r\n> If you agree, could you please create this issue?\r\n\r\nMmm, that's getting real messy. I don't think I want that so I'll leave that to you.\r\n\r\n> Also, is the following edge case unavoidable?\r\n\r\nYeah\r\n\r\n> I presume that a copy was created on assignment to `$val`, which doesn't see the assignment performed on the original value, in the context of the expression.\r\n\r\nI haven't looked into the specifics of that interaction in the binder, but I can tell you why that appears to be the behavior I would expect.  Value types are just that, a value. They aren't necessarily a reference to a specific place in memory like a reference type is.  If you aren't specifically setting a member of a reference to the value type (in PS that pretty much only means a variable expression, in C# it's any managed pointer or memory location like a local, a `ref`, a field, etc), then you're interacting with a copy.",
      "created_at": "2020-04-23T20:55:23Z",
      "updated_at": "2020-04-23T20:55:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Mmm, that's getting real messy. I don't think I want that\r\n\r\n* If this is a _philosophical_ objection, please elaborate - to me it seems like the PSv3+ equivalent to your copy-the-wrapper-attached-ETS-members suggestion.\r\n\r\n* If you think the _implementation_ would be tricky - that's precisely why I asked for your help.\r\n\r\nAs for the edge case:\r\n\r\nTo be clear: I think it's probably too exotic a scenario to worry about, but I wanted to understand the underpinnings.\r\n\r\nUnlike C#, PowerShell enables constructs such as `($var = ...).property = ...`, i.e., also _assigning_ to the expression on the LHS, and it is reasonable to assume that the instance captured in variable `$var` inside the `(...)` is also the one operated on by  the assignment, irrespective of whether it's a value-type or reference-type instance.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-04-23T21:58:12Z",
      "updated_at": "2020-04-23T21:58:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > Mmm, that's getting real messy. I don't think I want that\r\n> \r\n> * If this is a _philosophical_ objection, please elaborate - to me it seems like the PSv3+ equivalent to your copy-the-wrapper-attached-ETS-members suggestion.\r\n\r\nIt's different.  One is just cloning a wrapper, the other is stuffing more data in a static lookup table.  Just feels messy.  I realize that's not super helpful but I wouldn't post that as a reason not to do it, just as a reason why I don't personally want to spend time on it.\r\n\r\n> irrespective of whether it's a value-type or reference-type instance.\r\n\r\nThat's a reasonable expectation when you're used to mostly dealing with reference types, but that's not how value types work.\r\n\r\nIn the same why that you may expect this example to be different:\r\n\r\n```powershell\r\n$a = [ValueTuple]::Create(10)\r\n$b = $a\r\n$b.Item1 = 30\r\n\r\n$a.Item1\r\n# still 10\r\n$b.Item1\r\n# 30\r\n```\r\n",
      "created_at": "2020-04-23T22:28:54Z",
      "updated_at": "2020-04-23T22:28:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 BTW it's worth noting that it's not necessarily just a PS problem.  While PS has it's own funkiness with structs, they confuse most C# developers as well.  Because of those wild behavior differences, it's explicitly advised against creating mutable structs [in the official design guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/struct).\r\n\r\nOf course that doesn't mean there are zero reasons to define a mutable struct.  They're great in incredibly performance sensitive code and interop, but without intimate knowledge of their behavior they're confusing for everyone.",
      "created_at": "2020-04-24T01:00:51Z",
      "updated_at": "2020-04-24T01:00:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience \r\n\r\nRe coping resurrection-table entries:\r\n\r\n> just as a reason why I don't personally want to spend time on it.\r\n\r\nUnderstood; as it turns out, there is no need: it looks like the behavior is already implemented:\r\n\r\n```powershell\r\nAdd-Type 'public struct Foo { public int x; }'\r\n$v1 = [Foo]::new(); $v1.x = 1; $v1 | Add-Member foo bar\r\n$v2 = $v1\r\n$v1.x = 2; $v1.foo = 'new'\r\n$v1, $v2\r\n```\r\n\r\nThe result shows that the variable values are independent (re-boxing occurred) and that the ETS instance member was copied too:\r\n\r\n```none\r\nfoo x\r\n--- -\r\nnew 2\r\nbar 1\r\n```\r\n\r\nThis means that fixing  #7937 will also fix this issue (I just tried), and I personally see no need to deal with wrapper-attached ETS members, given that they will be all but eliminated with this fix, so I'm closing this.\r\n",
      "created_at": "2020-04-24T14:02:38Z",
      "updated_at": "2020-04-24T14:02:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for value types: \r\n\r\nYes, mutable ones can get confusing, and it is unfortunate that when you define `struct`s they are mutable _by default_, and that you have to go out of your way to indicate immutability (`readonly`).\r\n\r\nYour `[ValueTuple]` example is a different scenario: `$b = $a` clearly creates a copy of `$a`, and there's no mystery.\r\n\r\nMy concern was that if the following works:\r\n\r\n```powershell\r\nAdd-Type 'public struct Foo { public int x; }'\r\n$v = [Foo]::new(); $v.x = 1; $v.x # -> 1\r\n```\r\n\r\nby the worldview _that PowerShell presents_, the following should be equivalent, but isn't:\r\n\r\n```powershell\r\nAdd-Type 'public struct Foo { public int x; }'\r\n($v = [Foo]::new()).x = 1; $v.x # -> !! 0\r\n```\r\n\r\nThere is no good _conceptual_ reason for variable `$v` to receive a _copy_ of the instance produced by the expression - you should be operating on a single instance that, as a side effect, you store in a variable.\r\n\r\nBy sheer coincidence, #12470 was just reported, which shows a less exotic scenario that is a more obvious head-scratcher:\r\n\r\nIn C#, this works as expected (you can run this as-is in `dotnet-script`):\r\n\r\n```csharp\r\n// -> 1, as expected.\r\npublic struct Foo { public int x; } var arr = new Foo[1]; arr[0].x = 1; arr[0].x\r\n```\r\n\r\nThat is, the value-type instance that is part of the array could be modified in place.\r\n\r\nThe seemingly equivalent PowerShell code malfunctions:\r\n\r\n```PowerShell\r\n# -> !! 0\r\nAdd-Type 'public struct Foo { public int x; }'; $arr = [Foo[]]::new(1); $arr[0].x = 1; $arr[0].x\r\n```\r\n\r\n@vexx32 has [pointed out](https://github.com/PowerShell/PowerShell/issues/12470#issuecomment-618735729) that you _can_ make this work:\r\n\r\n```PowerShell\r\n# -> 1, thanks to the [object[]] (!) type constraint.\r\nAdd-Type 'public struct Foo { public int x; }'; [object[]] $arr = [Foo[]]::new(1); $arr[0].x = 1; $arr[0].x\r\n```\r\n\r\n\r\n\r\nNeedless to say, this is both highly obscure and shouldn't be necessary.\r\n\r\n\r\n\r\n",
      "created_at": "2020-04-24T14:28:52Z",
      "updated_at": "2020-04-24T14:28:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Part of the issue is that PS's indexing operator is a bit of a custom implementation since it supports things like `$arr[-1]` to get the last item, as `$arr[0..4]` to get multiple entries (similar to a slice).\r\n\r\nWIth a value-type array, this means every indexing operation you do is inherently boxed, which has to copy the original value, so `$array[0]` in that particular case gets you a _copy_ of the item in that index and not the original item. \r\n\r\nNot sure that's really avoidable without re-architecting a significant amount of PS's engine code.",
      "created_at": "2020-04-24T14:56:47Z",
      "updated_at": "2020-04-24T14:56:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> by the worldview _that PowerShell presents_, the following should be equivalent, but isn't:\r\n> \r\n> ```powershell\r\n> Add-Type 'public struct Foo { public int x; }'\r\n> ($v = [Foo]::new()).x = 1; $v.x # -> !! 0\r\n> ```\r\n> \r\n> There is no good _conceptual_ reason for variable `$v` to receive a _copy_ of the instance produced by the expression - you should be operating on a single instance that, as a side effect, you store in a variable.\r\n\r\nYou can't return a *reference* to the value, that's the difference. `($v = [Foo]::new())` is basically sugar for `$($v = [Foo]::new(); $v)`.  You're no longer performing a member access on the *variable* you're performing a member access on the variable's *output*, which is a copy.\r\n\r\n> By sheer coincidence, #12470 was just reported, which shows a less exotic scenario that is a more obvious head-scratcher:\r\n> \r\n> In C#, this works as expected (you can run this as-is in `dotnet-script`):\r\n\r\nSo it works in C# because by default it's accessing a *reference* to the value.\r\n\r\nFor instance, take a look [at this SharpLab](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYGYAE9MGFMDeqmJ2WMCAbJgCoCmAzsANoC6mAagIYQCujAbmKkM2ACyYAsgAowAO2CZ5AEzoAPADRKFmAG49+ASkLDSpbn0bMV61gDoAGpgC8eg3SEozAX1S+UqKJMAE68AMaK9EwmXiJY8ooOnt5AA=).\r\n\r\n```csharp\r\npublic class C {\r\n    public static Test[] Values;\r\n\r\n    public void M(int index, int value) {\r\n        Values[index].X = value;\r\n    }\r\n}\r\n\r\npublic struct Test {\r\n    public int X;\r\n}\r\n```\r\n\r\nLook at the CIL generated for the method `M`:\r\n\r\n```\r\nIL_0000: ldsfld valuetype Test[] C::Values\r\nIL_0005: ldarg.1\r\nIL_0006: ldelema Test\r\nIL_000b: ldarg.2\r\nIL_000c: stfld int32 Test::X\r\nIL_0011: ret\r\n```\r\n\r\nSpecifically notice it's using [ldelema](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelema?view=netframework-4.8) or \"Load Element Address\".  In order to modify the same data stored in the array, you need to operate on the specific place in memory where it resides.  C# can do this easily because it's static and has the whole picture of what is going to be done to it.\r\n\r\nThe way the PowerShell compiler works, you can't do that.  Every element is processed as a individual piece.  So when you're compiling that index operation, if you wanted to enable modifying the struct you would need to return the managed pointer.  Unfortunately, you can't box a managed pointer.  Even if you could, the rest of the compiler would have to know 1. that it needs to do an indirect access, 2. what data the reference is pointing to, 3. when to access it or when to continue to pass it as a ref.\r\n\r\nEven if all that was solved, the API that PowerShell relies *heavily* on in the compiler (`System.Linq.Expressions.Expression`) doesn't support ref variables.  It just throws if you try to make one.",
      "created_at": "2020-04-24T15:02:57Z",
      "updated_at": "2020-04-24T15:05:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32 and @SeeminglyScience  - as always, I appreciate the technical deep dive.\r\n\r\n> You can't return a _reference_ to the value, that's the difference. `($v = [Foo]::new())` is basically sugar for `$($v = [Foo]::new(); $v)`. You're no longer performing a member access on the _variable_.\r\n\r\nThat's the _technical_ explanation, and there may be no way around it, but it strikes me as much more likely that a user will conceive of `($v = [Foo]::new()).foo = 1` as follows: set the `.foo` property on a new `Foo` instance that is in the process also stored in variable `$v`.\r\n\r\nIn other words: \r\n* That the value stored in `$v` is not the value acted upon in the property assignment is counter-intuitive.\r\n* It amounts to a _broken promise of an l-value_: your assignment is essentially _discarded_ (another instance of a leaky abstraction).\r\n\r\nThe same goes for the array example - again, good technical reasons notwithstanding.\r\n\r\nThe only silver lining is that mutable value types aren't common, and you don't have the problem with reference types.\r\n\r\nBut when the problem does happen, PowerShell users not intimately familiar with PowerShell's implementation and possibly not even with the value-type/reference-type dichotomy - something you normally do _not_ have to worry about in PowerShell - will be at a loss to  make sense of the behavior.\r\n\r\nIt sounds like _documenting these limitations_ is called for; please see:\r\n\r\n* https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5833 (array case)\r\n\r\n* https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5834 (in-expression assignment)\r\n\r\nPlease review and comment there, as necessary. \r\nAlso, are there other scenarios that should be documented?\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-04-24T16:15:44Z",
      "updated_at": "2020-04-24T16:15:44Z"
    }
  ],
  "created_at": "2020-04-21T20:18:10Z",
  "number": 12411,
  "state": "closed",
  "title": "Select-Object -ExpandProperty combined with -Property fails to add ETS instance members to non-primitive value types",
  "updated_at": "2020-04-29T14:50:09Z"
}