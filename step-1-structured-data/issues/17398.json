{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17398",
  "author": "GingerSnap-xx",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nCreate a string representing array of arrays with one root element that contains an array of two strings.\r\nCreate a string representing array of arrays with two root element that contains an array of two strings each.\r\nConvert them from json. Call them $foo and $bar respectively.\r\nAddress $foo's first items first index and assert that it is equal to $bar's first item's first index.\r\n\r\nThe first index of the first index should be the whole string \"abc\", however it is collapsing it down to an array of strings, and yielding back the first index of the string e.g. \"a\"\r\n\r\nPS Snippet:\r\n```\r\n$foo = ConvertFrom-Json '[[\"abc\",\"def\"]]'\r\n$bar = ConvertFrom-Json '[[\"abc\",\"def\"],[\"ghi\",\"jkl\"]]'\r\n$foo[0][0]\r\n$bar[0][0]\r\n$foo[0][0] -eq $bar[0][0]\r\n$foo[0][0] -eq $bar[0][0][0]\r\n$foo[0][0][0] -eq $bar[0][0][0]\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS> $foo = ConvertFrom-Json '[[\"abc\",\"def\"]]'\r\n>> $bar = ConvertFrom-Json '[[\"abc\",\"def\"],[\"ghi\",\"jkl\"]]'        \r\n>> \r\n>> $foo[0][0]\r\n>> $bar[0][0]\r\n>> $foo[0][0] -eq $bar[0][0]\r\n>> $foo[0][0] -eq $bar[0][0][0]\r\n>> $foo[0][0][0] -eq $bar[0][0][0]\r\nabc\r\nabc\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS> $foo = ConvertFrom-Json '[[\"abc\",\"def\"]]'\r\n>> $bar = ConvertFrom-Json '[[\"abc\",\"def\"],[\"ghi\",\"jkl\"]]'        \r\n>> $foo[0][0]\r\n>> $bar[0][0]\r\n>> $foo[0][0] -eq $bar[0][0]\r\n>> $foo[0][0] -eq $bar[0][0][0]\r\n>> $foo[0][0][0] -eq $bar[0][0][0]\r\na\r\nabc\r\nFalse\r\nTrue\r\nTrue\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.4\r\nPSEdition                      Core\r\nGitCommitId                    7.2.4\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\nImage showing behavior in Firefox console behaving as expected just for comparison.\r\n![image](https://user-images.githubusercontent.com/1896889/169589120-3caa3e0a-29bc-4c81-be92-1332bcc28538.png)\r\n",
  "closed_at": "2022-05-24T21:00:44Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This is not specific to `convertFrom-Json`. PowerShell has a somewhat eccentric, but long established behaviour . \r\n```\r\nPS> $x = @(@(@(\"ABC\",\"DEF\")))\r\nPS> $x.count\r\n2 \r\n```\r\n\r\nYou might think `$x` would have one member, which has one member which has two members, but the inner members get promoted.   \r\n```\r\nPS>  $y = @(@(@(\"ABC\",\"DEF\",\"GHI\")),$null)\r\nPS>  $y.count\r\n2\r\n\r\nPS>  $y[0].count\r\n3\r\n```\r\nAdding a null to the topmost array keeps it as an array, but the next levels have done a similar promotion. \r\n\r\nAnd just when you think \"OK so one member arrays aren't treated as arrays at all then?\" \r\n```\r\nPS<  $z = @(123)\r\nPS>  $z.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n```\r\n\r\nUnless you convert it to a Boolean - many items are always true, even if each is false, a single converts to Boolean as if it wasn't in an array.\r\n```\r\nPS>  $z -as [boolean]\r\nTrue\r\n\r\nPS>  $z = @(0)\r\nPS>  $z -as [boolean]\r\nFalse\r\n\r\nPS>  $z = @(0,0)\r\nPS>  $z -as [boolean]\r\nTrue\r\n```\r\n\r\n\"Fixing\" this quirk would introduce subtle bugs into existing scripts.\r\n\r\n",
      "created_at": "2022-05-21T13:46:55Z",
      "updated_at": "2022-05-21T13:46:55Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-24T21:00:43Z",
      "updated_at": "2022-05-24T21:00:43Z"
    }
  ],
  "created_at": "2022-05-20T18:18:54Z",
  "labels": [
    "Resolution-By Design",
    "Needs-Triage"
  ],
  "number": 17398,
  "state": "closed",
  "title": "ConvertFrom-Json not properly handling an array of arrays with one element.",
  "updated_at": "2022-05-24T21:00:44Z"
}