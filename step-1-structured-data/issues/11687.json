{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11687",
  "author": "ghost",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nRegister-ScheduledJob -Name test -ScriptBlock { Write-Output \"test\" } -RunNow                                                                                               \r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nId         Name            JobTriggers     Command                                  Enabled\r\n--         ----            -----------     -------                                  -------\r\n1          test            0                Write-Output \"test\"                     True\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nRegister-ScheduledJob: Cannot bind parameter 'ScriptBlock'. Cannot convert the \" Write-Output \"test\" \" value of type \"System.String\" to type \"System.Management.Automation.ScriptBlock\".\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-02-05T00:33:27Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Definitely a regression from Windows PowerShell. It sounds like it may be related to this behavior: #4218",
      "created_at": "2020-01-26T22:36:19Z",
      "updated_at": "2020-01-26T22:36:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The module is not Core compatible and is loaded by compatibility feature.\r\n/cc @anmenaga ",
      "created_at": "2020-01-27T09:33:59Z",
      "updated_at": "2020-01-27T09:33:59Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "It may be being loaded via compatibility,  it is still broken. To release like this is poor, and WILL generate further issues. It seems to me import-module should refuse to load modules that simply do not work and probably never will (unless msft teams wake up and redevelop them). Fortunately that list is pretty small.\r\n\r\nWhy not a **unsupported.json** file in the $pshome folder that lists those modules that are really not usable. Import module would then just not load them. That list could then be updatable as things improve.00\r\n\r\nA workaround is to use remoting and run the command in a proper winrm session. The help text probably needs to explain that.\r\n ",
      "created_at": "2020-01-27T10:18:24Z",
      "updated_at": "2020-01-27T11:20:18Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just curious!\r\n\r\nWhen you run the following command:\r\n```\r\nPS [573] > Get-Module -l ScheduledTasks\r\n\r\n\r\n    Directory: C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n\r\nModuleType Version    PreRelease Name                                PSEdition ExportedCommands\r\n---------- -------    ---------- ----                                --------- ----------------\r\nManifest   1.0.0.0               ScheduledTasks                      Core,Desk {Get-ScheduledTask, Set-ScheduledTask, \u2026\r\n\r\nPS [582] >\r\n```\r\nIt show that module PSEdition \"Core,Desk\".\r\n\r\nThis is leading people to believe that this module will run in both Windows PowerShell and PowerShell 7.\r\n\r\nIf this is not true, my understanding is, this is a bug!\r\n\r\n```\r\nPS [582] > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS [596] >\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2020-01-27T15:43:33Z",
      "updated_at": "2020-01-27T15:43:33Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Good catch Max - you are right about the ScheduledTask  I took a look at the module manifest for this module and it does indeed state this is a Core,Desktop based module.  But that is not I suspect the issue.\r\n\r\nBut whatever, it's a very poor user experience and I am sure one that is highly likely to generate more issue reports. \r\n\r\n",
      "created_at": "2020-01-27T15:58:29Z",
      "updated_at": "2020-01-27T16:53:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`Register-ScheduledJob` comes from a _different_ module, namely `PSScheduledTasks` (note the `PS` prefix).\r\n\r\nThat module doesn't show as such in PS Core at all: `Get-Module -l PSScheduledJob` has no output.\r\n\r\nI know little about this integration mechanism, but that a WinPS-only module's commands would implicitly be available is a double-edged sword, for technical reasons: \r\n\r\nWhile convenient on the one hand, it is important for the user to know that a hidden `powershell.exe` process (WinPS) is being utilized to execute the command, which has two important implications:\r\n\r\n* Degraded performance\r\n\r\n* More importantly, _loss of type fidelity_ both on input and output, due to use of the serialization infrastructure (of necessity).\r\n\r\n\r\n",
      "created_at": "2020-01-27T16:09:24Z",
      "updated_at": "2020-01-27T16:09:57Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 you are right that there is a loss of fidelity. \r\n\r\nIf you manually load the module, it does give a message:\r\n\"WARNING: Module PSScheduledJob is loaded in Windows PowerShell using WinPSCompatSession remoting session; please note that all input and output of commands from this module will be deserialized objects. If you want to load this module into PowerShell Core please use 'Import-Module -SkipEditionCheck' syntax.\"\r\n\r\nThe issue here is that commands in the module break in a non-actionable way. It would almost be better to NOT import these modules than to appear to succeed but have cmdlets that fail in a non-obvious way.\r\n\r\nI do not think the current experience is one we want to go live with.",
      "created_at": "2020-01-27T17:26:28Z",
      "updated_at": "2020-01-27T17:26:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like the implicit remoting layer isn't converting the scriptblock -> string back to scriptblock?  cc @PaulHigin ",
      "created_at": "2020-01-27T17:39:56Z",
      "updated_at": "2020-01-27T17:39:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, yes, that's why I linked to #4218, where @BrucePay stated that [this behavior is by design](https://github.com/PowerShell/PowerShell/issues/4218#issuecomment-314851921):\r\n\r\n> Historically this is by design. Serializing scriptblocks with fidelity resulted in too many places where there was automatic code execution so to facilitate secure restricted runspaces, scriptblocks are always deserialized to strings.\r\n\r\nGiven that deserialization by itself shouldn't result in code execution, I've always been puzzled by this, so I wonder if it's time to revisit the issue; sounds like by (securely) fixing this behavior, a whole class of bugs relating to the WinPS compatibility feature may go away.\r\n\r\nP.S.: It's good to hear that there's a warning when _manually_ importing modules exposed via the WinPS compatibility feature, but you may never see it, given that these modules are apparently auto-loaded.",
      "created_at": "2020-01-27T17:49:23Z",
      "updated_at": "2020-01-27T21:21:10Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This has nothing to do with implicit remoting.\r\n\r\nScheduled jobs were not supported in PowerShell Core, but now seem to be building in PS7.  When was this added to PS7?  None of the tests have been ported and the feature still appears not to work in Core.",
      "created_at": "2020-01-27T18:02:13Z",
      "updated_at": "2020-01-27T18:02:13Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Oh, I see this is loading the module via WinPS compatibility work.",
      "created_at": "2020-01-27T18:04:27Z",
      "updated_at": "2020-01-27T18:04:27Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "cc @anmenaga ",
      "created_at": "2020-01-27T18:06:50Z",
      "updated_at": "2020-01-27T18:06:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If scriptblocks are by-design not deserialized, then I don't see how we can support any cmdlets that accept scriptblocks via implicit remoting.  If that is the case, then we could detect that a cmdlet accepts such parameter types and not import it or not generate a proxy for that parameterset.  This will, of course, create it's own user experience problem.",
      "created_at": "2020-01-27T19:08:16Z",
      "updated_at": "2020-01-27T19:08:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> we could detect that a cmdlet accepts such parameter types and not import it or not generate a proxy for that parameterset. This will, of course, create its own user experience problem.\r\n\r\nCertainly preferable to the current situation.\r\n\r\nHowever, what I was suggesting is to _investigate if changing the historical behavior is an option_, as it has always been an unexpected inconsistency that can cause problems in explicit end-user scenarios too. \r\n\r\nI personally don't know enough about this, but based on the design-rationale quoted above, it sounds like we'd need to simply make sure that PowerShell-_internally_ no accidental execution occurs (not sure when and why that would happen).\r\n\r\nFrom the _user_'s perspective, a script block should deserialize as such, and it is their responsibility, as always, to decide if and when to invoke it.\r\n\r\nFor old code that worked around the limitation, this change should have little no impact, given how `[scriptblock]` instances stringify:\r\n\r\n```powershell\r\n# The following should be equivalent\r\n[scriptblock]::create(\" 'foo' \") # convert from string\r\n[scriptblock]::create({ 'foo' }) # redundant conversion from script block, which old code may end up doing\r\n```\r\n\r\nHypothetically, old code that tries to access `[string]` properties on a deserialized script block could break, however - hopefully, this falls into bucket 3.\r\n",
      "created_at": "2020-01-27T19:44:47Z",
      "updated_at": "2020-01-27T21:20:48Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Sorry! For some reason, I thought the cmdlet was part of the PSScheduledTasks module.  \r\nSo, why did PSScheduledJob module missed the PowerShell 7 boat? \r\n\r\nI understand that this module won't be ported cross-platform. I think it should be included in PowerShell 7. \r\n\r\nI thought that the intention of running Windows Module in PowerShell Core was to make them compatible. Unless there are plans not to support PSScheduledJob module in the future.\r\n\r\n:)\r\n\r\n",
      "created_at": "2020-01-27T19:52:46Z",
      "updated_at": "2020-01-27T19:52:57Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It is not just script blocks, the ScheduledJob classes (ScheduledJobDefinition, ScheduledJob, ScheduledJobTrigger, etc.) are not designed to work over remoting.  I think this module will have to be disallowed for Windows PowerShell compatibility.\r\n\r\nThe remoting layer automatically passes script block string contents, and this is the right thing to do.  A ScriptBlock object is far too complex to try and serialize/deserialize.",
      "created_at": "2020-01-27T20:34:50Z",
      "updated_at": "2020-01-27T20:34:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> not designed to work over remoting\r\n\r\nGood to know; perhaps an explicit exclusion list, as suggested by @doctordns above, is the way to go then.\r\n\r\nI was too narrowly focused on the serialization issue, for which I've opened a new issue: #11698\r\n\r\nJust briefly:\r\n\r\n> A ScriptBlock object is far too complex to try and serialize/deserialize.\r\n\r\nThat is not what I was suggesting - no  change to the _serialization_ part is required -  which is a simple _string_ representation inside a `<SBK>` element.\r\n\r\n_Update_: However, `$using:` references wouldn't be supported this way.\r\n\r\nThe only change required is to call  `[scriptblock]::Create()` on the serialized text _automatically_ on _deserialization_ -analogous to how it works when you pass a script block to `Invoke-Command -ComputerName ...` for remote execution.\r\n\r\n\r\n\r\n",
      "created_at": "2020-01-27T21:20:15Z",
      "updated_at": "2020-01-30T12:56:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I previously suggested making this feature (WinPS compatible) turned off by default because of a lot of issues and make it opt-in - user should explicitly enable a _cmdlet_ he want to get.\r\n",
      "created_at": "2020-01-28T06:53:52Z",
      "updated_at": "2020-01-28T06:53:52Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Standing back, PowerShell 7 needs a good baked in compatibility story. Otherwise, current Windows PowerShell users are not going to be interested. Not being able to use Best Practices, WSUS, AD Deployment, PSSehcduled jobs - may not be to most IT Pro's taste. This lack of support is a turn off to wider adoption.\r\n\r\nI believe PowerShell 7 needs a good back-compat story. Turning this off as @iSazonov suggests is not the best one we can deliver. \r\n\r\nBut whatever, we need to decide what the RTM behaviour will be. We are getting close to RTM and unless this is locked down tight NOW, I fear an RC3 might be needed.",
      "created_at": "2020-01-28T12:31:23Z",
      "updated_at": "2020-01-28T12:31:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Turning this off as @iSazonov suggests is not the best one we can deliver.\r\n\r\nBest is port all modules :-) Really there are a lot of incompatible modules and incompatible cmdlets. This is unpredictable if not ported, so the only reliable way is to turn on only what you need and test.",
      "created_at": "2020-01-28T12:46:24Z",
      "updated_at": "2020-01-28T12:46:24Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I agree with @doctordns \r\n\r\nWe need to bring this up in the next PowerShell Community Meeting. \r\nThis way it will be on their list.\r\n\r\n:)\r\n\r\n",
      "created_at": "2020-01-28T13:15:56Z",
      "updated_at": "2020-01-28T13:16:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From my Windows Server 2019:\r\n```powershell\r\nPS C:\\install\\publish> $Desktop=Get-Module -PSEdition Desktop -All -ListAvailable\r\nPS C:\\install\\publish> $core=Get-Module -PSEdition Core -All -ListAvailable\r\nPS C:\\install\\publish> $Desktop.Count\r\n60\r\nPS C:\\install\\publish> $core.Count\r\n52\r\n```\r\nIt is 87%. _It doubled in a year_! And this work continues. ",
      "created_at": "2020-01-28T13:35:50Z",
      "updated_at": "2020-01-28T13:35:50Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I believe PowerShell 7 needs a good, strong, and workable implementation. ANY error message must be actionable and relevant to the task the IT Pro is trying to carry out with PowerShell.\r\n\r\nWe know some modules are not likely to be usable any time soon within PowerShell 7. The WSUS team, for example, have a huge job to get rid of SOAP and make their cmdlets do the work and to not reply on methods. With the benefit of hindsight, that design should never have gone forward, but such is life.\r\n\r\nI am coming to the view that we have three classes of modules: Those that are native, those that work using PSCompat, and those that are 'broken' and are not usable directly from within PowerShell 7. Those that can not be used are the ones that present a problem. I also think we need a solution that enables \"bad\" modules to not be loaded and is flexible to change.",
      "created_at": "2020-01-28T14:06:05Z",
      "updated_at": "2020-01-28T14:06:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We agreed to add a denyList in 7.0 to explicitly not allow importing this module via the Windows PowerShell compatibility transport.  The denyList needs to be enforced whether the import is implicit or explicit using the `-UseWindowsPowerShell` switch.",
      "created_at": "2020-01-29T23:08:47Z",
      "updated_at": "2020-01-29T23:09:30Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "When does this start to hit the Daily BUild?",
      "created_at": "2020-02-03T16:05:59Z",
      "updated_at": "2020-02-03T16:05:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@doctordns Next day after #11726 will be merged.",
      "created_at": "2020-02-03T17:05:10Z",
      "updated_at": "2020-02-03T17:05:10Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11726, which has now been successfully released as `v7.0.0-rc.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.3)\n",
      "created_at": "2020-02-21T23:55:18Z",
      "updated_at": "2020-02-21T23:55:18Z"
    }
  ],
  "created_at": "2020-01-26T20:33:42Z",
  "number": 11687,
  "state": "closed",
  "title": "Bug in 7.0.0-rc.2: Register-ScheduledJob ScriptBlock parameter doesn't work",
  "updated_at": "2020-02-21T23:55:18Z"
}