{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12240",
  "author": "PaulHigin",
  "body": "# Summary of the new feature/enhancement\r\n\r\nForeach-Object -parallel currently runs each loop iteration in a runspace initialized to its default state.  But users might reasonably expect the runspace state to be the same as the runspace state running the foreach-object cmdlet.\r\n\r\nThis feature idea is to add a new `-UseCurrentState` (or something) switch that transfers the current runspace state to each parallel loop iteration runspace.\r\n\r\nThis would ensure that any modules imported or defined functions are available to each foreach -parallel script.  \r\n\r\nIt is not clear how much of the current runspace state can or should be transferred to the loop runspaces, for example defined global variables are problematic since they are likely not thread safe.\r\n\r\nExample:\r\n```powershell\r\nNew-PSDrive -Name ZZ -PSProvider FileSystem -Root c:\\temp\r\n1..1 | ForEach-Object -Parallel -UseCurrentState {\r\n    # Should have access to ZZ drive\r\n    dir ZZ:\r\n}\r\n\r\nImport-Module -Name c:\\temp\\Modules\\MyModule.psd1\r\n1..1 | ForEach-Object -Parallel -UseCurrentState {\r\n    # Should have access to MyModule functions\r\n    Get-MyInfo -Name Hello\r\n}\r\n```\r\n\r\nThis needs to be opt in since it will be a performance hit.  Some users will likely be unhappy in the performance degradation for simple scenarios.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is a response to other issues created against foreach -parallel, where there is a reasonable expectation that the script block is run in the current state.\r\n#12239",
      "created_at": "2020-04-01T15:59:35Z",
      "updated_at": "2020-04-01T15:59:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps current state should be default and new switch \"-UseDefaultRunspaceState\".",
      "created_at": "2020-04-02T13:23:37Z",
      "updated_at": "2020-04-02T13:23:37Z"
    },
    {
      "author": "somescout",
      "author_association": "NONE",
      "body": "May I suggest that if a -Parallel switch is specified, it is expected that only one thing has changed - that For-EachObject will become parallel, and not that the code block will work differently.",
      "created_at": "2020-04-07T13:41:18Z",
      "updated_at": "2020-04-07T13:44:23Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@somescout  That would be ideal, but is not possible.  There are too many issues.  One is performance; replicating runspace state is time and resource intensive, and many times not even necessary.  Another is multi-threaded issues.  Much single thread code simply doesn't work in multi-threaded environments.\r\n\r\nLike anything, there are trade offs to be made.   I feel the best solution is to provide options along with guidance to help the user know and understand the optional benefits and trade offs.",
      "created_at": "2020-04-07T16:09:50Z",
      "updated_at": "2020-04-07T16:09:50Z"
    },
    {
      "author": "somescout",
      "author_association": "NONE",
      "body": "> One is performance; replicating runspace state is time and resource intensive, and many times not even necessary\r\n\r\nPremature optimization. If there will be significant performance issues, it can be solved by \"-Isolated\" switch. But if isolation is a default - it will cause too much unpredictable behavior in parallelized code (you add -Parallel switch and your code silently produce wrong result - worst possible behavior).\r\n\r\n> Another is multi-threaded issues. Much single thread code simply doesn't work in multi-threaded environments.\r\n\r\nThen there should be separated parallelization commandlet, like Start-Job.\r\n\r\n> I feel the best solution is to provide options along with guidance to help the user know and understand the optional benefits and trade offs.\r\n\r\nIs it really worth adding a another feature, the problems with which can be found only by trial and error? (People Don't Read Instructions)",
      "created_at": "2020-04-07T17:08:57Z",
      "updated_at": "2020-04-07T19:27:29Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Linking in related issue: #12313",
      "created_at": "2020-04-14T20:09:00Z",
      "updated_at": "2020-04-14T20:09:00Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Per, #12378, we should also consider allowing passing in script block variables if the client runspace state is replicated.  The script block would be re-created/re-parsed within the new runspace so that it will have affinity to that runspace and run correctly.  We still have potential threading issues of any shared variable referenced in the script block, but variables and multi-threading are potential problems anyway, which a user needs to be aware of.",
      "created_at": "2020-04-20T16:10:27Z",
      "updated_at": "2020-04-20T16:10:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we could have three options to cover all scenarios:\r\n- clean runspace\r\n- clean runspace with parameters\r\n- replicated runspace with parameters",
      "created_at": "2020-04-21T10:47:18Z",
      "updated_at": "2020-04-21T10:47:18Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There will also be issues with PowerShell classes defined in the current runspace. They will not exist in the new runspaces. Hard problem, for sure.",
      "created_at": "2020-05-12T07:41:47Z",
      "updated_at": "2020-05-12T07:41:47Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov and @somescout - I've been thinking about the default sunspace - should by default Foreach -parallel use current (dirty) runspace or, by default, use default (clean) runspace.  It seems to me that as an admin, I would expect my current (dirty) runspace to be available when I use the -parallel switch.  While this makes intuitive sense for an admin - It just works - I wonder if the performance impact (which may be incurred for no real reason) have such a negative impact that admins would no longer see a benefit to -parallel. With this in mind, I tend to agree with @PaulHigin that the sunspace is clean.  Thoughts?",
      "created_at": "2020-07-29T16:33:09Z",
      "updated_at": "2020-07-29T16:33:09Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I think I like `sunspace` better than `runspace` :).  But this is a great question.  The current runspace running ForEach-Object -Parallel could have accumulated a lot of state that is not needed for running the parallel script blocks, and transferring that state to each parallel runspace could have a major performance impact.  So my inclination is to make state transfer opt-in.  I haven't yet thought about exactly what state should be transferred.",
      "created_at": "2020-07-29T16:51:14Z",
      "updated_at": "2020-07-29T16:51:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think `opt-in` in right direction. We could have options that transfer - from fastest clean runspace from a pool to slowest one with full features.\r\nAs side notice, we have an issue for runspace performance creation without any progress but we could investigate this too.",
      "created_at": "2020-07-29T17:02:38Z",
      "updated_at": "2020-07-29T17:02:38Z"
    },
    {
      "author": "somescout",
      "author_association": "NONE",
      "body": "@theJasonHelmick, I, actually, don't know what to think now: it's not just runspace problem, there also issue with non-thread safe objects that can't be easily replicated to runspace:\r\n```powershell\r\n$obj = New-Object -ComObject Some.Object\r\n$array | % {\r\n  $obj.DoSomething($_)\r\n}\r\n```\r\nIt -Parallel is used, it will break script regardless of dirty or clean runspace is used.\r\n\r\nMay be it is not a good idea in first place to try to implement it as a part of ForEach-Object - a separate commandlet, or, may be, Start-Job with -AsRunspace and something to throttle jobs. Because everyone (who used Start-Job) is familiar how it handle local variables so there will be no broken expectations.",
      "created_at": "2020-07-29T17:09:14Z",
      "updated_at": "2020-07-29T17:09:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@somescout there's already `Start-ThreadJob` with all of that, it's been available since 6.x iirc. \ud83d\ude42 ",
      "created_at": "2020-07-29T18:39:05Z",
      "updated_at": "2020-07-29T18:39:05Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@somescout  Yeah, we have been aware of multi-threaded issues with ForEach-Object -Parallel since the beginning, but ultimately felt it was still worth doing.  But script writers need to have some knowledge and use best practices, such as thread safe types if shared over parallel running script blocks.",
      "created_at": "2020-07-29T20:38:01Z",
      "updated_at": "2020-07-29T20:38:01Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This work should include ensuring that experimental features are correctly enabled in the parallel running runspaces.  \r\n#14602 ",
      "created_at": "2021-01-12T17:43:46Z",
      "updated_at": "2021-01-12T17:43:46Z"
    },
    {
      "author": "mcascone",
      "author_association": "NONE",
      "body": "I vote for providing the option of runspace (sunspace) copying, perhaps not as default, so that we can use it, and take on the responsibility of dealing with the known gaps. Other issues aside, not being able to use the working runspace is worse than having to be aware of edge cases where it might be unsafe/unreliable. In most cases, especially when the user is aware of the caveats, the benefits would far outweigh the downsides. Thanks for reading.",
      "created_at": "2021-04-21T18:44:16Z",
      "updated_at": "2021-04-21T18:44:16Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Also consider extending PSScriptRoot into each foreach scriptblock (Issue #15302).  Not sure yet if this makes sense for all cases.",
      "created_at": "2021-04-26T16:30:49Z",
      "updated_at": "2021-04-26T16:30:49Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Also consider built-in variables (Issue #14672).",
      "created_at": "2021-04-28T21:22:19Z",
      "updated_at": "2021-04-28T21:22:19Z"
    },
    {
      "author": "whitTech",
      "author_association": "NONE",
      "body": "> @iSazonov and @somescout - I've been thinking about the default sunspace - should by default Foreach -parallel use current (dirty) runspace or, by default, use default (clean) runspace. It seems to me that as an admin, I would expect my current (dirty) runspace to be available when I use the -parallel switch. While this makes intuitive sense for an admin - It just works - I wonder if the performance impact (which may be incurred for no real reason) have such a negative impact that admins would no longer see a benefit to -parallel. With this in mind, I tend to agree with @PaulHigin that the sunspace is clean. Thoughts?\r\n\r\nAs another admin, I also expect my runspace to be (very) dirty. And while I love performance just as much as the next admin (I mean it, please don't stop optimising for performance!), I've noticed parallelisation performance concerns around these parts tend to be significantly exaggerated (I've personally found it to be incredibly fast in basically all my admin-y scenarios, despite the abundance of caution stated [that the man himself](https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature) would have you believe. @PaulHigin, you don't give yourself enough credit for your amazing work!).\r\n\r\nThese days NVMe SSD's are ubiquitous and we have more cores/threads than we know what to do with. What kind of real-world performance hits are we actually talking about in each given scenario? The hits would have to be galactic in impact to have me switching away from parallelisation when I'm applying WSUS patches to computers across my domain that can take an hour to apply (and yes, I use parallelisation for very small things too, it's equally awesome). \r\n\r\nWith regard to the opt-in/opt-out debate, when I'm solving a problem, the priority order is as follows: Efficacy > Reliability > Performance, not the other way around. I want to build an effective solution as simply as possible, _then_ I will mess about with performance and other aspects if necessary. Therefore, assuming performance isn't genuinely crippled, I do hope end-user simplicity prevails and we opt for an opt-out approach, if possible. ",
      "created_at": "2022-01-29T01:42:03Z",
      "updated_at": "2022-01-29T02:11:15Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Thanks for you input and kind words.  Unfortunately, this task has been deprioritized and I have been busy working on other things.  But I still hope to get back to this in the Spring.",
      "created_at": "2022-02-04T23:35:53Z",
      "updated_at": "2022-02-04T23:35:53Z"
    },
    {
      "author": "whitTech",
      "author_association": "NONE",
      "body": "No worries at all. \r\n\r\nThe issue forced me to properly develop my modules and ensure they're properly distributed throughout my environments. More work, but I'm glad I have finally gotten around to it. \r\n\r\nThanks again, @PaulHigin. You and the other Powershell developers deserve much more than a few kind words for the effort you contribute to this wonderful tool. ",
      "created_at": "2022-02-05T00:52:02Z",
      "updated_at": "2022-02-05T00:52:02Z"
    }
  ],
  "created_at": "2020-04-01T15:53:49Z",
  "number": 12240,
  "state": "open",
  "title": "Provide option in ForEach-Object -parallel to transfer current runspace state",
  "updated_at": "2022-02-05T00:52:02Z"
}