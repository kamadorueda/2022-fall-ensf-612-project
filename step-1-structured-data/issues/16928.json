{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16928",
  "author": "TheOnlyWei",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs a user, I want Get-Date to be consistent between windows powershell and powershellcore so I don't have to maintain separate, customized scripts for windows powershell and powershellcore.\r\n\r\nIf you run the following command, you get a decimal value in windows powershell and an integer value in powershellcore.\r\n`(Get-Date -Date (Get-Date).AddSeconds(-60).ToUniversalTime() -UFormat %s)`\r\n\r\nThis should be consistent between the two so I can use the same script between windows powershell and powershell core.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n_No response_",
  "closed_at": "2022-02-28T21:00:40Z",
  "comments": [
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Seems like an intentional change made here: https://github.com/PowerShell/PowerShell/pull/4805 for the sake of consistency with the standard.  \r\nIf you want your script to work in both versions without having to add a version check condition you can parse it as a double and then round it `[System.Math]::Round([double]::Parse((Get-Date -UFormat %s)))`",
      "created_at": "2022-02-26T05:04:51Z",
      "updated_at": "2022-02-26T05:04:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, we fixed formatting to follow _standards_.\r\nSo it is by design.",
      "created_at": "2022-02-26T07:32:57Z",
      "updated_at": "2022-02-26T07:32:57Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n`[int](Get-Date -Date (Get-Date).AddSeconds(-60).ToUniversalTime() -UFormat %s)`\r\nor   \r\n`[decimal](Get-Date -Date (Get-Date).AddSeconds(-60).ToUniversalTime() -UFormat %s)`\r\n\r\n\r\nWill work in a script that runs on both versions.  Most real world scripts won't be affected by the difference \r\n\r\n",
      "created_at": "2022-02-26T20:04:38Z",
      "updated_at": "2022-02-26T20:04:38Z"
    },
    {
      "author": "TheOnlyWei",
      "author_association": "NONE",
      "body": "@MartinGC94 Okay, so I gather that powershell 5 is not following the standard? Any plans to update that? My main concern was understanding why it is different, and whether powershell 5 or powershell 7 is in the wrong.",
      "created_at": "2022-02-26T22:51:36Z",
      "updated_at": "2022-02-26T22:51:36Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I only looked over the change briefly so I don't know. I assume the change was to many it more accurate so yes, PowerShell 7 must be the most correct one.",
      "created_at": "2022-02-27T00:38:58Z",
      "updated_at": "2022-02-27T00:38:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Any plans to update that?\r\n\r\nNo, Windows PowerShell gets only critical (security) updates, all new features will be only in PowerShell 7+.",
      "created_at": "2022-02-27T18:20:55Z",
      "updated_at": "2022-02-27T18:20:55Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-02-28T21:00:39Z",
      "updated_at": "2022-02-28T21:00:39Z"
    }
  ],
  "created_at": "2022-02-26T00:29:36Z",
  "number": 16928,
  "state": "closed",
  "title": "Inconsistent Get-Date behavior between windows powershell and powershellcore",
  "updated_at": "2022-02-28T21:00:40Z"
}