{
  "_url": "https://github.com/PowerShell/PowerShell/issues/656",
  "author": "vors",
  "body": "## Problem\n\nHaving product code in the submodule of the main project makes the simplest fix a [commit dance](https://github.com/PowerShell/PowerShell/blob/master/docs/OperationalNotes.md#commit-dance).\nThe simple workflow is highly desirable to speed-up on-boarding.\n\nHaving `psl-monad` submodule makes sd<->git integration easier.\nMeanwhile, it's possible to have a reasonable level of separationg and move psl-monad from submodule to a folder in the super-project.\n### Proposal\n1. Move `psl-monad\\monad` to root level `monad` folder.\n2. Move `psl-monad\\wmi` to root level `wmi` folder.\n\nThe reason behind it: make `git cherry-pick` from **gitsd admin** repo match one-to-one.\nThis way we keep sd -> git story pretty clear. Question: can we keep simple cherry-pick workflow, but teach it to map root folder into `src\\monad`?\n-  2 branches would be still around in PowerShell/PowerShell: `master` and `source-depot`.\n-  It's important to save git history.\n### Execution plan\n- We can achieve the desired result with a simple merge of two repos:\n\nFrom PowerShell\n\n```\ngit remote add monad github.com/PowerShell/psl-monad\ngit merge monad/master\ngit checkout -b source-depot\ngit merge monad/source-depot\n```\n\ncc @andschwa @zach-folwick @SteveL-MSFT @JamesWTruher \n\nUPD:\n### Inventarisation\n\nTree below shows the folder structure.\nNeed dig into some of the subtrees.\nNumber in brackets is the number of files.\n#### Legend\n\n| Mark | Meaning |\n| --- | --- |\n| :x: | no need to get anything from this folder |\n| :recycle: | need a subset from this folder |\n| :white_check_mark: | need everything from this folder |\n| :question: | investigate |\n#### Tree\n\nD:\\dev\\PowerShell\\src\\monad\n\u251c\u2500\u2500monad (26803)\n\u2502  \u251c\u2500\u2500core_powershell (3)      :x:\n\u2502  \u251c\u2500\u2500incubation (392)        :x: @lzybkr: but we should move a couple xsd files to miscfiles\n\u2502  \u251c\u2500\u2500InstallerSignJob (3)       :x:\n\u2502  \u251c\u2500\u2500keys (9)                    :x:\n\u2502  \u251c\u2500\u2500loc (36)                     :question:\n\u2502  \u251c\u2500\u2500ManagedSignJob (3)      :x:\n\u2502  \u251c\u2500\u2500miscfiles (124)           :recycle: \n\u2502  \u251c\u2500\u2500nttargets (661)          :x:\n\u2502  \u251c\u2500\u2500prototypes (2)           :x:\n\u2502  \u251c\u2500\u2500Providers (83)           :question: @lzybkr: maybe not needed\n\u2502  \u251c\u2500\u2500ScriptSignJob (13)        :x:\n\u2502  \u251c\u2500\u2500Setup (972)              :question: \n\u2502  \u2502\n\u2502  \u251c\u2500\u2500src (5403)\n\u2502  \u2502  \u251c\u2500\u2500Activities (227)                   :white_check_mark: @lzybkr: we need it for workflow\n\u2502  \u2502  \u251c\u2500\u2500build (3)                           :x:\n\u2502  \u2502  \u251c\u2500\u2500cimSupport (41)                :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500cmdletDesigner (440)        :x:\n\u2502  \u2502  \u251c\u2500\u2500commands (504)               :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500CoreCLR (5)                    :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500DotNetCode (31)              :question: \n\u2502  \u2502  \u251c\u2500\u2500DscSupport (1)                 :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500engine (523)                    :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500graphicalhost (210)           :x:\n\u2502  \u2502  \u251c\u2500\u2500help (429)                        :recycle: \n\u2502  \u2502  \u251c\u2500\u2500host (1136)                      :recycle: \n\u2502  \u2502  \u251c\u2500\u2500LocalAccounts (30)            :question: \n\u2502  \u2502  \u251c\u2500\u2500logging (13)                     :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500m3p (168)                     :question: \n\u2502  \u2502  \u251c\u2500\u2500minishell (20)                :recycle: \n\u2502  \u2502  \u251c\u2500\u2500namespaces (38)           :question: \n\u2502  \u2502  \u251c\u2500\u2500oneget (535)                 :question:\n\u2502  \u2502  \u251c\u2500\u2500OSS (89)                      :x:\n\u2502  \u2502  \u251c\u2500\u2500PSGetAddOn (2)           :question: \n\u2502  \u2502  \u251c\u2500\u2500PSReadline (37)            :x:\n\u2502  \u2502  \u251c\u2500\u2500samples (579)               :question: \n\u2502  \u2502  \u251c\u2500\u2500ScheduledJob (31)        :question: \n\u2502  \u2502  \u251c\u2500\u2500ScriptAnalyzer (174)      :x:\n\u2502  \u2502  \u251c\u2500\u2500sdk (12)                       :question: :\n\u2502  \u2502  \u251c\u2500\u2500security (28)                 :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500singleshell (28)             :white_check_mark: \n\u2502  \u2502  \u251c\u2500\u2500tools (1)                      :x:\n\u2502  \u2502  \u2514\u2500\u2500utils (66)                     :white_check_mark: \n\u2502  \u2502\n\u2502  \u251c\u2500\u2500tests (15771)\n\u2502  \u2502  \u251c\u2500\u2500ci (937)                        # binplaced\n\u2502  \u2502  \u2502  \u251c\u2500\u2500Appx (3)                   :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500Lite3UnitTest (19)    :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500Lite_Template (19)   :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500MP (1)    :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500OnlineHelp (17)   :question:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500PowerShell (470)   :recycle: \n\u2502  \u2502  \u2502  \u251c\u2500\u2500PowerShellMultiMachine (1)   :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500PowerShellPerformance (7)   :question: \n\u2502  \u2502  \u2502  \u251c\u2500\u2500PowerShellStress (1)     :x:\n\u2502  \u2502  \u2502  \u251c\u2500\u2500PSGet (39)    :question: \n\u2502  \u2502  \u2502  \u251c\u2500\u2500PSOne (2)     :question: \n\u2502  \u2502  \u2502  \u251c\u2500\u2500PSWF (56)      :question: \n\u2502  \u2502  \u2502  \u2514\u2500\u2500PSWS (300)    :question:\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500\u2500citargets (955)                :recycle:  # compiled\n\u2502  \u2502  \u251c\u2500\u2500mae (3674)                   :recycle: \n\u2502  \u2502  \u251c\u2500\u2500monad (10052)             :recycle: \n\u2502  \u2502  \u251c\u2500\u2500MultiMachine (148)         :recycle:\n\u2502  \u2502  \u2514\u2500\u2500performance (4)             :question: \n\u2502  \u2502\n\u2502  \u251c\u2500\u2500UnmanagedSignJob (3)        :x:\n\u2502  \u251c\u2500\u2500V2 (263)                       :x:\n\u2502  \u2514\u2500\u2500WTR (3056)                 :x:\n\u2514\u2500\u2500wmi (105)                         :white_check_mark:\n",
  "closed_at": "2016-03-31T04:24:58Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "> Question: can we keep simple cherry-pick workflow, but teach it to map root folder into src\\monad?\n\nThis is actually where Git subtree shines. I encourage you try [it out](https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt) and read up on [subtree merging](https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging) to see if it's what you all would like.\n\nEssentially, `git subtree` let's you map one repository into another as a simple folder. You maintain one repo. You can `git subtree split -P src/monad` to obtain patches in that folder as if it were the root; yet the patches themselves can originally be committed to the \"superproject\" (in quotes because it is now one repo). You still _should_ create separate commits for changes to the subtree and other trees, but this is the case regardless.\n\nThis also merges the history together, which is a lot more difficult, as we need to get an all-clear from legal to do this. As of now, the superproject only has code that the PSL team has written since last summer, and so is not subject to any potential PowerShell \"patents.\" If we merge the history, this will no longer be true.\n\n> We can achieve the desired result with a simple merge of two repos:\n\nI wouldn't encourage this, as you lose the meta-information that using the `git subtree` script gives you. However, the end result is similar; we would just have to perform more complex subtree (not the script) merges later.\n",
      "created_at": "2016-03-12T00:47:05Z",
      "updated_at": "2016-03-12T00:47:05Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you, I will play around with subtrees, they may solve the problem for us.\n\n@SteveL-MSFT for LCA stuff, is Andy's concern about merge a problem?\n",
      "created_at": "2016-03-12T00:56:29Z",
      "updated_at": "2016-03-12T00:56:29Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I've created an example repository with every submodule replaced with subtree imports. If you want to play with it, it is [PowerShell/PowerShell-Subtree](https://github.com/PowerShell/PowerShell-Subtree).\n\nThe Pester, GoogleTest, and windows-build were squashed upon import. The OMI and provider submodules haven't been imported (unneeded for testing so far).\n\nDoing this for real would require more planning. The psl-monad code would need to be vetted and squashed upon import. OMI and the provider should probably not be included. I would hope that windows-build can be eliminated.\n",
      "created_at": "2016-03-16T19:02:05Z",
      "updated_at": "2016-03-16T19:06:11Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thanks for putting it together.\nI played a little bit: tried to update `src\\monad` subtree.\n\nWhat's the good way to put changes from subtree into the original repo (psl-monad)?\n\nThe workflow that I have in mind:\n- We replace submodule by subtree (let's do psl-monad first, the rest is not mandatory).\n- PS team switch to GitHub\n- We still want to periodically update psl-monad from `source-depot` and integrate this changes to subtree (with `subtree pull`)\n- Do we even need subtree -> psl-monad way? There is not much difference, when you trying to integrate changes back to sd.\n",
      "created_at": "2016-03-17T01:55:50Z",
      "updated_at": "2016-03-17T01:55:50Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Also `rebase` after subtree seems like a PITA http://stackoverflow.com/questions/12858199/how-to-rebase-after-git-subtree-add\n",
      "created_at": "2016-03-17T01:57:25Z",
      "updated_at": "2016-03-17T01:57:25Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Nah, it's really not too bad. You probably won't _ever_ want to rebase the `add` merge commit itself (though you can with `git rebase -i -p`, I've used it to undo them no problem). We likely won't have any subtree commits that need rebasing (which is the problematic part), since we'll squash the initial import. Commits that are descendents of the subtree merge commit can be rebased no problem; they're regular \"superproject\" repository commits.\n",
      "created_at": "2016-03-17T06:55:09Z",
      "updated_at": "2016-03-17T06:55:09Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr suggested something better then go thru the inventarisation:\n- pull code that we use for building into the appropriate assemblies subfolders\n- have a mapping script to do the integration (i.e. merge new changes from `source-depot` branch of `psl-monad`)\n- pull more code if we need it in future\n\nIf we do this, I think we skip the subtree step.\n",
      "created_at": "2016-03-18T01:22:27Z",
      "updated_at": "2016-03-18T01:22:27Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yes, that's a viable option. I like the immediate move to an organized tree.\n",
      "created_at": "2016-03-18T01:57:25Z",
      "updated_at": "2016-03-18T01:57:25Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I prepared a preview under\n\nhttps://github.com/PowerShell/PowerShell-Subtree/tree/new-master\nhttps://github.com/PowerShell/PowerShell-Subtree/tree/new-source-depot\nhttps://github.com/PowerShell/PowerShell-Subtree/tree/new-server2016\n\nPlease, take a look\n@SteveL-MSFT @FawcettJohnW @andschwa @lzybkr \n",
      "created_at": "2016-03-23T00:03:23Z",
      "updated_at": "2016-03-23T01:17:44Z"
    }
  ],
  "created_at": "2016-03-12T00:40:37Z",
  "labels": [],
  "number": 656,
  "state": "closed",
  "title": "Remove psl-monad submodule",
  "updated_at": "2016-03-31T04:25:03Z"
}