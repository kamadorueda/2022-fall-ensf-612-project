{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5749",
  "author": "mike-the-automator",
  "body": "I'd like to propose an additional parameter for the ConvertTo-Json cmdlet that specifies the caller would like the cmdlet to ignore properties of the InputObject that cannot be converted to JSON successfully.  Currently, the behavior of the cmdlet is to throw an exception with a message similar to the following\r\n\r\n`\"ConvertTo-Json : The type 'System.Collections.ListDictionaryInternal' is not supported for\r\nserialization or \"deserialization of a dictionary. Keys must be strings.`\r\n\r\nMy proposal is that if the `-SkipIncompatibleProperties` (parm name feedback appreciated :-) ) parameter is specified, then the cmdlet would silently skip over these properties and not throw any exceptions.\r\n\r\nI've been frustrated by this error several times in my scripting in situations where I don't really care about the particular property that triggered the error; I would just like a quick and easy serialized representation of the object.  In the most recent instance, I needed a way to record exception info in a VARCHAR column in SQL Server.  The property of the System.Exception that triggered this error was the \"Data\" field which I didn't really care about, but it prevented me from easily using the cmdlet to serialize the exception object.\r\n\r\nAs an aside, it looks like there is a proposal by @KirkMunro to [move the JSON cmdlets to their own module.](https://github.com/PowerShell/PowerShell/issues/3995)  I understand it may make sense to wait on this feature until the module split occurs.  ",
  "closed_at": null,
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mike-the-automator Does  `-ErrorAction SilentlyContinue` solve your specific case(s)? If not then it might be the better solution to rather tweak the error behaviour instead of adding a new parameter.",
      "created_at": "2017-12-28T16:49:42Z",
      "updated_at": "2017-12-28T16:49:55Z"
    },
    {
      "author": "mike-the-automator",
      "author_association": "NONE",
      "body": "Thanks for your response.  I tested `-ErrorAction SilentlyContinue` and that did not seem to solve my problem.  \r\n\r\nTranscript:\r\n```\r\nPowerShell v6.0.0-rc.2\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS C:\\Program Files\\PowerShell6RC2\\6.0.0-rc.2> 1/0\r\nAttempted to divide by zero.\r\nAt line:1 char:1\r\n+ 1/0\r\n+ ~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : RuntimeException\r\n\r\nPS C:\\Program Files\\PowerShell6RC2\\6.0.0-rc.2> $j = ConvertTo-Json $Error[0] -ErrorAction SilentlyContinue\r\nConvertTo-Json : The type 'System.Collections.ListDictionaryInternal' is not supported for serialization or deserialization of a dictionary. Keys must be strings.\r\nAt line:1 char:6\r\n+ $j = ConvertTo-Json $Error[0] -ErrorAction SilentlyContinue\r\n+      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (System.Collecti...tionaryInternal:ListDictionaryInternal) [ConvertTo-Json], InvalidOperationException\r\n+ FullyQualifiedErrorId : NonStringKeyInDictionary,Microsoft.PowerShell.Commands.ConvertToJsonCommand\r\n\r\nPS C:\\Program Files\\PowerShell6RC2\\6.0.0-rc.2> $j -eq $null\r\nTrue\r\n\r\n````\r\n In the scenario I envision, when the new parameter is supplied there would be no error thrown and the value of the variable `$j` would be a JSON representation of the exception objects, ignoring any fields that would have triggered the InvalidOperation exception.\r\n",
      "created_at": "2017-12-29T02:10:52Z",
      "updated_at": "2017-12-29T02:10:52Z"
    },
    {
      "author": "mike-the-automator",
      "author_association": "NONE",
      "body": "@bergmeister I have mulled over the suggestion to just change the behavior for `-ErrorAction SilentlyContinue` and my impression is that would be a counter intuitive way to achieve my goal.  It would be a breaking change for users because a scenario that used to generate an Exception would no longer do so.  \r\n\r\nAlso, silently discarding data without being explicitly told to do so feels _wrong_.  It almost feel more like an occasion to use `-Force` as more of a \"No, really this **is** what I want to do\" kind of parameter.\r\n\r\nAnother means to get the result I want would be to just create a cmdlet to strip non-JSON compliant fields of an object that would result in this error and put it in front of ConvertTo-Json in the pipeline, e.g.\r\n\r\n```\r\n\r\n$j = $Error[0] | Remove-JsonIncompatibleProperties | ConvertTo-Json\r\n\r\n```\r\n\r\nI could always create a convenience wrapper-function to eliminate the need for a long pipeline (I suck at naming things).  Given that perspective I can understand if the consensus is that the complexity/utility ratio doesn't pan out for this feature request, but I'd like to know what others think.\r\n",
      "created_at": "2017-12-30T22:18:07Z",
      "updated_at": "2017-12-30T22:18:07Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "I think it is a separate issue that ErrorAction is ignored and that it still raises an exception, but I think the correct functionality of ErrorAction with SilentlyContinue should be to return no data, not to strip out some data. \r\n\r\nI think either Force or SkipIncompatibleProperties would be a better solution as you are explicitly telling it to get rid of data. ",
      "created_at": "2018-01-03T19:40:28Z",
      "updated_at": "2018-01-03T19:40:28Z"
    },
    {
      "author": "mike-the-automator",
      "author_association": "NONE",
      "body": "@FireInWinter  Created a separate issue as requested.  I think we are in agreement that the behavior requested in this issue should be implemented as a new parameter for the reasons already stated.  \r\n\r\nI'm interested in contributing and would be happy to work on a PR for either issue, but I'd rather not invest time in this feature request if it has a low probability of being merged.  I'm not asking for a guarantee that my PR will be accepted, but it would be nice to know if I'm barking up the wrong tree here.",
      "created_at": "2018-01-04T02:07:55Z",
      "updated_at": "2018-01-04T02:07:55Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Can a maintainer please comment on the design/issue. @iSazonov @lzybkr  ?\r\n  ",
      "created_at": "2018-01-04T06:04:16Z",
      "updated_at": "2018-01-04T06:06:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My preference would be to have a `-SkipUnsupportedTypes` switch.  `-Force` is too overloaded to me.  cc @joeyaiello @HemantMahawar for suggestions on the name of the switch.",
      "created_at": "2018-01-04T06:30:10Z",
      "updated_at": "2018-01-04T06:30:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Generally, the use case you're describing is better handled using serialization based on CLIXML rather than JSON.\r\n\r\nWhat makes this more cumbersome is the fact that you must export to a (temporary) _file_ first, using `Export-CliXml`, and also read from a file, using `Import-CliXml`; however, a new pair of `ConvertTo-CliXml` / `ConvertFrom-CliXml` cmdlets that directly output / read the XML as a strings are being worked on - see #3898\r\n\r\n\r\n\r\n",
      "created_at": "2018-01-05T01:51:50Z",
      "updated_at": "2018-01-05T01:51:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 agree that if the use case is to serialize and deserialize later without care of the serialization format, CliXml is a better solution.  However, I can see cases where you want specifically json (more human readable than xml...)",
      "created_at": "2018-01-05T02:47:38Z",
      "updated_at": "2018-01-05T02:47:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nI merely restricted my comment to pointing out the CLIXML alternative, because I don't know what the right answer to the specific problem at hand is, but here are a few thoughts:\r\n\r\nA simpler way to reproduce the problem, using a hashtable with a non-string key:\r\n\r\n```powershell\r\n@{ 1 = 'one' }  | ConvertTo-Json\r\n```\r\n\r\nThe error message suggests that an explicit decision was made not to support non-string keys and to _fail_ in that event.\r\n\r\nThe alternatives - to be activated via new switch(es) - are:\r\n\r\n* simply apply `.ToString()` to non-string keys and serialize nonetheless\r\n\r\n* as suggested, _skip_ unserializable properties.\r\n\r\nGiven that JSON is not suitable for general-purpose serialization, however, I wonder if this is really necessary.\r\nGenerally, you will know what properties should be serialized ahead of time, and can filter out unsupported properties then, in the simplest case with `Select-Object -Property ...`\r\n\r\n",
      "created_at": "2018-01-05T07:58:26Z",
      "updated_at": "2018-01-05T07:58:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I wonder if this is really necessary.\r\n\r\nI wonder too. \r\nJSON is well standardized. I would have looked at what this standard says.",
      "created_at": "2018-01-05T09:20:01Z",
      "updated_at": "2018-01-05T09:20:01Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> I wonder if this is really necessary.\r\n\r\nLet's not let convenience become irrelevant in this project.\r\n\r\nI have use cases for this myself that I have had to work around. I have object `A` that has nested property `B` that cannot be serialized, but I need to upload this to a generalized logging endpoint. that expects a JSON object. I don't care about  property `B` even in the context of PowerShell or .NET. I have to create Object `C` that has everything but property `B` and then I can serialize it. Or I have to use a half dozen  other work arounds in this scenario including creatining my own JSON serialize or a proxy class.\r\n  ",
      "created_at": "2018-01-05T10:14:43Z",
      "updated_at": "2018-01-05T10:16:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This reminds me that in my [HttpListener module](https://www.powershellgallery.com/packages/HttpListener/1.0.2), I had to work around JSON serialization limitations by manually stripping types that were not supported.",
      "created_at": "2018-01-05T20:44:48Z",
      "updated_at": "2018-01-05T20:44:48Z"
    },
    {
      "author": "B-Art",
      "author_association": "NONE",
      "body": "I would suggest a function which converts all none-string values to string values before piping it to convertto-json.\r\nYou can put a select statement in between for your final json output.\r\n\r\n@{ 1 = 'one' }.getenumerator() | select key,value | ConvertTo-Json\r\nWorks....",
      "created_at": "2018-11-23T11:06:12Z",
      "updated_at": "2018-11-23T11:29:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@B-Art:\r\n\r\nThis issue is about _ignoring_ values that can't be converted to JSON.\r\n\r\nBy contrast, you're looking to for an opt-in method for _including_ such values by converting dictionary keys to strings, so I suggest you create a _new_ issue with your proposal.\r\n\r\nAs an aside, re your example: It isn't the `select` call that makes the command succeed, it is using `.GetEnumerator()`, because the latter sends a `[System.Collections.DictionaryEntry]` instance (rather than the whole hashtable) through the pipeline, which is itself not a dictionary, so the to-JSON conversion succeeds - however, that is _not_ the same as what `@{ '1' = 'one' } | ConvertTo-Json` would give you, i.e., the hashtable with stringified keys.",
      "created_at": "2018-11-26T20:04:34Z",
      "updated_at": "2018-11-26T20:04:34Z"
    },
    {
      "author": "heinrich-ulbricht",
      "author_association": "NONE",
      "body": "Greeting from 5 years later where I need this functionality in a PowerShell Azure Function.\r\n\r\nSpecifically I'm trying to convert the output of \"Get-Error\" to JSON to push it to a logging endpoint. Fails with `ConvertTo-Json: The type 'System.Collections.ListDictionaryInternal' is not supported for serialization or deserialization of a dictionary. Keys must be strings.`.",
      "created_at": "2022-06-02T10:38:49Z",
      "updated_at": "2022-06-02T10:38:49Z"
    }
  ],
  "created_at": "2017-12-27T16:23:21Z",
  "number": 5749,
  "state": "open",
  "title": "Add Parameter to ConvertTo-Json to ignore unsupported properties",
  "updated_at": "2022-06-02T10:38:49Z"
}