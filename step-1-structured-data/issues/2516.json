{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2516",
  "author": "Sarafian",
  "body": "This is regarding the [about_Requires](https://technet.microsoft.com/en-us/library/hh847765.aspx).\nCurrently if any of them appear anywhere in the script, then the condition is applied. \n\nFor example both following scripts will raised the error \n\n``` powershell\n#Requires -RunAsAdministrator\nif($false)\n{\n   Write-Host \"Only this would require admin rights\"\n}\n```\n\nand\n\n``` powershell\nif($false)\n{\n   #Requires -RunAsAdministrator\n   Write-Host \"Only this would require admin rights\"\n}\n```\n\nI understand that the above example is a bit dummy in terms of usefulness but this is what I really have in mind.\nI'm building scripts that have the potential to execute a certain logic locally or remotely. When the execution is local I want to block non-administrators like the `#Requires -RunAsAdministrator` does. But when its a remote execution, I would like my script to execute and the remote execution to raise an error same as with the `#Requires -RunAsAdministrator`. And I would like the same reasoning to be applied for the rest of the `#Requires` statements in [about_Requires](https://technet.microsoft.com/en-us/library/hh847765.aspx).\n\nHere is a small example\n\n``` powershell\n$block={\n    #Requires -RunAsAdministrator\n   Write-Host \"You are an administrator\"\n}\n\n# Prevent local execution\nInvoke-Command -ScriptBlock $block\n\n# Prevent remote execution in the remote session.\nInvoke-Command -ComputerName MECULAB12201 -ScriptBlock $block\n```\n\nBecause of the issue described above this is not possible and the entire script's execution is rejected.\n\nI know about validating with .net language but it would be nice if PowerShell offered native support for this. Example code\n\n``` powershell\n([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")\n```\n\nMy current alternative for local execution is to isolate the `#Requires -RunAsAdministrator` in a script e.g. `Test-Administrator.ps1` and conditionally execute it from the main script. It's a bit like using a cmdlet with C# style implementation but I prefer to use the native concepts when possible.\n",
  "closed_at": "2016-10-24T15:21:37Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Sarafian Thanks for feature request.\n\nI think may be better define new _global_ const as:\n\n``` powershell\n$isRunAsAdministrator = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")\n```\n\n(Today we already have similar variables: $isWindows, $PID, $HOME...)\n",
      "created_at": "2016-10-21T12:41:47Z",
      "updated_at": "2016-10-21T12:41:47Z"
    },
    {
      "author": "Sarafian",
      "author_association": "NONE",
      "body": "@iSazonov  those global consts are nice and yes the `$isRunAsAdministrator` would be a very useful one. But I still think you need to consistency in the experience that Powershell offers with the `#Requires` meta language. I find them great but I do not like how they are identified in the script's body. \n\nI would prefer them to get executed like any other command. That means even as part of a script block anywhere the script block executes.\n",
      "created_at": "2016-10-22T18:35:33Z",
      "updated_at": "2016-10-22T18:35:33Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This proposal is incompatible with the current design of `#requires` - processing of `#requires` happens at parse time before any of the script executes.\n\nIf we changed this behavior, I can imagine scripts doing weird things trying to execute in ways they weren't designed for.\n",
      "created_at": "2016-10-24T15:20:53Z",
      "updated_at": "2016-10-24T15:20:53Z"
    },
    {
      "author": "Sarafian",
      "author_association": "NONE",
      "body": "@lzybkr I was expecting something like that. But still I have a question.\n\nIf I execute a script block, shouldn't the parser do the same thing at the beginning? I would expect that a script block and a script file are loaded somehow similarly into the memory. Scripts are verified for signing but once that is ok, parsing starts. Shouldn't that be applies for the script block, especially when executed remotely? If that was possible, a `#requires` in the script or script block beginning should do the trick. \nCurrently the parser is not even checking for only the biggining. Anywhere in the body of the script, the `#requires` gets captured\n",
      "created_at": "2016-10-24T15:51:29Z",
      "updated_at": "2016-10-24T15:51:29Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Most script blocks come from files and `#requires` is enforced at the file level. Checking at the script block level would be expensive (e.g. it would slow down `foreach-object` or `where-object` unnecessarily.\n\nThat said, it could be useful remotely, but I would not encourage the use of `#requires` in that way if we supported it for remoting, instead I would encourage the use of `Invoke-Command -FilePath`.\n",
      "created_at": "2016-10-24T17:51:46Z",
      "updated_at": "2016-10-24T17:51:46Z"
    },
    {
      "author": "Sarafian",
      "author_association": "NONE",
      "body": "Didn't know `Invoke-Command -FilePath was possible. Hadn't noticed. Thanks for the tip.\nI understand the reasoning. Is there anyway to force PowerShell to verify and throw the same error message without code duplication? That could be a helpful alternative always mapping to the same user experience\n",
      "created_at": "2016-10-24T19:57:04Z",
      "updated_at": "2016-10-24T19:57:24Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I wouldn't be surprised if `Invoke-Command -FilePath` did not report any errors from `#requires` today (I didn't test it), but in my opinion, that's the scenario that should enable what you're asking for.\n\nThe api to validate script requirements is internal and expects a file, so duplicating that experience would require (pun not intended) a new api.\n",
      "created_at": "2016-10-24T20:31:35Z",
      "updated_at": "2016-10-24T20:31:35Z"
    },
    {
      "author": "Sarafian",
      "author_association": "NONE",
      "body": "Ok. From my perspectieve the subject is exhausted. I have not other arguments to support my idea :). Thank you all. \n",
      "created_at": "2016-10-24T21:16:49Z",
      "updated_at": "2016-10-24T21:16:49Z"
    }
  ],
  "created_at": "2016-10-21T07:09:13Z",
  "number": 2516,
  "state": "closed",
  "title": "Request Make #Requires script metalanguage conditional",
  "updated_at": "2016-10-24T21:16:49Z"
}