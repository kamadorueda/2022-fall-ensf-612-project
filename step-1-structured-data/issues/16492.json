{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16492",
  "author": "AnttiKurenniemi",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWorking with datetimes as strings, I noticed that the cast to [datetime] from a string previously converted using ToString() (without specifying format) fails, if the host is using Finnish locale settings.\r\n\r\nExample:\r\n\r\n```\r\nPS > $datetime = Get-Date\r\nPS > $datetime_str = $datetime.ToString()\r\nPS > $datetime_obj = [datetime]$datetime_str\r\n```\r\n\r\nI would expect that to work, but instead it throws an exception:\r\n\r\n`InvalidArgument: Cannot convert value \"19.11.2021 9.13.06\" to type \"System.DateTime\". Error: \"String '19.11.2021 9.13.06' was not recognized as a valid DateTime.\"`\r\n\r\nIt's a minor issue and easily circumvented, but I have had to fix a few scripts that trip over this, so I would suggest it is a bug or at least a \"surprise feature\" and should be corrected.\n\n### Expected behavior\n\n```console\nPS > $datetime = Get-Date\r\nPS > $datetime_str = $datetime.ToString()\r\nPS > $datetime_obj = [datetime]$datetime_str\r\n\r\n$datetime_obj now holds the same DateTime value as $datetime object.\n```\n\n\n### Actual behavior\n\n```console\nException is thrown.\n```\n\n\n### Error details\n\n```console\n> Get-Error\r\n\r\nException             :\r\n    Type           : System.Management.Automation.RuntimeException\r\n    ErrorRecord    :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Cannot convert value \"19.11.2021 10.10.01\" to type \"System.DateTime\". Error: \"Str\r\ning '19.11.2021 10.10.01' was not recognized as a valid DateTime.\"\r\n            HResult : -2146233087\r\n        CategoryInfo          : InvalidArgument: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : InvalidCastParseTargetInvocationWithFormatProvider\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : $dateime_obj = [datetime]$datetime_str\r\n            PositionMessage  : At line:1 char:1\r\n                               + $dateime_obj = [datetime]$datetime_str\r\n                               + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    Message        : Cannot convert value \"19.11.2021 10.10.01\" to type \"System.DateTime\". Error: \"Stri\r\nng '19.11.2021 10.10.01' was not recognized as a valid DateTime.\"\r\n    InnerException :\r\n        Type           : System.Management.Automation.PSInvalidCastException\r\n        ErrorRecord    :\r\n            Exception             :\r\n                Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n                Message : Cannot convert value \"19.11.2021 10.10.01\" to type \"System.DateTime\". Error:\r\n\"String '19.11.2021 10.10.01' was not recognized as a valid DateTime.\"\r\n                HResult : -2146233087\r\n            CategoryInfo          : InvalidArgument: (:) [], ParentContainsErrorRecordException\r\n            FullyQualifiedErrorId : InvalidCastParseTargetInvocationWithFormatProvider\r\n            InvocationInfo        :\r\n                ScriptLineNumber : 1\r\n                OffsetInLine     : 1\r\n                HistoryId        : -1\r\n                Line             : $dateime_obj = [datetime]$datetime_str\r\n                PositionMessage  : At line:1 char:1\r\n                                   + $dateime_obj = [datetime]$datetime_str\r\n                                   + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                CommandOrigin    : Internal\r\n            ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n        TargetSite     :\r\n            Name          : ConvertWithCulture\r\n            DeclaringType : System.Management.Automation.LanguagePrimitives+ConvertViaParseMethod, System.Mana\r\ngement.Automation, Version=7.2.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n            MemberType    : Method\r\n            Module        : System.Management.Automation.dll\r\n        Message        : Cannot convert value \"19.11.2021 10.10.01\" to type \"System.DateTime\". Error: \"\r\nString '19.11.2021 10.10.01' was not recognized as a valid DateTime.\"\r\n        Data           : System.Collections.ListDictionaryInternal\r\n        InnerException :\r\n            Type       : System.FormatException\r\n            TargetSite :\r\n                Name          : Parse\r\n                DeclaringType : datetime\r\n                MemberType    : Method\r\n                Module        : System.Private.CoreLib.dll\r\n            Message    : String '19.11.2021 10.10.01' was not recognized as a valid DateTime.\r\n            Source     : System.Private.CoreLib\r\n            HResult    : -2146233033\r\n            StackTrace :\r\n   at System.DateTime.Parse(String s, IFormatProvider provider)\r\n        Source         : System.Management.Automation\r\n        HResult        : -2147467262\r\n        StackTrace     :\r\n   at System.Management.Automation.LanguagePrimitives.ConvertViaParseMethod.ConvertWithCulture(Object valueToConvert, T\r\nype resultType, Boolean recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTab\r\nle)\r\n   at CallSite.Target(Closure , CallSite , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    HResult        : -2146233087\r\nCategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\nFullyQualifiedErrorId : InvalidCastParseTargetInvocationWithFormatProvider\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : $dateime_obj = [datetime]$datetime_str\r\n    PositionMessage  : At line:1 char:1\r\n                       + $dateime_obj = [datetime]$datetime_str\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-01T12:00:44Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Does this work?\r\n```\r\n$datetime_obj = [datetime]::Parse($datetime_str)\r\n$datetime_obj\r\n```",
      "created_at": "2021-11-19T10:18:19Z",
      "updated_at": "2021-11-19T10:18:19Z"
    },
    {
      "author": "AnttiKurenniemi",
      "author_association": "NONE",
      "body": "> Does this work?\r\n> \r\n> ```\r\n> $datetime_obj = [datetime]::Parse($datetime_str)\r\n> $datetime_obj\r\n> ```\r\n\r\nYes, that works correctly - no exception and the value of the object is what is expected.\r\n",
      "created_at": "2021-11-19T10:38:59Z",
      "updated_at": "2021-11-19T10:38:59Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": " `[datetime]` uses neutral (or en-US?) culture format to parse string value on the fly. This is not only Finnish trouble. I always use `Parse` and `ParseExact` methods in the such cases.\r\n```\r\n[datetime] '19.11.2021' # 19th month? Error.\r\n```",
      "created_at": "2021-11-19T11:33:39Z",
      "updated_at": "2021-11-19T11:33:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, given the default .ToString() is culture-sensitive I think it makes sense for PS's default conversion path to use the culture-sensitive parse as well, and have the en-US parse used as a fallback (or vice-versa, either way should work).",
      "created_at": "2021-11-19T13:21:33Z",
      "updated_at": "2021-11-19T13:21:33Z"
    },
    {
      "author": "anttiah",
      "author_association": "NONE",
      "body": "Basically, you are trying to inverse the output of a **method** by using **type cast**. It doesn't work like that. Of course it would be nice to be able to do so \u2013 and with certain cultures it probably works just fine \u2013 but they are two different operations and their results don't need to be compatible with each other.\r\n\r\nThe inverse of type cast is another type cast in the opposite direction:\r\n```\r\nC:\\> [datetime][string](Get-Date)\r\n\r\nsunnuntai 21. marraskuuta 2021 19.45.09\r\n```\r\n\r\n\r\n\r\nSo, you can't expect to be able to type cast `ToString()` output back to `[datetime]`:\r\n```\r\nC:\\> [datetime](Get-Date).ToString()\r\nInvalidArgument: Cannot convert value \"21.11.2021 19.47.11\" to type \"System.DateTime\". Error: \"String '21.11.2021 19.47.11' was not recognized as a valid DateTime.\"\r\n```\r\n\r\n\r\n\r\nNor can you `Parse()` type cast output (without specifying culture):\r\n```\r\nC:\\> [datetime]::Parse([string](Get-Date))\r\nMethodInvocationException: Exception calling \"Parse\" with \"1\" argument(s): \"String '11/21/2021 19:48:56' was not recognized as a valid DateTime.\"\r\n```\r\n\r\n\r\n\r\nBut you can `Parse()` output of `ToString()` (without specitying culture):\r\n```\r\nC:\\> [datetime]::Parse((Get-Date).ToString())\r\n\r\nsunnuntai 21. marraskuuta 2021 19.50.18\r\n```\r\n",
      "created_at": "2021-11-21T17:54:41Z",
      "updated_at": "2021-11-21T20:46:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Basically, you are trying to inverse the output of a method by using type cast. It doesn't work like that. Of course it would be nice to be able to do so \u2013 and with certain cultures it probably works just fine \u2013 but they are two different operations and their results don't need to be compatible with each other.\r\n\r\nEvery single one of PS's type casts run through a conversion method. That semantic makes sense in C# -- sort of (it's overridable with a _method_ there anyway) -- but in PS this distinction doesn't make any sense in terms of the actual implementation, other than you can pick a different method overload and you can't directly alter the conversion logic with a typecast.\r\n\r\nThe conversion logic PS uses already uses Parse() methods, there's IMO no particular reason we can't also use current culture to aid the conversion.",
      "created_at": "2021-11-22T13:13:23Z",
      "updated_at": "2021-11-22T13:13:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Seems to work if you cast all the way through, e.g.\r\n\r\n```powershell\r\n$datetime = Get-Date\r\n$datetime_str = [string]$datetime\r\n$datetime_obj = [datetime]$datetime_str\r\n```\r\n\r\n`ToString` is very often not the exact same as a cast. Personally, it makes sense to me that if you explicit call `ToString` then you also need to explicitly call `Parse`. Well, maybe it would have made sense to make those sync up in the first place in this instance, but if you change one of the conversion paths you'll need to change both or it just moves the problem.",
      "created_at": "2021-11-22T16:26:17Z",
      "updated_at": "2021-11-22T16:26:17Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "`ToString()` returns string of current culture's date and time format. And cast to string type returns neutral culture that needs for casting to datetime type.\r\n```powershell\r\nPS > (Get-Date).ToString(); [string] (Get-Date)\r\n22.11.2021 20:44:16\r\n11/22/2021 20:44:16\r\n\r\nPS > [datetime][string] (Get-Date)  # returns localized Get-Date's output. Get-Date itself.\r\n```",
      "created_at": "2021-11-22T18:05:08Z",
      "updated_at": "2021-11-22T18:05:08Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell doesn't have date/time literals so, by design, casts happen in the invariant locale. This allows you to include an actual date in a script and have that script work in multiple locales. In general, we make a distinction between *processing* and *presenting*. Processing should be done in the invariant locale, presenting data to the user should be done in the current locale.",
      "created_at": "2021-11-30T03:54:35Z",
      "updated_at": "2021-11-30T03:54:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-01T12:00:43Z",
      "updated_at": "2021-12-01T12:00:43Z"
    }
  ],
  "created_at": "2021-11-19T08:17:31Z",
  "number": 16492,
  "state": "closed",
  "title": "DateTime round-trip cast object -> string -> object does not work with Finnish locale",
  "updated_at": "2021-12-01T12:00:44Z"
}