{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3696",
  "author": "SteveL-MSFT",
  "body": "[SemanticVersion]::new() required major, minor, and patch to be specfied which broke scenarios like:\r\n\r\n`$psversiontable.psversion -gt \"3.0\"` which is used by PowerShellGet to determine if a module is compatible with the current version of PowerShell.\r\n\r\nChange is to allow specifying only major or major+minor where the missing segments default to zero.\r\n\r\nAddresses https://github.com/PowerShell/PowerShell/issues/1618\r\n",
  "closed_at": "2017-05-08T17:44:41Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Regarding the semver.org spec, we are not diverging.  The resulting semver is conformant to semver.",
      "created_at": "2017-05-04T22:30:55Z",
      "updated_at": "2017-05-04T22:30:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr I believe I've addressed all of your concerns",
      "created_at": "2017-05-04T23:01:53Z",
      "updated_at": "2017-05-04T23:01:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I disagree - the bnf for parsing a semantic version is pretty clear - 3 parts: https://github.com/mojombo/semver/blob/master/semver.md\r\n\r\nI found another example where we aren't matching the spec:\r\n```powershell\r\nPS> [System.Management.Automation.SemanticVersion]\"01.01.01\"\r\n\r\nMajor Minor Patch Label\r\n----- ----- ----- -----\r\n    1     1     1\r\n```\r\n\r\nIf we're more permissive than the spec, people will rely on it, and where those uses occur, we can expect issues with more conforming tools.",
      "created_at": "2017-05-04T23:35:55Z",
      "updated_at": "2017-05-04T23:35:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Leading zeros aren't allowed so the resulting semver conforms.  I guess the question is whether the resulting object is what matters for conformance or the input to the constructor.  Seems you prefer a more strict approach and reject 01.0.0 vs producing a valid semver.  This also means that you can't compare a semver like psversion against \"3.0\" since the latter is not a semver.",
      "created_at": "2017-05-05T00:05:08Z",
      "updated_at": "2017-05-05T00:05:08Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Comparing with System.Version is no problem, but comparing with \"3.0\" might be, based on my reading of the spec.\r\n\r\nIt might be worth opening an issue in the repo I linked to.",
      "created_at": "2017-05-05T00:10:38Z",
      "updated_at": "2017-05-05T00:10:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I've opened https://github.com/mojombo/semver/issues/368",
      "created_at": "2017-05-05T00:18:13Z",
      "updated_at": "2017-05-05T00:18:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The response I got from the maintainer of semver indicates it is reasonable and not explicitly defined by semver spec.  Also, this thread https://github.com/mojombo/semver/issues/344 has supporters for both sides with no official stance, but examples of other libraries that have taken both approaches (strict and loose).  I think it's reasonable to allow constructing a semver with defaults to zero.  Cc @PowerShell/powershell-committee \r\n",
      "created_at": "2017-05-05T04:46:46Z",
      "updated_at": "2017-05-08T02:39:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr all fixed",
      "created_at": "2017-05-08T16:55:36Z",
      "updated_at": "2017-05-08T16:55:36Z"
    }
  ],
  "created_at": "2017-05-04T18:13:17Z",
  "number": 3696,
  "state": "closed",
  "title": "Allow [SemanticVersion] to be constructed with just major or major+minor",
  "updated_at": "2017-06-19T21:16:06Z"
}