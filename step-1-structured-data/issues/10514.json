{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10514",
  "author": "Liturgist",
  "body": "# Summary of the new feature/enhancement\r\nParameters used interactively should be validated immediately and allow/require the user to provide valid input. That is what the user must do anyway.\r\n# Proposed technical implementation details (optional)\r\nIt would be helpful if parameter validation would lead the interactive user to success sooner rather than later.\r\n\r\nThe following script requuires a two (2) valid paths. If the paths are entered interactively, the user does not know of a failed validation until after ALL parameters are entered.\r\n\r\n```\r\nPS C:\\src\\t> Get-Content -Path '.\\parammessage.ps1'\r\n[cmdletbinding()]\r\nParam (\r\n    [Parameter(Mandatory=$true, HelpMessage='Enter a valid path 1')]\r\n    [ValidateScript({ Test-Path $_ })]\r\n    [string]$Path1\r\n    ,[Parameter(Mandatory=$true, HelpMessage='Enter a valid path 2')]\r\n    [ValidateScript({ Test-Path $_ })]\r\n    [string]$Path2\r\n)\r\n\r\nWrite-Host \"+++$Path1===\"\r\nWrite-Host \"+++$Path2===\"\r\nPS C:\\src\\t> ($PSVersionTable.PSVersion).ToString()\r\n7.0.0-preview.3\r\nPS C:\\src\\t> .\\parammessage.ps1\r\n\r\ncmdlet parammessage.ps1 at command pipeline position 1\r\nSupply values for the following parameters:\r\n(Type !? for Help.)\r\nPath1: asdf\r\nPath2: C:\\\r\nC:\\src\\t\\parammessage.ps1 : Cannot validate argument on parameter 'Path1'. The \" Test-Path $_ \" validation script for the argument with value \"asdf\" did not return a result of True. Determine why the validation script failed, and then try the command again.\r\nAt line:1 char:1\r\n+ .\\parammessage.ps1\r\n+ ~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (:) [parammessage.ps1], ParameterBindingValidationException\r\n+ FullyQualifiedErrorId : ParameterArgumentValidationError,parammessage.ps1\r\n```\r\nWhat I would like to see is the interactive prompt use the HelpMessage specified and give the user an opportunity to enter valid information if needed.\r\n```\r\nPS C:\\src\\t> .\\parammessage.ps1\r\n\r\ncmdlet parammessage.ps1 at command pipeline position 1\r\nEnter a valid path 1\r\nPath1: asdf\r\nEntry is not valid.\r\nEnter a valid path 1\r\nPath1:\r\n```\r\nIf the entry for Path1 is not valid, the script will fail. I do not see benefit in requiring ALL parameters to be entered before informing the user that one will not pass validation.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Looks good but I see one problem for UX because there might be a delays (ex.: cloud request) that is very bad for UX in interactive sessions.",
      "created_at": "2019-09-13T07:13:18Z",
      "updated_at": "2019-09-13T07:13:18Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@iSazonov - I would like to understand better how delays would pose a problem for this change. I think of \"delay\" in remote (cloud) requests via UX (User Interface) as either communication link latency or waiting for the user's brain to signal a finger to press down. Please help me to understand better. Thanks.",
      "created_at": "2019-09-14T16:26:14Z",
      "updated_at": "2019-09-14T16:26:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My concern is that users may experience delays if we will call validates every time a key is pressed (especially if the attribute makes a remote request).\r\n",
      "created_at": "2019-09-14T20:39:11Z",
      "updated_at": "2019-09-14T20:39:11Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@iSazonov - I was not suggesting validation on every keystroke. I was suggesting validation after the value is entered and the Enter key is pressed.",
      "created_at": "2019-09-17T17:54:56Z",
      "updated_at": "2019-09-17T17:54:56Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "So you mean when a command has mandatory parameters that are not provided by a user, resulting in individual prompts for the mandatory parameters, PowerShell should perform parameter validation on the values entered at the prompt when they are entered, and re-prompt the user for the parameter if they provided a value that is invalid, to guide users toward a path of successful invocation? That makes sense to me.",
      "created_at": "2019-09-17T19:46:07Z",
      "updated_at": "2019-09-17T19:46:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Liturgist Please update your issue description.\r\n\r\n",
      "created_at": "2019-09-18T03:08:31Z",
      "updated_at": "2019-09-18T03:08:31Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@iSazonov - Does the new description reflect what you are suggesting? If not, please tell me more explicitly what should be changed. Thanks.",
      "created_at": "2019-09-19T15:43:09Z",
      "updated_at": "2019-09-19T15:43:09Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "> So you mean when a command has mandatory parameters that are not provided by a user, resulting in individual prompts for the mandatory parameters, PowerShell should perform parameter validation on the values entered at the prompt when they are entered, and re-prompt the user for the parameter if they provided a value that is invalid, to guide users toward a path of successful invocation? That makes sense to me.\r\n\r\nYes, @KirkMunro. And the `HelpMessage` text should be used to prompt the user for the value.",
      "created_at": "2019-09-19T15:44:40Z",
      "updated_at": "2019-09-19T15:47:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Liturgist Thanks! \r\nIt seems the enhancement is easy to implement. Do you want to grab this? ",
      "created_at": "2019-09-19T17:46:59Z",
      "updated_at": "2019-09-19T17:46:59Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "> @Liturgist Thanks!\r\n> It seems the enhancement is easy to implement. Do you want to grab this?\r\n\r\n@iSazonov - I would love to do it, but I have never done a github change before. It might be a long time before I got it working. I am solid (many years) on C, ok on C++, and newbie to C#. What would I face? I only have Visual Studio community edition. Can it be done with that? I also have Linux machines. What toolset is needed on Linux?\r\n\r\nI think my first step is to gather the infrastructure and configuration and see if I can build something that works without making any change.",
      "created_at": "2019-09-19T20:51:36Z",
      "updated_at": "2019-09-19T20:51:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Liturgist  You need to read our contribution docs in the repo. Perhaps they is old. It would be great if you pulled PRs with your new acquired experience - this also will train you to create PRs and to works with Git.\r\nInstall PowerShell Core, VS Code with recommended plugins and latest .Net Core 3.0.",
      "created_at": "2019-09-20T03:19:37Z",
      "updated_at": "2019-09-20T03:19:37Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@Liturgist If it helps, I can make myself available to help, either via answering direct questions, having a conference call with screen share to help you through the process, or even doing a live stream via Twitch (I'm getting set up for that, but may switch to LinkedIn if they give me access to their live streaming service before I get set up).\r\n\r\nAlso to keep in mind since you are interested in doing this: October is Hacktoberfest, an annual event that promotes open source contributions where you can be rewarded (t-shirt, stickers, etc.) if you contribute a certain amount during the month of October (other years it has required 5 PRs -- they can be any PRs, docs changes even, and they don't need to be accepted/merged in, just submitted during the month of October). It's a lot of fun if that sort of thing interests you.",
      "created_at": "2019-09-20T14:33:07Z",
      "updated_at": "2019-09-20T14:33:07Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@KirkMunro - I am going to re-read the contributing doc. When I tried to open the .sln in VS 2019 it reported two (2) problems. I probably do not have something setup correctly.\r\n\r\nThe doc I read said VS 2015. Is that an absolute requirement. Can I use VS 2019 successfully?",
      "created_at": "2019-09-20T17:37:43Z",
      "updated_at": "2019-09-20T17:37:43Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@Liturgist VS 2015 is not an absolute requirement. I only use VS 2019.\r\n\r\nOne tip I'll share that works very well for me: I use VS 2019 only for editing files, because I like VS as an editor. I use PowerShell and the `./build.psm1` module for building PowerShell. Using PowerShell for the build process allows you to leverage all of the command-line work that has already been done.\r\n\r\nThe easiest way to get going IMHO is to fork the repo, clone it, create a new branch for whatever changes you want to work on, import the `build.psm1` module, invoke `Start-PSBootstrap` from your PowerShell folder, then invoke `Start-PSBuild` from that folder. Once you have it built at least once, _only then_ do I open the solution in Visual Studio for file editing.",
      "created_at": "2019-09-20T17:46:44Z",
      "updated_at": "2019-09-20T17:48:24Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@KirkMunro - I sent a message to you on poshoholic.com since this may not be the right place for this kind of discussion.",
      "created_at": "2019-09-21T16:21:58Z",
      "updated_at": "2019-09-21T16:21:58Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Many thanks to @KirkMunro and @iSazonov. I finally got to where I could build and have found my way down to .\\src\\Microsoft.PowerShell.ConsoleHost\\host\\msh\\ConsoleHostUserInterfacePrompt.cs.",
      "created_at": "2019-09-21T20:09:28Z",
      "updated_at": "2019-09-21T20:09:28Z"
    }
  ],
  "created_at": "2019-09-11T17:17:35Z",
  "number": 10514,
  "state": "open",
  "title": "Validate interactive parameter values after they are entered",
  "updated_at": "2019-09-21T20:09:28Z"
}