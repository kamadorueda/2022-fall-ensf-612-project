{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1563",
  "author": "vors",
  "body": "We have a test for `$input` type behavior in advanced functions (functions that are cmdlets).\n\n``` powershell\nIt '$input Type should be enumerator' {\n        function from_begin { [cmdletbinding()]param() begin { Write-Output -NoEnumerate $input } }\n        function from_process { [cmdletbinding()]param() process { Write-Output -NoEnumerate $input } }\n        function from_end { [cmdletbinding()]param() end { Write-Output -NoEnumerate $input } }\n\n        (from_begin) -is [System.Collections.IEnumerator] | Should Be $true\n        (from_process) -is [System.Collections.IEnumerator] | Should Be $true\n        (from_end) -is [System.Collections.IEnumerator] | Should Be $true\n    } \n```\n\nhttps://github.com/PowerShell/PowerShell/blob/b731549a198c538d0e5e3ca4c50183f988b5f7e2/test/powershell/Language/Parser/AutomaticVariables.Tests.ps1#L3\n\nThis tests works fine in PS v2. Since then, the behavior changed to this\n\n``` powershell\n        (from_begin) -is [System.Collections.ArrayList] | Should Be $true\n        (from_process) -is [System.Collections.ArrayList] | Should Be $true\n        (from_end) -is [System.Object[]] | Should Be $true\n```\n\nWhich is pretty inconsistent, but exists since v3.\n\n@lzybkr was trying to fix it (back to v2 behavior) and it broke a couple customer scenarios.\n\nPlan: we will gover feedback about this issue and may consider go thru breaking change process.\nMeanwhile, I'm marking the test as `-Skip`\n",
  "closed_at": "2017-11-29T23:07:29Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we plan a breaking change it is better make it before RTM.",
      "created_at": "2017-10-08T10:47:34Z",
      "updated_at": "2017-10-08T10:47:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "scripts to summarize the differences\r\n--------\r\n```powershell\r\nfunction from_begin { begin { @{\"simple function Begin block\" = $input.GetType().FullName} } }\r\nfunction from_process { process { @{\"simple function Process block\" = $input.GetType().FullName} } }\r\nfunction from_end { end { @{\"simple function End block\" = $input.GetType().FullName} } }\r\n\r\n\r\nfunction cmdlet_from_begin { [cmdletbinding()]param() begin { @{\"script cmdlet Begin block\" = $input.GetType().FullName} } }\r\nfunction cmdlet_from_process { [cmdletbinding()]param() process { @{\"script cmdlet Process block\" = $input.GetType().FullName} } }\r\nfunction cmdlet_from_end { [cmdletbinding()]param() end { @{\"script cmdlet End block: {0}\" = $input.GetType().FullName} } }\r\n\r\n. { from_begin; from_process; from_end; cmdlet_from_begin; cmdlet_from_process; cmdlet_from_end }\r\n```\r\nresutls on PowerShell V2\r\n-------\r\n```none\r\nName                           Value\r\n----                           -----\r\nsimple function Begin block    System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nsimple function Process block  System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nsimple function End block      System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nscript cmdlet Begin block      System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nscript cmdlet Process block    System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nscript cmdlet End block: {0}   System.Array+SZArrayEnumerator\r\n```\r\nresults on PowerShell V3 and newer\r\n-------\r\n```none\r\nName                           Value\r\n----                           -----\r\nsimple function Begin block    System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nsimple function Process block  System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nsimple function End block      System.Collections.ArrayList+ArrayListEnumeratorSimple\r\nscript cmdlet Begin block      System.Collections.ArrayList\r\nscript cmdlet Process block    System.Collections.ArrayList\r\nscript cmdlet End block: {0}   System.Object[]\r\n```\r\nSome context I found from an early email:\r\n------\r\n> `$input` is documented in the language specification as being an enumerator (`IEnumerator`), and that\u2019s how it\u2019s implemented in V2.\r\n> V3 unintentionally changed the type of `$input` in a script cmdlet to an `ArrayList` or `Array` (depending on when you ask).\r\n>\r\n> I thought it was a relatively safe fix to make because the use of `$input` in a script cmdlet should be uncommon because it\u2019s usually better to use a parameter that has `ValueFromPipeline` or to just use `$_`.\r\n>\r\n> It turns out I was wrong.  We have reverted the change and the fix is scheduled to be delivered as part of the ZDP for the Windows 10 Anniversary Update.\r\n>\r\n> That does leave us in this weird place \u2013 scripts that target V2 and later might not work correctly if they use `$input` in a script cmdlet.\r\n> It also means the `$input` is different in a script cmdlet and ordinary function.\r\n>\r\n> So we may revisit this in the future, but if we do, we\u2019ll do a better job notifying people about the change in behavior.",
      "created_at": "2017-11-28T19:21:22Z",
      "updated_at": "2017-11-28T19:21:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee This issue is ready to be reviewed again.",
      "created_at": "2017-11-28T19:22:10Z",
      "updated_at": "2017-11-28T19:22:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agreed it doesn't make sense to make this change back to v2 behavior at this time since v3+ users would be broken",
      "created_at": "2017-11-29T23:07:28Z",
      "updated_at": "2017-11-29T23:07:28Z"
    }
  ],
  "created_at": "2016-07-29T00:48:35Z",
  "number": 1563,
  "state": "closed",
  "title": "$input type in advanced functions",
  "updated_at": "2018-10-30T05:48:02Z"
}