{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15241",
  "author": "zett42",
  "body": "### Existing feature ###\r\n\r\nThere is a really useful implicit PowerShell feature that many cmdlets that accept pipeline input, already benefit from:\r\n~~~powershell\r\n# Delay-bind script-block argument:\r\n# The code inside { ... } is executed for each input object ($_) and\r\n# the output is passed to the -NewName parameter.\r\n... | Rename-Item -NewName { $_.Name -replace '\\.txt$','.log' }\r\n~~~\r\n<sup>Code sample blatantly stolen from [this StackOverflow post](https://stackoverflow.com/a/52807680/7571258), which also gives a good in-depth analysis on how this feature works.</sup>\r\n\r\nAs in this example, this feature often removes the neccessity of a `ForEach-Object` construct, letting users write more concise code. This is all good, but...\r\n\r\n### Problem ###\r\n\r\nCode like above is often showcased in PowerShell \"recipes\" provided on StackOverflow and tutorial websites, but rarely explained. Users have a hard time to look up documentation for this feature. They would expect to find documentation in the context of the cmdlet that is used by a code sample, but if we look up [`Rename-Item` parameter](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/rename-item?view=powershell-7.1#parameters) `-NewName` for instance, there is nothing that hints at its ability to accept a `ScriptBlock` argument. Its type is just listed as `String`. Neither in the examples section is anything to be found that showcases this useful feature.\r\n\r\nThe only official documentation I know of is \"hidden\" in the [about_Script_Blocks](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_script_blocks?view=powershell-7.1#using-delay-bind-script-blocks-with-parameters) page. It took me a while to find and I don't expect many PowerShell beginners to stumble upon it.\r\n\r\n### Suggested Solution ###\r\n\r\nUpdate the documentation of all applicable cmdlets, to hint at the possibility to pass delay-bind scriptblock arguments. \r\n\r\nThis seems like a big effort but it could possibly be automated. When generating the documentation for each parameter, check the [condition that enables a parameter to accept a delay-bind scriptblock argument](https://stackoverflow.com/a/52807680/7571258). If true, add a line to the details table of the parameter, e. g.\r\n\r\n`-NewName`\r\n\r\nType: String\r\nPosition: 1\r\nDefault value: None\r\nAccept pipeline input: True\r\nAccept [delay-bind scriptblock argument](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_script_blocks?view=powershell-7.1#using-delay-bind-script-blocks-with-parameters): True\r\nAccept wildcard characters: False\r\n\r\nThis would make it easy for users to discover and look up this useful feature in the context where it actually can be used instead of having to learn about it \"by accident\" and keep the exact rules in mind afterwards.\r\n\r\nAdding usage examples to some of the most commonly used cmdlets would also help discoverability. In my opinion it is not necessary to add such examples to all applicable cmdlets, because once learned, users will be able to transfer their knowledge to other cmdlets as well, provided they can easily recognize applicable parameters (which an update of the auto-documentation as suggested above would do).",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> but if we look up Rename-Item parameter -NewName for instance, there is nothing that hints at its ability to accept a ScriptBlock argument\r\n\r\nThis just goes to prove your point about it being rarely explained and misunderstood but I assumed that this could only be done on parameters that accepted pipeline input which the docs do state `Accept pipeline input: True`.",
      "created_at": "2021-04-15T20:07:17Z",
      "updated_at": "2021-04-15T20:07:17Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "> I assumed that this could only be done on parameters that accepted pipeline input which the docs do state Accept pipeline input: True.\r\n\r\nYes, but there are some exceptions as explained by the linked [StackOverflow post](https://stackoverflow.com/a/52807680/7571258), which is why I think a separate row in the details table of the documentation of each applicable parameter would be necessary, apart from making the feature more explicit:\r\n\r\n>_only_ works with parameters that are _designed to take pipeline input_,\r\n>\r\n>- of any type _except_ the following, in which case _regular_ parameter binding happens[1]:\r\n>   - `[scriptblock]`\r\n>   - `[object]` (`[psobject]`, however, does work, and therefore `[pscustomobject]` too)\r\n>   - (no type specified), which is effectively the same as `[object]`\r\n\r\n\r\n",
      "created_at": "2021-04-15T20:28:11Z",
      "updated_at": "2021-04-15T20:28:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's pretty hard to think of other commands where this syntax is *possible* and much harder still to think of a scenario where it would have real world application.\r\n\r\nMaybe the some of the other `Rename-*` commands, but how even they are sort of a stretch (and very few of them are included with PowerShell).  I agree it should be presented where it makes sense but... that might already be done.  Can anyone else think of a different built in command where they've actually used this syntax?",
      "created_at": "2021-04-15T23:05:24Z",
      "updated_at": "2021-04-15T23:05:24Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the link @zett42 that definitely help. This is my personal opinion but I always found this syntax too magical for me. I don't think I've ever written something like this and always just did something like `| ForEach-Object { $_ | My-Cmdlet -Param $_.Param }`. IMO that more aligns with how most people expect pipelines to work and there's less \"huh I've never seen that before, does it even work\".",
      "created_at": "2021-04-15T23:11:57Z",
      "updated_at": "2021-04-15T23:12:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I think it would be adequate to just ensure there is an example that shows this kind of usage where it would actually be useful.  `Rename-Item` is one of those command where this is useful and yes, I've used this capability over the past decade and a half.  \r\n\r\nBTW `Rename-Item` does have an example that shows this:\r\n\r\n```poweshell\r\n    --------------- Example 4: Rename multiple files ---------------\r\n\r\n    Get-ChildItem *.txt\r\n\r\n    Directory: C:\\temp\\files\r\n\r\n    Mode                LastWriteTime         Length Name\r\n    ----                -------------         ------ ----\r\n    -a----        10/3/2019   7:47 AM           2918 Friday.TXT\r\n    -a----        10/3/2019   7:46 AM           2918 Monday.Txt\r\n    -a----        10/3/2019   7:47 AM           2918 Wednesday.txt\r\n\r\n    Get-ChildItem *.txt | Rename-Item -NewName { $_.Name -replace '.txt','.log' }\r\n```",
      "created_at": "2021-04-15T23:32:08Z",
      "updated_at": "2021-04-15T23:32:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "TBH I think there's also room to cover this as part of the Advanced Functions and/or Pipelines topics in the help, as part of how `ValueFromPipelineByPropertyName` functions, and that'd probably be the most easily accessible/discoverable place to put it, at least from what I can see.",
      "created_at": "2021-04-16T16:03:01Z",
      "updated_at": "2021-04-16T16:03:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Can anyone think of an instance aside from `Rename-Item` that they've used this?",
      "created_at": "2021-04-16T16:07:04Z",
      "updated_at": "2021-04-16T16:07:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't have specific examples, but I do use it from time to time, though granted probably not a large amount of that is in core cmdlets; I've found it pretty versatile and useful when building custom functions and working with functions others have put together. \r\n\r\nIt could use more utilisation in core cmdlets IMO, but currently lacks it. ForEach-Object is a nice catch-all, but IMO would be cool if more core cmdlets supported this kinda thing natively where it makes sense.",
      "created_at": "2021-04-16T16:12:47Z",
      "updated_at": "2021-04-16T16:12:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Here's an example from @IISResetMe on discord:\r\n\r\n```powershell\r\nmkdir $dirName |cd -Path {$_.FullName}\r\n```\r\n\r\nWhich tells me I had a pretty big misunderstanding of the limitations, and it's applicable in a lot more places than I thought.",
      "created_at": "2021-04-16T16:56:22Z",
      "updated_at": "2021-04-16T16:56:22Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> @zett42: Update the documentation of all applicable cmdlets, to hint at the possibility to pass delay-bind scriptblock arguments.\r\n\r\nWhile I agree we can do a better job of educating users in general, I don't think that the proposed solution is feasible (nor helpful) - as it applies to ~60% of all cmdlets in the built-in modules:\r\n\r\n```\r\n$applicable,$other = (Get-Command -Module Microsoft.PowerShell.*).Where({\r\n  $params = $_.Parameters\r\n  $params.Keys.Where({$params[$_].Attributes.Where({$_ -is [Parameter]}).ValueFromPipelineByPropertyName})\r\n}, 'Split')\r\n\r\nWrite-Host \"Delay-script binding possible for $((100 * $applicable.Count / @($applicable;$other).Count)-as[int])% of built-in commands ($($applicable.Count)/$(@($applicable;$other).Count))\"\r\n```\r\n(Gives me 58% (162/279) in 7.1.3 on Win10 2004)\r\n \r\n As hinted in the original answer you linked it also applies to any custom function with a parameter meeting the requirements:\r\n \r\n ```\r\nfunction Greet-People {\r\n  param(\r\n    [Parameter(ValueFromPipelineByPropertyName)]\r\n    [string]$Name\r\n  )\r\n\r\n  process {\r\n    Write-Host \"Hello, $Name\"\r\n  }\r\n} \r\n \r\n$people = @'\r\nUsername,FirstName,LastName\r\nsscience,Seemingly,Science\r\nirme,IISReset,Me\r\n'@ |ConvertFrom-Csv\r\n\r\n$data |Greet-People -Name {$_.FirstName,$_.LastName-join''}\r\n```\r\n\r\nResult:\r\n\r\n```\r\nHello, SeeminglyScience\r\nHello, IISResetMe\r\n```\r\n\r\nThe way I see it, PowerShell's feature set is an iceberg the tip of which most users barely scrape - and while I wish more people would \"dive beneath the surface\" (and I feel that we can and should do our part as \"super practitioners\" to educate other users), I don't think it's helpful to try and push every facet of the language in the face of learners at every level - not because it's \"too advanced\", but because 90% of users will never actually _need_ them beyond a few edge cases (like `Rename-Item`).",
      "created_at": "2021-04-17T18:51:04Z",
      "updated_at": "2021-04-17T18:51:04Z"
    },
    {
      "author": "nashiooka",
      "author_association": "NONE",
      "body": "I participated in the [SO question](https://stackoverflow.com/a/67092308/4749264) that lead @zett42 to post the issue. If my opinion means anything. I do agree it's extremely useful, but mostly limited to the *-Item cmdlets. Though I've used with both `Group-Object` & `Sort-Object` often enough, especially in interactive use to quickly get a result without having to formally add a property.  Although those are indeed documented under the about_Calculated_Properties the syntax is quite similar:\r\n\r\n`Get-ChildItem c:\\temp | Group-Object -Property { $_.Extension }`\r\n\r\nI like @rkeithhill approach to focus on examples where reasonably applicable.  I also like @vexx32 idea of additional coverage in advanced function documentation.  There is would be nice to know.  Not to sound clich\u00e9 but in \"tool making\" we're taught to think about usage scenarios which leads to thought about what and how you can input to the function.",
      "created_at": "2021-04-25T21:18:20Z",
      "updated_at": "2021-04-25T21:18:20Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@nashiooka FWIW those are _not_ delay-bind scriptblocks - the `-Property` parameter of both `Group-Object` and `Select-Object` are constrained to `[object[]]`, for which pipeline binding doesn't work - these cmdlets instead work by accepting *property expressions* which look like and have similar semantics to pipeline-bound blocks. \r\n\r\nThe difference is that the resulting values are resolved by the cmdlets themselves, not the parameter binder, allowing cmdlets like `Select-Object` and the `Format-*` cmdlets to accept _tables_ with named property expressions for output projections, like `... |Select-Object -Property @{Name='nashiookas renamed property'; Expression={ $_.someExistingPropertyValue -join '_' }}`\r\n\r\nWe usually refer to these named property expressions as [calculated properties](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_calculated_properties).\r\n\r\nVery useful, very similar, but not quite the same :-) ",
      "created_at": "2021-04-26T13:40:17Z",
      "updated_at": "2021-04-26T13:45:29Z"
    },
    {
      "author": "nashiooka",
      "author_association": "NONE",
      "body": "@IISResetMe thanks, I knew there was some difference, but this clarifies it for me.",
      "created_at": "2021-04-26T19:55:59Z",
      "updated_at": "2021-04-26T19:55:59Z"
    }
  ],
  "created_at": "2021-04-15T19:17:13Z",
  "labels": [
    "Issue-Enhancement",
    "Needs-Triage"
  ],
  "number": 15241,
  "state": "open",
  "title": "Improve discoverability of delay-bind scriptblock parameters",
  "updated_at": "2021-04-26T19:56:00Z"
}