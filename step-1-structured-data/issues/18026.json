{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18026",
  "author": "aetonsi",
  "body": "### Summary of the new feature / enhancement\n\nHello.\r\nI am trying to start a process in a new window with `Start-Process` and i'm `-wait`ing for its execution.\r\n\r\nThen i need to process its output. I would like to do it all in memory, without writing to disk, **as the output is confidential**. Unfortunately at the moment this doesn't seem to be possible (correct me if i'm wrong) without resorting to .NET implementations like [this](https://stackoverflow.com/a/8762068)...\r\n\r\nCurrently, this is the best you can do:\r\n\r\n```powershell\r\n$output = & {start-process powershell \"read-host 'Enter string: '\" -Wait -RedirectStandardOutput output.txt ; get-content output.txt}\r\n```\r\nIn this example,\r\n- `powershell \"read-host 'Enter string: '\"` is my command with confidential output.\r\n- `-Wait` waits for my command to exit\r\n- `-RedirectStandardOutput` permits the redirection to a file\r\n- `get-content` simply reads back that file.\n\n### Proposed technical implementation details (optional)\n\nA possible solution would be a parameter like `-RedirectStandardOutputToStream` / `-RedirectStandardErrorToStream`\r\n\r\n```powershell\r\n$output = & {start-process powershell \"read-host 'Enter string: '\" -wait -RedirectStandardOutputToStream 1}\r\n```\r\n\r\nWhere `1` is the ID of the [success stream](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7.2#redirectable-output-streams).\r\n\r\n---\r\n\r\nOr, more simply:\r\n\r\n```powershell\r\n$output = & {start-process powershell \"read-host 'Enter string: '\" -wait -GetStandardOutput}\r\n```\r\n... with the corresponding `-GetStandardError`",
  "closed_at": null,
  "comments": [
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": "Here i posted a workaround leveraging a temp file: [aetonsi/pwsh__StartProcessWaitRedirectToStream](https://github.com/aetonsi/pwsh__StartProcessWaitRedirectToStream/commit/d4c4b51c50d9c2840199ba800913608c68c62d61)",
      "created_at": "2022-09-04T00:42:13Z",
      "updated_at": "2022-09-04T00:42:13Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "What are you using start-process at all ? \r\n ```$output = powershell \"read-host 'I should not ask for parameters to be typed' \" ```   or  \r\n```$output = powershell \"read host 'hyphen missing will cause error' \" 2> null  ```   if you want to remove error output.  \r\n\r\nIf it is a command line program start-process will (by default) run in a new window, not receive output and not wait for the program it has started to finish. You can specify Wait or NoNewWindow but you still need to work around the output not coming back \r\n \r\n```$output = Invoke-Command -ScriptBlock {powershell \"read-host 'I should not ask for parameters to be typed' \" }``` \r\nAlso works the way you want, I think.\r\n  \r\n",
      "created_at": "2022-09-04T00:46:41Z",
      "updated_at": "2022-09-04T00:46:41Z"
    },
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": "I need my command to be run in a separate window, that's why i resorted to `start-process`. Is there some other way?",
      "created_at": "2022-09-04T01:22:08Z",
      "updated_at": "2022-09-04T01:22:08Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Not without using dotnet but that\u2019s the beauty of PowerShell, you can wrap all that in your own function to achieve what you want.",
      "created_at": "2022-09-04T06:15:22Z",
      "updated_at": "2022-09-04T06:15:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note that there's a previous discussion about generally allowing targeting _variables_ in contexts where _file paths_ are expected, so that `Start-Process ... -RedirectStandardOutput variable:out` would capture stdout in variable `$out`.\r\n\r\nThis is not only more flexible than `-RedirectStandardOutput 1`, it also prevents the output from instantly mixing with the caller's streams, which in _asynchronous_ `Start-Process` calls (which are typical) you wouldn't want.\r\n\r\nSee:\r\n* https://github.com/PowerShell/PowerShell/issues/4332 (original discussion, in the context of `>`)\r\n* https://github.com/PowerShell/PowerShell/issues/5184 (later discussion, in the context of `Start-Process`)\r\n\r\n",
      "created_at": "2022-09-06T15:54:15Z",
      "updated_at": "2022-09-06T22:14:14Z"
    },
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": "@mklement0 Mmh i see, that would be cool. Not the same as what i was picturing (`-RedirectStandardOutputToStream 1` would print to the success stream, and you _could_ capture it in a variable)... but ultimately that's what i would like to end up to do: save the output to a variable to reuse it.",
      "created_at": "2022-09-06T21:59:55Z",
      "updated_at": "2022-09-06T21:59:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@JamesWTruher I thought you had a proof-of-concept for supporting redirection to the variable provider?",
      "created_at": "2022-09-12T18:07:53Z",
      "updated_at": "2022-09-12T18:07:53Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Indeed I do: https://github.com/PowerShell/PowerShell/pull/16497",
      "created_at": "2022-09-13T00:10:57Z",
      "updated_at": "2022-09-13T00:10:57Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That doesn\u2019t really help here for Start-Process if I understand it correctly? You can already capture output with just invoking the exe today. Supporting Start-Process redirection to a var would be quite tricky unless it meant -Wait was always implicit as it would require a background task to be running which could mutate the var as it\u2019s being read.",
      "created_at": "2022-09-13T02:35:04Z",
      "updated_at": "2022-09-13T02:35:04Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> That doesn\u2019t really help here for Start-Process if I understand it correctly?\r\n\r\nI think in this case there is no output from Start-Process itself that can be redirected. It would need start-process to allow \r\n`-RedirectStandardOutput variable:foo`  but that reports \"Cannot open file because the current provider (Microsoft.PowerShell.Core\\Variable) cannot open a file.\" \r\n \r\n\r\n",
      "created_at": "2022-09-13T10:16:54Z",
      "updated_at": "2022-09-13T10:17:07Z"
    },
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": ">  You can already capture output with just invoking the exe today\r\n\r\nYes but AFAIK you cannot start a process _in a new window_, _wait_ for it and capture the output\r\n\r\n",
      "created_at": "2022-09-13T17:51:36Z",
      "updated_at": "2022-09-13T17:51:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Why would you want to, that would mean you have a blank window with no output. When you redirect a std pipe in a process you cause that output to no longer appear. You would have to somehow split the output to go to a pipe you can capture but also have it output to the console at the same time which isn\u2019t really easy to do at all.",
      "created_at": "2022-09-13T21:43:06Z",
      "updated_at": "2022-09-13T21:43:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93, it's a good point that redirecting to _variables_ could only work meaningfully with (possibly implied) `-Wait`\r\n\r\n> You can already capture output with just invoking the exe today\r\n\r\nThe original issue, #4332, was focused on `2>` redirections to allow you to capture _stderr_ output in a variable, as the native analog to `-ErrorVariable` - direct invocation of an external program currently doesn't support that.\r\n\r\nIn the context of (synchronous use of) `Start-Process`:\r\n\r\n> Why would you want to [....]?\r\n\r\nThey're certainly not common uses cases, but two come to mind (in both cases, `-WindowStyle Hidden` can be used to hide the new window):\r\n\r\n* If you want to run a process _as another user_, with `-Credential` (on Windows), which cannot be done without `Start-Process` and invariably involves a new window.\r\n\r\n* <del>If you need to \"sandbox\" invocation of a PowerShell script that may interfere with the state of the calling session if invoked directly. (Arguably, though, `Start-Job` could be used instead and is the better choice, but requires more ceremony)</del> (use `pwsh { ... }` - see below)\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-13T22:23:15Z",
      "updated_at": "2022-09-14T21:38:23Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Why would you want to, that would mean you have a blank window with no output. When you redirect a std pipe in a process you cause that output to no longer appear.\r\n\r\n@aetonsi  I didn't think of this when you said to my suggestion before that you wanted it its own window. Why do do you want a **blank** window? \r\n\r\n",
      "created_at": "2022-09-14T00:20:06Z",
      "updated_at": "2022-09-14T00:20:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill:\r\n\r\n* The uses cases in my previous comment imply _hidden_ execution, in which case the question of a blank window is moot.\r\n\r\n* Even if the launched window runs visibly, the window is only _invariably_ blank if you redirect _both_ stdout and stderr.\r\n\r\nThe bottom line is: \r\n\r\nAre there legitimate use cases for _synchronous_ use of `Start-Process` where capturing stdout _and/or_ stderr output in-memory is useful?\r\n\r\n",
      "created_at": "2022-09-14T01:39:52Z",
      "updated_at": "2022-09-14T01:39:52Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> The original issue, https://github.com/PowerShell/PowerShell/issues/4332, was focused on 2> redirections to allow you to capture stderr output in a variable, as the native analog to -ErrorVariable - direct invocation of an external program currently doesn't support that.\r\n\r\nIt\u2019s not pretty but you can do this today\r\n\r\n```powershell\r\n$stdout = $null\r\n$stderr = . { my.exe args | Set-Variable stdout } 2>&1 | ForEach-Object ToString\r\n```\r\n\r\nThe ForEach-Object ToString` is only needed for WinPS because on the older versions these objects are error records and you want the string value instead.\r\n\r\n> If you want to run a process as another user, with -Credential (on Windows), which cannot be done without Start-Process and invariably involves a new window.\r\n\r\nI will concede this is a valid point, thank you I didn\u2019t think off this.\r\n\r\n> If you need to \"sandbox\" invocation of a PowerShell script that may interfere with the state of the calling session if invoked directly. (Arguably, though, Start-Job could be used instead and is the better choice.)\r\n\r\nI\u2019m not sure why this needs Start-Process. You can certainly just do `pwsh { \u2026 }` or as you said `Start-Job` to do this in such a nicer way. PowerShell will even deal with complex objects with both of these cases.\r\n\r\nStill I feel like the better option is to add NoteProperties to the return object if `-PassThru -Wait` is set and redirection needed. The UX here is pretty poor but it ensures that there\u2019s no concurrency problem, i.e. the output is only accessible once nothing else will add to it.",
      "created_at": "2022-09-14T01:43:34Z",
      "updated_at": "2022-09-14T01:43:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93 \r\n\r\n>  I\u2019m not sure why this needs `Start-Process`. You can certainly just do `pwsh { \u2026 }`\r\n\r\nGood point: `pwsh { \u2026 }` is definitely the way to go here, which again calls for a simple `2>` solution (see below).\r\n\r\n> It\u2019s not pretty \r\n\r\nThat's precisely the point: _let's make it pretty (easy)_:\r\n\r\n```powershell\r\n# Capture stderr output in $stderr\r\n$stdout = my.exe args 2>variable:stderr\r\n```\r\n\r\nAs for the least ugly version right now:\r\n\r\n```powershell\r\n$stdout, $stderr = (my.exe args).Where({ $_ -is [string] }, 'Split')\r\n```\r\n\r\nBut all of that relates to _direct_ invocation, which I think is the primary use case for the proposed enhancement.\r\n\r\nI don't feel strongly about the `Start-Process` case.\r\n\r\nI'm unclear on what you mean by adding NoteProperties.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-14T01:54:30Z",
      "updated_at": "2022-09-14T01:56:27Z"
    },
    {
      "author": "aetonsi",
      "author_association": "NONE",
      "body": "> Why would you want to, that would mean you have a blank window with no output. When you redirect a std pipe in a process you cause that output to no longer appear. You would have to somehow split the output to go to a pipe you can capture but also have it output to the console at the same time which isn\u2019t really easy to do at all.\r\n\r\n@mklement0 @jhoneill \r\nAfaik (i'm new to PS so i might be wrong), the window would be blank only if all of the streams with any output are redirected.\r\nBut for example i have a simple program that writes to streams # 1, 2, 3 and 6 (`write-host`) and i need just one of those streams redirected to a variable. ATM i can do it by using a support file via `-RedirectStandardOutput` or `-RedirectStandardError`...\r\nAgain, if you're wondering why i _need_ `start-process`, it is simply to open a new window. Why? for example because the original process has no window (because it has been started by another c# program with `.StartInfo.WindowStyle = ProcessWindowStyle.Hidden`)\r\n\r\nAnd now that i think about it, this can work only for streams 1/2, number 3-6 are unmanageable. Even with a syntactic sugar like `$stdout = my.exe args 6>variable:stdinfo`, you couldnt apply this to `start-process`.",
      "created_at": "2022-09-14T20:09:27Z",
      "updated_at": "2022-09-14T20:09:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@aetonsi, yes, when you call a script via the PowerShell CLI, the stdout and stderr streams are the only ones available, as with any child process. By default, PowerShell only sends its error stream to stderr (curiously, only when stderr is _redirected_), all others (success output, warnings, verbose messages, ...) are output to stdout (which is problematic - see #7989)\r\n\r\nThe only way to distinguish between PowerShell's [output streams](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Output_Streams) via a [CLI](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Pwsh) call would be to use `-OutputFormat xml` in order to receive CLIXML data _via stdout_ (CLIXML is an XML-based object-serialization format). Deserializing this data with `[System.Management.Automation.PSSerializer]::Deserialize()`, would allow you to separate the deserialized objects into their streams of origin by their type.\r\n\r\nIn other words: this approach indeed would leave your window invariably blank, because _all_ output would be communicated via stdout.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-14T22:13:14Z",
      "updated_at": "2022-09-14T22:13:14Z"
    }
  ],
  "created_at": "2022-09-03T23:40:04Z",
  "number": 18026,
  "state": "open",
  "title": "Start-Process: allow redirecting std output/error to console stream",
  "updated_at": "2022-09-14T22:13:14Z"
}