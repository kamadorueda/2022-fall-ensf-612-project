{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15234",
  "author": "mklement0",
  "body": "\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# Create a background job that outputs the numbers from 1 to 10.\r\n$jb = (1..10) &\r\n\r\n# Wait for the job to finish.\r\n$null = Wait-Job $jb \r\n\r\n# Receive the job's output, but stop after the first object.\r\nReceive-Job $jb | Select-Object -First 1 | Should -Be 1\r\n\r\n# I would now expect calling Receive-Job again to output the remaining objects:\r\nReceive-Job $jb | Should -Be (2..10)\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should succeed.\r\n\r\n## Actual behavior\r\n\r\nThe second test fails, because the first `Receive-Job` unexpectedly discarded all remaining data after\r\n\r\n```none\r\nInvalidResult: Expected @(2, 3, 4, 5, 6, 7, 8, 9, 10), but got $null.\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.4\r\n```\r\n",
  "closed_at": "2021-04-14T22:04:37Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "I can see how from one point of view the expected behavior described above would be logical.\r\nHowever from another point of view current behavior also makes sense - [`The Receive-Job cmdlet gets the results that have been generated by the time that the Receive-Job command is submitted.`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/receive-job?view=powershell-7.1#description), so the first `Receive-Job $jb` is pulling all data and then Select-Object shows just the the first.",
      "created_at": "2021-04-14T20:22:52Z",
      "updated_at": "2021-04-14T20:23:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The linked passage doesn't address what happens when the received data is only _partially consumed_.\r\n\r\nWith the current behavior, you get an all-or-nothing choice:\r\n\r\n* Get _and consume_ ALL output objects currently collected in the job (by default)\r\n\r\n* Get _and keep_ ALL objects currently collected, with `-Keep`\r\n\r\nMy original thought was that `Receive-Job` - without `-Keep` - should only consume those objects that are _actually enumerated (sent through the pipeline)_ - as opposed to removing the entire batch instantly from the job.\r\n\r\n(Someone who then truly wanted the consume-it-all behavior could simply add the `-Wait` switch to the `Select-Object -First` call.)\r\n\r\nThat said, the current behavior is easier to reason about, and questions about how `Select -Last` or `Select -Index` would behave in the partial-consumption scenario do not arise.\r\n\r\n---\r\n\r\nTherefore, perhaps the better solution is to introduce a `-First <int>` parameter to `Receive-Object` that allows retrieving a batch of a given size in a consuming manner.\r\n\r\nWhat do you think?\r\n\r\nThis dovetails with a _time_-based mechanism of limiting what `Receive-Object` returns, as suggested in #5433.\r\n",
      "created_at": "2021-04-14T21:04:30Z",
      "updated_at": "2021-04-14T22:03:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm closing this, but would like to continue the discussion, so that a feature request for a `-First` parameter or similar may result from it.\r\n",
      "created_at": "2021-04-14T22:04:37Z",
      "updated_at": "2021-04-14T22:04:37Z"
    }
  ],
  "created_at": "2021-04-14T19:45:09Z",
  "number": 15234,
  "state": "closed",
  "title": "Receive-Job discards remaining data if enumeration is cut short with Select-Object -First",
  "updated_at": "2021-04-14T22:04:37Z"
}