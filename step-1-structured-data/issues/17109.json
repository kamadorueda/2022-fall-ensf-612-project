{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17109",
  "author": "FilBot3",
  "body": "# Solution\r\n\r\n* https://github.com/PowerShell/PowerShell/issues/17109#issuecomment-1089063661\r\n\r\n### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI am providing PowerShell Core 7.2.2 on Fedora 35 Linux a PowerShell script that I have written locally. At the top of the file, I have a comment based help section with synopsis, description, and a link. However, when I use `Get-Help` nothing shows. The same happens when I use help except it opens a pager.\r\n\r\n```powershell\r\n<#\r\n.NAME\r\n    Export-ADOlibrary-RestAPI.ps1\r\n\r\n.SYNOPSIS\r\n    Export Azure DevOps Library Groups into JSON files.\r\n\r\n.DESCRIPTION\r\n    Export an Azure DevOps Library Group into a JSON file. Then use that file to\r\n    set some parameters and save them as encrypted files in the Azure DevOps Git\r\n    Repo.\r\n\r\n.NOTE\r\n    This script was written by person of company for project.\r\n#>\r\n# Print text\r\nWrite-Host \"This is some output.\"\r\n```\r\n\r\nHowever, when I use the `Get-Help` and `help` commands, this is what I get\r\n\r\n```powershell\r\n> Get-Help ./Export-ADOlibrary-RestAPI.ps1\r\nExport-ADOlibrary-RestAPI.ps1 \r\n\r\n```\r\n\r\nSame thing for `help ./Export-ADOlibrary-RestAPI.ps1`.\r\n\r\nI should see the same thing as what's being described in the documentation for [Comment Based Help](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help?view=powershell-7.2#comment-based-help-for-a-function). \r\n\r\n### Expected behavior\r\n\r\n```console\r\nDisplay Comment Based Help\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nNothing displays\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Linux 5.16.18-200.fc35.x86_64 #1 SMP PREEMPT Mon Mar 28 14:10:07 UTC 2022\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-04-05T17:15:00Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`.NOTE` needs to be `.NOTES` and `.NAME` is not a valid element (it's automatic). This works:\r\n\r\n```powershell\r\n<#\r\n.SYNOPSIS\r\n    Export Azure DevOps Library Groups into JSON files.\r\n\r\n.DESCRIPTION\r\n    Export an Azure DevOps Library Group into a JSON file. Then use that file to\r\n    set some parameters and save them as encrypted files in the Azure DevOps Git\r\n    Repo.\r\n\r\n.NOTES\r\n    This script was written by person of company for project.\r\n#>\r\n\r\nWrite-Host \"This is some output.\"\r\n```",
      "created_at": "2022-04-05T16:41:16Z",
      "updated_at": "2022-04-05T16:41:16Z"
    },
    {
      "author": "FilBot3",
      "author_association": "NONE",
      "body": "Same deal even after removing NAME and modifying NOTE to NOTES\r\n\r\n```powershell\r\n> Get-Help ./Export-ADOlibrary-RestAPI.ps1\r\nExport-ADOlibrary-RestAPI.ps1 \r\n\r\n> Get-Help ./Export-ADOlibrary-RestAPI.ps1 -Full\r\nExport-ADOlibrary-RestAPI.ps1 \r\n\r\n> head -n15 ./Export-ADOlibrary-RestAPI.ps1\r\n<#\r\n.SYNOPSIS\r\n    Export Azure DevOps Library Groups into JSON files.\r\n\r\n.DESCRIPTION\r\n    Export an Azure DevOps Library Group into a JSON file. Then use that file to\r\n    set some parameters and save them as encrypted files in the Azure DevOps Git\r\n    Repo.\r\n\r\n    This script is an interactive script. The user will be prompted for input\r\n    to override the defaults.\r\n\r\n.NOTES\r\n    This script was written by person of company for project.\r\n#>\r\n```",
      "created_at": "2022-04-05T16:59:22Z",
      "updated_at": "2022-04-05T16:59:22Z"
    },
    {
      "author": "FilBot3",
      "author_association": "NONE",
      "body": "I see the [Autogetnerated Content](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help?view=powershell-7.2#autogenerated-content) listing the NAME as you said.",
      "created_at": "2022-04-05T17:00:34Z",
      "updated_at": "2022-04-05T17:00:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Same deal even after removing NAME and modifying NOTE to NOTES\r\n\r\nMake sure it's in a new session, help content (including lack of) is cached. When testing help I usually do something like this:\r\n\r\n```powershell\r\npwsh -nop -c 'Get-Help ./script.ps1'\r\n```\r\n\r\nAlso ensure you don't have a function directly after the help content, if you do then you need to include two new lines or a `param()` statement.",
      "created_at": "2022-04-05T17:10:58Z",
      "updated_at": "2022-04-05T17:12:33Z"
    },
    {
      "author": "FilBot3",
      "author_association": "NONE",
      "body": "That was it. There was a comment directly after the closing `#>`. Is that called out anywhere and I missed it?",
      "created_at": "2022-04-05T17:13:30Z",
      "updated_at": "2022-04-05T17:13:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's called out a little bit in [#comment-based-help-for-a-script](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help?view=powershell-7.2#comment-based-help-for-a-script). I usually try to ensure that I have a `param()` statement following it immediately, e.g.\r\n\r\n```powershell\r\n<#\r\n.SYNOPSIS\r\n    Export Azure DevOps Library Groups into JSON files.\r\n#>\r\nparam()\r\n\r\netc\r\n```",
      "created_at": "2022-04-05T17:16:55Z",
      "updated_at": "2022-04-05T17:16:55Z"
    },
    {
      "author": "FilBot3",
      "author_association": "NONE",
      "body": "Of course, my eyes skipped over it and went straight to the code examples. Thank you @SeeminglyScience ",
      "created_at": "2022-04-05T17:20:52Z",
      "updated_at": "2022-04-05T17:20:52Z"
    }
  ],
  "created_at": "2022-04-05T16:29:09Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 17109,
  "state": "closed",
  "title": "PowerShell Get-Help not displaying local script's Comment Based Help",
  "updated_at": "2022-04-05T17:20:52Z"
}