{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12986",
  "author": "EgorEmeliyanov",
  "body": "Good afternoon,\r\n\r\nIf we grab the Validateset example from [Powershell documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7):\r\n\r\n```\r\n[cmdletbinding()]\r\n\r\nParam(\r\n    [Parameter(Mandatory=$true)]\r\n    [ValidateSet(\"Low\", \"Average\", \"High\")]\r\n    [String[]]\r\n    $Detail\r\n)\r\n\r\nWrite-Host \"Hi, I'm $Detail\"\r\n```\r\nSince we are casting Detail as an array, we should be able to specify multiple parameters and in fact we can if using old Windows PowerShell 5.1:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84957912-39edf580-b0ca-11ea-81b0-50996dd36e65.png)\r\n\r\nHowever, if we change powershell to pwsh (7.0.2), validateset throws an error:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84957957-51c57980-b0ca-11ea-91ae-8d04dd508efb.png)\r\n\r\nIf we go into interactive pwsh shell and run the file from there, getting rid of the quotes does the trick:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84958017-6b66c100-b0ca-11ea-8c7e-b1ca157133ed.png)\r\n\r\nTherefore I assumed that cmd.exe somehow transforms and breaks arguments, but: (a) it does the same thing in Ubuntu bash and (b) If, instead of $Detail we output $PSBoundParameters (obviously after getting rid of ValidateSet so we reach this point in our code), we can see that the arguments have been correctly passed with or without quotes and cmd.exe is not guilty:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84958196-d57f6600-b0ca-11ea-953c-f52fb216728e.png)\r\n\r\nAm I missing something very obvious? Thank you for looking into this!",
  "closed_at": "2020-06-19T15:49:46Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this _used_ to work only because the default mode of input was different. Try with both an explicit `-File ./test-param.ps1` and an explicit `-Command ./test-param.ps1` rather then supplying the file path positionally and you'll get different results. IIRC the default argument mode was changed sometime in 6.x, so that's why you're seeing a different here I think.",
      "created_at": "2020-06-17T23:33:38Z",
      "updated_at": "2020-06-17T23:33:38Z"
    },
    {
      "author": "EgorEmeliyanov",
      "author_association": "NONE",
      "body": "Hi, @vexx32 !\r\n\r\nThank you very much for pointing me in the right direction. I was able to make it work when using -Command with dot-sourcing which is likely work for me:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84967844-010e4a80-b0e3-11ea-8ea5-401bd36f0170.png)\r\n\r\nHowever, I still think something is not right either with the documentation or the interpreter. The documentation states that \"_[...] all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters [...] Parameters passed to the script are passed as literal strings, after interpretation by the current shell. For example [...] pwsh -File .\\test.ps1 -TestParam %windir%_\" But I wasn't able to find the right syntax to make it work with explicit -File:\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84968026-84c83700-b0e3-11ea-8231-69bd1931645b.png)\r\n\r\nThank you!\r\n\r\n~Egor",
      "created_at": "2020-06-18T01:47:11Z",
      "updated_at": "2020-06-18T01:47:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That last one is definitely one I'd expect to work given your code, absolutely. That's very strange...",
      "created_at": "2020-06-18T01:51:36Z",
      "updated_at": "2020-06-18T01:51:36Z"
    },
    {
      "author": "EgorEmeliyanov",
      "author_association": "NONE",
      "body": "I got the same result in Ubuntu (version 7.0.2 as well):\r\n\r\n![image](https://user-images.githubusercontent.com/17551749/84969056-e7223700-b0e5-11ea-8808-91eee1233f6e.png)\r\n\r\nupd: If I output $PSBoundParameters['Detail'].count it shows that in all failed cases count equals to 1, so those arguments are passed as a single element (when using with explicit -Command it shows 2 as expected).",
      "created_at": "2020-06-18T02:11:47Z",
      "updated_at": "2020-06-18T02:20:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The `-File` CLI parameter doesn't support _arrays_, so you'll have to use `-Command`.\r\n\r\nYour quote from the docs (emphasis added) provides a clue as to why: \r\n\r\n> Parameters passed to the script are passed as _literal strings_, after interpretation _by the current shell_.\r\n\r\nThat is, PowerShell uses the values _as broken into arguments by the calling shell_ as literals - without then _also_ trying to interpret them as a _PowerShell_ command line (only `-Command` does that).\r\n\r\nTraditional shells have no concept of an array, and pass `\"Low\",\"High\"` as a _single_ argument (received by PowerShell as verbatim string `Low,High`); if you tried to put a space between the elements - `\"Low\",\" High\"` - they pass _2_ arguments, received as verbatim `Low,` (note the trailing `,`) and verbatim `High`.\r\n\r\nNote that PowerShell itself too passes arguments this way _when calling external programs_.\r\n(By contrast if you use `(...)` around the array to turn it into an _expression_, PowerShell will pass the array elements as _individual arguments_; e.g., `printf [%s] ('Low','High')` yields `[Low][High]`, whereas `printf [%s] 'Low','High'` yields `[Low,High]`)\r\n\r\nSee also:  https://stackoverflow.com/a/48959328/45375\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/48957580/passing-string-from-batch-file-which-contains-double-quotes-to-powershell\">Passing string[] from batch file (which contains double quotes \") to powershell script</a></strong></div><div>I have a powershell script which has a string[] parameter and try to pass value to this from batch file\n\nPowerShell Script\n\n[string[]]$ScriptArgs\r\nBatch File\n\npowershell -File Foobar.ps1 -ScriptArgs -</div></blockquote>",
      "created_at": "2020-06-19T13:46:30Z",
      "updated_at": "2020-06-19T13:46:32Z"
    },
    {
      "author": "EgorEmeliyanov",
      "author_association": "NONE",
      "body": "Thank you, @mklement0 that explains it.",
      "created_at": "2020-06-19T15:49:46Z",
      "updated_at": "2020-06-19T15:49:46Z"
    }
  ],
  "created_at": "2020-06-17T22:47:57Z",
  "labels": [],
  "number": 12986,
  "state": "closed",
  "title": "ValidateSet with multiple values fails in PowerShell 7.0.2",
  "updated_at": "2020-06-19T15:49:46Z"
}