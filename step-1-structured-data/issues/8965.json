{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8965",
  "author": "nanyiyang",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\nPart of HackIllinois with @TylerLeonhardt and @rjmholt \r\nAdded an OnlyMatching parameter to Select-String with similar behavior to grep -o. Also made OnlyMatching parameter to work with AllMatches.\r\n\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\nResolves https://github.com/PowerShell/PowerShell/issues/7712.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [X] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-04-20T05:18:51Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8965) <br/>All CLA requirements met.",
      "created_at": "2019-02-24T05:59:16Z",
      "updated_at": "2019-02-24T06:04:25Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "How does this change work with `-AllMatches`?\r\n\r\nI'd probably expect something like this:\r\n```\r\nPS > \"asdf 123 asdf\" | Select-String \\d -OnlyMatching -AllMatches\r\n1\r\n2\r\n3\r\n```\r\n",
      "created_at": "2019-02-24T08:24:59Z",
      "updated_at": "2019-02-24T08:24:59Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Is this really a change we want to make? \r\nThe same result can be accomplished on the command line with ` | % Line`, right?\r\n\r\nThe *nix commands has lots of flags to change the output format of commands, but this is generally not needed in PowerShell since we have structured objects in the pipeline.\r\n\r\nTab completion will have to be fixed, since this parameter changes the output type.\r\n\r\nCan you help me with a scenario where this is change is compelling?\r\n",
      "created_at": "2019-02-25T10:28:45Z",
      "updated_at": "2019-02-25T10:28:45Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I want to ping @mklement0 to get his thoughts but @PowerCode I don't think that accomplishes the same goal.\r\n\r\n`Line` gives you the _whole line_. We want to only get the _matching parts of the line_.",
      "created_at": "2019-02-25T19:39:22Z",
      "updated_at": "2019-02-25T19:39:22Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nUpdate-TypeData -Typename Microsoft.PowerShell.Commands.MatchInfo -MemberName MatchingText`\r\n  -MemberType ScriptProperty -Value {foreach($m in $this.Matches){foreach($g in $m.Groups){$g.Value}}}\r\n```\r\n\r\nThen \r\n```powershell\r\nsls \u2026 | foreach MatchingText\r\n```\r\n",
      "created_at": "2019-02-25T21:58:41Z",
      "updated_at": "2019-02-25T21:58:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode:\r\n\r\n> The same result can be accomplished on the command line with ` | % Line`, right?\r\n\r\nSupporting returning _whole lines_ directly is the subject of #7713 - and both it and the change at hand (matching parts only, via #7712) have been green-lit.\r\n\r\nThe motivation is the same in both cases:\r\n\r\n* _Convenience and semantic directness_: Wanting _just strings_ (whether in full or just the matched parts) strikes me as the _typical_ use case (not least because the cmdlet's name is `Select-*String*`) - see https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-426865614\r\n\r\n* _Performance_: See https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427181571\r\n",
      "created_at": "2019-02-26T03:20:04Z",
      "updated_at": "2019-02-26T03:20:04Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@powercode  I can get behind that. We can add another property to `MatchInfo` called `MatchingText` and then do:\r\n\r\n```powershell\r\nSelect-String \"foo\" | foreach MatchingText\r\n```\r\n\r\nlike you said to get this behavior.\r\n\r\nFor context to @nanyiyang... \r\n\r\n```powershell\r\nSelect-String \"foo\"\r\n```\r\n\r\nreturns a collection of `MatchInfo`, right? By adding a property called `MatchingText` to that we can use the `ForEach-Object` or `foreach` or `%` command:\r\n\r\n```powershell\r\nSelect-String \"foo\" | foreach MatchingText\r\n```\r\n\r\nwhich says, give me just the `MatchingText` in each of these objects. This would achieve what we want to achieve.",
      "created_at": "2019-02-26T03:31:01Z",
      "updated_at": "2019-02-26T03:34:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TylerLeonhardt: \r\n\r\nThat is only slightly less verbose than what you have to do currently:\r\n\r\n```powershell\r\n# Works with -AllMatches too\r\nPS> 'afoobar' | Select-String 'foo' | foreach { $_.Matches.Value }\r\nfoo\r\n```\r\n\r\nand wouldn't yield the hoped-for performance improvements - though I suppose it could be implemented _as well_ (though I personally think `-OnlyMatching` is sufficient).\r\n\r\nAlso note that `.MatchingText`, if implemented as a property of `[Microsoft.PowerShell.Commands.MatchInfo]`, would have to be an _array_ to accommodate the <br>`-AllMatches` case.",
      "created_at": "2019-02-26T03:55:14Z",
      "updated_at": "2019-02-26T03:59:13Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Good catch... I feel like in both #7713 and #7712 you're really asking for a different object to be returned by `Select-String`.\r\n\r\nOne that doesn't contain the extra fluff for an increase in performance?",
      "created_at": "2019-02-26T04:40:05Z",
      "updated_at": "2019-02-26T04:40:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Specifically, I'm asking for _strings_ to be returned - which is arguably `Select-Strings`'s core mandate.\r\n\r\nNot having fluff, i.e. not having to access properties in a subsequent step when all you're looking for is strings not only [improves performance](https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427181571), but is also concise and convenient.\r\n",
      "created_at": "2019-02-26T05:08:21Z",
      "updated_at": "2019-02-26T05:08:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've summed up the rationale for this new switch as well as for `-Raw`  in https://github.com/PowerShell/PowerShell/pull/8962#issuecomment-471239735; given that this new switch was approved in  #7712, I suggest you voice any objections there.",
      "created_at": "2019-03-11T05:00:56Z",
      "updated_at": "2019-03-11T05:00:56Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-10T05:17:34Z",
      "updated_at": "2019-04-10T05:17:34Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically closed because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-20T05:18:49Z",
      "updated_at": "2019-04-20T05:18:49Z"
    }
  ],
  "created_at": "2019-02-24T05:59:05Z",
  "number": 8965,
  "state": "closed",
  "title": "Adds an OnlyMatching parameter to Select-String to return only the string that matches the pattern",
  "updated_at": "2019-04-20T05:18:51Z"
}