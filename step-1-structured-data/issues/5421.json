{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5421",
  "author": "mklement0",
  "body": "Note:\r\n\r\n* The problem only surfaces on Windows.\r\n* The problem does _not_ occur when you use `-Wait` in addition to `-PassThru`  as opposed to a separate `Wait-Process` call.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nOn Windows:\r\n\r\n```powershell\r\n$p = saps cmd -args '/c', 'ver' -PassThru -NoNewWindow; wait-process -id $p.Id; \"Exit code: [$($p.ExitCode)]\"\r\n```\r\n\r\nNote that the problem only occurs when `-NoNewWindows` and /or any of the `-RedirectStandard*` parameters are present.\r\n\r\nInserting a `$p.WaitForExit()` call after the `Wait-Process` call, as suggested [in the docs](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exitcode%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396) to ensure that `.ExitCode` has a value (which should be the equivalent of `Wait-Process`), doesn't help.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n\r\nMicrosoft Windows [Version 10.0.15063]\r\nExit code: [0]\r\n```\r\n\r\n`$ps.ExitCode` should contain `0`, given that the `cmd` command reports exit code `0`.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n\r\nMicrosoft Windows [Version 10.0.15063]\r\nExit code: []\r\n```\r\n\r\nNote how `$ps.ExitCode` is unexpectedly stringified to the empty string.\r\nAlso, even though `Get-Member` indicates that the property's date type is `[int]`, `$null -eq $ps.ExitCode` is `$true`.\r\n\r\nThis suggests that an exception is occurring behind the scenes, which PowerShell quietly ignores.\r\n\r\nAn exception when accessing `.ExitCode` should only occur if the process hasn't exited yet, however, which is at odds with having used `Wait-Process` and `$p.HasExited` indicating `$true`.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.9 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\r\n\r\nDug this up... Seems as though it's not so much waiting for it to end as it is *explicitly querying for the process handle* while it's still running is what allows the exit code to be captured. \r\n\r\nIdeally, `Start-Process` could internally query the process handle from the object before passing it to the pipeline in order to ensure the exit code is always captured, regardless of the circumstance.",
      "created_at": "2018-08-27T14:14:57Z",
      "updated_at": "2018-08-27T14:14:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great find, @vexx32 - that sounds like a great workaround.\r\n\r\nA little more background info to flesh out your statement, from a [linked answer](https://stackoverflow.com/a/23797762/45375):\r\n\r\n> This is a quirk of the implementation of the .NET Process object. The implementation of the ExitCode property first checks if the process has exited. \r\nFor some reason, the code that performs that check not only looks at the HasExited property but also [verifies that the process handle is present in the process object and throws an exception if it is not](https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/Process.cs,954). PowerShell intercepts that exception and returns null. \r\nAccessing the Handle property causes the process object to retrieve the process handle and store it internally. Once the handle is stored in the process object, the ExitCode property works as expected.\r\n\r\nI wonder if there was ever a good reason for this behavior, or whether we should also file a CoreFx bug report.  ",
      "created_at": "2018-08-27T20:17:23Z",
      "updated_at": "2018-08-27T20:24:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It probably can't hurt, honestly. But meantime, we can temp-fix this fairly quickly, it would appear. \ud83d\ude04 \r\n\r\nI'm not familiar with the internals of that object, but I wouldn't be surprised if there was some weirdness where it accesses the ExitCode via the handle reference somehow, so if it isn't retrieved before the process exits, it can't get at it, or something.\r\n\r\nShould still be fixed either way, heh.",
      "created_at": "2018-08-27T20:22:31Z",
      "updated_at": "2018-08-27T20:41:10Z"
    },
    {
      "author": "jmaxxz",
      "author_association": "NONE",
      "body": "Any updates on this? This really should be addressed.",
      "created_at": "2021-07-22T22:27:53Z",
      "updated_at": "2021-07-22T22:27:53Z"
    },
    {
      "author": "jordanrh1",
      "author_association": "NONE",
      "body": "Any update? This is a rather impactful productivity blocker because you can't tell if process succeeded or failed. Makes start-process pretty much useless.",
      "created_at": "2022-01-14T17:17:51Z",
      "updated_at": "2022-01-14T17:17:51Z"
    }
  ],
  "created_at": "2017-11-11T18:33:36Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Management"
  ],
  "number": 5421,
  "state": "open",
  "title": "Process objects created with Start-Process -NoNewWindow and/or -RedirectStandard* never report their exit code on Windows.",
  "updated_at": "2022-01-14T17:17:51Z"
}