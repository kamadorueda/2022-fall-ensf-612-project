{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7290",
  "author": "iRon7",
  "body": "Steps to reproduce\r\n------------------\r\nInsert the following commands\r\n\r\n```powershell\r\n$a = @{Key = \"Test\"}\r\n$a.Parent = $a\r\n$a | ConvertTo-Xml -As String\r\n```\r\nExpected behavior\r\n-----------------\r\nI would expect an XML string with the output limited to the default depth of **3**:\r\n\r\n```powershell\r\n<Property Name=\"Key\" Type=\"System.String\">Key</Property>\r\n<Property Name=\"Value\" Type=\"System.String\">Test</Property>\r\n<Property Name=\"Key\" Type=\"System.String\">Parent</Property>\r\n<Property Name=\"Value\" Type=\"System.Collections.Hashtable\">\r\n  <Property Name=\"Key\" Type=\"System.String\">Key</Property>\r\n  <Property Name=\"Value\" Type=\"System.String\">Test</Property>\r\n  <Property Name=\"Key\" Type=\"System.String\">Parent</Property>\r\n  <Property Name=\"Value\" Type=\"System.Collections.Hashtable\">\r\n    <Property Name=\"Key\" Type=\"System.String\">Key</Property>\r\n    <Property Name=\"Value\" Type=\"System.String\">Test</Property>\r\n    <Property Name=\"Key\" Type=\"System.String\">Parent</Property>\r\n    <Property Name=\"Value\" Type=\"System.String\">end</Property>\r\n  </Property>\r\n</Property>\r\n```\r\n\r\nActual behavior\r\n---------------\r\nInstead, it first shows:\r\n\r\n> Process is terminating due to StackOverflowException.\r\n\r\nAnd a few seconds later the whole shell is terminated.\r\n\r\n- Note: the same issue appears when the depth is explicitly given (e.g. `-Depth 3`)\r\n\r\n**PowerShell Windows**\r\nA similar issue exist in PowerShell Windows (5.1) which reports:\r\n\r\n> ConvertTo-Xml : Stream was too long.\r\n> At line:1 char:6\r\n> + $a | ConvertTo-Xml\r\n> +      ~~~~~~~~~~~~~\r\n>     + CategoryInfo          : NotSpecified: (:) [ConvertTo-Xml], IOException\r\n>     + FullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Commands.ConvertToXmlCommand\r\n\r\nBut does *not* crash.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nConvertTo-Xml version: 3.1.0.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I wonder whether I should split this issue in two:\r\n\r\n1. `ConvertTo-Xml` *cmdlet* doesn't limit the depth for (recursive) HashTables\r\n2. PowerShell Core Process terminates when the stream is too long",
      "created_at": "2018-07-14T09:05:05Z",
      "updated_at": "2018-07-16T08:19:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 Thanks for your report!",
      "created_at": "2018-07-16T14:33:19Z",
      "updated_at": "2018-07-16T14:33:19Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 it's not just `[hashtable]` - `ConvertTo-Xml` does this (ignores depth and writes members of) a number of built-in collection types, inclusing any `Dictionary`, `Stack` or `List` type. ",
      "created_at": "2018-12-18T23:10:43Z",
      "updated_at": "2018-12-18T23:10:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The fix is a breaking change. \r\n/cc @SteveL-MSFT ",
      "created_at": "2018-12-20T18:49:56Z",
      "updated_at": "2018-12-20T18:52:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov to be clear, the breaking change here is that `-Depth` would now be enforced when previously it did not?",
      "created_at": "2018-12-20T19:07:17Z",
      "updated_at": "2018-12-20T19:07:17Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Yes, that is how I see it.\n\nOp do 20 dec. 2018 20:07 schreef Steve Lee <notifications@github.com:\n\n> @iSazonov <https://github.com/iSazonov> to be clear, the breaking change\n> here is that -Depth would now be enforced when previously it did not?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/7290#issuecomment-449103504>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AHtNwsSLlrYjHgJuWg9p33Ufdd-f6CPmks5u69__gaJpZM4VPx6l>\n> .\n>\n",
      "created_at": "2018-12-20T19:09:45Z",
      "updated_at": "2018-12-20T19:09:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Yes, again Depth :-) Currently it is ignored for nested properties and containers. I think it must fit *-Json cmdlets.",
      "created_at": "2018-12-20T19:18:34Z",
      "updated_at": "2018-12-20T19:18:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Concern is introducing a breaking change for existing scripts that have deep nested hashtables that work today and would be different if we started enforcing `-Depth`.  Recommendation is to keep current default behavior with hashtable except test if sufficient stack is available and throw an exception.  If `-Depth` is explicitly specified, we should change the cmdlet to enforce that depth for hashtables.  This should alleviate breaking change concerns.",
      "created_at": "2019-01-16T23:42:54Z",
      "updated_at": "2019-01-16T23:42:54Z"
    },
    {
      "author": "danekan",
      "author_association": "NONE",
      "body": "Regarding the last comment and breaking change status, it's incorrect to assess this risk as only impacting hashtables, it doesn't work for many other examples.",
      "created_at": "2019-05-22T21:11:07Z",
      "updated_at": "2019-05-22T21:11:07Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@danekan correct, if you look at the [initial part of the solution](https://github.com/PowerShell/PowerShell/pull/8476/files#diff-f5f7d9a73edf98d4af93244f28511cde) you'll see that it's not hashtable/dictionary-specific",
      "created_at": "2019-05-27T10:11:06Z",
      "updated_at": "2019-05-27T10:11:06Z"
    }
  ],
  "created_at": "2018-07-14T08:31:30Z",
  "labels": [
    "Issue-Bug",
    "Breaking-Change",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 7290,
  "state": "open",
  "title": "ConvertTo-Xml doesn't limit the depth for (recursive) HashTables (Crash)",
  "updated_at": "2019-05-27T10:11:07Z"
}