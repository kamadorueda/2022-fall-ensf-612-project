{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5122",
  "author": "PetSerAl",
  "body": "As far as I understand, issue caused by #2038.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n(Write-Output -NoEnumerate 1).GetType().FullName\r\n(1 | Write-Output -NoEnumerate).GetType().FullName\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nSystem.Int32\r\nSystem.Int32\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nSystem.Management.Automation.PSObject[]\r\nSystem.Management.Automation.PSObject[]\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.8\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.8-46-ge3397b63e756bf432bbe80f5e9c4407d52d6b5b9\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Whoops.. meant to cancel my comment, not close the issue. I'm not sure if this is a bug or by design, but I'll label it as a bug until someone says otherwise.",
      "created_at": "2017-10-15T15:18:33Z",
      "updated_at": "2017-10-15T15:20:33Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @PetSerAl PetSerAl,\r\n\r\nActually this is by design from all the way back in  v1.0. For consistency reasons, the team at that time decided that cmdlets would always return PSObjects. The PowerShell engine invocation APIs also always return collections of PSObject.",
      "created_at": "2018-03-06T00:21:03Z",
      "updated_at": "2018-03-06T00:21:03Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay As far as I understand `PSObject` and `PSObject[]` are different things. And that change in behavior of `Write-Object` was introduced quite recently. In v1.0 \u2013 v5.1 `Write-Object` does not behave that way.",
      "created_at": "2018-03-06T00:38:52Z",
      "updated_at": "2018-03-06T00:38:52Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "@vexx32 `Write-Output -NoEnumerate` is not _fully_ fixed in PS6.2.0 and up:\r\n\r\nSee: https://github.com/PowerShell/PowerShell/issues/5122\r\n\r\n```powershell\r\nPS C:\\Users\\john.zabroski> ($PSVersionTable).PSVersion\r\n\r\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\r\n-----  -----  -----  --------------- ----------\r\n6      2      1\r\n\r\nPS C:\\Users\\john.zabroski> (Write-Output -NoEnumerate 1).GetType().FullName\r\nSystem.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\n\r\nPS C:\\Users\\john.zabroski> (1 | Write-Output -NoEnumerate).GetType().FullName\r\nSystem.Int32\r\n```\r\n\r\nand also (I would argue the following is correct behavior, but just want to document it so that any fix to the above doesn't break this scenario):\r\n\r\n```powerhell\r\nPS C:\\Users\\john.zabroski> (Write-Output -NoEnumerate @()).GetType().FullName\r\nSystem.Object[]\r\n```\r\n\r\nThe problem still exists for:\r\n* Direct argument\r\n* Not a collection\r\n\r\nThe problem is fixed for:\r\n* Pipeline argument\r\n* Collection or scalar value\r\n",
      "created_at": "2019-06-28T20:35:39Z",
      "updated_at": "2019-06-28T20:35:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 very curious. Okay. Will have to dig into that some...",
      "created_at": "2019-06-28T20:43:04Z",
      "updated_at": "2019-06-28T20:43:04Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I just ran into a scenario with this that gives an error on PowerShell 7 preview 5 but works fine on Windows PowerShell.\r\n\r\n```\r\n$object = [pscustomobject]@{Name = 'Test'}\r\n$result = (Write-Output $object -NoEnumerate)\r\n$result.Name = 'New Name'\r\n```\r\n\r\nBecause `$result` is wrapped, I get this error:\r\n\r\n```\r\nInvalidOperation:\r\nLine |\r\n   3 | $result.Name = 'New Name'\r\n     | ^ The property 'Name' cannot be found on this object. Verify that the property exists and can be set.\r\n```\r\n\r\nI ran into this trying to get an existing module to work on PowerShell 7. So this is a simplified example of something I found in the wild. ",
      "created_at": "2019-11-15T10:13:56Z",
      "updated_at": "2019-11-15T10:13:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Interesting. Looks like we still have some adjustments to make to the binder. Not sure where those changes would need to be made, but that scenario seems pretty clear we want to have that work. @daxian-dbw any thoughts?",
      "created_at": "2019-11-15T12:17:55Z",
      "updated_at": "2019-11-15T12:17:55Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "Minimal repros on PSCore 6.2.1:\r\n```powershell\r\nPS C:\\WINDOWS\\system32> (Write-Output -NoEnumerate @()).GetType().FullName\r\nSystem.Object[]\r\n```\r\n\r\n```powershell\r\nPS C:\\WINDOWS\\system32> $object = [pscustomobject]@{Name = 'Test'}\r\nPS C:\\WINDOWS\\system32> (Write-Output $object -NoEnumerate).GetType().FullName\r\nSystem.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\n```",
      "created_at": "2019-11-15T14:50:28Z",
      "updated_at": "2019-11-15T14:50:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Confirmed that is the same on `7-preview.5`.\r\n\r\nI _think_ we may be able to fix this scenario by altering the binder to use `List[PSObject]` rather than `List[object]` -- by using `List[object]` here in binding the ValueFromRemainingArguments parameter, it looks like Write-Output is being forced to discard all ETS / instance members on any input objects. That doesn't strike me as a good behaviour at all.\r\n\r\nWe should probably try to fix this for PS7 if we can, @SteveL-MSFT?",
      "created_at": "2019-11-15T14:59:28Z",
      "updated_at": "2019-11-15T14:59:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 we can still take fixes if the fix itself isn't too risky.  Are you going to submit a PR?",
      "created_at": "2019-11-15T17:44:09Z",
      "updated_at": "2019-11-15T17:44:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't know how risky said fix is, or if it's appropriate, and I'm not familiar with the code for the parameter binder itself. \r\n\r\nThat said, I'm sure I can follow the breadcrumbs and figure it out. I'd prefer if we can get @daxian-dbw's thoughts first, as I think he's pretty familiar with the parameter binder.",
      "created_at": "2019-11-15T18:01:00Z",
      "updated_at": "2019-11-15T18:01:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> @vexx32 we can still take fixes if the fix itself isn't too risky. Are you going to submit a PR?\r\n\r\nChanges in the parameter binder is always risky, especially we are nearly at the end of 7.0.0 cycle \ud83d\ude04\r\nThat being said, it's definitely worth to better understand the cause of the problem first.",
      "created_at": "2019-11-15T19:39:11Z",
      "updated_at": "2019-11-15T19:39:11Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "@daxian-dbw are there unit tests for this I can look at?",
      "created_at": "2019-11-15T19:47:12Z",
      "updated_at": "2019-11-15T19:47:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I might just try taking a stab at fixing it and seeing if my assumption is correct or causes some other problem I'm not expecting. Are you familiar with where this handling for `ValueFromRemainingArguments` takes place @daxian-dbw? It might be worth taking a look.\r\n\r\nI'd rather not wait till post-ps7 to fix `Write-Output` \ud83d\ude15  -- doing so likely guarantees folx recommend heavily against using it and/or even using `ValueFromRemainingArguments` to avoid these unpredictable behaviours.",
      "created_at": "2019-11-15T19:54:51Z",
      "updated_at": "2019-11-15T19:55:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for a _workaround_:\r\n\r\nUse `-InputObject` explicitly rather than positional parameter binding:\r\n\r\n```powershell\r\n# OK in v6.2+, thanks to -InputObject\r\n(Write-Output -NoEnumerate -InputObject 1).GetType().Name | Should -Be Int32\r\n```\r\n\r\nThis is a somewhat ironic reversal from Windows PowerShell, where the inverse workaround (_omitting_ `-InputObject`) is required to make `-NoEnumerate` behave properly (with input _collections_).\r\n",
      "created_at": "2020-01-30T16:53:39Z",
      "updated_at": "2020-01-30T16:53:39Z"
    }
  ],
  "created_at": "2017-10-14T22:39:12Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 5122,
  "state": "open",
  "title": "Write-Output -NoEnumerate wrap singular items into PSObject[]",
  "updated_at": "2020-07-30T22:37:44Z"
}