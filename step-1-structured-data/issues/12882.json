{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12882",
  "author": "Liturgist",
  "body": "## Summary of the new feature/enhancement\r\nThe currently documented Test-Json command has parameters:\r\n```\r\n-Json\r\n-Schema\r\n```\r\nRecently added was:\r\n`-SchemaFile`\r\n\r\nTo create an orthogonal view, the following parameter should be supported.\r\n`-JsonFile`\r\n\r\nAliases would also be helpful.\r\n```\r\n-JsonString for -Json\r\n-SchemaString for -Schema\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'd suggest using `-Path` for the parameter name. `-JsonFile` is OK as an alias, but we should be consistent with existing naming schemes for the parameter names where appropriate. \ud83d\ude42 ",
      "created_at": "2020-06-03T19:33:15Z",
      "updated_at": "2020-06-03T19:33:15Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "> I'd suggest using `-Path` for the parameter name. `-JsonFile` is OK as an alias, but we should be consistent with existing naming schemes for the parameter names where appropriate. \ud83d\ude42\r\n\r\nUsing `-Path` could work does the same thing as `-JsonFile`.\r\n\r\nWe need a `-JsonFile` to match with `-SchemaFile`.",
      "created_at": "2020-06-03T20:01:29Z",
      "updated_at": "2020-06-03T20:01:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, parameter aliases are usually the best way to accomplish that, IMO. Makes sense to me \ud83d\ude42 \r\n\r\ni.e., something like this:\r\n\r\n```cs\r\n[Parameter]\r\n[Alias(\"JsonFile\")]\r\npublic string Path { get; set; }\r\n```\r\n\r\nWill let you use either `-JsonFile` or `-Path` to the same effect on the cmdlet. ",
      "created_at": "2020-06-03T20:21:13Z",
      "updated_at": "2020-06-03T20:24:45Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I can see in .\\src\\PowerShell\\src\\Microsoft.PowerShell.Commands.Utility\\commands\\utility\\TestJsonCommand.cs where this change might be made.\r\n\r\nWhere would the help be changed?",
      "created_at": "2020-06-04T12:31:06Z",
      "updated_at": "2020-06-04T12:31:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I could be mistaken, but I believe cmdlet help is generated from the C# documentation comments on the parameters, at least in part.\r\n\r\nThere may be additional changes that need to be added to the larger help files that are managed in [the docs repo](/MicrosoftDocs/PowerShell-Docs) \ud83d\ude42 ",
      "created_at": "2020-06-04T12:54:53Z",
      "updated_at": "2020-06-04T12:54:53Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I cloned the github repo and built 7.1.0-preview.3.\r\n\r\nThe `help Test-Json -Full` does not mention `-SchemaFile`, but it does appear to be available on command line completion. That makes it appear that updating the help is a separate operation. Is that correct?",
      "created_at": "2020-06-06T21:08:30Z",
      "updated_at": "2020-06-06T21:08:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, the help will be initially generated to Markdown (which is kept in the docs repo) and then converted to MAML. However, we generally won't see new parameters etc., make their way into help files until the next stable release. If there hasn't already been an issue or PR for the new parameter(s) filed in the docs repo, we should file one so that can be sorted out in time for the next stable release.\r\n\r\nI don't see one... I'll ping the folks involved on that PR so that doesn't get lost: https://github.com/PowerShell/PowerShell/pull/11934#issuecomment-640120030\r\n",
      "created_at": "2020-06-06T21:24:58Z",
      "updated_at": "2020-06-06T21:24:58Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I am wondering if this is something I could do? The process looks a bit challenging. However, I do not know of much that would be easier to get started on.\r\n\r\nIt appears that these are the files that need to change in order to implement this.\r\n\r\n```\r\n// PowerShell/PowerShell\r\n// Code implementing Test-Json\r\n.\\src\\Microsoft.PowerShell.Commands.Utility\\commands\\utility\\TestJsonCommand.cs\r\n// Add pester test here\r\n.\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\\Test-Json.Tests.ps1\r\n\r\n// MicrosoftDocs/PowerShell-Docs \r\n.\\reference\\7.1\\Microsoft.PowerShell.Utility\\Test-Json.md\r\n```\r\n",
      "created_at": "2020-06-09T18:21:48Z",
      "updated_at": "2020-06-09T18:21:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Absolutely! If you get stuck anywhere along the way, feel free to reach out for help. \ud83d\ude42 ",
      "created_at": "2020-06-09T18:28:54Z",
      "updated_at": "2020-06-09T18:28:54Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32, does a formal Feature Request/Idea issue need to be created, or can this be it?",
      "created_at": "2020-06-10T00:58:30Z",
      "updated_at": "2020-06-10T00:58:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this serves that purpose reasonably well. \ud83d\udc4d ",
      "created_at": "2020-06-10T01:00:41Z",
      "updated_at": "2020-06-10T01:00:41Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "There is a string for \"JsonSchemaFileOpenFailure.\" I need to have one for \"JsonFileOpenFailure,\" but I do not know where/how it is created. Building now results in:\r\n\r\n`CS0117: 'TestJsonCmdletStrings' does not contain a definition for 'JsonFileOpenFailure'\r\n`\r\n\r\nJsonSchemaFileOpenFailure appears in PowerShell\\src\\Microsoft.PowerShell.Commands.Utility\\gen\\TestJsonCmdletStrings.cs, but that file is auto-generated. How do I create a new string for this? And, is there something more to create a new exception?\r\n\r\n```\r\nException exception = new Exception(\r\n    string.Format(\r\n        CultureInfo.CurrentUICulture,\r\n        TestJsonCmdletStrings.JsonSchemaFileOpenFailure,\r\n        resolvedpath),\r\n    e);\r\nThrowTerminatingError(new ErrorRecord(exception, \"JsonSchemaFileOpenFailure\", ErrorCategory.OpenError, resolvedpath));\r\n```\r\n\r\nAlso, I need to read the .json file. The schema file is read with:\r\n`jschema = JsonSchema.FromFileAsync(resolvedpath).Result;`\r\n\r\nMy initial attempt is to use the following, but I fear this is too simplistic and will not account for character encoding.\r\n`_json = System.IO.File.ReadAllText(resolvedpath);`\r\n",
      "created_at": "2020-06-11T01:29:55Z",
      "updated_at": "2020-06-11T01:29:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Do a search through the repo for the existing string name, but make sure you're looking through `.resx` files -- those are what the class resource files are generated from. It's essentially XML, add a new entry with the appropriate name and string value, and you should be set. You may need to use `Start-PSBuild -ResGen` to ensure the resource classes are regenerated correctly.\r\n\r\nIn terms of reading a file in, there's a bunch of ways to do it, but personally I'd recommend using the SessionState.Path methods. Here's a small sample from one of my personal projects that I built...\r\n\r\n```cs\r\n                var resolvedPaths = SessionState.Path.GetResolvedPSPathFromPSPath(value);\r\n                if (resolvedPaths.Count > 1)\r\n                {\r\n                    throw new ArgumentException(string.Format(\r\n                        \"Unable to resolve argument for parameter {0} to a single file path.\", nameof(BackgroundImage)));\r\n                }\r\n\r\n                _backgroundFullPath = resolvedPaths[0].Path;\r\n```\r\n\r\nI think you can probably drop the check and the error to be thrown there, depending on how the cmdlet is written? If it's capable of handling multiple inputs / you want it to be, you can just take all the resolved paths and run the logic in a loop, outputting data or writing errors for each as needed.",
      "created_at": "2020-06-11T01:41:24Z",
      "updated_at": "2020-06-11T01:41:50Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Thanks for your help and encouragement. Some progress made. Parameters created and string added. I moved from VS Code to Visual Studio. Much easier to edit the .resx strings.",
      "created_at": "2020-06-12T02:31:02Z",
      "updated_at": "2020-06-12T02:31:02Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I have made some changes and would like to run the Pester tests before changing it. After the current Pester tests succeed, I will add tests for the new -JsonFile parameter. Is this the right approach?\r\n\r\nI am not having much success. Using the commands below produces `Passed: 3, Failed:13`. Am I running them incorrectly? Should I run from a different directory?\r\n```\r\nSet-Location -Path $Env:USERPROFILE\\source\\repos\\PowerShell\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\r\nInvoke-Pester -Path '.\\Test-Json.Tests.ps1'\r\n```\r\n\r\nAlso, I do not find `Test-Json.Tests.ps1` in the Visual Studio solution. Should it be there?",
      "created_at": "2020-06-13T17:31:17Z",
      "updated_at": "2020-06-13T17:31:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Don't think so, pretty sure Pester isn't supported by VS itself in the same way other assertion frameworks are.\r\n\r\nBut yeah, in general that's the right approach. I might suggest importing the `build.psm1` from the module root and using `Start-PSPester` for tests if you need to run them locally; some tests depend on helper modules tucked away in some subfolders that can be annoying to find... but I'm not sure what would be failing there.\r\n\r\nIf you want, you can always open a draft PR here and have the CI run the tests to rule out something in your environment causing an unexpected issue. \ud83d\ude0a ",
      "created_at": "2020-06-13T18:29:32Z",
      "updated_at": "2020-06-13T18:29:32Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "In .\\PowerShell\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\\Test-Json.Tests.ps1 there are four (4) JSON strings for testing.\r\n```\r\n    $validJson = @\"\r\n    $invalidTypeInJson = @\"\r\n    $invalidTypeInJson2 = @\"\r\n    $invalidNodeInJson = @\"\r\n```\r\n\r\nTo replicate these tests for the -JsonFile parameter, should I:\r\n```\r\n    a) create four (4) new .json files in the assets directory\r\n    b) create a temp file from each of the four (4) in $Env:TEMP\r\n```\r\nThe temp files would be deleted at the end of the test. Is it important that these exist in the project as static files?",
      "created_at": "2020-06-15T02:30:28Z",
      "updated_at": "2020-06-15T02:30:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not really. You can have the file contents be part of the test file and write to a file. I'd recommend making use of `TestDrive:/` which is provided automatically by Pester, so you needn't worry about cleanup afterwards. Any files remaining in the drive when you exit the `Describe` / `Context` scope they were created in will be deleted automatically. \ud83d\ude42 ",
      "created_at": "2020-06-15T02:33:33Z",
      "updated_at": "2020-06-15T02:33:33Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "The only concern at this time is how the JSON file is read. I followed your advice about using SessionState to get the path. But, I am concerned that ReadAllText() might not always do the right thing with every character encoding.\r\n```\r\nresolvedpath = Context.SessionState.Path.GetUnresolvedProviderPathFromPSPath(JsonFile);\r\n_json = System.IO.File.ReadAllText(resolvedpath);\r\n```\r\nI added to the Pester tests and found that I could run them locally using:\r\n```\r\nImport-Module -Name .\\build.psm1\r\nStart-PSPester -Path (Get-ChildItem -Recurse Test-Json.Tests.ps1).FullName\r\n```\r\nIf everything is changed, how do I get the changes from my machine back into Liturgist/PowerShell project on github? The staus bar at the bottom of VS reports \"There are currently no unpushed commits.\" However, the changes are not on github.",
      "created_at": "2020-06-17T10:48:25Z",
      "updated_at": "2020-06-17T10:49:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh right, need to do a Get-Content call, effectively, for that kind of thing. Hm, how's that done, again...\r\n\r\nI don't recall exactly, but I think it's somewhere in `InvokeProvider.Content` probably a `Get()` method that takes a path?\r\n\r\nMake sure you do `git add .` / mark the changes as \"staged\" in the VS Code UI with the \u2795 button in the Git integration UI, and then it should allow you to enter a commit message and make the commit. Once the commit has been applied, you can push it up to your fork. \ud83d\ude42 ",
      "created_at": "2020-06-17T13:19:25Z",
      "updated_at": "2020-06-17T13:19:25Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "System.IO.File.ReadAllText() will interpret files with a BOM as the correct encoding. If the coding is outside of ascii, then I am not sure how it will be interpreted. It might be interpreted as utf8NoBOM, which works fine for ascii and all other UTF-8 files. It might interpret it as oem, but I would hope not. To go beyond this would probably mean needing to add -JsonEncoding and -SchemaEncoding parameters. Necessary?\r\n\r\nI finally found the huge box in the \"Team Explorer - Changes\" pane and the \"Commit\" button. How could I be so blind. I will try to get it pushed to Liturgist/PowerShell soon. Then a draft PR. Right? I appreciate your patience and help.",
      "created_at": "2020-06-17T20:22:44Z",
      "updated_at": "2020-06-17T20:22:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, you can submit a draft PR if you're unsure about any of it, and I'll be happy to have a look. \ud83d\ude42 \r\n\r\nThe reason I suggest the `InvokeProvider` method is mainly just to avoid issues with PSPaths which can sometimes arise with .NET methods. Also, I believe there is some additional handling there. Many cmdlets which read or write text files also support an `-Encoding` parameter to customize the encoding; you might be able to look at one of those cmdlets (Format-Hex, Import-Csv, etc.) for some example usage of how they read files in.\r\n\r\nIf you add an `-Encoding` parameter I'd recommend leaving it just named `-Encoding` to match with existing parameter naming on other cmdlets \ud83d\ude42 \r\n\r\nWhether or not we'd want two separate parameters to handle encoding differently for each file we're reading in... I would say at least initially definitely not. It's probably not worth the work unless we have folks actually asking for something that specialized that really need it. The likelihood that people would event want their schema files and data files encoded differently seems extremely low to me. ^^",
      "created_at": "2020-06-17T20:39:01Z",
      "updated_at": "2020-06-17T20:39:14Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I am using `Context.SessionState.Path.GetUnresolvedProviderPathFromPSPath(JsonFile)` to resolve the file path.\r\n\r\nI am not planning to add a -Encoding parameter. Let's see if it is actually needed. Yes, it would be good to stick to only one -Encoding parameter, but the JSON and schema files -could- be in different encodings. Not a situation I would want to be in, but who knows what people will do. :-)\r\n\r\nMy changes pushed the `PowerShell.sln` file. I doubt if I should be changing that. Let me know how to back it out. Should I have created my own .gitignore file?\r\n\r\nDraft PR coming. I did not see anything about making it \"draft,\" but perhaps I did not get far enough.",
      "created_at": "2020-06-17T21:25:45Z",
      "updated_at": "2020-06-17T21:25:45Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32 - Draft PR is created. I already see some things that should change. I will be learning a lot in this process.",
      "created_at": "2020-06-17T21:45:53Z",
      "updated_at": "2020-06-17T21:45:53Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "=== Codacy/PR Quality Review\r\n\r\n16 identical issues in the Pester tests - test/powershell/Modules/Microsoft.PowerShell.Utility/Test-Json.Tests.ps1\r\n```\r\n\"Cmdlet 'Test-Json' may be used incorrectly. Please check that all mandatory parameters are supplied.\"\r\n```\r\nThere are two (2) mandatory parameters, but they are in different ParameterSets. The tests are all passing. What do I need to change?\r\n\r\n=== CodeFactor\r\n\r\nThere were two (2) complaints of \"a single-line comment must be preceded by a blank line...\"\r\nI could not find a comment like that, but changed the location of some '()' characters.\r\n\r\n=== other\r\n\r\nI have read that I need to rebase on the PowerShell/PowerShell master branch. How do I do that?\r\n\r\nIs it possible to run StyleCop locally? If so, can you point me to some instructions?\r\n\r\nI am not sure about how to make changes to the files in this PR. I will commit them to my fork master branch. What needs to be done then?\r\n\r\nAny suggestions are welcome.",
      "created_at": "2020-06-18T01:32:54Z",
      "updated_at": "2020-06-18T01:32:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "CodeFactor/Codacy suggestions are many times not actionable, partly because the tests in this repo are PowerShell, and some rely on v7 features that aren't supported by those tools yet. \r\n\r\nI'm not sure how to do a rebase in VS Code's UI, but... in a console version of git you'd normally do something like:\r\n\r\n```ps1\r\n# add the main branch as an accessible remote (you'll only need to do this once)\r\ngit remote add upstream https://github.com/PowerShell/PowerShell.git\r\ngit fetch --all\r\n\r\n# rebase\r\ngit rebase upstream/master\r\n```\r\n\r\nFor dropping the file you accidentally committed, usually I'll do:\r\n\r\n1. `git reset --soft HEAD~1` to \"undo\" the last commit,\r\n2. Remove (unstage) the changes in just that file from the list of staged changes. \r\n3. Once you've done that you can re-commit the remainder of the changes that should still be staged.\r\n\r\nGenerally speaking, you shouldn't need to modify the solution file, as far as I'm aware \ud83e\udd14 \r\n\r\nIf there are changes there needed for it to work at all, we'd have to get those merged in a separate PR, so at the least probably leave that for later \ud83d\ude42 ",
      "created_at": "2020-06-18T01:58:34Z",
      "updated_at": "2020-06-18T01:58:34Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32 - I seem to be a bit messed up. I tried to undo the last commit, then only commit the three (3) changed files (without .sln). After several steps I do not remember, I ended up with conflicts.\r\n\r\nI will work on this a little more, but I am wondering if it would be better to delete/discard the current draft PR, I can delete my fork, create a new fork, and work on that one. I have a copy of the changed files and could make the changes easily. It might just be copying then into the working copy. Is this possible?",
      "created_at": "2020-06-19T16:17:48Z",
      "updated_at": "2020-06-19T16:17:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, absolutely, that's an option, and if you're not yet used to git that might be a lot quicker than figuring out exactly what's up.\r\n\r\nIf you like, you can always join the (unofficial) PowerShell [Discord](https://aka.ms/psdiscord)/[Slack](https://aka.ms/psslack) if need be so we can help you out a little more easily if you run into further issues; asynchronous communication can be a bit difficult for complicated git issues. \ud83d\ude01 ",
      "created_at": "2020-06-19T16:26:55Z",
      "updated_at": "2020-06-19T16:26:55Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I closed the PR.\r\nI deleted my fork of PowerShell on github and deleted my local clone.\r\nI forked PowerShell/PowerShell to Liturgist/PowerShell.\r\nUsing Visual Studio 2019, I cloned Liturgist/PowerShell to my local machine.\r\nI had to change .\\global.json to specify the .Net SDK I have.\r\nI made the changes to the three (3) files for Test-Json.\r\n```\r\nTestJsonCommand.cs\r\nTestJsonCmdletStrings.resx\r\nTest-Json.Tests.ps1\r\n```\r\nVisual Studio said that I made changes to:\r\n```\r\nglobal.json\r\nPowerShell.sln\r\n```\r\n\r\nI checked in the three (3) files above.\r\nI created a  new PR, but there are still failures in the CI tests.\r\n\r\nI will work on those, but I need to know a way to check in a changed file and have the PR run tests again. Surely this does not require deleting the fork and starting over every time. Please advise. Thanks.",
      "created_at": "2020-06-20T18:14:59Z",
      "updated_at": "2020-06-20T18:14:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Pushing to the branch you opened the PR from will usually update the PR, in my experience. \ud83d\ude42 ",
      "created_at": "2020-06-21T22:02:25Z",
      "updated_at": "2020-06-21T22:02:25Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32  - I did push the changes to the main (master) branch of my fork of PowerShell.\r\n\r\nWhat will cause PR #13002 to recognize that a source file of the PR has changed and run the CI process again?",
      "created_at": "2020-06-21T22:38:06Z",
      "updated_at": "2020-06-21T22:38:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Usually it will be rerun every commit, I think.",
      "created_at": "2020-06-21T22:40:12Z",
      "updated_at": "2020-06-21T22:40:12Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "It appears that committing before the previous set of CI tests are complete is a problem. Is that correct?\r\n\r\nI am waiting until the current CI tests complete, then will change the code as you suggested.",
      "created_at": "2020-06-22T00:11:06Z",
      "updated_at": "2020-06-22T00:11:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Don't think so, at least not usually. Might take a minute or two to register the new commit, but I think the main CI runners will typically just cancel the current run if they see there's a new commit mid-run.",
      "created_at": "2020-06-22T00:16:36Z",
      "updated_at": "2020-06-22T00:16:36Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I am going to try again. I will save my changed files, delete my fork, make a new fork from PowerShell, clone to my machine, put my changed files back in, put to my fork, create a new PR.",
      "created_at": "2020-06-23T11:50:57Z",
      "updated_at": "2020-06-23T11:50:57Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32 - PR #13014 is my most recent attempt. It still has two (2) complaints about the placement of a PARENTHESIS and complaints about using all mandatory parameters in the Pester test. There are multiple mandatory parameters, but they are in different ParameterSets.\r\n\r\nI am not sure where to go from here. Your advise is welcomed.",
      "created_at": "2020-06-23T16:58:15Z",
      "updated_at": "2020-06-23T16:58:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Those... yep, you can ignore all those I think. Everything I'm seeing is in code regions you've not touched or just the linter picking that your tests use parameters which don't exist in release builds yet (which is expected).\r\n\r\nNice work! Feel free to unmark the WIP and you should be good to go for regular review \ud83d\ude42 ",
      "created_at": "2020-06-23T17:34:36Z",
      "updated_at": "2020-06-23T17:34:36Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Do I just delete the \"WIP \" from the beginning of the PR name? Or, do I create a new PR?\r\n\r\nThanks for all your help, @vexx32. It would not have gotten this far without you.",
      "created_at": "2020-06-23T17:42:28Z",
      "updated_at": "2020-06-23T17:42:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah just edit that out and it should register properly. Glad I could be of help! \ud83d\udc96 ",
      "created_at": "2020-06-23T17:44:34Z",
      "updated_at": "2020-06-23T17:44:34Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@vexx32 - I removed \"WIP\" as you suggested. Is there anything I should do to request a review of PR #13014? I am not trying to appear impatient. I am just trying to learn how this rolls.",
      "created_at": "2020-06-24T18:00:45Z",
      "updated_at": "2020-06-24T18:00:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Nah not usually.. most files will automatically trigger a review. Looks like this one didn't, since it's a newer file, I suppose. No worries, I'll flag a couple likely folks. \ud83d\ude42 ",
      "created_at": "2020-06-24T18:03:28Z",
      "updated_at": "2020-06-24T18:03:28Z"
    }
  ],
  "created_at": "2020-06-03T17:33:50Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "WG-Cmdlets-Utility"
  ],
  "number": 12882,
  "state": "open",
  "title": "Test-Json should have a -JsonFile parameter",
  "updated_at": "2020-06-24T18:03:28Z"
}