{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14332",
  "author": "Fs00",
  "body": "# PR Summary\r\n\r\nThis PR changes `PSVersionInfo` static constructor to retrieve PowerShell version data from `AssemblyInformationalVersionAttribute`, instead of using FileVersionInfo class.\r\n\r\n## PR Context\r\n\r\nThis change is a first step towards making System.Management.Automation single-file-application-friendly \u2012 without this PR, PSVersionInfo static constructor throws an exception when used in a single-file application due to `Assembly.Location` returning `\"\"` \u2012 and provides a small performance boost at startup (which contributes a tiny bit to #14268) since it does not parse System.Management.Automation DLL to retrieve the version anymore.\r\nHere is the performance of the two changed lines:\r\n- before PR: ~0,23ms\r\n- after PR: **~0,03ms** (~7 times faster)\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-12T01:12:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Fs00 Thanks for your contribution!\r\nI hope that we will soon be able to use .Net 6.0 Source Generators. So I'm going to refactor PSVersionInfo class and move all version constants to new GitInfo class. Later we will be able to generate it with a simple source generator and thereby remove all reflection overhead.\r\nI will use your idea in follow PR.\r\n\r\n\r\n",
      "created_at": "2020-12-06T16:33:28Z",
      "updated_at": "2020-12-06T16:33:28Z"
    },
    {
      "author": "microsoft-cla-retired[bot]",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=14332) <br/>All CLA requirements met.",
      "created_at": "2020-12-06T17:37:20Z",
      "updated_at": "2020-12-06T17:44:02Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Good to know.\r\nSince it isn't sure when the refactoring with source generators will be done, could this PR be merged in the meantime? It would still be an improvement on the current situation and would allow me to test System.Management.Automation on single-file applications to see if there are any other issues.",
      "created_at": "2020-12-06T18:04:04Z",
      "updated_at": "2020-12-06T18:04:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Since it isn't sure when the refactoring with source generators will be done, could this PR be merged in the meantime?\r\n\r\nI see with the PR PowerShell loads less assembles at startup - it is great perf improvement! I think we will merge the PR.",
      "created_at": "2020-12-06T18:13:31Z",
      "updated_at": "2020-12-06T18:13:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see `System.Diagnostics.FileVersionInfo.dll` is still loaded on Windows in AmsiUtils.Init()\r\nhttps://github.com/PowerShell/PowerShell/blob/ea3036dc6d5bcbd58ee2b3b1960a3647467d0801/src/System.Management.Automation/security/SecuritySupport.cs#L1355-L1357\r\n\r\n@PaulHigin @TravisEz13 Do we really need the `FileVersionInfo.ProductVersion`? Can we use the same approach as @Fs00 in the PR?\r\n\r\nAlso GetMainModule() is very expensive. Could we use `Assembly.GetEntryAssembly().FullName`? On my laptop it is 5 ms vs 27 ms.\r\nOr P/Invoke [GetModuleFileName](https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamew)? In .Net 6.0 the `GetModuleFileName` is exposed as `System.Environment.ProcessPath`.",
      "created_at": "2020-12-06T19:21:33Z",
      "updated_at": "2020-12-07T07:29:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Fs00 Thanks for your contribution!",
      "created_at": "2020-12-12T06:32:26Z",
      "updated_at": "2020-12-12T06:32:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.3)\n",
      "created_at": "2021-02-12T02:07:31Z",
      "updated_at": "2021-02-12T02:07:31Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@Fs00 Late to the party but please accept my gratitude for your efforts to bring PowerShell closer to single-file-application-friendly!",
      "created_at": "2021-02-13T23:21:01Z",
      "updated_at": "2021-02-13T23:21:01Z"
    }
  ],
  "created_at": "2020-12-06T14:17:36Z",
  "number": 14332,
  "state": "closed",
  "title": "Retrieve PowerShell version in PSVersionInfo using assembly informational version instead of FileVersionInfo",
  "updated_at": "2021-02-13T23:21:01Z"
}