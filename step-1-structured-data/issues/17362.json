{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17362",
  "author": "davidreis97",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI found, after half an hour of pure confusion, that an instance of `System.Collections.ArrayList` is not accepted as a parameter that is marked as `Mandatory` if one of its elements is $null.\r\n\r\nAs an example, running the following script:\r\n\r\n```\r\nfunction Test-Function { \r\n    param(\r\n        [Parameter(Mandatory = $true)] \r\n        [System.Collections.ArrayList] $phrases) \r\n\r\n    foreach ($phrase in $phrases)\r\n    {\r\n        Write-Host $phrase\r\n    }\r\n}\r\n\r\n$myList = New-Object System.Collections.ArrayList\r\n$myList.Add($null) \r\n$myList.Add(\"Should this happen?\")\r\n\r\nTest-Function $myList\r\n```\r\n\r\nResults in the following error:\r\n\r\n```\r\nTest-Function: C:\\Users\\DavidReis\\Documents\\mytest.ps1:16\r\nLine |\r\n  16 |  Test-Function $myList\r\n     |                ~~~~~~~\r\n     | Cannot bind argument to parameter 'phrases' because it is null.\r\n```\r\n\r\nRemoving the line marked as `$myList.Add($null)` makes the list be accepted, as expected.\n\n### Expected behavior\n\n```console\nI would expect a \"Mandatory\" parameter to accept any ArrayList reference that is not $null, independently of its contents.\n```\n\n\n### Actual behavior\n\n```console\nA \"Mandatory\" parameter rejects ArrayList instances which contain one $null element.\n```\n\n\n### Error details\n\n```console\nException             :\r\n    Type              : System.Management.Automation.ParameterBindingValidationException\r\n    Message           : Cannot bind argument to parameter 'phrases' because it is null.\r\n    ParameterName     : phrases\r\n    ErrorId           : ParameterArgumentValidationErrorNullNotAllowed\r\n    Line              : 16\r\n    Offset            : 15\r\n    CommandInvocation :\r\n        MyCommand        : Test-Function\r\n        ScriptLineNumber : 16\r\n        OffsetInLine     : 1\r\n        HistoryId        : 13\r\n        ScriptName       : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n        Line             : Test-Function $myList\r\n        PositionMessage  : At C:\\Users\\DavidReis\\Documents\\mytest.ps1:16 char:1\r\n                           + Test-Function $myList\r\n                           + ~~~~~~~~~~~~~~~~~~~~~\r\n        PSScriptRoot     : C:\\Users\\DavidReis\\Documents\r\n        PSCommandPath    : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n        InvocationName   : Test-Function\r\n        PipelineLength   : 1\r\n        PipelinePosition : 1\r\n        CommandOrigin    : Internal\r\n    ErrorRecord       :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Cannot bind argument to parameter 'phrases' because it is null.\r\n            HResult : -2146233087\r\n        CategoryInfo          : InvalidData: (:) [Test-Function], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Test-Function\r\n        InvocationInfo        :\r\n            MyCommand        : Test-Function\r\n            ScriptLineNumber : 16\r\n            OffsetInLine     : 15\r\n            HistoryId        : 13\r\n            ScriptName       : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n            Line             : Test-Function $myList\r\n            PositionMessage  : At C:\\Users\\DavidReis\\Documents\\mytest.ps1:16 char:15\r\n                               + Test-Function $myList\r\n                               +               ~~~~~~~\r\n            PSScriptRoot     : C:\\Users\\DavidReis\\Documents\r\n            PSCommandPath    : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, C:\\Users\\DavidReis\\Documents\\mytest.ps1: line 16\r\n                                at <ScriptBlock>, <No file>: line 1\r\n    TargetSite        :\r\n        Name          : BindPositionalParametersInSet\r\n        DeclaringType : System.Management.Automation.ParameterBinderController, System.Management.Automation,\r\nVersion=7.2.3.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Data              : System.Collections.ListDictionaryInternal\r\n    Source            : System.Management.Automation\r\n    HResult           : -2146233087\r\n    StackTrace        :\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets,\r\nDictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags,\r\nParameterBindingException& bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments,\r\nUInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException& outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1\r\narguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location ---\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput,\r\nCommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][]\r\ncommandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : InvalidData: (:) [Test-Function], ParameterBindingValidationException\r\nFullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Test-Function\r\nInvocationInfo        :\r\n    MyCommand        : Test-Function\r\n    ScriptLineNumber : 16\r\n    OffsetInLine     : 15\r\n    HistoryId        : 13\r\n    ScriptName       : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n    Line             : Test-Function $myList\r\n    PositionMessage  : At C:\\Users\\DavidReis\\Documents\\mytest.ps1:16 char:15\r\n                       + Test-Function $myList\r\n                       +               ~~~~~~~\r\n    PSScriptRoot     : C:\\Users\\DavidReis\\Documents\r\n    PSCommandPath    : C:\\Users\\DavidReis\\Documents\\mytest.ps1\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, C:\\Users\\DavidReis\\Documents\\mytest.ps1: line 16\r\n                        at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n(I stumbled upon this issue in version 5 and reproduced it in 7 to see if this behavior had changed since then.)\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`Mandatory` assumes not null, if you want to allow it you need to add `[AllowNull()]`",
      "created_at": "2022-05-17T14:44:19Z",
      "updated_at": "2022-05-17T14:44:19Z"
    },
    {
      "author": "davidreis97",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @SeeminglyScience, thanks for the quick answer.\r\n\r\nI think that `AllowNull()` is not the right answer for this case given that the ArrayList is not null. It's a completely valid instance of a list, it's just that one of its elements happens to be `$null`.\r\n\r\nI personally wouldn't expect this use case to require `AllowNull()`, especially given that using that attribute will make it so that the ArrayList itself could be a `$null` reference, which isn't what I want.",
      "created_at": "2022-05-17T14:56:06Z",
      "updated_at": "2022-05-17T14:57:51Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah there isn't an easy way atm to validate not null without enumerating (aside from implementing your own validation attribute). Opening up to WG-Engine to discuss",
      "created_at": "2022-05-17T15:06:57Z",
      "updated_at": "2022-05-17T15:06:57Z"
    }
  ],
  "created_at": "2022-05-17T14:10:24Z",
  "number": 17362,
  "state": "open",
  "title": "ArrayList is not accepted as a \"Mandatory\" parameter to a function if one of its elements is $null",
  "updated_at": "2022-05-17T15:06:57Z"
}