{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2875",
  "author": "wpostma",
  "body": "As a developer working on tooling, I find the ability to READ PSD1 files via `Import-PowershellDataFile` cmdlet incredibly handy. Importing a powershell data file (.psd1) is nice because the format is quite user-friendly and readable format.    It's just not easily writeable.   Which seems a big oversight.  I have learned that the most common term for the things you would write is a \"property bag\".  \r\n\r\nA property bag is really Arrays in key,value form, which contain other Arrays in key,value form, and a way to write that to disk easily in one cmdlet seems to be missing. I find it useful to build up some configuration or state in an Array variable,  sometimes containing Arrays within arrays, something like this:\r\n\r\n```\r\n     @{\r\n     Version  = '1.0.0'\r\n     Name     = 'thing'\r\n     Revision = 'c3a89cd20e19bb82f41e95e0806edc5b6cfd224e'\r\n     Date     = '2016-12-09'\r\n     Build    = '1234'\r\n     Contents = @{\r\n          \"index.html\" = \"23dd7b993f40bb3ae8848fe104b3b767\"\r\n     }\r\n     }\r\n```\r\n\r\nI actually asked this as a question on [stackoverflow here](http://stackoverflow.com/questions/41107531/how-can-i-write-a-nested-arbitrary-associative-array-value-set-to-a-psd1-file-i?noredirect=1#comment69422895_41107531).\r\n\r\nBecause I also use python a lot, I looked around for someone who wrote a `repr()`-like function. Python's fully dynamic nature is similar in many ways to PowerShell's, so it is even more surprising to me that the there are basic holes of \"orthogonality\", that is missing features, like this.\r\n\r\nI could try to write something myself, but it seems to me that this should be built into PowerShell. Initially  I would want it to be a complete opposite or \"counterpart\" to `Import-PowershellDatafile`.\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "wpostma",
      "author_association": "NONE",
      "body": "Existing functionality is that you can load XML into Powershell variables, and save back to XML with `export-clixml` but it seems that PSD1 format would be more native, and more readable than doing this with XML.\r\n",
      "created_at": "2016-12-12T21:01:08Z",
      "updated_at": "2016-12-12T21:01:08Z"
    },
    {
      "author": "wpostma",
      "author_association": "NONE",
      "body": "Also found that some people have implemented this themselves. The value of building something like this in becomes more clear when you see that there are multiple almost-good-enough implementations out there, and that none of them works quite exactly perfectly, is a good argument for building this INTO powershell,  so if I run into more kludges of this sort, I'll keep adding them as comments.\r\n \r\n`Export-PSData` sample works with some trivial @{ \"a\"=\"b\"} cases, but not with others.\r\nhttps://www.gitlab.com/warren.postma/hai/snippets/33366\r\n\r\n\r\n\r\n",
      "created_at": "2016-12-12T21:32:38Z",
      "updated_at": "2016-12-12T21:35:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and agree this would be useful for example to programmatically modify a module manifest",
      "created_at": "2017-01-12T00:13:20Z",
      "updated_at": "2017-01-12T00:13:20Z"
    },
    {
      "author": "Outek",
      "author_association": "NONE",
      "body": "Any news on this issue?",
      "created_at": "2017-11-30T15:01:39Z",
      "updated_at": "2017-11-30T15:01:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Outek there are currently no plans for the PowerShell Team to implement this hence being labeled as `Up-for-Grabs`",
      "created_at": "2017-11-30T23:43:33Z",
      "updated_at": "2017-11-30T23:43:33Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "Please take a look at my approach at https://github.com/nightroman/PsdKit",
      "created_at": "2018-03-03T01:53:00Z",
      "updated_at": "2018-03-03T01:53:00Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I would like to release my PowerShell modules with https://github.com/semantic-release/semantic-release, but it seems it's impossible because there is no way to dynamically update the `Version` and `ReleaseNotes` fields in the module manifest without this.",
      "created_at": "2018-08-14T21:39:13Z",
      "updated_at": "2018-08-14T21:39:13Z"
    },
    {
      "author": "Dejulia489",
      "author_association": "NONE",
      "body": "@felixfbecker you can use Update-ModuleManifest\r\n",
      "created_at": "2018-08-23T04:06:29Z",
      "updated_at": "2018-08-23T04:06:29Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I think Update-ModuleManifest is destructive, it overwrites and throws away comments, etc.\r\n\r\nHowever, all of the features requested here are available in my Configuration module:\r\n\r\nImporting and exporting to psd1, updating single field in manifests without touching the rest of the file (including support for setting hashtables like PrivateData, PSData, etc). It even supports PSCustomObject peppery bags, and allows custom serialization so you can add support for any types you can construct...\r\n\r\nIt's NOT a full blown clixml type serializer, but it's more than capable of all the things you need for configuration and settings...\r\n\r\nI would be happy to contribute it as a PR if we think this functionality belongs in the box, but I think out goes against a _desirable_ model of putting less in the initial packages, and letting people install from the gallery...",
      "created_at": "2018-08-23T06:21:03Z",
      "updated_at": "2018-08-23T06:21:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul yes, the longer term goal is to move modules out of PowerShell Core and have them installed via PSGallery.  It would be better to have people use your https://www.powershellgallery.com/packages/Configuration module directly from the gallery",
      "created_at": "2018-08-30T21:08:29Z",
      "updated_at": "2018-08-30T21:08:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If the `Configuration` module is sufficient, I would suggest closing this issue and spend our resources on other problems.",
      "created_at": "2018-08-30T21:09:02Z",
      "updated_at": "2018-08-30T21:09:02Z"
    }
  ],
  "created_at": "2016-12-12T20:58:59Z",
  "number": 2875,
  "state": "open",
  "title": "PowerShell should contain Export-PowershellDatafile cmdlet that safely and correctly persists property bags",
  "updated_at": "2018-08-30T21:09:02Z"
}