{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7541",
  "author": "SteveL-MSFT",
  "body": "This came out of today's Community Call.  Summary of the discussion is that:\r\n\r\n  - cron and task scheduler are fundamentally different in syntax and semantics that an abstraction would be highly complex and probably still incomplete\r\n  - makes more sense to focus on the top scenarios and build a new set of cmdlets to enable scheduling cross-platform\r\n\r\nSo this issue is to brainstorm on requirements and scenarios before we move towards authoring a RFC.",
  "closed_at": "2022-05-02T13:09:03Z",
  "comments": [
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "One possible guiding principle is that since cron is likely a subset of schedule tasks, that we start with full cron - but remove any agreed esoterics.",
      "created_at": "2018-08-16T17:00:53Z",
      "updated_at": "2018-08-16T17:00:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS it would be great if we had some specific examples of some of the capabilities required from existing use of cron and existing use of task scheduler",
      "created_at": "2018-08-16T18:20:00Z",
      "updated_at": "2018-08-16T18:20:00Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "On macOS will we use `launchd` or `cron`. The later has been deprecated since 10.11 if recall. It is still there but in a disabled state and no files exist for it by default.",
      "created_at": "2018-08-16T21:53:22Z",
      "updated_at": "2018-08-16T23:53:03Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT - here are some examples of how I do use scheduling.  I can't say that they are the uber example - but they are ones that would benefit from CMDLet parity.\r\n\r\nAlso the main focus in the below is a) server b) automation - as such it exhibits using the scheduler for things like \"getting into SYSTEM account context (windows)\" and \"scheduling something for shutdown or startup\" and \"scheduling something to run only once\"\r\n\r\nThis article directly talks about the overcomplexity of the current CMDLets and why schtasks.exe is better.  It shows the comparison of the code complexity:\r\nhttps://cloudywindows.io/post/continue-your-automation-to-run-once-after-restarting-a-headless-windows-system\r\n\r\nNotice it takes advantage of a super easy way to get admin without a password (assuming you run the schedule command with admin) = \"/ru SYSTEM\" and the ability to run on startup \"/sc ONSTART\"\r\n\r\nThis code does \"self-unscheduling\".\r\n\r\nThis brings up a positive distinction about Windows well developed scheduler over linux - it has these sort of meta-functions that a) aren't strictly the typical domain of a pure scheduler, b) that are some of it's most useful shortcuts.  Stuff like ONSTART and SYSTEM account without admin.  If this concept could be extended to linux - it would make the PowerShell version of scheduling legions better than the native.  I know it is a big ask - but I've always loved the way PowerShell surfaces super-needed, super-simple high level functionality like this.\r\n\r\nThese two scripts are meant to have identical functionality on Windows and Linux.  They use a repeating task to: *) run in parallel to remaining automation, *) persist across reboots that are so common during initial automation:\r\nIn Windows I used schtasks.exe to avoid the complexity and limited availability of scheduling cmdlets:\r\nhttps://github.com/DarwinJS/DevOpsAutomationCode/blob/master/InitializeDisksWithFIO.ps1#L274\r\nhttps://github.com/DarwinJS/DevOpsAutomationCode/blob/master/InitializeDisksWithFIO.sh#L343\r\nThis code does \"self-unscheduling\".\r\n\r\nHere's an example of running a cleanup.  The CMDLets were used because I only needed one.  Surprising running elevated didn't take more cmdlets.\r\n\r\n**Running with root / system w/ no password would be a feature to be on a simple cmdlet because it is used so frequently in server automation**\r\n\r\nHere is a use case of using scheduler to do something on the next start (rather than fussing with each systems particular \"startup automation\" techniques:\r\nhttps://github.com/DarwinJS/ChocoPackages/blob/master/PowerShell/v5.1/tools/ChocolateyInstall.ps1#L168\r\n\r\n**Running only once and running on events like startup or shutdown would be very handy as those are frequent too** - however I understand they aren't implicitly a feature in both schedulers.\r\n\r\n**Self-unscheduling upon completion** - is another thing I use time and again for system automation.\r\n\r\nI have resorted to the scheduler on Windows for so many more scenarios that simply \"setup a repeating scheduled job\" - that I guess it would seem a crime to roll back new functionality to only be that.  I think that newly presented functionality might want to acknowledge that on a bare bones Windows or Linux system, the scheduler has other identifable defacto \"meta uses\" patterns.\r\n\r\nMulti-platform functionality that would be useful to my work (ignoring how \"hard\" they might be):\r\n- way to gain SYSTEM / root account context (without knowing implementation details)\r\n- easy way to setup code to run on system wide events like startup, shutdown (without knowing implementation details)\r\n- way to self-remove a task upon successful completion (without knowing implementation details)\r\n- simple way to re-run, re-run, re-run until the job is done.  Maybe scheduler function takes a flag file name to know when it is done.  Almost always combined with self-remove.\r\n\r\nI am already using PowerShell jobs on both platforms to run in parallel - but jobs are not reboot nor session resilient.\r\n\r\nAlso - sometimes implementations like the above (scheduler \"meta-functions\") get labeled esoteric.  My counter to that is \"If we can guess that these things would receive wide adoption upon recognition by potential users - then they are only esoteric in a short term sense - the sense also described by 'innovating something that customers can't articulate before they see it - but wholehearted recognize when they do'\"   In other words \"we've never heard anyone do that or ask for that before\" is not an exclusive vote for \"esoteric and unneeded\" it could just as easily be \"unarticulated and unrecognized, yet very needed\"  \r\n\r\nTo me, the entire story of PowerShell is actually one that carries the same sense - I'm interested in the continuance of that spirit rather than devolving to \"minimum common functionality\" just because doing multiplatform is hard.",
      "created_at": "2018-08-17T11:10:45Z",
      "updated_at": "2018-08-17T11:10:45Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Added to the Cmdlets Working Group for review.",
      "created_at": "2022-02-16T15:38:27Z",
      "updated_at": "2022-02-16T15:38:27Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "The Cmdlet Working Group has discussed this issue. The PSScheduledJob module is not supported in PowerShell 7 because .NET Core no longer supports `System.Runtime.Serialization.NetDataContractSerializer`. This is the primary reason this is marked as `won't fix`. The group also believes that while the Windows task scheduler and Unix cron,  do the same thing conceptually are architecturally different enough that building a cmdlet set to abstract the process over both is not practical. It would be better to have different sets of cmdlets. \r\n\r\nIn Windows, PowerShell 7 supports the ScheduledTasks module. Users could create PowerShell scheduled tasks with these cmdlets today. The Working Group is recommending that any solution to creating PowerShell scheduled jobs be left to the community and published to the PowerShell Gallery.",
      "created_at": "2022-05-02T13:08:22Z",
      "updated_at": "2022-05-02T13:08:22Z"
    }
  ],
  "created_at": "2018-08-16T16:57:06Z",
  "number": 7541,
  "state": "closed",
  "title": "Cmdlets over cron and task scheduler",
  "updated_at": "2022-05-02T13:09:03Z"
}