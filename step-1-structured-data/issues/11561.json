{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11561",
  "author": "p0W3RH311",
  "body": "powershell language enables you to think about problems from a different perspective. You learn to solve problems in a different way.\r\n\r\nexample:\r\n\r\n` $var! = exp`\r\n\r\nthe operator \"!\" (or maybe we choose another)  If the return value is not error or exitcode 0 then assign to variable $var the \"exp\" if is error then not assign ad terminate error\r\n```\r\n\r\nPS> type script.ps1\r\n\r\n$content!= cat fileNotexist\r\n$content -replace '\\s'\r\n```\r\n\r\n\r\nthis code is just syntactic sugar for \r\n\r\n```\r\ntry {\r\n  $erroractionpreference= 'stop'\r\n  $content= cat fileNotexist\r\n} catch{break}\r\n$content -replace '\\s'\r\n  \r\n```\r\n\r\nmaking for some code it easier to write and less typing\r\n\r\nthis operator can be used with variable or expression (some code)! or maybe in scriptblock\r\nis not supposed to replace try/catch but is another way to think about error handling....this operator is insprired to Rust and is cool to implement in PS. ",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Interesting idea, but we'd need to properly define how this would really work for PS. You can already do things like `$var = try { get-content -erroraction stop -path $nonexistentFile } catch { \"fallback value\" }` so this would essentially be some kind of shortcut for this syntax, though I'm not clear on what that fallback would be here?\r\n\r\nIt's also not clear how this would behave with subexpressions or pipelines -- would this simply swallow any errors that occur for the duration of the entire expression?\r\n\r\nFinally, I don't think `!` is a great choice for the operator; it reminds far too much of the `!=` operator for C# in your example syntax, which is `-ne` in PS. ",
      "created_at": "2020-01-12T03:24:03Z",
      "updated_at": "2020-01-12T03:24:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You just want it to exit early if there's an error? What about:\r\n\r\n```\r\n$content = Get-Content doesnotexist || $(return)\r\n$content -replace '\\s'\r\n```",
      "created_at": "2020-01-13T14:52:57Z",
      "updated_at": "2020-01-13T14:52:57Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> You just want it to exit early if there's an error? What about:\r\n> \r\n> ```\r\n> $content = Get-Content doesnotexist || $(return)\r\n> $content -replace '\\s'\r\n> ```\r\nyes its awsome but in rust it can be chained for example with '!' operator ( in rust is ? operator)\r\n\r\n# prototype\r\n`$c=[io.file]::OpenText('c:\\file.txt)!..Readline()!`\r\n\r\nif OpenText return error stop otherwise continue to Readline() if readline return error stop otherwise store output to $c\r\n\r\n`$c!=[io.file]::OpenText('c:\\file.txt)..Readline()`\r\n\r\nor  maybe\r\n`$c=([io.file]::OpenText('c:\\file.txt)..Readline())!`\r\n\r\n\r\nif this expression return error stop",
      "created_at": "2020-01-13T19:36:41Z",
      "updated_at": "2020-01-13T19:41:41Z"
    }
  ],
  "created_at": "2020-01-12T02:37:46Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 11561,
  "state": "open",
  "title": "Suggestion: implement new operator for error handing",
  "updated_at": "2020-01-13T19:41:41Z"
}