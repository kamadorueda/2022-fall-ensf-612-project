{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7886",
  "author": "lucent-sea",
  "body": "I'm trying to publish a .NET Core v2.1.4 console app that uses the Microsoft.PowerShell.SDK to invoke PS Core commands.  The Microsoft.Management.Infrastructure.dll is missing from the output directory after doing a publish targeting portable Windows RIDs (win-x64 or win-x86).  Everything is fine when targeting Linux portable.\r\n\r\nI tried including the MMI NuGet package explicitly, but that didn't help either.\r\n\r\nI Binged around to try to figure out if portable Windows deployments simply don't work with MMI or PowerShell SDK, but I couldn't find anything.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nUsing this demo project...\r\n[ConsoleTest.zip](https://github.com/PowerShell/PowerShell/files/2429077/ConsoleTest.zip)\r\n\r\nPublish using...\r\n```dotnet publish -o .\\publish -r win-x64```\r\nRun .\\publish\\ConsoleTest.exe and observe error.\r\nMicrosoft.Management.Infrastructure.dll is missing in the output directory.\r\n\r\nNow publish using...\r\n```dotnet publish -o .\\publish -r win10-x64```\r\nRun .\\publish\\ConsoleTest.exe and observe success.\r\nMicrosoft.Management.Infrastructure.dll is present in the output directory.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nA self-contained deployment targeting Windows portable should (I think?) have all its dependencies included.  It appears to be missing Microsoft.Management.Infrastructure.dll. \r\n\r\nActual behavior\r\n---------------\r\n\r\nThe below error is generated when trying to run an SCD targeting Windows.\r\n\r\n```\r\nCould not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers)\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning)\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke()\r\n   at ConsoleTest.Program.Main(String[] args) in C:\\Users\\WhyYouLookingAtMyUserName\\Desktop\\ConsoleTest\\Program.cs:line 14\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nName  : PSVersion\r\nValue : 6.1.0\r\n\r\nName  : PSEdition\r\nValue : Core\r\n\r\nName  : GitCommitId\r\nValue : 6.1.0\r\n\r\nName  : OS\r\nValue : Microsoft Windows 10.0.17134\r\n\r\nName  : Platform\r\nValue : Win32NT\r\n\r\nName  : PSCompatibleVersions\r\nValue : {1.0, 2.0, 3.0, 4.0...}\r\n\r\nName  : PSRemotingProtocolVersion\r\nValue : 2.3\r\n\r\nName  : SerializationVersion\r\nValue : 1.1.0.1\r\n\r\nName  : WSManStackVersion\r\nValue : 3.0\r\n```\r\n",
  "closed_at": "2018-09-28T20:55:46Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan ",
      "created_at": "2018-09-28T19:57:44Z",
      "updated_at": "2018-09-28T19:57:44Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@Jay-Rad If you see the MMI package, it has native assemblies that are specific to the Windows OS version. Namely, `win10-x64`, `win10-x86`, `win7-x64`, `win7-x86`, `win8-x64`, `win8-x86`, `win81-x64`, `win81-x86`. Since there are native dependencies which slightly differ per platform, it is not possible to have a portable `win-*` package for MMI.",
      "created_at": "2018-09-28T20:41:53Z",
      "updated_at": "2018-09-28T20:41:53Z"
    },
    {
      "author": "lucent-sea",
      "author_association": "NONE",
      "body": "@adityapatwardhan Thank you for clearing this up for me.  :)  And thanks to everyone for all your time and hard work!",
      "created_at": "2018-09-28T20:45:10Z",
      "updated_at": "2018-09-28T20:45:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @adityapatwardhan I see that PowerShell Core is becoming more popular and as result there are more such questions. Developers need documentation how to use the SDK.\r\nRelated #2878, #2879, #2880\r\n\r\n(Maybe WiKi?)",
      "created_at": "2018-10-01T15:35:31Z",
      "updated_at": "2018-10-01T15:35:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov that is a great point.  Opened https://github.com/PowerShell/PowerShell-Docs/issues/2967",
      "created_at": "2018-10-02T00:17:21Z",
      "updated_at": "2018-10-02T00:17:21Z"
    },
    {
      "author": "RaphiStein",
      "author_association": "NONE",
      "body": "@adityapatwardhan can you explain what the solution is?",
      "created_at": "2019-05-31T13:59:17Z",
      "updated_at": "2019-05-31T13:59:17Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "This issue explains that PowerShell core is not portable cross-platform. Is there a plan to make it portable? That is the basic expectation from the .net core.\r\nI specifically need to publish a framework-independent application that can run PowerShell on windows server 2008 (as an alternative to upgrading the PowerShell version), but this limitation blocks me.\r\n\r\nWhen I run the published application on the server, I get the error \r\n```\r\nUnhandled Exception: System.TypeInitializationException: The type initializer fo\r\nr 'System.Management.Automation.Runspaces.RunspaceFactory' threw an exception. -\r\n--> System.DllNotFoundException: Unable to load DLL 'api-ms-win-eventing-provide\r\nr-l1-1-0.dll' or one of its dependencies: The specified module could not be foun\r\nd. (Exception from HRESULT: 0x8007007E)\r\n```",
      "created_at": "2019-07-12T17:25:59Z",
      "updated_at": "2019-07-12T17:27:09Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ttutisani \tIf this is happening on Windows Server 2008, dotnet does not support it. Minimum supported version in Windows Server 2008 R2 SP1. [Supported OS](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#windows)\r\n\r\nAlso, for PowerShell 7, the minimum [supported OS](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0-supported-os.md#windows) by dotnet is Windows Server 2012 R2 SP1 ",
      "created_at": "2019-07-12T17:36:08Z",
      "updated_at": "2019-07-12T17:39:33Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "The server has `Microsoft Windows Server 2008 R2` with `6.1.7601 Service Pack 1 Build 7601`. I assume that is what you meant and I still see the error. Maybe I need to indicate a specific publishing option? \r\n\r\nCurrently, I have `<RuntimeIdentifier>win10-x64</RuntimeIdentifier>` because I'm building it on a win10 machine and it threw an error when I tried to run it on my local dev machine - hence I specified this option.\r\nNow it works fine locally but throws an error on the server.",
      "created_at": "2019-07-12T17:40:25Z",
      "updated_at": "2019-07-12T17:42:37Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "Can you please clarify this? \r\n>Also, for PowerShell 7, the minimum supported OS by dotnet is Windows Server 2012 R2 SP1\r\n\r\nDo you mean that PowerShell 7 is a dependency for the .NET core app that uses `PowerShell` class (from `System.Management.Automation` namespace)  to invoke scripts?",
      "created_at": "2019-07-12T17:45:19Z",
      "updated_at": "2019-07-12T17:46:24Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I would recommend the `runtimeidentifier` as `Win7-x64`. This is what PowerShell [uses](https://github.com/PowerShell/PowerShell/blob/master/src/powershell-win-core/powershell-win-core.csproj#L10). ",
      "created_at": "2019-07-12T17:46:19Z",
      "updated_at": "2019-07-12T17:46:19Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "The latest release [7.0.0-preview.1](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.1) is built on `netcore 3.0`. The minimum supported OS for `netcore 3.0` is Windows Server 2012 R2 SP1, hence the same for PowerShell 7.",
      "created_at": "2019-07-12T17:48:41Z",
      "updated_at": "2019-07-12T17:48:41Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "I receive an error when I try to publish with that option on my dev machine.\r\n![image](https://user-images.githubusercontent.com/18409870/61148093-a1a3c580-a4a3-11e9-85c4-2c7bf75f9b76.png)\r\n\r\n\r\nJust to clarify: my dev machine runs win 10, but my goal is to publish the app as framework-independent and to run it on win 2008 r2 sp1. Is there a way?",
      "created_at": "2019-07-12T17:50:04Z",
      "updated_at": "2019-07-12T17:53:17Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "To add to that, I have another app running on this same server just fine. .net core self-contained publish, targeting win-x64 runtime from publishing settings. However, this time the .net core app uses PowerShell class as described above and it throws the mentioned error during the run, as I explained before.",
      "created_at": "2019-07-12T17:55:22Z",
      "updated_at": "2019-07-12T17:55:22Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "You should be still able to use RuntimeIdentifier as `Win7-x64` when building on Windows 10. Can you share a snippet of your csproj file?",
      "created_at": "2019-07-12T17:59:49Z",
      "updated_at": "2019-07-12T17:59:49Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "Here it is:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Management.Infrastructure\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.2.1\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.2.1\" />\r\n    <PackageReference Include=\"Microsoft.WSMan.Management\" Version=\"6.2.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```",
      "created_at": "2019-07-12T18:20:42Z",
      "updated_at": "2019-07-12T18:20:42Z"
    },
    {
      "author": "ttutisani",
      "author_association": "NONE",
      "body": "You know what, disregard my complaints. It started working. I just set the value back to Win-x64 and then again back to Win7-x64. I think the problem was that first I published with Win10-x64 and then immediately switched to the Win7-x64 setting.\r\n\r\nAnyway, it works flawlessly as a self-contained deployment. Thanks for your help!!!",
      "created_at": "2019-07-12T20:44:38Z",
      "updated_at": "2019-07-12T20:44:38Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Glad to hear it works!",
      "created_at": "2019-07-12T20:45:44Z",
      "updated_at": "2019-07-12T20:45:44Z"
    }
  ],
  "created_at": "2018-09-28T17:39:36Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Resolution-Answered"
  ],
  "number": 7886,
  "state": "closed",
  "title": "SDK: Missing MMI DLL when publishing SCD targeting portable win RIDs.",
  "updated_at": "2019-07-12T20:45:44Z"
}