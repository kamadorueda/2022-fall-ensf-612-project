{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3607",
  "author": "DarwinJS",
  "body": "Would be great to support Yaml natively.\r\n\r\nThis was also mentioned by @fabiendibot on #3046 \r\n\r\nIt would also be nice if the CMDLets had the goal of cleanly handling conversion of objects that came from XML as it seems like it would be a frequent use case.  Maybe some good tests around this conversion?",
  "closed_at": "2021-08-20T21:00:36Z",
  "comments": [
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "We had a similar discussion from [DSC aspect](https://github.com/PowerShell/DscResources/issues/155),\r\nallowing us to change json based configuration files, we wanted to have options for modifying xml based files, YAML based files ,INI based files supporting RegEx swaps from within Text Manipulation cmdlets.\r\n\r\nLack of existing support in PS means we have to work hard to get such ability.\r\nIt has been on hold pending community contribution, but if it was baked into PS, it would make it much easier for the DSC part as well.",
      "created_at": "2017-04-20T17:53:27Z",
      "updated_at": "2017-04-20T17:53:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "When you say natively, do you mean like XML or JSON?\r\n\r\nThe current thinking is that YAML should **not** be baked into PowerShell at all, instead it should be a separate module that you can update without picking up a new version of PowerShell.\r\n\r\nIf YAML were baked into PowerShell like XML, that would be impossible (think [xml]\"<a>b</a>\")\r\n\r\nIf we went the JSON route, you'd have cmdlets to work with YAML - so not really baked into PowerShell, but you'd still have the drawbacks of needing to update PowerShell to get YAML updates.",
      "created_at": "2017-04-20T20:02:19Z",
      "updated_at": "2017-04-20T20:02:19Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I know we said we didn't want to bring in a new library, but I think this is something we might need to reassess. Ideally, we should *also* ship the module on the Gallery, but I think a TON of modern scenarios require YAML now. \r\n\r\nMaybe not in 6.0 timeframe, but we should talk about it. ",
      "created_at": "2017-04-20T20:36:10Z",
      "updated_at": "2017-04-20T20:36:10Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@ArieHein - I have some simple functions that save and retrieve a hash array to the registry.  Only handle REG_SZ - but for a simple set of settings it is sufficient - let me know if you want a copy.\r\n\r\nI mispoke when I said \"native\" - I primarily meant \"built-in\" - it wouldn't bother me if they were shipped-in script modules that could be updated.",
      "created_at": "2017-04-20T23:14:21Z",
      "updated_at": "2017-04-20T23:14:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Our first discussion #2109",
      "created_at": "2017-04-21T14:51:42Z",
      "updated_at": "2017-04-21T14:51:42Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov - ah yes I see! \r\n\r\nI noticed the reference to AWS support of YAML on the thread - I have been converting some templates and have found this to helpful: https://github.com/awslabs/aws-cfn-template-flip",
      "created_at": "2017-04-21T19:38:02Z",
      "updated_at": "2017-04-21T19:38:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov thanks for the pointer, I couldn't find it for some reason. Remember it well, though. \r\n\r\nIn re-reading that original thread, I think we should definitely implement the cmdlets at some point in the future, and ship them in the Gallery. Based on their quality, and people's perceived usefulness (along with some refactoring work we hope to do after 6.0.0), we can make the in-box vs. Gallery-only call. ",
      "created_at": "2017-04-21T20:22:26Z",
      "updated_at": "2017-04-21T20:22:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have Yaml in https://github.com/PowerShell/platyPS",
      "created_at": "2017-10-08T16:13:41Z",
      "updated_at": "2017-10-08T16:13:41Z"
    },
    {
      "author": "MattTunny",
      "author_association": "NONE",
      "body": "yeah this would be awesome to have, ended up using https://github.com/awslabs/aws-cfn-template-flip to convert",
      "created_at": "2017-10-25T08:09:31Z",
      "updated_at": "2017-10-25T08:09:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MattTunny Welcome to contribute! :-)",
      "created_at": "2017-10-25T10:08:41Z",
      "updated_at": "2017-10-25T10:08:41Z"
    },
    {
      "author": "josepmv",
      "author_association": "NONE",
      "body": "There's a Windows Server user voice openned to vote for it :-)\r\n\r\nhttps://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088495-out-of-the-box-support-for-yaml-like-csv-xml-j\r\n",
      "created_at": "2017-12-01T09:59:12Z",
      "updated_at": "2017-12-01T09:59:12Z"
    },
    {
      "author": "Satak",
      "author_association": "NONE",
      "body": "This should definitely be part of the native PS 6.1 library. So many things these days are in YAML.",
      "created_at": "2018-03-13T12:14:44Z",
      "updated_at": "2018-03-13T12:14:44Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "There are now `psyaml` and `powershell-yaml` modules on the PSGallery but both are not even able to round-trip a YAML file from a VSTS build definition. I don't mind if the module is baked into PowerShell or is a module from the PSGallery.",
      "created_at": "2018-04-24T14:43:46Z",
      "updated_at": "2018-04-24T14:43:46Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "I wonder if the core problem here is the clunky way we deploy modules. Today, you have to find, trust and install a module before you can use it.  Compare this with the (apparently) slick way that Javascript does `var m = require('mymodule')`.  Maybe we should have some way to do what DSC does but for native PowerShell. In DSC, when a module is referenced in a configuration, it's automatically downloaded and installed on the target node with no manual effort. Making critical but non-core modules available that way should eliminate the \"it should be part of core\" arguments. And for nodes that are disconnected from the net, we could have a tool that bundled the dependencies in a script into an archive which is then deployed to the target. This is how the Azure DSC resource extension works - there is a tool that scans a script to figure out the required modules then builds a zip file containing everything that is needed and publishes it to a blob. The Azure resource extension then pulls this blob, installs the modules and runs the script. ",
      "created_at": "2018-04-24T17:49:29Z",
      "updated_at": "2018-04-24T17:49:29Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "For something that is this important, I really don't ever want to depend on a third-party library unless I have some way of vendoring it. It's way too easy for third party developers to potentially break entire ecosystems (see https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/).\r\n\r\nBroader issues aside, there is currently no good YAML module for PowerShell, as @bergmeister pointed out. This is a must for a language which is heavily focused towards automation. YAML based configuration files are hugely popular now and it's very hard to avoid them even if you don't have to contend with the opinions of a team to do so. Think of the reasoning behind including XML and JSON as core parts of the language. The case for YAML really isn't so different.",
      "created_at": "2018-04-24T18:59:38Z",
      "updated_at": "2018-04-24T18:59:38Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@bgshacklett From what I've heard from the Puppet guys, there are just no good YAML parsers :-) ",
      "created_at": "2018-04-24T22:53:08Z",
      "updated_at": "2018-04-24T22:53:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is platyPS parser good enough?\r\n\r\n@vors Is there simple way to reuse platyPS YAML parser in PowerShell Core repo?",
      "created_at": "2018-04-25T08:30:44Z",
      "updated_at": "2018-04-25T08:30:44Z"
    },
    {
      "author": "josepmv",
      "author_association": "NONE",
      "body": "I prefer the idea of a separate official module in PowerShell Gallery like @lzybkr says because it would be possible to use it in older powershell versions and it could have its own releases. That would be like the [sqlserver](https://www.powershellgallery.com/packages/SqlServer) module. @BrucePay if it were a page in PowerShell Gallery with Microsoft own modules, it would be easier to find and everybody would know that they can trust them.\r\n\r\nBut I would understand if it were backed into Powershell as XML and JSON.\r\n\r\nThe important thing is that it exists `ConvertFrom-YAML` and `ConvertFrom-YAML` official functions because YAML is a widely used format for configuration files and it shouldn't be a third-party module, as @bgshacklett point out.\r\n\r\nI made a [blog entry](http://dbadailystuff.com/yaml-in-powershell) testing and comparing the two modules I've found to work with YAML files: [PSYaml](https://github.com/Phil-Factor/PSYaml) and [powershell-yaml](https://github.com/cloudbase/powershell-yaml).\r\n\r\nThey have different behaviours because internally they're using different objects:\r\n\r\n| module  \t\t\t|\tmappings \t\t\t| sequences |\r\n| ---------\t\t\t|:--------------\t\t|-----------|\r\n| PSYaml           \t| \tOrderedDictionary \t|\tArray\t|\r\n| powershell-yaml \t| \tHastable \t\t\t|\tList\t|\r\n\r\nI think we need a *standard* `ConvertFrom-YAML` and `ConvertFrom-YAML`.",
      "created_at": "2018-04-25T11:34:21Z",
      "updated_at": "2018-04-25T11:34:21Z"
    },
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "Actually, `ConvertFrom-Yaml` in `powershell-yaml` uses `OrderedDictionary` when converting with the `-ordered` parameter.\r\nI've been using this module successfully for a while (in my Datum module for DSC Configuration data, and with kitchen yamls), but don't have a vsts build definition to test with.\r\n\r\n>Bear in mind that the right way to call it is: `get-content -Raw MyFile.yml | ConvertFrom-Yaml -Ordered` (people often miss the `-Raw`).\r\n\r\nI wonder why we'd need a Microsoft _official_ module, putting even more overhead on MSFT and reinventing the wheel... Maybe trying to contribute to an existing one first, add tests to avoid regression, open issues to make sure the owner knows the problems is a better approach...\r\nYou know what happens when you're trying to create a standard out of the 99 existing implementations...\r\n\r\nAnd yes it would be better outside the language, I agree that the dependency management could be better, bundling everything in PS is not a solution though.\r\nThe broad npm issue is also a failure in process. Fork and re-publish fixed it in no time, building apps out of latest version of the internet was the reason it broke so many live apps.",
      "created_at": "2018-05-02T06:35:20Z",
      "updated_at": "2018-05-02T06:35:20Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with @gaelcolas I think this is better with everyone working with the owners of an existing community module to raise and ensure quality.\r\n\r\nI'll just add that tests for such a project should include working with a large number of real-world YAML files for things like AppVeyor, Travis CI, VSTS, AWS CloudFormation, etc. For my own experience with YAML deserilization, I have had little success with one solution working universally and have ultimately had to reinvent the wheel several times. In that sense, I agree with @BrucePay \"there are just no good YAML parsers\".",
      "created_at": "2018-05-02T08:29:24Z",
      "updated_at": "2018-05-02T08:29:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We are talking about this platyPS module because it is already actively used in PowerShell Help environment. I guess no one from MSFT can tell how good this module is because of Code of Conduct. They can either silently reject it or improve it.\r\nAnd although we've been talking about this a long time ago I don't see how we could use the components of this module here in a simple way. \r\nMaybe @adityapatwardhan and @SteveL-MSFT  will open their plans and timeline especially as the new Help RFC is already in the experiment stage.",
      "created_at": "2018-05-02T12:47:31Z",
      "updated_at": "2018-05-02T12:47:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My personal view is that I would rather see more community modules succeed and become de facto standard than requiring \"official\" modules from Msft.",
      "created_at": "2018-05-02T16:32:09Z",
      "updated_at": "2018-05-02T16:32:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov It is one thing to have a solution that works for serializing/deserializing a well defined schema. It is quite another to have a solution that works in general with all schemas that are compliant YAML.",
      "created_at": "2018-05-02T16:34:13Z",
      "updated_at": "2018-05-02T16:34:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I understand the desire of MSFT to reuse community projects to cut costs. But the situation is, in fact, that MSFT may not make use of so many community projects:\r\n- many have bad code, have no trust\r\n- many projects are one person\r\n\r\nMSFT has published Powershell specifications more 10 years ago, but nobody ported it yet until MSFT did.\r\nThe OpenSSL Project has existed for many years but nobody ported it to Windows while MSFT has not done this.\r\nMSFT revealed many thousands of API interfaces, but how many of them were ported to Unix?\r\nThe interesting thing about why the company launched its project .Net Core rather than reuses Mono?\r\nPowerShell is already a year and a half is an open source project, but I see that in this repository only one person from the community makes systematic contribution in the code @markekraus  and only one person makes systematic analysis @mklement0.\r\nI don't think that if we divide the project into parts, then we got more contributions.\r\nI don't think the situation will change tomorrow. I wouldn't count on it.",
      "created_at": "2018-05-02T17:47:04Z",
      "updated_at": "2018-05-02T17:47:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus I very hope on http://yaml.org/spec/1.2/spec.html#id2802346 :-)",
      "created_at": "2018-05-02T17:52:21Z",
      "updated_at": "2018-05-02T17:52:21Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov makes important points about support, trust and maintenance of 3rd party modules. Some 3rd party module can become a success and mature like e.g. Pester.\r\nHowever, one should not assume that a great YAML module will evolve on its own over the next years. The reality is that most modules are published by authors who solved a particular problem and did the good deed of publishing their generic base code. This is how we ended up with 2 modules that aim to solve the same problem. Ideally one would need to merge them to focus efforts, otherwise they are going drift apart further in the future or just become stale and soon there will be more modules published by other people.\r\nThe underlying problem of having a proper parser indicates that basic (and substantial in terms of effort) ground work is needed and required to have a good YAML module.\r\nI am not a YAML expert, but is this just a problem of the loose language specification itself or specific interpretation by various systems like VSTS or AppVeyor or is this only the lack of a good parser?\r\nI found it frustrating to write YAML in VSCode and only when running it in VSTS to get an error that the VSTS parser does not like it...",
      "created_at": "2018-05-02T19:17:05Z",
      "updated_at": "2018-05-02T19:17:05Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "To me this conversation is a case in point with open source's  \"code curation / architecture\" problem.\r\n\r\nOpen source provides good seeding ideas and code bases - but if a serious architecture eye is not given to it when adopted as the most general solution - then it's 10 years of bug fixes for items that could have been taken care of in a decent design review.\r\n\r\nIn the true cases of @bergmeister \"mature successes\" it is often an active maintainer that has taken on the mission of generalizing the code base.  But that can't be guaranteed to happen.\r\n\r\nI think some of us are saying \"YAML support is like support for writing files - it's core - it should be architected in the same way => with intention to the be the gold standard for that functionality\"\r\n\r\nThe combination of 1) the semi-architected attribute of open source along with the 2) core nature of YAML that seem to make many of us urge for the highly architected approach we know the Microsoft PowerShell Developers apply to their work.  It not necessarily a drifting from all the other cool things open source can indeed help us with.",
      "created_at": "2018-05-02T20:49:50Z",
      "updated_at": "2018-05-02T20:53:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Very valid points on software maturity.  I haven't looked closely at the two modules listed here, nor at yamldotnet to make any opinion.  Something we can look at as we start planning for 6.2.0",
      "created_at": "2018-05-02T21:08:09Z",
      "updated_at": "2018-05-02T21:08:09Z"
    },
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "Don't get me wrong, I do value the experience and systematic approach of the PowerShell team and MSFT developers, I just think it's wrong for them to try to fill all the gaps with a module of their own stamped MSFT... It does not scale (and we've seen the problem with DSC resources already).\r\nIncreasing the reliance on MSFT provided modules is fragile, and does not help grow the community, nor the diversity of the ecosystem.\r\nI'm in favour of MSFT contributing to open source projects to share their experience and help improve practices and quality, while not creating a dependence on them (because you know, squirrels...!).\r\nThe _MSFT as unique provider of approved things_ is an old model that they struggle already to educate on, and it is not helping the community to encourage this approach (i.e. _I'll wait, or moan, at Microsoft for not solving the problem I have_ kind of attitude in the OSS ecosystem).\r\n\r\nI agree YAML support is core, instead of the PS team re-writing from scratch, why not help existing maintainers of projects to improve, and give them an opportunity to merge projects and hear from them what it would take. A bit like an apprenticeship/mentorship from PS team on core functionality modules.\r\nJust re-writing a new module sounds like an engineer's reaction to solve a problem which is not an engineering problem. Re-writing a YAML module is an _easy_ engineering task for the PS Team, but would not (help to) fix the community maturity problem, nor give the right incentive.\r\nWhether Yaml is the strategic item to tackle this is MSFT's call though :)",
      "created_at": "2018-05-02T23:29:16Z",
      "updated_at": "2018-05-02T23:29:16Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister \r\n\r\nI'll preface this with myself not being a YAML expert. I happened to do some research on this when I wanted to bake some AppVeyor like yaml configs into my own franken-pipeline. I looked at how a dozen or so C# projects were consuming YAML. Since the PowerShell projects use YamlDotNet, I can only assume it's no easier. Though I have at least toyed around with both PSYaml and powershell-yaml and have looked less closely at a few PowerShell projects which use them.\r\n\r\n> I am not a YAML expert, but is this just a problem of the loose language specification itself or specific interpretation by various systems like VSTS or AppVeyor or is this only the lack of a good parser?\r\n\r\nI suspect it's the nature of YAML being readable by humans at the possible expense of being more easily readable by machines. This readability-first paradigm extends into the way YAML authors write their YAML files. Though the resulting YAML is compliant under YAML spec, it is parsed in such away as to be unusable in code without using the deserialized object as an intermediary to an actually useful object. \r\n\r\nThat is to say, that 90% of the time the deserialization from YAML to an Object is not the issue, but the data design/architecture is. The other 10% of the time _is_ parsing issues for which I can only chalk up to \"YAML is hard to parse, man.\" However, the deserialized objects are often only slightly more useful than regex-ing what you are looking for....\r\n\r\nAs an example, the secure strings in AppVeyor.yml\r\n\r\n```yaml\r\nenvironment:\r\n  my_var1: value1\r\n  my_var2: value2\r\n  my_secure_var1:\r\n    secure: FW3tJ3fMncxvs58/ifSP7w==\r\n```\r\n\r\n`powershell-yaml` and `YamlDotNet` do convert this to an object, but good luck using it without a bunch of logic. Once you have that logic, good for this schema, but what about another?\r\n\r\nSome of these same data design problems plague JSON, but it is (in my experience and opinion) much easier to make models that can work around those shortcomings due to the more rigid nature of JSON. Trying to make models for any of the YAML deserializers mentioned in this thread is a nightmare if and where it is possible.\r\n\r\nGranted, models are not a feature currently available in the JSON cmdlets, though I would really like to add it. If I had a say in the \"official\" YAML module/cmdlets I would put it down as a \"must have\" feature. It is a missed opportunity especially with the addition of PowerShell classes in v5.\r\n\r\nIMO, Just getting YAML strings into an Object isn't good enough. That appears to be easy (90% of the time at least). The trick is getting YAML strings into _useful_ objects. That requires some flexibility from the solution. But that flexibility must also be somewhat approachable and not require @IISResetMe and @lzybkr there to give you serialization advice.... \r\n\r\nTo that effect, I haven't seen anything that works on a general scope. Projects adopt the solutions available, and then use their output as intermediaries for actually useful objects (leading to a bunch of wheel reinventing that probably should be baked in upstream). Or, the projects compromise YAML readability for ease of parsing from YAML to objects. ",
      "created_at": "2018-05-03T00:36:21Z",
      "updated_at": "2018-05-03T00:45:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@gaelcolas \r\n>I agree YAML support is core, instead of the PS team re-writing from scratch, why not help existing maintainers of projects to improve, and give them an opportunity to merge projects and hear from them what it would take\r\n\r\nAsk yourself why MSFT started .Net Core project instead of continuing Mono many years later.\r\n\r\nMSFT is a community too. And as any community has the same problems of interaction with other communities.",
      "created_at": "2018-05-03T06:04:51Z",
      "updated_at": "2018-05-03T06:04:51Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "For context, I am not implying any work be done from scratch - code could be adopted - but should then be scrutinized from a Systems Development architecture perspective before being improved.  It could even be open source *after* that review and re-release.  \r\n\r\nMy point is to have a significant architectural review and remediation from a team that thoroughly understands the nuances of core code that will be leveraged virtually everywhere.",
      "created_at": "2018-05-03T16:14:50Z",
      "updated_at": "2018-05-03T16:14:50Z"
    },
    {
      "author": "dchennells",
      "author_association": "NONE",
      "body": "Another model always worth considering is acquire/contract/second.  On this basis an effort is made to reach commercial terms with one or more community members/firms to recruit their services for a MSFT-led/facilitated development cycle to re-vamp and (in some fashion) integrate/connect the product(s).  This was done successfully with Xamarin, which kicked the project to the Net Foundation, licensed it under MIT, and recruited/contracted/involved key resources such as Miguel de Icaza and Nat Friedman via Xamarin.  Some whine that this is open source treason.  But it does create positive incentives for folks and small firms to conceive and develop projects that later could be fit for widespread adoption and integration into at least one major ecosystem.  Certainly it's preferred to jumping straight to a blank slate in-house redo that copies the whole concept and functionality and many of the ideas but jettisons the creators and (ostensibly) the code.",
      "created_at": "2018-10-29T10:47:00Z",
      "updated_at": "2018-10-29T10:47:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov sorry for a late reply, no the platyPS yaml parser is no good: it only supports key value pairs. We also use YamlDotNet to generate yaml there.",
      "created_at": "2018-11-01T05:55:39Z",
      "updated_at": "2018-11-01T05:55:39Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "Regarding the sentiment towards keeping this out of the core feature set: there's a very significant difference in how PowerShell handles dependencies compared to, say, Ruby, Python or Node.js.\r\n\r\nEach of these languages has dependency management tools (bundler, pip, npm/yarn) which make the management of external dependencies easy and, more importantly, reproducible. Having something like a `Gemfile/Gemfile.lock` or `package.json/package-lock.json [,yarn.lock]` which makes for easy installation of all required packages and ensures that you are staying at a very specific patch level is a very significant distinction which is, in my opinion, what makes third-party libraries for something this fundamental feasible.\r\n\r\nPerhaps there's something that could be done with Nuget to solve this issue, but I've never seen any articles describing dependency management strategies/patterns for PowerShell. Having the gallery is great, but if you've got to install all required packages manually it becomes unfeasible for any significant deployment.\r\n\r\nedit:\r\nSo it seems like what I'm looking for _may_ be available already: https://docs.microsoft.com/en-us/powershell/wmf/5.0/psget_moduledependency. I'll test this out as soon as I have a moment. If it works, I'll need to reconsider my position on whether this should be a core item or not. I'm still having difficulty reconciling it against the fact that JSON is a core functionality, but I suppose that it could be considered a \"lowest common denominator\".",
      "created_at": "2018-11-03T16:00:23Z",
      "updated_at": "2018-11-03T16:12:36Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@bgshacklett makes a super good point.",
      "created_at": "2018-11-03T20:28:09Z",
      "updated_at": "2018-11-03T20:28:09Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@chuanjiao10 - please stop disruptive comments across many of the issues in this repository, the correct solution would **not** be to include them in the `Microsoft.PowerShell.Utility` module and infact ship them as a separate module hosted in the PowerShellGallery\r\n\r\n> \r\n> \r\n> When you say natively, do you mean like XML or JSON?\r\n> \r\n> The current thinking is that YAML should **not** be baked into PowerShell at all, instead it should be a separate module that you can update without picking up a new version of PowerShell.\r\n> \r\n> If YAML were baked into PowerShell like XML, that would be impossible (think [xml]\"b\")\r\n> \r\n> If we went the JSON route, you'd have cmdlets to work with YAML - so not really baked into PowerShell, but you'd still have the drawbacks of needing to update PowerShell to get YAML updates.\r\n\r\n\r\nPersonally this whilst it feels like the \"right\" thing to inbox I will suggest that is not actually the right thing to do\r\n\r\n> \r\n> \r\n> @lzybkr I know we said we didn't want to bring in a new library, but I think this is something we might need to reassess. Ideally, we should _also_ ship the module on the Gallery, but I think a TON of modern scenarios require YAML now.\r\n> \r\n> Maybe not in 6.0 timeframe, but we should talk about it.\r\n\r\nShipping an external module is much better in my view as can be used downlevel and IMO it's less the PowerShell's Team job to do this and more the community to drive this **with** help from the PowerShell team to get to high quality where possible.\r\n ",
      "created_at": "2019-01-21T18:26:56Z",
      "updated_at": "2019-01-21T18:27:13Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Again @chuanjiao10 it was previously decided not to put YAML Cmdlets into PowerShell Core in #2109 and was rightly turned down then as it should also be turned down now too.\r\n\r\nregarding \r\n> unity is strength. An American who needs a car, have you seen him go to Wal-Mart to buy a wheel, go to Amazon to buy an engine, and combine hisself (diy a car)?\r\n\r\nComparing A car to software is kinda a bad analogy considering the components in the car come from many different suppliers and then get packaged up into a useable product, which is no different to PowerShell Modules developed by the community that can then be mixed and matched & used in scripts\r\n\r\nRegarding this point\r\n> The main library is built in, this is very important, otherwise I see convertfrom-json, convertto-json, etc., should also be placed in PowerShellGallery.\r\n\r\nI've advocated for this for as many of the built in modules as possible as per #1979 and would like to see PowerShell Core be as lean as possible which has been started to be discussed further in #5681 \r\n\r\nand re \r\n> Don't discriminate against YAML, don't flatter JSON.\r\n\r\nI'm not discriminating Yaml nor flattering Json as both have their flaws but both have their uses and if I had been able to influence not shipping Json cmdlets in PowerShell, I would have done the exact same as I am doing here.",
      "created_at": "2019-01-22T06:06:47Z",
      "updated_at": "2019-01-22T06:06:47Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "I think it may be beneficial to reframe this discussion a bit. In particular, would those in favor of YAML being included in the core language be willing to list specific use cases and why a module in the PowerShell gallery is insufficient in addressing said use case? At that point we can have a requirements-driven discussion and potentially find a workable solution for the problem at hand.",
      "created_at": "2019-01-23T18:28:32Z",
      "updated_at": "2019-01-23T18:28:32Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "My primary use case is for bare metal automation of both operating system and application deployment.  In at least one case I want to read a YAML file that called my script to understand parameters.\r\nFrequently in these cases having a dependency to an external, non-SLAed to us, service is a huge no-no.  It can affect production scaling activities.\r\n\r\nThat is my use case for shipping in the most elemental footprint of powershell core.",
      "created_at": "2019-01-23T18:33:44Z",
      "updated_at": "2019-01-23T18:33:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I appreciate the lively discussion, let's try to keep it civil :)\r\n\r\n@PowerShell/powershell-committee had discussed this previously.  We agree that supporting YAML is important given how prevalent it is today.  We also want to see more modules we currently ship in PSCore6 moved out so that you start with a minimal install of PSCore6 and then add what you need (with metamodules you don't need to add 10+ modules, just one for `DevOps`, for example).  So regarding YAML, the current thinking is this should be a separate module (I can create a repo under PowerShell org if anyone is ready to start prototyping this, my team doesn't have the bandwidth right now).  Using YamlDotNet (or other 3rd party library) is ok once it's evaluated from a tech, licensing, support point of view (similar to how we took dependency on Json.Net).  However, last time we looked at YAML and YamlDotNet, the problem is that implementations of YAML vary widely and that library didn't support everything that is out there (even some popular ones).\r\n\r\nI'll just say that YAML support is something I'd like to have the team look into post 6.2 release.",
      "created_at": "2019-01-24T18:03:10Z",
      "updated_at": "2019-01-24T18:03:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please comment based on the issue and https://github.com/dotnet/corefx/issues/34578? Could we use YamlDotNet or we need more trusted API from CoreFX?",
      "created_at": "2019-01-25T03:49:37Z",
      "updated_at": "2019-01-25T03:49:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> in.my opinion is that let convertfrom-json, convertfrom-jaml have the same status, either move out or built in.\r\n\r\nI have been advocating that we should move the JSON cmdlets out of the project. There are quite a few changes that many would like to make that would be fairly breaking changes, but they can't be made because the cmdlets are tied to PowerShell. Moving them out of the project allows us to make the major changes in a new major version of the cmdlets module, and have PowerShell ship with an older version providing backwards compatibility but allowing users to update if they wish.... However, it is a huge hassle to include external modules like this, IMO.\r\n\r\nI would rather we learn from our mistakes with JSON and Pester than arbitrarily treat YAML the same way. It should definitely not be a part of PowerShell's core functionality, but should definitely have some kind of officially supported module with shared ownership between the community and the PS Team. ",
      "created_at": "2019-01-25T13:37:22Z",
      "updated_at": "2019-01-25T13:37:22Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "I like that idea. Moving the JSON Cmdlets out would help surface workflow issues which currently exist with hard dependencies on external modules.",
      "created_at": "2019-01-25T14:18:19Z",
      "updated_at": "2019-01-25T14:18:19Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> But yaml is important for system administrators, script developers, These users need yaml commands.\r\n\r\nThey **may** need them but that doesn't not mean that they need to be included directly within PowerShell as an external module is more than acceptable and has a more flexible support lifecycle than anything bundled into the core repository.\r\n\r\nI have to say that @SteveL-MSFT idea of a `DevOps` Meta module is really the right way for this in the longer term as this allows for different user sets to get a simpler set of packages that are much easier managed as an external dependency than it being an internal one, which to me makes a lot of sense going forward, though they should be meta modules based on tech stacks because if i am on windows and not using anisble then why would I need yaml cmdlets on windows? \r\n\r\nWhilst there is a large number of users in the linux world using yml as mentioned by @chuanjiao10 this is not the case in the windows world, which from my understanding of overall PowerShell use still largely sticks to PowerShell 5.1 as it is inboxed on their systems, and whilst bundling Yaml cmdlets may help Linux users it feels to me like an unnecessary additional bundled item for Windows users but to treat both sets of users the same it makes the utmost sense that it ends up being an external module that both sets of users can utilise as required\r\n\r\n",
      "created_at": "2019-01-25T14:30:17Z",
      "updated_at": "2019-01-25T14:32:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is there anyone who wants to become an owner and accompany these cmdlets in a separate project?",
      "created_at": "2019-01-25T15:02:36Z",
      "updated_at": "2019-01-25T15:02:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it seems that corefx is currently not interested in built-in YAML support.  YamlDotNet seems to be the most popular library, is MIT licensed, actively maintained, so I would start there.  A community driven project would be amazing and would probably happen sooner than if you left it to the PowerShell team.",
      "created_at": "2019-01-25T18:28:44Z",
      "updated_at": "2019-01-25T18:28:44Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT seems thats for good reason - https://snyk.io/vuln/SNYK-DOTNET-YAMLDOTNET-60255 which I expect that this has lowered trust in this particular library.",
      "created_at": "2019-01-26T00:07:54Z",
      "updated_at": "2019-01-26T00:08:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it seems that corefx is currently not interested in built-in YAML support.\r\n\r\nCoreFX team asks about use cases. If PowerShell project will say that we need the API they will consider adding the API.\r\n\r\n> A community driven project would be amazing and would probably happen sooner than if you left it to the PowerShell team.\r\n\r\nOh, I know only one such project - Pester. And I don't believe in the yaml community driven project - why has it not appeared in the last few years?\r\nI consider to start the project but it stopped me that I can never reach the level in quality, compliance and security of the code that MSFT requires.\r\nI guess MSFT will never be able to trust and use projects without security audit.\r\nI have only one idea to make it work. MSFT GitHub projects like CoreFX and PowerShell is \"owned by MSFT\" and \"driven by MSFT\". New project type could be \"owned by MSFT\", \"driven by Community\" and \"mentored by MSFT\". Under \"mentored\" I mean implementation of environment where project will be trusted and high quality.",
      "created_at": "2019-01-26T13:40:58Z",
      "updated_at": "2019-01-26T13:40:58Z"
    },
    {
      "author": "brettjacobson",
      "author_association": "NONE",
      "body": "Microsoft needs to bundle YAML support in-box for PowerShell Core.  Plain and simple.",
      "created_at": "2019-01-28T16:20:18Z",
      "updated_at": "2019-01-28T16:20:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@brettjacobson Yes, it would be plain, simple and high quality but MSFT team does not have so many resources. Are you ready to contribute? :-)",
      "created_at": "2019-01-28T17:14:45Z",
      "updated_at": "2019-01-28T17:14:45Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@brettjacobson - Microsoft doesn't need to bundle YAML support. It may be of use if they did but there is no requirement from them to do so nor is there a need to do so at all.\r\n\r\nThis is a feature request for something that many `want` and would ultimately `use` but is not a **critical** `need` & therefore is _unlikely_ to get prioritised which is exactly what @SteveL-MSFT was trying to get at when he said the following \r\n>I'll just say that YAML support is something I'd like to have the team look into post 6.2 release.\r\n\r\n>A community driven project would be amazing and would probably happen sooner than if you left it to the PowerShell team.\r\n\r\nThe PowerShell team isn't huge and therefore looking at this realistically the best & quickest way to be able to get support for YAML is going to be external to the core feature set of PowerShell, rather than it becoming baked into the product itself.",
      "created_at": "2019-01-28T21:22:26Z",
      "updated_at": "2019-01-28T21:22:26Z"
    },
    {
      "author": "nxtn",
      "author_association": "CONTRIBUTOR",
      "body": "> CoreFX team asks about use cases. If PowerShell project will say that we need the API they will consider adding the API.\r\n\r\n@iSazonov IMHO there will never be built-in YAML support in CoreFX, as there haven't been complete JSON support yet.\r\n\r\nSo are you going to wait for a \"great\" third-party library or ask James Newton-King to create a `Newtonsoft.Yaml`? :-)",
      "created_at": "2019-01-31T11:36:02Z",
      "updated_at": "2019-01-31T11:40:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NextTurn We'll get new Json (very fast (more fast than Newton.Json) and very flexible) implementation in .Net Core 3.0. \r\nCoreFX team always add new API if there is great request from community. If there is many project which can benefits from YAML they will add. Currently no such requests is.",
      "created_at": "2019-01-31T13:07:16Z",
      "updated_at": "2019-01-31T13:07:16Z"
    },
    {
      "author": "dzmitry-lahoda",
      "author_association": "NONE",
      "body": "What I do no each new `pwsh` system? I do `Install-Module -Name powershell-yaml`.\r\n\r\nMongo, Kubernetes, Istio, Ansible, name it - I use. All these are YAML and I do have YAML templates and transformations. `pwsh` seems good for DevOps and they do speak YAML.",
      "created_at": "2019-07-16T15:08:27Z",
      "updated_at": "2019-07-16T15:08:57Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@dzmitry-lahoda Issue #5681 proposes to have a 'rich' version of PowerShell that ships with a set of common modules such as e.g. `Pester`, etc. Please post in this issue but given that there seems to be no clear winner between the currently 2 available yaml modules and they are clobbering each other, it might be a hard decision to pick a favourite.",
      "created_at": "2019-07-16T15:26:25Z",
      "updated_at": "2019-07-16T15:26:41Z"
    },
    {
      "author": "dzmitry-lahoda",
      "author_association": "NONE",
      "body": "I see only one YAML :(\r\n![image](https://user-images.githubusercontent.com/757125/61307856-bfe92880-a7f7-11e9-8466-07c181721b3e.png)\r\n\r\n`Pester`, yeh. Too heavy to ship BDD framework into mainline, unlike YAML reader for my pwsh container applications.",
      "created_at": "2019-07-16T15:31:09Z",
      "updated_at": "2019-07-16T15:31:09Z"
    },
    {
      "author": "dirkslab",
      "author_association": "NONE",
      "body": "Has this thread been concluded. What is the recommended(or suggested) module to use by Microsoft?\r\nDevOps pipelines uses yaml. All my deployment automation are build with powershell. Seems yaml and powershell do not play nice. Is powershell a bad choice for Azure DevOps automation?\r\nNeed to think carefully of my future use/innovation and would appreciate some direction.\r\nThanks in advance!",
      "created_at": "2019-12-18T13:47:30Z",
      "updated_at": "2019-12-18T13:47:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dirkslab You could use https://github.com/cloudbase/powershell-yaml\n\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/2104303?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/cloudbase/powershell-yaml\">cloudbase/powershell-yaml</a></strong></div><div>PowerShell CmdLets for YAML format manipulation. Contribute to cloudbase/powershell-yaml development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-12-18T18:27:29Z",
      "updated_at": "2019-12-18T18:27:32Z"
    },
    {
      "author": "dirkslab",
      "author_association": "NONE",
      "body": "Thanks @iSazonov, that is the solution I am testing with at the moment. The solution so far seems to work fine. There is probably nothing wrong using the solution.\r\n\r\nNote that using powershell-yaml you need to ok an untrusted module. This is the part that i am battling to understand. Microsoft recommends using yaml pipelines. Microsoft (or at least this thread) suggest using 3rd party module so you can integrate yaml config with powershell, but do not endorse or recommend any. How do you explain that logically to enterprise. \r\nMy experience so far has always been that if you do not use Microsoft endorsed solutions, that would mute any support or understanding from Microsoft for your solution issues(this does not matter if the unsupported part touches anything causing problems). The mere fact that you have unsupported part usually results in no support/responsibility .\r\nMaybe things have changed in this OpenSource era. Simple official response and guidance from Microsoft would set me at ease and help me understand.\r\n\r\nAppreciated your response. Regards.",
      "created_at": "2019-12-19T08:04:56Z",
      "updated_at": "2019-12-19T08:04:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dirkslab I think your MSFT account manager is right person to ask about support policy.",
      "created_at": "2019-12-19T11:37:39Z",
      "updated_at": "2019-12-19T11:37:39Z"
    },
    {
      "author": "majkinetor",
      "author_association": "NONE",
      "body": "> CoreFX team asks about use cases\r\n\r\nAppart from obvious benefits that yaml is all around us in CI/CD today and number of configuration systems, the added benefit of ConvertTo-Yaml is **representing nasted HashTable in human readable format**, unlike `ConvertTo-Json` that we have to use now which makes output not very readable.\r\n\r\nI use [Write-HashTable](https://github.com/majkinetor/posh/blob/master/MM_HashTables/Write-HashTable.ps1) in the meantime, but this would be great to have OTB.",
      "created_at": "2020-05-02T00:13:30Z",
      "updated_at": "2020-05-02T00:13:30Z"
    },
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "I hate yaml, I really hate it. However there are a couple of facets worth the MS team considering:\r\n\r\n1. It's become the defacto language of CI: docker-compose.yaml, ansible, kuber, k8s, github, circle, azure, ... And it seems to crawl out of CI into the projects that use it.\r\n```\r\n$config = Invoke-WebRequest https://$ciserver/api/projects/$project/config.yaml | ConvertFrom-Yaml\r\n$config['started'] = Get-Date\r\n$config['options'] = $options\r\nInvoke-WebRequest -Method Post https://$ciserver/api/projects/$project/build -Body ($config | ConvertTo-Yaml)\r\n```\r\n\r\nHaving this ship with powershell would be transformative in evangelising to CI groups.\r\n\"If we switch to ms powershell we can automatically\" -> \"Tell me more?\"\r\nvs\r\n\"If we switch to ms powershell and download some scripts from the gallery\" -> \"no\"\r\n\r\n2. Really, this is by-the-by, but yaml is a superset of json, such that json is an abbreviated form of yaml, an efficient yaml parser is an efficient json parser,\r\n",
      "created_at": "2020-06-18T22:51:15Z",
      "updated_at": "2020-06-18T22:51:15Z"
    },
    {
      "author": "potatoqualitee",
      "author_association": "NONE",
      "body": "Can this be reconsidered for 7.1? I'm also having issues with using an untrusted module and something so DevsOpsy should really be native to PowerShell.",
      "created_at": "2020-07-13T08:17:02Z",
      "updated_at": "2020-07-13T08:17:02Z"
    },
    {
      "author": "wasker",
      "author_association": "NONE",
      "body": "IMHO, YAML is as popular as JSON and CSV, and not having inbox converters for YAML in PowerShell is kind of sad. Having inbox YAML converters will also ensure that their behavior is on par with JSON converters, which is not the case with community modules.\r\n\r\nDon't get me wrong - I appreciate that folks create modules for community, but in the current state of the world, YAML conversion is table stakes - we don't expect folks to download 3rd-party modules for JSON conversion. ",
      "created_at": "2020-10-29T22:27:40Z",
      "updated_at": "2020-10-29T22:27:40Z"
    },
    {
      "author": "marktoman",
      "author_association": "NONE",
      "body": "> @dirkslab You could use https://github.com/cloudbase/powershell-yaml\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"https://avatars3.githubusercontent.com/u/2104303?s=400&amp;v=4\"><img alt=\"\" height=\"14\" src=\"https://camo.githubusercontent.com/d6213c097723f387bcb771ff5d3f44ed6fac6f5c14e9cca20f3ed3ea44e37d93/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f66617669636f6e2e69636f\"> GitHub**[cloudbase/powershell-yaml](https://github.com/cloudbase/powershell-yaml)**PowerShell CmdLets for YAML format manipulation. Contribute to cloudbase/powershell-yaml development by creating an account on GitHub.\r\n\r\nThe problem is that unlike `ConvertFrom-Json`, this module deserializes to `Hashtable` instead of a proper object (or `PSCustomObject`), which doesn't allow using the pipeline in the following way:\r\n ```powershell \r\n$obj | ? Categories -gt 0 | % Name\r\n```\r\n\r\n\r\nMy current workaround: \r\n```powershell\r\n'...' | ConvertFrom-Yaml | ConvertTo-Yaml -JsonCompatible | ConvertFrom-Json\r\n```\r\nSuboptimal, to say the least.\n\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/2104303?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/cloudbase/powershell-yaml\">cloudbase/powershell-yaml</a></strong></div><div>PowerShell CmdLets for YAML format manipulation. Contribute to cloudbase/powershell-yaml development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-12-21T08:59:36Z",
      "updated_at": "2020-12-21T08:59:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@marektoman, your example _should_ work with a hashtable:\r\n\r\n```powershell\r\nPS> @{ one = 1; two = 2 } | ? one -eq 1 | % two\r\n2\r\n```\r\n\r\nAlso note that you can cast hashtables to `[pscustomobject]` (albeit only one by one - see #13838):\r\n\r\n```powershell\r\nPS> @{ one = 1; two = 2 }, @{ one = 10; two = 20 } | % { [pscustomobject] $_ }\r\n\r\none two\r\n--- ---\r\n  1   2\r\n 10  20\r\n```",
      "created_at": "2020-12-21T12:56:16Z",
      "updated_at": "2020-12-21T12:56:16Z"
    },
    {
      "author": "marktoman",
      "author_association": "NONE",
      "body": "> @marektoman, your example _should_ work with a hashtable:\r\n> \r\n> ```powershell\r\n> PS> @{ one = 1; two = 2 } | ? one -eq 1 | % two\r\n> 2\r\n> ```\r\n> \r\n> Also note that you can cast hashtables to `[pscustomobject]` (albeit only one by one - see #13838):\r\n> \r\n> ```powershell\r\n> PS> @{ one = 1; two = 2 }, @{ one = 10; two = 20 } | % { [pscustomobject] $_ }\r\n> \r\n> one two\r\n> --- ---\r\n>   1   2\r\n>  10  20\r\n> ```\r\n\r\nGood point, the behavior is unrelated to hashtable, but it is likely related to the way each module does output. \r\n\r\nWhen I run\r\n```powershell\r\n$yamlArray | ConvertFrom-Yaml | ? Name -eq 'All'\r\n```\r\n, it doesn't work. However, this does:\r\n```powershell\r\n($yamlArray | ConvertFrom-Yaml) | ? Name -eq 'All'\r\n```\r\n",
      "created_at": "2020-12-21T13:27:58Z",
      "updated_at": "2020-12-21T13:27:58Z"
    },
    {
      "author": "dirkslab",
      "author_association": "NONE",
      "body": "Thanks @marektoman , my solution was to remove the extra yaml module overhead and settle somewhere in between yaml and json.\r\n\r\nI did something similar as you when requiring an pscustomobject:\r\n$obj = Get-Content -Path .\\deployment-config.yml -raw | ConvertFrom-Yaml | convertto-json -Depth 100 | ConvertFrom-json -Depth 100\r\n\r\nThe direction I have chosen to go with:\r\nI have replaced all my yaml config with .psd1 and using Import-PowerShellDataFile\r\n\r\nNot as clean as yaml, more than sufficient and easy to read though. Also eliminated any and all module issue. \r\n\r\nExamples: \r\nSharing project with other devs that are domain policy restricted on installing random and unsigned modules, not an issue anymore.\r\nI can now . browse path before I convert it to a string\r\nadding comments are easy\r\n\r\nMy personal goals were to need little to no 3rd party modules for my ps project. I am now back on track and it's hassle free.",
      "created_at": "2020-12-21T13:29:21Z",
      "updated_at": "2020-12-21T13:29:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@marektoman : The `(...)` forces enumeration, which in turn suggests that when `ConvertFrom-Yaml` outputs an _array_ of hashtables that it does so _as a single object_, which contravenes the expected streaming (one-by-one) pipeline behavior. It is what `'[ 1, 2 ]' | ConvertFrom-Json` _used to do_  (see #3424), and still does in Windows PowerShell.\r\n\r\nThe price you pay for the `(...)` workaround is that all output must be collected in memory first, but I suspect that won't be a problem in practice.",
      "created_at": "2020-12-21T13:33:51Z",
      "updated_at": "2020-12-21T13:35:00Z"
    },
    {
      "author": "marktoman",
      "author_association": "NONE",
      "body": "@dirkslab Good idea for that use case. My use case is a shell independent tool that produces single output, which is both human and machine readable.\r\n\r\n@mklement0 I see, thanks for all the info.",
      "created_at": "2020-12-22T22:56:09Z",
      "updated_at": "2020-12-22T22:56:09Z"
    },
    {
      "author": "Vaccano",
      "author_association": "NONE",
      "body": "It is absolutely CRAZY that there is not first class support for yaml in PowerShell.  I am just stunned.\r\n\r\nThe Kubernetes movement alone should be more than enough to get this prioritized.",
      "created_at": "2021-05-21T18:31:45Z",
      "updated_at": "2021-05-21T18:31:45Z"
    },
    {
      "author": "autosvet",
      "author_association": "NONE",
      "body": "We should admit that YAML is used practically in many/most of cloud, CI, configuration, orchestration tools that IT pros, devs and DevOps need to use. So if PowerShell want to stay (most :D) valuable in that world for each it was designed, created and tailored specifically it should support it out of the box.",
      "created_at": "2021-06-05T08:00:00Z",
      "updated_at": "2021-06-05T08:00:00Z"
    },
    {
      "author": "dzmitry-lahoda",
      "author_association": "NONE",
      "body": "can i donate 10 USD for the feature? I know there are services where donation is done until some dev implements",
      "created_at": "2021-06-05T11:32:30Z",
      "updated_at": "2021-06-05T11:32:30Z"
    },
    {
      "author": "Vaccano",
      "author_association": "NONE",
      "body": "This page talks a lot about the `powershell-yaml` module as an option to get YAML support.\r\n\r\nDoes this library work on Linux with Powershell Core? or it just a Windows only thing.  (I noticed that its dependencies include .Net Framework, so I am worried.)",
      "created_at": "2021-06-11T07:09:04Z",
      "updated_at": "2021-06-11T07:09:04Z"
    },
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "@Vaccano it works well on Linux.",
      "created_at": "2021-06-11T09:57:57Z",
      "updated_at": "2021-06-11T09:57:57Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "My initial thinking is that YAML support should be standard in PowerShell 7.x. YAML is such an integral language to today's enterprises that its omission is glaring considering support for XML and JSON.  I have no problem with a separate module that can also be installed from the gallery, but it should be included by default in a new PowerShell 7.x installation. I know there are organizations that won't consider anything open source, and certainly nothing that doesn't originate or is supported by Microsoft. Given the value of PowerShell as a cloud language, native YAML support seems like the right decision.\r\n\r\nI am also less concerned about making the module downlevel compatible. If someone needs YAML conversion support for Windows PowerShell, there appear to be a number of options in the PowerShell Gallery.",
      "created_at": "2021-06-14T17:11:35Z",
      "updated_at": "2021-06-14T17:11:35Z"
    },
    {
      "author": "redstrike",
      "author_association": "NONE",
      "body": "As a normal user, I've installed PowerShell Core and use it in my work.\r\nOur projects' ps1 scripts are not compatible with PowerShell Core. I have switched to the legacy PowerShell to run them.\r\nAnd it's difficult to install a new module in this constrained work environment.\r\nI don't know how to write PowerShell scripts, and now I have to live with the old PowerShell.\r\nI feel sad because the new shiny PowerShell Core that I'm in love, is not usable in even a simple real-world usage.\r\nMaybe, I have to rewrite those *.ps1 files by using a serious programming language.",
      "created_at": "2021-07-09T03:31:01Z",
      "updated_at": "2021-07-09T03:31:01Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/wg-powershell-cmdlets has been discussing this issue, and despite the extremely high demand (and my own personal desire to have strong, canonical YAML cmdlets), we're unfortunately going to have to close it (for now) as Won't Fix. The reasoning is two-fold:\r\n\r\n* While the PowerShell package is already fairly large, we're doing our best not to add new dependencies to the package so that we don't continue to grow our size unfettered, and because we believe that pulling modules from the PowerShell Gallery (or an internal trusted Gallery, having been vetted appropriately by an enterprise) should be a standard part of a PS7 workflow. \r\n* As a team, we simply don't have the capacity to build a .NET YAML parser from scratch, nor do we have the capacity to vet, support, and service a 3rd party library for which the security implications are high-stakes.\r\n\r\nIf .NET were to officially support a YAML library, we (as Microsoft) could potentially look into supporting a YAML module on the Gallery. But until that point, the existing community modules will have to suffice.",
      "created_at": "2021-08-18T17:16:25Z",
      "updated_at": "2021-08-18T17:16:25Z"
    },
    {
      "author": "potatoqualitee",
      "author_association": "NONE",
      "body": "Thanks, Joey. I'd like to file a Feature Request in dotnet but don't understand it well enough to know which repo to add the issue. Can you please suggest which repo would be most appropriate within https://github.com/dotnet ?\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/9141961?s=280&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet\">.NET Platform</a></strong></div><div>Home of the open source .NET platform. .NET Platform has 201 repositories available. Follow their code on GitHub.</div></blockquote>",
      "created_at": "2021-08-19T11:06:48Z",
      "updated_at": "2021-08-19T11:06:50Z"
    },
    {
      "author": "potatoqualitee",
      "author_association": "NONE",
      "body": "(or could a Microsoft person/PowerShell team member place to the request as it may get a higher priority?)",
      "created_at": "2021-08-19T11:13:54Z",
      "updated_at": "2021-08-19T11:13:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See https://github.com/dotnet/runtime/issues/28414\r\n",
      "created_at": "2021-08-19T11:43:54Z",
      "updated_at": "2021-08-19T11:43:54Z"
    },
    {
      "author": "potatoqualitee",
      "author_association": "NONE",
      "body": "Thank you @iSazonov. That doesn't look promising :/ Seems that we do need an advocate from the PowerShell team to create the request, eh?",
      "created_at": "2021-08-19T11:52:00Z",
      "updated_at": "2021-08-19T11:52:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess Microsoft has internal conclusion that it is low priority and small area.\r\n\r\nYou can ask PowerShell team online today on Community Call https://github.com/PowerShell/PowerShell-RFC/issues/299",
      "created_at": "2021-08-19T12:07:29Z",
      "updated_at": "2021-08-19T12:07:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-08-20T21:00:35Z",
      "updated_at": "2021-08-20T21:00:35Z"
    },
    {
      "author": "Vaccano",
      "author_association": "NONE",
      "body": "This makes me sad.\r\n\r\nPowershell says \".Net has to do it for us to do it\"\r\n.Net says \"It is up to Powershell if they want to do it\"\r\n\r\nI wonder if some of the higher ups at Microsoft realize the runaround that is going on here.  \r\n\r\nYAML is important.  Having it from a signed Trusted Source is critical for most companies.  Powershell has built in restrictions making it hard to use things not signed by trusted sources.\r\n\r\n<sigh>\r\n\r\nI give up.  It seems that the enough dust has been kicked up to obscure this issue.  I imagine at some point someone high up at Microsoft will say \"What?  No YAML support in PowerShell?\"  Fingers will be pointed, blame laid, excuses made (etc).  Then it will get done.  But no amount of requests by the community will get this through.",
      "created_at": "2021-08-20T22:02:36Z",
      "updated_at": "2021-08-20T22:02:36Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "Why has this been closed as WONTFIX? Seriously, YAML is so common these days, all the cloud-native stuff uses it. One can do so much with just vanilla PowerShell before they need to import a module, and not being to deal with YAML shouldn't be one of them. The built-in JSON cmdlets is one of the reasons why JSON is to popular in PowerShell: it's there, it's standardized, and it works. I am sure I am not alone defaulting to JSON just for that reason, and thinking twice about using YAML if I don't really need it, as it makes my scripts less portable or standalone.",
      "created_at": "2021-08-24T13:37:10Z",
      "updated_at": "2021-08-24T13:37:10Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@awakecoding joey's explanation is here: https://github.com/PowerShell/PowerShell/issues/3607#issuecomment-901288121\r\n\r\nThe Json library, even though it was Newtonsoft, was \"blessed\" by Microsoft as the official JSON library till system.text.json came around.\r\n\r\nIt's a bummer for sure, I would love native YAML support as well, but I personally think the reasoning is sound. I think energies should be focused on more easily pulling down dependencies quickly for a script/module.",
      "created_at": "2021-08-24T15:02:57Z",
      "updated_at": "2021-08-24T15:02:57Z"
    },
    {
      "author": "StephenHodgson",
      "author_association": "NONE",
      "body": "Seriously surprised this isn't already included. It is sorely needed in the community and would seem like a obvious inclusion.",
      "created_at": "2022-01-12T01:09:33Z",
      "updated_at": "2022-01-12T01:09:33Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "It's a shame.\r\nWe pay many billions in royalties and still have to beg M$ for many years so that not Amazon or Google don't step in again to solve such \"problems\".\r\nYes, it's a shame.\r\n\r\n\r\n> This makes me sad.\r\n> \r\n> Powershell says \".Net has to do it for us to do it\" .Net says \"It is up to Powershell if they want to do it\"\r\n> \r\n> I wonder if some of the higher ups at Microsoft realize the runaround that is going on here.\r\n> \r\n> YAML is important. Having it from a signed Trusted Source is critical for most companies. Powershell has built in restrictions making it hard to use things not signed by trusted sources.\r\n> \r\n> I give up. It seems that the enough dust has been kicked up to obscure this issue. I imagine at some point someone high up at Microsoft will say \"What? No YAML support in PowerShell?\" Fingers will be pointed, blame laid, excuses made (etc). Then it will get done. But no amount of requests by the community will get this through.\r\n\r\n",
      "created_at": "2022-01-20T23:48:49Z",
      "updated_at": "2022-01-20T23:48:49Z"
    },
    {
      "author": "schittli",
      "author_association": "NONE",
      "body": "After 5 years, it's time to ask M$$ again to do its homework, especially because we need YAML on azure.\r\n\r\nPlease vote:\r\nhttps://github.com/PowerShell/PowerShell/issues/16785",
      "created_at": "2022-01-21T00:00:16Z",
      "updated_at": "2022-01-21T00:00:16Z"
    }
  ],
  "created_at": "2017-04-20T17:04:45Z",
  "number": 3607,
  "state": "closed",
  "title": "ConvertFrom-Yaml, ConvertTo-Yaml",
  "updated_at": "2022-01-21T00:00:16Z"
}