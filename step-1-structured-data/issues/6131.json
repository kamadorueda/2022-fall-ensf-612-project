{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6131",
  "author": "oskarm93",
  "body": "I have been reading this doc about arrays:\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_arrays?view=powershell-6#zero-objects\r\n\r\nHowever, nowhere does it mention the effects of concatenating multiple nulls / empty arrays.\r\nIt seems concatenation of arrays in different order will yield different results.\r\nI had problems with functions returning a singleton array, where the single element inside the array is a null rather than an empty array instead.\r\n\r\nI can't class it as a bug, because I don't know what the expectation is in the language design. It does, however, seem counter intuitive and prone to bugs in scripts working with collections.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$a = @()\r\n$b = $null\r\n\r\n$a.Length + $b.Length\r\n($a + $b).Length\r\n($a += $b).Length\r\n\r\n$a = @()\r\n$b = $null\r\n\r\n$b.Length + $a.Length\r\n($b + $a).Length\r\n($b += $a).Length\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n```\r\n\r\nIt makes no difference as to how many elements `$a` is holding. If i run this:\r\n```powershell\r\n$a = @(1)\r\n$b = $null\r\n\r\n$a.Length + $b.Length\r\n($a + $b).Length\r\n($a += $b).Length\r\n\r\n$a = @(1)\r\n$b = $null\r\n\r\n$b.Length + $a.Length\r\n($b + $a).Length\r\n($b += $a).Length\r\n```\r\n\r\nOutput is:\r\n```powershell\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-03-30T00:57:54Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "The behaviour makes sense to me if you look at the types:\r\n- `@()+$null` starts with an `Object[]` array of underlying base type `System.Array` and adds an item to it, with the value being $null. Similarly, in `C#` you can add `null` to an `IList` or `IEnumarable`\r\n- `$null+@()` starts with `$null`, which is loosely speaking 'nothing' and adding an array to it, means we end up with just the empty array.\r\n\r\nThis behaviour is much better than the one of C# where `null + new object[0]` or `new object[] + null` always ends up being a string with the content `System.Object[]`. My recommendations are:\r\n- Create array first and add only the elements that you want to, including also null checks (make sure `$null` is on the LHS when checking for it, see PSSA rule [PossibleIncorrectComparisonWithNull](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/RuleDocumentation/PossibleIncorrectComparisonWithNull.md) for details, which boils down to unintuitive behaviour when comparing arrays)\r\n- Using `+` and `+=` operators are generally discouraged to be used with PowerShell arrays because they create a new array under the hood (because they use C# arrays that have a fixed size), leading to bad performance for big lists and object references not working as expected any more, see [issue 5805](https://github.com/PowerShell/PowerShell/issues/5805) for details and e.g. this [blog](https://powershell.org/2013/09/16/powershell-performance-the-operator-and-when-to-avoid-it/) for alternatives.\r\nCurrently, there is active work in progress for adding native support for lists in PowerShell with similar user usage to arrays in [issue 5643](https://github.com/PowerShell/PowerShell/issues/5643). 2 PRs trying to add a `[]` or `@[]` syntax failed unfortunately and it currently looks like the final implementation will use type accelerators and we will probably end up with ` [list]@(...)`.",
      "created_at": "2018-02-10T21:47:31Z",
      "updated_at": "2018-02-10T21:51:34Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Closing as it is marked \"resolved\" and no ones commented on it for a while.",
      "created_at": "2018-03-30T00:57:54Z",
      "updated_at": "2018-03-30T00:57:54Z"
    }
  ],
  "created_at": "2018-02-07T20:32:46Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 6131,
  "state": "closed",
  "title": "Question: Concatenation of empty arrays",
  "updated_at": "2018-03-30T00:57:54Z"
}