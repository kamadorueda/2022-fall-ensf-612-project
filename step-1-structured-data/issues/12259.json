{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12259",
  "author": "stinos",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIt would be a great adddition to Powershell to support full-blown string interpolation, i.e. including the ability to specify the format of the expanded tokens. Essentially like C#'s https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated or Python's https://www.python.org/dev/peps/pep-0498.\r\n\r\nSo right now we can 'traditional' string formatting like\r\n```\r\n>>> $x=10\r\n>>> $y=1/3\r\n>>> \"x={0,5} and y={1:F3}\" -f $x, $y\r\nx=   10 and y=0.333\r\n```\r\n\r\nThe more 'modern' way is writing expressions inline\r\n```\r\n>>> \"x=$x and y=$y\"\r\nx=10 and y=0.333333333333333\r\n```\r\nHowever this does currently not support specifying the format like in the traditional example.\r\n\r\nSo what I'm looking for here is a way to write it like for instance C# allows i.e. start a string with the `$` sign then enter expressions and their format specifiers inline, here's some example C# code:\r\n```\r\n> var x = 10;\r\n> var y = 1.0/3.0;\r\n> $\"x={x,5} and y = {y:F2}\";\r\n\"x=   10 and y = 0.33\"\r\n```\r\n\r\nWhy? It is usually shorter and more readable, once I got used to it in other language it is really hard to go back to having to write placeholders and hoping you don't mess up the order. Already brought up shortly by @logicalextreme in https://github.com/PowerShell/PowerShell/issues/11412, orignally I asked on SO https://stackoverflow.com/questions/61026258/does-powershell-string-interpolation-support-format-specifiers.\r\n\r\n# Proposed technical implementation details\r\n\r\nI assume C# implements this by parsing the $ string and turning it into a concatenation of the parts where the interpolated expression is simply passed to string.Format. Not sure if Powershell also needs a special character. But it's maybe not a bad idea to keep a familiar syntax like C#'s i.e. `{<interpolationExpression>[,<alignment>][:<formatString>]}` So the basic idea is to allow for instance\r\n```\r\n\"x=${x,5} and y = ${y:F2}\"\r\n```\r\nwhich could be implemented by transforming that into\r\n```\r\n\"x=$('{0, 5}' -f $($x)) and y = $('{0:F2}' -f $($y))\"\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference #11412",
      "created_at": "2020-04-06T15:01:11Z",
      "updated_at": "2020-04-06T15:01:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It would be nice to have this ability, but the proposed syntax won't work:\r\n\r\n* `${x,5}`, because `{...}` serves to delineate variable names, refers to a variable named `x,5`, which - perhaps surprisingly - _is_ supported: `${x,5} = 42; ${x,5}`\r\n\r\n* `${y:F2}`, because `:` serves as the separator in [namespace variable notation](https://stackoverflow.com/a/55036515/45375), is referring to path `F2` in PS drive `y`.\r\n ",
      "created_at": "2020-04-20T21:11:18Z",
      "updated_at": "2020-04-20T21:11:18Z"
    }
  ],
  "created_at": "2020-04-05T07:36:26Z",
  "number": 12259,
  "state": "open",
  "title": "Support formatting specifiers in string interpolation ",
  "updated_at": "2020-04-21T09:56:42Z"
}