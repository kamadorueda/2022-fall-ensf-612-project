{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14730",
  "author": "89z",
  "body": "If I do this:\r\n\r\n~~~\r\nNew-Item -Type Directory dest\r\nNew-Item -Force dest\r\n~~~\r\n\r\nI get this result:\r\n\r\n~~~\r\nNew-Item: Access to the path 'C:\\PowerShell-7.0.4-win-x64\\dest' is denied.\r\n~~~\r\n\r\nI think if the user provides `-Force`, then the destination should implicitly be removed if it is a file **or empty folder**. However if people disagree, I would at least say that the error message could be better.",
  "closed_at": "2021-11-03T02:58:04Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The issue here is you haven't supplied `-ItemType Directory` in your second call so PowerShell goes to create a new handle (to create the file) at that location and Windows is giving the generic access denied error for this scenario.",
      "created_at": "2021-02-08T19:24:45Z",
      "updated_at": "2021-02-08T19:24:45Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That's perfectly fine, it would be up to the maintainers to decide the next course, just trying to indicate why the error is what it is.",
      "created_at": "2021-02-08T19:43:29Z",
      "updated_at": "2021-02-08T19:43:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I would at least say that the error message could be better.\r\n\r\nFully agreed. \r\n(The underlying system message, which is passed through as is, as @jborean93 notes, is itself quite unhelpful; something like \"Cannot open a directory as a file.\" would have provided a much better clue; a custom error message is called for either way, in this case.)\r\n\r\n> should implicitly be removed with `Remove-Item -Recurse`\r\n\r\nI'd say that's too risky. \r\n\r\nRestricting the scope of `-Force` to file-system items _of the same type_ makes sense to me, especially given that you could end up wiping out an entire directory tree by accident, because you thought you were replacing a _file_.\r\n\r\n(As an aside: We already have item-type-specific behavior, albeit in the form of an unfortunate discrepancy: `-Force` with a _directory_ simply returns a preexisting item as-is, whereas with a _file_ the existing file is _truncated_ first.)\r\n\r\nIncidentally, the inverse - trying to create a _directory_ with `-Force` when an _file_ by that name already exists -  is currently a _quiet no-op_, which is undoubtedly a _bug_ - see #5290.\r\n\r\nIf there's consensus that reporting an _error_ rather than quietly wiping out an entire directory in the case at hand is the right thing to do, we can close this in favor of #5290, which covers both this and the inverse scenario and also asks for better error messages.\r\n\r\n\r\n\r\n",
      "created_at": "2021-02-08T22:05:07Z",
      "updated_at": "2021-02-08T22:41:16Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> New-Item -Ignore\r\n\r\nTo do this, there is `-ErrorAction` parameter and `$ErrorActionPreference` variable. ",
      "created_at": "2021-02-09T10:08:05Z",
      "updated_at": "2021-02-09T10:08:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @89z; I have a few thoughts (see below), but I suggest closing this issue (which doesn't preclude further discussion that may lead to new issues ), given that the only non-breaking (and, to me, sensible) fix to the original issue is to amend the error message, as already requested in #5290.\r\n\r\n---\r\n\r\nI agree that more switches may be called for, but there is an additional behavior in the mix, which further complicates things:\r\n\r\n* `-Force` currently also creates not-yet-extant _intermediate directories_ on demand, when creating a _file_ (it does it _by default_ for a _directory_, which differs from the `mkdir` Unix utility's default behavior).\r\n\r\nTo summarize, `New-Item` currently offers the following behaviors:\r\n\r\n* create the item only if it doesn't exist (default behavior)\r\n\r\n  * create the parent directory (path) for the new item on demand (with `-Force`, with both files and directories)\r\n\r\n* keep an existing item, with `-Force`:\r\n   * keep as-is (applies only to _directories_ - all content is preserved)\r\n   * keep, but _truncate_  (applies only to _files_) - note that the file is _not_ recreated: the creation timestamp stays the same.\r\n\r\nThis means that `New-Item` currently offers NO way to:\r\n* keep a _file_ as-is\r\n* truly _recreate_ a file in the face of an existing one (as opposed to _truncating_ the existing one)\r\n* _recreate_ a _directory_ (which may be too risky with a non-empty existing one, as your proposal suggests)\r\n\r\nSo, _if_ we had the chance to start with a blank slate in PowerShell, I'd go for something like this, avoiding the ambiguous `-Force` altogether:\r\n\r\n```powershell\r\n# -CreateParentOnDemand is only necessary with -ItemType File, based on current behavior.\r\nNew-Item [-CreateParentOnDemand] \r\nNew-Item -KeepExisting [-CreateParentOnDemand]\r\nNew-Item -Recreate [-CreateParentOnDemand] # with -ItemType Directory only if empty\r\n````\r\n\r\nAt least hypothetically, the above switches could be implemented _in addition_ to `-Force` (along with documenting the latter as deprecated), as long as the current default `New-Item -ItemType Directory` behavior of also creating parent directories on demand is retained.\r\n",
      "created_at": "2021-02-09T20:02:05Z",
      "updated_at": "2021-02-09T22:32:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* You've reported an issue that is a duplicate of an existing issue.\r\n\r\n* The alternative resolution you've pondered (deleting a preexisting directory tree) is not only ill-advised in principle (as your own later musings seem to concur with), but, more importantly, would constitute an unacceptable breaking change.\r\n\r\nThat is why this issue should be closed.\r\n\r\n---\r\n\r\nGiven that there is therefore nothing (immediately) actionable in this issue, I personally didn't mind your \"long-winded off-topic\" essay on implementing a similar command _in another language_.\r\n\r\nAnd continuing such tangents is benign in a closed issue; as I said, new issues may later emerge as the result of the discussion.\r\n\r\nWhat I _do_ mind is your abrasive comments:\r\n\r\nStop.\r\n",
      "created_at": "2021-02-09T20:21:25Z",
      "updated_at": "2021-02-09T22:32:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If the lesson you took from this exchange is that this is about _power_ and about _forcing someone to do something_, my _recommendation_ is that you not engage with _anyone_ here - it'll only make you and, perhaps more importantly, others unhappy.\r\n",
      "created_at": "2021-02-09T20:40:39Z",
      "updated_at": "2021-02-09T22:32:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "On a one-time meta note, @89z  (and I'm happy to _hide_ - rather than _delete_ - this comment, once it has served its purpose):\r\n\r\nFirst, let's focus on the positive, which you've edited out [of your previous comment](https://github.com/PowerShell/PowerShell/issues/14730#issuecomment-775501732):\r\n\r\n> \r\n![image](https://user-images.githubusercontent.com/588825/107455550-09594100-6b1d-11eb-97cb-81fa99da821f.png)\r\n\r\nYou're most welcome.\r\n\r\n---\r\n\r\nYour subsequent comments were _deleted_, however, which is generally unfortunate (I don't know whether you've deleted them yourself).\r\n\r\nRather than trying to _rewrite history_, it's better to _hide_ comments that are no longer relevant, as I have done with my comments that responded to the since-deleted comment of yours.\r\n\r\nJust so that the history isn't lost, here's a screenshot showing the since-_deleted_ comments of yours, as well as my since-_hidden_ responses to them:\r\n\r\n![image](https://user-images.githubusercontent.com/588825/107456107-9dc3a380-6b1d-11eb-9fc4-9fdce1e2c895.png)\r\n\r\n---\r\n\r\nOn re-reading the since-deleted comments of yours, however, let me make the following recommendation:\r\n\r\nInstead of posting abrasive, ad-hominem comments that later warrant deletion, I suggest not posting them in the first place.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-02-10T02:32:45Z",
      "updated_at": "2021-02-10T02:32:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Regrettably, the previous meta comment has not served its purpose yet, so just to keep history from getting rewritten again:\r\n\r\n![image](https://user-images.githubusercontent.com/588825/107457882-e597fa00-6b20-11eb-9bbc-66240ff856d2.png)\r\n\r\n",
      "created_at": "2021-02-10T02:51:44Z",
      "updated_at": "2021-02-10T02:51:44Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Ignoring off-topic rants.\r\n\r\nThe error message is confusing, but ... the behavior is consistent.\r\n\r\nCurrently, `New-Item` does not overwrite existing items unless they are of the _same type_ that you're trying to create. That's the error you're getting: `-Force` doesn't work to overwrite a file with a folder, and vice-versa. \r\n\r\nHowever, I believe that  is _implementation specific_ (i.e. the behavior is defined by the _Provider_)...\r\n\r\nAs a side-note, don't forget that `New-Item` has a `-Value` parameter, and works on all sorts of things that are _neither directories nor files_.  I think that makes replacing `-Force` with multiple other switches a huge breaking change...",
      "created_at": "2021-02-10T03:22:06Z",
      "updated_at": "2021-02-10T03:22:06Z"
    }
  ],
  "created_at": "2021-02-08T15:38:50Z",
  "number": 14730,
  "state": "closed",
  "title": "New-Item -Force fails with existing folders",
  "updated_at": "2021-11-03T03:14:09Z"
}