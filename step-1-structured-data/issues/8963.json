{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8963",
  "author": "derek-xia",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nAdds the -Emphasize parameter for Select-String and makes it work with -AllMatches and -SimpleMatch.\r\nThe -Emphasize parameter highlights the matched text using the negative escape sequence. Issue #2905.\r\nStarted at HackIllinois.\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\nMakes it easier to distinguish what users are looking for when using the Select-String cmdlet. Helps resolve issue #2905.\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4479\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-10-08T23:11:11Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8963) <br/>All CLA requirements met.",
      "created_at": "2019-02-24T00:52:10Z",
      "updated_at": "2019-02-24T00:53:42Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I would suggest that you check to see if the host supports virtual terminal sequences, and if so, use a VT sequence instead of asterisks.  Using any character is a bit problematic because you may have that character in the text your searching.  That could confuse the user.  \r\n\r\nFWIW, this is how grep \"highlights\" matched text:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/53293618-82c2c200-3794-11e9-9bfa-63537a8cf721.png)\r\n\r\nThe tricky part is figuring out what color (or effect e.g. reverse) to use for matched text.  And whatever you pick, you probably need to make it configurable.\r\n",
      "created_at": "2019-02-24T00:58:47Z",
      "updated_at": "2019-02-24T00:59:39Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Thanks @rkeithhill for the guidance \ud83d\ude0a\r\n\r\nThis is a student at [HackIllinois](https://www.hackillinois.org). @rjmholt and I are working with the students here and are reviewing PRs that they send.\r\n\r\nAll comments are welcome \ud83d\ude0a",
      "created_at": "2019-02-24T03:13:43Z",
      "updated_at": "2019-02-24T03:13:43Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "FYI I find this VT sequence resource very handy: https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences",
      "created_at": "2019-02-24T03:14:46Z",
      "updated_at": "2019-02-24T03:14:46Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "I made the matched text red on terminals that support VT sequences and retained the asterisks on terminals that don't support VT sequences.",
      "created_at": "2019-02-24T07:27:39Z",
      "updated_at": "2019-02-24T07:27:39Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@derek-xia can you add a screenshot so everyone can see?",
      "created_at": "2019-02-24T07:49:31Z",
      "updated_at": "2019-02-24T07:49:31Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "<img width=\"1083\" alt=\"screen shot 2019-02-24 at 2 00 20 am\" src=\"https://user-images.githubusercontent.com/17694694/53296716-03ef7880-37d8-11e9-97a5-3e80d177cb52.png\">\r\n\r\nThis is a screenshot of -Emphasize with and without -AllMatch",
      "created_at": "2019-02-24T07:58:52Z",
      "updated_at": "2019-02-24T08:00:59Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Does it highlight capture group like in https://github.com/PowerShell/PowerShell/issues/2905?",
      "created_at": "2019-02-24T19:50:42Z",
      "updated_at": "2019-02-24T19:50:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello mentioned on Twitter that might be worth considering just making this behaviour the default. Perhaps that might be worth doing? If there are concerns with stability / how different conhosts would work with this we can always stick it behind an experimental feature flag. @TylerLeonhardt, what do you think?",
      "created_at": "2019-02-24T22:47:34Z",
      "updated_at": "2019-02-24T22:47:34Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@vexx32, I think @felixfbecker brought up a very good point - this is more of a formatting concern.\r\n\r\nLooking at the formatting code, it seems that formatting `MatchInfo` to be printed to the console is [done here](https://github.com/PowerShell/PowerShell/blob/d80154430d600a52a1d1e3a9f3ecf032b36185d4/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L358-L366). Where it simply runs:\r\n\r\n```powershell\r\n$_.ToString(((get-location).path))\r\n```\r\n\r\nwhere `$_` is the instance of `MatchInfo`\r\n\r\nAll it's doing is calling the `ToString`. Perhaps what would be better is move @derek-xia's logic added to `ToString` to a new public method on `MatchInfo` called `Emphasize` and then the formatting line linked above could just call:\r\n\r\n```powershell\r\n$_.Emphasize(((get-location).path))\r\n```\r\n\r\nDoes that sound alright @vexx32 @felixfbecker?",
      "created_at": "2019-02-24T23:39:46Z",
      "updated_at": "2019-02-24T23:39:46Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Or maybe call it `ToAnsiString()`.  ",
      "created_at": "2019-02-25T00:40:39Z",
      "updated_at": "2019-02-25T00:40:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Considering that we would like to receive color input for any output type, this should not be in every single cmdlet, it should be out.",
      "created_at": "2019-02-25T05:06:58Z",
      "updated_at": "2019-02-25T05:06:58Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I don't think this change should not be made in Select-String. \r\n\r\nYou can check out this gist that adds coloring of the matchinfo output as a custom format. https://gist.github.com/powercode/4833804efd23045387bd5d5249d76f7b \r\n\r\nThere already exists an issue for improving the formatting of MatchInfo, but this is a bit of \"*nix\" thinking where flags on a command modify the output. Make it a view in the formatting system instead.\r\n\r\n",
      "created_at": "2019-02-25T10:33:48Z",
      "updated_at": "2019-02-25T10:33:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I feel like we're all agreeing here. Just want to summarise:\r\n\r\n- This behaviour should be in the formatter\r\n- Most efficient implementation is probably as @rkeithhill suggests with a `ToAnsiString()` method on `MatchInfo` objects. Possibly `ToEmphasizedString()` if we want that to return something still useful on a platform that does not support ANSI/VT control codes (like emphasis characters around the match).\r\n- Given that it would be in the formatter, we could have it on by default (can changing formatting be a breaking change?)\r\n\r\nMy only question is: should there be a switch for this on the cmdlet?",
      "created_at": "2019-02-25T18:47:40Z",
      "updated_at": "2019-02-25T18:47:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If I recall correctly, changes to formatting are not considered \"breaking.\"\r\n\r\nEmphasis _characters_ are kind of hard to argue for, really. There's no guarantee such characters won't already be somewhere in or around the matched string, unfortunately. Might still be worth doing, I suppose, but honestly I feel simply omitting the formatting where it's not supported is likely to be most effective.\r\n\r\nI don't think there need be a switch for it. Maybe define one formatview for emphasized and one for non-emphasized?",
      "created_at": "2019-02-25T19:03:17Z",
      "updated_at": "2019-02-25T19:03:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I like the coloring but I am not a fan of turning PowerShell into an artist. We do not embed a code formatter, but simply publish AST API. The same with coloring. Perhaps it is not formatting system api but conhost api.\r\nTurn on/off:\r\n```powershell\r\n$PSColoring = $true # Globally\r\nGet-Date | Format-List -Coloring # Locally\r\n```",
      "created_at": "2019-02-25T19:55:33Z",
      "updated_at": "2019-02-25T19:55:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I agree with you in principle, but I think this kind of match emphasis brings PowerShell up to speed with `grep` in stakes that PowerShell is usually better at: interactive experience.\r\n\r\nIf we can get this into the formatter, then we can remove or refactor it later with no obligation not to break things.\r\n\r\nSo making the suggested change in the immediate gets us what we want, without committing us to anything down the road (except a public API on `MatchInfo` that we shouldn't guarantee dependable behaviour on).\r\n\r\nThe kind of change you're talking about will require committee approval and would be a whole heap of work. It's wanted, but we can have something small in the meantime too.",
      "created_at": "2019-02-25T19:58:36Z",
      "updated_at": "2019-02-25T19:59:21Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> ```powershell\r\n> $PSColoring = $true # Globally\r\n> Get-Date | Format-List -Coloring # Locally\r\n> ```\r\n\r\nMaybe worth writing up an RFC for this?",
      "created_at": "2019-02-25T20:00:01Z",
      "updated_at": "2019-02-25T20:00:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> we can have something small in the meantime too.\r\n\r\nWe already have the \"small\" - it is Jason's PSMore. Implementing vNext formatting system based on classes simplify adding new feature such as coloring (new interface?). So I think right way is implementing PSMore project first. (Before Coloring RFC)",
      "created_at": "2019-02-25T20:07:11Z",
      "updated_at": "2019-02-26T05:08:25Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Advanced output formatting is and has always been part of PowerShell - if your shell is object based, and you also want to provide a strong interactive experience, you need a good formatting system, that supports tables, nested data, grouping, truncation, and coloring too. But all of this is separate from the data and API. It shouldn't be exposed in a parameter switch, nor in the returned strings.\r\n\r\nI like the idea of respecting the user's choice regarding not wanting color output. However I feel like PowerShell has the opportunity here to handle that on a shell level? E.g. it could define a well-known global variable `$PSEnableColors` that if set to `$false`, will make PowerShell trim all color escape sequences from formatting output, so that not each cmdlet has to deal with it on their own.",
      "created_at": "2019-02-25T21:08:07Z",
      "updated_at": "2019-02-25T21:08:07Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@iSazonov... Do you mean https://github.com/lzybkr/PSMore\r\n\r\nNot sure what the status is on that project... (cc @lzybkr)\r\n\r\n\r\nI want to also remind everyone here that some folks that submit PRs do not know everything about PowerShell and we should treat that as a learning experience to teach folks about PowerShell-specific concepts.",
      "created_at": "2019-02-25T21:30:01Z",
      "updated_at": "2019-02-25T21:30:01Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think the jury is still out on how do handle colors. I have started on an implementation for better coloring of select-string, but deferred it until we know what to do with colors. That opens up a can of worms, with theming etc. (which may be very important for the color-blind).",
      "created_at": "2019-02-25T21:43:13Z",
      "updated_at": "2019-02-25T21:43:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If we assign a default \"emphasis\" color or two from the default console colors, they can theme it themselves?",
      "created_at": "2019-02-25T21:50:19Z",
      "updated_at": "2019-02-25T21:50:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt Yes, PSMore. You can find more information in #7857 and referenced there issues. I think it has great potential but it costs a lot to start.",
      "created_at": "2019-02-26T05:12:11Z",
      "updated_at": "2019-02-26T05:12:11Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Don't want to lose this awesome feature to stalebot - I think this discussion has given us direction:\r\n\r\n1. we should \"solve\" colors in Formatting all up... This is a substantial change that we expect to see with adoption of PSMore eventually or by some other contribution to PowerShell... however that's out of scope for this PR\r\n2. @derek-xia can still move the changes he made to `MatchInfo.ToString()` to a new function called `ToEmphasizedString()` (or similar) and then [change the formatting](https://github.com/PowerShell/PowerShell/blob/d80154430d600a52a1d1e3a9f3ecf032b36185d4/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L358-L366) for `MatchInfo` to use that method instead of `ToString`",
      "created_at": "2019-03-05T12:51:42Z",
      "updated_at": "2019-03-05T12:51:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't think it's worth doing anything other than PSMore. ",
      "created_at": "2019-03-05T14:29:14Z",
      "updated_at": "2019-03-05T14:29:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Even with PSMore, surely `MatchInfo` would need some kind of underlying API to call upon for PSMore to figure out where to apply colors?\r\n\r\nAnd given that PSMore at least on the surface of what we can see appears to be a fairly low-priority project for the PS Team, I think there is some value in improving the base formatting subsystem where we can in small ways while we wait for PSMore to be more thoroughly fleshed out. \ud83d\ude42 ",
      "created_at": "2019-03-05T14:48:39Z",
      "updated_at": "2019-03-05T14:48:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Current FS is very power but not designed for coloring, paging and so on.\r\nI believe any attempts to stick them in FS only add complexity and confusion.\r\nPSMore idea is just to add new capabilities and features without changing source types and objects.",
      "created_at": "2019-03-05T15:54:46Z",
      "updated_at": "2019-03-05T15:54:46Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "There is nothing lacking in the formatting system that would prevent this feature and therefor this feature should not be blocked on PSMore.",
      "created_at": "2019-03-05T15:57:54Z",
      "updated_at": "2019-03-05T15:57:54Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I haven't touched any of my side projects for 2+ months, let alone PSMore. My day job is very far removed from PowerShell, so unless somebody picks up my ideas from PSMore - I'd discourage waiting on me.",
      "created_at": "2019-03-05T18:22:55Z",
      "updated_at": "2019-03-05T18:22:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Can we move the PSMore project to public under PowerShell org?\r\n/cc @SteveL-MSFT ",
      "created_at": "2019-03-06T15:28:42Z",
      "updated_at": "2019-03-06T15:28:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I would be fine moving PSMore to PowerShell org, but it's up to @lzybkr.  Also keep in mind I currently don't have any resources to apply to that project.",
      "created_at": "2019-03-06T18:44:44Z",
      "updated_at": "2019-03-06T18:44:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I remember about limited resources. I believe, in any case, we need platforms/repos for an alpha code that can fire in a year or two.",
      "created_at": "2019-03-06T18:55:00Z",
      "updated_at": "2019-03-06T18:55:00Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@derek-xia consider [what I said above](https://github.com/PowerShell/PowerShell/pull/8963#issuecomment-469668360) as the current plan for this PR... if you're still interested in finishing up the contribution!",
      "created_at": "2019-03-08T00:11:27Z",
      "updated_at": "2019-03-08T00:11:27Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the comments, I'm definitely still interested in finishing up the contribution! I'll work on it sometime today or tomorrow.",
      "created_at": "2019-03-08T00:45:29Z",
      "updated_at": "2019-03-08T00:45:29Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Hard coding colors in the only formatter can't be our solution. Pwsh is used with different backgrounds etc, so we need a better solution. I argue for solving this with scripts until we have a more solid solution for colors. Some support for themed colors would be really useful. ",
      "created_at": "2019-03-09T20:15:08Z",
      "updated_at": "2019-03-09T20:15:08Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode so is `grep`, and it colors its output. This shouldn't be a reason why we can't add nice features.",
      "created_at": "2019-03-09T21:12:03Z",
      "updated_at": "2019-03-09T21:12:03Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think we should try to solve the underlying problem.",
      "created_at": "2019-03-10T06:45:10Z",
      "updated_at": "2019-03-10T06:45:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hard coding colours can be the immediate solution, to be updated when we figure out theming. \r\n\r\nTheming is tricky business, although perhaps @jaykul would be interested in offering some pointers from his Pansies module and Powerline.",
      "created_at": "2019-03-10T17:44:02Z",
      "updated_at": "2019-03-10T17:44:02Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I've poked him before :) Time to do it again, right @Jaykul? :)",
      "created_at": "2019-03-10T22:19:31Z",
      "updated_at": "2019-03-10T22:19:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I'm also concerned that hard coding the emphasizing color in the default view might cause that default view not usable for a user who changes the console background color.\r\nI know formatting change is not consider a breaking change, but only if it doesn't affect usability.\r\n\r\nIIRC, the formatting system will use the first view definition for a type as its default view, and there is no way to change the default unless you override the default view with another formatting definition.\r\nSo, for users that use a different background color, they might have to create a `ps1xml` file to override the default, which is very unfriendly in my opinion.\r\n",
      "created_at": "2019-03-10T23:41:07Z",
      "updated_at": "2019-03-10T23:41:07Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@daxian-dbw or they do:\r\n\r\n```\r\nSelect-String | % ToString\r\n```\r\n\r\nto get rid of the emphasis.\r\n\r\n\r\n\r\nOne of the things mentioned above by @vexx32  was using a preexisting console color like:\r\n\r\n```\r\n$host.PrivateData.WarningForegroundColor\r\n```\r\n\r\nThen that way, if the user happens to change the color for readability purposes then that changes with it.",
      "created_at": "2019-03-11T00:29:06Z",
      "updated_at": "2019-03-11T00:29:57Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Just to remind what this looks like\r\n\r\n![image](https://user-images.githubusercontent.com/2644648/54093933-2518a300-435a-11e9-98d3-acfbdf2149e5.png)\r\n",
      "created_at": "2019-03-11T00:33:00Z",
      "updated_at": "2019-03-11T00:33:36Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I just thought of something... instead of color... how about the ANSI escape sequence for _underline_?\r\n\r\n![image](https://user-images.githubusercontent.com/2644648/54094725-32d12700-4360-11e9-9fd3-45498287ab59.png)\r\n\r\nIt doesn't go down the rabbit hole of color, but it still stands out.",
      "created_at": "2019-03-11T01:16:40Z",
      "updated_at": "2019-03-11T01:16:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Are there any console / terminal compat issues with underline across different console implementations? I wouldn't expect there should be, but I don't see it used much, so I suppose it should be asked. \ud83d\ude04 ",
      "created_at": "2019-03-11T01:20:26Z",
      "updated_at": "2019-03-11T01:20:44Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I initially thought about blink \r\n```powershell\r\n\"`e[5mhello world`e[0m\" \r\n```\r\n* note the 5 instead of 4\r\n\r\nbut that seems to only be supported in Terminal.app on macOS (instead of iTerm which is what I use). Case by case but at least there's no color concerns.",
      "created_at": "2019-03-11T01:24:03Z",
      "updated_at": "2019-03-11T01:24:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TylerLeonhardt Thanks, missed that comment. Thanks @vexx32, I didn't know it previously :)\r\n\r\n~Then we probably have a better solution -- to make the color we use change automatically based on the `Console.BackgroundColor`.\r\nWe could have a switch to map the `ConsoleColor` members (background color) to the escape sequences to use every time `ToEmphasizedString` is invoked. So the emphasize color can change appropriately when the background color is changed.~\r\n\r\nShot, just realized `Console.BackgroundColor` doesn't change when editing the `Red, Green, Blue` values directly. I thought it would be changed to an enum member that is most close to the real color in use ...",
      "created_at": "2019-03-11T01:29:18Z",
      "updated_at": "2019-03-11T02:01:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "At first glance, I might think perhaps a dictionary would be a more extensible solution looking forwards... but I don't really know how that might pan out. \ud83d\ude04 \r\n\r\n@daxian-dbw I think one of the main issues there is going to be that `Console.BackgroundColor` only ever returns a color _name_, and the actual _values_ of the color are arbitrary based on the user's console color settings in the Properties UI (at least in Windows, anyway).\r\n\r\nI think defining one of the other allowable console colors as the \"emphasis\" color is a more sensible solution, as it allows users to customize what that color actually is, rather than us attempting to guess with incomplete information. To really get at that information, on Windows you have to read the registry keys and determine what the actual value of the colors being used are. I don't know what would be involved on Linux, or if those are even configurable in the same way.",
      "created_at": "2019-03-11T01:33:16Z",
      "updated_at": "2019-03-11T01:53:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 Agreed. It looks using the escape sequence of the color from `$host.PrivateData.WarningForegroundColor` might be the best temporary solution before we have a more universal and extensible way of doing this in the formatting system.\r\n\r\nBTW, I think `Yellow` (default warning fore color) as the default for emphasizing is pretty eye-catching too :)",
      "created_at": "2019-03-11T02:36:15Z",
      "updated_at": "2019-03-11T02:36:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "To summarize, I think the proposal is to have a public method in `MatchInfo` type as in below (no other changes in `Select-String`):\r\n```\r\npublic string ToEmphasizedString(string directory, ConsoleColor? emphasizingColor)\r\n{\r\n    if (emphasizingColor == null)\r\n    {\r\n        return ToString(directory);\r\n    }\r\n\r\n    string open, close;\r\n    switch (emphasizingColor.Value)\r\n    {\r\n        // Map every member to the corresponding escape sequences\r\n        case ConsoleColor.Black:\r\n            open = \"\\u001b[30m\";\r\n            close = \"\\u001b[0m\";\r\n            break;\r\n        case ConsoleColor.DarkBlue:\r\n             ...\r\n    }\r\n\r\n    // Actual logic of the method starts\r\n    ...\r\n}\r\n```\r\nIn the format definition, do this:\r\n```\r\n.AddScriptBlockExpressionBinding(@\"\r\n    $path =(Get-Location).Path\r\n    $color = $Host.PrivateData.ErrorForegroundColor -as [System.ConsoleColor]\r\n    $_.ToEmphasizedString($path, $color)\")\r\n```\r\n\r\n@vexx32 @derek-xia Please take a look to see if there is any flaws.",
      "created_at": "2019-03-11T22:46:57Z",
      "updated_at": "2019-03-12T17:33:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw that looks pretty solid! I guess the only potential pitfalls there is that (on Windows, at least) console colours aren't a fixed colour value. Do those escape sequences refer to specific _console_ colours or are they fixed RGB values?",
      "created_at": "2019-03-11T23:15:55Z",
      "updated_at": "2019-03-11T23:15:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Do those escape sequences refer to specific console colours or are they fixed RGB values\r\n\r\nNot sure if I understand you question correctly. In windows, we can see the fixed RGB values for each of the members of `ConsoleColor` in the console 'Property'->'Colors' (from left to right: Black, DarkBlue, DarkGreen ... Yellow, White). Can't we get the escape sequences based on those RGB values?\r\n\r\n![image](https://user-images.githubusercontent.com/127450/54165338-7e95d600-441d-11e9-9ac6-ea7a748ec097.png)\r\n",
      "created_at": "2019-03-11T23:50:24Z",
      "updated_at": "2019-03-12T00:41:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yes, that's kind of what I was asking. I haven't seen a way to get at the RGB values. As long as we can use those we should be good.",
      "created_at": "2019-03-12T00:33:28Z",
      "updated_at": "2019-03-12T00:33:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There is an API on Windows to get the RGB values of the 16 console colors, see [here](https://github.com/lzybkr/PSReadLine/blob/a878b3686cba23ad39fcd98a6b418c9db0bb77ab/PSReadLine/ScreenCapture.cs#L245).\r\n\r\nBased on [these docs](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html), it looks like you could use `ESC 4 ; <c> ; ? BEL` (replacing <c> with the color entry you want) - but this sequence doesn't seem to work on Windows.",
      "created_at": "2019-03-12T01:38:36Z",
      "updated_at": "2019-03-12T01:38:36Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw In my opinion, you *should not* use $Host.PrivateData (or you should have a fallback option). Those colors only exist in the default host, and you're not actually warning, anyway.\r\n\r\nPersonally, I would vote for adding a `$PSColors` dictionary preference variable (which we will eventually add more things to, I have a list) with `EmphasisColors` as an array of ConsoleColor names. If you only take _one_ emphasis color, you're going to be loosing functionality by comparison to [the formatting example](https://gist.github.com/powercode/4833804efd23045387bd5d5249d76f7b) linked in [@powercode's comment](#issuecomment-466960651).\r\n\r\n@lzybkr the [OSC 4 query stuff is not implemented in Windows yet](https://github.com/Microsoft/console/issues/317), and it's also not implemented in lots of other terminals. I don't think that would be safe to use -- but honestly @vexx32 there's no reason to use full RGB escape sequences. \r\n\r\nConsoleColor should be fine until such time as we add a RGB Color class _throughout_ the shell.\r\n\r\n\r\n",
      "created_at": "2019-03-12T02:30:41Z",
      "updated_at": "2019-03-12T02:30:41Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I've just discovered the Negative escape sequence:\r\n\r\n`ESC [ 7 m`\r\n\r\nwhich swaps foreground and background colors.\r\n\r\nmacOS\r\n![image](https://user-images.githubusercontent.com/2644648/54171868-2a005400-4439-11e9-9f30-e08bbd239cc3.png)\r\n\r\nWindows\r\n![image](https://user-images.githubusercontent.com/2644648/54171882-3a183380-4439-11e9-9e6f-c13b30ec5400.png)\r\n\r\nIf we go with this, there's no color to deal with, it seems to be supported in `conhost.exe`, and it stands out.\r\n\r\nThen once we have a solid color foundation in Formatting or whereever, we can switch it over to using that mechanism.\r\n\r\nThoughts?",
      "created_at": "2019-03-12T03:08:38Z",
      "updated_at": "2019-03-12T03:08:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I still wonder why we change a code if coloring must be in formatting system as @powercode mentioned above https://github.com/PowerShell/PowerShell/pull/8963#issuecomment-466960651",
      "created_at": "2019-03-12T05:16:10Z",
      "updated_at": "2019-03-12T05:16:10Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Will this method be a part of the public API?\r\n\r\nOr can it be removed when we come up with better solutions?",
      "created_at": "2019-03-12T07:19:36Z",
      "updated_at": "2019-03-12T07:19:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I still wonder why we change a code if coloring must be in formatting system as @powercode mentioned above #8963 (comment)\r\n\r\n@iSazonov Even after the formatting system is updated to support color configuration, I'm afraid a method like this will still be needed just like how the method `ToString(string directory)` is needed today for the formatting of `MatchInfo` object. But it would be must more intuitive to configure the emphasizing color.\r\n\r\n> Will this method be a part of the public API? Or can it be removed when we come up with better solutions?\r\n\r\n@powercode It will be easier to use in the formatting script if we make it public. We can add the `ObsoleteAttribute` to the method when it's time to remove it.\r\nOr, if we want no leftover at all, we can make that method internal, and call it using reflection in the formatting script. Then nothing is public and can be removed/changed at anytime.\r\n\r\n---------------------------------------\r\n\r\nWe all agree that the ultimate solution should be done in the formatting system -- make it support color formatting in a uniform and extensible way.\r\nWhat was proposed in https://github.com/PowerShell/PowerShell/pull/8963#issuecomment-471770352 is to have a **temporary solution** to colorize the matching text produced from `Select-String`. It's by no means the long-term thing, but may be good to have to make this particular interactive experience just work for most PowerShell users.\r\n\r\nThis PR is put in the `6.2.0-GA-Consider` milestone. If we can agree on a temp solution that is low risk and easy to revert in future, then we can take it to the 6.2.0 GA. If not, I'm fine that we continue to override the default view with custom formatting provided by @lzybkr and @powercode before a long-term solution is done in the formatting system.",
      "created_at": "2019-03-12T19:15:38Z",
      "updated_at": "2019-03-12T19:15:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see this idea with coloring of Select-String output very desirable. In this case, I would still choose the path with the script and overriding the default view as a temporary solution.",
      "created_at": "2019-03-13T04:49:52Z",
      "updated_at": "2019-03-13T04:49:52Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Either negative or underline would work well, I think. I mean, it's not as cool as the color-per-group thing, but they should be readable regardless of people's actual colors, without borrowing the WarningColor from PrivateData.",
      "created_at": "2019-03-13T05:18:59Z",
      "updated_at": "2019-03-13T05:18:59Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-26T17:01:50Z",
      "updated_at": "2019-04-26T17:01:50Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@derek-xia still interested in getting this in? Based on the feedback, we should change the escape character to the Negative escape sequence.",
      "created_at": "2019-04-26T19:44:51Z",
      "updated_at": "2019-04-26T19:44:51Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "I changed the escape character to the negative escape sequence. Here's what it looks like on terminals with light and dark backgrounds.\r\n<img width=\"846\" alt=\"powershellwhite\" src=\"https://user-images.githubusercontent.com/17694694/57007131-db0aab80-6bab-11e9-910e-750802d9faac.png\">\r\n<img width=\"809\" alt=\"powershellgreen\" src=\"https://user-images.githubusercontent.com/17694694/57007134-e958c780-6bab-11e9-9c71-9edf6b7b4128.png\">\r\nI also removed the asterisks that would previously surround the selected text on terminals that don't support virtual terminal escape sequences. I can see why they would be confusing, unless there's a better character to use.",
      "created_at": "2019-05-01T06:13:49Z",
      "updated_at": "2019-05-01T06:14:22Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Looks good to me",
      "created_at": "2019-05-02T06:05:13Z",
      "updated_at": "2019-05-02T06:05:13Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "We will need to rebase this PR (this means we want to update your branch with everything that's changed in master since you originally sent the PR). @derek-xia can you go ahead and do that?\r\n\r\nThis seems like a good guide:\r\nhttps://github.com/servo/servo/wiki/Beginner's-guide-to-rebasing-and-squashing",
      "created_at": "2019-05-03T17:08:27Z",
      "updated_at": "2019-05-03T17:09:41Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "I finished rebasing the PR. Should I squash the commits as well?",
      "created_at": "2019-05-13T04:30:42Z",
      "updated_at": "2019-05-13T04:30:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I finished rebasing the PR. Should I squash the commits as well?\r\n\r\nNo need for that -- the commits are squashed on merge",
      "created_at": "2019-05-13T16:12:10Z",
      "updated_at": "2019-05-13T16:12:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Did we ever get a clear decision as to the necessity of the `-Emphasize` parameter in the cmdlet @TylerLeonhardt?\r\n\r\nFormatting changes rarely require new parameters, and while I see a lot of discussion it doesn't seem to have gone anywhere. If anything, I'd be looking at `-NoEmphasis` being the new parameter (with the default being to show emphasis). We've gotten past the colour-accessibility concerns by using the inverted terminal sequence rather than a specific color, so is there still any reason this shouldn't be default behaviour?",
      "created_at": "2019-08-08T12:52:20Z",
      "updated_at": "2019-08-08T12:52:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 we'll discuss it in the next @PowerShell/powershell-committee meeting.  I tend to agree with you on this one.",
      "created_at": "2019-08-10T02:40:51Z",
      "updated_at": "2019-08-10T02:40:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT If your team will discuss the cmdlet please look my RFC - I want to continue and make the cmdlet more fast and more power.",
      "created_at": "2019-08-10T17:37:45Z",
      "updated_at": "2019-08-10T17:38:09Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I think we reviewed that one on Monday, and I hadn't even seen your comment! :) \r\n\r\nAnd yeah, I'm leaning hard towards the `-NoEmphasis` parameter. As @rjmholt said way above, this is basically table stakes for `grep`, and as a formatting change it's not breaking. I get that some people are text purists, but this is crazy helpful to most people (myself included), and I don't think it's particularly jarring. ",
      "created_at": "2019-08-14T20:28:01Z",
      "updated_at": "2019-08-14T20:28:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We agree that emphasis should be default and there should be a `-NoEmphasis` switch.  There is some concern about the tests not being complete for TERMs that don't support VT100 escape codes, but agree this is out of scope for this PR and a general issue we should discuss in the future.",
      "created_at": "2019-08-14T22:21:28Z",
      "updated_at": "2019-08-14T22:21:28Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@derek-xia do you feel comfortable with this change of making your emphasis logic the default behavior and changing the switch to `-NoEmphasis`? ",
      "created_at": "2019-08-15T14:40:02Z",
      "updated_at": "2019-08-15T14:40:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "FYI, we've met with accessibility folks, and the current \"highlighted text\" approach to the emphasis is acceptable. ",
      "created_at": "2019-08-15T21:56:31Z",
      "updated_at": "2019-08-15T21:56:31Z"
    },
    {
      "author": "derek-xia",
      "author_association": "CONTRIBUTOR",
      "body": "@TylerLeonhardt Yeah, I think it makes sense. I'll work on that.",
      "created_at": "2019-08-23T02:06:48Z",
      "updated_at": "2019-08-23T02:06:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like the last issue is that the test needs to be fixed",
      "created_at": "2019-08-29T22:42:34Z",
      "updated_at": "2019-08-29T22:42:34Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "there was a missing brace so I quickly added it :) lets see what CI says but this should be good to go.",
      "created_at": "2019-09-25T16:06:10Z",
      "updated_at": "2019-09-25T16:06:10Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT please rereview",
      "created_at": "2019-09-30T20:44:07Z",
      "updated_at": "2019-09-30T20:44:07Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@derek-xia Thank you for your contribution!",
      "created_at": "2019-10-08T23:11:25Z",
      "updated_at": "2019-10-08T23:11:25Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "AT LAST! Well done @derek-xia \ud83c\udf89",
      "created_at": "2019-10-09T00:40:28Z",
      "updated_at": "2019-10-09T00:40:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:08:09Z",
      "updated_at": "2019-10-23T19:08:09Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I'm just gonna leave this here...\r\n\r\nhttps://twitter.com/fatherjack/status/1199807445037723648?s=19\r\n\r\n\ud83d\ude01\n\n<blockquote><img src=\"https://pbs.twimg.com/profile_images/1573593469/MUG_s_400x400.jpg\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/fatherjack/status/1199807445037723648\">FatherJack \ud83c\udfc1 on Twitter</a></strong></div><div>\u201cCan everyone upgrade to #PowerShell 7 right away please? I have seen the future and it is select-string with match highlighting.\u201d</div></blockquote>",
      "created_at": "2019-11-28T10:36:04Z",
      "updated_at": "2019-11-28T10:36:06Z"
    }
  ],
  "created_at": "2019-02-24T00:51:59Z",
  "number": 8963,
  "state": "closed",
  "title": "Adds emphasis to Select-String default formatter",
  "updated_at": "2019-11-28T10:36:06Z"
}