{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3133",
  "author": "paulbouwer",
  "body": "There is a drive from some within the container community towards a standard label schema for container images.\r\n\r\n> Label Schema Convention DRAFT (1.0.0-rc.1)\r\n> http://label-schema.org/rc1/\r\n> \r\n> Docker Inc. express a preference that container labels should be namespaced. Label Schema is a community project to provide a shared namespace for use by multiple tools, specifically org.label-schema.\r\n>\r\n> By providing a shared and community owned namespace we aim to:\r\n> - Avoid duplication in cases where the same information is needed in multiple labels\r\n> - Encourage the use of labels, both by image creators and by tool builders which might consume them\r\n> - Codify good community practice in a way that is easy to consume and keep up-to-date with\r\n\r\nThere are some blog posts that discuss this:\r\n- [Building agreement around Docker labels](https://puppet.com/blog/building-agreement-around-docker-labels)\r\n- [MicroBadger - helping you manage your containers](http://blog.microscaling.com/2016/06/microbadger-manage-your-containers.html)\r\n- [New for the Image-Conscious Container: Label-Schema.org](https://medium.com/microscaling-systems/new-for-the-image-conscious-container-label-schema-org-78654a270f07#.5nlpzvz0i)\r\n\r\n[MicroBadger](http://microbadger.com) provides tooling around these labels to provide badges and docker image details. See the following examples:\r\n- [MicroBadger - Metadata from image puppet/puppetserver](https://microbadger.com/images/puppet/puppetserver)\r\n- [GitHub - puppetlabs/puppet-in-docker](https://github.com/puppetlabs/puppet-in-docker)\r\n\r\nIn this PR, I've updated all the Dockerfiles to contain the org.label-schema labels. The `docker build` command will now expect two arguments: `BUILD_DATE` and `VCS_REF`.\r\n\r\nRunning the following command:\r\n```\r\n$ docker build --build-arg BUILD_DATE=\"`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`\" --build-arg VCS_REF=\"`git rev-parse HEAD`\" -t \"microsoft/powershell:centos7\" \"centos7\"\r\n```\r\nWill result in:\r\n```\r\n$ docker inspect d3d8d9675474 -f \"{{json .Config.Labels}}\" | jq .\r\n{\r\n  \"build-date\": \"20161214\",\r\n  \"license\": \"GPLv2\",\r\n  \"maintainer\": \"Andrew Schwartzmeyer <andschwa@microsoft.com>\",\r\n  \"name\": \"CentOS Base Image\",\r\n  \"org.label-schema.build-date\": \"2017-02-11T02:55:17Z\",\r\n  \"org.label-schema.description\": \"PowerShell is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with existing tools and is optimized for dealing with structured data, REST APIs, and object models. It includes a command-line shell, an associated scripting language and a framework for processing cmdlets.\",\r\n  \"org.label-schema.docker.cmd\": \"docker run -it microsoft/powershell:centos7\",\r\n  \"org.label-schema.license\": \"MIT\",\r\n  \"org.label-schema.name\": \"PowerShell\",\r\n  \"org.label-schema.schema-version\": \"1.0\",\r\n  \"org.label-schema.url\": \"https://microsoft.com/powershell\",\r\n  \"org.label-schema.usage\": \"https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell\",\r\n  \"org.label-schema.vcs-ref\": \"39c44b4\",\r\n  \"org.label-schema.vcs-type\": \"Git\",\r\n  \"org.label-schema.vcs-url\": \"https://github.com/PowerShell/PowerShell.git\",\r\n  \"org.label-schema.vendor\": \"Microsoft\",\r\n  \"org.label-schema.version\": \"6.0.0-alpha.15\",\r\n  \"vendor\": \"CentOS\"\r\n}\r\n```\r\nThe non \"org.label-schema\" labels have been pulled through from the base CentOS image. I used this additive label mechanism to only include the labels in the nightly Dockerfiles that may be different from the release container image that they are based on. This should reduce overhead of editing these labels.\r\n\r\nAll of the containers may be built using the existing `launch.sh` method by including the `BUILDARGS` environment variable as follows:\r\n```\r\nBUILDS=release DISTROS=centos7 BUILDARGS=\"--build-arg BUILD_DATE=\\\"`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`\\\" --build-arg VCS_REF=\\\"`git rev-parse HEAD`\\\"\" ./launch.sh\r\n```",
  "closed_at": "2017-12-15T23:51:27Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi __@paulbouwer__, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\r\n    <p>\r\n        It looks like you're a Microsoft contributor (Paul Bouwer). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\r\n    </p>\r\n\r\nTTYL, MSBOT;\r\n",
      "created_at": "2017-02-12T02:34:19Z",
      "updated_at": "2017-02-12T02:34:19Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "LGTM, I'm all for standardization.\r\n\r\nJust out of curiosity, is there some alternative standard we're eschewing in favor of this one? ",
      "created_at": "2017-02-13T18:31:29Z",
      "updated_at": "2017-02-13T18:31:29Z"
    },
    {
      "author": "paulbouwer",
      "author_association": "NONE",
      "body": "The Label-Schema draft references [Standard Container/Application Identifiers](https://github.com/projectatomic/ContainerApplicationGenericLabels) from Project Atomic, but these labels don't seem to have as much traction or tooling around them.",
      "created_at": "2017-02-13T23:37:31Z",
      "updated_at": "2017-02-13T23:37:31Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@paulbouwer, my apologies, but there were a lot of changes made to the Dockerfiles once the Microsoft package repositories came online (so the packages aren't downloaded from GitHub any more \ud83d\ude04), and that's left your PR with conflicts.\r\n\r\nThat said, I'm also all for standardization, and like the idea of proper labels. Are there any other large projects already implementing this? I'd love to see an example.",
      "created_at": "2017-03-06T19:09:10Z",
      "updated_at": "2017-03-06T19:09:10Z"
    },
    {
      "author": "paulbouwer",
      "author_association": "NONE",
      "body": "@andschwa It seems to be a chicken and egg situation at the moment. The Puppet Server [image](https://microbadger.com/images/puppet/puppetserver) is an example of one using the Label Schema labels. But then Gareth Rushgrove is one of the authors of the Label-Schema draft. I have also seen the Project Atomic labels on the CentOs [image](https://microbadger.com/images/centos).\r\n\r\nThere seems to be interest (around 960 images in MicroBadger), but not many large projects are committing yet.",
      "created_at": "2017-03-07T00:14:12Z",
      "updated_at": "2017-03-07T00:14:12Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The files have already been updated or deleted.  Thanks, sorry I didn't notice this PR before I did the work.",
      "created_at": "2017-12-15T23:51:27Z",
      "updated_at": "2017-12-15T23:51:27Z"
    }
  ],
  "created_at": "2017-02-12T02:34:14Z",
  "number": 3133,
  "state": "closed",
  "title": "Adding Dockerfile labels from label-schema.org",
  "updated_at": "2017-12-15T23:51:27Z"
}