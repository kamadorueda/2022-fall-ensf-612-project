{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6676",
  "author": "jwittner",
  "body": "I ran into this when attempting to test one of my existing module manifests and was able to reproduce it with the simpler steps below.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n> New-ModuleManifest 'test.psd1' -RootModule 'test'\r\n> Test-ModuleManifest '.\\test.psd1'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nBinary     0.0.1      test\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nTest-ModuleManifest : The module manifest 'test' could not be processed because it is not a valid PowerShell module manifest file. Remove the elements that are not permitted: C:\\Users\\me\\test.psd1\r\nAt line:1 char:1\r\n+ Test-ModuleManifest '.\\test.psd1'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (.\\test.psd1:String) [Test-ModuleManifest], ArgumentException\r\n+ FullyQualifiedErrorId : Modules_InvalidRootModuleInModuleManifest,Microsoft.PowerShell.Commands.TestModuleManifestCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                                                                              \r\n----                           -----                                                                                              \r\nPSVersion                      6.0.2                                                                                              \r\nPSEdition                      Core                                                                                               \r\nGitCommitId                    v6.0.2                                                                                             \r\nOS                             Microsoft Windows 10.0.16299                                                                       \r\nPlatform                       Win32NT                                                                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                                \r\nSerializationVersion           1.1.0.1                                                                                            \r\nWSManStackVersion              3.0                                                                                                \r\n\r\n```\r\n\r\n**Note: This succeeds on Windows PSVersion 5.1.16299.251**",
  "closed_at": "2018-04-19T19:27:45Z",
  "comments": [
    {
      "author": "jwittner",
      "author_association": "NONE",
      "body": "Reviewing the code here: https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/engine/Modules/TestModuleManifestCommand.cs#L136\r\n\r\nIt looks like an extension is required and the file must exist, which would be new requirements for the key. And even if I do specify an extension and ensure the file exists I get the same results. =(",
      "created_at": "2018-04-18T19:35:31Z",
      "updated_at": "2018-04-18T19:35:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The existing catch-all error message is unfortunately really unhelpful.\r\n\r\n~~In addition to the requirements you mention, the two files (`*.psd1` and `*.psm1`) must be located _inside a folder named for their base name_; i.e., in your case, `test`.~~ \r\n\r\n~~Backward compatibility aside: the need for the extension is debatable, but the other requirements make sense, but only, of course, if accompanied by specific error messages.~~\r\n\r\n_Update_: while a check for that would be helpful, it does _not_ currently exist.",
      "created_at": "2018-04-19T13:06:41Z",
      "updated_at": "2018-12-03T22:41:44Z"
    },
    {
      "author": "jwittner",
      "author_association": "NONE",
      "body": "Ok, I'm thinking it was some kind of encoding or new line issue as it was being rather spurious. I've got it working now so I'm moving on and closing this.",
      "created_at": "2018-04-19T19:27:45Z",
      "updated_at": "2018-04-19T19:27:45Z"
    },
    {
      "author": "ronbok",
      "author_association": "NONE",
      "body": "Test-ModuleManifest PowerShell Core 6.1.0 fails on macOS, but succeeds on Windows PowerShell 5.1.  Same issue as above, but worse since the build agents for Azure DevOps throw this error and kill the build.",
      "created_at": "2018-12-03T18:20:52Z",
      "updated_at": "2018-12-03T18:20:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I now see not just a change, but a problem in PS Core, though I don't think it's platform-specific - see #8388\r\n\r\n`Test-ModuleManifest` seems to have other problems that are tracked in #6818, but I don't think they're platform-specific either.\r\n\r\nIf you do think you've found a macOS-specific problem, please open a new issue with a reproducible case.\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-03T22:59:21Z",
      "updated_at": "2018-12-03T22:59:21Z"
    },
    {
      "author": "ronbok",
      "author_association": "NONE",
      "body": "Well after following the workarounds above, I seem to have it working now and the build agent is not complaining anymore.\r\n\r\nI agree that adding the .psm1 file extension to the root module name is a regression from PowerShell 5.0/.1, but doesn't mean its wrong.  I see the Az replacements for AzureRm doing this and its likely a best practice.\r\n\r\nThe main thing that resolved this was creating a folder with the root module name and dumping the .psd1 and .psm1 into that folder or simply placing them there as part of the projects structure (like a Plaster template might do).  Then Test-Manifest seems to be ok with it on PowerShell Core 6.1.0 on Windows.   Still need to test macOS.",
      "created_at": "2018-12-03T23:45:13Z",
      "updated_at": "2018-12-03T23:46:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I agree that adding the .psm1 file extension to the root module name is a regression from PowerShell 5.0/.1, but doesn't mean its wrong. I see the Az replacements for AzureRm doing this and its likely a best practice.\r\n\r\nIt is wrong in that it is an _inconsistency_, given that omitting the extension works just fine when _importing_ the module, so the validation is unnecessarily strict.\r\n\r\nYou could argue that the extension should be _required_ to avoid ambiguity, but changing that for `Import-Module` too would be a breaking change.\r\n\r\nYou could then argue that it's fine to only make the _validation_ stricter while leaving the more lenient actual import behavior in place for backward compatibility - for that, we'd definitely need a specific error message.\r\n\r\nAs for the requirement to have the `*.psd1` files' base name match the name of the enclosing directory: there should be checks for that too - see #8391\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-04T04:09:09Z",
      "updated_at": "2018-12-04T04:09:09Z"
    }
  ],
  "created_at": "2018-04-18T19:14:13Z",
  "number": 6676,
  "state": "closed",
  "title": "Test-ModuleManifest fails on manifest from New-ModuleManifest",
  "updated_at": "2018-12-04T04:09:09Z"
}