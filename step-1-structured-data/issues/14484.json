{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14484",
  "author": "kilasuit",
  "body": "## Summary of the new feature/enhancement\r\nAbility to have a version of the prompt function that can run prior to each command being run in the command line & allow changing of the prompt within it\r\n\r\nThis would allow for example for a series of actions to set items in the prompt and host prior to execution (like when you kicked off a command, particularly any long running command)\r\n\r\n## Proposed technical implementation details (optional)\r\na mirroring of the prompt function but instead runs before the command issued at the terminal is actually run.\r\n\r\n```powershell\r\nfunction preprompt {\r\n    Write-Host \"[\" -NoNewline\r\n    Write-Host (Get-Date -Format \"HH:mm:ss\") -ForegroundColor Gray -NoNewline\r\n    Write-Host \"] [\" -NoNewline\r\n    }\r\n ```\r\nThe above would on each execution update the prompt with the time that the command was executed at\r\nThe same code used in the prompt function below update the prompt with the time that the command was completed at\r\n```powershell\r\nfunction prompt {\r\n    Write-Host \"[\" -NoNewline\r\n    Write-Host (Get-Date -Format \"HH:mm:ss\") -ForegroundColor Gray -NoNewline\r\n    Write-Host \"] [\" -NoNewline\r\n    }\r\n ```\r\n\r\nHaving both is useful for transcriptions/interactive glances/ long running processes & would be a useful improvement to the engine",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If this is primarily about automatic reflecting the execution duration of commands in the prompt string, you can define your `prompt` function as follows:\r\n\r\n```powershell\r\nfunction Prompt {\r\n  # Calculate the previous command's execution duration (time span).\r\n  $durationInfo = if ($he = Get-History -Count 1) {\r\n    # Use a '0.00s' format: duration in *seconds*, with two decimal places.\r\n    ' [{0:N2}s]' -f ($he.EndExecutionTime - $he.StartExecutionTime).TotalSeconds\r\n  }\r\n  # Insert the information into the default prompt string; e.g.:\r\n  #   'PS C:\\foo> ' becomes 'PS C:\\foo [0.23s]> '\r\n  \"PS $($executionContext.SessionState.Path.CurrentLocation)${durationInfo}$('>' * ($nestedPromptLevel + 1)) \"\r\n}\r\n```\r\n",
      "created_at": "2020-12-23T21:33:51Z",
      "updated_at": "2020-12-24T20:09:32Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I already have something similar in my profile, like many others do, but your suggestion **doesn't** address the ask of `When I run a command, I want to be able to rebuild the prompt or set window title of the host or any other required information **prior** to the execution of that command, and not need to wait until **after** the command has completed for the prompt/host window/anything else to issue any updates to these components or to other systems` which adding a `preprompt` functionality into the engine would end up addressing the ask. \r\n\r\nWhilst I can technically get round this by the below, this really would be better built in to the engine and would mitigate needing to pass to this function a scriptblock to run\r\n``` powershell\r\nfunction global:preprompt {\r\n    [CmdletBinding()]\r\n    [alias('pp')]\r\n    param (\r\n        [Parameter()]\r\n        [scriptblock]\r\n        $Scriptblock\r\n    )\r\n    $RunningAction = if ($Scriptblock.ToString().Length -gt 25) {$Scriptblock.ToString().Substring(0,25)} else {$Scriptblock.ToString().Substring(0,($Scriptblock.ToString().Length)) }\r\n    if ($PSVersionTable.PSEdition -match 'Desktop' -or $isWindows) {\r\n        $admin = ((New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))\r\n        if ($admin -eq $true) {\r\n            Write-Host \"[\" -nonewline -foregroundcolor DarkGray ; Write-Host \"Admin\" -nonewline -foregroundcolor Red ; Write-Host \"] \" -nonewline -foregroundcolor DarkGray\r\n            $Host.UI.RawUI.WindowTitle = \"[Admin] \" + $WindowTitle + ' - ' + (Get-Date -Format HH:mm:ss) + ' - ' + $RunningAction\r\n        }\r\n        else {\r\n            $host.UI.RawUI.WindowTitle = $WindowTitle + ' - ' + (Get-Date -Format HH:mm:ss) + ' - ' + $RunningAction\r\n        }\r\n    }\r\n    Write-Host \"[\" -NoNewline ; Write-Host (Get-Date -Format \"HH:mm:ss\") -ForegroundColor Gray -NoNewline ; Write-Host \"] [\" -NoNewline ; Write-Host $RunningAction -NoNewline ; Write-Host \"]\" -NoNewline;  Write-Host ''\r\n    $Scriptblock.Invoke()\r\n}\r\n```\r\n",
      "created_at": "2020-12-24T21:58:06Z",
      "updated_at": "2020-12-24T21:58:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I already have something similar in my profile, like many others do,\r\n\r\nI see, @kilasuit. \r\n\r\nThis is why it's important to make the case for a new feature with an example that _cannot_ be handled with the current capabilities.\r\n\r\nBased on your example - which seems to be primarily about setting the window title - it seems that the proposed `preprompt` function would require access to the command about to be invoked, so I encourage you to flesh out the details of how the function would gain access to that.\r\n\r\nAlso, I invite you to flesh out how the `preprompt` function's output would _print_, given that - by definition, if its output is dependent on the command being submitted - it cannot be printed until _after_ the current prompt string.",
      "created_at": "2020-12-24T22:21:41Z",
      "updated_at": "2020-12-25T09:39:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thinking about this some more:\r\n\r\nSince the prompt by definition has already printed when you submit your command, the desired functionality isn't _prompt_-related as such.\r\n\r\nI wonder if what you're looking for is better implemented as event hooks exposed via `$ExecutionContext.InvokeCommand.*Action` properties, analogous to `$ExecutionContext.InvokeCommand.PreCommandLookupAction` / `$ExecutionContext.InvokeCommand.PostCommandLookupAction`:\r\n\r\nFor instance, `$ExecutionContext.InvokeCommand.PreExecutionAction` and `$ExecutionContext.InvokeCommand.PostExecutionAction`, which could receive the command line being executed as the event argument.\r\n\r\nYou can - awkwardly - emulate this behavior with `$ExecutionContext.InvokeCommand.PostCommandLookupAction` and the `prompt` function; here's an example:\r\n\r\n```powershell\r\n$ExecutionContext.InvokeCommand.PostCommandLookupAction = {\r\n  if ($global:_preExecHandled) { return }\r\n  $cmdLine = $MyInvocation.Line\r\n  if ($args[1].CommandOrigin -ne 'Runspace' -or $cmdLine -match 'PostCommandLookupAction|^prompt$') { return }\r\n  $global:_preExecHandled = $true; $global:_prevTitle = $host.UI.RawUI.WindowTitle\r\n $info = \"Submitting at $(Get-Date): $cmdLine\"\r\n Write-Host -Foreground Yellow $info\r\n $host.UI.RawUI.WindowTitle = $info\r\n}\r\n\r\n$function:prompt = \"$function:prompt; `$global:_preExecHandled = `$false; if (`$global:_prevTitle) { `$host.UI.RawUI.WindowTitle = `$global:_prevTitle }\"\r\n```\r\n\r\nNote: Restoring the window title doesn't work on Unix-like platforms, because you can only _set_ the title there.\r\n\r\n",
      "created_at": "2020-12-25T09:39:15Z",
      "updated_at": "2021-04-19T21:10:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can get there today by doing this:\r\n\r\n```powershell\r\nfunction PSConsoleHostReadLine {\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($Host.Runspace, $ExecutionContext)\r\n\r\n    preprompt | Out-Null\r\n}\r\n```\r\n\r\nThat'll have the same limitations that in-engine support would have. Aside from changing the window title, I'm not sure how this could be used effectively.  A real world example using the technique above would go a long way.",
      "created_at": "2020-12-28T15:04:55Z",
      "updated_at": "2020-12-28T15:04:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's a much simpler workaround, @SeeminglyScience, thanks. In the absence of a dedicated event such as ` $ExecutionContext.InvokeCommand.PreExecutionAction` that should work fine (assuming `PSReadLine` is loaded, which is a reasonable assumption).\r\n\r\nAdapted to a simplified version of @kilasuit's [workaround](https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751104386):\r\n\r\n```powershell\r\nfunction PSConsoleHostReadLine {\r\n \r\n  # Prompt the user for a command line to submit, save it in a variable and\r\n  # pass it through, by enclosing it in (...)\r\n  ($line = [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($Host.Runspace, $ExecutionContext))\r\n\r\n  if ($line.Trim()) { # Only react to non-blank lines.\r\n\r\n    # Synthesize status info.\r\n    $info = \"Launched [$line] at: $(get-date)\"\r\n    \r\n    # Set the window title to the status info...\r\n    $host.UI.RawUI.WindowTitle = $info\r\n\r\n    # ... and print the same information to the host (only) (\"`e[33m\" is yellow).\r\n    # Note: We use Out-Host to strictly print to the host.\r\n    #       Using Write-Host would pollute the information stream (#6).\r\n    $host.UI.SupportsVirtualTerminal ? \"`e[033m$info`e[m\" : $info | Out-Host\r\n\r\n  }\r\n  \r\n}\r\n```\r\n\r\nBy using `Out-Host` rather than `Write-Host` to print the status information, pollution of the output streams is avoided, while still recording it in transcripts.\r\n\r\nIt still amounts to _visual_ pollution, however - though that may be desired.\r\n\r\nExample screenshot (note the window title and the info printed in yellow):\r\n\r\n![image](https://user-images.githubusercontent.com/588825/103229583-5aacc880-4901-11eb-9113-5c9830f253ff.png)\r\n\r\nA way to _lessen_ this pollution would be to offer a way to _redraw the prompt string in place_:\r\nSay you submit `Get-Date` at prompt `PS C:\\>` and just before execution the entire command line is _reprinted in place_ as, e.g., \r\n`PS C:\\ [launched at 12/28/2020 11:31:12]> Get-Date`\r\n\r\n@kilasuit, is that what you had in mind?\r\n\r\nIf so, the question is: is this technically feasible, in a manner that doesn't disrupt transcripts?\r\n\r\n\r\n\r\n",
      "created_at": "2020-12-28T16:39:49Z",
      "updated_at": "2020-12-28T16:49:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> A way to _lessen_ this pollution would be to offer a way to _redraw the prompt string in place_:\r\n> Say you submit `Get-Date` at prompt `PS C:\\>` and just before execution the entire command line is _reprinted in place_ as, e.g.,\r\n> `PS C:\\ [launched at 12/28/2020 11:31:12]> Get-Date`\r\n\r\nThat's not impossible, but that would be a very challenging work item to make consistent.  You'd have to keep track of exactly how much the prompt initially wrote, clear it, re-write it, and then force PSRL to re-render.  Also every custom `PSHost` would have to copy that logic, as `prompt` processing is currently left to the host.  Add in how different terminal emulators process these types of escape sequences a little bit differently and it's hard to imagine this being implemented consistently.\r\n\r\n> If so, the question is: is this technically feasible, in a manner that doesn't disrupt transcripts?\r\n\r\nI think the only feasible option transcript wise would be to just write the re-rendered prompt normally.",
      "created_at": "2020-12-28T19:46:55Z",
      "updated_at": "2020-12-28T19:46:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "See also: #15271, which also contains a more complete change-the-window-title-while-a-command-is-running workaround.",
      "created_at": "2021-04-19T20:58:02Z",
      "updated_at": "2021-04-19T20:58:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The ask is a function to run before an accepted command line gets executed, so change the title to differentiate from #15104, which asks for a way to call custom functions before evaluating the 'Prompt' function.",
      "created_at": "2021-06-26T00:07:46Z",
      "updated_at": "2021-06-26T00:07:46Z"
    }
  ],
  "created_at": "2020-12-23T05:03:33Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 14484,
  "state": "open",
  "title": "Feature Request - \"pre\" execution functionality",
  "updated_at": "2022-02-17T23:46:41Z"
}