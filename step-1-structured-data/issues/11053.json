{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11053",
  "author": "KirkMunro",
  "body": "@iSazonov and @SteveL-MSFT I think we made a mistake by removing the `WorkflowInfo` type in PR #9638. I know PR #6708 changed the type from public to internal, and that was probably a mistake as well.\r\n\r\nI was just testing my FormatPx module in PowerShell 7, since `Out-Printer` is now added back into PowerShell, but the module won't load. It fails with the following error:\r\n\r\n> Import-Module: Could not load type 'System.Management.Automation.WorkflowInfo' from assembly 'System.Management.Automation, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\"\r\n\r\nI get the same error if I try to import DebugPx into PowerShell 7, but DebugPx loads just fine in PowerShell 6.2 (FormatPx does not, because there is no `Out-Printer` command, and it derives its `Out-Printer` proxy from that command).\r\n\r\nBoth DebugPx and FormatPx have binary modules as part of their package.\r\n\r\nI am not referencing `WorkflowInfo` directly from either of those projects, so that error must be coming from the PowerShell components that I do reference.\r\n\r\nTesting this out locally, I have found that if I put an empty `public WorkflowInfo` class back in PowerShell 7 (not derived from anything, with no constructors or members), suddenly my DebugPx module  loads fine again.\r\n\r\nFormatPx loads as well, but doesn't work (null reference exception somewhere), but so I need to figure that one out. That issue aside, it seems we need the `WorkflowInfo` class to persist for backwards compatibility support. Mind if I put it back in a PR?\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nInstall-Module DebugPx\r\nImport-Module DebugPx\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe module should load without error.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nImport-Module: Could not load type 'System.Management.Automation.WorkflowInfo' from assembly 'System.Management.Automation, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\"\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.5-64-ge185f89591ac5fa5286bef60d087d852873df2be\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-03-01T19:04:06Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Any way we can dig deeper and see what's actually referencing the WorkflowInfo class?",
      "created_at": "2019-11-12T21:30:36Z",
      "updated_at": "2019-11-12T21:30:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is PowerShell SDK used? Perhaps the reference is there. ",
      "created_at": "2019-11-13T06:40:22Z",
      "updated_at": "2019-11-13T06:40:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan @daxian-dbw Could you please look the regression?\r\n\r\n@KirkMunro Please add links to your modules in the OP.",
      "created_at": "2019-11-13T06:42:40Z",
      "updated_at": "2019-11-13T06:42:40Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Here is the source code for the binary modules:\r\n\r\n|Module|Source Code|\r\n|--|--|\r\n|DebugPx|https://github.com/KirkMunro/DebugPx/tree/assembly|\r\n|FormatPx|https://github.com/KirkMunro/FormatPx/tree/assembly|\r\n\r\nI recommend looking at DebugPx, because I was able to load that module successfully and use it once I re-added an empty WorkflowInfo class.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/3515485?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/KirkMunro/DebugPx\">KirkMunro/DebugPx</a></strong></div><div>PowerShell Debugging Toolkit (feat. the breakpoint and ifdebug commands) - KirkMunro/DebugPx</div></blockquote>\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/3515485?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/KirkMunro/FormatPx\">KirkMunro/FormatPx</a></strong></div><div>Better Formatting in PowerShell. Contribute to KirkMunro/FormatPx development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-13T13:36:24Z",
      "updated_at": "2019-11-13T13:36:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see a problem in SnippetPX\r\n```powershell\r\nipmo SnippetPx\r\ngcm Invoke-Snippet\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Invoke-Snippet                                     1.0.6.19   SnippetPx\r\n\r\nInvoke-Snippet Module.Initialize\r\n\r\nInvoke-Snippet: Could not load type 'System.Management.Automation.WorkflowInfo' from assembly 'System.Management.Automation, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\r\n",
      "created_at": "2019-11-13T15:34:50Z",
      "updated_at": "2019-11-13T15:34:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I found \"WorkflowInfo\" string in SnippexPX.dll\r\nIs there sources of the dll?",
      "created_at": "2019-11-13T15:41:52Z",
      "updated_at": "2019-11-13T15:44:20Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @iSazonov. I hadn't thought to look at SnippetPx because HistoryPx loads and runs just fine on PowerShell 7, and it also uses SnippetPx as a nested module.\r\n\r\nAnyhow, yes, there is source code for the DLL. I just didn't set it up in GitHub in a very standard way back then -- I had crazy ideas at the time, and put the binary module code in an assembly branch. I wouldn't do it that way now, of course, but anyway, here is the reference to `WorkflowInfo` in that module:\r\n\r\nhttps://github.com/KirkMunro/SnippetPx/blob/assembly/SnippetPx/DiscoverableItemSearcher.cs#L424-L427\r\n\r\nGiven such code exists in my module (and potentially others), we should put an empty public `WorkflowInfo` class back into PowerShell 7, right?\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/3515485?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/KirkMunro/SnippetPx\">KirkMunro/SnippetPx</a></strong></div><div>Invocable Snippet Support in PowerShell. Contribute to KirkMunro/SnippetPx development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-13T17:47:44Z",
      "updated_at": "2019-11-13T17:47:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "#6708 changed the constructors to internal, but left the type to be public, see [code here](https://github.com/PowerShell/PowerShell/pull/6708/files#diff-d9036bbae0b5dfd6b852c130a662cb8c).\r\nIt's not too late to add back the public type `WorkflowInfo`, but the question is: would that be enough? We removed many other things related to workflow, like `CommandTypes.Workflow`, so potentially they will cause existing modules to fail to load too ... Then it leads to another question, can we maybe keep it as is and force those affected modules to be updated?",
      "created_at": "2019-11-13T21:20:24Z",
      "updated_at": "2019-11-15T00:14:02Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Speaking for my own modules that are affected by this, I can confirm that adding an empty `WorkflowInfo` class that doesn't derive from anything resolves my issues. Many other areas of workflow that were originally removed were put back and marked as deprecated instead for this reason. I think we may need to backpedal a bit here.",
      "created_at": "2019-11-13T23:05:59Z",
      "updated_at": "2019-11-13T23:05:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Can you check that adding back the class with _obsolete_ attribute works for you? ",
      "created_at": "2019-11-14T03:05:22Z",
      "updated_at": "2019-11-14T03:05:35Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Yes, it works fine for me. I just created PR #11069 in case you guys agree that it should be added back.",
      "created_at": "2019-11-14T03:19:41Z",
      "updated_at": "2019-11-14T03:19:41Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "based on commentary in https://github.com/PowerShell/PowerShell/pull/11069 the WG is closing this as won't fix",
      "created_at": "2021-03-01T19:04:05Z",
      "updated_at": "2021-03-01T19:04:05Z"
    }
  ],
  "created_at": "2019-11-12T21:11:15Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Won't Fix",
    "Area-Maintainers-Build",
    "WG-DevEx-SDK"
  ],
  "number": 11053,
  "state": "closed",
  "title": "Binary modules that worked in PowerShell 6 may not work in 7",
  "updated_at": "2021-03-01T19:04:06Z"
}