{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16731",
  "author": "superbonaci",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nRun this script in PowerShell 7.2.1:\r\nhttps://superuser.com/a/1293303/298707\r\n\r\n````\r\n[CmdletBinding()] Param (\r\n    [Parameter(Mandatory=$true)][ValidateSet('Off', 'On')][string]$BluetoothStatus\r\n)\r\nIf ((Get-Service bthserv).Status -eq 'Stopped') { Start-Service bthserv }\r\nAdd-Type -AssemblyName System.Runtime.WindowsRuntime\r\n$asTaskGeneric = ([System.WindowsRuntimeSystemExtensions].GetMethods() | ? { $_.Name -eq 'AsTask' -and $_.GetParameters().Count -eq 1 -and $_.GetParameters()[0].ParameterType.Name -eq 'IAsyncOperation`1' })[0]\r\nFunction Await($WinRtTask, $ResultType) {\r\n    $asTask = $asTaskGeneric.MakeGenericMethod($ResultType)\r\n    $netTask = $asTask.Invoke($null, @($WinRtTask))\r\n    $netTask.Wait(-1) | Out-Null\r\n    $netTask.Result\r\n}\r\n[Windows.Devices.Radios.Radio,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null\r\n[Windows.Devices.Radios.RadioAccessStatus,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null\r\nAwait ([Windows.Devices.Radios.Radio]::RequestAccessAsync()) ([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null\r\n$radios = Await ([Windows.Devices.Radios.Radio]::GetRadiosAsync()) ([System.Collections.Generic.IReadOnlyList[Windows.Devices.Radios.Radio]])\r\n$bluetooth = $radios | ? { $_.Kind -eq 'Bluetooth' }\r\n[Windows.Devices.Radios.RadioState,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null\r\nAwait ($bluetooth.SetStateAsync($BluetoothStatus)) ([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null\r\n````\r\n\r\nWith either option `.\\bluetooth.ps1 -BluetoothStatus On` or `.\\bluetooth.ps1 -BluetoothStatus Off`.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nRun like in older PowerShell versions.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nDoes not work.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nGet-Error\r\n\r\nException             :\r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : You cannot call a method on a null-valued expression.\r\n            HResult : -2146233087\r\n        CategoryInfo          : InvalidOperation: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : InvokeMethodOnNull\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 19\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            ScriptName       : C:\\bin\\bluetooth.ps1\r\n            Line             : Await ($bluetooth.SetStateAsync($BluetoothStatus))\r\n([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null\r\n\r\n            PositionMessage  : At C:\\bin\\bluetooth.ps1:19 char:1\r\n                               + Await ($bluetooth.SetStateAsync($BluetoothStatus))\r\n([Windows.Devices. \u2026\r\n                               +\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            PSScriptRoot     : C:\\bin\r\n            PSCommandPath    : C:\\bin\\bluetooth.ps1\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, C:\\bin\\bluetooth.ps1: line 19\r\n                                at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : System.Object CallSite.Target(System.Runtime.CompilerServices.Closure,\r\nSystem.Runtime.CompilerServices.CallSite, System.Object, System.Object)\r\n    Message     : You cannot call a method on a null-valued expression.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : Anonymously Hosted DynamicMethods Assembly\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at CallSite.Target(Closure , CallSite , Object , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame\r\nframe)\r\nCategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\nFullyQualifiedErrorId : InvokeMethodOnNull\r\nInvocationInfo        :\r\n    ScriptLineNumber : 19\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    ScriptName       : C:\\bin\\bluetooth.ps1\r\n    Line             : Await ($bluetooth.SetStateAsync($BluetoothStatus))\r\n([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null\r\n\r\n    PositionMessage  : At C:\\bin\\bluetooth.ps1:19 char:1\r\n                       + Await ($bluetooth.SetStateAsync($BluetoothStatus)) ([Windows.Devices. \u2026\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    PSScriptRoot     : C:\\bin\r\n    PSCommandPath    : C:\\bin\\bluetooth.ps1\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, C:\\bin\\bluetooth.ps1: line 19\r\n                        at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-01-13T05:00:41Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This \r\n```\r\n>  Add-Type -AssemblyName System.Runtime.WindowsRuntime\r\n> $asTaskGeneric = ([System.WindowsRuntimeSystemExtensions].GetMethods() | ? { $_.Name -eq 'AsTask' -and $_.GetParameters().Count -eq 1 -and $_.GetParameters()[0].ParameterType.Name -eq 'IAsyncOperation`1' })[0]\r\n\r\nMethodInvocationException: Exception calling \"GetParameters\" with \"0\" argument(s): \"Operation is not supported on this \r\nplatform. (0x80131539)\"\r\n```\r\n\r\nsuggests you've cut and pasted something tied to .NET Framework 4 into the .NET 6. version of PowerShell. \r\n\r\nIt simplifies to \r\n```\r\n> $asTaskMethods = [System.WindowsRuntimeSystemExtensions].GetMethods()  | where-object name -eq 'AsTask'                                                                                                         > $asTaskMethods[0].GetParameters()\r\nMethodInvocationException: Exception calling \"GetParameters\" with \"0\" argument(s): \"Operation is not supported on this platform. (0x80131539)\"\r\n``` \r\n\r\nAnd the equivalent in C# would give the same error if compiled with the current .NET. \r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-01-11T16:53:54Z",
      "updated_at": "2022-01-11T16:53:54Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "Fine, but how to I set inside the PowerShell script to use .NET version 4.x instead? Or just autodetect?",
      "created_at": "2022-01-11T16:56:13Z",
      "updated_at": "2022-01-11T16:56:13Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> It simplifies to\r\n\r\nLines\r\n````\r\nAdd-Type -AssemblyName System.Runtime.WindowsRuntime\r\n$asTaskGeneric = ([System.WindowsRuntimeSystemExtensions].GetMethods() | ? { $_.Name -eq 'AsTask' -and $_.GetParameters().Count -eq 1 -and $_.GetParameters()[0].ParameterType.Name -eq 'IAsyncOperation`1' })[0]\r\n````\r\nand\r\n````\r\n$asTaskMethods = [System.WindowsRuntimeSystemExtensions].GetMethods()  | where-object name -eq 'AsTask'\r\n````\r\n\r\nare not equivalent:\r\n````\r\n.\\Set-bluetooth.ps1\r\n\r\ncmdlet Set-bluetooth.ps1 at command pipeline position 1\r\nSupply values for the following parameters:\r\nBluetoothStatus: On\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:7 char:5\r\n+     $asTask = $asTaskGeneric.MakeGenericMethod($ResultType)\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:8 char:5\r\n+     $netTask = $asTask.Invoke($null, @($WinRtTask))\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:9 char:5\r\n+     $netTask.Wait(-1) | Out-Null\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:7 char:5\r\n+     $asTask = $asTaskGeneric.MakeGenericMethod($ResultType)\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:8 char:5\r\n+     $netTask = $asTask.Invoke($null, @($WinRtTask))\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:9 char:5\r\n+     $netTask.Wait(-1) | Out-Null\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\bin\\Set-bluetooth.ps1:18 char:1\r\n+ Await ($bluetooth.SetStateAsync($BluetoothStatus)) ([Windows.Devices. ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n````\r\nPlease make tests before reporting invalid bugs.",
      "created_at": "2022-01-11T17:13:58Z",
      "updated_at": "2022-01-11T17:15:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is know issue. WinRT support was removed from .Net 6.0 and as result from PowerShell 7.2 too.",
      "created_at": "2022-01-11T17:23:01Z",
      "updated_at": "2022-01-11T17:23:01Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "How can I tell PowerShell to use .NET 4.x from inside the script instead of \"default\" 6.x?",
      "created_at": "2022-01-11T17:25:47Z",
      "updated_at": "2022-01-11T17:25:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Only way is to run Windows PowerShell.\r\n\r\nPS: there is separate project to support WinRT in .Net but MSFT PowerShell team want to keep PowerShell as small as possible so we could expect WinRT support will be added as an optional component/module in future.",
      "created_at": "2022-01-11T17:31:10Z",
      "updated_at": "2022-01-11T17:31:10Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "Can I run Windows PowerShell from inside the ps1 script?\r\nSo when I call `.\\Set-bluetooth.ps1` it autodetects if must run Windows Powershell or Powershell Core.",
      "created_at": "2022-01-11T17:36:08Z",
      "updated_at": "2022-01-11T17:36:08Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Please make tests before reporting invalid bugs.\r\n@superbonaci  you might want to heed your own advice\r\n\r\nHere is your error\r\n```\r\n$asTask = $asTaskGeneric.MakeGenericMethod($ResultType)\r\n\r\nYou cannot call a method on a null-valued expression.\r\n```\r\n\r\nWhat method is being called, and what expression is null-valued ?   It's `$asTaskGeneric`.    \r\nSo where is `$asTaskGeneric`  set ? \r\n\r\n```\r\nps >   Add-Type -AssemblyName System.Runtime.WindowsRuntime\r\nps >    $asTaskGeneric = ([System.WindowsRuntimeSystemExtensions].GetMethods() | ? { $_.Name -eq 'AsTask' -and $_.GetParameters().Count -eq 1 -and $_.GetParameters()[0].ParameterType.Name -eq 'IAsyncOperation`1' })[0]\r\n```\r\nIf I paste those into PowerShell 7.2.1 I get multiple instances of \r\n\r\n```\r\nMethodInvocationException: Exception calling \"GetParameters\" with \"0\" argument(s): \"Operation is not supported on this \r\nplatform. (0x80131539)\"\r\n``` \r\n\r\nOK. \r\nSo lets see where the second line breaks, \r\n```\r\nps >   $one = [System.WindowsRuntimeSystemExtensions].GetMethods()  \r\n```\r\nOK\r\n```\r\nps >  $two =  $one | ? { $_.Name -eq 'AsTask'}\r\n```\r\nOK\r\n```\r\nps > $three = $two | ? {$_.GetParameters().Count -eq 1}\r\n\r\nMethodInvocationException: Exception calling \"GetParameters\" with \"0\" argument(s): \"Operation is not supported on this platform. (0x80131539)\"\r\n```\r\n\r\n\r\n> How can I tell PowerShell to use .NET 4.x from inside the script instead of \"default\" 6.x?\r\n\r\n.NET 6 is hard wired into PowerShell 7.2 , just as Dot net framework 4 is hardwired into Windows PowerShell 5.1\r\n\r\nI can't find where I used it but somewhere I have some code like this \r\n\r\n```\r\nif ($PSVersionTable.PSVersion -ge \"6.0.0\") {\r\n    powershell.exe $MyInvocation.Line  \r\n    return\r\n}\r\n``` \r\nWhich will run the same ps1 with the same parameters in the other version of PowerShell. \r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-01-11T17:36:49Z",
      "updated_at": "2022-01-11T17:36:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You may be able to do this:\r\n\r\n```powershell\r\n$session = New-PSSession -UseWindowsPowerShell\r\nInvoke-Command -Session $session {\r\n    code here\r\n}\r\n```",
      "created_at": "2022-01-11T17:37:22Z",
      "updated_at": "2022-01-11T17:37:22Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "@SeeminglyScience what happens if I am running that script inside PowerShell 7.x and `Windows PowerShell` is removed in a future Windows 11 update? Would that script fail?",
      "created_at": "2022-01-11T17:38:34Z",
      "updated_at": "2022-01-11T17:38:34Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> what happens if I am running that script inside PowerShell 7.x and Windows PowerShell is removed in a future Windows 11 update? Would that script fail?\r\n\r\n@superbonaci  - that is almost never going to happen as it is part of the OS and whilst **may** become an optional feature, will be supported for at least another 10 years due to the Windows support lifecycle",
      "created_at": "2022-01-11T17:44:10Z",
      "updated_at": "2022-01-11T17:44:10Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> You may be able to do this:\r\n> \r\n> ```powershell\r\n> $session = New-PSSession -UseWindowsPowerShell\r\n> Invoke-Command -Session $session {\r\n>     code here\r\n> }\r\n> ```\r\n\r\nYour code works now if the script is run inside PowerShell Core 7.x, however is not backwards compatible with Windows PowerShell. It must be backward compatible:\r\n````\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.22000.282\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.22000.282\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n````\r\n````\r\n .\\bluetooth.ps1\r\nNew-PSSession : A parameter cannot be found that matches parameter name 'UseWindowsPowerShell'.\r\nAt C:\\bin\\bluetooth.ps1:1 char:26\r\n+ $session = New-PSSession -UseWindowsPowerShell\r\n+                          ~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [New-PSSession], ParameterBindingException\r\n    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n\r\nInvoke-Command : Cannot validate argument on parameter 'Session'. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.\r\nAt C:\\bin\\bluetooth.ps1:2 char:25\r\n+ Invoke-Command -Session $session {\r\n+                         ~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (:) [Invoke-Command], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.InvokeCommandCommand\r\n````",
      "created_at": "2022-01-11T17:46:28Z",
      "updated_at": "2022-01-11T17:46:28Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "They haven't removed cmd.exe or Wscript yet, so it's a bit early to be worrying about Windows PowerShell being removed.   \r\n\r\n@SeeminglyScience   that's good if you know the script will run in 7.2 but it won't run natively on 5. That's why I dropped back\r\nto saying \"run the same command line in PowerShell.exe\" and if the script is in the middle of a pipeline that won't work. \r\n\r\n@superbonaci  see the end of my previous comment for how to do that. \r\n\r\n\r\n\r\n  ",
      "created_at": "2022-01-11T17:48:21Z",
      "updated_at": "2022-01-11T17:48:21Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Your code works now if the script is run inside PowerShell Core 7.x, however is not backwards compatible with Windows PowerShell. It must be backward compatible:\r\n\r\nYeah for sure, I'm just offering a work around. You'll need to apply it selectively with version checks if you want it to run no matter what executable it's invoked in.\r\n\r\nThe main issue of WinRT support being dropped is discussed in more detail in #13138.",
      "created_at": "2022-01-11T17:58:06Z",
      "updated_at": "2022-01-11T17:58:06Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> ```\r\n> if ($PSVersionTable.PSVersion -ge \"6.0.0\") {\r\n>     powershell.exe $MyInvocation.Line  \r\n>     return\r\n> }\r\n> ```\r\n> \r\n> Which will run the same ps1 with the same parameters in the other version of PowerShell.\r\n\r\nHow can I convert all existing code to a function?\r\n````\r\nif ($PSVersionTable.PSVersion -ge \"6.0.0\") {\r\n    powershell.exe callcode()\r\n    return\r\n}\r\n\r\ncallcode(){\r\n    original code\r\n}\r\n````\r\nso `callcode()` just runs the existing code pasted in 1st post?",
      "created_at": "2022-01-11T18:12:22Z",
      "updated_at": "2022-01-11T18:12:59Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> How can I convert all existing code to a function?\r\n\r\nJust insert this checking after param block.",
      "created_at": "2022-01-11T18:54:48Z",
      "updated_at": "2022-01-11T18:54:48Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> > How can I convert all existing code to a function?\r\n> \r\n> Just insert this checking after param block.\r\n\r\nHow would the code look like?",
      "created_at": "2022-01-11T19:08:39Z",
      "updated_at": "2022-01-11T19:08:39Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> How would the code look like?\r\n```\r\n[CmdletBinding()] Param (\r\n    [Parameter(Mandatory=$true)][ValidateSet('Off', 'On')][string]$BluetoothStatus\r\n)\r\n\r\nif ($PSEdition -eq 'Core') {\r\n    powershell.exe $MyInvocation.Line\r\n    return\r\n}\r\n...\r\n```",
      "created_at": "2022-01-11T19:48:33Z",
      "updated_at": "2022-01-11T19:48:33Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> > How would the code look like?\r\n> \r\n> ```\r\n> [CmdletBinding()] Param (\r\n>     [Parameter(Mandatory=$true)][ValidateSet('Off', 'On')][string]$BluetoothStatus\r\n> )\r\n> \r\n> if ($PSEdition -eq 'Core') {\r\n>     powershell.exe $MyInvocation.Line\r\n>     return\r\n> }\r\n> ...\r\n> ```\r\n\r\nThat code asks twice for parameter if no arguments are given, which does not happen on original script. If argument is given then only asks one time.",
      "created_at": "2022-01-11T21:55:18Z",
      "updated_at": "2022-01-11T22:03:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Close as dup #13138.",
      "created_at": "2022-01-12T03:33:00Z",
      "updated_at": "2022-01-12T03:33:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-13T05:00:40Z",
      "updated_at": "2022-01-13T05:00:40Z"
    }
  ],
  "created_at": "2022-01-11T16:27:45Z",
  "number": 16731,
  "state": "closed",
  "title": "PowerShell ps1 script to manage bluetooth status stopped working",
  "updated_at": "2022-01-13T05:00:41Z"
}