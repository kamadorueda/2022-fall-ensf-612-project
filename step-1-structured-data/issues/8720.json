{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8720",
  "author": "petemounce",
  "body": "\r\n(This is feedback on the `Start-Transcript` cmdlet itself, the docs are great)\r\n\r\nThe output looks like\r\n\r\n```\r\n**********************\r\nWindows PowerShell transcript start\r\nStart time: 20190123080857\r\nUsername: BK-WINDOWS-V2-1\\petermounce\r\nRunAs User: BK-WINDOWS-V2-1\\petermounce\r\nMachine: BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\r\nHost Application: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\nProcess ID: 7264\r\nPSVersion: 5.1.14393.2636\r\nPSEdition: Desktop\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.14393.2636\r\nBuildVersion: 10.0.14393.2636\r\nCLRVersion: 4.0.30319.42000\r\nWSManStackVersion: 3.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\n**********************\r\nTranscript started, output file is c:/blah\\PowerShell_transcript.BK-WINDOWS-V2-1.0zNarV8d.20190123080857.txt\r\nLogging a thing...\r\nDone.\r\n**********************\r\nCommand start time: 20190123080945\r\n**********************\r\n```\r\nThis is fine for human-reading, but very hard to parse for machines. For more context - I use Elastic's filebeat to hoover log files (and winlogbeat for event logs) into Elasticsearch. This enriches every log line with contextual information (like the things in the context-start section) so that _every log line_ gets turned into an event that is saved with that information. This makes my logs queryable in really useful ways within Kibana.\r\n\r\nWould it be possible to do one of the following:\r\n* Add a flag like `-OutputFormat=human|json` - human = as now, `json` = JSON blob per line (_not_ one single JSON object with an array of lines), where JSON blob contains the `message` from that line of transcript and also one field per item of contextual data\r\n* Add a flag like `-LineTemplate` allowing the contextual information to be placed into the output according to how the user wants?\r\n\r\n---\r\n#### Document Details\r\n\r\n\u26a0 *Do not edit this section. It is required for docs.microsoft.com \u279f GitHub issue linking.*\r\n\r\n* ID: 61f8b565-4cc3-6a77-94e6-15b97ebcbca7\r\n* Version Independent ID: afe03c1f-3dbf-62f7-722a-d845777cadbd\r\n* Content: [Start-Transcript (Microsoft.PowerShell.Host)](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.host/start-transcript?view=powershell-6)\r\n* Content Source: [reference/6/Microsoft.PowerShell.Host/Start-Transcript.md](https://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Host/Start-Transcript.md)\r\n* Product: **powershell**\r\n* GitHub Login: @SteveL-MSFT\r\n* Microsoft Alias: **slee**",
  "closed_at": null,
  "comments": [
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can you move this issue to the source repo?",
      "created_at": "2019-01-23T15:37:32Z",
      "updated_at": "2019-01-23T15:37:32Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "\ud83e\udd14 Could you provide a hypothetical example of a log produced with `-OutputFormat JSON`?",
      "created_at": "2019-01-25T04:37:14Z",
      "updated_at": "2019-01-25T04:37:14Z"
    },
    {
      "author": "petemounce",
      "author_association": "NONE",
      "body": "@lukexjeremy I would find output of this form immediately consumable by tools such as [filebeat](https://www.elastic.co/products/beats/filebeat). One blob per line, and the example below is a translation of the human-readable in the original ticket.\r\n\r\n```\r\n{\"transcript\":\"Windows PowerShell transcript start\",\"startTimeUtc\":20190123080857,\"username\":\"BK-WINDOWS-V2-1\\\\petermounce\",\"runAsUser\":\"BK-WINDOWS-V2-1\\\\petermounce\",\"machine\":\"BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\",\"hostApplication\":\"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\"processId\":7264,\"psVersion\":\"5.1.14393.2636\",\"psEdition\":\"Desktop\",\"psCompatibleVersions\":[\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\",\"5.1.14393.2636\"],\"buildVersion\":\"10.0.14393.2636\",\"clrVersion\":\"4.0.30319.42000\",\"wsManStackVersion\":\"3.0\",\"psRemotingProtocolVersion\":\"2.3\",\"serializationVersion\":\"1.1.0.1\",\"stdout\":\"Logging a thing...\",\"stderr\":\"\"}\r\n{\"transcript\":\"Windows PowerShell transcript start\",\"startTimeUtc\":20190123080857,\"username\":\"BK-WINDOWS-V2-1\\\\petermounce\",\"runAsUser\":\"BK-WINDOWS-V2-1\\\\petermounce\",\"machine\":\"BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\",\"hostApplication\":\"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\"processId\":7264,\"psVersion\":\"5.1.14393.2636\",\"psEdition\":\"Desktop\",\"psCompatibleVersions\":[\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\",\"5.1.14393.2636\"],\"buildVersion\":\"10.0.14393.2636\",\"clrVersion\":\"4.0.30319.42000\",\"wsManStackVersion\":\"3.0\",\"psRemotingProtocolVersion\":\"2.3\",\"serializationVersion\":\"1.1.0.1\",\"stdout\":\"Done.\",\"stderr\":\"\"}\r\n```\r\n\r\nFor readability within this ticket:\r\n\r\n```json\r\n{\r\n    \"transcript\": \"Windows PowerShell transcript start\",\r\n    \"startTimeUtc\": 20190123080857,\r\n    \"username\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"runAsUser\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"machine\": \"BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\",\r\n    \"hostApplication\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\r\n    \"processId\": 7264,\r\n    \"psVersion\": \"5.1.14393.2636\",\r\n    \"psEdition\": \"Desktop\",\r\n    \"psCompatibleVersions\": [\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"5.1.14393.2636\"],\r\n    \"buildVersion\": \"10.0.14393.2636\",\r\n    \"clrVersion\": \"4.0.30319.42000\",\r\n    \"wsManStackVersion\": \"3.0\",\r\n    \"psRemotingProtocolVersion\": \"2.3\",\r\n    \"serializationVersion\": \"1.1.0.1\",\r\n    \"stdout\": \"Logging a thing...\",\r\n    \"stderr\": \"\"\r\n}\r\n{\r\n    \"transcript\": \"Windows PowerShell transcript start\",\r\n    \"startTimeUtc\": 20190123080857,\r\n    \"username\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"runAsUser\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"machine\": \"BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\",\r\n    \"hostApplication\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\r\n    \"processId\": 7264,\r\n    \"psVersion\": \"5.1.14393.2636\",\r\n    \"psEdition\": \"Desktop\",\r\n    \"psCompatibleVersions\": [\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"5.1.14393.2636\"],\r\n    \"buildVersion\": \"10.0.14393.2636\",\r\n    \"clrVersion\": \"4.0.30319.42000\",\r\n    \"wsManStackVersion\": \"3.0\",\r\n    \"psRemotingProtocolVersion\": \"2.3\",\r\n    \"serializationVersion\": \"1.1.0.1\",\r\n    \"stdout\": \"Done.\",\r\n    \"stderr\": \"\"\r\n}\r\n```\r\n\r\nI definitely _wouldn't_ want any kind of string-rendering for dates/times/durations - unix timestamps as UTC is as far as I'm concerned, the One True Way to render a datetime and string representations are a rendering/UI concern.",
      "created_at": "2019-01-25T12:14:17Z",
      "updated_at": "2019-01-25T12:16:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see huge duplications in the proposed format.",
      "created_at": "2019-01-25T14:22:12Z",
      "updated_at": "2019-01-25T14:22:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, that's my main concern there as well. The information is good to have, but emitting it for _every line_ of logging will create performance concerns eventually.\r\n\r\nThe difficulty here is that a json blob isn't especially well suited to a transcript format in this sense. Potentially we could have a \"header\" blob, and then the rest of the blobs just with the actual log information.\r\n\r\nSo it would look more like this (Copying from the above examples)\r\n\r\n```json\r\n{\r\n    \"transcriptHeader\": \"Windows PowerShell transcript start\",\r\n    \"startTimeUtc\": 20190123080857,\r\n    \"username\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"runAsUser\": \"BK-WINDOWS-V2-1\\\\petermounce\",\r\n    \"machine\": \"BK-WINDOWS-V2-1 (Microsoft Windows NT 10.0.14393.0)\",\r\n    \"hostApplication\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\r\n    \"processId\": 7264,\r\n    \"psVersion\": \"5.1.14393.2636\",\r\n    \"psEdition\": \"Desktop\",\r\n    \"psCompatibleVersions\": [\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"5.1.14393.2636\"],\r\n    \"buildVersion\": \"10.0.14393.2636\",\r\n    \"clrVersion\": \"4.0.30319.42000\",\r\n    \"wsManStackVersion\": \"3.0\",\r\n    \"psRemotingProtocolVersion\": \"2.3\",\r\n    \"serializationVersion\": \"1.1.0.1\"\r\n},\r\n{ \"output\": \"Processing a thing...\" },\r\n{ \"verbose\": \"Performed <action> on <item>\" },\r\n{ \"output\": \"Done.\" },\r\n```\r\n\r\nCertainly, this would make reading it a _little_ trickier, but still very much able to be processed automatically without much hassle. Just read the header blob and then read the subsequent lines.",
      "created_at": "2019-01-25T14:52:28Z",
      "updated_at": "2019-01-25T14:52:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If the goal is parsing, we need a _scheme_.",
      "created_at": "2019-01-25T15:13:54Z",
      "updated_at": "2019-01-25T15:13:54Z"
    },
    {
      "author": "petemounce",
      "author_association": "NONE",
      "body": "I'm aware of the duplication. The payback one gets from this is an incredibly rich and useful querying experience when using centralised logs to debug with.\r\n\r\nLog shippers (for example, filebeat, nxlog, logstash itself, fluentd and others) are simplest to configure and use when all the data about a log event is contained within the line that that log is.\r\n\r\nI would far rather pay the cost of inefficient data on disk (or in a pipe) compared to the engineering effort integrating a more efficient but also not as turn-key as the event-per-line case.\r\n\r\nContext: in my own infrastructure, either the shippers are configured to free space by rotating files and deleting, or simply allowing the instances to fill up and autoscaling replace them. Additionally, we work hard to eliminate the need for people to remote onto computers and execute scripts - so having enriched logs shipped centrally is a key pillar of our operations and debugging experience.",
      "created_at": "2019-01-27T21:29:34Z",
      "updated_at": "2019-01-27T21:29:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure that traces are suitable for permanent use. These would be regular logs.\r\n",
      "created_at": "2019-01-28T05:41:03Z",
      "updated_at": "2019-01-28T05:41:03Z"
    },
    {
      "author": "petemounce",
      "author_association": "NONE",
      "body": "I'm trying to illustrate what is normal, for me and others using centralised logs in a devops/SRE environment.",
      "created_at": "2019-01-28T07:33:39Z",
      "updated_at": "2019-01-28T07:33:39Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Interesting scenario @petemounce, one I too think PS ought to accommodate. As I see it, the discussion so far indicates that the `-LineTemplate` idea is a better fit than a fixed JSON format. As you pointed out originally, a template system allows the user to make whatever trade-off suits them.\r\n\r\nHere are my initial thoughts on a template system.\r\n\r\n1. `MshHostUserInterface.TranscribeResult` looks like the place to intercept the command's result text and instantiate the template before flushing to logs.\r\n2. Code executing in that method would have access to a wealth information. As an implementer, I'd be asking what information should be exposed and how. Then that would determine how to validate a template supplied by the user.",
      "created_at": "2019-01-28T09:19:17Z",
      "updated_at": "2019-01-28T09:19:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need discuss  logging vs tracing vs transcription to get right solution.",
      "created_at": "2019-04-15T03:35:55Z",
      "updated_at": "2019-04-15T03:35:55Z"
    }
  ],
  "created_at": "2019-01-23T08:19:49Z",
  "number": 8720,
  "state": "open",
  "title": "Start-Transcript output is hard to parse",
  "updated_at": "2019-04-15T03:35:56Z"
}