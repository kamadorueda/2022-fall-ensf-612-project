{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10269",
  "author": "PaulHigin",
  "body": "# PR Summary\r\n\r\nThis is a fix for the performance regression found in issue #9884\r\n\r\n## PR Context\r\n\r\nEven though the issue title indicate .net classes are slow to load, the repro steps make it clear that a general slow down can occur when a debug break point is set.\r\n\r\nRepro:\r\n```powershell\r\n$measure1 = measure-command{\r\n  foreach($i in 1..10000){\r\n    [System.Environment]\r\n  }\r\n} |select -ExpandProperty TotalSeconds\r\n\r\nSet-PSBreakpoint -Variable \"test\" -Action {$null}\r\n\r\n$measure2 = measure-command{\r\n  foreach($i in 1..10000){\r\n    [System.Environment]\r\n  }\r\n} |select -ExpandProperty TotalSeconds\r\n\r\nWrite-Host \"First measurement took $measure1 seconds, Second measurement took $measure2\"\r\n\r\n>>First measurement took 0.0482474 seconds, Second measurement took 0.8722697\r\n```\r\nIt turns out that this problem (based on the above repro) is due to a recent change to disable the script debugger when the system is in lock down mode.  System lock down mode is checked each time the debugger state is changed, which occurs many times in a tight loop for variable processing, and the system check results in a significant slow down.\r\n\r\nThe fix is to cache the system lock down mode for each script debugger instance.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-08-05T20:27:50Z",
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13  This is ready to merge.",
      "created_at": "2019-08-05T14:58:26Z",
      "updated_at": "2019-08-05T14:58:26Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry macos",
      "created_at": "2019-08-05T16:59:54Z",
      "updated_at": "2019-08-05T16:59:54Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2019-08-05T17:00:17Z",
      "updated_at": "2019-08-05T17:00:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan please rerun static",
      "created_at": "2019-08-05T17:02:59Z",
      "updated_at": "2019-08-05T17:02:59Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, successfully started rebuild of `PowerShell-CI-static-analysis`",
      "created_at": "2019-08-05T17:03:34Z",
      "updated_at": "2019-08-05T17:03:34Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 30 minutes",
      "created_at": "2019-08-05T17:04:38Z",
      "updated_at": "2019-08-05T17:04:38Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 30 minutes ago",
      "created_at": "2019-08-05T17:34:50Z",
      "updated_at": "2019-08-05T17:34:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is there a plan to investigate an influence of mentioned security update on Safer API?\r\nIn scenarios like Pester and `Get-Module -Listavailable -All` we call the API the every file that sometimes can slow down execution significantly.",
      "created_at": "2019-08-06T03:12:52Z",
      "updated_at": "2019-08-06T03:12:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  Is there a repro that demonstrates the perf regression?",
      "created_at": "2019-08-06T14:55:11Z",
      "updated_at": "2019-08-06T14:55:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Yes, I created #10309 to show that the API is very slow.",
      "created_at": "2019-08-06T17:22:32Z",
      "updated_at": "2019-08-06T17:22:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
      "created_at": "2019-08-20T22:36:59Z",
      "updated_at": "2019-08-20T22:36:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v6.2.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v6.2.3)\n",
      "created_at": "2019-09-12T21:22:44Z",
      "updated_at": "2019-09-12T21:22:44Z"
    },
    {
      "author": "mlee-bittitan",
      "author_association": "NONE",
      "body": "Is there any plan/ETA for when this fix will be applied for Windows PowerShell 5.1?",
      "created_at": "2020-01-28T04:05:00Z",
      "updated_at": "2020-01-28T04:05:00Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "Seriously, this needs to be fixed in 5.1.\r\nIn many corporate environments it would be huge deal and weeks of compatibility testing to upgrade to v7 because of this. \r\n\r\nWe have a huge repository of scripts running on thousands of machines.\r\nI just ran one of our lager script in the debugger, it took 3 1/2 hours instead of 15 minutes to complete. \r\nThis means we can't use the debugger in test and pre-prod environments anymore. \r\nThis is a mayor problem!",
      "created_at": "2020-06-15T10:13:26Z",
      "updated_at": "2020-06-15T11:08:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Hypernut Windows PowerShell is a frozen project and only security updates can be added.\r\nAre your scripts compatible with the new version? Your team should plan to migrate to 7 version.",
      "created_at": "2020-06-15T14:39:01Z",
      "updated_at": "2020-06-15T14:39:01Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "That is what I was talking about. We have hundreds of script in production. Migrating them takes weeks of testing in different environments. For each of them! \r\nAs far as I understood is, Windows Powershell does not get new features. This is not a feature, this would be a bug fix for a major bug.",
      "created_at": "2020-06-15T22:36:51Z",
      "updated_at": "2020-06-16T00:33:41Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "cc @SteveL-MSFT ",
      "created_at": "2020-06-15T22:38:33Z",
      "updated_at": "2020-06-15T22:38:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Migrating them takes weeks of testing in different environments. For each of them!\r\n\r\n@Hypernut  I would expect 7 version to become dominant in the next two years. So you go in right direction.\r\nIf you have great experience in the area you would could more actively communicate with MSFT team in the repo to resolve compatibility issues if possible and in PSSA repo to add more rules to detect compatibility issues.\r\n\r\n\r\n",
      "created_at": "2020-06-16T03:34:38Z",
      "updated_at": "2020-06-16T03:34:38Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "Two years is two years. The bug is there now. And of course I am happy to help.",
      "created_at": "2020-06-17T01:40:33Z",
      "updated_at": "2020-06-17T01:40:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@Hypernut Just an update on this. We opened a bug internally to the team that owns Windows PowerShell 3 days ago, and the owner dev agreed to work on porting the fix.",
      "created_at": "2020-06-19T21:32:56Z",
      "updated_at": "2020-06-19T21:33:34Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "Sounds good, thanks!",
      "created_at": "2020-06-20T11:30:04Z",
      "updated_at": "2020-06-20T11:30:04Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@Hypernut  We have been speaking with the the internal Microsoft CSD team, and it turns out that this fix has been applied to Windows PowerShell in the latest release of Windows.  So you will see the fix with Windows 20H1 release, which was released in May 2020.  There doesn't seem to be any plans to back port it to the older 19H1 release.",
      "created_at": "2020-06-24T00:06:38Z",
      "updated_at": "2020-06-24T00:06:38Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "This is even worse. Now the alternative is to make a full Windows upgrade instead of \"just\" a PowerShell upgrade, which is an even bigger deal.\r\nAmazing. \r\nI have customers all over the industry. No one uses 20H1 in production environments yet. The standard \"delay\" is at least 6 months, up to year.\r\n\r\nIs there no way to install the _20H1 - Powershell 5.1_ into _19H1_?",
      "created_at": "2020-07-06T10:52:44Z",
      "updated_at": "2020-07-06T12:03:23Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "You can make a request to backport the fix via Microsoft UserVoice.  The performance degradation only occurs when script breakpoints are set, which is unusual for production, and the workaround is to remove all breakpoints.",
      "created_at": "2020-07-06T15:55:14Z",
      "updated_at": "2020-07-06T15:55:14Z"
    },
    {
      "author": "Hypernut",
      "author_association": "NONE",
      "body": "Of course there are no breakpoints in production, but in test- and pre-prod-environments, which -apart from the to be tested script- have to be exactly like prod. I have to be able to trace errors or unexpected behavior in those environments.",
      "created_at": "2020-07-06T16:28:18Z",
      "updated_at": "2020-07-06T16:29:42Z"
    },
    {
      "author": "aolszowka",
      "author_association": "NONE",
      "body": "To resurrect this thread, similar to @Hypernut we are in the same boat; we've got plenty of 5.1 Scripts in Production environments and cannot lift to 7.\r\n\r\nWe're in the middle of trying to lift this process to Azure DevOps Pipelines Microsoft Hosted Agents and we're encountering the issues that have been well documented on at https://github.com/pester/Pester/issues/1318.\r\n\r\nOur unit testing utilizes Pester's Code Coverage, which in turn utilizes PowerShell's Breakpoints. It currently is covering over 2,100 lines and a process that should take 5-8 minutes is taking between 18-35 minutes which is not feasible for moving our builds to Microsoft Hosted Agents.\r\n\r\nAs per the above linked issue in Pester, they cannot do anything as they are dependent upstream on the performance of these breakpoints. Is there any path forward? ",
      "created_at": "2021-11-01T15:52:24Z",
      "updated_at": "2021-11-01T15:52:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@aolszowka Please open new issue with your business scenario description.",
      "created_at": "2021-11-01T17:52:09Z",
      "updated_at": "2021-11-01T17:52:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@aolszowka Quoted form @PaulHigin's [comment](https://github.com/PowerShell/PowerShell/pull/10269#issuecomment-648490383) above:\r\n\r\n> So you will see the fix with Windows 20H1 release, which was released in May 2020. There doesn't seem to be any plans to back port it to the older 19H1 release.\r\n\r\nAre you able to choose the image to use for the MS hosted ADO agent?",
      "created_at": "2021-11-01T18:07:12Z",
      "updated_at": "2021-11-01T18:07:12Z"
    },
    {
      "author": "aolszowka",
      "author_association": "NONE",
      "body": "@daxian-dbw Unfortunately no; and based on that it looks like this is most likely the problem:\r\n\r\nhttps://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md\r\n\r\n```\r\nOS Version: 10.0.17763 Build 2237\r\nImage Version: 20211018.0\r\n```\r\n\r\nI confirmed that myself with the following YAML:\r\n\r\n```\r\n---\r\npool:\r\n  vmImage: \"windows-2019\"\r\n\r\nstages:\r\n  - stage:\r\n    jobs:\r\n      - job: \"Build\"\r\n        displayName: \"Build\"\r\n        condition: true\r\n        steps:\r\n          - task: PowerShell@2\r\n            displayName: \"Get Version\"\r\n            name: \"getVersion\"\r\n            condition: always()\r\n            inputs:\r\n              targetType: inline\r\n              script: |\r\n                systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\r\n              pwsh: false\r\n            timeoutInMinutes: 5\r\n```\r\n\r\nWhich outputs:\r\n\r\n```\r\nOS Name:                   Microsoft Windows Server 2019 Datacenter\r\nOS Version:                10.0.17763 N/A Build 17763\r\n```\r\n\r\nI am going to go ahead and open an issue with that team; and link them back to this for reference.\r\n\r\n@iSazonov I will hold off opening a PowerShell specific issue as based on the above it seems like PowerShell is thinking this should be resolved.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/1fc94cc9988272d79917bb6f2b54b6dbb5ca85889f671d31279a7c47b99f7bcb/actions/virtual-environments\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/actions/virtual-environments\">virtual-environments/Windows2019-Readme.md at main \u00b7 actions/virtual-environments</a></strong></div><div>GitHub Actions virtual environments. Contribute to actions/virtual-environments development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-11-01T19:43:18Z",
      "updated_at": "2021-11-01T19:43:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin Do you know if the 20H1 update was applied to Windows Server 2019? ",
      "created_at": "2021-11-01T22:04:31Z",
      "updated_at": "2021-11-01T22:04:31Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "No, the fix was not backported.",
      "created_at": "2021-11-01T22:35:48Z",
      "updated_at": "2021-11-01T22:35:48Z"
    }
  ],
  "created_at": "2019-07-31T17:56:20Z",
  "number": 10269,
  "state": "closed",
  "title": "Fix debugger disable performance regression",
  "updated_at": "2021-11-01T22:35:48Z"
}