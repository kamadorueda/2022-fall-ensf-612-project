{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13380",
  "author": "mklement0",
  "body": "From what I understand, in argument mode the parameter binder pre-parses _bareword arguments_ that _look like number literals_ as numbers.\r\n\r\nIf that argument is then bound to an _untyped_ parameter (no type specified (PowerShell code), `[object]`, or `[psobject]`), it isn't clear whether the argument was indeed meant to be a number or was meant to be a string that just happens to look like a number.\r\n\r\nIn order to still enable later use of the argument _as a string_, its _original string representation_, exactly as it was specified on the command line, must be preserved.\r\n\r\nTo that end, the number is wrapped in a `PSObject` instance that _caches_ the original string representation.\r\n\r\nThis cached string representation can be accessed via `.psobject.ToString()`, and it is also used implicitly during output formatting (curiously, it is _not_ used with `.ToString()` or in string interpolation - see https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-491423258).\r\n\r\nHowever, as an optimization, this wrapping-in-`PSObject` happens _only_ if the original string representation differs from the _default_ string representation of the number.\r\n\r\nWith arguments that look like numbers _with data-type suffixes_ - such as `L` for `[long]` - wrapping _must_ happen, given that the default string representations of the resulting numbers never include a type suffix.\r\n\r\nCurrently, this works for all type suffixes except for `d` (`[decimal]`) and `n` (`[bigint]`)\r\nWhat these two types have in common is that they're not .NET primitive types.\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# These strings, when used as barewords, are parsed as *numbers*, because\r\n# they *look like number literals*.\r\n$barewords = '1y', '1uy', '1s', '1us', '1l', '1u', '1ul', '1d', '1n', '1e2', '1.22000'\r\n\r\n$roundTrippedAsStrings = $barewords | % {\r\n    iex \"& { param(`$p) `$p.psobject.ToString()  } $_\"  \r\n  }\r\n\r\nCompare-Object $barewords $roundTrippedAsStrings -OutVariable result\r\n\r\n$result.Count | Should -Be 0\r\n```\r\n\r\n## Expected behavior\r\n\r\nAll tests should pass.\r\n\r\n## Actual behavior\r\n\r\n```none\r\nInputObject SideIndicator\r\n----------- -------------\r\n1           =>\r\n1           =>\r\n1d          <=\r\n1n          <=\r\n\r\nExpected 0, but got 4.\r\n```\r\n\r\nThat is, `1d` (`[decimal]`) and `1n` (`[bigint]`) did not preserve their original string representations.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.5\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, I thought I fixed this already.... I think this is a slightly different code path; the stuff I fixed before handles it for when the parameter type is `[string]` and that sorts it out there. But I think this problem may be in PSObject's ToString() method itself. The fix should be similar, though... although I'm surprised _decimal_ doesn't work, since that suffix has been around much longer than some of the others that do seem to work. \ud83e\udd14 ",
      "created_at": "2020-08-07T18:16:20Z",
      "updated_at": "2020-08-07T18:16:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Had a bit of a poke around, and it seems like the code in PSObject's ToString() doesn't really discriminate; if it has a TokenText attached it'll use it.\r\n\r\nGuess that somewhere in the parameter binder there it's deliberately discarding the token text information because it's apparently not there at all by the time the ToString() is called, as far as I can see from a quick glance.",
      "created_at": "2020-08-07T18:37:30Z",
      "updated_at": "2020-08-07T18:37:30Z"
    }
  ],
  "created_at": "2020-08-07T17:52:24Z",
  "number": 13380,
  "state": "open",
  "title": "Caching of the original string representation of parsed-as-numbers bareword arguments is broken for type suffixes 'd' and 'n'",
  "updated_at": "2020-08-10T05:08:53Z"
}