{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2860",
  "author": "alastairs",
  "body": "Steps to reproduce\r\n------------------\r\nRun the following expressions:\r\n\r\n```powershell\r\n\"some invalid JSON string\" | ConvertFrom-Json -ErrorAction Ignore\r\n\"some invalid JSON string\" | ConvertFrom-Json -ErrorAction SilentlyContinue\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nBoth expressions write no error to the console, and return either `$null` or the empty string.\r\n\r\nActual behavior\r\n---------------\r\nThe expressions write an error to the console and throw the following exception:\r\n\r\n```\r\nConvertFrom-Json : Invalid JSON primitive: some invalid JSON string.\r\nAt line:1 char:12\r\n+ \"some invalid JSON string\" | ConvertFrom-Json -ErrorAction Ignore\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-Json], ArgumentException\r\n    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.206\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.206\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-04-17T16:30:40Z",
  "comments": [
    {
      "author": "alastairs",
      "author_association": "NONE",
      "body": "If this is not the appropriate place to report bugs against v5.x, please let me know where I can. ",
      "created_at": "2016-12-08T17:37:52Z",
      "updated_at": "2016-12-08T17:37:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@alastairs Could you please test this with recent Powershell 6 build?",
      "created_at": "2016-12-08T18:46:06Z",
      "updated_at": "2016-12-08T18:46:06Z"
    },
    {
      "author": "alastairs",
      "author_association": "NONE",
      "body": "@iSazonov The behaviour is the same with 6.0.0-alpha13\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSEdition                      Core\r\nPSVersion                      6.0.0-alpha\r\nPSRemotingProtocolVersion      2.3\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nWSManStackVersion              3.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-alpha.13\r\nBuildVersion                   3.0.0.0\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nBTW, I _love_ that trying this out was just a case of extracting a zip file somewhere and not a full-blow installer. Great work! \ud83d\udc4d ",
      "created_at": "2016-12-08T21:03:57Z",
      "updated_at": "2016-12-08T21:05:10Z"
    },
    {
      "author": "alastairs",
      "author_association": "NONE",
      "body": "Some further information in case it's useful: my `$ErrorActionPreference` variable is set to `\"Stop\"`. ",
      "created_at": "2016-12-08T21:32:04Z",
      "updated_at": "2016-12-08T21:32:04Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee (subset of @HemantMahawar @lzybkr @khansen00 and myself) agree that the original issue (#2860) is by design. It is unreasonable for ConvertFrom-Json to emit anything but an error when receiving malformed input, and terminating errors are not respected by -ErrorAction. If a developer absolutely wants to make a conscious choice to ignore that terminating error, they should use try/catch.\r\n",
      "created_at": "2017-02-16T00:39:34Z",
      "updated_at": "2017-02-16T00:39:34Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, now I actually don't know what's going on. It would appear that this is currently a *non*-terminating error: \r\n\r\n```\r\nConvertFrom-Json : Conversion from JSON failed with error: Unexpected character encountered while parsing value: s.\r\nPath '', line 0, position 0.\r\nAt line:1 char:18\r\n+ \"some invalid\" | ConvertFrom-Json -ErrorAction SilentlyContinue; 2+2\r\n+                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-Json], ArgumentException\r\n    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n\r\n4\r\n```\r\n> Note: the `2+2` still gets executed\r\n\r\nIf that's the case, then `-ErrorAction` *should* be respected, right? \r\n",
      "created_at": "2017-04-13T22:48:44Z",
      "updated_at": "2017-04-13T22:48:44Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "Joey, \r\nThe proposed fix for this was not accepted and resolved as by-design.  Under the hood, Json.Net throws an ArgumentException for malformed json content.",
      "created_at": "2017-04-13T23:22:07Z",
      "updated_at": "2017-04-13T23:22:07Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Then I'm not understanding why it's not terminating the statement above....my understanding of PS errors (which may be busted, but please help me understand):\r\n\r\n* terminating errors (usually surfaced from internal exceptions) should terminate the script block or statement. In this case, if the `ArgumentException` is terminating at the PS level, the `2+2` should then not be executed. \r\n* Non-terminating errors respect `-ErrorAction`. If `ArgumentException` was caught as a non-terminating error, `-ErrorAction SilentlyContinue` should silence the error. \r\n\r\nWhat am I missing here? ",
      "created_at": "2017-04-14T17:13:11Z",
      "updated_at": "2017-04-14T17:13:11Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "This appears to be a side-effect of Cmdlet.ThrowTerminatingError; -ErrorAction is apparently ignored. It's not clear if it is intentional. I see the same behavior on Windows PowerShell.\r\nHere's a couple of PS functions that illustrate the behavior difference:\r\n\r\n```powershell\r\nfunction TerminatingError\r\n{\r\n    $exception = [System.ArgumentException]::new(\"argexception\")\r\n    $err = [System.Management.Automation.ErrorRecord]::new( `\r\n        $exception,`\r\n        'error',`\r\n        [System.Management.Automation.ErrorCategory]::NotSpecified,`\r\n        $null)\r\n    $cmdlet = [Microsoft.PowerShell.Commands.GetDateCommand]::new()\r\n    $cmdlet.ThrowTerminatingError($err)\r\n}\r\n\r\nfunction ExceptionError\r\n{\r\n    $exception = [System.ArgumentException]::new(\"argexception\")\r\n    throw $exception\r\n}\r\n```",
      "created_at": "2017-04-14T17:43:22Z",
      "updated_at": "2017-04-14T18:04:29Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, now I *really* don't know what's going on. With your two functions, `TerminatingError;2+2` shows that it's *not* really terminating, but `ExceptionError;2+2` *is* terminating. ",
      "created_at": "2017-04-14T18:07:12Z",
      "updated_at": "2017-04-14T18:07:12Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Unless you have some more insight, @dantraMSFT, I'll probably open another issue and figure out what the *intended* behavior is supposed to be. ",
      "created_at": "2017-04-14T18:07:55Z",
      "updated_at": "2017-04-14T18:07:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @BrucePay \r\n\r\nBehavior with TerminatingError and Exception is inconsistent, not sure if intended.",
      "created_at": "2017-04-14T20:06:22Z",
      "updated_at": "2017-04-14T20:06:22Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Alright, I'm closing it, I'll follow up offline or in another issue. ",
      "created_at": "2017-04-17T16:30:40Z",
      "updated_at": "2017-04-17T16:30:40Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "For posterity, my understanding of terminating errors was wrong. A terminating error cancels execution of the *current pipeline or expression*, not of an entire script block. \r\n\r\nA better way to check for terminating errors is to just use try/catch:\r\n\r\n```powershell\r\nC:\\Program Files\\PowerShell\\6.0.0-alpha.18> try {\"fdasf\" | convertfrom-json} catch {1}\r\n1\r\nC:\\Program Files\\PowerShell\\6.0.0-alpha.18> try {ls foo} catch {1}\r\nls : Cannot find path 'C:\\Program Files\\PowerShell\\6.0.0-alpha.18\\foo' because it does not exist.\r\nAt line:1 char:6\r\n+ try {ls foo} catch {1}\r\n+      ~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (C:\\Program File....0-alpha.18\\foo:String) [Get-ChildItem], ItemNotFound\r\n   Exception\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand\r\n```",
      "created_at": "2017-04-18T17:14:21Z",
      "updated_at": "2017-04-18T17:14:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello: \r\n\r\nI had the same misconception, and I think the source is that the current help topics conflate _statement_-terminating errors with _script_-terminating errors - please see [Our Error Handling, Ourselves - time to fully understand and properly document PowerShell's error handling](https://github.com/PowerShell/PowerShell-Docs/issues/1583).",
      "created_at": "2017-08-15T21:59:47Z",
      "updated_at": "2017-08-15T21:59:47Z"
    },
    {
      "author": "leswaters",
      "author_association": "NONE",
      "body": "I know this is an old closed issue... but using \"resolvedByDesign\" as an excuse is lame... The optics of this is taht an error is an error is an error, irrespective of terminating or non-terminating. Thus```-ErrorAction``` should be respected for all errors and cmdlets, or it becomes inconsistent and unpredictable.  End developers should be free to use errorAction as they see fit. \r\n\r\n```\r\n$json = (\"apple\" | convertFrom-json -ErrorAction SilentlyContinue)\r\nif (!$json) { write-warning \"Issue with json input - ignoring\" }\r\n```\r\n\r\n OR maybe we need ```-TerminatingErrorAction``` as a new switch? \ud83d\ude0a",
      "created_at": "2021-05-23T10:53:52Z",
      "updated_at": "2021-05-23T11:01:47Z"
    }
  ],
  "created_at": "2016-12-08T17:37:30Z",
  "number": 2860,
  "state": "closed",
  "title": "ConvertFrom-Json does not respect -ErrorAction",
  "updated_at": "2021-05-23T11:01:47Z"
}