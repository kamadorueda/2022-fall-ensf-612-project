{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5982",
  "author": "felixfbecker",
  "body": "Currently to decode/encode Base64 we have to call into cumbersome .NET APIs:\r\n\r\n```powershell\r\n[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aGVsbG8gd29ybGQK'))\r\n```\r\n\r\nBase64 is needed in a lot of cases. For example, getting a secret value out of `kubectl` is incredibly cumbersome:\r\n\r\n```powershell\r\n[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret database -o json | ConvertFrom-Json).data.username))\r\n```\r\n\r\nIt would be great if we could just do this:\r\n\r\n```powershell\r\n(kubectl get secret database -o json | ConvertFrom-Json).data.username | ConvertFrom-Base64\r\n```\r\n\r\nThis is something that is available on every Unix shell with the `base64` utility (which can be piped into).\r\n\r\nThere is a Base64 module on PSGallery, but given this is available in .NET and Unix shells imo it should be exposed as a convenient PS cmdlet, so it is available in all installations and reliable.\r\n\r\nFor example, the Base64 module on PSGallery always uses UTF16 so the above example just results in mangled characters. A core implementation should support the standard `-Encoding` parameter etc.\r\n\r\nThis is unlikely to create a maintenance burden because it just calls into .NET and the Base64 spec will not change.",
  "closed_at": "2019-01-11T06:38:16Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Agreed.  We've had these commands in PSCX for years (~11 years).  This one would probably be an easy \"up-for-grabs\" set of commands to tackle.  See:\r\n\r\nhttps://github.com/Pscx/Pscx/blob/master/Src/Pscx/Commands/Text/ConvertToBase64Command.cs\r\nhttps://github.com/Pscx/Pscx/blob/master/Src/Pscx/Commands/Text/ConvertFromBase64Command.cs",
      "created_at": "2018-01-22T19:27:21Z",
      "updated_at": "2018-01-22T19:27:21Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill does PSCX support PS Core (mac/Linux)?",
      "created_at": "2018-01-22T19:30:40Z",
      "updated_at": "2018-01-22T19:30:40Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "No, not yet.  I've been so busy contributing to everyone else's OSS project (PowerShell, PSES, posh-git, psake) that I've been neglecting my own.  :-(  Must carve out some time to start moving the useful stuff over.  There is a lot that can be left out now that PowerShell has implemented more and more of the functionality in PSCX with built-in commands and PSGallery modules.",
      "created_at": "2018-01-22T19:34:25Z",
      "updated_at": "2018-01-22T19:34:39Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "What would an approved interface for this cmdlet look like?",
      "created_at": "2018-12-12T19:31:38Z",
      "updated_at": "2018-12-12T19:31:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I close this as dup #8620 - feel free to create and discuss RFC.\r\n",
      "created_at": "2019-01-11T06:38:16Z",
      "updated_at": "2019-03-18T12:28:04Z"
    }
  ],
  "created_at": "2018-01-22T19:24:08Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement"
  ],
  "number": 5982,
  "state": "closed",
  "title": "ConvertFrom-Base64, ConvertTo-Base64",
  "updated_at": "2019-03-18T12:28:04Z"
}