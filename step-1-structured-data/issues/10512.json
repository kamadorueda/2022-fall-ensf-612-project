{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10512",
  "author": "mklement0",
  "body": "Closely related: #4002\r\n\r\nNormally, immediately after execution of an external program, `$?` and `$LASTEXITCODE -eq 0` can be used interchangeably to test for success.\r\n\r\nHowever, under the following conditions `$?` is _invariably_ set to `$false`, even if `$LASTEXITCODE` contains `0` and therefore indicates success:\r\n\r\n* If a `2>` or `*>` redirection is involved\r\n* _and_ actual stderr output is produced by the external program.\r\n\r\nNote that you generally cannot and shouldn't infer success vs. failure of an external program from the presence of stderr output - many CLIs use stderr to emit _status_ information; only the process exit code should be consulted.\r\n\r\n# Steps to reproduce\r\n\r\nRun the following on Windows, which produces both stderr and stdout output and reports `0` as the process exit code:\r\n\r\n```powershell\r\n& { cmd /c 'nosuch & ver' *>$null; $?; $LASTEXITCODE } | Should -Be $true, 0\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```none\r\nExpected @($true, 0), but got @($false, 0).\r\n```\r\n\r\nThat is, `$?` was `$false`, even though `$LASTEXITCODE` was `0`.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.3\r\nWindows PowerShell v5.1.18362.145\r\n```\r\n",
  "closed_at": "2020-08-02T15:53:08Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Closed in favor of https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666495478",
      "created_at": "2020-08-02T15:53:06Z",
      "updated_at": "2020-08-02T15:53:06Z"
    }
  ],
  "created_at": "2019-09-11T14:38:47Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 10512,
  "state": "closed",
  "title": "Redirection of stderr output from external programs sets $? invariably to $false, no longer reflecting whether $LASTEXITCODE equals 0",
  "updated_at": "2020-08-02T15:53:08Z"
}