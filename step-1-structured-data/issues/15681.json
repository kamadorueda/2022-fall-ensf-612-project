{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15681",
  "author": "sztomi",
  "body": "### Summary of the new feature / enhancement\n\nCurrently, it is very difficult for processes to determine whether or not they were launched from PowerShell. Workarounds include inspecting the process tree or relying on assumptions about the contents of PSModulePath. \r\n\r\nMany (most) unixy shells define SHELL in the environment which points to the executable path of the currently running shell. This would make it very easy and predictable for programs to detect powershell. \r\n\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2021-06-30T14:00:06Z",
  "comments": [
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@sztomi  could you please explain a little more about the scenario? Are you talking about executables rather than scripts? Have you tried mocking this up in your profile, it should be fairly trivial to do something like`$env:SHELL = \"${PSHOME}/pwsh\"`. Is there a particular application that is having issues? On my Mac, for example, $SHELL is set to /bin/zsh even if I run `bash -l`",
      "created_at": "2021-06-28T16:02:26Z",
      "updated_at": "2021-06-28T16:02:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is dup #12150 which we concluded to close.",
      "created_at": "2021-06-28T16:07:26Z",
      "updated_at": "2021-06-28T16:07:26Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> unixy shells define SHELL in the environment which points to the executable path of the currently running shell\r\n\r\n___Environment___ is the key word. In Windows no such environment variable, just `$env:COMSPEC`, that is nearest to `$SHELL` in unix OSes, where you could set pwsh as logon shell.",
      "created_at": "2021-06-28T21:27:10Z",
      "updated_at": "2021-06-28T21:27:10Z"
    },
    {
      "author": "sztomi",
      "author_association": "NONE",
      "body": "> could you please explain a little more about the scenario? Are you talking about executables rather than scripts?\r\n\r\n@JamesWTruher  In my case, I'm talking specifically about a python script, but from that perspective it might as well be an executable. My script needs to distinguish between powershell and cmd to call a powershell script or batch script, respectively. \r\n\r\n> It is dup #12150 which we concluded to close.\r\n\r\n@237dmitry it is similar, but I'm not proposing this only for non-windows, I'm proposing this for all operating systems. Current solutions for detecting powershell are hacky at best: https://stackoverflow.com/a/55598796 \r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/55597797/detect-whether-current-shell-is-powershell-in-python\">Detect whether current shell is powershell in python</a></strong></div><div>What's the recommended way to check which shell is my python program running inside? I know I can query os.environ.get('SHELL') for the shell name, but what can I use to determine powershell?</div></blockquote>",
      "created_at": "2021-06-29T10:27:48Z",
      "updated_at": "2021-06-29T10:27:50Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Current solutions for detecting powershell are hacky at best\r\n\r\nChecking `PSModulePath` environment variable is not universal. For example, in my Linux environment there is not this variable. `PSModulePath` is available only inside pwsh when it running.",
      "created_at": "2021-06-29T12:48:59Z",
      "updated_at": "2021-06-29T12:48:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-06-30T14:00:06Z",
      "updated_at": "2021-06-30T14:00:06Z"
    },
    {
      "author": "sztomi",
      "author_association": "NONE",
      "body": "@237dmitry That's kinda my point: the detection without _something_ that PS provides is hacky, brittle. Hence the issue. I don't think you addressed my answer as to why this isn't a dupe, yet closed this issue as such. I can live with a WONTFIX, though I don't think anything said here really explained why this shouldn't happen or provide any meaningful official way of detecting the shell. ",
      "created_at": "2021-07-01T08:12:27Z",
      "updated_at": "2021-07-01T08:12:27Z"
    }
  ],
  "created_at": "2021-06-28T13:42:12Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement",
    "Needs-Triage"
  ],
  "number": 15681,
  "state": "closed",
  "title": "Define SHELL environment variable",
  "updated_at": "2021-07-01T08:12:27Z"
}