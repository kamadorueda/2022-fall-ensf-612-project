{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15543",
  "author": "1F916",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nPut a script file name 0x.ps1 in your $env:path directory, like `C:\\scripts\\`.\r\nTry to call the script:\r\n```powershell\r\nPS C:\\> 0x.ps1\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nThe script should execute\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nThe script is not executed. No output is produced and I'm back at the command prompt.\r\n\r\nIf I prefix the script name with its path or rename it to something that does not look like a hex digit (i.e. \"0xqqq.ps1\" but not \"0xffff1337.ps1\"), it works as expected.\r\nThis also does not appear to happen with script files that only contain decimal numbers like \"1234.ps1\"\r\n\r\nThis works in Windows Powershell (PSVersion 5.1.21390.1) just fine.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.21390\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`0x.ps1` will parse as the numeral literal `0x`, then the property accessor `.` and property name `ps1`. All hexadecimal literals would work similarly; it gets parsed as a number, then a property is queried. The property doesn't exist, so the only result is `$null`.\r\n\r\nThis is by design, I think. A workaround is to use `&` and quote the command name:\r\n\r\n```ps1\r\n& \"0x.ps1\"\r\n```\r\n\r\nAlternately, you can use `` ` `` to escape the period character, if you prefer:\r\n\r\n```ps1\r\n0x`.ps1\r\n```",
      "created_at": "2021-06-08T14:08:23Z",
      "updated_at": "2021-06-08T14:09:18Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I would never expect the script to be run if you just specify it as `0x.ps1`. PowerShell does not run scripts in the current working directory, no matter what the name. If you had typed `0x.ps1>tab>`, Powershell helpfully prepends a path and runs `.\\0x.ps1`. \r\n\r\nI think this is by design.",
      "created_at": "2021-06-08T14:12:13Z",
      "updated_at": "2021-06-08T14:12:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@doctordns it will work if the script is in a directory specified in `$env:PATH` as @1F916 mentions it is.",
      "created_at": "2021-06-08T14:13:00Z",
      "updated_at": "2021-06-08T14:13:00Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "The same with `0b1.ps1` like names (binary). And  like `1e5.ps1`.\r\n\r\nI think anything that can be automatically converted.",
      "created_at": "2021-06-08T14:39:20Z",
      "updated_at": "2021-06-08T14:47:47Z"
    },
    {
      "author": "1F916",
      "author_association": "NONE",
      "body": "> `0x.ps1` will parse as the numeral literal `0x`, then the property accessor `.` and property name `ps1`. All hexadecimal literals would work similarly; it gets parsed as a number, then a property is queried. The property doesn't exist, so the only result is `$null`.\r\n\r\nThe strange thing though is that it does work just fine with strictly decimal names like `1234.ps1`. Also it worked fine in previous versions of PowerShell, so I would consider it a regression. I have a couple of scripts with similar naming that call each other like that and this new behavior breaks them in a - what I would consider - surprising way.\r\n\r\n",
      "created_at": "2021-06-08T14:48:49Z",
      "updated_at": "2021-06-08T14:48:49Z"
    },
    {
      "author": "1F916",
      "author_association": "NONE",
      "body": "This (imo) inconsistent behavior between the handing of decimal numbers and hex/binary/exponential numbers also leads to other surprising behavior:\r\n\r\n```powershell\r\nPS C:\\> 0xb.equals(11)\r\nTrue\r\nPS C:\\> 11.equals(0xb)\r\n11.equals: The term '11.equals' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```",
      "created_at": "2021-06-08T14:54:17Z",
      "updated_at": "2021-06-08T14:54:17Z"
    },
    {
      "author": "1F916",
      "author_association": "NONE",
      "body": "Also the behavior between the `0x` and `0b` prefixes is inconsistent when they are not followed by a number:\r\n\r\n```powershell\r\nPS C:\\> 0x.equals(0)\r\nTrue\r\nPS C:\\> 0b.equals(0)\r\n0b.equals: The term '0b.equals' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS C:\\> 0.equals(0)\r\n0.equals: The term '0.equals' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\nConsequently, if the script in my initial example was named `0b.ps1` (or `0.ps1`), it would work as expected, i.e. as it worked before.",
      "created_at": "2021-06-08T15:09:57Z",
      "updated_at": "2021-06-08T15:09:57Z"
    },
    {
      "author": "1F916",
      "author_association": "NONE",
      "body": "Sorry if I'm spamming here while I'm digging deeper, but another thing I discovered is that calling a script that is called `0GB.ps1` (or `10GB.ps1` etc.) doesn't work either, similar as I lined out in my initial post. Interestingly this one doesn't work in Windows PowerShell 5.1 either.\r\n\r\nWindows PowerShell 5.1 did have support for hex literals as well as KB/MB/GB/... suffixes, but not binary literals. So it doesn't really make sense to me why `0GB.ps1` works in neither Windows PS 5.1 nor PS7, but `0x.ps1` works in Windows PS 5.1 but not PS7. `0.ps1` on the other hand works on both versions. `0b1.ps1` works in Windows PowerShell 5.1 but not PS7.\r\n\r\nI think it would be nice if there was some consistency in the handling of number literals so as to minimize surprise, particularly in light of the other examples I posted above.\r\nFor a command line interpreter, I would generally expect (existing) file names to have precedence over accessing properties of some - but not all - number literals.",
      "created_at": "2021-06-08T15:27:41Z",
      "updated_at": "2021-06-08T15:35:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Thanks for digging a bit deeper here! Yeah, I agree, the fact that certain literals aren't affected, especially binary (which has a similar prefix) seems to suggest that the hex tokenization is subtly broken.\r\n\r\nHard to say exactly how without a deep dive though, but I do agree this could and should be fixed.",
      "created_at": "2021-06-08T16:57:22Z",
      "updated_at": "2021-06-08T16:57:35Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Some time ago there used to be a problem invoking `7z.exe` in PowerShell. You could not just type `7z a ....`.  You had to invoke it using `&` e.g. `& 7z a ...`.  The team fixed that issue but as with most \"fixes\" there can be unintended consequences.",
      "created_at": "2021-06-08T17:14:58Z",
      "updated_at": "2021-06-08T17:15:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The error occurs here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/7cf1ef8c8599a90cd9579c7bb7b7676e097c4938/src/System.Management.Automation/engine/parser/tokenizer.cs#L3985-L3990\r\n\r\nWe append a `0` character to the hex string initially due to a complication in the way that it's parsed. I believe we rely on BigInteger's hexadecimal parsing, which parses as signed hexadecimal by default. Prefixing the `0` forces it to parse as effectively unsigned, or something like that.\r\n\r\nAs a result, the following `if (sb.Length == 0)` check will never be hit, it will always have at least length 1. This issue should be resolved if we update that check on line 3987 to `if (sb.Length == 1)`. Probably worth adding a comment explaining why the check must differ from the binary one not far below.",
      "created_at": "2021-09-30T20:42:46Z",
      "updated_at": "2021-09-30T20:42:46Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "WG: definitely something that could be addressed - marked up for grabs",
      "created_at": "2021-09-30T23:26:32Z",
      "updated_at": "2021-09-30T23:26:32Z"
    }
  ],
  "created_at": "2021-06-08T13:46:00Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 15543,
  "state": "open",
  "title": "Scripts with hexadecimal names not executing without prefixing them with a path",
  "updated_at": "2021-10-01T02:35:56Z"
}