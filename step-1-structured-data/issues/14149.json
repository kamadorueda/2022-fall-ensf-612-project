{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14149",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nNote: \r\n\r\n* The problem surfaces whenever file / directory names containing `[` and `]` are completed.\r\n\r\n* E.g., a file literally named `foo[1].txt` typically tab-completes as ``foo`[1`].txt`` rather than to the actual name, using the escaping rules of a _wildcard pattern_.\r\n\r\nCurrently, the escaping logic when filenames are tab-completed appears to be as follows:\r\n\r\n* Escape _by default_,\r\n\r\n* _except_ when binding to a parameter literally named `-LiteralPath` (using that name as an _alias_ is not recognized).\r\n\r\nInstead, **I propose the following logic:**\r\n\r\n* Do _not_ escape by default,\r\n\r\n* except when the target parameter is decorated with the `[SupportsWildCards()]` attribute.\r\n\r\n**Benefits and impact:**\r\n\r\n* For command parameters that properly decorate their wildcard-based parameters with this attribute - notably `-Path`, - the behavior won't change (escaping will be applied); among the built-in cmdlets that seems to be true (which a quick look at `Get-Item`, `Get-ChildItem`, `Get-Content`, and `Select-String` tells me)\r\n\r\n* In all other cases, _unescaped_ completion will take place.\r\n\r\n  * This allows command authors to control how filenames are completed, by indicating explicitly when wildcard support is desired.\r\n\r\n  * If they want literal completion, no extra effort is needed, which avoids the awkward current workaround of having to name a parameter `-LiteralPath`, which isn't always appropriate.\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-11-19T21:18:58Z",
  "number": 14149,
  "state": "open",
  "title": "Tab completion: only complete filenames with wildcard-pattern escaping when binding to [SupportsWildcards()] parameters",
  "updated_at": "2020-11-20T02:32:41Z"
}