{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16728",
  "author": "superbonaci",
  "body": "### Summary of the new feature / enhancement\n\n`PowerShell Core` should be renamed to `UltraShell`, otherwise it's mistaken with `Windows PowerShell`. Since this project is not an update of the other (with full retro-compatibility) they shouldn't be called the same. It's a sort of impersonation and I feel is misleading for the non techie user. In fact I know most people is not aware they are different programs.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-02-12T12:00:44Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Since this project is not an update of the other (with full retro-compatibility) they shouldn't be called the same.\r\n\r\nMSFT explicitly say that it is _next version_ of PowerShell - Windows PowerShell version is 5 and PowerShell version was 6 and now 7.\r\nKeeping compatibility is main priority. \r\nNo doubts PowerShell vNext will replace  Windows PowerShell 5.1 in future.",
      "created_at": "2022-01-11T04:05:43Z",
      "updated_at": "2022-01-11T04:05:43Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "I've opened several bugs due to script incompatibility between version 5 and 7 (#12446 #12443). Keeping compatibility \"priority\" is not any guarantee of any kind. It's like `python2` and `python3`.",
      "created_at": "2022-01-11T04:10:27Z",
      "updated_at": "2022-01-11T04:10:27Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "The names are \"PowerShell\" and \"Windows PowerShell\". The executables have different names pwsh  vs PowerShell. \r\n\r\nNeither of the examples you quoted are incompatibilities. - both are user errors an .EXE wasn't visible, and a script hadn't been installed (to the right place at least).\r\n \r\nGenuine incompatibilities do exist, mostly with modules which require an earlier version of .NET - which has retained its name.  \r\n",
      "created_at": "2022-01-11T13:15:45Z",
      "updated_at": "2022-01-11T13:15:45Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> Neither of the examples you quoted are incompatibilities. - both are user errors an .EXE wasn't visible, and a script hadn't been installed (to the right place at least).\r\n\r\nCheck this one #16731\r\n",
      "created_at": "2022-01-11T16:28:35Z",
      "updated_at": "2022-01-11T16:28:35Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > Neither of the examples you quoted are incompatibilities. - both are user errors an .EXE wasn't visible, and a script hadn't been installed (to the right place at least).\r\n> \r\n> Check this one #16731\r\n\r\nPretty sure that depends on being on .NET Framework 4. You need to ask the person whose code you're cutting and pasting if they have a version for .NET 6. \r\n",
      "created_at": "2022-01-11T16:39:22Z",
      "updated_at": "2022-01-11T16:39:22Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "> Pretty sure that depends on being on .NET Framework 4. You need to ask the person whose code you're cutting and pasting if they have a version for .NET 6.\r\n\r\nCan't the PowerShell script be set to use .NET Framework version 4, or to launch older versions of PowerShell? If I update for .NET 6 it will break backwards compatibility, while @iSazonov just said \"Keeping compatibility is main priority\". This is a mess and not well designed.",
      "created_at": "2022-01-11T16:44:39Z",
      "updated_at": "2022-01-11T16:48:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Keeping compatibility with PowerShell scripts themselves as much as we can has been a priority, yes. However, you're talking about a .NET Core / .NET application being compatible with .NET Framework 4, which has been out of support for many years now (unless you mean 4.8, which I believe is the only version of 4.x still in support?). \r\n\r\n.NET Framework applications and libraries are by and large simply not compatible with newer .NET versions; that's not something PowerShell can do anything about. If you want to run something under Windows PowerShell you can do so, and if you're shipping a module you can specify in the manifest that it only supports specific PowerShell versions or platforms.\r\n\r\nIf the module manifest does not specify supporting the Core edition of PowerShell, pwsh will typically attempt to load the module in 'windows compatibility mode', where it will actually load the module in Windows PowerShell and communicate between the processes to allow you to use it. This isn't perfect, but it's the closest you'll get without just running Windows PowerShell.",
      "created_at": "2022-01-11T17:45:19Z",
      "updated_at": "2022-01-11T17:45:19Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "Also the shortcut should be renamed, from `PowerShell 7 (x64).lnk` to `PowerShell Core 7 (x64).lnk` (in this request `PowerShell Ultra 7 (x64).lnk`). Same for 32 bits version and other architectures.",
      "created_at": "2022-01-11T17:48:46Z",
      "updated_at": "2022-01-11T17:52:20Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > Pretty sure that depends on being on .NET Framework 4. You need to ask the person whose code you're cutting and pasting if they have a version for .NET 6.\r\n> \r\n> Can't the PowerShell script be set to use .NET Framework version 4, or to launch older versions of PowerShell? If I update for .NET 6 it will break backwards compatibility, while @iSazonov just said \"Keeping compatibility is main priority\". This is a mess and not well designed.\r\n\r\nWindows PowerShell 5 is written and compiled for .NET Framework 4 \r\nPowerShell 7.2 is is written and compiled for .NET 6\r\n\r\nNo progress comes with absolute 100% guaranteed compatibility. People find old code on line that they don't understand, paste it into the current version and get upset that the two don't work together. 20 years after .NET was introduced I still hear people complaining that Microsoft should have stayed with VB6  (VB was only 7 years when the shift to .NET happened).  Shifting from earlier version of .NET to the current cross platform and open source version has caused some pain.  Progress isn't free, sadly. \r\n\r\n\r\n> Also the shortcut should be renamed, from `PowerShell 7 (x64).lnk` to `PowerShell Core 7 (x64).lnk`. Same for 32 bits version and other architectures.\r\n\r\n\r\nGo back and read the documents about why the word \"core\" was removed when 6 became 7. \r\n\r\n",
      "created_at": "2022-01-11T18:01:27Z",
      "updated_at": "2022-01-11T18:01:27Z"
    },
    {
      "author": "superbonaci",
      "author_association": "NONE",
      "body": "If I must read documents it means it's not intuitive. Hence I request it's renamed to Ultra or whatever, but not just PowerShell.",
      "created_at": "2022-01-11T18:15:19Z",
      "updated_at": "2022-01-11T18:15:19Z"
    },
    {
      "author": "ImportTaste",
      "author_association": "NONE",
      "body": "I agree with the sentiment that dropping 'Core' from the title has made it confusing to properly distinguish between the two, but calling the project 'UltraShell' is just silly.",
      "created_at": "2022-02-10T18:58:27Z",
      "updated_at": "2022-02-10T18:58:27Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "At its heart, PowerShell 7 (aka PowerShell, aka PowerShell Core) is the same PowerShell that is in the core of Windows PowerShell. Cmdlets, objects, the pipeline - all work broadly the same (arguably some work better in PowerShell than in Windows PowerShell). IMHO, any further renaming is fruitless.",
      "created_at": "2022-02-10T19:07:04Z",
      "updated_at": "2022-02-10T19:07:04Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-02-12T12:00:43Z",
      "updated_at": "2022-02-12T12:00:43Z"
    }
  ],
  "created_at": "2022-01-11T03:48:48Z",
  "number": 16728,
  "state": "closed",
  "title": "Feature request: rename PowerShell Core to UltraShell",
  "updated_at": "2022-02-12T12:00:44Z"
}