{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8421",
  "author": "mklement0",
  "body": "Standard Unix signal `SIGPIPE` is sent to processes that attempt to write to a _broken pipe_, i.e., to a pipe whose _reading_ process has terminated.\r\n\r\nThis is not necessarily an error condition, as standard utilities such as `head` simply exit once they've  received enough input, which causes the upstream command to eventually receive `SIGPIPE` on attempting to write to a pipe that no one's reading from anymore.\r\n\r\nThe default `SIGPIPE` behavior on Unix-like platforms is to _quietly terminate_ the writing process on attempting to write to a broken pipe, and to have it report exit code `141` (which is `128` (termination by signal)  + `13`, `13` being `SIGPIPE`'s number).\r\n\r\nThis behavior is unexpectedly _deactivated_ in PowerShell for _child processes too_, because the `SIGPIPE` signal is effectively turned off (ignored).  \r\n\r\n**In short: External utilities may exhibit unexpected behavior when run from PowerShell.**\r\n\r\nNote: \r\n* The problem may ultimately stem from a layer _below_ PowerShell (CoreFx / CoreCLR)\r\n* It's also worth looking into what additional signals are affected.\r\n* It makes sense for PowerShell _itself_ to custom-handle `SIGPIPE` (so that it isn't quietly terminated as a whole when writing to a broken pipe), but it should restore default signal handling for _child_ processes, i.e., external programs.\r\n\r\n# Steps to reproduce\r\n\r\nOn Unix-like platforms:\r\n\r\n```powershell\r\nyes  | head -n 1; 'done'\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\ny\r\ndone\r\n```\r\n\r\nThat is, `head -n 1` should receive the 1st `y` line output by utility `yes`, exit, and eventually cause `yes` to be terminated quietly due to attempting to write to a broken pipe, so that the next statement `'done'` is executed.\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\ny     #  \"HANGS\" here - `yes` keeps running\r\n```\r\n\r\nThat is, `yes` never receives `SIGINT` and therefore keeps running _indefinitely_.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.2 on macOS 10.14.1\r\nPowerShell Core v6.2.0-preview.2 on Ubuntu 18.04.1 LTS\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference https://github.com/PowerShell/PowerShell/pull/2450\r\n",
      "created_at": "2018-12-08T14:02:06Z",
      "updated_at": "2018-12-08T14:02:16Z"
    }
  ],
  "created_at": "2018-12-07T05:10:32Z",
  "number": 8421,
  "state": "open",
  "title": "Unix signal SIGPIPE is unexpectedly turned off (ignored) for child processes",
  "updated_at": "2018-12-11T03:43:37Z"
}