{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5202",
  "author": "alx9r",
  "body": "This behavior exists since at least version 4, but I have diagnosed this as the cause of countless unexpected failures so I'm proposing that it be addressed somehow.\r\n\r\n`$PSBoundParameters` seems to be customarily used to pass parameters from one function to another function whose interface is substantially similar.  The problem is that `$PSBoundParameters` seems to retain the _last_ value bound to each parameter even if no value was bound to the parameter for the current record.  The presence of such vestigial arguments creates problems for using `$PSBoundParameters` as arguments to another function with the same interface because it can easily contain unexpected and invalid combinations of arguments.  \r\n\r\nAnytime all of the following are true, a latent bug probably exists:\r\n\r\n* `$PSBoundParameters` is used to pass parameters to a function with the expectation that parameter binding with the callee would occur in the same manner as occurred for the caller.\r\n* The function accepts pipeline input on two or more parameters where one or more parameters may be omitted.\r\n\r\nFWIW, I encounter such bugs approximately one a week.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nclass a {}\r\nclass b {}\r\n\r\nfunction f {\r\n    param\r\n    (\r\n        [Parameter(ParameterSetName='a',ValueFromPipeline)][a]$A,\r\n        [Parameter(ParameterSetName='b',ValueFromPipeline)][b]$B\r\n    )\r\n    process\r\n    {\r\n        try\r\n        {\r\n            g @PSBoundParameters\r\n        }\r\n        catch\r\n        {\r\n            Write-Host ($PSBoundParameters | Out-String)\r\n            throw\r\n        }\r\n    }\r\n}\r\n\r\nfunction g {\r\n    param\r\n    (\r\n        [Parameter(ParameterSetName='a',ValueFromPipeline)][a]$A,\r\n        [Parameter(ParameterSetName='b',ValueFromPipeline)][b]$B\r\n    )\r\n    process { $A,$B }\r\n}\r\n\r\n[a]::new(),[b]::new() | f\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\na\r\nb\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\na\r\n\r\nKey Value\r\n--- -----\r\nA   a\r\nB   b\r\n\r\ng : Parameter set cannot be resolved using the specified named parameters.\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:14 char:13\r\n+             g @PSBoundParameters\r\n+             ~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [g], ParentContainsErrorRec\r\n   ordException\r\n    + FullyQualifiedErrorId : AmbiguousParameterSet,g\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.8\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.8\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "FWIW this can be worked around using [a somewhat cumbersome pair of functions](https://github.com/alx9r/BootstraPS/blob/30bf72d6cd1605c3aaedf610374810262972c94f/BootstraPS.psm1#L66-L119).  With the fix applied, a function looks something like this:\r\n\r\n```PowerShell\r\nfunction f\r\n{\r\n    param\r\n    (\r\n         # bunch of pipeline parameters\r\n    )\r\n   begin\r\n    {\r\n        $CommandLineParameters = $PSBoundParameters | BeginFixPSBoundParameters\r\n    }\r\n    process\r\n    {\r\n        $BoundParameters = $CommandLineParameters | ProcessFixPSBoundParameters $PSBoundParameters\r\n        # use @BoundParameters instead of @PSBoundParameters in the process block\r\n    }\r\n}\r\n```\r\n\r\nYou can find a [real-world example here](https://github.com/alx9r/BootstraPS/blob/30bf72d6cd1605c3aaedf610374810262972c94f/BootstraPS.psm1#L2822-L2879).",
      "created_at": "2017-11-20T00:06:44Z",
      "updated_at": "2017-11-20T00:06:44Z"
    },
    {
      "author": "tlindsay42",
      "author_association": "CONTRIBUTOR",
      "body": "Just ran into this one too and was able to duplicate in v6.0.2 and v6.1.0-preview.4.  \r\n\r\n# Additional Context\r\n\r\n* I am **only** able to duplicate this issue if multiple ParameterSets are utilized from the pipeline input object set.\r\n* I am **not** able to duplicate this issue when the same ParameterSet is utilized for all pipeline input objects.\r\n* I can duplicate this issue with pipeline input defined by either property name, by value, or a combination thereof.\r\n* I can duplicate this issue with parameters set to standard types such as `[string]` or `[int]`, not just custom classes.\r\n* The first time a parameter is invoked in the pipeline, all subsequent calls to `$PSBoundParameters` list that parameter with that value, regardless of whether that same parameter was actually bound or not, or set to a different value. \r\n\r\n# Environments\r\n\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
      "created_at": "2018-08-11T23:07:45Z",
      "updated_at": "2018-08-11T23:07:45Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I just ran into this one when piping objects that had different properties into a function. This caused the values from the first object to show up in the PSBoundParameters of the second object.\r\n\r\nHere is an example that reproduces the issue:\r\n\r\n    $list = @(\r\n        [pscustomobject]@{\r\n            Name='first';\r\n            MaximumVersion='1.1.1'\r\n        },\r\n        [pscustomobject]@{\r\n            Name='second';\r\n            MinimumVersion='2.2.2'\r\n        }\r\n    )\r\n    function pipetest\r\n    {\r\n        [cmdletbinding()]\r\n        param(\r\n            [Parameter(ValueFromPipelineByPropertyName=$true,\r\n                    Position=0)]\r\n            [ValidateNotNullOrEmpty()]\r\n            [string]\r\n            $Name,\r\n\r\n            [Parameter(ValueFromPipelineByPropertyName=$true)]\r\n            [ValidateNotNull()]\r\n            [string]\r\n            $MinimumVersion,\r\n\r\n            [Parameter(ValueFromPipelineByPropertyName=$true)]\r\n            [ValidateNotNull()]\r\n            [string]\r\n            $MaximumVersion\r\n        )\r\n        process\r\n        {\r\n            Write-Verbose -Verbose ('Parameters        name [{0}] min [{1}] max [{2}]' -f $Name, $MinimumVersion,$MaximumVersion)\r\n            Write-Verbose -Verbose ('PSBoundParameters name [{0}] min [{1}] max [{2}]' -f $PSBoundParameters.Name, $PSBoundParameters.MinimumVersion,$PSBoundParameters.MaximumVersion)\r\n        }\r\n    }\r\n\r\n    $list | pipetest\r\n\r\nIn this example, I have 2 objects where one specifies a min version and the other specifies the max version. The verbose output show both the raw parameters and the `$psboundparameters`\r\n\r\n    VERBOSE: Parameters        name [first] min [] max [1.1.1]\r\n    VERBOSE: PSBoundParameters name [first] min [] max [1.1.1]\r\n    VERBOSE: Parameters        name [second] min [2.2.2] max []\r\n    VERBOSE: PSBoundParameters name [second] min [2.2.2] max [1.1.1]\r\n\r\nThe second object looks like it has a max version if you look at the PSBoundParameters but this is a carry over value from the first object. \r\n\r\nI ran into this issue when trying to pipe a list of module into `Find-Module` and getting validation errors on the version numbers.",
      "created_at": "2019-03-06T10:34:56Z",
      "updated_at": "2019-03-06T10:34:56Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like the same $PSBoundParameters dictionary is reused over and over for each loop of the process block. So changes to the dictionary will persist if a parameter is not overridden.\r\n\r\nIf you return the psboundparameters out of a function, you can see that they are all a reference to the same thing.\r\n\r\n    function pipetest2\r\n    {\r\n        [cmdletbinding()]\r\n        param(\r\n            [Parameter(ValueFromPipelineByPropertyName)]\r\n            $Name,\r\n            [Parameter(ValueFromPipelineByPropertyName)]\r\n            $MinimumVersion,\r\n            [Parameter(ValueFromPipelineByPropertyName)]\r\n            $MaximumVersion\r\n        )\r\n        process\r\n        {\r\n            $PSBoundParameters\r\n        }\r\n    }\r\n    $output = $list | pipetest2\r\n    $output[0] -eq $output[1]\r\n",
      "created_at": "2019-03-07T00:28:51Z",
      "updated_at": "2019-03-07T00:28:51Z"
    }
  ],
  "created_at": "2017-10-23T15:26:46Z",
  "labels": [
    "Issue-Bug"
  ],
  "number": 5202,
  "state": "open",
  "title": "$PSBoundParameters contains vestigial arguments from prior records",
  "updated_at": "2019-03-07T00:28:51Z"
}