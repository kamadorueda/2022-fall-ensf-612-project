{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16880",
  "author": "EricBuist",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nIn Powershell Core 7.2.1 on Windows 10, type \"help\" command and press enter.\n\n### Expected behavior\n\n```console\nThe \"help\" command should display information about how to use Powershell.\n```\n\n\n### Actual behavior\n\n```console\nThe command displays the following error message.\r\n\r\nInvalidOperation:\r\nLine |\r\n 124 |              $consoleWidth = [System.Math]::Max([System.Console]::Wind \u2026\r\n     |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot invoke method. Method invocation is supported only on core types in this language mode.\r\nOut-String:\r\nLine |\r\n 139 |  \u2026         $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pa \u2026\r\n     |                                              ~~~~~~~~~~~~~~~~~~~\r\n     | Cannot validate argument on parameter 'Width'. The -1 argument is less than the minimum allowed range of 2. Supply an argument that is greater than or equal to 2 and then try the command again.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPowershell Core 7.2.1\r\nWindows 10 21H2\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "what is `$help` variable?\r\n\r\n> The \"help\" command should display information about how to use Powershell.\r\n\r\n`help` command is alias for `Get-Help` cmdlet and without arguments shows common information how to use help system.",
      "created_at": "2022-02-14T15:04:34Z",
      "updated_at": "2022-02-14T15:04:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's not an alias, it's a built in function. So that code must be internal to the function.\r\n\r\nFrom the error, it looks like you're running in constrained language mode. You'll probably need to use `Get-Help` rather than the builtin `help` function in that mode.",
      "created_at": "2022-02-14T16:14:32Z",
      "updated_at": "2022-02-14T16:14:32Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": ">  `Method invocation is supported only on core types in this language mode.`\r\n\r\nThat message normally means you have put PowerShell into a restricted language mode. \r\nI couldn't repro the error even if select restricted (or no) language. \r\n\r\nHow are you starting PowerShell. If you just run pwsh -noProfile do you get the same error ? And what does \r\n`$ExecutionContext.SessionState.LanguageMode ` report ?\r\n\r\n\r\n",
      "created_at": "2022-02-14T16:17:33Z",
      "updated_at": "2022-02-14T16:17:33Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> It's not an alias, it's a built in function.\r\n\r\nI've always been sure that this is an alias. Very similar to the proxy function for Get-Help:\r\n```\r\n> gc function:help\r\n\r\n<#\r\n.FORWARDHELPTARGETNAME Get-Help\r\n.FORWARDHELPCATEGORY Cmdlet\r\n#>\r\n\r\n> [Management.Automation.ProxyCommand]::Create((Get-Command Get-Help))\r\n\r\n<#\r\n.ForwardHelpTargetName Microsoft.PowerShell.Core\\Get-Help\r\n.ForwardHelpCategory Cmdlet\r\n#>\r\n```",
      "created_at": "2022-02-14T16:51:10Z",
      "updated_at": "2022-02-14T16:51:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is what I have by default for `Get-Content function:help`. It's not a simple proxy function, it does additional handling for pagers and a few other things.\r\n\r\n<details>\r\n<summary>Expand for code</summary>\r\n\r\n```powershell\r\n<#\r\n.FORWARDHELPTARGETNAME Get-Help\r\n.FORWARDHELPCATEGORY Cmdlet\r\n#>\r\n[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='https://go.microsoft.com/fwlink/?LinkID=113316')]\r\nparam(\r\n    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]\r\n    [string]\r\n    ${Name},\r\n\r\n    [string]\r\n    ${Path},\r\n\r\n    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','DscResource','Class','Configuration')]\r\n    [string[]]\r\n    ${Category},\r\n\r\n    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]\r\n    [switch]\r\n    ${Detailed},\r\n\r\n    [Parameter(ParameterSetName='AllUsersView')]\r\n    [switch]\r\n    ${Full},\r\n\r\n    [Parameter(ParameterSetName='Examples', Mandatory=$true)]\r\n    [switch]\r\n    ${Examples},\r\n\r\n    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]\r\n    [string[]]\r\n    ${Parameter},\r\n\r\n    [string[]]\r\n    ${Component},\r\n\r\n    [string[]]\r\n    ${Functionality},\r\n\r\n    [string[]]\r\n    ${Role},\r\n\r\n    [Parameter(ParameterSetName='Online', Mandatory=$true)]\r\n    [switch]\r\n    ${Online},\r\n\r\n    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]\r\n    [switch]\r\n    ${ShowWindow})\r\n\r\n    # Display the full help topic by default but only for the AllUsersView parameter set.\r\n    if (($psCmdlet.ParameterSetName -eq 'AllUsersView') -and !$Full) {\r\n        $PSBoundParameters['Full'] = $true\r\n    }\r\n\r\n    # Nano needs to use Unicode, but Windows and Linux need the default\r\n    $OutputEncoding = if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {\r\n        [System.Text.Encoding]::Unicode\r\n    } else {\r\n        [System.Console]::OutputEncoding\r\n    }\r\n\r\n    $help = Get-Help @PSBoundParameters\r\n\r\n    # If a list of help is returned or AliasHelpInfo (because it is small), don't pipe to more\r\n    $psTypeNames = ($help | Select-Object -First 1).PSTypeNames\r\n    if ($psTypeNames -Contains 'HelpInfoShort' -Or $psTypeNames -Contains 'AliasHelpInfo')\r\n    {\r\n        $help\r\n    }\r\n    elseif ($help -ne $null)\r\n    {\r\n        # By default use more on Windows and less on Linux.\r\n        if ($IsWindows) {\r\n            $pagerCommand = 'more.com'\r\n            $pagerArgs = $null\r\n        }\r\n        else {\r\n            $pagerCommand = 'less'\r\n            # PSNativeCommandArgumentPassing arguments should be constructed differently.\r\n            if ($EnabledExperimentalFeatures -contains 'PSNativeCommandArgumentPassing') {\r\n                $pagerArgs = '-s','-P','Page %db?B of %D:.\\. Press h for help or q to quit\\.'\r\n            }\r\n            else {\r\n                $pagerArgs = '-Ps\"Page %db?B of %D:.\\. Press h for help or q to quit\\.$\"'\r\n            }\r\n        }\r\n\r\n        # Respect PAGER environment variable which allows user to specify a custom pager.\r\n        # Ignore a pure whitespace PAGER value as that would cause the tokenizer to return 0 tokens.\r\n        if (![string]::IsNullOrWhitespace($env:PAGER)) {\r\n            if (Get-Command $env:PAGER -ErrorAction Ignore) {\r\n                # Entire PAGER value corresponds to a single command.\r\n                $pagerCommand = $env:PAGER\r\n                $pagerArgs = $null\r\n            }\r\n            else {\r\n                # PAGER value is not a valid command, check if PAGER command and arguments have been specified.\r\n                # Tokenize the specified $env:PAGER value. Ignore tokenizing errors since any errors may be valid\r\n                # argument syntax for the paging utility.\r\n                $errs = $null\r\n                $tokens = [System.Management.Automation.PSParser]::Tokenize($env:PAGER, [ref]$errs)\r\n\r\n                $customPagerCommand = $tokens[0].Content\r\n                if (!(Get-Command $customPagerCommand -ErrorAction Ignore)) {\r\n                    # Custom pager command is invalid, issue a warning.\r\n                    Write-Warning \"Custom-paging utility command not found. Ignoring command specified in `$env:PAGER: $env:PAGER\"\r\n                }\r\n                else {\r\n                    # This approach will preserve all the pagers args.\r\n                    $pagerCommand = $customPagerCommand\r\n                    $pagerArgs = if ($tokens.Count -gt 1) {$env:PAGER.Substring($tokens[1].Start)} else {$null}\r\n                }\r\n            }\r\n        }\r\n\r\n        $pagerCommandInfo = Get-Command -Name $pagerCommand -ErrorAction Ignore\r\n        if ($pagerCommandInfo -eq $null) {\r\n            $help\r\n        }\r\n        elseif ($pagerCommandInfo.CommandType -eq 'Application') {\r\n            # If the pager is an application, format the output width before sending to the app.\r\n            $consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)\r\n\r\n            if ($pagerArgs) {\r\n                # Start the pager arguments directly if the PSNativeCommandArgumentPassing feature is enabled.\r\n                # Otherwise, supply pager arguments to an application without any PowerShell parsing of the arguments.\r\n                # Leave environment variable to help user debug arguments supplied in $env:PAGER.\r\n                if ($EnabledExperimentalFeatures -contains 'PSNativeCommandArgumentPassing') {\r\n                    $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand $pagerArgs\r\n                }\r\n                else {\r\n                    $env:__PSPAGER_ARGS = $pagerArgs\r\n                    $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand --% %__PSPAGER_ARGS%\r\n                }\r\n            }\r\n            else {\r\n                $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand\r\n            }\r\n        }\r\n        else {\r\n            # The pager command is a PowerShell function, script or alias, so pipe directly into it.\r\n            $help | & $pagerCommand $pagerArgs\r\n        }\r\n    }\r\n```\r\n\r\n</details>",
      "created_at": "2022-02-14T17:42:44Z",
      "updated_at": "2022-02-14T17:42:44Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I have so. I did not paste full output. I can't figure out what is causing the error in:\r\n```\r\n$consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)\r\n```\r\n\r\n`[System.Math]` is not a core type?",
      "created_at": "2022-02-14T18:48:43Z",
      "updated_at": "2022-02-14T19:19:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\"Core type\" just means \"it's not one of the pre-approved types defined by the Restricted Language mode\". Offhand I'm not sure what they are, but it's likely just PSObject and a scant handful of others.\r\n\r\nRestricted Language mode is pretty much by design useless.",
      "created_at": "2022-02-14T19:30:07Z",
      "updated_at": "2022-02-14T19:30:07Z"
    },
    {
      "author": "EricBuist",
      "author_association": "NONE",
      "body": "Hi,\nI tried get-help and it works correctly. The \"help\" command, however, shows\nthe error message.\n",
      "created_at": "2022-02-16T00:37:58Z",
      "updated_at": "2022-02-16T00:38:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`GetHelpPagingFunctionText()` creates the function in InitialSessionState so we could set-restore LanguageMode.",
      "created_at": "2022-02-16T04:27:11Z",
      "updated_at": "2022-02-16T04:27:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The Engine WG reviewed this today. We agree that this function should either work the same in CLM or at the very least emit a better error message. We're marking this as up for grabs.",
      "created_at": "2022-02-18T00:05:49Z",
      "updated_at": "2022-02-18T00:05:49Z"
    },
    {
      "author": "CarloToso",
      "author_association": "CONTRIBUTOR",
      "body": "I tested this issue in Powershell 7.2.7\r\n`$ExecutionContext.SessionState.LanguageMode = \"ConstrainedLanguage\"`\r\n`help`\r\n`Get-Help`\r\n\r\nBoth commands worked correctly, no errors",
      "created_at": "2022-10-27T13:15:25Z",
      "updated_at": "2022-10-27T13:15:48Z"
    }
  ],
  "created_at": "2022-02-14T14:19:02Z",
  "number": 16880,
  "state": "open",
  "title": "\"help\" command triggers an error",
  "updated_at": "2022-10-27T13:15:48Z"
}