{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6322",
  "author": "alx9r",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction a {\r\n    param( [Parameter(ValueFromPipeline)]$InputObject )\r\n    process {\r\n        try { $InputObject }\r\n        finally {\r\n            [console]::WriteLine('a finally')\r\n            [console]::WriteLine(\"a Stopping: $($PSCmdlet.Stopping)\")\r\n        }\r\n    }\r\n}\r\nAdd-Type '\r\n    using System;\r\n    using System.Management.Automation; \r\n    \r\n    [Cmdlet(\"Invoke\", \"b\")]\r\n    public class b : Cmdlet \r\n    {\r\n        [Parameter(ValueFromPipeline=true)]\r\n        public object InputObject { get; set; }\r\n\r\n        protected override void ProcessRecord()\r\n        { \r\n            WriteObject(InputObject,true);\r\n        }\r\n\r\n        protected override void StopProcessing()\r\n        {\r\n            Console.WriteLine(\"b StopProcessing\");\r\n            Console.WriteLine(\"b Stopping: {0}\",Stopping);\r\n        }\r\n    }' -PassThru | % Assembly | Import-Module\r\nSet-Alias b Invoke-b\r\n\r\n1 | a | b | % { sleep 10 } # press Ctrl-C here\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nb StopProcessing\r\nb Stopping: True\r\na finally\r\na Stopping: True\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nb StopProcessing\r\nb Stopping: True\r\na finally\r\na Stopping: False\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Interesting that\r\n```\r\n1 |  b | b | % { sleep 10 } # press Ctrl-C here\r\n\r\nb StopProcessing\r\nb Stopping: True\r\nb StopProcessing\r\nb Stopping: False\r\n```",
      "created_at": "2018-03-12T20:27:19Z",
      "updated_at": "2018-03-12T20:27:19Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "and  \r\n```\r\n1 |  a | a | % { sleep 10 } # press Ctrl-C here\r\n\r\na finally\r\na Stopping: False\r\na finally\r\na Stopping: False\r\n```\r\n",
      "created_at": "2018-03-12T20:28:23Z",
      "updated_at": "2018-03-12T20:28:36Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@powercode I'm not seeing that on my computer for `1 | b | b | % { sleep 10 }`.  I see `Stopping: True` for both invocations of `b`:\r\n\r\n```PowerShell\r\n1 | b | b | % { sleep 10 } # press Ctrl-C here\r\nb StopProcessing\r\nb Stopping: True\r\nb StopProcessing\r\nb Stopping: True\r\n```",
      "created_at": "2018-03-12T23:57:09Z",
      "updated_at": "2018-03-12T23:57:09Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Weird. Of course it doesn't really matter what `Stopping` is set to in `StopProcessing()`. If you're in `StopProcessing()`, you're stopping by definition :-)  (Some background: this method is called on the break handler thread, not the pipeline thread with the intent that be able to unblock the pipeline thread if it's hung doing IO or some such.) ",
      "created_at": "2018-03-13T01:02:40Z",
      "updated_at": "2018-03-13T01:02:40Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@BrucePay \r\n\r\n>Some background: this method is called on the break handler thread, not the pipeline thread with the intent that be able to unblock the pipeline thread if it's hung doing IO or some such.\r\n\r\nOh I see.  Is that why there is no analogous `stop {}` block available in PSCmdlets?\r\n\r\nBecause PSCmdlets have no `stop{}` block, but `finally{}` does run on <kbd>ctrl</kbd>-<kbd>C</kbd>, I was hoping to be able to predicate certain cleanup tasks on `$PSCmdlet.Stopping`.",
      "created_at": "2018-03-15T01:26:04Z",
      "updated_at": "2018-03-15T01:26:18Z"
    }
  ],
  "created_at": "2018-03-06T17:44:02Z",
  "labels": [],
  "number": 6322,
  "state": "open",
  "title": "$PSCmdlet.Stopping is false when stopping",
  "updated_at": "2018-03-15T01:26:18Z"
}