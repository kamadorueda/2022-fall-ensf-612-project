{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12701",
  "author": "anaisbetts",
  "body": "![image](https://user-images.githubusercontent.com/1396/82124459-00853b80-9754-11ea-8779-9dfe77ece23d.png)\r\n\r\nPlease don't nag users *every time* they open a shell for a *0.0.1* release - if you pop this dialog every time you make the smallest release, and you (as you should!) make many small incremental releases, this will effectively mean that the vast majority of your users are being constantly harassed to upgrade, all the time.\r\n\r\nA few solutions:\r\n\r\n- Lower the user's time / attention \"cost\" of upgrading, so that the cost of upgrading is a single \"do it\" click or copy-paste command (`Upgrade-PowerShell` command maybe?)\r\n\r\n- Make the nag proportional to the size of the update - 0.0.1 releases shouldn't get the same real-estate as \"Check out PowerShell 8.0!\"\r\n\r\n- Make the nag only show up once per day instead of every single invocation",
  "closed_at": "2020-07-19T00:00:19Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> 0.0.1 releases shouldn't get the same real-estate as \"Check out PowerShell 8.0!\"\r\n\r\nThis is interesting, since patch releases often have security patches in them (particularly from .NET). In this sense, patch releases are much more important than major version releases to the people seeing them. To this end, I would imagine there are many users who are on PS 7 LTS who don't want a notification for PS 7.1 or 8, but who really need to see one for PS 7.0.1. I believe this is exactly how the LTS update channel is configured to function currently.\r\n\r\nI think the assumption in the issue here is that bigger version increment means that there's more goodness means that you should be more likely to upgrade. But really it's the opposite. Smaller version increment means more relevant to your current installation means you have more to gain and less to lose by upgrading.\r\n\r\nThe version update notification isn't marketing, it's PowerShell's current solution to the update problem given that its installation is managed in different ways across different platforms.",
      "created_at": "2020-05-16T20:39:41Z",
      "updated_at": "2020-05-16T20:45:35Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You can disable the update check by setting a user or system environment variable called `POWERSHELL_UPDATECHECK` to `0` but I wouldn't recommend doing that unless this **really** bothers you.  :-)",
      "created_at": "2020-05-16T20:40:38Z",
      "updated_at": "2020-05-16T20:52:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> pop this dialog every time you make the smallest release\r\n\r\nTo put this into perspective, if you were on the stable 6.2.0 release (3/28/2019), and these messages popped up for 6.2.x, you would have gotten 5 notifications in the past ~15 months.  That's an average about one upgrade notification every 3 months.  That is, of course, assuming you upgrade.  :-)",
      "created_at": "2020-05-16T20:50:20Z",
      "updated_at": "2020-05-16T20:54:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Make the nag only show up once per day instead of every single invocation\r\n\r\nYeah I thought we already did this. /cc @daxian-dbw @SteveL-MSFT \r\n\r\n> so that the cost of upgrading is a single \"do it\" click or copy-paste command (Upgrade-PowerShell command maybe?)\r\n\r\nI think we all want that, but it's currently not easy to solve. Unfortunately I don't know enough about the issues at play to conjecture (@joeyaiello might). On macOS and Linux package managers are how we resolve this. On Windows, MSIX installations in the Store also resolve this. But MSI and zip installations have no package management concept. The diversity of installation vectors certainly makes an `Update-PowerShell` command more complex. I believe there is a will for a solution here though.",
      "created_at": "2020-05-16T20:52:28Z",
      "updated_at": "2020-05-16T20:52:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Yeah I thought we already did this\r\n\r\nWe have a code only for delaying the check in network. (See `CheckForUpdates()` method.)\r\n\r\n>  The diversity of installation vectors certainly makes an Update-PowerShell command more complex.\r\n\r\nInteresting, how does VS Code implement this?",
      "created_at": "2020-05-17T18:34:29Z",
      "updated_at": "2020-05-17T18:34:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> how does VS Code implement this?\r\n\r\nAh that's a good question. It basically presumes you installed with the MSI. ~~On macOS and Linux it just reminds you; it won't try and run a package manager update for you~~ on macOS it will run homebrew, and I\u2019m not sure about Linux. But I don't think it's configured to work with an MSIX or .pkg installation. And detecting how you installed after installation is the hard part",
      "created_at": "2020-05-17T19:54:31Z",
      "updated_at": "2020-05-18T15:03:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> On macOS and Linux it just reminds you; it won't try and run a package manager update for you.\r\n\r\nOn my Mac, it will happily go off and run Homebrew to do the update for me, in my experience. \ud83d\ude42 ",
      "created_at": "2020-05-17T22:21:12Z",
      "updated_at": "2020-05-17T22:21:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So VS Code knows how it was installed.\r\n\r\n> And detecting how you installed after installation is the hard part\r\n\r\nWe could add a resource per package type. This could be an empty file in home folder.\r\nIt would be great UX for personal installations but for Enterprises this should be disabled.",
      "created_at": "2020-05-18T03:51:13Z",
      "updated_at": "2020-05-18T03:51:13Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> > On macOS and Linux it just reminds you; it won't try and run a package manager update for you.\n> \n> \n> \n> On my Mac, it will happily go off and run Homebrew to do the update for me, in my experience. \ud83d\ude42 \n\nOh! You\u2019re quite right. Not sure about Linux, since root is needed.",
      "created_at": "2020-05-18T15:01:08Z",
      "updated_at": "2020-05-18T15:01:08Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "IMO the version update notification should not appear until at least 24 hours after release.",
      "created_at": "2020-05-22T17:24:38Z",
      "updated_at": "2020-05-22T17:24:38Z"
    },
    {
      "author": "marcusl",
      "author_association": "NONE",
      "body": "If it's contains a security fix, the notification should mention that.\r\n\r\nCurrently it looks like \"hey, we fixed a typo! check it out.\".  That's not the intention maybe? \r\n\r\nAlso, lowering the effort to upgrade, at least on Windows would be nice, like a one-liner that's shown in the notification.\r\n\r\nLove your work though! :)",
      "created_at": "2020-06-12T09:04:20Z",
      "updated_at": "2020-06-12T09:06:20Z"
    },
    {
      "author": "nzain",
      "author_association": "NONE",
      "body": "Imho, simplifying upgrades (regardless of OS and the installation source) is important.\r\n\r\nMaybe it would be sufficient to help people create their own upgrade script? I know there is an `Install-Powershell.ps1` at https://aka.ms/install-powershell.ps1 but it did not upgrade my installation, just unzip the latest package into `%appdata%\\Microsoft\\powershell`. Maybe it is easier to create a dedicated website with upgrade strategies (and scripts) for each type of install.\n\n<blockquote></blockquote>",
      "created_at": "2020-06-12T10:46:54Z",
      "updated_at": "2020-06-12T10:46:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The bar for servicing updates is high.  We don't take trivial fixes to avoid risk of regression.  There should only be fixes that are security, compliance, or customer blocking issues.  This [RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/5-Final/RFC0052-Notification-On-Version-Update.md) describes the intent and design in detail and ways to disable.\r\n\r\nAuto-update is something I would love to have, but is very difficult to solve whether because it requires root or due to open file handles (and requiring elevation) on Windows.  However a cmdlet like `Update-PowerShell` where we make it easier to install an updated version the same way you originally installed it (which means potentially popping up the MSI installer) seems feasible.",
      "created_at": "2020-06-12T16:53:54Z",
      "updated_at": "2020-06-12T16:55:43Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "It would be good if we could ensure a new [Chocolatey package](https://chocolatey.org/packages/powershell-core) is available before the version nag appears. I previously suggested we could delay the notification by 24 hours to allow for this.\r\n\r\nIdeally we would have automatic Chocolatey releases from a pipeline (#12673). /cc @DarwinJS",
      "created_at": "2020-06-13T04:21:12Z",
      "updated_at": "2020-06-13T04:21:12Z"
    },
    {
      "author": "anaisbetts",
      "author_association": "NONE",
      "body": "> The bar for servicing updates is high. We don't take trivial fixes to avoid risk of regression. There should only be fixes that are security, compliance, or customer blocking issues. This RFC describes the intent and design in detail and ways to disable.\r\n\r\nThis is useful to know, but users don't understand that because it's very much contrary to how most software treats version numbers - nobody sees an 0.0.1 increase and thinks \"Wow, I should definitely get that, it's almost certainly security related!!!\"\r\n\r\nIf this is the case, PowerShell needs to call out security updates differently than \"We added new stuff\" releases, and do things to educate users about how PowerShell uses version numbers Differently than most projects",
      "created_at": "2020-06-16T00:19:49Z",
      "updated_at": "2020-06-16T00:19:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "PowerShell uses version numbers according to the widely established and commonly recognised [semver](https://semver.org/) aka Semantic Versioning.\r\n\r\nIt's not uncommon by any stretch of the imagination, though its use in the Windows / Microsoft ecosystem is pretty rare.",
      "created_at": "2020-06-16T00:28:00Z",
      "updated_at": "2020-06-16T00:28:00Z"
    },
    {
      "author": "SidShetye",
      "author_association": "NONE",
      "body": "Is there any way to disable the nags? Also, IMHO, the upgrades should be coming through windows update.",
      "created_at": "2020-07-02T02:50:19Z",
      "updated_at": "2020-07-02T02:50:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Pwsh is not (yet) a Windows component, so will not be updated via Windows update until that changes. The support lifecycle is currently also vastly different to Windows' own.\r\n\r\nAs for disabling them, one option is to start pwsh with the `-NoLogo` parameter.",
      "created_at": "2020-07-02T03:03:33Z",
      "updated_at": "2020-07-02T03:03:33Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> Is there any way to disable the nags? Also, IMHO, the upgrades should be coming through windows update.\r\n\r\nUpdates via Windows Update would be great, but that is not going to come any time soon. \r\n\r\nIn the meantime, what is the problem with having an option in the configuration.json file to tell PWSH NOT to check for new versions?",
      "created_at": "2020-07-02T10:42:32Z",
      "updated_at": "2020-07-02T10:42:32Z"
    },
    {
      "author": "sysopsdev-zz",
      "author_association": "NONE",
      "body": "Can someone please demonstrate how to **PERMANENTLY** disable this? \r\n\r\n```\r\n[System.Environment]::SetEnvironmentVariable(\"POWERSHELL_UPDATECHECK\", 0)\r\n```\r\n\r\nThis did not work. Nor did\r\n\r\n`$Env:POWERSHELL_UPDATECHECK = 0`\r\n`$Env:POWERSHELL_UPDATECHECK = 'Off'`\r\n\r\nIt is continuously popping up. With the colorscheme I have set it's most unpleasant to look at. I know devs tend to complain about frivolous garbage, and I'm not even asking you to change it. I just want to know how to disable this permanently. The solutions above are not working.",
      "created_at": "2020-07-16T20:31:13Z",
      "updated_at": "2020-07-16T20:31:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You need to set it either in the current user or machine scope. By default the SetEnvironmentVariable method only sets the variable in the current process.\r\n\r\n```ps1\r\n[Environment]::SetEnvironmentVariableTarget(\"POWERSHELL_UPDATECHECK\", 0, 'User') # or 'Machine' for all users\r\n```",
      "created_at": "2020-07-16T20:37:10Z",
      "updated_at": "2020-07-16T20:37:22Z"
    },
    {
      "author": "sysopsdev-zz",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> You need to set it either in the current user or machine scope. By default the SetEnvironmentVariable method only sets the variable in the current process.\r\n> \r\n> ```powershell\r\n> [Environment]::SetEnvironmentVariableTarget(\"POWERSHELL_UPDATECHECK\", 0, 'User') # or 'Machine' for all users\r\n> ```\r\n\r\nThank you! \u270c",
      "created_at": "2020-07-16T20:38:44Z",
      "updated_at": "2020-07-16T20:38:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> what is the problem with having an option in the configuration.json file to tell PWSH NOT to check for new versions?\r\n\r\nYou won't want powershell to parse the config file at the startup time, given that we already have perf issue in startup.\r\nAs @vexx32 [showed above](https://github.com/PowerShell/PowerShell/issues/12701#issuecomment-659658336), you can set the environment variable `POWERSHELL_UPDATECHECK` to `0` at either the current user or machine scope to disable the update notification.",
      "created_at": "2020-07-16T20:50:57Z",
      "updated_at": "2020-07-16T20:50:57Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> > what is the problem with having an option in the configuration.json file to tell PWSH NOT to check for new versions?\r\n> \r\n> You won't want powershell to parse the config file at the startup time, given that we already have perf issue in startup.\r\n> As @vexx32 [showed above](https://github.com/PowerShell/PowerShell/issues/12701#issuecomment-659658336), you can set the environment variable `POWERSHELL_UPDATECHECK` to `0` at either the current user or machine scope to disable the update notification.\r\n\r\nGiven that the json file us already loaded and parsed, would there really be that much overhead involved vs reading an Environment variable?  I would prefer to see more in json and less in environments variables.",
      "created_at": "2020-07-17T11:17:07Z",
      "updated_at": "2020-07-17T11:17:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Today, there is no `powershell.config.json` file ship with PowerShell by default for Linux and macOS. On Windows, it's unfortunate that we have a default config json file that contains `WindowsPowerShellCompatibilityModuleDenyList` and `ExecutionPolicy`, but both defaults potentially can be moved to code to avoid having a default config json file at all.",
      "created_at": "2020-07-17T18:06:41Z",
      "updated_at": "2020-07-17T18:06:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-19T00:00:18Z",
      "updated_at": "2020-07-19T00:00:18Z"
    },
    {
      "author": "Jack-Works",
      "author_association": "NONE",
      "body": "Please at least make the message smaller, for example, 1 line only message",
      "created_at": "2021-02-19T05:58:12Z",
      "updated_at": "2021-02-19T05:58:12Z"
    }
  ],
  "created_at": "2020-05-16T16:09:15Z",
  "number": 12701,
  "state": "closed",
  "title": "Powershell version nags are overly aggressive",
  "updated_at": "2021-02-19T05:58:12Z"
}