{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7649",
  "author": "BrucePay",
  "body": "Way back at the beginning of time, we (the PowerShell team)  decided not to include interfaces in the list of types reported in `TypeNames` for a `PSObject`. I don't remember why we did this and can think of no good reason not to include them now. There are significant benefits if we do include them as end-users will then be able to write Type/Format extensions against interfaces e.g. write a `ScriptMethod` that works against `IEnumerable`. In particular this facillitates LINQ-like behaviours where a method can operate against an enumerable to return a new enumerable (lazy evaluation and infinite sequences). The one slight downside I can think of is that this increases the number of items in Typenames with may have a small effect on remoting due to transmitting the extra typename strings but we only do that once per object per operation so the impact appears to be negligible (at least based on my tests). There may also be a small increase in the about of memory used by objects but that's easily mitigated by unifying the type strings.\r\n\r\nImplementation-wise, the Interface type names would appear after the concrete typenames so any existing type extensions will continue to work unchanged (i.e. not a breaking change.)\r\n\r\nIf you can think of any reasons why we shouldn't do this, please add comments to this issue.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPSCore (1:90) >  $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell can create tons PSObjects and even an allocation of an empty object in PSObject property (See #7435) can lead to very noticeable consequences.\r\nI hope that there are ways to make the internal structures of the PSObject very-very resource efficient.\r\n",
      "created_at": "2018-08-31T13:52:21Z",
      "updated_at": "2018-08-31T13:52:49Z"
    }
  ],
  "created_at": "2018-08-28T18:01:50Z",
  "number": 7649,
  "state": "open",
  "title": "Interfaces should be included in TypeNames for PSObjects",
  "updated_at": "2019-11-15T17:37:12Z"
}