{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8364",
  "author": "daxian-dbw",
  "body": "This is a follow-up work item for the PR #8341.\r\nAs discussed in https://github.com/PowerShell/PowerShell/pull/8341#discussion_r236796643, we agree to replace the CRC32 hash function, which is used for generating the module analysis cache file name, with this [simple hash function](https://github.com/PowerShell/PowerShell/blob/b0daa1e724cbba5e00f118001f1105bb44d91952/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L1804). This issue is to track my follow-up PR for this.",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov and I discussed how to organize the cmdlets in `Utility.psm1` in https://github.com/PowerShell/PowerShell/pull/8341#discussion_r237602128.\r\nMaybe I can re-organize the cmdlets in that file along with this fix.",
      "created_at": "2018-11-30T01:47:43Z",
      "updated_at": "2018-11-30T01:47:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Maybe I can re-organize the cmdlets in that file along with this fix.\r\n\r\nIf MSFT team agree with this formatting we could open separate issue for Up-for-Grabs.\r\n\r\nAnother thought. If we converted format and type XML to binary we could have psd1-s binary too to exclude file access and parsing.",
      "created_at": "2018-11-30T03:52:59Z",
      "updated_at": "2018-11-30T03:59:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @SteveL-MSFT \r\n> The [MurmurHash3](https://github.com/aappleby/smhasher) might be a better choice for speed and uniqueness (avoiding collisions), but we can defer that to outside this PR if we open an issue.\r\n\r\nAlso we could consider `System.HashCode` - I do not know how fast it is.",
      "created_at": "2018-11-30T07:34:01Z",
      "updated_at": "2018-11-30T07:34:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "There is a problem with the [simple function](https://github.com/PowerShell/PowerShell/blob/50890b5ae7387a61f9a9c3fdfe3644997f5819c5/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L1859-L1882) pointed by @lzybkr. The current `ToLower` operation is fine for the malicious code scan purpose since we are dealing with a set of English strings. But here, we need to work with different `cultureinfo` because the `$pshome` could contain any characters. So I will have to change the current `ToLower` method to use `char.ToLower` or `char.ToLowerInvariant`, not sure which is the right one.",
      "created_at": "2018-12-06T02:01:56Z",
      "updated_at": "2018-12-06T02:01:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Another thought. If we converted format and type XML to binary we could have psd1-s binary too to exclude file access and parsing.\r\n\r\nI'm not into this idea. We would still need to keep the `.psd1` file there to make it remain a module, as that's the only file left for those built-in modules. Then we need to keep them in sync with any changes.",
      "created_at": "2018-12-06T02:06:35Z",
      "updated_at": "2018-12-06T02:06:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  The current ToLower operation is fine for the malicious code scan purpose since we are dealing with a set of __English__ strings\r\n\r\nI'm amized why there can be no other characters?\r\n\r\nInstead of `char.ToLower` or `char.ToLowerInvariant` we could consider simple case folding: it is intended for comparisons and [it is faster](https://github.com/PowerShell/PowerShell/issues/8120#issuecomment-434988673).\r\n",
      "created_at": "2018-12-06T04:29:58Z",
      "updated_at": "2018-12-06T04:29:58Z"
    }
  ],
  "created_at": "2018-11-30T01:42:45Z",
  "labels": [
    "WG-Engine",
    "Issue-Code Cleanup"
  ],
  "number": 8364,
  "state": "open",
  "title": "Replace the CRC32 hash function with the simple has function existing in `CompiledScriptBlockData`",
  "updated_at": "2018-12-06T04:29:58Z"
}