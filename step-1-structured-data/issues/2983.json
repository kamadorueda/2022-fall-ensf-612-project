{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2983",
  "author": "HemantMahawar",
  "body": "- [ ] Support SemVer in #Requires (PowerShell version (-Version) as well as module version (-Modules))\r\n- [ ] Allows cmdlet parameters to consume SemVer instead of System.Version (argument transformation maybe?)\r\n  - [ ] Users can convert Semver to System.Version using that attribute before passing to the cmdlet parameter\r\n  - [ ] Cmdlet author can mark the attribute on the parameter and users can pass Semver string\r\n\r\n=======================\r\n**User Experience:**\r\n- On disk, module versions presents - 1.0.0, 1.0.0-alpha17, 1.0.1 \r\n- Result:\r\n\r\n  | Command  | Expected Output | Comments |\r\n  | -------------| ------------------ | -------------|\r\n  | Import-Module -Version 1.0.2 | Error |  Version is alias to min version |\r\n  | Import-Module -MinimumVersion 1.0.0 | Module with version 1.0.1 should be loaded |   |\r\n  | Import-Module -Version 1.0.0-alpha15 | Module with version 1.0.1 should be loaded |  |\r\n  | Import-Module -Name | Module with version 1.0.1 should be loaded | Latest version of module should be loaded |\r\n  | Import-Module -RequiredVersion 1.0.0 | Module with version 1.0.0 should be loaded |  |\r\n\r\nNote that 1.0.0 is higher than 1.0.0-alpha17, so if 1.0.1 doesn't exist, then `Import-Module` would load 1.0.0.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should wait for corefx support of semver (https://github.com/dotnet/corefx/issues/13526) rather than continue to have our implementation",
      "created_at": "2018-06-06T04:05:54Z",
      "updated_at": "2018-06-06T04:05:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is Set-StrictMode. Is it out of the enhancement?\r\n```powershell\r\n gcm -ParameterName Version\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Import-Module                                      7.0.0.0    Microsoft.PowerShell.Core\r\nCmdlet          Set-StrictMode                                     7.0.0.0    Microsoft.PowerShell.Core\r\n```\r\n\r\nDo we agree with breaking change that 1.0.0.1 is not SemVer?\r\n",
      "created_at": "2019-07-04T14:33:02Z",
      "updated_at": "2019-07-04T14:33:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Moving out as I think there's a chance .NET 5 will have semver type",
      "created_at": "2019-10-15T21:08:04Z",
      "updated_at": "2019-10-15T21:08:04Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "At what point does PowerShell stop waiting for .NET and use NuGet version to support both Semver and traditional versions in the same type? ",
      "created_at": "2019-10-16T03:21:31Z",
      "updated_at": "2019-10-16T03:21:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After Core team publish the package we could use it.",
      "created_at": "2019-10-16T03:25:54Z",
      "updated_at": "2019-10-16T03:25:54Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "How realistic is it that they will complete it in version 5 we've already been waiting 3 years for a resolution and it's been 3 months since the last comment. NuGet already has a working semver type. ",
      "created_at": "2019-10-16T03:41:53Z",
      "updated_at": "2019-10-16T03:41:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> NuGet already has a working semver type\r\n\r\nCore team is still not finished design. \r\n\r\nYou could ask in https://github.com/dotnet/corefx/issues/13526.",
      "created_at": "2019-10-16T03:46:20Z",
      "updated_at": "2019-10-16T03:46:20Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "That issue is marked \"up for grabs\".  I wouldn't count on the CoreFX team implementing this.  Time to move on and come up with a solution of some sort for PowerShell IMO.",
      "created_at": "2019-10-16T03:59:40Z",
      "updated_at": "2019-10-16T03:59:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've looked at taking up that issue once in the past, and the roadblock I hit was about the same the other folks who've looked at it that I spoke to have also hit.\r\n\r\nEssentially, it seems the bar has been set _far too high_ for a SemVer implementation in .NET Core / .NET 5. Everyone who sees that someone is asking for a concrete SemVer implementation seems to question it, and by far the most complex question is \"given a random SemVer, how do I tell what version of SemVer they're using?\"\r\n\r\nAnd there isn't really a clear answer to that one; it's not a problem SemVer is especially well-designed to be able to handle. There are several other implementation questions detailed in the CoreFX issue, as I recall, that have gone undecided / unresolved, and the .NET Core planning/PR process is much lengthier than many folks can reasonably undertake.\r\n\r\nAnd thus far it seems like the .NET Core team is content to wait until _everyone_ is happy with a given proposed specification before moving forward with SemVer, which... quite **literally**  by definition will never happen. Until .NET Core change their stance and at least allow a _first_ SemVer implementation in, there will never be one in .NET Core, and there will never be improvements made to one if they don't have a base to work with.",
      "created_at": "2019-10-16T04:09:01Z",
      "updated_at": "2019-10-16T04:13:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> That issue is marked \"up for grabs\". \r\n\r\n@rkeithhill It was removed.",
      "created_at": "2019-10-16T05:42:38Z",
      "updated_at": "2019-10-16T05:42:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We want to avoid a situation where we have competing semver types.",
      "created_at": "2019-10-16T19:15:16Z",
      "updated_at": "2019-10-16T19:15:16Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "I understand that, but I would like time frame on how much longer PowerShell will wait on CoreFx before doing their own thing. One, two, five years?",
      "created_at": "2019-10-16T19:31:42Z",
      "updated_at": "2019-10-16T19:31:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If it appears that it won't be fixed in .NET 5, we'll probably have to fix it ourselves within our code base.",
      "created_at": "2019-10-18T21:29:13Z",
      "updated_at": "2019-10-18T21:29:13Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like there is already a `[System.Management.Automation.SemanticVersion]` type used in `$PSVersionTable` can that type be used until .NET releases their semver type? It should at least be used in the module system so PowerShellGet isn't trying to force semver into a system that doesn't support it.",
      "created_at": "2020-08-07T20:12:09Z",
      "updated_at": "2020-08-07T20:12:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah it's pretty janky the way we currently handle it there. @SteveL-MSFT are there plans to implement semver in PSGet v3?",
      "created_at": "2020-08-08T03:28:41Z",
      "updated_at": "2020-08-08T03:28:41Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT / @SydneyhSmith what are the plans for the module system and PowerShellGet supporting both legacy `[System.Version]` and .NET `[SemanticVersion]` if/when that ever gets released?\r\n\r\nPowerShellGet v3 is facing multiple issues trying to support both version schemes:\r\n\r\nhttps://github.com/PowerShell/PowerShellGet/issues/269 - multiple types are returned for the Version property, which cannot be sorted\r\nhttps://github.com/PowerShell/PowerShellGet/issues/264 - `[Version]` is stripping off `Prerelease` label\r\nhttps://github.com/PowerShell/PowerShellGet/issues/261 - full semver module folder causing `Import-Module` to fail.\r\nhttps://github.com/PowerShell/PowerShellGet/issues/78 - cannot upgrade from prerelease to stable with binary files in use\r\n\r\n`PackageManagement`/`PowerShellGet` v2 used `[string]` for the `Version` property and it did not work well since there was no actual version type sorting (comparison) done as described in: https://github.com/OneGet/oneget/issues/432\r\n\r\nMy opinion is that a single type that supports both version schemes would be the best. `[NuGet.Versioning.NuGetVersion]` is a type that meets that requirement which was recommend by @Jaykul in https://github.com/PowerShell/PowerShell-RFC/pull/185#discussion_r294625087\r\n\r\nWhatever is decided both PowerShell and PowerShellGet have to use the same solution or we'll end up with the current system of PowerShellGet trying to force semver into a module system that doesn't support it. This problem has to be solved in PowerShellGet by the time v3 goes stable.",
      "created_at": "2020-10-04T16:45:16Z",
      "updated_at": "2020-10-04T16:46:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell already has \r\n```public sealed class SemanticVersion : IComparable, IComparable<SemanticVersion>, IEquatable<SemanticVersion>```",
      "created_at": "2020-10-04T17:00:55Z",
      "updated_at": "2020-10-04T17:00:55Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov during the August community call the team said they didn't want to use that class since when .NET released one there would duplicate competing types.",
      "created_at": "2020-10-05T16:47:09Z",
      "updated_at": "2020-10-05T16:47:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ThomasNieto Yes, but it could be used as _an implementation detail_.\r\nIt is old history. We wait .Net very long. I hope they implement the class in 6.0. If no we _can_ use custom implementation for internal use.",
      "created_at": "2020-10-05T16:52:22Z",
      "updated_at": "2020-10-05T16:52:22Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "The part I'm most interested about is how multiple version schemes will be supported on the `[PSModuleInfo]` type or would multiple types be needed. Right now, the `Version` property is a `[System.Version]` type. When semver is officially supported by the module system then how would `*-Module` cmdlets handle returning a type with `Version` property having different types? For example, `[System.Version]` for legacy and `[SemanticVersion]` in the SMA or .NET namespace.",
      "created_at": "2020-10-05T17:03:54Z",
      "updated_at": "2020-10-05T17:03:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The part I'm most interested about is how multiple version schemes will be supported\r\n\r\nIt is a big headache in global and this explains why .Net team does not implement the simple class jet.\r\n\r\nObviously both types will have to coexist and two cases exist - (1) exposing (like in Get-Module output), (2) using/implementing (like how adopt scripts for new Get-Module output). It is true for C# too.\r\nObviously there is not an universal solution but as a helper solution these types could be enhanced (both or one) with new field to reference original (add SemantecVersion property in Version type or Version property in SemantecVersion type)\r\n\r\n/cc @SeeminglyScience who could share in-depth thoughts.",
      "created_at": "2020-10-06T04:09:12Z",
      "updated_at": "2020-10-06T04:10:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah... ideally we'd wait for .NET but it doesn't look like that's in the cards.\r\n\r\nHere's what I'd do:\r\n\r\n1. Copy the best implementation currently out there (license permitting)\r\n1. Put it in it's own assembly entirely\r\n1. Ship that single type assembly on nuget targeting netstandard2.0 or even net452 so it can be used in *anything* and everything\r\n1. Maybe even ship a module with `ConvertTo-SemanticVersion` and possibly `ConvertFrom-SemanticVersion` so it's easy to bundle with script-only modules\r\n\r\nThat assembly would serve as a default implementation.  PowerShell can ship with it's own version of that assembly in box, if desired, that just redirects with `TypeForwardedTo` to a SMA.dll implementation.",
      "created_at": "2020-10-06T12:49:48Z",
      "updated_at": "2020-10-06T12:50:36Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "And just to clarify, I am aware of `SMA.SemanticVersion`.  Problem is you can't use it everywhere.  Usually I'm fine with keeping something only in Core to help adoption, but I don't think we can really wait until we can all get away with not targeting Windows PowerShell for this one.\r\n\r\nI've already started to see questions about how to deal with semantic versions bleed over into reddit (usually the last place in the PS community to see something adopted).  I think I've seen ~3 threads in the last two weeks alone?  Might not seem like it a lot, but it's unusual to see that many repeats that quickly there.\r\n\r\nThis should be figured out before PSGet 3 GA imo.",
      "created_at": "2020-10-06T13:19:58Z",
      "updated_at": "2020-10-06T13:26:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @alerickson @PaulHigin for information.",
      "created_at": "2020-10-06T14:18:46Z",
      "updated_at": "2020-10-06T14:18:46Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Since .NET will clearly not ever do it, and for some reason you refuse to take the tiny `NuGet.Versioning` dependency, we're now, what, five or six versions into PowerShell since PowerShellGet added semantic versioning, and PowerShell still doesn't support having multiple pre-releases of a module installed. \r\n\r\nIt's causing confusion with PSGet3, so it seems to me it needs to be done for 7.2 or never.",
      "created_at": "2020-11-29T19:00:53Z",
      "updated_at": "2020-11-29T19:07:08Z"
    }
  ],
  "created_at": "2017-01-09T23:28:14Z",
  "number": 2983,
  "state": "open",
  "title": "Complete the SemanticVersion work ",
  "updated_at": "2020-12-07T19:07:26Z"
}