{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10831",
  "author": "mklement0",
  "body": "Superseded by https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4963\r\n\r\n---\r\n\r\n\r\nThe idea behind `--%` is to pass command lines that use the platform-native shell through, with minimal interpretation by PowerShell.\r\n\r\nWhile `--%` with its cmd-style environment-variable expansion is an awkward fit for Unix-like platforms to begin with, it does work in principle, but only with _double_-quoted arguments (`\"...\"`).\r\n\r\nHowever, the POSIX-like shells (such as Bash) that are native to Unix-like platforms also understand _single_-quoted strings (`...`) - verbatim strings.\r\n\r\n`--%` currently doesn't support the latter.\r\n\r\nNote that on Unix _someone_ has to break the command line into _individual arguments_ before passing the latter to the target process; unlike on Windows, you cannot start processes with single-string command lines in the native process-creation APIs, so truly passing a command line through isn't an option.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Note: From Bash itself, running\r\n#        bash -c 'echo \"$1 $RANDOM\"' - 'I'\\''m'\r\n# works correctly and yields something like \"I'm 1234\"\r\nbash --% -c 'echo \"$1 $RANDOM\"' - 'I'\\''m'\r\n$LASTEXITCODE | Should -Be 0\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails: The Bash command breaks due to syntax errors, and the exit code is nonzero.\r\n\r\nDue to lack of support for single-quoted strings, PowerShell passes the following arguments to `bash` (enclosed in `[...]` here to show their boundaries):\r\n\r\n```none\r\n[-c]\r\n['echo]\r\n[$1 $RANDOM']\r\n[-]\r\n['I'\\''m']\r\n```\r\nNote how the `'...'` argument was broken in two, and how the embedded double quotes disappeared.\r\n\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": "2019-10-18T22:13:07Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @chuanjiao10.\r\n\r\nI've closed this issue, because I remembered that a decision was made in https://github.com/PowerShell/PowerShell/issues/3733#issuecomment-327641533 that `--%` will not be extended to work more sensibly on Unix-like platform.\r\n\r\nI've created a documentation issue instead, asking that the near-uselessness of `--%` on Unix be documented: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4963\r\n\r\nIf you know `--%`'s limitations, you can still use it, however, so in the command that prompted #10219 you can simply use `ssh-keygen --% \"\"`, i.e. _double_ quotes.\r\n\r\n",
      "created_at": "2019-10-18T22:19:01Z",
      "updated_at": "2019-10-18T22:19:01Z"
    }
  ],
  "created_at": "2019-10-18T13:19:34Z",
  "number": 10831,
  "state": "closed",
  "title": "Stop-parsing symbol on Unix-like platform doesn't support single-quoted arguments",
  "updated_at": "2019-10-29T14:15:49Z"
}