{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12235",
  "author": "mklement0",
  "body": "Note: Calling `exit` from a function or method is unusual, but it works in functions and in _class_ methods, but not from `ScriptMethod` methods on custom objects, where it fails with an obscure error.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\npwsh -noprofile -c '($obj = [pscustomobject]::new()) | Add-Member -MemberType ScriptMethod Foo { exit 5 }; $obj.Foo()'\r\n$LASTEXITCODE | Should -Be 5\r\n```\r\n\r\n\r\n# Expected behavior\r\n\r\nThere should be no output, and the test should succeed. \r\n\r\n# Actual behavior\r\n\r\nAn error is reported, and the test fails, because the `exit` statement wasn't effective (the exit code was implicitly set by the unexpected statement-terminating error, to `1`):\r\n\r\n```none\r\nMethodInvocationException: Exception calling \"Foo\" with \"0\" argument(s): \"System error.\"\r\nInvalidResult:\r\nLine |\r\n   1 | $LASTEXITCODE | Should -Be 5\r\n     | Expected 5, but got 1.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @mklement0  Here's what's happening. The `exit` keyword throws a special exception to indicate that the engine is exiting. As currently implemented, this exception is being caught by the implementation of `PSScriptMethod` in  `PSScriptMethod.Invoke()` and wrapped in a `MethodInvocationException`. Looking at the inner exception, you'll see the original exception:\r\n```PowerShell\r\nPS[1] (41) > $e.Exception.InnerException.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    ExitException                            System.Management.Automation.FlowControlException\r\n\r\nPS[1] (42) >\r\n```\r\nIIRC this rather interesting exception handling strategy was done so that you could use script methods in F&O without worrying about infinite recursion if a method used in formatting errors had an error.",
      "created_at": "2020-04-01T19:49:32Z",
      "updated_at": "2020-04-01T19:49:32Z"
    }
  ],
  "created_at": "2020-03-31T16:55:12Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12235,
  "state": "open",
  "title": "`exit` causes obscure error in ScriptMethod ETS methods",
  "updated_at": "2020-04-01T19:49:33Z"
}