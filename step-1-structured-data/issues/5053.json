{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5053",
  "author": "pldmgg",
  "body": "### System Details\r\n\r\nI've tested / reproduced this issue on all of the the following systems:\r\n\r\n - Operating System: Ubuntu 16.04.2 LTS\r\nKernel: Linux 4.10.0-35-generic\r\n\r\n- Operating System: Debian GNU/Linux 8 (jessie)\r\nKernel: Linux 3.16.0-4-amd64\r\n\r\n- Operating System: Debian GNU/Linux 9 (stretch)\r\nKernel: Linux 4.9.0-3-amd64\r\n\r\n- Operating System: CentOS Linux 7 (Core)\r\nKernel: Linux 3.10.0-514.16.1.el7.x86_64\r\n\r\nPowerShell Core Version tested:\r\n\r\n- PowerShell-6.0.0-beta.8\r\n\r\n- PowerShell-6.0.0-beta.7\r\n\r\n### Sample Output from Ubuntu 16.04\r\nNOTE: Output is very similar on all other Distros mentioned above, with notable exception CentOS, which forcibly kicks me out of PowerShell if I use Invoke-WebRequest.\r\n\r\n```\r\npdadmin@Ubuntu16VM:~/Downloads$ chmod a+x PowerShell-6.0.0-beta.8-x86_64.AppImage\r\n\r\npdadmin@Ubuntu16VM:~/Downloads$ sudo ./PowerShell-6.0.0-beta.8-x86_64.AppImage\r\n[sudo] password for pdadmin:\r\n$XDG_DATA_DIRS is missing. Please run /tmp/.mount_3ViStr/usr/bin/powershell.wrapper from within an AppImage.\r\nPowerShell v6.0.0-beta.8\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nPS /home/pdadmin/Downloads> iwr google.com\r\niwr : Couldn't resolve host name\r\nAt line:1 char:1\r\n+ iwr google.com\r\n+ ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.Invo\r\n   keWebRequestCommand\r\n\r\nPS /home/pdadmin/Downloads> ping google.com\r\nping: unknown host google.com\r\n\r\nPS /home/pdadmin/Downloads> exit\r\n\r\npdadmin@Ubuntu16VM:~/Downloads$ ping google.com\r\nPING google.com (172.217.8.14) 56(84) bytes of data.\r\n64 bytes from iad23s59-in-f14.1e100.net (172.217.8.14): icmp_seq=1 ttl=56 time=12.2 ms\r\n64 bytes from iad23s59-in-f14.1e100.net (172.217.8.14): icmp_seq=2 ttl=56 time=15.6 ms\r\n^C\r\n--- google.com ping statistics ---\r\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\r\nrtt min/avg/max/mdev = 12.255/13.971/15.687/1.716 ms\r\n\r\npdadmin@Ubuntu16VM:~/Downloads$ ./PowerShell-6.0.0-beta.8-x86_64.AppImage\r\nPowerShell v6.0.0-beta.8\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nPS /home/pdadmin/Downloads> iwr google.com\r\niwr : Couldn't resolve host name\r\nAt line:1 char:1\r\n+ iwr google.com\r\n+ ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.Invo\r\n   keWebRequestCommand\r\n\r\nPS /home/pdadmin/Downloads> ping google.com\r\nPING google.com (172.217.8.14) 56(84) bytes of data.\r\n64 bytes from iad23s59-in-f14.1e100.net (172.217.8.14): icmp_seq=1 ttl=56 time=7.15 ms\r\n64 bytes from iad23s59-in-f14.1e100.net (172.217.8.14): icmp_seq=2 ttl=56 time=10.4 ms\r\n^C\r\n--- google.com ping statistics ---\r\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\r\nrtt min/avg/max/mdev = 7.151/8.798/10.446/1.650 ms\r\n\r\nPS /home/pdadmin/Downloads> exit\r\n```\r\n\r\n### Issue Description\r\n\r\nNetworking breaks when using PowerShell Core AppImage. Not sure how it's broken exactly, but I can't resolve anything with PowerShell cmdlets or with Linux utilities like ping or curl.\r\n\r\n### Attached Logs\r\n\r\nReproduced by and additional testing done by @markekraus \r\n(see: https://www.reddit.com/r/PowerShell/comments/74u837/sanity_check_powershell_core_appimage_breaks/)\r\n\r\n(FYI, I'm /u/fourierswager on reddit)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I was able to repro this in both `PowerShell-6.0.0-beta.7-x86_64.AppImage` and `PowerShell-6.0.0-beta.8-x86_64.AppImage`\r\n\r\nThere appears to be an issue with DNS resolution in some instances. assuming the appimage is run as a normal user, ping works, but curl and nslookup do not. ping is unable to resolve if you run appimage as sudo. \r\n\r\nThe impact is that the web cmdlets are also unable to resolve hostnames (as it relies on curl) and thus error on any call. I can also repro this with the underlying .NET calls\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```bash\r\n./PowerShell-6.0.0-beta.8-x86_64.AppImage\r\n```\r\n```powershell\r\nnslookup google.com\r\n\r\n(Invoke-WebRequest http://google.com).StatusCode\r\n\r\ncurl google.com\r\n\r\n$handler = [System.Net.Http.HttpClientHandler]::new()\r\n$HttpClient = [System.Net.Http.HttpClient]::New($handler)\r\n$HttpClient.GetAsync(\"http://www.contoso.com/\").GetAwaiter().GetResult().StatusCode\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nServer:         209.18.47.61\r\nAddress:        209.18.47.61#53\r\n\r\nNon-authoritative answer:\r\nName:   google.com\r\nAddress: 172.217.9.142\r\n\r\n\r\n200\r\n\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n<TITLE>301 Moved</TITLE></HEAD><BODY>\r\n<H1>301 Moved</H1>\r\nThe document has moved\r\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n\r\nOK\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n/usr/bin/nslookup: /tmp/.mount_81bJrR/usr/lib/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by /usr/lib/x86_64-linux-gnu/libicuuc.so.55)\r\n\r\nInvoke-WebRequest : Couldn't resolve host name\r\nAt line:1 char:2\r\n+ (Invoke-WebRequest http://google.com).StatusCode\r\n+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\ncurl: (6) Could not resolve host: google.com\r\n\r\nException calling \"GetResult\" with \"0\" argument(s): \"An error occurred while sending the request.\"\r\nAt line:1 char:1\r\n+ $HttpClient.GetAsync(\"http://www.contoso.com/\").GetAwaiter().GetResul ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : HttpRequestException\r\n```\r\n\r\nmore details on the last error:\r\n\r\n```none\r\nPSMessageDetails      :\r\nException             : System.Management.Automation.MethodInvocationException: Exception calling \"GetResult\" with \"0\" argument(s): \"An error occurred\r\n                        while sending the request.\" ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. --->\r\n                        System.Net.Http.CurlException: Couldn't resolve host name\r\n                           at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)\r\n                           at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n                           at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n                           at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n                        --- End of stack trace from previous location where exception was thrown ---\r\n                           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n                           at CallSite.Target(Closure , CallSite , Object )\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Management.Automation.ExceptionHandlingOps.ConvertToMethodInvocationException(Exception exception, Type typeToThrow,\r\n                        String methodName, Int32 numArgs, MemberInfo memberInfo)\r\n                           at CallSite.Target(Closure , CallSite , Object )\r\n                           at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n                           at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          :\r\nCategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\nFullyQualifiedErrorId : HttpRequestException\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```none\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.8\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.8\r\nOS                             Linux 4.4.0-96-generic #119-Ubuntu SMP Tue Sep 12 14:59:54 UTC 2017\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
      "created_at": "2017-10-07T14:18:48Z",
      "updated_at": "2017-10-07T14:18:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@probonopd can you help with this?",
      "created_at": "2017-10-07T14:19:44Z",
      "updated_at": "2017-10-07T14:19:44Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "Guys sorry, I didn't realize my original erroneous issue post over at vscode-powershell was moved here as #5054, (I opened up #5053 right before #5054 was created via the move).  So they're the same thing.\r\n\r\nI'm just gonna put the keyboard down for a while :(\r\n\r\nLet me know if I can help",
      "created_at": "2017-10-07T14:24:26Z",
      "updated_at": "2017-10-07T14:24:26Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "`/usr/bin/nslookup: /tmp/.mount_81bJrR/usr/lib/libstdc++.so.6: version 'CXXABI_1.3.8' not found (required by /usr/lib/x86_64-linux-gnu/libicuuc.so.55)` means that `/usr/bin/nslookup` on your system is invoked, and it loads `/tmp/.mount_81bJrR/usr/lib/libstdc++.so.6` from within the AppImage since `LD_LIBRARY_PATH` is set. But that version does not have CXXABI version 1.3.8 that your local `/usr/bin/nslookup` needs.\r\n\r\nMultiple possible solutions, roughly in my order of preference:\r\n* Remove the need to bundle `libstdc++.so.6` inside the AppImage (if it ever existed - not sure our first AppImage builds had this bundled), need to check\r\n* Do away with `LD_LIBRARY_PATH` and instead set an rpath relative to `$ORIGIN`, e.g., using https://nixos.org/patchelf.html (let me know if I should elaborate). This way, what is inside the AppImage can use the bundled `libstdc++.so.6` while what is outside can use the host `libstdc++.so.6`. Also see https://gms.tf/ld_library_path-considered-harmful.html#use-origin\r\n* Use [appimage-exec-wrapper](https://github.com/AppImage/AppImageKit/issues/396)",
      "created_at": "2017-10-09T20:05:09Z",
      "updated_at": "2017-10-09T20:05:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@probonopd can you submit a PR to fix based on your best judgement?",
      "created_at": "2017-10-12T23:37:12Z",
      "updated_at": "2017-10-12T23:37:12Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "Just to verify the hypothesis, can someone who is running into this issue please run, inside PowerShell:\r\n\r\n```\r\n(the command that fails)\r\n# Should print an error\r\n\r\nunset LD_LIBRARY_PATH\r\n(the command that fails)\r\n# Should NOT give an error\r\n```\r\n\r\nCan you confirm?",
      "created_at": "2017-10-13T15:29:19Z",
      "updated_at": "2017-10-13T15:29:49Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@probonopd unset doesn't seem to work,  (` The term 'unset' is not recognized as the name of a cmdlet`...) but using\r\n\r\n```powershell\r\n[Environment]::SetEnvironmentVariable('LD_LIBRARY_PATH',$null)\r\n```\r\n\r\nsuccessfully removes `LD_LIBRARY_PATH`. However, it has no effect on the commands. \u2639\ufe0f ",
      "created_at": "2017-10-13T16:08:36Z",
      "updated_at": "2017-10-13T16:08:36Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "> However, it has no effect on the commands\r\n\r\nThat is strage... are the commands still trying to load libraries from within the AppImage? (Why?)",
      "created_at": "2017-10-13T16:44:18Z",
      "updated_at": "2017-10-13T16:44:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm I take that back (helps if I run all the commands from the repro). After removing `LD_LIBRARY_PATH`, the native binaries (`curl` and `nslookup`) work, but `Invoke-WebRequest`, `Invoke-RestMethod` , and `System.Net.Http.HttpClient` all still fail. That's odd because `HttpClient` is basically a wrapper for `libcurl `. ",
      "created_at": "2017-10-13T16:56:57Z",
      "updated_at": "2017-10-13T16:56:57Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "So PowerShell loads additional libraries with something loke `dlopen()` when certain commands are invoked? Do we know which ones, and when?",
      "created_at": "2017-10-13T17:27:25Z",
      "updated_at": "2017-10-13T17:27:25Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Well, CoreFX does. `Invoke-WebRequest` is a wrapper for CoreFX's `System.Net.Http.HttpClient`. The PowerShell commandlets are not directly calling libcurl, but the underlying CoreFX is.\r\n\r\nThis is what the stack looks like when calling `Invoke-WebRequest http://httpbin.org/get/` inside the AppImage\r\n\r\n```none\r\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Couldn't resolve host name\r\n   at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)\r\n   at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetResponse(HttpClient client, HttpRequestMessage request, Boolean stripAuthorization)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n```",
      "created_at": "2017-10-13T17:43:43Z",
      "updated_at": "2017-10-13T17:43:43Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "I just found something interesting (result is the same running the AppImage with or without sudo):\r\n\r\n    PS /home/pdadmin/Downloads> nslookup google.com\r\n    /usr/bin/nslookup: /tmp/.mount_qo4lVC/usr/lib/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by /usr/lib/x86_64-linux-gnu/libicui18n.so.57)\r\n    /usr/bin/nslookup: /tmp/.mount_qo4lVC/usr/lib/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by /usr/lib/x86_64-linux-gnu/libicuuc.so.57)\r\n    \r\n    PS /home/pdadmin/Downloads> sudo nslookup google.com\r\n    Server:         192.168.2.18\r\n    Address:        192.168.2.18#53\r\n\r\n    Non-authoritative answer:\r\n    Name:   google.com\r\n    Address: 172.217.8.14\r\n\r\n    PS /home/pdadmin/Downloads>\r\n\r\nSo, from within the PowerShell AppImage, if you \"sudo nslookup\", then it can find /tmp/.mount_qo4lVC/usr/lib/libstdc++.so.6 .\r\n\r\nCould this be a permissions thing? Everything in the AppImage mount is root:root ... It's probably not though since libstdc++.so.6 on the normal file system is root:root too...",
      "created_at": "2017-10-13T17:58:08Z",
      "updated_at": "2017-10-13T18:00:09Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "Not familiar with the inner workings of PowerShell, but could it be that invoking `sudo nslookup google.com` from within NS runs `nslookup` without the environment variables that were exported by the script in the AppImage that launches PowerShell?",
      "created_at": "2017-10-13T18:26:49Z",
      "updated_at": "2017-10-13T18:26:49Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@probonopd That's exactly why sudo works. `sudo strace -v nslookup google.com` is lacking `LD_LIBRARY_PATH` environment variabe, but `strace -v nslookup google.com`  it is present.",
      "created_at": "2017-10-13T18:31:14Z",
      "updated_at": "2017-10-13T18:31:14Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a way to launch PowerShell with a script that runs initially after PowerScript being launched? And is there a way in PowerShell to unset an environment variable for everything that gets launched from within PowerShell?\r\n\r\nIf not, then we need to do either of the solutions from https://github.com/PowerShell/PowerShell/issues/5053#issuecomment-335271038 but I currently don't have the time to do it and would appreciate if someone could look into this.",
      "created_at": "2017-10-13T18:35:53Z",
      "updated_at": "2017-10-13T18:35:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@probonopd There are 2 seperate problems here. \r\n\r\n1. The `LD_LIBRARY_PATH` causing native binaries to use the AppImage `libstdc++.so.`. \r\n2. Even with `LD_LIBRARY_PATH` out of the picture, `Invoke-WebRequest` and `Invoke-RestMethod` are still unable to resolve hostnames.\r\n\r\nI'm guessing 1 is somewhat easy to deal with by having AppImage not set ``LD_LIBRARY_PATH` or remove ``LD_LIBRARY_PATH`. I have no clue how the AppImage is even packaged and my attempts to create the AppImage manual constantly fail, so I could be wrong on how easy that is.\r\n\r\nFor 2, on the other hand, we haven't discovered the root cause of.",
      "created_at": "2017-10-13T18:51:33Z",
      "updated_at": "2017-10-13T18:51:33Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "Cool, I'm with you guys now on the LD_LIBRARY_PATH issue:\r\n\r\n    PS /home/pdadmin/Downloads> $env:LD_LIBRARY_PATH = $null\r\n    PS /home/pdadmin/Downloads> nslookup google.com\r\n    Server:         192.168.2.18\r\n    Address:        192.168.2.18#53\r\n\r\n    Non-authoritative answer:\r\n    Name:   google.com\r\n    Address: 172.217.8.14\r\n\r\nSo, the environment variable is being set by /tmp/.mount_qo4lVC/AppRun -\r\n\r\n    #!/bin/bash\r\n    HERE=$(dirname $(readlink -f \"${0}\"))\r\n    export PATH=\"${HERE}/usr/bin/\":$PATH\r\n    export LD_LIBRARY_PATH=\"${HERE}/usr/lib/\":$LD_LIBRARY_PATH\r\n    exec \"${HERE}/usr/bin/powershell.wrapper\" \"$@\"\r\n\r\nAnd that seems fine I guess - \r\n\r\n    pdadmin@Debian9:/tmp/.mount_qo4lVC$ ls -la usr/lib/libstdc++.so.6\r\n    lrwxrwxrwx 1 root root 19 Apr  5  2014 usr/lib/libstdc++.so.6 -> libstdc++.so.6.0.19\r\n    pdadmin@Debian9:/tmp/.mount_qo4lVC$ ls -la usr/lib/libstdc++.so.6.0.19\r\n    -rw-r--r-- 1 root root 979056 Apr  5  2014 usr/lib/libstdc++.so.6.0.19\r\n    pdadmin@Debian9:/tmp/.mount_qo4lVC$\r\n\r\nWhy wouldn't the native binaries be okay with using the AppImage's libstdc++.so.6?\r\n\r\nFor the cmdlets, I guess I have to look at System.Net.Http.dll.",
      "created_at": "2017-10-13T19:09:54Z",
      "updated_at": "2017-10-13T19:10:55Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pldmgg it's not so much `libstdc++.so.6` as it is the included `libstdc++.so.6`'s dependency on `CXXABI_1.3.8` which is not included in the AppImage. The missing lib is what causes the native binaries to fail.\r\n\r\nCompletely different issue with `irm` and `iwr`.",
      "created_at": "2017-10-13T19:17:11Z",
      "updated_at": "2017-10-13T19:17:11Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "@markekraus Roger that on the `CXXABI_1.3.8` not being in the AppImage...So I guess the natural question is: Does anything inherently PowerShell-related need that environment variable? Is it just there to attempt to replicate how the user has things set in bash? If the latter, maybe we should just have the AppRun bash script pull in environment variables from the user's bash environment\r\n\r\nFor `irm` and `iwr`, is System.Net.Http.dll the thing to look at?",
      "created_at": "2017-10-13T19:42:05Z",
      "updated_at": "2017-10-13T19:42:25Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pldmgg heh.. it's hard to say.. an astonishing amount of tests already fail in the AppImage., but I'm guessing `Start-PSPester` was never really designed to work with it. But, you could run the tests, record the pass/fail/skip/pending numbers, close out and reopen appiage, remove the env var and then run the tests again and see if they improve or get worse.\r\n\r\n> For irm and iwr, is System.Net.Http.dll\r\n\r\nyea... pretty much. that and the libcurl libraries in the AppImage.",
      "created_at": "2017-10-13T20:21:50Z",
      "updated_at": "2017-10-13T20:21:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pldmgg I don't see any difference in test results without the environment variable set so it's possible removing it will have no affect on PowerShell.",
      "created_at": "2017-10-13T21:33:02Z",
      "updated_at": "2017-10-13T21:33:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If we can't get some help to get this working, we may have to consider not having appimage support for 6.0.0 release and revisiting this for 6.1.0.",
      "created_at": "2017-12-01T23:57:58Z",
      "updated_at": "2017-12-01T23:57:58Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "`AppRun` currently does:\r\n\r\n```\r\nexport LD_LIBRARY_PATH=\"${HERE}/usr/lib/\":$LD_LIBRARY_PATH\r\n```\r\n\r\nThis results in the binaries contained within the AppImage to use the bundled libraries, which is intended. But it also has the unintended side effect that whenever binaries are launched from PowerShell that are not inside the AppImage but on the host system, then they inherit the `LD_LIBRARY_PATH`, which makes them also load the libraries from the AppImage. This is undesired and may be causing the issue described.\r\n\r\nThere are at least two options to solve this:\r\n1. Do not export `LD_LIBRARY_PATH` but instead modify the `rpath` using [patchelf](https://nixos.org/patchelf.html)\r\n2. Use something like [appimage-exec-wrapper](https://cgit.kde.org/scratch/brauch/appimage-exec-wrapper.git/) \r\n\r\nDetailed version from https://github.com/AppImage/AppImageKit/wiki/Creating-AppImages#environment-variables:\r\n\r\n> By default, AppRun sets some variables such as `LD_LIBRARY_PATH` before executing the payload application. While this is sufficient in most cases, it may lead to issues if the payload application launches other applications that reside in the base system, that is, outside of the AppImage. KDevelop is an example of such an application. In these cases, the [appimage-exec-wrapper](https://cgit.kde.org/scratch/brauch/appimage-exec-wrapper.git/) library can be used together with the AppImage distribution mechanism. Place the library somewhere in your AppImage and point `LD_PRELOAD` to it before launching your application. Whenever your application invokes a child process through `execv()` or `execve()`, this wrapper will intercept the call and see if the child process lies outside of the bundled appdir. If it does, the wrapper will attempt to undo any changes done to environment variables before launching the process, since you probably did not intend to launch it with e.g. the `LD_LIBRARY_PATH` you previously set for your application. [linuxdeployqt](https://github.com/probonopd/linuxdeployqt), on the other hand, does entirely without setting `LD_LIBRARY_PATH` by [setting the RPATH in libraries and executables relative to $ORIGIN](https://nixos.org/patchelf.html).\r\n",
      "created_at": "2017-12-02T00:13:08Z",
      "updated_at": "2017-12-02T00:13:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, this isn't something we'll be able to look at for RC2 which means it won't be in for 6.0.0.",
      "created_at": "2017-12-11T17:52:41Z",
      "updated_at": "2017-12-11T17:52:41Z"
    },
    {
      "author": "lavahot",
      "author_association": "NONE",
      "body": "Can confirm. This exists in the latest docker image as well. I hope you guys get this fixed soon.",
      "created_at": "2018-03-29T17:16:53Z",
      "updated_at": "2018-03-29T17:16:53Z"
    }
  ],
  "created_at": "2017-10-07T14:15:44Z",
  "labels": [
    "Area-Maintainers-Build"
  ],
  "number": 5053,
  "state": "open",
  "title": "PowerShell Core AppImage breaks networking on Ubuntu, Debian, CentOS, and RedHat",
  "updated_at": "2018-06-20T19:59:07Z"
}