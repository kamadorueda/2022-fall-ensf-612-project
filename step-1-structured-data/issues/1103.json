{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1103",
  "author": "fearthecowboy",
  "body": "Scripts (on linux) don't function unless they have the extension `.ps1` (generally, languages do not require specific extensions in Linux when using shebang to start them `#! /usr/bin/powershell`\n## Steps to reproduce\n\nFile: `myscript`\n\n``` powershell\n#!/usr/bin/powershell\necho hi\n```\n\n``` bash\nchmod a+x ./myscript\n\n# hangs!\n./myscript \n\n\nmv ./myscript ./myscript.ps1\n\n# works\n./myscript.ps1\nhi\n\n```\n## Expected behavior\n\nOn linux, this should work even if the extension isn't `.ps1`\n## Actual behavior\n\n**EDIT** \nit turns out it didn't hang, it fails:\n\n``` text\nSystem.TypeInitializationException: The type initializer for 'System.Management.Automation.PSVersionInfo' threw an exception. ---> System.IO.FileLoadException: Could not load file or assembly 'System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. An internal error occurred.\n (Exception from HRESULT: 0x8007054F)\n   at System.Reflection.Internal.LightUpHelper.GetMethod(Type type, String name, Type[] parameterTypes)\n   at System.Reflection.Internal.MemoryMapLightUp.TryLoadMembers()\n   at System.Reflection.Internal.MemoryMapLightUp.get_IsAvailable()\n   at System.Reflection.Internal.StreamMemoryBlockProvider..ctor(Stream stream, Int64 imageStart, Int32 imageSize, Boolean isFileStream, Boolean leaveOpen)\n   at System.Reflection.PortableExecutable.PEReader..ctor(Stream peStream, PEStreamOptions options, Nullable`1 sizeOpt)\n   at System.Diagnostics.FileVersionInfo.TryLoadManagedAssemblyMetadata()\n   at System.Diagnostics.FileVersionInfo.GetVersionInfo(String fileName)\n   at System.Management.Automation.PSVersionInfo.GetBuildVersion()\n   at System.Management.Automation.PSVersionInfo..cctor()\n   --- End of inner exception stack trace ---\n   at System.Management.Automation.PSVersionInfo.get_PSVersion()\n   at System.Management.Automation.PSSnapInReader.ReadRegistryInfo(Version& assemblyVersion, String& publicKeyToken, String& culture, String& architecture, String& applicationBase, Version& psVersion)\n   at System.Management.Automation.PSSnapInReader.ReadCoreEngineSnapIn()\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportCorePSSnapIn()\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault2()\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\n   at Microsoft.PowerShell.ManagedPSEntry.Main(String[] args)\n\n```\n## Environment data\n\nv0.4.0\n",
  "closed_at": "2017-06-19T19:17:57Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "To be discussed at next usability sync.\n",
      "created_at": "2016-06-16T21:47:29Z",
      "updated_at": "2016-06-16T21:47:29Z"
    },
    {
      "author": "giggio",
      "author_association": "NONE",
      "body": "This is **really** important. Without this we also can't use scripts as executables, as adding a shebang to the start of a file without a `.ps1` extension will fail.\nThis completely breaks the way we work on Linux. On Windows it is fine, we are used to it, on Linux it is just wrong to require the extension.\n",
      "created_at": "2016-08-19T01:34:45Z",
      "updated_at": "2016-08-19T01:34:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I completely understand that the extension is not how Linux works, but wouldn't this encourage non-cross platform PS Scripts?",
      "created_at": "2016-12-01T22:48:09Z",
      "updated_at": "2016-12-01T22:48:09Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "I don't think that's necessarily a bad thing - sure, functions and modules should make considerations for cross platform compatibility, but some of these, and some scripts that leverage them, will inherently target specific platforms.\r\n\r\nIMHO, you might find the folks writing PowerShell scripts on *nix, or at least a decent proportion of them, recognize the importance of cross-platform support, where it makes sense.\r\n\r\nThat said, assuming I'm wrong, wouldn't it be better to have a few folks end up writing non-cross-platform scripts (assumption), rather than walking away from the language given this limitation (assumption, perhaps just as likely)?\r\n\r\nCheers!",
      "created_at": "2016-12-02T04:51:27Z",
      "updated_at": "2016-12-02T04:51:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RamblingCookieMonster I'm personally where you landed on this which is to lower the barrier to entry on Linux to get adoption and where cross platform is needed, scriptanalyzer can help with that and those users will learn very quickly it won't work on Windows.",
      "created_at": "2016-12-02T17:39:15Z",
      "updated_at": "2016-12-02T17:39:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this.  There may be impact to get-command as now it would have to read the shebang to determine if it's a PowerShell script so we can run it within current runspace.  It may be worth experimenting to compare perf impact.  \r\n\r\nWe should fix the hang so that scripts without extensions works as \"executables\" (new instance of powershell will execute it) as long as shebang is there.",
      "created_at": "2016-12-08T17:30:05Z",
      "updated_at": "2016-12-08T17:30:05Z"
    }
  ],
  "created_at": "2016-06-14T16:25:15Z",
  "labels": [
    "Issue-Bug",
    "OS-Linux",
    "Usability",
    "Resolution-Fixed",
    "Committee-Reviewed"
  ],
  "number": 1103,
  "state": "closed",
  "title": "PowerShell Scripts require .ps1 extension",
  "updated_at": "2017-06-19T19:18:11Z"
}