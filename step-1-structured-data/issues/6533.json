{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6533",
  "author": "abhisheksinha89",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nOn Linux/Mac:\r\nOpen any module .psd1 file and update/ add the following line:\r\nProcessorArchitecture = 'Amd64'\r\nOR\r\nProcessorArchitecture ='x86'\r\n\r\nPlease note: ProcessorArchitecture='None' seems to work.\r\n\r\nExpected behavior\r\n-----------------\r\nThe module should be discoverable using Get-Module -ListAvailable and Import-Module should work fine as it does on Windows.\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe module is not listed using Get-Module and Import-Module fails with this error:\r\n```\r\nImport-Module : Unable to load DLL 'api-ms-win-core-sysinfo-l1-1-0.dll': The specified module or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:1\r\n+ Import-Module Standard\r\n+ ~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Import-Module], DllNotFoundException\r\n+ FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n```\r\n",
  "closed_at": "2020-01-14T03:41:20Z",
  "comments": [
    {
      "author": "DWSR",
      "author_association": "NONE",
      "body": "Just ran across this myself. Was going to file a separate issue, but will throw my comments in here instead. I'm not sure if this is specific to compiled modules or not, but that's how I came across mine.\r\n\r\n# Steps to reproduce\r\n\r\n1. Create a cmdlet in C# targetting .NET Standard (I used 2.0, not sure the version matters) and compile it via `dotnet publish --self-contained`.\r\n2. Create a `.psd1` manifest for that module\r\n3. Specify the output assembly file in `NestedModules` in the `.psd1`\r\n4. Specify a `ProcessorArchitecture` of `Amd64` in the `.psd1`\r\n5. Attempt to import the module\r\n\r\n# Expected behavior\r\n* The module is imported properly on non-Windows systems\r\n\r\n# Actual behavior\r\n* On Windows systems, the module imports properly.\r\n* On non-Windows systems, the module import will fail with the following error:\r\n```\r\nipmo : Unable to load shared library 'api-ms-win-core-sysinfo-l1-1-0.dll' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libapi-ms-win-core-sysinfo-l1-1-0.dll: cannot open shared object file: No such file or directory\r\nAt line:1 char:16\r\n+ cd /powerkube; ipmo ./output/PowerKube.psd1\r\n+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Import-Module], DllNotFoundException\r\n+ FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\n# Environment data\r\n\r\n## Linux\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Windows\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Stack Trace\r\n```none\r\nat System.Management.Automation.PsUtils.NativeMethods.GetSystemInfo(SYSTEM_INFO& lpSystemInfo)\r\n   at System.Management.Automation.PsUtils.GetProcessorArchitecture(Boolean& isRunningOnArm)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifest(String moduleManifestPath, ExternalScriptInfo manifestScriptInfo, Hashtable data, Hashtable localizedData, ManifestProcessingFlags manifestProcessingFlags, Version minimumVersion, Version maximumVersion, Version requiredVersion, Nullable`1 requiredModuleGuid, ImportModuleOptions& options, Boolean& containedErrors)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifest(ExternalScriptInfo scriptInfo, ManifestProcessingFlags manifestProcessingFlags, Version minimumVersion, Version maximumVersion, Version requiredVersion, Nullable`1 requiredModuleGuid, ImportModuleOptions& options)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(PSModuleInfo parentModule, String fileName, String moduleBase, String prefix, SessionState ss, Object privateData, ImportModuleOptions& options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found, Boolean& moduleFileFound)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(String fileName, String moduleBase, String prefix, SessionState ss, ImportModuleOptions& options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ImportModule_LocallyViaName(ImportModuleOptions importModuleOptions, String name)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ProcessRecord()\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n```",
      "created_at": "2018-12-12T21:51:18Z",
      "updated_at": "2018-12-12T21:51:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I looked at this per @DWSR request.\r\n\r\nUpon importing a module GetProcessorArchitechture() is called here\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/2b4199a78a1b91f2ea53732597f1467788d1bbb2/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L1852\r\n\r\nwhich is defined here\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/2b4199a78a1b91f2ea53732597f1467788d1bbb2/src/System.Management.Automation/utils/PsUtils.cs#L141\r\n\r\nWhich then calls GetStsyemInfo which is defined here\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/2b4199a78a1b91f2ea53732597f1467788d1bbb2/src/System.Management.Automation/utils/PsUtils.cs#L265-L266\r\n\r\nwhich is PINvoking the `api-ms-win-core-sysinfo-l1-1-0.dll` as defined here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/2b4199a78a1b91f2ea53732597f1467788d1bbb2/src/System.Management.Automation/utils/PInvokeDllNames.cs#L58\r\n\r\nThis is why on non-windows ` Unable to load shared library 'api-ms-win-core-sysinfo-l1-1-0.dll'` happens",
      "created_at": "2018-12-16T18:58:35Z",
      "updated_at": "2018-12-16T18:58:35Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Will this be addressed for the final release of Powershell Core 7?\r\nIt is still an issue in Preview 4.",
      "created_at": "2019-10-22T10:34:12Z",
      "updated_at": "2019-10-22T10:34:12Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Again:\r\nWill this be addressed for the final release of Powershell Core 7?\r\nIt is still an issue in RC1.",
      "created_at": "2020-01-09T16:02:14Z",
      "updated_at": "2020-01-09T16:02:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe https://github.com/PowerShell/PowerShell/pull/11046 will resolve this",
      "created_at": "2020-01-09T17:45:02Z",
      "updated_at": "2020-01-09T17:45:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I hope it was fixed in #11046 but we need to do manual check.",
      "created_at": "2020-01-14T03:47:50Z",
      "updated_at": "2020-01-14T03:47:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11046, which has now been successfully released as `v7.0.0-rc.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:37:04Z",
      "updated_at": "2020-01-16T23:37:04Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Thanks! Works now in Powershell 7 RC2!",
      "created_at": "2020-01-17T16:16:36Z",
      "updated_at": "2020-01-17T16:16:36Z"
    }
  ],
  "created_at": "2018-03-30T18:49:01Z",
  "number": 6533,
  "state": "closed",
  "title": "Module manifest .psd1 file on linux/mac doesn't support ProcessorArchitecture='AMD64' or 'x86'",
  "updated_at": "2020-01-17T16:16:36Z"
}