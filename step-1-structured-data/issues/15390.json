{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15390",
  "author": "rtestardi",
  "body": "Put this in a file like testme.ps1:\r\n\r\n```\r\nparam(\r\n  [switch]$skip = $false,\r\n  [switch]$weird = $false\r\n)\r\n\r\nif (! $skip) {\r\n    $weird  # skip this line and it works!\r\n}\r\n\r\n$hash2=@{}\r\n\r\n$hash2[\"aaa\"]=1\r\n\r\n\"hash value is\"\r\n\r\n$hash2\r\n\r\n```\r\n\r\nWithout the -skip parameter, nothing gets printed for the hash value...\r\n\r\n```\r\nPS C:\\temp> powershell .\\testme.ps1\r\n\r\nIsPresent\r\n---------\r\n    False\r\nhash value is\r\n\r\nPS C:\\temp> powershell .\\testme.ps1 -skip\r\nhash value is\r\n\r\nName                           Value\r\n----                           -----\r\naaa                            1\r\n\r\nPS C:\\temp>\r\n```\r\n\r\nI would have expected the hash value output to be the same in both cases?\r\n\r\nI see the same behavior on Core 7.1.3 and Desktop 5.1.19041.906.\r\n\r\nIs there a workaround?\r\n\r\nThanks.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is rather an odd case. \ud83e\udd14 \r\n\r\nIn general I tend to recommend against having more than one type of object be output from a single function; there are some known issues with the formatter that look a bit like this. Haven't seen this specific one before though.\r\n\r\nAlthough, it is only a formatting problem; the data is still output. If you do `$data = & ./testme.ps1` then $data will still have all three values in it.",
      "created_at": "2021-05-12T18:21:20Z",
      "updated_at": "2021-05-12T18:22:06Z"
    },
    {
      "author": "rtestardi",
      "author_association": "NONE",
      "body": "> I tend to recommend against having more than one type of object be output from a single function\r\n\r\nI think I agree -- but when you get errors and such and/or start trying to instrument code to see what is going on, that becomes pretty hard to ensure.\r\n\r\nThe bottom line is output just gets randomly swallowed up sometimes -- that seems a usability issue.\r\n\r\nThe strange thing is if I output an object before the switchparameter like \"@{bbb=1}\", then the $hash output shows up again...\r\n\r\nIt just seems so fragile. :-(",
      "created_at": "2021-05-12T19:20:26Z",
      "updated_at": "2021-05-12T19:20:26Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It works with this syntax:\r\n```\r\nparam(\r\n  [switch]$skip  = $false,\r\n  [switch]$weird = $false\r\n)\r\n\r\nif ($PSBoundParameters.keys -notcontains 'skip')\r\n{\r\n    # $weird  # skip this line and it works!\r\n    'not $skip'\r\n}\r\n\r\n$hash2=@{}\r\n$hash2[\"aaa\"]=1\r\n\r\n\"hash value is\"\r\n$hash2\r\n\r\n$PSBoundParameters\r\n```",
      "created_at": "2021-05-13T10:33:59Z",
      "updated_at": "2021-05-13T10:33:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, something with the SwitchParameter being sent to the formatter directly (and not as part of a string) is confusing it, looks like.",
      "created_at": "2021-05-13T11:41:02Z",
      "updated_at": "2021-05-13T11:41:02Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > I tend to recommend against having more than one type of object be output from a single function\r\n> \r\n> I think I agree -- but when you get errors and such and/or start trying to instrument code to see what is going on, that becomes pretty hard to ensure.\r\n>\r\nIt is at this point `write-verbose` and `write-debug` become your friends  \r\n```\r\n[cmdletbinding()]\r\nparam(\r\n  [switch]$skip ,\r\n  [switch]$weird \r\n)\r\nif (! $skip) {\r\n    Write-Verbose     $weird  \r\n}\r\n$hash2=@{}\r\n$hash2[\"aaa\"]=1\r\n\"hash value is\"\r\n$hash2\r\n}\r\n```\r\n\r\nAs @vexx32  said \r\n\r\n> [it]   is still output. If you do `$data = & ./testme.ps1` then $data will still have all three values in it.\r\n\r\nUnless you use verbose/debug/host the _instrumentation_ gets mixed up with the _output_ and you need need to keep enabling and disabling it. \r\n\r\n(the behavior after outputting a switch is still broken, but that's another issue) \r\n\r\n\r\n\r\n",
      "created_at": "2021-05-14T14:57:23Z",
      "updated_at": "2021-05-14T14:57:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'd echo @jhoneill's point and say if you need informational / debugging messages, use of `Write-Verbose` / `Write-Debug` and/or `Write-Host` depending on your exact needs is what you really want; those all avoid putting the data in the output stream and causing issues like this.\r\n\r\nFor errors I'd use `throw` or `Write-Error`, or (specifically in a function with [cmdletbinding()]) you can also use `$PSCmdlet.ThrowTerminatingError()` or `$PSCmdlet.WriteError()`.\r\n\r\nThat is a bit tangential; this behaviour is still broken, but hopefully using those you should be able to work around it for the current problem you have. \ud83d\ude42 ",
      "created_at": "2021-05-14T15:48:47Z",
      "updated_at": "2021-05-14T15:48:47Z"
    }
  ],
  "created_at": "2021-05-12T17:57:53Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine-Format"
  ],
  "number": 15390,
  "state": "open",
  "title": "Displaying SwitchParameter causes subsequent output to fail...",
  "updated_at": "2021-05-14T17:09:51Z"
}