{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6580",
  "author": "iSazonov",
  "body": "I experimented with this in previous year and it worked. Seems we have a regression.\r\n\r\nWe register additional provider in [our code](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/utils/ClrFacade.cs#L125) so this should works.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n[System.Text.Encoding]::GetEncodings()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nShow list full list (~140 values) like Windows PowerShell\r\n\r\nActual behavior\r\n---------------\r\n\r\nShow only standard values\r\n```none\r\nCodePage Name       DisplayName\r\n-------- ----       -----------\r\n    1200 utf-16     Unicode\r\n    1201 utf-16BE   Unicode (Big-Endian)\r\n   12000 utf-32     Unicode (UTF-32)\r\n   12001 utf-32BE   Unicode (UTF-32 Big-Endian)\r\n   20127 us-ascii   US-ASCII\r\n   28591 iso-8859-1 Western European (ISO)\r\n   65000 utf-7      Unicode (UTF-7)\r\n   65001 utf-8      Unicode (UTF-8)\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1-31-g879fcd27b8f66ef40dbeb750ade6332cdb10f27a\r\nOS                             Microsoft Windows 10.0.10240\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-05-31T15:01:27Z",
  "comments": [
    {
      "author": "stknohg",
      "author_association": "CONTRIBUTOR",
      "body": "I think it is not a regression.\r\n\r\n`Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);` dose not affects `Encoding.GetEncodings()` results. \r\n\r\nThis additional provider introduced from 6.0 beta.1, but there is no change in the return value from that time.\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-beta.1> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-beta.1\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Program Files\\PowerShell\\6.0.0-beta.1> [System.Text.Encoding]::GetEncodings()\r\n\r\nCodePage Name       DisplayName\r\n-------- ----       -----------\r\n    1200 utf-16     Unicode\r\n    1201 utf-16BE   Unicode (Big-Endian)\r\n   12000 utf-32     Unicode (UTF-32)\r\n   12001 utf-32BE   Unicode (UTF-32 Big-Endian)\r\n   20127 us-ascii   US-ASCII\r\n   28591 iso-8859-1 Western European (ISO)\r\n   65000 utf-7      Unicode (UTF-7)\r\n   65001 utf-8      Unicode (UTF-8)\r\n```\r\n\r\n----\r\n\r\nIncidentally, c# code also returns similar results.\r\n\r\n```csharp\r\n//sample code \r\n//using System.Linq;\r\n//using System.Text;\r\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\r\nEncoding.GetEncodings()\r\n        .ToList()\r\n        .ForEach(e => Console.WriteLine(string.Format(\"{0}\\t{1} : {2}\", e.CodePage, e.Name, e.DisplayName)));\r\n```\r\n\r\nresults.\r\n\r\n```\r\n1200    utf-16 : Unicode\r\n1201    utf-16BE : Unicode (Big-Endian)\r\n12000   utf-32 : Unicode (UTF-32)\r\n12001   utf-32BE : Unicode (UTF-32 Big-Endian)\r\n20127   us-ascii : US-ASCII\r\n28591   iso-8859-1 : Western European (ISO)\r\n65000   utf-7 : Unicode (UTF-7)\r\n65001   utf-8 : Unicode (UTF-8)\r\n```",
      "created_at": "2018-04-06T09:07:20Z",
      "updated_at": "2018-04-06T09:10:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This is very strange because I was comparing the number of supported code pages and this worked. \ud83d\ude15 \r\nSeems It was .Net Core 1.0 and Alfa.17 https://github.com/iSazonov/PowerShell/blob/0f04279aa7e13ea590b4a413afca8b6ed03b8cec/src/Microsoft.PowerShell.SDK/Microsoft.PowerShell.SDK.csproj\r\n\r\nRelated https://stackoverflow.com/questions/46994907/encoding-registerprovidercodepagesencodingprovider-instance-does-not-add-extra",
      "created_at": "2018-04-06T12:57:30Z",
      "updated_at": "2018-04-06T12:59:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Unfortunately, the behavior appears to be [by design](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getencodings?view=netframework-4.7.1#System_Text_Encoding_GetEncodings) (emphasis added):\r\n\r\n> Note\r\n> \r\n> The list of supported encodings returned by the GetEncodings method **does not include any \r\n> additional encodings made available by any EncodingProvider implementations that** were registered by calls to the RegisterProvider method.\r\n\r\nAnd at least at first glance it's not obvious how to work around that, given that [`[System.Text.CodePagesEncodingProvider]::Instance`](https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider.instance?view=netcore-2.0#System_Text_CodePagesEncodingProvider_Instance) lacks a method for enumerating the encodings registered later.\r\n",
      "created_at": "2018-04-06T14:29:16Z",
      "updated_at": "2018-04-06T14:30:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Ah and oh \ud83d\ude04  http://satob.hatenablog.com/entry/2017/04/18/020459",
      "created_at": "2018-04-06T15:13:04Z",
      "updated_at": "2018-04-06T15:13:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nInteresting, and while this brute-force workaround (enumerating integers `0` through `65535` and calling `.GetEncoding()` for each) certainly _works_, you should grab a cup of coffee while it runs... (it took about 45 secs. on my machine).\r\n\r\nBased on the URL cited as a source in the linked page, @stknohg may have originally published the workaround; @stknohg: any new insights since? \r\n\r\nI'm not sure we necessarily need to solve this problem, however and if it does get solved, it should probably be in CorefFX.\r\n\r\nAnother option, assuming that the list of code pages is now _frozen_ (they are _legacy_ technology, after all): simply [hard-code the list]() somewhere (141 entries).\r\n\r\n",
      "created_at": "2018-04-06T15:33:21Z",
      "updated_at": "2018-04-06T15:33:21Z"
    },
    {
      "author": "stknohg",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 No. I don't have new insights. I think that it is .NET Core design, me too.\r\n\r\nIncidentally, I wrote the following code for checking the effect of `[System.Text.Encoding] :: RegisterProvider ([System.Text.CodePagesEncodingProvider] :: Instance)`, not for a workaround.\r\n\r\n```powershell\r\nfor ($i = 0; $i -lt 65535; $i++){\r\n    try{\r\n        $enc = [System.Text.Encoding]::GetEncoding($i)\r\n        Write-Output (\"{0}, {1}, {2}\" -f $i, $enc.WebName, $enc.EncodingName)\r\n    }\r\n    catch{}\r\n}\r\n```",
      "created_at": "2018-04-07T06:17:11Z",
      "updated_at": "2018-04-07T06:17:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood; thanks for letting us know, @stknohg.",
      "created_at": "2018-04-07T12:23:33Z",
      "updated_at": "2020-02-15T17:06:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Make sense to open a request for the enhancement in CoreFX repo? Seems it is useful.",
      "created_at": "2018-04-07T15:08:51Z",
      "updated_at": "2018-04-07T15:08:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Worth a try: https://github.com/dotnet/corefx/issues/28915 (obsolete, see link  in next comment).",
      "created_at": "2018-04-07T16:17:43Z",
      "updated_at": "2020-02-15T17:05:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Tracking issue https://github.com/dotnet/runtime/issues/25819",
      "created_at": "2020-02-15T17:03:44Z",
      "updated_at": "2020-02-15T17:03:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The new .Net API was implemented and we get it in .Net 5.0 Preview7/8.",
      "created_at": "2020-06-09T05:09:49Z",
      "updated_at": "2020-06-09T05:09:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\n([System.Text.Encoding]::GetEncodings()).count\r\n\r\n116\r\n```\r\n\r\nNow works well!",
      "created_at": "2021-05-31T15:01:27Z",
      "updated_at": "2021-05-31T15:01:27Z"
    }
  ],
  "created_at": "2018-04-06T04:23:08Z",
  "number": 6580,
  "state": "closed",
  "title": "[System.Text.Encoding]::GetEncodings() doesn't show full cogepage list",
  "updated_at": "2021-05-31T15:02:04Z"
}