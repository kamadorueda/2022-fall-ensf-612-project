{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3103",
  "author": "iSazonov",
  "body": "Close #3083\r\n\r\nThis problem only appears in the interactive session with manual input\r\n(or right click) and with PSReadLine loaded so no tests.",
  "closed_at": "2017-02-14T00:45:01Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "What's the error message on the motivation example now?\r\nI think it would be better to modify parser to allow blank lines in the interactive session. That would greatly improve copy-paste story.\r\n\r\nEssentially the smallest repro is \r\n\r\n```powershell\r\nclass foo {\r\n\r\n}\r\n```",
      "created_at": "2017-02-06T05:50:20Z",
      "updated_at": "2017-02-06T05:50:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The fix just allow blank lines.",
      "created_at": "2017-02-06T06:03:50Z",
      "updated_at": "2017-02-06T06:03:50Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Oh, that's very interesting. From the diff it seems that it just changes extent, but keeps reporting the error. Let me check with a local build.",
      "created_at": "2017-02-06T06:28:27Z",
      "updated_at": "2017-02-06T06:28:27Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Verified. Great change!",
      "created_at": "2017-02-06T06:32:12Z",
      "updated_at": "2017-02-06T06:32:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes it is slightly a trick. :-)\r\nPerhaps we should replace `ExtentOf` on `After`?",
      "created_at": "2017-02-06T06:50:02Z",
      "updated_at": "2017-02-06T06:50:02Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov yeah, `After` seems more of a pattern in parser. I actually tried replace it by After, but it didn't work for me. And I didn't have ability to debug it at the moment.",
      "created_at": "2017-02-06T06:54:48Z",
      "updated_at": "2017-02-06T06:54:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I found as apply `After`. Looks better for me.",
      "created_at": "2017-02-06T07:56:05Z",
      "updated_at": "2017-02-06T07:56:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The use of `After` looks incorrect, or at least inconsistent to me. In that overload, the first parameter is where we want to report the error, so on the opening curly is fine, and consistent with most of the other places we report similar errors.\r\n\r\nThe important part is reporting where the error was detected, the second parameter - and that should be sufficient to fix the bug.",
      "created_at": "2017-02-06T19:22:22Z",
      "updated_at": "2017-02-06T19:22:22Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> where we want to report the error, so on the opening curly is fine\r\n\r\nI think it's more usable to report non-closed curly closer to the expected place.\r\nImagine 100 lines class. Would you rather see error on the first open curly or on the last line?\r\n\r\nAlso, the fix itself exploits the implementation of `ReportIncompleteInput`: if reported extent happens at the last token, we actually don't error out and waiting for more input. So extent here has to be at the end. It's consistent with how do you treat things like\r\n\r\n```\r\n& { 1\r\n\r\n\r\n}\r\n```",
      "created_at": "2017-02-06T19:29:54Z",
      "updated_at": "2017-02-06T19:29:54Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Yes, but it's somewhat difficult to infer where the closing brace should go.  End of file is often the best we can do, and that's worse than pointing to the opening brace.",
      "created_at": "2017-02-06T19:33:47Z",
      "updated_at": "2017-02-06T19:33:47Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Oh, the proposed fix moves the point where the error is reported by 1 character - the character after the curly - so it's not really much different, and it's not consistent with most other places we report the same error.",
      "created_at": "2017-02-06T19:35:46Z",
      "updated_at": "2017-02-06T19:35:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tried looking for `if (rCurly.Kind != TokenKind.RCurly)` and found:\r\n1. We should fix the same issue with `Enum` - [Line](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/Parser.cs#L4272)\r\n2. We have working pattern for `@{}` - [Line](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/Parser.cs#L6348) - Can we use this to fix `Class` and `Enum`?",
      "created_at": "2017-02-07T04:21:43Z",
      "updated_at": "2017-02-07T04:23:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The hash literal might be a bad example, I think the error should point to the `@{`.\r\n\r\nConsider an example like:\r\n\r\n```PowerShell\r\nfunction foo\r\n{\r\n\r\nfunction bar\r\n{\r\n}\r\n```\r\n\r\n`foo` is missing the matching brace, but it can't be detected until after `bar`. If we reported from opening brace to end of file, you get ugly red squiggles filing up the screen and it's a bit slow rendering that - not too useful for folks who don't like typing the closing brace right away.\r\n\r\nBy reporting the error on the opening brace, assuming sane indentation, it's usually easy to figure out where the missing brace goes.\r\n\r\nSo I'd say hash literals, class, and enum should all be modified to report the error after the opening brace, and make sure to pass the position the error is detected to ensure we correctly report an incomplete parse for interactive command line use.",
      "created_at": "2017-02-07T06:28:39Z",
      "updated_at": "2017-02-07T06:28:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Fix for hash, class, and enum is ready. Now the error position is reported after the opening brace.",
      "created_at": "2017-02-07T12:38:08Z",
      "updated_at": "2017-02-07T12:38:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Great commit description! It helps me quickly understand the problem and the fix. Thanks!",
      "created_at": "2017-02-15T18:49:42Z",
      "updated_at": "2017-02-15T18:49:42Z"
    }
  ],
  "created_at": "2017-02-06T05:43:37Z",
  "number": 3103,
  "state": "closed",
  "title": "Fix class parsing (issue 3083)",
  "updated_at": "2017-03-27T06:01:25Z"
}