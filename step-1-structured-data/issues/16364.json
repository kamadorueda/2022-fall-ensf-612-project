{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16364",
  "author": "NotNotWrongUsually",
  "body": "### Summary of the new feature / enhancement\n\nI would like to place a character formatted with an  ANSI escape sequence in a BufferCell, but the constructor only takes a char:\r\n\r\n`BufferCell(Char, ConsoleColor, ConsoleColor, BufferCellType)`\r\n\r\nEven though only being a single character when rendered, I would have to use a string to represent it when using ANSI escape sequences. Further, in my case, I would use the escape sequence to format the color, thus having to provide the two ConsoleColors would either be superfluous (if ignored) or detrimental (if overriding the ANSI coloring), so I would like a constructor like this:\r\n\r\n`BufferCell(String, BufferCellType)`\r\n\r\nWhich should take the output resulting from the string and put it in the Buffercell, leaving colors alone.\n\n### Proposed technical implementation details (optional)\n\n- String is a poor format for what is supposed to be only one character. I propose that any implementation and documentation reflects that only the _first renderable_ character from the string will be used.\r\n\r\n- Apart from allowing ANSI formatting, this should allow using Unicode escape sequences (e.g., ``\"`u{1F600}\"``) in BufferCells.",
  "closed_at": "2021-11-12T00:00:45Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The underlying API (`Get/SetConsoleScreenBuffer`) does not have a [virtual terminal equivalent](https://docs.microsoft.com/en-us/windows/console/getconsolescreenbufferinfoex#remarks) so I'm not sure it makes sense to later this API.\r\n\r\nIf you want to programmatically set specific cells, it may be better to set cursor position via escape sequences, e.g.\r\n\r\n```powershell\r\n\"`e[s\"         + # Safe cursor position\r\n    \"`e[1;1H\"  + # Set cursor position to 1,1\r\n    \"`e[30m\"   + # Change color\r\n    \"testing\"  + # String to write\r\n    \"`e[0m\"    + # Reset color\r\n    \"`e[u\"     + # Reset cursor position\r\n\r\n",
      "created_at": "2021-11-04T12:58:43Z",
      "updated_at": "2021-11-04T12:58:43Z"
    },
    {
      "author": "NotNotWrongUsually",
      "author_association": "NONE",
      "body": "@SeeminglyScience - Thank you for the suggestion! This is what I do in the current incarnation of the code. Problem is, performance is _very much_ a consideration in this case, and SetBufferContents _vastly_ outperforms this option.\r\n\r\nBesides, it seems wrong somehow that the \"proper\" way of populating the console programmatically can only cover a tiny subset of what can actually be rendered (colors, symbols, etc.)",
      "created_at": "2021-11-04T19:13:23Z",
      "updated_at": "2021-11-04T19:13:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience - Thank you for the suggestion! This is what I do in the current incarnation of the code. Problem is, performance is _very much_ a consideration in this case, and SetBufferContents _vastly_ outperforms this option.\r\n\r\nIf the API in `PSHost` were to be changed to support escape sequences, it would need to do some form of what I have above.  The API it uses is provided by the operating system, if it's not updated to support escape sequences, then there isn't much for PowerShell to do.\r\n\r\nThat said, yes the above is going to lack in performance.  Updates need to sort of be batched together and ideally not duplicate redundant escapes.  In some cases it may be cheaper to redraw the screen.\r\n\r\n> Besides, it seems wrong somehow that the \"proper\" way of populating the console programmatically can only cover a tiny subset of what can actually be rendered (colors, symbols, etc.)\r\n\r\nI think it would be more accurate to refer to it as the old way of doing it.  The operating system does not support using these APIs with escape sequences and that team has made it clear that they don't plan to change that in the future.  For example, this warning is on the [`WriteConsoleOutput`](https://docs.microsoft.com/en-us/windows/console/writeconsoleoutput) function used by PowerShell [here](https://github.com/PowerShell/PowerShell/blob/0f2f23f67a2c3ec53cf82c8d1a67b479f62934e4/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleControl.cs#L3146):\r\n\r\n> This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite future. Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios. You can find more information about this design decision in our classic console vs. virtual terminal document.\r\n\r\nand also this warning:\r\n\r\n> This API has a virtual terminal equivalent in the text formatting and cursor positioning sequences. Move the cursor to the location to insert, apply the formatting desired, and write out the text. Virtual terminal sequences are recommended for all new and ongoing development.\r\n",
      "created_at": "2021-11-04T21:46:44Z",
      "updated_at": "2021-11-04T21:46:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-11-12T00:00:44Z",
      "updated_at": "2021-11-12T00:00:44Z"
    }
  ],
  "created_at": "2021-11-03T15:49:59Z",
  "number": 16364,
  "state": "closed",
  "title": "BufferCell should have a constructor accepting a string",
  "updated_at": "2021-11-12T00:00:45Z"
}