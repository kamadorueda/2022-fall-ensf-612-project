{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12863",
  "author": "IISResetMe",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\nDelay type parameter-binding of unclosed  (self-referential) type references in generic interface declarations\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\nWe currently support implementing typed generic interfaces, but only if the type parameters can be resolved in the defining scope prior to defining the new type.\r\n\r\nThis makes the following implementation impossible in PowerShell:\r\n\r\n        class SortableThing : IComparable, IComparable[SortableThing]\r\n        {\r\n            [int]Value\r\n\r\n            [int]\r\n            CompareTo([SortableThing]$obj)\r\n            {\r\n                return $this.Value.CompareTo($obj.Value)\r\n            }\r\n\r\n            [int]\r\n            CompareTo($obj)\r\n            {\r\n                if($obj -isnot [SortableThing]){\r\n                    throw [ArgumentException]::new()\r\n                }\r\n                return $this.CompareTo([SortableThing]$obj)\r\n            }\r\n        }\r\n\r\nTo this end, the following changes have been made to the DefineTypeHelper in PSType:\r\n\r\n - For declared interfaces, `GetBaseTypes` now outputs a list of late-binding `InterfaceExpression`'s rather than a list of `Type` instances describing concrete interfaces\r\n - We add the interfaces to the new type _after_ defining the type builder, allowing us to resolve self-referential type parameters against the still-unclosed-type instead of throwing `TypeNotFound`\r\n\r\nAt some point we will need to re-think how we resolve generic type arguments, perhaps refactor `GenericTypeName` completely to natively support late binding against unclosed types, but I'll leave that an exercise for the future for now.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-07-10T18:00:07Z",
  "comments": [
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Although some of there errors are surely mine, HEAD of `master` seems broken at the moment, please advice on how to proceed.\r\n\r\nBuild from clean clone of `master` at e93381e73e16a0d55ceab879ccaa58456800371d \r\n![image](https://user-images.githubusercontent.com/7413755/83414887-84127e00-a41e-11ea-94a4-8f7db0418546.png)\r\n",
      "created_at": "2020-06-01T13:43:15Z",
      "updated_at": "2020-06-01T13:43:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You should be able to build in release mode in the meantime to bypass the debug assert and test things, but we do need https://github.com/PowerShell/PowerShell/pull/12840 fixed so we don't need to do that. \ud83d\ude42 ",
      "created_at": "2020-06-01T13:47:28Z",
      "updated_at": "2020-06-01T13:47:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-09T02:00:21Z",
      "updated_at": "2020-06-09T02:00:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-30T08:00:06Z",
      "updated_at": "2020-06-30T08:00:06Z"
    }
  ],
  "created_at": "2020-06-01T13:06:34Z",
  "number": 12863,
  "state": "closed",
  "title": "WIP: Allow self-referential generic type parameters in interface list",
  "updated_at": "2020-07-14T21:26:43Z"
}