{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13812",
  "author": "christophwille",
  "body": "I initially opened a SO question at https://stackoverflow.com/questions/64424668/startupscripts-in-initialsessionstate-not-invoked-for-ps-core-runspacepool, but this is getting more and more into the developer realm.\r\n\r\nBasically I have an InitialSessionState with an ImportPSModule, various Variables.Add and a StartupScripts.Add call. My expectation was that it being called \"scripts\", I could pass a script as string that uses the already executed import plus the variables that I set up. However, this continues to balk at me with \r\n\r\nSystem.Management.Automation.PSInvalidOperationException: 'Running startup script threw an error: The term 'Connect-ExchangeOnline -AppId $exoAppId -Organization $exoOrganization -Certificate $exoCertificate' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again..\r\n\r\n(Note that the very same script runs fine after PS.Create & assigning the runspace)\r\n\r\nLooking at https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/InitialSessionState.cs#L2864 seems to indicate that it is all about commands, not scripts. True? Or am I missing a magical switch to make script run?",
  "closed_at": "2021-01-18T12:23:14Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, looks like \"startup scripts\" should probably be named \"startup script _files_\", it's really not looking like it's meant for anything other than that.",
      "created_at": "2020-10-19T11:53:15Z",
      "updated_at": "2020-10-19T11:53:15Z"
    },
    {
      "author": "christophwille",
      "author_association": "NONE",
      "body": "Having it on-disk with a .ps1 extension works in that it imports the module first, sets the variables and then executes the script from the .ps1. Not having it on disk would be great though (not a huge issue in this specific case but in general I'd prefer to pass it directly via the code as a string).",
      "created_at": "2020-10-19T12:30:30Z",
      "updated_at": "2020-10-19T12:30:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This was discussed in #9734. It is \"by-design\". In the scenario you should use Commands.Add().",
      "created_at": "2020-10-19T15:53:52Z",
      "updated_at": "2020-10-19T15:53:52Z"
    },
    {
      "author": "christophwille",
      "author_association": "NONE",
      "body": "But... Commands.Add() on InitialSessionState looks entirely different from AddCommand / Commands.Add in PS (SessionStateCommandEntry instead of Command/string). How would I pass say a Import-Module \"ExchangeOnlineManagement\"? (or the longer one that failed on me in the initial question: Connect-ExchangeOnline)",
      "created_at": "2020-10-19T16:01:14Z",
      "updated_at": "2020-10-19T16:01:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can create a factory for creating PowerShell objects and initialize there.",
      "created_at": "2020-10-19T16:34:53Z",
      "updated_at": "2020-10-19T16:34:53Z"
    },
    {
      "author": "christophwille",
      "author_association": "NONE",
      "body": "Is there some docs / samples that show this? Never heard of those ever, much less tried. Thanks!",
      "created_at": "2020-10-19T16:45:52Z",
      "updated_at": "2020-10-19T16:45:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@christophwille I guess you want to create an ISS with pre-defined state. In any case you will create a PowerShell object based on the ISS. If you create such PowerShell object in some code paths you should follow \"dry\" principle. As result you will create a method where you create ISS and then PowerShell object based on it. You can use the method everywhere. The method could be implemented in a static class - factory.",
      "created_at": "2020-10-19T17:23:32Z",
      "updated_at": "2020-10-19T17:23:32Z"
    },
    {
      "author": "christophwille",
      "author_association": "NONE",
      "body": "Ok, misunderstanding then (I was expecting some sort of PS factory thingy). My use case again:\r\n\r\nI am creating a RunspacePool with the ISS - and when I assign that pool to a newly created PS, I want each and every Runspace in that pool to be in a certain state (module loaded, ExO connected). That is what I try to achieve - and actually can do with StartupScripts and a script file on disk. \r\n\r\nYou alluded to Commands.Add in ISS to be able to achieve the same thing. How?",
      "created_at": "2020-10-19T17:34:07Z",
      "updated_at": "2020-10-19T17:34:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@christophwille Thanks for sharing your scenario. I suggest to open new issue, describe your scenario with code example and a problem you ask to resolve.\r\n",
      "created_at": "2020-10-20T02:55:46Z",
      "updated_at": "2020-10-20T02:56:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Close as stale issue. Feel free to continue discussion.",
      "created_at": "2021-01-18T12:23:14Z",
      "updated_at": "2021-01-18T12:23:14Z"
    }
  ],
  "created_at": "2020-10-19T11:39:40Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 13812,
  "state": "closed",
  "title": "Script in StartupScripts",
  "updated_at": "2021-01-18T12:23:14Z"
}