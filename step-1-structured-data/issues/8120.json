{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8120",
  "author": "iSazonov",
  "body": "From http://unicode.org/faq/casemap_charprop.html :\r\n> Case folding is mostly used for caseless comparison of text, such as identifiers in a computer program, rather than actual text transformation.\r\n\r\nI opened https://github.com/dotnet/corefx/issues/33047 to implement _simple case folding_.\r\n\r\nWe could use this for improving performance in:\r\n- PowerShell identifer comparisons\r\n- Select-String cmdlet\r\n- some more (???)",
  "closed_at": "2021-08-25T04:07:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I started. Alfa code https://github.com/iSazonov/PowerShell/tree/add-unicode3/src/System.Management.Automation/utils/unicode\r\nThe code doesn't depend on PowerShell so you can freely copy-past the files to your local folder and run with `dotnet run -c release`.\r\n\r\nBetter result is 10x win in best case and -4x in worst case. It is worth exploring further!\r\n\r\n@mklement0 Have you an experience with Unicode? I'll need help to create a test set and review API design.",
      "created_at": "2018-10-27T11:10:22Z",
      "updated_at": "2018-11-01T11:36:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "(Somewhat ironically, the `U` in `Unicode` in your URL should be lowercase `u` - else the link doesn't work: https://github.com/iSazonov/PowerShell/tree/add-unicode3/src/System.Management.Automation/utils/unicode)\r\n\r\nThanks for looking into this, looks promising.\r\n\r\nI think I have a basic understanding of Unicode fundamentals, but no experience relating to _implementation_ aspects.\r\n\r\nCan you elaborate on how I could help? Not sure what you mean by _test site_.\r\n\r\nAs for implementing the Unicode-version-dependent case-folding tables ourselves, please note the following comments from https://github.com/dotnet/corefx/issues/17233:\r\n\r\n>  I think the open issue is how we support this on Windows (since **I think that we can get Case Folding functionality from ICU**).\r\n>\r\n> In general, **we've tried to move away from the framework itself shipping globalization data** and used the OS provided APIs instead. Since Windows doesn't currently expose a way to do case folding, we'd have to figure out what to do.\r\n\r\nSo it sounds like we should take advantage of OS support where available (ICU on Linux; ?? on macOS).\r\nAs for Windows, and therefore overall: Perhaps it's worth waiting for CoreFx to support this?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-27T20:25:30Z",
      "updated_at": "2018-11-01T11:36:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  Not sure what you mean by test site.\r\n\r\nTest set :-) It is Friday evening.  If we would develop the APIs we should create a full set of tests. (We could look and grab CoreFX/CoreCLR tests - possible start search point https://github.com/dotnet/corefx/pull/32968).\r\n\r\n> Can you elaborate on how I could help?\r\n\r\n1. We need _right_ tests to get correct code.\r\n2. I would like to receive confirmation from you, community and MSFT team that we are moving in the right direction - can we use simple case folding for:\r\n    - case-insensitive search in:\r\n        - string.IndexOf( \"...\", StringComparison.OrdinalIgnoreCase/CurrentCultureIgnoreCase/InvarianCultureIgnoreCase) and Select-String cmdlet respectively.\r\n        - RegEx engine\r\n    - case-insensitive comparison of language (VB, PowerShell, etc.) identifiers.\r\n\r\nhttp://unicode.org/ contains standard papers. I could share more tomorrow.\r\n\r\n>So it sounds like we should take advantage of OS support where available (ICU on Linux; ?? on macOS).\r\nAs for Windows, and therefore overall: Perhaps it's worth waiting for CoreFx to support this?\r\n\r\n1. Label on the issue is \"Future\" - no immediate plans. If they started today it would appear only in version 3.0 and we would get it only a year later in PowerShell Core 6.4. But  no immediate plans exist and we will wait too long.\r\nI believe that we could do this work partly here to get the benefits faster and at the same time work on it in CoreCRL/CoreFX. This practice was already used when porting to PowerShell Core.\r\n2. ICU is native code. My understanding is:\r\n    - performance penalty is very large for p/invoke.\r\n    - currently CoreFX/CoreCLR uses p/invoke to do culture specific string handling. On Windows it is p/invokes to Kernel32.\r\n    - so moving from Kernel32 to ICU makes no sense. I see that .Net Core team is consistently removing p/invokes from .Net Core code in favor of the managed code implementation and get performance wins.\r\n   - It was these considerations that inspired me to begin this work of implementing \"simple case folding\" on managed code.\r\n\r\nInital plan is:\r\n- design and implement internally-only simple APIs for char and string conversion, equality, comparison and search based on simple case folding.\r\n- use the APIs in Select-String -SimpleMatch.\r\n\r\nIdeal plan is to use the APIs in PowerShell engine for identifers.\r\n\r\nA perfect plan :-) is to get full featured API in CoreFX/CoreCLR.\r\n",
      "created_at": "2018-10-28T10:28:27Z",
      "updated_at": "2018-10-28T10:28:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today I have done some performance tests and it seems it will not be easy to overtake Kernel32 p/invokes. Though I have no experience with low level optimizations at all.",
      "created_at": "2018-10-28T18:11:13Z",
      "updated_at": "2018-10-28T18:11:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From: http://unicode.org/faq/casemap_charprop.html\r\n\r\n> Q: What is the difference between case mapping and case folding?\r\nA: Case mapping or case conversion is a process whereby strings are converted to a particular form\u2014uppercase, lowercase, or titlecase\u2014possibly for display to the user. Case folding is mostly used for caseless comparison of text, such as identifiers in a computer program, rather than actual text transformation. Case folding in Unicode is primarily based on the lowercase mapping, but includes additional changes to the source text to help make it language-insensitive and consistent. As a result, case-folded text should be used solely for internal processing and generally should not be stored or displayed to the end user.\r\n\r\nFrom http://www.unicode.org/reports/tr31/tr31-29.html#R5\r\n\r\n> Equivalent Case-Insensitive Identifiers: To meet this requirement, an implementation shall specify either simple or full case folding, and adhere to the Unicode specification for that folding. Any two identifiers that have the same case-folded form shall be treated as equivalent by the implementation. \r\n\r\n\r\nFrom http://www.unicode.org/reports/tr21/tr21-5.html\r\n\r\n> 1.3 Caseless Matching\r\nCaseless matching is implemented using case-folding. The latter is the process of mapping strings to a canonical form where case differences are erased. Case-folding allows for fast caseless matches in lookups, since only binary comparison is required. Case-folding is more than just conversion to lowercase. For example, it handles cases such as the Greek sigma, so that  \"\u039c\u03ac\u03ca\u03bf\u03c2\" and \"\u039c\u0386\u03aa\u039f\u03a3\" will match correctly.\r\n\r\nFrom http://unicode.org/reports/tr18/#Folded_Matching\r\n\r\n> 3.10 Folded Matching (Retracted) \r\nRL3.10 Folded Matching \r\nPrevious versions of RL3.10 described tailored folding. However, for most full-featured regular expression engines, it is quite difficult to match under folding equivalences that are not 1:1. For more discussion of this, see 1.5 Simple Loose Matches and 2.1 Canonical Equivalents. Thus RL3.10 has been retracted. \r\n\r\nFrom http://unicode.org/reports/tr18/#Simple_Loose_Matches\r\n\r\n> 1.5  Simple Loose Matches \r\nMost regular expression engines offer caseless matching as the only loose matching. If the engine does offers this, then it needs to account for the large range of cased Unicode characters outside of ASCII.\r\nRL1.5 Simple Loose Matches \r\n To meet this requirement, if an implementation provides for case-insensitive matching, then it shall provide at least the simple, default Unicode case-insensitive matching, and specify which properties are closed and which are not. \r\nTo meet this requirement, if an implementation provides for case conversions, then it shall provide at least the simple, default Unicode case folding. \r\n\r\nFrom http://www.unicode.org/versions/Unicode11.0.0/ch03.pdf\r\n\r\n> 3.13 Default Case Algorithms\r\n\r\n>Default Case Folding\r\nDefault Case Folding is based on the full case conversion operations without the contextdependent\r\nmappings sensitive to the casing context.\r\nR4 toCasefold(X): Map each character C in X to Case_Folding(C).\r\n\u2022 Case_Folding(C) uses the mappings with the status field value \u201cC\u201d or \u201cF\u201d in the\r\ndata file CaseFolding.txt in the Unicode Character Database.\r\n\r\nA modified form of Default Case Folding is designed for best behavior when doing caseless\r\nmatching of strings interpreted as identifiers.\r\n(See above http://www.unicode.org/reports/tr31/tr31-29.html#R5)\r\n\r\n>Default Caseless Matching\r\nDefault caseless matching is the process of comparing two strings for case-insensitive\r\nequality. The definitions of Unicode Default Caseless Matching build on the definitions of\r\nUnicode Default Case Folding.\r\nDefault Caseless Matching uses full case folding:\r\nD144 A string X is a caseless match for a string Y if and only if:\r\ntoCasefold(X) = toCasefold(Y)\r\n\r\n\r\nNot related but interesting http://www.unicode.org/notes/tn31/tn31-2.html\r\nFast Compression Algorithm for Unicode Text (compression ratio ~20-50%, speed ratio ~15 times)",
      "created_at": "2018-10-30T10:24:38Z",
      "updated_at": "2018-10-30T10:24:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Additianal link from Rust RegEx library repository https://github.com/rust-lang/regex/blob/77140e7c1628ac31026d2421c6a4c3b0eb19506c/UNICODE.md#rl15-simple-loose-matches",
      "created_at": "2018-10-31T06:16:23Z",
      "updated_at": "2018-10-31T06:16:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "First alfa code performance results (yes, I got the code fast!):\r\n/ * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.10240.17146 (1507/RTM/Threshold1)\r\nIntel Core i3-4150 CPU 3.50GHz (Haswell), 1 CPU, 4 logical and 2 physical cores\r\nFrequency=3410090 Hz, Resolution=293.2474 ns, Timer=TSC\r\n.NET Core SDK=2.1.403\r\n  [Host]     : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n\r\n\r\n|           Method |         StrA |        StrB |      Mean |    Error |    StdDev |    Median | Scaled | ScaledSD |  Gen 0 | Allocated |\r\n|----------------- |------------- |------------ |----------:|---------:|----------:|----------:|-------:|---------:|-------:|----------:|\r\n|   ToLowerRussian | CaseFolding1 | CaseFolding |  73.28 ns | 2.129 ns |  3.120 ns |  72.32 ns |   0.99 |     0.06 | 0.0660 |     104 B |\r\n| ToLowerInvariant | CaseFolding1 | CaseFolding |  73.85 ns | 1.660 ns |  3.978 ns |  72.09 ns |   1.00 |     0.00 | 0.0660 |     104 B |\r\n|       StringFold | CaseFolding1 | CaseFolding |  65.15 ns | 1.372 ns |  3.068 ns |  63.81 ns |   0.88 |     0.06 | 0.0660 |     104 B |\r\n|                  |              |             |           |          |           |           |        |          |        |           |\r\n|   ToLowerRussian | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f | 188.23 ns | 5.924 ns | 17.185 ns | 177.66 ns |   1.09 |     0.11 | 0.0660 |     104 B |\r\n| ToLowerInvariant | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f | 173.58 ns | 3.699 ns |  8.646 ns | 169.48 ns |   1.00 |     0.00 | 0.0660 |     104 B |\r\n|       StringFold | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f |  77.15 ns | 1.580 ns |  2.054 ns |  76.17 ns |   0.45 |     0.02 | 0.0660 |     104 B |",
      "created_at": "2018-11-01T09:49:08Z",
      "updated_at": "2018-11-01T09:54:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Given how frequently PS uses case-insensitive comparisons, that will likely make a massive difference if it can be utilised widely in the PS code base.\n\nLooking good @iSazonov!!",
      "created_at": "2018-11-01T10:49:34Z",
      "updated_at": "2018-11-01T10:49:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, it is encouraging. I updated link above to the alfa code. Now I started to work on fold comparison methods and perf tests.",
      "created_at": "2018-11-01T11:40:16Z",
      "updated_at": "2018-11-01T11:40:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This can not be trusted but the first results are impressive.\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.10240.17146 (1507/RTM/Threshold1)\r\nIntel Core i3-4150 CPU 3.50GHz (Max: 0.80GHz) (Haswell), 1 CPU, 4 logical and 2 physical cores\r\nFrequency=3410090 Hz, Resolution=293.2474 ns, Timer=TSC\r\n.NET Core SDK=2.1.403\r\n  [Host]     : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n\r\n\r\n|                                Method |         StrA |        StrB |      Mean |      Error |     StdDev |    Median | Allocated |\r\n|-------------------------------------- |------------- |------------ |----------:|-----------:|-----------:|----------:|----------:|\r\n|                  CoreFXCompareOrdinal | CaseFolding1 | CaseFolding |  15.97 ns |  0.4665 ns |  0.4581 ns |  15.75 ns |       0 B |\r\n|        CoreFXCompareOrdinalIgnoreCase | CaseFolding1 | CaseFolding |  28.47 ns |  0.6793 ns |  1.1535 ns |  27.98 ns |       0 B |\r\n|         CoreFXCompareInvariantCulture | CaseFolding1 | CaseFolding |  78.80 ns |  1.5962 ns |  3.6354 ns |  77.11 ns |       0 B |\r\n|           CoreFXCompareRussianCulture | CaseFolding1 | CaseFolding | 205.74 ns |  4.0894 ns |  3.8252 ns | 203.90 ns |       0 B |\r\n| CoreFXCompareRussianCultureIgnoreCase | CaseFolding1 | CaseFolding | 213.12 ns | 17.6287 ns | 17.3137 ns | 204.75 ns |       0 B |\r\n|                         CompareFolded | CaseFolding1 | CaseFolding |  23.20 ns |  0.4771 ns |  0.5495 ns |  22.90 ns |       0 B |\r\n|                  CoreFXCompareOrdinal | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f |  16.27 ns |  0.3593 ns |  0.3690 ns |  16.21 ns |       0 B |\r\n|        CoreFXCompareOrdinalIgnoreCase | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f |  35.92 ns |  1.1880 ns |  1.3205 ns |  35.35 ns |       0 B |\r\n|         CoreFXCompareInvariantCulture | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f | 101.51 ns |  2.7983 ns |  7.8468 ns |  97.63 ns |       0 B |\r\n|           CoreFXCompareRussianCulture | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f | 205.93 ns |  3.9585 ns |  4.2356 ns | 204.45 ns |       0 B |\r\n| CoreFXCompareRussianCultureIgnoreCase | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f | 210.18 ns | 15.8387 ns | 14.8155 ns | 204.99 ns |       0 B |\r\n|                         CompareFolded | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f1 | \u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f\u042f |  22.83 ns |  0.1892 ns |  0.1477 ns |  22.79 ns |       0 B |",
      "created_at": "2018-11-01T13:45:49Z",
      "updated_at": "2018-11-01T13:45:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I updated my work branch. Now the code is placed in correct (I hope :-) ) folders and you can compile PowerShell and run xUnit and performance tests.\r\n\r\nNext step is to create a comparer based on simple folded strings. Then we could try it in PowerShell engine.\r\nUpdate: comparer was pushed.",
      "created_at": "2018-11-02T12:43:24Z",
      "updated_at": "2018-11-02T14:43:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great stuff, @iSazonov; thanks also for the helpful collection of quotes from the Unicode standard.\r\n\r\nI've never had to deal with Unicode normalization problems in the context of .NET (e.g., that accented letter `\u00fc` can be represented either as single code point `U+00FC` or as two code points `U+0075` + `U+0308` - `u` followed by combining diacritic `\u0308`): do they come into play here?\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-02T13:08:14Z",
      "updated_at": "2018-11-02T13:09:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is case mapping and case folding.\r\nCase mapping is a conversion like ToLowerCase() and ToUpperCase(). Case mapping is _culture aware_.\r\nCase folding is still another conversion and it is _culture-independent_. The last feature is key for us here.\r\nCase folding can be full and simple.\r\nFull case folding can change string length (i.e. replace 2-byte to 4 byte code point).\r\nSimple case folding always preserves the string length. This is a key for us here too.\r\nCase folding is 1:1 char replacement - no chars added, no chars removed.\r\n\r\nUnicode standard exposes CaseFolding.txt file containing a table for case folding (full and simple in one table). We parse the file (we created a PowerShell script for this) and one-time generate C# file with two static char arrays - first for 2-byte code points and second for 4-byte code points - this is important because chars in C# is Utf16 2-byte values, it also means that we have to process surrogates. These array is used for one-step very fast char conversions. Surrogates require additional calculations but surrogates is very rare and the calculations is very simple - this should not degrade performance.",
      "created_at": "2018-11-02T15:16:40Z",
      "updated_at": "2018-11-02T15:16:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov. \r\nMinor addition: _default_ case folding - which is the one we're concerned with - is culture-invariant, but case folding _can_ be culture-sensitive (_tailored_), if needed (the `T` status values in the case-folding table, and additional language-specific rules not covered there).\r\n\r\nWhile the [_normalization_](https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization) problem I've mentioned is unrelated to casing per se, I still wonder if it affects us here:\r\n\r\n```powershell\r\n# Composed normalization form: '\u00f6' as a *single* code point.\r\n$oUmlautNFC = [string] [char] 0xf6\r\n\r\n# Decomposed normalization form: '\u00f6' as *two* code points:\r\n# The base character, 'o', followed by a combining diacritic.\r\n$oUmlautNFD = -join [char[]] (0x6f, 0x308)\r\n\r\n# String comparison *does* recognize the equivalence, even though\r\n# the strings have distinct code points:\r\n$oUmlautNFC -eq $oUmlautNFD  # -> $True!\r\n``` \r\n\r\nDoes your code recognize this kind of equivalence too?\r\n\r\n",
      "created_at": "2018-11-02T15:45:52Z",
      "updated_at": "2018-11-02T15:46:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would expect that it doesn't *need* to, @mklement0. In that example, let's consider how case-folding would treat the characters: \r\n\r\nI would expect that folding the single code-point variant would consider both `0xD6` and `0xF6` (upper and lowercase code points of `\u00d6`) the same.\r\n\r\nIn the case of the regular character and the combining diacritic, it only needs to fold case for the regular character, and the combining diacritic would be unaffected.",
      "created_at": "2018-11-02T15:51:24Z",
      "updated_at": "2018-11-02T15:52:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: That applies if _both_ input strings are in the _same_ normalization form (and only differ by case), but the question is what happens if they're not:\r\n\r\nWith `-eq` (`.Equals()` with option `InvariantCultureIgnoreCase` - also works with `CurrentCultureIgnoreCase`), the equivalence is recognized:\r\n\r\n```powershell\r\n# NFC '\u00d6' (LATIN CAPITAL LETTER O WITH DIAERESIS)\r\n$oUmlautNFC_Upper = [string] [char] 0xd6\r\n\r\n# Compare uppercase (single-code-point) NFC \u00d6 to lowercase (2-code-point) NFD \u00f6\r\n$oUmlautNFC_Upper -eq $oUmlautNFD # -> !True!\r\n```\r\n\r\nBy contrast - much to my surprise - `Select-String` does _not_ recognize this equivalence:\r\n\r\n```powershell\r\n$oUmlautNFC_Upper | Select-String $oUmlautNFD # !! NO OUTPUT\r\n```\r\n\r\nIs it by design that `Select-String` compares strings differently? (Never looked at the internals).\r\n\r\nEither way, while the answer may be that we cannot handle normalization differences for performance reasons, we need to have clarity on that decision and to document it accordingly.\r\n",
      "created_at": "2018-11-02T18:56:09Z",
      "updated_at": "2018-11-02T18:56:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Your question is open question. I think the question is \"What is PowerShell identifier\" in Unicode  terms and our answer should be based on http://www.unicode.org/reports/tr31/\r\nAs I mentioned above there is a rule that we could use for PowerShell:\r\n> UAX31-R5. Equivalent Case-Insensitive Identifiers: To meet this requirement, an implementation shall specify either simple or full case folding, and adhere to the Unicode specification for that folding. Any two identifiers that have the same case-folded form shall be treated as equivalent by the implementation. ",
      "created_at": "2018-11-02T18:58:03Z",
      "updated_at": "2018-11-02T18:58:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There's a chapter on normalization in the document you link to: http://www.unicode.org/reports/tr31/#normalization_and_case\r\n\r\nHave only glanced at it at this point, but this caught my eye:\r\n\r\n> Implementations that take normalization and case into account have two choices: to treat variants as equivalent, or to disallow variants.\r\n\r\nSo it sounds like disallowing variants (making no attempt to recognize different normalization forms as equivalent) _is_ an option - again, a decision we should be clear about and document.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-02T20:10:53Z",
      "updated_at": "2018-11-02T20:10:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, the standard describes all common possibilities. And it says about normalization of identifiers. This allows \"human\" identifiers. I believe it make sense for DSL or AI and make no sense for strong typed languages like C# and perhaps for PowerShell too - I'd very wonder if PowerShell consider \"$\u0401\u043b\u043a\u0430\" and \"$\u0415\u043b\u043a\u0430\" as equal although both are Christmas tree (the sample is only \"display difference\"! not Unicode specific).",
      "created_at": "2018-11-03T08:38:56Z",
      "updated_at": "2018-11-03T08:38:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that for _identifiers_ disallowing normalization variants makes sense.\r\n\r\n(As an aside: your `\u0401\u043b\u043a\u0430` example is not normalization-related and also not covered by the case-folding table - is it an example of language-specific case-folding? Or is it something more informal?)\r\n\r\n`Select-String` - and anywhere outside input is processed - is a different story, however, and we already have a split there, based on CoreFx behavior:\r\n\r\n* `[string]` IS normalization-aware\r\n* `[regex]` is NOT normalization-aware\r\n\r\nThat explains why `$oUmlautNFC_Upper | Select-String $oUmlautNFD` (regex) does _not_ match, whereas `$oUmlautNFC_Upper | Select-String $oUmlautNFD -SimpleMatch` (string) _does_.\r\n\r\n\r\n",
      "created_at": "2018-11-03T21:53:17Z",
      "updated_at": "2018-11-03T21:53:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In Russian we can freely replace \u0401 - 0401 with \u0415 - 0415. (For lower case too). But \"\u0401\u043b\u043a\u0430\" -eq \"\u0415\u043b\u043a\u0430\" returns false - I don't know why. Perhaps because of Unicode backword compatibility and stability only.\r\nUpdate: Unicode equivalence is defined for the _same_ abstract character. `\u0401` and `\u0415` is different chars.\r\n\r\nI don't wonder about `[string]`. By default it use a culture overload for Equals `bool Equals(string value, System.StringComparison comparisonType)` which makes p/invoke of OS culture API.\r\nI am happy that `[rexeg]` is not normalization-aware - it makes things simple for us.\r\n\r\nI've been going to do this for a long time #8180 for `Select-String -SimpleMatch`.\r\n\r\n\r\n",
      "created_at": "2018-11-04T10:00:15Z",
      "updated_at": "2018-11-04T10:16:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the background on `\u0415` / `\u0401`. There _are_ cases in the official case-folding table where distinct characters are treated the same, and there are additional, language-specific ones in [SpecialCasing.txt](http://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt), but I guess we needn't worry about cases that are defined in neither.\r\n\r\n`-eq` consistently uses `InvariantCultureIgnoreCase`, from what I gather, which aligns with PowerShell's overall policy of using the invariant culture in explicit string operations.\r\n\r\nIt is unfortunate that `-like`, `-match` / `-replace` / `split` and `Select-String` all use culture-_sensitive_ comparison (which is documented for `Select-String`, but not the others). \r\n\r\nThe difference rarely matters, but there is  the [infamous Turkish \"I\" problem](http://www.i18nguy.com/unicode/turkish-i18n.html#problem) in the `tr` and `az` cultures.\r\n\r\n[The following is at least partially incorrect.]\r\n~Even more curiously, `-match` / `-replace` / `split` apply the Turkish / Azerbaijani case mapping irrespective of what culture is in effect: `\"\u0131\" -match \"I\"` yields `$True` in _any_ culture (don't try this on macOS, where the Turkish rules are fundamentally unsupported).~\r\n\r\n~Haven't looked at the implementation yet - any idea what's going on?\r\nI'm also baffled that on macOS `-match` / `-replace` / `split` do not support Turkish case rules, seemingly due to lack of OS support, whereas `Select-String` (without `-SimpleMatch`) does.~\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-05T05:44:00Z",
      "updated_at": "2018-11-05T20:38:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems the Turkish case _mapping_ is not related with case _folding_. I believe simple case folding works with Turkish well because the folding is intended to be language-neutral. This is just the reason why we can get a win in regex and PowerShell identifier comparisons internally and can not in -match / -replace / split.",
      "created_at": "2018-11-05T06:59:30Z",
      "updated_at": "2018-11-05T06:59:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Seems the Turkish case mapping is not related with case folding. \r\n\r\nIt _is_ part of the case-folding table, but of the _language-specific_ variety: status `T` in [CaseFolding.txt](http://www.unicode.org/Public/UCD/latest/ucd/CaseFolding.txt), where `T`, I presume, stands for _tailored_.\r\n\r\n```none\r\n#    The mappings with status T can be used or omitted depending on the desired case-folding\r\n#    behavior. (The default option is to exclude them.)\r\n[...]\r\n0049; T; 0131; # LATIN CAPITAL LETTER I\r\n0130; T; 0069; # LATIN CAPITAL LETTER I WITH DOT ABOVE\r\n```\r\n\r\nTo reiterate: case folding can be language-neutral _or_ language-specific (tailored), _as needed_.\r\n\r\nBut I agree that for identifiers it definitely makes sense to stay language-neutral.\r\n\r\n> get a win in regex and PowerShell identifier comparisons internally and can not in -match / -replace / split.\r\n\r\nUnderstood re identifiers, but what  _regex_ used do you mean in this case, given that regexes are also used for `-match` / `-replace`, / `-split`?\r\n\r\n",
      "created_at": "2018-11-05T20:23:55Z",
      "updated_at": "2018-11-05T20:23:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It is part of the case-folding table, but of the language-specific variety: status T in CaseFolding.txt, where T, I presume, stands for tailored.\r\n\r\n>  -match / -replace, / -split\r\n\r\n1. Seems it would be a breaking change if we make them language-neutral.\r\n2. Without rewriting regex code we can only add some optimizations _before_ invoking a regex. Today I don't see how we could get a win here. Perhaps only for `-imatch`.\r\n",
      "created_at": "2018-11-06T05:26:43Z",
      "updated_at": "2018-11-06T05:26:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today I measured `Import-Csv` on large file (vs 6.1.0 RTM ) and discover up to 8% win with new `SimpleFoldedStringComparer`.",
      "created_at": "2018-11-07T14:06:03Z",
      "updated_at": "2018-11-07T14:06:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I opened new [issue](https://github.com/dotnet/corefxlab/issues/2610) in CoreFXlab repo to start a work to add the enhancement in .Net Core.\r\nThe main problem now is code performance. A large cache is now used in my alfa code and it is fast. The proposed version with a 3-level cache (size in 10x times less) is too slow (2-3 times). Any help is appreciated how make the code compact and fastest (comparable to ToLowerInvariant() for folding and OrdinalIgnoreCase for comparer).\r\n\r\n@vexx32 @HumanEquivalentUnit @mklement0 @daxian-dbw ",
      "created_at": "2018-12-05T03:35:24Z",
      "updated_at": "2018-12-05T03:35:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I am ready to create a nuget package in CoreFXlab https://github.com/dotnet/corefxlab/issues/2610\r\nCould we use the package after it will created and tested?",
      "created_at": "2019-01-18T10:52:01Z",
      "updated_at": "2019-01-18T10:52:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think we can use it with 6.3-preview.1",
      "created_at": "2019-02-19T23:48:10Z",
      "updated_at": "2019-02-19T23:48:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks! Currently the code was merged in Corefxlab but nuget package is not still created. Targeting is to .Net Core 3.0 only. Now there need to review _public_ api and to make performance optimizations. This is a work for MSFT experts. It would be nice if you could sync internally with Core team.\r\nAs for PowerShell we will need approval using SCF because folding is not full equivalent of ToLowerCase() and correspondingly there is a littel difference with OrdinalIgnoreCase.",
      "created_at": "2019-02-20T03:56:52Z",
      "updated_at": "2019-02-20T03:56:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Moving out of 7.0 as it seems .NET 5 may support this",
      "created_at": "2019-10-15T20:39:42Z",
      "updated_at": "2019-10-15T20:39:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, they plan to move ICU internally in Core and unify Core behavior (to fall back to OS with p/invoke sometimes). In the case OrdinalIgnoreCase will implement the SCF, I hope with great performance.\r\n\r\nWhile waiting Core 5.0 we could resolve #8180 without risk to conflict with Core.",
      "created_at": "2019-10-16T03:12:59Z",
      "updated_at": "2019-10-16T03:12:59Z"
    }
  ],
  "created_at": "2018-10-25T15:48:44Z",
  "labels": [
    "WG-Engine-Performance",
    "Issue-Discussion"
  ],
  "number": 8120,
  "state": "closed",
  "title": "Simple case folding",
  "updated_at": "2021-08-25T04:07:09Z"
}