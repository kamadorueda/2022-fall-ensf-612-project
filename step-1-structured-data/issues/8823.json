{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8823",
  "author": "Cirzen",
  "body": "\r\n# Steps to reproduce\r\n[Windows]\r\n```\r\nTest-Path \"c:\\..\\..\\test\" -IsValid\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\nFalse\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\ntest-path : The path 'C:\\..\\..\\test' referred to an item that was outside the base 'C:'.\r\nAt line:1 char:1\r\n+ Test-Path \"c:\\..\\..\\test\" -IsValid\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Test-Path], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.TestPathCommand\r\n\r\nTrue\r\n```\r\n\r\n# Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is with other providers?",
      "created_at": "2019-02-05T14:27:52Z",
      "updated_at": "2019-02-05T14:27:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Tested that just now @iSazonov \r\n\r\nIt seems you get one error _per level_ you attempt to step above the root, which is very interesting! But you still get a `True` result.\r\n\r\n```powershell\r\n#PowerShell 6.1.2\r\n#Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n#https://aka.ms/pscore6-docs\r\n#Type 'help' to get help.\r\n\r\n#Loading personal and system profiles took 1860ms.\r\nPS C:\\Program Files\\PowerShell\\6> Test-Path HKLM:\\..\\..\\..\\test\r\nTest-Path : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ Test-Path HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Test-Path], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.TestPathCommand\r\n\r\nTest-Path : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ Test-Path HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Test-Path], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.TestPathCommand\r\n\r\nTest-Path : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ Test-Path HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Test-Path], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.TestPathCommand\r\n\r\nTrue\r\n```",
      "created_at": "2019-02-05T14:42:17Z",
      "updated_at": "2019-02-05T14:42:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'm even afraid to think what will do New-Item :-)",
      "created_at": "2019-02-05T17:19:04Z",
      "updated_at": "2019-02-05T17:19:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov that amusing comment led me to see the source of the issue. Check this out:\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6> new-item HKLM:\\..\\..\\..\\test\r\nnew-item : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ new-item HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [New-Item], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.NewItemCommand\r\n\r\nnew-item : A key in this path already exists.\r\nAt line:1 char:1\r\n+ new-item HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceExists: (Microsoft.Power...RegistryWrapper:RegistryWrapper) [New-Item], IOException\r\n+ FullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Commands.NewItemCommand\r\n\r\nPS C:\\Program Files\\PowerShell\\6> get-item HKLM:\\..\\..\\..\\test\r\nget-item : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ get-item HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Get-Item], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.GetItemCommand\r\n\r\nget-item : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ get-item HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Get-Item], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.GetItemCommand\r\n\r\nget-item : The path 'HKEY_LOCAL_MACHINE\\..\\..\\..\\test' referred to an item that was outside the base 'HKEY_LOCAL_MACHINE'.\r\nAt line:1 char:1\r\n+ get-item HKLM:\\..\\..\\..\\test\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Get-Item], PSArgumentException\r\n+ FullyQualifiedErrorId : System.Management.Automation.PSArgumentException,Microsoft.PowerShell.Commands.GetItemCommand\r\n\r\n\r\n\r\n    Hive:\r\n\r\n\r\nName                           Property\r\n----                           --------\r\nHKEY_LOCAL_MACHINE\r\n```\r\n\r\nSo if you attempt to query a path like this, _first_ it errors on each level above the root (it seems to be checking recursively for some terrible reason!) and _then_ it reaches the root node itself and decides arbitrarily that _that_ is what you were trying to get.\r\n\r\nGiven the similarities in behaviour, this seems to be a common issue and may trace back to the providers themselves.",
      "created_at": "2019-02-05T17:23:14Z",
      "updated_at": "2019-02-05T17:23:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Thanks! I am happy that New-Item doesn't create new item at root! :-)",
      "created_at": "2019-02-05T17:29:21Z",
      "updated_at": "2019-02-05T17:29:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, it looks like it tries to re-create the root node itself, which is arguably _more_ surprising! \ud83d\ude06 ",
      "created_at": "2019-02-05T17:31:23Z",
      "updated_at": "2019-02-05T17:31:23Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "Just stumbled on this as well as it's causing my PowerShell 6+ tests to fail for my PEMEncrypt module: https://dev.azure.com/scrthq/SCRT%20HQ/_build/results?buildId=352\r\n\r\nEasily able to be reproduced with not even a legitimate path string, i.e. `Test-Path '----------' -IsValid`. Present in 6.2.0 and 7.0.0-preview.1\r\n\r\nFalling back to `[System.IO.File]::Exists($path)` for now, as that still behaves as expected.",
      "created_at": "2019-07-08T03:38:30Z",
      "updated_at": "2019-07-08T03:41:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think that's a different issue @scrthq.\r\n\r\nAs with other `*-Path` cmdlets, a path that doesn't contain a drive qualifier automatically defaults to checking against the current location. The name `----------` is a valid file or folder name, so that passing the test would be expected, I think.",
      "created_at": "2019-07-08T16:20:01Z",
      "updated_at": "2019-07-08T16:20:12Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "That's a fair point. Maybe a better example is what I'm actually testing against (path string is valid). If I include `-IsValid` when testing a string that is 100% not a valid path string, PS 5.1.1 returns `$false`, while 6+ returns `$true`. My use case here is checking if the string is a valid path, as I am using it to determine if the string provided is a path string or not (regardless if the path itself is actual in the event that the string is a valid path string).\r\n\r\nThe bug outlined below currently make using `Test-Path -IsValid` unusable for me in PS 6+, so I have to fall back to .NET static methods directly and shortcut path validation by checking if the path exists (which it will never exist if the path is invalid, at the end of the day), as I can rely on that not throwing an error if the path string isn't valid at all. It will simply return `$false`, as needed.\r\n\r\n***\r\n\r\n## Experience\r\n**Input**\r\n\r\n```powershell\r\n$string = @'\r\n-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxeBWfgeKhwp97v4EuFfO\r\n.......\r\n-----END PUBLIC KEY-----\r\n'@\r\nTest-Path $string -IsValid\r\n```\r\n\r\n**PS 5.1.1 Output**\r\n\r\n_Returns `$false`, as expected_\r\n\r\n```powershell\r\nFalse\r\n```\r\n\r\n**PS 6+ Output**\r\n\r\n_Returns `$true`, unexpectedly_\r\n\r\n```powershell\r\nTrue\r\n```\r\n\r\n***\r\n\r\nThe only way that PS 6+ returns `$false` for that call is if the string has an invalid path character in it, regardless if the string has line breaks/carriage returns.",
      "created_at": "2019-07-08T17:09:52Z",
      "updated_at": "2019-07-08T17:25:03Z"
    },
    {
      "author": "Raton-Laveur",
      "author_association": "NONE",
      "body": "Comparing results between PS 5.1.1 and 7.3.2 yields curious results, even with more basic tests that just include characters forbidden in Windows path conventions. \r\nInput: `Test-Path C:\\Wind*ows -IsValid`\r\n* PS 5.1.1 Output: `False`\r\n* PS 7.3.2 Output: `True`",
      "created_at": "2022-05-13T13:33:56Z",
      "updated_at": "2022-05-13T13:34:11Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "The method _IsValid()_ is also affected :\r\n```Powershell\r\n$PathHelper=$ExecutionContext.SessionState.Path\r\n$PathHelper.isValid(\"c:\\..\\..\\test\")\r\n#MethodInvocationException: Exception calling \"IsValid\" with \"1\" argument(s): \r\n# \"The path 'C:\\..\\..\\test' referred to an item that was outside the base 'C:'.\"\r\n\r\n\r\n$PathHelper.isValid('Registry::..\\temp')\r\n# MethodInvocationException: Exception calling \"IsValid\" with \"1\" argument(s): \r\n# \"Attempting to perform the IsValidPath operation on the 'Registry' provider failed for path '..\\temp'.\r\n#  Object reference not set to an instance of an object.\"\r\n\r\nTest-Path \"Registry::..\\temp\" -IsValid\r\n#Test-Path: The path '..\\temp' referred to an item that was outside the base ''.\r\n#Test-Path: Object reference not set to an instance of an object.\r\n```",
      "created_at": "2022-05-26T12:09:14Z",
      "updated_at": "2022-05-26T12:09:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I have in the past argued that Test-Path should generally return `False` if there's an error (because in just about every case the error indicates the path is not valid / existent), but in general the committee / pwsh team have decided that is not desirable for some reason or another. I don't fully understand the reasoning myself.",
      "created_at": "2022-05-26T15:01:55Z",
      "updated_at": "2022-05-26T15:01:55Z"
    }
  ],
  "created_at": "2019-02-04T12:25:01Z",
  "number": 8823,
  "state": "open",
  "title": "Test-Path -IsValid returns true for invalid path",
  "updated_at": "2022-05-26T15:01:55Z"
}