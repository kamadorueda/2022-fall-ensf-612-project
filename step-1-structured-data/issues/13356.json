{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13356",
  "author": "jwboon-t4e",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\nSetup powershell ssh on linux system using the following guide: https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell-core?view=powershell-7\r\n\r\nOn the host machine (debian 10) execute the following command.\r\n\r\n```\r\nInvoke-Command -ScriptBlock {return \"kaas\";} -SSHTransport -HostName ps@localhost -KeyFilePath /home/ps/.ssh/id_rsa\r\n```\r\n\r\n## Expected behavior\r\n\r\nNo defunct processes from SSH on the machine executing PowerShell.\r\n\r\n## Actual behavior\r\n\r\nEach execution of the PowerShell script leaves a defunct ssh process. See example of 'ps aux' below. \r\n\r\nOn the parent process there remains a CPU load which is unexpected for a server application. This becomes a major issue with a large amount defunct processes which seems to stack the CPU load on the parent process.\r\n\r\n```\r\nroot@<machine>:/app# ps aux\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot         1  0.0  0.0   3880  1504 ?        Ss   09:34   0:00 /bin/bash /entrypoint.sh\r\nroot        21  0.1  1.1 3794740 70496 ?       Sl   09:34   0:02 dotnet <dll>\r\nroot        81  0.0  0.0   4012  3116 pts/0    Ss   09:35   0:00 bash\r\nroot       338  0.0  0.0   4012  3196 pts/1    Ss   09:39   0:00 bash\r\nroot      1201  0.0  0.4 2968504 27624 pts/0   Sl+  09:53   0:00 pwsh\r\nroot      1209  1.9  2.0 4157756 125756 pts/0  Sl+  09:53   0:04 dotnet /root/.dotnet/tools/.store/powershell/7.0.3/powershe\r\nroot      1240  0.0  0.0      0     0 pts/0    Z+   09:53   0:00 [ssh] <defunct>\r\nroot      1247  0.0  0.0      0     0 pts/0    Z+   09:53   0:00 [ssh] <defunct>\r\nroot      1253  0.0  0.0      0     0 pts/0    Z+   09:53   0:00 [ssh] <defunct>\r\nroot      1267  0.0  0.0      0     0 pts/0    Z+   09:53   0:00 [ssh] <defunct>\r\nroot      1274  0.0  0.0      0     0 pts/0    Z+   09:53   0:00 [ssh] <defunct>\r\nroot      1373  0.3  0.0      0     0 pts/0    Z+   09:57   0:00 [ssh] <defunct>\r\nroot      1377  0.0  0.0   7652  2684 pts/1    R+   09:57   0:00 ps aux \r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nHost machine:\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Linux 4.19.104-microsoft-standard #1 SMP Wed Feb 19 06:37:35 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nTarget machine:\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Linux 4.19.104-microsoft-standard #1 SMP Wed Feb 19 06:37:35 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe configuration is that this is a Docker container (host) running a sidecar container (target).\r\n\r\nThe used image for the host is: 'mcr.microsoft.com/dotnet/core/aspnet:3.1'\r\nThe used image for the target is 'mcr.microsoft.com/powershell'\r\n",
  "closed_at": "2021-06-03T20:19:11Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quoted from https://askubuntu.com/questions/201303/what-is-a-defunct-process-and-why-doesnt-it-get-killed\r\n\r\n> \"defunct\" means the process has either completed its task or has been corrupted or killed, but its child processes are still running or these parent process is monitoring its child process.\r\n\r\n> Processes marked <defunct> are dead processes (so-called \"zombies\") that remain because their parent has not destroyed them properly.\r\n\r\n/cc @PaulHigin for insights.\r\n",
      "created_at": "2020-08-05T21:21:40Z",
      "updated_at": "2020-08-05T21:21:59Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I suspect this is due to the way we create the SSH client process to ignore the termination signal (SIG_IGN):\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/common/RunspaceConnectionInfo.cs#L2220\r\n\r\nThis was done so that a 'Ctrl+C' keyboard command during a remote session does not terminate the SSH client process (and thus the remote connection), but instead is passed on through the PSRP protocol to stop a running remote command, as expected.\r\n\r\nThese defunct SSH processes are terminated when the parent pwsh process is terminated.  So that is a (not very satisfactory) workaround.\r\n\r\nBut I am not enough of a Linux expert to know the right way to have PowerShell ensure the process is terminated, on remote connection close.  Perhaps someone in the community would know?\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-08-06T17:56:40Z",
      "updated_at": "2020-08-06T17:56:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I found the following from the wiki [Zombie process](https://en.wikipedia.org/wiki/Zombie_process)\r\n\r\n> defunct process is a process that has completed execution (via the exit system call) but still has an entry in the process table: it is a process in the \"Terminated state\". This occurs for the child processes, where the entry is still needed to allow the parent process to read its child's exit status: once the exit status is read via the wait system call, the zombie's entry is removed from the process table and it is said to be \"reaped\".\r\n\r\nI think we probably just need to call [waitpid](https://man7.org/linux/man-pages/man2/wait.2.html) after the ssh process is terminated. An example from the wiki:\r\n\r\n```c\r\nint main(void)\r\n\r\n{\r\n  pid_t pids[10];\r\n  int i;\r\n\r\nfor (i = 9; i >= 0; --i) {\r\n    pids[i] = fork();\r\n    if (pids[i] == 0) {\r\n        printf(\"Child%d\\n\",i);\r\n        sleep(i+1);\r\n        _exit(0);\r\n    }\r\n}\r\n\r\nfor (i = 9; i >= 0; --i){\r\n    printf(\"parent%d\\n\",i);\r\n    waitpid(pids[i], NULL, 0);\r\n    }\r\nreturn 0;\r\n}\r\n```",
      "created_at": "2020-08-07T23:37:59Z",
      "updated_at": "2020-08-07T23:37:59Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We can experiment with this.  I am concerned about calling a blocking function.  Since the child process is created without SIG_IGN, I don't know if it will respond to the call, and I hope we don't end up with a hang.  I just don't know enough about Linux processes, but we can see what works.",
      "created_at": "2020-08-10T16:25:22Z",
      "updated_at": "2020-08-10T16:25:22Z"
    },
    {
      "author": "jwboon-t4e",
      "author_association": "NONE",
      "body": "Hi guys, any update on this ticket?",
      "created_at": "2020-10-08T09:50:56Z",
      "updated_at": "2020-10-08T09:50:56Z"
    },
    {
      "author": "ncvanleeuwen",
      "author_association": "NONE",
      "body": "I'm experiencing the same issue, any update?",
      "created_at": "2020-11-19T11:07:41Z",
      "updated_at": "2020-11-19T11:07:41Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "We are facing the same issue, PowerShell leaves defunct ssh processes after the connection is closed. We are working on implementing PowerShell remoting over SSH, without SSH (https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh) with a drop-in replacement for the 'ssh' executable. We originally thought this was limited to our custom way of doing it, until we figured out that the real PowerShell remoting over SSH with the OpenSSH client exhibited the same symptoms.\n\n<blockquote><img src=\"https://webdevolutions.blob.core.windows.net/blog/2020/07/PowerShell-remoting-over-SSH.png\" width=\"48\" align=\"right\"><div><img src=\"/favicon-16x16.png\" height=\"14\"> The Devolutions Blog</div><div><strong><a href=\"https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh\">PowerShell Remoting Over SSH, Without SSH!</a></strong></div><div>A few months ago, PowerShell 7 came out, finally bridging the gap between Windows PowerShell and PowerShell Core. It is now possible to use the same PowerShell everywhere (Windows, macOS, Linux!) whil...</div></blockquote>",
      "created_at": "2020-11-19T13:58:11Z",
      "updated_at": "2020-11-19T13:58:13Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "I found more information about the Ctrl+C / SIGINT behaviour in a regular SSH session here: https://goteleport.com/blog/ssh-client-signal-handling/\r\n\r\nIt appears to me that in a regular OpenSSH session, the client does not ignore but forwards the signals to the remote host. This effectively means the OpenSSH client does not process the signal for itself, I tried doing Ctrl+C multiple times locally and it wouldn't kill the OpenSSH client. This appears to be close to the approach taken by PowerShell: it spawns the OpenSSH client process but makes it ignore the signals so the PowerShell client can forward them over PSRP to the remote host.\r\n\r\nThe main issue I see with the current code is that the defunct ssh processes remain until the parent process (pwsh) is killed. This can be very problematic when spawning multiple PowerShell sessions within the same pwsh process, because you would get a defunct ssh process for each.\r\n\r\nOther people have suggested calling waitpid, which is normally a blocking call. [There is a WNOHANG flag that can be passed to waitpid](https://www.gnu.org/software/libc/manual/html_node/Process-Completion.html), but we'd have to look into how portable this flag is (is it only with a Linux glibc?).\r\n\r\nIn all cases, I think attempts to fix this would need to be added in the part of code called when the PowerShell remoting session is freed. Can anybody point to where that would be? The code creating the ssh process is easy to find, but it is not so clear to me where the code freeing the PowerShell remoting session for SSH is being called. The goal would be to call some cleanup code at that point in time where we are sure that the ssh process should either be cleaned up if defunct, or force killed if still there.\r\n\r\nThis procedure would attempt the following, in order:\r\n- waitpid + WNOHANG for a defunct process\r\n- force kill process (SIGKILL) if process is \"alive\"\r\n\r\nForce killing the process is obvious the last resort, but it shouldn't happen under normal circumstances, it's just there to ensure we clean up the process in all possible cases. Most of the time, we would just find the defunct process and clean it up by calling waitpid.\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://goteleport.com/gravitational/images/backgrounds/earth.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://goteleport.com/blog/ssh-client-signal-handling/\">Chasing missing SIGINT signals - SSH</a></strong></div><div>This post is the first of an ongoing series about interesting issues and bugs that the Teleport team has worked on. This post, about missing SIGINTs and SSH, should be interesting for developers who leverage signal handling in terminal-based applications written in Go.</div></blockquote>",
      "created_at": "2020-11-19T15:13:27Z",
      "updated_at": "2020-11-19T15:13:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The code already tries to terminate the SSH client process on remote session termination (and other error conditions).  We need to investigate why that isn't happening, but I know that .NET 'System.Diagnostics.Process' does not always work the same over different platforms.\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/fanin/OutOfProcTransportManager.cs#L1654\r\n\r\nThe fact that terminating the parent pwsh process terminates the SSH client process mitigates this somewhat.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-11-19T17:10:57Z",
      "updated_at": "2020-11-19T17:10:59Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I verified that the clean up code does run.  However, the issue is not terminating the SSH process, it is terminated, but the fact that it still exists as a 'zombie' process to the parent process as @daxian-dbw  describes above.  We can try using `waitpid` during clean up as Dongbo suggests above, but again my concern with that is hanging PowerShell during the wait.",
      "created_at": "2020-11-19T23:14:25Z",
      "updated_at": "2020-11-19T23:14:25Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin waitpid + the WNOHANG flag should make the call non-blocking. I think this flag may be Linux-specific, but it can't hurt to try it out. Here is an example: https://stackoverflow.com/a/7255053\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/7155810/example-of-waitpid-wnohang-and-sigchld\">Example of waitpid, WNOHANG, and SIGCHLD</a></strong></div><div>I need an example of waitpid, WNOHANG and SIGCHLD combined in C, and how I can use them all with fore\\background?\n\n signal( SIGCHLD, SIG_IGN );\n\n waitpid(child, status, 0);</div></blockquote>",
      "created_at": "2020-11-20T02:26:50Z",
      "updated_at": "2020-11-20T02:26:52Z"
    },
    {
      "author": "dinhngtu",
      "author_association": "CONTRIBUTOR",
      "body": "After looking a bit into this, it seems like OutOfProcTransportManager (and therefore RunspaceConnectionInfo) uses its own implementation of fork/exec in libpsl for spawning SSH instead of using System.Diagnostics.Process. I'm not sure why it's done this way so could someone chime in?\r\n\r\nRegardless, the easiest fix for this would be to fix System.Diagnostics.Process.WaitForExit() to call waitpid() for unmanaged processes, and then calling WaitForExit() after killing SSH.",
      "created_at": "2021-01-19T19:10:50Z",
      "updated_at": "2021-01-19T19:10:50Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The custom fork/exec was added to modify the 'Ctrl+C' sigint, which interferes with PowerShell remoting.  .NET team declined to support it so it had to be added as custom.\r\n\r\nI am not optimistic that .NET will accept a change like this for WaitForExit(), but it may be worth a try.  Otherwise more custom code will have to be added.",
      "created_at": "2021-01-19T19:41:25Z",
      "updated_at": "2021-01-19T19:41:25Z"
    },
    {
      "author": "dinhngtu",
      "author_association": "CONTRIBUTOR",
      "body": "waitpid() is safe for nonchild processes, and it's arguable that WaitForExit() reaping unmanaged children is actually what we want. Another solution is to add waitpid() to libpsl and call it ourselves.\r\n\r\nIn any case, this is a behavior I need to fix so I can help with making a patch.",
      "created_at": "2021-01-19T19:51:08Z",
      "updated_at": "2021-01-19T19:51:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #14635, which has now been successfully released as `v7.2.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.7)\n",
      "created_at": "2021-06-17T16:59:15Z",
      "updated_at": "2021-06-17T16:59:15Z"
    },
    {
      "author": "et1975",
      "author_association": "NONE",
      "body": "@adityamandaleeka  This is still an issue with 7.2:\r\n>    41 root      0:00 sshd: /usr/sbin/sshd [listener] 0 of 10-100 startups\r\n  124 scriptin  0:17 [pwsh]\r\n  326 scriptin  0:15 [pwsh]\r\n  531 scriptin  0:17 [pwsh]\r\n  743 scriptin  0:16 [pwsh]\r\n  946 scriptin  0:16 [pwsh]\r\n 1154 scriptin  0:16 [pwsh]\r\n 1361 scriptin  0:17 [pwsh]\r\n 1571 scriptin  0:16 [pwsh]\r\n 1775 scriptin  0:17 [pwsh]\r\n 1983 scriptin  0:16 [pwsh]\r\n\r\nThe use case is creating a Runspace via SSH. I'm available on Teams for details if needed.\r\n",
      "created_at": "2021-11-26T17:04:20Z",
      "updated_at": "2021-11-26T17:04:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@et1975 Can you share `ps aux` output?",
      "created_at": "2021-11-26T17:12:23Z",
      "updated_at": "2021-11-26T17:12:23Z"
    },
    {
      "author": "dinhngtu",
      "author_association": "CONTRIBUTOR",
      "body": "I can't reproduce the issue with manual runspace creation.\r\n\r\nI used the following script:\r\n\r\n```\r\nPS > $ssh=[System.Management.Automation.Runspaces.SSHConnectionInfo]::new($null, \"*****\", $null)\r\nPS > $rs=[runspacefactory]::CreateRunspace($ssh)\r\nPS > $rs.Open()\r\nPS > $ps=[powershell]::Create($rs)\r\nPS > $ps.Commands.AddCommand(\"uname\").AddArgument(\"-a\")\r\n\r\nCommands\r\n--------\r\n{uname}\r\n\r\nPS > $ps.Invoke()\r\nLinux *****\r\nPS > $ps.Dispose()\r\nPS > $rs.Close()\r\n```\r\n\r\nAfter the runspace is closed I couldn't see any zombie processes on either side of the connection.",
      "created_at": "2021-11-26T17:26:35Z",
      "updated_at": "2021-11-26T17:26:35Z"
    },
    {
      "author": "et1975",
      "author_association": "NONE",
      "body": "Intersting, this is more or less what I'm doing as well, but I'm using this workaround: https://github.com/PowerShell/PowerShell/issues/15641\r\nI'm also calling `Dispose()` instead of `Close()` on the Runspace.\r\n\r\n> PID   USER     TIME  COMMAND\r\n    1 root      1:09 /opt/agent/Agent\r\n   41 root      0:00 sshd: /usr/sbin/sshd [listener] 0 of 10-100 startups\r\n  124 scriptin  0:17 [pwsh]\r\n  326 scriptin  0:15 [pwsh]\r\n  531 scriptin  0:17 [pwsh]\r\n  743 scriptin  0:16 [pwsh]\r\n  946 scriptin  0:16 [pwsh]\r\n 1154 scriptin  0:16 [pwsh]\r\n 1361 scriptin  0:17 [pwsh]\r\n 1571 scriptin  0:16 [pwsh]\r\n 1775 scriptin  0:17 [pwsh]\r\n 1983 scriptin  0:16 [pwsh]\r\n \r\n This is on Alpine after 10 runs, the Agent is the one opening the runspaces.",
      "created_at": "2021-11-26T17:46:48Z",
      "updated_at": "2021-11-26T17:46:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This is on Alpine after 10 runs, the Agent is the one opening the runspaces.\r\n\r\nIf the process is still live this could be the reason. Do you see zombie processes after Agent termination?",
      "created_at": "2021-11-27T17:53:40Z",
      "updated_at": "2021-11-27T17:53:40Z"
    }
  ],
  "created_at": "2020-08-05T10:16:33Z",
  "number": 13356,
  "state": "closed",
  "title": "Defunct ssh processes and CPU load are kept after executing powershell through ssh on linux",
  "updated_at": "2021-11-27T17:53:40Z"
}