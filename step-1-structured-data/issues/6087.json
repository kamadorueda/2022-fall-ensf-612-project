{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6087",
  "author": "schittli",
  "body": "Steps to reproduce\r\n---------------\r\n1. **Create the following useles but valid script in a directory containing an equal sign (=), e.g.\r\nc:\\temp\\\\=PSTest\\Test.ps1**\r\n```PowerShell\r\nEnum State {\r\n\tUnknown = 1\r\n\tNew = 2\r\n}\r\n```\r\n2. Start the Script. You'll get:\r\n```\r\nThe given assembly name or codebase was invalid. (Exception from HRESULT: 0x80131047)\r\n\u2026\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [], FileLoadException\r\n    + FullyQualifiedErrorId : System.IO.FileLoadException\r\n```\r\n\r\nExpected behavior\r\n---------------\r\nIt's obvious: No valid character in the path of a PowerShell Script is allowed to affect the Script execution.\r\n\r\nActual behavior\r\n---------------\r\nPowerShell stops working with an exception because characters in the path of a PowerShell script can affect the PowerShell runtime.\r\nI guess that a hacker is able to control powershell just by using special characters in the path of a script because PowerShell probably tries to interpret those characters.\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.98\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.98\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n",
  "closed_at": "2018-02-02T00:45:01Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This does not reproduce in 6.0.1. I believe starting with 6.0.0 (#5292) the assembly name for PowerShell generated dynamic Classes and Enums changed which resolved this issue. To be clear, in 5.1 the dynamic class assembly names were generated based on the filename. Creating an `Enum` from a file with an illegal assembly name character is likely the cause of the issue you see.\r\n\r\nThis repository is for PowerShell Core 6.0.0 and newer. To file bug reports for Windows PowerShell 5.1 please use [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)",
      "created_at": "2018-02-02T00:12:33Z",
      "updated_at": "2018-02-02T00:12:33Z"
    }
  ],
  "created_at": "2018-02-01T21:49:57Z",
  "number": 6087,
  "state": "closed",
  "title": "Simple but annoying bug: PowerShell stops working if there is a = in the path of the Script",
  "updated_at": "2018-02-02T00:45:01Z"
}