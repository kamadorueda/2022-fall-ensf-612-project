{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17962",
  "author": "SteveL-MSFT",
  "body": "### Summary of the new feature / enhancement\r\n\r\nThe current ExperimentalFeatures in 7.3:\r\n\r\n```output\r\nName                                Enabled Source                              Description\r\n----                                ------- ------                              -----------\r\nPSAMSIMethodInvocationLogging          True PSEngine                            Provides AMSI notification of .NET method invocations.\r\nPSAnsiRenderingFileInfo                True PSEngine                            Enable coloring for FileInfo objects\r\nPSCleanBlock                           True PSEngine                            Add support of a 'Clean' block to functions and script cmdlets for easy resou\u2026\r\nPSCommandNotFoundSuggestion            True PSEngine                            Recommend potential commands based on fuzzy search on a CommandNotFoundExcept\u2026\r\nPSExec                                 True PSEngine                            Add 'exec' built-in command on Linux and macOS\r\nPSLoadAssemblyFromNativeCode           True PSEngine                            Expose an API to allow assembly loading from native code\r\nPSNativeCommandArgumentPassing         True PSEngine                            Use ArgumentList when invoking a native command\r\nPSNativeCommandErrorActionPreferen\u2026    True PSEngine                            Native commands with non-zero exit codes issue errors according to $ErrorActi\u2026\r\nPSRemotingSSHTransportErrorHandling    True PSEngine                            Removes the SSH remoting transport stdErr stream message handling as terminat\u2026\r\nPSStrictModeAssignment                 True PSEngine                            Add support of setting Strict-Mode with Invoke-Command\r\nPSSubsystemPluginModel                 True PSEngine                            A plugin model for registering and un-registering PowerShell subsystems\r\n```\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nCurrent discussion within the PS-Committee is not complete, but so far we've decided:\r\n\r\nMake stable:\r\n\r\n`PSAMSIMethodInvocationLogging` - confirm with AMSI team that the API is done and public\r\n`PSAnsiRenderingFileInfo` - make stable to get more user feedback.  Since the decoration is user configurable, users can turn it off completely or adjust.  The main criteria here is to enable this capability and less about the default colors which are user configurable.  We appreciate the feedback (although would have liked it to come earlier) and agreed that since formatting changes are not breaking changes, we should proceed with the current defaults and we can continue discussing with the community potential changes for the defaults in 7.4 previews.\r\n`PSCleanBlock` - an opt-in feature that's been available for awhile and commit to fixing bugs should they come up\r\n`PSExec` - provide consistency with expectations on non-Windows platforms\r\n`PSNativeCommandArgumentPassing` - we've received good feedback on this which greatly improves the experience on non-Windows and Windows specific issues have been addressed, we agreed to take this for 7.3 and continue to address issues into 7.4 as needed\r\n`PSRemotingSSHTransportErrorHandling` - this addresses a major issue with SSH remoting where native command use stderr as information and not an error which previously would kill the connection, so we want to take this fix\r\n\r\nKeep Experimental:\r\n\r\n`PSCommandNotFoundSuggestion` - pending on rewrite of Suggestion framework to make it work correctly\r\n`PSLoadAssemblyFromNativeCode` - keep as experimental to see if there are more users that want/need this type of feature\r\n`PSNativeCommandErrorActionPreference` - keep as experimental as we don't have any data if users have used this feature given that it's opt-in by default, consider making it opt-out in 7.4\r\n`PSSubsystemPluginModel` - re-discussed within the Committee and agreed to keep this experimental, but support Az.Predictor dependency\r\n\r\nRemove as feature:\r\n\r\n`PSStrictModeAssignment` - Remove as feature since it's not enabled for remoting and is not very useful when limited to local usage\r\n\r\nWe will review the other ones at next meeting.",
  "closed_at": "2022-09-12T20:23:37Z",
  "comments": [
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I think there will be over 10,000 people looking at this issue. Users may not know powershell well, but are interested in new features. Usually, this is taken as the official new feature list that I introduce to the community.\r\nCan you be more specific about the description? Like #15862, thanks!",
      "created_at": "2022-08-25T02:27:41Z",
      "updated_at": "2022-08-25T02:32:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "You mean descriptions of the experimental features?  We have official docs here: https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-73?view=powershell-7.2\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-73\">What's New in PowerShell 7.3-preview.5 - PowerShell</a></strong></div><div>New features and changes released in PowerShell 7.3-preview.5</div></blockquote>",
      "created_at": "2022-08-25T03:32:02Z",
      "updated_at": "2022-08-25T03:32:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "LGTM without PSSubsystemPluginModel.",
      "created_at": "2022-08-25T03:35:54Z",
      "updated_at": "2022-08-25T03:35:54Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> `PSAnsiRenderingFileInfo` - make stable to get more user feedback. Since the decoration is user configurable, users can turn it off completely or adjust\r\n\r\nGiven all the things I'm record saying about the application of colours, you won't be surprised that I want to advise caution on this point. \r\nIn particular: the choice of colours and file extensions they are applied to up to this point seems arbitrary (IIRC ZIPs were formatted as error / danger). Possibly there has been consultation that I'm not aware of, but it feels like choices based on personal tastes rather than usability research.   \r\nIf the _ability to format_ were turned on but the default was not to apply any, users who want specific colours can still apply them. My guess is that making it opt-in would see quite a low take-up, opt-out will see it used by people who find the colours unhelpful, but neither find out how to turn them off, nor complain. \r\n",
      "created_at": "2022-08-25T13:45:56Z",
      "updated_at": "2022-08-25T13:45:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jhoneill the colors chosen (with exception of directories) were from existing colors already used which don't have a contrast concern for accessibility.  I've been asking for suggestions on the defaults, but have not received any.  So if you have any specific suggestions we can discuss those.  Having it enabled, but without decoration only makes it harder to discover. ",
      "created_at": "2022-08-25T14:01:29Z",
      "updated_at": "2022-08-25T14:01:29Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Ad colors: I'm quite satisfied with the defaults, as they closely match bash. And while we should absolutely not treat \"we should be like bash\" as the ultimate goal, opening two windows side by side and seeing both directory listings look similar was satisfying. Plus, it allows us to leverage existing user expectations from a well established color design. ",
      "created_at": "2022-08-25T15:39:36Z",
      "updated_at": "2022-08-25T15:39:36Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I've been using my own file formatting file to get lengths in human readable format for ages so I haven't noticed the change.  \r\nLooking at them now I think the file and SymbolicLink colors are good but I strongly dislike the directory color. It sticks out way too much and considering how the Windows console doesn't handle background colors + resizing very well I think it's a bad idea to make this the default experience. Just look at this:\r\n![image](https://user-images.githubusercontent.com/42123497/186723426-e5889bb8-5aa0-43a1-8945-ea67ab6b9ca4.png)\r\n\r\nThe BrightBlue color is much nicer IMO.",
      "created_at": "2022-08-25T16:48:49Z",
      "updated_at": "2022-08-25T16:48:49Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, agreed, sticking to foreground colors is a better default, that's why I set it myself to foreground blue. However what @MartinGC94 shows looks like a bug I cannot replicate, but that could be fixed by always making sure to reset color after filename\r\n\r\n![Screenshot_20220825-190242~2](https://user-images.githubusercontent.com/26599495/186726662-b995b8eb-0b97-456c-97cd-08f1d71292c7.jpg)\r\n",
      "created_at": "2022-08-25T17:05:05Z",
      "updated_at": "2022-08-25T17:05:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dkaszews the default colors, with the exception of directories, was borrowed from existing Linux colors.  The default color for directories for Linux would not pass the accessibility requirement for contrast which is why I chose a white foreground on blue background.\r\n\r\nI think the question is not so much a preference (as the colors/decoration can all be user configured), but if the defaults are acceptable by the majority of users.  Some people may not want any color, but instead use italics, bold, or underline but those may not be good defaults.",
      "created_at": "2022-08-25T18:09:09Z",
      "updated_at": "2022-08-25T18:09:09Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I trust you have consulted accessibility team to pick the best option, and the fact this is easily configurable by users pretty much cuts off any discussion.\r\n\r\nSmall question since I have your attention and I recall you were the author of the MR. Any plans to make type coloring fully generic? This introduced ability to set color of `FileInfo` based on its properties, I can imagine for example ability to color `MatchInfo`s consequitive groups (and not just the entire match) useful, let's say first is blue, second is green, etc. I know there is some way to do it via xml, but this API looks nicer. ",
      "created_at": "2022-08-25T18:39:34Z",
      "updated_at": "2022-08-25T18:39:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dkaszews color options for `MatchInfo` would have to be an entirely new feature.  Feel free to open a new issue to discuss the idea and would be helpful to have proposal on how it would be exposed to users as well as use cases showing its utility.",
      "created_at": "2022-08-25T18:54:52Z",
      "updated_at": "2022-08-25T18:54:52Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SteveL-MSFT  well, \"already used\" might mean the \"explosion in a paint factory\"  that is `ls` on linux - a paradigm case of runaway UI changes by people with great expertise in C, but little in usability, resulting in bad experience.  \r\nMy ubuntu/wsl OOB config applies 18 different combinations of colours to 130 file types. What proportion of Linux users know all 18?  As someone who doesn't live in bash, I have no idea why some directories are blue text on black, and others are have a green background, nor what yellow background, or cyan-text on a red background are meant to convey.  Extra information is put front of me but I can't decode it.\r\n\r\nI don't think Windows explorer is unusual keeping all files in one colour, I _think_ most GUI file managers do the same (ready to be corrected). In VS Code colour is used for source control status, not type. And AIUI `ls` uses colour because it defaults to showing many names per line:  _without_ `-l`  colour is the only clue what you can or can't run, or cd into.     \r\nBut DIR going all the way back to the 1980s has marked directories (even in wide mode) and file extensions told you what you could run, so had no need of colour.  \r\n\r\n> we should absolutely not treat \"we should be like bash\" as the ultimate goal\r\n\r\nAbsolutely. I also think we should feel able to say that bash introduced something for a reason that doesn't apply here, and it grew into a monster (18 colour combos and 130 file types) that we want to avoid.  Shells _should_ learn from each other, and that includes the mistakes of others.\r\n\r\nExecutables and directories are being coloured not because it is needed, but because that's what people coming to pwsh with a  linux background have grown used to. I can see them complaining that displaying directories in inverse is \"stupid\" and wanting to know \"why can't they be in blue\" (which I see running  `ls  /usr` in bash on wsl - accessibility not being something linux spend much time on :-) )  But special colours for files with a PowerShell extension like ps1xml or psd1? That's just colour for colour's sake.  \r\n\r\nI've tried to explain my accessibility problem and I don't know if the picture below helps to show what it is going on in my brain when this is in front of me.\r\n<img width=\"615\" alt=\"Untitled\" src=\"https://user-images.githubusercontent.com/16209593/186730740-aa25192e-6eaa-459d-ac2d-ebf932a45d38.png\">\r\n\r\nI can't _just read_ the stuff I want to read, with the visual hubbub of all those colours it takes extra concentration and in some cases I need to put my hand over the screen to stop my eye being dragged where I don't want it to be.  Possibly that disqualifies me from commenting, as the answer I seem to get is \"we like colours, you can turn yours off\".  \r\n\r\n\r\n",
      "created_at": "2022-08-26T14:44:07Z",
      "updated_at": "2022-08-26T14:44:07Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill My argument for coloring a little more than users might like is to show that it is possible. Personally I didn't find coloring by extension useful and especially did not like the default colors, but it was nice to learn such a thing is possible. All I had to do is add `$PSStyle.FileInfo.Extensions.Clear()` to my profile to disable it, so I believe as long as we provide customizability, the discoverability of the feature is more important than defaults. ",
      "created_at": "2022-08-27T06:19:03Z",
      "updated_at": "2022-08-27T06:19:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill My argument for coloring a little more than users might like is to show that it is possible. Personally I didn't find coloring by extension useful and especially did not like the default colors, but it was nice to learn such a thing is possible. All I had to do is add `$PSStyle.FileInfo.Extensions.Clear()` to my profile to disable it, so I believe as long as we provide customizability, the discoverability of the feature is more important than defaults.\r\n\r\nThat's a valid view. It works when people are curious. You or I look at it and say \"Neat you _can_ apply formatting, and the formatting I want is... _none_, I'll set that.\" I don't have the same curiosity when I use bash on wsl. I only found how it set the 18 colour combos for 130 file types in replying above. I _could_ make a bash look a bit more what I expect  but I _don't_: I sit their scowling at it for the the defaults that I can't be bothered to change (even the three colour bash prompt). I don't want people who are dragging their feet about moving off Windows PowerShell feeling about pwsh 7.3 the way I feel about bash. \r\n\r\nSet against that, I don't want people who currently use bash feeling that getting the look they want is a battle. Pwsh doing different things on Windows and Linux is one answer to that, but I think that has as many negatives as positives.  \r\nAnd I do understand the desire _not_ to keep formatting secret after introducing it. But look at what I said above `ls` defaults to wide view, only shows names, and needs colours so you what is a directory. In CMD dir /w puts [] around a directory so you can see pick directories out, so the new colours might not be needed in normal view but they going to help wide view right ? \r\n\r\n<img width=\"716\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16209593/187030003-c981e70c-2713-467b-a335-a62083f7abeb.png\">\r\n\r\nNo, actually **the place where colour _would_ benefit pwsh, doesn't use it** (list format doesn't use it either)\r\n\r\n@SteveL-MSFT  I did experiment with better defaults\r\n![image](https://user-images.githubusercontent.com/16209593/187029178-7812462e-4e0a-4416-8475-913b5692cc0e.png)\r\n\r\n1. This is Windows terminal with its interpretation  of the different colours and PWSH 7 on Windows has a dark blue background for me PowerShell 5 has traditional blue, Pwsh 6,  cmd and anything linux is black \r\n2. I think the group header block should be same format as the TableHeader \r\n3. I have tried bright white and bold but it is only 242/255  compared with the bright gray for normal being 204/255 which isn't really enough contrast. \r\n4. I tried directories in Normal colour and italic. It gets a \"maybe\" from me it removes the look-at-me look-at-me look-at-me  of having them in inverse, and it does say something is going on.\r\n5. PS1 files formatted as executables makes more more sense to me than all kinds of PowerShell files having a common format. \r\n6. Executables in green but not **BOLD GREEN** turns the attention grabbing down a notch. \r\n\r\n\r\nThere are 4 things which make me ask if you are **sure** this is ready.\r\n\r\n1. The default colours feeling a bit random. Once they become the norm, changing them will be harder. \r\n2. Not setting the colour of the grouping custom control to match the table headers\r\n3. Using new properties, LengthString and LastWriteTimeString,  but not providing a way to format them (e.g. I would like thousand separators , or might like KB, MB, GB, TB etc), unix-die-hards might want dates to change format depending age as they are used to, \r\n4. Only using the new NameString, LengthString and LastWriteString in table formats. In a perfect world I want formatting OFF for table view and ON for wide view. \r\n\r\n\r\n",
      "created_at": "2022-08-27T13:15:26Z",
      "updated_at": "2022-08-27T13:15:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jhoneill the additional asks you have are separate from this feature and something I have planned for the future but separate here means not using the same code as coloring as it's doing different things.  As for the default colors, for directories, if you want italics, you figured out how to customize it for yourself.  The question is what should the defaults be to aid quickly understanding information and also help with discovery of this feature.  `.ps1` and `.bat` (which would also include `.cmd`, `.js.`, .`vbs` as \"executable\") can certainly have the same default color as actual executables and would make sense rather than having PS specific files with a certain color.  That one I can understand.",
      "created_at": "2022-08-29T03:42:49Z",
      "updated_at": "2022-08-29T03:48:13Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SteveL-MSFT   I don't really think saying apply what you do to names in Table views should also apply to wide views **IS** additional. I think when the ps1xml files were updated - it looks like some is in  `src\\System.Management.Automation\\engine\\TypeTable_Types_Ps1Xml.cs` and some is in `src\\System.Management.Automation\\FormatAndOutput\\DefaultFormatters\\FileSystem_format_ps1xml`  - whoever made the changes was only thinking about the default / table view and didn't finish the job.\r\n\r\nThe  `LengthString` and `LastWriteTimeString`  hidden code properties have been added and they are used in the formatting. If you're saying that having them dormant and adding stuff to PSStyle to light them up is something that needs to come later in order to ship something worthwhile soon, it's a compromise I can live with, provide the intent to do it is there.   \r\n\r\nHeader groups, don't belong to the file experimental feature. It's not clear to me if that should a distinct another setting in PSStyle (my hunch is it should even if the default value matches column headings) and then I think whatever applies formatting to the column headings should apply it.  Probably the smart thing to do on this is to open an issue or a discussion for this one. \r\n\r\nI'm trying to help with the selection of good defaults, but I'm very aware that the way my brain reacts to a printed page or a screen is unusual. I don't want rail too much about how bad directories in inverse text is **for me** if it is helpful to almost everyone else, especially as I can change it. I think we've got to agreement on pwsh files /executables. (I'd use all the extensions in %pathext% + .ps1). \r\n\r\nWhether formatting compressed files adds anything is debatable. One of the things a preview is for is to get feedback on proposed changes to the default experience, so I think at some point you do have to say, \"yes we are sure now.\". That will get more data on how it's received, and how well it works for people. \r\n ",
      "created_at": "2022-08-29T12:47:03Z",
      "updated_at": "2022-08-29T12:47:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "All the relevant PRs have been merged or closed.  For any feedback on specific features, please create new issues.",
      "created_at": "2022-09-12T20:23:37Z",
      "updated_at": "2022-09-12T20:23:37Z"
    }
  ],
  "created_at": "2022-08-24T23:06:22Z",
  "number": 17962,
  "state": "closed",
  "title": "Make some 7.3 Experimental Feature Stable",
  "updated_at": "2022-09-12T20:23:38Z"
}