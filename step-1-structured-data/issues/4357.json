{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4357",
  "author": "SteveL-MSFT",
  "body": "This project started as a fork of the Windows PowerShell 5.1 code base.  As we've progressed towards a PowerShell Core 6.0 release and with the capability of dotnet core 2.0 and dotnet std 2.0 being able to load dotnet framework 4.5.1+ assemblies that are compatible with dotnet std 2.0, we can simplify the code base by removing the legacy FullCLR code so that we no longer have #ifdefs for CORECLR (and !CORECLR).  This was discussed and approved by @PowerShell/powershell-committee.  When reviewing the code, do not blindly just remove the FullCLR code, but validate if updates to .NET Core means using the FullCLR code instead of the limited .NET Core code.\r\n\r\n# Remaining `#if [!]CORECLR` usages\r\n\r\n```powershell\r\nparam($path = \"../repos/PowerShell\")\r\n\r\n$sources = Get-ChildItem -Recurse -Path $path -Include *.cs\r\nforeach ($source in $sources) {\r\n    $content = Get-Content $source -Raw\r\n    if ($content -match \"#if CORECLR\" -or $content -match \"#if !CORECLR\") {\r\n        $source.FullName\r\n    }\r\n}\r\n```\r\n\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/CoreCLR/Stubs.cs\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/CommonUtils.cs\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/ExportCounterCommand.cs\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/GetCounterCommand.cs\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/ImportCounterCommand.cs\r\nsrc/Microsoft.PowerShell.Commands.Diagnostics/NewWinEventCommand.cs\r\nsrc/Microsoft.PowerShell.Commands.Utility/commands/utility/new-object.cs\r\nsrc/Microsoft.PowerShell.LocalAccounts/LocalAccounts/Extensions.cs\r\nsrc/Microsoft.PowerShell.LocalAccounts/LocalAccounts/Sam.cs\r\nsrc/Microsoft.PowerShell.Security/security/AclCommands.cs\r\nsrc/Microsoft.PowerShell.Security/security/CertificateProvider.cs\r\nsrc/Microsoft.PowerShell.Security/security/ExecutionPolicyCommands.cs\r\nsrc/Microsoft.WSMan.Management/CredSSP.cs\r\nsrc/Microsoft.WSMan.Management/Interop.cs\r\nsrc/Microsoft.WSMan.Management/WsManHelper.cs\r\nsrc/System.Management.Automation/cimSupport/cmdletization/xml/CoreCLR/cmdlets-over-objects.xmlSerializer.autogen.cs\r\nsrc/System.Management.Automation/cimSupport/cmdletization/ScriptWriter.cs\r\nsrc/System.Management.Automation/CoreCLR/CorePsAssemblyLoadContext.cs\r\nsrc/System.Management.Automation/DscSupport/CimDSCParser.cs\r\nsrc/System.Management.Automation/engine/debugger/debugger.cs\r\nsrc/System.Management.Automation/engine/hostifaces/Command.cs\r\nsrc/System.Management.Automation/engine/hostifaces/Connection.cs\r\nsrc/System.Management.Automation/engine/hostifaces/ConnectionBase.cs\r\nsrc/System.Management.Automation/engine/hostifaces/HostUtilities.cs\r\nsrc/System.Management.Automation/engine/hostifaces/InternalHost.cs\r\nsrc/System.Management.Automation/engine/hostifaces/LocalConnection.cs\r\nsrc/System.Management.Automation/engine/hostifaces/LocalPipeline.cs\r\nsrc/System.Management.Automation/engine/hostifaces/Parameter.cs\r\nsrc/System.Management.Automation/engine/hostifaces/PowerShell.cs\r\nsrc/System.Management.Automation/engine/hostifaces/PowerShellProcessInstance.cs\r\nsrc/System.Management.Automation/engine/hostifaces/RunspacePool.cs\r\nsrc/System.Management.Automation/engine/hostifaces/RunspacePoolInternal.cs\r\nsrc/System.Management.Automation/engine/interpreter/ControlFlowInstructions.cs\r\nsrc/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs\r\nsrc/System.Management.Automation/engine/parser/Compiler.cs\r\nsrc/System.Management.Automation/engine/parser/FusionAssemblyIdentity.cs\r\nsrc/System.Management.Automation/engine/parser/GlobalAssemblyCache.cs\r\nsrc/System.Management.Automation/engine/parser/Parser.cs\r\nsrc/System.Management.Automation/engine/parser/TypeResolver.cs\r\nsrc/System.Management.Automation/engine/remoting/client/remoterunspace.cs\r\nsrc/System.Management.Automation/engine/remoting/commands/CustomShellCommands.cs\r\nsrc/System.Management.Automation/engine/remoting/commands/EnterPSHostProcessCommand.cs\r\nsrc/System.Management.Automation/engine/remoting/commands/remotingcommandutil.cs\r\nsrc/System.Management.Automation/engine/remoting/commands/ResumeJob.cs\r\nsrc/System.Management.Automation/engine/remoting/commands/SuspendJob.cs\r\nsrc/System.Management.Automation/engine/remoting/common/WireDataFormat/EncodeAndDecode.cs\r\nsrc/System.Management.Automation/engine/remoting/common/RemoteSessionNamedPipe.cs\r\nsrc/System.Management.Automation/engine/remoting/common/RunspaceConnectionInfo.cs\r\nsrc/System.Management.Automation/engine/remoting/common/throttlemanager.cs\r\nsrc/System.Management.Automation/engine/remoting/fanin/BaseTransportManager.cs\r\nsrc/System.Management.Automation/engine/remoting/fanin/InitialSessionStateProvider.cs\r\nsrc/System.Management.Automation/engine/remoting/fanin/WSManPlugin.cs\r\nsrc/System.Management.Automation/engine/remoting/fanin/WSManPluginFacade.cs\r\nsrc/System.Management.Automation/engine/remoting/fanin/WSManTransportManager.cs\r\nsrc/System.Management.Automation/engine/remoting/server/OutOfProcServerMediator.cs\r\nsrc/System.Management.Automation/engine/remoting/server/ServerPowerShellDriver.cs\r\nsrc/System.Management.Automation/engine/remoting/server/serverremotesession.cs\r\nsrc/System.Management.Automation/engine/remoting/server/ServerRunspacePoolDriver.cs\r\nsrc/System.Management.Automation/engine/remoting/server/ServerSteppablePipelineDriver.cs\r\nsrc/System.Management.Automation/engine/Attributes.cs\r\nsrc/System.Management.Automation/engine/CommandDiscovery.cs\r\nsrc/System.Management.Automation/engine/CommandMetadata.cs\r\nsrc/System.Management.Automation/engine/ExecutionContext.cs\r\nsrc/System.Management.Automation/engine/GetEvent_Types_Ps1Xml.cs\r\nsrc/System.Management.Automation/engine/InitialSessionState.cs\r\nsrc/System.Management.Automation/engine/LanguagePrimitives.cs\r\nsrc/System.Management.Automation/engine/MshCommandRuntime.cs\r\nsrc/System.Management.Automation/engine/pipeline.cs\r\nsrc/System.Management.Automation/engine/serialization.cs\r\nsrc/System.Management.Automation/engine/Types_Ps1Xml.cs\r\nsrc/System.Management.Automation/engine/Utils.cs\r\nsrc/System.Management.Automation/help/HelpSystem.cs\r\nsrc/System.Management.Automation/help/UpdatableHelpCommandBase.cs\r\nsrc/System.Management.Automation/help/UpdatableHelpSystem.cs\r\nsrc/System.Management.Automation/help/UpdateHelpCommand.cs\r\nsrc/System.Management.Automation/logging/MshLog.cs\r\nsrc/System.Management.Automation/namespaces/FileSystemProvider.cs\r\nsrc/System.Management.Automation/namespaces/RegistryProvider.cs\r\nsrc/System.Management.Automation/namespaces/Win32Native.cs\r\nsrc/System.Management.Automation/security/SecureStringHelper.cs\r\nsrc/System.Management.Automation/singleshell/config/MshSnapinInfo.cs\r\nsrc/System.Management.Automation/utils/ClrFacade.cs\r\nsrc/System.Management.Automation/utils/StructuredTraceSource.cs\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could we save the code history in a reference branch? It can help with backward compatibility issues.",
      "created_at": "2017-07-27T06:57:15Z",
      "updated_at": "2017-07-27T06:57:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is a plan - one PR from MSFT or multiple PRs from community too?\r\n\r\nSearch results for `#if .*CORECLR` - 543 results in 186 files.\r\n\r\nRelated. From #2969 @daxian-dbw:\r\n> We need to clean up  ApartmentState  related workarounds in powershell now.\r\n\r\nSearch results for `ApartmentState` 389 results in 52 files",
      "created_at": "2017-07-27T06:59:06Z",
      "updated_at": "2017-07-27T08:51:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I found `#if V2` in src\\System.Management.Automation\\minishell\\api\\RunspaceConfiguration.cs \ud83d\ude15 ",
      "created_at": "2017-07-27T13:55:33Z",
      "updated_at": "2017-07-27T13:55:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#3565 is related.  I reviewed CORECLR (and !CORECLR) - most of these relate with moving to .Net 2.0 - assembly load, ApartmentState/STA, unimplemented classes/methods/properties in .Net 1.0 and so on. Sometimes it's hard to distinguish. So it's probably easier to clean up the file by file.",
      "created_at": "2017-07-27T15:01:33Z",
      "updated_at": "2017-07-27T15:01:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> What is a plan - one PR from MSFT or multiple PRs from community too?\r\n\r\nThe work should be split to multiple PRs for sure, for example, the `AprtmentState` related changes should be one PR. \r\nI think this work needs to be done by people who are very familiar with the code base because it's not a simple code removal work -- some code blocks with `#if !CORECLR` might need to enabled because the missing types are back in .NET Core 2.0; some code blocks might need to be kept because the desired functionality was disabled in powershell core because the code needs to be somehow adjusted or rewritten.",
      "created_at": "2017-07-27T16:34:35Z",
      "updated_at": "2017-07-27T16:34:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree that we should divide up this work as multiple PRs from multiple people.  Since we're formally deprecated v2, we should clean up that code as well.",
      "created_at": "2017-07-27T16:48:07Z",
      "updated_at": "2017-07-27T16:48:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify!\r\n\r\nI am trying to clean up ClrFacade.cs and see all mentioned cases. I can fix simple cases but leave ` AprtmentState` and `assemblies` to you :-) - I believe the full cleanup require a huge work and I save your time if make obvious cleanups?",
      "created_at": "2017-07-27T18:20:45Z",
      "updated_at": "2017-07-27T18:20:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As I'm making other changes, I'm removing legacy code if I see it.",
      "created_at": "2017-07-27T18:38:03Z",
      "updated_at": "2017-07-27T18:38:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, please make obvious cleanups as you see them. But please try to keep each PR small so that we don't miss anything in the code review :)",
      "created_at": "2017-07-27T18:58:49Z",
      "updated_at": "2017-07-27T18:58:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT cmdlets like `Enable-PSRemoting` and `Disable-PSRemoting` contain a lot of scripts that deal with Windows PowerShell, shall we also clean up those scripts?",
      "created_at": "2017-07-28T16:07:35Z",
      "updated_at": "2017-07-28T16:07:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw yes",
      "created_at": "2017-07-28T20:28:52Z",
      "updated_at": "2017-07-28T20:28:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Note that if there is a module that we would eventually split out and publish separately on PSGallery.  That module should support Windows PowerShell (in general) and would retain FullCLR code (don't know if they have specific code paths, but Archive and ODataUtils would be examples)",
      "created_at": "2017-07-28T20:30:27Z",
      "updated_at": "2017-07-28T20:30:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  @adityapatwardhan Thanks for fast reviews!\r\n\r\nWe have many '#if CORE' for \"assemlies\" and hude for STA/apartment. Also we should review code base on .Net Core 1.0 -> 2.0 enhancements. I think it is better to make explicit points in #3565 for that and close the Issue.",
      "created_at": "2017-08-09T08:47:26Z",
      "updated_at": "2017-08-09T08:47:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "#3565 is more about reviewing `'#if UNIX'` blocks, while this one is focused on `'#if CORECLR'` blocks.\r\nI think it's better to separate these two depending on how the cleanup work is being done. Someone probably wants to focus on removing the dead Full CLR code, so he/she can leave the related `#if UNIX` block untouched without worrying that the change will cause a regression in Unix plats.",
      "created_at": "2017-08-09T16:50:51Z",
      "updated_at": "2017-08-09T16:50:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm in process of taking care of ApartmentState",
      "created_at": "2017-08-15T09:25:11Z",
      "updated_at": "2017-08-15T09:25:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Who we can ask to clean up web cmdlets?",
      "created_at": "2017-08-15T10:04:32Z",
      "updated_at": "2017-08-15T10:04:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dantraMSFT should clean up the web cmdlets",
      "created_at": "2017-08-15T10:16:47Z",
      "updated_at": "2017-08-15T10:16:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should continue to clean up the code, but it's not a blocker for 6.0.0 release",
      "created_at": "2017-08-31T20:55:23Z",
      "updated_at": "2017-08-31T20:55:23Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "EDIT: Moved the list into the top-level issue description at the request of @daxian-dbw.\r\n\r\n[big list used to be here]",
      "created_at": "2018-04-03T02:18:04Z",
      "updated_at": "2018-04-05T00:09:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Great work! \r\nCould you please move your post in new Meta-Issue and add link here?\r\nCan MSFT team prioritize?",
      "created_at": "2018-04-03T04:20:59Z",
      "updated_at": "2018-04-03T04:23:11Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Note: The `CustomPSSnapin` class is not even available therefore Snapins are probably not even achievable for FullCLR with the open source code given by this repo. I do not think this is an issue since no one likes/wants Snapin any more due to modules being a better choice. Therefore the better solution could  be to completely remove PSSnapin related code.",
      "created_at": "2018-08-05T16:33:04Z",
      "updated_at": "2018-08-05T16:34:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not difficult until the code is used in serialization.",
      "created_at": "2018-08-09T09:54:07Z",
      "updated_at": "2018-08-09T09:54:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please update a status of the Issue? Seems most was fixed and now it is not clear that we can fix yet.",
      "created_at": "2018-11-15T12:08:50Z",
      "updated_at": "2018-11-15T12:08:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I made an attempt to see what in the check list is already fixed and what isn't.  The problem is that the hyperlinks go to older commits and don't reflect current state.  Might be easier to write a script to scan the code and generate a new checklist but we won't know what has been fixed, just what needs to be fixed.",
      "created_at": "2018-11-20T17:49:24Z",
      "updated_at": "2018-11-20T17:49:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I caught the same and thought that you have an idea  - good point about script. We could review \"file by file\".",
      "created_at": "2018-11-21T05:00:08Z",
      "updated_at": "2018-11-21T05:00:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "One thing we should be careful of is not straight removing the FullClr code, but seeing if the Windows PowerShell code now works because of updates to .NET Core.",
      "created_at": "2018-11-21T06:31:56Z",
      "updated_at": "2018-11-21T06:31:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Seems we can close the Issue: all `#if FullCLR` code was removed (I found FullCLR only in comments) and we have #3565 to track updates of .NET Core.\r\n\r\nUpdate: I found still up to 100 '#if !CORECLR' (like appdomain, apartment) so maybe not close the PR.",
      "created_at": "2018-11-26T04:56:13Z",
      "updated_at": "2018-11-26T11:28:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Search results for `#if .*CORECLR` - 543 results in 186 files.\r\n\r\nNow search results for `#if .*CORECLR` - 174 results in 70 files.",
      "created_at": "2019-07-12T14:51:49Z",
      "updated_at": "2019-07-12T14:51:49Z"
    }
  ],
  "created_at": "2017-07-27T04:59:26Z",
  "number": 4357,
  "state": "open",
  "title": "Remove FullCLR code",
  "updated_at": "2019-07-12T14:51:49Z"
}