{
  "_url": "https://github.com/PowerShell/PowerShell/issues/930",
  "author": "andschwa",
  "body": "We need to create NuGet packages for the next version of PowerShell, and then host them on a private feed (either NuGet enterprise or AppVeyor).\n\nCreating the packages can be done with either NuGet beta on Windows with a custom nuspec and bits copied from each platform, or with `dotnet pack`.\n\nUsing `dotnet pack` would be a lot nicer so we could create these packages automatically on any platform; but is blocked by both dotnet/cli#2175 and dotnet/cli#2170.\n",
  "closed_at": "2016-06-16T06:25:22Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daviwil did #943 resolve your requirement? In other words, can you now develop your VS Code extension, or do you need runtime assemblies packaged?\n",
      "created_at": "2016-05-04T21:45:50Z",
      "updated_at": "2016-05-04T21:45:50Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "There are two options here:\n1. Self-host the PowerShell runtime by bundling System.Management.Automation and its dependencies with the PowerShell Editor Services host application.\n2. Don't self-host the PowerShell runtime but build against the reference assemblies.  Require that the PowerShell Core be installed somewhere on the user's machine and dynamically load up the assemblies at runtime.\n\nOption 1 definitely requires NuGet packages.  Option 2 requires that I'm able to dynamically load up SMA.dll which seems possible with the AssemblyLoadContext (am I right about that?).  It seems we're moving toward a common installation path for PowerShell on all platforms, so I suppose this might work.\n\nWhat do you think?  Is option 2 viable?  I could try it against a recent drop of PowerShell if you think it could work.\n",
      "created_at": "2016-05-04T21:51:54Z",
      "updated_at": "2016-08-18T00:31:17Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I think you could do (2), it'd be a sane requirement to have the PowerShell package installed. It doesn't even matter where it's installed, just find `powershell` in the `PATH` environment variable; the assemblies will be right next to it.\n\nAnd yes, you can use the [`LoadFromAssemblyPath`](https://dotnet.github.io/api/System.Runtime.Loader.AssemblyLoadContext.html#System_Runtime_Loader_AssemblyLoadContext_LoadFromAssemblyPath_System_String_) API. I don't think you even need custom ALC, as it should use the default otherwise.\n",
      "created_at": "2016-05-04T23:16:06Z",
      "updated_at": "2016-05-04T23:16:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Granted, NuGet packages are certainly still easier.\n",
      "created_at": "2016-05-04T23:17:04Z",
      "updated_at": "2016-05-04T23:17:04Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "As I'm not completely certain of your requirements @daviwil, I'll reassign this over to you. Making packages of the individual projects should be pretty easy. The tricky part is making packages that contain the matrix of our target frameworks (`net451` and `netstandard1.5`) and runtimes (Windows, Linux, and OS X), where the latter two also require a native library be deployed. You may or may not need all of these things. Play around with `dotnet pack` and NuGet and see what happens \ud83d\ude04 \n",
      "created_at": "2016-05-04T23:19:42Z",
      "updated_at": "2016-05-04T23:19:42Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I started some work in `vors/nuget` branch\n",
      "created_at": "2016-05-20T03:27:25Z",
      "updated_at": "2016-05-20T03:27:25Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Changes merged in master per #1026 \nI will put instruction about how to use them, once I figure out myself\n",
      "created_at": "2016-05-24T02:15:31Z",
      "updated_at": "2016-05-24T02:15:31Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Alright, so I made it work with a test project\nPattern name for nuget packages (for now) is `<Assembly.Name>-1.0.0-b<build-number>`\n\n### Setup\n- Create entry in your project json like\n\n```\n  \"dependencies\": {\n    \"System.Management.Automation\": \"1.0.0-b2015\"\n  }\n\n```\n- Add to your **local** nuget config (`.\\NuGet.Config`) file \"AppVeyor-PowerShell\" feed\n\n```\nnuget sources Add -Name AppVeyor-PowerShell -Source https://ci.appveyor.com/nuget/powershell-96xuxt67m69t -UserName xvorsx@gmail.com -Password <your-password-from-AppVeyor.com> -StorePasswordInClearText\n```\n- Make sure you also have `https://ci.appveyor.com/nuget/psl-windows-build-buunqeauqyp5` in the feeds, because we get MMI dependencies from there at the moment. (TODO: move them to the same feed)\n- Run `dotnet restore`, it should work now\n\n### KNOWN PROBLEMS\n\nFlag `-StorePasswordInClearText` will store your password, you guess it, in clear text. See https://github.com/NuGet/Home/issues/2844 for details.\n",
      "created_at": "2016-05-24T22:35:10Z",
      "updated_at": "2016-06-25T00:01:41Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "That's done\n",
      "created_at": "2016-06-16T06:25:22Z",
      "updated_at": "2016-06-16T06:25:22Z"
    }
  ],
  "created_at": "2016-04-28T21:52:43Z",
  "number": 930,
  "state": "closed",
  "title": "Create NuGet packages of PowerShell",
  "updated_at": "2016-08-18T00:31:17Z"
}