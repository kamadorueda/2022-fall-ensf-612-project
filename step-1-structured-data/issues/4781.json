{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4781",
  "author": "mklement0",
  "body": "As requested in #3158 and  suggested by @SteveL-MSFT \r\n in https://github.com/PowerShell/PowerShell/issues/3647#issuecomment-327844929.\r\n\r\nCurrently, you cannot derive from a `[System.Management.Automation.ErrorRecord]` instance whether it represents a non-terminating, a statement-terminating, or a script-terminating error.\r\n\r\nNote that, on the command line, you can already detect a _script_-terminating error generated with a  `Throw` statement by examining the relevant `$Error` collection entry's `.Exception.WasThrownFromThrowStatement` property, but that won't work for errors that were _promoted_ to script-terminating ones via `-ErrorAction Stop` / `$ErrorActionPreference = 'Stop'` (such errors generate an _accompanying_ `[System.Management.Automation.ActionPreferenceStopException]` error).\r\n\r\nOne useful application for allowing the discovery of a given error's \"fatality\" would be to enable error-type-specific coloring of error output, as discussed in the context of improving the standard error view in #3647.\r\n\r\nAlso see the expanded proposal [below](https://github.com/PowerShell/PowerShell/issues/4781#issuecomment-329585446), which asks for _two_ properties: the _intrinsic_ severity, and the _effective_ severity.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.6\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With regard to coloring, we have a huge number of places where we write \"error string\" (not ErrorRecord) directly to the console. \r\nOnly if we exclude the case we have a chance to implement the enhancement.",
      "created_at": "2017-09-08T08:57:00Z",
      "updated_at": "2017-09-08T08:57:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood, but (a) colored console output is an important use case, and (b) in other cases we can potentially use _wording_ to indicate the error type.",
      "created_at": "2017-09-08T12:53:46Z",
      "updated_at": "2017-09-08T12:53:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently we do coloring in formatting system based on stream type only.\r\nPerhaps it makes sense to make it more general and based on psobject type.",
      "created_at": "2017-09-08T14:16:29Z",
      "updated_at": "2017-09-08T14:16:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, and good idea.",
      "created_at": "2017-09-08T14:21:59Z",
      "updated_at": "2017-09-08T14:21:59Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "As I mentioned in #3647, SQL Server differentiates terminating and non-terminating errors by calling it Severity. I think the term would be a good property name. Type will work too but Severity conveys a ranking of how an error will impact a script. \r\n\r\nIt could make it easier to describe these error conditions in documentation when thinking in that term. For example, a non-terminating error is being acted as if it is less severe than a terminating error. Adding `ErrorAction -Stop` causes it to be treated with the same severity, a halt to the command.",
      "created_at": "2017-09-08T20:47:51Z",
      "updated_at": "2017-09-08T20:47:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Enough us to add `isTerminating` property?",
      "created_at": "2017-09-14T07:12:18Z",
      "updated_at": "2017-09-14T07:12:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There are two distinct severities to consider:\r\n\r\n* The _intrinsic_ severity of an error - what it is by design.\r\n\r\n* The _effective_ severity - if it was _promoted to a script-terminating error_ or _suppressed_, by way of `-ErrorAction Stop` / `$ErrorActionPreference`.\r\n\r\nWhile _severity_ is a good term to use, pragmatically speaking we _could_ get away with just an `IsTerminating` property, though perhaps `IsStatementTerminating` would be clearer (though I still wish this strange subdivision of terminating into script- and statement-terminating would never have happened - and perhaps was never intended to).\r\n\r\nFor _intrinsic_ severity:\r\n\r\n* `.Exception.WasThrownFromThrowStatement` already identifies an intrinsically script-terminating error (generated with `Throw` - the only way to directly create a scrip-terminating error).\r\n\r\n* `.IsStatementTerminating` containing `$True` would indicate a statement-terminating error, obviously.\r\n\r\n* `.IsStatementTerminating` containing `$False` therefore indicates a _non-terminating_ error.\r\n\r\nLooking at the above, perhaps `.Severity` with enum values isn't a bad idea.\r\n\r\n---\r\n\r\nFor _effective_ severity:\r\n\r\n* There is currently no way to tell if an error was _suppressed_, with `-ErrorAction SilentlyContinue` (`-ErrorAction Ignore` would prevent the error record from surfacing altogether). The same goes for a script/statement-terminating error caught with `Try` / `Catch`, though, arguably, [caught errors shouldn't surface either](https://github.com/PowerShell/PowerShell/issues/3768#issuecomment-323405734).\r\n\r\n* Currently, the only way to tell if a non-terminating/statement-terminating error was _promoted_ to a script-terminating one is to examine the _very next_ `$Error` entry (`$Error[0]` immediately after the statement).\r\n\r\n     * #4837 explains how this currently works, including how it works inconsistently and unhelpfully with statement-terminating errors.\r\n\r\n---\r\n\r\nAssuming it is technically feasible, it would be nice if both the intrinsic and the effective severity were reflected directly in the error record (though the separate `$Error` entry must probably be retained as well, for backward compatibility).\r\n\r\nIn summary, perhaps something along the lines of _two_ new properties:\r\n\r\n`.Severity` (intrinsic), which can be one of `NonTerminating`, `StatementTerminating`, `ScriptTerminating`\r\n\r\n`.EffectiveSeverity`, which can be one of the above, plus `Silenced`.\r\n\r\n",
      "created_at": "2017-09-14T19:31:08Z",
      "updated_at": "2017-09-14T19:31:08Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Something to keep in mind: there is, in fact, only one **kind** of ErrorRecord. It's what's done with that error record that varies. It can be written to the error pipeline, wrapped in a pipeline terminating exception and thrown or wrapped in an exception using the `throw` statement. The same error record can be used in multiple scenarios i.e. caught in try/catch and then written. The property should reflect this in some way.",
      "created_at": "2018-03-13T17:50:05Z",
      "updated_at": "2018-03-13T17:50:05Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Consider the case where an error goes from terminating to non-terminating:\r\n```\r\n try { 1/0 } catch { write-error $_ }; \"Hi\"\r\n```\r\nIn this example, 1/0 produces a terminating error that is caught and written to the error pipe as a non-terminating error. How would do you propose to flag that?\r\n\r\nAnd how about:\r\n```\r\nPS[1] (109) > $e = try { 1/0 } catch { $_ }\r\nPS[1] (110) > throw $e\r\n```\r\nIn this case, the error is caught and simply written to stdout. It's not a terminating error anymore, it doesn't even show up in the error stream. Then in the next statement `throw $e` it's back to being a terminating error. ",
      "created_at": "2018-03-22T19:06:53Z",
      "updated_at": "2018-03-22T19:06:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside: \r\n\r\n> It's not a terminating error anymore, it doesn't even show up in the error stream.\r\n\r\nCurrently, the error produced by ` $e = try { 1/0 } catch { $_ }` _does_ show up in the error stream, but it sounds like this will get fixed: #3768\r\n\r\n\r\n\r\n",
      "created_at": "2018-03-26T15:31:37Z",
      "updated_at": "2018-03-26T15:31:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay:\r\n\r\nYou're talking about the _effective_ severity - as ultimately surfaced, which is distinct from the _intrinsic_ severity - as originally emitted (see my [earlier comment](https://github.com/PowerShell/PowerShell/issues/4781#issuecomment-329585446)). Each piece of information is of interest in different scenarios, so both should ideally be available as an `[ErrorRecord]` instance property.\r\n\r\nAs for a more concrete approach to tagging an error record with the _intrinsic_ severity:\r\n\r\n* `Write-Error` / `$PSCmdlet.WriteError()` could tag the error as _non_-terminating.\r\n\r\n* `$PSCmdlet.ThrowTerminatingError()` could tag the error as _statement_-terminating.\r\n\r\n* Similarly, PowerShell itself all errors stemming from an expression (`1/0`) or .NET method call (`[int]::Parse('foo')`) or invalid command syntax (`Get-Item -NoSuchParam`) as _statement-terminating_\r\n\r\n* The use of `Throw` could tag the error as _script_-terminating (fatal by default).\r\n\r\n---\r\n\r\nThe _effective_ severity could be tagged as follows; if there are multiple layers, the top layer wins:\r\n\r\n* An error record obtained from within a `catch` block should be tagged as _ignored_.\r\n   * By contrast, one ignored with `-ErrorAction Ignore` would never even be seen.\r\n\r\n* An error record processed in a `trap` block...\r\n   *  ... that executes `break` should be tagged as _script_-terminating.\r\n   *  ... that executes `continue` should be tagged as _silenced_.\r\n   * Having neither `break` nor `continue` has no impact on the effective severity.\r\n\r\n* An error record silenced via `-ErrorAction SilentlyContinue` / `$ErrorActionPreference = 'SilentlyContinue'` or `2>$null` should be tagged as _silenced_.\r\n\r\n* An error record promoted via `-ErrorAction Stop` or `$ErrorActionPreference = 'Stop'` should be tagged as _script_-terminating.\r\n\r\n* In all other cases, the effective severity would be the same as the intrinsic severity.\r\n\r\n\r\n",
      "created_at": "2018-03-26T18:20:01Z",
      "updated_at": "2021-08-29T22:43:23Z"
    }
  ],
  "created_at": "2017-09-08T03:10:55Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 4781,
  "state": "open",
  "title": "Add a property to [System.Management.Automation.ErrorRecord] to distinguish error types (non-terminating, statement-terminating, script-terminating)",
  "updated_at": "2022-11-06T21:12:35Z"
}