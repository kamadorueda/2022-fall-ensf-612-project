{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16113",
  "author": "dwtaber",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR improves `Invoke-Command`'s handling of cases that combine `$using:` expressions with variable namespace notation when the `-ComputerName` parameter is used.\r\nFixes #9204\r\nFixes #16019 \r\n\r\n## PR Context\r\n\r\nWhen the `-ComputerName` parameter is used, `Invoke-Command` is unable to check which version of PowerShell is available on the remote computer and assumes v2.0. Because PowerShell 2.0 can't parse `$using:` expressions, the `ScriptBlock` is modified before sending, with `$using:` variables renamed to replace the `$using:` expression with `$__using_`.  Currently, the code that renames these variables doesn't check whether the variable path is qualified.  In cases where variable namespace notation is used, this code produces variable names like `$__using_env:foo`, preventing the remote computer from parsing the variables correctly.  The changes in this PR add handling for qualified variable paths, producing variable names like `$__using_env_foo`\r\n\r\nThis PR does not fix all issues with the handling of `$using:` expressions.  Variable names that include special characters still aren't parsed correctly, for instance.  Since a user technically _could_ name a variable `$__using_env_foo`, this might be considered an [\"unlikely grey area\" breaking change](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md). Long-term, it might be worth reconsidering how `Invoke-Command` handles the `-ComputerName` parameter; always falling back to v2.0 seems unnecessarily restrictive.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-10-06T17:43:57Z",
  "comments": [
    {
      "author": "microsoft-cla-retired[bot]",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=16113) <br/>All CLA requirements met.",
      "created_at": "2021-09-16T15:35:18Z",
      "updated_at": "2021-09-16T15:36:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> When the `-ComputerName` parameter is used, `Invoke-Command` is unable to check which version of PowerShell is available on the remote computer and assumes v2.0.\r\n\r\nI wonder why we need the workaround if we can prepare full fix.\r\n\r\nIf I understand correctly, with  ComputerName we create new runspace but do not open it in `CreateHelpersForSpecifiedComputerNames()`, as result we can not detect remote PowerShell version. So I guess we need to open the new runspace in `CreateHelpersForSpecifiedComputerNames()`.",
      "created_at": "2021-09-16T16:52:15Z",
      "updated_at": "2021-09-16T16:52:15Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> > When the `-ComputerName` parameter is used, `Invoke-Command` is unable to check which version of PowerShell is available on the remote computer and assumes v2.0.\r\n> \r\n> I wonder why we need the workaround if we can prepare full fix.\r\n> \r\n> If I understand correctly, with ComputerName we create new runspace but do not open it in `CreateHelpersForSpecifiedComputerNames()`, as result we can not detect remote PowerShell version. So I guess we need to open the new runspace in `CreateHelpersForSpecifiedComputerNames()`.\r\n\r\nImplementing proper version detection for the `-ComputerName` parameter seems preferable to me as well.  Since the current behavior (falling back to v2) is documented at various points in the code comments, it seemed to be an intentional design choice, maybe based on factors I wasn't aware of.  Honestly, this is the first pull request I've submitted, and I didn't want to overstep with a potentially significant change to how `Invoke-Command` connections work, so I went with a more conservative fix, but I'm not married to it.",
      "created_at": "2021-09-16T17:41:11Z",
      "updated_at": "2021-09-16T17:41:11Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Can I get some guidance on the two tests that have failed?  It looks like `Invoke-WebRequest` failed to reach a URI, but I can't see how my changes would have affected that cmdlet.  Is it possible the resource was just unavailable when the test was run?\r\n\r\nI'd also appreciate any suggestions on writing a Pester test for this issue.  I don't think any of the current remoting tests target a remote computer, so they don't offer much guidance.  So far I've been testing against computers available to me, but obviously that's too context-dependent to be of use to anyone else.  Are there any designated endpoints for this sort of testing?",
      "created_at": "2021-09-22T12:56:53Z",
      "updated_at": "2021-09-22T12:56:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I restarted CI-static.",
      "created_at": "2021-09-22T16:20:33Z",
      "updated_at": "2021-09-22T16:20:33Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-30T02:00:41Z",
      "updated_at": "2021-09-30T02:00:41Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Not sure what the state of testing is for `$using:` vars, but would be good if we had some to cover the code path this change affects",
      "created_at": "2021-10-05T22:19:22Z",
      "updated_at": "2021-10-05T22:19:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Tagging @PaulHigin for review as well",
      "created_at": "2021-10-05T22:19:42Z",
      "updated_at": "2021-10-05T22:19:42Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Git/GitHub novice question: when updating from the master branch, I should have used a fast-forward merge to avoid creating a separate merge commit, right? How much of a problem is it that I, uh, didn't do that?",
      "created_at": "2021-10-06T00:32:41Z",
      "updated_at": "2021-10-06T00:32:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dwtaber Never mind - we use \"squash and merge\" to get one commit in main branch.",
      "created_at": "2021-10-06T04:26:29Z",
      "updated_at": "2021-10-06T04:26:29Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt, judging by its file history, it looks like `System.Management.Automation/engine/parser/ast.cs` wasn't updated during the merge, so the bug addressed by this PR still exists.  ",
      "created_at": "2021-10-28T16:24:46Z",
      "updated_at": "2021-10-28T16:24:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@dwtaber Changes from this PR exists in the master branch. The PR will not be included in 7.2.0-rc.1 though. It will be included in 7.3.0-preview.1.",
      "created_at": "2021-10-28T16:52:33Z",
      "updated_at": "2021-10-28T16:52:48Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> @dwtaber Changes from this PR exists in the master branch. The PR will not be included in 7.2.0-rc.1 though. It will be included in 7.3.0-preview.1.\r\n\r\nAh, okay.  Thanks for clarifying!",
      "created_at": "2021-10-28T17:20:45Z",
      "updated_at": "2021-10-28T17:20:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T19:58:42Z",
      "updated_at": "2021-12-16T19:58:42Z"
    },
    {
      "author": "ImportTaste",
      "author_association": "NONE",
      "body": "I really wish this had made it into the stable release of 7.2, I try to avoid using preview-exclusive stuff in my code, so having to wait for 7.3's stable release really sucks.\r\n\r\nIs there any chance this could be slipped into a 7.2 build, i.e. 7.2.2?",
      "created_at": "2021-12-23T00:41:36Z",
      "updated_at": "2021-12-23T00:51:56Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-maintainers \r\nWe only take security fixes and regression to LTS.  This is appropriate for 7.3.  Rejecting back-port.",
      "created_at": "2022-03-02T19:51:13Z",
      "updated_at": "2022-03-02T19:51:13Z"
    }
  ],
  "created_at": "2021-09-16T15:35:06Z",
  "number": 16113,
  "state": "closed",
  "title": "Invoke-Command: improve handling of variables with $using: expression",
  "updated_at": "2022-03-02T19:51:22Z"
}