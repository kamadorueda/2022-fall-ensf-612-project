{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13501",
  "author": "mklement0",
  "body": "Follow-up from #11461.\r\n\r\nWhen using the PowerShell CLI with `-c`  / `-Command`, PowerShell by design sets its exit code based on the _success status_ of the _last_ statement executed in the specified command string.\r\n\r\nIf the last statement is a _PowerShell_ command, success can only be derived from the automatic success-status variable, `$?`. As a _Boolean_, the only sensibly way to map that to an exit code is to map `$true` to `0`, and `$false` to `1` - this works as expected.\r\n\r\nHowever, if the last statement is a call to an _external program_, a process exit code is _directly_ available from the child process in which the external program executed, as reflected in automatic variable `$LASTEXITCODE`. The same potentially applies to a call to an (in-process) call to a `*.ps1` script that uses `exit <n>`.\r\n\r\nGiven that `$LASTEXITCODE` can contain more specific information than just abstract success vs. failure, it makes sense to preserve this specific information in the _caller's_ `$LASTEXITCODE` value  instead of mapping it in a lossy manner to either `0` (`$LASTEXITCODE` being `0`) or `1` (_any nonzero_ `$LASTEXITCODE` value) - which is what currently happens.\r\n\r\nWhile this would technically be a breaking change, it seems to me that it falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area):\r\n\r\n* In the typical case, code checks for abstract _success vs. failure_ of child processes, which means that  _any nonzero_ exit code indicates failure, without regard to the _specific_ nonzero value.\r\n\r\n* The proposed change wouldn't interfere with that, while at the same time providing more specific information to code that _does_ care about the _specific_ nonzero exit code reported.\r\n\r\n## Steps to reproduce\r\n\r\nOn Unix:\r\n\r\n```powershell\r\n& { pwsh -noprofile -c 'sh -c ''exit 5'''; $LASTEXITCODE } | Should -Be 5\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should pass.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because the process exit code `5` was unexpectedly mapped to `1` in the caller's scope:\r\n\r\n```none\r\nExpected 5, but got 1.\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.6\r\n```\r\n",
  "closed_at": "2020-08-26T19:02:52Z",
  "comments": [
    {
      "author": "Northman-de",
      "author_association": "NONE",
      "body": "Just my thoughts: I do not believe that it's PowerShell's task to handle the errorcode of another executable that was started inside a script and to use that as it's own exitcode.\r\nIf you want PowerShell to return a specific exitcode you have to use \"exit $MyExitCode\".\r\n\r\nEspecially if the exitcode would be ambiguous. E.g. Pwsh returns an exitcode of 1 if the script was interrupted (CTRL+C).\r\nIf your process also returns a 1 on failure you would be unable to distinguish between these two cases.\r\n\r\nI'm using \"exit $MyExitCode\" in some scripts to inform the starting script about the result:\r\n\r\n` pwsh -noprofil -c 'dir c: ; if ($?) {Exit 200} else {exit 13}'`\r\n`$LASTEXITCODE`\r\n\r\nA $LASTEXITCODE of 1 indicates that the script was interrupted.\r\n",
      "created_at": "2020-08-22T09:27:34Z",
      "updated_at": "2020-08-22T09:27:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Northman-de \r\n\r\n>  I do not believe that it's PowerShell's task to handle the errorcode of another executable\r\n\r\nIt is PowerShell's job - as a _shell_ - to play as nicely with the outside world as it can - an aspiration that it has historically often fallen short of.\r\n\r\nWith `-c` / `-Command`, PowerShell's CLI sets an exit code deliberately - which is good - but it throws away information in the process - which is bad.\r\n\r\nClearly, the design intent was to translate the success status of the (last) command executed in the command string into an appropriate process exit code; for PowerShell-native commands mapping `$?` to `0` and `1` is the best that can be done, but for external executables and `*.ps1` scripts an appropriate exit code is _directly available_ and should be used as such.\r\n\r\nNote that calling a `*.ps1` script with `-File` _does_ respect an `exit <n>` statement and reports `<n>` as the exit code:\r\n\r\n```powershell\r\nPS> 'exit 5' > ./t.ps1; pwsh -noprofile -file ./t.ps1; $LASTEXITCODE\r\n5\r\n```\r\n\r\nThere are situations where you need to call `.ps1` scripts _via `-c` / `-Command`_ instead, such as when you need to pass _array_ arguments.\r\n\r\n```powershell\r\nPS> 'exit 5' > ./t.ps1; pwsh -noprofile -c ./t.ps1 -param foo, bar; $LASTEXITCODE\r\n1  # !! Specific exit code was lost, solely due to switching from -File to -Command.\r\n```\r\n\r\nDoes this discrepancy make sense to you? I think it amounts to a pitfall that is easily avoided.\r\n\r\n---\r\n\r\n> Especially if the exitcode would be ambiguous.\r\n\r\nThis is really a separate issue, worth tackling in its own right.\r\nIt is an issue that (a) already exists and (b) one that, if anything, could be _helped_ by resolving the issue at hand, making _workarounds_ easier.\r\n\r\nIt is unfortunate that PowerShell chose to use the nondescript exit code `1` for termination via <kbd>Ctrl-C</kbd> and for unhandled script-terminating errors (created with `throw`, for instance).\r\n\r\nPOSIX-like shells more sensibly reserve a range of exit codes to indicate termination _by signal_ (which <kbd>Ctrl-C</kbd> constitutes, via `SIGINT`): `128 + <signal-number`; thus, since `SIGINT` has a numeric value of `2`, exit code `130` is reported.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-22T13:55:50Z",
      "updated_at": "2020-08-22T15:10:43Z"
    },
    {
      "author": "Northman-de",
      "author_association": "NONE",
      "body": "@mklement0\r\n> > I do not believe that it's PowerShell's task to handle the errorcode of another executable\r\n> \r\n> It is PowerShell's job - as a _shell_ - to play as nicely with the outside world as it can - an aspiration that it has historically often fallen short of.\r\n\r\nCome on. You let out the and-part \"and to use that as it's own exitcode\" :-)\r\n\r\n> Does this discrepancy make sense to you?\r\n\r\nIndeed, it does :-).<br/>\r\nFrom the pwsh help for `-command`:\r\n> Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the NoExit parameter is specified.\r\n\r\nThe parameter is for executing commands, not processes or scripts.<br/>\r\nAs you wrote: PowerShell sets it's own exit code based on the execution result of the whole command. \r\nIn your example the execution \"fails\" as the exitcode of t.ps1 is not 0.\r\n\r\n> [..], but for external executables and *.ps1 scripts an appropriate exit code is directly available and should be used as such.\r\n\r\nYou are not executing a script (as you would with using `-file`), you are executing a command that starts a script and that fails and results in an exit code of 1.\r\n\r\nThe exit code of t.ps1 remains inside the command. Your command is just one script. What exit code should be returned if the command contains more? E.g.:<br/>\r\n```powershell\r\n./t.ps1 ; dir $PWD\r\n```\r\nActually this returns 0 as the last instruction succeded.<br/><br/>\r\n\r\nThe `-file` parameter is for scripts and therefore the exitcode is the one of the script (my personal(!) conclusion).\r\n\r\nEven with `-command` you can specify the exit code as the one from the script:\r\n```powershell\r\n[PS]> set-content -Path t2.ps1 -Value 'param ([int[]]$param); $param.Gettype(); $param; exit 5'\r\n[PS]> $array = 1..5\r\n[PS]> $cmd = './t2.ps1 -param {0}; Write-Host \"ExitCode: $LASTEXITCODE\"; Exit $LASTEXITCODE' -f ($array -join \",\")\r\n[PS]> pwsh -noprofile -c $cmd ; \"PWSH ExitCode: $LASTEXITCODE\"\r\n\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Int32[]                                  System.Array\r\n1\r\n2\r\n3\r\n4\r\n5\r\nExitCode: 5\r\nPWSH ExitCode: 5\r\n```\r\n\r\n> It is unfortunate that PowerShell chose to use the nondescript exit code `1` for termination via Ctrl-C and for unhandled script-terminating errors (created with `throw`, for instance).\r\n\r\nI guess that's because PowerShell has it's roots in Windows...\r\n \r\n> POSIX-like shells more sensibly reserve a range of exit codes to indicate termination _by signal_ (which Ctrl-C constitutes, via `SIGINT`): `128 + <signal-number`; thus, since `SIGINT` has a numeric value of `2`, exit code `130` is reported.\r\n\r\nI wasn't aware of that. That's an interesting solution.",
      "created_at": "2020-08-24T11:08:21Z",
      "updated_at": "2020-08-24T11:09:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Northman-de \r\n\r\n> Come on. You let out the and-part \"and to use that as it's own exitcode\" :-)\r\n\r\nThat omission wasn't intentional (I simply pasted what I thought was enough to provide context for my response), and it has no bearing on the points that I made.\r\n\r\nI understand how it currently works (the `-File` vs. `-Command` behavior), but my point is that the current `-Command` behavior _in itself_ falls short; that it exhibits an inconsistency with the `-File` behavior (why report the _abstract success status_ in one case, and the specific exit code in the other?) makes matters worse.\r\n\r\n> As you wrote: PowerShell sets its own exit code based on the execution result of the whole command.\r\n\r\nNo: **It sets its exit code based on the _last_ statement** executed, which is also what POSIX-compatible shells do (except they also do so when exiting an _interactive_ session, unlike PowerShell).\r\n\r\nTo recap the issue: **Given that PowerShell intentionally derives the exit code from the statement executed _last_** in a `-Command` call, it makes sense to use _that last statement's exit code as-is_ - if it has one; this is always the case with calls to external programs and `*.ps1` scripts (see note below).\r\nIn other words: **There is no reason to throw away the _specific_ exit code** in favor of an abstract one; PowerShell is only forced to _choose_ an exit code for statement forms that _don't have exit codes_ (PowerShell-native commands and expressions), where the mapping of `$?` to `0` (`$true`) and `1` (`$false`) makes sense.\r\n\r\n> I guess that's because PowerShell has its roots in Windows...\r\n\r\nThat is no excuse, because process exit codes and forced termination with <kbd>Ctrl-C</kbd> have always existed on \r\nWindows as well.\r\n\r\n---\r\n\r\nAs an aside: The inconsistency of `*.ps1` exit code reporting:\r\n\r\n* It is only an _explicit `exit <n>`_ statement that meaningfully sets an exit code; instead, it should again be the _last_ statement executed in the script that determines the exit code (which, of course, could be an `exit` statement), as is the case in POSIX-compatible shells and with `-Command`, albeit in the suboptimal manner discussed.\r\n\r\n* When you call a `*.ps1` script via `-File` or as the last statement via `-Command`, PowerShell's exit code in the absence of the script exiting via an `exit` statement is _always `0`_ (except in the exceptional <kbd>Ctrl-C</kbd> / `throw` cases, where it becomes `1`).\r\n\r\n* By contrast, when called _in-session_, again in the absence of `exit`, `$LASTEXICODE` reflects the exit code of whatever external program (or other `*.ps1` _if_ it set an exit code) was executed last - whether executed inside the script or even _before_.\r\n\r\n* In other words:\r\n  * With `-File`, unlike with `-Command`, the exit code is categorically set to `0` in the absence of an `exit` statement (barring abnormal termination).\r\n  * In-session, the exit code (as reflected in `$LASTEXITCODE`) is _not set at all_ for the script _as a whole_ in the absence of an `exit` statement.\r\n\r\nSee #11712 for details.\r\n\r\n\r\n",
      "created_at": "2020-08-24T12:43:49Z",
      "updated_at": "2020-08-25T22:51:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So right now an exit code of `1` means something very specific for folks already manually using exit codes: an unexpected error occurred, something that I as the writer didn't plan for.\r\n\r\nLets say I have a script that SCCM kicks off as part of an application install.  In that script I exit with `0x200` to indicate that a reboot is needed.  At the end of that script I fire off a native application that I expect always exits with `0` but happens to exit with `0x200` every now and then.  What would have been flagged as an obvious problem with my script in certain environments is now flagged as a successful install that just needs to reboot.\r\n\r\nAlso if you know an executable only returns `0` or `1` it's not unreasonable to say `code == 1` means there was an error. afaik the only ways you get something other than those two at the moment are if PowerShell straight up crashes or an exit code is explicitly specified.  This change would definitely be at least bucket 2 and I think an argument could be made for bucket 1.",
      "created_at": "2020-08-25T17:18:32Z",
      "updated_at": "2020-08-25T17:18:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience - fair point re what bucket the change falls into: I was thinking of `&&` / `||` use and tools that check for any _nonzero_ exit code to infer failure - irrespective of its specific value.\r\n\r\nI don't know know how common testing for `1` _specifically_ is in the real world.\r\n\r\nI'll leave it to others to make the bucket call.\r\n\r\nIf it turns out to be too breaking, we have another candidate for #6745 on our hands (more on the why below).\r\n\r\n---\r\n\r\n> means something very specific for folks already manually using exit codes: an unexpected error occurred, something that I as the writer didn't plan for.\r\n\r\nOf course, the only specificity is in the _abstraction_ that _something_ went wrong - not _what_, which only a _specific_ exit code can communicate.\r\n\r\nThere's no reason for PowerShell not to enable reporting a specific exit code (if available) as the default experience, which requires addressing  the following issues:\r\n\r\n* A `-Command` / `-c` CLI call should report the last (executed) statement's _specific_ exit code (if available), as `-File` already does.\r\n* Forceful and exceptional termination, such as via <kbd>Ctrl-C</kbd> and unhandled script-terminating errors (e.g., via `throw`) should use a reserved range of exit codes to allow distinguishing these cases from regular termination with  deliberately set exit codes.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-25T18:15:24Z",
      "updated_at": "2020-08-25T18:17:07Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I don't know know how common testing for `1` specifically is in the real world.\r\n\r\nUnfortunately it's hard to tell any specifics.  That said, orchestration software often lets you assign meaning to specific exit codes, or set which error codes specifically mean fail.  It'll break stuff for sure, though it's more or less impossible to know how much.\r\n\r\n> Of course, the only specificity is in the _abstraction_ that _something_ went wrong - not _what_, which only a _specific_ exit code can communicate.\r\n\r\nWell yes and no.  You would actually lose a little bit of information in changing this.  Right now if my script exits with a non-zero exit code that *isn't* `1` then I know for sure that it comes from one of *my* `exit` statements specifically.  If it's `1` then it means I messed up and didn't handle something.  It's sort of like catching specific exceptions vs an untyped catch block.\r\n\r\n> There's no reason for PowerShell not to enable reporting a specific exit code (if available) as the default experience, which requires addressing the following issues:\r\n\r\nI disagree that it should be the default for compatibility reasons, but I'd love to see a switch for it.",
      "created_at": "2020-08-25T19:55:03Z",
      "updated_at": "2020-08-25T19:55:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> it's not unreasonable to say code == 1\r\n\r\nI saw this in some code while on a call this week. I suspect it would be as common as the old `$WindowsVersion.StartsWith('9')`.\r\n\r\nI'm not a huge fan of the current exit code, but it's established behaviour that users depend on and is easy enough to override.\r\n\r\n> but I'd love to see a switch for it.\r\n\r\nYeah that's the kind of thing I'd like to see, but I doubt will happen simply due to time and testing requirements.",
      "created_at": "2020-08-25T22:45:07Z",
      "updated_at": "2020-08-25T22:45:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> it's established behaviour \r\n\r\nUnfortunately, it's not documented, though, so let's start there:\r\n\r\n* Documenting exit-code behavior in `about_Pwsh`: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6548\r\n* Documenting exit-code behavior in `about_Scripts`: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6559\r\n\r\nIn the process I discovered:\r\n\r\n* <kbd>Ctrl-C</kbd> with `-File` sets the exit code to `0`(!) - see #13523\r\n\r\n * Somewhat ironically, _in-session_ termination of a script with <kbd>Ctrl-C</kbd> sets `$LASTEXITCODE` to the POSIX-compliant `130`, but only on Unix; on Windows, `$LASTEXITCODE` isn't set at all in that case (same as not exiting with `exit` from the script - see #11712)\r\n\r\n* A non-numeric `exit` argument or a numeric value outside the platform-supported range (`[int]` on Windows, `[byte]` on Unix) quietly results in `0`(!).\r\n",
      "created_at": "2020-08-26T17:39:46Z",
      "updated_at": "2020-08-26T17:39:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> easy enough to override.  \r\n\r\nI we can't change the current behavior for backward-compatibility reasons, then I personally think that is enough (advising people to use `exit $LASTEXITCODE` with `-Command` in the docs), so I'm closing this - thanks for the discussion.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-26T19:02:52Z",
      "updated_at": "2020-08-26T19:02:52Z"
    }
  ],
  "created_at": "2020-08-22T02:28:32Z",
  "number": 13501,
  "state": "closed",
  "title": "PowerShell CLI: exits with exit code 1 rather than the specific $LASTEXITCODE  of the last statement",
  "updated_at": "2020-08-26T19:44:27Z"
}