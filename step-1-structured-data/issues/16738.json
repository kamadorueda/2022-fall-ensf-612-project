{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16738",
  "author": "IISResetMe",
  "body": "Fixes https://github.com/PowerShell/PowerShell/issues/16330\r\n\r\n<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRuntime updates in #16309 broke `Start-PSBootbootstrap` on Windows PowerShell 5.1 by introducing a hard dependency on the `[SemanticVersion]` type, introduced in 6.0.\r\n\r\nThis commit replaces the type reference with a PowerShell class that implements the necessary subset of functionality (namely `IComparable`) from `[SemanticVersion]` needed for sorting SDK versions, ostensibly the motivation for introducing this dependency in the first place.\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\nI, like many others, have been building PowerShell >=6 from source with Windows PowerShell 5.1 for years and still occassionally do. Having to manually patch `build.psm1` everytime I want to bootstrap a build from WPS is frustrating. Hence this PR.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [X] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-01-18T22:31:52Z",
  "comments": [
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `110` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +108 -2\r\nPercentile : 42%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.psm1 : +108 -2\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczOCIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczOCIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczOCIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-01-12T23:07:54Z",
      "updated_at": "2022-01-12T23:07:54Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> These changes look fine to me. My only concern is that we now would have to maintain this code, and pick up any bug fixes from dotNet. Do people agree this is Ok? I imagine the code is pretty stable, but would still need to be maintained.\r\n\r\n`SemanticVersion` seems to have been stable since SemVer 2.0 compatibility was introduced in https://github.com/PowerShell/PowerShell/pull/5037 (November 2017) - all subsequent changes has been pure refactoring to take advantage of new runtime/language features or comply with updated QA rules - no behavioral changes have been made as far as I can tell.",
      "created_at": "2022-01-12T23:57:31Z",
      "updated_at": "2022-01-12T23:57:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I have the similar concern, and thus marked this to be reviewed by maintainer. Also, CIs failed because the build was not successful. I think the failure is related to changes in this PR because I don't see similar failure in other PRs or daily builds.",
      "created_at": "2022-01-13T00:14:13Z",
      "updated_at": "2022-01-13T00:14:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The sdk selection logic is \"dumb\" - get list, sort, pick up first - we don't search required sdk in the list. So we can replace Get-LatestInstalledSDK with one command `dotnet  --version`.",
      "created_at": "2022-01-13T03:11:45Z",
      "updated_at": "2022-01-13T03:11:45Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> The sdk selection logic is \"dumb\" - get list, sort, pick up first - we don't search required sdk in the list. So we can replace Get-LatestInstalledSDK with one command `dotnet --version`.\r\n\r\nI was a bit perplexed by this logic as well.\r\n\r\nI assume that also explains why I get \"dotnet (6.0.101) is out of date, downloading dotnet (6.0.100)\" every time I bootstrap since installing 6.0.101 on my machine \u00af\\\\_(\u30c4)_/\u00af",
      "created_at": "2022-01-13T03:27:50Z",
      "updated_at": "2022-01-13T03:27:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I was a bit perplexed by this logic as well.\r\n\r\n@IISResetMe \r\n:-) The Build.psm1 is very old and it has long been a _monster_, there are contradictions on every line.\r\nIt should be cleaned up and simplified a long time ago, use the newer features of the latest versions including source generators,\r\nmove the build process to csproj files as much as possible, making it more friendly for other communities which could  issue their distributives,\r\nmove the release process into a separate repository as it is essentially an internal MSFT process.\r\nIt's impossible to understand why the MSFT team chooses to roam the jungle year after year, but it's their time. :-)",
      "created_at": "2022-01-13T03:48:48Z",
      "updated_at": "2022-01-13T03:48:48Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Please see comments here: https://github.com/PowerShell/PowerShell/issues/16330#issuecomment-1015889793\r\n\r\nClosing this PR as PowerShell team Maintainer's have consensus, that this is not required.",
      "created_at": "2022-01-18T22:31:52Z",
      "updated_at": "2022-01-18T22:31:52Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan consensus that it shouldn't be possible to bootstrap a build from Windows PowerShell? Or consensus that there are better ways of maintaining compatibility?",
      "created_at": "2022-01-19T14:00:54Z",
      "updated_at": "2022-01-19T14:00:54Z"
    }
  ],
  "created_at": "2022-01-12T23:07:50Z",
  "number": 16738,
  "state": "closed",
  "title": "Revert 5.1-breaking changes to build\\Start-PSBootStrap",
  "updated_at": "2022-01-19T14:00:54Z"
}