{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12645",
  "author": "mklement0",
  "body": "See also: #12625 \r\n\r\n# Summary of the new feature/enhancement\r\n\r\nOn Unix-like platforms:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> Test-Path -Executable /bin/bash, ~/.bashrc\r\nTrue    # an executable\r\nFalse  # a regular file (document)\r\n```\r\n\r\nOn Unix-like platforms, executable files (files that the system itself recognizes as executable code - whether implemented as binaries or shebang-line-based scripts) have no distinct filename extensions - the typical case is _not_ to have an extension at all, but it is solely the [file-system permissions bits](https://en.wikipedia.org/wiki/Modes_(Unix)) relative to the current user that determine executability.\r\n\r\nIn short: `Test-Path -Executable` should act like `test -x` (the `/bin/test` utility), to provide a PowerShell-idiomatic (and cross-platform) way to perform this test.\r\n\r\nOn Windows:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> Test-Path -Executable $PSHOME\\pwsh.exe, C:\\Windows\\System32\\tcpmon.ini\r\nTrue    # an executable\r\nFalse  # a regular file (document)\r\n```\r\n\r\nOn Windows, it is sufficient to test a file's _extension_ to determine its executability, namely for whether the extension is one listed in `$env:PATHEXT`.\r\n\r\n\r\nIt probably makes sense to also treat `*.ps1` as executables from a PowerShell perspective, even though they are not executables from the system's perspective.\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-05-13T13:54:21Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 12645,
  "state": "open",
  "title": "Add an -Executable switch to Test-Path to test whether files are executables",
  "updated_at": "2021-12-01T08:54:36Z"
}