{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8975",
  "author": "kiedtl",
  "body": "In bash, you have the feature of trapping signals (such as EXIT and SIGWINCH) and executing a series of statements when those signals are received. E.G.\r\n```bash\r\ntrap 'do_this; draw_that; blah_blah_blah;' SIGWINCH\r\n```\r\nI am aware other ways a ctrl-c event could be handled, but I'm trying to handle a SIGWINCH and to the best of my knowledge there is currently no way to do this in PowerShell.\r\n\r\nSuch functionality could easily be provided by a .NET event handler, or by a cmdlet, using the Windows API (I'm not familiar with win32, so I'm in the dark on how exactly this could be accomplished).",
  "closed_at": "2019-06-01T00:00:47Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @PaulHigin could weight this. It could be useful on Unix. Not clear about Windows. Not clear about portability.\r\n\r\n/cc @mklement0 @SteveL-MSFT ",
      "created_at": "2019-02-26T18:23:08Z",
      "updated_at": "2019-02-26T18:23:08Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "It would be really useful when implementing a script that needs to redraw text hen the windows is resized. E.g. I am working on a port of [pxltrm](https://github.com/dylanaraps/pxltrm) to PowerShell (see [this repo](https://github.com/lptstr/pxlcon)), and here such a feature would come in very handy.",
      "created_at": "2019-02-26T18:27:58Z",
      "updated_at": "2019-02-26T18:27:58Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "Question: does Windows have some sort of API that could handle this?",
      "created_at": "2019-02-26T18:41:52Z",
      "updated_at": "2019-02-26T18:42:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently PowerShell Core to work with console uses Windows API on Windows and .Net Core API on Unix. So it is not easy to address your question.",
      "created_at": "2019-02-26T20:00:36Z",
      "updated_at": "2019-02-26T20:00:36Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Signal handling might warrant an RFC because there are interesting design choices - map to exceptions or an event handler.\r\n\r\nWindows does have an api to report when the console is resized, but it is somewhat painful to use, see this [example](https://docs.microsoft.com/en-us/windows/console/reading-input-buffer-events).\r\n\r\nIf you go this route, you need to handle keyboard events that are handled by apis like `Console.ReadKey`, e.g. you would see both key up and key down event for a single key press.\r\n",
      "created_at": "2019-02-27T23:59:01Z",
      "updated_at": "2019-02-27T23:59:01Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "H'm... Well, the venerable Windows API is, *by definition*, painful to use.\r\nI mean, just think of all their custom data types, to start with: `LPSTR`, `LPTSTR`, `UCHAR`, `TCHAR`, `LPCTSTR`, `LPCSTR`, `LPCWSTR`, `LRESULT`, `DWORD32`, `HWND`, `PCHAR`, `PCSTR`, `PCTSTR`, etc. \r\n\r\nHundreds of different type of strings. Its almost as if win32 was *designed* to be painful to use.",
      "created_at": "2019-02-28T15:48:07Z",
      "updated_at": "2019-02-28T15:48:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The console application in Windows _usually_ does not need to worry about resizing the window. Another thing is WinForms...\r\nEverything is simple - you need to use right things in right places. Usually, difficulties arise when you choose the wrong means. Do not blindly mirror Unix experience to Windows. You will be surprised how much easier it is to do some things on Windows than on Unix if you know how to.",
      "created_at": "2019-02-28T16:33:57Z",
      "updated_at": "2019-02-28T16:33:57Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "> Do not blindly mirror Unix experience to Windows. \r\nYou will be surprised how much easier it is to do some things on Windows than on Unix if you know how to.\r\n\r\nI would appreciate it then, if you could tell me what to do in this case. I can't really think of any other way around this.\r\n\r\nI am drawing lines of text three lines before the bottom of the screen. I need a way to clear those lines and re-draw them at the bottom of the console when the console is resized. I cannot implement this until I have a way to know when the console is resized.\r\n\r\nI suppose I'll just have to write a C program that'll call the appropriate API's and do it for me. But then I'll have to mess around with - God help me - `DWORD`s and `HANDLE`s and `WINDOW_BUFFER_SIZE_EVENT` and `ResizeEventProc` and who knows what else. I'm going to have to worry about Unicode and (\\*shudder\\*) pointers and `malloc`, and the rest of the crazy stuff.\r\n\r\nSo I guess I'll just put this off until I find a better way. \\*sigh\\*",
      "created_at": "2019-02-28T16:42:51Z",
      "updated_at": "2019-02-28T16:44:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Kiedtl It is PowerShell Core repo. I can only say that PowerShell Core is probably not right tool for your task. But if you need PowerShell Core perhaps you have to re-design your application.\r\nAlso the main PowerShell Core principle is portability - it works on all platforms (Windows, Macos, Linux-s) where .Net Core works. So you shouldn't use low level Windows APIs - you should use C# and .Net Core APIs.",
      "created_at": "2019-02-28T17:06:13Z",
      "updated_at": "2019-02-28T17:06:13Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "I just remembered - wouldn't it be easy to use a `DLLImport` of some sort in C#? You could (I think) somewhat painlessly call the appropriate APIs comfortably from .NET.\r\n\r\nIf PowerShell is running on Unix, You could just throw a `PNSE`. .NET Core does something similar [here](https://github.com/dotnet/corefx/blob/b30e7723c98a6e7da0fa7d6edd4a54643275afad/src/System.Console/src/System/ConsolePal.Unix.cs#L199).\r\n\r\nI suppose that this issue is for the `dotnet/corefx` repo. ",
      "created_at": "2019-02-28T17:14:35Z",
      "updated_at": "2019-02-28T17:16:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is implementation details. As I said above we should be full portable and should avoid `PNSE`.\r\n\r\n> I suppose that this issue is for the dotnet/corefx repo.\r\n\r\nFeel free to discuss there if you have usecase.",
      "created_at": "2019-02-28T17:32:12Z",
      "updated_at": "2019-03-18T12:24:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - a console application with a TUI has a definite need to handle window resize events - it's a problem that I never fully addressed in PSReadLIne because of the difficulty (initially) and the lack of portability (later).\r\n\r\nNow should people write console applications in PowerShell? .Net? I'd say yes, it seems reasonable.",
      "created_at": "2019-02-28T18:15:47Z",
      "updated_at": "2019-02-28T18:15:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr isn't this kind of already done by `WriteProgress()`? or at least the underlying console API it calls, however it does that.",
      "created_at": "2019-02-28T18:37:40Z",
      "updated_at": "2019-02-28T18:37:40Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I don't know if WriteProgress is such a good example. Works kinda shaky.",
      "created_at": "2019-02-28T18:44:26Z",
      "updated_at": "2019-02-28T18:44:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's true, it's not perfect. But it _does_ do this, to some extent. \ud83d\ude04 ",
      "created_at": "2019-02-28T18:52:56Z",
      "updated_at": "2019-02-28T18:52:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Perhaps I was not clear. I said about regular cases - most of console applications (and scripts too) is very simple. (For PowerShell all needed output features should be addresed by conhost/formatting system) PSReadline is heavy application and edge case. If it were a frequent case, I believe MSFT team would have addressed this a long time ago. I see that MSFT is actively developing a new console on Windows 10. We could ask them for the necessary enhancements. But I can\u2019t imagine how it could be ported. But why not (if MSFT go to convergence)?",
      "created_at": "2019-02-28T18:53:23Z",
      "updated_at": "2019-02-28T18:53:23Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "> It is implementation details. As I said above we should be full portable and should avoid `PNSE`.\r\n\r\nIsn't there a way to do that on Unix too? I mean, how does `bash` do it??",
      "created_at": "2019-02-28T19:35:39Z",
      "updated_at": "2019-02-28T19:35:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Kiedtl I think it is question for MSFT console team - perhaps they could find way to port the API.",
      "created_at": "2019-02-28T19:48:34Z",
      "updated_at": "2019-02-28T19:48:34Z"
    },
    {
      "author": "kiedtl",
      "author_association": "NONE",
      "body": "Alright.",
      "created_at": "2019-02-28T19:50:05Z",
      "updated_at": "2019-02-28T19:50:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'd like to keep the issue open - it does make sense to support signals in a general way.\r\n\r\nI agree console resize events are not in scope for PowerShell.",
      "created_at": "2019-02-28T20:43:49Z",
      "updated_at": "2019-02-28T20:43:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-01T00:00:21Z",
      "updated_at": "2019-06-01T00:00:21Z"
    }
  ],
  "created_at": "2019-02-25T13:28:24Z",
  "number": 8975,
  "state": "closed",
  "title": "Ability to capture signals in PowerShell",
  "updated_at": "2019-06-01T00:00:47Z"
}