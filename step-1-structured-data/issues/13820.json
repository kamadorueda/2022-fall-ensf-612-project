{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13820",
  "author": "daviesj",
  "body": "The function `TokenTraits.HasTrait(TokenKind, TokenFlags)` gives strange results for the BinaryPrecedence values of `TokenFlags`\r\n\r\nFor example, \r\n```powershell\r\n[System.Management.Automation.Language.TokenTraits]::GetTraits([System.Management.Automation.Language.TokenKind]::Band)\r\n```\r\nreturns `BinaryPrecedenceBitwise, BinaryOperator, CanConstantFold`. The [documentation ](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language.tokentraits.hastrait?view=powershellsdk-7.0.0)on `TokenTraits.HasTrait` says: \"Return true if the TokenKind has the given trait.\" Therefore I would expect `HasTrait` to return `true` only for those three values of `TokenFlags`. However:\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n [System.Management.Automation.Language.TokenTraits]::HasTrait([System.Management.Automation.Language.TokenKind]::Band,[System.Management.Automation.Language.TokenFlags]::BinaryPrecedenceMultiply)\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nFalse\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nTrue\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nDiscovered this while trying to work out why the PSScriptAnalyzer rule UseConsistentWhitespace seems to apply to some random set of operators and not to others. After really digging in, it appears the author of the logic for operators in this rule only [intended to implement logic for assignment or arithmetic operators](https://github.com/PowerShell/PSScriptAnalyzer/blob/8c5a6388cc121c8308217039e9d1f9bba4aa4ff2/Rules/Strings.resx#L982). However it appears that person made the same assumption I would that `HasTrait` ought to work on the BinaryPrecedence flags and therefore [used it in attempt to detect all operators with equal precedence to Add or Multiply](https://github.com/PowerShell/PSScriptAnalyzer/blob/8c5a6388cc121c8308217039e9d1f9bba4aa4ff2/Rules/UseConsistentWhitespace.cs#L189).",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Only the later half of the `TokenFlags` enum are actually bit flags. Testing for specific `BinaryPrecedence*` entries should be done like this:\r\n\r\n```csharp\r\n(flags & TokenFlags.BinaryPrecedenceMask) is TokenFlags.BinaryPrecedenceMultiply\r\n```\r\n\r\n`HasTrait` should probably be updated to account for that.",
      "created_at": "2020-10-20T18:03:48Z",
      "updated_at": "2020-10-20T18:03:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The method is public so it would be a breaking change.\r\nIt is used 15 times internally so current behavior is\" by-design\".",
      "created_at": "2020-10-21T13:11:33Z",
      "updated_at": "2020-10-21T13:11:33Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> The method is public so it would be a breaking change.\r\n\r\nCan you think of a scenario where someone would depend on this?  Even as a work around? Genuine question as that was my first thought too but I can't come up with even a stretch of a scenario.\r\n\r\n> It is used 15 times internally so current behavior is\" by-design\".\r\n\r\nNever with a `BinaryPrecedence*` value though, there's a separate internal method for that because it doesn't work.",
      "created_at": "2020-10-21T13:30:21Z",
      "updated_at": "2020-10-21T13:30:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "For clarity, here's what the enum looks like:\r\n\r\n```python\r\n    Enum: System.Management.Automation.Language.TokenFlags (int) \ud83d\udea9\r\n\r\n   Value Name                      Hex        Bits\r\n   ----- ----                      ---        ----\r\n       0 None                      0x0000000  0000.0000 0000.0000 0000.0000 0000.0000\r\n       1 BinaryPrecedenceLogical   0x0000001  0000.0000 0000.0000 0000.0000 0000.0001\r\n       2 BinaryPrecedenceBitwise   0x0000002  0000.0000 0000.0000 0000.0000 0000.0010\r\n       5 BinaryPrecedenceComparis\u2026 0x0000005  0000.0000 0000.0000 0000.0000 0000.0101\r\n       7 BinaryPrecedenceCoalesce  0x0000007  0000.0000 0000.0000 0000.0000 0000.0111\r\n       9 BinaryPrecedenceAdd       0x0000009  0000.0000 0000.0000 0000.0000 0000.1001\r\n      10 BinaryPrecedenceMultiply  0x000000A  0000.0000 0000.0000 0000.0000 0000.1010\r\n      12 BinaryPrecedenceFormat    0x000000C  0000.0000 0000.0000 0000.0000 0000.1100\r\n      13 BinaryPrecedenceRange     0x000000D  0000.0000 0000.0000 0000.0000 0000.1101\r\n      15 BinaryPrecedenceMask      0x000000F  0000.0000 0000.0000 0000.0000 0000.1111\r\n      16 Keyword                   0x0000010  0000.0000 0000.0000 0000.0000 0001.0000\r\n      32 ScriptBlockBlockName      0x0000020  0000.0000 0000.0000 0000.0000 0010.0000\r\n     256 BinaryOperator            0x0000100  0000.0000 0000.0000 0000.0001 0000.0000\r\n     512 UnaryOperator             0x0000200  0000.0000 0000.0000 0000.0010 0000.0000\r\n    1024 CaseSensitiveOperator     0x0000400  0000.0000 0000.0000 0000.0100 0000.0000\r\n    2048 TernaryOperator           0x0000800  0000.0000 0000.0000 0000.1000 0000.0000\r\n    4096 SpecialOperator           0x0001000  0000.0000 0000.0000 0001.0000 0000.0000\r\n    8192 AssignmentOperator        0x0002000  0000.0000 0000.0000 0010.0000 0000.0000\r\n   32768 ParseModeInvariant        0x0008000  0000.0000 0000.0000 1000.0000 0000.0000\r\n   65536 TokenInError              0x0010000  0000.0000 0000.0001 0000.0000 0000.0000\r\n  131072 DisallowedInRestrictedMo\u2026 0x0020000  0000.0000 0000.0010 0000.0000 0000.0000\r\n  262144 PrefixOrPostfixOperator   0x0040000  0000.0000 0000.0100 0000.0000 0000.0000\r\n  524288 CommandName               0x0080000  0000.0000 0000.1000 0000.0000 0000.0000\r\n 1048576 MemberName                0x0100000  0000.0000 0001.0000 0000.0000 0000.0000\r\n 2097152 TypeName                  0x0200000  0000.0000 0010.0000 0000.0000 0000.0000\r\n 4194304 AttributeName             0x0400000  0000.0000 0100.0000 0000.0000 0000.0000\r\n 8388608 CanConstantFold           0x0800000  0000.0000 1000.0000 0000.0000 0000.0000\r\n16777216 StatementDoesntSupportAt\u2026 0x1000000  0000.0001 0000.0000 0000.0000 0000.0000\r\n```",
      "created_at": "2020-10-21T13:38:58Z",
      "updated_at": "2020-10-21T13:38:58Z"
    },
    {
      "author": "daviesj",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > The method is public so it would be a breaking change.\r\n> \r\n> Can you think of a scenario where someone would depend on this? Even as a work around? Genuine question as that was my first thought too but I can't come up with even a stretch of a scenario.\r\n\r\nI hope someone wouldn't be depending on relationships in the bit patterns of `BinaryPrecedence*` values, especially since the numeric values themselves have changed. However, if it is too great of a change then I recommend at least adding to [the documentation](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language.tokentraits?view=powershellsdk-7.0.0) that `HasTrait` is only valid for `TokenFlags` values which are bit flags.\r\n\r\nGiven that `token.TokenFlags` cannot be trusted (#10348), at least for operators, it seems one has to rely on `token.Kind` and use `TokenTraits` functions to detect types of operator tokens. When an API user sees there is a `HasTrait` function, and there is no documented reason not to use it, the natural assumption is that you should use it because the API developers know better than you how to determine whether or not a `TokenKind` has a trait.",
      "created_at": "2020-10-21T16:58:45Z",
      "updated_at": "2020-10-21T16:58:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> However, if it is too great of a change then I recommend at least adding to the documentation that HasTrait is only valid for TokenFlags values which are bit flags.\r\n\r\n@daviesj You could open new issue in PowerShell-Docs repo or pull a PR there.\r\n\r\n/cc @msftrncs\r\n\r\n/cc @daxian-dbw ",
      "created_at": "2020-10-21T17:12:53Z",
      "updated_at": "2020-10-21T17:12:53Z"
    }
  ],
  "created_at": "2020-10-20T16:28:49Z",
  "labels": [
    "Issue-Question",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 13820,
  "state": "open",
  "title": "TokenTraits.HasTrait gives unexpected results with Precedence flags",
  "updated_at": "2021-05-19T22:00:26Z"
}