{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8610",
  "author": "sethvs",
  "body": "`Join-String -InputObject 1,2,3` result is not equal to `1,2,3 | Join-String` result.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n1,2,3 | Join-String\r\nJoin-String -InputObject 1,2,3\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n123\r\n123\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n123\r\n1 2 3\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.3\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-01-24T20:53:38Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Cool, thanks for fixing this; for the general issue with scalar `-InputObject` parameters, see #4242.",
      "created_at": "2019-01-09T13:03:48Z",
      "updated_at": "2019-01-09T13:03:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@sethvs, in the implementation it may be better to leave `-InputObject` as a `PSObject` rather than making it `PSObject[]`, for efficiency - please see the discussion with @vexx32 starting [here](https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452692389).",
      "created_at": "2019-01-09T14:23:31Z",
      "updated_at": "2019-01-09T14:23:31Z"
    },
    {
      "author": "sethvs",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 Thanks. I'll leave the decision to maintainers.",
      "created_at": "2019-01-09T14:54:39Z",
      "updated_at": "2019-01-09T14:54:39Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Note that this is a breaking change.",
      "created_at": "2019-01-11T18:39:54Z",
      "updated_at": "2019-01-11T18:39:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: It's highly likely that this is a  [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change:\r\n\r\n```powershell\r\nJoin-String -InputObject 1,2,3\r\n```\r\n\r\nis currently effectively the same as:\r\n\r\n```\r\n\"$(1,2,3)\"\r\n```\r\n\r\nThat is, the only operation being performed is the stringification of the input array (implicit joining with `$OFS`) _during parameter binding_ - `Join-String` itself is then a no-op, given that it then receives a _single_ input string; in other words: there's nothing left to join.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-01-11T19:31:16Z",
      "updated_at": "2019-01-11T19:31:16Z"
    },
    {
      "author": "sethvs",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay The `Join-String` cmdlet has been released in preview.3 only and not in official releases.",
      "created_at": "2019-01-14T09:19:51Z",
      "updated_at": "2019-01-14T09:19:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @sethvs.\r\n\r\n---\r\n\r\nAs for _how_ to implement the proposed change:\r\n@PetSerAl has since shown that switching to `PSObject[]` in an effort to treat `-InputObject` _arguments_ the same as `PSObject`-based `-InputObject` _pipeline_ input doesn't work in all cases: https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453753539\r\n\r\n---\r\n\r\nAs for *whether* to implement the change at all:\r\n\r\nWe need to decide whether we even want to support `-InputObject` argument / pipeline equivalence for collection-enumerating cmdlets such as `Join-String` (my vote: yes), or whether we should treat `-InputObject` simply as an _auxiliary_ parameter that facilitates _pipeline input_ but is not to be used _directly_ with _arguments_ - see https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453831509\r\n\r\nIf the latter, `Join-String -InputObject 1,2,3` would then by design not be (meaningfully) supported, and there'd be nothing to change.\r\n",
      "created_at": "2019-01-14T12:41:11Z",
      "updated_at": "2019-01-14T12:41:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 \r\n\r\nI think that from a semantic perspective, having `-InputObject` be primarily an implementation detail of standard pipeline support isn't necessarily _wrong_ per se? I think it would be better if there were some way via attribute or some such to denote a parameter as `Pipeline-Only` such that it wouldn't appear in tab completions or be usable for input directly; in this way we could avoid some of the confusion perhaps?\r\n\r\nBut whatever option ultimately wins out here... we should also consider that while there is a _mostly_ consistent implementation amongst standard cmdlets, it's not completely consistent, which is a problem: without a consistent and clear example to follow, third-party cmdlets tend to pick and choose whatever they feel is most appropriate more often than not, which seems to lead to less consistent practices in the wider PowerShell community in this regard.\r\n\r\nAs a result, I think that opting to change anything here will only have a meaningful impact if we can decide on and then actually enact a consistent implementation across all the standard PowerShell cmdlets.",
      "created_at": "2019-01-14T13:20:42Z",
      "updated_at": "2019-01-14T13:43:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Excellent points, @vexx32 - I'm hoping that a decision on a consistent cross-cmdlet approach will come as a result of the discussion in #4242.",
      "created_at": "2019-01-14T13:29:16Z",
      "updated_at": "2019-01-14T13:29:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I think it would be better if there were some way via attribute or some such to denote a parameter as Pipeline-Only such that it wouldn't appear in tab completions or be usable for input directly\r\n\r\nJust some thoughts: It's useful to use `-InputObject` directly in case that you already have the collection object handy and want to avoid the unnecessary pipeline binding overhead.\r\nIn the case of calling a cmdlet in C#, disallowing the use of `-InputObject` directly would mean that you have to pass in the collection object by `powershell.Invoke(myCollection)`",
      "created_at": "2019-01-23T21:42:33Z",
      "updated_at": "2019-01-23T21:42:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw: The performance argument is also mentioned in https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453831509 and, at the risk of talking myself hoarse, can we please continue the conversation there (#4242)? (I also encourage you to clarify your C# argument - _there_.)",
      "created_at": "2019-01-24T01:19:03Z",
      "updated_at": "2019-01-24T01:19:27Z"
    }
  ],
  "created_at": "2019-01-09T06:54:19Z",
  "number": 8610,
  "state": "closed",
  "title": "`Join-String -InputObject 1,2,3` result is not equal to `1,2,3 | Join-String` result.",
  "updated_at": "2019-01-25T03:03:20Z"
}