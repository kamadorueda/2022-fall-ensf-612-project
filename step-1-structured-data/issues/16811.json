{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16811",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe previous regex to remove ANSI escape sequences was too broad and would remove content that appeared to be ANSI but was not.  The change is to have specific regex targeting colors/decoration and CSI ANSI escape sequences (generated by PSReadLine) which are ones used by PS7 and PSReadLine currently.\r\n\r\nHyperlink isn't supported here as no default formatting emits it and the way the escape sequence works it can be too broad.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/16730\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-03-25T00:44:36Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Re-assign PR to security WG.",
      "created_at": "2022-01-27T04:20:51Z",
      "updated_at": "2022-01-27T04:20:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Sorry if I already said this but I feel we fall in unlimited problems and fixes. I would personally roll back this kind of coloring (it's a far cry from the spirit of PowerShell) and invest in Formatting system enhancement or better in  something like PSMore.",
      "created_at": "2022-01-27T04:30:44Z",
      "updated_at": "2022-01-27T04:30:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov PSMore is solving a different problem than PSStyle.  The two are not mutually exclusive.  ANSI/VT escape sequences are the industry standard way of emitting text decoration and works across ssh, xterm.js, Windows, Linux, macOS, native commands, etc... For PSMore to emit color, it will have to resort to ANSI/VT escape sequences anyways and we would still have this situation.  Even if table/list formats don't use ANSI/VT, arbitrary scripts and native commands can and do emit ANSI/VT.",
      "created_at": "2022-01-27T04:41:12Z",
      "updated_at": "2022-01-27T04:41:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> ANSI/VT escape sequences are the industry standard\r\n\r\nI don't say about rejecting ESs - they are _only_ implementation details. _If we will continue on the way we **obviously** fall in re-implementing whole Windows Terminal in PowerShell!_ - there is no other way to ensure full processing of ESs in all scenarios.\r\n\r\n> arbitrary **scripts** and native commands can and do emit ANSI/VT.\r\n\r\nThis is my main frustration because we are provoking users to use ESs when the spirit and idea of PowerShell has always been to do **magical** things.\r\n\r\n> PSMore is solving a different problem than PSStyle.\r\n\r\nI mentioned PSMore as a way to develop without breaking the existing Formatting System.\r\nThis would allow us to find right design and implement it step by step.\r\nI'm sure we need (1) to delegate the details to the console and the terminal and (2) use higher abstractions in the formatting system and even more so in the PowerShell language itself.\r\n\r\nSorry for noisy :-)",
      "created_at": "2022-01-27T05:12:32Z",
      "updated_at": "2022-01-27T05:12:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I fully agree that the current formatting system needs to be revamped, but again, that's independent of ESC seqs.  We can always adopt something like spectre.console and have something like \"{red}hello {blue}there\", although the benefit of \"$($psstyle.foreground.red)hello\" is you get tab completion.  Anyways, I think this discussion is separate from this PR.",
      "created_at": "2022-01-27T06:13:19Z",
      "updated_at": "2022-01-27T06:13:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT All you say is about **string** formatting. My proposal is to follow PowerShell spirit and invest in **object** formatting first.\r\nString formatting fundamentally leads us to re-implement Windows Terminal in PowerShell.\r\nObject-based formatting works well for years and could be improved for modern terminals (not easy work!). (As part of this problem I proposed Native cmdlet class #13428 which could universally collect all meta data about native command and allow PowerShell engine reliable communicate with the native app (as with regular cmdlet) including smart re-incoding input and output.)",
      "created_at": "2022-01-27T06:35:40Z",
      "updated_at": "2022-01-27T06:35:40Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `8` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +5 -3\r\nPercentile : 3.2%\r\n\r\nTotal files changed: 3\r\n\r\nChange summary by file extension:\r\n.cs : +4 -2\r\n.ps1 : +1 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY4MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY4MTEiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY4MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-02-02T00:00:54Z",
      "updated_at": "2022-02-02T00:00:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-02-09T02:00:41Z",
      "updated_at": "2022-02-09T02:00:41Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-maintainers  Let's get at least one preview release before we approve backport",
      "created_at": "2022-04-26T19:50:15Z",
      "updated_at": "2022-04-26T19:50:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Just noticed this PR changed the default `OutputRendering` back to `Host`. Is that intentional? I thought we changed it to `ANSI` for a security issue. Is that security issue resolved after using the new regex for detecting ANSI sequences, so we can change back to `Host`? /cc @TravisEz13 ",
      "created_at": "2022-05-04T17:22:49Z",
      "updated_at": "2022-05-04T17:22:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.4)\n",
      "created_at": "2022-05-23T16:21:23Z",
      "updated_at": "2022-05-23T16:21:23Z"
    },
    {
      "author": "ImportTaste",
      "author_association": "NONE",
      "body": "> @SteveL-MSFT Just noticed this PR changed the default `OutputRendering` back to `Host`. Is that intentional? I thought we changed it to `ANSI` for a security issue. Is that security issue resolved after using the new regex for detecting ANSI sequences, so we can change back to `Host`? /cc @TravisEz13\r\n\r\ndaxian, were you able to track down someone to answer this question for you, in another PR/Issue/etc perhaps? I'm curious to the answer myself.",
      "created_at": "2022-05-23T17:24:18Z",
      "updated_at": "2022-05-23T17:24:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "My chat with @TravisEz13 suggested this is an intentional change, and `Host` will be used as the default unless another vulnerability is found with the regex.",
      "created_at": "2022-05-23T17:51:20Z",
      "updated_at": "2022-05-23T17:51:20Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-maintainers should discuss whether this should be backported. ",
      "created_at": "2022-05-24T20:47:17Z",
      "updated_at": "2022-05-24T20:47:17Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Maintainers discussed this and have decided to wait until the committee has given a decision on https://github.com/PowerShell/PowerShell/pull/17455 \r\nPotentially backport both the changes to 7.2.x",
      "created_at": "2022-06-07T19:46:36Z",
      "updated_at": "2022-06-07T19:46:36Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.6",
      "created_at": "2022-08-02T20:01:55Z",
      "updated_at": "2022-08-02T20:01:55Z"
    },
    {
      "author": "github-actions[bot]",
      "author_association": "CONTRIBUTOR",
      "body": "Started backporting to release/v7.2.6: https://github.com/PowerShell/PowerShell/actions/runs/2784876485\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">Update regex used to remove ANSI escape sequences to be more specific to decoration and hyperlinks \u00b7 PowerShell/PowerShell@0e4d2e4</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-08-02T20:02:21Z",
      "updated_at": "2022-08-02T20:02:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.6)\n",
      "created_at": "2022-08-11T22:19:01Z",
      "updated_at": "2022-08-11T22:19:01Z"
    }
  ],
  "created_at": "2022-01-27T01:44:45Z",
  "number": 16811,
  "state": "closed",
  "title": "Update regex used to remove ANSI escape sequences to be more specific to decoration and hyperlinks",
  "updated_at": "2022-08-11T22:19:02Z"
}