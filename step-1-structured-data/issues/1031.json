{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1031",
  "author": "andschwa",
  "body": "This issue tracks the first step of building Nano sources with .NET CLI out of GitHub. We are identifying what libraries PowerShell Core from repo does not _yet_ build that Nano _does_ build.\n\nThis will be a list of all PowerShell assemblies, checked indicates it is built for PowerShell repo:\n- [x] `Microsoft.PowerShell.Commands.Management`\n- [x] `Microsoft.PowerShell.Commands.Utility`\n- [x] `Microsoft.PowerShell.ConsoleHost`\n- [x] `Microsoft.PowerShell.CoreCLR.AssemblyLoadContext`\n- [x] `Microsoft.PowerShell.CoreCLR.Eventing`\n- [x] `Microsoft.PowerShell.PSReadLine`\n- [x] `Microsoft.PowerShell.Security`\n- [x] `System.Management.Automation`\n",
  "closed_at": "2016-07-02T18:55:53Z",
  "comments": [
    {
      "author": "chunqingchen",
      "author_association": "CONTRIBUTOR",
      "body": "List of binaries/assemblies for Nano PowerShell:\n- [ ] ~~Microsoft.Management.Infrastructure.CimCmdlets.dll~~ (need nuget package)\n- [ ] ~~Microsoft.Management.Infrastructure.Native.dll~~ (need nuget package)\n- [ ] ~~Microsoft.Management.Infrastructure.Native.Unmanaged.dll~~ (need nuget package)\n- [ ] ~~Microsoft.Management.Infrastructure.dll~~  (need nuget package)\n- [ ] ~~Microsoft.WSMan.Management.dll~~ (need nuget package)\n- [ ] ~~Microsoft.WSMan.Runtime.dll~~ (need nuget package)\n- [x] Microsoft.PowerShell.Commands.Diagnostics.dll @chunqingchen\n- [x] Microsoft.PowerShell.Commands.Management.dll\n- [x] Microsoft.PowerShell.Commands.Utility.dll\n- [x] Microsoft.PowerShell.ConsoleHost.dll\n- [x] Microsoft.PowerShell.CoreCLR.Eventing.dll\n- [x] Microsoft.PowerShell.Security.dll\n- [x] System.Management.Automation.dll\n- [x] Microsoft.PowerShell.CoreCLR.AssemblyLoadContext.dll\n- [x] Microsoft.PowerShell.LocalAccounts.dll @daxian-dbw \n- [x] ~~Nano powershell.exe (? want the native Nano powershell.exe ?)~~ (not needed)\n- [ ] PSEvents.dll  @daxian-dbw \n- [x] ~~pwrshsip.dll~~\n- [x] pwrshplugin.dll (WinRM entry point) #1155 \n\nList of module manifest/script module files for Nano PowerShell:\n- [x] Microsoft.PowerShell.Archive (? it's now released as a different repository ?)\n  - Microsoft.PowerShell.Archive.psd1\n  - Microsoft.PowerShell.Archive.psm1\n  - ArchiveResources.psd1\n- [x] Microsoft.PowerShell.Diagnostics\n  - Microsoft.PowerShell.Diagnostics.psd1\n- [x] Microsoft.PowerShell.Host\n  - Microsoft.PowerShell.Host.psd1\n- [x] Microsoft.PowerShell.LocalAccounts\n  - LocalAccounts.format.ps1xml\n  - Microsoft.PowerShell.LocalAccounts.psd1\n- [x] Microsoft.PowerShell.Management\n  - Microsoft.PowerShell.Management.psd1\n- [x] Microsoft.PowerShell.Security\n  - Microsoft.PowerShell.Security.psd1\n- [x] Microsoft.PowerShell.Utility\n  - Microsoft.PowerShell.Utility.psd1\n  - Microsoft.PowerShell.Utility.psm1\n- [x] Microsoft.WSMan.Management\n  - Microsoft.WSMan.Management.psd1\n- [x] CimCmdlets\n  - CimCmdlets.psd1\n",
      "created_at": "2016-05-25T20:11:27Z",
      "updated_at": "2016-06-20T21:05:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I believe @dantraMSFT is working on getting CimCmdlets going. The MMI/N/U are all packaged and under a different scope. Same goes for WSMan. @paulcallen do you know the plan for WSMan stuff?\n\nLooks like `Microsoft.PowerShell.Commands.Diagnostics` is all we're really missing from the PowerShell namespace. I'm not sure about `localaccounts.dll`, doesn't appear to be in the PowerShell namespace, but this is related to #952. Same goes for `PSEvents.dll` (is this separate from Eventing?) and `pwrshsip.dll`.\n",
      "created_at": "2016-05-25T20:18:22Z",
      "updated_at": "2016-05-25T20:18:22Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors could use your input here. I'll get an issue filed for `Diagnostics`. Should be pretty easy to map over and build for Windows (not sure about porting to Linux).\n",
      "created_at": "2016-05-25T20:22:11Z",
      "updated_at": "2016-05-25T20:22:11Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors needs an issue tracking WSMan module.\n",
      "created_at": "2016-05-26T21:17:54Z",
      "updated_at": "2016-05-26T21:17:54Z"
    },
    {
      "author": "raghushantha",
      "author_association": "MEMBER",
      "body": "WSMan PS Provider is in admin\\wmi\\wmx\\cmdlets\\Management\n",
      "created_at": "2016-05-26T21:18:47Z",
      "updated_at": "2016-05-26T21:18:47Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "~~@andschwa needs an issue tracking pulling in `Microsoft.PowerShell.LocalAccounts` into PowerShell Core.~~\n\nDone in #952 (thanks @mirichmo).\n",
      "created_at": "2016-05-26T21:19:03Z",
      "updated_at": "2016-08-17T07:06:45Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw needs to investigate `PSEvents.dll`\n",
      "created_at": "2016-05-26T21:22:20Z",
      "updated_at": "2016-05-26T21:22:20Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> Microsoft.WSMan.Management\n\nCurrently it's a our home-made nuget package for Full PS build.\n\nMe and @SteveL-MSFT think it falls in the same bucket as MMI (from open-sourcing the code prospective)\n",
      "created_at": "2016-05-26T21:23:28Z",
      "updated_at": "2016-05-26T21:23:28Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello Create an issue for potentially porting `pwrshsip.dll`. \n",
      "created_at": "2016-05-26T21:42:16Z",
      "updated_at": "2016-05-26T21:43:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "PSEvents.dll is resource dll, which is generated by building the manifest file admin\\monad\\nttargets\\assemblies\\logging\\ETW\\Manifests\\Microsoft-Windows-PowerShell-Instrumentation.man. \"EVENTS_MANIFEST\" and \"COUNTERS_MANIFEST\" are used in the sources file to generate resource files and resource header files from the manifest. Then the resource files and resource header files are builit into PSEvents.dll.\nUnder the hook, it seems Message Compiler (MC.exe) is used for 'EVENTS_MANIFEST' \n\n> https://msdn.microsoft.com/en-us/library/windows/desktop/aa385638(v=vs.85).aspx\n\nand ctrpp.exe is used for 'COUNTERS_MANIFEST'\n\n> https://msdn.microsoft.com/en-us/library/windows/desktop/aa372128(v=vs.85).aspx\n",
      "created_at": "2016-05-26T22:30:31Z",
      "updated_at": "2016-05-26T22:30:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "PSEvents.dll is a tricky one ...\n\n@chunqingchen could you please update the assembly list based on my following comments?\n1. Please remove the \".ni\" from the assembly names to avoid confusion.\n2. Remove 'System.Reflection.Metadata.dll', because it's CoreCLR binary.\n3. Rename \"localaccounts.dll\" to be \"Microsoft.PowerShell.LocalAccounts.dll\"\n\nBTW, \"powershell.exe\" is **checked** in the list, what does it mean?\n",
      "created_at": "2016-05-26T22:31:16Z",
      "updated_at": "2016-05-26T22:42:05Z"
    },
    {
      "author": "chunqingchen",
      "author_association": "CONTRIBUTOR",
      "body": "@vors We are start to build assemblies under wmi foder. to begin we need \n..\\admin\\wmi\\Events\\GetEvent\nto build microsoft.powershell.commands.diagnostics.dll\n",
      "created_at": "2016-06-03T00:31:04Z",
      "updated_at": "2016-06-03T00:31:04Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw So if it's just a resource library, that shouldn't be too bad; we just need to add it to the resgen script in the build module and ensure that the appropriate library references the generated C# bindings plus the resources correctly.\n\nAs far as native images go, we're simply waiting on tooling support.\n\nI checked `System.Reflection.Metadata.dll` since of course we have it :smile: \n\nAs far as `powershell.exe` being checked: I checked it because as a dependency, it is satisfied. We do _not_ use PowerShell's native host, but we have a native host provided by .NET and so have a `powershell.exe`.\n",
      "created_at": "2016-06-07T17:53:17Z",
      "updated_at": "2016-06-07T17:53:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I have enabled building of the following three dlls in my local repository. I will go through the workflow docs, and figure out the process to get this in Github.\n- [x] Microsoft.WSMan.Management\n- [x] Microsoft.WSMan.Runtime\n- [x] Microsoft.PowerShell.LocalAccounts\n\nI also found that dotnet-cli supports excluding certain .cs files for a specific target framework, so we don't need to add !CORECLR guards for .cs files that are not included in PowerShell Core.\n\n> ```\n> \"frameworks\": {\n>     \"netcoreapp1.0\": {\n>         \"imports\": \"dnxcore50\",\n>         \"buildOptions\": {\n>             \"compile\": {\n>                 \"excludeFiles\": [ \"class1.cs\" ] \n>             }\n>         }\n> ```\n\ncc: @andschwa @mirichmo @vors @lzybkr \n",
      "created_at": "2016-06-13T18:29:52Z",
      "updated_at": "2016-08-17T07:06:06Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I updated [list](https://github.com/PowerShell/PowerShell/issues/1031#issuecomment-221692456) with ~~dlls for which we need a good nuget package~~, instead of building from sources.\n",
      "created_at": "2016-06-14T01:12:35Z",
      "updated_at": "2016-06-14T01:12:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "#1105 is opened to track the nuget package work.\n",
      "created_at": "2016-06-14T17:26:03Z",
      "updated_at": "2016-06-14T17:26:03Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "We have only 1 native resource dll left PSEvents.dll\n",
      "created_at": "2016-06-20T21:08:55Z",
      "updated_at": "2016-06-20T21:08:55Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "The last one is tracked in #1189\n",
      "created_at": "2016-07-02T18:55:53Z",
      "updated_at": "2016-07-02T18:55:53Z"
    }
  ],
  "created_at": "2016-05-24T20:46:07Z",
  "number": 1031,
  "state": "closed",
  "title": "Identify difference of library sets between Nano and PowerShell Core from repo",
  "updated_at": "2016-09-20T18:27:31Z"
}