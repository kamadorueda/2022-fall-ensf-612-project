{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7144",
  "author": "alx9r",
  "body": "The following code has a race between `try{}` and `.Stop()`:\r\n\r\n```PowerShell\r\n1..60 | % {\r\n    $h = [ordered]@{\r\n        'Delay(ms)' = $_\r\n        EnteredScript = ''\r\n        EnteredTry    = ''\r\n        Finally       = ''\r\n        Completing    = ''\r\n    }\r\n\r\n    $powershell = [powershell]::Create().AddScript({\r\n        param($h)\r\n        $h.EnteredScript = $true\r\n        sleep -Milliseconds 10\r\n        try\r\n        {\r\n            $h.EnteredTry = $true\r\n            sleep -Milliseconds 30\r\n        }\r\n        finally\r\n        {\r\n            $h.Finally = $true\r\n        }\r\n        $h.Completing = $true\r\n    }).AddParameter('h',$h)\r\n\r\n    $invocation = $powershell.BeginInvoke()\r\n    sleep -Milliseconds $_\r\n    $powershell.Stop()\r\n\r\n    [pscustomobject]$h\r\n} |\r\n    Format-Table\r\n```\r\n\r\nI've found that `finally{}` seems to always run once the `try{}` block is entered.  Is this just fortunate timing?  Or is this behavior that I can rely on for all timing?\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.688\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.688\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-06-23T13:43:15Z",
  "comments": [
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "It should always try to execute the finally block.  Even if you CTRL-C and stop the script, it still tries to execute the finally block.  However, if the finally block tries to dump something to the pipeline, it won't be displayed if the script was stopped.\r\n\r\nIf you run the following and break it before the sleep time ends, $t is still updated to 1, but the string won't display.\r\n```$t=0; try { sleep 60 } catch {'oops'} finally {$t=1; 'not displayed if stopped early'}```",
      "created_at": "2018-06-22T20:35:03Z",
      "updated_at": "2018-06-22T20:35:03Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "We had a number of discussions back in the V3 time frame around whether the `finally` block should run if `.Stop()` was called or not. Some people felt that `.Stop()` should stop all execution including `finally` blocks since a `finally` block could run for some time and how would you stop that. But in the end, we decided that `finally` blocks should run after `Stop()` because the canonical use-case for `finally` is to clean up after the code in the `try` block. So it's by design that in-scope `finally` blocks run after `.Stop()`.",
      "created_at": "2018-06-22T23:28:35Z",
      "updated_at": "2018-06-22T23:28:35Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Thanks  @BrucePay.",
      "created_at": "2018-06-23T13:43:15Z",
      "updated_at": "2018-06-23T13:43:15Z"
    }
  ],
  "created_at": "2018-06-22T15:59:50Z",
  "number": 7144,
  "state": "closed",
  "title": "Does a finally{} block reliably run on PowerShell.Stop() when its try{} block has been entered?",
  "updated_at": "2018-06-29T15:06:47Z"
}