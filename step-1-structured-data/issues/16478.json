{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16478",
  "author": "rkitover",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThis is the recommended method of setting and removing the `hidden` attribute on a file, and in the normal case this works correctly, for example:\r\n\r\n```console\r\nv ~\r\nrkitover@woobie > ni foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi foo).attributes += 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a-h-          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          11/16/2021  2:32 PM              0 foo\r\n```\r\n\r\nNow observe what happens when the attribute modification operation is repeated:\r\n\r\n```console\r\nv ~\r\nrkitover@woobie > gi foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi foo).attributes += 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a-h-          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes += 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a--s          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes += 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a-hs          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes += 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          11/16/2021  2:32 PM              0 foo\r\n```\r\n\r\nThe behavior of the `-=` operator is even worse:\r\n\r\n```console\r\nv ~\r\nrkitover@woobie > gi foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n---hs          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n----s          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n---h-          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-----          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a-hs          11/16/2021  2:32 PM              0 foo\r\n\r\nv ~\r\nrkitover@woobie > (gi -fo foo).attributes -= 'hidden'\r\nv ~\r\nrkitover@woobie > gi -fo foo\r\n\r\n    Directory: C:\\Users\\rkitover\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a--s          11/16/2021  2:32 PM              0 foo\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect that adding the attribute would add it if it doesn't exist, and either do nothing or throw an error if it already exists.\r\n\r\nLikewise, I expect that removing the attribute would remove it if it exists, and either do nothing or throw an error if it doesn't exist.\r\n\r\n### Actual behavior\r\n\r\nIt seems to be flipping bits on the file metadata randomly.\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.22499\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-11-20T00:00:40Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "`System.IO.FileAttributes` is an enum type:\r\n```\r\n > [enum]::GetValues([io.FileAttributes]) | % { '{0,-17}: {1}' -f $_, [int]$_ }\r\nReadOnly         : 1\r\nHidden           : 2\r\nSystem           : 4\r\nDirectory        : 16\r\nArchive          : 32\r\nDevice           : 64\r\nNormal           : 128\r\nTemporary        : 256\r\nSparseFile       : 512\r\nReparsePoint     : 1024\r\nCompressed       : 2048\r\nOffline          : 4096\r\nNotContentIndexed: 8192\r\nEncrypted        : 16384\r\nIntegrityStream  : 32768\r\nNoScrubData      : 131072\r\n```\r\n2 + 2 = 4 (system)",
      "created_at": "2021-11-16T16:02:30Z",
      "updated_at": "2021-11-16T16:02:30Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Adding to the above you are not meant to add or subtract flag enums together as that causes invalid values. While the raw value is an integer which is why `+=` and `-=` just adds or subtracts the value of that flag it won't result in the same value. You should use `-bor` to add flags and `-band -bnot` to remove flags;\r\n\r\n```powershell\r\n[IO.FileAttributes]::Directory -bor [IO.FileAttributes]::Hidden\r\n\r\n[IO.FileAttributes]\"Directory, Hidden\" -band -bnot [IO.FileAttributes]::Hidden\r\n```\r\n\r\nIn these examples `Hidden` is equal to `0x2` and `Directory` is equal to `0x10`\r\n\r\n```\r\n# Hex == Binary == Decimal\r\n0x02 == 0000 0010 == 2\r\n0x10 == 0001 0000 == 16\r\n\r\n# Bitwise OR will set bits that are present in both the LHS and RHS\r\n0001 0000 -bor 0000 0010 == 0001 0010 == 0x12 == 18\r\n\r\n# Bitwise AND will set bits only present in both sides\r\n# Bitwise NOT will reverse the bits of its RHS\r\n# Combine both together and you can remove a flag\r\n-bnot 0000 0010 == 1111 1101 == 0xFFFFFFFD == -3\r\n0001 0010 -band 1111 1101 == 0001 0000 == 0x10 == 16\r\n```\r\n\r\nThe beauty of bitwise operations is you can run them multiple times as they operate on the bits set rather than addition or subtraction which always adds or removes the value.",
      "created_at": "2021-11-16T19:05:19Z",
      "updated_at": "2021-11-16T21:13:15Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I'm sorry, but from my perspective as a user and casual script writer, if this simple operation corrupts the file system that is definitely wrong and definitely a bug.",
      "created_at": "2021-11-16T20:49:36Z",
      "updated_at": "2021-11-16T20:49:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "From a perspective of a casual/new to PowerShell/Programming script writer I can somewhat sympathize but using bitwise operations is how this stuff is done. You can't really use general addition/subtraction on these values and while it works in some cases it will most likely cause problems.\r\n\r\nTo me this is a feature request to have `+=` and `-=` act like the bitwise operators for `[Flags]` based enums which I'm unsure whether PowerShell could or could not do. It's not a bug as it's working as intended but it might be a good idea to implement such a functionality to help people new to this concept going forward.",
      "created_at": "2021-11-16T21:12:47Z",
      "updated_at": "2021-11-16T21:14:00Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "In this particular case, how would you even know that any of this involves bits, and why would you care? The interface is adding a string attribute to a file. And since there is no modifying operator for `-bor`, the \"correct\" way to do this would be something like this:\r\n\r\n```powershell\r\n$attr = (gi -fo foo).attributes; (gi -fo foo).attributes = $attr -bor 'hidden';\r\n```\r\n\r\nwhich is extremely tedious for what should be the extremely simple operation of making a file hidden.\r\n\r\nThere is probably a nicer way to do this that I don't know, but it will probably also suck.\r\n\r\nAlso I have to say that I'm probably not the only person offended by the quick marking of everything in this project as a \"question\" even when the answer is far from adequate.",
      "created_at": "2021-11-16T21:33:39Z",
      "updated_at": "2021-11-16T21:33:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> The interface is adding a string attribute to a file.\r\n\r\nIt's not really a string, that's sort of a case of PowerShell already making it a bit easier behind the scenes.  The string is converted to a call like `[IO.FileAttributes]::Parse('hidden')` by the binder.\r\n \r\n> which is extremely tedious for what should be the extremely simple operation of making a file hidden.\r\n\r\nIt is a simple operation, but it doesn't come up often. It'd be nice to have a `-bor` and `-band` assignment operator but outside of this it probably wouldn't get a lot of use.",
      "created_at": "2021-11-16T21:55:44Z",
      "updated_at": "2021-11-16T21:55:44Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> In this particular case, how would you even know that any of this involves bits, and why would you care? \r\n\r\nWhen it's an enum with flags (an enum with multiple values) then it will use bits. While I know `Attributes` itself is an enum this because I've dealt with it before you can determine this dynamically\r\n\r\n```powershell\r\n> Get-Item $pwd.Path | Get-Member -Name Attributes\r\n\r\n   TypeName: System.IO.DirectoryInfo\r\n\r\nName       MemberType Definition\r\n----       ---------- ----------\r\nAttributes Property   System.IO.FileAttributes Attributes {get;set;}\r\n```\r\n\r\nI can see it's not a string and by deduction based on the purpose I can usually come to the conclusion it's an enum. When in doubt a quick check online on [System.IO.FileAttributes](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-5.0) type or doing `$obj.Attributes -is [Enum]` tells me definitively.\r\n\r\n> And since there is no modifying operator for -bor, the \"correct\" way to do this would be something like this:\r\n\r\nIn your particular use case you need to pass it by type rather than just the string\r\n\r\n```powershell\r\n$file = Get-Item -Path foo -Force\r\n$file.Attributes = $file.Attributes -bor [IO.FileAttributes]\"Hidden\"\r\n```\r\n\r\nThis is because bitwise operations work on numerical values and the operator doesn't know how to cast the string to the possible enum on the LHS. I say possible here because it's perfectly valid to had both the LHS and RHS as just integer fields and not an enum.\r\n\r\nThe only thing I find that sucks is that you need to do `$obj.Attributes = $obj.Attributes -bor` rather than the equivalent to `+=` (in bitwise terms other languages use `|=` to bitwise OR and set at the same time. For example in C# you can do the following to replicate adding and removing a flag (what `-bor` and `-band -bnot` does) to an existing value:\r\n\r\n```csharp\r\nfile.Attributes |= FileAttributes.Hidden\r\nfile.Attributes &= ~FileAttributes.Hidden\r\n```\r\nBut in PowerShell this isn't possible today which can be annoying.\r\n\r\n> Also I have to say that I'm probably not the only person offended by the quick marking of everything in this project as a \"question\" even when the answer is far from adequate.\r\n\r\nLet me preface the following by saying I am no way affiliated with Microsoft or the PowerShell team and am just a community user of PowerShell who tries to help out where I can.\r\n\r\nFirst off I am sorry that this your experience and can totally understand how closing issue reports quickly can bring across a negative experience. On the flip side you have to understand that this repository is very large with a lot of issues being reported and thus is is very important to try and filter out what are bugs and what might just be misunderstandings or general questions. \r\n\r\nNow this comes to the tricky question of what constitutes a bug and while you may think it is a bug because it doesn't do what you expect the truth of the matter is this is the expected behaviour based on the code shared and there is a proper method to achieve what you want. Personally I would think this is a feature request but even then I am doubtful it would be implemented as this could break existing code that might rely on the current `+=` and `-=` behaviour. PowerShell as a whole is mostly adverse to making breaking changes (5 -> 6 jump being abnormal). An alternative is having 2 methods `AddFlag` and `RemoveFlag` that could do this but you still need the assignment on the LHS so you only really gain a slightly simpler interface.\r\n\r\nI apologise for being blunt but in the end this repo has 3000+ issues and I think getting an actual reponse, even if it's a no or working as intended, is better than receiving nothing at all or having it just left to stagnate over time with no action at all.",
      "created_at": "2021-11-16T21:57:29Z",
      "updated_at": "2021-11-16T21:59:44Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "> I apologise for being blunt but in the end this repo has 3000+ issues and I think getting an actual reponse, even if it's a no or working as intended, is better than receiving nothing at all or having it just left to stagnate over time with no action at all.\r\n\r\nI'm sorry but I don't agree with your assessment here of this interface as \"working as intended\" for all the reasons I already mentioned, and I'm sure I'm not the only one. This is of course very subjective, intended by whom for what?\r\n\r\nWhether the classification of the issue is a bug report or a feature request is merely a question of labeling.\r\n\r\nWhat I find offensive is the implication that I am doing something wrong when I am pointing out an actual usability or design flaw.\r\n\r\nHere is another issue that I opened recently that was also marked as a question:\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/16345\r\n.\r\n\r\nI got some very useful suggestions and information, however, none of them resolve the actual issues I reported.\r\n\r\nIf the issue was closed as say, WILLNOTFIX, that would be more accurate and less offensive.\r\n\r\nI like PowerShell a lot, I care about this project and I have a PR in it, and will probably write more.\r\n\r\nI have also been working on this guide the past few years which has its own repo now, and has been well received at least by some people:\r\n\r\nhttps://github.com/rkitover/windows-dev-guide\n\n<blockquote><img src=\"https://opengraph.githubassets.com/59555d6b0d4e669cb1f09be5d34daa0d7e937745d701c355f504aadb68d56b0a/rkitover/windows-dev-guide\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/rkitover/windows-dev-guide\">GitHub - rkitover/windows-dev-guide: Native Windows Development Environment Setup Guide for Linux Users.</a></strong></div><div>Native Windows Development Environment Setup Guide for Linux Users. - GitHub - rkitover/windows-dev-guide: Native Windows Development Environment Setup Guide for Linux Users.</div></blockquote>",
      "created_at": "2021-11-16T22:38:55Z",
      "updated_at": "2021-11-16T22:38:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I like PowerShell a lot, I care about this project and I have a PR in it, and will probably write more.\r\n\r\nIn that case, you should not be offended by this `question` label. It is placed not _on you_ but on the issue to mark the beginning of the workflow. You should be more concerned about whether the blue label is the right one, which means which working group will consider the issue. Have you read about workgroups on MSFT team blog?\r\nThe purpose of working groups is to analyze issues and PRs _in depth_.\r\nRight now these groups are too small to work actively. Joining these groups is welcome - this is something fans of this project could do to develop the project more rapidly.",
      "created_at": "2021-11-17T04:43:52Z",
      "updated_at": "2021-11-17T04:43:52Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> This is the recommended method of setting and removing the `hidden` attribute on a file\r\n\r\nWhere is this method recommended?\r\n\r\nI agree that the way PowerShell presents the `FileAttributes` enum makes it easy to get the impression that `$File.Attributes += <attribute>` is an idempotent operation.  C# doesn't allow explicitly overloading `+=` or `-=`; I haven't checked yet whether PowerShell follows suit.  Since modifying the behavior of those operators would be a breaking change in any case, how about adding `AddAttribute` and `RemoveAttribute` script methods to `FileInfo` objects?",
      "created_at": "2021-11-17T07:01:18Z",
      "updated_at": "2021-11-17T07:01:18Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "https://devblogs.microsoft.com/scripting/use-a-powershell-cmdlet-to-work-with-file-attributes/\r\nEd Wilson 2011\r\nand the enum is detailed in \r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-5.0\r\n\r\nI agree that for a normal Powershell user, things are not always as easy/simple/intuitive as they could be.\r\nThe fact the repro has 3k open issues says they don't have the staff, rather than the will, to improve things.\r\nBut for this one I'm thinking they'll be saying Won't Fix.\r\n",
      "created_at": "2021-11-17T07:58:32Z",
      "updated_at": "2021-11-17T07:58:32Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I understand that this is your workflow, but I don't agree with it and would not do things this way, for reasons above.\r\n\r\nRegardless, I will continue to do PowerShell related work.\r\n\r\nAs for this particular issue, making `+=` / `-=` overloadable on specific types would not be a breaking change. And\r\n\r\n```powershell\r\n$attributes += 'attribute'\r\n```\r\n\r\nhas the semantic meaning of adding an attribute, the implementation is irrelevant. If such an interface corrupts your filesystem, that is very bad.\r\n\r\nAs for the problem of making files hidden or not hidden on Windows, the best solution right now is:\r\n\r\n```powershell\r\nattrib +h file\r\nattrib -h file\r\n```\r\n.\r\n\r\nLinux does not have hidden files, so portability is not an issue.",
      "created_at": "2021-11-17T09:14:47Z",
      "updated_at": "2021-11-17T09:14:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I understand that this is your workflow, but I don't agree with it and would not do things this way, for reasons above.\r\n> \r\n> Regardless, I will continue to do PowerShell related work.\r\n\r\nIt is _our_ workflow \ud83d\ude38 . You can discuss it (in GH Discussions) with community and MSFT team and make the process better.\r\nAs only WGs will work actively every day by day I will haven't to do pre-classification :-)",
      "created_at": "2021-11-17T14:26:39Z",
      "updated_at": "2021-11-17T14:26:39Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov And I appreciate all of your work for this project, even if I see this process as flawed from my perspective.",
      "created_at": "2021-11-17T14:42:42Z",
      "updated_at": "2021-11-17T14:42:42Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "@lukeb1961, was this\r\n> https://devblogs.microsoft.com/scripting/use-a-powershell-cmdlet-to-work-with-file-attributes/ Ed Wilson 2011 and the enum is detailed in https://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-5.0\r\n\r\nin reply to me asking where `+=` and `-=` operations were recommended for `FileInfo.Attributes`?  Both of those sources discuss performing bitwise operations.\r\n\r\n@rkitover,\r\n> As for this particular issue, making `+=` / `-=` overloadable on specific types would not be a breaking change. And\r\n> \r\n> ```powershell\r\n> $attributes += 'attribute'\r\n> ```\r\n> \r\n> has the semantic meaning of adding an attribute, the implementation is irrelevant. If such an interface corrupts your filesystem, that is very bad.\r\n\r\nI agree that the current behavior of `+=`/`-=` isn't exactly surprise-minimizing.  I also think it's pretty unlikely that anyone is relying on the current behavior for `FileAttributes` and maybe for flag enums in general\u2014probably [Bucket 3](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area).  I'm going to look into the possibility/palatability of overloading the `+` and `-` operators for `FileAttributes`, which would implicitly overload `+=` and `-=`.  If that turns out not to be an option (technically or otherwise), I'm going to submit a PR to add `AddAttribute` and `RemoveAttribute` script methods to `FileInfo` to provide a somewhat more apparent way to idempotently modify `FileInfo.Attributes`.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/wp-content/uploads/sites/29/2020/10/dr_scripto.jpg\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/10/Microsoft-Favicon.png\" height=\"14\"> Scripting Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/scripting/use-a-powershell-cmdlet-to-work-with-file-attributes/\">Use a PowerShell Cmdlet to Work with File Attributes</a></strong></div><div>\u00a0 Summary: Learn how to use the Windows PowerShell cmdlet Set-ItemProperty to work with file attributes. Hey, Scripting Guy! I often find myself working with file attributes. Our backup program reads the archive flag, and our users are always creating read-only copies of their spreadsheets.</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes\">FileAttributes Enum (System.IO)</a></strong></div><div>Provides attributes for files and directories. </div></blockquote>",
      "created_at": "2021-11-17T16:44:16Z",
      "updated_at": "2021-11-17T16:44:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@dwtaber Before doing all the work, I suggest you to first open an issue to describe what you want to do and see if that's blessed by the corresponding working group. Just don't want you to waste too much time in case it's rejected.",
      "created_at": "2021-11-17T18:00:49Z",
      "updated_at": "2021-11-17T18:00:49Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> @dwtaber Before doing all the work, I suggest you to first open an issue to describe what you want to do and see if that's blessed by the corresponding working group. Just don't want you to waste too much time in case it's rejected.\r\n\r\nI appreciate that, @daxian-dbw.  For me, it's largely an excuse to explore parts of the code I might not otherwise, so it won't be wasted time either way.  That said, the script methods I mentioned above turned out to be pretty straightforward to implement; since I have code ready to go, do you still recommend that I open an issue, or should I just go ahead with a PR?\r\n",
      "created_at": "2021-11-17T18:45:54Z",
      "updated_at": "2021-11-17T18:45:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> do you still recommend that I open an issue, or should I just go ahead with a PR?\r\n\r\nYou should always start with an issue.",
      "created_at": "2021-11-17T20:04:26Z",
      "updated_at": "2021-11-17T20:04:26Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@dwtaber Thank you for looking into this.\r\n\r\n> in reply to me asking where += and -= operations were recommended for FileInfo.Attributes? Both of those sources discuss performing bitwise operations.\r\n\r\nLet me explain my motivation and reasoning here.\r\n\r\nI am not an advanced PowerShell user, I never read a book and just learned from experimentation and looking up bits of info on the internet.\r\n\r\nSo I googled \"powershell make file hidden\" and the result that came up was:\r\n\r\nhttps://social.technet.microsoft.com/Forums/en-US/33665b03-d383-41ed-a836-fd83c217b3f1/making-files-hidden-with-powershell?forum=ITCG\r\n\r\nwhich gave me this syntax.\r\n\r\nOut of curiosity, I tried using this syntax on an already hidden file and noticed the behavior I reported.\r\n\r\nNow, consider this from the perspective of a C++ programmer. I do some C++ although I'm by no means very good at it.\r\n\r\nThe operation:\r\n\r\n```powershell\r\n$attributes += 'attribute'\r\n```\r\n\r\nis **ALREADY** overloaded to take a string. No reasonable person would expect such an operation with a string on the RHS to be arithmetic addition to a bitmask. If only numeric values were allowed, this would be far more obvious.\r\n\r\nSo while it's no surprise that the code on an internet forum was wrong, it looked completely fine to me.\r\n\r\nI'm glad you see my perspective here.\n\n<blockquote><img src=\"https://i1.social.s-msft.com/Forums/GlobalResources/images/Technet/favicon.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://social.technet.microsoft.com/Forums/en-US/33665b03-d383-41ed-a836-fd83c217b3f1/making-files-hidden-with-powershell?forum=ITCG\">Making files hidden with powershell</a></strong></div></blockquote>",
      "created_at": "2021-11-18T04:50:22Z",
      "updated_at": "2021-11-18T04:50:24Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Why do not just set attributes you want? This is a one time task.\r\n```\r\n(Get-Item file -Force).Attributes = 34   # Hidden, Archive\r\n(Get-Item file -Force).Attributes = 32   # Archive\r\n```",
      "created_at": "2021-11-18T06:41:50Z",
      "updated_at": "2021-11-18T06:41:50Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry the issue here is that string values are allowed and they do not exhibit the behavior a user would expect.\r\n\r\nAs for setting a file hidden, it's far easier to just use the `attrib` command, at least with the current state of things.",
      "created_at": "2021-11-18T06:59:43Z",
      "updated_at": "2021-11-18T06:59:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @237dmitry the issue here is that string values are allowed and they do not exhibit the behavior a user would expect.\r\n\r\nIn PowerShell there is an expectation that for a binary expression, the RHS is converted implicitly to the same type as the LHS.  There's also an expectation that conversion paths are a lot more forgiving, for example an implicit conversion my call a static `Parse` method if it exists (like in the case of an enum).\r\n\r\nI can definitely agree that adding two bit flag enum values together can be very unintuitive if you don't know that's what it is doing. That said, being able to use string values as short hand for enum values is a feature that is heavily depended on. This is one of the very few instances where it's slightly problematic.",
      "created_at": "2021-11-18T13:45:43Z",
      "updated_at": "2021-11-18T13:45:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-11-20T00:00:39Z",
      "updated_at": "2021-11-20T00:00:39Z"
    }
  ],
  "created_at": "2021-11-16T14:43:43Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 16478,
  "state": "closed",
  "title": "Pathological behavior of += / -= operators with file attributes.",
  "updated_at": "2021-11-20T00:00:40Z"
}