{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5955",
  "author": "mklement0",
  "body": "<sup>Related: #5122</sup>\r\n\r\n* `Write-Output -NoEnumerate`, when given a collection, always returns a `PSObject[]` rather than a regular `object[]]` array, which is unexpected.\r\n\r\n* Additionally, this means that if a different collection type such as `[System.Collections.ArrayList]` was passed, it is _not_ preserved.\r\n  * [`Write-Output`'s documentation](https://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Utility/Write-Output.md), which currently only states, \"prevents Write-Output from enumerating output\", which **sounds like the input collection - whatever its type - is simply _passed through_** - a sensible expectation that _Windows PowerShell_ versions up to v5.1  indeed honor.\r\n\r\nI suspect this regression is a consequence of the ill-fated #2038 PR that arose out of issue #2035.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n(Write-Output -NoEnumerate 1, 2).GetType().Name\r\n(Write-Output -NoEnumerate ([System.Collections.ArrayList] (1, 2))).GetType().Name\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nObject[]\r\nArrayList\r\n```\r\n\r\nThis is how it still works in _Windows PowerShell_ v5.1\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nPSObject[]\r\nPSObject[]\r\n```\r\n\r\nAs stated, this affects PS _Core_ only.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0 on macOS 10.13.2\r\nPowerShell Core v6.0.0 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2019-03-13T08:54:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it is a regression - it is a bug.",
      "created_at": "2018-01-19T19:42:51Z",
      "updated_at": "2018-01-19T19:42:51Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "How has this been allowed to continue for this long?",
      "created_at": "2019-03-04T22:23:41Z",
      "updated_at": "2019-03-04T22:23:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul Fixing this now. After a longer-than-necessary foray into the pipeline files, it turns out that typing your parameters as `PSObject[]` forces PS to enumerate whatever collection you throw at it during the parameter binding stage. Typing the param as `PSObject` works for both singletons and collections just fine, though.",
      "created_at": "2019-03-06T06:14:33Z",
      "updated_at": "2019-03-06T06:14:33Z"
    }
  ],
  "created_at": "2018-01-19T19:32:47Z",
  "number": 5955,
  "state": "closed",
  "title": "Write-Output -NoEnumerate outputs PSObject[] rather than Object[] and generally doesn't respect the input collection type",
  "updated_at": "2019-03-13T08:58:42Z"
}