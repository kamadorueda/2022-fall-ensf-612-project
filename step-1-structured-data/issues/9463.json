{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9463",
  "author": "krystian-wojtas",
  "body": "# Posix shell\r\n\r\nPosix shells have very helpful -x cli flag. It could be also enabled inside script code with line 'set -x'. It shows commands as they are exactly executed\r\n\r\nExample shell code\r\n```\r\n% cat hello.sh\r\n#!/bin/sh\r\n\r\nset -x\r\n\r\nmsg=\"world\"\r\necho \"hello $msg\"\r\n```\r\n\r\nOutput\r\n```\r\n% ./hello.sh\r\n+ msg=world\r\n+ echo hello world\r\nhello world\r\n```\r\n\r\nIf there is something unexpected in script, then I can easily copy interesting line to another terminal and run it.\r\n\r\n# Powershell\r\n\r\nMy best finding is 'Set-PSDebug -Trace 2' function.\r\n\r\nExample powershell code\r\n```\r\n% cat hello.ps\r\n#!/usr/bin/pwsh\r\n\r\nSet-PSDebug -Trace 2;\r\n\r\n$msg=\"world\"\r\nwrite-host \"hello $msg\"\r\n```\r\n\r\nOutput\r\n```\r\n% ./hello.ps\r\nDEBUG:    5+  >>>> $msg=\"world\"\r\n\r\nDEBUG:     ! SET $msg = 'world'.\r\nDEBUG:    6+  >>>> write-host \"hello $msg\"\r\n\r\nhello world\r\n```\r\n\r\nPowershell shows lines of source code. It does not evaluate variables values. I would like to see `write-host \"hello world\"` as extra debug message.\r\n\r\n# Question\r\n\r\nIs it possible to see executed lines of script code in powershell? Could it evaluate variables values before printing debug message about executing command? How to do it?",
  "closed_at": "2019-04-26T06:39:31Z",
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@krystian-wojtas you should use Trace-Command\r\n \r\n` Trace-Command -Name * -Expression {$msg=\"world\";write-host -Message \"hello $msg\"} -PSHost `\r\n",
      "created_at": "2019-04-25T18:31:16Z",
      "updated_at": "2019-04-25T18:31:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It does not evaluate variables values. \r\n\r\nI thing PowerShell engine has not this _explicitly_ as strings. I guess it is possible to enhance the engine to construct such string _but only in simple cases_ (arguments can be complex expressions!) and this will add huge complicity in code without benefits - we can see all we need in debug and trace output.",
      "created_at": "2019-04-26T06:38:47Z",
      "updated_at": "2019-04-26T06:38:47Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "@fmichaleczek Yes, probably it is exactly what I need. This function is also promising\r\n[Set-Tracesource](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/set-tracesource)\r\n\r\nGreat answer, thank you very much for it.\r\n\r\nI couldn't find these functions by myself earlier. Then I wrote some small tool as a workaround\r\nhttps://gitlab.com/krystian.wojtas/powershell-debug\r\nIt works fine for small project I take part into. Next time I will use your advices. Good to know that powershell have proper way for doing it.\r\n",
      "created_at": "2019-04-26T14:21:17Z",
      "updated_at": "2019-04-26T14:21:17Z"
    }
  ],
  "created_at": "2019-04-25T08:18:23Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9463,
  "state": "closed",
  "title": "Feature Request: pwsh -x flag",
  "updated_at": "2019-04-27T02:59:29Z"
}