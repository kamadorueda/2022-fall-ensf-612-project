{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13786",
  "author": "jborean93",
  "body": "# PR Summary\r\n\r\nOnly require `-SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)` on non-Windows hosts when the client OMI library does not support cert verification.\r\n\r\n## PR Context\r\n\r\nThe version of `psrpclient` and `mi` that are shipped with PowerShell on non-Windows hosts do not support certificate verification. Because of this limitation if you try to connect over a HTTPS WSMan listener with just `-UseSSL` PowerShell will fail with\r\n\r\n```\r\nInvoke-Command: HTTPS on Unix does not currently support CA or CN checks. Use the PSSessionOption -SkipCACheck and -SkipCNCheck if you are certain you trust the server you are connecting to and the network in between.\r\n```\r\n\r\nThis is a perfectly adequate method to ensure end users are aware no cert verification is happening. In the meantime I have a fork of both `psrpclient` and `mi` that are designed to fix some of the bugs and limitations that face WSMan users on non-Windows clients and one of those fixes is to add certificate verification for WSMan. The current fork is set to always do certificate verification regardless of the session options for 2 reasons\r\n\r\n* The session options right now are not based down from PowerShell to `psrpclient` to `mi`\r\n    * First reason for this is the hardcoded check but even without that, the build of `psrpclient` that is shipped by PowerShell does nothing when it's told to set those options\r\n* Without a way to get PowerShell to tell `mi` that cert verification is off or on, I decided to use env vars to control the behaviour and have verification on by default\r\n    * If a user wants to disable verification they need to set the proper env vars\r\n    * Unfortunately they still need `SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)` in PowerShell due to the hardcoded check\r\n\r\nWhat I'm proposing is to relax that check to only fail if the underlying `psrpclient` library does not support passing those options along. That way people using the libs shipped by PowerShell continue to work as usual but people who use my forked copy of `psrpclient` and `mi` will be able to omit the options and only add them if they truly want to disable cert verification. This check in PowerShell is simple, it will call [WSManGetSessionOptionAsDword](https://github.com/PowerShell/psl-omi-provider/blob/59ab42f3bc769b1aa31c1181e3a97ea3e1b1c96e/src/Client.c#L589) with the `WSMAN_OPTION_SKIP_CA_CHECK` option. The current build of `psrpclient` shipped by PowerShell will return `MI_RESULT_NOT_SUPPORTED` for options that aren't implemented (this being one of them) whereas my fork will return `MI_RESULT_OK` to state the option was available. By checking that value we can see if the underlying libs support verification and control whether PowerShell displays the error message or not.\r\n\r\nThe underlying changes required to `psrpclient` and `mi` are currently in this PR https://github.com/jborean93/omi/pull/15. I still need to do some more testing but so far they seem to work as desired.\r\n\r\nMore background can be found here https://github.com/PowerShell/PowerShell/issues/13577.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-10-16T16:57:43Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Not sure if there's anything I should do about the CodeFactor errors, they seem to be pre-existing issues.",
      "created_at": "2020-10-15T19:02:52Z",
      "updated_at": "2020-10-15T19:02:52Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "No worries, thanks for considering the changes. With this change, the only remaining issue on my plate is now CredSSP authentication but I doubt that will happen anytime soon :)",
      "created_at": "2020-10-15T20:13:54Z",
      "updated_at": "2020-10-15T20:13:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@poshchan please remind me in 24 hours",
      "created_at": "2020-10-15T21:51:21Z",
      "updated_at": "2020-10-15T21:51:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we have a doc issue for the change?",
      "created_at": "2020-10-16T04:43:15Z",
      "updated_at": "2020-10-16T04:43:15Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the review @iSazonov. As for the docs, this is mostly for a 3rd party library that isn\u2019t really affiliated with PowerShell so I\u2019m not sure how much it should be advertised. Ultimately up to the PowerShell team to decide.",
      "created_at": "2020-10-16T05:44:10Z",
      "updated_at": "2020-10-16T05:44:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Restart failed CIs.",
      "created_at": "2020-10-16T11:41:26Z",
      "updated_at": "2020-10-16T11:41:26Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, this is the reminder you requested 24 hours ago",
      "created_at": "2020-10-16T21:51:31Z",
      "updated_at": "2020-10-16T21:51:31Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks everyone for the reviews and help through all this, it's very much appreciated. Looking forward to the 7.2.0 release.",
      "created_at": "2020-10-16T21:55:44Z",
      "updated_at": "2020-10-16T21:55:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.1)\n",
      "created_at": "2020-11-17T23:02:18Z",
      "updated_at": "2020-11-17T23:02:18Z"
    }
  ],
  "created_at": "2020-10-15T12:15:50Z",
  "number": 13786,
  "state": "closed",
  "title": "Relax further SSL verification checks for WSMan on non-Windows hosts with verification available",
  "updated_at": "2020-11-17T23:02:18Z"
}