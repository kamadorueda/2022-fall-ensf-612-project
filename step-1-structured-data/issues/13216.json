{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13216",
  "author": "imba-tjd",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\nI'm using `echo \u4f60\u597d | code -` but got messy code. The key point is that in cmd the command works.\r\n\r\nI reported at https://github.com/microsoft/vscode/issues/102917 but he suggests opening an issue here. There are some more tests in that issue.\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/24759802/87904893-f9e7ad00-ca91-11ea-8cd6-e360896bc3ac.png)\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/24759802/87920503-e2b5b900-caab-11ea-8187-de9eaf808ab6.png)\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.5\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-23T00:00:12Z",
  "comments": [
    {
      "author": "bpasero",
      "author_association": "NONE",
      "body": "I suggested to report the issue here only because the issue does not reproduce with `cmd.exe` it seems.",
      "created_at": "2020-07-20T09:22:23Z",
      "updated_at": "2020-07-20T09:22:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What does $OutputEncoding returns?",
      "created_at": "2020-07-20T10:16:18Z",
      "updated_at": "2020-07-20T10:16:18Z"
    },
    {
      "author": "imba-tjd",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nPreamble          :\r\nBodyName          : utf-8\r\nEncodingName      : Unicode (UTF-8)\r\nHeaderName        : utf-8\r\nWebName           : utf-8\r\nWindowsCodePage   : 1200\r\nIsBrowserDisplay  : True\r\nIsBrowserSave     : True\r\nIsMailNewsDisplay : True\r\nIsMailNewsSave    : True\r\nIsSingleByte      : False\r\nEncoderFallback   : System.Text.EncoderReplacementFallback\r\nDecoderFallback   : System.Text.DecoderReplacementFallback\r\nIsReadOnly        : True\r\nCodePage          : 65001\r\n```\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/24759802/87928255-19dd9780-cab7-11ea-943a-ecd6661de919.png)\r\n\r\nFor PS 5.1:\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/24759802/87928413-5dd09c80-cab7-11ea-8134-0f64c1adb151.png)\r\n\r\n",
      "created_at": "2020-07-20T10:20:23Z",
      "updated_at": "2020-07-20T10:33:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps a root of the issue is that `code` is based on `chcp` that is `[Console]::OutputEncoding` in PowerShell but PowerShell is using `$OutputEncoding` to communicate with external executables.\r\n\r\nFor a test you could assign CP936 value to `$OutputEncoding`.\r\n\r\n/cc @mklement0 ",
      "created_at": "2020-07-20T10:34:36Z",
      "updated_at": "2020-07-20T10:34:36Z"
    },
    {
      "author": "imba-tjd",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, with `$OutputEncoding=[System.Text.Encoding]::GetEncoding(936)` both pwsh and PS 5.1 can get the correct result.",
      "created_at": "2020-07-20T10:41:22Z",
      "updated_at": "2020-07-20T10:41:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@imba-tjd Thanks for confirmation!  I do not think we can resolve the issue automatically. Can you use Utf8 in console?",
      "created_at": "2020-07-20T10:50:30Z",
      "updated_at": "2020-07-20T10:50:30Z"
    },
    {
      "author": "imba-tjd",
      "author_association": "CONTRIBUTOR",
      "body": "Do you mean `chcp 65001`? That won't help with my case because VSC can't read chcp correctly but that's another thing.\r\n\r\nFor myself I can set $OutputEncoding in my pwsh profile but generally I think this issue should be fixed by VSC.\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/24759802/87930558-e43aad80-caba-11ea-85c4-0f7bfae86df0.png)\r\n",
      "created_at": "2020-07-20T11:04:23Z",
      "updated_at": "2020-07-20T11:04:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @TylerLeonhardt for information.",
      "created_at": "2020-07-20T11:27:05Z",
      "updated_at": "2020-07-20T11:27:05Z"
    },
    {
      "author": "bpasero",
      "author_association": "NONE",
      "body": "To clarify what VSCode is doing:\r\n* we run `chcp`\r\n* this is using node.js `exec` command which possibly is spawning `cmd.exe` and not powershell\r\n* we read the output\r\n* we have a map of supported encodings (see below)\r\n* we try to find the encoding in the output\r\n* we then pass this encoding into [`iconv-lite`](https://github.com/ashtuchkin/iconv-lite) to convert the input string using this encoding to UTF-8\r\n\r\n```\r\nconst windowsTerminalEncodings = {\r\n\t'437': 'cp437', // United States\r\n\t'850': 'cp850', // Multilingual(Latin I)\r\n\t'852': 'cp852', // Slavic(Latin II)\r\n\t'855': 'cp855', // Cyrillic(Russian)\r\n\t'857': 'cp857', // Turkish\r\n\t'860': 'cp860', // Portuguese\r\n\t'861': 'cp861', // Icelandic\r\n\t'863': 'cp863', // Canadian - French\r\n\t'865': 'cp865', // Nordic\r\n\t'866': 'cp866', // Russian\r\n\t'869': 'cp869', // Modern Greek\r\n\t'936': 'cp936', // Simplified Chinese\r\n\t'1252': 'cp1252' // West European Latin\r\n};\r\n```\r\n\r\nI think the culprit here is - as I said - node.js `exec` is not using Powershell.\r\n\r\nIs there maybe an environment variable in Powershell we could get the encoding from?",
      "created_at": "2020-07-20T11:32:51Z",
      "updated_at": "2020-07-20T11:33:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "**tl;dr**\r\n\r\nThe problem is that Visual Studio Code's CLI, `code`, doesn't pick up in-session changes to the active OEM code page, and seemingly always uses the _system's_ OEM code page.\r\n\r\nAdditionally, a fix to the PowerShell Integrated Console may be required - see https://github.com/PowerShell/vscode-powershell/issues/2816\r\n\r\n---\r\n\r\nThe _PowerShell Integrated Console_ (the special shell that comes with the PowerShell extension) sets `[console]::OutputEncoding` invariably to UTF-8, irrespective of what the active OEM code page is.\r\n\r\nNote that running a _regular PowerShell session_ in an integrated VSCode terminal does _not_ exhibit this behavior - it, like regular console / Windows Terminal windows, _consistently_ uses the active OEM code page for both `[console]::InputEncoding` and `[console]::OutputEncoding`.\r\n\r\nWhile PowerShell itself by default respects the active OEM code page for _receiving data from_ external programs (via `[console]::OutputEncoding`), it does _not_ do so for sending data _to_ external programs, because the `$OutputEncoding` preference variable, which controls the encoding used, is set to a _fixed_ default value in both PowerShell editions:\r\n\r\n* It is ASCII(!) encoding in _Windows PowerShell_ (which means that characters outside the 7-bit ASCII range are sent as literal `?` chars.)\r\n\r\n* It is more sensibly UTF-8 in _PowerShell [Core] v6+_, but note that it would always have made more sense to let `$OutputEncoding` default to _whatever the active OEM code page is_.\r\n\r\nIn the case at hand (a PowerShell [Core] session, _UTF-8_-encoded text is therefore piped to `code`.\r\n\r\nThat the PowerShell Integrated Console doesn't _also_ set the _input_ encoding - `[console]::InputEncoding` - to UTF-8 should be considered a bug, and this bug causes `chcp` not to recognize the intended change to `65001`, the UTF-8 code page - see https://github.com/PowerShell/vscode-powershell/issues/2816\r\n\r\nFor _direct_ calls to `chcp` in the PowerShell Integrated Console, you can fix this problem by running \r\n`[console]::InputEncoding = [console]::OutputEncoding` (afterwards, `chcp` reports `65001`, but not that using `chcp` to _change_ the OEM code page doesn't work, because .NET _caches_ the `[console]` encodings); however, this alone is _not_ enough to fix the problem: `code` still only ever sees the _system_ OEM code page.\r\n\r\nTherefore, the UTF-8-encoded text is misinterpreted as code page `936`-encoded.\r\n\r\nHere's a `cmd.exe` demonstration of the problem that shows that `code` is the culprit:\r\n\r\n```cmd\r\nC:\\> chcp 65001\r\nC:\\> echo \u20ac| code --verbose -\r\nRunning \"chcp\" to detect terminal encoding...\r\nReading from stdin via: C:\\Users\\jdoe\\AppData\\Local\\Temp\\code-stdin-xbt.txt\r\nMarker file for --wait created: C:\\Users\\jdoe\\AppData\\Local\\Temp\\emsolgg\r\nDetected raw terminal encoding: cp437\r\n```\r\n\r\nNote how `cp437` (which happens to be the active OEM code page on my US-English system) is detected rather than `65001`.\r\n\r\n",
      "created_at": "2020-07-20T16:01:36Z",
      "updated_at": "2020-07-20T16:57:36Z"
    },
    {
      "author": "imba-tjd",
      "author_association": "CONTRIBUTOR",
      "body": "As I understand, pwsh is using `$OutputEncoding` which is utf8 in `| code -`, and is different from chcp which relates to `[Console]::xxx`.\r\nAs for PS 5.1, it seems can't be solved under default settings because you said that's `?` literal.\r\n\r\nAnd the way VSC detects chcp is by starting a new session and run `chcp`, so it can't detect in-session changes.",
      "created_at": "2020-07-21T01:04:51Z",
      "updated_at": "2020-07-21T01:29:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> And the way VSC detects chcp is by starting a new session and run chcp, so it can't detect in-session changes.\r\n\r\nIndeed it _doesn't_ detect it, but generally  it _is_ possible for a _child_ process to correctly detect the console's active OEM code page - as evidenced by running `chcp` (which itself by definition runs in a child process) _directly_, after having run\r\n`[console]::InputEncoding = [console]::OutputEncoding = $OutputEncoding`, and getting `Active code page: 65001`.\r\n\r\nSo the problem must be in _how_ `chcp` is invoked by VSCode / Node.js: the `exec()` function @bpasero  mentions indeed involves a call to `cmd.exe`, but that doesn't explain the problem either, given that _direct_ execution of `cmd /c chcp` again is capable of picking up an in-session change.\r\n\r\nIt seems that the child process created by Node.js' `exec()` is disconnected from the console associated with the parent process. I personally don't know enough about Node.js to be able to tell if there's a solution.\r\n\r\nIf there is no solution, then the best -but suboptimal - workaround would be to check the process name of the parent process and _infer_ the value of `$OutputEncoding`  from the originating executable file name (`powershell` -> ASCII; `pwsh` -> UTF-8) based on the assumption that the _default_ `$OutputEncoding` value is in effect - which, of course, isn't necessarily true.\r\n",
      "created_at": "2020-07-21T02:40:28Z",
      "updated_at": "2020-07-21T02:42:57Z"
    },
    {
      "author": "bpasero",
      "author_association": "NONE",
      "body": "There is a bit more info here: https://nodejs.org/docs/v12.8.1/api/child_process.html#child_process_child_process_exec_command_options_callback\r\n\r\nEspecially check for `shell` [docs](https://nodejs.org/docs/v12.8.1/api/child_process.html#child_process_shell_requirements).\n\n<blockquote><div><strong><a href=\"https://nodejs.org/docs/v12.8.1/api/child_process.html#child_process_child_process_exec_command_options_callback\">Child Process | Node.js v12.8.1 Documentation</a></strong></div></blockquote>",
      "created_at": "2020-07-21T05:36:13Z",
      "updated_at": "2020-07-21T05:36:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @bpasero.\r\n\r\nI've realized that it isn't Node.js' `exec()` function that is the problem (as an aside: `execFile()` would be more efficient - no need to involve the shell).\r\n\r\nFor instance, the following works fine from `cmd.exe`:\r\n\r\n```cmd\r\nC:\\>chcp 65001\r\nC:\\>node -pe \"require('child_process').execFileSync('chcp').toString()\"\r\nActive code page: 65001\r\n```\r\n\r\nInstead, I suspect that because `Code.exe` - the executable launched by the `code.cmd` batch file - is a Windows _GUI_-subsystem application, it is therefore disconnected from the caller's console.\r\n\r\nCuriously, though, there's at least _some_ code in `Code.exe` that explicitly attaches to the caller's console, as evidenced by logging messages appearing there (asynchronously).\r\n\r\nI see two potential solutions:\r\n\r\n* If technically feasible: call `chcp` - or, preferably, the [`GetConsoleOutputCP`](https://docs.microsoft.com/en-us/windows/console/getconsoleoutputcp) WinAPI function in-process - from the part of `Code.exe` that has attached to the caller's console.\r\n\r\n* Otherwise, set an environment variable in `code.cmd` that the Node.js code can later pick up; e.g.:\r\n\r\n```cmd\r\nfor /f \"tokens=2 delims=:\" %%v in ('chcp') do set CONSOLE_CP=%%v\r\nset CONSOLE_CP=%CONSOLE_CP: =%\r\n```\r\n",
      "created_at": "2020-07-21T11:37:34Z",
      "updated_at": "2020-07-21T12:07:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me summarize (on the assumption that my analysis is correct):\r\n\r\n* There is a problem with Visual Studio Code (`code`) itself (on Windows): irrespective of what shell is used, it currently cannot detect the caller's _active_ OEM code page, i.e., an in-session switch to a different code page.\r\n\r\n* If the fix still requires a call to the `chcp` utility (as opposed to WinAPI function `GetConsoleOutputCP()`), then in order for the PowerShell Integrated Console to work properly, _it_ must fix https://github.com/PowerShell/vscode-powershell/issues/2816.\r\n\r\n",
      "created_at": "2020-07-21T12:07:15Z",
      "updated_at": "2020-07-21T12:07:15Z"
    },
    {
      "author": "bpasero",
      "author_association": "NONE",
      "body": "@mklement0 thanks a lot for the analysis, I will go ahead and update https://github.com/microsoft/vscode/issues/102917 with your findings. \r\n\r\nI would stay away in our code from relying on native Windows C-functions to call, because of the overhead of dragging in native modules via node.js. Ideally node.js would provide this, but until then I would like to keep using `chcp`.\r\n\r\nI think the workaround as a user is to set `VSCODE_CLI_ENCODING` in the shell that pipes into VSCode. We support this environment variable as a way to explicitly set the encoding to pick. ",
      "created_at": "2020-07-21T12:27:41Z",
      "updated_at": "2020-07-21T12:27:41Z"
    },
    {
      "author": "imba-tjd",
      "author_association": "CONTRIBUTOR",
      "body": "My concern is that even if VSC could get the correct active OEM code page, my initial question is still not solved, because pwsh uses $OutputEncoding, which is not equal to chcp's value by default (I'm using a normal console, not the PS extension provided).",
      "created_at": "2020-07-21T12:34:09Z",
      "updated_at": "2020-07-21T12:34:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@imba-tjd, if you're running PowerShell as a regular shell in the integrated terminal, you can put the following into `$PROFILE` to make your session fully UTF-8 (would also work for the PowerShell Integrated Console):\r\n\r\n```powershell\r\n# Make the console (terminal) use UTF-8 in all aspects.\r\n[console]::InputEncoding = [console]::OutputEncoding = $OutputEncoding = [System.Text.Utf8Encoding]::new()\r\n# Tell VSCode what stdin encoding to use.\r\n$env:VSCODE_CLI_ENCODING='utf8'\r\n```\r\n",
      "created_at": "2020-07-21T12:44:41Z",
      "updated_at": "2020-07-21T12:44:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-23T00:00:11Z",
      "updated_at": "2020-07-23T00:00:11Z"
    }
  ],
  "created_at": "2020-07-20T09:12:16Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13216,
  "state": "closed",
  "title": "Messy code with VSCode's reading from stdin",
  "updated_at": "2020-07-23T00:00:12Z"
}