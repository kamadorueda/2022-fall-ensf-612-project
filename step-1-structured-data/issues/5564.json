{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5564",
  "author": "1RedOne",
  "body": "Today in cURL, we can specify the `v/--verbose` flag to show the CONNECT request to the proxy, as well as the SSL/TLS handshake process (including certificate), like\r\n\r\n```\r\n* Rebuilt URL to: https://www.example.com/\r\n*   Trying 192.168.2.1...\r\n* Connected to my-proxy.local (192.168.2.1) port 8080 (#0)\r\n* Establish HTTP proxy tunnel to www.example.com:443\r\n> CONNECT www.example.com:443 HTTP/1.1\r\n> Host: www.example.com:443\r\n> User-Agent: curl/7.47.0\r\n> Proxy-Connection: Keep-Alive\r\n>\r\n< HTTP/1.1 200 Connection established\r\n<\r\n* Proxy replied OK to CONNECT request\r\n* found 148 certificates in /etc/ssl/certs/ca-certificates.crt\r\n* found 597 certificates in /etc/ssl/certs\r\n* ALPN, offering http/1.1\r\n* SSL connection using TLS1.2 / ECDHE_RSA_AES_128_GCM_SHA256\r\n*        server certificate verification OK\r\n*        server certificate status verification SKIPPED\r\n*        common name: www.example.org (matched)\r\n*        server certificate expiration date OK\r\n*        server certificate activation date OK\r\n*        certificate public key: RSA\r\n*        certificate version: #3\r\n*        subject: C=US,ST=California,L=Los Angeles,O=Internet Corporation for Assigned Names and Numbers,OU=Technology,CN=www.example.org\r\n*        start date: Tue, 03 Nov 2015 00:00:00 GMT\r\n*        expire date: Wed, 28 Nov 2018 12:00:00 GMT\r\n*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert SHA2 High Assurance Server CA\r\n*        compression: NULL\r\n* ALPN, server accepted to use http/1.1\r\n> GET / HTTP/1.1\r\n> Host: www.example.com\r\n> User-Agent: curl/7.47.0\r\n> Accept: */*\r\n>\r\n```\r\n\r\nToday in PowerShell, there's not a *great* way to get all of this information.  We can get some of it though.\r\n\r\n\r\nActual Behavior\r\n------------------\r\n\r\nThe `Microsoft.PowerShell.Commands.HtmlWebResponseObject` object maintains some of the information for us, within the first 25 lines of `.RawContent` and also within the `.BaseResponse` properties.\r\n\r\n```powershell\r\n$response.BaseResponse \r\n\r\nIsMutuallyAuthenticated : False\r\nCookies                 : {__cfduid=d84018de2d621df9d53eb52d97cd33a651511881763}\r\nHeaders                 : {Transfer-Encoding, Connection, Vary, Access-Control-Allow-Credentials...}\r\nSupportsHeaders         : True\r\nContentLength           : -1\r\nContentEncoding         : \r\nContentType             : application/json; charset=utf-8\r\nCharacterSet            : utf-8\r\nServer                  : cloudflare-nginx\r\nLastModified            : 11/28/2017 10:17:27 AM\r\nStatusCode              : OK\r\nStatusDescription       : OK\r\nProtocolVersion         : 1.1\r\nResponseUri             : https://jsonplaceholder.typicode.com/posts\r\nMethod                  : GET\r\nIsFromCache             : False\r\n```\r\n\r\nWe can also get some good info in the first 25 lines or so of the RawContent property, as seen here. RawContent is, well, raw, so I apply a split on new-lines then use array indexing as depicted by [0..20] to select the first 21 lines.\r\n\r\n```powershell\r\n$response.RawContent.Split(\"`n\")[0..20]\r\nHTTP/1.1 200 OK\r\nTransfer-Encoding: chunked\r\nConnection: keep-alive\r\nVary: Origin, Accept-Encoding\r\nAccess-Control-Allow-Credentials: true\r\nPragma: no-cache\r\nX-Content-Type-Options: nosniff\r\nCF-Cache-Status: HIT\r\nCF-RAY: 3c4e3f804f9d82f7-ATL\r\nCache-Control: public, max-age=14400\r\nContent-Type: application/json; charset=utf-8\r\nDate: Tue, 28 Nov 2017 15:09:23 GMT\r\nExpires: Tue, 28 Nov 2017 19:09:23 GMT\r\nETag: W/\"6b80-Ybsq/K6GwwqrYkAsFxqDXGC7DoM\"\r\nSet-Cookie: __cfduid=d84018de2d621df9d53eb52d97cd33a651511881763; expires=Wed, 28-Nov-18 15:09:23 GMT; path=/; domain=.typicode.com; HttpOnly\r\nServer: cloudflare-nginx\r\nVia: 1.1 vegur\r\nX-Powered-By: Express\r\n```\r\n\r\nDesired Behavior\r\n-----------------\r\n\r\nIf would be super nice to get cURL style connection response info back from within PowerShell.  For instance, the `-Verbose` switch could service this information, or instead provide another switch for `Invoke-WebRequest`.  \r\n\r\n```powershell\r\nInvoke-WebRequest -uri https://jsonplaceholder.typicode.com/posts -ShowConnectionInfo\r\n\r\n\r\nVERBOSE: Rebuilt URL to: https://www.example.com/\r\nVERBOSE:   Trying 192.168.2.1...\r\nVERBOSE: Connected to my-proxy.local (192.168.2.1) port 8080 (#0)\r\nVERBOSE: Establish HTTP proxy tunnel to www.example.com:443\r\nVERBOSE: CONNECT www.example.com:443 HTTP/1.1\r\nVERBOSE: Host: www.example.com:443\r\nVERBOSE: User-Agent: curl/7.47.0\r\nVERBOSE: Proxy-Connection: Keep-Alive\r\nVERBOSE: \r\nVERBOSE: HTTP/1.1 200 Connection established\r\nVERBOSE: \r\nVERBOSE: Proxy replied OK to CONNECT request\r\nVERBOSE: found 148 certificates in /etc/ssl/certs/ca-certificates.crt\r\nVERBOSE: found 597 certificates in /etc/ssl/certs\r\nVERBOSE: offering http/1.1\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I don't believe this is possible with `HttpClient` (the underlying .NET API called by the web cmdlets). `BasicHtmlWebResponseObject.RawContent ` (there is no `HtmlWebResponseObject` in PowerShell Core) is created after the response is already received. We currently do not have access to this in a \"live\" fashion. I think even if we switched to doing an async request, we still wouldn't have any kind of live update for this as the `HttpResponseHeaders` and `HttpContentHeaders` objects are not populated until he response has completed, and that is how we are currently building `RawContent `.\r\n\r\nBaring major changes to the underlying .NET API this won't be feasible and anything we did here would be redundant to the data provided on `BasicHtmlWebResponseObject`.",
      "created_at": "2017-11-28T16:06:17Z",
      "updated_at": "2017-11-28T16:07:20Z"
    },
    {
      "author": "charlieschmidt",
      "author_association": "NONE",
      "body": "I don't think it needs to be live data, but -Verbose on Invoke-WebRequest and RestMethod is nearly useless compared to what I think most people /want/ it to do - which is something like above.  For example, the verbose message on POST is always wrong, it says its sending with a -1-byte payload regardless of -Body contents.\r\n\r\nVerbose messages that look like http traces that included the dns lookup results, the headers being sent, maybe the body (or part of the body) would be super helpful in my opinion.\r\n\r\nThe response being part of -Verbose... ehh, not as important to me personally, given we'll have it on the pipeline there anyway.  Could still throw the headers and response code out on Verbose though, or with some additional param like suggested above.   I don't know how verbose is *too* verbose, but what the two cmdlets do now isn't sufficient in my opinion\r\n",
      "created_at": "2018-01-08T20:38:46Z",
      "updated_at": "2018-01-08T20:38:46Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@charlieschmidt I agree that the verbose output could use some work. Some of what you suggest may not be possible. Also, I though we fixed the incorrect -1 payload in OS Core?\r\n  \r\n```powershell\r\ninvoke-restmethod -Verbose -Uri https://httpbin.org/post -Method POST -Body 'test'\r\n```\r\n\r\nresult\r\n\r\n```none\r\nVERBOSE: POST https://httpbin.org/post with 4-byte payload\r\nVERBOSE: received 432-byte response of content type application/json\r\nVERBOSE: Content encoding: iso-8859-1\r\n\r\n\r\nargs    :\r\ndata    :\r\nfiles   :\r\nform    : @{test=}\r\nheaders : @{Connection=close; Content-Length=4; Content-Type=application/x-www-form-urlencoded; Host=httpbin.org;\r\n          User-Agent=Mozilla/5.0 (Windows NT 10.0; Microsoft Windows 10.0.16299; en-US) PowerShell/6.0.0}\r\njson    :\r\norigin  : 65.36.55.130\r\nurl     : https://httpbin.org/post\r\n```",
      "created_at": "2018-01-08T20:46:44Z",
      "updated_at": "2018-01-08T20:48:51Z"
    },
    {
      "author": "charlieschmidt",
      "author_association": "NONE",
      "body": "Yeah my mistake, it was fixed in Core; i switch between Core at home and v5 at work still so it's confusing for me, apologies.\r\n\r\nto me, the perfect result of -Verbose (or hell, -VerboseHeaders ?)  would be something like:\r\n\r\n```\r\nVERBOSE: POST https://httpbin.org/post with 4-byte payload\r\nVERBOSE: Connecting 52.243.164.125 on port 80\r\nVERBOSE: Request Headers:\r\nVERBOSE: Content-Length: 4\r\n...\r\nVERBOSE: Received response status code 200\r\nVERBOSE: Received 432-byte response of content type application/json\r\nVERBOSE: Response Headers:\r\nVERBOSE: Content-Length: 453\r\n...\r\n\r\n\r\nargs    :\r\ndata    :\r\nfiles   :\r\nform    : @{test=}\r\nheaders : @{Connection=close; Content-Length=4; Content-Type=application/x-www-form-urlencoded; Host=httpbin.org;\r\n          User-Agent=Mozilla/5.0 (Windows NT 10.0; Microsoft Windows 10.0.16299; en-US) PowerShell/6.0.0}\r\njson    :\r\norigin  : 65.36.55.130\r\nurl     : https://httpbin.org/post\r\n\r\n```\r\n\r\n\r\nDunno.  I suppose that is a lot of info.  But from experience it's rare to want a Verbose web request and not want to see at least some of the headers",
      "created_at": "2018-01-08T21:03:38Z",
      "updated_at": "2018-01-08T21:03:38Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "Some one should point me to this issue! \ud83d\ude04 \r\n\r\nRelated Stack Overflow question: https://stackoverflow.com/questions/47533798/how-to-show-tls-handshake-information-and-connect-request-in-invoke-webrequest\r\n\r\nI did some research on this repository; I found\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/13cf8af66734b4119643748f36ed92260ceae7da/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/InvokeWebRequestCommand.CoreClr.cs#L16\r\n\r\nSo I searched for `WebRequestPSCmdlet` and found that HTTP is processed in this method:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/13cf8af66734b4119643748f36ed92260ceae7da/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1428\r\n\r\nWhich is using [`System.Net.Http.HttpClient`](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-2.1). I'm still reading their documentation to see whether this class provides such detailed information; if they don't then I guess we can do nothing here.",
      "created_at": "2018-12-04T15:41:56Z",
      "updated_at": "2018-12-04T15:41:56Z"
    },
    {
      "author": "marioja",
      "author_association": "NONE",
      "body": "Is there an update on this issue?  This functionality is still very desirable.",
      "created_at": "2019-07-08T15:16:35Z",
      "updated_at": "2019-07-08T15:16:35Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "Details are required. This information is required for debugging. When the error happened, I don't know what the problem is.\r\n\r\n",
      "created_at": "2019-11-27T10:22:05Z",
      "updated_at": "2019-11-27T10:22:05Z"
    },
    {
      "author": "Zorono",
      "author_association": "NONE",
      "body": "any update for this ???",
      "created_at": "2020-09-07T05:49:14Z",
      "updated_at": "2020-09-07T05:49:14Z"
    },
    {
      "author": "McGeifer",
      "author_association": "NONE",
      "body": "Any news on this? It's really hard to find out why you webrequest failed if you only get a response code. Would really love to get some more information on what's happening in the background.",
      "created_at": "2021-04-19T08:25:10Z",
      "updated_at": "2021-04-19T08:25:10Z"
    }
  ],
  "created_at": "2017-11-28T15:31:06Z",
  "number": 5564,
  "state": "open",
  "title": "Invoke-WebRequest should have a curl style -Verbose switch to display full server response",
  "updated_at": "2021-04-19T08:25:11Z"
}