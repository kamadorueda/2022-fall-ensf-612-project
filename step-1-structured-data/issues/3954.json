{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3954",
  "author": "SteveL-MSFT",
  "body": "HelpSystem currently relies on MAML based help.  We have platyPS which converts markdown to MAML.  The HelpSystem should understand markdown natively removing the conversion step.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we'll directly read and parse Markdown files we have to rewrite all help subsystem which currently full based on xml/maml. If we'll rewrite the help sybsystem maybe use a lightweight DB engine like MongoDB? In the case we'll parse once with Update-Help and then import help info in a DB.",
      "created_at": "2017-09-05T14:58:35Z",
      "updated_at": "2017-09-05T14:58:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov using a local noSQL DB like MongoDB may make sense.  First step is to separate out the [HelpSystem](https://github.com/PowerShell/PowerShell-RFC/pull/102).\r\n\r\nOnce we can consume markdown natively, we can do some interesting stuff with rendering any markdown (not just Help) on the console",
      "created_at": "2017-09-05T15:45:25Z",
      "updated_at": "2017-09-05T15:45:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So do we need to implement a parser and a console renderer?",
      "created_at": "2017-09-05T17:57:12Z",
      "updated_at": "2017-09-05T17:57:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Would be best if we can use some existing OSS implementation",
      "created_at": "2017-09-05T18:13:46Z",
      "updated_at": "2017-09-05T18:13:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see many parser implementations (PlatyPS?) but can not find console renderer.",
      "created_at": "2017-09-05T18:33:56Z",
      "updated_at": "2017-09-05T18:33:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Reusing PlatyPS.  We will probably have to write a console renderer.  ",
      "created_at": "2017-09-05T18:43:59Z",
      "updated_at": "2017-09-05T18:43:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Interesting JavaScript implementation https://github.com/linuxenko/lessmd",
      "created_at": "2017-10-09T03:51:52Z",
      "updated_at": "2017-10-09T03:51:52Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "python implementation https://github.com/axiros/terminal_markdown_viewer",
      "created_at": "2018-01-27T07:30:37Z",
      "updated_at": "2018-01-27T07:30:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have RFC to move HelpSystem out PowerShell Engine. So we should solve that we implement first.",
      "created_at": "2018-01-28T16:50:11Z",
      "updated_at": "2018-01-28T16:50:11Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just curious!\r\n\r\nThis is not going to impact Windows PowerShell Help system? \r\nAs, Windows PowerShell is complete. This is only for PSCore6. Right!!  \r\n\r\nAlso, is this also going to impact the the online Microsoft Doc information?\r\n\r\n:)\r\n\r\n",
      "created_at": "2018-01-28T17:37:40Z",
      "updated_at": "2018-01-28T17:37:40Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "IMO, this will be for PowerShell Core and PowerShell cmdlet docs are already using markdown .",
      "created_at": "2018-01-28T17:57:00Z",
      "updated_at": "2018-01-28T17:57:50Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@kvprasoon, Thanks!",
      "created_at": "2018-01-28T18:16:14Z",
      "updated_at": "2018-01-28T18:16:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad correct, this change is only for PSCore6 which means for Windows PowerShell we'll continue to use platyPS to convert the markdown to MAML if that help is updated.",
      "created_at": "2018-01-30T18:21:54Z",
      "updated_at": "2018-01-30T18:21:54Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "One thought about smoothing the transition: when we will have HelpSystem in a separate module, we can add part of platyPS there, that can convert platyPS markdown to the tradition help objects on the fly. That way, users can stop shipping maml xmls earlier and package consumers can still get it in the traditional form. \r\n",
      "created_at": "2018-02-01T06:16:34Z",
      "updated_at": "2018-02-01T06:16:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In short from discussion with @vors\r\n\r\n- In any case we need ported console markdown renderer.\r\nPerhaps we could support pluggable markdown renderer modules (ex. show HTML) (maybe as part of a host implementation)\r\n\r\n- In any case we should parse mardown help files in order to provide the ability to search and filter.\r\nIt does not require use `platyPS`.\r\nPreffered way is direct using [markdig](https://github.com/lunet-io/markdig) (BSD-like license) which is fast and extensible.\r\n\r\n- The parsing  in turn implies the existence of a scheme.\r\n`PlatyPS` uses a complex scheme. Really we should simplify it because we don't need MAML anymore.\r\nActually we have enough the markdown scheme which has `Section`.\r\nIn other words we can realize to start something like\r\n`Get-MarkdownHelp -Name CmdletName -Section Description`\r\n\r\n- To ensure backward compatibility we need to add an option to convert existing Help (xml) files to the markdown on the fly.\r\nTo do this, we will need integrate `platyPS` package (yet it doesn't exist).\r\n\r\n- To avoid repeated markdown parsing and maml/xml-markdown conversions, we could use a cache based on noSQL (mongoDB?).\r\n`Update-MarkdownHelp` cmdlet could update not only the source files but also the cache.\r\n\r\n- Given that this cache will contain a list of cmdlets by modules,\r\nthis cache could be used to speed up the search for cmdlets for module autoloading.\r\n\r\n- This is all very similar to the roadmap for creating a new MarkdownHelpSystem that is independent of the current HelpSystem but backward compatible.\r\n\r\nPerhaps we can not waste time and not separate the current system into a separate module.\r\nWe can work on the new system right now. The main difficulty is the lack of ported console markdown renderer.\r\nWe should consider to use https://github.com/rprichard/winpty although this may require a refactoring of the console output code.\r\n",
      "created_at": "2018-02-01T09:57:48Z",
      "updated_at": "2018-02-02T05:48:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Great discussion!\r\n\r\ncc @daxian-dbw @adityapatwardhan who has been looking into this",
      "created_at": "2018-02-01T17:03:32Z",
      "updated_at": "2018-02-01T17:03:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Add about using winpty.",
      "created_at": "2018-02-02T05:49:03Z",
      "updated_at": "2018-02-02T05:49:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since it is assigned to 6.3 I share follow.\r\nFirst, we need decouple HelpSystem to separate dll/module.\r\nThis opens the way to the development of alternative HelpSystems.\r\nCurrent HelpSystem is fully integrated into Engine.\r\nWe need design new public API for pluggable HelpSystems. Although at start we could do the separation using internal api and internal visibility.\r\nSome internal api from the engine are also used there and it is not clear what to do with it.\r\nMost likely we will have to convert Help function to binary cndlet.\r\nAlso there can be some (1-2) breaking changes.\r\n\r\nI could push WIP PR but only if MSFT team is ready to lead the work.\r\n",
      "created_at": "2019-02-27T05:16:15Z",
      "updated_at": "2019-02-27T05:16:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I think @adityapatwardhan already has code changes for a prototype that separates HelpSystem from the engine.",
      "created_at": "2019-03-01T17:42:57Z",
      "updated_at": "2019-03-01T17:42:57Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Yes, I do have one. It does not compile completely yet though. ",
      "created_at": "2019-03-01T17:45:32Z",
      "updated_at": "2019-03-01T17:45:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tried to do it three times and understand what the problems are :-)",
      "created_at": "2019-03-01T17:47:16Z",
      "updated_at": "2019-03-01T17:47:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you (MSFT team) share current status?\r\n7.0 milestone is best time to decouple the help subsystem and make it pluggable and extendable.\r\n\r\nI suggest the plan (see my comment above):\r\n1. Move Help Sybsystem to separate dll. It requires changing internal API in engine.\r\n2. Make it pluggable. It is breaking change and it requires new public API. It is very simple API.\r\n3. Implement new Help module with Markdown support.",
      "created_at": "2019-05-31T05:31:03Z",
      "updated_at": "2019-05-31T05:31:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@stevel-msft mentioned on Twitter that this was something he would like to look at doing for v7.\r\n\r\nNot sure what the necessary work volume is for this, though. :)",
      "created_at": "2019-05-31T10:39:40Z",
      "updated_at": "2019-05-31T10:39:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Points 1 and 2 from list above is low volume, point 3 is high volume but can be implemented step by step without removing current Help system..",
      "created_at": "2019-05-31T11:19:31Z",
      "updated_at": "2019-05-31T11:19:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think we should separate moving the HelpSystem out of SMA.dll as independent of this enhancement.    That would be nice to have, but not critical for PS7.  We should definitely have this in PS7 so we don't need MAML.  However, we also need to change how we publish updateable help so that we have zips with just markdown, but need to keep MAML publishing for downlevel PS.",
      "created_at": "2019-06-05T14:26:15Z",
      "updated_at": "2019-06-05T14:26:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Do you mean that you have plans to integrate Markdown to _current_ HelpSystem? I'm afraid it will complicate the module significantly, make it much more difficult to move the module out SMA and further full decouple. I'd prefer that we implement _new_ module with Markdown support. Before it becomes stable, users could continue to use the old module.\r\nIn my last attempt, I advanced about 80% so that we could really do it.",
      "created_at": "2019-06-06T04:16:24Z",
      "updated_at": "2019-06-06T04:19:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov preference would be to separate out HelpSystem as separate module, if you have a work-in-progress prototype, perhaps you can submit a draft PR and @adityapatwardhan can just work off your branch (or maybe create a new branch in this repo like we did for .NET Core 3.0 port work).",
      "created_at": "2019-06-06T07:53:31Z",
      "updated_at": "2019-06-06T07:53:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT The PR #9841 is created.",
      "created_at": "2019-06-06T11:14:50Z",
      "updated_at": "2019-06-06T11:14:50Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Cleanup req here ?",
      "created_at": "2021-08-04T13:50:04Z",
      "updated_at": "2021-08-04T13:50:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kvprasoon I don't understand your question. Please reword.",
      "created_at": "2021-08-04T18:12:07Z",
      "updated_at": "2021-08-04T18:12:07Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "I meant, PR created and linked are closed and the issue is still open.",
      "created_at": "2021-08-05T05:17:07Z",
      "updated_at": "2021-08-05T05:17:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ":-) Ah. The PR was closed but not merged. MSFT team did not want to continue this work.",
      "created_at": "2021-08-05T09:12:36Z",
      "updated_at": "2021-08-05T09:12:59Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "ohh. ok",
      "created_at": "2021-08-05T15:06:22Z",
      "updated_at": "2021-08-05T15:06:22Z"
    }
  ],
  "created_at": "2017-06-06T20:04:06Z",
  "number": 3954,
  "state": "open",
  "title": "HelpSystem should consume markdown natively",
  "updated_at": "2021-08-05T15:06:22Z"
}