{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8549",
  "author": "timoline",
  "body": "(Maybe it should be at vscode repo)\r\n\r\n# Steps to reproduce\r\n\r\n```\r\nfunction Test-Service\r\n{\r\n    [CmdletBinding()]\r\n    param (\r\n        [ValidateScript({Get-Service | Select-Object Name})]\r\n        $Service\r\n    )\r\n    \r\n    begin\r\n    {\r\n    }\r\n    \r\n    process\r\n    {\r\n        $Service\r\n    }\r\n    \r\n    end\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n\r\n# Expected behavior\r\n\r\nTest-Service -Service  [tab]\r\nwhen pressing tab you should see possible values\r\n\r\n# Actual behavior\r\n\r\ndoesnt show values\r\n\r\n# Environment data\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n",
  "closed_at": "2019-02-16T18:50:59Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "ValidateScript doesn't work this way. It checks the input object against a specified condition. Your syntax needs to be more like:\r\n\r\n```powershell\r\n    param (\r\n        [ValidateScript(\r\n            { $_ -in (Get-Service | Select-Object -ExpandProperty Name) }\r\n        )]\r\n        $Service\r\n    )\r\n```\r\n\r\nLine breaks and whitespace optional. The result of the ValidateScript will be cast to boolean to determine the result of the validation. A truthy result value will pass the validation, and you can optionally `throw` an error to fail it explicitly as well.\r\n\r\nUnlike ValidateSet, it may not always be possible to list all possible values; for example, if the condition is `$_ -match '\\d+'` then any string that contains one or more digit values would pass the condition. Trying to autocomplete such a condition would require ridiculous amounts of processing, and most values would probably be nonsensical anyway.\r\n\r\nIf you want a ValidateScript attribute to complete possible values, you have two options, both of which I detail in this blog post: https://vexx32.github.io/2018/11/29/Dynamic-ValidateSet/ \u2014 you can either create a matching ArgumentCompleter, or you can make use of `IValidateSetValuesGenerator`.",
      "created_at": "2018-12-27T13:23:25Z",
      "updated_at": "2018-12-27T13:27:23Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "Great examples thx!\r\n\r\nBut are you saying that tab-complition is not possible like validateset?\r\n\r\n",
      "created_at": "2018-12-27T13:36:02Z",
      "updated_at": "2018-12-27T13:36:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, ValidateScript is too open-ended to autocomplete its own values. You can apply an `[ArgumentCompleter()]` attribute to complete the values instead if you want that. \ud83d\ude04 ",
      "created_at": "2018-12-27T13:48:50Z",
      "updated_at": "2018-12-27T13:48:50Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "do you have a good example?\r\n\r\nYour examples on your blog still doesnt work for me.",
      "created_at": "2018-12-27T17:40:59Z",
      "updated_at": "2018-12-27T17:40:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you could show me what you've attempted to work with I could offer specific suggestions. \ud83d\ude04 \r\n\r\nBut in general, this sort of method works well:\r\n\r\n```powershell\r\nfunction Get-File {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory, Position = 0)]\r\n        [ValidateScript(\r\n            {\r\n                $_ -in (Get-ChildItem -File).Name\r\n            }\r\n        )]\r\n        [ArgumentCompleter(\r\n            {\r\n                param($Command, $Parameter, $WordToComplete, $CommandAst, $FakeBoundParams)\r\n                $ValidValues = (Get-ChildItem -File).Name\r\n                return @($ValidValues) -like \"$WordToComplete*\"\r\n            }\r\n        )]\r\n        [string]\r\n        $Filename\r\n    )\r\n    \"The selected file is $Filename\"\r\n}\r\n```",
      "created_at": "2018-12-27T18:15:27Z",
      "updated_at": "2018-12-27T18:15:27Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "I tried your above example.\r\n\r\nGet-File -filename [tab]\r\n\r\nMy assumption is: when pressing tab, the values will be shown, but it isn't\r\n\r\nI think It's a vscode thingy\r\n",
      "created_at": "2018-12-28T07:32:09Z",
      "updated_at": "2018-12-28T07:35:42Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "Ok I got it,\r\nits working in the terminal, but not in the editor of vscode\r\n\r\nIt's a vscode thingy",
      "created_at": "2018-12-31T07:21:23Z",
      "updated_at": "2018-12-31T07:21:23Z"
    },
    {
      "author": "mooock",
      "author_association": "NONE",
      "body": "ohh man, really looked for this answer. i also thought the validationscript did everything, but how you show it make sense. i also did a script that worked when implementing the -in",
      "created_at": "2021-01-15T21:48:44Z",
      "updated_at": "2021-01-15T21:48:44Z"
    }
  ],
  "created_at": "2018-12-27T13:15:31Z",
  "number": 8549,
  "state": "closed",
  "title": "validatescript tab-completion dont show possible values",
  "updated_at": "2021-01-15T21:48:44Z"
}