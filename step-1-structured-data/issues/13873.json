{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13873",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\n.NET offers a number of specialized dictionary types that all implement the `IDictionary` interface.\r\n`[hashtable]` (and `[ordered]` (`System.Collections.Specialized.OrderedDictionary`)) conveniently have a literal syntax in PowerShell, but it would be nice if other types of dictionaries could be _initialized_ via such a hashtable literal (`@{ ... }`):\r\n\r\nThe following, which initializes a non-generic sorted dictionary (a list that also acts as a dictionary) already works:\r\n\r\n```powershell\r\n# OK, for this specific type:\r\nPS> [System.Collections.SortedList] @{ one = 1; two = 2 }\r\n\r\nName                           Value\r\n----                           -----\r\none                            1\r\ntwo                            2\r\n```\r\n\r\nThe following are examples of other `IDictionary`-implementing types that do NOT work, but it would be nice if they did:\r\n\r\n```powershell\r\n[System.Collections.Generic.SortedList[string, int]] @{ one = 1; two = 2 }\r\n[System.Collections.Generic.SortedDictionary[string, int]] @{ one = 1; two = 2 }\r\n[System.Collections.Generic.Dictionary[string, int]] @{ one = 1; two = 2 }\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I wonder where this ends...\r\nWhat about a [`[HashSet]`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1):\r\n```PowerShell\r\n[System.Collections.Generic.HashSet[string]]@('one', 'two', 'three')\r\n```\r\nWhich is lighter then creating a `[Hashtable]` and setting the values to `$True` (which is often done by programmers that are unaware of its existence)",
      "created_at": "2020-10-26T15:19:22Z",
      "updated_at": "2020-10-27T07:54:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iRon7, as your sample command shows, initialization of a `HashSet` by a literal is already supported, namely via an _array_ (which is appropriate, given that they only have keys, and not also values) - which is good to know. Also, note that `HashSet` doesn't implement `IDictionary`.",
      "created_at": "2020-10-26T16:33:28Z",
      "updated_at": "2020-10-26T16:34:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Don't think you can actually index a hashset directly at all, at least I don't see an obvious way to do so. You can add or remove values and check if things are already inside it, or iterate the entire contents, but I don't see a way to index into it and grab specific items directly.",
      "created_at": "2020-10-26T16:41:26Z",
      "updated_at": "2020-10-26T16:41:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, `HashSet<T>` is unordered, so positional indexing isn't supported; use `.Contains()` or call `.Add()` and infer from the Boolean return value whether the element was already present (`$false`) or not (`$true`), i.e. if it was just added.\r\n\r\nWhile the related `SortedSet<T>` does maintain (sort) order, it doesn't support indexing directly either; you can work around it with LINQ, but the data structure isn't designed to be accessed by index efficiently (see https://stackoverflow.com/a/20691991/45375):\r\n\r\n```powershell\r\nPS> [System.Linq.Enumerable]::ElementAt([System.Collections.Generic.SortedSet[string]] ('one', 'two', 'three'), 1)\r\nthree # The 2nd element from the *sorted* set.\r\n```\r\n\r\n\r\n\r\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/20691753/accessing-the-item-at-a-specified-index-in-a-sortedset\">Accessing the item at a specified index in a 'SortedSet'</a></strong></div><div>How can I access the item at a specified index (position) in a SortedSet?\r\n\r\nUnlike SortedList, SortedSet does not offer an Item property.\r\n\r\n(Also, unlike SortedList, SortedSet enforces each of its me...</div></blockquote>",
      "created_at": "2020-10-26T16:58:05Z",
      "updated_at": "2020-10-27T00:40:55Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> Also, note that HashSet doesn't implement IDictionary\r\n\r\n**Correct**, I was wrong there.\r\n\r\nAnyways, I can't find a use case in StackOverflow, but let's assume I have a bunch of file names and I want to (quickly) check if they exists in my system. (_I don't care where they reside, I just want to know if they whether they exist or not._). For this I could setup a hash table and populate it like `$HashTable[$Filename] = $True` and later check on the file name like `$HashTable.ContainsKey($FileName)` whether it exists but as the value isn't important in this situation, I could also use a `HashSet` (using `$HashSet.Add($Filename) ` and `$HashSet.Contains($Filename)`) instead, knowing that a hashset is a lot faster than an array:\r\n\r\n```PowerShell\r\n$Array = 1..50000 | % { 2 * $_ }\r\n$HashTable = @{}; $Array | % { $HashTable[$_] = $True }\r\n$HashSet = [System.Collections.Generic.HashSet[int]]$Array\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $Array.Contains($i) }\r\n}).TotalMilliseconds\r\n16209.7465\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $HashTable.Contains($i) }\r\n}).TotalMilliseconds\r\n124.7134\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $HashSet.Contains($i) }\r\n}).TotalMilliseconds\r\n104.1335\r\n```\r\nSee also: [Optimize for extremely large hash tables?](https://stackoverflow.com/a/9550654/1701026)\r\n\r\n",
      "created_at": "2020-10-26T18:14:05Z",
      "updated_at": "2020-10-27T07:55:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's good to know, @iRon7, but it is still unrelated to this proposal, which is about types implementing the `IDictionary` interface.",
      "created_at": "2020-10-27T00:57:26Z",
      "updated_at": "2020-10-27T00:57:26Z"
    }
  ],
  "created_at": "2020-10-25T17:45:23Z",
  "number": 13873,
  "state": "open",
  "title": "Support hashtable initializers for all IDictionary types",
  "updated_at": "2020-10-27T07:59:43Z"
}