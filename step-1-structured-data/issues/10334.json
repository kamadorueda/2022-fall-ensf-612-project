{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10334",
  "author": "KirkMunro",
  "body": "# Summary of the new feature/enhancement\r\n\r\nWhen people build non-module tools that use the PowerShell SDK, they ultimately need to invoke some PowerShell commands. For tools are meant to function as a black box, the PowerShell commands that the tool invokes...\r\n\r\n1. ...should be hidden from the PowerShell debugger (so that breakpoints do not trigger on tool internals);\r\n1. ...should not pick up on user parameter preferences defined in `$PSDefaultParameterValues`;\r\n1. ...should not pick up on user invocation preferences defined in `$*Preference` variables;\r\n\r\nThis needs to be very, very easy so that tools can work as they were designed, without changes in behavior because of user preferences, and without the PowerShell debugger tripping on non-user code that is meant to be internal.\r\n\r\nFor a related discussion that highlights what tool makers need to think about in detail, see [this comment in issue #2121 of PowerShell\\vscode-powershell](https://github.com/PowerShell/vscode-powershell/issues/2121#issuecomment-519954671). That discussion also shows the scaffolding that is required to do something that should be very simple and supported in the SDK via a few flags.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nAny public interface that allows users to build PowerShell commands piecemeal (i.e. `AddCommand`, `AddParameter`, `AddScript`, `AddArgument`, etc.) and then invoke them needs to support invocation options that:\r\n- hide the command(s) from the debugger;\r\n- ignore `$PSDefaultParameterValues`;\r\n- automatically apply default values for any common parameters that are not explicitly used.\r\n\r\n~That's not very specific, so obviously more investigation would be necessary to identify where to create these options so that they can be used via public interfaces, and where the options would need to be plumbed through the PowerShell runtime so that toolmakers get the results they expect.~\r\n\r\n_Update copied from discussion below_:\r\n\r\nTo achieve this goal, `S.M.A.PSInvocationSettings` will be extended with a `DebuggerHidden` property, which would ensure the commands were hidden from the debugger, and a `IgnorePreferenceVariables` property, which would ignore $PSDefaultParameterValues and $*Preference variables. Programmers using the SDK can pass their `PSInvocationSettings` instance into `S.M.A.PowerShell.Invoke`, and with the new settings properly plumbed through the runtime, they won't have to worry about user preferences impacting internal APIs.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Why not just use a separate runspace.",
      "created_at": "2019-08-10T01:51:09Z",
      "updated_at": "2019-08-10T01:51:09Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay That's a great question, and I'm going to think about that for a bit.\r\n\r\nNow you've got me wondering if this is as simple as something that just isn't obvious because it's not a documented best practice to use for things like this, but maybe it should be.\r\n\r\nAs someone who has worked on PowerShell tools for many years, where this problem has shown up here and there, I wonder why I never thought of doing that. I'm not the only one, though, because this showed up in PowerGUI, it was an issue in PowerWF/PowerSE, and now it shows up in VSCode-PowerShell, and nobody involved other than you, just now, suggested using a separate runspace, so it's not an obvious design approach that just jumps out at you. At least, not until you hear it from @BrucePay.",
      "created_at": "2019-08-10T02:25:33Z",
      "updated_at": "2019-08-10T02:25:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay After thinking on this some more, doubting that it's really that simple, and seeing [@SeeminglyScience confirm that it's not that simple](https://github.com/PowerShell/vscode-powershell/issues/2121#issuecomment-520545909), I'm back to my original thought: it's not that simple, and the SDK should support working with PowerShell in a runspace without taking user preferences into account.\r\n\r\nTools that don't care about state could use their own runspace, but tools that are built on top of PowerShell, offering an IDE, or debugging, etc. need state information from the user's runspace to ensure that they are working with the same information that is available to the user, and they wouldn't have access to that information if they used a separate runspace.",
      "created_at": "2019-08-12T18:51:29Z",
      "updated_at": "2019-08-12T18:51:54Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro  \r\n> need state information from the user's runspace \r\n\r\nConveniently available through the SessionStateProxy APIs on the runspace :-)\r\n\r\n> need state information from the user's runspace \r\n\r\nISE seemed to do OK. It managed, manipulated state and debugged multiple runspaces both local and remote.\r\n\r\nAnyway, this _might_ help (assuming it's still there). As you know, a runspace is all about state, specifically session state. There is one global session state object per runspace and then one each for  each module loaded. The module session state objects are linked to the global session state object so they all share the global namespace. The global session state object is linked to null. However, we designed things so that it's possible for a non-global session state object to be created that isn't linked to anything. We figured that there might be scenarios where you wanted an isolated session state even though we didn't know of any such scenarios. So you might be able to create an isolated \"tools\" environment using this mechanism (assuming it still exists and is public - I haven't looked.) But note - this is an empty session state - no commands, no variables, nothing. You'd have to manually populate it to have any commands available to you. ",
      "created_at": "2019-08-13T21:38:46Z",
      "updated_at": "2019-08-13T21:38:46Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Is that the right way to go for this though?\r\n\r\nCreating/managing a session state for this seems more complicated than what I was thinking.\r\n\r\nI was leaning more towards adding properties to `S.M.A.PSInvocationSettings`, such as `DebuggerHidden`, which would ensure the commands were hidden from the debugger, and `IgnorePreferenceVariables`, which would ignore `$PSDefaultParameterValues` and `$*Preference` variables. Then programmers using the SDK could pass their `PSInvocationSettings` instance into `S.M.A.PowerShell.Invoke`, and as long as the new settings were properly plumbed through the runtime, they wouldn't have to worry about user preferences impacting internal APIs.",
      "created_at": "2019-08-18T19:40:41Z",
      "updated_at": "2019-08-20T13:33:52Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> ISE seemed to do OK. It managed, manipulated state and debugged multiple runspaces both local and remote.\r\n\r\nISE isn't that advanced as far as IDEs go, and it is still susceptible to internal behavior that can be unintentionally manipulated by use of `$PSDefaultParameterValues`, breakpoints, and `$*Preference` variables. PowerShell itself suffers the same problem. It just doesn't show up that often, but regardless of the frequency, SDK users should be able to use the runtime in a way that internals are kept internal.",
      "created_at": "2019-08-18T19:47:48Z",
      "updated_at": "2019-08-18T19:47:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > ISE seemed to do OK. It managed, manipulated state and debugged multiple runspaces both local and remote.\r\n> \r\n> ISE isn't that advanced as far as IDEs go\r\n\r\nYeah the ISE could get away with a bit more because it doesn't try to do a whole lot.  It also had the benefit of `InternalsVisibleTo`.  I can't look at the code to check obviously, but in the few places that it does go the extra mile, I'm guessing it leans on internals heavily.",
      "created_at": "2019-08-20T13:26:02Z",
      "updated_at": "2019-08-20T13:26:02Z"
    }
  ],
  "created_at": "2019-08-09T15:44:38Z",
  "number": 10334,
  "state": "open",
  "title": "PowerShell SDK should support easier invocation of PowerShell that is hidden from the debugger and that ignores `$PSDefaultParameterValues` and `*Preference` variables",
  "updated_at": "2019-10-01T19:27:48Z"
}