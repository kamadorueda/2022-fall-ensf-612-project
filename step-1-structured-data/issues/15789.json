{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15789",
  "author": "daxian-dbw",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n`11111.11 - 11110.01` or `11111.11 - 11110`\n\n### Expected behavior\n\n```console\nPS> 11111.11 - 11110.01\r\n1.1\r\n\r\nPS> 11111.11 - 11110\r\n1.11\n```\n\n\n### Actual behavior\n\n```console\nPS> 11111.11 - 11110.01\r\n1.10000000000036\r\n\r\nPS> 11111.11 - 11110\r\n1.11000000000058\n```\n\n\n### Error details\n\n```console\nN/A\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\nN/A",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is related to a change in .NET in the last year or two where they defaulted the string formatting for `double` (and I think `float` as well?) to what they called the 'shortest roundtrippable string' -- the shortest number that is a \"true\" representation of the floating point value, where if you parse that value back to a number you will get the exact same result.\r\n\r\nI believe the only thing we'd need to change here is to ensure we use whatever ToString() method they were using as default prior to that change, if we want. ",
      "created_at": "2021-07-17T04:18:09Z",
      "updated_at": "2021-07-17T04:18:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The history is in #9893.",
      "created_at": "2021-07-19T04:39:47Z",
      "updated_at": "2021-07-19T04:39:47Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "[decimal]11111.11 - 11110.01\r\n1.10\r\n[decimal]11111.11 - 11110\r\n1.11",
      "created_at": "2021-07-23T06:53:39Z",
      "updated_at": "2021-07-23T06:53:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> The history is in #9893.\r\n\r\nThanks @iSazonov. I reviewed that PR and the regarding issue again and found this is the same behavior as before the regression in .NET 3 :) The PS 6.2.0 shows the same string conversion result.\r\n\r\n![image](https://user-images.githubusercontent.com/127450/138987773-e354c0da-5c4f-4282-b867-af82c7d9ea27.png)\r\n\r\nThis is because we are using `G15` precision when converting `double` to string, and it just happens that the value of `11111.11 - 11110.01` is `1.1000000000003638` in `G17` format. As is shown, its `G15` precision value still contains the `36` in the end, and thus the `G15` string conversion result is `1.10000000000036`.\r\n\r\nI guess this is by-design then? Unless we choose to not use `G15` for double-to-string conversion. `G13` would make it work as expected for this case, but, we may still run into another double value that still has some non-zero values at the end of its first 13 digits, and then we will face the same situation \ud83e\udd37 ",
      "created_at": "2021-10-27T02:16:18Z",
      "updated_at": "2021-10-27T02:16:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I guess this is by-design then?\r\n\r\nWhat is behavior in other shells? :-)\r\nAnd may be we should use .Net defaults?",
      "created_at": "2021-10-27T05:00:23Z",
      "updated_at": "2021-10-27T05:01:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The .NET defaults lead to \"more unexpected\" behaviour for folks who are doing simple math, as you end up with more cases like this since they use the G17 format by default (I think?) which tends to show the more precise result, even though it's not really \"correct\" in any real-world scenario except to show the inaccuracies inherent in floating-point arithmetic.\r\n\r\nNot sure there's a really great solution here... maybe our default conversion should be limited to a smaller number of decimal places, like 4 or 5 at most, and if folks want more precision they can look for it explicitly, by calling `.ToString()` themselves. PowerShell isn't really a data-science tool, so those inaccuracies I would tend to think aren't critical for most pwsh users to be aware of.",
      "created_at": "2021-10-27T13:05:04Z",
      "updated_at": "2021-10-27T13:05:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The behavior of this specific issue is the same even on PS 5.1, because `double` uses `G15` by default on .NET Framework.\r\n\r\n![image](https://user-images.githubusercontent.com/127450/139106906-9176c632-7492-4ac5-a020-c74a1efee3f3.png)\r\n",
      "created_at": "2021-10-27T16:36:14Z",
      "updated_at": "2021-10-27T16:36:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Decimal gives expected results, but to change the default would be a breaking change\r\n\r\n![image](https://user-images.githubusercontent.com/11859881/193721906-40cf8aa4-89a4-408b-bd9b-495cca396c65.png)\r\n",
      "created_at": "2022-10-04T02:31:49Z",
      "updated_at": "2022-10-04T02:31:49Z"
    }
  ],
  "created_at": "2021-07-16T23:40:28Z",
  "labels": [
    "Needs-Triage",
    "WG-Engine-Format"
  ],
  "number": 15789,
  "state": "open",
  "title": "Subtraction in PowerShell results in strange result value",
  "updated_at": "2022-10-04T02:31:49Z"
}