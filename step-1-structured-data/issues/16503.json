{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16503",
  "author": "dwtaber",
  "body": "### Summary of the new feature / enhancement\n\nInspired by #16478.  For users unaccustomed to working with flag enums, it may not be clear how to safely add or remove file attributes.  It is not intuitive, for instance, that `$Foo.Attributes += \"Hidden\"` does not _quite_ mean \"make `$Foo` hidden.\"  The fact that this approach will _sometimes_ work (i.e. when the file isn't already hidden) makes it that much more surprising and confusing when it doesn't work.\r\n\r\nI propose adding a pair of methods or cmdlets to serve as a more discoverable/intuitive wrapper for the bitwise operations that are necessary to reliably achieve a result like \"if `$Foo` is hidden, remove that attribute.\"  Adding the `ScriptMethod`s below to `FileInfo` instances seems like a reasonably unobtrusive way to offer this feature.\n\n### Proposed technical implementation details (optional)\n\n```csharp\r\n// System.Management.Automation/engine/TypeTable_Types_Ps1Xml.cs\r\n// Adding to System.IO.FileInfo region of file\r\n\r\nnewMembers.Add(@\"AddAttribute\");\r\nAddMember(\r\n    errors,\r\n    typeName,\r\n    new PSScriptMethod(\r\n        @\"AddAttribute\",\r\n        GetScriptBlock(@\"$this.Attributes = $this.Attributes -bor [System.IO.FileAttributes]$args\"),\r\n        shouldCloneOnAccess: true),\r\n    typeMembers,\r\n    isOverride: false);\r\n\r\nnewMembers.Add(@\"RemoveAttribute\");\r\nAddMember(\r\n    errors,\r\n    typeName,\r\n    new PSScriptMethod(\r\n        @\"RemoveAttribute\",\r\n        GetScriptBlock(@\"$this.Attributes = $this.Attributes -band -bnot [System.IO.FileAttributes]$args\"),\r\n        shouldCloneOnAccess: true),\r\n    typeMembers,\r\n    isOverride: false);\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Make sense to generalize the proposal to Enum-s?\r\nIn the case AddAttribute/RemoveAttribute could be SetFlag, ClearFlag, IsDefined (`-is` ?).",
      "created_at": "2021-11-23T03:44:16Z",
      "updated_at": "2021-11-23T03:44:16Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> Make sense to generalize the proposal to Enum-s? In the case AddAttribute/RemoveAttribute could be SetFlag, ClearFlag, IsDefined (`-is` ?).\r\n\r\nI do think a generalized version makes sense for flag enums.  I think I'd name the methods `AddFlag` and `RemoveFlag` to help distinguish them from methods like `FileInfo.SetAttributes`, which behaves more similarly to an `=` operator rather than a `+=` or `-=` operator.  I like the idea of something like `$foo -is \"FlagName\"`, but I'm wary of overloading `-is` when there's already an `Enum.HasFlag` method.\r\n\r\nHonestly, my first choice would be to overload `+=` and `-=` for flag enums, but that's probably better addressed in a DotNet repo.",
      "created_at": "2021-11-28T00:08:35Z",
      "updated_at": "2021-11-28T00:08:35Z"
    }
  ],
  "created_at": "2021-11-22T18:07:22Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 16503,
  "state": "open",
  "title": "Add simpler way to add/remove file attributes",
  "updated_at": "2021-11-28T07:24:12Z"
}