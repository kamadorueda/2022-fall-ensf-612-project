{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12468",
  "author": "lenihan",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a user I want the \"struct\" keyword so that I can create custom objects derived from System.ValueType.\r\n\r\nI found a workaround using C# code with Add-Type. \r\n\r\nHere is some PowerShell code that shows a limitation of using a class vs struct. The first highlight shows the PowerShell custom class array is not initialized. The second highlight shows how to get the desired behavior using a C# struct.\r\n![image](https://user-images.githubusercontent.com/22015149/80152264-375e9c00-8570-11ea-90a9-1da48623257c.png)\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This falls under #6418 I think, and is one of many requests around class improvements.",
      "created_at": "2020-04-23T23:15:24Z",
      "updated_at": "2020-04-23T23:15:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As a user I want the \"struct\" keyword so that I can create custom objects derived from System.ValueType.\r\n\r\nCan you expand a little bit more about what you're trying to solve?\r\n\r\nI ask because a significant amount of the benefits that structs typically provide are lost in PowerShell due to boxing at just about every step behind the scenes.",
      "created_at": "2020-04-23T23:26:24Z",
      "updated_at": "2020-04-23T23:26:24Z"
    },
    {
      "author": "lenihan",
      "author_association": "NONE",
      "body": "> This falls under #6418 I think, and is one of many requests around class improvements.\r\n\r\nI looked at that previously and did not see any mention of \"struct\"",
      "created_at": "2020-04-23T23:27:32Z",
      "updated_at": "2020-04-23T23:27:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Huh, you're right, I must have grabbed the wrong issue number. Was it #6652? Hmm... close, but structs aren't mentioned there. I know I've seen 'em mentioned before, but not sure where it is at the moment. ",
      "created_at": "2020-04-23T23:34:54Z",
      "updated_at": "2020-04-23T23:34:54Z"
    },
    {
      "author": "lenihan",
      "author_association": "NONE",
      "body": "> > As a user I want the \"struct\" keyword so that I can create custom objects derived from System.ValueType.\r\n> \r\n> Can you expand a little bit more about what you're trying to solve?\r\n> \r\n> I ask because a significant amount of the benefits that structs typically provide are lost in PowerShell due to boxing at just about every step behind the scenes.\r\n\r\nI would like to be able to create an array of custom objects in a single call like I can do with built-in types. \r\n\r\nFor example...\r\n```\r\n$arr = New-Object int[] 1000\r\n$arr[400] = 1234\r\n```\r\n\r\nIf I had the \"struct\" keyword, I would be able to do this...\r\n```\r\nstruct MyPoint {[int]$x; [int]$y}\r\n$arr = New-Object MyPoint[] 1000\r\n$arr[400].x = 1234\r\n$arr[400].y = 4321\r\n```\r\n...instead of...\r\n```\r\nclass MyPoint {[int]$x; [int]$y}\r\n$arr = New-Object MyPoint[] 1000\r\n0..999 | % {$arr[$_] = New-Object MyPoint}\r\n$arr[400].x = 1234\r\n$arr[400].y = 4321\r\n```\r\n",
      "created_at": "2020-04-23T23:52:38Z",
      "updated_at": "2020-04-23T23:52:38Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @lenihan - it would help us to understand your request if you can explain what you want to do with structs that you can't already do with classes. What scenario are you trying to achieve that requires this  new feature? What scenarios do you have that are blocked without it? Thanks.",
      "created_at": "2020-04-24T00:32:36Z",
      "updated_at": "2020-04-24T00:32:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm not sure what here requires the use of structs. You can do this without even using classes if you just need custom objects.\r\n\r\n```ps1\r\n# with classes\r\nclass MyPoint { $x = 0; $y = 0 }\r\n$array = foreach ($i in 1..1000) { [MyPoint]::new() }\r\n\r\n# without classes\r\n$array = foreach ($i in 1..1000) { [PSCustomObject]@{ x = 0; y = 0 } }\r\n```",
      "created_at": "2020-04-24T00:47:09Z",
      "updated_at": "2020-04-24T00:49:07Z"
    },
    {
      "author": "lenihan",
      "author_association": "NONE",
      "body": "@bpayette @vexx32 \r\nHere is what I want to do...\r\n- I want to load a 3d model that is made up of points (X,Y,Z).\r\n- The models can be quite large (>10,000,000 points)\r\n- I would like to like to allocate the space for the array of points via a single call. For example, ```$arr = New-Object Point[] 10000000```\r\n- I would like to read or modify the array of points. For example, ```Write-Host $arr[124232].X``` or ```$arr[9242422].Y = 1232.232```\r\n\r\nThoughts?",
      "created_at": "2020-04-24T07:20:39Z",
      "updated_at": "2020-04-24T07:20:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Thoughts?\r\n\r\nHonestly that's one of the few situations where I will say PowerShell just isn't really going to work. The overhead of an *optimized* variable lookup alone could choke at 10 million data points, let alone the dynamic indexing, boxing, etc.\r\n\r\nEven C# might not be great for that.  Unless you're intimately familiar with when a struct would be copied, when to use `ref` or `Span<T>` or realistically unmanaged pointers, that's still going to be very difficult write with acceptable performance.\r\n\r\nWhen you're looking at that kind of scale you even need to start thinking about things like skipping the implicit bounds check of a normal array index operation to squeeze every inch of performance you can.  When you're analyzing performance at *that* level, PowerShell just isn't part of the conversation.",
      "created_at": "2020-04-24T13:33:39Z",
      "updated_at": "2020-04-24T13:34:22Z"
    },
    {
      "author": "lenihan",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\nI already have C# code that can load large datasets quickly using unmanaged pointers.\r\n\r\nIs it possible to present that data in powershell as an array that can be accessed/modified (ie ```$arr[221324] = 1.234```).",
      "created_at": "2020-04-24T15:04:51Z",
      "updated_at": "2020-04-24T15:04:51Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can implement a wrapper class (in C#) with an indexer that accesses the unmanaged pointer",
      "created_at": "2020-04-24T15:11:53Z",
      "updated_at": "2020-04-24T15:11:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can only think PowerShell call C# API with struct parameter. This looks like Span<T> support. Today it is an edge case.",
      "created_at": "2020-04-24T15:41:11Z",
      "updated_at": "2020-04-24T15:41:11Z"
    }
  ],
  "created_at": "2020-04-23T21:40:52Z",
  "number": 12468,
  "state": "open",
  "title": "Feature Request: Add support for struct",
  "updated_at": "2020-04-24T15:41:21Z"
}