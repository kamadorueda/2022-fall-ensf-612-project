{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2014",
  "author": "dlwyatt",
  "body": "Now that we've got cross-platform PowerShell, this is a quality of life improvement for script authors who want to make code compatible across Windows and Linux.  In the current implementation (on Windows), if you want to join paths multiple levels deep, you'd do this:\n\n``` posh\nJoin-Path $someParentPath 'child1\\child2\\child3'\n```\n\nSince you knew what the entire child path needed to be, there was no need for \"join\" logic there.  Now, we'd prefer to see a path completely built up with the proper directory separator character for the platform.  That would have looked something like this mess:\n\n``` posh\nJoin-Path $someParentPath (Join-Path child1 (Join-Path child2 child3))\n```\n\nWith this PR, it becomes much more pleasant:\n\n``` posh\nJoin-Path $someParentPath child1 child2 child3\n```\n\nQuestion for the team:  do I need to update JoinPathActivity.cs in this PR to reflect the new `string[]` parameter type as well, or do those workflow activity files get automatically regenerated later?\n",
  "closed_at": "2016-08-31T20:51:04Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@dlwyatt**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-08-22T15:02:09Z",
      "updated_at": "2016-08-22T15:02:09Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We have a tool to update the workflow activity files that we run periodically so that you don't need to worry about it every time you add a new parameter to a cmdlet.\n",
      "created_at": "2016-08-22T15:19:06Z",
      "updated_at": "2016-08-22T15:19:06Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Travis CI build blew up, not sure why.\n",
      "created_at": "2016-08-22T15:53:39Z",
      "updated_at": "2016-08-22T15:53:39Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We've discussed this PR some internally, here is a summary - just points for discussion at this point.\n- The breaking change could avoided by added a new parameter like `AdditionalChildPath` with `ValueFromRemainingArguments = true`.\n- `ChildPath` accepting ValueFromRemainingArguments can be confusing, e.g. `Join-Path root d1,d2` would work like `Join-Path root \"d1 d2\"`\n",
      "created_at": "2016-08-22T21:37:42Z",
      "updated_at": "2016-08-22T21:37:42Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "> The breaking change could avoided by added a new parameter like AdditionalChildPath with ValueFromRemainingArguments = true.\n\nTrue.  The output from `Get-Command` / `Get-Help` would be a little bit more cluttered, but that's no big deal if there's concern about changing existing parameter types.  (There might also be weird situations where someone leaves ChildPath empty or null but passes values to AdditionalChildPaths.  What's the proper behavior there?  `root//additional/child/paths` or `root/additional/child/paths`?)\n\n>  ChildPath accepting ValueFromRemainingArguments can be confusing, e.g. Join-Path root d1,d2 would work like Join-Path root \"d1 d2\" \n\nNot sure I understand this one.  Did you mean `Join-Path \"d1\" \"d2\"`, or was the single string literal intended?  How is this different from any other parameter with `ValueFromRemainingArguments` enabled?\n\nPersonally, I like having `ValueFromRemainingArguments`.  I don't know if I'm in the minority on this, but `Join-Path` is one of the cmdlets that I always use with arguments passed by position rather than by name.  It would be more confusing to me to have to remember where to start including commas, instead of having a simpler call.  Assuming we leave `-ChildPath` alone and add a third parameter, the calls look like:\n\n``` posh\nJoin-Path one two three,four,five\n\n# versus\n\nJoin-Path one two three four five\n```\n\nI think the second syntax looks much nicer (and less error prone), but even if I had to go with the first option, it would still be useful.\n",
      "created_at": "2016-08-22T22:46:42Z",
      "updated_at": "2016-08-22T22:46:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "No, I meant what I wrote - try it:\n\n``` powershell\n#57 PS> & {\n>>     param(\n>>         [string[]]\n>>         [Parameter(Position=0)]\n>>         $Path,\n>>\n>>         [string[]]\n>>         [Parameter(Position=1, ValueFromRemainingArguments)]\n>>         $Extra)\n>>     $Extra.Count;\n>>     $Extra | % { \"arg: $_\"}\n>> } root aa,bb\n1\narg: aa bb\n```\n\nI do think your example is fine w/ no commas, but folks do learn to use commas, and sometimes it's surprising. This isn't specific to your usage, it applies to `ValueFromRemainingArguments` in general.\n",
      "created_at": "2016-08-22T23:20:10Z",
      "updated_at": "2016-08-22T23:20:10Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "That doesn't make any sense. Seems like a bug in the parameter binder to me.  It shouldn't matter whether you pass remaining arguments or an explicit array, both should wind up with identical values in the command. \n\n> On Aug 22, 2016, at 7:20 PM, Jason Shirk notifications@github.com wrote:\n> \n> No, I meant what I wrote - try it:\n> \n> #57 PS> & {\n> \n> > > ```\n> > > param(\n> > >     [string[]]\n> > >     [Parameter(Position=0)]\n> > >     $Path,\n> > > \n> > >     [string[]]\n> > >     [Parameter(Position=1, ValueFromRemainingArguments)]\n> > >     $Extra)\n> > > $Extra.Count;\n> > > $Extra | % { \"arg: $_\"}\n> > > ```\n> > > \n> > > } root aa,bb\n> > > 1\n> > > arg: aa bb\n> > > I do think your example is fine w/ no commas, but folks do learn to use commas, and sometimes it's surprising. This isn't specific to your usage, it applies to ValueFromRemainingArguments in general.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
      "created_at": "2016-08-22T23:36:34Z",
      "updated_at": "2016-08-22T23:36:34Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Interestingly, this problem doesn't affect cmdlets, just PowerShell functions:\n\n``` posh\n & {\n     param(\n         [string[]]\n         [Parameter(Position=0)]\n         $Path,\n\n         [string[]]\n         [Parameter(Position=1, ValueFromRemainingArguments)]\n         $Extra)\n     $Extra.Count;\n     for ($i = 0; $i -lt $Extra.Count; $i++)\n     {\n        \"${i}: $($Extra[$i])\"\n     }\n } root aa,bb\n\n<#\n1\n0: aa bb\n#>\n\nAdd-Type -OutputAssembly $env:temp\\testBinding.dll -TypeDefinition @'\n    using System;\n    using System.Management.Automation;\n\n    [Cmdlet(\"Test\", \"Binding\")]\n    public class TestBindingCommand : PSCmdlet\n    {\n        [Parameter(Position = 0)]\n        public string Root { get; set; }\n\n        [Parameter(Position = 1, ValueFromRemainingArguments = true)]\n        public string[] Extra { get; set; }\n\n        protected override void ProcessRecord()\n        {\n            WriteObject(Extra.Length);\n            for (int i = 0; i < Extra.Length; i++)\n            {\n                WriteObject(String.Format(\"{0}: {1}\", i, Extra[i]));\n            }\n        }\n    }\n'@\n\nImport-Module $env:temp\\testBinding.dll\n\nTest-Binding root aa,bb\n\n<#\n2\n0: aa\n1: bb\n#>\n```\n",
      "created_at": "2016-08-23T15:38:05Z",
      "updated_at": "2016-08-23T15:39:08Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Logged issue #2035 for the different binding behavior between cmdlets and functions.\n",
      "created_at": "2016-08-23T15:52:24Z",
      "updated_at": "2016-08-23T15:52:24Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Binding bug should be fixed in #2038 .\n",
      "created_at": "2016-08-23T19:58:59Z",
      "updated_at": "2016-08-23T19:58:59Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Now that the binder thing is sorted out (even if the other PR isn't accepted due to being classified as a breaking change, it doesn't affect the Join-Path cmdlet anyway), looking back at this one.  Would you prefer to change `ChildPath` back to the way it was and introduce a new parameter instead?\n\nIf so, what's your preference for behavior if someone passes arguments to the new parameter, but `ChildPath` is null or empty?\n- Throw an error.\n- Build the path with an empty element.  (`/root//additional/paths')\n- Build the path, ignoring the fact that `ChildPath` is empty.  (`/root/additional/paths`)\n\nCome to think of it, the same question applies if someone passes empty strings at any point in the new parameter.  Ignore them, or have some doubled separators in the output?  `/root/one//three` versus `/root/one/three`.\n",
      "created_at": "2016-08-23T23:56:52Z",
      "updated_at": "2016-08-23T23:56:52Z"
    },
    {
      "author": "mwrock",
      "author_association": "CONTRIBUTOR",
      "body": ":+1:  I really like this @dlwyatt! This style is similar to ruby's `File.join` that takes `N` strings and just joins them all. It always felt more concise and natural than powershell's current implementation.\n",
      "created_at": "2016-08-24T01:02:17Z",
      "updated_at": "2016-08-24T01:02:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Regarding $null entries - it seems like it should be an a terminating error. Note that `Join-Path` supports piped arguments:\n\n``` PowerShell\nPS> 'a','b' | Join-Path -ChildPath c\na\\c\nb\\c\n```\n\nAnd $null results in a non-terminating error.  That said, if there are any `$null` values in `-ChildPath`, nothing from the pipeline would work, so a single terminating error seems better than multiple non-terminating errors.\n",
      "created_at": "2016-08-24T21:34:41Z",
      "updated_at": "2016-08-24T21:34:41Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "`'a','b' | Join-Path -ChildPath $null` works fine today, you get this:\n\n```\na\\\nb\\\n```\n\nFor whatever reason, `ChildPath` is marked as `ValueFromPipelineByPropertyName`, so if we were going to produce errors about it, nonterminating is probably the correct option.  Also, `ChildPath` has `[AllowNull()]` but `Path` does not.  No idea why they are different, but I left that alone.  Only difference now is that you can have multiple `ChildPath` strings, and there are a few options for how to handle null / empty values in the middle of that array rather than at the end.\n\nI'm leaning toward ignoring empty values unless they're at the end of the list, in which case we'll go ahead and tack on a trailing separator to keep behavior consistent with today.\n",
      "created_at": "2016-08-24T23:48:00Z",
      "updated_at": "2016-08-24T23:48:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Well, I can't say I like it, but it's at least consistent with string.Join:\n\n```\nPS> [string]::Join(\"\\\", 'a', [NullString]::Value, 'c')\na\\\\c\n```\n",
      "created_at": "2016-08-24T23:51:50Z",
      "updated_at": "2016-08-24T23:51:50Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "True, but the benefit of Join-Path is that you don't have dumb logic like that.  It looks to see if either of the strings have leading / trailing separators already so it doesn't double them up.  :)\n\n```\nJoin-Path '\\a\\b\\' '\\c\\d'\n\\a\\b\\c\\d\n```\n",
      "created_at": "2016-08-24T23:55:55Z",
      "updated_at": "2016-08-24T23:55:55Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "In fact, that's how `SessionState.Path.Combine` is already working, so I'd have to go out of my way to wind up with doubled separators in the string.  Seems weird to add extra code to produce goofy output, so problem solved?\n\n```\n$path = ''\n$array = 'a', [nullstring]::Value, 'c'\nforeach ($p in $array) { $path = $ExecutionContext.SessionState.Path.Combine($path, $p) }\n$path\n\na\\c\n```\n",
      "created_at": "2016-08-24T23:57:04Z",
      "updated_at": "2016-08-24T23:57:24Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "As discussed, moved new code to a new parameter.  Didn't bother putting a default value back on ChildPath since it's mandatory anyway.\n",
      "created_at": "2016-08-27T06:32:43Z",
      "updated_at": "2016-08-27T06:32:43Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Closed via 22aac12 - I deleted a blank line between the comments and a property.\n",
      "created_at": "2016-08-31T20:51:04Z",
      "updated_at": "2016-08-31T20:51:04Z"
    }
  ],
  "created_at": "2016-08-22T15:02:05Z",
  "number": 2014,
  "state": "closed",
  "title": "Join multiple paths in one call to Join-Path",
  "updated_at": "2017-10-12T18:25:54Z"
}