{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15313",
  "author": "adityapatwardhan",
  "body": "A crash happens when a hosted application using PowerShell SDK have couple of statements added.\r\n\r\nThe code for the application looks like:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    var ps = System.Management.Automation.PowerShell.Create();\r\n    ps.Commands.Clear();\r\n\r\n    var t = Task.Run(() => { Thread.Sleep(3000); ps.Stop(); ps.Dispose(); });\r\n\r\n     ps.Commands.AddCommand(\"Import-Module\").AddArgument(\"PackageManagement\")\r\n      .AddStatement()\r\n      .AddScript(\"Get-Childitem -Path '~' -Recurse\")\r\n      .AddStatement()\r\n      .AddScript(\"Get-Childitem -Path '~' -Recurse\");\r\n\r\n    var result = ps.InvokeAsync();\r\n\r\n    Task.WaitAll(result);\r\n\r\n    foreach(dynamic r in result.Result)\r\n    {\r\n        Console.WriteLine($\"{r.FullName}\");\r\n    }\r\n}\r\n```\r\n\r\nThe expectation is that we get a `PipelineStoppedException` and not a a crash.\r\n\r\nThe SDK version used is `7.1.3`.\r\n\r\n## Steps to reproduce\r\n\r\n```none\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nPipelineStoppedException\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nSystem.Management.Automation.PSInvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Objects cannot be added to a closed buffer. Make sure the buffer is open for Add and Insert operations to succeed.\r\n  Source=System.Management.Automation\r\n  StackTrace:\r\n   at System.Management.Automation.PSDataCollection`1.InternalInsertItem(Guid psInstanceId, Int32 index, T item)\r\n   at System.Management.Automation.PSDataCollection`1.InternalAdd(Guid psInstanceId, T item)\r\n   at System.Management.Automation.PSDataCollection`1.Add(T item)\r\n   at System.Management.Automation.PowerShell.AppendExceptionToErrorStream(Exception e)\r\n   at System.Management.Automation.PowerShell.BatchInvocationWorkItem(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\n## Environment data\r\n```none\r\nSDK version `7.1.3`\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@JamesWTruher - knows whats going on here. `Stop` stops the current command not the whole execution.",
      "created_at": "2021-05-19T21:42:51Z",
      "updated_at": "2021-05-19T21:42:51Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "The expectation of the app developer is to stop all pipelines that are invoked asynchronously. The `Stop` API as documented stops the current command. So when there are more commands in the pipeline and `Dispose` is called, we get a `PSInvalidOperationException`. \r\n\r\n**Feature enhancement** is to add new API for overloading `Stop` which will take a enum parameter for either stopping the current command or the whole pipeline.\r\n\r\nWorkaround is to add `Dispose()` after the `Task.WaitAll()` instead of in the Task, this will make sure that after cancelling the current command, the next command completes.\r\n\r\nIf the intention is to stop all the commands, then they need to be in a single statement. So instead of `AddCommand().AddStatement().AddCommand()`, it should be changed to `AddScript(<command1>; <command2>; <command3>)`",
      "created_at": "2021-05-19T22:49:21Z",
      "updated_at": "2021-05-19T22:49:21Z"
    },
    {
      "author": "et1975",
      "author_association": "NONE",
      "body": "A curious aspect is that it doesn't matter where in the queue the current command is. Even if it's the last command `Stop` will still crash. This can be seen with this little example:\r\n\r\n```csharp\r\n        public static int Main () {\r\n            var ps = PowerShell.Create();\r\n            ps.AddCommand(\"Import-Module\").AddArgument(\"PackageManagement\")\r\n              .AddStatement()\r\n              .AddScript(\"Get-ChildItem -Path '~' -Recurse\");\r\n            var t = Task.Run(() => { Thread.Sleep(4_000); ps.Commands.Clear(); ps.Stop(); ps.Dispose(); } );\r\n            try {\r\n                ps.InvokeAsync().Wait();\r\n            } catch {}\r\n            return 0;\r\n        }\r\n```\r\nAdjust the timeout any way you like, the process will still crash. As you can see I also tried clearing the commands before calling `Stop` and `Dispose` - predictably, it does not help.\r\n",
      "created_at": "2021-05-21T13:21:00Z",
      "updated_at": "2021-05-21T13:21:00Z"
    },
    {
      "author": "et1975",
      "author_association": "NONE",
      "body": "Also, would be good to adhere to [ca1065](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065). I.e. `Dispose` should not throw, let alone crash regardless of what the pipelines are doing.",
      "created_at": "2021-06-01T12:21:26Z",
      "updated_at": "2021-06-01T12:21:26Z"
    }
  ],
  "created_at": "2021-04-27T20:06:31Z",
  "number": 15313,
  "state": "open",
  "title": "PowerShell crash with System.Management.Automation.PSInvalidOperationException on hosted PowerShell application",
  "updated_at": "2021-06-01T12:21:26Z"
}