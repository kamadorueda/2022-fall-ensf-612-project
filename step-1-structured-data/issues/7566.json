{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7566",
  "author": "BrucePay",
  "body": "See this  [question on StackOverflow](https://stackoverflow.com/questions/51905423/how-to-explicitly-declare-type-of-a-variable-when-creating-that-variable-with-ne).\r\n\r\nIn the PowerShell language, you can create a type-constrained variable by doing:\r\n```powershell\r\n[int] $isInt = 5\r\n```\r\nhowever there is also a `New-Variable` cmdlet that lets you create variables. For some things, this cmdlet is a superset of what's provided in the language since it lets you create ReadOnly or Constant variables. It does not, however, provide a parameter for setting the attributes, including the type conversion attribute, on the variable at creating time.\r\n\r\nNow you can use the API to create a variable with attributes:\r\n```\r\npsvariable new(string name,\r\n    System.Object value,\r\n    System.Management.Automation.ScopedItemOptions options,\r\n    System.Collections.ObjectModel.Collection[System.Attribute] attributes)\r\n```\r\nand then bind it using\r\n```powershell\r\n$ExecutionContext.SessionState.PSVariable.Set($psvariableObject)\r\n```\r\n\r\nbut then you run into another problem: the type converter attribute type `System.Management.Automation.ArgumentTypeConverterAttribute` is internal so you can't actually create an instance without using private reflection.\r\n\r\nEnvironment data\r\n--------------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I've ran into this in the past and would love to see this added!  Please consider allowing this to be done via the `psvariable` API as well, possibly with a ~~new constructor overload~~ static `Create` method like:\r\n\r\n```diff\r\n public partial class PSVariable\r\n {\r\n+    public static PSVariable Create(\r\n+        string name,\r\n+        object value,\r\n+        ScopedItemOptions options,\r\n+        Collection<Attribute> attributes,\r\n+        Type typeConstraint);\r\n }\r\n```",
      "created_at": "2018-08-20T11:55:00Z",
      "updated_at": "2021-07-09T12:31:45Z"
    },
    {
      "author": "andrzejdz",
      "author_association": "NONE",
      "body": "I'm waiting for this added too.\r\nAt this moment, I use workaround.\r\n\r\nFirst, declare variable in standard way:\r\n```powershell\r\n[int] $isInt = 5\r\n```\r\n\r\nAnd then, set option for it:\r\n```powershell\r\nSet-Variable -Name isInt -Option ReadOnly\r\n```\r\n\r\nResult:\r\n```powershell\r\nPS C:\\> Get-Variable isInt | fl *\r\n\r\n\r\nName        : isInt\r\nDescription : \r\nValue       : 5\r\nVisibility  : Public\r\nModule      : \r\nModuleName  : \r\nOptions     : ReadOnly\r\nAttributes  : {System.Management.Automation.ArgumentTypeConverterAttribute}\r\n```\r\n\r\n### Environment data\r\n```\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.407\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.407\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
      "created_at": "2018-12-16T16:59:06Z",
      "updated_at": "2018-12-16T17:06:08Z"
    },
    {
      "author": "IAmIlliest",
      "author_association": "NONE",
      "body": "Is this really still an open issue?\r\nI've just hit the same problem, and it does still appear to be an open issue, but maybe I missed the documentation somewhere?\r\n\r\nIf not, two years is kind of pushing your luck to be kicking the can down the road on  this, is it not?",
      "created_at": "2021-07-09T06:16:14Z",
      "updated_at": "2021-07-09T06:17:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Is this really still an open issue?\r\n> I've just hit the same problem, and it does still appear to be an open issue, but maybe I missed the documentation somewhere?\r\n\r\nYeah it's still open.\r\n\r\n> If not, two years is kind of pushing your luck to be kicking the can down the road on this, is it not?\r\n\r\nNot really, it's pretty rare to need it and even when you do it's mostly a \"nice to have\".  That doesn't lend well to prioritization. Do you have a particularly compelling use case you could share?",
      "created_at": "2021-07-09T12:24:18Z",
      "updated_at": "2021-07-09T12:24:18Z"
    }
  ],
  "created_at": "2018-08-18T19:15:17Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 7566,
  "state": "open",
  "title": "You should be able to set the type conversion attribute on a variable with New-Variable",
  "updated_at": "2021-07-09T12:31:45Z"
}