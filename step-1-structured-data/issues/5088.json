{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5088",
  "author": "Alextocode",
  "body": "Hello community, \r\n\r\nI am facing an issue when working with using namespace directive in PowerShell.\r\nI would like to use the Timezone implementation of Java.Util for a small project and therefore work with IKVM, what is meant to be a .net Implementation of Java providing various assembly files (.dll)\r\n\r\nI have the following:\r\n\r\n```\r\n[System.reflection.assembly]::unsafeLoadFrom(\"IKVM.OpenJDK.Core.dll\")\r\n[System.reflection.assembly]::unsafeLoadFrom(\"IKVM.OpenJDK.Util.dll\")\r\n```\r\n\r\nSo far so good.\r\n\r\nNow I am trying do to this in first line\r\n\r\n`using namespace Java.Util`\r\n\r\nActually I  am good here as well, but now I would like to do the following:\r\n\r\n`([TimeZone]::getAvailableIDs())  |  { Write-Host $_}`\r\n\r\nIt won't let me do since in PowerShell I have an implicit \"using System\" directive in source code, causing that it will be ambiguous with System.TimeZone\r\n\r\nIt is no problem whenn calling [Java.Util.Timezone] instead but this makes the using directive being redundant.\r\n\r\nProbably my issue is that I can't do an alias for my namespace. \r\nIn C# it would be something like using (namespace) JavaTimezone = Java.Util.Timezone\r\n\r\nDoes similar exist for PowerShell? If not I would like to add it as a feature suggestion.\r\n\r\nP.S: In general I am quite unhappy with being the using directive not very well documented. I believe there do also things exist like \"using type\" and \"using assembly\", but there is no documentation about it.\r\nWhy is that? I'd be glad to use this stuff :)\r\n\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "It would be nice in this scenario if PowerShell supported something like C#'s `global::TimeZone`.  Perhaps `[::Timezone]` or `[global:TimeZone]` or something to indicate to PowerShell it shouldn't prefix w/ `System.` and lookup the type.",
      "created_at": "2017-10-11T21:30:26Z",
      "updated_at": "2017-10-11T22:20:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It would be a breaking change now, but we probably should have not have the implicit `using namespace System` if you have *any* `using namespace` statements.\r\n\r\nWe don't have support for type aliases yet, but the intent was to support `using type TimeZone = Java.Util.TimeZone` - in fact the parser supports this today, but the semantic aspect was never implemented.",
      "created_at": "2017-10-11T22:17:48Z",
      "updated_at": "2017-10-11T22:17:48Z"
    },
    {
      "author": "Alextocode",
      "author_association": "NONE",
      "body": "> It would be a breaking change now, but we probably should have not have the implicit using namespace System if you have any using namespace statements.\r\n\r\nI believe in general this is a good idea, since it would make it equivalent to C# functionality.\r\nHowever it will likely not receive this issue, since System namespace is very likely used in almost any .NET code. I am note a professional developer so I can not really estimate it, but maybe it might make sense that compiler can dynamically recognize the correct class by called method / property name? ...however would probably not really work if accidentally both classes have a property or method with same name.\r\nSo I think it should be made as the classical concept of namespace aliases to resolve name conflicts.\r\n\r\n> We don't have support for type aliases yet, but the intent was to support using type TimeZone = Java.Util.TimeZone - in fact the parser supports this today, but the semantic aspect was never implemented.\r\n\r\nBut sounds quite neat at all. Thumbs up for this. Is PowerShell actually under active development? I can't find information about a planned release, for instance 5.2. I believe that Microsoft released PowerShell core to OpenSource community, but I am not sure.\r\nDoes something like a roadmap for PowerShell exist? :)",
      "created_at": "2017-10-12T18:25:14Z",
      "updated_at": "2017-10-12T18:25:14Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Here is the current [roadmap](https://blogs.msdn.microsoft.com/powershell/2017/07/14/powershell-6-0-roadmap-coreclr-backwards-compatibility-and-more/)",
      "created_at": "2017-10-12T18:31:38Z",
      "updated_at": "2017-10-12T18:31:38Z"
    },
    {
      "author": "Alextocode",
      "author_association": "NONE",
      "body": "@lzybkr \r\nThank you very much Jason. I will read carefully.",
      "created_at": "2017-10-12T21:43:07Z",
      "updated_at": "2017-10-12T21:43:07Z"
    }
  ],
  "created_at": "2017-10-11T20:57:52Z",
  "number": 5088,
  "state": "open",
  "title": "Ambiguous types by namespace can not be resolved by using directive",
  "updated_at": "2017-10-13T08:30:26Z"
}