{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1755",
  "author": "SteveL-MSFT",
  "body": "```powershell\r\n$json = gc project.lock.json -Raw\r\nConvertFrom-Json $json\r\n```\r\n\r\nExpected: PowerShell should be able to parser the json data.\r\nActual: A useless error message which does not tell me what went wrong\r\n\r\n```\r\nConvertFrom-Json : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the\r\n\"name\" argument and run the operation again.\r\nAt line:1 char:1\r\n- ConvertFrom-Json $json\r\n- ~~~~~~~~~~~~~~~~~~~~~~\r\n  - CategoryInfo          : InvalidArgument: (:) [ConvertFrom-Json], PSArgumentException\r\n  - FullyQualifiedErrorId : Argument,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n```",
  "closed_at": "2017-11-15T00:55:25Z",
  "comments": [
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "Bug is due to empty name for json dictionary entry, which appears to be valid by json standards, issue I believe is when converting to psobject:\r\n\r\nExample from the project.lock.json:\r\n\r\n  \"projectFileDependencyGroups\": {\r\n    \"\": [\r\n      \"System.Management.Automation >= 6.0.0-*\"\r\n    ],\r\n\r\nthrown from line 4474 in MshMemberInfo.cs \r\n\r\n                    if (String.IsNullOrEmpty(name))\r\n                    {\r\n                        throw PSTraceSource.NewArgumentException(\"name\");\r\n                    }\r\n\r\n\"Cannot process argument because the value of argument \\\"name\\\" is not valid. Change the value of the \\\"name\\\" argument and run the operation again.\"\r\n\r\nReproducible with the following simple json:\r\n\r\n{\r\n\t\"\": \"Test\"\r\n}\r\n\r\nI am uncertain how to proceed further to fix this issue, hopefully this helps.",
      "created_at": "2016-11-26T21:24:45Z",
      "updated_at": "2016-11-26T21:26:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kittholland thanks for looking into this, best as I can tell per http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf, an empty string as the name is allowed and works in javascript.  I guess the next step is to determine if the issue is in newtonsoft json parser.",
      "created_at": "2016-11-28T17:53:26Z",
      "updated_at": "2016-11-28T17:53:26Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "From what I could see in the debugger, newtonsoft was OK with it, but converting the Jobject into a PSObject failed because the name was empty. ",
      "created_at": "2016-11-28T17:54:47Z",
      "updated_at": "2016-11-28T17:54:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Ok, that makes sense (on why it failed).  A HashTable will accept an empty string key, so it seems we should have PSObject support it as well.  @kittholland are you going to work on a fix?",
      "created_at": "2016-11-28T18:01:55Z",
      "updated_at": "2016-11-28T18:01:55Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "I have not looked deeply into what would be required, but I can give it a try.",
      "created_at": "2016-11-28T18:04:44Z",
      "updated_at": "2016-11-28T18:04:44Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "We should also handle the `Invoke-WebRequest`/`Invoke-RestMethod` scenario where you're able to post a null JSON key as a string or as an object.  ",
      "created_at": "2016-12-08T17:48:32Z",
      "updated_at": "2016-12-08T17:48:32Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I think we still need to fix this one for 6.0.0. Valid JSON should be parsed by ConvertFrom-Json. ",
      "created_at": "2017-05-23T23:31:46Z",
      "updated_at": "2017-05-23T23:31:46Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "One other issue related to this is Invoke-Restmethod will silently fail and return null for valid json that is not PSCustomObject compatible.\r\n\r\nThis can be caused by NULL keys or case sensitive keys.",
      "created_at": "2017-10-14T17:52:22Z",
      "updated_at": "2017-10-14T17:52:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kittholland are you still working on this or should I take it?",
      "created_at": "2017-10-14T18:37:27Z",
      "updated_at": "2017-10-14T18:37:27Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I think I'm out of my depth on a solution for this. Thanks to whoever takes it from here.",
      "created_at": "2017-10-14T19:25:46Z",
      "updated_at": "2017-10-14T19:25:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Forgot about the discussion in https://github.com/PowerShell/PowerShell/pull/2820.  Introducing a json specific type isn't happening in 6.0.0 timeframe.",
      "created_at": "2017-10-16T18:06:35Z",
      "updated_at": "2017-10-16T18:06:35Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Can this issue be closed since PR #5043 provides a workaround via the `-AsHashTable` switch?",
      "created_at": "2017-11-14T19:47:31Z",
      "updated_at": "2017-11-14T19:47:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister agree!",
      "created_at": "2017-11-15T00:55:25Z",
      "updated_at": "2017-11-15T00:55:25Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Any work arounds to this without upgrading PowerShell?\r\n",
      "created_at": "2018-06-07T16:04:57Z",
      "updated_at": "2018-06-07T16:04:57Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "@DarwinJS You can either modify your json to be compatible with PSObjects, or you will need to modify/create a cmdlet to convert from json into hashtables.",
      "created_at": "2018-06-07T16:19:24Z",
      "updated_at": "2018-06-07T16:19:24Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@DarwinJS Since PowerShell Core is side by side and you can even get a self-contained version, you could just call into a newer version of pwsh from an old version of pwsh.",
      "created_at": "2018-06-07T17:08:38Z",
      "updated_at": "2018-06-07T17:08:38Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "This is part of tooling that runs on thousands of machines I don't control and actually needs to be a single script with no public repo dependencies - so I resorted to the -replace method.  Thanks.",
      "created_at": "2018-06-07T20:10:04Z",
      "updated_at": "2018-06-07T20:10:04Z"
    }
  ],
  "created_at": "2016-08-12T18:30:49Z",
  "number": 1755,
  "state": "closed",
  "title": "ConvertFrom-Json fails to parse project.lock.json",
  "updated_at": "2018-06-20T06:18:28Z"
}