{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5051",
  "author": "bergmeister",
  "body": "## PR Summary\r\n\r\nCloses #2188\r\nThis makes it possible to go back to the last directory using 'cd -', which is exactly the same syntax as on Linux shells. \r\nIn contrast to the original proposal, it does not set the environment variable `OLDPWD` but instead uses a bounded stack to store the history in a similar way how Push/Pop-Location do.\r\nA localised error message is given if there is no location history.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed - Issue link: https://github.com/PowerShell/PowerShell-Docs/issues/2476\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-06-26T07:21:39Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Should it be some per-`Runspace` storage rather than per-`Process` environment variable? For example: PowerShell ISE allow to open multiple PowerShell tabs, which all share same process. Should it be one shared last location for all tabs or each tab should have its own last location?",
      "created_at": "2017-10-08T19:58:58Z",
      "updated_at": "2017-10-08T19:58:58Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl Interesting thought and I did not know that the ISE tabs share the same process. +1 for sharing your knowledge. :)\r\nThe reason why it is an environment variable and why its name is `OLDPWD` is because I want to mimic the exact same behaviour as the native `cd -` function does on Unix systems. As far as I understand, PowerShell uses the native `cd` command on Linux/Mac but on Windows uses an alias for `Set-Location`. I am not sure if it is worth the effort of having a Windows specific implementation given the odd/rare use case that someone is cd-ing in different ISE tabs and wants to use `cd -` in a tab other than the current. Also note that the ISE is going to be replaced by VisualStudio Code at some point as far as I have heard. Is there some way of defining the  environment variable only on a per `RunSpace` basis What do other people think?",
      "created_at": "2017-10-08T20:32:15Z",
      "updated_at": "2017-10-08T20:41:16Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "As far as I understand, `cd` can not be native application even for Unix-like shells. That means if you start new process `cd` it change its own working directory and exit, then working directory of parent process (shell) will be unaffected.\r\n\r\nAlso PowerShell ISE is just an example of PowerShell host, which use more than one `Runspace` per `Process`. PowerShell Remote host can be configured to use shared process as well. `Enter-PSHostProcess` create addition `Runspace` in target process. There are modules, which achieve multithreading by using `Runspace`s.\r\n\r\nSimply: there are no rule \"only one `Runspace` per `Process`\", thus any use of shared resource, such as environment variable, should be carefully considered.",
      "created_at": "2017-10-08T21:33:38Z",
      "updated_at": "2017-10-08T21:56:21Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "OK. I see what you mean. My assumption was that `cd -` is only being used interactively and in the same shell. If people were to start using `cd -` in multi-threaded modules then one could argue that this is bad practice and explicit paths should be specified instead.\r\nWould it be a possible workaround to use both environment and 'normal' ([automatic](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-5.1)) variables when setting the value and when getting the value checking only the 'normal' variable? The idea behind still setting the environment variable is consistency on Unix with mixed usage of `cd` and Set-Location.\r\nLet's see what the PowerShell team thinks about this issue.",
      "created_at": "2017-10-08T22:02:32Z",
      "updated_at": "2017-10-08T22:05:42Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "> My assumption was that cd - is only being used interactively and in the same shell.\r\n\r\nEven when `cd -` will be used in only one `Runspace`, other `Runspace`s can do normal `cd something`, which affect subsequent `cd -` in that *only one `Runspace`*.",
      "created_at": "2017-10-08T22:08:16Z",
      "updated_at": "2017-10-08T22:08:16Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I agree with @PetSerAl.  See [PoshRSJobs](https://github.com/proxb/PoshRSJob) for an example of how users can run multiple runspaces in the same process.  Rather than make this an environment variable just make it a session (runspace) variable e.g. `PSOldLocation` or something like that.",
      "created_at": "2017-10-08T22:36:47Z",
      "updated_at": "2017-10-08T22:36:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree with @PetSerAl too - we should take into account many runspaces.\r\n\r\nMain question - Do we really need this in scripts?\r\n```powershell\r\nSet-Location -\r\ncd -\r\n```\r\nlooks very poorly read. Using Push-Location Pop-Location pair looks more readable and understandable.\r\nI think this question is similar to the question of using aliases in an interactive session and banning its in scripts. I'd rather disable `cd -` in scripts immediately.\r\n\r\nNext question - Should we keep a history and implement some step back by \"cd-; cd-; cd -\"?\r\n",
      "created_at": "2017-10-09T09:18:31Z",
      "updated_at": "2017-10-09T09:18:31Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Ok. If you say runspace variable, do you mean we should declare it as an automatic variable or is there a subtle difference? How would one ban its usage in scripts? About the history: the idea is to keep it simple at the moment and another PR could improve it to use a history stack (that is the point about agile development: make something minimal and viable with value that works and then iteratively enhance it)",
      "created_at": "2017-10-09T12:35:52Z",
      "updated_at": "2017-10-09T12:37:00Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> Should we keep a history and implement some step back by \"cd-; cd-; cd -\"?\r\n\r\nAs an example of this, see the PSCX package.  It implements a cd stack that you can backwards navigate with `cd -` and forwards navigate with `cd +` e.g.:\r\n```\r\n[master \u2261 +0 ~1 -0!] ~\\GitHub\\rkeithhill\\PowerShellEditorServices\r\n12:63ms> cd\r\n\r\n     # Directory Stack:\r\n   --- ----------------\r\n     0 C:\\Users\\Keith\\GitHub\\rkeithhill\\PowerShellEditorServices\r\n     1 C:\\Users\\Keith\\GitHub\\dahlbyk\\posh-git\r\n     2 C:\\Users\\Keith\\GitHub\\rkeithhill\\PowerShell\r\n->   3 C:\\Users\\Keith\\GitHub\\rkeithhill\\PowerShellEditorServices\r\n\r\n[master \u2261 +0 ~1 -0!] ~\\GitHub\\rkeithhill\\PowerShellEditorServices\r\n13:58ms> cd -\r\n[master \u21918] ~\\GitHub\\rkeithhill\\PowerShell\r\n14:73ms> cd -0\r\n[master \u2261 +0 ~1 -0!] ~\\GitHub\\rkeithhill\\PowerShellEditorServices\r\n15:74ms> cd +\r\n[rkeithhill/settings-prototype \u2261] ~\\GitHub\\dahlbyk\\posh-git\r\n```\r\nIt also handles two cases that I particularly like:\r\n```\r\n# cd to the directory containing the file\r\n16:47ms> cd $profile\r\n~\\Documents\\WindowsPowerShell\r\n```\r\nand \r\n```\r\n# cd to dir with spaces in path without requiring quoting - something CMD supports\r\n17:5ms> cd c:\\program files\r\nC:\\program files\r\n```\r\n> How would one ban its usage in scripts?\r\n\r\nYou don't.  That isn't something I'd worry about.  However there are other CD type packages out there.  Some allow you to fuzzy match when CD'ing to directories.\r\n",
      "created_at": "2017-10-09T16:08:17Z",
      "updated_at": "2017-10-09T16:08:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we should easily implement the history based on \"Stack\" from the class.\r\n`IsInteractive` can help to block the feature in scripts. We discussed `IsInteractive` in another context (shebang and profile loading). We definitely need it.\r\n@lzybkr Could you please comment?\r\n",
      "created_at": "2017-10-09T18:16:41Z",
      "updated_at": "2017-10-09T18:16:41Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'd prefer a stack as well, though it needs to be bounded. You could start with this [code](https://github.com/lzybkr/PSReadLine/blob/master/PSReadLine/HistoryQueue.cs) from PSReadline.\r\n\r\nI don't think it's necessary to prevent the use of `cd -` in a script - I don't expect it would be used much, and it might occasionally be useful.\r\n\r\n",
      "created_at": "2017-10-09T19:42:23Z",
      "updated_at": "2017-10-09T19:42:23Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I have implemented your suggestions and used the existing stack implementation that pusdh/popd use under the hood to avoid code duplication.",
      "created_at": "2017-10-10T20:20:19Z",
      "updated_at": "2017-10-10T20:20:19Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov If I understand correctly, changing the existing API to use a bounded stack would be a breaking change for pushd/popd. Enhancing the existing API should just be a matter of changing the type from `Stack` to the new `BoundedStack`. Or did you mean something else?",
      "created_at": "2017-10-30T22:29:39Z",
      "updated_at": "2017-10-30T22:29:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister We should _enhance_ the API not _change_. Actually you will use new constructor to set limits, existing code will keep current behavior without limits. This will allow us enhance our *-Location cmdlets and allow customers to use the new API possibilities.",
      "created_at": "2017-10-31T04:09:14Z",
      "updated_at": "2017-10-31T04:09:14Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "+1 for `cd +` to move forward through the stack.",
      "created_at": "2017-11-09T16:11:53Z",
      "updated_at": "2017-11-09T16:11:53Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I will make the requested changes next Monday since I am currently on travel. The `cd +` scenario via popd would not work at the moment because `popd` and `pushd` still use their default stacks, but should this feature not rather be another PR? ",
      "created_at": "2017-11-09T16:45:26Z",
      "updated_at": "2017-11-09T16:45:26Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I guess the real question about `cd +` is how much that would change this implementation. It could be another PR - though you'll change `BoundedStack` quite a bit, it won't be a stack anymore.\r\n\r\nPersonally, I think `pushd -` is sufficient though - did you try it?",
      "created_at": "2017-11-10T05:36:37Z",
      "updated_at": "2017-11-10T05:36:37Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I made your requested changes to initialize in the constructor and changed the history limit to 20.",
      "created_at": "2017-11-15T21:20:42Z",
      "updated_at": "2017-11-15T21:20:42Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@lzybkr  Can you update your review?",
      "created_at": "2018-03-14T01:22:41Z",
      "updated_at": "2018-03-14T01:22:41Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "NB: The test failure in Travis was `Update-Help for module 'PackageManagement'`. I guess this is a sporadic failure or unrelated?",
      "created_at": "2018-04-01T09:36:26Z",
      "updated_at": "2018-04-01T09:36:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see the test failure sporadicly.",
      "created_at": "2018-04-01T11:13:40Z",
      "updated_at": "2018-04-01T11:13:40Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-05-25T22:09:22Z",
      "updated_at": "2018-05-25T22:09:22Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Is there a reason why this PR keeps getting stale? I have always addressed the issues on my side and then everytime everything looks good, the PR becomes dead.\r\nCodeFactor flags up issues in all files that are touched but not necessarily the code that I have touched. Do I have to address that as well now?",
      "created_at": "2018-05-26T09:37:08Z",
      "updated_at": "2018-05-26T09:38:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'd like to see this make it in for 6.1.  I was just setting up a fellow dev to do cross-platform development using WSL/Ubuntu.  We have a build.ps1 script that bootstraps and builds the product on Ubuntu.  After installing pwsh on his Ubuntu instance, he started it up, did a few things, tried `cd -` and was disappointed to see that it didn't work.  So he bounced back to bash and is relying on the fact that the build.ps1 script is shebanged/chmod+x.  Although he doesn't get parameter completion using it like that.  :-(",
      "created_at": "2018-05-26T19:35:23Z",
      "updated_at": "2018-05-26T19:35:23Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I added a documentation issue here since this PR seems to get serious now: https://github.com/PowerShell/PowerShell-Docs/issues/2476",
      "created_at": "2018-05-26T20:03:03Z",
      "updated_at": "2018-05-26T20:03:03Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov There were test failures due it being the full test suite:\r\n![image](https://user-images.githubusercontent.com/9250262/40579972-9a510c5e-612c-11e8-8f73-cabbd77568a4.png)\r\nBut the problem seems to be either sporadic or due to the test suite itself falling over:\r\n![image](https://user-images.githubusercontent.com/9250262/40579975-c02579d8-612c-11e8-9760-91b72adc26c4.png)\r\n",
      "created_at": "2018-05-26T20:35:58Z",
      "updated_at": "2018-05-26T20:35:58Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Those tests seemed to be sporadic and the new build contains 'only' 1 other sporadic failure",
      "created_at": "2018-05-30T21:43:48Z",
      "updated_at": "2018-05-30T21:43:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Fix is ready #6943.",
      "created_at": "2018-05-31T06:04:40Z",
      "updated_at": "2018-05-31T06:04:52Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Any updates on this so that it goes into the next preview for getting some testing exposure before 6.1 goes RTM after that?",
      "created_at": "2018-06-07T17:57:08Z",
      "updated_at": "2018-06-08T18:32:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister I don't understand. Please reword your question.",
      "created_at": "2018-06-08T05:38:31Z",
      "updated_at": "2018-06-08T05:38:31Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@isazonov. Nevermind, I just saw that the next preview is already in the making.\r\nAre there any interests to merge this before 6.1 gets released as RTM?",
      "created_at": "2018-06-08T06:33:42Z",
      "updated_at": "2018-06-08T06:33:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister We are waiting MSFT team sign.",
      "created_at": "2018-06-08T07:17:04Z",
      "updated_at": "2018-06-08T07:17:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @adityapatwardhan Have you any thoughts before we merge?",
      "created_at": "2018-06-22T18:35:57Z",
      "updated_at": "2018-06-22T18:35:57Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt @BrucePay I addressed all your comments",
      "created_at": "2018-06-22T20:23:33Z",
      "updated_at": "2018-06-22T20:23:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we set a absolute record in PR review duration :confused:",
      "created_at": "2018-06-23T05:01:00Z",
      "updated_at": "2018-06-23T05:05:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Thanks for your contribution!",
      "created_at": "2018-06-26T07:31:17Z",
      "updated_at": "2018-06-26T07:31:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Please clarify what is the \"Revert...\" commit?",
      "created_at": "2018-06-29T15:03:37Z",
      "updated_at": "2018-06-29T15:03:37Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I saw this as well and cannot track it back, the PR is still in master (which is good), so I assume this commit either happened on a branch or the revert got reverted afterwards",
      "created_at": "2018-06-29T15:19:16Z",
      "updated_at": "2018-06-29T15:19:16Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I think when you use GitHub's UI to revert a PR, it generates a new commit that reverts **all** the commits since that PR (which is not what we want -- reverting the single commit in the commandline is the better way). That commit is generated on another branch and not merged in, but still references all the other commits and shows up everywhere, which manages to confuse everyone.\r\n\r\nII'm guessing @daxian-dbw initially tried to use the revert button, and has since overridden it in the commandline. So this merge hasn't been reverted, but a revert commit for it was generated and never used.\r\n\r\nI know because I clicked the \"revert\" button once and was answering questions about it for a week.",
      "created_at": "2018-06-29T16:57:58Z",
      "updated_at": "2018-06-29T16:57:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The confusing revert commit comes from https://github.com/PowerShell/PowerShell/pull/7182/commits.\r\nGithub automatically generates some empty commits when I revert #7151\r\n\r\nChanges from this PR is intact, so don't worry :)",
      "created_at": "2018-06-29T18:47:00Z",
      "updated_at": "2018-06-29T18:47:34Z"
    }
  ],
  "created_at": "2017-10-07T12:01:30Z",
  "number": 5051,
  "state": "closed",
  "title": "Add location history for Set-Location to enable 'cd -' scenario (issue #2188)",
  "updated_at": "2018-10-15T21:53:56Z"
}