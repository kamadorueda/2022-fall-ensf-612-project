{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15080",
  "author": "agowa338",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a user I want to provide a pure script blocks to C# AsyncCallback functions so that the functions can be called via PowerShell calls. Currently PowerShell crashes because it tries to invoke the Delegate without a runspace.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nWhen casting a script block to a System.AsyncCallback add code to initialize the runspace automatically.\r\n\r\n```\r\n$http = [System.Net.HttpListener]::new()\r\n$http.Prefixes.Add(\"http://127.0.0.1:9999/\")\r\n$http.Start()\r\n[Console]::WriteLine(\"Listening...\")\r\n\r\n$callback = [System.AsyncCallback]{param($asyncResult); [System.Net.HttpListener]$listener = [System.Net.HttpListener] $asyncResult.AsyncState; [System.Net.HttpListenerContext]$context = $listener.EndGetContext($asyncResult); [System.Net.HttpListenerRequest]$request = $context.Request; [System.Net.HttpListenerResponse]$response = $context.Response; [string]$responseString = \"<HTML><BODY>Hello World!</BODY></HTML>\"; [byte[]]$buffer = [System.Text.Encoding]::UTF8.GetBytes($responseString); $response.ContentLength64 = $buffer.Length; [System.IO.Stream]$output = $response.OutputStream; $output.Write($buffer,0,$buffer.Length); $output.Close() }\r\n[System.IAsyncResult]$result = $http.BeginGetContext($callback, $http)\r\n\r\n$uri = [System.Uri]::new(\"http://127.0.0.1:9999/\")\r\nInvoke-WebRequest -Uri $uri\r\n```\r\n\r\nThis should work as seemingly and with the same \"restrictions\" as `ForEach-Object -Parallel` does in regards to runspace handling.\r\nMaybe a new more lightweight handling that only supports pure functions could be considered for both.",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Currently PowerShell crashes because it tries to invoke the Delegate without a runspace.\r\n\r\nSo the behavior is a little bit more complicated than that, which makes a solution here sort of difficult. Here is the flow:\r\n\r\n1. ScriptBlock is created on Runspace A running on Thread A\r\n2. It's converted to a delegate and passed to `BeginGetContext`\r\n3. The delegate is invoked on Thread B\r\n4. The thread local field `Runspace.DefaultRunspace` is checked to see if Thread B has a runspace associated with it\r\n\ta. If null, throw\r\n\tb. If not null, but not Runspace A, attempt to marshal the invocation *back to Thread A*\r\n\r\n4b makes a fix really difficult here because even if you do spin up a runspace on Thread B, it's still going to try to marshal it back.  That's going to either result in a deadlock or state corruption (#4003). As the user you could strip runspace affinity with `{}.Ast.GetScriptBlock()` and that may be fine, but it may be better to throw then expect folks to know they need to do that.",
      "created_at": "2021-03-22T15:51:37Z",
      "updated_at": "2021-03-22T15:51:37Z"
    }
  ],
  "created_at": "2021-03-21T18:18:41Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 15080,
  "state": "open",
  "title": "Feature Request Async callbacks C# interaction",
  "updated_at": "2021-05-06T18:33:30Z"
}