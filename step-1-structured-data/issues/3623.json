{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3623",
  "author": "kittholland",
  "body": "Currently ConvertFrom-Json returns a PSCustomObject. It would be nice in some cases if you could choose to return a Hashtable instead, perhaps using an -As parameter. Hashtables are often much faster for processing Json document databases compared to having to iterate through object properties.\r\n\r\nThis would also be a possible way to address #1755 . ",
  "closed_at": "2017-10-26T03:08:20Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Can you provide a concrete example where hashtables are superior to an object tree?",
      "created_at": "2017-04-24T04:20:35Z",
      "updated_at": "2017-04-24T04:20:35Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Apart from object size and performance, it may matter with case sensitivity. I have run into issues where I couldn't use the PowerShell cmdlets because the json contained 'Property' and 'property'.\r\n\r\n",
      "created_at": "2017-04-24T06:28:35Z",
      "updated_at": "2017-04-24T06:28:35Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the case sensitivity is one area, empty property names are another area.\r\n\r\nOn the performance side, I would suggest that adding, removing and enumerating properties are all slower/more difficult on a pscustomobject than a hashtable.\r\n\r\n```\r\n$hashTable = @{\r\n    \"1\" = 1\r\n    \"2\" = 2\r\n}\r\n\r\n$object = [pscustomobject]$hashTable\r\n```\r\n\r\n```\r\nMeasure-command {\r\n    Foreach($number in 3..10000)\r\n    {\r\n        $hashTable.Add(\"$number\", $number)\r\n    }\r\n}\r\n\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 63\r\nTicks             : 631145\r\nTotalDays         : 7.30491898148148E-07\r\nTotalHours        : 1.75318055555556E-05\r\nTotalMinutes      : 0.00105190833333333\r\nTotalSeconds      : 0.0631145\r\nTotalMilliseconds : 63.1145\r\n```\r\n\r\n```\r\nMeasure-Command {\r\n    Foreach($number in 3..10000)\r\n    {\r\n        $object | Add-Member -MemberType NoteProperty -Name \"$number\" -Value $number\r\n    }\r\n}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 1\r\nMilliseconds      : 76\r\nTicks             : 10769741\r\nTotalDays         : 1.24649780092593E-05\r\nTotalHours        : 0.000299159472222222\r\nTotalMinutes      : 0.0179495683333333\r\nTotalSeconds      : 1.0769741\r\nTotalMilliseconds : 1076.9741\r\n\r\n```",
      "created_at": "2017-04-24T16:01:08Z",
      "updated_at": "2017-04-24T16:01:08Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I like the idea of an `-AsHashtable` option or something similar. Whenever I enumerate all the property names and then walk them, it is very inefficient.  Even more so when I am recursively walking the object to turn it into a nested hashtable. \r\n\r\nThere is also not a simple way to test for a property on an object. Sometimes you can't just test for `$null` because the value could be `$null`. The existence of a property is different than a `$null` property value.\r\n\r\n    [bool]( $object.PSobject.Properties.name -match $property )\r\n    $hashtable.ContainsKey($property)\r\n\r\nI also don't like using a dot property to a variable to access properties this way. A minor gripe but something that I like to avoid because at a glance it is hard to tell if that is intentional or a typo.\r\n\r\n    $object.$property\r\n    $hashtable[ $property ]\r\n\r\nAlternatively, we could make `PSCustomObject` better at property enumeration, addition, and removal.",
      "created_at": "2017-04-25T08:51:48Z",
      "updated_at": "2017-04-25T08:52:34Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "@KevinMarquette That is not exactly true that there is no simple way to test for a property.\r\n\r\n```\r\n$obj = New-Object pscustomobject -Property @{a = 1; b = 2}\r\n$obj.psobject.Properties.Match(\"a\")\r\n$obj.psobject.Properties.Match(\"c\")\r\n```\r\n\r\nSeems simple enough?",
      "created_at": "2017-05-13T19:26:58Z",
      "updated_at": "2017-05-13T19:28:32Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for that example. I had previously overlooked the match keyword there. I will start using that one.\r\n",
      "created_at": "2017-05-13T20:08:46Z",
      "updated_at": "2017-05-13T20:08:46Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "+1 for this request. \r\n\r\nFor my use case, I tend to leverage `JSON` for config files shared between different languages (or even module settings for certain things); I typically will have a function (let's say `Export-Config`) that accepts a hashtable as input and pipes to ConvertTo-Json prior to setting in a file. `PSObjects` and `Hashtables` result in the same `JSON` structure for my use case, so I opt to have the input as a `Hashtable` to save some characters and allow me to build that input value with less keystrokes. \r\n\r\nWhen I want to reimport that config and make updates with a separate function (let's say `Update-Config`), I have to adjust the function logic and deal with `Add-Member` vs just stating `$config[\"Map\"] = $NewSettings`. Also in agreeance with Kevin in that having `$hashtable[ $property ]`  buried in a script is easier to identify as what it is compared to `$object.$property`.\r\n\r\nSpeed differences between the two are also evident when dealing with very large object arrays vs large hashtables to the point where I will almost always build a hashtable from the resulting object array for lookup speed gains compared to looking up against the object array directly.",
      "created_at": "2017-08-03T14:48:52Z",
      "updated_at": "2017-08-03T14:48:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Leave a comment",
      "created_at": "2017-10-26T03:08:20Z",
      "updated_at": "2017-10-26T03:08:20Z"
    }
  ],
  "created_at": "2017-04-22T00:44:50Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 3623,
  "state": "closed",
  "title": "Add option to ConvertFrom-Json as a Hashtable",
  "updated_at": "2017-10-26T03:08:20Z"
}