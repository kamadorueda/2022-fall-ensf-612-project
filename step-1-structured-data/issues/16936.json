{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16936",
  "author": "JustinGrote",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n1. Make a module, and set Prefix to 'Test'\r\n2. `Import-Module MyTestModule -Prefix ''`\r\n3. All commands will still have test prefix\r\n\r\nThis is because the prefix test checks for IsNullOrEmpty instead of just null.\r\n```\r\n            bool usePrefix = !string.IsNullOrEmpty(prefix);\r\n```\r\n\r\nAs such it is impossible to override the prefix which affects the ability to write pester tests on modules, etc. and use the original function names so that things like references and go to definition work in IDEs like vscode.\r\n\r\n### Workaround\r\nMake a secondary manifest that references the same module but does not have the prefix specified.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nCommands without prefix\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nCommands have default prefix\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS 7.2.1\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As alternative for discussion - introduce new parameter (-NoPrefix/-RemovePrefix).\r\n\r\nAlso question for discussion - is the prefix a strong contact from module author?",
      "created_at": "2022-03-02T07:37:30Z",
      "updated_at": "2022-03-02T07:37:30Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I don't think it should be a strong contract. A \"proper\" module (at least script wise) I write as if it has no prefix, all the commands and references are of the non-prefixed version. If a prefix is specified, everything continues to work as expected. The user can specify multiple prefixes potentially and import the module multiple times to address multiple target scenarios, so they can use `Get-SourceMyFunction` and `Get-DestinationMyFunction` for instance if the connection context is kept at module scope.\r\n\r\nI do think that the specified bool should not be IsNullOrEmpty but simply a null check, so that an empty '' can indicate `I don't want a prefix`, however I understand that is more breaking than `-NoPrefix` so I\"m fine with that too.\r\n\r\nMy current main issue pain point here is in Pester Testing, the only way I can specify my pester test commands after importing the module is to make a completely different non-prefixed manifest, or use a prefix (but then in VSCode, my GoTo references no longer work). I want to use the same non-prefixed commands that I have defined during testing without having to make an entirely separate manifest file.",
      "created_at": "2022-03-09T17:18:52Z",
      "updated_at": "2022-03-09T17:20:13Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "I made the following workaround, the regexes are fragile but it works for my use case\r\n```powershell\r\nfunction Import-ModuleWithoutPrefix {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(Mandatory, ValueFromPipeline)]$ManifestPath,\r\n    [Switch]$Force,\r\n    $TempPath = 'TEMP:'\r\n  )\r\n  $path = Resolve-Path $ManifestPath\r\n  $manifestDir = Split-Path $Path -Parent\r\n  $fileName = [io.path]::GetFileNameWithoutExtension($path)\r\n  #Manifest file name must be the same\r\n  $tempPath = \"TEMP:\\$(New-Guid)\\$fileName.psd1\"\r\n\r\n  $manifestContent = Get-Content -Raw $path\r\n  $rootModuleRegex = '(?<=RootModule\\s*?=\\s*?[''\"])(.+?)(?=[''\"])'\r\n  if ($manifestContent -notmatch $rootModuleRegex) {\r\n    throw \"Could not find RootModule entry in manifest $path\"\r\n  }\r\n  $rootModulePath = [io.path]::IsPathRooted($matches[1]) ? $matches[1] : $(Join-Path $manifestDir $matches[1])\r\n  $resolvedRootModulePath = Resolve-Path $rootModulePath\r\n  $manifestContent = $manifestContent -replace $rootModuleRegex, $resolvedRootModulePath\r\n\r\n  #Remove any prefix entry present. If this doesn't exist we don't error out\r\n  $manifestContent = $manifestContent -replace 'DefaultCommandPrefix\\s*?=\\s*?[''\"].+?[''\"]'\r\n\r\n  #This should be unique\r\n  New-Item -ItemType File -Force -Path $tempPath -Value $manifestContent | Out-Null\r\n\r\n  Write-Verbose \"Importing module $path without prefix from $tempPath\"\r\n  Import-Module $tempPath -Force:$Force -PassThru\r\n}\r\n```",
      "created_at": "2022-03-10T22:25:57Z",
      "updated_at": "2022-03-10T22:25:57Z"
    }
  ],
  "created_at": "2022-02-28T19:18:20Z",
  "number": 16936,
  "state": "open",
  "title": "Import-Module -Prefix '' on a module with a Default Prefix defined does not remove the prefix",
  "updated_at": "2022-03-10T22:25:57Z"
}