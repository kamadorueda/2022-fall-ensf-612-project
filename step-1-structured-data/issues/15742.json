{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15742",
  "author": "scps-github",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThis is my first bug report so just want to note:\r\n1.  I love Powershell and have been using it productively for many years. I\r\n    deeply appreciate the time and effort of everyone at MSFT and in the\r\n    community.\r\n2.  I apogise if this is a duplicate - did my best to search for an existing\r\n    issue.\r\n3.  My assessment of this bug may be misinformed or simply wrong.\r\n4.  My knowledge of C# and Powershell's inner workings are lacking, but I am\r\n    willing to put time into providing further information and/or prodding at\r\n    source if anyone wishes to point me in the right direction. I had a scroll\r\n    through some relevant-sounding files in\r\n    `PowerShell/src/Microsoft.PowerShell.ConsoleHost/host/msh/` but frankly\r\n    have no idea what I'm even looking for.\r\n5.  Sorry if I've screwed up anything else about the bug reporting process -\r\n    let me know how to do it better next time.\r\n\r\nThis bug had me jumping at shadows in a somewhat more complicated structure\r\nuntil I realised my simple error (a mis-assigned variable) was actually\r\npositioned elsewhere from where it was being reported by the Powershell\r\ninterpreter.\r\n\r\nI'm not especially familiar with Powershell exceptions, but from my limited\r\nprodding it seems that `$error[0].Exception` contains the correct error message\r\n(divide by zero), but the position of the error in the script as reported in\r\n`$error[0].InvocationInfo` appears to be wrong in this circumstance.\r\n\r\nThe bug seems to arise when a key/property assignment generates an exception.\r\nI first observed it in a PSCustomObject but you can see here it occurs in a\r\nhashtable, so I expect it would appear in other contexts too. There seem to be\r\ntwo slightly different forms:\r\n\r\nThe general case is that the exception generated by the key/property is\r\nattributed to the parent object. This isn't necessarily wrong, but perhaps\r\nisn't ideal. Compare for instance:\r\n\r\n    . {\r\n        @{\r\n            key1 = throw\r\n            key2 = 'unrelated to error'\r\n        }\r\n    }\r\n\r\nOutput:\r\n\r\n    Exception:\r\n    Line |\r\n       3 |          key1 = throw\r\n         |                 ~~~~~\r\n         | ScriptHalted\r\n\r\nthis is a little more helpful than:\r\n\r\n    . {\r\n        @{\r\n            key1 = 1/0\r\n            key2 = 'unrelated to error'\r\n        }\r\n    }\r\n\r\nOutput\r\n\r\n    ParentContainsErrorRecordException:\r\n    Line |\r\n       2 |      @{\r\n         |      ~~\r\n         | Attempted to divide by zero.\r\n\r\nBut the real problem is when there is a command substitution (i.e. `$(..)`)\r\nin another key/property that comes before the key/property that generates\r\nthe exception - in this case the exception is incorrectly attributed to the\r\ncompletely unrelated command substitution.\r\n\r\nbelow are a few more illustrative permutations:\r\n\r\n    # exception reported at outer object when exception comes first\r\n    . {\r\n        @{                                  # exception reported line 2\r\n            key1 = 1/0                      # exception actually on line 3\r\n            key2 = $('unrelated to error')\r\n        }\r\n    }\r\n\r\n    # exception reported at unrelated key when command substitution comes first\r\n    . {\r\n        @{\r\n            key1 = $('unrelated to error')  # exception reported line 3\r\n            key2 = 1/0                      # exception actually on line 4\r\n        }\r\n    }\r\n\r\n    # exception reported perfectly if itself is inside a command substitution\r\n    @{\r\n        key1 = $('unrelated to error')\r\n        key2 = $(1/0)                       # exception reported line 3\r\n    }\r\n\r\n    # throw does not trigger bug\r\n    @{\r\n        key1 = $('unrelated to error')\r\n        key2 = throw                        # exception reported line 3\r\n    }\r\n\r\n    # exception reported against unrelated key\r\n    @{\r\n        key1 = $('unrelated to error')      # exception reported line 2\r\n        key2 = 'also unrelated to error'\r\n        key3 = 1/0                          # exception actually on line 4\r\n    }\r\n\r\n    # exception reported against unrelated key\r\n    @{\r\n        key1 = 'unrelated to error'\r\n        key2 = $('also unrelated to error') # exception reported line 3\r\n        key3 = 1/0                          # exception actually on line 4\r\n    }\r\n\r\n    # exception reported against unrelated key\r\n    @{\r\n        key1 = $('unrelated to error')\r\n        key2 = $('also unrelated to error') # exception reported line 3\r\n        key3 = 1/0                          # exception actually on line 4\r\n    }\r\n\n\n### Expected behavior\n\n```console\nPS> @{\r\n>    key1 = $('unrelated to error')\r\n>    key2 = 1/0\r\n>}\r\nParentContainsErrorRecordException:\r\nLine |\r\n   3 |      key2 = 1/0\r\n     |             ~~~\r\n     | Attempted to divide by zero.\n```\n\n\n### Actual behavior\n\n```console\nPS> @{\r\n>    key1 = $('unrelated to error')\r\n>    key2 = 1/0\r\n>}\r\nParentContainsErrorRecordException:\r\nLine |\r\n   2 |      key1 = $('unrelated to error')\r\n     |               ~~~~~~~~~~~~~~~~~~~~\r\n     | Attempted to divide by zero.\n```\n\n\n### Environment data\n\n```powershell\nPS> $VersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "scps-github",
      "author_association": "NONE",
      "body": "After posting the above, I did come across this open issue #14308 with similar behaviour under different conditions - I don't know enough to say whether it's actually the same/related. I also found #7150 (fixed in PR #7305) with similar behaviour, which might help point towards the problem/solution. Unfortunately it's a bit too deep for me to follow.",
      "created_at": "2021-07-09T07:47:48Z",
      "updated_at": "2021-07-09T07:47:48Z"
    }
  ],
  "created_at": "2021-07-08T15:59:14Z",
  "number": 15742,
  "state": "open",
  "title": "InvocationInfo reports incorrect position of exception generated by a key or property",
  "updated_at": "2021-07-09T07:47:49Z"
}