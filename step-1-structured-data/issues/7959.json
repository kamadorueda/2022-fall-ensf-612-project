{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7959",
  "author": "p0W3RH311",
  "body": "where/up/down and jump commands ?\r\nSteps to reproduce\r\n------------------\r\nfor example here 4 functions in separates files:\r\n\r\n```powershell\r\n#222.ps1\r\nfunction f3 {\r\n  $a = 5\r\n f2\r\n  #..etc\r\n}\r\n\r\n#456.ps1\r\nfunction f2 {\r\n   $b = 3\r\n  f1\r\n   #..etc\r\n}\r\n\r\n#123.ps1\r\nfunction f1 {\r\n   $e = 44\r\n   $n = 6\r\n  f0\r\n   #....etc\r\n}\r\n\r\n#123.ps1\r\nfunction f0($mypath) {\r\n   $c = 9\r\n   $d = 14\r\n   #...etc\r\n}\r\n```\r\nto navigate not by line but by frame (function/script) \r\n\r\nadd new commands where/up/down\r\n\r\n```powershell\r\n#where (w): show the current location in the frame stack for example\r\n[DBG] PS> where\r\n\r\n  123.ps1 : line 7  f0 {$mypath}\r\n->123.ps1 : line 66 f1 {}\r\n  456.ps1 : line 7  f2 {}\r\n  222.ps1 : line 3  f3 {}\r\n\r\n [DBG] PS> $c\r\n [DBG] PS> up\r\n [DBG] PS> w\r\n\r\n->123.ps1 : line 7  f0 {$mypath}\r\n  123.ps1 : line 66 f1 {}\r\n  456.ps1 : line 7  f2 {}\r\n  222.ps1 : line 3  f3 {}\r\n\r\n  [DBG] PS> $c; $mypath\r\n  9\r\n  c:/temp\r\n  [DBG] PS> down\r\n  [DBG] PS> down\r\n  [DBG] PS> where\r\n\r\n  123.ps1 : line 7  f0 {$mypath}\r\n  123.ps1 : line 66 f1 {}\r\n->456.ps1 : line 7  f2 {}\r\n  222.ps1 : line 3  f3 {}\r\n```\r\n\r\n  and add jump command to jump over loop for example:\r\n\r\n```powershell\r\n>>>  $s = 0\r\n>>>  foreach($i in 0..1gb) {\r\n>>>      $s += $i\r\n>>>      $z = 8 + $s\r\n>>>      # etc\r\n>>>      write-host $s -ForegroundColor red\r\n>>>      sleep 1\r\n>>>   }\r\n>>>   $u = 787\r\n>>>   'another statement'\r\n\r\n[DBG]: PS C:\\>> l\r\n\r\n    1:    $s = 0\r\n    2:*   foreach($i in 0..1gb) {\r\n    3:       $s += $i\r\n    4:       $z = 8 + $s\r\n    5:       # etc\r\n    6:       write-host $s -ForegroundColor red\r\n    7:       sleep 1\r\n    8:    }\r\n    9:    $u = 787\r\n   10:    'another statement'\r\n\r\n[DBG]: PS> $s\r\n10\r\n[DBG]: PS> $i\r\n4\r\n\r\n[DBG]: PS> # and after 20 step :) debugging the loop  \r\n\r\n[DBG]: PS> jump 9\r\n\r\n[DBG]: PS> l\r\n\r\n\r\n    1:    $s = 0\r\n    2:    foreach($i in 0..1gb) {\r\n    3:       $s += $i\r\n    4:       $z = 8 + $s\r\n    5:       # etc\r\n    6:       write-host $s -ForegroundColor red\r\n    7:       sleep 1\r\n    8:    }\r\n    9:*   $u = 787\r\n   10:    'another statement'\r\n```\r\n\r\nthanks",
  "closed_at": "2020-02-01T00:00:34Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "In theory, you can use the method `GetFrameVariables` on the objects returned from `Get-PSCallStack` to implement your hypothetical `up` - but it would probably require some creativity to get it working exactly like your proposal.\r\n\r\nWith some additional creativity, you could create some new debugger commands like `jump` without changing the PowerShell debugger.\r\n\r\nThese are the currently available commands that can help:\r\n\r\n```\r\nPS C:\\Users\\jason> gcm -Noun PSBreakpoint,PSCallStack\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Disable-PSBreakpoint                               3.1.0.0    Microsoft.PowerShell.Utility\r\nCmdlet          Enable-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility\r\nCmdlet          Get-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility\r\nCmdlet          Get-PSCallStack                                    3.1.0.0    Microsoft.PowerShell.Utility\r\nCmdlet          Remove-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility\r\nCmdlet          Set-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility\r\n```\r\n\r\nBreakpoints can have custom actions which can conditionally break, see the [docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-psbreakpoint?view=powershell-6).\r\n\r\nYou can also utilize the debugger api via `$ExecutionContext.Host.Runspace.Debugger`.\r\n\r\nIt probably makes sense to expose other debugger primitives like `step over` and `step into` as commands, this would allow some simple customization such as defining your own aliases as well making it easier to implement `jump`.",
      "created_at": "2018-10-07T17:15:35Z",
      "updated_at": "2018-10-07T17:15:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-02-01T00:00:33Z",
      "updated_at": "2020-02-01T00:00:33Z"
    }
  ],
  "created_at": "2018-10-07T05:28:04Z",
  "number": 7959,
  "state": "closed",
  "title": "its possible to add new commands to debugger ?",
  "updated_at": "2020-02-01T00:00:34Z"
}