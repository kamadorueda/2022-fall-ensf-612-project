{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3743",
  "author": "mklement0",
  "body": "<sup>This is a follow-up to #3600.</sup>\r\n\r\nTo make PowerShell fit into the world of POSIX-like shells on Unix platforms, so that it can be a viable alternative, it must: \r\n* support certain command-line parameters (options) \r\n* exhibit certain default behaviors on startup\r\n\r\nThe [POSIX spec for the `sh` utility](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sh.html) prescribes both.\r\n\r\nDefinitely not everything there is applicable to PowerShell, but I think it's important to at least fundamentally exhibit the same behavior and to document to what extent PowerShell is compliant.\r\n\r\nA step has been made in the right direction by adding support for `-i` to start an interactive session - see #3558 \r\n\r\nMore work is needed, _some of which would result in breaking changes_.\r\n\r\nThe list is not complete, but hopefully covers the most important aspects.\r\n\r\n* POSIX-like shells default to _not_ loading any initialization files _when commands are passed_ (whether via stdin or via `-c`), whereas PowerShell _always_ loads its profiles, the only exception being  explicit suppression with `-NoProfile`.\r\n   * The POSIX behavior is the more sensible default: it makes for a more predictable execution environment and doesn't incur the cost of sourcing the initialization files.\r\n   * Aligning PowerShell with this behavior would be a _breaking change_.\r\n   * Arguably, when commands are combined with `-NoExit`, the profiles should still be loaded by default (note that this ability to execute commands on startup _and_ keep the shell open for interactive use is unique to PowerShell: POSIX-like shells invariably _exit_ after executing commands).\r\n\r\n* PowerShell already reads commands from stdin by default, and also when `-Command -` (which arguably should be `-File -`) is specified, but:\r\n   * `-s` is the POSIX option for explicitly specifying standard input, and should be supported too.\r\n   * `-s` allows combining stdin command input with passing _parameters_, which PowerShell doesn't support; for instance, `bash` supports something like:   \r\n`echo 'echo \"$# params\"' | bash -s one two`, which yields `2 params`.\r\n\r\n* `-Command` and `-File` issues:\r\n  * They exhibit problematic interactive shell-like behaviors (with or without `-NonInteractive`) and lack consistent argument support - see #3223.\r\n\r\n  * The way `-Command` currently parses the remaining arguments is problematic in itself and also fundamentally incompatible with POSIX-like shells - see https://github.com/PowerShell/PowerShell/issues/4024#issuecomment-311541803\r\n\r\n  * [x] [Fixed by #4178] `-File` currently makes it impossible to pass Boolean values - see #4036.\r\n\r\n* [_This is already the case_] ~~`-c` must be locked in as an alias for `-Command`, so that future additions of -c* parameters don't break `-c` due to ambiguity.~~\r\n\r\n* `-i` works now, but no error occurs when it is combined with `-NonInteractive`, even though they directly contradict each other.\r\n  * Note that starting a POSIX-like shell _without operands_ in a _terminal_ (with stdin and stderr connected to a terminal) _implies_ `-i` (and therefore loading of the initialization files).\r\n  * Note that `-NonInteractive` doesn't prevent an interactive session per se, only in-session interactive features such as `Read-Host` and confirmation prompts.\r\n\r\n* [x] [Fixed by #9528] `-l` should be supported and trigger loading of the profiles - see #3600 for background.\r\n  * `-l` is not part of POSIX, but supported by all major POSIX-like shells (`bash`, `dash`, `ksh`, and `zsh`)\r\n  * `-l` is for creating a _login_ shell - which some platforms use by default (macOS); on Unix, only special contexts such as `ssh` sessions use them routinely.\r\n  * Login shells load a separate set of initialization files compared to interactive non-login shells, but PowerShell has no distinction between login and non-login shells.\r\n  * See https://github.com/PowerShell/PowerShell-RFC/pull/171/files for proposed changes to make PowerShell behave more like POSIX-like login shells.\r\n\r\n* [x] [Implemented with #4019] Passing a _positional argument_ should be interpreted as the _filename of a script to execute_ rather than a _shell command_.\r\n\r\n   * In PowerShell terms: A positional argument should bind to `-File`, not `-Command` - this would be a breaking change, but would facilitate proper handling of shebang lines - see #3963\r\n\r\n   * Conversely, to pass arbitrary shell commands, explicit use of `-Command` / `-c` should be required.\r\n\r\nCurrent as of:\r\n\r\n```powershell\r\nPowerShell Core 6.2.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If there are conflicts with keys we could use a wrapper to start PowerShell Core.",
      "created_at": "2017-05-09T16:33:19Z",
      "updated_at": "2017-05-09T16:33:19Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "Great feedback - thanks so much!\r\n",
      "created_at": "2017-05-12T17:11:24Z",
      "updated_at": "2017-05-12T17:11:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @JamesWTruher @BrucePay ",
      "created_at": "2017-05-17T18:43:41Z",
      "updated_at": "2017-05-17T18:43:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related discussion #992 ",
      "created_at": "2017-10-09T06:04:39Z",
      "updated_at": "2017-10-09T06:04:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agrees that we should align with POSIX where it makes sense.  It seems that many of the specific issues above have been addressed and we should evaluate each remaining ones separately without needing PS-Committee to review each one unless necessary",
      "created_at": "2018-01-03T23:43:50Z",
      "updated_at": "2018-01-03T23:43:50Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@SteveL-MSFT would it make sense to addressed the remaining open linked issues in version 7, when everybody expects a breaking change?",
      "created_at": "2019-10-30T18:55:29Z",
      "updated_at": "2019-10-30T18:55:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mi-hol even though we are going with a major version update, it doesn't imply we are making lots of breaking changes.  In fact, we are trying to minimize breaking changes since 6.0 shipped.  We've had to make some targeted ones, but in general we are defaulting to not breaking unless necessary.  From the list above, it seems the main contention is whether $profile gets loaded by default or not.  Although this annoys me personally as I forget to add `-NoProfile`, it seems to big of a breaking change to accept.",
      "created_at": "2019-10-31T16:26:12Z",
      "updated_at": "2019-10-31T16:26:12Z"
    }
  ],
  "created_at": "2017-05-09T15:00:37Z",
  "labels": [
    "Issue-Meta",
    "Issue-Discussion",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 3743,
  "state": "open",
  "title": "Align PowerShell's CLI / startup behavior with POSIX-like shells such as Bash - command-line arguments",
  "updated_at": "2019-10-31T16:26:12Z"
}