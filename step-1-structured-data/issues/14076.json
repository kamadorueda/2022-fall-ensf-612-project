{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14076",
  "author": "skykick-cm-2",
  "body": "## Summary of the new feature/enhancement\r\n\r\nPowerShell comes with native support for build modules using the `New-ModuleManifest` cmdlet, but doesn't necessarily come with the ability to describe a runtime's dependencies outside of a module. Just like Node runtime project's can use a `package.json` to describe the dependencies it has on npm libraries or .NET can use `.csproj` files to reference NuGet package (e.g. The runtime takes a dep. on a library which might also take dep. on more libraries creating a dep. graph), Nothing stops a runtime from wanting to take a dep. on a PowerShell module.\r\n\r\nUse case:\r\n\r\nA Node project that that uses `node-pty` to spawn `pwsh` processes that run arbitrary PowerShell.  That `pwsh` process will need to install (via Docker most likely) and import (at runtime) modules to perform it's duties but there is no good way (that I have found at least) to document this kind of manifest and have it used to generate a valid runtime environment.  Currently, if my process requires 25 modules to run, I need to explicitly install and import each one I believe.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nTo model it after the already tried and tested solutions that .NET and npm have used, I think introducing a `modules.json` file that laid out the modules with semantic versioning (Similar to how npm does [here](https://docs.npmjs.com/cli/v6/using-npm/semver)). Once that file is created and your dependencies are described in the manifest, you could run `Install-Module` with no arguments and it would simply look for a `modules.json` file in your folder (and possibly the ancestors) and use that file to both Install and potentially Import modules in bulk.\r\n\r\nWith this change, you would no longer have to rely on a PowerShell profile to perform \"automatic\" loading of modules as it would be at a project (folder) level and not confined to the scope of a \"user\" on a device.  This makes powershell projects and libraries more portable when the consuming technology is not a PS module itself as in the case of my Node use case above or even just a vanilla .ps1 file you wanted to shared with a co-worker via git.\r\n",
  "closed_at": "2020-11-13T00:52:33Z",
  "comments": [],
  "created_at": "2020-11-13T00:51:57Z",
  "number": 14076,
  "state": "closed",
  "title": "A PowerShell workspace module manifest",
  "updated_at": "2020-11-13T00:52:33Z"
}