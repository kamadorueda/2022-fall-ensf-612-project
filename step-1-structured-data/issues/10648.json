{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10648",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #10637\r\n\r\nAdd check and terminating throw if filter returns logs more 256.\r\n\r\nError message after the change:\r\n```powershell\r\nGet-WinEvent : Log count (441) is exceeded Windows Event Log API limit (256). Adjust filter to return less log names.\r\nAt line:1 char:1\r\n+ Get-WinEvent\r\n+ ~~~~~~~~~~~~\r\n+ CategoryInfo          : LimitsExceeded: (:) [Get-WinEvent], Exception\r\n+ FullyQualifiedErrorId : LogCountLimitExceeded,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n```\r\n\r\n\r\n## PR Context\r\n\r\nReadEvent() returns the error if our query contains number of logs more then 256.\r\nI did not find that 256 limit is documented. Nevertheless, we can verify that the filter returns more 256 log names and issue an appropriate message.\r\nThe design was ok for Windows XP with 3 logs, it worked on Windows 7 with 183 logs but now Windows 10 has over 400 logs and the query is no longer even executed (with exception \"Invalid data\").\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-10-23T17:29:00Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:46Z",
      "updated_at": "2019-11-21T22:35:46Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "The 256 logname limit has been added to the get-winevent docs.  No wonder I can't select all the logs in Event Viewer when making a custom view!\r\n",
      "created_at": "2020-02-28T18:19:53Z",
      "updated_at": "2020-02-28T18:19:53Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "I would say as well that there's a 846 element limit in the providername.  Odd number.\r\n\r\n```powershell\r\n$a = get-winevent -ListProvider * | % providername\r\nget-winevent -ProviderName $a[0..846]\r\n\r\nGet-WinEvent: The data is invalid.\r\nGet-WinEvent: The data is invalid.\r\nGet-WinEvent: The data is invalid.\r\n```\r\n",
      "created_at": "2020-03-05T19:52:12Z",
      "updated_at": "2020-03-05T19:52:34Z"
    }
  ],
  "created_at": "2019-09-30T06:47:19Z",
  "number": 10648,
  "state": "closed",
  "title": "Add limit check in Get-WinEvent",
  "updated_at": "2020-03-05T19:52:34Z"
}