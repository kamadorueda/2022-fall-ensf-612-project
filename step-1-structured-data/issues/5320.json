{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5320",
  "author": "thezim",
  "body": "Steps to reproduce\r\n------------------\r\nYou will need to [generate](https://github.com/settings/tokens) an API token and grant the notifications privilege.\r\n\r\n```powershell\r\nPS /Users/greg> $apitoken = \"yourapitoken\"\r\nPS /Users/greg> $headers = @{ Authorization = \"token $apitoken\" }\r\nPS /Users/greg> $resp = Invoke-RestMethod -Uri https://api.github.com/notifications -Headers $headers\r\nPS /Users/greg> $resp -eq $null                                                                                                     \r\nPS /Users/greg>\r\n```\r\n\r\nWhat is returned is an `Object`.\r\n```powershell\r\nPS /Users/greg> $resp -is [System.Object]                                                                                           \r\nTrue\r\nPS /Users/greg> \r\n```\r\n\r\nShould be no different than this.\r\n\r\n```powershell\r\nPS /Users/greg> $obj = New-Object System.Object                                                                                     \r\nPS /Users/greg> $obj -eq $null                                                                                                      \r\nFalse\r\nPS /Users/greg> \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n```powershell\r\nPS /Users/greg> $resp -eq $null\r\nTrue\r\nPS /Users/greg>\r\n```\r\n\r\nActual behavior\r\n---------------\r\n```powershell\r\nPS /Users/greg> $resp -eq $null\r\nPS /Users/greg>\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\nName                           Value                                                                                               \r\n----                           -----                                                                                               \r\nPSVersion                      6.0.0-beta.9                                                                                        \r\nPSEdition                      Core                                                                                                \r\nGitCommitId                    v6.0.0-beta.9                                                                                       \r\nOS                             Darwin 17.2.0 Darwin Kernel Version 17.2.0: Fri Sep 29 18:27:05 PDT 2017; root:xnu-4570.20.62~3/R...\r\nPlatform                       Unix                                                                                                \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                             \r\nPSRemotingProtocolVersion      2.3                                                                                                 \r\nSerializationVersion           1.1.0.1                                                                                             \r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis occurs for Windows PowerShell versions too.",
  "closed_at": "2017-11-14T03:53:44Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The repro that you provided doesn't actually work as I get an error `Requires authentication`.  Is what you're expecting is that if the response body is empty, then the output should be $null?",
      "created_at": "2017-11-03T03:44:38Z",
      "updated_at": "2017-11-03T03:44:38Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT repro updated with the missing piece.",
      "created_at": "2017-11-03T12:14:58Z",
      "updated_at": "2017-11-03T12:14:58Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim do you have what the raw response is for that? Is it `None` or `{}` or a 0-byte body?",
      "created_at": "2017-11-03T13:59:41Z",
      "updated_at": "2017-11-03T13:59:41Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "actually, I was able to do this after clearing all the notifications. it is returning `[]`.  for me, this is returning a `System.Object[]`. which happens to have no elements. I think that is a fair representation of an empty JSON array. \r\n\r\n```\r\n[]\r\n```\r\n\r\nis not the same as\r\n\r\n```\r\nnull\r\n```",
      "created_at": "2017-11-03T14:10:55Z",
      "updated_at": "2017-11-03T14:10:55Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus I agree that it is a fair representation but it is not very intuitive.  Most cmdlets follow the null model. Should Get-ChildItem return `System.Object[]`? The underlying data type (JSON) shouldn't matter since it actually returns a `Object`.",
      "created_at": "2017-11-03T15:22:36Z",
      "updated_at": "2017-11-03T15:22:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "The underlying JSON type does matter, actually. If they API says it returns an array that is empty when there are no items, then an empty array is expected.  If we return `$null` instead of an empty array, we break parity with the API. If the API wanted to return `$null` it would return the JSON equivalent `null`. This is true of top level and nested items too. the following are equivalent :\r\n\r\n```powershell\r\n[PSCustomObject]@{\r\n    NestedArray = @()\r\n} \r\n```\r\n```json\r\n{\r\n  \"NestedArray\": []\r\n}\r\n```\r\njust as these two are equivalent:\r\n```powershell\r\n[PSCustomObject]@{\r\n    NestedNull = $null\r\n}\r\n```\r\n```json\r\n{\r\n  \"NestedArray\": null\r\n}\r\n```\r\n\r\nEven in PowerShell, empty arrays are not null:\r\n```powershell\r\n$Obj = [System.Object[]]@()\r\n$null -eq $Obj\r\n```\r\n\r\nresult: `False`.\r\n\r\nThere is a difference between object serialization and cmdlets which return collections of items. If you used `-OutVariable` instead of an assignment, you would get an empty `ArrayList` which isn't null either:\r\n\r\n```powershell\r\n$null = Get-Process -name 'noloexisto*' -OutVariable Processes\r\n$Processes.Count\r\n$Null -eq $Processes\r\n```\r\n\r\nResult: \r\n```\r\n0\r\nFalse\r\n```\r\n\r\nIn that instance the API is promising to return an `ArrayList` and does, even though it is empty and it is not evaluated as `$null`.",
      "created_at": "2017-11-03T16:56:09Z",
      "updated_at": "2017-11-03T16:59:47Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Though, I do see that `Invoke-RestMethod` is not treating `null` by itself as `$null`\r\n\r\n```powershell\r\n$url = 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=null'\r\n$null -eq (irm $url)\r\n```\r\nResult: `False`\r\n\r\nThat should arguably be true. because this does work:\r\n\r\n```powershell\r\n$url = 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=null'\r\n$null -eq (irm $url |ConvertFrom-Json)\r\n```\r\n\r\nResult: `True`",
      "created_at": "2017-11-03T17:03:15Z",
      "updated_at": "2017-11-03T17:05:19Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Given deserialization logic `irm $url` should not be null. If you make it that way you are breaking the API as well.",
      "created_at": "2017-11-03T18:36:08Z",
      "updated_at": "2017-11-03T18:36:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim `null` in JSON is serialized as `$null` in PowerShell. if the API returns nothing but `null` with the `application/json` content-type, then irm should return `$null`, IMO. This works fine when `null` is nested,\r\n\r\n```powershell\r\n$url = 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=%5Bnull%5D'\r\n$res =  irm $url\r\n$res.Count\r\n$null -eq $res[0]\r\n```\r\n\r\nResult: \r\n```none\r\n1\r\nTrue\r\n```\r\n\r\n but instead of returning `$null` when the response is just `null`, it is returning the string `null`. A string with `null`  in PowerShell is `\"null\"` in JSON, not `null`.",
      "created_at": "2017-11-03T20:30:39Z",
      "updated_at": "2017-11-03T20:31:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My opinion is that an empty array should not be null for the reasons @markekraus provides.  As for a single `null` in the JSON, it seems reasonable for that to be $null and if the string \"null\" is currently being returned, that looks like a bug.",
      "created_at": "2017-11-03T21:28:02Z",
      "updated_at": "2017-11-03T21:28:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT it looks like irm handles all the other JSON literals properly\r\n\r\n```powershell\r\n#String literal\r\nirm 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=%22string%22'\r\n# False literal\r\nirm 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=false'\r\n# True lieteral\r\nirm 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=true'\r\n# number literal\r\n$res = irm 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=5'\r\n$res.GetType().fullname\r\n# empty object\r\n$res = irm 'http://urlecho.appspot.com/echo?status=200&Content-Type=application%2Fjson&body=%7B%7D'\r\n$res.GetType().fullname\r\n```\r\n\r\nSo it's just `null`  that's not right. Fixing that will be a breaking change, though. I imagine if people were were using an endpoint that returned single values that included `null` will have logic in place to deal with the broken behavior.",
      "created_at": "2017-11-03T22:06:45Z",
      "updated_at": "2017-11-03T22:07:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus is this only the case where there's a single `null`?  if a json object has mutple properties and one or more are null, we deserialize those to `$null`, correct?",
      "created_at": "2017-11-03T23:35:43Z",
      "updated_at": "2017-11-03T23:35:43Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT it is the only case I have found. If it is in an array `[null, null, null]` it works:\r\n\r\n```powershell\r\n$res = irm 'http://urlecho.appspot.com/echo?status=200&Content-Type=text%2Fhtml&body=%5Bnull%2Cnull%2Cnull%5D'\r\n$res.count\r\n$null -eq $res[0] -and $null -eq $res[1] -and $null -eq $res[2]\r\n```\r\n\r\nresult:\r\n```\r\n3\r\nTrue\r\n```\r\n\r\n`null` becomes the string `\"null\"` when it is a key in a key/value pair (which we already know null and empty string keys in JSON are problematic), but when its a value in a key/value pair it works fine. \r\n\r\nSo the only place it appears to be broken is single value `null`.",
      "created_at": "2017-11-04T00:18:42Z",
      "updated_at": "2017-11-04T00:18:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If we want to take a breaking change, now is the time to do it.   I wouldn't do it for 6.1.0.  ",
      "created_at": "2017-11-04T03:42:33Z",
      "updated_at": "2017-11-04T03:42:33Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "#5338 for fixing the `null` serialization.",
      "created_at": "2017-11-04T12:25:40Z",
      "updated_at": "2017-11-04T12:25:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agrees that the single `null` string should be `$null` value",
      "created_at": "2017-11-08T23:24:06Z",
      "updated_at": "2017-11-08T23:24:06Z"
    }
  ],
  "created_at": "2017-11-03T02:32:03Z",
  "labels": [
    "Issue-Question",
    "Breaking-Change",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 5320,
  "state": "closed",
  "title": "Invoke-RestMethod doesn't return useful info when no data is returned.",
  "updated_at": "2017-11-14T03:53:44Z"
}