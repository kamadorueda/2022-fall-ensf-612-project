{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3690",
  "author": "iSazonov",
  "body": "Resolve #3676 \r\nFix #3739\r\n\r\nGenerate C# file with a constant containing current version GitCommitId.\r\nCorrect a test for GitCommitId.\r\n",
  "closed_at": "2017-09-25T16:49:45Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Please clarify - currently ` git --git-dir=\".git\" describe --dirty --abbrev=60` return `v6.0.0-alpha.18-60-gb09e9b570c757b9869f454276aa708eac307f5b1` where last part is a hash - do you want change formatting? `v6.0.0-alpha.18-60 Commit Hash: gb09e9b570c757b9869f454276aa708eac307f5b1`",
      "created_at": "2017-05-04T04:22:40Z",
      "updated_at": "2017-05-04T04:22:40Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm always a fan of better formatting.\r\n\r\nI suggest reading the documentation on `describe`, and we might consider using `--long` to always get the hash.\r\n\r\nNote that the `g` is not part of the hash, the format (with --long) is `{tag}-{# of commits past tag}-g{hash of head}`.",
      "created_at": "2017-05-04T17:44:25Z",
      "updated_at": "2017-05-04T17:44:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We would parse the long formatted \"git describe\" and output in the desired form, ex.:\r\n` Version: v6.0.0-alpha.18 Commits: 60 Commit Hash: b09e9b570c757b9869f454276aa708eac307f5b1`\r\n",
      "created_at": "2017-05-04T18:05:32Z",
      "updated_at": "2017-05-04T18:05:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Sounds good, though I would omit `Commits` if it is 0 (which will be the common case) and maybe use the phrase `Additional Commits`.",
      "created_at": "2017-05-04T19:02:23Z",
      "updated_at": "2017-05-04T19:02:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr `powershell.version` is still used in [Install-PowerShellRemoting.ps1](https://github.com/PowerShell/PowerShell/blob/master/src/powershell-native/Install-PowerShellRemoting.ps1#L135). \r\n\r\nI see #2671 Should we fix the script here? If yes how can we fix this? Can we use there `PSVersionTable.PSVersion`?\r\n\r\n/cc @mirichmo ",
      "created_at": "2017-05-05T14:48:56Z",
      "updated_at": "2017-05-05T14:48:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I added commit to fix #3739 ",
      "created_at": "2017-05-10T12:02:36Z",
      "updated_at": "2017-05-10T12:02:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov thanks for fixing this. The hard-coded `alpha` string caused me huge effort in `beta.1` release.\r\nI have 2 comments:\r\n1. Could you please resolve the conflicts?\r\n2. If you search the usage of `powershell.version`, you will find it appears in following files:\r\n```\r\nE:\\PowerShell\\.gitignore\r\nE:\\PowerShell\\.spelling\r\nE:\\PowerShell\\build.psm1\r\nE:\\PowerShell\\build.sh\r\nE:\\PowerShell\\build.sh\r\nE:\\PowerShell\\src\\powershell-native\\Install-PowerShellRemoting.ps1\r\nE:\\PowerShell\\src\\powershell-unix\\powershell-unix.csproj\r\nE:\\PowerShell\\src\\powershell-win-core\\powershell-win-core.csproj\r\nE:\\PowerShell\\src\\System.Management.Automation\\engine\\PSVersionInfo.cs\r\nE:\\PowerShell\\src\\System.Management.Automation\\engine\\PSVersionInfo.cs\r\nE:\\PowerShell\\test\\powershell\\Host\\PSVersionTable.Tests.ps1\r\n```\r\nSome of those files are not updated in this PR. I think all appearances of `powershell.version` need to be reviewed and updated.",
      "created_at": "2017-05-10T17:10:27Z",
      "updated_at": "2017-05-10T17:11:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This is the third conflict over the past 24 hours in build.psm1 \ud83d\ude04 - I'll resolve tomorrow.\r\n\r\nI use ` powershell.version ` file in tests. So you might have to leave it in .gitignore\r\n\r\nI'm afraid that I won't be able to fix build.sh - can I delegate this anybody?\r\n",
      "created_at": "2017-05-10T18:36:42Z",
      "updated_at": "2017-05-10T18:36:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Sorry that I have to change `build.psm1` many times in the past day -- obviously our release process and test infrastructure are still far away from perfect \ud83d\ude26\r\n\r\nAs for `build.sh`, writing an equivalent bash script to do the same would be (1) not easy (2) hard to maintain 2 scripts for the same thing in future. One option is to extract this logic and write C# code to do it, like the existing ResGen and TypeCatalogGen. Then we can just call `dotnet run` from both powershell script and bash script.\r\n\r\nI'm not sure how many people are using build.sh honestly, and not really sure if this worth the effort.\r\n@SteveL-MSFT @joeyaiello @lzybkr do we have any data to show how important `build.sh` is? Can we just remove that support?",
      "created_at": "2017-05-10T19:39:32Z",
      "updated_at": "2017-05-10T19:39:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "appveyor temporaryly failed - I restart.",
      "created_at": "2017-05-11T04:44:25Z",
      "updated_at": "2017-05-11T04:44:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I only fix but don't test 'Install-PowerShellRemoting.ps1'.",
      "created_at": "2017-05-11T04:46:37Z",
      "updated_at": "2017-05-11T04:46:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - I ran across this relevant [blog post](https://commentout.net/sha-in-binary.html) which suggests an assembly attribute that we should also use.\r\n\r\nI think we can ignore the part in that blog post about finding the sha without `git` - we've been using `git` to do this already with no complaints.",
      "created_at": "2017-05-11T15:57:53Z",
      "updated_at": "2017-05-11T15:57:53Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is exactly what we use.  Used to use GitVersion but now we're doing our own computation of build metadata:\r\n```\r\nGet-FileVersionInfo P:\\Repositories\\BuildResults\\Foo_Master_CompleteBuild\\5.2.0.105\\64BitDevelopment\r\n\\Release\\Foo.dll | ForEach-Object ProductVersion\r\n\r\n5.2.0+105.Branch.master.Sha.31e45082cd1093133b6687dd172daa04b2a10940.Built.20170505T1739\r\n```\r\n\r\nAnd we do use git to get the SHA1, branch, etc.  This is the function we use:\r\n```posh\r\nfunction GetGitBuildMetadata([string]$SemVer, [string]$Revision) {\r\n    $timestamp = Get-Date -Format yyyyMMddTHHmm\r\n    $sha1   = git rev-parse --verify HEAD\r\n    $branch = git rev-parse --abbrev-ref HEAD\r\n    if (!$branch -or ($branch -eq 'HEAD')) {\r\n        if ($env:BUILD_SOURCEBRANCH) {\r\n            $branch = $env:BUILD_SOURCEBRANCH.Trim().Replace(\"refs/heads/\", \"\").Replace(\"refs/\",\"\")\r\n        }\r\n        else {\r\n            $branch = 'unknown'\r\n        }\r\n    }\r\n\r\n    $prereleaseTag = if ($branch -notmatch 'master|release') { '-prerelease' } else { '' }\r\n\r\n    $metadata = \"${SemVer}${prereleaseTag}+${Revision}.Branch.${branch}.Sha.${sha1}.Built.${timestamp}\"\r\n    $metadata\r\n}\r\n```",
      "created_at": "2017-05-11T16:06:11Z",
      "updated_at": "2017-05-11T16:06:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can add 'AssemblyInformationalVersionAttribute' in `System.Management.Automation\\AssemblyInfo.cs` by `Start-PSBuild`.\r\nBut Git will see that as a change - how can we resolve the problem?",
      "created_at": "2017-05-11T18:15:05Z",
      "updated_at": "2017-05-11T18:15:05Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "On our official build machine, we process the AssemblyInfo.cs file and don't care if Git thinks it's an untracked change.  That working directory will get scorched on the next build.  \r\n\r\nFor dev builds, you could either hard-code that value (indicating it isn't an official build) or process it and then reset the file before the build exits. ",
      "created_at": "2017-05-11T18:22:08Z",
      "updated_at": "2017-05-11T18:22:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I like the `AssemblyInformationalVersionAttribute` idea. If going that direction, then we don't need to generate the `PSVersionInfo.generated.cs` during the build. Instead, we write code in `PSVersionInfo.cs` to get the `ProductionVersion` of the `S.M.A.dll` by `FileVersionInfo]::GetVersionInfo([psobject].Assembly.Location).ProductVersion`, and then parse the string to get `PSVersion` and `GitCommitId`.\r\n\r\nAs discussed in http://stackoverflow.com/a/752209/7129704\r\n> FileVersion and ProductVersions are only likely to be different if the assembly in question is not just part of one product (e.g. a reusable third party library), if just used in a single application there seems little reason not to keep them the same.\r\n\r\nSo I think we need to think about setting `AssemblyFileVersionAttribute` as well, to be the same as `AssemblyInformationalVersionAttribute`.\r\n\r\nHowever, I don't think we should try adding the attributes in `AssemblyInfo.cs` file, but instead use MSBuild to do this dynamically somehow. `AssemblyFileVersionAttribute` and `AssemblyInformationalVersionAttribute` correspond to `FileVersion` and `InformationalVersion` [MSBuild properties](https://gitversion.readthedocs.io/en/latest/usage/msbuild-task/). I think we should solve it using MSBuild.\r\n",
      "created_at": "2017-05-11T23:11:41Z",
      "updated_at": "2017-05-11T23:11:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "One question though: if we depend on `AssemblyFileVersionAttribute` or `AssemblyInformationalVersionAttribute` to generate `PSVersion` and `GitCommitId`, is there any security concern? (e.g. FileVersion and ProductVersion can be somehow changed by an attacker and thus affecting our code ??)\r\n/cc @PaulHigin would this be a legit security concern?",
      "created_at": "2017-05-11T23:21:10Z",
      "updated_at": "2017-05-11T23:29:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could use both option: generating ` PSVersionInfo.generated.cs` for PSVersionTable and MSBuild-ing attributes for files.",
      "created_at": "2017-05-12T02:55:35Z",
      "updated_at": "2017-05-12T02:55:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Closed the PR by accident \ud83e\udd15 ",
      "created_at": "2017-05-12T05:23:36Z",
      "updated_at": "2017-05-12T05:23:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw GetVersion isn't still ported \ud83d\ude15 https://github.com/GitTools/GitVersion/issues/1175",
      "created_at": "2017-05-12T07:24:54Z",
      "updated_at": "2017-05-12T07:24:54Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I don't believe that tampering with version attributes of a file by itself is a security concern, since are many other ways of file tampering for malicious purposes.  The way to guard against file tampering is with application white listing (and black listing for deprecated versions) where approved file versions are validated through file signing or catalog signing.",
      "created_at": "2017-05-12T15:16:55Z",
      "updated_at": "2017-05-12T15:16:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I took the next step. Now all projects have common properties and assemblies get version from Start-PSBuild.",
      "created_at": "2017-05-12T18:34:20Z",
      "updated_at": "2017-05-12T18:34:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This PR is getting too complex, and I think we'd better break it down.\r\nWe need a conclusion about how to dynamically generate `PSVersion` and `GitCommitId`. There are three proposals so far:\r\n  1. Add script in `Start-PSBuild` to parse git describe string, and generate c# source file to keep the information. **Pros:** easy to implement. **Cons:** (1) hard to bring `build.sh` up-to-date (e.g. hard to write the equivalent bash script, hard to maintain two scripts that do the same thing) (2) make it harder to eventually build the powershell core in Visual Studio as we have another necessary step burnt into the script.\r\n  1. Add a C# project, maybe named `PSVersionGen`, like `ResGen` and `TypeCatalogGen` to do the code generation. **Pros:** (1) easy to update `build.sh`, and only one implementation to maintain. (2) it may be easier to eventually build the powershell core in Visual Studio 2017. **Cons:** a bit harder to implement comparing using the script.\r\n  1. Dynamically generate `AssemblyFileVersionAttribute` and `AssemblyInformationalVersionAttribute` via MSBuild, and change code in `PSVersionInfo.cs` to parse the `FileVersion` string to get `PSVersion` and `GitCommitId` when `PSVersionTable` is generated for the first time. **Pros:** clean, no magical code generation at build time, maybe the easiest to move to Visual Studio 2017 in future. **Cons:** hard to implement -- `csproj` changes + more robust logic to parse `FileVersion` in production code. The MSBuild part definitely need extra research and trial/error (build + NuGet package geneation both depend on `csproj`. A side topic, .NET Core team use different `csproj` files for build and package, maybe we should go that direction.)\r\n\r\n**We need to draw to a conclusion first to know what work items would be. Then we break down the work items so that they can be addressed in multiple PRs, instead of one PR with too many changes.**\r\n\r\nI vote for NO.3 proposal. @lzybkr @iSazonov please share your opinions.",
      "created_at": "2017-05-16T18:33:29Z",
      "updated_at": "2017-05-16T18:33:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In brief I agree with NO.3\r\n\r\nPerhaps we should create a Meta Issue to split the work on small pieces:\r\nMeta Issue - \"Move Start-PSBuild to MSBuild\":\r\n - Clean up Start-PSBuild from FullClr code and old code.\r\n - Generate MSBuild variables with version strings based on Git tags\r\n - Move common csproj properties to a common targets file.\r\n - Unify  AssemblyFileVersionAttribute and AssemblyInformationalVersionAttribute for all assemblies.\r\n - Fix  PSVersionInfo.cs to parse the FileVersion string or/and use MSBuild variables with version.\r\n - Use different  csproj  files for build and package.\r\n - ???\r\n",
      "created_at": "2017-05-17T10:18:00Z",
      "updated_at": "2017-05-17T10:18:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR shouldn't be merged - it is only for tracking multiple changes. We split the PR on some light-weight PRs.\r\nThere we are trying set assembly attributes by MSBuild based on git version tag and also expose the version to PSVersion table and PowerShell startup banner.\r\nSome Microsoft projects (Roslin, CoreFX/CoreCLR ...) use such version format.\r\n\r\n@lzybkr @daxian-dbw  Could you please comment? How can we resolve the conflict with telemetry?",
      "created_at": "2017-07-01T17:53:45Z",
      "updated_at": "2017-07-01T17:53:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The work is covered b #4863. So close this PR.",
      "created_at": "2017-09-25T16:49:45Z",
      "updated_at": "2017-09-25T16:49:45Z"
    }
  ],
  "created_at": "2017-05-03T12:34:34Z",
  "number": 3690,
  "state": "closed",
  "title": "$PSVersionTable.GitCommitId based on generated constant",
  "updated_at": "2017-10-25T11:18:41Z"
}