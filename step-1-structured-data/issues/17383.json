{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17383",
  "author": "javidcf",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n1. Open an TCP server on some local port of the IPv4 loopback interface. For example, with Python 3 run a simple HTTP server with `python -m http.server --bind 127.0.0.1 8000`.\r\n2. In another terminal, run `Test-Connection localhost -TcpPort 8000`.\r\n\r\n### Expected behavior\r\n\r\nThe command returns `True`.\r\n\r\n### Actual behavior\r\n\r\nThe command returns `False`.\r\n\r\nIf we run `Test-Connection 127.0.0.1 -TcpPort 8000` or `Test-Connection localhost -IPv4 -TcpPort 8000`, the returned result is `True`. The command `Test-NetConnection localhost -Port 8000` does give the correct answer, although it first tries connecting to `::1 : 8000` and fails.\r\n\r\n### Error details\r\n\r\nIt seems `Test-Connection` is just testing the first loopback address it is finding, which is the IPv6 `::1` address. I think this behaviour is surprising, especially since locally deployed servers are most frequently bound to `127.0.0.1` only.\r\n\r\n### Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.4\r\nPSEdition                      Core\r\nGitCommitId                    7.2.4\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It seems Test-Connection is just testing the first loopback address it is finding, which is the IPv6 ::1 address. I think this behaviour is surprising, especially since locally deployed servers are most frequently bound to 127.0.0.1 only.\r\n\r\nWhy surprising? It is how name resolving works. What do you expect to get from `ping localhost`? ",
      "created_at": "2022-05-19T13:35:08Z",
      "updated_at": "2022-05-19T13:35:08Z"
    },
    {
      "author": "javidcf",
      "author_association": "NONE",
      "body": "@iSazonov I'm not sure ICMP is the same use case as TCP. If I access`http://localhost:8000` with my web browser (or curl or whatever) or, as mentioned, try with `Test-NetConnection` it does work. I don't know if this behaviour is just \"convenient\" or RFC-dictated, but I can't think of another tool does not behave this way. I understand, though, that `Test-Connection` is primarily an ICMP tool, and it may make more sense in its context to just consider the first resolved address across the whole program, but I think it is reasonable to expect `Test-Connection localhost -TcpPort 8000` to return `True` in a case like this. Maybe there could just be a note in the documentation about it.",
      "created_at": "2022-05-19T14:22:55Z",
      "updated_at": "2022-05-19T14:23:17Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "The basic `Test-NetConnection` uses ICMP to ping the remote host. By specifying the `-Port` parameter, the cmdlet used TCP to attempt to make a connection to the specified port. If you have port 8000 open, the cmdlet should report true if the remote host accepts the connection. Firewalls do have a way of interfering, though.\r\n\r\nMy home has full IPV6 connectivity and I find Windows seems to choose IPv6. Looking at Tracert traces the IPv6 path tends to be a little shorter and faster than IPv4, but mileage varies.\r\n\r\nThe OP's issue is that when Windows resolved `localhost`, the answer has the IPv6 address first. You can observe this:\r\n\r\n```powershell\r\nPS C:\\Foo> resolve-dnsname localhost\r\n\r\nName                                 Type   TTL   Section    IPAddress\r\n----                                 ----   ---   -------    ---------\r\nlocalhost                            AAAA   1200  Question   ::1\r\nlocalhost                            A      1200  Question   127.0.0.1\r\n```\r\nSo what `Test-NetConnection` attempts the connection (ie over IPV6) it naturally fails.\r\n\r\nNot sure this is really a problem that PowerShell can fix.\r\n",
      "created_at": "2022-05-19T17:24:33Z",
      "updated_at": "2022-05-19T17:54:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It seems reasonable that if multiple possible addresses are found and the user hasn't specified either the `-IPv4` or `-IPv6` switches, `Test-Connection` could retry through the list of possible addresses?",
      "created_at": "2022-05-19T20:36:43Z",
      "updated_at": "2022-05-19T20:36:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It seems reasonable that if multiple possible addresses are found and the user hasn't specified either the `-IPv4` or `-IPv6` switches, `Test-Connection` could retry through the list of possible addresses?\r\n\r\nWhy do you ask about IPv4 vs IPv6 if it is possible assign some IPv4 to single name (or some IPv6 to single name)? :-) ",
      "created_at": "2022-05-20T05:36:07Z",
      "updated_at": "2022-05-20T05:36:07Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "In pwsh 7,  `Test-Connection` always returns a Boolean but the help says it should return a rich object, as it did in Windows PowerShell. It is behaving as if `-Quiet` is always specified\r\n\r\nWhen a name resolves to multiple IP addresses (especially if one is ipV4 and the other is V6) the help doesn't give indication if the Boolean returned should be ALL addresses work , ANY address works, or THE FIRST address works.   \r\n\r\nThe OP says it doesn't do what is *expected* - at the very least expectations could be set properly.  \r\n\r\n**EDIT** the bit about quiet always on appears to have been something transient. ",
      "created_at": "2022-05-20T08:07:34Z",
      "updated_at": "2022-05-20T12:52:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov \r\n> Why do you ask about IPv4 vs IPv6 if it is possible assign some IPv4 to single name (or some IPv6 to single name)? :-)\r\n\r\nI'm not really sure what you're asking here, can you clarify?\r\n\r\n@jhoneill\r\n\r\n> In pwsh 7, Test-Connection always returns a Boolean but the help says it should return a rich object, as it did in Windows PowerShell. It is behaving as if -Quiet is always specified\r\n\r\nIn both pwsh 7.2.4 and 7.3-preview1, it behaves as described in documentation:\r\n\r\n```powershell\r\nPS> test-connection localhost\r\n\r\n   Destination: localhost\r\n\r\nPing Source           Address                   Latency BufferSize Status\r\n                                                   (ms)        (B)\r\n---- ------           -------                   ------- ---------- ------\r\n   1 DESKTOP-TEHPDG2  ::1                             0         32 Success\r\n   2 DESKTOP-TEHPDG2  ::1                             0         32 Success\r\n   3 DESKTOP-TEHPDG2  ::1                             0         32 Success\r\n   4 DESKTOP-TEHPDG2  ::1                             0         32 Success\r\n```\r\n\r\nHas that changed recently?",
      "created_at": "2022-05-20T12:35:57Z",
      "updated_at": "2022-05-20T12:36:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > Why do you ask about IPv4 vs IPv6 if it is possible assign some IPv4 to single name (or some IPv6 to single name)? :-)\r\n> \r\n> I'm not really sure what you're asking here, can you clarify?\r\n\r\nI say your proposal makes no sense. If we wanted round trip we would have to allow all combinations for users. But it makes no sense - the cmdlet emulates classic ping and work like any service which request to resolve ip by name.",
      "created_at": "2022-05-20T12:50:53Z",
      "updated_at": "2022-05-20T12:50:53Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill\r\n> \r\n> > In pwsh 7, Test-Connection always returns a Boolean  \r\n> \r\n> In both pwsh 7.2.4 and 7.3-preview1, it behaves as described in documentation:\r\n> \r\n\r\nYesterday it was behaving like -Quiet was always on. Today it is working per the docs. Darned if I know what has changed. \r\n",
      "created_at": "2022-05-20T12:51:11Z",
      "updated_at": "2022-05-20T12:51:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov since a DNS address _can_ resolve to both IPv6 and IPv4 addresses, why would Test-Connection _not_ retry with the other address if one doesn't work, in the case that the user hasn't specified which IP standard to use?\r\n\r\nJust because a tool that was initially created before IPv6 even existed doesn't do that, doesn't mean we can't make the user experience here better.",
      "created_at": "2022-05-20T12:53:50Z",
      "updated_at": "2022-05-20T12:54:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Combining ping and nslookup into one utility? I don't see the usefulness of that. I can't imagine the capabilities you're talking about would be useful to someone for network diagnostics or in a script.\r\nI would prefer this cmdlet to reliably do the simplest things like ping. \r\n",
      "created_at": "2022-05-20T13:07:08Z",
      "updated_at": "2022-05-20T13:07:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It already does DNS lookups. We're not adding anything extra there, just making use of the information it already has.",
      "created_at": "2022-05-20T13:18:06Z",
      "updated_at": "2022-05-20T13:18:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "OK my failing brain has finally caught up ... \r\nThe helps says \"`Test-Connection` returns a TestConnectionCommand+PingStatus object` which it does for a ping, but isn't appropriate for a test of a of TCP port. It doesn't say the -TCPPort changes this to a boolean, nor does it give an example of using TCPPort. \r\nPowerShell 5 doesn't have the TCPPort option and returns a CIM object, which isn't great for cross platform.  \r\n",
      "created_at": "2022-05-20T14:40:56Z",
      "updated_at": "2022-05-20T14:40:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah, you're right, that's true. #11452 would improve that somewhat \ud83d\ude42 \r\n\r\nThough you're right, some examples would also be a good addition.",
      "created_at": "2022-05-20T15:07:32Z",
      "updated_at": "2022-05-20T15:07:32Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> It seems reasonable that if multiple possible addresses are found and the user hasn't specified either the `-IPv4` or `-IPv6` switches, `Test-Connection` could retry through the list of possible addresses?\r\n\r\nThinking about it - `Test-Connection` has `IPv4` and `IPv6` switches. It might be useful for `Test-NetConnection` to have those same parameters to allow the user to specify a particular IP Version. ",
      "created_at": "2022-05-20T16:14:41Z",
      "updated_at": "2022-05-20T16:14:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "To my knowledge, Test-NetConnection is not a cmdlet owned or developed by the PowerShell team, and is not distributed with pwsh. If the relevant Windows team is able to and wants to add those parameters, they can do so.",
      "created_at": "2022-05-20T16:31:49Z",
      "updated_at": "2022-05-20T16:32:26Z"
    }
  ],
  "created_at": "2022-05-19T12:49:42Z",
  "labels": [
    "WG-Cmdlets-Management",
    "Needs-Triage"
  ],
  "number": 17383,
  "state": "open",
  "title": "Test-Connection with -TcpPort only tries IPv6 connection for localhost",
  "updated_at": "2022-05-20T16:32:26Z"
}