{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8452",
  "author": "cbrit",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nI discovered this while writing a script that would test a given string against a set of password policies. I noticed \"Contains a special character\" was always returning `True` and this is why.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\"any character or string\" -match \"$\"\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nFalse\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nTrue\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 21 20:07:39 PDT 2018; root:xnu-3789.73.14~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nI also tested this in Powershell 5.1. Perhaps I'm misunderstanding the purpose of -match ?",
  "closed_at": "2018-12-12T04:51:34Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`-match` uses regex matching.\r\n\r\n`$` in regex is a special character that matches \"the end of a string\" and is usually used to, for example, check if a string ends with a certain sequence (e.g., `-match '\\d{4}$'` can be used to check if a string _ends_ in 4 digits; without that `$` anchor, it would match anywhere in the string.)\r\n\r\nIf you need literal characters with `-match` you can escape special characters with a backslash `\\` if you know which ones need the escaping, or you can generate an escaped string with `[Regex]::Escape($string)` which will give you a valid regex literal string to match against.\r\n\r\nAlternately, you can use `-like` with appropriate wildcards instead, or even the `$String.Contains()` method:\r\n```powershell\r\n$string -like '*$*'\r\n$string.Contains('$')\r\n```\r\n\r\nSee `Get-Help about_Operators` and its related topics specific to `-match` and its kindred regex operators `-replace` and `-split` \ud83d\ude04 ",
      "created_at": "2018-12-12T00:21:31Z",
      "updated_at": "2018-12-12T05:03:30Z"
    },
    {
      "author": "cbrit",
      "author_association": "NONE",
      "body": "Thanks so much for the explanation @vexx32, I've been using match differently than its intended for so long that I didn't bother checking the help. Sorry!",
      "created_at": "2018-12-12T04:51:34Z",
      "updated_at": "2018-12-12T04:51:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No worries @cbrit!\r\n\r\nIf you ever need someplace to experiment with regex with decent explanations, I've used https://regex101.com and https://regexstorm.net with pretty good success! \ud83d\ude04 ",
      "created_at": "2018-12-12T05:04:49Z",
      "updated_at": "2018-12-12T05:04:49Z"
    }
  ],
  "created_at": "2018-12-11T23:07:08Z",
  "number": 8452,
  "state": "closed",
  "title": "'$' character matches every character and string",
  "updated_at": "2018-12-28T09:52:23Z"
}