{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15386",
  "author": "kasini3000",
  "body": "I have a business script a.ps1. I want to compile and embed a.ps1 in a binary program. \r\nIn the binary program, execute pwsh -f a.ps1, which needs to be used across platforms.\r\npowershell v7 has been installed on this machine.\r\n\r\nI heard that .net core5 has \"single file deployment\" and \"NativeAOT\". What is the difference between the two? \r\nWhich solution is suitable for my scenario?\r\n\r\nDon't want more people to see it? Can also tell me secretly\r\n\r\nIn my business project,Only a few core scripts need to do this.",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Encrypt with password and run with password? Such a self-decrypted script with entered password (`Read-Host`). For example:\r\n```powershell\r\n$ErrorActionPreference = 'SilentlyContinue'\r\n \r\n$code = '76492d1116743f0423413b16050a5345MgB8ADIAYQBZAHcASQA1AHkAMQBGADIAagBSAFUAcwBRAGYAYwB0ADYAVwBRAEEAPQA9AHwAMwBmADQAMwAyAGEANQA3ADUANQAwADYAYQBiADYAMwA2ADcANAA2ADcANQBmADIAZgBhADgANAA1ADEAYQBiADEAZgA5ADgAZAA0ADEAOAA0AGIAMQAyADYANgAxADkANgA2ADEAYQAyADkAZgBlADgAYgA1AGMAOAA4ADkAYQA0ADAAMQAzAGUAZQA5ADQAMgA5AGUAOQBhADEANwAwADEAZgA0ADEAMQBlADEAMAA3ADIAZQBhADAAYwBhADEANgAyADYAOQBkAGMANwA4ADEAMQA2ADAANQBjAGYAZABmAGQAMQBiAGMAOAA3ADYAMAAwADUAMABmADcAZQAzADMAMwAzADcAYQBmAGMANAA4ADMAYgBlADMAYQA0ADgAMQBiAGYAYgBkAGUAMwA0ADkAZABmADUAMwAwAGUAZAA5AGMANQBjAGYAZABjADEAOQBmADAAMAA4ADUANABlADIAOAAwADEAMAA4ADMAZgBmADYAMwBkAGQAMwBiAGUANAAwAGEAZQA0ADMAOQBlAGIAMQBkAGQANgA5ADAANAA0AGIAMAAwAGYAZgA5AGMANwA3ADUAMgBkADcAYQAzAGQAYgA4AGQAOAA5ADkAZQBmAGEAYgBlAGUAOAA4ADAAZABkAGEANQAwADMAZgAwAGUANwAzADEAYgBlADIAYQAxAGUANgA5ADIANAA0ADcANgA4ADQANgA1ADYAYwAzAGIAOQA5ADgAMwBjAGMAMgBjADMAYgAzADYANwBmADUA'\r\n \r\n# password as plain text\r\n# $key = ConvertTo-SecureString -String 'aaaa' -AsPlainText \r\n\r\n$key = Read-Host \"Enter Password\" -AsSecureString\r\n \r\n$pass  = [byte[]][char[]][Net.NetworkCredential]::New($null,$key).Password\r\n$pass += [byte[]] (0..(31 - $pass.count))\r\n \r\nInvoke-Expression $(ConvertTo-SecureString $code -Key $pass |\r\n                    ConvertFrom-SecureString -AsPlainText)\r\n```",
      "created_at": "2021-05-12T07:26:09Z",
      "updated_at": "2021-05-12T07:26:09Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "There\u2019s no way to do this. If you need to be able to run a script the same user needs to be able to decode it somehow for PowerShell to run. You can add more layers to obfuscate the code but thats just delaying the inevitable.",
      "created_at": "2021-05-12T09:16:13Z",
      "updated_at": "2021-05-12T09:16:13Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> the same user needs to be able to decode it\r\n\r\nI am using encrypted scripts like this on different computers and in different OS. No need to be \"the same user\" just enter password (`aaaa`).\r\n\r\nFor Windows PowerShell compatibility:\r\n```powershell\r\n$ErrorActionPreference = 'SilentlyContinue'\r\n \r\n$code = '76492d1116743f0423413b16050a5345MgB8ADIAYQBZAHcASQA1AHkAMQBGADIAagBSAFUAcwBRAGYAYwB0ADYAVwBRAEEAPQA9AHwAMwBmADQAMwAyAGEANQA3ADUANQAwADYAYQBiADYAMwA2ADcANAA2ADcANQBmADIAZgBhADgANAA1ADEAYQBiADEAZgA5ADgAZAA0ADEAOAA0AGIAMQAyADYANgAxADkANgA2ADEAYQAyADkAZgBlADgAYgA1AGMAOAA4ADkAYQA0ADAAMQAzAGUAZQA5ADQAMgA5AGUAOQBhADEANwAwADEAZgA0ADEAMQBlADEAMAA3ADIAZQBhADAAYwBhADEANgAyADYAOQBkAGMANwA4ADEAMQA2ADAANQBjAGYAZABmAGQAMQBiAGMAOAA3ADYAMAAwADUAMABmADcAZQAzADMAMwAzADcAYQBmAGMANAA4ADMAYgBlADMAYQA0ADgAMQBiAGYAYgBkAGUAMwA0ADkAZABmADUAMwAwAGUAZAA5AGMANQBjAGYAZABjADEAOQBmADAAMAA4ADUANABlADIAOAAwADEAMAA4ADMAZgBmADYAMwBkAGQAMwBiAGUANAAwAGEAZQA0ADMAOQBlAGIAMQBkAGQANgA5ADAANAA0AGIAMAAwAGYAZgA5AGMANwA3ADUAMgBkADcAYQAzAGQAYgA4AGQAOAA5ADkAZQBmAGEAYgBlAGUAOAA4ADAAZABkAGEANQAwADMAZgAwAGUANwAzADEAYgBlADIAYQAxAGUANgA5ADIANAA0ADcANgA4ADQANgA1ADYAYwAzAGIAOQA5ADgAMwBjAGMAMgBjADMAYgAzADYANwBmADUA'\r\n \r\n# password as plain text\r\n# $key = ConvertTo-SecureString -String 'aaaa' -AsPlainText \r\n\r\n$key = Read-Host \"Enter Password\" -AsSecureString\r\n \r\n$pass  = [byte[]][char[]][Net.NetworkCredential]::New($null,$key).Password\r\n$pass += [byte[]] (0..(31 - $pass.count))\r\n \r\n$code = ConvertTo-SecureString $code -Key $pass\r\n\r\nswitch ($PSEdition)\r\n{\r\n    'Core'    { Invoke-Expression $(ConvertFrom-SecureString -SecureString $code -AsPlainText) }\r\n    'Desktop' { Invoke-Expression $([Net.NetworkCredential]::New($null,$code).Password) }\r\n}\r\n```",
      "created_at": "2021-05-12T11:01:45Z",
      "updated_at": "2021-05-12T11:46:47Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "My point is for a user to invoke a script they need to be able to decode/decrypt it from the obfuscated state. Without being able to do that they cannot run the script. Whether it's encrypted with a password or encrypted to some user context secret the end result is the same. PowerShell even has builtin logging to log any scriptblock that is invoked making it even easier to determine what was actually run and get in plaintext.",
      "created_at": "2021-05-12T11:48:09Z",
      "updated_at": "2021-05-12T11:48:09Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> to invoke a script they need to be able to decode/decrypt it from the obfuscated state.\r\n\r\nI did not understand why user who knows password can not run the script?:\r\n```\r\n> .\\script\r\nEnter password: ****\r\n# Get-Date output\r\n# $Env:UserName or $Env:USER\r\n```\r\n> PowerShell even has builtin logging to log any scriptblock that is invoked making it even easier to determine what was actually run and get in plaintext.\r\n\r\nThere logs are? Is this `about_Logging` help?",
      "created_at": "2021-05-12T12:20:02Z",
      "updated_at": "2021-05-12T12:20:02Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "@237dmitry - there are numerous logs for Powershell, depending on whether you mean windows PowerShell or PowerShell 7 (aka core).  To discover them, you can use Get-WinEvent, like this:\r\n\r\n```Console\r\nPS C:\\Foo> get-winevent -ListLog *powershell*\r\n\r\nLogMode   MaximumSizeInBytes RecordCount LogName\r\n-------   ------------------ ----------- -------\r\nCircular            15728640        2603 Windows PowerShell\r\nCircular            15728640        2469 PowerShellCore/Operational\r\nCircular            15728640        1652 Microsoft-Windows-PowerShell/Operational\r\nRetain            1048985600           0 Microsoft-Windows-PowerShell/Admin\r\nCircular             1052672           0 Microsoft-Windows-PowerShell-DesiredStateConfiguration-FileDownloadManager/Op\u2026\r\n```\r\nYou can view the events in Powershell, or event viewer. \r\n",
      "created_at": "2021-05-12T12:28:57Z",
      "updated_at": "2021-05-12T12:28:57Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> there are numerous logs for Powershell\r\n\r\nAmong these logs, I did not find any script blocks from encrypted scripts.",
      "created_at": "2021-05-12T13:13:14Z",
      "updated_at": "2021-05-12T13:14:58Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Script block logging is a bit of a resource hog so is disabled by default. \r\n\r\nSee the [about_logging help page](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.1) and look for enabling script block logging.",
      "created_at": "2021-05-12T13:37:17Z",
      "updated_at": "2021-05-12T13:37:17Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Script block logging is a bit of a resource hog so is disabled by default.\r\n>> disabled\r\n\r\nThat's why I asked\r\n> Is this about_Logging help?\r\n\r\nPS. (Not personally) I offered -- you answered. The more offers the better.",
      "created_at": "2021-05-12T13:50:56Z",
      "updated_at": "2021-05-12T13:50:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I heard that .net core5 has \"single file deployment\" and \"NativeAOT\". What is the difference between the two?\r\n\r\nNeither of those two is for your scenario. If you want, you can embed your script as a resource stream in your .NET application, and at runtime, you can read the text from the resource stream and run `pwsh -command <script-text>`.",
      "created_at": "2021-05-12T16:35:08Z",
      "updated_at": "2021-05-12T16:35:08Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I know this may involve hackers, so it is necessary to briefly talk about my project.\r\nThis is one of the most outstanding powershell projects. The name is [k4t]. It is similar to k8s and has not been released yet. The core code does not want to be open source.\r\n\r\nThe ps1 script on the master side runs on win and linux platforms. The script on the node side runs on the linux platform. It is used by customers and cannot be encrypted by password. I just want to protect the source code.\r\n\r\n@daxian-dbw  Thank you for your reply. Do me still need to install .net core to run this binary?\r\nIf it is, I cannot adopt this scheme. If not, can you tell me more or give me a few blog posts?\r\n\r\nIn fact, I considered using golang, compiling and embedding, to protect the ps1 source code. \r\nBefore that, I want to pin my last hope on this help post.",
      "created_at": "2021-05-13T07:08:33Z",
      "updated_at": "2021-05-13T07:08:33Z"
    }
  ],
  "created_at": "2021-05-12T06:52:37Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 15386,
  "state": "open",
  "title": "How to protect my business script?",
  "updated_at": "2021-05-13T07:08:33Z"
}