{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16475",
  "author": "jborean93",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nCreate a C# binary cmdlet that references the `PowerShellStandard.Library`\r\n\r\n> <PackageReference Include=\"PowerShellStandard.Library\" Version=\"5.1.0\" PrivateAssets=\"all\" />\r\n\r\nTry to reference the [RegistryProvider](https://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/src/System.Management.Automation/namespaces/RegistrySecurity.cs) type\r\n\r\n```csharp\r\nusing Microsoft.PowerShell.Commands;\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Cmdlet(\r\n        VerbsCommon.Remove, \"MyCmdlet\",\r\n        DefaultParameterSetName = \"Path\",\r\n        SupportsShouldProcess = true\r\n    )]\r\n    public class RemoveTest : PSCmdlet\r\n    {\r\n        private string[] _paths = new string[0];\r\n        private bool _shouldExpandWildcards;\r\n\r\n        [Parameter(\r\n            Mandatory = true,\r\n            ValueFromPipeline = false,\r\n            ValueFromPipelineByPropertyName = true,\r\n            ParameterSetName = \"LiteralPath\")\r\n        ]\r\n        [Alias(\"PSPath\")]\r\n        [ValidateNotNullOrEmpty]\r\n        public string[] LiteralPath\r\n        {\r\n            get { return _paths; }\r\n            set { _paths = value; }\r\n        }\r\n\r\n        [Parameter(\r\n            Position = 0,\r\n            Mandatory = true,\r\n            ValueFromPipeline = true,\r\n            ValueFromPipelineByPropertyName = true,\r\n            ParameterSetName = \"Path\")\r\n        ]\r\n        [ValidateNotNullOrEmpty]\r\n        public string[] Path\r\n        {\r\n            get { return _paths; }\r\n            set\r\n            {\r\n                _shouldExpandWildcards = true;\r\n                _paths = value;\r\n            }\r\n        }\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            foreach (string path in _paths)\r\n            {\r\n                ProviderInfo provider;\r\n                PSDriveInfo drive;\r\n                List<string> regPaths = new List<string>();\r\n                if (_shouldExpandWildcards)\r\n                {\r\n                    regPaths.AddRange(this.GetResolvedProviderPathFromPSPath(path, out provider));\r\n                }\r\n                else\r\n                {\r\n                    regPaths.Add(this.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\r\n                        path, out provider, out drive));\r\n                }\r\n\r\n                if (provider.ImplementingType != typeof(RegistryProvider))\r\n                {\r\n                    // Filter out any paths that aren't a registry path.\r\n                    continue;\r\n                }\r\n\r\n                foreach (string regPath in regPaths)\r\n                {\r\n                    // Do work here\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI'm unsure whether this is done on purpose for cross platform uses, I have a workaround but not sure if this should be fixed for others.\n\n### Expected behavior\n\n```console\nNo failure, can reference `RegistryProvider`.\n```\n\n\n### Actual behavior\n\n```console\n> C:\\temp\\AdvReg\\src\\Commands\\RegLink.cs(70,57): error CS0246: The type or namespace name 'RegistryProvider' could not be found (are you missing a using\r\ndirective or an assembly reference?) [C:\\temp\\AdvReg\\src\\AdvReg.csproj]\n```\n\n\n### Error details\n\n```console\nNo ps error, it is a compile error.\n```\n\n\n### Environment data\n\n```powershell\nNot a problem in pwsh itself but with `PowerShellStandard.Library` not containing the reference.\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher Can you please take a look?",
      "created_at": "2021-11-17T18:02:11Z",
      "updated_at": "2021-11-17T18:02:11Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Because PowerShell Standard was created to be able to target both Windows PowerShell and PowerShell Core, which is now cross platform I can understand why the registry was not added as non-Windows systems do not have a registry. PowerShell Standard is not the solution to everything unfortunately and where the standard does not fit, you'll still have to multi-target.\r\nUnless we want to do something special for Windows like a Windows specific Standard, I fear this might be 'by design'",
      "created_at": "2021-11-23T17:57:22Z",
      "updated_at": "2021-11-23T17:57:22Z"
    }
  ],
  "created_at": "2021-11-16T01:27:49Z",
  "number": 16475,
  "state": "open",
  "title": "RegistryProvider not present in PowerShellStandard.Library",
  "updated_at": "2021-11-23T17:57:22Z"
}