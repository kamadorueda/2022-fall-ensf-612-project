{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5781",
  "author": "NoCheroot",
  "body": "I rely on this pretty heavily:\r\n```\r\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Name\r\n```\r\nIt is fast and reliable, but does not work in 6.0.\r\n\r\n![image](https://user-images.githubusercontent.com/10468415/34537538-736d7e4c-f08e-11e7-8121-e768f357c77e.png)\r\n\r\nTried to resolve the \"Could not load file or assembly 'System.Configuration.ConfigurationManager'\" with this: https://www.nuget.org/packages/System.Configuration.ConfigurationManager/4.5.0-preview1-25914-04, but I suspect there are reasons I'm not seeing which will prevent that route from working.  I didn't consider loading System.DirectoryServices from .Net Framework a serious solution anyway, but I thought I'd try just to see.\r\n\r\nThese provide the same information, and work with 6.0:\r\n```\r\n$ADSystemInfo = New-Object -ComObject ADSystemInfo\r\n$type = $ADSystemInfo.GetType()\r\n$type.InvokeMember('SiteName', 'GetProperty', $null, $ADSystemInfo, $null)\r\n```\r\n```\r\nGet-CimInstance -ClassName Win32_NTDomain | Select-Object -ExpandProperty ClientSiteName\r\n```\r\n\r\nI'd like to avoid using the COM object option if possible.  I've found it less reliable than GetComputerSite in the past.  The second option is extremely slow.\r\n\r\nSo, two questions.\r\n\r\nI see System.DirectoryServices listed here: https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.Windows.Compatibility/Microsoft.Windows.Compatibility.pkgproj.  Does that mean at some point in the future GetComputerSite() will work with 6.0 out of the box?\r\n\r\nDoes 6.0 provide another fast reliable way to get AD Site Name I'm not seeing?\r\n",
  "closed_at": "2018-01-04T12:18:07Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @NoCheroot! This will work on 64-bit windows:\r\n\r\n```powershell\r\nInstall-Module -Name PSCoreWindowsCompat -Scope CurrentUser\r\nImport-Module PSCoreWindowsCompat\r\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Name\r\n```\r\n\r\nFor now my separate module or manually adding the [Windows Compatibility Pack for .NET Core](https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/) are the 2 ways of doing this. There is work underway to make an \"offcial\" compatibility module which will restore many missing windows-only functions and .NET classes. https://github.com/PowerShell/WindowsPowerShellCompatibilityPack it is in the very early stages though. Eventually it will replace my community module.",
      "created_at": "2018-01-03T20:26:52Z",
      "updated_at": "2018-01-03T20:26:52Z"
    },
    {
      "author": "NoCheroot",
      "author_association": "NONE",
      "body": "Perfect.  Thank you.",
      "created_at": "2018-01-03T20:42:40Z",
      "updated_at": "2018-01-03T20:42:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems .Net Core 2.1.0 will have ported `System.DirectoryServices` (but not still ActiveDirectory).",
      "created_at": "2018-01-04T14:45:37Z",
      "updated_at": "2018-01-04T14:45:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@chuanjiao10 Please open an issue here https://github.com/markekraus/PSCoreWindowsCompat/issues",
      "created_at": "2018-01-07T13:23:53Z",
      "updated_at": "2018-01-07T13:23:53Z"
    }
  ],
  "created_at": "2018-01-03T20:17:44Z",
  "number": 5781,
  "state": "closed",
  "title": "Active Directory Site",
  "updated_at": "2018-01-07T13:23:53Z"
}