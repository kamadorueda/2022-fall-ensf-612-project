{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6054",
  "author": "iSazonov",
  "body": "## PR Summary\r\n\r\nUpdate repo to use latest CLI tools.\r\n- Now we can use C# 7.2 features.\r\n- We continue use Runtime 2.0.5\r\n\r\n## PR Checklist\r\n\r\nNote: Please mark anything not applicable to this PR `NA`.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [NA] User facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [NA] Issue filed - Issue link:\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n    - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n",
  "closed_at": "2018-01-31T22:56:21Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus The build contains one failure of an `Invoke-WebRequest` test. Are you aware of this? I assume it's a known issue or a sporadic failure but it's always better to double check.",
      "created_at": "2018-01-28T15:53:48Z",
      "updated_at": "2018-01-28T15:53:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CI Appveyor failed twice but CI Travis build passed. \ud83d\ude15 ",
      "created_at": "2018-01-28T16:17:59Z",
      "updated_at": "2018-01-28T16:17:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Locally all web tests passed.",
      "created_at": "2018-01-28T16:44:36Z",
      "updated_at": "2018-01-28T16:44:36Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "`A task was canceled.` means the time out `-TimeoutSec` was reached (it's at `5` for this specific test) . These kinds of failure randomly pop up from time to time. My guess is that the CI VMs are slow or sleeping. We needed these timeouts before due to the tests relying on out-of-box endpoints. Now that all endpoints are in-box, we can probably remove them all. ",
      "created_at": "2018-01-28T17:06:59Z",
      "updated_at": "2018-01-28T17:06:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for clarify!\r\n\r\nOn my notepad the web tests took almost 10 minutes. Some tests took 2-4 seconds with almost zero processor load. I wonder why the tests so slow.\r\n```powershell\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: MultipleChoices 1.1s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: Ambiguous 1.06s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: Moved 4.12s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: MovedPermanently 4.17s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: Found 4.25s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: Redirect 4.13s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: redirectMethod 4.13s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: SeeOther 4.11s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: TemporaryRedirect 4.13s\r\n [+] Validates Invoke-RestMethod preserves the authorization header on multiple redirects: RedirectKeepVerb 4.12s\r\n [+] Validates Invoke-RestMethod strips the authorization header on various redirects: MultipleChoices 2.11s\r\n [+] Validates Invoke-RestMethod strips the authorization header on various redirects: Ambiguous 2.12s\r\n```\r\n\r\nHave you any thoughts?",
      "created_at": "2018-01-28T17:21:29Z",
      "updated_at": "2018-01-28T17:21:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I speculate they are slow because WebListener runs in a Job thread.",
      "created_at": "2018-01-28T17:30:37Z",
      "updated_at": "2018-01-28T17:30:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we use runspaces?",
      "created_at": "2018-01-28T18:07:17Z",
      "updated_at": "2018-01-28T18:07:17Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Or maybe [PoshRSJob ](https://github.com/proxb/PoshRSJob) that is optimised for this scenario and brings much better performance?",
      "created_at": "2018-01-28T18:15:51Z",
      "updated_at": "2018-01-28T18:15:51Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "hmm interesting.. It appears that .NET Core is really slow to redirect with both HttpClient and WebResponse.\r\n\r\nI see some marginal improvements running the WebListener in different ways.. but not much. What I really see is a HUGE difference in execution times with the raw .NET APIs between 5.1 and 6.0.1:\r\n\r\n```powershell\r\n$uri = 'http://localhost:8083/Redirect/3?Type=MovedPermanently'\r\nMeasure-Command {\r\n    $WebRequest = [System.Net.WebRequest]::Create($uri)\r\n    $Response = $WebRequest.GetResponse()\r\n    $ResponseStream = $Response.GetResponseStream()\r\n    $StreamReader = [System.IO.StreamReader]::new($ResponseStream)\r\n    $conetnt = $StreamReader.ReadToEnd()\r\n    $content\r\n    $StreamReader.Close()\r\n    $ResponseStream.Close()\r\n    $Response.Close()\r\n}\r\n\r\nMeasure-Command {\r\n    $HttpClientHandler = [System.Net.Http.HttpClientHandler]::new()\r\n    $HttpClient = [System.Net.Http.HttpClient]::New($HttpClientHandler)\r\n    $Result = $HttpClient.GetAsync($uri).GetAwaiter().GetResult()\r\n    $Content = $Result.Content.ReadAsStringAsync().GetAwaiter().GetResult()\r\n    $Result.Dispose()\r\n    $HttpClient.Dispose()\r\n    $HttpClientHandler.Dispose()\r\n}\r\n```\r\n\r\nfrom 5.1:\r\n\r\n```none\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 2\r\nTicks             : 23220\r\nTotalDays         : 2.6875E-08\r\nTotalHours        : 6.45E-07\r\nTotalMinutes      : 3.87E-05\r\nTotalSeconds      : 0.002322\r\nTotalMilliseconds : 2.322\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 3\r\nTicks             : 31039\r\nTotalDays         : 3.59247685185185E-08\r\nTotalHours        : 8.62194444444444E-07\r\nTotalMinutes      : 5.17316666666667E-05\r\nTotalSeconds      : 0.0031039\r\nTotalMilliseconds : 3.1039\r\n```\r\n\r\nFrom 6.0.1:\r\n\r\n```none\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 4\r\nMilliseconds      : 20\r\nTicks             : 40206624\r\nTotalDays         : 4.65354444444444E-05\r\nTotalHours        : 0.00111685066666667\r\nTotalMinutes      : 0.06701104\r\nTotalSeconds      : 4.0206624\r\nTotalMilliseconds : 4020.6624\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 4\r\nMilliseconds      : 21\r\nTicks             : 40217051\r\nTotalDays         : 4.65475127314815E-05\r\nTotalHours        : 0.00111714030555556\r\nTotalMinutes      : 0.0670284183333333\r\nTotalSeconds      : 4.0217051\r\nTotalMilliseconds : 4021.7051\r\n````\r\n\r\nThat's against the same WebListener (running in a separate console from where I'm testing 6.0.1). What takes 5.1 a few milliseconds takes 6.0.1 several seconds.... I get a similar difference in execution times for other (non-WebListener) redirection endpoints.\r\n\r\nI'm now suspecting the issue lies in .NET Core... hooray... \ud83c\udf89 \u2639\ufe0f \r\n\r\nIn any case.. 4 .x seconds on my pc would definitely go past 5 seconds in CI.\r\n\r\nShould we move to runspaces? I vote no. We saw some really strange behavior with HttpListener running in a runspace on macOS. I'm not even close to considering it for WebListener. My quick tests how only marginal perf gain on my local PC.\r\n\r\nI really don't have time to submit to this project AND constantly open issues with CoreFX.  So someone else is welcome to open yet another issues on this with them. \r\n\r\nI stand by my original idea to remove the timeouts as they are no longer needed.",
      "created_at": "2018-01-28T18:25:08Z",
      "updated_at": "2018-01-28T18:30:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Should we move to runspaces? I vote no.\r\n\r\nI agree - we don't get any benefits if the problem in CoreFX.\r\n\r\n>I really don't have time to submit to this project AND constantly open issues with CoreFX. \r\n\r\nWe are totally dependent on CoreFX. So we're doomed to open cases there again and again. I'll open the case for the problem. \r\nUpdate: there is old https://github.com/dotnet/corefx/issues/13551\r\n\r\n>I stand by my original idea to remove the timeouts as they are no longer needed.\r\n\r\nGiven that they helped us now I would not removed them, but just increased to 10 sec. Who knows maybe they'll still help us catch other problems. It is also possible that we will be forced to use other external servers for some tests in the future. In any case I would prefer a steered failure and not silent CI hang.",
      "created_at": "2018-01-29T03:44:56Z",
      "updated_at": "2018-01-29T04:42:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The caches in appveyor.yml and travis.yml need to be flushed because the `dotnet` folder is also part of the cache. I will submit a commit to address that.",
      "created_at": "2018-01-31T18:07:35Z",
      "updated_at": "2018-01-31T18:07:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The xUnit tests are hardcoded to target dotnet core 2.0.0, but the dotnet sdk 2.1.4 doesn't ship with 2.0.0 rutnime anymore, so it failed. Update the xUnit tests to use 2.0.5 runtime.",
      "created_at": "2018-01-31T19:52:23Z",
      "updated_at": "2018-01-31T19:52:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Many thanks for help and merge!",
      "created_at": "2018-02-01T04:13:13Z",
      "updated_at": "2018-02-01T04:13:13Z"
    }
  ],
  "created_at": "2018-01-28T13:36:18Z",
  "number": 6054,
  "state": "closed",
  "title": "Update PowerShell to build with .NET Core SDK 2.1.4",
  "updated_at": "2018-02-01T04:13:20Z"
}