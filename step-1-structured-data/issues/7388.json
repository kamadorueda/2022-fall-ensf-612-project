{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7388",
  "author": "mklement0",
  "body": "[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_03) mandates the presence of an _environment_ variable named `PWD` that should \"represent an absolute pathname of the current working directory.\"\r\n\r\nThat is, POSIX-like shells keep the value of this env. variable in sync with their working dir. so that (non-shell) processes created from the shell can rely on it reflecting the shell's notion of the current dir.\r\n\r\nPowerShell currently doesn't set this environment variable (it only sets its internal automatic `$PWD` variable, which other processes cannot see), which can have unintended consequences when invoking Unix utilities that rely on it.\r\n\r\nThis problem is conceptually related to #3428, for which there is no good solution due to its in-process nature.\r\n\r\nIn the case at hand, however, since a _child process_ must be created to invoke an external program, it should be possible to add a `PWD` environment variable reflecting PowerShell's current filesystem location to the environment block of the new process.\r\n\r\nSteps to reproduce (on macOS or Linux)\r\n------------------\r\n\r\n```powershell\r\n# Switch to an arbitrary location and make the Perl process display the value of $env:PWD\r\nSet-Location /tmp; perl -le 'print $ENV{PWD}'  \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n/tmp\r\n```\r\n\r\nThat is, the external utility's process should see PowerShell's current filesystem location in its `PWD` environment variable.\r\n\r\n(Note that using another shell (e.g., `bash`) for this test wouldn't be a valid test, because POSIX-like shells set the `PWD` environment variable themselves.)\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n/home/jdoe     # e.g.\r\n```\r\n\r\nEven with PowerShell configured as the user's default shell, `$env:PWD` is still set at the time the PowerShell session starts, and seemingly always reflects the user's home dir.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.4 on macOS 10.13.6\r\nPowerShell Core v6.1.0-preview.4 on Ubuntu 16.04.4 LTS\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a goal to make PowerShell POSIX compliant?",
      "created_at": "2018-07-27T23:43:31Z",
      "updated_at": "2018-07-27T23:43:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim:\r\n\r\nIt's not about POSIX compliance per se - it's just that POSIX-decreed functionality is,  by and large, the  common denominator across macOS and Linux - see https://github.com/PowerShell/PowerShell/issues/6518#issuecomment-376914142\r\n\r\nIf PowerShell wants to be a good cross-platform citizen and aspires to be the \"universal shell\" (which I hope it does), it must not contravene fundamental expectations of any platform's native utilities.\r\n\r\nUtilities (command-line programs) on Unix-like platforms may rely on environment variable `ENV` (`$env:PWD`, in PowerShell terms) reflecting the notion of the calling shell's current directory.\r\n\r\nPowerShell not respecting that can lead to subtle failures.\r\n\r\nIf you want a specific example:\r\n\r\nAfter switching my default shell to PowerShell on macOS, my (standardized across projects) `Makefile`s started to break, because they try to add project-relative directories to `$env:PATH`, based on `$env:PWD`.\r\n\r\n\r\n\r\n",
      "created_at": "2018-07-28T01:45:39Z",
      "updated_at": "2018-07-28T01:45:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe it will be easy-to-fix and good enhancement.",
      "created_at": "2018-07-30T05:01:14Z",
      "updated_at": "2018-07-30T05:01:14Z"
    },
    {
      "author": "Happycoil",
      "author_association": "NONE",
      "body": "Just got bitten by this after changing my login shell to pwsh `7.0.0-preview.3`. I expect lots of tools have code like this: https://github.com/chef/chef/blob/39cf0beb9ccc0fa0f60fa9d52b3c0a2bccc6c0f1/chef-config/lib/chef-config/workstation_config_loader.rb#L141-L149 and more people will be using pwsh as their login shell now...\r\n\r\nMy particular issue can be solved by setting `$env:PWD` to an empty string, but I expect that'll break something else I haven't tried yet.\n\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/29740?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/chef/chef\">chef/chef</a></strong></div><div>A systems integration framework, built to bring the benefits of configuration management to your entire infrastructure. - chef/chef</div></blockquote>",
      "created_at": "2019-08-21T12:21:52Z",
      "updated_at": "2019-08-21T12:21:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Code references:\r\nhttps://github.com/PowerShell/PowerShell/blob/356355c32506a3bee17fb8b4572a82f0f2910322/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2133-L2165\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/356355c32506a3bee17fb8b4572a82f0f2910322/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L452-L453",
      "created_at": "2019-08-22T07:41:16Z",
      "updated_at": "2019-08-22T07:41:16Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It seems we could implement this with something like [this property](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.environment)",
      "created_at": "2020-08-20T19:00:32Z",
      "updated_at": "2020-08-20T19:00:32Z"
    }
  ],
  "created_at": "2018-07-27T17:13:37Z",
  "number": 7388,
  "state": "open",
  "title": "Unix utilities expect $env:PWD to reflect the current directory, as per POSIX",
  "updated_at": "2020-12-07T19:07:51Z"
}