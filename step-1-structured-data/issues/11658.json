{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11658",
  "author": "ALIENQuake",
  "body": "Hi,\r\n\r\nI have very simple Windows Forms Powershell code, it works perfectly for PS 5.1\r\n\r\nPS 7 is using NET Core 3.x so I can also use the Forms framework. But the code below gives me an error:\r\n\r\n# Steps to reproduce\r\nPaste below code into PS 7.x, click 'Run' button.\r\n```powershell\r\n[reflection.assembly]::LoadWithPartialName(\"System.Windows.Forms\") | Out-Null\r\n[reflection.assembly]::LoadWithPartialName(\"System.Drawing\") | Out-Null\r\n\r\n[System.Windows.Forms.Application]::EnableVisualStyles()\r\n$form = New-Object 'System.Windows.Forms.Form'\r\n$buttonRunProcess = New-Object 'System.Windows.Forms.Button'\r\n$richtextboxOutput = New-Object 'System.Windows.Forms.RichTextBox'\r\n$buttonExit = New-Object 'System.Windows.Forms.Button'\r\n$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'\r\n\r\n$buttonExit_Click={\r\n    $form.Close()\r\n}\r\n\r\n$buttonRunProcess_Click = {\r\n    $buttonRunProcess.Enabled = $false\r\n\r\n    $richtextboxOutput.Clear()\r\n\r\n    $process = New-Object System.Diagnostics.Process\r\n    $process.StartInfo.FileName = 'ping.exe'\r\n    $process.StartInfo.Arguments = 'google.com'\r\n    $process.StartInfo.UseShellExecute = $false\r\n    $process.StartInfo.CreateNoWindow = $true\r\n    $process.StartInfo.RedirectStandardInput = $false\r\n    $process.StartInfo.RedirectStandardOutput = $true\r\n    $process.EnableRaisingEvents = $true\r\n    $process.SynchronizingObject = $buttonRunProcess\r\n    $process.add_OutputDataReceived( {\r\n        # Use $_.Data to access the output text\r\n        $richtextboxOutput.AppendText($_.Data)\r\n        $richtextboxOutput.AppendText(\"`r`n\") }\r\n)\r\n\r\n    $process.Start() | Out-Null\r\n    $process.BeginOutputReadLine()\r\n}\r\n\r\n\r\n$Form_StateCorrection_Load=\r\n{\r\n    #Correct the initial state of the form to prevent the .Net maximized form issue\r\n    $form.WindowState = $InitialFormWindowState\r\n}\r\n\r\n$Form_Cleanup_FormClosed=\r\n{\r\n    try\r\n    {\r\n        $buttonRunProcess.remove_Click($buttonRunProcess_Click)\r\n        $buttonExit.remove_Click($buttonExit_Click)\r\n        $form.remove_FormClosed($processTracker_FormClosed)\r\n        $form.remove_Load($Form_StateCorrection_Load)\r\n        $form.remove_FormClosed($Form_Cleanup_FormClosed)\r\n    }\r\n    catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }\r\n}\r\n\r\n$form.SuspendLayout()\r\n\r\n$form.Controls.Add($buttonRunProcess)\r\n$form.Controls.Add($richtextboxOutput)\r\n$form.Controls.Add($buttonExit)\r\n$form.ClientSize = [System.Drawing.Size]::new(584, 362)\r\n$form.Margin = '4, 4, 4, 4'\r\n$form.MinimumSize = [System.Drawing.Size]::new(304, 315)\r\n$form.Name = 'Redirect Process Output'\r\n$form.StartPosition = 'CenterScreen'\r\n$form.Text = 'Redirect Process Output'\r\n\r\n$buttonRunProcess.Anchor = 'Bottom, Left'\r\n$buttonRunProcess.Location = [System.Drawing.Point]::new(12, 327)\r\n$buttonRunProcess.Name = 'buttonRunProcess'\r\n$buttonRunProcess.Size = [System.Drawing.Size]::new(75, 23)\r\n$buttonRunProcess.TabIndex = 0\r\n$buttonRunProcess.Text = 'Run'\r\n$buttonRunProcess.UseCompatibleTextRendering = $True\r\n$buttonRunProcess.UseVisualStyleBackColor = $True\r\n$buttonRunProcess.add_Click($buttonRunProcess_Click)\r\n\r\n$richtextboxOutput.Anchor = 'Top, Bottom, Left, Right'\r\n$richtextboxOutput.HideSelection = $False\r\n$richtextboxOutput.Location = [System.Drawing.Point]::new(12, 12)\r\n$richtextboxOutput.Name = 'richtextboxOutput'\r\n$richtextboxOutput.ReadOnly = $True\r\n$richtextboxOutput.Size = [System.Drawing.Size]::new(559, 305)\r\n$richtextboxOutput.TabIndex = 6\r\n$richtextboxOutput.Text = ''\r\n$richtextboxOutput.WordWrap = $False\r\n\r\n$buttonExit.Anchor = 'Bottom, Right'\r\n$buttonExit.Location = [System.Drawing.Point]::new(497, 327)\r\n$buttonExit.Name = 'buttonExit'\r\n$buttonExit.Size =  [System.Drawing.Size]::new(75, 23)\r\n$buttonExit.TabIndex = 2\r\n$buttonExit.Text = 'E&xit'\r\n$buttonExit.UseCompatibleTextRendering = $True\r\n$buttonExit.UseVisualStyleBackColor = $True\r\n$buttonExit.add_Click($buttonExit_Click)\r\n\r\n$form.ResumeLayout()\r\n\r\n$InitialFormWindowState = $form.WindowState\r\n$form.add_Load($Form_StateCorrection_Load)\r\n$form.add_FormClosed($Form_Cleanup_FormClosed)\r\n$form.ShowDialog()\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nAfter clicking the \"Run\" button the output from ping google.com is displayed inside the text box.\r\n```\r\n\r\n# Actual behavior\r\nNo output is displayed and Powershell crash with\r\n```none\r\nUnhandled exception. System.Management.Automation.PSInvalidOperationException: There is no Runspace available to run scripts in this thread. You can provide one in the DefaultRunspace property of the System.Management.Automation.Runspaces.Runspace type. The script block you attempted to invoke was:\r\n        # Use $_.AppendText(\"`r`n\")\r\n   at System.Management.Automation.ScriptBlock.GetContextFromTLS()\r\n   at System.Management.Automation.ScriptBlock.InvokeAsDelegateHelper(Object dollarUnder, Object dollarThis, Object[] args)\r\n   at lambda_method(Closure , Object , DataReceivedEventArgs )\r\n   at System.Diagnostics.Process.OutputReadNotifyUser(String data)\r\n   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean rethrowInNewThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Diagnostics.AsyncStreamReader.<>c.<FlushMessageQueue>b__18_0(Object edi)\r\n   at System.Threading.QueueUserWorkItemCallback.<>c.<.cctor>b__6_0(QueueUserWorkItemCallback quwi)\r\n   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState& state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\n```\r\n\r\n# Environment data\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-08-12T10:28:26Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From debug build we can see a line of the throw:\r\n```powershell\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\nUnhandled exception. System.Management.Automation.PSInvalidOperationException: There is no Runspace available to run scripts in this thread. You can provide one in the DefaultRunspace property of the System.Management.Automation.Runspaces.Runspace type. The script block you attempted to invoke was:\r\n        # Use $_.D.AppendText(\"`r`n\")\r\n   at System.Management.Automation.ScriptBlock.GetContextFromTLS() in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\engine\\lang\\scriptblock.cs:line 840\r\n   at System.Management.Automation.ScriptBlock.InvokeAsDelegateHelper(Object dollarUnder, Object dollarThis, Object[] args) in C:\\Users\\1\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automation\\engine\\lang\\scriptblock.cs:line 796\r\n   at lambda_method(Closure , Object , DataReceivedEventArgs )\r\n   at System.Diagnostics.Process.OutputReadNotifyUser(String data)\r\n   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean rethrowInNewThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Diagnostics.AsyncStreamReader.<>c.<FlushMessageQueue>b__18_0(Object edi)\r\n   at System.Threading.QueueUserWorkItemCallback.<>c.<.cctor>b__6_0(QueueUserWorkItemCallback quwi)\r\n   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState& state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\n/cc @daxian-dbw @PaulHigin  Could you please look the issue?",
      "created_at": "2020-01-22T17:13:07Z",
      "updated_at": "2020-01-22T17:15:46Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "PowerShell scriptblocks have runspace affinity, and runspaces are associated with threads.  This error is occurring because the callback scriptblock is created on one runspace, but is being invoked on a random pool thread that has no associated runspace ('There is no runspace available...').\r\n\r\nIn general, scriptblocks should be run in the same thread/runspace in which they were created.\r\nThis kind of script can be problematic because Windows Forms can make call backs (to script blocks) on random pool threads, causing threading issues.",
      "created_at": "2020-01-22T17:47:10Z",
      "updated_at": "2020-01-22T17:47:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Thanks! It is still not clear why the example works in Windows PowerShell but not in PowerShell Core.\r\n\r\nUpdate: Windows PowerShell crash too.",
      "created_at": "2020-01-22T17:50:41Z",
      "updated_at": "2020-01-22T17:52:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> This kind of script can be problematic because Windows Forms can make call backs (to script blocks) on random pool threads, causing threading issues.\r\n\r\n~It's worth noting that the use of `Forms` is actually incidental here.  The change appears to be due to `Process` using an async stream for it's output reading. This is enough to repro:~ **Edit:** Nevermind, the `SynchronizingObject` was what made it work.\r\n\r\n```powershell\r\n$process = New-Object System.Diagnostics.Process\r\n$process.StartInfo.FileName = 'ping.exe'\r\n$process.StartInfo.Arguments = 'google.com'\r\n$process.StartInfo.UseShellExecute = $false\r\n$process.StartInfo.CreateNoWindow = $true\r\n$process.StartInfo.RedirectStandardInput = $false\r\n$process.StartInfo.RedirectStandardOutput = $true\r\n$process.EnableRaisingEvents = $true\r\n$process.SynchronizingObject = $buttonRunProcess\r\n$process.add_OutputDataReceived{\r\n    # Use $_.Data to access the output text\r\n    $richtextboxOutput.AppendText($_.Data)\r\n    $richtextboxOutput.AppendText(\"`r`n\")\r\n}\r\n\r\n$process.Start() | Out-Null\r\n$process.BeginOutputReadLine()\r\n```",
      "created_at": "2020-01-22T17:50:53Z",
      "updated_at": "2020-01-22T18:25:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Windows PowerShell crash too.",
      "created_at": "2020-01-22T17:52:57Z",
      "updated_at": "2020-01-22T17:52:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The script runs fine in Windows PowerShell on my machine.\r\n\r\nIn Windows PowerShell, the `OutputDataReceived` event handler is invoked on the pipeline thread because the synchronization context created by the form is used when calling the handler in [`Process.OutputReadNotifyUser`](https://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs,2642).\r\n\r\nHowever, in PowerShell 7, [`Process.OutputReadNotifyUser`](https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/Process.cs,1460) doesn't respect the `SynchronizingObject` anymore. The callback will eventually be invoked in [`AsyncStreamReader.ReadBufferAsync`](https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/AsyncStreamReader.cs,90), after `await _stream.ReadAsync(...).ConfigureAwait(false)`. Be noted about the `ConfigureAwait(false)` part, it means everything after this will be continued on a thread pool thread. Given that `Process.OutputReadNotifyUser` doesn't respect the sync context anymore, the delegate created from the script block will just run on a thread pool thread without a default Runspace, and hence the exception.\r\n\r\nSo, conclusion: I think this is a .NET Core issue, and will report it there.",
      "created_at": "2020-01-22T18:12:37Z",
      "updated_at": "2020-01-22T18:12:37Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@daxian-dbw That was a fantastic debugging! This issue actually affects all admin-gui-like tools which would like to use PS7. Thank you for the quick reaction. I will also comment on the net issue.",
      "created_at": "2020-01-22T19:33:35Z",
      "updated_at": "2020-01-22T19:33:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The .NET Core issue was opened: https://github.com/dotnet/runtime/issues/2024.\r\nI hope they can port the fix to the subsequent servicing release of 3.1, so our servicing release can pick up the fix.",
      "created_at": "2020-01-22T20:06:08Z",
      "updated_at": "2020-01-22T20:07:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@ALIENQuake In the mean time, here's a workaround:\r\n\r\n```powershell\r\nusing namespace System.Linq.Expressions\r\n\r\n[reflection.assembly]::LoadWithPartialName(\"System.Windows.Forms\") | Out-Null\r\n[reflection.assembly]::LoadWithPartialName(\"System.Drawing\") | Out-Null\r\n\r\n[System.Windows.Forms.Application]::EnableVisualStyles()\r\n$form = New-Object 'System.Windows.Forms.Form'\r\n$buttonRunProcess = New-Object 'System.Windows.Forms.Button'\r\n$richtextboxOutput = New-Object 'System.Windows.Forms.RichTextBox'\r\n$buttonExit = New-Object 'System.Windows.Forms.Button'\r\n$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'\r\n\r\n$buttonExit_Click={\r\n    $form.Close()\r\n}\r\n\r\n$buttonRunProcess_Click = {\r\n    $buttonRunProcess.Enabled = $false\r\n\r\n    $richtextboxOutput.Clear()\r\n\r\n    $process = New-Object System.Diagnostics.Process\r\n    $process.StartInfo.FileName = 'ping.exe'\r\n    $process.StartInfo.Arguments = 'google.com'\r\n    $process.StartInfo.UseShellExecute = $false\r\n    $process.StartInfo.CreateNoWindow = $true\r\n    $process.StartInfo.RedirectStandardInput = $false\r\n    $process.StartInfo.RedirectStandardOutput = $true\r\n    $process.EnableRaisingEvents = $true\r\n    $process.SynchronizingObject = $buttonRunProcess\r\n\r\n    $sender = [Expression]::Parameter([object])\r\n    $e = [Expression]::Parameter([System.Diagnostics.DataReceivedEventArgs])\r\n    $syncObject = [Expression]::Constant($buttonRunProcess)\r\n    $beginInvoke = [System.ComponentModel.ISynchronizeInvoke].GetMethod(\r\n        'BeginInvoke',\r\n        [System.Reflection.BindingFlags]'Public, Instance',\r\n        $null,\r\n        [type[]]([Delegate], [object[]]),\r\n        $null)\r\n\r\n    $sbDelegate = [System.Diagnostics.DataReceivedEventHandler]{\r\n        # Use $_.Data to access the output text\r\n        $richtextboxOutput.AppendText($_.Data)\r\n        $richtextboxOutput.AppendText(\"`r`n\")\r\n    }\r\n\r\n    $delegate = [Expression]::Lambda(\r\n        [System.Diagnostics.DataReceivedEventHandler],\r\n        [Expression]::Call(\r\n            $syncObject,\r\n            $beginInvoke,\r\n            [Expression]::Constant($sbDelegate),\r\n            [Expression]::NewArrayInit(\r\n                [object],\r\n                $sender,\r\n                $e)),\r\n        [ParameterExpression[]]($sender, $e)).\r\n        Compile()\r\n\r\n    $process.add_OutputDataReceived($delegate)\r\n    $process.Start() | Out-Null\r\n    $process.BeginOutputReadLine()\r\n}\r\n\r\n\r\n$Form_StateCorrection_Load=\r\n{\r\n    #Correct the initial state of the form to prevent the .Net maximized form issue\r\n    $form.WindowState = $InitialFormWindowState\r\n}\r\n\r\n$Form_Cleanup_FormClosed=\r\n{\r\n    try\r\n    {\r\n        $buttonRunProcess.remove_Click($buttonRunProcess_Click)\r\n        $buttonExit.remove_Click($buttonExit_Click)\r\n        $form.remove_FormClosed($processTracker_FormClosed)\r\n        $form.remove_Load($Form_StateCorrection_Load)\r\n        $form.remove_FormClosed($Form_Cleanup_FormClosed)\r\n    }\r\n    catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }\r\n}\r\n\r\n$form.SuspendLayout()\r\n\r\n$form.Controls.Add($buttonRunProcess)\r\n$form.Controls.Add($richtextboxOutput)\r\n$form.Controls.Add($buttonExit)\r\n$form.ClientSize = [System.Drawing.Size]::new(584, 362)\r\n$form.Margin = '4, 4, 4, 4'\r\n$form.MinimumSize = [System.Drawing.Size]::new(304, 315)\r\n$form.Name = 'Redirect Process Output'\r\n$form.StartPosition = 'CenterScreen'\r\n$form.Text = 'Redirect Process Output'\r\n\r\n$buttonRunProcess.Anchor = 'Bottom, Left'\r\n$buttonRunProcess.Location = [System.Drawing.Point]::new(12, 327)\r\n$buttonRunProcess.Name = 'buttonRunProcess'\r\n$buttonRunProcess.Size = [System.Drawing.Size]::new(75, 23)\r\n$buttonRunProcess.TabIndex = 0\r\n$buttonRunProcess.Text = 'Run'\r\n$buttonRunProcess.UseCompatibleTextRendering = $True\r\n$buttonRunProcess.UseVisualStyleBackColor = $True\r\n$buttonRunProcess.add_Click($buttonRunProcess_Click)\r\n\r\n$richtextboxOutput.Anchor = 'Top, Bottom, Left, Right'\r\n$richtextboxOutput.HideSelection = $False\r\n$richtextboxOutput.Location = [System.Drawing.Point]::new(12, 12)\r\n$richtextboxOutput.Name = 'richtextboxOutput'\r\n$richtextboxOutput.ReadOnly = $True\r\n$richtextboxOutput.Size = [System.Drawing.Size]::new(559, 305)\r\n$richtextboxOutput.TabIndex = 6\r\n$richtextboxOutput.Text = ''\r\n$richtextboxOutput.WordWrap = $False\r\n\r\n$buttonExit.Anchor = 'Bottom, Right'\r\n$buttonExit.Location = [System.Drawing.Point]::new(497, 327)\r\n$buttonExit.Name = 'buttonExit'\r\n$buttonExit.Size =  [System.Drawing.Size]::new(75, 23)\r\n$buttonExit.TabIndex = 2\r\n$buttonExit.Text = 'E&xit'\r\n$buttonExit.UseCompatibleTextRendering = $True\r\n$buttonExit.UseVisualStyleBackColor = $True\r\n$buttonExit.add_Click($buttonExit_Click)\r\n\r\n$form.ResumeLayout()\r\n\r\n$InitialFormWindowState = $form.WindowState\r\n$form.add_Load($Form_StateCorrection_Load)\r\n$form.add_FormClosed($Form_Cleanup_FormClosed)\r\n$form.ShowDialog()\r\n```",
      "created_at": "2020-01-23T03:40:21Z",
      "updated_at": "2020-01-23T03:40:21Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@SeeminglyScience Och my och my! That's some hardcore stuff! Thank you!",
      "created_at": "2020-01-23T09:35:44Z",
      "updated_at": "2020-01-23T09:35:44Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Anyone knows if this issue is considered resolved!  \r\n:)",
      "created_at": "2020-04-13T17:15:30Z",
      "updated_at": "2020-04-13T17:15:30Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@MaximoTrinidad It won't be resolved until the `github.com/dotnet/runtime/issues/2024` will be fixed. ",
      "created_at": "2020-04-13T17:26:43Z",
      "updated_at": "2020-04-13T17:27:04Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just an update on this matter!\r\n\r\nI was able to fix this issue without the need of building a delegate function in PowerShell to handle to object. \r\n\r\nBasically, during debugging I trap the following error: \r\n```\r\nDisplaying general exception message:  + Exception calling \"BeginOutputReadLine\" with \"0\" argument(s): \"Cannot mix synchronous and asynchronous operation on process stream.\"\r\n```\r\nThe following link helps me identify what was wrong with the code: \r\nhttps://social.technet.microsoft.com/Forums/fr-FR/597ee275-52eb-4aa6-81d9-7e62c3e55eff/powershell-systemdiagnosticsprocess-and-asynchronous-reads?forum=ITCG\r\n\r\nIt also clears the issue with the exception\r\n\r\nHere's how to fix it:\r\n\r\n1. In the button Click, don't include the control objects in the $process.add_OutputDataReceived().\r\n```\r\n## - Use below:\r\n$process.add_OutputDataReceived($_.Data)\r\n```\r\n\r\n2. Don't use:\r\n```\r\n$process.BeginOutputReadLine()\r\n```\r\nThis line cause the synch/asynch exception, and I think helps cause the \"PSInvalidOperationException.\"\r\n\r\nInstead, replace with the following:\r\n```\r\n$process.Start() | Out-Null\r\n#  $process.BeginOutputReadLine()\r\n\r\n## - Handles output results.\r\n$processOutput = $process.StandardOutput.ReadToEnd()\r\nif (![String]::IsNullOrEmpty($processOutput))\r\n{\r\n\t$richtextboxOutput.AppendText($processOutput)\r\n}\r\n```\r\n\r\nMake these changes and the code work without any exceptions.\r\n\r\nBottom line: \r\nThe PSInvalidOperationException issue can be cleared by fixing the code with no workarounds.\r\n\r\n\n\n<blockquote><img src=\"https://i1.social.s-msft.com/Forums/GlobalResources/images/Technet/favicon.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://social.technet.microsoft.com/Forums/fr-FR/597ee275-52eb-4aa6-81d9-7e62c3e55eff/powershell-systemdiagnosticsprocess-and-asynchronous-reads?forum=ITCG\">Powershell, System.Diagnostics.Process and asynchronous reads</a></strong></div></blockquote>",
      "created_at": "2020-05-08T17:20:16Z",
      "updated_at": "2020-05-08T17:20:18Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@MaximoTrinidad Thanks for the investigation. Unfortunately, your method cannot be considered as a valid workaround because there is no 'real-time' output from the process, which is the essence of what the code is trying to do in the first place. It's a pity, though.\r\n\r\n",
      "created_at": "2020-05-08T22:18:08Z",
      "updated_at": "2020-05-08T22:18:08Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "~~@derek-xia I'm monitoring this issue in order to confirm fix:~~\r\n~~- according to this PR: https://github.com/dotnet/runtime/pull/37308, dotnet bug was fixed and included in NET 5 Preview 5~~\r\n~~- I'm testing this issue using this daily build: https://dev.azure.com/powershell/PowerShell/_build/results?buildId=56718&view=artifacts&type=publishedArtifacts~~\r\n~~- Powershell 7 uses \"NET 5 preview 6\" so the fix should be there~~\r\n\r\n~~yet, I'm still getting the same error. I'm missing something?~~\r\n\r\nNvm, it appears to be fixed with the recent daily build. Also `derek-xia` sorry for wrong mention.",
      "created_at": "2020-07-03T08:39:03Z",
      "updated_at": "2020-08-12T10:49:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ALIENQuake PowerShell daily is on .Net 5 Preview 6 (see global.json file in the root of the repository).",
      "created_at": "2020-07-03T09:11:23Z",
      "updated_at": "2020-07-03T11:49:16Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@iSazonov Thanks for pointing this, still, Net 5 Preview 6 has the necessary fix.",
      "created_at": "2020-07-03T09:17:00Z",
      "updated_at": "2020-07-03T09:17:00Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "I noticed that I mention the wrong person when I did my initial tests. \ud83e\udd26\u200d\u2642\ufe0f\r\n\r\nLucky for me, I'm testing this issue using this daily build: https://dev.azure.com/powershell/PowerShell/_build/results?buildId=60097&view=artifacts&type=publishedArtifacts and it **appears to be working**! \ud83d\ude0d\r\n\r\n@daxian-dbw Many thanks for investigating and handling this issue! Thank you very much!\r\n",
      "created_at": "2020-08-12T10:28:26Z",
      "updated_at": "2020-08-12T10:28:59Z"
    }
  ],
  "created_at": "2020-01-22T14:12:50Z",
  "number": 11658,
  "state": "closed",
  "title": "PSInvalidOperationException: There is no Runspace available to run scripts in this thread",
  "updated_at": "2020-08-12T10:51:20Z"
}