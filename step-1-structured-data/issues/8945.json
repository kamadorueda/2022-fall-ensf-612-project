{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8945",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nMake xUnit test truly run sequentially to rule out race conditions around `powershell.config.json`.\r\nFix #8784 #8715\r\n\r\n## PR Context\r\n\r\nWe keep getting xUnit test failures due to the race condition around manipulating `powershell.config.json` file, even though we have been trying to run xUnit tests sequentially by having `dotnet test -p:ParallelizeTestCollections=false`. It turns out `-p:ParallelizeTestCollections=false` doesn't work, and we have to use `xunit.runner.json` to disable parallel running.\r\n\r\nFailure example: https://powershell.visualstudio.com/PowerShell/_build/results?buildId=13830\r\nFrom the exception below, we can see the all-user scope config file was there when we check for file existence in `ReadValueFromFile`, but was deleted when we came to creating a `FileStream` out of it.\r\nThis is because the all-user scope config file as created and deleted as part of the `PSConfiguration` tests. This is an evidence that tests are still running in parallel with `dotnet test -p:ParallelizeTestCollections=false`.\r\n\r\n```\r\n[xUnit.net 00:00:03.20]     PSTests.Sequential.RunspaceTests.TestRunspaceWithPowerShellAndInitialSessionState [FAIL]\r\nFailed   PSTests.Sequential.RunspaceTests.TestRunspaceWithPowerShellAndInitialSessionState\r\nError Message:\r\n System.IO.FileNotFoundException : Could not find file 'C:\\Users\\VssAdministrator\\Documents\\PowerShell\\powershell.config.json'.\r\nStack Trace:\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.Management.Automation.Configuration.PowerShellConfig.WaitForFile(String fullPath, FileMode mode, FileAccess access, FileShare share) in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\PSConfiguration.cs:line 426\r\n   at System.Management.Automation.Configuration.PowerShellConfig.ReadValueFromFile[T](ConfigScope scope, String key, T defaultValue, Func`4 readImpl) in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\PSConfiguration.cs:line 397\r\n   at System.Management.Automation.Utils.GetPolicySettingFromConfigFile[T](ConfigScope[] preferenceOrder) in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\Utils.cs:line 523\r\n   at System.Management.Automation.Utils.GetPolicySetting[T](ConfigScope[] preferenceOrder) in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\Utils.cs:line 509\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.GetModuleLoggingInformation(IEnumerable`1& moduleNames) in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\Modules\\ModuleCmdletBase.cs:line 4507\r\n   at System.Management.Automation.PSSnapInReader.ReadEnginePSSnapIns() in D:\\a\\1\\s\\src\\System.Management.Automation\\singleshell\\config\\MshSnapinInfo.cs:line 1068\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault() in D:\\a\\1\\s\\src\\System.Management.Automation\\engine\\InitialSessionState.cs:line 1526\r\n   at PSTests.Sequential.RunspaceTests.TestRunspaceWithPowerShellAndInitialSessionState() in D:\\a\\1\\s\\test\\xUnit\\csharp\\test_Runspace.cs:line 72\r\nResults File: D:\\a\\1\\s\\ParallelXUnitTestResults.xml\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-22T19:57:11Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw Can you tag all the issues open for xunit tests in this PR?",
      "created_at": "2019-02-21T19:56:55Z",
      "updated_at": "2019-02-21T19:56:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan I tagged #8784 #8715. Please let me know if there are others.",
      "created_at": "2019-02-21T20:12:34Z",
      "updated_at": "2019-02-21T20:12:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I _very_ wonder why we mask BUGs which are revealed by the tests?\r\nAre we going to release 6.2 version that is subject to DoS attack by unprivileged user?\r\nAre we going to release 6.2 version in which hosting applications will fall unpredictably in 9% of cases?\r\n\r\nI expect that we _fast_ fix the bugs:\r\n- #8937 bug in test\r\n- #8779 - race conditions for scenarios with many runspaces/jobs\r\n- follow PR for hosting scenarios (intra-process race conditions)\r\n\r\n\r\n",
      "created_at": "2019-02-22T05:00:09Z",
      "updated_at": "2019-02-22T05:00:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I _very_ wonder why we mask BUGs which are revealed by the tests?\r\n\r\nThis is not hiding bugs, but to fix our test script. Blindly running all xUnit tests in parallel is just wrong. Please take a look at the original script in `Start-PSxUnit` before your changes in #8356, the tests are categorized into `PSTests.Sequential` and `PSTests.Parallel` namespaces and the original script ran the `PSTests.Sequential` tests sequentially, and run `PSTests.Parallel` tests in parallel.\r\n\r\nThe categorization was for a reason -- config files get created and deleted in `test_PSConfiguration.cs`, and that will definitely cause unusually frequent race conditions with tests in `test_Runspace.cs`. That's why they are categorized into `PSTests.Sequential` namespace. **Using default values when failed to access the file as you suggested won't help here, because that will still make the setting values unpredictable and cause the tests to fail randomly -- a test might expect a specific value of a setting but it gets a default value because of the race condition.**\r\n\r\nI could make the test script behave like before -- running `PSTests.Sequential` namespace tests in sequence and `PSTests.Parallel` namespace tests in parallel, but I chose to not do that because:\r\n1. we have to use the xunit config file to disable parallel, which make it cumbersome to run part of the tests sequentially and other part in parallel.\r\n2. it makes writing xunit test harder by requiring the author to know which namespace to use for his/her tests.\r\n\r\n**Be noted that, fixing the test script doesn't mean we don't want to fix the race condition issue regard to processing the config file.**\r\n\r\n> Are we going to release 6.2 version that is subject to DoS attack by unprivileged user?\r\n\r\n@TravisEz13 and I chatted about this offline and we believe this is not a release blocker because it's already an existing issue.\r\n\r\n> Are we going to release 6.2 version in which hosting applications will fall unpredictably in 9% of cases?\r\n\r\nThe 9% failure was because of the frequent creation/deletion of the config files within `test_PSConfiguration.cs`, which would be really really rare to happen in real scenarios.",
      "created_at": "2019-02-22T06:23:04Z",
      "updated_at": "2019-02-22T06:32:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Be noted that, fixing the test script doesn't mean we don't want to fix the race condition issue regard to processing the config file.\r\n\r\nI am :smile: that the team will keep it under control. Thanks!\r\n\r\nOne extra note that if I hadn\u2019t made these tests parallel, we wouldn\u2019t start fixing these race conditions. I do not know how now we can identify such problems (?)",
      "created_at": "2019-02-22T06:49:36Z",
      "updated_at": "2019-02-22T06:49:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> One extra note that if I hadn\u2019t made these tests parallel, we wouldn\u2019t start fixing these race conditions. I do not know how now we can identify such problems (?)\r\n\r\nThe flag `-p:ParallelizeTestCollections=false` stopped working starting from some point, so luckily we will run into the same failures even without your changes.\r\nBesides, the intra-process synchronization problem was a known issue. Please see the PR description in #5809 (I just updated it to add a bullet point about the case that config file is not accessible).",
      "created_at": "2019-02-22T16:27:57Z",
      "updated_at": "2019-02-22T16:31:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the intra-process synchronization problem was a known issue.\r\n\r\nWe have so many open issues that it is easy to lost/forget important ones. It is difficult to prioritize work. And it seems GiHub doesn't help well. :-(",
      "created_at": "2019-02-22T17:37:51Z",
      "updated_at": "2019-02-22T17:37:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The flag -p:ParallelizeTestCollections=false stopped working starting from some point, so luckily we will run into the same failures even without your changes.\r\n\r\nThis problem is too rarely raised and running the tests in parallel is useless locally. Can we do it on CI (maybe optional) to track the race conditions?",
      "created_at": "2019-02-22T17:47:28Z",
      "updated_at": "2019-02-22T17:47:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Can we do it on CI (maybe optional) to track the race conditions?\r\n\r\nLike I said previously, fixing the race condition won't help to make our test reliable if they are running in parallel, because the setting values returned are not predictable. A test may expect a specific value for a setting but instead get back the default value due to race condition and thus would fail. It should be tracked by an issue.\r\n\r\n> This problem is too rarely raised and running the tests in parallel is useless locally.\r\n\r\nIt's rarely raised because it rarely happens in real scenarios, and that's likely why the this issue has not been treated with high priority.",
      "created_at": "2019-02-22T17:57:22Z",
      "updated_at": "2019-02-22T18:02:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  It should be tracked by an issue.\r\n\r\nIn long term yes. For now my suggestion was to create optional CI job (like CodeFactor or Codacy) so that we can track the state of affairs until we find better solution.",
      "created_at": "2019-02-22T18:27:13Z",
      "updated_at": "2019-02-22T18:27:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It's rarely raised because it rarely happens in real scenarios, and that's likely why the this issue has not been treated with high priority.\r\n\r\nRather, because PowerShell is rarely used. If we imagine that it would be used in high-load application such as Microsoft SCOR we would catch a bunch of unpredictable crashes. Or in multi-user system like Misrosoft Remote Desktop any regular user would block all system scripts by locking the config file!",
      "created_at": "2019-02-22T18:37:41Z",
      "updated_at": "2019-02-22T18:37:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> any regular user would block all system scripts by locking the config file!\r\n\r\nYou could do the same to any applications.\r\nFor example, hold the `pwsh.exe` by opening the file with `[System.IO.FileShare]::None`, and you won't be able to start the `pwsh.exe` anymore:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/53264230-034bca80-3690-11e9-8131-a2b9eae5bc5c.png)\r\n\r\nSo, yes, it's technically a DoS attack, but if a user is able to do it (has the permission), then there's always a way for him/her to do it, no matter we fix the race condition regarding `config.json` or not.",
      "created_at": "2019-02-22T18:55:20Z",
      "updated_at": "2019-02-22T19:04:40Z"
    }
  ],
  "created_at": "2019-02-21T19:48:06Z",
  "number": 8945,
  "state": "closed",
  "title": "Make xUnit test run sequentially to rule out race conditions around 'powershell.config.json'",
  "updated_at": "2019-04-03T06:03:59Z"
}