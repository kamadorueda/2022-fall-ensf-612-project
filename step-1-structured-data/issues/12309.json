{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12309",
  "author": "cdanger",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nNew-SelfSignedCertificate `\r\n              -Subject \"CN=John Doe\" `\r\n              -KeyAlgorithm \"ECDSA_secP256r1\" `\r\n              -Provider 'Microsoft Smart Card Key Storage Provider'\r\n```\r\n\r\n# Expected behavior\r\nExample of successful output when using `Microsoft Software Key Storage Provider` instead:\r\n\r\n```none\r\nPSParentPath: Microsoft.PowerShell.Security\\Certificate::LocalMachine\\MY\r\n\r\nThumbprint                                Subject              EnhancedKeyUsageList\r\n----------                                -------              --------------------\r\nD166947F01BFB28AB9B43C2FB9DD0B33CCBC76CD  CN=John Doe          {Client Authentication, Server Authentication}\r\n```\r\n\r\n# Actual behavior\r\nError message:\r\n\r\n```none\r\nNew-SelfSignedCertificate: CertEnroll::CX509Enrollment::_CreateRequest: Provider type not defined. 0x80090017 (-2146893801 NTE_PROV_TYPE_NOT_DEF). \r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Extra info\r\nThis info does not fix it but may help troubleshooting:\r\n1. If I replace `ECDSA_secP256r1` with `RSA`, works as expected. \r\n1. If I replace `Microsoft Smart Card Key Storage Provider` with `Microsoft Software Key Storage Provider`, works as expected.\r\n1. If I replace `ECDSA_secP256r1` with `ECDSA_badcurve`, I get a different error: `Unknown cryptographic algorithm.` So `ECDSA_secP256r1` is recognized as a known crypto algorithm at least.\r\n1. According to [Microsoft Docs on CNG Key Storage Providers](https://docs.microsoft.com/en-us/windows/win32/seccertenroll/cng-key-storage-providers#microsoft-smart-card-key-storage-provider), Microsoft Smart Card Key Storage Provider supports ECDSA P256, P384, P521.\r\n\r\nIf it works for other ECDSA P256 curves (which ones then?), it works for me, but I need ECDSA on the smartcard.",
  "closed_at": "2020-04-18T00:00:18Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell does nothing with encryption and follow .Net Core. \r\nI think you need to open issue in .Net Runtime repo.",
      "created_at": "2020-04-16T15:56:09Z",
      "updated_at": "2020-04-16T15:56:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-04-18T00:00:17Z",
      "updated_at": "2020-04-18T00:00:17Z"
    },
    {
      "author": "cdanger",
      "author_association": "NONE",
      "body": "Thanks for the tip. Are you refering to [this .net repo](https://github.com/dotnet/runtime) as the one providing the New-SelfSignedCertificate cmdlet ? \r\nJust asking for confirmation, because I can't find this cmdlet in the code over there. So I am not sure that I can ask them the exact same question. Actually I can't find a repo that provides the `pkiclient` module altogether. But maybe it is not open source or I don't know where/how to look for it.",
      "created_at": "2020-04-23T17:49:42Z",
      "updated_at": "2020-04-23T17:50:28Z"
    }
  ],
  "created_at": "2020-04-14T12:21:07Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12309,
  "state": "closed",
  "title": "New-SelfSignedCertificate fails with ECDSA and Microsoft Smart Card KSP",
  "updated_at": "2020-04-23T17:50:28Z"
}