{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9155",
  "author": "mklement0",
  "body": "Accessing `.psobject.properties` on any object is a convenient way to reflect on that object's properties.\r\n\r\nSometimes all you want is to _count_ the number of properties.\r\n\r\nThat is currently complicated by the `[System.Management.Automation.PSMemberInfoIntegratingCollection[System.Management.Automation.PSPropertyInfo]]` instance returned not implementing a `.Count` property.\r\n\r\nThe workaround is to wrap the `.psobject.properties` access in `@(...)` before accessing `.Count`, but that shouldn't be necessary.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$obj = [pscustomobject] @{ one = 1; two = 2 }\r\n$obj.psobject.properties.Count\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n2\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n1\r\n1\r\n```\r\n\r\nThat is, in the absence of a `.Count` property on the _collection_, member enumeration was used to look for a `.Count` property _on each element_  of the collection, which - due to PSv3+ implementing `.Count` even on _scalars_ - returned `1` for each property.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-rc.1\r\nWindows PowerShell v5.1 \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Actually it is not Collection - it is IEnumerable.\r\n```c#\r\ninternal class PSMemberInfoIntegratingCollection<T> : PSMemberInfoCollection<T>, IEnumerable<T> where T : PSMemberInfo\r\n\r\npublic abstract class PSMemberInfoCollection<T> : IEnumerable<T> where T : PSMemberInfo\r\n```",
      "created_at": "2019-03-18T11:01:23Z",
      "updated_at": "2019-03-18T15:30:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, @iSazonov, but given its purpose - and, not least, its _name_, <pre>PSMemberInfoIntegrating<i>Collection</i></pre>  - it's reasonable to expect a `.Count` property, whether as a direct property or via an interface.",
      "created_at": "2019-03-18T13:24:32Z",
      "updated_at": "2019-03-18T13:24:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could implement the class based on Collection. I am afraid that it is too expensive to use in PSObject. We need to avoid every extra byte.",
      "created_at": "2019-03-18T15:43:12Z",
      "updated_at": "2019-03-18T18:10:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Don't _most_ `IEnumerable`s have a `Count` property anyway? Why is it lacking on here?",
      "created_at": "2019-03-18T16:13:18Z",
      "updated_at": "2019-03-18T16:13:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: [`IEnumerable`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable) is about _lazy_ enumeration, so the count isn't known in advance - that's why the interface has no `.Count` property (applies to both the generic and the non-generic interface).",
      "created_at": "2019-03-18T16:16:11Z",
      "updated_at": "2019-03-18T16:16:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Really you could just add\r\n\r\n```csharp\r\npublic int Count => System.Linq.Enumerable.Count(this);\r\n```\r\n\r\nTo `PSMemberInfoCollection<>` just to fix this scenario as it's pretty annoying to run into. Not many folks are likely to though.",
      "created_at": "2019-03-20T13:48:22Z",
      "updated_at": "2019-03-20T13:48:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm down. ",
      "created_at": "2019-03-20T14:07:08Z",
      "updated_at": "2019-03-20T14:07:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe the property store could be refactored as a whole (for performance).\r\n/cc @powercode ",
      "created_at": "2019-03-21T11:42:30Z",
      "updated_at": "2019-03-21T11:42:30Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Yes, I've two different branches on separate approaches for that. But it is non-trivial.",
      "created_at": "2019-03-22T10:29:10Z",
      "updated_at": "2019-03-22T10:30:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode You could share the code - somebody could help (Dongbo :-) ).",
      "created_at": "2019-03-22T12:44:25Z",
      "updated_at": "2019-03-22T12:44:25Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  Waste of his time so far.",
      "created_at": "2019-03-24T21:50:03Z",
      "updated_at": "2019-03-24T21:50:03Z"
    }
  ],
  "created_at": "2019-03-17T22:58:38Z",
  "number": 9155,
  "state": "open",
  "title": "Type [System.Management.Automation.PSMemberInfoIntegratingCollection`1] returned by .psobject.properties should have a .Count property",
  "updated_at": "2019-03-24T21:50:04Z"
}