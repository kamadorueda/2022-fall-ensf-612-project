{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9613",
  "author": "rjmholt",
  "body": "# Summary of the new feature/enhancement\r\n\r\nSome POSIX shells have a variable called `SHLVL` that tracks how nested your shell session is. [This SO question](https://unix.stackexchange.com/questions/373704/how-many-shells-deep-i-am) goes into good depth on the topic.\r\n\r\nI tend to find I need to know if I'm in a nested PowerShell session or not, particularly because:\r\n\r\n- Developing binary modules, I often use a nested PS process to deal with type unloading\r\n- Things like `$env:PSModulePath` can be twisted by nesting PowerShell sessions\r\n\r\nI currently have a function in my profile to get information on this:\r\n\r\n```powershell\r\nfunction Get-PSParentProcesses\r\n{\r\n    $ps = [System.Collections.Stack]::new()\r\n    $p = Get-Process -Id $pid\r\n    do\r\n    {\r\n        if ($p.ProcessName -in \"pwsh\",\"pwsh-preview\",\"powershell\")\r\n        {\r\n            $ps.Push($p)\r\n        }\r\n        $p = $p.Parent\r\n    }\r\n    while ($p)\r\n\r\n    return $ps\r\n}\r\n```\r\n\r\nBut given that `bash` already has functionality built-in to track this concept, it seemed worth opening a feature proposal for.\r\n\r\nSome things to consider:\r\n\r\n- Do we track other shells or other PowerShells? Environment variables aren't suited to this, but it's useful information\r\n- Perhaps this variable is better off not as an environment variable but an automatic variable with real object information, or even as a cmdlet?",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This already exists, doesn't it? Check the default `prompt` function; it uses nesting information, right?",
      "created_at": "2019-05-15T22:31:04Z",
      "updated_at": "2019-05-15T22:31:04Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@vexx32 no, it doesn't exist.  the issue is about nested process, the prompt display nested pipeline/runspace/choosetheappropriateword.",
      "created_at": "2019-05-15T22:41:12Z",
      "updated_at": "2019-05-15T22:44:19Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I have the same issue, I will be happy to see that in the prompt by default. If not, I could set a custom prompt.",
      "created_at": "2019-05-15T22:43:07Z",
      "updated_at": "2019-05-15T22:43:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems rarely used feature. So I believe it is better implement it as external community module.\r\n\r\nI would always first of all see if PowerShell could make smarter things than existing analogues before adding new code in PowerShell. I mean that we could think more about problems with nested shells (processes) and maybe find a smart and magic solution(s).",
      "created_at": "2019-05-16T08:40:25Z",
      "updated_at": "2019-05-16T08:40:25Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "I do find this extremely useful. As a result, I've been using an environment variable __ShellDepth since the beginning of PowerShell. It gets set in my profile \r\n```powershell\r\n$ENV:__ShellDepth = [int] $ENV:__ShellDepth + 1\r\n```\r\nand echoed in my prompt. But, given how easy it is to implement externally and the fact that it probably isn't necessary for the average user, I'm not sure we'd want to implement in PowerShell itself.",
      "created_at": "2019-05-16T14:46:46Z",
      "updated_at": "2019-05-16T14:46:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I do find this extremely useful. \r\n\r\nNot clear why. What is scenarios which need this? New PowerShell subprocess inherits nothing (except envs). I guess the work style comes from single windows console in Unix-s. I would suggest that most developers in the modern world prefer a multi-window interface which greatly improves developer productivity.",
      "created_at": "2019-05-16T16:30:22Z",
      "updated_at": "2019-05-16T16:30:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Not clear why. What is scenarios which need this?\r\n\r\nPersonally I live on the keyboard and don't like using the mouse or interacting with GUIs (why I love terminal editors and why it's frustrating that Windows terminals don't play so well with them). I also tend to work and think in a stack-like way, pushing and popping contexts (and I feel like this is fairly common).\r\n\r\nSo when I need to get a clean PowerShell process to push a new context I don't want to do any more than type `pwsh<Enter>`. But unlike a computer I don't always remember how many stack frames deep I am.\r\n\r\nGUIs cross-platform don't really have a convenient, fast, common, keyboard-native way to:\r\n- Open a new PowerShell window from PowerShell\r\n- Switch to that Window\r\n- Execute things\r\n- Close the Window\r\n- Go back to the original PowerShell process\r\n\r\nBut even if they did, the fact that the GUI can do it has never really been a good argument that PowerShell shouldn't (quite the opposite I would say).\r\n\r\nNone of these are arguments this should be in PowerShell though! Me opening an issue is based on:\r\n1. I have a need,\r\n2. bash has a builtin concept to serve that need,\r\n3. Do others have that need?\r\n4. Is it worth emulating bash and making it a builtin, should it take a different form, should it be part of a module somewhere, or should it just be left up to individuals to implement themselves?",
      "created_at": "2019-05-16T16:56:36Z",
      "updated_at": "2019-05-16T16:56:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Thanks for great comment!\r\n\r\nIt should be in the issue description as motivation.\r\nI like to improve single console experience too. (But I do not like primitive copy-paste features and want to see power and magic thing in PowerShell)\r\n\r\n> >  I also tend to work and think in a stack-like way\r\n\r\nSince PowerShell processes is independent what do you think about that we could generalize from stack-like \"structure\" to others? I mean for example that you could switch context by Tab (or Alt-Arrow) in circular or something else; get IntelliSense; get named contexts.\r\n",
      "created_at": "2019-05-16T17:23:32Z",
      "updated_at": "2019-05-16T17:23:32Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov A simple example for where this is useful: I'm a developer creating cmdlets. I don't want to load the cmdlet into the current shell because I can't unload it so I spawn a new shell and do my testing. Now after some time , i want to go back to my original shell but I can't remember if I've already done that or not. So having the shell depth in my prompt is very useful.",
      "created_at": "2019-05-16T18:06:31Z",
      "updated_at": "2019-05-16T18:06:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Now after some time , i want to go back to my original shell but I can't remember if I've already done that or not. So having the shell depth in my prompt is very useful.\r\n\r\nI don't think a day goes by where I don't accidental type `exit` one time too many and sigh as I watch my perfectly set up window... disappear.  <sub>Obviously it's not that hard to open a new one, it's just *strangely* irritating.</sub>\r\n\r\n+1\r\n\r\n",
      "created_at": "2019-05-17T00:42:06Z",
      "updated_at": "2019-05-17T00:42:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Very frustrating, especially in Windows when PS Core hangs on application cleanup for some reason",
      "created_at": "2019-05-17T00:59:20Z",
      "updated_at": "2019-05-17T00:59:20Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Curiously, there's also `$NestedPromptLevel`, which is incremented by `$Host.EnterNestedPrompt()`. It's not a subshell, but it _is_ something you can exit from. It's a bit more useful combined with `Push-Location`/`Pop-Location`.\r\n\r\n```\r\n(libra) ~ % gc function:/enter-subshell\r\n\r\n        Param (\r\n                [string]$Path\r\n        )\r\n        Push-Location -StackName:\"SubshellStack\" -Path:$Path -ErrorAction:Stop > $Null\r\n        $Host.EnterNestedPrompt()\r\n        Pop-Location -StackName:\"SubshellStack\" > $Null\r\n\r\n(libra) ~ % enter-subshell\r\n(libra) ~ <1> % exit\r\n(libra) ~ %\r\n```\r\n\r\n(This doesn't help the module developer, but it might help somebody else.)",
      "created_at": "2019-05-18T02:46:01Z",
      "updated_at": "2019-05-18T02:47:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see a conflict - how would we distinguish between nested prompt and nested subshell? They should be displayed differently.\r\n\r\nAnother thought is about smart exit which prevents from accidental exit.",
      "created_at": "2019-05-18T13:00:10Z",
      "updated_at": "2019-05-18T15:26:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I see a conflict - how would we distinguish between nested prompt and nested subshell?\r\n\r\nShould be pretty easy, nested prompts are controlled by the PSHost.  It's an entirely PowerShell concept (well not the concept, but I can't think of a better word) \r\n\r\n@bpayette's environment variable method would do the trick, you'd just have to put it in `UnmanagedPSEntry` or `ConsoleHost`.",
      "created_at": "2019-05-18T13:25:56Z",
      "updated_at": "2019-05-18T13:26:51Z"
    }
  ],
  "created_at": "2019-05-15T21:47:05Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 9613,
  "state": "open",
  "title": "SHLVL for PowerShell - How many PowerShells deep am I?",
  "updated_at": "2019-05-18T15:26:57Z"
}