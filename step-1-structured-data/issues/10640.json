{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10640",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nProvide the ability to resolve a filesystem path to its canonical path, such as by adding a `-Canonical`  switch to the `Convert-Path` cmdlet.\r\n\r\nIn short: The idea is to allow you to answer the following question: \r\n\r\n**Given a (possibly relative, possibly PS-drive-based) file or directory path, where does the referenced file truly live, with symlinks, if any, resolved to their underlying target location, expressed as an absolute, native filesystem path?**\r\n\r\nFor instance, say you want to know the canonical path of file \r\n`/User Guides And Information/ENERGY STAR.pdf` on a Mac, which is `/Library/Documentation/User Guides and Information.localized/ENERGY STAR.pdf`\r\nbecause `/User Guides And Information` is a directory symlink that targets\r\ndirectory `/Library/Documentation/User Guides and Information.localized`\r\n\r\nYou could then do something like:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> Convert-Path -Canonical '/User Guides And Information/ENERGY STAR.pdf'\r\n\r\n/Library/Documentation/User Guides and Information.localized/ENERGY STAR.pdf\r\n```\r\n\r\nOn at least some Linux distros, the `realpath` utility provides this functionality, and you can also use `readlink -f` (or `-m` or `-e`).\r\n\r\nNote that this new feature would _complement_ the existing ability to inspect a symlink's (reparse point's) target via the `.Target` property of `Get-Item` / `Get-ChildItem` output, and also the proposed `.ResolvedTarget` property (see #13366 ).\r\n\r\nThe latter only operate on symlinks _themselves_, not on paths _based_ on them (paths with additional components); additionally, the `.Target` property may be a _relative_ path and `$null` if the input path isn't a symlink.\r\nThat is, `(Get-Item '/User Guides And Information').Target` works, because `/User Guides And Information` is _itself_ a symlink, but `(Get-Item '/User Guides And Information/ENERGY STAR.pdf').Target` is `$null`, because the file _inside_ the directory-symlink path itself isn't a symlink and therefore has no `.Target` property value.\r\n\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n* Windows: The [`GetFinalPathNameByHandle`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew) Windows API function provides this functionality.\r\n\r\n* macOS, Linux: ~~haven't looked into it, but the GNU `readlink` utility implementation should provide pointers~~. The POSIX-mandated [`realpath()` function](https://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html) provides this functionality (implemented as library functions on macOS and Linux; see `man 3 realpath`).\r\n\r\nDecisions will also have to be made with respect to how final path components that don't exist yet are handled (i.e., a prefix of the path exists (an ancestral directory), but not the filename part or a relative subdirectory-based path), and how to handle _broken_ symlinks; these cases are reflected in the GNU `readlink` utility's related `-f` / `-e` / `-m` options.\r\n\r\nNote that `Convert-Path` in its current form doesn't support (partially) non-existent paths, but it's about time we changed that too - see #2993\r\n\r\n_Update_: Implementing this functionality as a .NET API that this feature could build on, in the form of a new `System.IO.Path.GetFullPath()` overload, has now been proposed: https://github.com/dotnet/runtime/issues/24271#issuecomment-670709364",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Please look the old comment https://github.com/dotnet/coreclr/issues/2128#issuecomment-171879087 I think we need Core support. Currently Core team started .Net Core 5.0 design so it is good time to ask them for the feature.",
      "created_at": "2019-09-28T16:05:49Z",
      "updated_at": "2019-09-28T16:05:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There's a CoreFx symlink API proposal, where I've suggested a new `System.IO.Path.GetFullPath()` overload for canonical path resolution: https://github.com/dotnet/runtime/issues/24271#issuecomment-670709364",
      "created_at": "2020-08-07T20:58:29Z",
      "updated_at": "2020-08-07T20:58:29Z"
    }
  ],
  "created_at": "2019-09-27T19:21:34Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 10640,
  "state": "open",
  "title": "Support getting canonical filesystem paths with symlinks resolved, similar to the Linux realpath utility",
  "updated_at": "2021-11-30T11:06:05Z"
}