{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17444",
  "author": "SeeminglyScience",
  "body": "### Summary of the new feature / enhancement\n\nA common pattern for binary cmdlets is to create a cancellation token source that is then cancelled in `PSCmdlet.StopProcessing()`.\r\n\r\nThis is a very useful pattern to enable cancelling a method that takes `CancellationToken` without having to poll for completion. Having this available by default would reduce a lot of boilerplate in binary cmdlets. Boilerplate example:\r\n\r\n```csharp\r\nnamespace MyModule;\r\n\r\n[Cmdlet(VerbsDiagnostic.Test, \"MyCommand\")]\r\npublic class TestMyCommand : PSCmdlet, IDisposable\r\n{\r\n    private readonly CancellationTokenSource _stopping = new();\r\n\r\n    protected override void ProcessRecord()\r\n    {\r\n        try\r\n        {\r\n            Task.Delay(2000, _stopping.Token).GetAwaiter().GetResult();\r\n        }\r\n        catch (OperationCancelledException)\r\n        {\r\n            throw new PipelineStoppedException();\r\n        }\r\n    }\r\n\r\n    protected override void StopProcessing() => _stopping.Cancel();\r\n\r\n    public void Dispose() => _stopping.Dispose();\r\n}\r\n```\r\n\r\nThis pattern is *not possible* in PowerShell directly, instead a script must poll a task for completion if it wants to respect pipeline stops. Polling example:\r\n\r\n```powershell\r\n$task = [System.Threading.Tasks.Task]::Delay(2000)\r\nwhile (-not $task.AsyncWaitHandle.WaitOne(200)) { }\r\n$null = $task.GetAwaiter().GetResult();\r\n```\r\n\r\nEven then all you can do is honor pipeline stops, you can't request cancellation of the work being done in another thread.\n\n### Proposed technical implementation details (optional)\n\n```diff\r\nnamespace System.Management.Automation;\r\n\r\npublic abstract class PSCmdlet\r\n{\r\n+   private CancellationTokenSource? _pipelineStopTokenSource;\r\n\r\n+   public CancellationToken PipelineStopToken => (_pipelineStopTokenSource ??= new()).Token;\r\n\r\n    protected virtual void StopProcessing()\r\n    {\r\n        using (PSTransactionManager.GetEngineProtectionScope())\r\n        {\r\n+           _pipelineStopTokenSource?.Cancel();\r\n        }\r\n    }\r\n\r\n    internal void InternalDispose(bool isDisposing)\r\n    {\r\n        _myInvocation = null;\r\n        _state = null;\r\n        _commandInfo = null;\r\n        _context = null;\r\n+       _pipelineStopTokenSource?.Dispose();\r\n+       _pipelineStopTokenSource = null;\r\n    }\r\n}\r\n```",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-05-26T17:51:39Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 17444,
  "state": "open",
  "title": "Add a `PipelineStopToken` cancellation token property to `PSCmdlet`",
  "updated_at": "2022-05-26T17:52:04Z"
}