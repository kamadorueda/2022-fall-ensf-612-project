{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10972",
  "author": "SteveL-MSFT",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThis is primarily for scripts, but could work with binary modules.  Often I use Verbose output to help diagnose why something isn't working (like our build.psm1 module).  It would be very helpful if Verbose output also wrote out the script file and line number.\r\n\r\nThis was originally for Write-Verbose because that's what the PowerShell Team uses for their scripts, but we should figure out why people aren't using Write-Debug.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nPossibly add a new VerbosePreference of \"ContinueIncludeCallSite\"\r\n\r\nCurrent example output:\r\n```powershell\r\nDEBUG: Using configuration 'Debug'\r\nDEBUG: Using framework 'netcoreapp3.1'\r\nDEBUG: Using runtime 'win7-x64'\r\nDEBUG: Top project directory is D:\\PowerShell\\src\\powershell-win-core\r\nRun dotnet restore D:\\PowerShell\\test\\tools\\Modules --runtime win7-x64 /property:SDKToUse=Microsoft.NET.Sdk.WindowsDesktop --verbosity quiet\r\nDone restoring D:\\PowerShell\\test\\tools\\Modules\r\nName='SelfSignedCertificate', Version='0.0.4', Destination='D:\\PowerShell/test/tools/Modules'\r\nDEBUG: $env:POWERSHELL_TELEMETRY_OPTOUT = 'yes';$env:PSModulePath = 'D:\\PowerShell\\test\\tools\\Modules;'+$env:PSModulePath;Set-ExecutionPolicy -Scope Process Unrestricted; Import-Module 'D:\\PowerShell\\src\\powershell-win-core\\bin\\Debug\\netcoreapp3.1\\win7-x64\\publish\\Modules\\Pester'; Invoke-Pester -OutputFormat NUnitXml -OutputFile C:\\Users\\slee\\test\\pester2.xml -ExcludeTag @('Slow') -Tag @('CI','Feature') 'D:\\PowerShell\\test'\r\n```\r\n\r\nproposed opton (line numbers made up):\r\n```powershell\r\nDEBUG: (@ .../build.psm1:30) Using configuration 'Debug'\r\nDEBUG: (@ .../build.psm1:31) Using framework 'netcoreapp3.1'\r\nDEBUG: (@ .../build.psm1:32) Using runtime 'win7-x64'\r\nDEBUG: (@ .../build.psm1:38) Top project directory is D:\\PowerShell\\src\\powershell-win-core\r\nRun dotnet restore D:\\PowerShell\\test\\tools\\Modules --runtime win7-x64 /property:SDKToUse=Microsoft.NET.Sdk.WindowsDesktop --verbosity quiet\r\nDone restoring D:\\PowerShell\\test\\tools\\Modules\r\nName='SelfSignedCertificate', Version='0.0.4', Destination='D:\\PowerShell/test/tools/Modules'\r\nDEBUG: (@ .../build.psm1:115) $env:POWERSHELL_TELEMETRY_OPTOUT = 'yes';$env:PSModulePath = 'D:\\PowerShell\\test\\tools\\Modules;'+$env:PSModulePath;Set-ExecutionPolicy -Scope Process Unrestricted; Import-Module 'D:\\PowerShell\\src\\powershell-win-core\\bin\\Debug\\netcoreapp3.1\\win7-x64\\publish\\Modules\\Pester'; Invoke-Pester -OutputFormat NUnitXml -OutputFile C:\\Users\\slee\\test\\pester2.xml -ExcludeTag @('Slow') -Tag @('CI','Feature') 'D:\\PowerShell\\test'\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "This sounds more like debug rather than verbose. The end user wouldn't get any benefit if they saw that information. End users are the primary target for verbose messages. ",
      "created_at": "2019-11-02T00:24:07Z",
      "updated_at": "2019-11-02T01:20:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would agree with that. This is likely to be a better fit for -Debug, and actually a great way to distinguish use of -Debug from -Verbose now that the default DebugPreference when using -Debug is now Continue.",
      "created_at": "2019-11-02T05:48:43Z",
      "updated_at": "2019-11-02T05:48:43Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The Verbose stream is for the _end-user_ of a command. It's intended to provide additional information about how the command is proceeding but isn't intended to be a debugging stream for the _developer_ of the command. As the others have observed, that's what the Debug stream is for. Now historically I don't believe Debug has been used very much. Perhaps we should encourage it's use a bit more (and obviously make sure it works the way users expect.)",
      "created_at": "2019-11-04T01:28:06Z",
      "updated_at": "2019-11-04T01:28:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think that's the basic problem, even the PowerShell team doesn't use write-debug.  Updating title to reflect this should be for `write-debug`.  Getting people to use that cmdlet is a separate issue.",
      "created_at": "2019-11-06T17:50:56Z",
      "updated_at": "2019-11-06T17:50:56Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I've avoided `Write-Debug` because it paused execution.  That always seemed like a conflation of concerns to me.  I really wanted `Write-Debug` to **just** write to the debug stream.  Guess that works as expected now. I need to try that, having flipped the bozo bit on `Write-Debug` years ago.  :-) \r\n\r\nHaving the extra data (file:line:col) on debug stream messages would be nice.",
      "created_at": "2019-11-06T17:59:58Z",
      "updated_at": "2019-11-06T17:59:58Z"
    }
  ],
  "created_at": "2019-11-01T21:34:05Z",
  "number": 10972,
  "state": "open",
  "title": "Debug output with line numbers/stack",
  "updated_at": "2019-11-06T17:59:58Z"
}