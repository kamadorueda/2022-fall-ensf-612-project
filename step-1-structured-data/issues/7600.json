{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7600",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n`ArgumentTransformationMetadataException` is supposed to represent a recoverable error, but PS does not recover.\r\n\r\nYou can use an [`ArgumentTransformationAttribute`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.argumenttransformationattribute?view=powershellsdk-1.1.0) to help massage an object into the type expected for a particular command parameter. If the transformation fails, the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.argumenttransformationattribute.transform?view=powershellsdk-1.1.0#System_Management_Automation_ArgumentTransformationAttribute_Transform_System_Management_Automation_EngineIntrinsics_System_Object_) say to \"throw ArgumentException if the value of inputData is invalid, and throw ArgumentTransformationMetadataException for other recoverable errors\".\r\n\r\nHowever, if you throw an `ArgumentTransformationMetadataException` to indicate a recoverable error, PS does not recover--binding is halted. So if, for example, you have a parameter that can be bound by name to pipeline input (`ValueFromPipelineByPropertyName = $true`), then piping in an object with a property with the right name will not work, because the transformation will first be attempted on the object that was piped in (which will fail, as expected), and then it won't continue to look for a property on that object with the expected name.\r\n\r\n\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\nAdd-Type -TypeDefinition @'\r\nnamespace Repro\r\n{\r\n    using System;\r\n    using System.Management.Automation;\r\n    using System.Reflection;\r\n\r\n    /// <summary>\r\n    ///    Useful to transform a string representation of a timezone (\"Pacific Standard\r\n    ///    Time\") into an actual TimeZoneInfo object.\r\n    /// </summary>\r\n    [AttributeUsage( AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false )]\r\n    public class TimeZoneTransformationAttribute : ArgumentTransformationAttribute\r\n    {\r\n        /// <summary>\r\n        ///    Set this (or the other UseWorkaround_ property) to 'true' if you want the\r\n        ///    PS runtime to be able to try other binding options (such as binding to a\r\n        ///    pipeline value by property name).\r\n        ///\r\n        ///    If left as the default (false), it means the attribute will throw an\r\n        ///    exception if it can't convert the object; else it will return the original\r\n        ///    object for further binding.\r\n        /// </summary>\r\n        public bool UseWorkaround_FailGracefully { get; set; }\r\n\r\n\r\n        /// <summary>\r\n        ///    Set this (or the other UseWorkaround_ property) to 'true' if you want the\r\n        ///    PS runtime to be able to try other binding options (such as binding to a\r\n        ///    pipeline value by property name).\r\n        ///\r\n        ///    If left as the default (false), it means that the inner exception of the\r\n        ///    exception that the attribute will throw if it can't convert the object will\r\n        ///    NOT be a PSInvalidCastException.\r\n        /// </summary>\r\n        public bool UseWorkaround_WrapPSInvalidCastException { get; set; }\r\n\r\n\r\n        public override object Transform( EngineIntrinsics engineIntrinsics, object inputData )\r\n        {\r\n            object originalObject = inputData;\r\n\r\n            Console.WriteLine( \"===============================================\" );\r\n            try\r\n            {\r\n                Console.WriteLine( \"Welcome to the TimeZoneTransformationAttribute.\" );\r\n                Console.WriteLine( \"   inputData is null? {0}\", inputData == null );\r\n                if( null != inputData )\r\n                {\r\n                    Console.WriteLine( \"   inputData type: {0}\", inputData.GetType().FullName );\r\n                    Console.WriteLine( \"   inputData value: {0}\", inputData );\r\n                }\r\n\r\n                var pso = inputData as PSObject;\r\n                if( null != pso )\r\n                {\r\n                    Console.WriteLine( \"getting baseobject... ({0})\", pso.BaseObject.GetType().FullName );\r\n                    inputData = pso.BaseObject;\r\n                }\r\n\r\n                if( inputData is TimeZoneInfo )\r\n                {\r\n                    Console.WriteLine( \"it's already a tzi\" );\r\n                    return inputData;\r\n                }\r\n\r\n                string str = inputData as string;\r\n                Exception e = null;\r\n                if( null != str )\r\n                {\r\n                    try\r\n                    {\r\n                        var tzi = TimeZoneInfo.FindSystemTimeZoneById( str );\r\n                        if( null != tzi )\r\n                        {\r\n                            Console.WriteLine( \"(successfully transformed inputData: {0})\", tzi );\r\n                            return tzi;\r\n                        }\r\n                    }\r\n                    catch( TimeZoneNotFoundException tznfe )\r\n                    {\r\n                        e = tznfe;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine( \"it's not a string\" );\r\n                }\r\n\r\n\r\n                if( UseWorkaround_FailGracefully )\r\n                {\r\n                    Console.WriteLine( \"(failing gracefully by just returning the original object)\" );\r\n                    return originalObject;\r\n                }\r\n\r\n                Console.WriteLine( \"(failing by throwing an ArgumentTransformationMetadataException)\" );\r\n                Console.WriteLine( \"(which is supposed to be \\\"recoverable\\\")\" );\r\n\r\n                // BUG: Documentation indicates that this exception should indicate a\r\n                // recoverable error; however the PS runtime does not recover by\r\n                // continuing to attempt parameter binding once this exception is thrown,\r\n                // UNLESS the inner exception is a PSInvalidCastException.\r\n\r\n                throw new ArgumentTransformationMetadataException(\r\n                    String.Format( \"Could not convert '{0}' to a timezone.\",\r\n                                   inputData ),\r\n                    UseWorkaround_WrapPSInvalidCastException ? new PSInvalidCastException() : e );\r\n            }\r\n            finally\r\n            {\r\n                Console.WriteLine( \"-----------------------------------------------\" );\r\n            }\r\n        } // end Transform()\r\n    } // end class TimeZoneTransformationAttribute\r\n}\r\n'@\r\n\r\n\r\nfunction Repro\r\n{\r\n    [CmdletBinding()]\r\n    param( [Parameter( Mandatory = $true,\r\n                       Position = 0,\r\n                       ValueFromPipeline = $true,\r\n                       ValueFromPipelineByPropertyName = $true )] # <-- BUG: will not work\r\n           [Repro.TimeZoneTransformation()]\r\n           [TimeZoneInfo] $TZI\r\n         )\r\n\r\n    process\r\n    {\r\n        Write-Host \"$($MyInvocation.InvocationName): `$TZI is: $TZI\" -Fore Cyan\r\n    }\r\n}\r\n\r\nfunction NoRepro1\r\n{\r\n    [CmdletBinding()]\r\n    param( [Parameter( Mandatory = $true,\r\n                       Position = 0,\r\n                       ValueFromPipeline = $true,\r\n                       ValueFromPipelineByPropertyName = $true )]\r\n           [Repro.TimeZoneTransformation( UseWorkaround_FailGracefully = $true )]\r\n           [TimeZoneInfo] $TZI\r\n         )\r\n\r\n    process\r\n    {\r\n        Write-Host \"$($MyInvocation.InvocationName): `$TZI is: $TZI\" -Fore Green\r\n    }\r\n}\r\n\r\nfunction NoRepro2\r\n{\r\n    [CmdletBinding()]\r\n    param( [Parameter( Mandatory = $true,\r\n                       Position = 0,\r\n                       ValueFromPipeline = $true,\r\n                       ValueFromPipelineByPropertyName = $true )]\r\n           [Repro.TimeZoneTransformation( UseWorkaround_WrapPSInvalidCastException = $true )]\r\n           [TimeZoneInfo] $TZI\r\n         )\r\n\r\n    process\r\n    {\r\n        Write-Host \"$($MyInvocation.InvocationName): `$TZI is: $TZI\" -Fore Green\r\n    }\r\n}\r\n\r\n\r\n$customObj = [PSCustomObject] @{ TZI = \"Pacific Standard Time\" }\r\n\r\n$customObj | NoRepro1\r\n$customObj | NoRepro2\r\n$customObj | Repro\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nNo errors should be generated by the repro script: the `TZI` parameter should be bound by property name in all cases.\r\n\r\nActual behavior\r\n---------------\r\nProperty binding stops (so that binding by property name is not attempted) when an `ArgumentTransformationMetadataException` is thrown, so `$customObj | Repro` generates an error instead of succeeding.\r\n\r\n```none\r\n===============================================\r\nWelcome to the TimeZoneTransformationAttribute.\r\n   inputData is null? False\r\n   inputData type: System.Management.Automation.PSObject\r\n   inputData value: @{TZI=Pacific Standard Time}\r\ngetting baseobject... (System.Management.Automation.PSCustomObject)\r\nit's not a string\r\n(failing by throwing an ArgumentTransformationMetadataException)\r\n(which is supposed to be \"recoverable\")\r\n-----------------------------------------------\r\nRepro : Cannot process argument transformation on parameter 'TZI'. Could not convert '' to a timezone.\r\nAt C:\\temp\\TransformationAttrRepro\\Repro.ps1:177 char:14\r\n+ $customObj | Repro\r\n+              ~~~~~\r\n+ CategoryInfo          : InvalidData: (@{TZI=Pacific Standard Time}:PSObject) [Repro], ParameterBindingArgumentTransformationException\r\n+ FullyQualifiedErrorId : ParameterArgumentTransformationError,Repro\r\n```\r\n\r\nOptions to fix this\r\n--------------------\r\nOption 1) When an `ArgumentTransformationMetadataException` is thrown, PS should continue to attempt binding (so that binding by property name can be tried). Currently, if the ATME wraps a `PSInvalidCastException`, then things work as expected. (But how would you know to do that, and why shouldn't it just work for a plain ATME?)\r\n\r\nSee the code in [CmdletParameterBinderController.cs](https://github.com/PowerShell/PowerShell/blob/5d03e1653a7d518715fa3f00587cad6b5c78cc89/src/System.Management.Automation/engine/CmdletParameterBinderController.cs#L3571).\r\n\r\nOR\r\n\r\nOption 2) The first option would be a breaking change, but probably in the category of \"acceptable\" changes (\"Any existing behavior that results in an error message generally may be changed to provide new functionality.\"). However, if for some reason we don't want to do that, the documentation should be updated to instruct how to properly fail a transformation without halting binding. The repro script above demonstrates two different approaches for coaxing parameter binding into continuing.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.17713\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-05-31T22:00:48Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme Look `ArgumentToEncodingTransformationAttribute` implementation in the repo.\r\nhttps://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/utils/EncodingUtils.cs#L90",
      "created_at": "2018-08-22T07:42:36Z",
      "updated_at": "2018-08-22T07:42:36Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry @iSazonov , I don't understand the relevance of that transformer. Yes, it also demonstrates the first workaround demonstrated by the repro script (`UseWorkaround_FailGracefully`).\r\n\r\nEven if we decide that all the code works exactly as desired, then this is a doc bug, because you can't tell from reading the docs that it's how you should fail (docs incorrectly instruct you to throw an ATME if transformation fails, which will break further binding, which cannot possibly be what the user wanted).\r\n\r\n(To be clear, my preferred option is to change PS to treat all ATMEs the same way that ATMEs which wrap PSInvalidExceptions are today. But even if we decide against that, _something_ should be done; this is painful to figure out.)",
      "created_at": "2018-08-22T16:03:14Z",
      "updated_at": "2018-08-22T16:03:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme Thanks for clarify and in-depth research. I think the code works as expected and it is doc issue - we should add that we should throw `ArgumentTransformationMetadataException` with inner `PSInvalidCastException` exception. (Sample code in `ArgumentTypeConverterAttribute`). Please open new issue in PowerShell-Docs repo if you agree.",
      "created_at": "2018-08-23T05:47:13Z",
      "updated_at": "2018-08-23T05:49:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-05-31T22:00:27Z",
      "updated_at": "2019-05-31T22:00:27Z"
    }
  ],
  "created_at": "2018-08-22T05:07:27Z",
  "labels": [
    "Issue-Bug",
    "Area-Maintainers-Documentation",
    "Resolution-External"
  ],
  "number": 7600,
  "state": "closed",
  "title": "Parameter binding stops when a transformation attribute throws a ArgumentTransformationMetadataException",
  "updated_at": "2019-05-31T22:00:48Z"
}