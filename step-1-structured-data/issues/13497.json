{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13497",
  "author": "MS-syh2qs",
  "body": "Customers are running into **System.Management.Automation.PSInvalidOperationException: The pipeline was not run because a pipeline is already running. Pipelines cannot be run concurrently** error when calling Add-AzVhd method from Az.Compute module. Looking at the stack trace, it's coming from the following method in Automation SDK: System.Management.Automation.Runspaces.PipelineBase.DoConcurrentCheck(Boolean syncCall, Object syncObject, Boolean isInLock) \r\n\r\nHowever, we are not able to reproduce it every time. We are only able to reproduce it successfully around 20% of the time. We are not using any piping in our PS script. Could you guys help us out in determining what the problem might be?\r\n\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nNo reliable reproduce method. Personally, I am unable to reproduce it, however another engineer is able to and he has around 20% repro rate. \r\n\r\n# Cosine IOT Services Azure Internal Consumption\r\n$subscriptionId='f9cb372a-8903-4370-9ce0-3042e3bb2cc8'\r\n\r\n$rgSeed = \"akstest\" # TODO customize\r\n$vmSeed = \"0430c101a\"\r\n$vhdFolder = \"C:\\Users\\jiria\\Downloads\"\r\n$vhdFileName = \"aks-vhd-2.0.20200815.0745.vhd\"\r\n$storageAccountName = \"storage\" + $rgSeed\r\n\r\n$location = \"westus2\"\r\n\r\n# $vmSize = \"Standard_A2\"\r\n$vmSize = \"Standard_NC6\"\r\n\r\n.\\vm-create.ps1 $subscriptionId $rgSeed $vmSeed $vhdFolder $vhdFileName $storageAccountName $location $vmSize\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nNo error\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nerror: Exception - System.Management.Automation.PSInvalidOperationException: The pipeline was not run because a pipeline is already running. Pipelines cannot be run concurrently. \r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2020-08-24T19:55:55Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please ask in https://github.com/Azure/azure-powershell\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/6844498?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/Azure/azure-powershell\">Azure/azure-powershell</a></strong></div><div>Microsoft Azure PowerShell. Contribute to Azure/azure-powershell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-08-21T15:20:32Z",
      "updated_at": "2020-08-21T15:20:34Z"
    },
    {
      "author": "MS-syh2qs",
      "author_association": "NONE",
      "body": "@iSazonov, I was told by Azure-PS team to come here. They weren't sure what the best way to instantiate PowerShell class. What is the difference between calling Create() vs Create(RunspaceMode.NewRunSpace)?",
      "created_at": "2020-08-21T15:31:57Z",
      "updated_at": "2020-08-21T15:31:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MS-syh2qs Please add more info as our issue template ask. Also please add a reference to your discussion with Azure-PS team.",
      "created_at": "2020-08-21T16:06:29Z",
      "updated_at": "2020-08-21T16:06:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> We are not using any piping in our PS script\r\n\r\nA pipeline here is what runs the commands. The error message means you're trying to run multiple commands at the same time on the same thread (i.e. in the same runspace).\r\n\r\nIn the snippet and error message you've shown, there isn't enough information to establish what's going on. In particular we don't know what cmdlets are being used, where the error occurs or any other details about the error. We need:\r\n\r\n- The contents of `vm-create.ps1` and any other scripts being called -- we need to know the whole program you're running\r\n- The full stack trace of the error, which you can get with `Get-Error` or `$error[0] | fl * -force` after you reproduce",
      "created_at": "2020-08-21T17:19:57Z",
      "updated_at": "2020-08-21T17:19:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think they mentioned the cmdlet they ran; `Add-AzVhd` -- I suspect the cmdlet is doing something... unwise... internally if that's all they ran.",
      "created_at": "2020-08-21T18:56:01Z",
      "updated_at": "2020-08-21T18:56:01Z"
    },
    {
      "author": "MS-syh2qs",
      "author_association": "NONE",
      "body": "@rjmholt,\r\n\r\nHere's the script: \r\n[vm-create.txt](https://github.com/PowerShell/PowerShell/files/5119659/vm-create.txt)\r\n\r\nThis is the full stack trace:\r\n```\r\nDEBUG: AzureQoSEvent: CommandName - Add-AzVhd; IsSuccess - False; Duration - 00:56:52.8136956;; Exception - System.Management.Automation.PSInvalidOperationException: The pipeline was not\r\nrun because a pipeline is already running. Pipelines cannot be run concurrently.\r\n   at System.Management.Automation.Runspaces.PipelineBase.DoConcurrentCheck(Boolean syncCall, Object syncObject, Boolean isInLock)\r\n   at System.Management.Automation.Runspaces.RunspaceBase.DoConcurrentCheckAndAddToRunningPipelines(PipelineBase pipeline, Boolean syncCall)\r\n   at System.Management.Automation.Runspaces.PipelineBase.CoreInvoke(IEnumerable input, Boolean syncCall)\r\n   at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input)\r\n   at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke)\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at Microsoft.Azure.Commands.Compute.Models.PSSyncOutputEvents.LogProgressComplete(Int32 activityId, String activity)\r\n   at Microsoft.Azure.Commands.Compute.Models.PSSyncOutputEvents.ProgressUploadComplete(TimeSpan elapsed)\r\n   at Microsoft.WindowsAzure.Commands.Sync.ProgressTracker.Dispose(Boolean disposing)\r\n   at Microsoft.WindowsAzure.Commands.Sync.ProgressTracker.Dispose()\r\n   at Microsoft.WindowsAzure.Commands.Sync.Upload.BlobSynchronizer.Synchronize()\r\n   at Microsoft.Azure.Commands.Compute.Models.VhdUploaderModel.Upload(UploadParameters uploadParameters)\r\n   at Microsoft.Azure.Commands.Compute.StorageServices.AddAzureVhdCommand.ExecuteCmdlet()\r\n   at Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet.ProcessRecord();\r\n\r\n```",
      "created_at": "2020-08-24T18:39:17Z",
      "updated_at": "2020-08-24T18:57:39Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Thanks for that.\r\n\r\n[Here](https://github.com/Azure/azure-powershell/blob/1bcbe7b1f7a3323ac98f7754ba03eeb6b45e79f2/src/Compute/Compute/Models/PSSyncOutputEvents.cs#L92-L101) is the relevant code in Azure PowerShell.\r\n\r\nThis is expected behaviour from the PowerShell engine; trying to run multiple PowerShells at the same time on the same runspace will result in this error.\r\n\r\nAzure PowerShell needs to create a *nested* PowerShell instance to do this when calling from the pipeline thread -- this can be done, since we are under the `ProcessRecord()` call stack. In cases where they are calling from a different thread, they need to come up with another way to synchronise their use of the original runspace.\r\n\r\nI suggest if you have the original Azure PowerShell issue, we should move this back to there and reopen it, or otherwise open a new issue on Azure PowerShell.",
      "created_at": "2020-08-24T19:02:34Z",
      "updated_at": "2020-08-24T19:04:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I was told by Azure-PS team to come here\r\n\r\nApologies, I misunderstood this as \"the AzPS team told me the issue lies with PowerShell\" rather than \"I'm trying to help the AzPS team fix this and I'm here for answers\".\r\n\r\nBasically the fix depends on:\r\n\r\n- How this method is being called/needs to be called (is it always from within the scope of a cmdlet's process methods, or can it be from other threads?)\r\n- What is needed from the existing context and why the original runspace is being use\r\n\r\nBasically, if this is always being called from the original cmdlet thread under the callstack of `BeginProcessing()`/`ProcessRecord()`/`EndProcessing()`, then it's enough just to use a nested PowerShell instance:\r\n\r\n```csharp\r\nusing (var pwsh = PowerShell.Create(RunspaceMode.CurrentRunspace))\r\n{\r\n    pwsh.AddCommand(\"Write-Progress\")\r\n        .AddParameter(\"Id\", activityId)\r\n        .AddParameter(\"Activity\", activity)\r\n        .AddParameter(\"Status\", Rsrc.PSSyncOutputEventsLogProgressCompleteCompleted)\r\n        .AddParameter(\"Completed\")\r\n        .Invoke();\r\n}\r\n```\r\n\r\nHowever, if this is being called from multiple threads as I suspect, then we need to understand the requirements better to come up with a better mechanism to synchronise usage or to otherwise manage the concurrent use of PowerShell resources. Some avenues available are:\r\n\r\n- Creating a new runspace to support background operations, or even using a runspace pool\r\n- Using appropriate [`PSThreadOptions`](https://docs.microsoft.com/dotnet/api/system.management.automation.runspaces.psthreadoptions) to create that runspace\r\n- Using PowerShell eventing for background tasks\r\n- Creating a more customised concurrency management model, like a consumer thread\r\n\r\nIn this particular case though, we're trying to write progress, which is a user-facing UI task (i.e. very much a *foreground* operation). In PowerShell, you don't need to create and execute a `PowerShell` instance for this. Instead, you can use the Host's UI property (`$Host.UI`, also available in `PSCmdlet`s with the [`Host`](https://docs.microsoft.com/dotnet/api/system.management.automation.pscmdlet.host) property) to write things whenever you like -- no synchronisation required. But this is a bad idea, because writing output to the screen while the user is doing something else is at best a strange experience and at worst totally mangles their terminal.\r\n\r\nSo my recommendation is:\r\n\r\n- We need to understand the requirements of how `PSSyncOutputEvents` is being used.\r\n    - Is it just being used to write to the UI, or does it need to actually execute commands?\r\n    - If it is executing commands etc, does it need the current runspace to do it?\r\n    - Under what circumstances are other threads calling into `PSSyncOutputEvents` and why?\r\n- Based on our understanding of those requirements, we should\r\n    - Turn purely UI-facing methods into well synchronised calls into the current Host UI, rather than creating a new `PowerShell` instance\r\n    - Come up with a robust thread model for any remaining invocations that need to run PowerShell",
      "created_at": "2020-08-24T19:31:33Z",
      "updated_at": "2020-08-24T19:34:14Z"
    },
    {
      "author": "MS-syh2qs",
      "author_association": "NONE",
      "body": "@rjmholt, \r\n\r\n> Apologies, I misunderstood this as \"the AzPS team told me the issue lies with PowerShell\" rather than \"I'm trying to help the AzPS team fix this and I'm here for answers\".\r\n\r\nYeah sorry about that, I wasn't very clear. \r\n\r\nThank you for the detailed response, my team will take a look where you've pointed to. ",
      "created_at": "2020-08-24T19:55:55Z",
      "updated_at": "2020-08-24T19:55:55Z"
    }
  ],
  "created_at": "2020-08-21T14:32:21Z",
  "number": 13497,
  "state": "closed",
  "title": "Pipelines cannot be run concurrently",
  "updated_at": "2020-08-25T03:33:25Z"
}