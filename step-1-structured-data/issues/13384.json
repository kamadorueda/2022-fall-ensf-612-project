{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13384",
  "author": "xdhmoore",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\nI'm seeing some weird behavior trying to pipe a command to AutoHotkey. It seems to hang in the background until a pwsh UI event causes it to complete. \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n'WinMaximize, ahk_class ENMainFrame' | D:\\path\\to\\AutoHotkey\\AutoHotkey.exe *\r\n```\r\n\r\n## Expected behavior\r\nCompletes within a few seconds and maximizes the target window. It leaves no AutoHotkey processes running:\r\n```none\r\nPS D:\\projects> ps auto*\r\nPS D:\\projects>\r\n```\r\n\r\n## Actual behavior\r\nThe command returns quickly, but the target window is not maximized, and there remains a background process:\r\n```none\r\nPS D:\\projects> ps auto*\r\n\r\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\r\n ------    -----      -----     ------      --  -- -----------\r\n     12     1.96       7.65       0.03   13804   1 AutoHotkey\r\n```\r\nThis background process hangs without maximizing the window for 7+ minutes if the terminal is left alone. However, if I hold down the ENTER key, (displaying a series of new prompts), within a few seconds the targeted window will be maximized and the background process will terminate. Similarly, I can type `.\\` and then hold TAB for a few seconds (cycling through file name completions) with the same effect. Also, adding a `&` at the end fixes the problem:\r\n\r\n```powershell\r\n'WinMaximize, ahk_class ENMainFrame' | D:\\tools\\AutoHotkey\\AutoHotkey.exe * & \r\n```\r\n\r\n## Environment data\r\n This behavior is present with:\r\n* `pwsh` (7.0.3) with ConEmu                                                                                                                           \r\n* `pwsh` (7.0.3) with traditional windows terminal ui                                                                                                  \r\n* `pwsh -NoProfile` (7.0.3)\r\n\r\nBut not present with:                                                                               \r\n* `powershell` (5.1.18362.752, after adjusting the default encoding)                                                                                  \r\n* `cmd`  \r\n\r\n#### $PSVersionTable :\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-08-13T12:00:18Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So `AutoHotkey` isn't a console application, so typically PowerShell doesn't wait for it's completion before returning.  I think stdin is still being shared though, so `AutoHotkey` thinks it's still waiting for more script.\r\n\r\nAs a workaround, if you pipe the output of `AutoHotkey` to something it'll force it to wait until completion and properly close stdin.  e.g.\r\n\r\n```powershell\r\n'WinMaximize, ahk_class ENMainFrame' | D:\\path\\to\\AutoHotkey\\AutoHotkey.exe * | Write-Output\r\n```",
      "created_at": "2020-08-09T12:48:54Z",
      "updated_at": "2020-08-09T12:48:54Z"
    },
    {
      "author": "xdhmoore",
      "author_association": "NONE",
      "body": "@SeeminglyScience Thanks, that workaround does work on my machine. I'm unsure of the next step. Do you think this is a AutoHotkey bug instead (maybe it's not acknowledging the EOF or something)? Should I submit a bug report to AHK? Or do you think pwsh is failing to close stdin properly in this case?",
      "created_at": "2020-08-10T06:26:22Z",
      "updated_at": "2020-08-10T06:26:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's probably mostly PowerShell's fault.  The only question is if it's typically by design and AHK is just an edge case.  Either way I don't think there's anything on AHK's end to do.",
      "created_at": "2020-08-10T12:01:22Z",
      "updated_at": "2020-08-10T12:01:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-13T12:00:17Z",
      "updated_at": "2020-08-13T12:00:17Z"
    }
  ],
  "created_at": "2020-08-09T00:05:34Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13384,
  "state": "closed",
  "title": "Background process hangs until UI is triggered",
  "updated_at": "2020-08-13T12:00:18Z"
}