{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9812",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdds a check for whether a token has the `TokenFlags.Keyword` flag or is `TokenKind.DynamicKeyword` if it isn't tokenized as `TokenKind.Identifier` when examining possible tokens to use for the method name. This means that any keyword may be used as a method name, with the only remaining exceptions being  `hidden` or `static`. \r\n\r\nAs these keywords are used in method declarations, I feel these remaining unusable as a method name is fairly sensible. \r\n\r\nAdditionally, once a usable method token is found, additionally we remove the token flags to ensure we don't get the keyword highlighting on such method names.\r\n\r\n## PR Context\r\n\r\nFixes #9106\r\nFixes #2217\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-06-25T18:04:01Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @iSazonov Not sure where to put tests for this. Any suggestions? \ud83d\ude42 ",
      "created_at": "2019-06-13T15:03:42Z",
      "updated_at": "2019-06-13T15:03:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps Parser.Tests.ps1 and Parsing.Tests.ps1 ",
      "created_at": "2019-06-13T15:22:27Z",
      "updated_at": "2019-06-13T15:22:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Added a test in Parser.Tests.ps1\r\n\r\nI looked at Parsing.Tests.ps1 but I'm frankly very confused as to how that testing goes where classes are concerned, as there are none in there currently. I managed to piece together what it's doing where functions are concerned, but I've yet to figure out how it's supposed to test things where classes are concerned.",
      "created_at": "2019-06-13T16:49:47Z",
      "updated_at": "2019-06-13T16:49:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Windows agent failed on.... something very odd. Might need to be kicked again. \ud83d\ude04 ",
      "created_at": "2019-06-13T16:56:55Z",
      "updated_at": "2019-06-13T16:56:55Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 1 failures in `PowerShell-CI-linux`\r\nParserTests (admin\\monad\\tests\\monad\\src\\engine\\core\\ParserTests.cs).Permits class methods to be named after keywords\r\n```powershell\r\nExpected no exception to be thrown, but an exception \"Exception calling \"Invoke\" with \"0\" argument(s): \"At line:8 char:18\r\n+                 [hidden] $Data = \"Secrets\"\r\n+                  ~~~~~~\r\nUnable to find type [hidden].\"\" was thrown from /home/vsts/work/1/s/test/powershell/Language/Parser/Parser.Tests.ps1:80 char:17\r\n    +                 $PowerShell.AddScript($command).Invoke()\r\n    +                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Language/Parser/Parser.Tests.ps1: line 1031\r\n1031:             { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n```\r\n",
      "created_at": "2019-06-13T17:07:27Z",
      "updated_at": "2019-06-13T17:07:27Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 1 failures in `PowerShell-CI-macos`\r\nParserTests (admin\\monad\\tests\\monad\\src\\engine\\core\\ParserTests.cs).Permits class methods to be named after keywords\r\n```powershell\r\nExpected no exception to be thrown, but an exception \"Exception calling \"Invoke\" with \"0\" argument(s): \"At line:8 char:18\r\n+                 [hidden] $Data = \"Secrets\"\r\n+                  ~~~~~~\r\nUnable to find type [hidden].\"\" was thrown from /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Language/Parser/Parser.Tests.ps1:80 char:17\r\n    +                 $PowerShell.AddScript($command).Invoke()\r\n    +                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Language/Parser/Parser.Tests.ps1: line 1031\r\n1031:             { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n```\r\n",
      "created_at": "2019-06-13T17:14:14Z",
      "updated_at": "2019-06-13T17:14:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 OK, something seems to be up with the Windows build agent. @TravisEz13 have you seen this happen before? \r\n```\r\n##[section]Starting: Download build artifacts\r\n==============================================================================\r\nTask         : Download build artifacts\r\nDescription  : Download files that were saved as artifacts of a completed build\r\nVersion      : 0.153.1\r\nAuthor       : Microsoft Corporation\r\nHelp         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/download-build-artifacts\r\n==============================================================================\r\nDownloading artifacts for build: 25058\r\nLinked artifacts count:  3\r\nDownloading artifact build from: https://powershell.visualstudio.com//2972bb5c-f20c-4a60-8bd9-00ffe9987edc/_apis/build/builds/25058/artifacts?artifactName=build&$format=zip\r\nDownloading artifact testResults from: https://powershell.visualstudio.com//2972bb5c-f20c-4a60-8bd9-00ffe9987edc/_apis/build/builds/25058/artifacts?artifactName=testResults&$format=zip\r\nDownloading artifact xunit from: https://powershell.visualstudio.com//2972bb5c-f20c-4a60-8bd9-00ffe9987edc/_apis/build/builds/25058/artifacts?artifactName=xunit&$format=zip\r\nSkipped processing item \r\nSkipped processing item \r\nSkipped processing item \r\nSuccessfully downloaded artifacts to D:\\a\\1\\a\r\nTotal Files: 1, Processed: 0, Skipped: 1, Failed: 0, Download time: 0.015 secs, Download size: 0Bytes\r\n\r\nD:\\a\\_tasks\\DownloadBuildArtifacts_a433f589-fce1-4460-9ee6-44a624aeb1fb\\0.153.1\\node_modules\\artifact-engine\\Engine\\artifactEngine.js:157\r\n    throw err;\r\n    ^\r\nFailed to extract package with error Error: ENOENT: no such file or directory, open 'D:\\a\\1\\a\\build.zip'\r\nTotal Files: 1, Processed: 0, Skipped: 1, Failed: 0, Download time: 0.015 secs, Download size: 0Bytes\r\nTotal Files: 1, Processed: 0, Skipped: 1, Failed: 0, Download time: 0.015 secs, Download size: 0Bytes\r\n##[error]artifact-engine: unhandled rejection Failed to extract package with error Error: ENOENT: no such file or directory, open 'D:\\a\\1\\a\\build.zip'\r\n##[error]Unhandled: undefined\r\n##[error]Unhandled: undefined\r\n##[error]artifact-engine: unhandled exception Failed to extract package with error Error: ENOENT: no such file or directory, open 'D:\\a\\1\\a\\build.zip'\r\n##[error]Exit code 7 returned from process: file name 'C:\\agents\\2.152.1\\externals\\node\\bin\\node.exe', arguments '\"D:\\a\\_tasks\\DownloadBuildArtifacts_a433f589-fce1-4460-9ee6-44a624aeb1fb\\0.153.1\\main.js\"'.\r\n##[section]Finishing: Download build artifacts\r\n```",
      "created_at": "2019-06-13T17:31:57Z",
      "updated_at": "2019-06-13T17:31:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 The class related tests are located at `test\\powershell\\Language\\Classes`. Feel free to move your test there :)",
      "created_at": "2019-06-13T17:36:36Z",
      "updated_at": "2019-06-13T17:36:36Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 1 failures in `PowerShell-CI-linux`\r\nMethod Name Test.Permits class methods to be named after keywords\r\n```powershell\r\nExpected no exception to be thrown, but an exception \"The term 'ExecuteCommand' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\" was thrown from /home/vsts/work/1/s/test/powershell/Language/Classes/Scripting.Classes.BasicParsing.Tests.ps1:443 char:11\r\n    +         { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n    +           ~~~~~~~~~~~~~~.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Language/Classes/Scripting.Classes.BasicParsing.Tests.ps1: line 443\r\n443:         { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n```\r\n",
      "created_at": "2019-06-13T18:00:51Z",
      "updated_at": "2019-06-13T18:00:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, of course. Let's reframe that.",
      "created_at": "2019-06-13T18:02:39Z",
      "updated_at": "2019-06-13T18:02:39Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 1 failures in `PowerShell-CI-macos`\r\nMethod Name Test.Permits class methods to be named after keywords\r\n```powershell\r\nExpected no exception to be thrown, but an exception \"The term 'ExecuteCommand' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\" was thrown from /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Language/Classes/Scripting.Classes.BasicParsing.Tests.ps1:443 char:11\r\n    +         { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n    +           ~~~~~~~~~~~~~~.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Language/Classes/Scripting.Classes.BasicParsing.Tests.ps1: line 443\r\n443:         { ExecuteCommand $ClassDefinition } | Should -Not -Throw\r\n```\r\n",
      "created_at": "2019-06-13T18:04:34Z",
      "updated_at": "2019-06-13T18:04:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That should do it. Not sure what's up w/ the windows agent though @daxian-dbw ",
      "created_at": "2019-06-13T18:53:38Z",
      "updated_at": "2019-06-13T18:53:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 We have reported the issue to Azure DevOps. Let's wait for their response.",
      "created_at": "2019-06-13T20:11:42Z",
      "updated_at": "2019-06-13T20:11:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I think that addresses all your concerns.\r\n\r\nAzure's build agents are still a bit under the weather though, unfortunately. \ud83d\ude42 ",
      "created_at": "2019-06-16T00:04:19Z",
      "updated_at": "2019-06-16T00:04:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw could you update your review when you have a moment? \ud83d\udc96 ",
      "created_at": "2019-06-18T21:26:23Z",
      "updated_at": "2019-06-18T21:26:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Had to refactor the tests slightly to avoid polluting the test scope with a dynamic keyword and risk breaking something later. Changed them to use a nested `[powershell]` instance.\r\n\r\nThat should work, unless I miss my understanding of how Pester manages scoping. @iSazonov that should work for a dynamickeyword test, I think? \ud83d\ude42 ",
      "created_at": "2019-06-22T14:47:38Z",
      "updated_at": "2019-06-22T14:47:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please remind me in 1 hour.",
      "created_at": "2019-06-22T14:50:04Z",
      "updated_at": "2019-06-22T14:50:04Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, this is the reminder you requested 1 hour. ago",
      "created_at": "2019-06-22T15:50:45Z",
      "updated_at": "2019-06-22T15:50:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I think that more or less addresses everything.\r\n\r\nI'm a little unsure about DynamicKeyword myself, but I think it makes the most sense to treat it the same as other keywords. After all, it would be very confusing for users for some arbitrary method name to stop parsing after they define a dynamic keyword -- two seemingly unrelated things, which should probably stay unrelated.",
      "created_at": "2019-06-23T12:43:17Z",
      "updated_at": "2019-06-23T12:43:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 24 hours",
      "created_at": "2019-06-24T17:54:28Z",
      "updated_at": "2019-06-24T17:54:28Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, this is the reminder you requested 24 hours ago",
      "created_at": "2019-06-25T17:54:43Z",
      "updated_at": "2019-06-25T17:54:43Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:32Z",
      "updated_at": "2019-07-17T20:56:32Z"
    }
  ],
  "created_at": "2019-06-04T03:31:31Z",
  "number": 9812,
  "state": "closed",
  "title": "Allow methods to be named after keywords",
  "updated_at": "2019-07-17T20:56:32Z"
}