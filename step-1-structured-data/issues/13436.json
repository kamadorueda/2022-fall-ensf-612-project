{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13436",
  "author": "xtqqczze",
  "body": "# PR Summary\r\n\r\nAutofix GU0073: Member of non-public type should be internal.\r\n\r\nhttps://github.com/GuOrg/Gu.Analyzers/blob/master/documentation/GU0073.md\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-22T16:01:33Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "From https://github.com/PowerShell/PowerShell/pull/13425#issuecomment-674141211:\r\n\r\nGenerally I personally prefer public methods on internal and private classes; a class/object has a public API and private methods, internal implies a secondary API and muddies thinking around the cohesion and contract around a class. More than that, keeping members `public` is arguably *DRY*er, since the API represented by the class now has its exposure controlled by a single keyword at the class level.\r\n\r\nHowever, in PowerShell there is a consideration that once you have an object, any public member on it is visible to PowerShell (even if the class itself is internal), which drives a lot of the other classes that have internal members on everything. So there is an externally appreciable difference between an internal type with public members and an internal type with internal members. While we don't consider an internal change like that to be breaking, it's still a change that could affect users.",
      "created_at": "2020-08-14T16:20:10Z",
      "updated_at": "2020-08-14T16:20:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's still a change that could affect users\r\n\r\nIf you say about reflection it is never public contract.",
      "created_at": "2020-08-14T18:10:53Z",
      "updated_at": "2020-08-14T18:10:53Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> If you say about reflection it is never public contract.\r\n\r\nAgreed. My question is that there's a change being made, but for what benefit? It's not a public contract, but it may still complicate things for users. I would want to see a positive effect in exchange for that.",
      "created_at": "2020-08-14T18:40:30Z",
      "updated_at": "2020-08-14T18:42:51Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "This PR will require more effort before it can be built successfully.\r\n\r\nI think the only benefit is in code review (easy to verify a method is not public API), so if this change could affect users I think it may not bring value. I wonder what other maintainers think.\r\n\r\nOnce we have made a decision we could consider documenting in our [coding guidelines](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md).\r\n\r\n",
      "created_at": "2020-08-14T20:04:42Z",
      "updated_at": "2020-08-14T20:08:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In my opinion, it is better to follow the principle of minimum visibility.\r\n",
      "created_at": "2020-08-15T15:39:58Z",
      "updated_at": "2020-08-15T15:39:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Echoing @rjmholt's point, I see *a lot* of members \"accidently\" surfaced to PowerShell like this.  Say you have an API like this:\r\n\r\n```csharp\r\npublic abstract class Food { }\r\n\r\ninternal class Apple : Food\r\n{\r\n    public int SeedCount { get; set; }\r\n}\r\n\r\npublic static class Store\r\n{\r\n    public static Food GetFood()\r\n    {\r\n        return new Apple();\r\n    }\r\n}\r\n```\r\n\r\nIf you call `[Store]::GetFood() | Get-Member`, the user has no way of knowing `SeedCount` isn't something they're supposed to be able to use.  Making a blanket change like this is pretty dangerous.\r\n\r\nI took a quick glance over some of the changes and pretty quickly found one example of this, the formatting objects like `FormatStartData`.  There's no way to know that all of those properties are not part of breaking change contracts.  I've definitely seen code relying on these.",
      "created_at": "2020-08-17T13:58:01Z",
      "updated_at": "2020-08-17T13:58:01Z"
    }
  ],
  "created_at": "2020-08-14T13:54:16Z",
  "number": 13436,
  "state": "closed",
  "title": "Members of internal types should not be public",
  "updated_at": "2020-08-22T16:01:38Z"
}