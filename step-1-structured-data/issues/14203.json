{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14203",
  "author": "mladedav",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nAs a user I want throw expressions so that I can chain them with operators such as && and ||. This enables me to have more concise throw statements when a command fails.\r\n\r\nRight now we can do (taken from [Powershell documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipeline_chain_operators?view=powershell-7.1)):\r\n```\r\n$result = Write-Output 'Value' && $(throw 'Bad')\r\n```\r\nI propose only to simplify it to\r\n```\r\n$result = Write-Output 'Value' && throw 'Bad'\r\n```\r\nFor reference, right now it throws (different) error stating:\r\n```\r\nthrow: The term 'throw' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\nMy idea is based on what C# has https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/throw-expression.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nI believe just allowing the syntax parser to parse this would make this work as expected as the throw statement would be executed at that point and nothing else would be including any potential usage or assignment of the value that is expected to be returned from the expression.\r\n\r\nIf this is seriously considered I think it would be best to reach out to a C# team member to ask if there were any issues with this.",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "First  `$result = Write-Output 'Value' && $(throw 'Bad')` \r\nIs a dreadful example for the help.  \r\n1.  Nothing should ever use   `$variable = write-output <<some_constant>>`\r\n2.  `$result = 'Value' && <<anything which doesn't throw>>` puts \"value\" into $result and the puts a second value in if there is one,   throw leaves$ result empty. \r\n \r\n\r\nThere's a much wider constrain to do with language keywords.  You can't , for example, do \r\n`foreach ($x in $Y) {$x +1 } | some-command `   \r\n\r\nfor / foreach / while / if / throw / break / continue  are not pipelines and as the help says  under \"Operator syntax and precedence\" \r\n>   Unlike other operators, && and || operate on pipelines, rather than on expressions like + or -and, for example.\r\n\r\n`$result =  'Value' && while ($x -lt 3) {$x ++}` won't work either. nor will.\r\n`$result =  'Value' && if ($true) {\"boo\"}`\r\n\r\n",
      "created_at": "2020-11-20T22:12:51Z",
      "updated_at": "2020-11-20T22:12:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@mladedav, I empathize and certainly wish the `$(...)` wasn't needed, but this has been discussed at length in #10967; specifically, @rjmholt explains [here](https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549167463) and [here](https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-561843650) why the fundamentals of PowerShell's current grammar prevent a solution.",
      "created_at": "2020-11-22T19:21:08Z",
      "updated_at": "2020-11-22T19:21:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The short of it: `throw` is a _statement_, as are constructs such as `if` and `foreach`, and the only way to nest statements inside a statement is via `$(...)`.\r\n\r\n@jhoneill's examples, such as `foreach ($x in $Y) {$x +1 } | some-command`, therefore do not work for the same reason - even though I wish they did (#6817).\r\n\r\n",
      "created_at": "2020-11-22T19:27:06Z",
      "updated_at": "2020-11-22T19:27:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside: The curious thing is that statements _are_ allowed without `$(...)` if they are the standalone RHS of an _assignment_; e.g.:\r\n\r\n```powershell\r\n$var = foreach ($i in 1..3) { $i }  # $(...) NOT required in this case.\r\n```",
      "created_at": "2020-11-22T19:29:19Z",
      "updated_at": "2020-11-22T19:29:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: [Here](https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-569285154) I've made a proposal to modify the grammar _slightly_, in order to at least allow using `exit` , `return`, `throw` as-is in pipeline chains (with `&&` and `||`), but my knowledge isn't deep enough to know whether (a) that is technically feasible and (b) without breaking backward compatibility.",
      "created_at": "2020-11-22T20:17:39Z",
      "updated_at": "2020-11-22T20:17:39Z"
    }
  ],
  "created_at": "2020-11-20T13:52:13Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 14203,
  "state": "open",
  "title": "Throw expressions",
  "updated_at": "2020-11-22T20:17:39Z"
}