{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9853",
  "author": "rkeithhill",
  "body": "# Summary of the new feature/enhancement\r\n\r\nArrays work fine for a lot of scenarios in PowerShell except with size gets large and the number of additions to the array is big.  In the community, we encourage folks to use a list for \"perf critical\" scenarios.  It would be nice if we could make it simpler for folks to use lists.  \r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nA good start is to create a type accelerator for list.  Now I don't know if the type accelerator mechanism supports type parameters allowing me to do this:\r\n\r\n```powershell\r\n$list = [list[string]]::new()  # explicitly create with explicit type parameter\r\n$list = [list][foo.bar]::HugeArrayOfStrings # infer type parameter and initialize the list from the array\r\n```\r\nIf it doesn't I suppose we could internally use PSObject as the type parameter.  This wouldn't be as strongly typesafe but it would largely address the perf issue for reference types.  Not so much for value types though.  ",
  "closed_at": "2019-06-07T18:17:49Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Related to https://github.com/PowerShell/PowerShell/issues/5643.\r\n\r\nThere's some discussion around it in https://github.com/PowerShell/PowerShell/issues/5643#issuecomment-358521960.",
      "created_at": "2019-06-07T16:05:35Z",
      "updated_at": "2019-06-07T16:05:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 Gonna roll this into a build and see what issues I come across. Been wanting to do this for _ages_!",
      "created_at": "2019-06-07T16:14:42Z",
      "updated_at": "2019-06-07T16:14:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Initial results are pretty promising for only a one-line code change.\r\n\r\n```powershell\r\n$list = [list[string]]::new() # works correctly\r\n$list = [list][foo.bar]::HugeArrayOfStrings # fails, see below\r\n```\r\n![image](https://user-images.githubusercontent.com/32407840/59118899-60a61780-891f-11e9-81ab-2fab1f5580ce.png)\r\n\r\nSo at minimum we'd need to also include a type converter that is capable of recognising that our source is an array, and our target is a list, and then just pull the basetype from the array and plug it into the List as a generic type argument.\r\n\r\nNot sure exactly how well that works with the existing conversion path shenanigans but it appears to be very doable.\r\n\r\nIt _does_ work if you explicitly specify the list's generic type argument, though, of course. We'd also need to special-case `[list]` as a standalone maybe, if we want folks to just be able to get `[list[object]]` or `[list[psobject]]` inferred from  the plain `[list]` though I don't know if that's desirable?\r\n\r\nAlso, is it desirable that this works or just unnecessary?\r\n\r\n```\r\n[list]$a = [list[string]]::new()\r\n```\r\n\r\n(Currently not working.)",
      "created_at": "2019-06-07T16:26:53Z",
      "updated_at": "2019-06-07T16:29:57Z"
    }
  ],
  "created_at": "2019-06-07T15:58:40Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement"
  ],
  "number": 9853,
  "state": "closed",
  "title": "Feature Request: add [list] type accelerator",
  "updated_at": "2019-06-07T18:17:49Z"
}