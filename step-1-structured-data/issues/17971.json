{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17971",
  "author": "w1tht0uchp4d",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nCreate an ordered hash table and populate some of its properties with values previously defined in the hash table. Sometimes the values get populated, sometimes not.\r\n\r\n```\r\n    $Api = [ordered]@{\r\n        apiToken = \"\"\r\n        validUntil = $(Get-Date)\r\n        baseUrl = \"https://someUrl.com\"\r\n        apiEndPoint = \"api/config/v1\"\r\n        vaultEndpoint = \"$($Api.baseUrl)/$($Api.apiEndPoint)/vault/account\"\r\n        tokenEndpoint = \"$($Api.baseUrl)/oauth2/token\"\r\n        clientId = \"\"\r\n        clientSecret = \"\"\r\n    }\r\n```\n\n### Expected behavior\n\n```console\nPS> Write-Host $Api.tokenEndpoint\r\nhttps://someUrl.com/oauth2/token\n```\n\n\n### Actual behavior\n\n```console\nPS> Write-Host $Api.tokenEndpoint\r\noauth2/token\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-08-27T13:22:59Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "IIRC \r\nIf you run the code with no pre-existing hash table , $hashtable.key will be null. \r\nIf you run it to recreate an existing hash table, it will use the pre-existing value, not the value you are putting into the new version.",
      "created_at": "2022-08-26T12:48:34Z",
      "updated_at": "2022-08-26T12:48:34Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, this is expected. Before you close the brace, `$Api` does not exist. So you are indexing into nonexistent variable, which returns null by default and is stringified into empty string. You can check it by setting `Set-StrictMode -Version 3.0` and observing the error. \r\n\r\nCan you please verify your example and actual behavior? `\"$($Api.baseUrl)/oauth2/token\"` should result in `\"/oauth2/token\"` and not `\"oauth2/token\"`",
      "created_at": "2022-08-26T18:12:39Z",
      "updated_at": "2022-08-26T18:12:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To add to the existing comments: It sounds like you're looking for _Intra_-hashtable references, which aren't currently supported.\r\n\r\nSuch a feature - which would call for different syntax than in your attempt - has been requested  before (there's also a workaround there):\r\n\r\n* #13782\r\n\r\n",
      "created_at": "2022-08-27T02:27:20Z",
      "updated_at": "2022-08-27T02:27:20Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "If you really want this behavior, you could play around with something like this (note use of `'` instead of `\"`:\r\n\r\n```pwsh\r\n$dict = [ordered] @{\r\n    'url' = 'example.com'\r\n    'endpoint' = '$($dict.url)/api/config'\r\n}\r\nforeach ($item in $dict.GetEnumerator()) {\r\n    $dict[$item.Name] = Invoke-Expression ('\"' + $dict.Value + '\"') \r\n} \r\n```",
      "created_at": "2022-08-27T06:09:26Z",
      "updated_at": "2022-08-27T06:09:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A simpler and more robust workaround, as also shown in the linked issue, is to use aux. variables:\r\n\r\n```powershell\r\n$dict =\r\n  [ordered] @{\r\n    url = ($url = 'example.com')\r\n    endpoint = \"$url/api/config\"\r\n  }\r\n````",
      "created_at": "2022-08-27T08:59:59Z",
      "updated_at": "2022-08-27T08:59:59Z"
    },
    {
      "author": "w1tht0uchp4d",
      "author_association": "NONE",
      "body": "Thank you very much. I think the answer of @mklement0 is exactly, what I am looking for.",
      "created_at": "2022-08-27T13:22:59Z",
      "updated_at": "2022-08-27T13:22:59Z"
    }
  ],
  "created_at": "2022-08-26T12:38:24Z",
  "labels": [],
  "number": 17971,
  "state": "closed",
  "title": "Unexpected behaviour while populating values in an ordered hash table",
  "updated_at": "2022-08-27T13:23:03Z"
}