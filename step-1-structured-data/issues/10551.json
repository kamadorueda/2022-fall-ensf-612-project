{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10551",
  "author": "tommymaynard",
  "body": "```powershell\r\nPS C:\\> New-Variable -Name x -Value 'Read-only variable' -Option ReadOnly\r\nPS C:\\> New-Item -Path Function:\\xf -Value {'Does nothing'} -Options ReadOnly | Out-Null\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe expected behavior is that both parameters would have been named \"Option\" (singular) in both cmdlets, regardless of the PS Provider, and whether or not a parameter is dynamic. Were this type of discrepancy found in more places in Microsoft delivered code, even as small as this is, it may have had a largely negative impact on PowerShell overall. I do understand that, \"_The data stores that the provider exposes can be as varied as Active Directory location and Microsoft Exchange Server mailboxes_.\" Even so, this seems like a small, non-breaking change. That said, this change would require edits to [About Providers](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_providers?view=powershell-6), and [Function provider](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_function_provider?view=powershell-6).\r\n\r\n# Actual behavior\r\n\r\n\"Option\" and \"Options\" are both used for the same parameter on different cmdlets (different PS Providers). Each parameter includes the _identical_ arguments, or parameter values:  AllScope, Constant, None, Private, ReadOnly, Unspecified.\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18362 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Change from long name to short (Options -> Option) is breaking change.",
      "created_at": "2019-09-17T06:14:45Z",
      "updated_at": "2019-09-17T06:14:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I can't think of why it needs to be. We can leave an alias on the affected parameter so that it will still work with legacy code.",
      "created_at": "2019-09-17T10:14:43Z",
      "updated_at": "2019-09-17T10:14:43Z"
    },
    {
      "author": "tommymaynard",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with you, @iSazonov, in that it _would_ be a breaking change -- I didn't think it all the way through. That said, after your comment, but prior to @vexx32's, I also thought that adding a parameter _alias_ Options, to an Option parameter would keep things working for currently written automation that uses the Options parameter.",
      "created_at": "2019-09-17T14:42:18Z",
      "updated_at": "2019-09-17T14:42:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Alias doesn't cover all scenarios. :-(",
      "created_at": "2019-09-17T17:17:45Z",
      "updated_at": "2019-09-17T17:29:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What scenarios wouldn't bind correctly with use of an alias?",
      "created_at": "2019-09-17T17:20:28Z",
      "updated_at": "2019-09-17T17:20:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Not binding, I updated my comment. See #3307\r\n",
      "created_at": "2019-09-17T17:29:12Z",
      "updated_at": "2019-09-17T17:29:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I don't think that scenario applies here. \r\n\r\n1. Objects aren't being input to the parameter;\r\n2. The casting behaviour of the input object(s) is the same (the parameter values are strings / enum);\r\n3. This is not a pipeline parameter.\r\n\r\nAm I missing something?",
      "created_at": "2019-09-17T17:47:19Z",
      "updated_at": "2019-09-17T17:47:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Any of this may change in the future. \r\n",
      "created_at": "2019-09-18T02:58:30Z",
      "updated_at": "2019-09-18T02:58:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Changing any of that would be a _bigger_ breaking change. Nobody's calling for this cmdlet's design to change. Just a parameter name... and we'd leave an alias to the old name for backwards compatibility. This was done with the `Out-File` cmdlet (`-Path` on that cmdlet is `-FilePath` on Windows PowerShell) and there have been no issues with that since that I'm aware of.\r\n\r\nAm I missing something? I'm not seeing any real point of contention here, I'm not understanding why you think changing this is a net negative.",
      "created_at": "2019-09-18T03:07:27Z",
      "updated_at": "2019-09-18T03:09:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 For discussion we need to collect all arguments pro and cons. :-)\r\n\r\nAlso in general for providers (that is plugins) we can not control provider parameter names.",
      "created_at": "2019-09-18T03:38:11Z",
      "updated_at": "2019-09-18T03:38:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Fair enough!\r\n\r\nProvider or no, I think it ought to be fixed either way, really. It just changes where in the code the fix needs to be, no? \ud83d\ude42 ",
      "created_at": "2019-09-18T03:41:12Z",
      "updated_at": "2019-09-18T03:41:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the code the fix needs to be, no?\r\n\r\nI'm not sure yet. I did not find a description in the documentation. This is also a problem. And I did not find this code. Therefore, it is not yet clear what intentions were under the design. _Provider code always very sensitive_.\r\n",
      "created_at": "2019-09-18T03:47:42Z",
      "updated_at": "2019-09-18T03:47:42Z"
    }
  ],
  "created_at": "2019-09-16T19:10:38Z",
  "labels": [
    "Issue-Question",
    "WG-Engine-Providers"
  ],
  "number": 10551,
  "state": "open",
  "title": "Parameter Naming Inconsistancy: Option vs. Options",
  "updated_at": "2019-09-18T03:47:42Z"
}