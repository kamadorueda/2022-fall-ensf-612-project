{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7698",
  "author": "strawgate",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$JSON = @\"\r\n{\r\n  \"configGlossary:installationAt\": \"Philadelphia, PA\",\r\n  \"configGlossary:adminEmail\": \"ksm@pobox.com\",\r\n  \"configGlossary:poweredBy\": \"Cofax\",\r\n  \"configGlossary:poweredByIcon\": \"\\/images\\/cofax.gif\",\r\n  \"configGlossary:staticPath\": \"\\/content\\/static\",\r\n  \"templateProcessorClass\": \"org.cofax.WysiwygTemplate\",\r\n  \"templateLoaderClass\": \"org.cofax.FilesTemplateLoader\",\r\n  \"templatePath\": \"templates\",\r\n  \"templateOverridePath\": \"\",\r\n  \"defaultListTemplate\": \"listTemplate.htm\",\r\n  \"defaultFileTemplate\": \"articleTemplate.htm\",\r\n  \"useJSP\": false,\r\n  \"jspListTemplate\": \"listTemplate.jsp\",\r\n  \"jspFileTemplate\": \"articleTemplate.jsp\",\r\n  \"cachePackageTagsTrack\": 200,\r\n  \"cachePackageTagsStore\": 200,\r\n  \"cachePackageTagsRefresh\": 60,\r\n  \"cacheTemplatesTrack\": 100,\r\n  \"cacheTemplatesStore\": 50,\r\n  \"cacheTemplatesRefresh\": 15,\r\n  \"cachePagesTrack\": 200,\r\n  \"cachePagesStore\": 100,\r\n  \"cachePagesRefresh\": 10,\r\n  \"cachePagesDirtyRead\": 10,\r\n  \"searchEngineListTemplate\": \"forSearchEnginesList.htm\",\r\n  \"searchEngineFileTemplate\": \"forSearchEngines.htm\",\r\n  \"searchEngineRobotsDb\": \"WEB-INF\\/robots.db\",\r\n  \"useDataStore\": true,\r\n  \"dataStoreClass\": \"org.cofax.SqlDataStore\",\r\n  \"redirectionClass\": \"org.cofax.SqlRedirection\",\r\n  \"dataStoreName\": \"cofax\",\r\n  \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\r\n  \"dataStoreUrl\": \"jdbc:microsoft:sqlserver:\\/\\/LOCALHOST:1433;DatabaseName=goon\",\r\n  \"dataStoreUser\": \"sa\",\r\n  \"dataStorePassword\": \"dataStoreTestQuery\",\r\n  \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\r\n  \"dataStoreLogFile\": \"\\/usr\\/local\\/tomcat\\/logs\\/datastore.log\",\r\n  \"dataStoreInitConns\": 10,\r\n  \"dataStoreMaxConns\": 100,\r\n  \"dataStoreConnUsageLimit\": 100,\r\n  \"dataStoreLogLevel\": \"debug\",\r\n  \"maxUrlLength\": 500\r\n}\r\n\"@\r\n\r\n$Count = 39999\r\n$jsonarr = \"[\" + (($json + \",\") * $Count) + $json + \"]\"\r\n[system.gc]::Collect()\r\nwrite-host \"\"\r\nwrite-host \"\"\r\nwrite-host \"JSON -- Objects: $($Count + 1)\"\r\nwrite-host \"JSON -- Length:  $($jsonarr.length / 1024 / 1024 ) Megabytes\"\r\n\r\n$BeforeMemory = $((get-process -pid $PID).WorkingSet)\r\n[void] (convertfrom-json $jsonarr)\r\n$AfterMemory = $((get-process -pid $PID).WorkingSet)\r\n\r\n$MemoryDiff = $AfterMemory - $BeforeMemory\r\n\r\nwrite-host \"Memory Usage -- Before:     $($BeforeMemory  / 1024 / 1024) Megabytes\"\r\nwrite-host \"Memory Usage -- After:      $($AfterMemory  / 1024 / 1024) Megabytes\"\r\nwrite-host \"Memory Usage -- Difference: $($MemoryDiff  / 1024 / 1024) Megabytes\"\r\nwrite-host \"Memory Usage -- Multiple:   $($MemoryDiff / $jsonarr.length)\"\r\n\r\n```\r\noutput:\r\n```\r\nJSON -- Objects: 40000\r\nJSON -- Length:  67.4819955825806 Megabytes\r\nMemory Usage -- Before:     210.8359375 Megabytes\r\nMemory Usage -- After:      1240.90625 Megabytes\r\nMemory Usage -- Difference: 1030.0703125 Megabytes\r\nMemory Usage -- Multiple:   15.2643724241892\r\n```\r\nActual behavior\r\n-----------------\r\nPowershell Core ends up with 1 GB of memory used and peaks to 1.6 GB of memory utilization during convertfrom-json\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPowershell Core shouldn't need 1.6 gigabytes of memory to deserialize a 65MB JSON file.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "We could consider interning property names.",
      "created_at": "2018-09-03T22:37:44Z",
      "updated_at": "2018-09-03T22:37:44Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Or, probably better, some name dictionary, were we resue the property names. That should help a lot with json memory consumption.",
      "created_at": "2018-09-03T22:39:14Z",
      "updated_at": "2018-09-03T22:39:14Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This is actually a duplicate of #6199 as both commands use the same underlying code path.",
      "created_at": "2018-10-02T11:47:45Z",
      "updated_at": "2018-10-02T11:47:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue is still present.\r\n\r\n/cc @david-tap",
      "created_at": "2019-11-19T03:40:17Z",
      "updated_at": "2019-11-19T03:40:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After the code review I think we need to  migrate to System.Text.Json to get performance benefits.\r\n",
      "created_at": "2019-11-19T12:48:43Z",
      "updated_at": "2019-11-19T12:48:43Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "Note that convertfrom-json has no streaming mode like jq.  So it will load the whole file into memory, no matter how big it is.",
      "created_at": "2019-12-21T15:18:35Z",
      "updated_at": "2019-12-21T15:18:35Z"
    },
    {
      "author": "hanneshayashi",
      "author_association": "NONE",
      "body": "> Note that convertfrom-json has no streaming mode like jq. So it will load the whole file into memory, no matter how big it is.\r\n\r\nWould be great if it had a streaming mode, like jq, though...",
      "created_at": "2020-12-08T10:00:25Z",
      "updated_at": "2020-12-08T10:00:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We would need support from System.Text.Json .Net API. Could you open new issue in .Net Runtime repository for this streaming scenario?\r\n",
      "created_at": "2020-12-08T10:11:23Z",
      "updated_at": "2020-12-08T10:11:23Z"
    },
    {
      "author": "jasoth",
      "author_association": "NONE",
      "body": "It sounds like the streaming functionality might exist now in the System.Text.Json APIs.\r\nhttps://devblogs.microsoft.com/dotnet/whats-next-for-system-text-json/\r\n\r\nIt would be great to have pipeline friendly JSON commands for large datasets including an Export-Json/Import-Json for reading and writing directly to and from disk.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/10/dotnet-bot.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\" height=\"14\"> .NET Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/dotnet/whats-next-for-system-text-json/\">What's next for System.Text.Json? | .NET Blog</a></strong></div><div>Learn about the new performance, reliaility and easy adoption that has been made with System.Text.Json, and what\u2019s going to come next.</div></blockquote>",
      "created_at": "2021-03-31T19:09:19Z",
      "updated_at": "2021-03-31T19:09:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jasoth You can open new issue with your proposal. Please describe scenarios you want to address. Voting from community is important.",
      "created_at": "2021-03-31T19:31:20Z",
      "updated_at": "2021-03-31T19:31:20Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I ended up writing a module called ConvertFrom-JsonFast that implements system.text.json here: https://github.com/strawgate/ConvertFrom-JsonFast or on the gallery here https://www.powershellgallery.com/packages/ConvertFrom-JsonFast/1.0.0\r\n\r\nIt's not totally compatible and so it is important to read the github repo to understand what you're losing out on.\r\n\r\n1000 MB JSON File\r\n```\r\nConvertFrom-JsonFast:           5950 MB used over 16400 Milliseconds\r\nConvertFrom-Json:              13575 MB used over 111309 Milliseconds\r\n```\r\n\r\n100 MB JSON File\r\n```\r\nConvertFrom-JsonFast:           544 MB used over 1400 Milliseconds\r\nConvertFrom-Json:              1330 MB used over 9429 Milliseconds\r\n```\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/06f3a7d32f39f845c825305ba2b927af365d1a084384058d29e924c8a5b232c0/strawgate/ConvertFrom-JsonFast\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/strawgate/ConvertFrom-JsonFast\">strawgate/ConvertFrom-JsonFast</a></strong></div><div>A faster and more memory efficient implementation of ConvertFrom-Json and Invoke-RestMethod - strawgate/ConvertFrom-JsonFast</div></blockquote>\r\n<blockquote><img src=\"https://powershellgallery.com/Content/Images/Branding/PackageDefaultIcon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://powershellgallery.com/packages/ConvertFrom-JsonFast/\">ConvertFrom-JsonFast 1.0.0</a></strong></div><div>A significantly faster and more memory efficient implementation of ConvertFrom-Json and Invoke-RestMethod</div></blockquote>",
      "created_at": "2021-06-27T05:18:35Z",
      "updated_at": "2021-06-27T15:25:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@strawgate that's some pretty impressive results!  Do you know if your version would pass all the existing tests that we have for `ConvertFrom-Json`",
      "created_at": "2021-06-27T05:20:51Z",
      "updated_at": "2021-06-27T05:20:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Do you know if your version would pass all the existing tests that we have for ConvertFrom-Json\r\n\r\nThis is absolutely impossible since system.text.json implementation has a long list of incompatibilities (by design).\r\n\r\nMy suggestion was and is to implement new cmdlets based on system.text.json and leave the old ones so that users can switch to them if necessary.",
      "created_at": "2021-06-27T14:40:43Z",
      "updated_at": "2021-06-27T14:40:43Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I doubt it'll pass all the tests but knowing which tests it fails would be useful! I'll take a look at how that might work!\r\n\r\nThe goal was to be a drop-in replacement for simple use cases but more complex ones will likely have different behavior. One that folks can use without having to wait for the official system.text.json implementation.\r\n\r\nAnother part of the improvement is that I dont bother with PSCustomObjects -- the cmdlet only produces hashtables.\r\n\r\nIt's still much more performant than the built-in with -ashashtable\r\n```\r\nConvertFrom-JsonFast:           5950 MB used over 16400 Milliseconds\r\nConvertFrom-Json -AsHashtable: 11106 MB used over 69863 Milliseconds\r\nConvertFrom-Json:              13575 MB used over 111309 Milliseconds\r\n```",
      "created_at": "2021-06-27T15:13:57Z",
      "updated_at": "2021-06-27T15:24:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See #11198 for information.",
      "created_at": "2021-06-27T15:18:10Z",
      "updated_at": "2021-06-27T15:18:10Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I know this is the wrong place to talk about the module but i'll just drop one more note:\r\n\r\nI ran the Json tests against ConvertFrom-JsonFast and found a couple of issues that I resolved (I implemented noenumerate, depth, and pipeline support). At this time i have 216/224 tests passing with the only tests failing being tests that check for the exact exception type being thrown. The good news is the performance characteristics are the same with these additional items as it was without them.\r\n\r\nI will look into adding pscustomobject support as well. I also need to run the tests for Invoke-RestMethod as well.\r\n\r\nWhile the ConvertFrom-Json test coverage isn't great, it's nice to see that it could be fairly compatible!",
      "created_at": "2021-06-27T17:54:42Z",
      "updated_at": "2021-06-27T22:20:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@strawgate I guess we have very poor test coverage. It would be great if you added new ones. Also we have some issues for Json cmdlets, please look while you're at the beginning of the journey.",
      "created_at": "2021-06-28T03:15:19Z",
      "updated_at": "2021-06-28T03:15:19Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I have a PR here that improves performance but unfortunately does not impact memory utilization: https://github.com/PowerShell/PowerShell/pull/15684",
      "created_at": "2021-06-29T18:03:40Z",
      "updated_at": "2021-06-29T18:03:49Z"
    }
  ],
  "created_at": "2018-09-03T17:39:17Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Performance",
    "WG-Cmdlets-Utility"
  ],
  "number": 7698,
  "state": "open",
  "title": "ConvertFrom-JSON high memory consumption",
  "updated_at": "2021-06-29T18:03:49Z"
}