{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2006",
  "author": "ffeldhaus",
  "body": "Added switch parameter SkipCertificateCheck to WebRequestPSCmdlet to enable Invoke-WebRequest and Invoke-RestMethod to not validate the HTTPS certificate of the server if required.\n\nImplemented as discussed in issue #1945 \n",
  "closed_at": "2016-11-03T21:29:17Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@ffeldhaus**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    </span>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-08-22T06:31:38Z",
      "updated_at": "2016-08-22T06:31:38Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I would suggest a parameter name of either `NoCertificateCheck`  or `SkipCertificateCheck` as those parameter prefixes are more common than `Ignore...`.  When naming a parameter, I often look at the output of this command:\n\n``` powershell\n(gcm -type Cmdlet).ParameterSets.Parameters | Group Name | Sort Name \n```\n\nOtherwise, :+1:\n",
      "created_at": "2016-08-22T06:44:18Z",
      "updated_at": "2016-08-22T06:50:18Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "I would suggest to use -SkipCertificateCheck to be consistent with similar parameters: -SkipCACheck, -SkipCNCheck, and -SkipRevocationCheck.\n",
      "created_at": "2016-08-22T12:05:07Z",
      "updated_at": "2016-08-22T12:05:07Z"
    },
    {
      "author": "halr9000",
      "author_association": "CONTRIBUTOR",
      "body": "+1 to @alexandair. Great PR, @ffeldhaus!\n",
      "created_at": "2016-08-22T12:40:06Z",
      "updated_at": "2016-08-22T12:40:06Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "I renamed the parameter to `SkipCertificateCheck` as suggested. I'm in clarification with my employee regarding the contribution license agreement and will sign it as soon as possible.\n",
      "created_at": "2016-08-22T13:35:32Z",
      "updated_at": "2016-08-22T13:35:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Can you add a test to powershell\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\\WebCmdlets.Tests.ps1?\n",
      "created_at": "2016-08-22T15:21:59Z",
      "updated_at": "2016-08-22T15:21:59Z"
    },
    {
      "author": "GavinEke",
      "author_association": "NONE",
      "body": "Awesome work @ffeldhaus as for the test would something like the following be sufficient\n\n```\nIt \"Invoke-WebRequest validate skipcertificatecheck option\" {\n\n    Invoke-WebRequest -Uri 'https://expired.badssl.com' -SkipCertificateCheck | Should Not Throw\n}\n```\n\nor\n\n```\nIt \"Invoke-WebRequest validate skipcertificatecheck option\" {\n\n    Invoke-WebRequest -Uri 'https://expired.badssl.com' -SkipCertificateCheck  | Select-Object -ExpandProperty StatusCode | Should Be 200\n}\n```\n\nand the equivalent Invoke-RestMethod under the appropriate describe block.\n",
      "created_at": "2016-08-22T23:56:44Z",
      "updated_at": "2016-08-22T23:56:44Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@JamesWTruher Can you comment on @GavinEke's test recommendation?  Is it ok for the tests to depend on an internet resource?\n",
      "created_at": "2016-08-23T01:00:14Z",
      "updated_at": "2016-08-23T01:00:14Z"
    },
    {
      "author": "alanrenouf",
      "author_association": "NONE",
      "body": "Any news on this getting accepted? Would fix some issues for us.\n",
      "created_at": "2016-08-24T02:11:27Z",
      "updated_at": "2016-08-24T02:11:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We'd like to see tests added and the CLA signed.\nSome other issues:\n- The parameter will exist in PowerShell Core and Windows PowerShell, but the implementation is specific to PowerShell Core. This needs to be addressed first, ideally by adding an implementation for Windows PowerShell.\n- We may want multiple parameters, e.g `New-PSSessionOption` has `-SkipCACheck`, `-SkipCNCheck`, and `-SkipRevocationCheck`.\n",
      "created_at": "2016-08-24T16:10:55Z",
      "updated_at": "2016-08-24T16:10:55Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "**@ffeldhaus**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\n<br />Thanks, MSBOT;\n",
      "created_at": "2016-08-24T18:59:47Z",
      "updated_at": "2016-08-24T18:59:47Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I signed the CLA and added a test. I'm not sure if the tests get executed by running Start-PSPester (or travis or appveyor) as I couldn't find them in the console output. Could you please share more details what is required to implement the parameter for Windows PowerShell?\n",
      "created_at": "2016-08-24T22:03:00Z",
      "updated_at": "2016-08-24T22:03:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "By default, Start-PSPester runs tests tagged `CI`. The web tests are tagged `Feature` because they are slow and we don't want them running in CI - that's why you're not seeing the test in the output. You can run `Start-PSPester -Tag Feature` to make sure you run your tests.\n\nI can't really provide specific guidance on how you can implement this functionality on Windows PowerShell - but you should read [this](https://github.com/PowerShell/PowerShell/blob/master/docs/building/windows-full.md) to get started.\n\n@Francisco-Gamino ported these commands to PowerShell Core, so he might be able to help with specifics on Windows PowerShell.\n",
      "created_at": "2016-08-24T22:14:49Z",
      "updated_at": "2016-08-24T22:14:49Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "Are there any chances this will get merged before the next release? What needs to be done to merge this pull request?\n",
      "created_at": "2016-09-14T18:55:02Z",
      "updated_at": "2016-09-14T18:55:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We haven't closed on whether or not it's acceptable to add this parameter to PowerShell Core but not Windows PowerShell.  It sounds like people want this capability in Windows PowerShell as well, so we'd prefer that, but if not, you'll need to add `#if CORECLR` around the parameter so that Windows PowerShell doesn't have a parameter with no implementation.\n\nI was also hoping to see some discussion around matching the options of `New-PSSessionOption` - those options most likely exist because they map nicely to wsman options - so it might be more of a question on how useful it is to disable all checks versus certain checks.\n",
      "created_at": "2016-09-14T19:40:26Z",
      "updated_at": "2016-09-14T19:40:26Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "I would appreciate it, if this would also be included in Windows PowerShell. Especially for connecting to new REST endpoints it's often necessary to skip the certificate checks. I have several Cmdlets which are able to upload a new certificate via REST, but first I need to be able to accept the self-signed certificate.\n\nIn my opinion it would be better to first include the `SkipCertificateCheck` parameter before implementing other parameters. The `SkipCertificateCheck` parameter is a generic solution whereas `-SkipCACheck`, etc. are only useful for specific scenarios.\n\nIn the end the most important point is, that it's currently not possible to ignore certificates in PowerShell Core as the workaround available in Windows PowerShell (via `[System.Net.ServicePointManager]`) is not working and thus breaking lot's of Cmdlets which need to be run against REST endpoints with e.g. invalid or self signed certificates.\n",
      "created_at": "2016-09-15T19:51:35Z",
      "updated_at": "2016-09-15T19:51:35Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "For what it's worth, I would vote _against_ implementing this pull request. It's too simplistic --and _dangerous_-- to just have a switch that _completely disables_ validation checking.\n\nThe vast majority of the time, the _right_ thing to do is to just disable checking the CA chain (because it's just a self-signed cert), and not disable validation completely. The rest of the time, the right thing to do is to white-list the specific certificate and url combination.\n\nAdditionally, this not only disables the check on the initial request, it also automatically disables checking on any additional requests (i.e. if you're redirected, or download additional resources), so if you're hitting an internal website that uses a self-signed cert but then downloads additional content from CDNs with valid certs, you're needlessly disabling that validation, etc...\n\nAdditionally, you _really_ should solve it the same way on all the web cmdlets, including Export-ODataEndpoint, etc.\n\nI wrote [a wrapper for these things](https://github.com/Jaykul/Tunable-SSL-Validator) a couple of years ago. It's a little complicated. In fact, it probably goes a little too far in the other direction (too many knobs). But there has to be a better solution than all or nothing.\n",
      "created_at": "2016-09-30T05:16:35Z",
      "updated_at": "2016-09-30T05:16:35Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "I partly disagree with https://github.com/PowerShell/PowerShell/pull/2006#issuecomment-250660614 from @Jaykul. The functionality of `Invoke-WebRequest` and `Invoke-RestMethod` is similar to `curl` and on Windows `curl` is even an alias for `Invoke-WebRequest`. With `curl` its possible to ignore certificates with the `-k` or `--insecure` parameter. For compatibility reasons, it should be implemented in the same way in PowerShell.\nWe could additionally implement checks as suggested in https://github.com/PowerShell/PowerShell/pull/2006#issuecomment-242121894 by @lzybkr for each scenario (e.g. skip CA check, skip host check, skip expiration check, ...), but that would introduce many more parameters for something which shouldn't be done for anything outside of dev/test environments.\nAlso I don't see an issue with disabling the check for any additional request done as part of the `Invoke-WebRequest` command. The behaviour should be consistent with other Cmdlets. If I use a parameter to skip the certificate check, it should be done for everything the Cmdlet does and not for parts of it.\nThe only thing I think would be useful is a warning message, that skipping certificates shouldn't be done for security reasons (e.g. for those PowerShell users who try to access an HTTPS page where a certificate check exception is thrown and then just ignore the certificate instead of investigating why it fails).\n",
      "created_at": "2016-09-30T07:12:39Z",
      "updated_at": "2016-09-30T07:12:39Z"
    },
    {
      "author": "halr9000",
      "author_association": "CONTRIBUTOR",
      "body": "> [regarding curl] For compatibility reasons, it should be implemented in\n> the same way in PowerShell.\n\nI don't think this is a good argument when balancing against security\nconcerns. Otherwise--yes, I would agree.\n\nI vote for Joel's points about use the most-right solution. I believe most\npeople want the _user-facing behavior_ of \"skip validation\":  allowing self\nsigned certs to be used. The fact that skipping the CA chain will achieve\nthis end while still performing some security checks means it's a better\nworkaround (that I would use often, myself).\n\nIf we were designing a feature for a layperson, we'd call it\n\"-AcceptTheDamnCert\", and nobody would care how it's implemented. :)\n\nOn Fri, Sep 30, 2016, 3:13 AM Florian Feldhaus notifications@github.com\nwrote:\n\n> I partly disagree with #2006 (comment)\n> https://github.com/PowerShell/PowerShell/pull/2006#issuecomment-250660614\n> from @Jaykul https://github.com/Jaykul. The functionality of\n> Invoke-WebRequest and Invoke-RestMethod is similar to curl and on Windows\n> curl is even an alias for Invoke-WebRequest. With curl its possible to\n> ignore certificates with the -k or --insecure parameter. For\n> compatibility reasons, it should be implemented in the same way in\n> PowerShell.\n> We could additionally implement checks as suggested in #2006 (comment)\n> https://github.com/PowerShell/PowerShell/pull/2006#issuecomment-242121894\n> by @lzybkr https://github.com/lzybkr for each scenario (e.g. skip CA\n> check, skip host check, skip expiration check, ...), but that would\n> introduce many more parameters for something which shouldn't be done for\n> anything outside of dev/test environments.\n> Also I don't see an issue with disabling the check for any additional\n> request done as part of the Invoke-WebRequest command. The behaviour\n> should be consistent with other Cmdlets. If I use a parameter to skip the\n> certificate check, it should be done for everything the Cmdlet does and not\n> for parts of it.\n> The only thing I think would be useful is a warning message, that skipping\n> certificates shouldn't be done for security reasons (e.g. for those\n> PowerShell users who try to access an HTTPS page where a certificate check\n> exception is thrown and then just ignore the certificate instead of\n> investigating why it fails).\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/PowerShell/PowerShell/pull/2006#issuecomment-250675814,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABIMjgWTVUyMhxWBAlzjB-uAze3sUZAks5qvLZ4gaJpZM4JpjJC\n> .\n",
      "created_at": "2016-09-30T15:03:31Z",
      "updated_at": "2016-09-30T15:03:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We decided to take this change as is without requiring the corresponding changes to Windows PowerShell.\n",
      "created_at": "2016-11-03T21:25:41Z",
      "updated_at": "2016-11-03T21:25:41Z"
    },
    {
      "author": "benjamin-goldman",
      "author_association": "NONE",
      "body": "Any reason why this is merged but not available yet?  I really hate having to break into CYGWIN from POWERSHELL to do things...",
      "created_at": "2017-05-09T20:25:52Z",
      "updated_at": "2017-05-09T20:25:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bgoldman69 this has been available for sometime in our alpha releases",
      "created_at": "2017-05-09T20:34:37Z",
      "updated_at": "2017-05-09T20:34:37Z"
    },
    {
      "author": "sbourdeaud",
      "author_association": "NONE",
      "body": "Has this been pulled from beta releases then? I'm using the latest beta (7) and there is no SkipCertificateCheck for Invoke-RestMethod in that version...",
      "created_at": "2017-10-04T13:45:02Z",
      "updated_at": "2017-10-04T13:45:02Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "It's working for me with PowerShell Beta 7 on Mac OS X\r\n\r\n```powershell\r\nFlorians-MBP:~ ffeldhaus$ powershell \r\nPowerShell v6.0.0-beta.7\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nPS /Users/ffeldhaus/development> Invoke-RestMethod -SkipCertificateCheck -Uri https://expired.badssl.com/    \r\n```",
      "created_at": "2017-10-04T13:50:18Z",
      "updated_at": "2017-10-04T13:50:18Z"
    },
    {
      "author": "GavinEke",
      "author_association": "NONE",
      "body": "Works for me using Beta 7 on Windows 10 (1703)",
      "created_at": "2017-10-04T13:53:52Z",
      "updated_at": "2017-10-04T13:53:52Z"
    },
    {
      "author": "sbourdeaud",
      "author_association": "NONE",
      "body": "I stand corrected. It's just missing from the get-help output and thus I assumed it wasn't there.",
      "created_at": "2017-10-04T14:17:48Z",
      "updated_at": "2017-10-04T14:17:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sbourdeaud You can see latest docs in https://github.com/PowerShell/PowerShell-Docs repo. Feel free open Issue there if the parameter isn't documented.",
      "created_at": "2017-10-04T14:24:02Z",
      "updated_at": "2017-10-04T14:24:02Z"
    },
    {
      "author": "sbourdeaud",
      "author_association": "NONE",
      "body": "Done",
      "created_at": "2017-10-04T14:33:44Z",
      "updated_at": "2017-10-04T14:33:44Z"
    }
  ],
  "created_at": "2016-08-22T06:31:35Z",
  "number": 2006,
  "state": "closed",
  "title": "Enable WebRequestPSCmdlet to not validate HTTPS certificates",
  "updated_at": "2017-10-04T14:33:44Z"
}