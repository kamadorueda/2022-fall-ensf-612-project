{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11167",
  "author": "renatfx",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nPS > $true | Add-Member -MemberType ScriptMethod -Name ToString -Value {'False'} -Force\r\nPS > $true\r\nFalse\r\nPS > 1 | Add-Member -MemberType ScriptMethod -Name ToString -Value {'0'} -Force\r\nPS > 1\r\n0\r\nPS >  New-Variable -Name test -Value (1MB) -Option Constant\r\nPS > $test | Add-Member -MemberType ScriptMethod -Name ToString -Value {$true} -Force\r\nPS > $test\r\nFalse\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nAny constant modifications must be forbidden for all cmdlets, functions, .NET types\r\nand operators. The Add-Member cmdlet should not be an exception of this rule.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nIt is possible to extend/modify ETS of constants, including standard constants like 0, 1,\r\n$true, $false. Probably this won't lead to any serious consequences (while experimenting\r\nI was only able to overwrite constant's formatting methods), but the behavior is not obvious\r\n(especially knowing that *-*Item cmdlets are disallowed to modify constants in any way).\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-31T19:50:13Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In a PR we discussed this and agreed that we don't want block ETS for value types.\r\n@JamesWTruher @daxian-dbw @SteveL-MSFT  I think we can close this as \"by design\".",
      "created_at": "2020-01-31T11:39:56Z",
      "updated_at": "2020-01-31T11:39:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think this is by design.\r\nHere, `constant` means the variable is constant, so the variable cannot be re-assigned or removed.\r\nBut the value pointed by the variable is not constant and you can do anything you want to the object/value pointed by the variable.",
      "created_at": "2020-01-31T17:32:26Z",
      "updated_at": "2020-01-31T17:32:26Z"
    },
    {
      "author": "renatfx",
      "author_association": "NONE",
      "body": "But strings behave differently!\r\n\r\nIf you need to add a member to a `[string]` you should specify the `-PassThru` switch in a call  to the `Add-Member` cmdlet and it will produce another object, looking similar to the original `string`, but different. Due to nature of strings, being immutable by design, for consumers they are also constants. \r\n\r\nI could understand the design, if _any constant_ could be extended with extra members only by producing another object, meaning `-PassThru` switch is required. But with what we have today, the _design_ istelf is unobvious (non-intuitive).",
      "created_at": "2020-01-31T17:50:09Z",
      "updated_at": "2020-01-31T17:50:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@renatfx PowerShell caches boxed values like $true, $false, 0 .. 100 to reduce allocations. This can cause a side effects.",
      "created_at": "2020-01-31T18:08:00Z",
      "updated_at": "2020-01-31T18:08:00Z"
    },
    {
      "author": "renatfx",
      "author_association": "NONE",
      "body": "@iSazonov I know this, but I'm just dreaming about strict design - if you are using numbers or other primitive types specifying value directly (e.g. literal in cmdlet args), then its vaue is read from cache (or even probably as real type bypassing `[psobject]`). But if you extend the type, another object is created (with `-PassThru` = value is copied from the cache and then extened) and you can use it as you wish w/o affecting \"global constants\" - it would correspond to how strings are working today (as far as I understand that).",
      "created_at": "2020-01-31T18:15:28Z",
      "updated_at": "2020-01-31T18:15:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see why we _couldn't_ handle primitives the same way we handle string values purely for Add-Member purposes -- I'm pretty sure we could.\r\n\r\nI think the question is just... should we? I'm in favor of it personally, if only for consistency's sake... but I'm not sure how others feel on the issue. \r\n",
      "created_at": "2020-01-31T18:29:44Z",
      "updated_at": "2020-01-31T18:29:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I'm just dreaming about strict design\r\n\r\nCurrently there is a trend towards C# and make PowerShell more strict but PowerShell has very long history, many things was designed for better UX in specific scenarios that can be changed with time. Perhaps we will see business scenarios where we have to address this inconsistency. ",
      "created_at": "2020-01-31T18:30:14Z",
      "updated_at": "2020-01-31T18:30:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renatfx You question is more about \"_should `Add-Member` update the passed-in objects for immutable values_\", not about the const variables.\r\nI recommend you to open an new issue for that topic and close this one, as it's confusing for people who are new to this issue to find out what is actually being discussed.\r\nBTW, the behavior of `Add-Member` on string is indeed inconsistent, though I'm not sure whether it's worth to change it.",
      "created_at": "2020-01-31T18:53:09Z",
      "updated_at": "2020-01-31T18:53:09Z"
    },
    {
      "author": "renatfx",
      "author_association": "NONE",
      "body": "@daxian-dbw ok\r\nI actualy filed 2 more related issues:\r\n#11171 #11169 ",
      "created_at": "2020-01-31T19:49:30Z",
      "updated_at": "2020-02-01T06:57:03Z"
    }
  ],
  "created_at": "2019-11-22T21:15:46Z",
  "labels": [
    "Resolution-By Design"
  ],
  "number": 11167,
  "state": "closed",
  "title": "Add-Member affects constants",
  "updated_at": "2020-02-01T06:57:03Z"
}