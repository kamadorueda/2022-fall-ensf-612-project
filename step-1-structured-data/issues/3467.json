{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3467",
  "author": "iSazonov",
  "body": "Based on conclusion in discussion #3248\r\n\r\n- [x] - OEM\r\n\r\nWe need internal fix because .Net Core haven't \"OEM\" term.\r\nThe fix should provide PowerShell Core behavior:\r\n   - on Windows - as Windows PowerShell based on GetOEMCP() and legacy encodings (System.Text.Encoding.CodePages)\r\n   - on Unix - the same as default encoding in PowerShell Core\r\n\r\n- [x] - Default\r\n\r\nWe need internal fix because [CoreFX default](https://github.com/dotnet/coreclr/blob/ab0fbce6b629d081c1102d353abab0d8febd4487/src/mscorlib/src/System/Text/Encoding.cs#L1244) for [all platforms is UTF8](https://github.com/dotnet/coreclr/blob/ab0fbce6b629d081c1102d353abab0d8febd4487/src/mscorlib/src/System/Text/Encoding.cs#L1235)\r\nUntil we have completed Encoding RFC we should restore behaivor as in Windows PowerShell.\r\nThe fix should provide PowerShell Core behavior:\r\n   - on Windows - as Windows PowerShell based on GetACP() and legacy encodings (System.Text.Encoding.CodePages)\r\n   - on Unix - UTF-8 without BOM (We are expecting that the same will be [in CoreFX](https://github.com/dotnet/coreclr/issues/10643))\r\n\r\n- [ ] - Tests\r\n\r\nNow we don't have a full set of encoding tests (only for redirections). I believe we need to create them during future RFC implementation, not now.",
  "closed_at": "2017-04-06T01:22:18Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I was able to build locally with \r\n`<PackageReference Include=\"System.Text.Encodings.Web\" Version=\"4.0.11\" />`\r\nin Microsoft.PowerShell.SDK.csproj \r\nbut on CI build failed \ud83d\ude15 I revert to Version=\"4.3.0\" but build failed again.\r\n@daxian-dbw Could you please help?\r\n",
      "created_at": "2017-03-31T15:31:36Z",
      "updated_at": "2017-03-31T15:31:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Add @mirichmo to review the new windows API set added to `PInvokeDllNames.cs`, to see if that's fine for downlevel machines like win7.\r\n\r\n@iSazonov I don't see you change the .csproj file. Did you miss that?",
      "created_at": "2017-03-31T18:29:11Z",
      "updated_at": "2017-03-31T18:29:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> `<PackageReference Include=\"System.Text.Encodings.Web\" Version=\"4.0.11\" />`\r\n\r\nWhy are you using `System.Text.Encoding.Web`? The `CodePagesEncodingProvider` type is available in [System.Text.Encoding.CodePages](https://www.nuget.org/packages/System.Text.Encoding.CodePages/)",
      "created_at": "2017-03-31T18:38:48Z",
      "updated_at": "2017-03-31T18:38:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  \r\nI change CodePages version on 4.0.11 but `CodePagesEncodingProvider` cannot be finded. \ud83d\ude15 ",
      "created_at": "2017-03-31T19:59:30Z",
      "updated_at": "2017-03-31T19:59:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher @mklement0, you have been closely following up with this issue (and related), could you please take a look at the fix?",
      "created_at": "2017-03-31T19:59:56Z",
      "updated_at": "2017-03-31T19:59:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw, @JamesWTruher : I know this debate is cumbersome, but I think it's a very important one to have, and I don't think we're ready to move ahead yet - I've just added further thoughts [here](https://github.com/dotnet/standard/issues/260#issuecomment-290834776).",
      "created_at": "2017-03-31T21:32:29Z",
      "updated_at": "2017-03-31T21:32:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @SteveL-MSFT CI have passed - many thanks! Sorry for many typos (make the PR in the weekend night was bad my idea). Please continue code review.\r\n\r\n@mklement0 Can you build the branch and check our expectations? If no, could you please attach files with your tests?",
      "created_at": "2017-04-01T10:19:37Z",
      "updated_at": "2017-04-01T10:19:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: I built on my macOS 10.12 machine and I can confirm that the following ad-hoc tests return true on macOS (and, judging by the source, therefore all Unix platforms), as desired:\r\n\r\n```PowerShell\r\n# Setup: *create* a  BOM-less UTF-8 file.\r\n'\u00f6' | set-content -nonewline /tmp/$pid.txt\r\n\r\n# Tests: Both should output $True\r\n\r\n# Compare the raw bytes of the new file to the UTF-8 encoding of '\u00f6' (0xc3 0xb6)\r\n# With the current alpha17, this would return $False, because Set-Content creates an\r\n# ISO-8859-1 file.\r\n$null -eq (Compare-Object (Get-Content -Encoding Byte -Raw /tmp/$pid.txt) (0xc3, 0xb6))\r\n\r\n# See if the BOM-less UTF-8 file is *read* correctly.\r\n'\u00f6' -eq (Get-Content -Raw /tmp/$pid.txt)\r\n```\r\n\r\n(I wasn't able to run the tests - the `powershell` binary crashed  at the following point:\r\n```\r\nDescribing New-PSSession basic test\r\n [-] New-PSSession should not crash powershell 228ms\r\n   Expected string length 66 but was 77. Strings differ at index 0.\r\n   Expected: {InvalidOperation,Microsoft.PowerShell.Commands.NewPSSessionCommand}\r\n   But was:  {System.DllNotFoundException,Microsoft.PowerShell.Commands.NewPSSessionCommand}\r\n...\r\n```\r\n)\r\n",
      "created_at": "2017-04-01T19:21:36Z",
      "updated_at": "2017-04-01T19:21:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks for confirmation! It means the code is step in right direction!\r\n\r\nAll tests have passed on CI. I believe \"New-PSSession basic test\" too and you can ignore the error in context of the PR (or try discover a root of the error: copy-past test code in your session and see $error[0] - I think you don't install any package).\r\n",
      "created_at": "2017-04-01T19:55:11Z",
      "updated_at": "2017-04-01T19:55:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I added comment about tests in first post.",
      "created_at": "2017-04-02T08:13:17Z",
      "updated_at": "2017-04-02T08:13:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nGreat idea, but I suggest, to avoid ambiguity, that you explicitly mention in your comment that this PR implements _BOM-less_ UTF-8, especially given that your comment links to the .NET Core `Encoding.Default` property, which is currently UTF-8 _with BOM_ (which, as stated, is not the actual default encoding (though, fortunately, it looks like  [getting `Encoding.Default` in line with that actual default is coming](https://github.com/dotnet/coreclr/issues/10643))).\r\n\r\nTo add some more fodder for upcoming tests, here's a simple one that tests whether _PowerShell itself_ correctly reads _BOM-less_ UTF-8 _source code_ (such as scripts) by default in PS Core on Unix:\r\n\r\n```PowerShell\r\n# Setup:\r\n# Create a no-BOM UTF-8 file with the following literal content:\r\n#   '\u00f6' \r\n# which, when executed as a PS script, should echo '\u00f6' back, IF the script\r\n# was correctly decoded from UTF-8 by PS.\r\n# UTF-8 bytes: 0x27 (single quote), 0xc3 0xb6 (encoding of '\u00f6', U+00F6), 0x27 (single quote)\r\n[byte[]] (0x27, 0xc3, 0xb6, 0x27) | Set-Content -Encoding Byte /tmp/$PID.ps1\r\n\r\n# Test: See if the '\u00f6' is echoed back correctly.\r\n#       Should return $True\r\n'\u00f6' -eq (& /tmp/$PID.ps1)\r\n```\r\n\r\n\r\n",
      "created_at": "2017-04-02T12:24:42Z",
      "updated_at": "2017-04-02T12:24:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I corrected first post about BOM-less, in the code it is obvious.",
      "created_at": "2017-04-02T12:42:30Z",
      "updated_at": "2017-04-02T12:42:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov are you going to add tests to this PR?",
      "created_at": "2017-04-04T16:38:35Z",
      "updated_at": "2017-04-04T16:38:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I added in first post:\r\n> Now we don't have a full set of encoding tests (only for redirections). I believe we need to create them during future RFC implementation, not now.\r\n\r\nI am confused. Partial test is meaningless. The full test also does not make sense until the approval of the Encoding RFC. What is compromise?",
      "created_at": "2017-04-04T17:58:15Z",
      "updated_at": "2017-04-04T17:58:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov the code changes look good to me. If the corresponding tests will come later, then we should keep that work item tracked in an issue. Is #3248 considered fixed with this PR? If not, the test work item should be tracked in the first post of that issue, similar to how you are tracking `OEM`, `Default` and `tests` in this PR.\r\nAnd @mklement0 provides some good testing snippets here, we should also keep them in the same issue that tracks the test work item, so they can be easily referenced when it's time to complete the tests.",
      "created_at": "2017-04-04T19:44:23Z",
      "updated_at": "2017-04-04T19:44:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Tracking Issue #3488.",
      "created_at": "2017-04-05T14:04:00Z",
      "updated_at": "2017-04-05T14:04:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Thank you! I will merge this PR later today.",
      "created_at": "2017-04-05T16:03:56Z",
      "updated_at": "2017-04-05T16:03:56Z"
    }
  ],
  "created_at": "2017-03-31T15:05:09Z",
  "number": 3467,
  "state": "closed",
  "title": "Fix Default/OEM encoding behavior PowerShell Core",
  "updated_at": "2018-10-15T21:56:03Z"
}