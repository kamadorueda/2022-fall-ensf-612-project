{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3046",
  "author": "joeyaiello",
  "body": "This is a **preliminary**, **WIP** roadmap/plan for what we on the @PowerShell/powershell-committee believe needs to be in a PowerShell 6.0 release. We will be iterating on this *significantly* based on your feedback, as well as potentially shifting internal priorities. The goal is for all line items here to eventually be represented by issues attached to either the `6.0.0` or `6.0.0-beta` milestones, so that you anyone can look in and see how far along we are towards a 6.0 release. \r\n\r\nI also plan on publishing a blog to break down our plans in more detail sometime soon. In the meantime, please join us on the [PowerShell Core Community Call tomorrow @ 9am PST](https://blogs.msdn.microsoft.com/powershell/2017/01/11/powershell-core-community-call-2-jan-26-2016/) where we'll be talking about this in more detail. \r\n\r\nIf you believe we're missing something here that's *absolutely critical* for the 6.0 release, please let us know below in the comments or on our monthly Community Call. Thanks!\r\n\r\n`[cut]` means something we've decided is not required to ship 6.0.0 final and we'll address in a future release (not that it's cut forever)\r\n\r\n- [ ] Everything in the [6.0.0-HighPriority milestone](https://github.com/powershell/powershell/issues?q=is%3Aopen+is%3Aissue+milestone%3A6.0.0-HighPriority)\r\n- [ ] [Test coverage](https://coveralls.io/github/PowerShell/PowerShell?branch=master)\r\n    + [x] Identified [test gaps](https://github.com/powershell/powershell/issues?q=is%3Aopen+is%3Aissue+milestone%3A6.0.0-HighPriority+label%3AArea-Test) fixed\r\n    + [x] Un-hit code coverage analyzed and understood\r\n    + start [here](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/TestRoadmap.md)\r\n    + [ ] Cross-platform, cross-machine remoting tests #2436\r\n    + [x] https://httpbin.org/ is unreliable for web requests testing #2504\r\n- [x] sudo support\r\n    + [x] `sudo <native command>` should work from within PowerShell\r\n    + [cut] `sudo <PowerShell cmdlet>` should work from within PowerShell #3232 \r\n    + [cut] Misc `sudo` bugfixes \r\n        * [cut] sudo command does not work in remote session to Linux machine #1527\r\n- [x] Native globbing support #954 \r\n- [x] Jobs \r\n    + [x] `Start-Job` #452\r\n    + [x] Other `*-Job` cmdlets #3110 \r\n    + [cut] Job control (bg, fg with `&`) #716\r\n        * [cut] Ctrl+Z support #3229 \r\n        * [x] bg jobs #1972\r\n- [x] Native/binary pipeline support #559 #2450\r\n- [x] Figure out aliases #929\r\n- [ ] Other cross-platform usability issues\r\n    + [ ] Filesystem-specific case sensitivity #3218 \r\n    + [x] Cross-platform encoding usability #707 \r\n    + [X] Fix `screen` issues #2364\r\n- [ ] \"Cloud-ready\"\r\n    + [x] awesome `ConvertFrom/To-Json`\r\n        * [x] ConvertFrom-Json does not respect -ErrorAction #2860\r\n        * [x] Use prettier formatting for ConvertTo-Json #2736\r\n        * [x] Convertto-Json and url encoding #2632\r\n        * [x] ConvertFrom-Json and ConvertTo-Json eat the one object array #2448\r\n        * [cut] ConvertFrom-Json fails to parse project.lock.json #1755\r\n        * [x] ConvertFrom-Json keys collision: behavior difference between Core and Full #1567 \r\n    + [X] awesome `Invoke-RestMethod`/`Invoke-WebRequest` \r\n        * [x] Fix IE dependency for `Invoke-WebRequest` #3042 \r\n        * [x] Invoke-WebRequest: Vague error thrown, resulting from TLS issue #2942\r\n        * [cut] Invoke-WebRequest / Invoke-RestMethod fails to follow HTTP redirects #2896\r\n        * [x] invoke-webrequest and invoke-restmethod -headers parameter is more restrictive ... #2895\r\n        * [cut] Invoke-Webrequest is missing some properties, like .ParsedHtml and .AllElements #2867?\r\n        * [x] Invoke-WebRequest throw TypeInitializationException On Linux #2801\r\n        * [x] InFile parameter of Invoke-WebRequest doesn't work #2754\r\n        * [x] Invoke-RestMethod does not count on `Content-Type` field. Broken compared to PS 5.0. #2245\r\n        * [x] Invoke-RestMethod does not strip Authorization Headers #2227\r\n        * [x] Invoke-RestMethod should return the full error response from the remote endpoint #2193\r\n        * [x] WebRequestPSCmdlets do not contain Response object in Exception on Mac OS X #2113\r\n        * [x] Invoke-Webrequest accepts bad TLS certificates / crypto on MacOS #1942\r\n        * [x] Missing command alias: iwr #1778\r\n        * [x] Invoke-WebRequest does not support -TransferEncoding deflate #1753\r\n        * [x] Add tests case for invoke-restmethod/webrequest, and move the rest of the tests ... #1532\r\n- [ ] Remoting\r\n    + [ ] PSRP over OpenSSH\r\n        * [x] [RFC on user experience](https://github.com/PowerShell/PowerShell-RFC/blob/master/4-Experimental-Accepted/RFC0010-SSH-Remoting-Cmdlets.md) closed\r\n        * [x] Implemented in PowerShell Core 6.0\r\n        * [ ] SSH remoting slower than WSMan remoting #2852\r\n        * [x] PSRP over SSH from Linux to Windows fails after password #2473\r\n        * [ ] `Enter-PSHostProcess` while in a PSRP/SSH session #2453 \r\n        * [ ] Fix Ctrl+Break hang #2323\r\n        * [x] Fix Ctrl+C #2321\r\n    + [ ] WinRM client (`New/Enter-PSSession`, `Invoke-Command -Session`) on macOS/Linux\r\n        * [x] Basic auth works on macOS (TODO: done?)\r\n        * [x] Basic auth works on Linux\r\n        * [ ] NTLM auth works on macOS\r\n        * [x] NTLM auth works on Linux\r\n        * [x] TODO: generate more demos/tasks here\r\n    + [x] Misc. `*-PSSession*` \r\n        - [x] Implicit remoting between PS Core and Windows PS #2592\r\n        - [x] Fix `Register-PSSessionConfiguration` error #2555\r\n- [ ] Existing cmdlet coverage ported \r\n    + [ ] TODO: list? Start from [this](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/PowerShellCoreTestStatus.md)\r\n- [x] Telemetry\r\n    + [x] Close on [this RFC on implementing basic census telemetry](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0016-Census-Telemetry.md)\r\n    + [x] Implement telemetry\r\n- [x] Progress bar\r\n    + [x] Progress bar can significantly impact cmdlet performance #2138\r\n    + [x] Write-Progress bar does not go away after operation is finished #1625 \r\n\r\n## Documentation\r\n- [x] Stand up 6.0 reference docset on [PowerShell-Docs](https://github.com/powershell/powershell-docs/tree/staging/reference)\r\n- [x] Figure out story/location for conceptual x-plat content\r\n- [x] Create a changelog workflow\r\n- [x] SDK docs via docfx TODO\r\n\r\n## Packaging, Installation, and Deployment\r\n- [ ] `Install-Package PowerShell`\r\n    + [ ] Windows\r\n    + [ ] Nano\r\n    + [ ] Linux?\r\n    + [ ] macOS?\r\n- [ ] `Update-Package PowerShell`?\r\n- [x] Universal Windows packages for each bitness #2608 \r\n- [x] Onboard to Microsoft Linux package repositories #3056 \r\n    + [x] RPM\r\n    + [x] DEB\r\n- [ ] Get into major package repositories\r\n    + [ ] Ubuntu\r\n    + [ ] Red Hat\r\n    + [ ] TODO: who else? SLES? \r\n- [ ] Fully automate package building for all platforms\r\n\r\n## Script/Module Development Experience\r\n- [x] VS Code features\r\n- [x] .NET Standard 2.0 story\r\n    + [x] I can write binary modules that target Windows PowerShell and PowerShell Core\r\n    + [x] Timeline public for .NET Standard 2.0 \r\n    + [x] Move to .NET Core vNext that supports .NET Standard 2.0\r\n    + [x] Validate that .NET Standard 2.0 supplants the need for a Windows Powershell 6.0 (i.e. based on the FullCLR .NET Framework)\r\n        * [x] Does .NET Framework 4.6.1 work on Windows 7? \r\n    + [x] Move to csproj build? #3140\r\n- [ ] Semantic versioning #2983 \r\n    + [x] PSVersionTable/PSEdition story\r\n    + [ ] Transformation parameter attribute to convert semantic version to parameter \r\n    + [ ] TODO: spec needed\r\n    + [ ] Invoke-Command -Session $s -Command {$PSVerionTable} Fails Due to SemanticVersion #1819\r\n- [ ] Artifact Sharing\r\n    + [ ] Gallery supports filtration by platform\r\n    + [ ] PowerShellGet supports filtration by platform\r\n    + [ ] Gallery supports filtration by Windows PowerShell vs. PowerShell Core\r\n    + [ ] PowerShellGet supports filtration by Windows PowerShell vs. PowerShell Core\r\n- [ ] ScriptAnalyzer rules\r\n    + [ ] Enumerate rules for supported features/cmdlets on Linux\r\n    + [ ] Enumerate rules for supported features/cmdlets on .NET Core\r\n        * [ ] Analysis based on `using assembly`, `Add-Type`, etc. \r\n\r\n## Scenarios\r\n\r\n- [x] I can use PowerShell on major Linux distros, macOS and Windows\r\n- [x] I can know how many people are using PowerShell (incl. version and platform) and how the Community is growing\u200b\r\n- [ ] I can use PowerShell on any platform to manage Azure\r\n- [x] I can develop cmdlets for both Windows PowerShell and PowerShell Core using .NET Standard 2.0\r\n- [ ] I can remote between all OS platforms using any supported remoting protocol (PSRP over SSH or WSMan)\r\n- [x] I can install/upgrade PowerShell using native package management utilities on any Mac/Linux platform\r\n- [x] I can use semantic versioning for modules with PowerShellGet and the Gallery\u200b\r\n- [x] I can develop a CLI experience using PowerShell on any platform to manage cloud instances\r\n- [x] Finish top UserVoice delighters (SemVer, Build verb, Get-Service improvements, loose manifest validation)\u200b\r\n",
  "closed_at": "2018-03-29T22:11:05Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> I can write binary modules that target Windows PowerShell and PowerShell Core\r\n\r\nThis works already -- targeting .NET Standard 1.6.  The hard part is loading OS-specific assemblies -- do we need `/lib/{OS}/*.dll` automatic loading of `RequiredAssemblies`?",
      "created_at": "2017-01-26T15:12:06Z",
      "updated_at": "2017-01-26T15:12:16Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "WinRM client with Kerberos and client certificate authentication, from Linux and Mac OS X is something I'd consider essential. We're looking for the ability to deploy remote PowerShell code to Windows systems from non-Windows systems, via Docker containers. \r\n\r\nWould NTLM cover this scenario in a secure manner? I'm not clear on the pros / cons of NTLM vs. Kerberos, but either way, I think client certificate authentication would be a separate topic. \r\n\r\nLMK\r\n\r\nCheers,\r\nTrevor Sullivan",
      "created_at": "2017-01-26T18:38:42Z",
      "updated_at": "2017-01-26T18:38:42Z"
    },
    {
      "author": "fabiendibot",
      "author_association": "NONE",
      "body": "I totally agree what @pcgeek86 is saying, targetting WinRM from Linux is a totally unfriendly scenario and NTLM isn't possible with many customers.\r\nThere is a community YAML module but could it be possible to integrate YAML cmdlets the same ways as ConvertTo/ConvertFrom-*  exists already for CSV/XML/JSON ?",
      "created_at": "2017-01-26T19:37:30Z",
      "updated_at": "2017-01-26T19:37:30Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@pcgeek86 @fabiendibot good to hear. I then pose the question: are you okay AD-joining your Linux (or Mac) boxes? Or do you expect to be manually handling the certs? \r\n\r\nBetter yet, what's the blocker for you using PSRP over SSH from Mac/Linux to Windows? Do you have some sort of cert solution that's simpler than public/private key pairs? ",
      "created_at": "2017-01-26T21:54:33Z",
      "updated_at": "2017-01-26T21:54:33Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "We've got a separate certificate publishing system in place already, so that's taken care of.\r\n\r\nI'll have to see how PowerShell Remoting over SSH works before I can comment further on that scenario. As of this point, I'm not aware of any functional implementation of it. The solution would need to work on down-level Windows operating systems though.",
      "created_at": "2017-01-27T01:12:54Z",
      "updated_at": "2017-01-27T01:12:54Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "I'd also add some emphasis around building binary modules surrounding .NET Standard. I'm glad to see this was added in there. Perhaps we should add something around loading .NET assemblies into PowerShell, and calling into them? I know a lot has changed in .NET Core, with respect to AppDomains, reflection, and so on ... I think this area could use some attention.",
      "created_at": "2017-01-27T16:12:04Z",
      "updated_at": "2017-01-27T16:12:04Z"
    },
    {
      "author": "whatevergeek",
      "author_association": "NONE",
      "body": "i agree to both @Jaykul  and @pcgeek86 \r\na powershell gac or library folder sort of would be good... \r\nthis will help us manage assemblies that our corresponding modules are using/installing...\r\ni think node/python also have this concept... \r\n\r\n",
      "created_at": "2017-01-27T16:24:28Z",
      "updated_at": "2017-01-27T16:24:28Z"
    },
    {
      "author": "fabiendibot",
      "author_association": "NONE",
      "body": "@joeyaiello We configure kerberos with our Linux boxes for some scenarios (SQL Server connections mostly). For me Win32-SSH is not production ready so i haven't looked at it for now.\r\n",
      "created_at": "2017-01-27T19:33:02Z",
      "updated_at": "2017-01-28T09:52:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Does .NET Framework 4.6.1 work on Windows 7?\r\n\r\n **Yes**\r\nhttps://www.microsoft.com/en-us/download/details.aspx?id=49981&e6b34bbe-475b-1abd-2c51-b5034bcdd6d2=True\r\n>Supported Operating Systems: \r\n\u2022Windows 7 SP1 (x86 and x64)\r\n\u2022Windows 8 (x86 and x64)\r\n\u2022Windows 8.1 (x86 and x64)\r\n\u2022Windows 10\r\n\u2022Windows Server 2008 R2 SP1 (x64)\r\n\u2022Windows Server 2012 (x64)\r\n\u2022Windows Server 2012 R2 (x64)\r\n",
      "created_at": "2017-01-29T18:02:42Z",
      "updated_at": "2017-01-29T18:03:02Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "What's about the Class Features ? \r\nInterface implementation is still missing.\r\n\r\nThis was the roadmap at the end of 2014 :\r\n![alt text](https://pbs.twimg.com/media/B7bGqQ8IIAEaORQ.png)\r\n\r\nPowerShell need to be SOLID at 6.0 (https://en.wikipedia.org/wiki/SOLID_(object-oriented_design) ) \r\n\r\nLanguage area need more attention, particularly these issues :\r\nhttps://github.com/PowerShell/PowerShell/issues/2223\r\nhttps://github.com/PowerShell/PowerShell/issues/2642\r\nhttps://github.com/PowerShell/PowerShell/issues/2225\r\nhttps://github.com/PowerShell/PowerShell/issues/2217\r\n\r\nThank you !\r\n\r\n\r\n\r\n",
      "created_at": "2017-02-01T02:39:55Z",
      "updated_at": "2017-02-01T03:49:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps it would be useful to draw up this roadmap by using the GitHub [Project(s)](https://github.com/PowerShell/PowerShell/projects).",
      "created_at": "2017-02-01T11:00:47Z",
      "updated_at": "2017-02-01T11:00:47Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Having interfaces would be cool!",
      "created_at": "2017-02-01T11:44:29Z",
      "updated_at": "2017-02-01T11:44:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov we considered using GitHub Projects, but decided (for now) it would be easier to track progress as checkboxes in an issue\r\n\r\nAt this time, our thinking is to invest in the developer experience (class improvements as well as things like bindings to other languages, authoring cmdlets in other languages, etc...) post 6.0 rather than continuing to add features into 6.0.",
      "created_at": "2017-02-01T17:05:06Z",
      "updated_at": "2017-02-01T17:05:06Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Well, right now the developer experience is not so good! ISE is a joke without ISESteroids, and VS CODE is buggy as hell. This is leaving us with PowerShell Studio as the only option, but intellisense there is close to none. \r\nSo, maybe the right thing to do would be to invest in developing a good IDE, with PS 5-6 features support. ",
      "created_at": "2017-02-01T17:33:50Z",
      "updated_at": "2017-02-01T17:33:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@g8tguy our plan is to invest in VS Code specifically via [PowerShellEditorServices](https://github.com/PowerShell/PowerShellEditorServices) as it's open source and cross-platform.  If there are any specific issues or capabilities that prevent you from using VS Code, please open issues in that repo.",
      "created_at": "2017-02-01T17:36:52Z",
      "updated_at": "2017-02-01T17:36:52Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "@g8tguy if VS Code is \"buggy as hell\", file issues so I can fix them :)\r\n\r\nhttps://github.com/PowerShell/vscode-powershell\r\n",
      "created_at": "2017-02-01T18:18:55Z",
      "updated_at": "2017-02-01T18:18:55Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "The Last time I tried `VS Code`,  was like half a year ago.\r\nAnd the `language server` was constantly crashing when you\r\nopen 5-10 tabs with custom `PS 5` classes and enums referencing one another, so `IntelliSense` stopped working, and the `IDE` was behaving kind of weird.  I wanted to port, `PowerShellEditorServices` To `IDEA`, but it seemed too much work for one person, so I stuck with `PS Studio`. But as I'm viewing the `PowerShellEditorServices` [changelog](https://github.com/PowerShell/vscode-powershell/blob/master/CHANGELOG.md#090) now, it certainly seems that lot's of the bugs were resolved, and `VS Cod`e become more mature and stable, so I'll give it another shot. And Thank you guys for the product, you are doing a great job, advocating PowerShell! \ud83d\udc4d :1st_place_medal: ",
      "created_at": "2017-02-01T18:53:50Z",
      "updated_at": "2017-02-01T18:53:50Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "@g8tguy yep, a lot has changed since then.  If you still run into issues developing scripts with classes in VS Code I'd be happy to try and fix them.  Making Editor Services work in IDEA should certainly be achievable, if you ever try again I'd be happy to give you some pointers.",
      "created_at": "2017-02-01T18:55:32Z",
      "updated_at": "2017-02-01T18:55:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm - latest PS Code's versions is good! It happened in the last couple of months. Many thanks to PS Code developers!",
      "created_at": "2017-02-02T03:46:54Z",
      "updated_at": "2017-02-02T03:46:54Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "How about support for long paths / file names? As .NET Core now supports them, I know there's been hope of this coming to PowerShell eventually - https://github.com/dotnet/corefx/issues/645. I'm sure that there will be much rejoicing in the enterprise world if/when this happens.",
      "created_at": "2017-02-02T17:15:08Z",
      "updated_at": "2017-02-02T17:15:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@itpaul PowerShell Core already supports long paths by default :)",
      "created_at": "2017-02-02T17:18:08Z",
      "updated_at": "2017-02-02T17:18:08Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Sweet! Thanks for sharing. Any idea on when this could make it's way into non-Core PS?",
      "created_at": "2017-02-02T17:20:30Z",
      "updated_at": "2017-02-02T17:20:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@itpaul PowerShell v5.1 on Win10 already supports it, but not be default (since the OS doesn't support it by default, if Win10 ever changes that setting, it'll just work automagically).  You can enable it following this: https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/",
      "created_at": "2017-02-02T17:28:32Z",
      "updated_at": "2017-02-02T17:28:32Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Fantastic! Thanks again for your help. I'll start looking into it. After your first reply I discovered that you can run PowerShell Core portably, which is also fantastic! It appears that I'll be able to avoid implementing Alpha FS into our environment now.",
      "created_at": "2017-02-02T17:32:36Z",
      "updated_at": "2017-02-02T17:35:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@itpaul one of the decisions we wanted to go with CoreCLR besides the cross platform support is that it inherently supports side-by-side, so you can \"install\" (which is really an xcopy) of PSCore6.0 and it'll run happily next to Windows PowerShell v5.x without impacting existing scripts/apps that depend on v5.x",
      "created_at": "2017-02-02T17:36:41Z",
      "updated_at": "2017-02-02T17:36:41Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Pigs truly can fly in the Nadella Microsoft world. Christmas has definitely come early this year.",
      "created_at": "2017-02-02T17:43:21Z",
      "updated_at": "2017-02-02T17:43:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. Seems we have issues with the conhost referred in some issues. This is not only a progress bar.\r\n2. For progress bar performance #2822 is opened.\r\n3. It would be good to have code analysis for performance (security, quality, formatting).\r\n4. We could get a great feedback from Windows 10 Preview if integrated in this program. (In WSL too)\r\n5. The plan does not mention WSL (Windows Subsystem for Linux). This could be a great platform for testing and promotion of Powershell Core. Now we have issues with WSL.",
      "created_at": "2017-02-03T05:02:50Z",
      "updated_at": "2017-02-03T05:02:50Z"
    },
    {
      "author": "ChristophB125",
      "author_association": "NONE",
      "body": "Great work! Are you planning to support Docker as well (we are planning to ship PowerShell Core modules)? Could you also upload the notes or recording of the 2nd RFC please as you did for the first one?",
      "created_at": "2017-02-07T12:45:56Z",
      "updated_at": "2017-02-07T12:45:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@HemantMahawar is the recording ready to be uploaded from the last Community Call?",
      "created_at": "2017-02-07T17:05:09Z",
      "updated_at": "2017-02-07T17:05:09Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Could you link me to some of those conhost issues? The two I have above, #2138 and #1625 look like progress problems to me. (In my mind, even if they're caused by the underlying console hosts, we have so little control over the underlying hosts across platforms that progress functionality is what needs to be refactored or even limited). Also, added #2822. \ud83d\udc4d \r\n\r\nI agree with you on code analysis. Maybe @JamesWTruher or @SteveL-MSFT could spin up an Issue for me to add here? \r\n\r\nI hear you on WSL support, but I think we're prioritizing Linux distros and macOS right now because of the lack of compelling scenarios for using PowerShell from WSL. Furthermore, I think they *eventually* (this is only from public knowledge with *zero* internal knowledge of timelines or how the functionality might work) plan on interoperating with Windows processes, in which case you wouldn't need to run \"PowerShell on Linux\" from within WSL but just \"PowerShell Core 6.0 on Windows\". \r\n\r\nIf you disagree with my statement on \"compelling scenarios\", please let me know. I love to be proven wrong on these sorts of things :) \r\n\r\n@ChristophB125: could you elaborate more on what you mean by \"support Docker\"? We currently have Docker listed as a platform, and we publish a [ton of images to the Docker Hub](https://hub.docker.com/r/microsoft/powershell/) (including [nightlies](https://hub.docker.com/r/microsoft/powershell-nightly), though it looks like we forgot to publish alpha.15, I'm following up). \r\n\r\nIf you mean, do we have a PowerShell module for managing Docker, the Hyper-V team [has already done exactly that](https://github.com/microsoft/docker-powershell). It already supports Windows PowerShell 5.x as well as PowerShell Core 6.0 on Windows, Nano, macOS, and Linux. \r\n\r\nOut of curiosity, who is \"we\"? Would love to talk more about how you're using PowerShell 6.0 :) \r\n\r\n",
      "created_at": "2017-02-07T19:14:39Z",
      "updated_at": "2017-02-07T19:14:39Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Also, I got some bad news. It looks like checkboxes do NOT automatically get checked when issues get closed (at least not at the L3 level). I closed #2245 and it didn't get checked by itself (and that's one where the entire line is just the issue number....) \ud83d\udc4e ",
      "created_at": "2017-02-07T19:52:43Z",
      "updated_at": "2017-02-07T19:52:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello submit feature request to GitHub \ud83d\ude38 ",
      "created_at": "2017-02-07T19:54:32Z",
      "updated_at": "2017-02-07T19:54:32Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@ChristophB125 Recording of the 2nd community call is now available on [PowerShell & DSC Team Channel](https://youtu.be/j7g5UbVFYqQ) /cc: @SteveL-MSFT & @joeyaiello ",
      "created_at": "2017-02-07T22:33:48Z",
      "updated_at": "2017-02-07T22:33:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello \r\n>Could you link me to some of those conhost issues?\r\n\r\nOh, it is hard to do but it seems I've gathered [main together](https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-263790659) (I believe there are other useful comments that we have missed.)\r\n\r\n\r\n> If you disagree with my statement on \"compelling scenarios\", please let me know. I love to be proven wrong on these sorts of things :)\r\n\r\nI agree but there are still \"compelling scenarios\".\r\nMicrosoft announce WSL as \"kill\" [developer feature](https://blogs.windows.com/buildingapps/2016/07/22/fun-with-the-windows-subsystem-for-linux/#42OMwW0pm5sTxUSu.97):\r\n> The WSL was designed and built by the Windows Kernel Team and delivered in partnership with Canonical, to help Windows 10 developers use the rich Linux developer ecosystem and tools alongside the great tools they are already using in Windows, without having to boot into another operating system or VM. This is definitely a \u201cby developers, for developers\u201d Windows 10 feature, specifically designed to remove a bit of friction from developers\u2019 daily workflow.\r\n\r\nAs a Windows user I tried to use the Powershell Core under WSL and failed \ud83d\ude15 \r\nI want:\r\n1. Develop and test powershell scripts\r\n2. Develop and test binary powershell modules\r\n3. Build Powershell Core from sources\r\n4. Develop and debug features of Powershell Core\r\n\r\nI believe that this is fully in line with the Microsoft WSL announcement.\r\nIt would be great to ask Kernel team to help us to get it working.",
      "created_at": "2017-02-08T09:23:12Z",
      "updated_at": "2017-02-08T09:23:12Z"
    },
    {
      "author": "ChristophB125",
      "author_association": "NONE",
      "body": "@joeyaiello Thank you for the answer. Yes, the PowerShell docker images is what I was looking for. This would be great because then PowerShell can get shipped as part of the deployment (we have the fear that our clients are anxious about Microsoft's IP being on their Linux machines therefore docker can help us hide that at least at install time). By the way,, 'we' is just loosely referring to the team in my company that I work for, which I cannot disclose here. Although we are a Microsoft Gold partner the information from the dev team directly is very valuable to us. As GitHub does not allow private messaging any more, I sent you a LinkedIn request instead if you want to find out a bit more about how we use PowerShell.\r\n\r\n@HemantMahawar Thanks for the effort. I am looking forward to join the next call!",
      "created_at": "2017-02-08T20:04:46Z",
      "updated_at": "2017-02-08T20:04:46Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - the WSL issue affecting you the most is probably https://github.com/dotnet/corefx/issues/12452 - so it doesn't require a fix in Windows - anyone could jump in to fix it (though it sounds like it might not be a simple fix or it'd be fixed already.)",
      "created_at": "2017-02-08T21:03:41Z",
      "updated_at": "2017-02-08T21:03:41Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "And after reading an update to the issue, maybe a fix is coming from WSL.  We'll see.",
      "created_at": "2017-02-08T21:04:40Z",
      "updated_at": "2017-02-08T21:04:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks! Build 15025 still has the bug. Waiting next build.",
      "created_at": "2017-02-09T04:50:47Z",
      "updated_at": "2017-02-09T04:50:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello #2882 move to dotnet-resgen (support compile \"file.En-Us.resx\") and csproj.",
      "created_at": "2017-02-12T16:27:49Z",
      "updated_at": "2017-02-12T16:27:49Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: You're saying those are two separate items, right? The former is a requirement for localization (something we need to discuss with @PowerShell/powershell-committee, I'm not sure how we get that done today), and the latter is a requirement for moving to .NET Core 2.0 (a requirement for supporting .NET Standard 2.0). ",
      "created_at": "2017-02-13T17:30:55Z",
      "updated_at": "2017-02-13T17:30:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello we have a custom solution for res-gen today, but we should move to the dotnet supported way.  csproj is moving to msbuild, although we've talked about it, I don't see an issue for it.",
      "created_at": "2017-02-13T17:40:01Z",
      "updated_at": "2017-02-13T17:40:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello Steve said more clearly than I. We already have the issue for dotnet resgen and we should open a issue for csproj. And we should include the issues in the Plan under \"dotnet 2.0\"",
      "created_at": "2017-02-13T18:32:30Z",
      "updated_at": "2017-02-13T18:32:30Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Added the csproj/MSBuild goodness, we still should talk about resgen and whether it's required for 6.0.",
      "created_at": "2017-02-13T21:54:14Z",
      "updated_at": "2017-02-13T21:54:14Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "This might be more Hyper-V than PowerShell (or equal parts Hyper-V and PowerShell), but I thought I'd mention it to make sure: I think it's very important to have PowerShell Direct work for Linux VMs as well as Windows VMs.",
      "created_at": "2017-02-16T00:48:16Z",
      "updated_at": "2017-02-16T00:48:16Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Thank you for focusing on developer experience as a priority over adding new features. I strongly agree with your direction. Start by creating a solid foundation, and add features post-6.0. /cc @joeyaiello ",
      "created_at": "2017-03-02T21:32:55Z",
      "updated_at": "2017-03-02T21:32:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "AppImage #2024  in `Packaging, Installation, and Deployment`",
      "created_at": "2017-03-09T15:58:24Z",
      "updated_at": "2017-03-09T16:00:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello #2138 and #1625 fixed - I put marks in Plan.",
      "created_at": "2017-03-19T06:13:47Z",
      "updated_at": "2017-03-19T10:42:49Z"
    },
    {
      "author": "mnaiman",
      "author_association": "NONE",
      "body": "I think NTLM auth over SSH should be included in release same as for WinRM",
      "created_at": "2017-03-23T23:56:57Z",
      "updated_at": "2017-03-23T23:56:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello #3140 fixed - I put the mark in Plan.",
      "created_at": "2017-03-24T03:35:49Z",
      "updated_at": "2017-03-24T03:35:49Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@mnaiman I'm...actually not sure if that request makes sense from a crypto perspective. I challenge you to try what it is you're trying to do and report back if it doesn't work. We support password-auth for domain and non-domain accounts in SSH-based remoting (both with and without PSRP).  I'm not sure that it goes through any kind of NTLM layer (as I'm not sure SSH support NTLM), but I don't think it should matter from a functional perspective. \r\n\r\nEDIT: Maybe @manojampalam can comment here. ",
      "created_at": "2017-03-24T23:09:05Z",
      "updated_at": "2017-03-24T23:09:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mnaiman @joeyaiello currently, we don't support SSO as SSH itself by default prefers keyboard-interactive auth which works just fine with NTLM and Kerberos against Win32-OpenSSH.  So this is different from WinRM remoting, but is consistent with SSH.",
      "created_at": "2017-03-24T23:25:44Z",
      "updated_at": "2017-03-24T23:25:44Z"
    },
    {
      "author": "mnaiman",
      "author_association": "NONE",
      "body": "@joeyaiello @SteveL-MSFT SSH SSO provider is \"gssapi-with-mic\" (NTLM & Kerberos). \r\n\r\nIt allows single sign on on windows without typing password or saving private key somewhere.\r\nSome part of gssapi is already here https://github.com/SimonWilkinson/gss-openssh/\r\nHere implementation for client https://github.com/Lax/net-ssh-kerberos\r\nFree/Commercial servers which supports gssapi PowershellServer & Bitwise SSH.\r\n\r\nHere is already request in https://github.com/PowerShell/Win32-OpenSSH/issues/96",
      "created_at": "2017-03-25T19:01:26Z",
      "updated_at": "2017-03-25T19:01:26Z"
    },
    {
      "author": "pradeepprakhar",
      "author_association": "NONE",
      "body": "I am running powershell on MAC machine.\r\n \r\n```\r\n$psversiontable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.13\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nBut send-mailmessage command is not working for me. I am getting below messages.\r\n\r\n```\r\nsend-mailmessage\r\nsend-mailmessage : The term 'send-mailmessage' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path\r\nwas included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ send-mailmessage\r\n+ ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (send-mailmessage:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```",
      "created_at": "2017-04-25T10:02:14Z",
      "updated_at": "2017-04-25T10:11:05Z"
    },
    {
      "author": "jsburckhardt",
      "author_association": "NONE",
      "body": "I'm having an issue with PS 5.0 when running invoke-webrequest... basically if the response comes with quotes in the utf-8 value it will fail. Will this be fixed in the GA version (https://stackoverflow.com/questions/36275618/why-is-invoke-webrequest-and-invoke-restmethod-failing-and-succeeding-at-the-sam) ",
      "created_at": "2017-06-29T10:47:29Z",
      "updated_at": "2017-06-29T10:47:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@pradeepprakhar Now 'send-mailmessage' is ported.\r\n\r\n@jsburckhardt Please open new Issue with full description your problem or question.\r\n",
      "created_at": "2017-06-29T11:54:03Z",
      "updated_at": "2017-06-29T11:54:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello #929 and #2227 was fixed.",
      "created_at": "2017-09-06T10:26:47Z",
      "updated_at": "2017-09-06T10:26:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Did some updates to the list above on what is closed/completed and what was cut out of 6.0.0 and will likely land in 6.1.0 instead",
      "created_at": "2017-09-06T16:06:39Z",
      "updated_at": "2017-09-06T16:06:39Z"
    },
    {
      "author": "erichiller",
      "author_association": "NONE",
      "body": "Are there plans to add comment support (or at least ignore them) in the list for `ConvertFrom-Json`?",
      "created_at": "2017-11-11T22:01:56Z",
      "updated_at": "2017-11-11T22:01:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@erichiller please open a new issue, we can consider for 6.1.0",
      "created_at": "2017-11-11T23:08:37Z",
      "updated_at": "2017-11-11T23:08:37Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "Just include Kerberos support please (and WinRM perhaps too) then we look at this again.",
      "created_at": "2018-03-15T15:40:38Z",
      "updated_at": "2018-03-15T15:40:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@VGerris if by WinRM you mean WSMan, that support is already included.  There is experimental Kerberos support for WSMan on non-Windows, although it's overly complex currently to get it working.",
      "created_at": "2018-03-16T01:16:35Z",
      "updated_at": "2018-03-16T01:16:35Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "No I mean Kerberos and WinRM just like I wrote. Please focus on getting that supported, so one doesn't have to rely on third party scripts. What we basically want is a way to efficiently monitor a Windows machine via an agentless solution and to be able to run remote commands in a secure manner. It's clear from the thread this is a main feature on the rank of interests, right? Thank you.",
      "created_at": "2018-03-19T13:38:54Z",
      "updated_at": "2018-03-19T13:38:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@VGerris I don't understand what you mean by `WinRM` then since that is supported on Windows (and works already with PSCore6) and `WinRM` is a Windows-only feature (Windows Remote Management).  WSMan is the protocol that WinRM implements.",
      "created_at": "2018-03-19T21:42:58Z",
      "updated_at": "2018-03-19T21:43:19Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "The following architecture diagram from [here](https://artofpwn.com/images/offensive-and-defensive-powershell-i/powershell-remoting.png) might help to understand WinRm-WSMan:\r\n![image](https://user-images.githubusercontent.com/9250262/37647090-52ed304c-2c23-11e8-9e35-426085c953b6.png)\r\n",
      "created_at": "2018-03-20T09:45:52Z",
      "updated_at": "2018-03-20T09:45:52Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I understand a *little* better why this diagram is drawn the way it is when I looked at [the blog for it](https://artofpwn.com/offensive-and-defensive-powershell-i.html), but it's a little misleading. Basic way to think about it is that WSMan is the protocol/standard (short for WS-Management) and WinRM is the implementation of that protocol as a service in Windows. \r\n\r\n@VGerris as @SteveL-MSFT said, what you're talking about *can* technically work, but it's extremely difficult to configure and it requires that your Linux machine is AD domain-joined (which is also difficult to pull off). For those reasons, we don't currently formally support that scenario. \r\n\r\nHowever, WSMan based remoting is not agentless. You still have to run the WinRM service on your Windows machine: that's an agent. In the next release of Windows 10 and Windows Server, OpenSSH itself will be available as a supported feature-on-demand, so you'll have first-party, inbox support for SSH-based remoting as a peer to WSMan-based remoting. ",
      "created_at": "2018-03-29T22:10:02Z",
      "updated_at": "2018-03-29T22:10:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'm also closing this issue due to it having outlived it's usefulness. We should continue tracking this work in the issues that have been created. If you're passionate about something here that doesn't have an issue, please open one so we can track it there. \r\n\r\nI also plan on fixing up Projects at some point, I know that's in somewhat of a busted state right now. Sorry about that, folks....",
      "created_at": "2018-03-29T22:11:05Z",
      "updated_at": "2018-03-29T22:11:05Z"
    }
  ],
  "created_at": "2017-01-25T20:45:14Z",
  "labels": [
    "Issue-Meta"
  ],
  "number": 3046,
  "state": "closed",
  "title": "PowerShell 6.0 Plan",
  "updated_at": "2018-03-29T22:11:06Z"
}