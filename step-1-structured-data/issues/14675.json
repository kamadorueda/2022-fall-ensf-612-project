{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14675",
  "author": "mklement0",
  "body": "`Wait-Job` waits synchronously and, by default, indefinitely until the given job(s) terminate.\r\n\r\nThe `-Timeout` parameter can be used to stop waiting after a given number of seconds.\r\nIf the job(s) haven't terminated by then, the command quietly returns and outputs nothing; if they have, their job-information objects are output.\r\n\r\nHowever, even though `-Timeout 0` is accepted, it doesn't work as expected: Even if the given job(s) have already terminated, the job-information object(s) are _not_ output.\r\n\r\nIf `Wait-Job -Timeout 0` worked as intended, it could be used in loops for momentary periodic _polling_ of job states, leaving the loop free to perform other tasks between polling attempts (while `Wait-Job -Timeout 1` does work, it introduces an unnecessary 1-second blocking period; the manual alternative is quite cumbersome: \r\n`$job.State -in 'Completed', 'Failed', 'Stopped', 'Disconnected', 'Suspended'`).\r\n\r\nNote that, by contrast, `Wait-Process -Timeout 0` _does_ work as intended. \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# Start a background job.\r\n$jb = Get-Date &\r\n# Synchronously wait for it to finish.\r\nWait-Job $jb\r\n\r\n# !! This fails unexpectedly, even though the job by definition has terminated and should be returned.\r\n# !! If you used -Timeout 1 instead, the test would succeed.\r\nWait-Job $jb -Timeout 0 | Should -Be $jb\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because `-Timeout 0` always results in _no_ output, even when the job has terminated already.\r\n\r\n```none\r\nExpected System.Management.Automation.PSRemotingJob, but got $null.\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The [code](https://github.com/PowerShell/PowerShell/blob/20401c95836ba94bb0302e1be66371a93fb44a19/src/System.Management.Automation/engine/remoting/commands/WaitJob.cs#L262) does specifically handle a timeout of 0 by explicitly doing nothing.  [Wait-Process -Timeout 0](https://github.com/PowerShell/PowerShell/blob/9aede0558a4c26a4f0769a51d8f0bb3e5fcfa744/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L1023) uses a different way to manage the timeout where `WaitOne(0)` has well defined behavior which explains the difference in behavior.  ",
      "created_at": "2021-03-04T01:37:29Z",
      "updated_at": "2021-03-04T01:37:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "remoting working group: The current behavior is unexpected.  If the parameter value is basically invalid, we should emit an error or warning, if that is the design. \r\n\r\nThe idea of returning the object if it's ready seem better?",
      "created_at": "2021-03-17T21:39:49Z",
      "updated_at": "2021-03-17T21:39:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me restate what the initial post proposes:\r\n\r\nMaking `-Timeout 0` perform  _momentary polling_ is useful behavior that enables _periodic polling in a loop_ (that does other things), and would mirror the existing, useful behavior of `Wait-Process -Timeout 0`.",
      "created_at": "2021-03-17T22:58:32Z",
      "updated_at": "2021-03-17T22:58:32Z"
    }
  ],
  "created_at": "2021-01-28T03:14:29Z",
  "number": 14675,
  "state": "open",
  "title": "Wait-Job fails quietly with -Timeout 0 instead of exhibiting polling behavior",
  "updated_at": "2021-03-17T22:58:32Z"
}