{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14943",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nDotnet runtime sets keyboard mode to application on Unix systems and does not currently reset on exit.  This change emits the DECRTS 1 sequence on pwsh exit on Unix systems (if VT is supported and interactive) to put keyboard mode back to default so that arrow keys do not emit escape sequences.\r\n\r\nIn the case of an interactive shell, we turn on DECCKM before showing prompt and turn if off before execution.  This follows what zsh does.\r\n\r\nValidated manually with `gh auth login` works with these changes and fails without.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/12268\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-04-01T20:01:32Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not full fix for #12268 \r\nWe need to address external applications run. See https://github.com/PowerShell/PowerShell/issues/12268#issuecomment-761724502",
      "created_at": "2021-03-04T14:59:51Z",
      "updated_at": "2021-03-04T14:59:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'll update to set and reset in the native command processor",
      "created_at": "2021-03-04T15:28:50Z",
      "updated_at": "2021-03-04T15:28:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Start-Process?",
      "created_at": "2021-03-04T15:36:45Z",
      "updated_at": "2021-03-04T15:36:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it seems that if we follow zsh, then the set/reset should be in console host repl loop and not in native command processor nor start-process.",
      "created_at": "2021-03-04T23:11:08Z",
      "updated_at": "2021-03-04T23:11:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. Why do we only Unix fix if the issue was reported as Windows bug?\r\n2. I still think we could safely skip `s_theConsoleHost.IsInteractive` check.",
      "created_at": "2021-03-05T05:29:04Z",
      "updated_at": "2021-03-05T05:29:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it's not a Windows bug, it was WSL.  .NET on Windows doesn't use ANSI escape sequences for keyboard input.  As for why check for interactive, the problem is that if you do something like: `pwsh -command 1`, then you get back `1ESC[?1l` as the output from that command.  Even if you don't explicitly use `-noninteractive` the console host knows that `-command` without `-noexit` is non-interactive so we don't want to emit the ESC sequence that will be part of the stdout output.",
      "created_at": "2021-03-05T05:43:12Z",
      "updated_at": "2021-03-05T05:43:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-03-18T02:00:06Z",
      "updated_at": "2021-03-18T02:00:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.5)\n",
      "created_at": "2021-04-14T23:59:02Z",
      "updated_at": "2021-04-14T23:59:02Z"
    }
  ],
  "created_at": "2021-03-04T14:52:20Z",
  "number": 14943,
  "state": "closed",
  "title": "Turn on and off DECCKM to modify keyboard mode for unix native commands to work correctly",
  "updated_at": "2021-07-12T19:46:42Z"
}