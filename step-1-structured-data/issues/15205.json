{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15205",
  "author": "ghost",
  "body": "## Summary of the new feature/enhancement\r\n`start-process -verb runas -filepath \"complete path of somefile\"`\r\n\r\ninvokes UAC which is GUI based and it does take the credentials input within the secure desktop screen, it's super annoying to work with GUI, when already working in powershell.\r\n\r\nas a user, want a completely command line powershell implementation of UAC, which will \r\n\r\n(i)let me know the executables full file path and publisher info.\r\n(ii) let choose admin users from within command line.\r\n(iii) take credentials from within command line.\r\nbasically what UAC gui does today , but from command line.\r\n",
  "closed_at": "2021-04-14T12:00:05Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "This is not really something that can be done in PowerShell as it's a implementation detail in Windows. For you to elevate your account you need to have an already elevated process to spawn the elevated process itself which is what UAC does. There are definitely workarounds for this as UAC isn't considered a security boundary but they at best a hack or something that already runs as an elevated process.",
      "created_at": "2021-04-11T22:01:39Z",
      "updated_at": "2021-04-11T22:01:39Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "**\"For what is UAC and what UAC does\"** part , I feel tempted give my opinion.\r\n> For you to elevate your account you need to have an already elevated process to spawn the elevated process itself which is what UAC does. \r\n\r\nno standard user can/does elevate his account.\r\n**UAC=** **running in the context of an entirely different  user amongst the admin users, not the current standard user**\r\n\r\n>UAC isn't considered a security boundary but they at best a hack or something that already runs as an elevated process.\r\n\r\ndepends on the definition of \"security boundary\". UAC by design does it's job what it's supposed to do. UAC is not supposed to stop injection with already running as system components. \"**sequential processes chains isolation\"** is something windows  yet has to provide for high or medium IL processes.\r\n\r\n>There are definitely workarounds for this\r\n\r\nif [getting help from already running elevate process](https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-817215553) like : app combat, injection etc. are considered as workarounds  then **that's by definition not \"UAC bypass or workarounds\"**  actually that's  by design and windows allows that.\r\n\r\n\r\n",
      "created_at": "2021-04-11T22:37:35Z",
      "updated_at": "2021-04-11T22:37:35Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> no standard user can/does elevate his account\r\n\r\nThe actual step to get the admin token must be done specifically by an account that has the `SeTcbPrivilege` privilege. This is a highly privileged privilege that is only granted to very specific accounts. The UAC setup is able to run as SYSTEM with this privilege so it can get that linked admin account or logon a new user with the credentials specified in the UAC consent window. If the current user account (what is running in PowerShell) is not an admin and doesn\u2019t have the SeTcbPrivilege it is unable to get that admin token, let alone spawn a new process with that token. There\u2019s nothing the user/PowerShell can about that.\r\n\r\nShort of PowerShell implementing a privileged service that runs in the background to handle these requests the only proper way to do this is to use UAC or petition windows to implement what you want.\r\n\r\n",
      "created_at": "2021-04-11T23:35:00Z",
      "updated_at": "2021-04-11T23:35:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I suppose that even if Windows team makes a console UAC dialog instead of a GUI, a new window will open, which again is not what you want.",
      "created_at": "2021-04-12T06:35:47Z",
      "updated_at": "2021-04-12T06:35:47Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> > no standard user can/does elevate his account\r\n> \r\n> The actual step to get the admin token must be done specifically by an account that has the `SeTcbPrivilege` privilege. This is a highly privileged privilege that is only granted to very specific accounts. The UAC setup is able to run as SYSTEM with this privilege so it can get that linked admin account or logon a new user with the credentials specified in the UAC consent window. If the current user account (what is running in PowerShell) is not an admin and doesn\u2019t have the SeTcbPrivilege it is unable to get that admin token, let alone spawn a new process with that token.\r\n\r\nexactly , that's why **no standard user can/does elevate his account. ever.** \r\n\r\n(i)**`SeTcbPrivilege`= runas in the context of SYSTEM user**,  owned by SYSTEM only, no admin has access to it. as soon as any admin has `SeTcbPrivilege`  then he is no longer an admin user, he becomes SYSTEM user.\r\n\r\n(ii)**UAC = runas in the context of a admin user** amongs the admin users and creates High IL process,  **not the current user.**  also known as `SeDebugPriviledge`\r\n \r\n(iii)**standard user** forever remains as standard user with his **by deafult medium IL, if necessary Low IL/AppContainer.**\r\n\r\n> the only proper way to do this is to use UAC.\r\n\r\nuntil powershell implements completely command line UAC ? then yes.\r\n\r\n>I suppose that even if Windows team makes a console UAC dialog instead of a GUI, a new window will open, which again is not what you want.\r\n\r\nactually it's seems to be the other way around. \r\nbecause users want to elevate from within the same terminal window, the first thing comes to my mind here is a completely command line UAC. when it's done , then it's windows team's job to implement the same window magic for console otherwise we already can do it today through third party tool as **gSudo** :)\r\n\r\n @iSazonov \r\n**are you suggesting that because UAC gui owned by windows team therefore powershell won't implement command line dialog version of this?**\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-12T18:58:00Z",
      "updated_at": "2021-04-12T19:00:49Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I'm not 100% sure the PowerShell team are wanting to do something like this at all. I'm not part of the team so I could be wrong but historically a lot of the security based changes are very conservative and follow the status quo. It's a massive risk security wise to implement their own service for this purpose and fundamentally goes against the standard Windows model where UAC is used.\r\n\r\nOff the top of my head one of the security benefits you loose from going this approach is the fact that the UAC consent box is prompted on the secure desktop to try and avoid nefarious software from interacting with it/reading the input. Having it interactive on an existing command line window breaks this feature.\r\n\r\nPut simply I personally doubt PowerShell will implement this at all and think this kind of request is meant to be made against the Windows team which is unrelated to PowerShell. As you said there are 3rd party implementations like gsudo, if you want this functionality then it seems like the common consensus is to just use those.",
      "created_at": "2021-04-12T19:20:36Z",
      "updated_at": "2021-04-13T04:13:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> are you suggesting that because UAC gui owned by windows team therefore powershell won't implement command line dialog version of this?\r\n\r\nUAC in general is a Windows feature. It's designed to be impossible to get around, but that's what you're asking. :-) Change the system settings as you see fit and be happy. :-)",
      "created_at": "2021-04-13T04:00:31Z",
      "updated_at": "2021-04-13T04:00:31Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-04-14T12:00:04Z",
      "updated_at": "2021-04-14T12:00:04Z"
    }
  ],
  "created_at": "2021-04-11T20:51:45Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 15205,
  "state": "closed",
  "title": "command line UAC",
  "updated_at": "2021-04-14T12:00:05Z"
}