{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3819",
  "author": "412andrewmortimer",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n@vors Hi. I spoke with you yesterday in Gitter. Thanks for your reply.\r\n\r\nSteps to reproduce\r\n------------------\r\nHave something to STDOUT try to use Unicode characters. (I don't know if this is actually STDOUT on Windows or whatever, but the equivalent if it's not.)\r\n\r\nExpected behavior\r\n-----------------\r\nRender Unicode Characters\r\n\r\nActual behavior\r\n---------------\r\nWrong characters rendered.\r\n![powershell_bad_charset](https://cloud.githubusercontent.com/assets/1727414/26247497/242aceb0-3c6c-11e7-9f7b-f22cc8858784.PNG)\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                               5.1.14393.1198\r\nPSEdition                                Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                           10.0.14393.1198\r\nCLRVersion                             4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion  2.3\r\nSerializationVersion                1.1.0.1\r\n```\r\n\r\n\r\nI think this may be the issue?\r\nhttp://stackoverflow.com/questions/379240/is-there-a-windows-command-shell-that-will-display-unicode-characters",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Node.js outputs UTF-8 by default, though a program is free to change stdout's encoding.\r\n\r\n_Generally_, here's **what you need to do to make your PowerShell console window UTF-8 aware**:\r\n\r\n* On Windows 8.1 or below, **ensure that the window uses a TrueType font** (in Windows 10, it is by default). This is the prerequisite for being able to display _all_ Unicode characters.\r\n\r\n* Additionally:\r\n\r\n   * The **console window's code page must be switched to `65001`**, the UTF-8 code page (which is usually done with `chcp 65001`, but the PowerShell command below does that implicitly).\r\n\r\n   * **PowerShell must be instructed to use UTF-8 to communicate with _external utilities_,** both when _sending input_ and _receiving output_.\r\n\r\nThe following magic incantation in PowerShell does this (as stated, this _implicitly_ performs `chcp 65001`):\r\n\r\n```powershell\r\n$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding\r\n```\r\n\r\nDo note that **_legacy_ utilities that do not support Unicode may _break_** in such a console window.\r\n\r\n_Edit_: **To _persist_ these settings**, i.e. to make your future interactive PowerShell sessions UTF-8-aware by default, **add the command above to your `$PROFILE` file.**\r\n\r\nYou can verify proper UTF-8 handling with the following **test command**:\r\n\r\n```powershell\r\nPS> $captured = '\u20ac' | node -pe \"require('fs').readFileSync(0).toString().trim()\"; $captured; $captured.Length\r\n\u20ac  # '\u20ac' character (U+20ac; UTF-8 0xe2 0x82 0xac) was properly echoed.\r\n1  # '\u20ac', despite being composed of *3* bytes in UTF-8, was properly recognized as a *single* char.\r\n```\r\n---\r\n\r\nNote: Not all Unicode-aware fonts are created equal in terms of the set of Unicode characters they support; in Windows 10, the following fonts seem to support the most characters:\r\n\r\n* MS Gothic\r\n* NSimSun\r\n* SimSun-ExtB\r\n",
      "created_at": "2017-05-21T15:29:26Z",
      "updated_at": "2018-06-13T13:57:14Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "```Powershell\r\n$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding\r\n```\r\n\r\n\r\nDid the trick for me. Is this persistent? Do i need to run this every time I open a Powershell? Any info would be awesome, like if I need to stick it in a config file or something.\r\n\r\n@mklement0 You're the best! Thanks!\r\n\r\n@chuanjiao10 Hope you're feeling better today!",
      "created_at": "2017-05-23T17:19:43Z",
      "updated_at": "2017-05-23T17:22:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@412andrewmortimer: \r\n\r\nMy pleasure.\r\n\r\n> Do i need to run this every time I open a Powershell?\r\n\r\nJust put the command in your `$PROFILE` - I've also updated my previous comment.\r\n",
      "created_at": "2017-05-23T17:56:42Z",
      "updated_at": "2017-05-23T18:02:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chuanjiao10: I'm not entirely sure what you mean, but, yes, PowerShell should at least have a less obscure way of handling UTF-8 properly and ideally even default to UTF-8 in PowerShell Core.\r\n\r\nThere is a pending [RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0020-DefaultFileEncoding.md) about UTF-8 support; it is being debated [here](https://github.com/PowerShell/PowerShell-RFC/issues/71).",
      "created_at": "2017-05-24T11:52:38Z",
      "updated_at": "2017-05-24T11:52:38Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "@mklement0 So that solution worked, but then I tried to use Docker, namely `docker-compose` and this is what it says. \r\n\r\n```\r\n  Traceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"logging\\__init__.py\", line 872, in emit\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nLogged from file service.py, line 470\r\nTraceback (most recent call last):\r\n  File \"docker-compose\", line 3, in <module>\r\n  File \"compose\\cli\\main.py\", line 64, in main\r\n  File \"compose\\cli\\main.py\", line 116, in perform_command\r\n  File \"compose\\cli\\main.py\", line 888, in up\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 40, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 141, in write\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\r\n  File \"site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\r\nLookupError: unknown encoding: cp65001\r\nFailed to execute script docker-compose\r\n```\r\n",
      "created_at": "2017-05-26T19:01:16Z",
      "updated_at": "2017-05-26T19:01:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "[This SO answer](https://stackoverflow.com/a/35177906/45375) may help.",
      "created_at": "2017-05-26T19:07:05Z",
      "updated_at": "2017-05-26T19:07:05Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "I don't have Python installed on Windows at all. Compose is written in Python, so I'm assuming that there is something highly abstracted happening. (Pretty sure compose executes in containers.)",
      "created_at": "2017-05-26T19:19:34Z",
      "updated_at": "2017-05-26T19:23:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@412andrewmortimer: You're right - I just installed Docker and setting `$env:PYTHONIOENCODING='UTF-8'` before calling `docker-compose --version` didn't help. \r\n\r\nNote that the problem is not PowerShell-related, however: running `chcp 65001` in a `cmd.exe` window and then running `docker-compose --version` breaks too.",
      "created_at": "2017-05-26T20:37:55Z",
      "updated_at": "2017-05-26T20:37:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@412andrewmortimer: It's a [known Composer issue](https://github.com/docker/compose/issues/2775).",
      "created_at": "2017-05-26T20:55:05Z",
      "updated_at": "2017-05-26T20:55:05Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "I don't understand. How do I fix it?",
      "created_at": "2017-05-31T18:54:47Z",
      "updated_at": "2017-05-31T18:54:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@412andrewmortimer: \r\n\r\n* It's a bug in `docker-compose` and has nothing to with PowerShell.\r\n\r\n* You'll have to wait for the team behind `docker-compose` to release a fix (or try to contribute one yourself).\r\n\r\n* Glancing at the linked issue, it sounds like they'll have to switch to Python 3.x, which is probably a nontrivial undertaking and would explain why the issue is still not fixed, despite first having been reported more than 1 year ago. That, and the fact that using UTF-8 console windows on Windows is still an exotic and brittle proposition, unfortunately.\r\n",
      "created_at": "2017-05-31T19:42:52Z",
      "updated_at": "2017-05-31T19:43:39Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "I still don't understand why.\r\n\r\nShouldn't this be something Powershell does? Isn't it a bug in `docker-compose` **and** `Powershell`? I mean... it's not like `docker-compose` is magically running without `Powershell`. Docker is a command line tool and Powershell is a command line. I don't think blaming `docker-compose` is a good thing to say unless the point is to sweep it under the rug. Maybe it's the fact that \"using UTF-8 console windows on Windows is still an exotic and brittle proposition, unfortunately.\" Is there somewhere to find out why Windows command line is this way when it's generally not at all like this in other terminals?\r\n\r\nUnfortunately I _have_ to use Windows as a host OS at the very least. Is there something I can do to fix this in this repository? Because Powershell and development on Windows is pretty painful in general and if I can fix some of these issues, I would love to be able to. Because I highly doubt that I am alone in this sentiment.\r\n\r\nI think it's obvious when generally the first step in nearly any development I do on Windows is \"figure out how to run one command to not have to deal with Windows and that will virtualize or emulate an environment that actually works.\" It's just really perplexing.\r\n\r\nHave you tried to develop with Docker, Ruby, and JavaScript on Windows?  It's a pretty painful experience in general. I mean Git on Windows even ships MINGW. I assume to avoid Powershell. I mean... why? \r\n\r\nI know this has become larger than Powershell not rendering UTF-8... but it's all tied in as far as I'm concerned. Even if it requires other issues to be opened. \r\n\r\n(I'm not trying to be snarky or entitled. I get it. All of this is very complex, and sometimes you can only have one or the other when it comes to some decisions. All in all I just want development (I suppose _the type of development I do_) to be better on Windows.)",
      "created_at": "2017-06-02T13:22:41Z",
      "updated_at": "2017-06-02T13:24:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I get your frustration, and while PowerShell itself has work left to do with respect to UTF-8 support - and getting it right is the aim of the yet-to-be-released v6 -  **the problem is related to a layer _below_ the shell and incomplete support for it in the _Python_ version that the current `docker-compose` is built on**:\r\n\r\n* Shells (such as `cmd.exe` or PowerShell) as well as console applications need to be told by the _environment_ what character encoding to use.\r\n\r\n* In the world of Windows consoles (console windows), it is the active Windows code page that determines the character encoding, as reported by the `chcp` utility, for instance.\r\n\r\n* Code pages are identified by numbers, and the [official Windows code page for UTF-8 is `65001`](https://msdn.microsoft.com/en-us/library/dd317756(v=vs.85).aspx).\r\n\r\n* The Python 2.x version that `docker-compose` is built on doesn't recognize this particular code page when printing to the console (it  doesn't know what encoding `cp65001` means).\r\n   * This is indicative of Python's own slow, painful evolution toward complete Unicode support.\r\n   * In a stand-alone 2.x Python version you can fix the problem by setting the `PYTHONIOENCODING` environment variable, but this doesn't work for _embedded_ versions, which is the case for `docker-compose`.\r\n   * It seems that the problem was fixed in Python 3.5, so using that as the embedded version for `docker-compose` would probably fix the issue, but is a non-trivial effort.\r\n\r\nThere's nothing that any shell invoking `docker-compose` can do to fix that directly.\r\n\r\n---\r\n\r\nHowever, there is a **workaround**:\r\n\r\nSeemingly, if you don't output to the _console_ directly, the problem doesn't surface.\r\n\r\nUsing a pipeline in PowerShell that seemingly just passes the lines through seems to help:\r\n\r\nPowershell decodes the input before sending it through the pipeline, and re-encodes it on output - and it _does_ recognize code page `65001` as UTF-8 (but note that when you send output to  a _file_ you need to be aware of PowerShell's quirky, cmdlet-dependent encoding defaults).\r\n\r\n```powershell\r\ndocker-compose --version | % ToString  # Doesn't break with code page 65001\r\n```\r\n\r\nYou can define a function wrapper (be sure to invoke it without the `.exe` extension):\r\n\r\n```powershell\r\n function docker-compose { docker-compose.exe $args | ForEach-Object ToString }\r\n```\r\n\r\n\r\n",
      "created_at": "2017-06-04T20:24:44Z",
      "updated_at": "2018-07-06T02:52:57Z"
    },
    {
      "author": "412andrewmortimer",
      "author_association": "NONE",
      "body": "@mklement0 I appreciate your help and understanding! You are awesome, knowledgeable and helpful! I will try your fix ASAP.\r\n\r\nI've been watching the compose issue you posted too: https://github.com/docker/compose/issues/2775",
      "created_at": "2017-06-14T12:22:05Z",
      "updated_at": "2017-06-14T12:25:16Z"
    }
  ],
  "created_at": "2017-05-19T12:23:05Z",
  "number": 3819,
  "state": "open",
  "title": "Unicode Display Error (discovered via npm STDOUT)",
  "updated_at": "2018-07-06T02:52:57Z"
}