{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2272",
  "author": "Francisco-Gamino",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nTo fix this issue, a possible solution is to wrap the call in cmd.exe \u201cstart...\u201d; however, in order to figure out if the process fail to start, we need WaitForExit, then check the exit code, and extract the standard error.  This is a change on behavior between Full and CoreCLR PowerShell. The problem with this implementation is that PowerShell will be blocked until the process completes. Alternatively, if we decide to just ignore the error, then this behavior will also be incorrect since in PowerShell no error means the operation was successful. \nWe should explore doing a PInvoke in Windows CoreCLR. This way, we can get the Marshal.GetLastWin32Error() if we fail to start the process. \n\non Windows Core CLR\ninvoke-item path_to_file_or_exe \n## Expected behavior\n## Actual behavior\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\n```\n",
  "closed_at": "2017-03-15T19:46:33Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@Francisco-Gamino. Please add the PSVersionTable information.\n",
      "created_at": "2016-09-19T20:13:06Z",
      "updated_at": "2016-09-19T20:13:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This issue covers the `Invoke-Item` part of the original issue #1325\n",
      "created_at": "2016-10-12T19:27:19Z",
      "updated_at": "2016-10-12T19:27:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This also needs to work on Linux so don't have just a Windows solution\n",
      "created_at": "2016-11-04T20:14:07Z",
      "updated_at": "2016-11-04T20:14:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`Invoke-Item` already works on Linux and Mac. On windows, `Invoke-Item` was enabled by adding support to `ShellExecuteEx` in powershell core via #3281",
      "created_at": "2017-03-15T19:46:33Z",
      "updated_at": "2017-03-15T19:46:33Z"
    }
  ],
  "created_at": "2016-09-15T17:44:27Z",
  "labels": [
    "WG-Cmdlets",
    "Issue-Discussion",
    "Resolution-Fixed"
  ],
  "number": 2272,
  "state": "closed",
  "title": "Implement Invoke-Item for .NET Core on Windows, Nano Server and IoT",
  "updated_at": "2017-03-15T19:46:33Z"
}