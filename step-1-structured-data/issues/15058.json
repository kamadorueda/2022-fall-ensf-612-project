{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15058",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\n* Parameters that are flag-based enumeration types (e.g., [`System.Management.Automation.ScopedItemOptions`](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.ScopedItemOptions)) i.e. types that allow _combining_ values (bit-ORing) them _implicitly_ accept an _array_ of values, courtesy of PowerShell's flexible type conversions.\r\n\r\n* However, this fact isn't an obvious from the syntax diagrams; in effect you need to _know_ the specifics of the parameter types in order to infer whether multiple values are accepted:\r\n  * Purely on a formal level, the fact that the parameter type is a _scalar_ (e.g. `ScopedItemOptions`) rather than an _array_ (e.g., `ScopedItemOptions[]`) provides no indication - which is what you see with `Get-Command -Syntax`\r\n  * Those cmdlets that provide MAML based help may explicitly _list the individual enum values_, but again there is nothing that indicates that _combinations_ are allowed (and from the values themselves that cannot necessarily inferred).\r\n  * If the parameter _name_ is a _singular_ (e.g., `New-Variable -Option`) rather than a _plural_ (e.g., `Get-ChildItem -Attributes`), it too doesn't provide any clues.\r\n\r\nUsing the example of `New-Variable` with its `-Option` parameter:\r\n\r\n```powershell\r\n# CURRENT behavior:\r\nPS> Get-Command -Syntax New-Variable\r\nNew-Variable ... [-Option <ScopedItemOptions>]\r\n```\r\n\r\nNote the singular name, and the scalar type name, neither of which provide a strong clue that an _array_ of values - e.g., \r\n`New-Variable foo bar -Option ReadOnly, AllScope` can be passed (the plural in the _type name_ does to an extent, but not every flag-based enumeration is guaranteed to have that).\r\n\r\n```powershell\r\n# CURRENT behavior:\r\nPS> Get-Help  New-Variable\r\n...\r\nNew-Variable ... [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] ...\r\n...\r\n```\r\n\r\nThe listing of all values again provides no clue that _multiple_ values may be passed.\r\n\r\nUser shouldn't have to determine the full type name and perform a .NET documentation lookup just to learn when a given enum type is flag-based, i.e. accepts an _array_ of values.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nAs an aside, re _documentation_: the parameter descriptions should explicitly mention when a parameter type is a flag-based enumeration, and the examples should ideally comprise at least one command that shows a combination - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7357\r\n\r\n\r\n* Enhance the syntax diagrams to indicate flag-based enumerations, e.g. with a trailing `+` (a trailing `[]` to suggest an _array_ may get too cluttered, given the liberal use of `[` and `]` in syntax diagrams).\r\n\r\n* Selectively _disable_ this for cmdlets where a flag-based enum is situationally used as a _single_-value parameter, such as `Add-Member -MemberType`, as @SeeminglyScience  points out, and he [proposes](https://github.com/PowerShell/PowerShell/issues/15058#issuecomment-802163293) using a new attribute, `[SingleEnumValue]` to decorate such parameters - this should drive both the syntax-diagram representation _and_ should prevent attempts to pass multiple values at the parameter-binder level, and ideally also guide tab-completion behavior - see [below](https://github.com/PowerShell/PowerShell/issues/15058#issuecomment-802193063).\r\n\r\n* ~~Establish a convention to use the _plural_ in the names of parameters whose type is a flag-based enumeration.~~ [This contravenes established PowerShell practice, as @SeeminglyScience notes; the syntax diagram enhancement should be enough (and, as is already the case, properly named .NET flag enums imply their flag-based nature by a plural in their _type name_)]\r\n\r\nApplied to the examples above:\r\n\r\n```powershell\r\n# WISHFUL THINKING:\r\nPS> Get-Command -Syntax New-Variable\r\nNew-Variable ... [-Options <ScopedItemOptions>+]\r\n\r\n# WISHFUL THINKING:\r\nPS> Get-Help  New-Variable\r\n...\r\nNew-Variable ... [-Options {None | ReadOnly | Constant | Private | AllScope | Unspecified}+] ...\r\n...\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How does this will correlate with docs? Will we need to sync with PowerShell-Docs repository process?",
      "created_at": "2021-03-18T14:35:54Z",
      "updated_at": "2021-03-18T16:21:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* The linked issue suggests always making it explicit in parameter descriptions when a parameter implicitly accepts multiple (an array of) values due to its type being a flag-based enum, and also suggests making at least one of the examples show a call with multiple values.\r\n\r\n* If the syntax diagrams get enhanced, the topics would automatically reflect that, I presume, but the enhancement would also need to be described in [about_Command_Syntax](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Command_Syntax).\r\n\r\n> Will we need with PowerShell-Docs repository process?\r\n\r\nI don't understand.\r\n\r\n",
      "created_at": "2021-03-18T15:07:54Z",
      "updated_at": "2021-03-18T15:07:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > Will we need with PowerShell-Docs repository process?\r\n> \r\n> I don't understand.\r\n\r\nSorry, I mean \"sync\". If we add new value to an enum the Engine will generate new syntax diagram automatically but static docs will be not updated.",
      "created_at": "2021-03-18T16:24:02Z",
      "updated_at": "2021-03-18T16:24:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "But we're not talking about adding new values to existing enums here (which can cause backward compatibility issues) - this sounds like an unrelated issue to me.\r\n",
      "created_at": "2021-03-18T16:34:28Z",
      "updated_at": "2021-03-18T16:34:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I think @iSazonov is trying to ensure someone knows that docs would need to be explicitly regenerated if the syntax diagram were to be changed.\r\n\r\n> Enhance the syntax diagrams to indicate flag-based enumerations, e.g. with a trailing + (a trailing [] to suggest an array may get too cluttered, given the liberal use of [ and ] in syntax diagrams).\r\n\r\nI think that's probably the way to do it.  Though not all parameters typed as flag enums will actually accept multiple values, like `Add-Member -MemberType`.  Maybe a additional attribute like `SingleEnumValue` to disable that conditionally.\r\n\r\n> Establish a convention to use the plural in the names of parameters whose type is a flag-based enumeration.\r\n\r\nThis would be counter to the typical recommendation of always singular, e.g. `Get-ChildItem -Name` instead of `Names`.",
      "created_at": "2021-03-18T17:53:42Z",
      "updated_at": "2021-03-18T17:53:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience.\r\n\r\nGood point about `Add-Member -MemberType`. I've added a note to the OP.\r\n\r\nThe plural issue is tricky, for sure - PowerShell and .NET clash here: PowerShell favors the singular, whereas by convention flag-based enums use plural names (e.g., `ScopedItemOptions `).\r\nBut, given that explicitly array-based parameters have singular names too (e.g., `-Path`), I agree that it makes sense to stick with PowerShell's convention - I've updated the OP accordingly.\r\n\r\nAs for coordinating with the docs team to ensure regeneration: good point, but I think it makes sense to wait for this proposal to be green-lighted first.\r\n\r\n\r\n",
      "created_at": "2021-03-18T18:20:41Z",
      "updated_at": "2021-03-18T18:21:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S: I really like the `[SingleEnumValueAttribute]` idea, as it could drive not just the syntax diagram representation, but also parameter binding (`Add-Member` currently needs to use an explicit check, in the `.ProcessRecord()` method), and perhaps also tab-completion (which, however, currently happily lets you construct an array even for true scalar parameters, falling back to filename completion for the bogus elements - related to #14147).",
      "created_at": "2021-03-18T18:37:09Z",
      "updated_at": "2021-03-18T18:37:09Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "transferring to the interactive wg ",
      "created_at": "2022-06-23T20:11:45Z",
      "updated_at": "2022-06-23T20:11:45Z"
    }
  ],
  "created_at": "2021-03-17T20:07:49Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 15058,
  "state": "open",
  "title": "Make it more obvious when cmdlet parameters are flag-based enumeration types",
  "updated_at": "2022-06-23T20:11:45Z"
}