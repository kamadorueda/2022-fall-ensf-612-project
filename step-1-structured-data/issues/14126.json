{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14126",
  "author": "int3l",
  "body": "Additional details here: pypa/setuptools/issues/2453\r\n\r\nPSVersionTable:\r\n```console\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nCan you please confirm that this is or is not related to PowerShell Core itself?\r\nMy main concern is that this behavior is not present under CMD, only under the default Windows PowerShell and PowerShell Core.",
  "closed_at": "2020-12-19T22:24:35Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it works in cmd.exe this can be PowerShell issue.\r\n How does `--editable` work? Redirect IO? Wait input?\r\nYou could look in Process Explorer where threads sleep on (see Threads tab).",
      "created_at": "2020-11-19T10:04:06Z",
      "updated_at": "2020-11-19T10:04:06Z"
    },
    {
      "author": "int3l",
      "author_association": "NONE",
      "body": "@iSazonov thank you for replying. The strange thing is that I can reproduce this behavior, when I use `Ctrl-C` under PowerShell, but If I use `Ctrl-Break` - it properly propagates the signal to both processes and this behavior is not present. So I guess that this is some kind of brutal \"workaround\".\r\n\r\nHere is the additional information that I managed to gather:\r\n(Those screenshots are taken after issuing `Ctrl-C`)\r\n![Untitled](https://user-images.githubusercontent.com/1278836/99656007-0e01e200-2a65-11eb-8186-74774b892b09.png)\r\n![Untitled2](https://user-images.githubusercontent.com/1278836/99656009-0f330f00-2a65-11eb-922c-ecc792c89914.png)\r\n\r\nAbout the question how editable work - I am not exactly sure, I think that the python entry point scripts are generated somewhere in this codebase: [easy_install](https://github.com/pypa/setuptools/blob/f991fbb3c9d0e10a0a78ae2b508b3fd99f9cdef2/setuptools/command/easy_install.py) with additional tests here: [test_windows_wrappers](https://github.com/pypa/setuptools/blob/f991fbb3c9d0e10a0a78ae2b508b3fd99f9cdef2/setuptools/tests/test_windows_wrappers.py)\r\nAnd this is some kind of launcher: [launcher.c](https://github.com/pypa/setuptools/blob/cb64d3a84fab15aacbdf31a0a5632690ca9f49b2/launcher.c)",
      "created_at": "2020-11-19T10:51:22Z",
      "updated_at": "2020-11-19T11:01:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Why are you forced to press Ctrl-C or Ctrl-Break?\r\n",
      "created_at": "2020-11-19T11:16:25Z",
      "updated_at": "2020-11-19T11:16:25Z"
    },
    {
      "author": "int3l",
      "author_association": "NONE",
      "body": "In order to interrupt/stop the command. I posted examples in the other GitHub issue linked here.\r\nMy test case is:\r\n`process_1 pulls network information` ---> `passing the information to second process via standard output` ---> `process_2 accepts the information via standard input and does asynchronous processing`",
      "created_at": "2020-11-19T11:20:33Z",
      "updated_at": "2020-11-19T11:28:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell processes Ctrl-C to stop current pipeline and if it can not kill these py processes it is a bug.",
      "created_at": "2020-11-19T11:55:33Z",
      "updated_at": "2020-11-19T11:55:33Z"
    },
    {
      "author": "int3l",
      "author_association": "NONE",
      "body": "This bug must be related to some special case while using pipes, because individual processes seems to be interrupted properly.",
      "created_at": "2020-11-19T13:56:19Z",
      "updated_at": "2020-11-19T13:56:19Z"
    }
  ],
  "created_at": "2020-11-18T18:24:16Z",
  "number": 14126,
  "state": "closed",
  "title": "Zombie/orphan processes with piped shim executables from pip entry points, when using editable flag under PowerShell Core",
  "updated_at": "2020-12-19T22:24:35Z"
}