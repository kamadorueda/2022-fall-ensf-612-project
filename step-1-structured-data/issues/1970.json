{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1970",
  "author": "omidkrad",
  "body": "Related StackOverflow Q/A: http://stackoverflow.com/a/31888581/450913\r\n\r\nThe syntax of `Test-Path` in conditional statements is unnecessarily verbose (specially in the negated case), and prone to logical errors if parenthesis are not used properly:\r\n\r\n``` PowerShell\r\nif (Test-Path $path) { ... }\r\nif ($path | Test-Path) { ... }\r\n\r\nif (-not (Test-Path $path)) { ... }\r\nif (-not ($path | Test-Path)) { ... }\r\nif (!(Test-Path $path)) { ... }\r\nif (!($path | Test-Path)) { ... }\r\n```\r\n\r\nI would like to suggest the following aliases to be supported natively in PowerShell:\r\n\r\n``` PowerShell\r\nfunction not-exist { -not (Test-Path $args) }\r\nSet-Alias !exist not-exist -Option \"Constant, AllScope\"\r\nSet-Alias exist Test-Path -Option \"Constant, AllScope\"\r\n```\r\n\r\nWith that, the conditional statements will change to:\r\n\r\n``` PowerShell\r\nif (exist $path) { ... }\r\n```\r\n\r\nand\r\n\r\n``` PowerShell\r\nif (not-exist $path) { ... }\r\nif (!exist $path) { ... }\r\n```\r\n\r\nMuch more readable and avoids logical errors that happen in statements such as: `if (-not $path | Test-Path) { ... }`\r\n\r\nAnother idea is to implement them natively as \"-Exist\" and \"-NotExist\" operators.\r\n\r\nAlso as suggested by Derp McDerp in UserVoice item:\r\n\r\n> An alternative way of fixing this is for powershell to alter the grammar to allow the following syntax sugar:\r\n> \r\n> ``` PowerSehll\r\n> if !(expr) { statements* } \r\n> if -not (expr) { statements* }\r\n> ```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> if !(expr) { statements\\* } \n> if -not (expr) { statements\\* }\n\nI like Derp's idea at first blush.  It would apply to many more cases than just Test-Path.\n",
      "created_at": "2016-08-20T00:35:23Z",
      "updated_at": "2016-08-20T00:35:23Z"
    },
    {
      "author": "omidkrad",
      "author_association": "NONE",
      "body": "Combining them together, we'll have:\n\n``` powershell\nif -not (exist $path) { ... }\n```\n\nor if we get rid of the redundant dash:\n\n``` powershell\nif not (exist $path) { ... }\n```\n\nThe `exist` alias should work for any item, not just file paths, and never throw errors. Only return true or false.\n",
      "created_at": "2016-08-20T03:06:18Z",
      "updated_at": "2016-08-20T05:50:00Z"
    },
    {
      "author": "ygra",
      "author_association": "NONE",
      "body": "The dash for \n\n```\nif -not (expr) {}\n```\n\nwould likely remain. It's consistent with `switch -regex`, etc., for example (i.e. there's already precedent for having argument-like things for statements). When implemented the same, this would automatically allow you to shorten it as long as it remains unambiguous:\n\n```\nif -n (expr) {}\n```\n\nTechnically this doesn't save any keystrokes, though, but I think it stands out more than the version with `!`.\n\nAs for the aliases, I don't think they are needed by default. People are free to define them if they feel `Test-Path` is too complicated, but I know at least one PowerShell user who needs `Test-Path` maybe once a year, and pretty much never interactively. Then there is the whole issue whether it should be `exist` or `exists`.\n",
      "created_at": "2016-08-20T07:00:49Z",
      "updated_at": "2016-08-20T07:00:49Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "`if -not (expr) { ... }` would indeed be consistent with the `switch` statement grammar.\n\nAn alternative would be to introduce a negated `if` statement like perl's `unless`:\n\n```\nunless (expr) { ... } else { ... }\n```\n",
      "created_at": "2016-08-20T12:31:06Z",
      "updated_at": "2016-08-20T12:31:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@omidkrad , good idea, I suggest writing this up as an RFC (https://github.com/powershell/powershell-rfc)\n",
      "created_at": "2016-09-29T21:50:47Z",
      "updated_at": "2016-09-29T21:50:47Z"
    },
    {
      "author": "omidkrad",
      "author_association": "NONE",
      "body": "Congrats on PowerShell 7 release. I wanted to bump this up to be noticed. This is basically two different suggestions:\r\n\r\n1. Support the \"if not\" syntax:\r\n    ```powershell\r\n    if !(expr) { statements* }\r\n    if -not (expr) { statements* }\r\n    ```\r\n\r\n2. Include the `exist` alias by default:\r\n   ```powershell\r\n   Set-Alias exist Test-Path -Option \"Constant, AllScope\"\r\n   ```\r\n\r\nWith these two we can do:\r\n```powershell\r\nif (exist $path) { ... }\r\nif !(exist $path) { ... }\r\nif -not (exist $path) { ... }\r\n```",
      "created_at": "2020-05-14T06:00:42Z",
      "updated_at": "2020-05-14T06:00:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Personally I don't see a ton of value in adding that as a default alias, but maybe that's just me. \ud83d\ude42 \r\n\r\nHowever, I do like the idea of an `if !(condition)` / `if -not (condition)` syntax to simplify negated conditions. Another possible option would be a different keyword, like `unless`, but I'd consider that probably a less clear alternative overall.",
      "created_at": "2020-05-14T11:27:44Z",
      "updated_at": "2020-05-14T11:27:44Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "`if -not (){}` seems preferable to me:\r\n - Re-uses existing keyword\r\n - Self-explanatory\r\n - Straightforward to implement both in the parser and compiler\r\n - There's already precedence for statements with parameter-like switched (`switch` stmts)",
      "created_at": "2020-05-14T16:01:13Z",
      "updated_at": "2020-05-14T16:01:13Z"
    },
    {
      "author": "omidkrad",
      "author_association": "NONE",
      "body": "I personally use the `not-exist` alias, because it avoids the need for extra parentheses which if missed will silently cause logic bugs. (see [first post \ud83d\udc46](#issue-172218230))",
      "created_at": "2020-05-15T00:13:41Z",
      "updated_at": "2020-05-15T00:13:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, that's partly why we're considering ways to make them unnecessary.\r\n\r\nThere was a brief [Twitter thread](https://twitter.com/IISResetMe/status/1260998425027411968) that has a little more discussion on the matter; myself and a couple other folks voiced support for the `unless` keyword which we might want to consider a bit more here.\r\n\r\nIt is a new keyword, but IMO it's ultimately the clearest option. \ud83e\udd37 ",
      "created_at": "2020-05-15T00:24:19Z",
      "updated_at": "2020-05-15T00:24:19Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "While I don't see any reason both couldn't be implemented, if I had to choose one I vote for `unless` mostly because you could make an alias to emulate the same behavior on 5.1 and keep your code relatively backwards compatible simply, whereas `-not (expr)` won't be 5.1 compatible.\r\n\r\nFrom a usability standpoint though I like `-not (expr)` more, I find myself natively typing it all the time and then reminding myself I have to wrap it in parens :)",
      "created_at": "2020-05-15T16:14:05Z",
      "updated_at": "2020-05-15T16:15:00Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I quite like Unless  it's like having while loops and do until loops; similar but convenient to have both.  One would expect to be able to use else, elseUnless and elseIf with it\r\n\r\nI would be more cautious about `if    not (something) {} ` because the next question will be why not  have  `if (something) and (something) {}`  with the `and` or `or` on the outside \r\nAnd it would mean `IF `was the only place where the `not` was \"outside\" without a - sign\r\nNo-one is proposing there should be \r\n`while not (something) `\r\nor `Where not { something} `\r\netc. \r\n\r\nI would avoid changing the general language pattern of  \"Execute all/some/none of what's between {} based on on what's between ()\" with minimal other switches (switch is IIRC special here)\r\n\r\n`ifnot` (no space) as alternative for unless would work.  ",
      "created_at": "2020-05-15T17:07:12Z",
      "updated_at": "2020-05-15T17:12:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Personally I don't see a lot of value for `else` or any variant thereof in combination for `unless`.\r\n\r\nIf you need that, it's probably more idiomatic to just use the `if/elseif/else` statements as is.\r\n\r\n```ps\r\nunless ($condition) { \r\n    Do-Things\r\n}\r\nelse {\r\n    Do-OtherThings\r\n}\r\n```\r\nis the same as\r\n```ps\r\nif ($condition) {\r\n    Do-OtherThings\r\n}\r\nelse {\r\n    Do-Things\r\n}\r\n```\r\n\r\nI don't really see how adding `else` / `elseUnless` or allowing them to be used in tandem with `unless` is especially valuable tbh.",
      "created_at": "2020-05-15T17:11:38Z",
      "updated_at": "2020-05-15T17:12:09Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Personally I don't see a lot of value for `else` or any variant thereof in combination for `unless`.\r\n\r\n> I don't really see how adding `else` / `elseUnless` or allowing them to be used in tandem with `unless` is especially valuable tbh.\r\n\r\n\r\n(a) people will want it \r\n(b) your examples are semantically equivalent. \r\nHowever consider \r\n```\r\nGet-Object \r\nIf (Object is OK)  {\r\n\r\n200 lines of code\r\n\r\n}\r\nelse {report error} \r\n\r\n```\r\nBy the time someone looking at the code reads down to `report error` they have forgotten what the if statement was...  It's better, stylistically to write \r\n```\r\nGet-Object \r\nIf (Object is  not OK)  {report error}\r\nelse { \r\n\r\n200 lines of code\r\n\r\n}\r\n```\r\n\r\nIt's the same reason why we have `do {} while ()` or `repeat`... `until` loops (do something, then think about the condition for repeating it) but we don't have `do {} if ()`  there is nothing preventing that - but it would tax what we can hold on our mental stack for long than our 7 seconds of short term memory. \r\n\r\n\r\nMy only reservation about \r\n```\r\nGet-Object \r\nUnless (Object is OK)  {report error}\r\nelse { \r\n\r\n200 lines of code\r\n\r\n}\r\n```\r\nIs it suggests that error is usual and OK is the special case. ",
      "created_at": "2020-05-15T17:25:23Z",
      "updated_at": "2020-05-15T17:25:23Z"
    }
  ],
  "created_at": "2016-08-19T20:52:36Z",
  "number": 1970,
  "state": "open",
  "title": "Suggestion: Improve syntax of \"if not exist\"",
  "updated_at": "2020-05-15T17:25:24Z"
}