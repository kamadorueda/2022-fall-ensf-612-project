{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7937",
  "author": "mklement0",
  "body": "<sup>Follow-up from #7768</sup>\r\n\r\nIf you use `-ExpandProperty` with a property whose value happens to be an object with  instance ETS members (ETS members added with `-Add-Member`), these members are no longer present in the value returned.\r\n\r\nNote: The behavior only surfaces if the object is _not_ an instance of `[psobject]` - that is, if it is neither a true custom object (\"property bag\") nor an incidental `[psobject]` wrapper (see #5579).\r\n \r\n@PetSerAl discovered this problem in the context of #7768 and explains it [as follows](https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426105215):\r\n\r\n> In v2 extra properties were linked to PSObject wrapper. So two PSObjects wrapping the same underlying object can have different set of extra properties. In v3 properties now linked to underlying object (with some exceptions), but not to PSObject wrapper. But in the process PowerShell devs decided to keep/grant Select-Object -ExpandProperty ability to create independent PSObject wrappers, which links properties to themselves rather than to underlying objects.\r\n> [...]\r\n> Although, I do not think Select-Object should really do this. I do not see reasons why it use/have this ability in the first place (compatibility? maybe).\r\n\r\nA fix for this issue - to no longer attach the ETS members to the incidental wrapper and instead use the resurrection tables - should also fix the problem described in #12411.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$v = [datetime]::now; $v | Add-Member myProp myPropValue\r\n\"[$($v.myProp)]\"\r\n'---'\r\n# This should retrieve the original $v value, via Select-Object -ExpandProperty\r\n $vToo = [pscustomobject] @{ prop = $v } | Select-Object -ExpandProperty prop\r\n\"[$($vToo.myProp)]\"\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n[myPropValue]\r\n---\r\n[myPropValue]\r\n```\r\n\r\nThat is, the `.myProp` instance member should still be present.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n[myPropValue]\r\n---\r\n[]\r\n```\r\n\r\nThat is, the `.myProp` instance member is no longer present.\r\n\r\nWhat presumably happens is that a `[psobject]` wrapper is created around the output object with `storeTypeNameAndInstanceMembersLocally ` set to `$true`, which makes PowerShell look for instance members only on the wrapper object itself, effectively eclipsing any preexisting instance members associated with the wrapped object via the resurrection tables. \r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2018-10-03T13:58:47Z",
  "labels": [
    "Issue-Bug",
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 7937,
  "state": "open",
  "title": "Select-Object -ExpandProperty hides ETS instance members",
  "updated_at": "2020-12-19T22:22:40Z"
}