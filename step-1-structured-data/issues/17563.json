{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17563",
  "author": "jborean93",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI'm wondering what the purpose of https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/utils/PInvokeDllNames.cs, specifically\r\n\r\n* Why is there a counter for each entry as a comment\r\n* Why is there a constant for each extern name rather than just the DLL itself\r\n* Why do some things use these constants while others do not\r\n  * https://github.com/PowerShell/PowerShell/blob/2db0fe7207b5e22dc0043434dcb60af438086fb6/src/System.Management.Automation/security/nativeMethods.cs#L491-L493 uses `crypt32.dll`\r\n  * https://github.com/PowerShell/PowerShell/blob/2db0fe7207b5e22dc0043434dcb60af438086fb6/src/System.Management.Automation/security/nativeMethods.cs#L495-L501 uses the onecore constant in `PInvokeDllNames.cs`\r\n* Further to the above, why do these use the one core dll names where others do not\n\n### Expected behavior\n\n```console\nN/A\n```\n\n\n### Actual behavior\n\n```console\nN/A\n```\n\n\n### Error details\n\n```console\nN/A\n```\n\n\n### Environment data\n\n```powershell\nN/A\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-06-30T09:01:16Z",
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Before <https://github.com/PowerShell/PowerShell/pull/4405> and <https://github.com/PowerShell/PowerShell/pull/4456>, the string values of the constants in PInvokeDllNames.cs depended on whether `CORECLR` was defined. Building for .NET Core used the API Set DLL names, but building for .NET Framework used the old-school kernel32.dll. I suppose that was easier to implement by collecting all the DLL names to one file than by writing `#if CORECLR` in every Platform Invoke declaration.",
      "created_at": "2022-06-22T23:07:24Z",
      "updated_at": "2022-06-22T23:07:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@KalleOlaviNiemitalo is right on the purpose of the constants in this file. Now that only `coreclr` related code is left, the constants in this file are not necessary anymore, but it also doesn't offer much value to remove this file and replace all PInvoke declarations with the API set names -- there could be oversight mistakes when doing the replacement, and it doesn't really worth the review time.",
      "created_at": "2022-06-28T17:57:45Z",
      "updated_at": "2022-06-28T17:59:15Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the info. One thing that would be good to know is why do we allow both the OneCore API names in some cases but still use the DLL name in others. I know not all APIs are in OneCore which is why we still use the DLL there, does that mean we need to avoid using the non-OneCore APIs or shield them somewhat. Should we be trying to find alternatives to non-OneCore APIs/not adding any more in the future or does it not really apply for PowerShell?",
      "created_at": "2022-06-28T20:00:58Z",
      "updated_at": "2022-06-28T20:04:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> One thing that would be good to know is why do we allow both the OneCore API names in some cases but still use the DLL name in others\r\n\r\nWe reverted from OneCore APIs in some cases to get pwsh working on Win7/8.",
      "created_at": "2022-06-29T03:12:26Z",
      "updated_at": "2022-06-29T03:12:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-06-30T09:01:15Z",
      "updated_at": "2022-06-30T09:01:15Z"
    }
  ],
  "created_at": "2022-06-22T20:51:11Z",
  "labels": [
    "Resolution-Won't Fix"
  ],
  "number": 17563,
  "state": "closed",
  "title": "What's the purpose of PInvokeDllNames.cs",
  "updated_at": "2022-06-30T09:01:16Z"
}