{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14416",
  "author": "mklement0",
  "body": "Note:\r\n\r\n* I don't know what other cmdlets are affected. _Update_: at least `Out-File -Append` is affected too.\r\n\r\n* A common use case where the problem can surface is in the context of `ForEach-Object -Parallel` (while the use of `Add-Content` in parallel threads requires explicit synchronization, neglecting to do so should at least _report_ the  failure to write.)\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$tempFile = New-TemporaryFile\r\nWrite-Verbose -vb \"Waiting for an Add-Content call to fail...\"\r\n$Error.Clear()\r\nwhile ($true) {\r\n  Remove-Item -ea Ignore $tempFile\r\n  # Let multiple threads try to update Add-Content simultaneously.\r\n  1..100 | ForEach-Object -Parallel { Add-Content $using:tempFile -Value $_ -ErrorAction Stop; if (-not $?) { Write-Warning $_.ToString() } }\r\n  # On occasion, the file ends up with fewer than 100 lines.\r\n  $countWritten = (Get-Content $tempFile).Count\r\n  if ($countWritten -ne 100) {\r\n    Write-Verbose -vb \"$countWritten lines were written.\"\r\n    # If fewer lines were written, an error should have been reported.\r\n    $Error.Count | Should -BeGreaterOrEqual 1\r\n  }\r\n}\r\nRemove-Item $tempFile\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe tests should run indefinitely, because the `Add-Content` calls should either all succeed or those that fail should report an error.\r\n\r\n## Actual behavior\r\n\r\nA test eventually (may take a while) fails, because an `Add-Content` calls fails _silently_; e.g.:\r\n\r\n```none\r\nVERBOSE: 99 lines were written.\r\nInvalidResult:\r\nLine |\r\n  13 | $Error.Count | Should -BeGreaterOrEqual 1\r\n     | Expected the actual value to be greater than or equal to 1, but got 0.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Can you catch errors in `ForEach-Object -Parallel` scriptblock? Maybe add Get-Error?",
      "created_at": "2020-12-15T13:00:14Z",
      "updated_at": "2020-12-15T13:00:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I've added an `-ErrorAction Stop` and a check for `$?` being `$false` for reporting any error as a warning, but no error occurs - neither terminating nor non-terminating.\r\n\r\nIt's not in the tests above, but you can also get the quiet failure to occur in the main thread, if you write to the same file concurrently from a thread job (`Start-ThreadJob`).",
      "created_at": "2020-12-15T13:35:44Z",
      "updated_at": "2020-12-15T13:35:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think really Get-Content does not fail. It write all values in the file but we have a race condition sometimes - some values are overwritten by subsequent ones.",
      "created_at": "2020-12-15T16:42:28Z",
      "updated_at": "2020-12-15T16:42:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's definitely a race condition.\r\n\r\n_Some_ failure of `Add-Content` is involved and two possible reasons come to mind:\r\n\r\n* The write operation fails, but the failure isn't reported.\r\n* File content is _cached_ (which seems unlikely) and on writing there's a failure to recognize that the file has been modified by another thread.\r\n\r\nEither way, a fix is required.",
      "created_at": "2020-12-15T16:46:29Z",
      "updated_at": "2020-12-15T16:46:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Also note that the problem may not be cmdlet-specific, because `Out-File -Append` is affected too.",
      "created_at": "2020-12-15T16:53:13Z",
      "updated_at": "2020-12-15T16:53:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I doubt we can fix this since too many things in PowerShell are not thread-safe. (What is you will write to a web service?)\r\nPerhaps the best option is to write this in the documentation if it is not already there.\r\n\r\n@PaulHigin Could you please share your thoughts?",
      "created_at": "2020-12-15T17:10:57Z",
      "updated_at": "2020-12-15T17:11:46Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yes, PowerShell cmdlets are not and were never intended to be multi-threaded safe.  Users must beware of using cmdlets in multiple threads, whether via foreach -parallel or PowerShell API.  Same as with any non-multi-threaded-safe .NET object.  ",
      "created_at": "2020-12-15T17:32:27Z",
      "updated_at": "2020-12-15T17:32:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed in general, @PaulHigin, but while race conditions on _in-memory_ data (e.g., a non-concurrent collection) cannot be prevented, we are talking about concurrent _file access_ here.\r\n\r\nAnd it seems to me that failure to update a file being written to by someone else should be _reported as such_ - the currently quiet failure is insidious. (Note that this is different from expecting the concurrency to be _managed_ automatically - that is indeed not the goal here.)\r\n\r\n",
      "created_at": "2020-12-15T17:41:59Z",
      "updated_at": "2020-12-15T17:58:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Are you sure it's actually failing to write? It could be successfully writing input of similar length to the same offset in the file.",
      "created_at": "2020-12-15T17:50:50Z",
      "updated_at": "2020-12-15T17:50:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Safe solution was to mark cmdlets which is a thread-safe and allow in `ForEach-Object -Parallel` only such cmdlets. But in any case we can not make the `ForEach-Object -Parallel` fully thread-safe.\r\n\r\nAs for Add-Cmdlet, it has thick wrapper code and I guess it's not so easy to do it thread-safe.",
      "created_at": "2020-12-15T17:52:04Z",
      "updated_at": "2020-12-15T17:52:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's possible, @SeeminglyScience, but that is still a failure to synchronize access to a file for writing, which is something that should be addressed in general, irrespective of cross-_thread_ use, as it also applies cross-_process_.\r\n\r\nTherefore, @iSazonov, this isn't about _thread safety_ per se. It's about not allowing any other entity - whether thread or process - write access to a file while it is being written to (although it's possible that the specifics of the file-writing code underlying cmdlets such as `Add-Content` make the problem only surface in a cross-_thread_ context - haven't looked at the source code). \r\n\r\n\r\n",
      "created_at": "2020-12-15T17:56:59Z",
      "updated_at": "2020-12-15T18:01:43Z"
    },
    {
      "author": "ShivnarenSrinivasan",
      "author_association": "NONE",
      "body": "*Not sure if I should create a separate issue for this--seemed similar enough to the main issue.*\r\n\r\n# Redirection/Writing to file fails in `ForEach` block within function\r\n\r\n_I'm a relative beginner, so might be a basic error--that said, **this same function worked earlier, and worked on**_ **`WindowsPowerShell`** (5.1)\r\n\r\n```powershell\r\nfunction makeDirective([string]$directiveFile, $files) {\r\n\r\n        if (Test-Path $directiveFile) {\r\n            throw \"File $directiveFile Exists\"\r\n        }\r\n        ForEach ($file in $files) {\r\n            \"file $($file.Name)\" >> $directiveFile\r\n        }\r\n}\r\n\r\n# Files is obviously not empty\r\n$files = Get-ChildItem <file_pattern>\r\n\r\nmakeDirective 'manifest.txt' $files\r\n```\r\n\r\nNo errors, no warnings--but no file is outputted.\r\nThe same redirection line in the function works when I type it into a shell, or as a line in a script.\r\n\r\nI'm using Version 7.1.4",
      "created_at": "2021-09-23T17:11:00Z",
      "updated_at": "2021-09-23T17:12:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That would likely be a completely separate issue. FWIW I tried your function on 7.2.0-preview9 and it works as expected. I would guess something else is going on in your case, though I don't know what exactly.",
      "created_at": "2021-09-23T19:52:53Z",
      "updated_at": "2021-09-23T19:52:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Now .Net 6.0 has get new thread-safe file IO API.\r\nhttps://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/#thread-safe-file-io\r\n\r\nbut I doubt that we will be able to use this.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/08/top_allocations.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\" height=\"14\"> .NET Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/\">File IO improvements in .NET 6</a></strong></div><div>Learn about high-performance file IO features in NET 6, like concurrent reads and writes, scatter/gather IO and many more.</div></blockquote>",
      "created_at": "2021-09-24T03:40:39Z",
      "updated_at": "2021-09-24T03:40:41Z"
    }
  ],
  "created_at": "2020-12-14T17:21:37Z",
  "number": 14416,
  "state": "open",
  "title": "Add-Content and Out-File -Append can fail quietly, seemingly connected to cross-thread concurrency",
  "updated_at": "2021-09-24T03:40:41Z"
}