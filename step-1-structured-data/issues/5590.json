{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5590",
  "author": "daxian-dbw",
  "body": "Same failures from 2 macOS daily builds. And we got the similar failures for `Invoke-RestMethod -SslProtocol`.\r\n```\r\n    [-] Verifies Invoke-WebRequest -SslProtocol Tls11 works on Tls11 145ms\r\n      SSL connect error\r\n      at line: 1527 in /Users/travis/build/PowerShell/PowerShell/test/powershell/Modules/Microsoft.PowerShell.Utility/WebCmdlets.Tests.ps1\r\n    [-] Verifies Invoke-WebRequest -SslProtocol Tls12 works on Tls12 125ms\r\n      SSL connect error\r\n      at line: 1527 in /Users/travis/build/PowerShell/PowerShell/test/powershell/Modules/Microsoft.PowerShell.Utility/WebCmdlets.Tests.ps1\r\n+++\r\n    [-] Verifies Invoke-WebRequest -SslProtocol -SslProtocol Tls11 fails on a Tls only connection 213ms\r\n      Expected string length 83 but was 13. Strings differ at index 0.\r\n      Expected: {WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand}\r\n      But was:  {No Exception!}\r\n      -----------^\r\n      at line: 75 in /Users/travis/build/PowerShell/PowerShell/test/tools/Modules/HelpersCommon/HelpersCommon.psm1\r\n      75:             $_.FullyQualifiedErrorId | Should Be $FullyQualifiedErrorId | Out-Null\r\n    [-] Verifies Invoke-WebRequest -SslProtocol -SslProtocol Tls12 fails on a Tls only connection 181ms\r\n      Expected string length 83 but was 13. Strings differ at index 0.\r\n      Expected: {WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand}\r\n      But was:  {No Exception!}\r\n      -----------^\r\n      at line: 75 in /Users/travis/build/PowerShell/PowerShell/test/tools/Modules/HelpersCommon/HelpersCommon.psm1\r\n      75:             $_.FullyQualifiedErrorId | Should Be $FullyQualifiedErrorId | Out-Null\r\n```",
  "closed_at": "2017-12-06T20:20:45Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I noticed that the openssl version is different between the last passing daily and the next failing daily.\r\n\r\n1.0.2l (failed): https://travis-ci.org/PowerShell/PowerShell/jobs/309351359#L142\r\n1.0.2j (passed): https://travis-ci.org/PowerShell/PowerShell/jobs/308273280#L174\r\n\r\nThat seems to coincide with the changes in the default macos image on Travis CI https://blog.travis-ci.com/2017-11-21-xcode8-3-default-image-announce\r\n\r\nThis is the kind of weird behavior that happens on a systems with the non-opnessl libcurl.\r\n\r\nbrew has 1.0.2m available. I have that on my macOS laptop. I will test master and see if this repros\r\n\r\n",
      "created_at": "2017-11-30T22:27:03Z",
      "updated_at": "2017-11-30T22:27:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markekraus Thanks for looking into it!",
      "created_at": "2017-11-30T22:38:47Z",
      "updated_at": "2017-11-30T22:38:47Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I can't repro this with openssl 1.0.2l or 1.0.2m. I noticed they also added openssl@1.1 to the image. I installed this and and tested and still cant' repro this. I'm on macOS 10.13.1 and another change they made was the move to 10.12.6. So i can't duplicate this environment entirely.",
      "created_at": "2017-11-30T23:48:13Z",
      "updated_at": "2017-11-30T23:48:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I'm able to reproduce the failure:\r\n```\r\n> $env:PATH = \"/Users/psbuildacct/PowerShell/test/tools/WebListener/bin/:\" + $env:PATH\r\n> Import-Module /Users/psbuildacct/PowerShell/test/tools/Modules/HttpListener \r\n> Import-Module /Users/psbuildacct/PowerShell/test/tools/Modules/WebListener\r\n> $response = Start-HttpListener -Port 8080\r\n> $WebListener = Start-WebListener\r\n> $Uri = Get-WebListenerUrl -Test 'Get' -Https -SslProtocol Tls11 \r\n> Invoke-WebRequest -Uri $Uri -SslProtocol Tls11 -SkipCertificateCheck  \r\n\r\nInvoke-WebRequest : SSL connect error\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri $Uri -SslProtocol Tls11 -SkipCertificateCheck\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```\r\nThis happens on macOS `10.12.6` with openssl `1.0.2m` installed.\r\nHere are the exception call stack and error messages:\r\n```\r\nPS:19> $er.Exception.Message                                                                                                                         \r\nAn error occurred while sending the request.\r\nPS:20> $er.Exception.StackTrace                                                                                                                      \r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetResponse(HttpClient client, HttpRequestMessage request, Boolean stripAuthorization) in /Users/psbuildacct/PowerShell/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs:line 457\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord() in /Users/psbuildacct/PowerShell/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs:line 550\r\n\r\nPS:21> $er.Exception.InnerException.Message                                                                                                          \r\nSSL connect error\r\nPS:22> $er.Exception.InnerException.StackTrace                                                                                                       \r\n   at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)\r\n   at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)\r\n```\r\nI have no idea about the root cause. For now I will disable `-SslPrototol` tests.",
      "created_at": "2017-12-01T22:55:35Z",
      "updated_at": "2017-12-01T22:55:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "One more thing I want to bring up is that our macOS CI actually uses openssl `1.0.2m`. The bootstrap script  runs `brew install curl --with-openssl`, which installs the `1.0.2m`. See the CI screenshot below:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/33507218-694d9c1c-d6a8-11e7-98d4-80c0262fdc2f.png)\r\n",
      "created_at": "2017-12-01T22:58:40Z",
      "updated_at": "2017-12-01T23:00:57Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "yea I missed where it was installing 1.0.2m\r\n\r\nThe question for me is whether this is WebListener not getting the right TLS applied, or the web cmdlets (HttpClient) not selecting the right tls setting.. or both. I don't have a good way to test that except maybe verify with curl that limiting those protocols to those ports works against web listener. I could not find any public web services that had Tls 1.0, 1.1, or 1.2 only.\r\n\r\nI have been trying several things on travis CI, but it takes an eternity for macOS builds to start and finish.  can you do a `brew list --versions` in your environment? \r\n\r\nI'm waiting on a [build](https://travis-ci.org/markekraus/PowerShell/jobs/310268560 ) to start that runs `brew remove openssl@1.1`  before boot strapping. I can't reproduce an issue with it installed on my system with it installed... but maybe it's an issue for 10.12.6? \r\n\r\n",
      "created_at": "2017-12-01T23:16:22Z",
      "updated_at": "2017-12-01T23:16:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> but it takes an eternity for macOS builds to start and finish\r\n\r\nYes, it's really a pain to verify anything with the Travis CI mac builder.\r\n\r\n> can you do a brew list --versions in your environment\r\n\r\nSure, here is the output:\r\n```\r\n$ brew list --versions\r\ncmake 3.6.2\r\ncurl 7.54.0\r\nhub 2.2.9\r\nmakedepend 1.0.5\r\nopenssl 1.0.2j 1.0.2k 1.0.2m\r\npkg-config 0.29.1_2 0.29.2\r\n```\r\n\r\n> but maybe it's an issue for 10.12.6?\r\n\r\nThat is a possibility -- I never ran those tests on the macOS I'm using now.",
      "created_at": "2017-12-01T23:36:30Z",
      "updated_at": "2017-12-01T23:45:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If a consumer has a slightly different version of the library, PowerShell will not work. Can we inplace such sensitive libraries in PowerShell Core folder?",
      "created_at": "2017-12-03T17:31:44Z",
      "updated_at": "2017-12-03T17:31:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov This does not appear to be related to the libcurl library or any other. As far as I can tell, this is an issue between CoreFX and macOS 10.12.6. The same library versions and build process works on 10.12.5 and 10.13.1, but not 10.12.6. \r\n\r\nIt could also be that the issue is on the WebListener side. there could be something in the 10.12.6 environment that is causing kestrel to bind the wrong protocols to the ports.",
      "created_at": "2017-12-03T17:39:29Z",
      "updated_at": "2017-12-03T17:39:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">issue between CoreFX and macOS 10.12.6\r\n\r\nI guess that the Issue is that CoreFX uses libcurl. We inplace CoreFX libraries in PowerShell Core folder. I guess we could put there a libcurl of needed version.",
      "created_at": "2017-12-03T17:50:32Z",
      "updated_at": "2017-12-03T17:50:32Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Again, the libcurl is not the issue here. the exact same libcurl library version works fine on macOS 10.12.5 and macOS 10.13.1.\r\n\r\nI would caution against packaging libcurl with the project. My experience is that it is one of the least portable Linux libraries.\r\n\r\nWe already have a step in the build process that ensure the right version is installed. i mistakenly thought other wise earlier in digging into this issue.",
      "created_at": "2017-12-03T17:55:34Z",
      "updated_at": "2017-12-03T17:55:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for clarify! \r\nCan you test Kestrel by browser locally on MacOS? (On Windows in IE we can select TLS versions.)",
      "created_at": "2017-12-03T18:11:33Z",
      "updated_at": "2017-12-03T18:12:43Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov the problem I have is that I cannot reproduce this in my mac environment. @daxian-dbw was able to on his 10.12.6 system. \r\n\r\nBut yes, you can test WebListener in a browser\r\n\r\n```powershell\r\nImport-Module ./build.psm1\r\nPublish-PSTestTools\r\n$WebListener = Start-WebListener\r\n```\r\n\r\nThen use the `Get-WebListenerUrl` to get the various URLs. \r\n\r\nThe problem is that this all needs to be don on an environment that is like the one in Travis CI.\r\n\r\nBefore @daxian-dbw opened #5605 I was trying to do some troubleshooting in Travis CI, but it started taking 4-5 hours to start the macOS builds. \ud83d\ude2d \r\n\r\nBest way to test would be to use `openssl s_client` against the WebListener on you can see what TLS version is used in the output. \r\n\r\n```bash\r\necho -e \"GET / HTTP/1.1\\nHost: localhost\\n\\n\" | openssl s_client -connect localhost:8084 -ign_eof 2>&1 | grep 'TLSv' | grep 'Protocol'\r\necho -e \"GET / HTTP/1.1\\nHost: localhost\\n\\n\" | openssl s_client -connect localhost:8085 -ign_eof 2>&1 | grep 'TLSv' | grep 'Protocol'\r\necho -e \"GET / HTTP/1.1\\nHost: localhost\\n\\n\" | openssl s_client -connect localhost:8086 -ign_eof 2>&1 | grep 'TLSv' | grep 'Protocol'\r\n```\r\n\r\nshould be \r\n\r\n```none\r\n    Protocol  : TLSv1.2\r\n    Protocol  : TLSv1.1\r\n    Protocol  : TLSv1\r\n```",
      "created_at": "2017-12-03T18:33:13Z",
      "updated_at": "2017-12-03T18:33:13Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This may be related to libcurl after all. \r\n\r\nI have done a ton of testing on my mac and I have discovered that no matter what brew version of curl/libcurl I have installed and no matter how I try to trick pwsh into using the correct lubcurl, it keeps using the system supplied one in /usr/lib/, which uses LiberSSL. \r\n\r\nI was testing if the newer version of libcurl and dotnet sdk resolved the inability to use certificate authentication on macOS and it spits this at me:\r\n\r\n```none\r\nThe handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (\"LibreSSL/2.0.20\").\r\n```\r\n\r\n\r\nWhich is odd considering I have curl 7.57.0 (with OpenSSL) installed by brew. \r\n\r\n```bash\r\ncurl --version\r\n```\r\n```none\r\ncurl 7.57.0 (x86_64-apple-darwin17.2.0) libcurl/7.57.0 OpenSSL/1.0.2m zlib/1.2.11\r\nRelease-Date: 2017-11-29\r\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\r\nFeatures: AsynchDNS IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy\r\n```\r\n\r\nYou can reproduce the error with:\r\n\r\n```powershell\r\nImport-Module ./build.psm1\r\nPublish-PSTestTools\r\n$Url = Get-WebListenerUrl -Test Cert\r\n$certificate = Get-WebListenerClientCertificate \r\n$result = Invoke-WebRequest -Uri $url -Certificate $certificate -SkipCertificateCheck\r\n```\r\n\r\nThere hasn't been any way that I have found to see what version of libcurl is using without making it throw an error or some kind. \r\n\r\nI'm used to compilers having away to include the correct library when a system has multiple, but I have no clue how do to that with `dotnet`. I haved tried setting `LD_LIBRARY_PATH` to `/usr/local/opt/curl/lib`, I'v tried setting `LDFLAGS` to `-L/usr/local/opt/curl/lib`, i have tred copying the correct libcurl files to the same directory as `pwsh`.... no matter what i do it sill choses the system libcurl files.",
      "created_at": "2017-12-03T23:34:17Z",
      "updated_at": "2017-12-03T23:34:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Interesting comment](https://github.com/dotnet/corefx/blob/a26de495ffa390a9d6b3a0d0f338e9d9f97ad5fe/src/System.Net.Http/src/System/Net/Http/OSX/CurlHandler.SslProvider.cs#L17).\r\n\r\nUpdate: The other comments are also useful.",
      "created_at": "2017-12-04T07:33:00Z",
      "updated_at": "2017-12-04T13:41:30Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov thanks. I'm not sure that plays into this, but at least that pointed me in a direction where I can test this. https://github.com/markekraus/PowerShell/blob/TestMacosFails/test/powershell/Libcurl.Tests.ps1\r\n\r\nThis is the build job (still pending) https://travis-ci.org/markekraus/PowerShell/builds/311234209",
      "created_at": "2017-12-04T10:27:45Z",
      "updated_at": "2017-12-04T10:30:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Yep, The reason why this is failing is because it is using the wrong libcurl:\r\n\r\nhttps://travis-ci.org/markekraus/PowerShell/builds/311234209#L2884\r\n\r\n```none\r\nLIBCURl=====================================================\r\nLIBCURL GetSslVersionDescription(): SecureTransport\r\nLIBCURL GetSupportedFeatures(): CURL_VERSION_IPV6, CURL_VERSION_SSL, CURL_VERSION_LIBZ, CURL_VERSION_NTLM, CURL_VERSION_ASYNCHDNS, CURL_VERSION_SPNEGO, CURL_VERSION_LARGEFILE, CURL_VERSION_NTLM_WB, CURL_VERSION_GSSAPI, CURL_VERSION_KERBEROS5, CURL_VERSION_UNIX_SOCKETS\r\nLIBCURL GetSupportsHttp2Multiplexing(): False\r\nLIBCURL GetVersionDescription(): 7.54.0\r\nLIBCURl=====================================================\r\n```",
      "created_at": "2017-12-04T11:52:17Z",
      "updated_at": "2017-12-04T11:52:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Great work! Could you get a path to the curl? Can reflection help?",
      "created_at": "2017-12-04T12:06:30Z",
      "updated_at": "2017-12-04T12:06:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe related #4029",
      "created_at": "2017-12-04T12:32:11Z",
      "updated_at": "2017-12-04T12:32:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov from what I can tell, .NET calls the `System.Net.Http.Native` assembly ([link](https://github.com/dotnet/corefx/tree/master/src/Native/Unix/System.Net.Http.Native)) and not directly to libcurl. That assembly either contains links to the system libcurl or has that libcurl baked into it. I'm not sure what voodoo magic it is doing in that assembly. I'm not sure how you generate that assembly other than to obtain it through nuget. This part of the problem is out of my depth as I am very very unfamiliar with the dotent build process. We need someone who knows what they're doing in that knowledge area to take a look. \r\n\r\nre: #4029 I suspected that at first there was some macOS/libcurl/CoreFX issue at play, but I went digging into the code and was not sure it is even using libcurl for any of that. Looks to me like they are missing the brew version of openssl.",
      "created_at": "2017-12-04T12:40:16Z",
      "updated_at": "2017-12-04T12:57:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems both Issues related with wrong library version (curl and OpenSSL/LibreSSL).\r\nSo questions is:\r\n - Where is the root of the problem? How CoreFX looks for the libraries?\r\n - How can we make it stable on all platforms and distributions?\r\n\r\n@daxian-dbw @SteveL-MSFT Can you ping CoreFX team?",
      "created_at": "2017-12-04T13:11:46Z",
      "updated_at": "2017-12-04T13:11:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markekraus @iSazonov I remember seeing a PR in CoreFx about removing OpenSSL dependencies on macOS, and digged into the CoreFx PRs, this is what I found: [Remove OpenSSL dependency on macOS (dev/apple_crypto -> master)](https://github.com/dotnet/corefx/pull/17011).\r\n\r\nQuoted from the PR description:\r\n> only the types whose name includes \"OpenSsl\" (e.g. RSAOpenSsl) will use OpenSSL on macOS. Instead, everything is provided by Security.framework.",
      "created_at": "2017-12-04T17:10:54Z",
      "updated_at": "2017-12-04T17:10:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "If I understand that PR correctly, previously they were directly using OpenSSL in the project for a bunch of operations and removed that. I don't think this changes anything regarding the issue at hand. You should still be able to plug in the `libcurl` of your choice as HttpClient is just wrapping it. If 'libcurl' is using OpenSSL then you get the supported features such as Certificate authentication and not-broken `HttpClientHandler.SslProtocols`. \r\n\r\nWhat is happening instead is that \"System.Net.Http.Native\" is only using the system provided libcurl. on 10.13.1 that is libcurl+LibreSSL, on 10.12.6 that is libcurl+SecureTransport. We have a step in the build process to install curl with openssl, but instead of it actually using that libcurl, it is favoring the system libcurl. \r\n\r\nThe brew formula says it all:\r\n\r\n```none\r\n==> Caveats\r\nThis formula is keg-only, which means it was not symlinked into /usr/local,\r\nbecause macOS already provides this software and installing another version in\r\nparallel can cause all kinds of trouble.\r\n\r\nIf you need to have this software first in your PATH run:\r\n  echo 'export PATH=\"/usr/local/opt/curl/bin:$PATH\"' >> ~/.bash_profile\r\n\r\nFor compilers to find this software you may need to set:\r\n    LDFLAGS:  -L/usr/local/opt/curl/lib\r\n    CPPFLAGS: -I/usr/local/opt/curl/include\r\nFor pkg-config to find this software you may need to set:\r\n    PKG_CONFIG_PATH: /usr/local/opt/curl/lib/pkgconfig\r\n```\r\n\r\nThis at least explains why a change in the OS version by Travis CI would affect the web cmdlets tests: new OS version means a different libcurl version and possibly even a different crypto provider (in the case of 10.12-to-10.13).\r\n\r\nThat means that the features available and working are beholden to the underlying OS unless we have some way to specify or include the libcurl that is called to ensure it is the one installed from brew.",
      "created_at": "2017-12-04T18:09:51Z",
      "updated_at": "2017-12-04T18:09:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markekraus Thanks for figuring out the root cause!\r\n\r\n> We have a step in the build process to install curl with openssl, but instead of it actually using that libcurl, it is favoring the system libcurl.\r\n\r\nThe step in our bootstrapping script that installs `curl` and `openssl` is actually the leftover from old days when .NET Core had a hard dependency on `openssl`. The PR name `\"Remove OpenSSL dependency on macOS\"` seems to suggest that we don't need this step anymore \ud83d\ude04\r\n\r\n> You should still be able to plug in the libcurl of your choice as HttpClient is just wrapping it.\r\n\r\n@markekraus Can you please open an issue in CoreFx to check with the CoreCLR team whether it's supported for users to plug in the `libcurl` of their choices for `HttpClient` to use?",
      "created_at": "2017-12-04T18:52:51Z",
      "updated_at": "2017-12-04T18:53:28Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I have one more thing to try (setting the DYLD_LIBRARY_PATH env var before starting and compiling) and if that doesn't work I will open an issue.",
      "created_at": "2017-12-04T18:56:21Z",
      "updated_at": "2017-12-04T18:56:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "also:\r\n\r\n> seems to suggest that we don't need this step anymore\r\n\r\nExcept that I think it is still being used by other parts of PowerShell, like omi https://github.com/PowerShell/psl-omi-provider/blob/master/src/CMakeLists.txt \ud83d\ude03 ",
      "created_at": "2017-12-04T19:47:44Z",
      "updated_at": "2017-12-04T19:47:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "\ud83c\udf89 YES!! \ud83c\udf89 \r\nAdding `export DYLD_LIBRARY_PATH=/usr/local/opt/curl/lib:${DYLD_LIBRARY_PATH};` to the .travis.yml made pwsh pickup the correct libcurl. Now I just need to test that it doesn't break anything.\r\nhttps://travis-ci.org/markekraus/PowerShell/builds/311469327#L2912",
      "created_at": "2017-12-04T20:01:52Z",
      "updated_at": "2017-12-04T20:15:22Z"
    }
  ],
  "created_at": "2017-11-30T18:21:12Z",
  "number": 5590,
  "state": "closed",
  "title": "Tests related to `-SslProtocol` in web cmdlets are failing on macOS daily runs",
  "updated_at": "2017-12-06T20:20:45Z"
}