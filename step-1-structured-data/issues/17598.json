{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17598",
  "author": "jborean93",
  "body": "# PR Summary\r\n\r\nMigrates the WinTrust.dll functions to a common location and cleans them up.\r\nThis cleanup removes structs no longer used, unifies the patterns and location\r\nof the functions, utilises SafeHandle where possible, and avoids copying of\r\ndata where possible.\r\n\r\n## PR Context\r\n\r\nI was in the neighborhood of the authenticode cmdlets and found the PInvoke defs in a few locations and it contains a lot of manual marshaling of data which is inefficient and prone to memory leaks if not improperly disposed. The `nativeMethods.cs` file seems to be a dumping ground of functions with varying quality and standards and even some duplication with other locations. I am proposing putting all Win32 PInvoke defs in a single location under the `System.Management.Automation.Win32Native` namespace. It makes it hard to determine where to add new functions if needed as the file is quite large and definitions placed in various locations.\r\n\r\nThis PR sets up that framework and moves all the `WinTrust.dll` methods to this new location and tries to do the following with the various functions\r\n\r\n* Utilise `SafeHandle` for any `IntPtr` that needs to be freed (where possible)\r\n* Try and implement a nice wrapper that includes error handling for the PInvoke defs avoiding the caller always having to do so\r\n* Try and hide some of the unsafe/unmanaged handling in the exposed function (where feasible) simplifying what the caller has to do\r\n* Avoid using `Marshal.Copy` and `Marshal.AllocHGlobal` where possible in favour of `unsafe` to avoid unecessary memory copied and maintenance of unmanaged memory.\r\n\r\nIf this is accepted I hope to rip out the other functions in `nativeMethods.cs` and apply the same standards to those in the new namespace. For example I can add `Advapi32.cs` to the same folder that contains the methods from `Advapi32.dll` and so on. This can also mean a lot of the duplicated Win32 calls spread across the pwsh codebase can call one location rather than the multiple locations they are currently defined. It will also make some of the older definitions align with more common standards today/safer.\r\n\r\nIf you don't wish for something like this feel free to close the PR and I won't spend any more time on the next set of functions.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-08-08T22:49:29Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Reopen PR to re-trigger the CI runs.",
      "created_at": "2022-06-28T18:34:39Z",
      "updated_at": "2022-06-28T18:34:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-07-06T02:01:14Z",
      "updated_at": "2022-07-06T02:01:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jborean93 Can you please address the comments?",
      "created_at": "2022-07-18T19:14:22Z",
      "updated_at": "2022-07-18T19:14:22Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "My apologies, I probably won't have time to look at this until late next week.",
      "created_at": "2022-07-18T19:15:06Z",
      "updated_at": "2022-07-18T19:15:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "That's totally fine. In the meantime, hopefully @TravisEz13 can review this PR too.",
      "created_at": "2022-07-18T19:18:41Z",
      "updated_at": "2022-07-18T19:18:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-07-27T14:01:19Z",
      "updated_at": "2022-07-27T14:01:19Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Having a look at the test failures it seems like the windows failures are unrelated and are failing due to a service test, is this a known problem right now?\r\n\r\nThe CodeFactor failures seem to be problems with the existing code and while I can't guarantee I haven't added new ones I'm not sure whether you want to me to try and fix existing issues it picks up in the files touched or not.",
      "created_at": "2022-08-01T00:17:02Z",
      "updated_at": "2022-08-01T00:17:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jborean93 looking at the lines you changed, it would appears that the CodeFactor issues are for the existing code and there's no expectation that you would address those.  And if you wanted it, it should be a separate PR anyways.  Thanks.",
      "created_at": "2022-08-01T19:59:27Z",
      "updated_at": "2022-08-01T19:59:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I have retried the failed CI job for 3 times, and the following test was failing consistently. I'm not sure why it fails though -- the changed files don't seem to related to command prediction ... @jborean93 thoughts?\r\n\r\nhttps://dev.azure.com/powershell/PowerShell/_build/results?buildId=105685&view=logs&j=4e112c50-8af1-5990-e36e-68bf009ad4c4&t=3fd304fb-703c-5090-836a-1a0ec74985df&l=209\r\n```\r\nDescription: PSTests.Sequential.CommandPredictionTests\r\nName:        PredictInput\r\nmessage:\r\nThe collection was expected to contain a single element, but it was empty.\r\nstack-trace:\r\n   at PSTests.Sequential.CommandPredictionTests.PredictInput() in D:\\a\\1\\s\\test\\xUnit\\csharp\\test_Prediction.cs:line 151\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n \r\n1 tests failed\r\nAt D:\\a\\1\\s\\build.psm1:1673 char:5\r\n+     throw \"$($results.assemblies.assembly.failed) tests failed\"\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (1 tests failed:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : 1 tests failed\r\n```",
      "created_at": "2022-08-04T21:12:36Z",
      "updated_at": "2022-08-04T21:12:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "No I do not understand why the tests fail, I was getting failures around a `Get-Service` test before but that seems to have fixed itself and is now this problem. As you said, the [test](https://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/test/xUnit/csharp/test_Prediction.cs#L129) doesn't seem like it's related at all to the code that was changed so I have no idea what's going on.",
      "created_at": "2022-08-08T18:51:36Z",
      "updated_at": "2022-08-08T18:51:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/rebase",
      "created_at": "2022-08-08T19:13:38Z",
      "updated_at": "2022-08-08T19:13:38Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Large&color=red)\r\n\r\nThis PR has `1070` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Large\r\nSize       : +499 -571\r\nPercentile : 100%\r\n\r\nTotal files changed: 4\r\n\r\nChange summary by file extension:\r\n.cs : +499 -571\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3NTk4IiwiRXZlbnRUeXBlIjoiVGh1bWJzVXAifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3NTk4IiwiRXZlbnRUeXBlIjoiTmV1dHJhbCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3NTk4IiwiRXZlbnRUeXBlIjoiVGh1bWJzRG93biJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-08-08T19:17:47Z",
      "updated_at": "2022-08-08T19:17:47Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "So the current failure is what I saw before with a failure in the [Set-Service tests](https://github.com/PowerShell/PowerShell/blob/2eed0f5f0a508fe2033f27a6a3697045fed75378/test/powershell/Modules/Microsoft.PowerShell.Management/Set-Service.Tests.ps1#L268-L284) which also seem unrelated. The unit test from before seems to have passed.\r\n\r\nI don't know why it's happening but considering it's only happening with the changes here there must be something I did with the code. Unless someone knows what it might be I might just abandon this attempt as we don't want to inadvertently break something.",
      "created_at": "2022-08-08T19:48:42Z",
      "updated_at": "2022-08-08T19:48:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I saw the service test failure before, multiple times. I think the service test is not very stable.\r\nBut for the predictor test, it's the first time I saw it. If it fails again, I will investigate a bit more about it.",
      "created_at": "2022-08-08T21:00:10Z",
      "updated_at": "2022-08-08T21:00:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "After rebasing, the predictor test failure was gone. Will merge the PR.",
      "created_at": "2022-08-08T22:48:52Z",
      "updated_at": "2022-08-08T22:48:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jborean93 Thanks for doing this work!",
      "created_at": "2022-08-08T22:49:46Z",
      "updated_at": "2022-08-08T22:49:46Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the review everyone!",
      "created_at": "2022-08-08T22:55:26Z",
      "updated_at": "2022-08-08T22:55:26Z"
    }
  ],
  "created_at": "2022-06-28T12:19:37Z",
  "number": 17598,
  "state": "closed",
  "title": "Migrate WinTrust functions to common location",
  "updated_at": "2022-08-08T22:55:26Z"
}