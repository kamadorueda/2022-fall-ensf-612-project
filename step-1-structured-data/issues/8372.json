{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8372",
  "author": "IISResetMe",
  "body": "## PR Summary\r\n\r\nFix #8235, #7736\r\n\r\nPowerShell currently allows definition of class with overlapping property and method names without warning, like so:\r\n\r\n```powershell\r\nclass TestDuplicateMembers\r\n{\r\n  $A\r\n  A(){}\r\n}\r\n```\r\n\r\nUnlike the C# compiler (which throws a compilation error), we allow compilation of the above type definition, and ETS then implicitly hides the property behind the method at runtime - making the property implementation completely useless.\r\n\r\nThis change fixes that by making duplicate member name checks mutual between `DefineMethod()`/`DefineProperty()` - so that if a method with name `X` is already defined, an attempt to define property `X` will throw a `ParserError` (and vice versa) just like we already do for duplicate member names of the same member type\r\n\r\nTODO:\r\n - [X] ~~Regression tests~~\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n\r\n\r\nI'd consider this a bucket 3 breaking change (we'll start failing on defining types that are already broken but partially functional).\r\n\r\nChange is obviously user-facing but I don't believe it warrants a documentation update since the previous documentation doesn't address the existing buggy behavior",
  "closed_at": "2019-05-29T17:07:04Z",
  "comments": [
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Marked PR WIP to block merge since linked issue is still awaiting committee review",
      "created_at": "2018-11-30T15:27:07Z",
      "updated_at": "2018-11-30T15:27:07Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT can you include this (or the linked issue) in the next committee review?",
      "created_at": "2018-12-07T12:34:43Z",
      "updated_at": "2018-12-07T12:34:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@IISResetMe to set expectation, due to the holidays and unavailability of many committee members, this won't be reviewed until after the new year (and probably 2nd week of Jan at the earliest)",
      "created_at": "2018-12-20T01:53:56Z",
      "updated_at": "2018-12-20T01:53:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, although .Net allows this, no language supports it and PowerShell should not either.  It is a technical breaking change although unlikely any customer is dependent on this since they would have defined a duplicate name member and not have used it.  We agree PowerShell should prevent this and have a parse time error.",
      "created_at": "2019-01-16T23:21:07Z",
      "updated_at": "2019-01-16T23:21:07Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Thanks @SteveL-MSFT, will add regression tests for this then and we can move ahead! :) ",
      "created_at": "2019-01-17T11:00:45Z",
      "updated_at": "2019-01-17T11:00:45Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I think that was it! Do we need review from @daxian-dbw or @BrucePay still?",
      "created_at": "2019-01-18T14:24:17Z",
      "updated_at": "2019-01-18T14:24:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, we are waiting.",
      "created_at": "2019-01-18T14:33:15Z",
      "updated_at": "2019-01-18T14:33:15Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Can we turn off the \"variable name looks like hungarian notation\" rule ([SA1305](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1305.md)) flagged by CodeFactor? It's super noisy, and a cursory glance at S.M.A shows that we have over 900 parameter names alone that _look like_ hungarian notation to StyleCop, but I went through the list of name and only ~50 of them are actually named using hungarian notation:\r\n\r\n```powershell\r\nPS ~> $parameterNames = [psobject].Assembly.GetTypes().GetMethods().GetParameters().Name\r\nPS ~> $looksHungarian = $parameterNames -cmatch '^[a-z]{2,3}[A-Z]+'\r\nPS ~> $actuallyHungarian = $looksHungarian -notmatch '^(?:add|arg|ast|bad|do|eat|for|has|if|is|job|max|min|my|new|no|old|out|pre|ps|raw|run|set|sub|to|try|ui|use|yes)'\r\nPS ~> $looksHungarian.Count\r\n935\r\nPS ~> $actuallyHungarian.Count\r\n46\r\n```",
      "created_at": "2019-02-22T22:49:26Z",
      "updated_at": "2019-02-22T22:50:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe We already have a PR to disable some CodeFactor rules.",
      "created_at": "2019-02-23T17:41:45Z",
      "updated_at": "2019-02-23T17:41:45Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov are we still waiting for the build pipeline to be fixed (CodeFactor issues)? Or do I need to address anything?",
      "created_at": "2019-03-08T15:27:27Z",
      "updated_at": "2019-03-08T15:27:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe Feel free to ignore CodeFactor issues if they is not in your changed code. Maintainers will ask you to fix style issues before merge if they deem it necessary.",
      "created_at": "2019-03-08T15:44:58Z",
      "updated_at": "2019-03-18T12:23:25Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-17T12:33:06Z",
      "updated_at": "2019-04-17T12:33:06Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw can you review this? :)",
      "created_at": "2019-04-17T12:36:02Z",
      "updated_at": "2019-04-17T12:36:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@IISResetMe Sure, will do the review today.",
      "created_at": "2019-04-17T15:59:43Z",
      "updated_at": "2019-04-17T15:59:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@IISResetMe Your change doesn't fix the case where class A derives from class B:\r\n```\r\nclass Bar { $c }\r\nclass Foo : Bar { c() {} }\r\n$s = [Foo]::new()\r\n$s.c()\r\n\r\nMethod invocation failed because [Foo] does not contain a method named 'c'.\r\nAt line:1 char:1\r\n+ $s.c()\r\n+ ~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : MethodNotFound\r\n```\r\nBut to be honest, I don't know if it's worth the effort to fix that ...",
      "created_at": "2019-04-18T22:51:02Z",
      "updated_at": "2019-04-18T22:51:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe are you gonna take that sitting down? :smile:\r\n\r\nThat does look like a very interesting case to try to figure out, though. Kind of looks like it might be a bit of a maze of recursively checking inherited members... Fun times!",
      "created_at": "2019-04-18T23:47:56Z",
      "updated_at": "2019-04-18T23:48:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@IISResetMe worked on something similar before -- flatten all implemented interfaces.\r\nI know we need to fix the inheritance scenario for the sake of completeness, but personally, I just don't feel it's worth to do it ... :) because it will impose a lot more checks on most of the usages that actually don't need those checks at all.",
      "created_at": "2019-04-19T00:34:49Z",
      "updated_at": "2019-04-19T00:38:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, that's right, he _did_. Should be a walk in the park, then. \ud83d\ude09 \r\n\r\nBut I get where you're coming from too, it _might_ not be worth it... but then again, it might end up being necessary -- after all, one of those members you're accidentally hiding might come from up the inheritance chain quite a ways, and it could potentially be very confusing if you hit _that_ by accident.\r\n\r\nCould this happen if you attempted to inherit from two disparate classes? Do PS classes even support that? \ud83e\udd14 ",
      "created_at": "2019-04-19T00:49:01Z",
      "updated_at": "2019-04-19T00:49:58Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> Could this happen if you attempted to inherit from two disparate classes? Do PS classes even support that? \r\n\r\nNo, and I can't think of a language that compiles against .NET that does... Multiple inheritance opens up a _whole new can of worms_ wrt member resolution ambiguity, so maybe let's not try and solve that as part of this PR ^__^\r\n\r\n@daxian-dbw we can indeed leverage the same approach as with the interface flattening code for this. The extra lookups would be dependent on the user specifying a base class so it doesn't have to be super expensive for types that just inherit from Object. Will take a stab at it over the weekend",
      "created_at": "2019-04-19T09:06:49Z",
      "updated_at": "2019-04-19T09:06:49Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah, [the CLR doesn't support multiple inheritance, even for C++](https://stackoverflow.com/a/6258236)",
      "created_at": "2019-04-19T16:16:31Z",
      "updated_at": "2019-04-19T16:16:31Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-05-19T16:57:29Z",
      "updated_at": "2019-05-19T16:57:29Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically closed because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-05-29T17:07:03Z",
      "updated_at": "2019-05-29T17:07:03Z"
    }
  ],
  "created_at": "2018-11-30T13:44:42Z",
  "number": 8372,
  "state": "closed",
  "title": "Prevent member name collisions in PowerShell classes",
  "updated_at": "2019-05-29T17:07:04Z"
}