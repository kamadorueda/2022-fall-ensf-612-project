{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14791",
  "author": "iRon7",
  "body": "An ordered dicitionary doesn't support numeric keys like a hash table does.\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$HashTable = @{ 1 = 'a' }\r\n$Ordered = [Ordered]@{ 1 = 'a' }\r\n\r\n$HashTable.1\r\na\r\n$Ordered.1\r\na\r\n\r\n$HashTable[1]\r\na\r\n$Ordered[1] # Actual: empty result, Expected: a\r\n\r\n$HashTable.2 = 'b'\r\n$Ordered.2 = '2'\r\n\r\n$Hashtable[2] = 'b'\r\n$Ordered[2] = 'b' # Causes an error\r\n```\r\n> **OperationStopped: Specified argument was out of the range of valid values. (Parameter 'index')**\r\n\r\nNote that syntaxes with dynamic properties, (like `$Two = 2; $Ordered.$Two`) should be avoided as they are subject to possible access injection via dynamic member access.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.1\r\nPSEdition                      Core\r\nGitCommitId                    7.1.1\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-02-15T09:31:58Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The _positional index_ overload for the parameterized `Item` property underlying the `[...]` syntax takes precedence in the case of `[int]` keys, because it is an exact match:\r\n\r\n```powershell\r\nPS> $Ordered | Get-Member Item\r\n# ...\r\nItem ParameterizedProperty System.Object Item(int index) {get;set;}, System.Object Item(System.Object key) {get;set;}\r\n```\r\n\r\nYou can use an `[object]` cast to explicitly select the _key-lookup_ overload.\r\n(With other numeric key types, such as `[uint32]`, you'll always have to pass the exact type anyway, as usual, and there's no ambiguity, due to positional indices always being `[int]`-typed).\r\n\r\n```powershell\r\nPS> ([ordered] @{ 42 = 'forty-two' })[[object] 42]\r\nforty-two\r\n```\r\n",
      "created_at": "2021-02-13T13:13:00Z",
      "updated_at": "2021-02-13T13:21:44Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0, Thanks for the answer.\r\n\r\n> The positional index overload for the parameterized Item property underlying the [...] syntax takes precedence in the case of [int] keys, because it is an exact match:\r\n\r\nIt took a while to see the implication (as I was always trying a higher number then the dictionary size, I never seen anything returned so far). But this is what it means:\r\n\r\n```\r\n([ordered] @{ 42 = 'forty-two' })[0]\r\nforty-two\r\n```",
      "created_at": "2021-02-15T09:31:58Z",
      "updated_at": "2021-02-16T15:57:12Z"
    }
  ],
  "created_at": "2021-02-13T09:09:04Z",
  "number": 14791,
  "state": "closed",
  "title": "[Ordered] doesn't fully support numeric keys ",
  "updated_at": "2021-02-22T19:25:19Z"
}