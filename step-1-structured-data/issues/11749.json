{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11749",
  "author": "mklement0",
  "body": "Note: Supporting this would be syntactic sugar, but it _is_ already supported with `System.Collections.ArrayList`'s generic counterpart, `System.Collections.Generic.List<T>`, as well as with regular arrays (e.g, `Object[]`) and even other colllections (e.g., `System.Collections.ObjectModel.Collection<T>`).\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# These tests pass and create a single-element collection from the input scalar;\r\n# By  contrast, casting from an *array* (e.g., `[System.Collections.ArrayList] (42, 43)`) \r\n# works in *all* cases.\r\n{ [array] 42 } | Should -Not -Throw\r\n{ [System.Collections.Generic.List[int]] 42 } | Should -Not -Throw\r\n{ [System.Collections.ObjectModel.Collection[int]] 42 } | Should -Not -Throw\r\n\r\n# This test fails.\r\n{ [System.Collections.ArrayList] 42 } | Should -Not -Throw\r\n```\r\n\r\n# Expected behavior\r\n\r\nAll tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe last test fails, because among the types used only `System.Collections.ArrayList` doesn't support casting from a single value.\r\n\r\n```none\r\nCannot convert the \"42\" value of type \"System.Int32\" to type \"System.Collections.ArrayList\"\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Since `ArrayList` is [officially not recommended](https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netframework-4.8#remarks) does it make sense to add improvements for it?",
      "created_at": "2020-02-01T13:53:26Z",
      "updated_at": "2020-02-01T13:53:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think not worth it\r\n",
      "created_at": "2020-02-01T14:20:09Z",
      "updated_at": "2020-02-01T14:20:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good to know about the official deprecation notice, @SeeminglyScience.\r\n\r\nHowever, people will likely continue to use it (what they usually care about is efficient iterative growth, not type homogeneity, and `[System.Collections.Generic.List[object]]` is a keyboardful, even though it is better behaved), and the - situational - inconsistency described here will continue to cause confusion.\r\n\r\nTherefore, _if it is a reasonably quick and simple fix_, my vote is to do it. It is the kind of issue that trips you up in practice, but isn't big enough to warrant documenting.\r\n\r\n---\r\n\r\nLooking at the bigger picture, this takes us back to how it would be nice to have a well-behaved list type that is a first-class citizen (#5643), and perhaps even `+=` support for mutable collections (#5805).\r\n",
      "created_at": "2020-02-01T14:29:39Z",
      "updated_at": "2020-02-01T14:31:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Good to know about the official deprecation notice, @SeeminglyScience.\r\n\r\nSorry I should have been more explicit, but it *is not necessarily* deprecated.  Just recommended against.\r\n\r\n> However, people will likely continue to use it (what they usually care about is efficient iterative growth, not type homogeneity, and `[System.Collections.Generic.List[object]]` is a keyboardful, even though it is better behaved), and the - situational - inconsistency described here will continue to cause confusion.\r\n\r\nIf it is efficiency they're after, I highly doubt `ArrayList` is getting the same improvements that go into `List<T>`.  Plus having to null the output of `Add` has some overhead and imo makes it more cumbersome than `List<T>`.\r\n\r\nMainly though, if an API is not recommended, and there is a clear alternative, making it *easier* to use seems counter productive.\r\n\r\n> Looking at the bigger picture, this takes us back to how it would be nice to have a well-behaved list type that is a first-class citizen (#5643), and perhaps even `+=` support for mutable collections (#5805).\r\n\r\nThe topic of `+=` being mapped to `Add` is a mixed bag imo.  It would be the only case (I think) of an assignment operator not *actually* assigning something.  Even with PowerShell's custom array addition, you're still assigning the new array. Same with C# and delegates.  It's always `LHS = LHS + RHS` and this would change that.  Is that a problem though? \ud83e\udd37\u200d\u2642 \r\n\r\nActually now that I think about it C# does it for event handlers, where it calls the `add_` accessor.  So maybe there's precedent.",
      "created_at": "2020-02-01T14:56:28Z",
      "updated_at": "2020-02-01T14:56:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Mainly though, if an API is not recommended, and there is a clear alternative, making it easier to use seems counter productive.\r\n\r\nAgreed in general, but this is more of a _bug fix_ than an improvement.\r\n\r\nTo put it differently: Leaving the inconsistency no more encourages users to abandon `ArrayList` than fixing would promote its (ill-advised) continued use:\r\n\r\n`[System.Collections.ArrayList] 42` not working is (a) likely to make you work around it with `[System.Collections.ArrayList] @(42)`, and, conversely, (b) does nothing to alert you to the fact that you should be using `[System.Collections.Generic.List[object]] 42` instead.\r\n\r\n(Not having to worry about `.Add()` polluting your output stream is a much more compelling reason, by contrast, but the challenge in both cases is that you have to _know_ about the alternative.)\r\n\r\nThe net effect of the current behavior is just a situational-and-therefore-perfidious inconsistency that is a nuisance in practice, hence my recommendation to fix it.\r\n\r\nBut enough about that: we now know the pros and cons, and it is clearly not a big issue in the grand scheme of things:\r\n\r\nIf consensus forms around this assessment and someone is knowledgeable enough to fix this quickly and safely, I'm hoping they will.\r\n\r\nI do find the tangent re better built-in list support interesting, so I'll say more about that in a separate comment.\r\n\r\n",
      "created_at": "2020-02-01T17:24:15Z",
      "updated_at": "2020-02-01T18:13:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "(Tangent-only alert.)\r\n\r\n> The topic of `+=` being mapped to `.Add()` is a mixed bag imo. It would be the only case (I think) of an assignment operator not _actually_ assigning something.\r\n\r\nI agree that that would be problematic; @PetSerAl  originally voiced the concern and proposed implementing a specialized list type that doesn't violate the equivalence of `$a += $b` and `$a = $a + $b` while still performing well (though reference equality would not be maintained) - see https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-367866807.\r\n\r\nThe C# `+=` syntax for adding event delegates is indeed an interesting anomaly.\r\n\r\n> Even with PowerShell's custom array addition, you're still assigning the new array.\r\n\r\nYes, but for users not concerned with reference equality that usually isn't a _functional_ problem - but with high iteration counts becomes a _performance_ concern.\r\n\r\nAdditionally, what's tricky about `+=` currently is that it quietly converts a non-array collection type to an `[object[]]` array, which adds quiet loss of type fidelity to the performance concern:\r\n\r\n```powershell\r\n$var = [System.Collections.Generic.List[object]] 42\r\n$var += 43 # creates a *copy* of the list *as an array*, with the new element appended.\r\n$var.GetType().Name   # -> 'Object[]' !!\r\n```\r\n\r\nSuggesting that `+=` be mapped to `.Add()` is seductive (it was the _starting point_ of #5805), but ultimately too problematic. \r\n\r\nIn light of that, the best that could be done with `+=` for non-array LHS values is to create copies _as the LHS type_ rather than as an array (which wouldn't address the _performance_ concerns and may not always be possible).\r\n\r\nFor a potential future built-in `[list]` type, @PetSerAl's proposal strikes me as the best way forward.\r\n\r\nI suggest continuing the conversation at #5805.\r\n\r\n",
      "created_at": "2020-02-01T18:12:07Z",
      "updated_at": "2020-02-01T18:12:07Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0  This does sound like a bug. I would have expected the cast to work on anything that implements `IList`.\r\n\r\nSeparately, with respect to `+=` the solution might be to use [persistent data structures](https://en.wikipedia.org/wiki/Persistent_data_structure) (which are totally not what they sound like.) They are used in extensively in [Clojure](https://clojure.org/) and are quite performant. With persistent data structures, it should be possible to preserve the semantic while getting a significant performance gain.",
      "created_at": "2020-02-02T01:52:50Z",
      "updated_at": "2020-02-02T01:52:50Z"
    }
  ],
  "created_at": "2020-02-01T13:37:24Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 11749,
  "state": "open",
  "title": "Casting a scalar (single value) to System.Collections.ArrayList fails",
  "updated_at": "2020-02-02T01:52:50Z"
}