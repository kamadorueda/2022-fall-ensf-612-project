{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7190",
  "author": "rkeithhill",
  "body": "We should consider updating `Set-Location` to not require quotes for paths.  If I fire up CMD.exe I can do this:\r\n```\r\nC:\\Users\\hillr>cd c:\\program files\r\n\r\nc:\\Program Files>\r\n```\r\nbut in PS Core this fails:\r\n```\r\n06-26 15:56:33 1> cd c:\\program files\r\nSet-Location : A positional parameter cannot be found that accepts argument 'files'.\r\n```\r\nSet-Location takes only a single path.  It would be nice if a user could type the path without having to quote the path.  \r\n\r\nI imagine this would have to be its own parameter set as I'm not sure how this feature would work in the presence of parameters like -PassThru or -StackName.  But I think far and away the common use case is someone wanting to `cd c:\\program files`, `cd c:\\program files (x86)` or `cd ~\\Visual Studio 2017`.  Not sure how that `(x86)` bit would work out given that PS will think that starts an expression.  Hmm...\r\n",
  "closed_at": "2018-06-29T23:50:04Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While I'm personally always happy to throw off the shackles of unnecessary quotes, I don't think it's a good idea in this case:\r\n\r\n* It encourages \"fuzzy thinking\" with respect to argument-mode syntax, which can get in the way when using other cmdlets.\r\n\r\n* As time goes on, the need to make seasoned `cmd.exe` users comfortable will go away.\r\n\r\n---\r\n\r\nAs for easing the pain:\r\n\r\n* Tab-completion helps to an extent - e.g., `cd C:\\Program<tab>` - but if you want to type a prefix that includes _spaces_ before pressing `<tab>`, there is no way around knowing that you need to `` ` ``-escape such spaces, e.g., ``cd C:\\Program` <tab>``\r\n\r\n* For special folders such as `C:\\Program Files` and `C:\\Program Files (x86)`, a namespace with symbolic identifiers (which by definition do not contain spaces and therefore do not need quoting) could help; e.g.,\r\n`cd $sf:ProgramFiles` or `cd $sf:ProgramFilesX86` for changing to the locations that are `C:\\Program Files` and `C:\\Program Files (x86)`, respectively, in a default Windows installation.\r\n\r\n  * As it turns out, someone has already suggested that: #6966\r\n\r\n",
      "created_at": "2018-06-29T03:38:30Z",
      "updated_at": "2018-06-29T03:38:30Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "I would prefer consistency with other cmdlets and parameters. If I discovered I could pass a Path to `cd` without quotes, then I would think it would be ok to do that with other cmdlets that take a Path parameter. For that matter, why not be able to do it with passing arguments to executables or when using `Start-Process`.\r\n\r\nMastering of quotes is so crucial to those other functions that I think adding a special case just makes things more confusing.\r\n\r\n",
      "created_at": "2018-06-29T22:11:11Z",
      "updated_at": "2018-06-29T22:11:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Upon further reflection (and reading over issue feedback), I believe I should just close this.  The biggest mitigation is tab-completion supplying the quotes.  Plus I'm really not sure how you'd handle an unquoted `(x86)`  That would be interpreted as an expression which tries to invoke the command `x86`.  No bueno.",
      "created_at": "2018-06-29T23:50:04Z",
      "updated_at": "2018-06-29T23:50:04Z"
    }
  ],
  "created_at": "2018-06-27T01:01:17Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered",
    "WG-Cmdlets-Management"
  ],
  "number": 7190,
  "state": "closed",
  "title": "Add support for cd (Set-Location) to path with spaces without requiring quotes",
  "updated_at": "2018-07-24T05:46:01Z"
}