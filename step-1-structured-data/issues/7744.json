{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7744",
  "author": "felixfbecker",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\n`ESC` `]` aka `OSC` (operation system control) sequences are used in terminals to control things like the terminal window, or insert hyperlinks.\r\n\r\nFrom wikipedia:\r\n\r\n> Starts a control string for the operating system to use, terminated by ST.[14]:8.3.89 In xterm, they may also be terminated by BEL.[15] In xterm, the window title can be set by `OSC 0;this is the window title BEL`.\r\n\r\nThe sequence is followed by plain characters and terminated by `ST`/`BEL`. The plain characters are not shown to the user, they are interpreted by the terminal, therefor they should not be considered for line wrapping or truncation, but PowerShell does so.\r\n\r\nThis affects values in table format, group headers, etc.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nRun this a PowerShell terminal:\r\n\r\n```powershell\r\n@{ test = \"`e]8;;https://github.com/PowerShell/PowerShell#this_is_a_very_long_link_to_show_the_problem_with_osc_sequences`aThis is the link text which should not be truncated`e]8;;`a\" }\r\n```\r\n\r\nThe OSC sequence used here as an example creates a hyperlink (works in iTerm2 and Gnome terminal, and will only show the link text in terminals without support).\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nOutput (make sure the resize the terminal so that the text *should* fit on the screen):\r\n```none\r\nName                           Value\r\n----                           -----\r\ntest                           This is the link text which should not be truncated\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nText gets truncated:\r\n```none\r\nName                           Value\r\n----                           -----\r\ntest                           This is the link text wh...\r\n```\r\nThe amount of text truncated depends on the terminal size of course, but the point is it should not get truncated at all if it fits on the screen.\r\n\r\nIf you use a string without an OSC sequence, it will not get wrapped:\r\n\r\n```powershell\r\n@{ test = \"This is the link text which should not be truncated\" }\r\n```\r\n\r\nWhat's worst is that through truncation PowerShell can cut off the escape sequence terminator, making the sequence apply to all following terminal output (e.g. everything becomes the hyperlink).\r\n\r\nThis affects values in tables as shown, but also group headers:\r\n\r\n```\r\ngithub.com/sourcegraph/sourcegraph-classic > app/node_modules/jest-cli/node_modu\r\nles/optimist/example/usage-options.js\r\n\r\n\r\nLine Preview\r\n---- -------\r\n  18 console.log('\\n\\nInspecting options');\r\n\r\n\r\ngithub.com/sourcegraph/sourcegraph-classic > app/node_modules/jsfmt/node_m\r\nodules/docopt/examples/any_options_example.coffee\r\n\r\n\r\nLine Preview\r\n---- -------\r\n   1 doc = \"\"\"Example of program which uses [options] shortcut in pattern.\r\n   4   any_options_example.coffee [options\r\n   6 Options:\r\n```\r\n\r\nNote the wrongly wrapped the group headers (the links are also broken because of this).\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.4\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.4\r\nOS                             Darwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov why is this `Issue-Discussion` and not `Issue-Bug`?",
      "created_at": "2018-09-10T12:26:56Z",
      "updated_at": "2018-09-10T12:26:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@felixfbecker I don't see the problem on Windows. On WSL a console is frozen. I haven't MacOs to test.\r\nWe need more info. I don't know if the issue related with escapes.",
      "created_at": "2018-09-10T13:19:36Z",
      "updated_at": "2018-09-10T13:19:36Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I would bet the issue also happens in Linux, did you try a VM? I am almost certain it's caused by the escapes, because the point where truncation occurs is in direct relation to how long the link text inside the escape sequence is.\r\nBuilds are run on macOS/Linux, right? If there are unit tests for the truncation behaviour, maybe it would be possible to write a failing test?",
      "created_at": "2018-09-10T13:33:58Z",
      "updated_at": "2018-09-10T13:33:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Have you time to look the Issue on Linux/MacOs? Does escapes really affect?",
      "created_at": "2018-09-10T14:30:29Z",
      "updated_at": "2018-09-10T14:30:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While I haven't dug deep, there is definitely _something_ going on with respect to escape sequences, and it affects _all_ platforms:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e[32mgreen`e[m\" } | ft -property @{ e='test'; width = 5 }\r\n``` \r\n\r\nThe above the string `green` in green, as expected, on Windows, macOS, Linux (Ubuntu).\r\nThat is, the length of the string is correctly recognized as 5, despite the presence of the escape sequences, which are seemingly ignored in _this_ case.\r\n\r\nThings go awry if you force truncation, however, simply by lowering the width to 4:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e[32mgreen`e[m\" } | ft -property @{ e='test'; width = 4 }\r\n``` \r\n\r\nThis _should_ render `\"g...\"`, and that's what it does _without_ escape sequences, but with them present what is rendered is the equivalent of ``\"`e...\"`` - i.e., the very first character in the string is blindly used, without regard to whether it is part of an escape sequence or not.\r\n\r\nHow that renders depends on the platform / terminal application, but it's definitely broken.\r\n\r\nBecause the partial escape sequence doesn't succeed in changing the color in this case, there are no aftereffects, but, as in @felixfbecker's example, if a complete _start_ escape sequence happens to be rendered, but not its complementary _end_ sequence, effects, such as color changes, _linger_ - and solving that problem generically sounds nontrivial.\r\n\r\nFor instance, the following will print `gr...` in green _and persistently switch to green output_, because the sequence that turns green _off_, `` e[m ``, is not sent to the terminal:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e[32mgreen, green grass of home`e[m\" } | ft -property @{ e='test'; width = 10 }\r\n``` \r\n\r\n\r\n\r\n",
      "created_at": "2018-09-12T03:26:24Z",
      "updated_at": "2018-09-12T03:26:24Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I don't think the following is a valid terminating seq:\r\n```\r\n \"`e[m\"\r\n```\r\nTry using:\r\n```\r\n\"`e[0m\"\r\n```\r\n",
      "created_at": "2018-09-12T03:44:17Z",
      "updated_at": "2018-09-12T03:44:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill: The `0` is optional; try the following (on any supported platform):\r\n\r\n```powershell\r\n\"before `e[32mgreen`e[m after\"\r\n```",
      "created_at": "2018-09-12T03:47:18Z",
      "updated_at": "2018-09-12T03:47:18Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yeah, now I see the line in the [docs](https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#text-formatting) that I missed:\r\n\r\n> When no parameters are specified, it is treated the same as a single 0 parameter.\r\n\r\nGood to know.",
      "created_at": "2018-09-12T03:53:04Z",
      "updated_at": "2018-09-12T03:53:18Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, truncated text including opening escapes but possibly truncating the closing escapes is another problem, but I would say only loosely related to this issue.\r\n\r\nYour experiment above seems to show that _length_ is _not_ a problem for _color_ escape codes, but the issue description shows that it _is_ a problem for OSC sequences. Perhaps PowerShell recognizes and filters ESC[ sequences (which are terminated with m), but not ESC]8 sequences (which are terminated with ST/BEL).",
      "created_at": "2018-09-12T09:34:54Z",
      "updated_at": "2018-09-12T09:34:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point about the distinction between color codes and OSC sequences, @felixfbecker, and I think your guess about PowerShell not recognizing the latter is correct:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e]8;;http://example.org`aexample.org`e]8;;`a\" } | ft @{ e='test'; width = 11 }\r\n```\r\n\r\nThe above breaks, even though `11` is exactly the length of `example.org`, and it only renders correctly with a minimum width of `41`, which is the raw character count of the string _including_ escape sequences.\r\n\r\nI've opened a separate issue for the end-escape-sequence-not-getting-output problem: #7767\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-09-12T13:39:44Z",
      "updated_at": "2018-09-12T13:39:44Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "cc @SteveL-MSFT @TravisEz13 \t",
      "created_at": "2018-09-20T17:36:10Z",
      "updated_at": "2018-09-20T17:36:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Given the support of VT100 in Windows Console, I expect more use of escape sequences.  Looks like the formatting system needs to be more aware of this.",
      "created_at": "2018-09-20T21:41:24Z",
      "updated_at": "2018-09-20T21:41:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I think this would be a new feature not a fix to an existing feature.  I think this would also probably require an RFC.  I'm not sure embedding the raw control sequences is the way we would want to support this.\r\n\r\nBTW, this kind of works for me.\r\n```powershell\r\n@{ test = \"`e]8;;https://github.com/PowerShell/PowerShell#this_is_a_very_long_link_to_show_the_problem_with_osc_sequences`aThis is the link text which should not be truncated`e]8;;`a\" } | ft -AutoSize -Wrap\r\n```\r\n",
      "created_at": "2018-09-20T21:43:48Z",
      "updated_at": "2018-09-20T21:43:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 it may make sense to have some syntactic sugar making it easier for novice users to leverage vt100 escape sequences, but we can't prevent users from embedding them and I see it more and more already now that Win10 supports it.",
      "created_at": "2018-09-20T23:31:15Z",
      "updated_at": "2018-09-20T23:31:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The problem with this argument is this issue is expecting both us and the console to format this string (at least for this issue.) Our formatting code would have to effectively render this to be able to format it into a table, then send a modified string to the console, all while expecting us to honor the intent of the escape sequences.  I think this particular item, would be better implemented by sending some equivalent markdown to `Show-Markdown`  (assuming it returns an object that the format commands can understand) and then rendering than with `format-table`.\r\n\r\nPerhaps, with more style settings to override the control code we use to render links.",
      "created_at": "2018-09-21T00:04:02Z",
      "updated_at": "2018-09-21T00:04:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> we can't prevent users from embedding them and I see it more and more already now that Win10 supports it.\r\n\r\nI think too that we should think about enhancement of PowerShell console host to support advanced rendering features like coloring. We need this for help system, markdown rendering, syntax coloring in command line (PSReadline) and so on\r\n\r\nMarkdown standard say nothing about colors. We would have to do our custom enhacement. Or maybe better to use a HTML render. HTML looks more promising for text console and GUI.",
      "created_at": "2018-09-21T04:28:07Z",
      "updated_at": "2018-09-21T04:28:07Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I dont see how Show-Markdown helps with this. It returns a string with VT sequences that is subject to the same wrapping and truncation problems.\r\n\r\nIt\u2019s true that PowerShell needs to become smarter about escape sequences. PowerShell is _not_ just a byte stream shell like other shells, it is an object shell, and therefor also takes the responsibility of _formatting_ objects into byte streams. Part of that is wrapping and truncating strings. For that, you need to know the _user-visible_ length of a string as the terminal would render it, which means you need to be aware of VT seuqences. It\u2019s not difficult to detect them, because it\u2019s not a context-free language like HTML with nested balanced tags that you would have to parse, it\u2019s a simple state machine. You can probably detect them with regular expressions.\r\n\r\nNow, the second related problem is, how does PowerShell prevent that a truncated string didn\u2019t open VT sequences that were closed in the truncated part and now leak into all following output. One way is that it could detect sequences and close them.\r\n\r\nThe other big alternative would be for PowerShell to not allow VT sequences in strings to be output raw, but sanitize/render them, e.g. replacing the ESC byte with the symbol \u201c\u241b\u201d. Since it\u2019s important that we have the capability to output escapes, PowerShell would then have to add other capabilities to Format files to output color. For example, there could be an attribute sanitize=\u201cfalse\u201d on ScriptBlock to allow the output of escapes, and element <Append> that allows to _always_ append a string even if the string gets truncated, which can be used for the user to specify closing sequences. This option would however break native commands that output VT sequences, because they output strings.\r\n\r\nPowerShell could also introduce a new type, VTEncodedString, that can be returned in those scriptblocks and does not get sanitized, but the truncation/closed tag issue would remain.\r\n\r\nIt\u2019s also possible that PowerShell adds tags to Format files to color parts, like <color name=\u201cred\u201d></color>. But that would not work for the contents returned by a scriptblock (imagine coloring something complex like a git diff).\r\n\r\nConsidering all options, I think PowerShell should bite the bullet, become aware of VT escapes and properly count/close them.",
      "created_at": "2018-09-21T08:14:40Z",
      "updated_at": "2018-09-21T08:14:40Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Also, this issue suggests that PowerShell _already_ has knowledge about escape sequences: https://github.com/PowerShell/PowerShell/issues/7570\r\n\r\n> Since PowerShell now has support for ignoring VT escape sequences (such as those for setting colors) to be ignored while calculating the widths of columns, this works (needs PowerShell 6 for `e):\r\n\r\nIt's just that it seems to only handle color sequences, but not OSC sequences.",
      "created_at": "2018-09-21T16:24:49Z",
      "updated_at": "2018-09-21T16:25:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed; just to recap the simpler demonstration from above:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e[32mgreen`e[m\" } | ft -property @{ e='test'; width = 5 }\r\n```\r\n\r\nThe fact that this renders correctly demonstrates that the escape sequences were ignored for the width (length) calculation.",
      "created_at": "2018-09-21T16:53:20Z",
      "updated_at": "2018-09-21T16:53:20Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@felixfbecker I agree with most of the points you make in https://github.com/PowerShell/PowerShell/issues/7744#issuecomment-423452538, but this calls out my point that this is a new feature that requires a design (which these comments start) and by our process an RFC to take comments on that design.",
      "created_at": "2018-09-21T17:51:26Z",
      "updated_at": "2018-09-21T17:51:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I took a look at the code and don't see anywhere where it's aware of vt100 escape sequences in format and output.  I think your example happens to work by chance.  If you change the width to 4, ideally it should have rendered `g...`, but instead renders nothing.",
      "created_at": "2018-09-21T20:00:13Z",
      "updated_at": "2018-09-21T20:00:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @SteveL-MSFT - can you point us to the source code?\r\n\r\nWhat it outputs with width 4 is ``\"`e...\"``, i.e., it blindly takes the first 4 chars., as previously stated - different terminal programs just happen to render that differently - on Windows nothing prints visibly, but that indeed suggests a lack of escape-sequence awareness at least with respect to _truncation_, as previously stated and reported in #7767.\r\n\r\n@joeyaiello, can you please remove the `OS-macOS` label? While the symptoms differ, the issue at hand is definitely a problem on all supported platforms.\r\n\r\nI really hope we can solve the problem for both width calculation and truncation (without having to resort to an encoded output form, as @felixfbecker mentions as an alternative) , although the latter sounds challenging.\r\n\r\nTo summarize, the two related challenges are:\r\n\r\n* Only _printable_ (user-visible) characters in a VT-encoded string must be counted, for proper column-width / wrapping / truncation calculations\r\n\r\n* If truncation must be applied (based on the correct, printable character count) and that truncation - whose position must be calculated based on the printable characters - falls  _inside_ a _pair_ of escape sequences, the closing half of the pair must be emitted too (unlike what I pondered in #7767, emitting some sort of generic _reset_ sequence, if available, is suboptimal)\r\n   * The challenge is not only to recognize all those pairs, but that they can be _nested_ too; consider the following example:\r\n\r\n```powershell\r\n[pscustomobject] @{ test = \"`e]8;;http://example.org`aexample.`e[32morg`e[m`e]8;;`a\" }\r\n```\r\n\r\nIn terminals that support it, that renders a link, with part of the link _label_ - `org` - rendered in a different color. If truncation were to fall inside that colored part, you'd need _two_ closing sequences.\r\n\r\n\r\n",
      "created_at": "2018-09-21T22:37:02Z",
      "updated_at": "2018-09-21T22:37:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I haven't spent much time thinking how to fix this, but the relevant code should be in \r\n [ComplexWriter.cs](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/FormatAndOutput/common/ComplexWriter.cs).  It seems that escape sequences should never be truncated, but we can avoid the complexity of calculating a closing sequence by always resetting the console between columns.",
      "created_at": "2018-09-21T23:02:22Z",
      "updated_at": "2018-09-21T23:02:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the source-code link, @SteveL-MSFT.\r\n\r\n> but we can avoid the complexity of calculating a closing sequence by always resetting the console between columns.\r\n\r\nThat is certainly preferable to accidentally leaving styles linger, and perhaps that's the best we can do, but note that properly paired closing sequences at least sometimes make for a better user experience: for instance, in the hyperlink example in the initial post, it would be nice if you still ended up with a working link even if the link _label_ gets truncated; using a generic reset sequence won't give you that - if there even _is_ such a generic sequence (at this point we only what it is for _colors_ and styles such as underlining, namely `` `e]m ``)\r\n",
      "created_at": "2018-09-22T00:10:04Z",
      "updated_at": "2018-09-22T00:11:57Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "The strategy used by [DbgShell](https://github.com/Microsoft/DbgShell)'s custom, VT100 color-aware formatting engine (which predates conhost support) is to simply preserve all escape sequences when truncating ([code here](https://github.com/Microsoft/DbgShell/blob/52f5edda36b435f4f18703b9b2ae816fb47dc901/DbgProvider/internal/CaStringUtil.cs#L267)).",
      "created_at": "2018-11-20T17:05:42Z",
      "updated_at": "2018-11-20T17:05:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The simple solution would be to strip all VT100 escape codes with a regex before calculating string lengths.  However, it won't work right when a cell spans multiple rows, but we can defer that as an edge case.",
      "created_at": "2018-11-21T05:46:30Z",
      "updated_at": "2018-11-21T05:46:30Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "> The simple solution would be to strip all VT100 escape codes with a regex before calculating string lengths.\r\n\r\nIt depends what you are doing. If you are going to leave escape sequences out of the content when displaying it as well, that's fine. But if you want to leave escape sequences in, *and* you want to truncate, it won't work.\r\n\r\nSuppose you have a string with Length 31, and you strip escape sequences, and now its Length is 25. You need to fit it into a cell that is 20 chars wide... where do you cut the string? If you leave the sequences in, and just blindly omit the chars from `str[20]` on, you might end up with less than 20 chars of content, and possibly garbage at the end (if you chopped in the middle of an escape sequence).\r\n\r\nSo in general, my strategy is not only to leave escape sequences out when calculating *content* width, but also to be escape-sequence-aware when truncating strings. (So if I need to fit a string into a cell 20 chars wide, I might actually end up with a string of Length == 24, because the display width will be 20.)",
      "created_at": "2018-11-23T23:01:46Z",
      "updated_at": "2018-11-23T23:01:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I do like the idea of leaving the escape sequences while being _content_-length-aware, @jazzdelightsme, because it gives us the best of both worlds:\r\n\r\n* proper truncation based on the count of *visible* characters\r\n* without sacrificing the intended visual effect of the escape codes, such as rendering colors, or even hyperlinks, as in this case.\r\n\r\nThe caveats are:\r\n\r\n* There are many more types of escape sequences beyond SGR (colors, styles, ...) and OSC (e.g., hyperlinks) - see https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences:\r\n\r\n  * They must _all_ be recognized in order to know what's visible content.\r\n\r\n  * Ideally, some of them should still be _stripped_, because they are pointless as part of formatted output; for instance, retaining the escape sequence in ``@{ hi=\"`ec\" } | Format-List`` is pointless, because `` `ec ``, the so-called RIS sequence, resets the entire terminal and clears the screen. The same goes for CSI sequences that control the cursor position, for instance.\r\n       * That said, not handling these cases could be a documented limitation.\r\n\r\n\r\nAs an aside, @jazzdelightsme: Your code seems to handle SGR sequences only and uses a _single-character_ CSI representation (`U+009b`), ~~whereas VT processing always requires a _two-character_ sequence,~~ which works fine with VT (Windows), as @oising  points out, but not on _all_ Unix-like platforms, notably not on macOS; therefore, the  _two-character_ sequence `` `e `` followed by `[` is needed for cross-platform support.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-25T21:11:48Z",
      "updated_at": "2019-04-04T16:32:46Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "> As an aside, @jazzdelightsme: Your code seems to be handle SGR sequences only and uses a _single-character_ CSI representation (`U+009b`), whereas VT processing always requires a _two-character_ sequence, `` `e `` followed by `[`.\r\n\r\nAs an aside to this, this isn't true. An 8-bit CSI ```\"`u{009b}\"``` or 7-bit CSI sequence ```\"`e[\"``` should work in VT, and in fact does work in VT. CSI is CSI - 8bit or 7bit data is the differentiator.\r\n\r\n```\r\nPS> \"`u{009b}6n\"\r\n[40;1R\r\n```\r\n\r\n\r\n",
      "created_at": "2019-04-04T15:45:18Z",
      "updated_at": "2019-04-04T15:46:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @oising - indeed it works fine in VT, and at least on some Linux distros (I've tried Ubuntu 18.04), but _not on macOS_ (neither in Terminal.app nor in iTerm2.app), so for cross-platform support the two-char. sequence is a must - I've updated my previous comment accordingly.\r\n\r\nHere's a simple test command:\r\n\r\n```powershell\r\n# Prints 'This make me blue.' with 'blue' in blue on Windows, Ubuntu, but not macOS, \r\n# where it prints '\u009b34mblue\u009bm'.\r\n \"This makes me `u{9b}34mblue`u{9b}m.\"\r\n\r\n# Works OK on all platforms: \"`e[\" substituted for \"`u{9b}\"\r\n \"This makes me `e[34mblue`e[m.\"\r\n```\r\n\r\nBash equivalent of the above:\r\n\r\n```sh\r\n# Doesn't work on macOS (even with Bash v4+)\r\n# Note: Only works with *Unicode* escape sequence $'\\u009b', not with $'\\x9b'\r\n$ echo $'I am \\u009b33mblue\\u009bm.'\r\n\r\n# OK on all platforms.\r\n$ echo $'I am \\e[33mblue\\e[m.'\r\n```",
      "created_at": "2019-04-04T16:32:11Z",
      "updated_at": "2019-04-04T18:38:00Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Sounds like someone should log a bug with Apple. ",
      "created_at": "2019-04-04T17:59:00Z",
      "updated_at": "2019-04-04T17:59:00Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "FYI, for the unicode esc sequeunce, you don't have to use 4 digits like in C#.  You can use just the required two:\r\n```\r\n\"`u{9b}34mblue`u{9b}m.\"\r\n```",
      "created_at": "2019-04-04T18:30:25Z",
      "updated_at": "2019-04-04T18:30:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @rkeithhill (example commands updated).\r\nOne more for the pile of asides, @oising:\r\n\r\nConsistent cross-platform functionality would be nice (not holding my breath re Apple doing something about it), but I'm not sure it qualifies as a  _bug_:\r\n\r\nFrom https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences (footnote [18] refers to the [ECMA-48](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf) standard):\r\n\r\n> The standard says that in 8-bit environments these two-byte sequences can be merged into single C1 control code in the 0x80\u20130x9F range.[18]:\r\n\r\nIt's fair to assume that _8-bit environment_ refers to a _fixed-length single-byte encoding_ where these codes can be represented _as single bytes_.\r\n\r\nBy contrast, in the multi-byte-for-anything-beyond-the-7-bit-codepoint-range UTF-8 encoding,  `0x9b` is _invalid_ as a single byte; the _Unicode character_ that represents CSI, [`U+009b`](http://www.fileformat.info/info/unicode/char/9b/index.htm), must be represented as _two-byte_ sequence `0xc2 0x9b`.\r\n\r\nPragmatically speaking, \r\n\r\n* this obviously negates the benefit of using a single character, given that Unicode character sequence `` `e[ `` is also just 2 bytes in UTF-8 (`0x1b 0x5b`)\r\n* any processor of such escape sequences then needs to support _both_ representations (recognize both `0xc2 0x9b` and `0x1b 0x5b` as CSI).\r\n\r\nThe flip side of the argument is that a dedicated CSI character clearly _is_ a part of Unicode, and should therefore be recognized as such.\r\n\r\nThe most recent edition of ECMA-48 is from June 1991, shortly _before_ the first volume of the Unicode standard was published, so, unsurprisingly, Unicode aspects are not covered.\r\n\r\n\r\n",
      "created_at": "2019-04-04T20:57:07Z",
      "updated_at": "2019-04-04T23:10:46Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Sure, I agree that it's amusing that the original benefits of using the single byte eight bit CSI have been nullified with the advent of UTF-8, but I digress; we're no longer working off teletypes, acoustic couplers or hayes smartmodems :) I think the point is that the high-bit flipped escape should work. The \"benefits\" of either scheme are moot these days, right? ",
      "created_at": "2019-04-04T21:57:35Z",
      "updated_at": "2019-04-04T21:58:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree, @oising, but let me frame it a bit differently (that pile is getting awfully tall):\r\n\r\nIf we were to start today, in the age of Unicode, we'd _only_ support the _dedicated control characters_ (in the [C1 range](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#C1_controls)) that are part of the Unicode standard, irrespective of these characters' _encoding_ and how many bytes the encodings happen to require.\r\n\r\nIn other words, using the example at hand: Unicode-aware applications (and such a qualifier should by now be the equivalent of asking for unleaded gas at a filling station) would have to recognize _only_ `U+009b` as CSI (irrespective of its encoding) and wouldn't have to worry about _also_ recognizing the 7-bit legacy representation that involves  _2 characters_ (ESC + `[`).\r\n\r\nFrom that perspective alone my vote is for the macOS terminal applications to (also) recognize a UTF-8 encoded `U+009b` char. as CSI.\r\n\r\n---\r\n\r\nRe the _strict semantics_ of Unicode characters in the [C1 control-character range (`U+0080` - `U+009f`)](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#C1_controls); from https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Unicode (emphasis added):\r\n\r\n> Unicode sets aside 65 code points for compatibility with ISO/IEC 2022. The Unicode control characters cover U+0000\u2014U+001F (C0 controls), U+007F (delete), and U+0080\u2014U+009F (C1 controls). **Unicode only specifies semantics for U+001C\u2014U+001F, U+0009\u2014U+000D, and U+0085**. **The rest of the control characters are transparent to Unicode and their meanings are left to higher-level protocols**.\r\n\r\nIn other words: at the level of Unicode itself, `U+009b` - its specific name notwithstanding - has no _intrinsic_ meaning.\r\n\r\nAlso (ibid., emphasis added):\r\n\r\n> Except for NEL [U+0085] these are almost never used (**CSI is often used, but almost always by using the ESC,'[' 7-bit replacement**). The C1 characters require 2 bytes to be encoded in\u00a0UTF-8\u00a0(for instance CSI at U+009B is encoded as the bytes 0xC2, 0x9B in UTF-8). Thus **the corresponding control functions are more commonly accessed using the equivalent two byte escape sequence intended for use with systems that have only 7-bit bytes**.\r\n\r\n---\r\n\r\nSpeaking pragmatically, again:\r\n\r\n* The 7-bit 2-character representation won't go away anytime soon.\r\n\r\n* `` `e[ `` is easier to type than `` `u{9b} `` (at least on a US keyboard).\r\n\r\n\r\n",
      "created_at": "2019-04-04T23:31:24Z",
      "updated_at": "2019-04-04T23:31:24Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "This issue also shows when using `ConvertTo-Markdown` together with list views:\r\n\r\n![image](https://user-images.githubusercontent.com/10532611/57254350-5909ff00-7051-11e9-88d9-81956cde49b9.png)\r\n\r\nNotice how text wraps in unexpected places, is not indented correctly and text decorations persist in the whitespace instead of being cleared and reapplied.",
      "created_at": "2019-05-06T20:51:09Z",
      "updated_at": "2019-05-06T20:51:09Z"
    }
  ],
  "created_at": "2018-09-08T15:58:07Z",
  "number": 7744,
  "state": "open",
  "title": "OSC sequences count into wrapping/truncation limits",
  "updated_at": "2020-12-07T19:37:31Z"
}