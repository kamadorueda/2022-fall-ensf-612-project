{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15494",
  "author": "nmbell",
  "body": "## Steps to reproduce\r\n\r\n```\r\n'cat','dog','hamster' | ForEach-Object { $null = $_ -match 'a'; If ($matches) { Write-Host \"$_ has an 'a' in it.\" } }\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\n```\r\ncat has an 'a' in it.\r\nhamster has an 'a' in it.\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\ncat has an 'a' in it.\r\ndog has an 'a' in it.\r\nhamster has an 'a' in it.\r\n```\r\nTo get the correct results, $matches must be explicitly set to $null before matching:\r\n```\r\n'cat','dog','hamster' | ForEach-Object { $matches = $null; $null = $_ -match 'a'; If ($matches) { Write-Host \"$_ has an 'a' in it.\" } }\r\n```\r\n\r\n## Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-07-23T21:00:34Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this makes sense... though depending on the implementation it might end up being something like forcibly calling `$matches.Clear()` before populating the hashtable with the new entries instead.\r\n\r\nI'm not sure if folks would expect / depend on the current behaviour, though, so it has potential to break things that currently work -- although I guess you could argue it's almost working by accident at that point.\r\n\r\nWould be nice to lock down the behaviour a bit more and ensure consistency this way, though. \ud83e\udd14 ",
      "created_at": "2021-05-31T02:44:56Z",
      "updated_at": "2021-05-31T02:44:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Interesting, what is a scope where $matches lives?",
      "created_at": "2021-05-31T06:56:55Z",
      "updated_at": "2021-05-31T06:56:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's a good question. If you inspect `$matches` in a brand new PS session, it is actually null. That seems to indicate to me that it's not an automatic variable, just that it's set in the current scope when `-match` is used.\r\n\r\nNot an exhaustive investigation, but that's my bet until I've had time to look through the code \ud83d\ude01 ",
      "created_at": "2021-05-31T15:03:55Z",
      "updated_at": "2021-05-31T15:03:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Usually you'd do something like this:\r\n\r\n```powershell\r\nif ($in -match 'pattern') {\r\n    $matches\r\n}\r\n```\r\n\r\nNot sure what the point would be to null out the boolean value and then test `$matches` specifically.  Either way it's very likely that folks are depending on the current behavior.",
      "created_at": "2021-05-31T15:46:08Z",
      "updated_at": "2021-05-31T15:46:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "By default the `$Matches` is defined in global scope.",
      "created_at": "2021-05-31T16:53:00Z",
      "updated_at": "2021-05-31T16:53:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Looks like current scope\r\n\r\n```powershell\r\n& {\r\n    'test' -match 'e'\r\n\r\n    # Nothing\r\n    $global:matches\r\n\r\n    # Something\r\n    $matches\r\n}\r\n\r\n# Nothing\r\n$matches\r\n```",
      "created_at": "2021-05-31T23:02:35Z",
      "updated_at": "2021-05-31T23:02:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tested from command prompt and gets the result in global but more correct test is:\r\n```powershell\r\n& {\r\n'cat','dog','hamster' | ForEach-Object { $null = $_ -match 'a'; If ($matches) { Write-Host \"$_ has an 'a' in it.\" } }\r\n    # Nothing\r\n    $global:matches\r\n\r\n    # Something\r\n    $matches\r\n}\r\n\r\n# Nothing\r\n$matches\r\n```\r\nThis show the cmdlet processes all iterations in the same nested scope. So the behavior is by design but I think this operator should recreate this variable every time, even if the search fails.",
      "created_at": "2021-06-01T04:57:43Z",
      "updated_at": "2021-06-01T04:57:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n> Not sure what the point would be to null out the boolean value and then test `$matches` specifically. Either way it's very likely that folks are depending on the current behavior.\r\n\r\nI'd say one *should* use the boolean returned here's a trivial bit of code which would break if matches was nulled out by the operator. \r\n```powershell\r\n$items = 'cat','dog','hamster','mouse'; \r\nforeach ($i in $items) { $null = $i -match '^.*a.*$'} \r\nWrite-Host \"Last match was $($matches[0])\"\r\n```\r\n\r\n`Last match was hamster`",
      "created_at": "2021-06-03T11:27:18Z",
      "updated_at": "2021-06-03T11:27:18Z"
    },
    {
      "author": "nmbell",
      "author_association": "NONE",
      "body": "From the [docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.1#-match-and--notmatch):\r\n\r\n> `-match` and `-notmatch` support regex capture groups. Each time they run, they overwrite the `$Matches` automatic variable. When `<input>` is a collection the `$Matches` variable is `$null`.\r\n\r\nI don't think the current behavior is consistent with these statements.",
      "created_at": "2021-06-03T16:08:05Z",
      "updated_at": "2021-06-03T16:08:05Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> From the [docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.1#-match-and--notmatch):\r\n> \r\n> > `-match` and `-notmatch` support regex capture groups. Each time they run, they overwrite the `$Matches` automatic variable. When `<input>` is a collection the `$Matches` variable is `$null`.\r\n> \r\n> I don't think the current behavior is consistent with these statements.\r\n\r\nThe docs should be clearer, I think more people reading that would interpret it as the variable is cleared / overwritten with _nothing_ , than would say 'overwrite' only applies when there is a value. ",
      "created_at": "2021-06-03T17:13:25Z",
      "updated_at": "2021-06-03T17:13:25Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "At the very least, the docs on `-match` should be updated to be clearer on the $Matches behavior.  This paragraph on `-notmatch` is clearer on the matter (except for the typo):\r\n\r\n> The -notmatch operator populates the $Matches automatic variable when the\r\ninput is scalar and the result is False, that it, when it detects a match.",
      "created_at": "2021-06-06T18:47:01Z",
      "updated_at": "2021-06-06T18:47:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If anybody wants to grab and pull PR https://github.com/iSazonov/PowerShell/commit/c1bad4141f136f25e1f20e1990f69c3b77ff38c0",
      "created_at": "2021-06-07T06:42:48Z",
      "updated_at": "2021-06-07T06:42:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The `WG-Engine` group reviewed this and agrees that the documentation should be updated to match the current behavior.  We do not want to change the current behavior because it is considered \"by-design\" and would be a breaking change.  The documentation changes can be viewed [here](https://github.com/MicrosoftDocs/PowerShell-Docs/commit/3800e988213a0282552ca6d47e608c412c577225#diff-ed087a39474c8097c9b116de7f2d59dedd2b6ecedc5cb53749c79abe101a298e).",
      "created_at": "2021-07-22T16:57:55Z",
      "updated_at": "2021-07-22T16:58:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-07-23T21:00:33Z",
      "updated_at": "2021-07-23T21:00:33Z"
    }
  ],
  "created_at": "2021-05-31T02:26:37Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Resolution-By Design"
  ],
  "number": 15494,
  "state": "closed",
  "title": "Set $matches variable to $null when -match returns $false",
  "updated_at": "2021-07-23T21:00:34Z"
}