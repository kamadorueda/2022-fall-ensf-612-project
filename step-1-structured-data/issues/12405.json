{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12405",
  "author": "TylerLeonhardt",
  "body": "`Command.CommandText` doesn't display parameters... this leaves the extension in an awkward position because we pass around `PSCommand`'s everywhere and there doesn't seem to be a friendly way of printing those out short of iterating over all the parameters ourselves.\r\n\r\nI would have expected PowerShell to take care of this by default.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n[PowerShell]::Create().AddCommand(\"Get-Foo\").AddParameter(\"WillThisShowUp\", \"Nope\").Commands.Commands[0].CommandText\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nGet-Foo -WillThisShowUp Nope\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGet-Foo\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-daily.20200418\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-daily.20200418\r\nOS                             Darwin 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-03-01T18:53:23Z",
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@TylerLeonhardt `PSCommand` is just a property bags of _strings_, parameters etc. So it just contains the _name_ of the command which won't be resolved until the PowerShell object is invoked. If you actually want any information about a command you really, really should be using CommandInfo objects. \r\n\r\nBut, it would be nice if the `ToString()` on `PSCommand` returned what you want. It would be even nicer if the PowerShell `ToString()` returned a complete syntactically valid pipeline string to support code generation. This would make it easier for app developers to implement \"Show Me\" functionality.",
      "created_at": "2020-04-21T03:03:13Z",
      "updated_at": "2020-04-21T03:03:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Kinda complicated to do.  For instance, what would it print here:\r\n\r\n```csharp\r\nvar obj = new object();\r\nps.AddCommand('Save-Object').AddArgument(obj);\r\n```",
      "created_at": "2020-04-21T03:04:16Z",
      "updated_at": "2020-04-21T03:04:16Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Yeah that's tricky @SeeminglyScience. I would guess just calling ToString() on each parameter value / argument.",
      "created_at": "2020-04-21T03:59:40Z",
      "updated_at": "2020-04-21T03:59:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "What's the motivation if it can't accurately represent the command though? Just a visual aid?\r\n\r\nSome other issues:\r\n\r\n1. You'd have to add dot source/amp invocation operators too\r\n1. Wrap scripts in scriptblocks\r\n1. Add semi colons/new lines when `AddStatement` is used\r\n1. What to show when the command is a manually constructed `CommandInfo`\r\n1. How do you show `MergeMyResults`\r\n\r\nJust to clarify I totally understand where you're coming from.  I ran into the same thing and thought a while about how to get an accurate representation. I just want to make sure the aim isn't to get an equivalent invokable script, because there's too many scenarios where that will be super inconsistent.  If the aim is instead to just get a \"good enough\" `ToString` to make it easy to see what the `PSCommand` currently holds then \ud83d\udc4d \ud83d\udc4d from me",
      "created_at": "2020-04-21T13:00:18Z",
      "updated_at": "2020-04-21T13:10:07Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": ">  If the aim is instead to just get a \"good enough\" ToString to make it easy to see what the PSCommand currently holds then \ud83d\udc4d \ud83d\udc4d from me\r\n\r\nYeah this is the idea.",
      "created_at": "2020-04-21T19:55:57Z",
      "updated_at": "2020-04-21T19:55:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In the case perhaps we need to have more descriptive name instead of `ToString()`.",
      "created_at": "2020-04-22T14:26:08Z",
      "updated_at": "2020-04-22T14:26:08Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "the CommandText property name is slightly misleading. It really should have been called \"CommandName\" (this is clear from the comment in the code). Rather than changing this property name, a new property could be created. However, this can also be done with an ETS extension external to the engine.",
      "created_at": "2021-03-01T18:53:23Z",
      "updated_at": "2021-03-01T18:53:23Z"
    }
  ],
  "created_at": "2020-04-21T02:32:36Z",
  "number": 12405,
  "state": "closed",
  "title": "Command.CommandText doesn't display parameters",
  "updated_at": "2021-03-01T18:53:23Z"
}