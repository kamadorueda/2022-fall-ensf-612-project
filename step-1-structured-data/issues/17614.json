{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17614",
  "author": "mklement0",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nNote: This is at least conceptually related to #10654, which was ultimately resolved by merely _documenting_ the behavior. Perhaps that is the right answer for this issue too, though the behavior at hand is more baffling - on the other hand, it probably won't arise often in practice.\r\n\r\nPowerShell surfaces even _explicit_ .NET interface implementations as if they were direct members of a type, which is convenient and obviates the need for interface casts.\r\n\r\nHowever, if a given type has a  public method that happens to have the same name as, but _different signature_ than a method of an explicit interface implementation, the interface method is _not_ found, despite targeting the right overload.\r\n\r\nA real world example is that if you choose to implement `System.Collections.IEqualityComparer` explicitly, PowerShell won't find its `.GetHashCode(object o)` method (except with an interface cast), because the presence of `System.Object.GetHashCode()` hides it.\r\n\r\n```powershell\r\nAdd-Type @'\r\nusing System;\r\n\r\npublic class Foo1: IFormatProvider {\r\n  // Explicit interface implementation\r\n  object IFormatProvider.GetFormat (Type formatType) {\r\n      return \"interface impl1\";\r\n  }\r\n}\r\n\r\npublic class Foo2: IFormatProvider {\r\n  // Explicit interface implementation\r\n  object IFormatProvider.GetFormat (Type formatType) {\r\n      return \"interface impl2\";\r\n  }\r\n  // Define a public method with the same name, but different signature\r\n  public object GetFormat() {\r\n      return \"public member\";\r\n  }\r\n}\r\n'@\r\n\r\n\r\n# OK\r\n# PowerShell finds the method even thought it is part of an explicit interface implementation.\r\n[Foo1]::new().GetFormat([int])\r\n\r\n# !! FAILS\r\n# !! Seeingly the public GetFormat() method\r\n# !! hides the interface GetFormat() method, even though it has a different signature.\r\n[Foo2]::new().GetFormat([int])\r\n```\r\n\r\n\n\n### Expected behavior\n\n```console\ninterface impl1\r\ninterface impl2\n```\n\n\n### Actual behavior\n\n```console\ninterface impl1\r\nMethodException: /path/to/foo.ps1:27\r\nLine |\r\n  27 |  [Foo2]::new().GetFormat([int])\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot find an overload for \"GetFormat\" and the argument count: \"1\".\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPowerShell Core 7.3.0-preview.5\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine discussed this today (7/7/2022).\r\n\r\nWe agree this is a (low priority) bug and fixing it should be non-breaking. We'd take a fix for this. We are labeling it `Up-for-Grabs`.",
      "created_at": "2022-07-07T23:18:05Z",
      "updated_at": "2022-07-07T23:18:05Z"
    }
  ],
  "created_at": "2022-06-30T20:32:48Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 17614,
  "state": "open",
  "title": "A public method with the same name as an explicit interface implementation's method hides the latter, even with different signatures",
  "updated_at": "2022-07-07T23:18:05Z"
}