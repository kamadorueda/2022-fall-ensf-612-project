{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11953",
  "author": "phatmandrake",
  "body": "# Steps to reproduce\r\n\r\n```\r\n\r\n$String = $(\"Hello World!\" | ConvertTo-SecureString -AsPlainText -Force)\r\n[System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\r\n[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($string)\r\n)\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\n\r\nDecrypts and returns the value of the Secure String. \"Hellow world!\"\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\n\r\nDecrypts only the first char \"H\" and then stops.\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n\r\nName | Value\r\n-- | --\r\nPSVersion | 7.0.0-rc.3\r\nPSEdition | Core\r\nGitCommitId | 7.0.0-rc.3\r\nOS | Darwin 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan\u00a0 9 20:58:23 PST 2020;   root:xnu-6153.81.5~1/RELEASE_X86_64\r\nPlatform | Unix\r\nPSCompatibleVersions | {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion | 2.3\r\nSerializationVersion | 1.1.0.1\r\nWSManStackVersion | 3.0\r\n\r\n\r\n**Documentation**\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostringauto?view=netframework-4.8\r\n\r\nAccording to the documentation, when specifying an integer, PtrToStringAuto: \r\n\r\n`Allocates a managed String and copies the specified number of characters from a string stored in unmanaged memory into it.`\r\n\r\nSpecifying an int of 11 Returns \"Hello\", this is because every other char returned is Null. In this case, you must specify an int of 23 to return the complete string \"Hello World!\" using this method.\r\n\r\n```\r\n$String = $(\"Hello World!\" | ConvertTo-SecureString -AsPlainText -Force)\r\n[System.Runtime.InteropServices.Marshal]::PtrToStringAuto( [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($string), 23)\r\n\r\n$String[0] Returns H\r\n$String[1] Returns NULL\r\n$String[2] Returns E\r\n$String[3] Returns NULL\r\netc.... \r\n```\r\n\r\nIf no integer is specified, PtrToStringAuto: \r\n\r\n`Allocates a managed String and copies all characters up to the first null character from a string stored in unmanaged memory into it.`\r\n\r\nI believe this suggests that either the Secure String is being stored with NULL values, whereas in PS6 it was not, or that the behavior of the PtrToStringAuto function has changed, and now adheres to the behavior the documentation describes above.\r\n\r\nThis is only an issue on macOS; however, using PtrToStringBSTR in place of PtrToStringAuto to decrypt the Secure String works as expected across all versions, windows and macOS.\r\n\r\n\r\n",
  "closed_at": "2020-02-26T21:39:51Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@phatmandrake, based on our conversation at https://stackoverflow.com/a/60406968/45375 I think you can close this issue now.\r\n\r\nTo summarize:\r\n\r\nThe `Auto` in `PtrToStringAuto()` means that the _unmanaged_ input string is assumed to use a *platform-appropriate* character encoding, whereas `BSTR` is \r\na \"Unicode\" (UTF-16) string on _all_ platforms. **On Windows, an unmanaged string is assumed to have UTF-16 encoding (which is why the code works), whereas on Unix-like platforms it is UTF-8 since .NET Core 3.0 (PowerShell [Core] 7.0 is based on .NET Core 3.1)**, which explains your symptoms: the `NUL` chars. in the `BSTR` instance's UTF-16 code units are interpreted as characters in their own right when (mis)interpreted as UTF-8. Note that **.NET Core 2.x (which is what PowerShell [Core] 6.x is based on) (inappropriately) defaulted to UTF-16**, which [this PR fixed](https://github.com/dotnet/coreclr/pull/23664), amounting to a breaking change.\r\n\r\nWhile using `PtrToStringBSTR()` instead of `PtrToStringAuto()` is therefore the immediate fix, it's worth nothing that `[securestring]` is generally not recommended for new code anymore and that it is especially problematic on Unix-like platforms, because _no encryption_ is used there.\r\n\r\nMore specifically, creating a `[string]` instance with a plain-text representation from a secure string defeats the purpose of using `[securestring]` to begin with.\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/60404847/are-you-able-to-use-ptrtostringauto-to-decrypt-a-secure-string-in-powershell-7-o\">Are you able to use PtrToStringAuto to decrypt a secure string in Powershell 7 on macOS?</a></strong></div><div>I have had no success in getting the following code snippet to output \"Hello World!\" in PS7\n\n$(\"Hello World!\" | ConvertTo-SecureString -AsPlainText -Force)\n[System.Runtime.InteropServices.Marshal]::</div></blockquote>",
      "created_at": "2020-02-26T18:26:54Z",
      "updated_at": "2020-02-26T18:26:57Z"
    },
    {
      "author": "phatmandrake",
      "author_association": "NONE",
      "body": "The loop has been made. ",
      "created_at": "2020-02-26T21:39:51Z",
      "updated_at": "2020-02-26T21:39:51Z"
    }
  ],
  "created_at": "2020-02-25T18:31:12Z",
  "number": 11953,
  "state": "closed",
  "title": "[System.Runtime.InteropServices.Marshal]::PtrToStringAuto failing to extract complete Binary String on macOS",
  "updated_at": "2020-02-26T21:39:52Z"
}