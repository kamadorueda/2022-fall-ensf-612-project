{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10838",
  "author": "mklement0",
  "body": "In response to #4036, passing Booleans to `[switch]` parameters was fixed.\r\n\r\nHowever, the problem persists for `[bool]` parameters _if you pass the value as a separate argument_ (`-param value`), which is the typical syntax; by contrast, `-param:value` (the form that you _must_ use with `[switch]` parameters) works fine (but using `:` _and_ whitespace - `-param: value` - is also broken).\r\n\r\nWhile `[bool]` parameters are rare, there's no reason for them not to be supported.\r\n\r\nAdditionally, the `-param: value` syntax form (`:` separator _and_ whitespace) also doesn't work with `[switch]` parameters, only `-param:value` does (`:`, but no whitespace).\r\n\r\nAlso, given that `[bool]` parameters (but not `[switch]` parameters) also accepts _numbers_ inside PowerShell - notably `1` for `$true` and `0` for `$false` (e.g., `& { param([bool] $p) $p } 1` yields `$true`) - passing numbers should be supported too.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nDescribe \"-File with Booleans\" {\r\n  BeforeAll {\r\n    Push-Location testdrive:\\\r\n    'param([bool] $foo) $foo' > testB.ps1\r\n    'param([switch] $foo) $foo.IsPresent' > testS.ps1\r\n  }\r\n\r\n  # [switch] parameter\r\n\r\n  It \"[switch] param: `$true can be passed with ':' and *no* whitespace\" {\r\n    pwsh -noprofile -file ./testS.ps1 -foo:`$true | Should -Be 'True'\r\n  }\r\n  It \"[switch] param: `$true can be passed with ':' *with* whitespace\" {\r\n    # Note the escaped $, so that '$true' is passed as a string.\r\n    # However, it should work even without escaping, in which case 'True' is passed.\r\n    pwsh -noprofile -file ./testS.ps1 -foo: `$true | Should -Be 'True'\r\n  }\r\n\r\n\r\n  # [bool] parameter\r\n\r\n  It \"[bool] param: `$true can be passed with ':' and *no* whitespace\" {\r\n    # Note the escaped $, so that '$true' is passed as a string.\r\n    # However, it should work even without escaping, in which case 'True' is passed.\r\n    pwsh -noprofile -file ./testB.ps1 -foo:`$true | Should -Be 'True'\r\n  }\r\n\r\n  It \"[bool] param: `$true can be passed with ':' *with* whitespace\" {\r\n    pwsh -noprofile -file ./testB.ps1 -foo: `$true | Should -Be 'True'\r\n  }\r\n\r\n  # A [bool] parameter - unlike [switch] - *requires* an explicit argument, \r\n  # so you should be able to pass it with the customary value-as-separate\r\n  # argument syntax.\r\n  It \"[bool] param: `$true can be passed as a *separate argument*\" {\r\n    pwsh -noprofile -file ./testB.ps1 -foo `$true | Should -Be 'True'\r\n  }\r\n\r\n  # A [bool] parameter - unlike [switch] - also supports *numbers* as arguments\r\n  # where 0 is coerced to $false and 1 (any nonzero number) to $true\r\n  It \"[bool] param: 1 can be passed for $true\" {\r\n    pwsh -noprofile -file ./testB.ps1 -foo:1 | Should -Be 'True'\r\n  }\r\n  It \"[bool] param: 0 can be passed for $false\" {\r\n    pwsh -noprofile -file ./testB.ps1 -foo:0 | Should -Be 'False'\r\n  }\r\n\r\n  AfterAll {\r\n    Pop-Location\r\n  }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should pass.\r\n\r\n# Actual behavior\r\n\r\nAll tests except the ones with syntax form `-foo:$true` fail:\r\n\r\n```none\r\nExpected $true, but got @('.../test.ps1 : Cannot process argument transformation on parameter 'foo'. \r\nCannot convert value \"System.String\" to type \"System.Boolean\". Boolean parameters accept only Boolean values and numbers, such as $True, $False, 1 or 0.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we escape $ in $true?",
      "created_at": "2019-10-19T19:19:12Z",
      "updated_at": "2019-10-19T19:19:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\nGood point, but it makes no difference here, because the target `pwsh` instance should recognized both literal strings `$true` and `True`, the latter being what is passed without escaping.\r\nFor clarity I've added escaping and a comment to the OP.\r\n\r\nNote that the tests do succeed - both with literal `$true` and `True` - if you use the `-param:value` syntax (`:` as separator, no whitespace):\r\n\r\n```powershell\r\n# OK: literal '$true'\r\npwsh -noprofile -file ./test.ps1 -foo:`$true\r\n\r\n# OK: literal 'True'\r\npwsh -noprofile -file ./test.ps1 -foo:$true\r\n```",
      "created_at": "2019-10-19T19:27:31Z",
      "updated_at": "2019-10-19T19:27:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems the same as:\r\n```powershell\r\n> [bool]'false'\r\nTrue\r\n```",
      "created_at": "2019-10-19T19:35:45Z",
      "updated_at": "2019-10-19T19:35:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "No, it's not the same: we're talking about the _CLI_ here, where _all arguments are of necessity initially strings_, and you need _some_ way to pass a Boolean when you use `-File`.\r\n\r\nThe inability to pass a Boolean with `-File` - still a problem in _Windows PowerShell_ - led to the fix in #4036, but that fix was _incomplete_, which is what this issue is about.\r\n",
      "created_at": "2019-10-19T19:43:45Z",
      "updated_at": "2019-10-19T19:43:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see two way:\r\n- enhance a binder so that for -File option it tries to convert string arguments to parameter types\r\n- enhance a workaround for switch so that always convert $true and $false literals to boolean.",
      "created_at": "2019-10-20T06:15:53Z",
      "updated_at": "2019-10-20T06:15:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "We don't need _new_ parameter-parsing functionality, we just need to _amend_ (fix) a _previous fix_:\r\n\r\nThat fix was to allow literal strings `$true`, `true`, `$false`, `false` to be converted to `[bool]` when bound to `[switch]` or - less commonly - `[bool]` parameters when the CLI is used with `-File`.\r\n\r\nThis now works _in principle_, except in particular _syntax forms_, which should obviously not be treated any different than its _equivalent forms_.\r\n\r\n**As stated, `-foo:$false` works, but neither `-foo $false` nor `-foo: $false` do - even though these are just _syntax variations_.**\r\n\r\nNote that `-foo $false` - whitespace-only separator - only applies to `[bool]` parameters, because with `[switch]` parameters you _must_ use `:` (given that switch parameters never treat a _separate_ argument as their value).\r\n\r\n@SteveL-MSFT, you implemented the original fix in https://github.com/PowerShell/PowerShell/pull/4178 - does this make sense to you?",
      "created_at": "2019-10-20T17:20:39Z",
      "updated_at": "2019-10-20T17:34:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We don't need new parameter-parsing functionality,\r\n\r\nIf somebody run ps1 file in pwsh session and then do the same in command line (copy-paster) different behavior may surprise the user.\r\n",
      "created_at": "2019-10-20T17:44:39Z",
      "updated_at": "2019-10-20T17:44:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It may, but it shouldn't:\r\n\r\nIf you want the same behavior as _inside_ PowerShell, invoke the CLI with `-Command` rather than `-File`.\r\n\r\nIt was a deliberate design decision to treat all `-File` arguments _as literal strings_, initially, before binding to the target script's parameters.\r\n\r\nThis doesn't preclude later conversions _when binding to the script's parameters_, such as from string to `[int]`, but it does preclude passing arguments such as `@{foo=1}` and `(1+2)` and expecting them to be evaluated _up front_, _as expressions_ as they would inside PowerShell.\r\n\r\nIf you disagree with this design, I suggest you create a new issue.\r\n\r\nAn _exception_ to the design was deliberately put in place to allow binding _strings_ `$true`, `true`, `$false`, `false` to `[switch]` and `[bool]` parameters when binding calling via `-File` (something that doesn't work _inside_ PowerShell - try `& { param([bool] $p) } '$true'`), as it would otherwise be _fundamentally impossible_ to pass a Boolean via `-File`.\r\n\r\nThe issue at hand is that this exception wasn't implemented comprehensively.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-10-20T18:04:37Z",
      "updated_at": "2019-10-20T19:40:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "However, there is one problematic aspect about how the exception was implemented, @SteveL-MSFT, though it may not matter much in practice:\r\n\r\nThe Boolean-like strings are _unconditionally_ converted to `[bool]` - even if the parameter they bind to is _untyped_:\r\n\r\nThe right behavior is to retain them as strings in that event, just like a \"number string\" such as `1` remains a string when bound to an untyped parameter via `-File`.\r\n\r\n\r\n\r\n",
      "created_at": "2019-10-20T18:22:43Z",
      "updated_at": "2019-10-20T18:22:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Conditional conversion means a binder enhancement which is likely unjustified complexity.",
      "created_at": "2019-10-21T03:47:23Z",
      "updated_at": "2019-10-21T03:47:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 seems like this is becoming a slippery slope.  At some point, it seems that using `-Command` is a good enough workaround.",
      "created_at": "2019-10-21T18:09:56Z",
      "updated_at": "2019-10-21T18:09:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm personally fine with leaving the _unconditional_ conversion mentioned in my previous comment be, but I don't think there's anything slippery about the issue as original reported:\r\n\r\nSupporting a feature in only _one_ syntax form, but not in others that _should always result in the same behavior_ is a baffling inconsistency that is well worth fixing.",
      "created_at": "2019-10-21T19:15:23Z",
      "updated_at": "2019-10-21T19:15:23Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0  Passing commands to an executable - any executable -  requires that the arguments be passed as literal strings because  that's what the operating systems support. All type information is lost so trying to get the exact semantics of calling a PowerShell function from within PowerShell is tilting at windmills. As @SteveL-MSFT says, after a while you have to accept good enough. If there's something that just doesn't work, then it needs to get fixed (encoding scriptblocks, Steve's fix) but otherwise it just leads to playing wack-a-mole with bugs.",
      "created_at": "2019-10-21T20:13:42Z",
      "updated_at": "2019-10-21T20:13:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: To succinctly recap my previous comment: \r\n\r\nAll that is needed is to fix the incomplete fix that was implemented in https://github.com/PowerShell/PowerShell/pull/4178, as detailed in the OP.",
      "created_at": "2019-10-21T20:43:55Z",
      "updated_at": "2019-10-21T20:43:55Z"
    }
  ],
  "created_at": "2019-10-18T23:22:04Z",
  "number": 10838,
  "state": "open",
  "title": "CLI: -File arguments don't recognize [bool] parameter values when passed as separate arguments",
  "updated_at": "2019-10-21T21:09:44Z"
}