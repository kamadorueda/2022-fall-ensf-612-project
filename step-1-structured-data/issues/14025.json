{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14025",
  "author": "mklement0",
  "body": "Note: This issue is just a reminder to reopen #11379 in order to have it revisited by the PowerShell committee; the willingness to do so was signaled in the Sept. '20 community call (see details below), but there was no follow-up, and leaving an issue in a closed state usually means that it falls through the cracks. There is clearly community interest in having this revisited, and the analysis that led to closing the issue is disputed.\r\n\r\nOnce #11379 is reopened, this issue can be closed.\r\n\r\n------\r\n\r\n@SteveL-MSFT \r\n\r\nThanks for discussing issue #11379 in the September community call (https://aka.ms/PSCommunityCall; as of this writing, the September call's recording has not been posted there, but is accessible at https://aka.ms/JoinPSCall, until the next call), starting at 46:00, based on @ThomasNieto's suggestion in the prior solicitation for discussion topics at   https://github.com/PowerShell/PowerShell-RFC/issues/260:\r\n\r\n(I was hoping to provide a direct link to the relevant portion of the recording, but that will have to wait until it is posted to YouTube and linked to at https://aka.ms/PSCommunityCall.)\r\n\r\nBased on your remarks in the recording:\r\n\r\n* Given that you indicated willingness to revisit this, please reopen the linked issue and re-tag it as `Review - Committee`.\r\n\r\n* As for your remarks that enclosing variable names in curly braces is a preexisting feature and that people object to having to use them in this case on _aesthetic_ grounds:\r\n\r\n  * I don't think anyone here _isn't_ aware that `{...}` _can_ and sometimes _must_ be used to disambiguate variable names.\r\n  * It is also not about _aesthetics_, it is primarily about _not getting the expected behavior_  in  manner that potentially _fails quietly_ (depending on what strict mode is in effect), due to _not expecting to have to use `{...}` in this case_; a secondary concern is typing inconvenience.\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "FWIW, if you use PowerShell script with ${var} syntax (not necessary with `?` char) in combination with Terragrunt, it will fail. A workaround is to escape `${` with `$$${` which is very misleading and looks ugly.",
      "created_at": "2020-11-28T17:59:08Z",
      "updated_at": "2020-11-28T17:59:08Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@ALIENQuake A (subjectively) better workaround is using `($var)?.Member` instead.  Personally I prefer that syntax over `${var}?.Member` anyway, assuming the only intention is to make `?.` work.",
      "created_at": "2020-11-29T05:16:28Z",
      "updated_at": "2020-11-29T05:16:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaello, thanks for [showing awareness of the problem in the Nov 19 community call](https://youtu.be/IHMgWobHzrI?t=2446): \r\n\r\n> To be honest, this kind of did sway me on this issue a little bit, we still want to have a conversation and **we can make it a priority in our next committee meeting**. Someone did do the analysis on our behalf in the corpus and determined that there was 2 uses of the question mark in a variable name. **I think it's something that we could possibly do as an experimental feature early in 7.2 [...] it's tricky [...] it's not a zero-cost thing [...] not a huge priority right now, so I don't want to guarantee that that's happening.**\r\n\r\nPriority is a separate issue, but I do hope this issue won't fall through the cracks, which seems to be a real possibility, given how the debate has unfolded (see timeline below).\r\n\r\nTo frame the issue in the context of the breaking-change debate:\r\n\r\n* The _benefit_ of the change is: Without it, the utility of the new null-conditional access operators will be severely hampered, because _users won't expect to have to enclose the variable name in `{... }` in order to use it_; with `Set-StrictMode -Version 1` or higher, you'll at least get an error (because `$foo?.bar` then requires the existence of `${foo?}`), but with strict mode off the code will simply not do what users expect, [as pointed out by @rkeithhill and acknowledged as a problem by you](https://youtu.be/IHMgWobHzrI?t=2779).\r\n\r\n* As for whose code will break due to the change: if the corpus is representative, virtually _nobody's_ - see below.\r\n\r\n* As for @rjmholt's syntax-change concerns: this is _not_ a syntax change, but a _semantic_ one: old code won't _break during parsing_, it'll simply _behave differently_ - and since there is virtually no code like that in existence, this is a moot point.\r\n\r\n----\r\n\r\nTimeline:\r\n\r\n* The original request, #11379, is opened on Dec 17, 2019.\r\n\r\n* It is [closed on Aug 26, 2019](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-681155223) after the committee decides it would be too much of a breaking change, following analysis of the corpus. \"there was quite a bit of usage of variable names ending with the question mark\"\r\n\r\n* A [request to show the original analysis](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682014513) that the committee decision was based on is ignored.\r\n\r\n* The community does their own analysis, with the heavy lifting performed by @ThomasNieto; [further analysis](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-689858916) finds virtually _no_ usage of variable names ending in `?`:  _one_(!) bona fide instance in the corpus, with the majority of the occurrences - limited to 8 files in total - showing _mistaken_ usage of `?` inside _expandable strings_ (e.g., `\"Are you sure you want to kill $vParam?\"`), which implicitly makes the case for the requested change: _users do not and should not expect `?` to be usable in a variable name without `{...}`_.\r\n\r\n\r\n* A [request to reopen the original issue](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-698478048) on 24 Sep, after a discussion in the Sep 17 community call, is ignored.\r\n\r\n* This issue is opened on Nov 10, as a reminder to reopen the original one, along with [addressing](https://github.com/PowerShell/PowerShell/issues/14025#issue-740119106) the [arguments made by @SteveLee in the Sep 17 community call](https://youtu.be/nW4OxHNSng0?t=2609).\r\n\r\n* The issue is discussed again in the Nov 19 community call, where [@SteveLee in essence repeats his arguments from the Sept. call](https://youtu.be/IHMgWobHzrI?t=2050), showing no awareness of the counterarguments that have been made, and notably repeating the claim \"I think we did some research and there are people who use this, so we don't want to break them\" and saying \"I don't think this really that much of a pain point that we want to keep revisiting\". Later in the call this is tempered by [@joeyaiello's acknowledgement of the problem](https://youtu.be/IHMgWobHzrI?t=2446).\r\n\r\nNeedless to say, the above is liable to erode the community's confidence that its concerns and feedback are taken seriously.\r\n\r\n",
      "created_at": "2020-12-11T18:30:02Z",
      "updated_at": "2020-12-11T18:32:39Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "When I first discovered the Null-coalescing operators introduce in v7 I was initially pleased. That is until I started reading the ugly details and starting experimenting with this.\r\n\r\nIn my opinion, this is another example of being held back by prior bad design choices that just goes on to haunt us for evermore, instead of making a corrective breaking change. What value is there for being able to use a '?' in a variable name? It has next to no value but high restraining and detrimental impact. Why can't we have a breaking change that removes this? Having to use those {} just to appease variables names with a question mark is a case of the tail wagging the dog. Sure, there will be some code will be impacted. But if you document it well and SHOUT about it, make it easy for users to upgrade their code, possibly via a new new PSSA warning, then I think that would be better for all of us. The use of the {} really is aweful and should be fixed.\r\n\r\nI'm experimenting with test code at the moment and have a test that refers to a PSCustomObject $_options, which contains nested members. I need to access $_options.Tags.From in a safe way.\r\n\r\nTags is known to never be null, but From is optional. So when you use coalescing, do you apply that to the whole path at once, or do you use the ?. on each sub member. When I try the latter (this scenario is missing from the help doc),  it doesnt work because the sub member access is referenced independently, not as a member.\r\n\r\nassuming:\r\n```powershell\r\n        $_options.Tags = [PSCustomObject]@{\r\n          From = '3.0.0';\r\n        }\r\n```\r\n\r\n---\r\n```powershell\r\n# no coalescing, this is ok, but potentially unsafe, if From doesnt exist (I think)\r\n\r\nif ($_options.Tags.From) {\r\n```\r\n---\r\n```powershell\r\n# this doesnt work\r\n# => RuntimeException: The variable '$Tags' cannot be retrieved because it has not been set.\r\n#\r\nif (${_options}?.${Tags}.From) {\r\n```\r\n---\r\n\r\n```powershell\r\n# this doesnt work\r\n# => The variable '$_options.Tags' cannot be retrieved because it has not been set.\r\nif (${_options.Tags}?.From) {\r\n```\r\n\r\nso what is the correct and safe way to coalesc the entire path from _options right down to From? And also, do the rules apply the same inside of a class method as opposed to a function or script?\r\n\r\n...and the strange thing is this:\r\n\r\n```powershell\r\n        if ($_options.Tags.To) {\r\n          Write-Host \"---> (PLAIN) TO: '$($_options.Tags.To)'\"\r\n        }\r\n        else {\r\n          Write-Host \"---> (PLAIN) TO: MISSING\"\r\n        }\r\n```\r\nprints:\r\n\r\n> ---> (PLAIN) TO: MISSING\r\n\r\nand in fact this is the functionality I want, but I fear it is unsafe, but I dont know why. And if this works, why do we need the coalesc  operator. I though the operator was introduced to prevent accessing a non existing member as in this case, from returning error, but return $null instead.\r\n\r\nPS, I'm using strict mode 1\r\n\r\n\r\n",
      "created_at": "2021-04-21T10:39:28Z",
      "updated_at": "2021-04-21T10:45:03Z"
    },
    {
      "author": "ExE-Boss",
      "author_association": "NONE",
      "body": "@plastikfan You\u00a0need to\u00a0use parentheses:\r\n```pwsh\r\n# This works:\r\nif (($_options.Tags)?.From) {\r\n```",
      "created_at": "2021-04-21T10:48:41Z",
      "updated_at": "2021-04-21T10:48:41Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Well if that works, why are we being bogged down and harrased into using ${}? What is the value of that, if we can just use ()?",
      "created_at": "2021-04-21T10:52:59Z",
      "updated_at": "2021-04-21T10:52:59Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@plastikfan The point is to be able to use `$variable?` syntax, without braces.",
      "created_at": "2021-04-21T11:07:05Z",
      "updated_at": "2021-04-21T11:07:05Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "@ALIENQuake, I know, I'm adding my 2 pence worth to get rid of the braces.",
      "created_at": "2021-04-21T11:11:39Z",
      "updated_at": "2021-04-21T11:11:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Perhaps needless to say, @plastikfan, I fully agree with your assessment.\r\n\r\nWhile using parentheses is always an option, no workaround is actually required in this case, because `Tags` is a _property_ rather than a _variable_ name, and the former, unlike the latter, aren't permitted to contain `?`:\r\n\r\n```powershell\r\nSet-StrictMode -Version 2\r\n$_options = [pscustomobject] @{ Tags = [PSCustomObject]@{ From = '3.0.0' }; Tags2 = $null }\r\n\r\n# *No* {...} needed around *property* names.\r\n$_options.Tags?.From # -> '3.0.0'\r\n$_options.Tags2?.From # -> $null\r\n```\r\n\r\nBut to me this distinction between variable names and property names is yet another reason to _never_ require `{...}` in combination with null-conditional access (`?.` / `?[]`).\r\n\r\n---\r\n\r\nAs an aside: what null-conditional access currently _doesn't_ protect against is _non-existence_, as opposed to existence with value  `$null`, even though these conditions are otherwise often interchangeable in PowerShell:\r\n\r\n```powershell\r\n$_options.Tags3?.From # !! ERROR, because property doesn't *exist* - as opposed to *existing and being $null*.\r\n```",
      "created_at": "2021-04-21T12:52:25Z",
      "updated_at": "2021-04-21T16:10:59Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "thanks @mklement0 ",
      "created_at": "2021-04-21T13:01:08Z",
      "updated_at": "2021-04-21T13:01:08Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "> ```powershell\r\n> $_options.Tags3?.From # !! ERROR, because property doesn't *exist* - as opposed to *existing and being $null*.\r\n> ```\r\n\r\n@mklement0 yikes.. what a footgun of a decision",
      "created_at": "2021-04-21T16:50:29Z",
      "updated_at": "2021-04-21T16:50:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": ">```powershell\r\n>$_options.Tags3?.From # !! ERROR, because property doesn't *exist* - as opposed to *existing and being $null*.\r\n>```\r\n\r\nI have a different opinion on this. By enabling `StrictMode`, you mean to catch the the cases where a non-existing member gets accidentally dereferenced at runtime, and that's what it does even with the null-conditional operator, isn't it?\r\n\r\nThe null-conditional operator is essentially a syntactic sugar of `if ($null -eq target) { $null } else { target.member }`, so I don't think it should suppress the \"non-existing property\" check enforced by the strict mode.\r\n\r\nYou may ask _\"why `$_options.Tags2?.From` doesn't error out given that `From` is a non-existing member?\"_. That's because the `From` property doesn't get dereferenced at runtime -- the `else` block won't be evaluated.",
      "created_at": "2021-05-01T06:21:30Z",
      "updated_at": "2021-05-01T06:25:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "As for the unfortunate fact that curly braces is needed for a variable to use null-conditional operator, I agree we should revisit it.",
      "created_at": "2021-05-01T06:27:55Z",
      "updated_at": "2021-05-01T06:27:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> >```powershell\n> >$_options.Tags3?.From # !! ERROR, because property doesn't *exist* - as opposed to *existing and being $null*.\n> >```\n> \n> I have a different opinion on this. By enabling `StrictMode`, you mean to catch the the cases where a non-existing member gets accidentally dereferenced at runtime, and that's what it does even with the null-conditional operator, isn't it?\n> \n> The null-conditional operator is essentially a syntactic sugar of `if ($null -eq target) { $null } else { target.member }`, so I don't think it should suppress the \"non-existing property\" check enforced by the strict mode.\n> \n> You may ask _\"why `$_options.Tags2?.From` doesn't error out given that `From` is a non-existing member?\"_. That's because the `From` property doesn't get dereferenced at runtime -- the `else` block won't be evaluated.\n\nIMO this stance is completely useless and borderline invalid until there is a reasonably straightforward way to check this ahead of time without throwing an error.\n\nI think quite a few folks expected the ?. operator to pull double duty as doing that as well. Now we still have no way to actually work in strict mode with any confidence that our code will actually run.",
      "created_at": "2021-05-01T15:56:28Z",
      "updated_at": "2021-05-01T15:56:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> ... until there is a reasonably straightforward way to check this ahead of time without throwing an error.\r\n\r\nI don't think you can have an accurate check on this until at run time. Imagine the script will receive a JSON payload, then convert it to a `PSObject` and access its members -- you don't know what actual payload you will receive, so there is no way to guarantee the ahead-of-time checking on the member accessing.\r\n\r\n> I think quite a few folks expected the ?. operator to pull double duty as doing that as well.\r\n\r\nIf there is such an ask, then we can discuss/debate on whether that's reasonable and worth to have. But for its current behavior regarding strict mode, I don't think it's fair to say it's broken. It's just a syntactic sugar today, and it does what it's supposed to do as a syntactic sugar, nothing more.",
      "created_at": "2021-05-02T06:50:05Z",
      "updated_at": "2021-05-02T06:50:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I mean, you _can_ check `$object.PSObject.Properties.Name -contains $name` so I don't see a reason that can't be made more accessible via some operator or something for folks that want to work in Strict Mode. The compiler is capable of generating an automatic if/else for that kind of thing to work, if we wanted to.\r\n\r\nWithout some way of making that less of a painful and obscure way to code, strict mode is functionally pretty useless in most circumstances. But we're getting a bit off topic here. \ud83d\ude42 ",
      "created_at": "2021-05-02T15:16:37Z",
      "updated_at": "2021-05-02T15:18:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> ... you can check $object.PSObject.Properties.Name -contains $name so I don't see a reason that can't be made more accessible via some operator ...\r\n\r\nThis is a fair ask which we can absolutely discuss about. I assume there is already an issue for this? If so, please share with me the link. My comments were purely about why `?.` does what it does today regarding strict mode, but nothing against making it easy to dereference non-existing member when needed in strict mode.",
      "created_at": "2021-05-03T04:49:15Z",
      "updated_at": "2021-05-03T04:49:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If there is, I'm not seeing it at the moment. Thought there would have been though. #2798 is somewhat related, I suppose. Opened #15338 for that, ty.",
      "created_at": "2021-05-03T12:11:35Z",
      "updated_at": "2021-05-03T12:11:35Z"
    }
  ],
  "created_at": "2020-11-10T17:51:47Z",
  "number": 14025,
  "state": "open",
  "title": "Do not require { ... } (curly braces) around variable names for null-conditional member access",
  "updated_at": "2021-05-03T12:11:35Z"
}