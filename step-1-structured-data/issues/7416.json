{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7416",
  "author": "mklement0",
  "body": "Follow-up from #7371.\r\n\r\n<sup>Substantially revised after initially suggesting (just) alphabetical ordering.</sup>\r\n\r\nCurrently, the order in which the prefix of a parameter name tab-completes if there are multiple matches is seemingly based on the order in which the parameters are declared in the source code (called _declaration order_ below).\r\n\r\nThe question is whether alternative ordering makes sense, either by default, or via an alternative invocation mechanism.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core 6.1.0-preview.4\r\n```\r\n",
  "closed_at": "2018-08-05T20:27:14Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @rkeithhill https://github.com/PowerShell/PowerShell/issues/7371#issuecomment-408274921\r\n> Ooh, might be cool if we had alternate completion orders. One alphabetical and another by most commonly used (or most recently used), etc. Perhaps that is a preference setting or maybe we could switch from the default order using tab / shift+tab to an alternate order using ctrl+tab / ctrl+shift+tab.",
      "created_at": "2018-08-01T03:07:39Z",
      "updated_at": "2018-08-01T03:07:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @iSazonov https://github.com/PowerShell/PowerShell/issues/7371#issuecomment-408304828\r\n> 1. `Get-Help -<Tab>` - I'd expect \"first most commonly used\" order\r\n> 2. `Get-Help -F<Tab>`  - I'd expect alphabetical order",
      "created_at": "2018-08-01T03:08:44Z",
      "updated_at": "2018-08-01T03:08:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could split cmdlet parameters and common parameters. A cmdlet can has many parameters and we could show only the cmdlet parameters by Tab and common parameters only by Ctrl/Alt-Tab.",
      "created_at": "2018-08-01T03:12:11Z",
      "updated_at": "2018-08-01T03:12:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\n~Can we agree that changing the _current_ tab-completion behavior to alphabetically sorted completions makes sense, irrespective of potential alternative behaviors triggered by different keyboard shortcuts / preference variables?~\r\n\r\n~If so, I suggest keeping this issue focused on the former, which should be a straightforward fix that can be implemented quickly.~\r\n\r\n~We can then discuss alternative behaviors in a _new_ issue - and that discussion will probable take a while.~",
      "created_at": "2018-08-01T03:18:54Z",
      "updated_at": "2018-08-04T03:19:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we need to understand whether we want to change something, whether we need an alphabetical order or we want something more advanced.\r\n\r\nCurrently I see alphabetical order in help output and in file completions. So I tend to support the alphabetical order for parameter completions. On the other hand, for some cmdlets, we get secondary, rarely used parameters ahead. On the other hand, we do not have cmdlets with 100 parameters and this makes the consideration not so important.\r\nAlso I believe that the introduction of new variables is a superfluous complexity.",
      "created_at": "2018-08-01T07:19:48Z",
      "updated_at": "2018-08-01T07:19:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think the declared order is usually most useful and expected, Declared order works well in practice because the most frequently used options tend to get declared first.\r\n\r\n[Here](https://www.reddit.com/r/PowerShell/comments/932rpu/change_order_of_autocomplete_paramteter/) is an example of someone apparently unhappy with the alphabetic ordering in PowerGUI.",
      "created_at": "2018-08-01T16:33:17Z",
      "updated_at": "2018-08-01T16:33:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I realize I was exclusively focused on the scenario where the user has already typed a _name prefix_, such as `-fo`.\r\n\r\nWithout that, i.e. for the `-<tab>` scenario, parameter declaration order does make a great deal of sense, if the function/cmdlet is well thought-out; e.g.:\r\n\r\n```powershell\r\nGet-ChildItem -<tab>              # -> Get-ChildItem -Path\r\nGet-ChildItem -Path /foo -<tab>   # -> Get-ChildItem -Path /foo -Filter \r\n```\r\n\r\nThat is, you rely on the parameters to be offered in descending order of importance, without having to think about their names ahead of time.\r\n\r\n(Similarly, declaration order makes sense with the `PossibleCompletions` and the `MenuComplete` PSReadLine functions; with the latter, you get the best of both worlds: ordering by importance, and the ability filter by typing a prefix.)\r\n\r\nBy contrast, in the `-fo<tab>` scenario, the name is foremost on your mind; ideally, there's only one completion, but if there are multiple ones, alphabetical ordering makes more sense to me: you're not looking by importance, you're looking to match a name you're expecting, and alphabetic ordering is a simple and invariant concept; bringing the unrelated dimension of importance into the mix may confuse matters.\r\n\r\nCombining these two approaches would amount to a variation of what @iSazonov had in mind to begin with (or is it exactly what you meant all along, @iSazonov? I didn't recognize \"first most commonly used\" as potentially being the same as declaration order):\r\n\r\n* declaration order for `-<tab>`\r\n* alphabetic order for `-<prefix><tab>`\r\n\r\n---\r\n\r\nThat said, what would make the distinction moot and would allow us to stick with declaration order consistently  is if we could get _realtime feedback_ on what the completion _would_ be, as you're typing, which is what Visual Studio Code already does:\r\n\r\n![image](https://user-images.githubusercontent.com/588825/43541472-82df9d4c-9598-11e8-8b24-decc50c65fd8.png)\r\n\r\nYou then  just need to keep an eye on the currently selected match and keep typing more of the prefix if the right one isn't selected yet - no need to use `<tab>` to cycle.\r\n\r\nIs it possible to bring this type of instant-feedback UI to PSReadLine, @lzybkr?\r\n\r\n",
      "created_at": "2018-08-01T18:42:58Z",
      "updated_at": "2018-08-01T18:42:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I did not know this term (\"declared order\") - this is what I had in mind.\r\n",
      "created_at": "2018-08-02T03:08:58Z",
      "updated_at": "2018-08-02T03:08:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @iSazonov. I simply adopted @lzybkr's terminology, which I took to mean: declared order = declaration order = the order in which the parameters are declared in the function's/cmdlet's source code.",
      "created_at": "2018-08-02T04:26:41Z",
      "updated_at": "2018-08-02T04:26:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thinking about this some more:\r\n\r\nI don't think the alphabetic sorting in the case of prefix matching is worth it, after all.\r\nIn all likelihood, you'll probably just cycle _until the right parameter name appears_, without even thinking about ordering at all, so whatever the order is, you probably won't pay attention to  it or take advantage of it.\r\n\r\nThe only real improvement I see is from the realtime feedback feature I mentioned. Simply typing without interruption until the right parameter name appears and _then_ tab-completing seems like the best solution to me (again: not sure if we can get that in the terminal).\r\n\r\nIncidentally, the good old ISE offers that too, and even throws in _substring_ matching, with prefix matches given precedence:\r\n\r\n![image](https://user-images.githubusercontent.com/588825/43671917-1c591974-9771-11e8-9160-ffd50bf8c239.png)\r\n\r\n`-ou` selects the first _prefix_ match (`-OutVariable`, in common-parameter declaration order, I presume, before `-OutBuffer`), but also shows _substring_ matches (other parameters that contain `ou`).\r\n\r\nSpeaking of declaration order: I haven't looked at other cmdlets, but `Get-Content` is an example where the order warrants fixing: currently, you get `-ReadCount`, `-TotalCount` , and `-Tail` as the first 3 completions.\r\n\r\nI've modified the title and the initial post to make this topic generically about improvements to parameter-name tab-completion.\r\n\r\nIf no one is interested in continuing this conversation, I'm also happy to close it.\r\n",
      "created_at": "2018-08-04T03:20:24Z",
      "updated_at": "2018-08-04T03:21:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The drop down list is something I'd like to see.  I'd think the presentation would be in PSReadLine.  Extensibility of parameter ordering should be added to https://github.com/PowerShell/PowerShell-RFC/pull/123",
      "created_at": "2018-08-04T05:45:01Z",
      "updated_at": "2018-08-04T05:45:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT.\r\n\r\nSorry for my piecemeal insights - I should have put more thought into this up front.\r\n\r\n> The drop down list is something I'd like to see\r\n\r\nIt's actually easy to get that already, via the aforementioned `MenuComplete` PSReadLine function (which should have tipped me off that such a UI is indeed possible...): \r\n\r\n```powershell\r\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\r\n```\r\n\r\nWith that in place, when you press <kbd>Tab</kbd>:\r\n\r\n* unambiguous prefixes expand instantly, as they do by default.\r\n\r\n* ambiguous ones show a menu akin to a dropdown, whose entries you can cycle through with <kbd>Tab</kbd>; a selection is committed with <kbd>Enter</kbd>; as a bonus, the _type_ of the currently selected item is shown at the bottom.\r\n\r\n![image](https://user-images.githubusercontent.com/588825/43688878-463457dc-98bf-11e8-8b17-d0b155d3bcce.png)\r\n\r\nWhile this is a great option, especially for discovery of parameters, I wish there were also a more streamlined alternative for power users, where you get _inline previews_ of what the parameter name _would_ complete to _if_ you pressed <kbd>Tab</kbd> at that moment. \r\n\r\nI've submitted a PSReadLine issue for that - see https://github.com/lzybkr/PSReadLine/issues/741\r\n\r\nPlus another one that suggests appending a space to a completion if it can be assumed to form a self-contained argument - see https://github.com/lzybkr/PSReadLine/issues/740\r\n\r\nGiven the above, I'm closing this.\r\n@rkeithhill, @iSazonov please let me know if you prefer to keep it open, but it sounds like your suggestions should be added to https://github.com/PowerShell/PowerShell-RFC/pull/123, as @SteveL-MSFT  suggests.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-08-05T20:27:14Z",
      "updated_at": "2018-08-05T23:12:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Comments was moved to the RFC",
      "created_at": "2018-08-06T04:54:05Z",
      "updated_at": "2018-08-06T04:54:05Z"
    }
  ],
  "created_at": "2018-07-31T19:42:43Z",
  "number": 7416,
  "state": "closed",
  "title": "Potential improvements to parameter-name tab completions",
  "updated_at": "2018-08-06T04:54:14Z"
}