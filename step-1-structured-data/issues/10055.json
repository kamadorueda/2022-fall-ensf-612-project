{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10055",
  "author": "iSazonov",
  "body": "The test shows\r\n\r\n```powershell\r\n$a=[WildcardPattern]::new(\"a1234567890*\")\r\nfor ($i=1; $i -lt 5000000; $i++) { $null = $a.IsMatch(\"a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890\" ) }\r\n```\r\nthat we (extra) allocate:\r\n1. System.Boolean. \r\n2. System.In32\r\n\r\n![image](https://user-images.githubusercontent.com/22290914/60605197-7f8ab300-9dd2-11e9-9737-0142e8ab8001.png)\r\n\r\nFor Boolean it is not clear where root of the problem\r\n![image](https://user-images.githubusercontent.com/22290914/60605392-dd1eff80-9dd2-11e9-94fe-16ba417ffa8b.png)\r\n\r\nFor Int32 it seems it is common problem in NumericOps.cs file due to casting/boxing everything to object\r\n![image](https://user-images.githubusercontent.com/22290914/60605783-94b41180-9dd3-11e9-8051-3b91fb167286.png)\r\n\r\n/cc @daxian-dbw ",
  "closed_at": "2019-07-11T16:42:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Also on screenshot above we see huge allocations for:\r\n- System.Management.Automation.VariableScopeItemSearcher\r\n- System.Management.Automation.SessionStateScopeEnumerator",
      "created_at": "2019-07-03T15:51:36Z",
      "updated_at": "2019-07-03T15:51:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I tried to fix VariableScopeItemSearcher in #10082 without success. There is a race condition related to runspaces. What do you think about VariableScopeItemSearcher? Make sense to fix the allocation? Convert it to regular method?\r\n\r\nAlso I looked in allocating value types. I did not found where Boolean boxed. It seems in Core runtime. I am not know how we can fix this.\r\nInts is boxed in IntOps.Add() and it seems we need to generate more smart Linq Expressions to fix this. Could you please share your thoughts?",
      "created_at": "2019-07-09T09:32:21Z",
      "updated_at": "2019-07-09T09:32:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Are you sure the script you use is a real scenario? When this script snippet is running in a local scope, variable will be optimized to use local tuples instead of looking up the scope chain, and thus `VariableScopeItemSearcher` won't be used at all.\r\nOnly when this is dot sourced or running in console directly, the variable will be searched by looking up scopes.",
      "created_at": "2019-07-09T21:42:11Z",
      "updated_at": "2019-07-09T21:42:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I run in console. It seems a real scenario too because we often copy code in console.\r\nI tried follow\r\n```powershell\r\nMeasure-Command {\r\n$a=[WildcardPattern]::new(\"a1234567890*\")\r\nfor ($i=1; $i -lt 5000000; $i++) { $null = $a.IsMatch(\"a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890\" ) }\r\n}\r\n```\r\nand get \r\n![image](https://user-images.githubusercontent.com/22290914/60939322-a2e0c100-a2f0-11e9-892a-8fe0b3194533.png)\r\n\r\nHere we see a lot of SessionStateScopeEnumerator allocations. \r\n\r\nAs for the first example it seems variable `$a` could be defined as global in console scenario to be optimized.\r\n",
      "created_at": "2019-07-10T04:11:58Z",
      "updated_at": "2019-07-10T04:11:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`Measure-Command { ... }` will run the script block in the parent scope, not a local scope. So it's the same as running it directly in the console.\r\nI don't think it's a scenario that we should concern too much. It would be very rare for people to run code that has a large number of variable references directly in the console. In normal cases, people will run a `.ps1` or a `function` that will execute in its local scope, where the optimization will be on for variable references.",
      "created_at": "2019-07-10T16:20:12Z",
      "updated_at": "2019-07-10T16:20:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is Jason's comment https://github.com/PowerShell/PowerShell/pull/10082#issuecomment-510146827. It seems he describes the same that you mentioned. ",
      "created_at": "2019-07-11T07:16:30Z",
      "updated_at": "2019-07-11T07:16:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Great, I will close this issue then.",
      "created_at": "2019-07-11T16:42:27Z",
      "updated_at": "2019-07-11T16:42:27Z"
    }
  ],
  "created_at": "2019-07-03T15:47:34Z",
  "labels": [
    "Issue-Question",
    "WG-Engine-Performance",
    "Resolution-Answered"
  ],
  "number": 10055,
  "state": "closed",
  "title": "Extra allocations value types",
  "updated_at": "2019-10-29T14:34:05Z"
}