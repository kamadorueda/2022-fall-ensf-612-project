{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4688",
  "author": "ghost",
  "body": "Steps to reproduce\r\n------------------\r\nRun this script (via PowerShell -File ....)\r\n\r\n```powershell\r\nparam(\r\n    [Parameter(Mandatory = $false)]\r\n    [string] $Foo = 'hi\\{0}\\hi' -f $PSScriptRoot\r\n)\r\n\r\nWrite-Host $Foo\r\n\r\nFunction Bar {\r\n    param(\r\n        [Parameter(Mandatory = $false)]\r\n        [string] $Bar = $PSScriptRoot\r\n    )\r\n    Write-Host $Bar\r\n}\r\n\r\nFunction Baz {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory = $false)]\r\n        [string] $Baz = $PSScriptRoot\r\n    )\r\n    Write-Host $Baz\r\n}\r\n\r\nBar\r\nBaz\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n```\r\nhi\\C:\\tmp\\hi\r\nC:\\tmp\r\nC:\\tmp\r\n```\r\n\r\nActual behavior\r\n---------------\r\n```\r\nhi\\\\hi\r\nC:\\tmp\r\nC:\\tmp\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16353.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16353.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n_[edited by @daxian-dbw to put the repro in code blocks]_",
  "closed_at": "2017-09-06T17:25:34Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, what matters is whether the script is an _advanced_ (cmdlet-like) script or not.\r\nBy using a `[Parameter(...)]` attribute, you're _implicitly_ making your script an advanced script, even without decorating your `param(...)` block with an explicit `[CmdletBinding()]` attribute.\r\n\r\nCombining an advanced script with invocation via `powershell -File` is what produces the symptom, as the following simplified script demonstrates:\r\n\r\nSave the following as `t.ps1` in the current dir:\r\n\r\n```powershell\r\n[CmdletBinding()]\r\nparam(\r\n  $Foo = $PSScriptRoot\r\n)\r\n\r\n\"[$Foo]\"\r\n```\r\n\r\n```powershell\r\n# Direct invocation works fine.\r\n> ./t.ps1\r\n[/Users/jdoe]\r\n\r\n# Invocation via the external CLI with -File shows the symptom:\r\n> powershell -File ./t.ps1\r\n[]\r\n```\r\n\r\nWere you to omit `[CmdletBinding()]`, the symptom would _not_ surface.\r\n\r\n---\r\n\r\nTwo asides:\r\n\r\n* Your version table shows a _Windows PowerShell_ version. In this case, the symptom also surfaces in _PowerShell Core_. Generally, you should only report issues here that (also) surface in PS Core, using the latest released version. If a symptom surfaces _only_ in Windows PS, report it on [uservoice.com](https://windowsserver.uservoice.com/forums/301869-powershell).\r\n\r\n* Please use the fenced code and output blocks provided in the issue template (`` ```powershell ... `` and `` ```none ... ``) - it makes for much more readable representations.",
      "created_at": "2017-08-28T03:49:21Z",
      "updated_at": "2017-08-28T03:50:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @mklement0 for the analysis and simple repro! It's really helpful.\r\nIt also repros when you dot source a script cmdlet in powershell, for example:\r\n```powershell\r\n# use the same 't.ps1'\r\n> . .\\t.ps1\r\n[]\r\n```\r\nThis is because the automatic variables are not set up before parameter binding for a script cmdlet when they are not going to run in new local scopes. I'm preparing a fix.",
      "created_at": "2017-08-30T16:35:40Z",
      "updated_at": "2017-08-30T16:56:10Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "@SteveL-MSFT\r\nThis fix does not have the 'Breaking-Change' label ? Is it correct ?",
      "created_at": "2018-02-16T10:05:11Z",
      "updated_at": "2018-02-16T10:05:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LaurentDardenne agree this is technically a breaking change",
      "created_at": "2018-02-21T00:21:05Z",
      "updated_at": "2018-02-21T00:21:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ":-) Any bug fix is a breaking change. I guess this label is useless here.",
      "created_at": "2018-02-21T05:26:44Z",
      "updated_at": "2018-02-21T05:26:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov valid point, I've been thinking about having different degrees of `Breaking Change` labels as they are not all equal",
      "created_at": "2018-02-21T21:33:50Z",
      "updated_at": "2018-02-21T21:33:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It make sense only if we want strongly document breaking change [buckets](https://github.com/PowerShell/PowerShell/blob/1a97af7e0418fc56151da490e4bb4edf0409457c/docs/dev-process/breaking-change-contract.md#bucket-1-public-contract) in docs and changelog.",
      "created_at": "2018-02-22T03:49:43Z",
      "updated_at": "2018-02-22T03:49:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe we've been trying to use `Breaking-Change` label on issues/PRs that we believe will have a high chance of impact or that the impact is high if encountered.  Agree that technically any bug fix is a breaking change.  So as to not dilute this label, I'm removing it from this issue as it's unlikely anyone is expecting the previous behavior.",
      "created_at": "2018-02-22T23:13:52Z",
      "updated_at": "2018-02-22T23:13:52Z"
    },
    {
      "author": "FireEmerald",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Please reopen this issue, it still occurs in powershell v7.2.0. Or am i missing something? In which version was the bug fixed?\r\n\r\n``` powershell\r\nPS C:\\scripts> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\scripts> powershell -File C:\\scripts\\test.ps1\r\nhello \\world\r\n```\r\n``` powershell\r\n# Script test.ps1\r\n[CmdletBinding()]\r\nparam(\r\n  [Parameter(Mandatory=$false)][string] $aParam = \"$PSScriptRoot\\world\"\r\n)\r\nWrite-Host \"hello $aParam\"\r\n```",
      "created_at": "2021-11-26T12:59:32Z",
      "updated_at": "2021-11-26T13:00:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> ```powershell\r\n> PS C:\\scripts> powershell -File C:\\scripts\\test.ps1\r\n> ```\r\n\r\n@FireEmerald I wonder you run _Windows PowerShell_ instead of _pwsh_",
      "created_at": "2021-11-26T16:46:09Z",
      "updated_at": "2021-11-26T16:46:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "RE @iSazonov's `powershell` (Windows PowerShell) vs `pwsh` (PowerShell v6/7) question:\r\n![image](https://user-images.githubusercontent.com/5177512/143618319-a0f81657-b775-4eec-9c39-4ab803cb4eb6.png)\r\n\r\n",
      "created_at": "2021-11-26T18:09:59Z",
      "updated_at": "2021-11-26T18:09:59Z"
    },
    {
      "author": "FireEmerald",
      "author_association": "NONE",
      "body": "@iSazonov Because pwsh does not exist on the target machine? Seems like the non core version of powershell doesn't contain the fix for this issue. I should also have posted the version of the runtime called via powershell:\r\n``` powershell\r\npowershell -Command \"(Get-Variable PSVersionTable -ValueOnly).PSVersion\"\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n5      1      19041  1320\r\n```",
      "created_at": "2021-11-29T07:14:02Z",
      "updated_at": "2021-11-29T07:14:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Seems like the non core version of powershell doesn't contain the fix for this issue.\r\n\r\nYes, Windows PowerShell gets only security fixes, all new features are added only to pwsh.",
      "created_at": "2021-11-29T07:51:08Z",
      "updated_at": "2021-11-29T07:51:08Z"
    }
  ],
  "created_at": "2017-08-27T22:01:43Z",
  "labels": [
    "Issue-Question",
    "WG-Language",
    "Resolution-Fixed"
  ],
  "number": 4688,
  "state": "closed",
  "title": "$PSScriptRoot is not populated when used in a default value for a non-mandatory script parameter",
  "updated_at": "2021-11-29T07:51:08Z"
}