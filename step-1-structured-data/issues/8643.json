{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8643",
  "author": "mklement0",
  "body": "As discovered by @PetSerAl and mentioned in a comment on https://stackoverflow.com/a/54186364/45375:\r\n\r\nIn a _local_ runspace, `PowerShell.Runspace.SessionStateProxy.SetVariable()` is capable of setting _environment_ variables too, using namespace notation (e.g, `env:Path`; more generally, namespace notation can be used with any provider that supports it).\r\n  * It is unclear if that was a conscious design decision or a \"happy accident\" due to what methods are delegated to internally - the docs don't mention this feature.\r\n\r\nBy contrast, this doesn't work with _out-of-process / remote_ runspaces, where the variable name is taken as a _literal_, due to simply calling [`Set-Variable` behind the scenes](https://github.com/PowerShell/PowerShell/blob/812456f84caf8cd5cca9c2cb089a8845341bde98/src/System.Management.Automation/engine/remoting/client/remoterunspace.cs#L2646), and a _regular PowerShell variable_ is created.\r\n\r\nGiven that no error is reported - a different [type of] variable than expected is quietly created - this can lead to subtle bugs.\r\n\r\n---\r\n\r\nPossible resolutions:\r\n\r\n* A simple fix that would make namespace notation available in remote runspaces too would be to check for `:` in the variable name and, if present, call `Set-Content` (e.g., `Set-Content env:Path ...`) instead of `Set-Variable` behind the scenes.\r\n\r\n* As a minimal - suboptimal - alternative solution, given that the  [`PowerShell.Runspace.SessionStateProxy.SetVariable()` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.sessionstateproxy.setvariable) doesn't promise the ability to use namespace notation, the documentation could be updated to simply explicitly state that namespace notation shouldn't be used, i.e., that only regular PowerShell variables whose names mustn't contain `:` should be set with this method.\r\n\r\n\r\n\r\n# Steps to reproduce\r\n\r\nCourtesy of @PetSerAl:\r\n\r\n```powershell\r\n$ps = [powershell]::Create()\r\n$ps.Runspace = [runspacefactory]::CreateOutOfProcessRunspace($null)\r\n$ps.Runspace.Open()\r\n$ps.AddScript(\"`$env:asd = 'fgh'\").Invoke()\r\n$ps.Commands.Clear()\r\n$ps.Runspace.SessionStateProxy.SetVariable('env:asd', 'jkl')\r\n$ps.AddScript('\"|$variable:env:asd|$env:asd|\"').Invoke()\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n||jkl|\r\n```\r\nThat is, both the `.AddScript()` call and the `.SetVariable()` call should set / update the _environment_ variable `asd`, via namespace notation.\r\n\r\n# Actual behavior\r\n\r\n```none\r\n|jkl|fgh|\r\n```\r\n\r\nThat is, the `.SetVariable()` call created a _regular_ variable literally named `env:asd`.\r\n\r\n# Environment data\r\n\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.3 on macOS 10.14.2\r\nPowerShell Core v6.2.0-preview.3 on Ubuntu 18.04.1 LTS\r\nPowerShell Core v6.2.0-preview.3 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-01-14T21:20:15Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 8643,
  "state": "open",
  "title": "Inconsistent behavior of SDK method PowerShell.Runspace.SessionStateProxy.SetVariable() between local vs. remote (out-of-process) runspaces",
  "updated_at": "2019-01-16T04:46:26Z"
}