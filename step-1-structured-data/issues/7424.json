{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7424",
  "author": "mklement0",
  "body": "_Update_: @PetSerAl  has determined that **the problem only surfaces with `/` as the path separator**, not `\\`.\r\n\r\nNeedless to say, `/` should be supported, because it is the native paths separator on Unix-like platforms and since it must be used for filesystem paths that work across all platforms.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nSet-Location /tmp # change to tmp dir. (make sure it exists)\r\n\r\n# Create a module\r\n'function Get-Foo { \"hi from t.psm1\" }' > t.psm1\r\n\r\n# Create a script that references the module\r\n# with `using module` and a *relative path* with */*\r\n# Using '.\\t.psm1` would *not* surface the problem.\r\n'using module ./t.psm1; Get-Foo' > t.ps1\r\n\r\n# Invoke the script from the current location:\r\n./t.ps1\r\n\r\n# Change to a different location and invoke again.\r\nSet-Location /; /tmp/t.ps1\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nhi from t.psm1\r\nhi from t.psm1\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nhi from t.psm1\r\n/tmp/t.ps1 : The specified module '/t.psm1' was not loaded because no valid module file was found in any module directory.\r\n# ...\r\n```\r\n\r\nThat is, invoking the script from a location other than the one where it resides breaks the `using module` statement, because the relative path is seemingly interpreted relative to the _current_ location rather than the script's.\r\n\r\nAs an aside: Fixing this also requires attention to symlinks: if the enclosing script is a symlink, its ultimate _target_'s location should serve as the reference point.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.4 on macOS 10.13.6\r\nPowerShell Core v6.1.0-preview.4 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-preview.4 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\nWindows PowerShell v5.1.17134.165 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n```\r\n",
  "closed_at": "2020-04-30T18:20:54Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "`using module ./t.psm1;` -> `using module .\\t.psm1;`\r\n\r\nIt seems PowerShell dislikes `/`.",
      "created_at": "2018-08-01T06:36:03Z",
      "updated_at": "2018-08-01T06:36:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @PetSerAl - it hadn't even occurred to me to try with `\\` (OP updated); should be an easy fix then.\r\n\r\n@iSazonov: Thanks for labeling, but PowerShell not treating `/` the same as `\\` in this context is a bug, not an enhancement.",
      "created_at": "2018-08-01T13:19:33Z",
      "updated_at": "2018-08-01T13:19:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Wow @mklement0 I just hit this, and like you said I had no idea using `\\` would be a workaround. You saved me on that! Hopefully I can fix this at some point",
      "created_at": "2019-05-16T20:01:01Z",
      "updated_at": "2019-05-16T20:01:01Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "(I general I tend to use `/` since Windows accepts both and *nix has a preference, especially when passing into .NET APIs)",
      "created_at": "2019-05-16T20:02:44Z",
      "updated_at": "2019-05-16T20:02:44Z"
    },
    {
      "author": "joshswimlane",
      "author_association": "NONE",
      "body": "Any updates on this?",
      "created_at": "2020-04-24T03:13:59Z",
      "updated_at": "2020-04-24T03:13:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I had a quick look (not an exhaustive one) and it seems like this might be a fairly simple fix:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b7cb335f03fe2992d0cbd61699de9d9aafa1d7c1/src/System.Management.Automation/engine/parser/SymbolResolver.cs#L493-L509\r\n\r\nLine 502 here incorrectly assumes that a path must contain `\\` to be a valid path.",
      "created_at": "2020-04-24T03:33:33Z",
      "updated_at": "2020-04-24T03:33:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Best fix would be using a method from LocationGlobber - I guess we have already such one.",
      "created_at": "2020-04-24T04:08:49Z",
      "updated_at": "2020-04-24T04:08:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12492, which has now been successfully released as `v7.1.0-preview.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.3)\n",
      "created_at": "2020-05-19T18:08:36Z",
      "updated_at": "2020-05-19T18:08:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.3)\n",
      "created_at": "2020-05-19T18:08:40Z",
      "updated_at": "2020-05-19T18:08:40Z"
    }
  ],
  "created_at": "2018-08-01T05:32:02Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 7424,
  "state": "closed",
  "title": "`using module` statement with a relative path not treated as relative to the location of the enclosing script when forward slashes are used",
  "updated_at": "2020-05-19T18:08:40Z"
}