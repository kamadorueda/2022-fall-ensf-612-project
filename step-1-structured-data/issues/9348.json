{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9348",
  "author": "iSazonov",
  "body": "\r\nApproved proposal https://github.com/PowerShell/PowerShell/issues/9348#issuecomment-483051343\r\n\r\n# Motivation\r\n\r\nCurrently some cmdlets process objects using only current culture. Sometime we have Culture parameter to use another culture and CaseSensitive parameter to switch from default case-INsensitive behavior to case-sensitive.\r\n\r\nUsing only current culture and case-insensitivity is not a justified restriction. \r\nIn management tasks, it is often justified to use culture invariant and ordinal/ordinal-ignorecase comparisons.\r\n\r\nUsing non-culture (especially ordinal) allows to significantly increase the performance of operations like processing large log files.\r\n\r\n# Summary of the new feature/enhancement\r\n\r\nFor follow cmdlets:\r\n- Compare-Object\r\n- Group-Object\r\n- Sort-Object\r\n- Select-Object\r\n- Select-String\r\n\r\nimplement:\r\n- add Culture parameter if absent\r\n- add Comparision (with values - Ordinal, OrdinalIgnoreCase, CurrentCulture, CurrentCultureIgnoreCase, InvariantCulture, InvariantCultureIgnoreCase and perhaps SimpleCaseFolding)\r\n- deprecate CaseSensitive parameter\r\n\r\n# Proposed technical implementation details\r\n\r\n- All this parameters is in ObjectCmdletBase class.\r\n- To deprecate CaseSensitive parameter add `Parameter(DontShow = true)`.\r\n- Comparision parameter has priority over Culture parameter.\r\n- Defaults (stay like now) is CurrentCulture for Culture parameter and CurrentCultureIgnoreCase for Comparison parameter. Although we might consider OrdinalIgnoreCase.\r\n\r\n# Additional information\r\n\r\nCome from #8180 discussion.",
  "closed_at": "2022-10-04T06:55:45Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Perhaps PowerShell Committee should make a conclusion before I push a PR.",
      "created_at": "2019-04-12T10:39:05Z",
      "updated_at": "2019-04-12T10:39:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea in principle, but I definitely advise against deprecating `-CaseSensitive` and generally undermining the default assumption of case-_insensitivity_ by having `Ordinal` and `CurrentCulture` mean case-_sensitive_ and suddenly having a case-insensitivity opt-in (`OrdinalIgnoreCase`, `CurrentCultureIgnoreCase`- that this is the meaning of these flags at the level of _CoreFx_ is irrelevant, because it is a different realm.\r\n\r\nFrom what I can see, the only thing that's needed is to loosen the definition of the `-Culture` parameter slightly by accepting  two pseudo-culture names, `Invariant` and `Ordinal` - no separate `-Comparison` parameter is then needed:\r\n\r\n* `Invariant` (currently, at the level of CoreFx, you must pass `''` as the name to `[cultureinfo]::GetCultureInfo()` in order to get the the invariant culture, but that is too obscure; of course you can more sensibly use `[cultureinfo]::InvariantCulture`), which uses `StringComparison.InvariantCultureIgnore` case by default, unless `-CaseSensitive` is a also present (`StringComparison.InvariantCulture`)\r\n\r\n* `Ordinal`, which uses ordinal comparison only, `StringComparison.OrdinalIgnoreCase`, unless `-CaseSensitive` is also present (`StringComparison.Ordinal`)\r\n\r\n* Specifying any actual culture name such as `ru-RU` or omitting `-Culture` altogether would then imply `StringComparison.CurrentCultureIgnoreCase` for the specified / current culture, except if `-CaseSensitive` is also present (`StringComparison.CurrentCulture`).\r\n\r\n",
      "created_at": "2019-04-14T19:56:26Z",
      "updated_at": "2019-04-14T19:56:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Suggestion is not remove CaseSensitive (only hide from Intellisense) but expose new functionality to users. Users will be able to continue to use the old features if they want.\r\nThe enhancement of Culture type makes it difficult to discover new elements and new functionality. It will also unnecessarily complicates our code to transform the pseudo type. The C # model is more user- and developer-friendly.",
      "created_at": "2019-04-15T04:23:19Z",
      "updated_at": "2019-04-15T04:23:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Suggestion is not remove CaseSensitive \r\n\r\nI understand that your intent was to \"soft-deprecate\" `-CaseSensitive`, not to remove it.\r\nYet, that very intent is what I advise against.\r\n\r\n> will also unnecessarily complicates our code \r\n\r\nSuch considerations should not guide design decisions.\r\n\r\n> The C # model is more user- and developer-friendly.\r\n\r\nPowerShell is not C#, and there are fundamental differences.\r\n\r\nThe fundamentally case-INsensitive nature of PowerShell is one of them.\r\n\r\nWhile aligning with C# _where it make sense_ is commendable, in this case it contravenes PowerShell's fundamental nature and will cause nothing but confusion.\r\n\r\nYour proposal may make sense to you because you're immersed in C# - that cannot and shouldn't be assumed for all PowerShell users.",
      "created_at": "2019-04-15T04:31:31Z",
      "updated_at": "2019-04-15T04:32:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I mentioned C# only because this model is intuitive and easy to use. Especially since we still have no IntelliSense for cultures.",
      "created_at": "2019-04-15T07:28:41Z",
      "updated_at": "2019-04-15T07:28:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Especially since we still have no IntelliSense for cultures.\r\n\r\nWhy not? It's fairly easy to do in PowerShell:\r\n\r\n```powershell\r\nfunction Get-Foo {\r\n  param(\r\n    [ArgumentCompleter({ \r\n      param($c, $p, $w) \r\n      'Invariant', 'Ordinal'  + \r\n        [cultureinfo]::GetCultures('SpecificCultures').Name -like \"$w*\"\r\n    })]\r\n    [string] $Culture\r\n  )\r\n  $Culture\r\n}\r\n```\r\n\r\n> this model is intuitive and easy to use.\r\n\r\nPerhaps in C#, but not in PowerShell, for the reasons stated; plus, throwing `-Culture` into the mix complicates things, due to incompatible `-Culture` and `-Comparison` values.\r\n\r\nLet's juxtapose the two proposals:\r\n\r\nTask<br>(case-sensitivity, culture) | single `-Culture` param | `-Culture` + C#-style `-Comparison` param\r\n---- | ------ | -----\r\ninsensitive, current | (default behavior) | (default behavior) \r\nsensitive, current | `-CaseSensitive` | `-Comparison CurrentCulture`\r\ninsensitive, invariant | `-Culture Invariant` | `-Comparison InvariantCultureIgnoreCase` \r\nsensitive, invariant  | `-Culture Invariant` <br>`-CaseSensitive` | `-Comparison InvariantCulture` \r\ninsensitive, ordinal | `-Culture Ordinal` | `-Comparison OrdinalIgnoreCase` \r\nsensitive, ordinal | `-Culture Ordinal` <br>`-CaseSensitive` | `-Comparison Ordinal` \r\ninsensitive, given culture | `-Culture ru-RU` | `-Culture ru-RU` \r\nsensitive, given culture | `-Culture ru-RU` <br>`-CaseSensitive` | `-Culture ru-RU` <br>`-Comparison CurrentCulture` \r\n\r\n* in all cases, the C#-style comparison mode names contradict the default case-insensitivity expectation in PowerShell.\r\n* Note the double awkwardness of `-Culture ru-RU -Comparison CurrentCulture`:\r\n  * The word _current_ can seem contradictory with specifying a specific culture.\r\n  * From a PowerShell mindset, nothing indicates case-_sensitivity_.\r\n* The `-Culture` + `-Comparison` proposal is more verbose in the case-insensitive scenarios (which are arguably more common) and obscure, as well as more complex, given the need to prevent use of `-Culture` with `-Comparison Ordinal | OrdinalIgnoreCase | InvariantCulture | InvariantCultureIgnoreCase`.\r\n\r\n",
      "created_at": "2019-04-15T13:16:07Z",
      "updated_at": "2019-04-15T13:19:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks for making things clear. I see your point and I agree that we could easily implement this by keeping current parameters. This \"packaging\" looks nice. Nevertheless, I see several problems after attempts to make a prototype that have led me to make the original proposal:\r\n\r\n- it is not a breaking change\r\n- it is keep Culture type being native. Overlapping native types always complicates code and it is a way to performance issues. It can confuse not only C# developers but script ones too because Ordinal is not culture - splitting ordinal and linguistic making things clear and simple. \r\n- the proposal made with the intention to add SimpleCaseFolding to `Comparison`. \r\n- as for \"names contradict\" we could replace \"Ordinal\" with \"OrdinalSensitiveCase\" (vs \"OrdinalIgnoreCase\"). Interesting, InvariantCulture is still culture. :-)  However, if we transfer the center of gravity to Comparison parameter, then I would prefer to do all the workarounds on it.\r\n",
      "created_at": "2019-04-16T13:05:16Z",
      "updated_at": "2019-04-16T13:05:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> it is not a breaking change\r\n\r\nThat is largely hypothetical, as the existing `-Culture` parameters are `[string]`-typed, and neither `Ordinal` nor `Invariant` refer to existing cultures - nor would `SimpleCaseFolding`.\r\n\r\n>  it is a way to performance issues.\r\n\r\nI don't think that's a concern here. We could stick with `string`, if we don't want to create a type that is a \"superset\" of `[cultureinfo]`.\r\n\r\n>  the proposal made with the intention to add SimpleCaseFolding to Comparison.\r\n\r\nThen accept `SimpleCaseFolding` as a pseudo culture too.\r\n\r\nAs an aside, I'm still unclear on how simple case folding relates to `InvariantCultureIgnoreCase` in terms of _behavior_ - from what I understand the former is faster than the latter, but are they _functionally_ the same?\r\n\r\n> Interesting, InvariantCulture is still culture. :-) \r\n\r\nYes, and that's why it makes sense to treat _all_ these cases the same, as pseudo cultures, because it all comes under the heading of \"The rules of what culture/non-culture should be applied?\"\r\n\r\n",
      "created_at": "2019-04-16T21:08:11Z",
      "updated_at": "2019-04-16T21:08:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we believe @mklement0's proposal with `-Culture` and `-CaseSensitive` will be easier for most users.  Given the complexity of this and the opportunity for more feedback, we request that a RFC be authored for this work.",
      "created_at": "2019-04-22T20:10:14Z",
      "updated_at": "2019-04-22T20:10:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Probably want to make sure that includes a parameter transform attribute and argumentcompleter setup to make it as easily reusable as possible, too. :)",
      "created_at": "2019-04-22T20:12:59Z",
      "updated_at": "2019-04-22T20:12:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "When I spoke about complications, I just meant that we would have to add code for transform attribute and argument completer.\r\nWe could ask CoreFX team to add Invariant name to Culture type, but Ordinal name will probably never be on the list of cultures. \r\nAlso we have to translate \"culture\" to Culture and Comparison types so transform attribute is problematic.",
      "created_at": "2019-04-23T04:24:24Z",
      "updated_at": "2019-04-23T04:58:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "RFC https://github.com/PowerShell/PowerShell-RFC/pull/167",
      "created_at": "2019-04-24T04:56:09Z",
      "updated_at": "2019-04-24T04:56:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I looked at grep and ripgrep. \r\nThey can accept input as byte stream. grep uses for this LC_ALL=\"C\" that is one byte encoding (.Net Core exposes this as\"invariant\" culture on Unix). ripgrep also has an option to switch to byte stream.\r\nIt makes me think that `-AsByteStream` parameter can be useful to us.\r\n\r\nInteresting, ripgrep ignores system locale settings (!)\r\nhttps://github.com/BurntSushi/ripgrep/issues/790#issuecomment-365024942\r\nhttps://github.com/BurntSushi/ripgrep/blob/7b3fe6b3251a18d2b8d3efe7ee6a85c9e9e4e565/FAQ.md#can-ripgrep-replace-grep\r\nTaking in account that ripgrep is fastest tool we might think how to use the ripgrep experience. Maybe we don't need Culture parameter either.",
      "created_at": "2019-05-16T13:28:08Z",
      "updated_at": "2019-05-16T13:28:08Z"
    },
    {
      "author": "BurntSushi",
      "author_association": "NONE",
      "body": "@iSazonov The right documentation to read with respect to how ripgrep handles encoding is this: https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#file-encoding --- Notably, ripgrep transparently supports UTF-16. grep does not. That might be relevant here.",
      "created_at": "2019-05-16T14:50:52Z",
      "updated_at": "2019-05-16T14:50:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@BurntSushi Thanks for comment and link! We are very interested in improving the search in PowerShell and would be happy for your help. \r\nCurrently Select-String cmdlet has already \"-Encoding\" parameter and we can either use automatic encoding detection or specify a value. (I am thinking about reducing transcoding because in C# world we work with UTF-16 by default and maybe we should consider working directly with UTF-8).\r\nNow our discussion is that the cmdlet does only linguistic search for current culture/locale and we want to add culture independent (invariant culture) and non-lingustic (ordinal in C# world - don't know the correct term from ripgrep) search. I see ripgrep ignores locale settings but it is not clear how it support (if does) lingustic, invariant and ordinal search.\r\nIf you could share your experience it would be great.",
      "created_at": "2019-05-16T17:11:06Z",
      "updated_at": "2019-05-16T17:11:06Z"
    },
    {
      "author": "BurntSushi",
      "author_association": "NONE",
      "body": "I'm afraid that I don't follow. Apologies, but I'm not a Windows user. I don't know what \"culture independent,\" \"invariant culture,\" \"non-linguistic\" or \"ordinal search\" mean in this context. Examples would help.\r\n\r\nAn easy statement for me to make, based on guessing at what you mean, is to simply state that ripgrep has no support for custom tailorings defined by the various [Unicode technical reports](https://www.unicode.org/reports/). Everything is vanilla Unicode, and its support for case folding is limited to the \"simple\" case mapping.\r\n\r\nOtherwise, what you see if what you get. You give ripgrep a query, and it looks for exact matches in files, just like grep does. That's it.",
      "created_at": "2019-05-16T17:56:00Z",
      "updated_at": "2019-05-16T17:56:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, terminology is a problem :-(\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/how-to/compare-strings\r\nIn the docs you find examples.\r\n\"Culture\" is \"locale\" on Unix.\r\n\"Invariant\" is more tricky. It follow OS. On Windows it is a general culture (with Latin char ordering). On Unix it is locale \"C\". \"Invariant\" is usually used with an application should has the same behavior regardless system/user locale.\r\n\"Ordinal\" means non-linguistic comparison, byte-by-byte (char-by-char), optionally with ignore case. On Unix .Net Core get this with local \"C\" (if I understand correctly) that is \"invariant culture\" too. On Windows \"invariant culture\" and \"ordinal\" are different as you can see in the above docs.",
      "created_at": "2019-05-17T06:58:48Z",
      "updated_at": "2019-05-17T06:58:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Since https://github.com/dotnet/corefx/issues/41333 all things are simplified and we could implement your proposal without any concerns about future API changes.\r\nI have only one concern about preudo-culture names - \"Invariant\" and, specially, \"Ordinal\". Our intention is to simplify user understanding but these names looks very specific - they is native only for .Net Core/C# users.",
      "created_at": "2019-10-28T11:29:28Z",
      "updated_at": "2019-10-28T11:29:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it, @iSazonov.\r\n\r\nYes, they are .NET terms, which I think is appropriate, given PowerShell's foundation, especially if we clearly document these values.\r\n\r\n(If they were specific to a .NET _language_, such as C#, I'd be more concerned).\r\n\r\nWhat do you have in mind? \r\n\r\n",
      "created_at": "2019-10-28T17:37:34Z",
      "updated_at": "2019-10-28T17:37:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What do you have in mind?\r\n\r\nPerhaps there are suitable terms  in Unicode standard?\r\n",
      "created_at": "2019-10-28T17:50:19Z",
      "updated_at": "2019-10-28T17:50:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There is nothing in the Unicode glossary that jumps out:  http://unicode.org/glossary/ (but see next section).\r\n\r\nConversely, I do think using the established .NET terms is beneficial - even if they may initially be unfamiliar to non-.NET users: that's where the docs come in.\r\n\r\n(I guess `CodePoint` and `Agnostic` / `Neutral` could be considered, but I don't think there's a strong enough case for deviating from the established .NET terms).\r\n\r\n---\r\n\r\nAs for the relationship with the Unicode standard, from what I gather:\r\n\r\n* _Ordinal_ has no counterpart in the Unicode standard, because it seems that _all_ operations are expected to be linguistically correct, albeit not all of them culture-specifically (_ordinal_ recognizes the solely code-point-by-code-point case mapping - e.g., `\u00fc` to `\u00dc`; but not multi-character mappings such as  `\u00df` to `SS`, defined in file [SpecialCasing.text](http://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt), which Unicode expects to be _always_ observed)\r\n\r\n* What is referred to in the standard under the umbrella of _default_ case algorithms appears to correspond to .NET's _invariant_ matching.\r\n\r\n* Culture-_specific_ behavior is referred to as _tailoring_.\r\n\r\n\r\n\r\n\n\n<blockquote><div><strong><a href=\"http://unicode.org/glossary/\">Glossary</a></strong></div></blockquote>",
      "created_at": "2019-10-28T18:35:05Z",
      "updated_at": "2019-10-28T18:35:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I did not found appropriate terms too. Thanks for confirmation!  ",
      "created_at": "2019-10-29T03:48:47Z",
      "updated_at": "2019-10-29T03:48:47Z"
    }
  ],
  "created_at": "2019-04-12T10:36:52Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed"
  ],
  "number": 9348,
  "state": "closed",
  "title": "Enhance some cmdlets with Culture and Comparison parameters",
  "updated_at": "2022-10-04T06:55:45Z"
}