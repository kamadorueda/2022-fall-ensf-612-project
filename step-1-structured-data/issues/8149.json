{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8149",
  "author": "PoshKazun",
  "body": "Currently, ConvertFrom-StringData doesn't have a param to use  unescaped strings. You should invoke additional commands to escape strings (Regex.Escape or a preceding backslash( \\\\), etc..).  It would be convenient to use a single param(for example -Raw) without additional conversions.\r\n\r\nhttp://csharpindepth.com/Articles/General/Strings.aspx\r\n\r\nThe complete set of escape sequences is as follows:\r\n\r\n\\' - single quote, needed for character literals\r\n\\\" - double quote, needed for string literals\r\n\\\\ - backslash\r\n\\0 - Unicode character 0\r\n\\a - Alert (character 7)\r\n\\b - Backspace (character 8)\r\n\\f - Form feed (character 12)\r\n\\n - New line (character 10)\r\n\\r - Carriage return (character 13)\r\n\\t - Horizontal tab (character 9)\r\n\\v - Vertical quote (character 11)\r\n\\uxxxx - Unicode escape sequence for character with hex value xxxx\r\n\\xn[n][n][n] - Unicode escape sequence for character with hex value nnnn (variable length version of \\uxxxx)\r\n\\Uxxxxxxxx - Unicode escape sequence for character with hex value xxxxxxxx (for generating surrogates)\r\nOf these, \\a, \\f, \\v, \\x and \\U are rarely used in my experience.\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nConvertFrom-StringData 'foo=abc\\n\\t\\rabc'\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Are you saying you want the option to treat the input strings as _literals_, i.e., without the usual interpretation of the escape sequences?\r\n\r\n",
      "created_at": "2018-10-30T21:04:45Z",
      "updated_at": "2018-10-31T18:41:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I don't see a good reason to use C# style escapes.\r\n\r\nAssuming you wouldn't mind PowerShell style escapes, there is an api you can use:\r\n\r\n```powershell\r\nConvertFrom-StringData $ExecutionContext.InvokeCommand.ExpandString('foo=abc`n`t`rabc')\r\n```",
      "created_at": "2018-11-05T05:13:58Z",
      "updated_at": "2018-11-05T05:13:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: Note that C#-style escapes already _are_ supported - they're just invariably _expanded_:\r\n\r\n```powershell\r\n(ConvertFrom-StringData 'foo=a\\nb').foo\r\na\r\nb\r\n```\r\n\r\nIn fact, `ConvertFrom-StringData` _only_ supports C#-style escapes; PowerShell ones are treated as literals:\r\n\r\n```powershell\r\nPS> (ConvertFrom-StringData 'foo=a`nb').foo\r\na`nb\r\n```\r\n\r\n> `ConvertFrom-StringData` supports escape character sequences that are allowed by conventional machine translation tools. That is, the cmdlet can interpret backslashes (\\) as escape characters in the string data by using the Regex.Unescape Method, instead of the PowerShell backtick character (`) that would normally signal the end of a line in a script. Inside the here-string, the backtick character does not work. \r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-stringdata?view=powershell-6\r\n\r\nThe approach you suggest doesn't work, because expanding _up front_ will result in literal line breaks inside the value, which breaks, because each key-value pair must be on a single line:\r\n\r\n```powershell\r\nPS> ConvertFrom-StringData $ExecutionContext.InvokeCommand.ExpandString('foo=a`nb')\r\nConvertFrom-StringData : Data line 'b' is not in 'name=value' format. \r\n...\r\n```\r\n\r\nApplying the expansion _afterwards_ is an option, however:\r\n\r\n```powershell\r\nPS> $ExecutionContext.InvokeCommand.ExpandString((ConvertFrom-StringData 'foo=a`nb').foo)\r\na\r\nb\r\n```\r\n\r\n",
      "created_at": "2018-11-05T05:28:05Z",
      "updated_at": "2018-11-05T05:28:05Z"
    }
  ],
  "created_at": "2018-10-30T17:47:00Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 8149,
  "state": "open",
  "title": "Add a new parameter Raw to ConvertFrom-StringData",
  "updated_at": "2018-11-05T05:28:05Z"
}