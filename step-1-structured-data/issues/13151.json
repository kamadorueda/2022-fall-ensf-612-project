{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13151",
  "author": "MaximoTrinidad",
  "body": "So, since PowerShell 7.0.0 (released 3/4/2020) .NET Core 3.1.2.\r\n\r\nPowerShell 7.0.1 (released 5/14/2020) needs \"Microsoft Windows Desktop Runtime 3.1.3 (x64)\" components for our products to work.\r\n\r\nThen, the recent release of PowerShell 7.0.2 (released 6/11/2020), needs \"Microsoft Windows Desktop Runtime 3.1.5 (x64)\" which breaks out products again.\r\n\r\nThis is impacting in our effort to keep improving our products as our customers are suffering from these GA updates.\r\n\r\nIs there going to be monthly GA updates?\r\n\r\n:)\r\n\r\n_Originally posted by @MaximoTrinidad in https://github.com/PowerShell/PowerShell/issues/8663#issuecomment-645642429_",
  "closed_at": "2021-03-01T22:14:40Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The default distributions of PowerShell package their own .NET installations with the application; they have no need to use a machine-wide installation of .NET Core.\r\n\r\nIf you're installing the framework-dependent packages then that's by design, but otherwise PowerShell is perfectly happy keeping its own .NET Core version separate from any machine-wide .NET installation present.",
      "created_at": "2020-07-10T15:02:14Z",
      "updated_at": "2020-07-10T15:02:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Are these packages not included in the default distribution on Windows? /cc @adityapatwardhan ",
      "created_at": "2020-07-10T15:02:57Z",
      "updated_at": "2020-07-10T15:02:57Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I think including to \"Optionally\" install the .NET Core SDK components can alleviate the issue for some third-party products to break.\r\n\r\nDuring the installation, it could detect the previous .NET Core version, then give the option to upgrade.  Or, just give a notification providing the link to download separately the SDK components.\r\n\r\nIn our case, at SAPIEN Technologies, we only needed the \"Microsoft Windows Desktop Runtime 3.1.x (x64)\". \r\n\r\n:)\r\n\r\n",
      "created_at": "2020-07-10T15:02:58Z",
      "updated_at": "2020-07-10T15:02:58Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@vexx32 \r\n\r\nSorry! I was adding more information.\r\n:)",
      "created_at": "2020-07-10T15:04:09Z",
      "updated_at": "2020-07-10T15:04:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@MaximoTrinidad could you clarify if y'all are using the framework dependent install? I was also under the impression this wasn't needed for the standalone.\r\n\r\nAlso could you clarify why the SDK should be bundled?",
      "created_at": "2020-07-10T16:07:11Z",
      "updated_at": "2020-07-10T16:07:11Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad Thank you for reporting this. Could you please give information about the following:\r\n\r\n1. Which package of PowerShell do you use? MSI / Zip / Framework dependent Zip / NuGet packages?\r\n2. PowerShell is a standalone app and ships the .NET runtime within the package. Which would mean the customer machine does not need to have the .NET SDK installed. \r\n\r\nIf there are dependencies from the SDK you need to be included in the package, let us know. We can see if those make sense to ship them within the package or in some other form.\r\n",
      "created_at": "2020-07-10T16:55:21Z",
      "updated_at": "2020-07-10T16:55:21Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n\r\nBundling the SDK can be useful! \r\n\r\nOne of our products, we can build Windows Forms application using PowerShell language. In our case, we needed to have the  .NET Core \"Desktop\" Runtime version matching the one used in the latest PowerShell 7.\r\n\r\nAgain, **Just A Suggestion** that can provide:\r\n\r\n1. Gives a heads up that PowerShell 7 is using a newer .NET Core version. (Sometimes people don't read what's in the update notes).\r\n2. Let the people decided what to install: \r\n      *  .NET Runtime\r\n      *  ASP.NET Core Runtime\r\n      *  Desktop Runtime\r\n\r\nWhen can we expect the next PowerShell 7 GA with .NET Core 5.0 to be released? Should be soon... Right!\r\n\r\n",
      "created_at": "2020-07-10T17:16:44Z",
      "updated_at": "2020-07-10T17:16:44Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@adityapatwardhan \r\n\r\nGreatly Appreciated the response!\r\n\r\nAnswered:\r\n\r\n_1. Which package of PowerShell do you use? MSI / Zip / Framework dependent Zip / NuGet packages?_\r\n\r\n* MSI (only).\r\n\r\n_2. PowerShell is a standalone app and ships the .NET runtime within the package. Which would mean the customer machine does not need to have the .NET SDK installed._\r\n\r\n* Yes! I understand. In our situation has caused headaches to our worldwide customers using our products.\r\n\r\nTo rectify the issue, we are providing the .NET Core SDK with the product installation. But, there are also, some changes in our product code to support the latest version.  \r\n\r\nThe fast turn-around of updates to .NET Core has keeping very us busy. \r\n\r\nDon't get me wrong! The way PowerShell is progressing. It's Great!\r\n\r\n:)\r\n\r\n\r\n\r\n",
      "created_at": "2020-07-10T17:30:43Z",
      "updated_at": "2020-07-10T17:30:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Bundling the SDK can be useful!\r\n\r\nThe SDK refers to `dotnet build` and the like, pretty exclusively for managing dotnet projects.  Is that what you mean to be requesting?  It is a separate product from the runtime install.\r\n\r\n> One of our products, we can build Windows Forms application using PowerShell language. In our case, we needed to have the .NET Core \"Desktop\" Runtime version matching the one used in the latest PowerShell 7.\r\n\r\nCan you elaborate a little on this?  What error message do you get when it's not installed and how specifically are you interacting with PowerShell (e.g. hosting with the PowerShell SDK, running pwsh.exe (~~if this then what package as @adityapatwardhan asked~~ **Edit:** answered), etc)?",
      "created_at": "2020-07-10T17:31:48Z",
      "updated_at": "2020-07-10T17:32:41Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n\r\nYou got to understand... Our products have components that need to be rebuilt each time the framework change in order to work with our PowerShell Host.  So, our team developers it's working in a solution to reduce this barrier. \r\n\r\nIt's not like some time ago Windows Management Frameworks (3.0, 4.0, 5.0) took a couple of years apart to be released. Now, with .NET Core moving at a much faster pace for the last few months, it got us fixing stuff faster.\r\n\r\nBut, this is our responsibility to keep up with changes in our products.\r\n\r\nSo, just a suggestion, to have an additional notification during the installation to let people know the framework has been updated. To at least, in the MSI installation, make the new framework the links available. This way, people may want to install additional components. \r\n\r\nAt the same time, I think this will help minimize the impact to our customers when installing PowerShell and using our products.\r\n\r\n:)\r\n\r\n",
      "created_at": "2020-07-15T14:00:47Z",
      "updated_at": "2020-07-15T14:01:42Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> You got to understand... Our products have components that need to be rebuilt each time the framework change in order to work with our PowerShell Host. So, our team developers it's working in a solution to reduce this barrier.\r\n\r\nSome additional details would be helpful in determining if this is an application specific problem.  I'm no stranger to how editors and custom hosts work and I don't think I've encountered this.\r\n\r\n/cc @TylerLeonhardt @rjmholt if I'm wrong please correct me, have we ever had an issue where the resolution was installing/updating the runtime?\r\n\r\nIf it is application specific, I think the best action would be to build in the update notification to your application's start up process.",
      "created_at": "2020-07-15T14:34:19Z",
      "updated_at": "2020-07-15T14:34:19Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I don't recall any such issue, but then again, PowerShell itself is our runtime so maybe we're an exception.\n\nI also work on the [dotnet-interface host](https://dotnet/interactive) which is a global tool and don't recall having this issue either. ",
      "created_at": "2020-07-15T14:44:07Z",
      "updated_at": "2020-07-15T14:44:07Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> have we ever had an issue where the resolution was installing/updating the runtime?\r\n\r\nNo, PSES still targets PS 6/netcoreapp2.1 in fact. But it doesn't host PowerShell, but instead parasitises it; loads itself into the PowerShell on the machine and takes over. So basically PSES lets users/PowerShell do the heavy lifting for the platform and is modular to that. You might expect there to be some issues from older PowerShell versions with outdated runtimes, but as @TylerLeonhardt says, I don't recall seeing anything like that.",
      "created_at": "2020-07-15T17:08:59Z",
      "updated_at": "2020-07-15T17:08:59Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad Almost every time PowerShell releases a revision version update to stable release (non-preview), there will be an update to the .NET framework version. Updating the .NET framework version is the only way PowerShell can consume the security / other fixes that come with the update. It is expected that the application ships the .NET framework binaries with itself. \r\n\r\nWe understand that there is a need to potential change code whenever we release an update. So we only release updates when they are high priority fixes. ",
      "created_at": "2021-03-01T22:14:40Z",
      "updated_at": "2021-03-01T22:14:40Z"
    }
  ],
  "created_at": "2020-07-10T14:53:53Z",
  "number": 13151,
  "state": "closed",
  "title": "Include .NET Core SDK Component options when installing PowerShell",
  "updated_at": "2021-03-01T22:14:40Z"
}