{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9815",
  "author": "jvierrajrv",
  "body": "PowerShell 5.1 and earlier\r\n\r\n<b>[system.drawing.Pont]'10,20'</b>\r\n\r\nPowerShell 7 - fails to perform the coercion and all point assignments in WinForms controls (location,size, etc) fail to coerce the assignment.\r\n",
  "closed_at": "2019-06-05T18:00:14Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'd say this is a likely to be an issue originating from the .NET Core side of things, given PowerShell was never really designed as a GUI tool first; it mostly likely only borrowed the existing defined casting operations provided in the .NET Framework which may be missing in Core.",
      "created_at": "2019-06-04T14:24:40Z",
      "updated_at": "2019-06-04T14:24:40Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "> I'd say this is a likely to be an issue originating from the .NET Core side of things, given PowerShell was never really designed as a GUI tool first; it mostly likely only borrowed the existing defined casting operations provided in the .NET Framework which may be missing in Core.\r\n\r\nNo.  PS has always used \"coercion\".  It is not a cast.  This is not something that happens in the Net assemblies.  How PS decides that the string is \"coercible\" is not documented but it has always worked even beyond WinForms.  System,Drawing is not really part of WinForms but is fundamental to using WinForms.  System.Drawing is the graphical class assembly used to manipulate images as well as other drawing primitives.\r\n\r\nPowerShell has always been able to use WinForms assemblies.  The assemblies are also available in PS 7.\r\n\r\nSystem.Windows.Forms.dll and System.Drawing.DLL are delivered with PowerShell 7 and are in the preview folder.  WinForms and the WinForms designer are part of PowerShell 7.\r\n",
      "created_at": "2019-06-04T14:42:09Z",
      "updated_at": "2019-06-04T14:42:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yes, PS has its own conversion logic. But it has never had specialized logic for System.Drawing assemblies as far as I've ever seen. Could be wrong, but we'd have to wait for the PS team folks to confirm that one. Might be a few days, they're mostly at PSConfEU at the moment. \ud83d\ude42 \r\n\r\nIt has a generic conversion routine when others fail, which can include (from memory) checking for Parse() methods that take the right argument type(s), looking for explicit or implicit operators, etc., etc.\r\n\r\nWinforms isn't part of PowerShell's codebase. It's part of .NET Core 3, which is a dependency of PowerShell. PowerShell _might_ be able to manually fix this, but it would likely be better able to be fixed by [the folks who actually maintain the WinForms code](https://github.com/dotnet/corefx), is all. \ud83d\ude42 ",
      "created_at": "2019-06-04T14:52:50Z",
      "updated_at": "2019-06-04T14:54:10Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "You miss the point.  WinForms is part of PowerShell 7.  \r\n\r\nThe coercion has always been done in PowerShell.  There has never been a constructor for System.Drawing.Point that takes a string.\r\n",
      "created_at": "2019-06-04T14:57:05Z",
      "updated_at": "2019-06-04T14:57:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "That conversion path utilizes the `System.ComponentModel.TypeConverterAttribute` that `System.Drawing.Point` declares in full framework.  That attribute isn't declared on the version included with the Core assembly `System.Drawing.Primitives`.",
      "created_at": "2019-06-04T16:04:57Z",
      "updated_at": "2019-06-04T16:04:57Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "Yes.  This needs to be addressed to maintain compatibility with Windows PowerShell.  That is the purpose of this post.  PS 7 is set to replace WMF 5.1 on Windows and backwards compatibility is required.\r\n\r\n",
      "created_at": "2019-06-04T16:18:53Z",
      "updated_at": "2019-06-04T16:18:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The place to address it, based on @SeeminglyScience's information, is in .NET Core where the type and its attributes are declared, then. \ud83d\ude42 \r\n\r\nPlease file the issue in [the .NET Core repo](https://github.com/dotnet/corefx) so they can address the regression.",
      "created_at": "2019-06-04T16:25:31Z",
      "updated_at": "2019-06-04T16:25:43Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-06-05T18:00:13Z",
      "updated_at": "2019-06-05T18:00:13Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "Issue posted to Net Core.\r\n\r\nI thank everyone for the guidance.  ",
      "created_at": "2019-06-05T18:17:41Z",
      "updated_at": "2019-06-05T18:17:41Z"
    },
    {
      "author": "karelz",
      "author_association": "NONE",
      "body": "@vexx32 just FYI: dotnet/core repo is general incoming repo for random issues (no code). The code itself lives in CoreFx repo.",
      "created_at": "2019-06-07T00:50:35Z",
      "updated_at": "2019-06-07T00:50:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Thanks, @karelz! So users wanting to file issues should primarily file against dotnet/core repo?",
      "created_at": "2019-06-07T01:08:05Z",
      "updated_at": "2019-06-07T01:08:05Z"
    },
    {
      "author": "karelz",
      "author_association": "NONE",
      "body": "@vexx32 no, sorry for not being clear. dotnet/core is option for people who have no idea where to file an issue.\r\nFor close partner technologies like PowerShell that build closely on top of CoreFx, I would hope the community and maintainers know where their underlying APIs live - in dotnet/CoreFx repo. And that they should encourage repro steps without PowerShell when filing there.\r\n\r\nThe key reasons are:\r\n1. It eliminates the chance it is something specific to PowerShell. (Avoids specialties like custom binding, Framework targeting, etc.)\r\n2. It is more actionable as few (if any) devs in CoreFx know what PowerShell does under the hood and we have 0 knowledge about anything more complex/tricky/specific.\r\n\r\nNote: Same approach is used for other higher-level technologies and frameworks like ASP.NET, WPF, WinForms, WCF, 3rd party libraries, etc. If we get repro steps from those, we first ask higher-level frameworks to be eliminated. Only in worst hard-to-repro-and-track-down issues we jump into investigations that involve the higher-level frameworks (and only if those are impacting multiple customers).\r\n\r\nDoes it make sense?\r\nIs there any way we can help to spread the word about this in PowerShell repo community?\r\nThanks!",
      "created_at": "2019-06-08T18:23:04Z",
      "updated_at": "2019-06-08T18:23:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That makes sense, thanks!\r\n\r\nSome of that maybe should be mentioned in the contributing docs / issue templates or something here, I'm not sure myself. @SteveL-MSFT might have more concrete ideas there.\r\n\r\nI think we may potentially run into a decent number of cases where folks aren't really familiar with how to tests things that they're seeing without PowerShell, so it might be on the rest of us in the repo here to put together simplified repro steps for testing and submission to dotnet/corefx as issues. ",
      "created_at": "2019-06-08T19:32:30Z",
      "updated_at": "2019-06-08T19:32:30Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "The PS guys claim it is a missing Interop in Core/FX.  I kind of doubt that but they should know.  thte above reference to the missing type sounds like a good start so someone should knock on Core/Fx to address this deficiency.\r\n",
      "created_at": "2019-06-08T19:44:49Z",
      "updated_at": "2019-06-08T19:44:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience since you seem to know where the regression happened, could you open the appropriate issue in dotnet/CoreFX to get this resolved? \ud83d\udc96 ",
      "created_at": "2019-06-08T19:55:38Z",
      "updated_at": "2019-06-08T19:55:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Thanks @vexx32, I've opened issue dotnet/corefx#38374\r\n\r\nAlso @jvierrajrv in the mean time you can use this as a workaround:\r\n\r\n```powershell\r\nUpdate-TypeData -TypeConverter System.Drawing.PointConverter -TypeName System.Drawing.Point -Force\r\n```\r\n\r\nThat will manually register the type converter for the session.",
      "created_at": "2019-06-08T22:45:55Z",
      "updated_at": "2019-06-08T22:50:20Z"
    },
    {
      "author": "karelz",
      "author_association": "NONE",
      "body": "Thanks @SeeminglyScience for your help! Your CoreFX bug report is pretty clear and should hopefully make it into .NET Core 3.0 (fingers crossed). Thanks!",
      "created_at": "2019-06-09T05:29:29Z",
      "updated_at": "2019-06-09T05:29:29Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "This is not in 3.0 - any chance it is in 3.1?  PS 7 Preview 4 die snot have it,  Some 3.1 seems to be in PS7 but this issue isn't.\r\n\r\n",
      "created_at": "2019-10-22T13:53:15Z",
      "updated_at": "2019-10-22T13:53:15Z"
    }
  ],
  "created_at": "2019-06-04T14:09:17Z",
  "number": 9815,
  "state": "closed",
  "title": "Coercion with System.Drawing not working in PS7",
  "updated_at": "2019-10-22T13:53:15Z"
}