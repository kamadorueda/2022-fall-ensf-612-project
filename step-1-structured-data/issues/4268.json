{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4268",
  "author": "mpeneva",
  "body": "Some of of my PowerShell scripts that I run on Mac failed with the following exception:\r\n\"The script failed due to call depth overflow.\"\r\nAfter some investigation, I came to the conclusion that the allow call depth in PowerShell v6.0 alpha,\r\nis smaller than the defined in PowerShell v5.0 (which I find is 100).\r\nCould you change or increase in PowerShell for Unix that fixed call depth to be at least 1000?\r\n",
  "closed_at": "2018-02-24T02:00:42Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you reproduce with latest version - Beta.4?\r\nIf so please add repo steps and more description.",
      "created_at": "2017-07-17T10:37:55Z",
      "updated_at": "2017-07-17T10:37:55Z"
    },
    {
      "author": "mpeneva",
      "author_association": "NONE",
      "body": "Hi and thanks for your response. I've updated the PS to version 4.0 beta, however it occurred a new issue, so we started looking at it with one of my colleagues, so once we're ready with that, I would try the above described issue with the beta version of PS.",
      "created_at": "2017-07-25T10:54:47Z",
      "updated_at": "2017-07-25T10:54:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you please add simple repo steps?",
      "created_at": "2017-07-25T12:33:32Z",
      "updated_at": "2017-07-25T12:33:32Z"
    },
    {
      "author": "mpeneva",
      "author_association": "NONE",
      "body": "Sure, I would , but currently there is a 'local' problem, that's not connected at all with the PS version. ",
      "created_at": "2017-07-25T13:44:57Z",
      "updated_at": "2017-07-25T13:44:57Z"
    },
    {
      "author": "it-praktyk",
      "author_association": "CONTRIBUTOR",
      "body": "I've observed the same issue what you can easily reproduce.\r\n\r\nPlease clone the Pester branch [Dev4-1_PSCore_compatibility](https://github.com/pester/Pester/tree/Dev4-1_PSCore_compatibility), check out to the commit [89344732785b862c4c0fcc72050290df6fce9e5f](https://github.com/pester/Pester/tree/89344732785b862c4c0fcc72050290df6fce9e5f) and run tests from the file [Functions/Assertions/Be.Tests.ps1](https://github.com/pester/Pester/blob/89344732785b862c4c0fcc72050290df6fce9e5f/Functions/Assertions/Be.Tests.ps1).\r\n\r\nThe test result\r\n\r\n```\r\n<OUTPUT_PARTIALL_OMMITED>\r\n\r\n    [-] throws exception when self-imposed recursion limit is reached 592ms\r\n      Expected: the expression to throw an exception with message {recursion depth limit}, an exception was raised, message was {The script failed due to call depth overflow.}\r\n          from <FOLDER_PATH>/Pester/Functions/Assertions/Be.Tests.ps1:99 char:21\r\n          +             { $a1 | Should be $a2 } | Should throw 'recursion depth l ...\r\n          +                     ~~~~~~~~~~~~~\r\n      99:             { $a1 | Should be $a2 } | Should throw 'recursion depth limit'\r\n      at Invoke-LegacyAssertion, <FOLDER_PATH>/Pester/Functions/Assertions/Should.ps1: line 190\r\n      at <ScriptBlock>, <FOLDER_PATH>/Pester/Functions/Assertions/Be.Tests.ps1: line 99\r\n\r\n<OUTPUT_PARTIALL_OMMITED>\r\n```\r\n\r\nThe failed test is the one that should prevent this kind of situation - it was introduced to Pester [here](https://github.com/pester/Pester/commit/ad7705dee2bf309828ee65f89c2522b0ac4da6f9).\r\n\r\nIt works correctly for Windows (2.0 - 6.0.0-beta.8) and Linux (6.0.0-beta.8). The issue was the first reported on [PSCore 6.0.0-beta.5](https://github.com/pester/Pester/issues/639#issuecomment-323929112).",
      "created_at": "2017-10-21T08:55:24Z",
      "updated_at": "2017-10-21T08:55:24Z"
    },
    {
      "author": "it-praktyk",
      "author_association": "CONTRIBUTOR",
      "body": "Today I've tested it on macOS and PowerShell Core v.6.0.0-beta.9  again. The issue still exists.",
      "created_at": "2017-10-28T20:02:17Z",
      "updated_at": "2017-10-28T20:02:17Z"
    },
    {
      "author": "it-praktyk",
      "author_association": "CONTRIBUTOR",
      "body": "Under the bug reproducing please use exact the code state - the link provided above. Later I've added a condition to don't run the failing test under macOS.",
      "created_at": "2017-10-28T21:32:06Z",
      "updated_at": "2017-10-28T21:32:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This seems to be an issue with coreclr.\r\n\r\n```powershell\r\nfunction recurse([int]$i) { $i; recurse ($i+1) }\r\nrecurse 0\r\n```\r\n\r\nOn Mac, this fails after ~100 iterations\r\nOn Windows, ~1400\r\nOn Linux, ~2800\r\n",
      "created_at": "2017-10-31T20:42:20Z",
      "updated_at": "2017-10-31T20:42:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can repo on C#?",
      "created_at": "2017-11-01T04:54:21Z",
      "updated_at": "2017-11-01T04:54:21Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Are you hitting the stack limit? Try checking it with `ulimit -Sa`, I understand it's smaller on Mac OS than Linux ...",
      "created_at": "2017-11-07T03:57:46Z",
      "updated_at": "2017-11-07T03:57:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "On both my MacBook Pro and Ubuntu 16.04, it's set to 8192k",
      "created_at": "2017-11-07T07:03:35Z",
      "updated_at": "2017-11-07T07:03:35Z"
    },
    {
      "author": "alekol",
      "author_association": "NONE",
      "body": "I tried increasing the stack size to 65k, made no difference..\r\n\r\nIs anyone looking into this?",
      "created_at": "2017-12-13T12:27:04Z",
      "updated_at": "2017-12-13T12:27:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Analyze of the stack limitations on Russian https://habrahabr.ru/post/320970/ \r\n\r\nI think the code is [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/hostifaces/LocalPipeline.cs#L154). It is under `#if CORECLR`. I don't know why we skipped this and don't remove .Net Core 1.0 code. I believe we can easily fix this. \r\n/cc @SteveL-MSFT Sorry I'm on vacation and I can't do it on the week.",
      "created_at": "2017-12-13T15:42:29Z",
      "updated_at": "2017-12-13T15:42:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov enjoy your vacation.  Let me try a private patch to see if this fixes this by providing the maxstack parameter.",
      "created_at": "2017-12-13T20:36:09Z",
      "updated_at": "2017-12-13T20:36:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Explicitly setting the MaxStack parameter when creating a new thread didn't have any effect even when set to 100MB.",
      "created_at": "2017-12-13T20:54:49Z",
      "updated_at": "2017-12-13T20:54:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I found that CoreCLR has a trace but I don't know how turn in it https://github.com/dotnet/coreclr/blob/c440335be80ee0762856d0be6e91ec3ea2f90504/src/pal/src/thread/thread.cpp#L663",
      "created_at": "2017-12-14T18:33:03Z",
      "updated_at": "2017-12-14T18:33:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[MacOS](https://developer.apple.com/library/content/qa/qa1419/_index.html) set 8MB stack size for process but 512KB for  subsequent threads.\r\n\r\n[Windows default](https://msdn.microsoft.com/en-us/library/windows/desktop/ms686774%28v=vs.85%29.aspx) is 1 MB (\"The default stack reservation size used by the linker is 1 MB.\")",
      "created_at": "2017-12-15T15:15:55Z",
      "updated_at": "2018-01-17T10:30:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Windows PowerShell Default for local pipeline thread stack size is [10 MB](https://github.com/PowerShell/PowerShell/blob/41c66dbc26f9f4c0a8af520017194b5e3621a847/src/System.Management.Automation/engine/hostifaces/LocalPipeline.cs#L258).",
      "created_at": "2018-01-17T10:34:45Z",
      "updated_at": "2018-01-17T10:34:45Z"
    },
    {
      "author": "janvorli",
      "author_association": "CONTRIBUTOR",
      "body": "This has nothing to do with stack size. Powershell has implicit limit of max 100 levels of recursion no matter how much stack is left. See the following article, the \"PowerShell's Call Depth Limit\" section:\r\nhttps://weblogs.asp.net/jongalloway/working-around-a-powershell-call-depth-disaster-with-trampolines",
      "created_at": "2018-01-18T10:10:05Z",
      "updated_at": "2018-01-18T10:10:05Z"
    },
    {
      "author": "janvorli",
      "author_association": "CONTRIBUTOR",
      "body": "I am sorry, I've not realized that the limit was for powershell 1.0. So please disregard my comment above.",
      "created_at": "2018-01-18T12:30:55Z",
      "updated_at": "2018-01-18T12:30:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently we set 10 MB stack size for local pipeline threads on all platforms.\r\nWe can change the value based on feedback in future.",
      "created_at": "2018-02-24T05:12:59Z",
      "updated_at": "2018-02-24T05:12:59Z"
    }
  ],
  "created_at": "2017-07-17T04:51:57Z",
  "number": 4268,
  "state": "closed",
  "title": "\"call depth overflow\" exception in Powershell scripts on Mac",
  "updated_at": "2018-02-24T05:12:59Z"
}