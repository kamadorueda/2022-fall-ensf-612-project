{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14307",
  "author": "mklement0",
  "body": "A path such as `foo\\bar.ps1` executed as a _command_ is inherently ambiguous:\r\n\r\n* (a) It could refer to a *module* named `foo`, and its `bar.ps1` _command_ (even though module command names don't usually end in `.ps1` - they _can_, but since they're _functions_ it would invite confusions).\r\n\r\n* (b) It could refer to a *subdirectory* `foo` and file `bar.ps1` in it.\r\n\r\nOn _Windows_, the ambiguity is resolved as follows:\r\n\r\n * PowerShell _first_ interprets the path as a _file-system_ path.\r\n * If the path *doesn't exist*, it _falls back_ to interpreting it as a module-command reference.\r\n * As an aside: this fallback logic can result in a confusing error message, if the user accidentally passed a non-existent script-file path, as the message then states that the `foo` module could not be loaded.\r\n\r\nOn _Unix_-like platforms, however, such a path is only ever considered a _module-command_ reference - even though we otherwise allow _interchangeable_ use of  `\\` and `/` on all platforms.\r\n\r\n  * In other words: on Unix, you cannot use the syntax `foo\\bar.ps1` to invoke script `bar.ps1` in subfolder `foo`.\r\n\r\nThe workaround is simple - use `/` instead of `\\` or prefix with `.\\` - but there's no good reason for this discrepancy.\r\n\r\n## Steps to reproduce\r\n\r\nOn Unix\r\n\r\n```powershell\r\nPush-Location (New-Item -Type Directory ($tmpDir = \"Temp:\\$PID\"))\r\n\r\nNew-Item -Force foo/bar.ps1 -Value '\"hi\"' \r\n\r\n# OK: starting the relative path with .\\ unambiguously makes it a file-system path.\r\n.\\foo\\bar.ps1 | Should -Be 'hi'\r\n\r\n# BROKEN: On Unix, this relative path is always interpreted as reference to *module* 'foo'\r\nfoo\\bar.ps1 | Should -Be 'hi'\r\n\r\n\r\nPop-Location\r\nRemove-Item $tmpDir -Recurse\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should suceed.\r\n\r\n\r\n## Actual behavior\r\n\r\nThe 2nd test fails:\r\n\r\n```none\r\n |  foo\\bar.ps1 | Should -Be 'hi'\r\n     |  ~~~~~~~~~~~\r\n     | The module 'foo' could not be loaded. For more information, run 'Import-Module foo'.\r\n```\r\n\r\nNote that in _interactive_ use you do get the suggestion that `.\\` should be used.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.1\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-12-02T16:57:57Z",
  "labels": [
    "Issue-Question",
    "Area-FileSystem-Provider"
  ],
  "number": 14307,
  "state": "open",
  "title": "On Unix, a relative path with backslashes that doesn't start with \".\\\" is invariably interpreted as a module-qualified command",
  "updated_at": "2021-12-01T07:21:52Z"
}