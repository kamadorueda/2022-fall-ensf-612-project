{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17128",
  "author": "markekraus",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n```powershell\r\n$a, $b = 0,1; $a; $b\r\n\"---\"\r\n$a, $b = $true, $false; $a; $b\r\n\"---\"\r\n$a, $b = 0,1+1; $a; $b\r\n\"---\"\r\n$a, $b = 0,1*2; $a; $b\r\n\"---\"\r\n$a, $b = 0,2*5-1; $a; $b\r\n\"---\"\r\n$a, $b = @(\r\n    0,\r\n    2*5-1\r\n)\r\n$a; $b\r\n\"---\"\r\n$a, $b = @(\r\n    0\r\n    2*5-1\r\n)\r\n$a; $b\r\n```\n\n### Expected behavior\n\n```console\n0\r\n1\r\n---\r\nTrue\r\nFalse\r\n---\r\n0\r\n2\r\n---\r\n0\r\n2\r\n---\r\n0\r\n9\r\n---\r\n0\r\n9\r\n---\r\n0\r\n9\n```\n\n\n### Actual behavior\n\n```console\n0\r\n1\r\n---\r\nTrue\r\nFalse\r\n---\r\n0\r\n1\r\n1\r\n---\r\n0\r\n1\r\n0\r\n1\r\n---\r\nInvalidOperation: C:\\temp\\literalissue.ps1:9:1\r\nLine |\r\n   9 |  $a, $b = 0,2*5-1; $a; $b\r\n     |  ~~~~~~~~~~~~~~~~\r\n     | Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n\r\n0\r\n1\r\n0\r\n1\r\n---\r\nInvalidOperation: C:\\temp\\literalissue.ps1:11:1\r\nLine |\r\n  11 |  $a, $b = @(\r\n     |  ~~~~~~~~~~~\r\n     | Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n\r\n0\r\n1\r\n0\r\n1\r\n---\r\n0\r\n9\n```\n\n\n### Error details\n\n```console\nException             : \r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord : \r\n        Exception             : \r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n            HResult : -2146233087\r\n        TargetObject          : op_Subtraction\r\n        CategoryInfo          : InvalidOperation: (op_Subtraction:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : MethodNotFound\r\n        InvocationInfo        : \r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : $a, $b = 0,2*5-1; $a; $b\r\n            PositionMessage  : At line:1 char:1\r\n                               + $a, $b = 0,2*5-1; $a; $b\r\n                               + ~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : \r\n        Name          : CallMethod\r\n        DeclaringType : System.Management.Automation.ParserOps, System.Management.Automation, Version=7.2.2.500, Culture=neutral,       \r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  : \r\n   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, \r\nPSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)\r\n   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String        \r\nerrorOp)\r\n   at CallSite.Target(Closure , CallSite , Object , Int32 )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : op_Subtraction\r\nCategoryInfo          : InvalidOperation: (op_Subtraction:String) [], RuntimeException\r\nFullyQualifiedErrorId : MethodNotFound\r\nInvocationInfo        : \r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : $a, $b = 0,2*5-1; $a; $b\r\n    PositionMessage  : At line:1 char:1\r\n                       + $a, $b = 0,2*5-1; $a; $b\r\n                       + ~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nException             : \r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord : \r\n        Exception             : \r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n            HResult : -2146233087\r\n        TargetObject          : op_Subtraction\r\n        CategoryInfo          : InvalidOperation: (op_Subtraction:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : MethodNotFound\r\n        InvocationInfo        : \r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : $a, $b = @(\r\n\r\n            PositionMessage  : At line:1 char:1\r\n                               + $a, $b = @(\r\n                               + ~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : \r\n        Name          : CallMethod\r\n        DeclaringType : System.Management.Automation.ParserOps, System.Management.Automation, Version=7.2.2.500, Culture=neutral,       \r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : Method invocation failed because [System.Object[]] does not contain a method named 'op_Subtraction'.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  : \r\n   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName,\r\nPSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)\r\n   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String        \r\nerrorOp)\r\n   at CallSite.Target(Closure , CallSite , Object , Int32 )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : op_Subtraction\r\nCategoryInfo          : InvalidOperation: (op_Subtraction:String) [], RuntimeException\r\nFullyQualifiedErrorId : MethodNotFound\r\nInvocationInfo        : \r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : $a, $b = @(\r\n\r\n    PositionMessage  : At line:1 char:1\r\n                       + $a, $b = @(\r\n                       + ~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-04-15T00:53:18Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Comma is evaluated before arithmetic operators  (+ and * also have string and array functions obviously) \r\n\r\nso `1,2 + 3`  is `@(1,2) + 3`   i.e.` @(1,2,3)`\r\nand `0,2*5-1` is `(@(0,2) * 5) - 1`  which becomes ` @(0,2,  0,2, 0,2,  0,2,  0,2)  -1 `  - and you can't subtract from an array. \r\n    \r\n\r\nI was writing this up recently (copy/paste  )\r\n1.\t.Members and ::StaticMembers\r\n2.\t[Type Casting]\r\n3.\tArray operations\r\n4.\tArithmetic\r\n5.\tText operators (-f [format], -join, -split, -match and -replace )\r\n6.\tBitwise operators ( -band, -bor, -bxor, -bnot )\r\n7.\tType operators ( -is, -isnot, -as )\r\n8.\tComparison operators ( -eq, -ne, -gt, -lt, -le, -ge )\r\n9.\tLogical operators ( -and, -or, -xor, -not, ! )\r\n10.\tAssignment operators\t(=, +=, -=, *=, /=, %=)\r\n11.\tRedirection operators\t(>, >>, 2>, 2>, 2>&1 etc)\r\n\r\n\r\n",
      "created_at": "2022-04-09T08:46:13Z",
      "updated_at": "2022-04-09T08:46:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I think this is documented in the precedence article: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence?view=powershell-7.2#long-description\r\n\r\nMight be a good idea to also document some of the sometimes surprising consequences of operator precedence.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence\">about Operator Precedence - PowerShell</a></strong></div><div>Lists the PowerShell operators in precedence order.</div></blockquote>",
      "created_at": "2022-04-09T13:14:43Z",
      "updated_at": "2022-04-09T13:14:45Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear, I am well aware of the precedence, but I do not think this is intended or good behavior at all. Especially since this makes PowerShell behave completely unlike any other language that does something similar. ",
      "created_at": "2022-04-09T17:18:36Z",
      "updated_at": "2022-04-09T17:18:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye, I can't say I disagree with that assessment, PowerShell's operator precedence can be quite unintuitive at times compared to many other languages.",
      "created_at": "2022-04-09T17:52:17Z",
      "updated_at": "2022-04-09T17:52:17Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> To be clear, I am well aware of the precedence, but I do not think this is intended or good behavior at all. Especially since this makes PowerShell behave completely unlike any other language that does something similar.\r\n\r\nThe original title, and the examples you posted didn't suggest an awareness of the precedence: it hasn't  changed over 15 years of PowerShell, so it's fairly safe to say it is as the designers intended.  And I'll defer to _their_ knowledge on other languages, (I have 40 years experience but I've forgotten most of what I knew most of the score of languages I've used.) Like it or hate it , agree with their reasoning or not, it's too deeply embedded to change it.  \r\n\r\nWhen + is used for both string and array concatenation and for providing the sum of two values, there is inevitably going to be a question of what, for example,  \"A\", \"B\" + \"C\", \"D\"   should do - does **+** combine two arrays to make a 4 element array, or does it  combine two strings giving a 3 element array with \"BC\" as the middle element? I don't think it is obvious which one and would always put `@(\"A\",\"B\")  + @(\"C\",\"D\")` or `\"A\", (\"B\" + \"C\"), \"D\",`  although only the latter version is required. \r\nTo be honest I when someone says, \"What I want to write needs () in it and I think that what I didn't want to write should be the version that needs them\" it never gets anywhere. \r\n\r\n\r\n \r\n",
      "created_at": "2022-04-09T21:48:54Z",
      "updated_at": "2022-04-09T21:50:24Z"
    },
    {
      "author": "dnnyg",
      "author_association": "NONE",
      "body": "Kind of a funny situation isn\u2019t it?\n",
      "created_at": "2022-04-09T22:37:50Z",
      "updated_at": "2022-04-09T22:37:52Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> The original title, and the examples you posted didn't suggest an awareness of the precedence\r\n\r\nI realized it may not have been clear to those unfamiliar with who I am and what contributions I have made to PowerShell, which is why I provided clarity.\r\n\r\n> it hasn't changed over 15 years of PowerShell, so it's fairly safe to say it is as the designers intended.\r\n\r\nAs someone who has done extensive contributions to PowerShell, I can say this is _not_ a safe assumption. :)\r\n\r\n> Like it or hate it , agree with their reasoning or not, it's too deeply embedded to change it.\r\n\r\nThis is also not true per my experience contributing to the language. :) \r\n\r\n",
      "created_at": "2022-04-09T23:04:28Z",
      "updated_at": "2022-04-09T23:07:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@markekraus  for all the \"Don't you know who I am\", two facts remain.\r\n(1) You posted under the title \"unexpected behavior...\"  and in the \"Expected\" you said that expected `0,1 + 1` to be `0, (1+1)` and `0,1 *2` to be `0,(1*2)` when PowerShell has always treated them as `(0,1) + 1` , and  `(0,1) *2` \r\nAnd when it PowerShell's longstanding behaviour was pointed out you said you were well aware of the order of precedence ... aware of it, and yet it is unexpected ? \r\nIf you wanted to start a discussion with \"PowerShell's order of precedence is, and always has been, wrong\" that would be another matter...\r\n\r\n(2)  Array membership is processed before array / string concatenation or arithmetic addition, because in 2005 or 2006 Payette, Truher, et al would have decided that was the way to do to implement it and not through some accident which has been overlooked for the last 15 years. \r\n\r\nWhat I meant by _too embedded to change_ is precedence is fairly fundamental, and changing it will break an unknowable number of scripts.\r\n\r\nI'm guessing you think this is wrong too\r\n```\r\nPS > [string]5 * 4 \r\n5555\r\n```\r\nSurely arithmetic should be done first and it should be a string contain \"20\" not \"5\" repeated 4  times, so making this stuff \"right\" requires quite a big reshuffle and there's too much breakage to just to save you an unexpected set of ()\r\n\r\n",
      "created_at": "2022-04-10T00:33:38Z",
      "updated_at": "2022-04-10T00:33:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill I think this is getting unproductive. I will attempt to bring this back to the intent of my post, and I ask that you do the same.\r\n\r\nI'm challenging that this is _not_ intended behavior regardless of how long it has been this way. I'm basing this on one of the examples I provided not matching the others:\r\n\r\n```powershell\r\n$a, $b = @(\r\n    0,\r\n    2*5-1\r\n)\r\n$a; $b\r\n\r\n$a, $b = @(\r\n    0\r\n    2*5-1\r\n)\r\n$a; $b\r\n```\r\nThose _should_, (in my opinion informed by exposure to many programming languages that offer similar functionality) be the same and _should_ (in my opinion informed by exposure to many programming languages that offer similar functionality) provide the result:\r\n\r\n```text\r\n0\r\n9\r\n0\r\n9\r\n```\r\n\r\nAnyone new to PowerShell would have a reasonable expectation (in my opinion informed by exposure to many programming languages that offer similar functionality) that `2*5-1` would be evaluated before being inserted into the array and _would not_ have a reasonable expectation  (in my opinion informed by exposure to many programming languages that offer similar functionality) that it would be treated as performing duplication and attempted subtraction of an array.\r\n\r\nThis language can and has changed and evolved. Breaking changes with significant consequences can and have been made regardless of the effort. I do not wish to surrender to argumentum ad antiquitatem and appeals to complexity. I wish to improve the language so that users (new and experienced) can fall into pits of success.\r\n\r\nIn the best-case scenario, this behavior _is_ changed to be more user-friendly and intuitive. At worse, the documentation will be updated to reflect this behavior more clearly.",
      "created_at": "2022-04-10T02:33:21Z",
      "updated_at": "2022-04-10T02:34:49Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I'm not sure how well you understand the role of @() , and line break. \r\nTry, \r\n```\r\n$x =  @(\r\nhostname\r\nwhoami\r\n$psversiontable.\r\n os\r\n)\r\n```\r\nNotice there is a a line break between  the member operator and the member name.   Like other operators the  ,  can be followed by LF or CR/LF \r\n\r\nYour example \r\n```\r\n$a, $b = @(\r\n    0,\r\n    2*5-1\r\n)\r\n```\r\nShows that you can insert line breaks into  `@(0, 2*5-1 )`   (Where, incidentally the `@()`  is redundant) it doesn't matter whether you write `4,3*2+1` OR \r\n```\r\n4,\r\n3*\r\n2+\r\n1 \r\n```\r\nThey are the same statement with different white space.  And without the comma\r\n```\r\n    0\r\n    2*5-1\r\n``` \r\nAre two values  which become an array by wrapping in `@().`  My example  won't work as `$x = hostname, whoami` : to remove the line break between the statements needs a semi-colon - a comma would cause an error. \r\n\r\n**You're saying that**  `0,1*2`  **and** `@(0;1*2)`  **should arrive at the same result** - the former by how it groups one expression and the latter by processing two expressions.  That's not how it works, but it isn't an unreasonable thing to believe. \r\n \r\nWe can trade years of experience and number of languages used. TBH most of the languages I've used didn't treat a comma separated list without any begin/end markers as an array. And back when I did my computer science degree we were taught that overloaded operators were bad, so+ should not be _both_ concatenation and arithmetic.  Given that 1,2,3,4 -gt 2 applies the greater than operator to all 4 array members,  my computer science lecturers would probably say 1,2,3,4  + 5 should return 6,7,8,9.  And the chances of _that_ change ever being made would be Zero.  \r\n \r\nOff the top of my head I can't say which languages treat `0,1*2` ,  `(0,1) * 2` and `0, (1*2)` all as legal ways to get an array/list/set.  What someone coming to PowerShell _expects_ would be shaped by other languages they have used, so I wouldn't like to say what the _most common_ expectation is. As above I think there are multiple expectations which are reasonable, but only one can be what actually happens. And I'm not sure even  PowerShell experts would always correctly predict the result of\r\n```\r\n\"A\" + \"B\", \"C\" -join \"D\" + \"E\"\r\n```\r\nThe 4 operations can arranged in 24 sequences (4!)  all are possible: whether you want    \r\n`(((\"A\" + \"B\"), \"C\") -join \"D\") + \"E\"`     \r\nor `\"A\" + (\"B\", \"C\" -join (\"D\" + \"E\"))`       \r\nor `(\"A\" + (\"B\",\"C\")) -Join (\"D\" +\"E) `      \r\nyou can write it that way and _even if the way you want happens to be default_ I would say you should include the brackets for clarity  \r\n\r\nThe more time that passes with the language working one way, the more scripts there are which depend on that way of working and the greater the cost of changing. You're not talking about a change which would stop scripts running in all affected cases, but one that can result in different data being modified / deleted on  different versions of PowerShell. It would lead to \"Upgrading to  Version X corrupted our data\" experiences when what you see as wrong is (a) by design and (b) fixed by putting () in the right place. \r\n\r\n",
      "created_at": "2022-04-10T10:04:20Z",
      "updated_at": "2022-04-10T10:10:05Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "While I understand the issue,  I am not sure it is one that needs fixing. The time for that discussion would have been pre Powershell 2. We have managed so far with the current behaviour I am nervous at potential for breaking existing scripts.  So I am reluctant to want to 'fix' this.\r\n\r\nAnd a second point. The original problematic code is rather obscure and in my view not appropriate in production code.  I'd argue such code be made clearer than to try to change powershell. :-) Mileage probably varies on that point.",
      "created_at": "2022-04-10T12:51:51Z",
      "updated_at": "2022-04-10T12:51:51Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Closing this issue as I don't care enough to continuously fight against \"this is how it's always been\" and \"this could be hard.\"\r\n\r\nI still think this is worth fixing to make it easier for people new to PowerShell and more symmetrical with other PowerShell language features. But some people in this thread make it inhospitable to watch this issue and provide feedback.\r\n\r\nTo the current collaborators and maintainers of this project: this unwelcoming behavior is problematic, and I hope you can improve the experience for others.",
      "created_at": "2022-04-15T00:53:18Z",
      "updated_at": "2022-04-15T00:53:18Z"
    }
  ],
  "created_at": "2022-04-09T00:02:54Z",
  "number": 17128,
  "state": "closed",
  "title": "Unexepected behavior evaluating statements in comma-based list literals",
  "updated_at": "2022-04-15T00:53:21Z"
}