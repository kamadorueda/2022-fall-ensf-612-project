{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13307",
  "author": "daxian-dbw",
  "body": "### Problem Statement\r\n\r\nThe RFC [Generalized Splatting](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md) is going to be withdrawn. That RFC proposed to use [the generalized splatting syntax](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md#splatting-in-method-invocations) to support named arguments to .NET method invocation, but the powershell committee has decided against the generalized splatting after further discussion.\r\n\r\nHowever, it would be nice to support named arguments in .NET method invocation with a different syntax in PowerShell, which would improve the readability of the script.\r\n\r\n### Proposed technical implementation details\r\n\r\nThe proposal is to use the [C# syntax for named arguments](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#named-arguments). For example:\r\n```powershell\r\n$myOrder.PrintOrderDetails(\"Gift Shop\", 31, \"Red Mug\")\r\n$myOrder.PrintOrderDetails(orderNum: 31, productName: \"Red Mug\", sellerName: \"Gift Shop\")\r\n```\r\nAnd use the same semantics as in C# if possible:\r\n1. The arguments can be in any order as long as they are all named;\r\n2. When named arguments are used with positional arguments, they are valid if\r\n    - they're not followed by any positional arguments,\r\n    - they're all used in the correct position (_not sure if this is doable in PowerShell -- given that conversion is lax compared to C#, it may not be feasible to accurately decide if positional arguments are used in correct position_)\r\n\r\n### No Goal\r\n\r\n- COM methods is not in scope.\r\n- Script methods (ETS) is doable, but not in scope.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I made a few attempts at implementing something like this, but never really got past the hurdle of parsing them. Might be worth another attempt though, I often wish this was a thing.",
      "created_at": "2020-07-30T00:24:36Z",
      "updated_at": "2020-07-30T00:24:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Also, this is a duplicate of https://github.com/PowerShell/PowerShell/issues/7506",
      "created_at": "2020-07-30T00:28:50Z",
      "updated_at": "2020-07-30T00:28:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd close the old #7506 to avoid confusion with the withdrawned RFC.",
      "created_at": "2020-07-30T08:48:28Z",
      "updated_at": "2020-07-30T08:48:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes, I agree with @iSazonov. #7506 is the issue that led to the generalized splatting proposed in the [RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md), which is going to be withdrawn, so I think it's better to close that one to make it less confusing.",
      "created_at": "2020-07-30T16:03:17Z",
      "updated_at": "2020-07-30T16:09:25Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw  IIRC the primary goal for splatting method arguments was really just to splat method arguments. This is a useful thing by itself and would bring parity with the ability to splat  arguments to commands. However as a side-effect for doing this, it became possible to do the equivalent of named parameters by splatting a hashtable. This is probably still something we should support. However doing it this way makes it _value_  based and thus highly dynamic v.s. a _syntax-based_ solution which would lend itself to static analysis. So I am now of the opinion that we really should do both: formally supporting named parameters and also supporting  splatting in method calls. In fact, in general we should allow splatting in any collection context (splatting hashtables into hashtables, splatting arrays into arrays, etc.) ",
      "created_at": "2020-07-31T19:10:09Z",
      "updated_at": "2020-07-31T19:10:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's a fun idea, but I don't really see that as being especially useful. \r\n\r\nSplatting an array into an array / a hashtable into a hashtable is functionally no different than `$array1 + $array2` / `$hashtable1 + $hashtable2`, at least that's how it'd be read in most cases I can imagine presently.\r\n\r\nI like the idea of allowing some kind of splatting for method arguments, but IMO it's more important to just support named arguments in the first place; splatting for methods is something I'd see as a secondary and less useful goal.",
      "created_at": "2020-07-31T19:52:30Z",
      "updated_at": "2020-07-31T19:52:30Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Just to clarify, the scenario for ubiquitious splatting is building \"complex\" data structures where you want to default some of the properties on an object. Something like the following:\r\n\r\n```powershell\r\n\r\n$defaultProperties = @{ Width = 200; height = 50 }\r\n$defaultControls = [ ... define some buttons ... ]\r\n\r\n# Partial specification for a GUI form.\r\n$form = Form @{\r\n        Text      = \"Hi\"\r\n        BackColor = \"red\"\r\n        Controls  = @(\r\n            @{\r\n                Name = \"b1\"\r\n                OnClick = { ... }\r\n                @defaultProperties # Add the default values to the button spec\r\n            }\r\n            @{\r\n                Name = \"b2\"\r\n                OnClick = { ... }\r\n                @defaultProperties\r\n            }\r\n            ; add the default controls (help, etc.)\r\n            @defaultControls\r\n        )\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2020-07-31T23:12:07Z",
      "updated_at": "2020-07-31T23:12:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That makes sense for hashtables, I really like that syntax. For arrays, though, that's exactly equivalent to just dropping the array variable to the pipeline normally.",
      "created_at": "2020-07-31T23:27:46Z",
      "updated_at": "2020-07-31T23:28:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">COM methods is not in scope.\r\nScript methods (ETS) is doable, but not in scope.\r\n\r\n@daxian-dbw Could you please add more info? These limitations would confuse users if they will suddenly get errors for some methods.",
      "created_at": "2020-08-01T17:21:21Z",
      "updated_at": "2020-08-01T17:21:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov After enabling the `ComInterop` code by #13304, the COM operations will be handled by the com binders, which is the code copied from dotnet/runtime with additional refactoring. I'm afraid we don't have enough expertise to make changes to the code, and thus the COM method support is not in scope.\r\n\r\nWhoever is going to work on this issue can first target making it work for .NET methods. Although COM/Script are not in scope, it doesn't mean they shouldn't be supported, but just should be a separate task/issue.",
      "created_at": "2020-08-03T16:19:43Z",
      "updated_at": "2020-08-03T16:19:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> So I am now of the opinion that we really should do both: formally supporting named parameters and also supporting splatting in method calls. In fact, in general we should allow splatting in any collection context (splatting hashtables into hashtables, splatting arrays into arrays, etc.)\r\n\r\n@bpayette If the \"formally named parameter\" for method invocation is implemented, I don't think it will be much additional work to support splatting hashtable as named arguments for method invocation. As for the \"general splatting\" support, I think it's interesting and worth more discussion.",
      "created_at": "2020-08-03T16:28:01Z",
      "updated_at": "2020-08-03T16:28:01Z"
    }
  ],
  "created_at": "2020-07-29T23:25:13Z",
  "number": 13307,
  "state": "open",
  "title": "Support named arguments in .NET method invocation",
  "updated_at": "2020-08-03T16:28:01Z"
}