{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9580",
  "author": "daxian-dbw",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$s = @(\"hello\")\r\n$hash = @{ $s = 'Yay' }\r\n$hash.Contains($s)\r\n> True\r\n$hash[$s]\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n$hash[$s]\r\n> Yay\r\n```\r\n\r\n# Actual behavior\r\n\r\n`$hash[$s]` returns nothing\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Do I understand right though, that `$hash. $s` works?\r\n",
      "created_at": "2019-05-12T05:42:45Z",
      "updated_at": "2019-05-12T05:42:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes. Within the context of the repro steps, `$hash. $s` works as expected.\r\n`$hash[$s]` doesn't work here because powershell incorrectly treating the array `$s` as slicing indexes.\r\n\r\nA slicing index example:\r\n```\r\n> $a = 1,2,3\r\n> $a[@(1,2)]\r\n2\r\n3\r\n```",
      "created_at": "2019-05-12T06:04:14Z",
      "updated_at": "2019-05-12T06:06:41Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw It isn't \"incorrectly\" treating the array as a slice. This is by design. We wanted symmetric behavior between indexables wrt slicing. It does mean that you can't index using a collection reference but that was viewed as being a fairly obscure secondary scenario.  The workaround is to simply use the `item` property:\r\n```powershell\r\nPS[1] (20) > $a = @{($index1 = (1,2,3)) = \"one\"; ($index2 = (4,5,6)) = \"two\"}\r\nPS[1] (21) > $a.item($index1)\r\none\r\nPS[1] (22) > $a.item($index2)\r\ntwo\r\nPS[1] (23) >\r\n```\r\nNote that changing the current behaviour would be a significant breaking change so I'm not sure what you are proposing here.",
      "created_at": "2019-05-16T15:03:41Z",
      "updated_at": "2019-05-16T15:03:41Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@bpayette, so, this is expected to be usable:\r\n\r\n```PowerShell\r\n$a = @{a=1;b=2;c=3}\r\n$b='a','b','c'\r\n$a[$b]\r\n```\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\nAnd this is why an array should not be the key of a hashtable.  `Item()` obviously solves the problem, but ONLY if you know that the key is an array.   If you were passed both the key and the hash, you may not be fully away of what methods you can use.",
      "created_at": "2019-05-16T17:08:00Z",
      "updated_at": "2019-05-16T17:08:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Tbh, I generally tend to expect that the hashtable literal syntax wouldn't accept anything other than a string as a key name, and am then generally surprised when it does strange things like this.\r\n\r\nI almost want to say it's worth breaking some of the more esoteric scripts and restricting the literal syntax to only use value types as keys; after all, using a reference type as a key is... gonna be weird at the best of times. You need a reference to that item to get the item back from the table, at which point it almost becomes pointless to keep the data in a hashtable anyway.",
      "created_at": "2019-05-16T17:46:10Z",
      "updated_at": "2019-05-16T17:46:10Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@msftrncs Yes - this is supposed to be usable. \r\n> , but ONLY if you know that the key is an array\r\n\r\nRight. And if it's your code, then you should know that. If it's a 3rd party library, then you need to know how that library works in order to use it properly. I would recommend against doing this in a public interface because it is confusing.\r\n\r\n@vexx32 Restricting the keys to non-mutable types (not just value types since strings are references) would have make sense but we didn't think about that way back in V1.",
      "created_at": "2019-05-16T18:16:11Z",
      "updated_at": "2019-05-16T18:16:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Right, but considering it's still for most intents and purposes utterly arcane and unusable I think that would be a change worth making, no?",
      "created_at": "2019-05-16T18:32:05Z",
      "updated_at": "2019-05-16T18:32:05Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Yes it's arcane but clearly @daxian-dbw  had a reason from opening this bug. \r\n\r\n@chuanjiao10 Anxiety is a good word :-) ",
      "created_at": "2019-05-16T19:37:17Z",
      "updated_at": "2019-05-16T19:37:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Indeed, @bpayette; it arose from this arguably even more arcane situation that one can find themselves in: https://github.com/PowerShell/PowerShell/issues/9564",
      "created_at": "2019-05-16T19:50:14Z",
      "updated_at": "2019-05-17T02:20:54Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Just to clarify, that hashtable comes from .NET right?  So the same class can be used in the same way from other .NET languages (though their syntax might be more conventional (key=object, value=object))?   So while PowerShell could have syntactically prevented a non-mutable key, that would not have prevented someone in a C# cmdlet from producing one?\r\n\r\n@vexx32, I think you mentioned the wrong person above.  :)",
      "created_at": "2019-05-17T02:19:20Z",
      "updated_at": "2019-05-17T02:19:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oops, fixed.\r\n\r\nYes, I'm talking only about the PowerShell literal syntax. Even in PS, you could still opt to add weird keys to your hashtable via the `$ht.Add()` method if you choose.\r\n\r\nI'm just thinking it probably makes the most sense for PS not to support that in its literal hashtable declarations due to the esoteric and confusing nature of how it works with objects that can only be compared by reference.",
      "created_at": "2019-05-17T02:22:11Z",
      "updated_at": "2019-05-17T02:22:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Right, but considering it's still for most intents and purposes utterly arcane and unusable I think that would be a change worth making, no?\r\n\r\nWhile I agree that it's difficult to find a use case for an array as a key, I don't agree as a general rule for all reference types.  For example a reference type:\r\n\r\n1. Whose instances are created only once and then cached (e.g. `System.RuntimeType`)\r\n1. That overrides `GetHashCode` and the equality operators/methods (though, hopefully it would also be immutable in design)\r\n1. That is stored as a value in another dictionary\r\n\r\n",
      "created_at": "2019-05-20T13:02:00Z",
      "updated_at": "2019-05-20T13:02:00Z"
    }
  ],
  "created_at": "2019-05-12T04:46:32Z",
  "number": 9580,
  "state": "open",
  "title": "Indexing doesn't work for a Hashtable with an array key",
  "updated_at": "2019-09-29T16:58:21Z"
}