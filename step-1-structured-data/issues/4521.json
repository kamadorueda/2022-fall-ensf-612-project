{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4521",
  "author": "mklement0",
  "body": "On Windows, the default behavior of `Start-Process` is to run a program _in a new window_, _asynchronously_.\r\n_Console_ applications can optionally be forced to run in the _current_ console (terminal) with `-NoNewWindow`, but that is [of limited usefulness](https://github.com/PowerShell/PowerShell/issues/1543#issuecomment-320771943).\r\n\r\nOn Unix (Linux and macOS), as of PowerShell Core v6.0.0-beta.5, **`-NoNewWindow` is the _implied and unchangeable default_**: terminal (console) programs _invariably_ execute in the _current_ terminal, which is **rarely useful**:\r\nA program asking for interactive input interferes with the current shell and/or one producing (non-redirected) output prints it _asynchronously_ to the current terminal, which can be disruptive - see #1543.\r\n\r\nFor non-interactive terminal programs, launching a _job_, e.g., by simply appending ` &` - is the superior alternative, given that it allows you to determine success and inspect the output later.\r\n\r\n**For _synchronous_ invocations, using `-Wait` is also pointless on Unix**:\r\n\r\n* To run a terminal-based application synchronously, just invoke it _directly_ - no need for `Start-Process`\r\n\r\n* `-Wait` is _not_ effective with a GUI-launching CLI such as `code` for Visual Studio Code, which launches the GUI _asynchronously_, but in a manner that `Start-Process` doesn't detect.\r\n\r\nThis leaves **just the following narrow use cases for `Start-Process` on Unix**: \r\n * Launching a terminal-based application asynchronously, _assuming that that application doesn't request interactive user input_ (something that _is_ supported in Bash - see below) and ideally doesn't produce (non-redirected) stdout/stderr output, as that would print asynchronously in the current terminal.\r\n * Launching a _GUI_ application whose CLI is _blocking_ - e.g., `gedit` - in a _non-blocking_ manner:\r\n`Start-Process gedit`, as a light-weight, launch-it-and-forget-it alternative to `gedit &` (which invariably creates a job).\r\n\r\n\r\n---\r\n\r\nIs the current `Start-Process` behavior what is intended for the v6 release on Unix?\r\n\r\nIf so:\r\n\r\n  * The documentation should clearly state its limitations.\r\n  * Perhaps runtime warnings for pointless invocations can be implemented.\r\n\r\nAs an aside: On Windows, `Start-Process` can also open _documents_, whereas on Unix only `Invoke-Item` can do that.\r\n",
  "closed_at": "2017-08-24T00:01:33Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we should improve that on Unix. We should consider to start new process in new process group too not only background process in the same process group.",
      "created_at": "2017-08-08T06:11:21Z",
      "updated_at": "2017-08-08T06:11:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nI fear that that is not enough, because we would then need Bash-like _job-control_ features, such as bringing a background job back to the foreground in case it needs _interactive_ input (and \r\n\"stopping\" (suspending) it first if that happens in the _background_, and being able to send it back to the background.\r\n\r\nUsing PS jobs behind the scenes is not an option, because, as far as I know, there's no support for jobs requesting _interactive_ (non-redirected stdin) input.\r\n\r\nAlso, PS jobs don't output directly to the invoking terminal the way Bash jobs do by default.\r\n\r\nP.S.: I've updated the initial post to point out that `Start-Process -Wait` too is pointless on Unix.",
      "created_at": "2017-08-08T14:17:19Z",
      "updated_at": "2017-08-08T14:18:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this, we agree that most of the time, users don't need to use `Start-Process`, however, on Unix, it does have at least one applicable use case:\r\n\r\n`Start-Process` can start a new process without inheriting the current environment\r\n\r\n```powershell\r\nPS /home/steve> $env:foo = \"bar\"\r\nPS /home/steve> start-process \"powershell\" -args '-c $env:foo'                                                                                 \r\nPS /home/steve> bar\r\n\r\nPS /home/steve> start-process \"powershell\" -args '-c $env:foo' -UseNewEnvironment\r\n```\r\n\r\nSo we plan to leave it.",
      "created_at": "2017-08-24T00:01:33Z",
      "updated_at": "2017-08-24T00:01:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nGood point about `-UseNewEnvironment`, but note that its current implementation is virtually useless - see #4671\r\n\r\nAlso,  your example only makes sense with `-Wait` (the only reason that you didn't see a problem is that your command happened to produce no output).\r\n\r\nTo summarize the use cases for `Start-Process` on Unix:\r\n\r\n* Launch a blocking GUI-launching CLI such as `gedit` asynchronously, launch-and-forget-it style.\r\n\r\n* Run a _non-interactive_ CLI with a pristine environment with `-UseNewEnvironment -Wait` \r\n\r\n   * As stated, an _interactive_ CLI launched this way - such as new interactive `pwsh` instance - competes with the calling instance for control of keyboard input.\r\n\r\n   * Because use of `Start-Process` makes the process run outside of PowerShell's streams (by default, the process' output would print straight to the terminal), the only way to provide input / collect output is via the `-Redirect*` parameters, which require _auxiliary files_.\r\n\r\n* Launch a process with `-PassThru` and use `.WaitForExit()` _with a timeout_ on the returned `System.Diagnostics.Process` instance in order wait for termination only for a given amount of time.",
      "created_at": "2017-08-25T14:09:05Z",
      "updated_at": "2022-03-26T02:42:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've created a doc issue: https://github.com/PowerShell/PowerShell-Docs/issues/2690",
      "created_at": "2018-07-15T15:29:39Z",
      "updated_at": "2018-07-15T15:29:39Z"
    }
  ],
  "created_at": "2017-08-07T22:17:17Z",
  "number": 4521,
  "state": "closed",
  "title": "Clarify the purpose / behavior of the Start-Process cmdlet on Unix platforms",
  "updated_at": "2022-03-26T02:42:22Z"
}