{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4845",
  "author": "markekraus",
  "body": "# Problem\r\n\r\n`Invoke-RestMethod` is extremely useful for working with APIs that return parsable objects. My single gripe has been that it is not possible to capture the response headers. Many API's provide (sometimes critical) details via the response headers, especially rate-limiting quotas and session timeouts. In situations where information in the the response headers are required, the user must currently fall back to `Invoke-WebRequest` and then perform their own Content-Type detection and response-to-object conversion.\r\n\r\n# Proposal\r\n\r\nAdd a `-ResponseHeadersVariable` parameter to the Web Cmdlets that accepts string. this string will be used as the name of a variable in the calling scope. This variable will be set with the same contents of `BasicHtmlWebResponseObject.Headers`. The user can then access the variable to retrieve the headers from the previews call to `Invoke-RestMethod`\r\n\r\nExample:\r\n\r\n```powershell\r\n$GetData = Invoke-RestMethod -Uri 'http://localhost:8083/Get/' -ResponseHeadersVariable 'ResonseHeaders'\r\n$ResponseDate = [DateTime]$ResonseHeaders.Date[0]\r\n```\r\n\r\nThis example converts the `Date` response header to a `DateTime`.\r\n\r\nThe functionality would be similar to `-SessionVariable`. This would be available for both Web Cmdlets, though it would be redundant on `Invoke-WebRequest` as it would be a mirror of the returned `Headers` property.",
  "closed_at": "2017-09-25T17:11:13Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is a great idea!",
      "created_at": "2017-09-15T14:33:21Z",
      "updated_at": "2017-09-15T14:33:21Z"
    }
  ],
  "created_at": "2017-09-15T11:41:54Z",
  "number": 4845,
  "state": "closed",
  "title": "Allow Capture of Response Headers with Invoke-RestMethod",
  "updated_at": "2017-09-26T07:58:23Z"
}