{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12588",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAddress #12498\r\n\r\n1. Currently Compare-Object is based on Compare() method pattern. The pattern is used for _ordering_  but the cmdlet must check _equality_. With the PR we implement Equal() methods and use them instead of Compare() methods.\r\n2. This add support types implementing IEquatable interface.\r\n3. As side effect performance of the cmdlet increases up to 35% (if compare Pester tests before and after the PR.)\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2022-10-04T06:44:39Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Could you please review and look CI failures?\r\n\r\nOriginal behavior is that if we have two not comparable objects as last resort we convert to string and compare the strings.\r\nNow we call Equal() and return result right away without the last resort conversion to strings. And it is a breaking change.\r\n",
      "created_at": "2020-05-06T12:59:08Z",
      "updated_at": "2020-05-06T12:59:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov is doing a string conversion that expensive? Perhaps it would be better to leave that in as a fallback check? Or provide a switch parameter to use that mode?",
      "created_at": "2020-05-06T13:31:47Z",
      "updated_at": "2020-05-06T13:31:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Perhaps it would be better to leave that in as a fallback check?\r\n\r\nI do not know if this is possible for Equals(). Need to analyze more.\r\nIn \"compare\" pattern we use\r\n`        public static bool TryCompare(object first, object second, bool ignoreCase, IFormatProvider formatProvider, out int result)`\r\nI am not sure that we can use the logic for \"equals\".\r\n\r\n",
      "created_at": "2020-05-06T14:04:58Z",
      "updated_at": "2020-05-06T14:04:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:00:38Z",
      "updated_at": "2020-05-27T02:00:38Z"
    }
  ],
  "created_at": "2020-05-06T11:28:16Z",
  "number": 12588,
  "state": "closed",
  "title": "Add support types implementing IEquatable in Compare-Object cmdlet",
  "updated_at": "2022-10-04T06:44:46Z"
}