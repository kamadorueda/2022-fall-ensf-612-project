{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13429",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis is a follow-up on #11482\r\nWe actually don't expect `args` to contain `null` value in it. For example, the use of `args` in `GetSwitchKey` at [here](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L592) indicates we are not expecting an element of `args` is `null`, and many other places like `ParseFile`.\r\n\r\n/cc @iSazonov Maybe we should validate if `args` contains any `null` elements, maybe that's not necessary given it has been working fine so far, but either way, I'm deferring that to a separate PR.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-14T00:06:05Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please remind me in 24 hours",
      "created_at": "2020-08-13T22:45:50Z",
      "updated_at": "2020-08-13T22:45:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Maybe we should validate if args contains any null elements, maybe that's not necessary given it has been working fine so far, but either way, I'm deferring that to a separate PR.\r\n\r\n.Net team confirmed that it is not null for Main() - right signature `Main(string[] args)`.\r\nFor UnmanagedEntry users could send null. We do not check this previously so we can (1) document this explicitly that it is Main() signature, (2) add the check.",
      "created_at": "2020-08-14T03:11:51Z",
      "updated_at": "2020-08-14T03:11:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> For UnmanagedEntry users could send null.\r\n\r\nWhy is that? Yes, there is a null assignment in `Program.cs` but that's the arg for `exec`, which requires a `null` element to indicate the end of args. I don't think that `null` will be passed to `UnmanagedEntry.Start`.\r\n\r\n`ConsoleShell.Start` is public API, so a user potentially can pass in a string array with null elements. If we want to validate `args`, then I guess that should be done in `CommandLineParameterParser.Parse`.",
      "created_at": "2020-08-14T05:02:32Z",
      "updated_at": "2020-08-14T05:02:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I don't think that null will be passed to UnmanagedEntry.Start\r\n\r\nIt is a public API too :-) It would be not right using but possible.",
      "created_at": "2020-08-14T14:00:50Z",
      "updated_at": "2020-08-14T14:00:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I guess that should be done in CommandLineParameterParser.Parse.\r\n\r\nWhat is desired behavior for null? Throw?",
      "created_at": "2020-08-14T14:02:15Z",
      "updated_at": "2020-08-14T14:02:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> It is a public API too :-) It would be not right using but possible.\r\n\r\nTrue, but it's less likely to be used like the `ConsoleShell.Start`.\r\n\r\n> What is desired behavior for null? Throw?\r\n\r\nYes, throw, but with `ArgumentException` and a better error message.",
      "created_at": "2020-08-14T16:16:54Z",
      "updated_at": "2020-08-14T16:16:54Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, this is the reminder you requested 24 hours ago",
      "created_at": "2020-08-14T22:46:18Z",
      "updated_at": "2020-08-14T22:46:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:21:13Z",
      "updated_at": "2020-08-17T22:21:13Z"
    }
  ],
  "created_at": "2020-08-13T21:35:41Z",
  "number": 13429,
  "state": "closed",
  "title": "Make the parameter 'args' no-nullable in the public `ConsoleHost` APIs",
  "updated_at": "2020-08-17T22:21:13Z"
}