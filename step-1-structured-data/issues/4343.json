{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4343",
  "author": "mklement0",
  "body": "<sup>Related: #5579</sup>\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Create a [System.Management.Automation.PSCustomObject]\r\n# Note that you cannot create a System.Management.Automation.PSCustomObject\r\n# instance with `New-Object System.Management.Automation.PSCustomObject ...`.\r\n# [pscustomobject] is actually [psobject] ([System.Management.Automation.PSObject])\r\n$co = [pscustomobject] @{ foo = 'bar' }\r\n\r\n$co.GetType().FullName\r\n\r\n'---'\r\n\r\n# This should be and is $True.\r\n# Note that using `-is [pscustomobject]` is NOT equivalent and while it also returns $True,\r\n# it does so for any object that has an (invisible) extra [psobject] wrapper, due to the identity\r\n# of [pscustomobject] and [psobject]. All objects returned from *cmdlets* have that extra\r\n# wrapper; e.g., `(Get-Item /) -is [pscustomobject]` yields $True also, while the seemingly\r\n# equivalent  `[System.IO.DirectoryInfo]::new('/') -is [pscustomobject]`  doesn't - see #5579\r\n$co -is [System.Management.Automation.PSCustomObject]\r\n\r\n'---'\r\n\r\n# The $co -as ... expression should effectively pass $co through, but doesn't.\r\n# Note that using `-as [pscustomobject]` is NOT equivalent - and pointless, because \r\n# it passes *any* object through, given that it is the same as `-as [psobject]`, which  is what ALL \r\n# objects in PowerShell are (semi-secretly) wrapped in.\r\n$null -ne ($co -as [System.Management.Automation.PSCustomObject])\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nSystem.Management.Automation.PSCustomObject\r\n---\r\nTrue\r\n---\r\nTrue\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nSystem.Management.Automation.PSCustomObject\r\n---\r\nTrue\r\n---\r\nFalse # !!\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.4 on Ubuntu 16.04.2 LTS\r\nPowerShell Core v6.0.0-beta.4 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "I just ran into this recently. Has there been any discussion on this outside off the GitHub issue? I'm a bit surprised that there are no further comments here. Being able to use `$foo -as [PSCustomObject]` successfully on hashtables would be a big boost in usability as it fits in a pipeline where the alternative form does not. It's also quite unintuitive that `[PSCustomObject]$foo` functions differently from `$foo -as [PSCustomObject]`, at least in where `$foo` is a hashtable.",
      "created_at": "2017-12-01T04:25:59Z",
      "updated_at": "2017-12-01T04:29:31Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't this `by design`?  `PSCustomObject` can't be used to cast objects. It doesn't have any public constructors. \r\n\r\n```powershell\r\n$object = [psobject]::new()\r\n[System.Management.Automation.PSCustomObject]$object\r\n```\r\n\r\nResult:\r\n\r\n```none\r\nCannot convert the \"\" value of type \"System.Management.Automation.PSCustomObject\" to type\r\n\"System.Management.Automation.PSCustomObject\".\r\nAt line:1 char:1\r\n+ [System.Management.Automation.PSCustomObject]$object\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : ConvertToFinalInvalidCastException\r\n```\r\n\r\nFrom https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.pscustomobject?view=powershellsdk-1.1.0 \r\n\r\n> Serves as a placeholder BaseObject when PSObject's constructor with no parameters is used.\r\n\r\nIf you can't cast an object as another type, `-as` returns `false` as it is intended to.",
      "created_at": "2017-12-01T09:31:53Z",
      "updated_at": "2017-12-01T09:31:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus: \r\n\r\nThanks for telling us how it's _implemented_,  which is not necessarily the same as the _design intent_, however.\r\n\r\nIf we consult [the documentation](https://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Type_Operators.md) (granted, historically speaking, that is unfortunately a somewhat shaky basis):\r\n\r\n> The -as operator tries to convert the input object to the specified .NET Framework type\r\n\r\nNow, what would you expect if the input object already _is_ of the specified type?\r\n\r\nI certainly would expect to _pass the input object through_, as is indeed the case for _any type OTHER than `[System.Management.Automation.PSCustomObject]`_:\r\n\r\n```powershell\r\n1 -as [int]  # passes integer 1 through\r\n(get-date) -as [datetime]  # passes the date output Get-Date through\r\n...\r\n```\r\n\r\nSo, if the following returns `$true` (which it currently does):\r\n\r\n```powershell\r\n[pscustomobject] @{ foo = 'bar' } -is [System.Management.Automation.PSCustomObject]\r\n```\r\n\r\ndoesn't it stand to reason that the following - which currently returns `$null` - would pass the LHS _through_?\r\n\r\n```powershell\r\n[pscustomobject] @{ foo = 'bar' } -as [System.Management.Automation.PSCustomObject]\r\n```\r\n\r\nThe issue is further confused by [the unfortunate identity of type accelerators `[psobject]` and `[pscustomobject]`](https://github.com/PowerShell/PowerShell/issues/4344), _both_ of which point to `[System.Management.Automation.PSObject]`, so the use of `[pscustomobject]` on the RHS of `-as` is the same as `[psobject]` / `[System.Management.Automation.PSObject]`, which passes _anything_ through:\r\n\r\n```powershell\r\n> 1 -as [pscustomobject]   # same as: 1 -as [psobject]\r\n1\r\n```\r\n\r\n(As an aside: This behavior is in itself debatable: while _internally_, every object is wrapped in a [psobject] instance, there's no reason to reflect that to the _outside world_.)\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-12-02T22:18:19Z",
      "updated_at": "2018-03-15T11:35:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> how it's implemented, which is not necessarily the same as the design intent, however.\r\n\r\nI don't believe that these are separate things. But that is a matter of opinion.\r\n\r\n> Now, what what you expect if the input object already is of the specified type?\r\n\r\nI would expect conversion to fail if there is not a way to *convert* the object. Not all types *can* convert instances of their own type to their own type. `PSCustomObject` happens to be one of those. Kind of surprising, but true none the less.\r\n\r\nBut, I can agree the documentation on this is lacking. Like several other parts of the documentation, there is a false assumption that the reader is familiar with .NET and C#. `-as` behaves pretty much like `as` in C#. The documentation on `as` is pretty good for this topic. ",
      "created_at": "2017-12-02T22:50:44Z",
      "updated_at": "2017-12-02T22:51:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't believe that these are separate things.\r\n\r\nAn _intent_ can have a _flawed implementation_. Q.E.D.\r\n\r\n> But, I can agree the documentation on this is lacking.\r\n\r\nYes, the documentation is lacking, but - more importantly - the _actual behavior_ is lacking _common sense_:\r\n\r\n> I would expect conversion to fail if there is not a way to convert the object. Not all types can convert instances of their own type to their own type. [...] -as behaves pretty much like as in C#.\r\n\r\n~You're correct about _C#_'s behavior, but~:\r\n * ~I would argue that C#'s behavior in this regard equally lacks common sense.~\r\n * ~Conversely, _PowerShell isn't C#_ and _shouldn't be bound by C#'s behavior_ where it doesn't make sense.  \r\nThe fact that something like `1 -as [psobject]` already passes `1` through while pretending that `1` _is still `System.Int32`_ (`(1 -as [psobject]).GetType().FullName`) shows you that PowerShell is _already_ deviating from C#. (Yet, `1 -is [psobject]` returns `$False` - another head-scratcher)).~\r\n\r\n~Of course, C# fixing the behavior of `as` would also solve the problem on the PowerShell side as well. (There may be a ton of reasons why this is not / no longer an option, but I'm blissfully ignorant of them.)~ (see below)\r\n\r\n---\r\n\r\nFor the record, the [`as` documentation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/as) states:\r\n\r\n\"\r\n```csharp\r\nexpression as type  \r\n```\r\n\r\nThe code is equivalent to the following expression except that the expression variable is evaluated only one time.\r\n\r\n```csharp\r\nexpression is type ? (type)expression : (type)null  \r\n```\r\n\r\n```csharp\r\n\r\nNote that the as operator performs only reference conversions, nullable conversions, and boxing conversions. The `as` operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions.\r\n```\r\n\"\r\n\r\n~As you correctly explain, using cast `(System.Management.Automation.PSCustomObject)` with _anything_  - even an instance of that type itself - results in `null`, due to the lack of _any_ public constructors.~\r\n\r\n\r\n",
      "created_at": "2017-12-03T00:16:38Z",
      "updated_at": "2017-12-03T13:32:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> An intent can have a flawed implementation. Q.E.D.\r\n\r\nI'm say that the intent, implementation, operation and everything about `-as` is perfectly fine, same with `as`.\r\n\r\n> I would argue that C#'s behavior in this regard equally lacks common sense.\r\n\r\nI really don't think it does. It all made sense to me. the surprising thing is that 1) some classes cannot convert to themselves and 2) PSCustomObject is one of those. Everything else about `-as`/`as` makes sense.\r\n\r\n>Conversely, PowerShell isn't C# and shouldn't be bound by C#'s behavior where it doesn't make sense.\r\n\r\nAgreed, however, i disagree that `-as` should be any different than `as` because they both make perfect sense in how they operate and making some silly exception for `PSCustomObject` would be ridiculous. \r\n\r\n> The fact that something like 1 -as [psobject] already passes 1 through while pretending that 1 is still System.Int32 ((1 -as [psobject]).GetType().FullName) shows you that PowerShell is already deviating from C#\r\n\r\nNope, not deviating at all. Acts exactly the same as System.Object does with `as` in C#:\r\n\r\n```powershell\r\n$Code = @'\r\nusing System;\r\n\r\nnamespace Test \r\n{\r\n    public static class AsObject\r\n    {\r\n        public static string GetResult()\r\n        {\r\n            Int32 testInt = 1;\r\n            Object obj = testInt as Object;\r\n            string result = obj.GetType().FullName;\r\n            return result;\r\n        }\r\n    }\r\n}\r\n'@\r\nAdd-Type -TypeDefinition $Code -Language CSharp \r\n[Test.AsObject]::GetResult()\r\n```\r\n\r\nResult: \r\n\r\n ```none\r\nSystem.Int32\r\n```",
      "created_at": "2017-12-03T00:44:13Z",
      "updated_at": "2017-12-03T00:44:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> the surprising thing is that 1) some classes cannot convert to themselves and 2) PSCustomObject is one of those. Everything else about -as/as makes sense.\r\n\r\nAnd it is that very surprise that is my point (but I appreciate that you introduced me to the subtler points of `as`).\r\n\r\n>  making some silly exception for PSCustomObject would be ridiculous.\r\n\r\nI'm not advocating an _exception_; I'm advocating that `-as` honor one fundamental expectation: if the LHS of `-as` already _is_ of the RHS type - _whatever that type may be_ - pass it through - which is in fact what C# does, after all:\r\n\r\n```csharp\r\n// Obtain a [System.Management.Automation.PSCustomObject] instance\r\n// and store it in a generic [System.Object] variable.\r\n// Note that the [System.Management.Automation.PSCustomObject] cannot be instantiated\r\n// directly - no public constructors - and must instead be created indirectly, via a \r\n// [System.Management.Automation.PSObject] wrapper, whose `.BaseObject` property\r\n// contains the custom object.\r\nobject o = new PSObject().BaseObject;\r\n\r\n// OK: Casting back to [System.Management.Automation.PSCustomObject] works.\r\nPSCustomObject co = (PSCustomObject) o;\r\n\r\n// OK with `as` too.\r\nPSCustomObject co_as = o as PSCustomObject;\t\r\n```\r\n\r\nSo, if PowerShell tells me the following:\r\n\r\n```powershell\r\n> $co = [pscustomobject] @{ one = 1 }; $co.GetType().FullName; $co -is [System.Management.Automation.PSCustomObject]\r\nSystem.Management.Automation.PSCustomObject\r\n$True\r\n```\r\n\r\nthat is, if it treats the object as a bona fide `[System.Management.Automation.PSCustomObject]` instance in these contexts (which it should), then, of course, I'd expect \r\n\r\n```powershell\r\n$co -as [System.Management.Automation.PSCustomObject]\r\n```\r\n\r\nto pass `$co` through.\r\n\r\n_Presumably_, the internal `[psobject]` wrapper gets in the way (I haven't looked).\r\n\r\n---\r\n\r\n> Acts exactly the same as System.Object does with as in C#:\r\n\r\nExcept that every .NET type is indeed derived from `System.Object` - _unlike from `[psobject]`_.\r\n\r\nThe `[psobject]` wrapper is a _PS implementation detail_ and that it surfaces prominently in some places (see #5551 and #5579) is unfortunate.\r\n\r\nJust as `as System.Object` is pointless in C# (_anything_ is passed through), `-as [psobject]` is pointless in PowerShell - and behaves incorrectly to boot.\r\n\r\nThe  unfortunate identity of `[psobject]` and `[pscustomobject]` means that people _will_ try something like `$obj -as [pscustomobject]` - and will be surprised to find that it passes _anything_ through.\r\n\r\n",
      "created_at": "2017-12-03T13:30:28Z",
      "updated_at": "2017-12-03T16:44:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To contrast the current `-as` behavior with that of `-is`:\r\n\r\n`-is [pscustomobject]` does return `$True` for `[System.Management.Automation.PSCustomObject]` instances and true `[System.Management.Automation.PSObject]` instances _only_,\r\nso it behaves more sensibly, but only _accidentally_:\r\n\r\n```powershell\r\n> $co = [pscustomobject] @{ one = 1 }; $co -is [pscustomobject]\r\nTrue\r\n\r\n> 1 -is [pscustomobject]\r\nFalse \r\n```\r\n\r\n`[pscustomobject] @{ one = 1 }` produces a `[psobject]`-wrapped `[System.Management.Automation.PSCustomObject]` instance, which is why testing with `-is [pscustomobject]` - which is the same as `-is [psobject]` - succeeds.\r\n\r\nUnfortunately, _other_ types are situationally also  (extra-)wrapped in `[psobject]` - see #5579 - which can yield false positives:\r\n\r\n```powershell\r\n> (Write-Output 1) -is [pscustomobject]\r\nTrue  # !! - the use of *command* output made the difference\r\n```\r\n",
      "created_at": "2017-12-03T13:47:31Z",
      "updated_at": "2017-12-04T22:11:22Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "FYI: PSCustomObject is essentially a \"typeless\" object - a PSObject whose base object is itself. It's used when you need properties but don't have or need a type. For example - `... | select-object -property foo,bar,baz` will extract the foo, bar and baz properties from the pipeline input object, then create a PSCustomObject and attach the extracted properties to that PSCustomObject. The resulting object has a fixed set of properties but it doesn't really have a type. You don't want to create a new concrete .NET type every time you run select-object, or import-json, or invoke a remote command or import CliXML, etc. So anywhere an object of no fixed type but with specific properties are needed, a PSCustomObject is used.",
      "created_at": "2018-03-09T20:00:10Z",
      "updated_at": "2018-03-09T20:00:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay That much is clear to me. \r\n\r\nI think the crux of this particular issue is whether `-as` and `PSCustomObject` are acting as `by design`. I believe that they are. I believe it may be surprising and somewhat confusing to the average PowerShell user, even though it makes perfect sense when you understand it in depth. If it is `by design` then the question becomes whether we consider special casing it somehow.\r\n\r\nMy personal stance is that current behavior is `by design` and perfectly fine as is. But, it would great if someone with better understanding clarify that point. ",
      "created_at": "2018-03-09T21:06:20Z",
      "updated_at": "2018-03-09T21:06:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell tells white lies all the time, to shield us from the disconcerting complexities of the .NET framework and static typing.\r\n\r\nAnd that's fine and dandy: I loves me the free-flowing, carefree way that types can be thrown around in PowerShell - for the most part, it's a great experience.\r\n\r\n**All I ask for is to be lied to _consistently_**, so I can continue to find comfort in the illusion of a simpler world.\r\n\r\nIf  \r\n`([pscustomobject] @{ prop = 1 }).GetType().FullName`  \r\nyields `System.Management.Automation.PSCustomObject`, but   \r\n`([pscustomobject] @{ prop = 1 }) -as [System.Management.Automation.PSCustomObject ]` yields  `$null`, my head starts spinning.\r\n\r\nIs a custom object mysteriously not itself? What's happening?\r\n\r\nGranted, `-as [pscustomobject]` _does_ work as expected, but:\r\n\r\n(a) only because `[pscustomobject]` is really `[psobject]` (my head's RPM are increasing)\r\n\r\n(b) it is useless, because something like `(Get-Item /) -as [pscustomobject]`  is passed through for _any_ object (because, behind the scenes, everything is wrapped in `[psobject]`).\r\n\r\nNo one except the architects / maintainers of the language should have to know any of the behind-the-scenes-but-not-fully intricacies mentioned here.",
      "created_at": "2018-03-09T21:30:59Z",
      "updated_at": "2018-03-09T21:33:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me try to summarize the issue more succinctly:\r\n\r\nIf a custom object:\r\n\r\n* _self-reports_ as type `[System.Management.Automation.PSCustomObject]` via `.GetType()`\r\n\r\n* is correctly recognized by `-is` as that type\r\n\r\nwhy oh why should `-as [System.Management.Automation.PSCustomObject]` not work?\r\n\r\n\r\n",
      "created_at": "2018-03-09T21:43:59Z",
      "updated_at": "2018-03-09T21:43:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If the `-as [System.Management.Automation.PSCustomObject]` use case strikes you as too exotic, let's recap the related head-spinners:\r\n\r\n* `-as [pscustomobject]` is true for ANY object and therefore useless.\r\n\r\n* `-is [pscustomobject]` is _often_ true for non-custom objects, namely when they have an _extra_ `[psobject]` wrapper - see #5579\r\n\r\n   * e.g., `[System.IO.DirectoryInfo]::new('/') -is [pscustomobject]` is `$False` (OK), but it is `$True` (ouch) for the seemingly equivalent `(Get-Item /) -is [pscustomobject]`.\r\n\r\n\r\n\r\n",
      "created_at": "2018-03-09T22:10:13Z",
      "updated_at": "2018-03-09T22:10:42Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "@markekraus By design or not, the current behavior is unintuitive and likely to cause errors (as I experienced not too long ago). You said it yourself: \r\n\r\n> I believe it may be surprising and somewhat confusing to the average PowerShell user.\r\n\r\nPowerShell functionality should be designed for its users, and leaking implementation details, no matter how much they make sense after one has been staring at the C# code, should be avoided wherever possible.",
      "created_at": "2018-03-14T16:51:53Z",
      "updated_at": "2018-03-14T16:51:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bgshacklett The problem is that this would need to be special-cased. Where to we stop with the special-casing? There are a bunch of objects you would not be able to `-as` them to their own object type in PowerShell and .NET.\r\n\r\nIt may be surprising, but so is the pipeline and objects and a million other aspects of PowerShell.\r\n\r\nI think this is better fixed with documentation, rather than risk breaking `-as` to special-case `System.Management.Automation.PSCustomObject`. If there were a large number of users tripped up by this regularly and the risk of regression to special-case it was low, I would champion the cause special-casing it. The risk for regression is high (I think, at least) and the number of users this trips up is low and if we documented it in the `as` operator documentation it could be remedied.\r\n\r\nI'm all for making the language easy for users where it makes sense. I just don't think this is a worthy cause.",
      "created_at": "2018-03-14T17:24:21Z",
      "updated_at": "2018-03-14T17:25:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Where to we stop with the special-casing?\r\n\r\nAll we need to address are leaky abstractions  that cause confusion and/or repeated mistakes and/or require cumbersome workarounds.\r\nAnd, to be clear, that is _not special-casing_ - that's _fixing leaky abstractions_.\r\n\r\nIncidentally, this is not just about `-as`, but also about `-is`, as I've hopefully clearly demonstrated.\r\n\r\n> There are a bunch of objects you would not be able to -as them to their own object type in PowerShell and .NET.\r\n\r\nTo recap the [previous finding](https://github.com/PowerShell/PowerShell/issues/4343#issuecomment-348768826): _any_ .NET instance is an instance of its type with respect to `as` - irrespective of the presence of public constructors, parameterless constructors, explicit conversions, ... - see below for an example.\r\n\r\n---\r\n\r\n```csharp\r\nusing System;\r\n\r\npublic static class Program {\r\n    public class Foo {\r\n        // Private constructor\r\n        private Foo() {}\r\n         // Static method that creates an instance via the private constructor.\r\n        public static Foo Create() { return new Foo(); }\r\n    }\r\n\r\n    public static void Main() {        \r\n         // This outputs 'Foo', demonstrating that the Foo instance created with the\r\n         // static .Create method indeed recognized itself as a Foo instance with `as`\r\n        Console.WriteLine((Foo.Create() as Foo).GetType().Name);\r\n    }\r\n}\r\n\r\n```",
      "created_at": "2018-03-15T01:54:16Z",
      "updated_at": "2018-03-15T01:54:16Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> And, to be clear, that is not special-casing - that's fixing leaky abstractions.\r\n\r\nThis _is_ special-casing. You cannot cast some objects as themselves. `PSCustomObject` is one of those. You want to make `-as` work for `PSCustomObject` when it would not normally work. That is the definition of special casing. \r\n\r\n```powershell\r\n$Code = @'\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace Test \r\n{\r\n    public static class As\r\n    {\r\n        public static bool AsPSCustomObject(object InputObject)\r\n        {\r\n            PSCustomObject result = InputObject as PSCustomObject;\r\n            if (null != result)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public static bool AsPSObject(object InputObject)\r\n        {\r\n            PSObject result = InputObject as PSObject;\r\n            if (null != result)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n'@\r\nAdd-Type -TypeDefinition $Code\r\n$TestObject = [PSCustomObject]@{A = 'a'}\r\n[Test.As]::AsPSCustomObject($TestObject)\r\n[Test.As]::AsPSObject($TestObject)\r\n```\r\n\r\nresult\r\n\r\n```none\r\nFalse\r\nTrue\r\n```\r\n\r\nYou want to change that behavior from what would happen in .NET to something different in PowerShell. That would most absolutely be special-casing.\r\n\r\nYour test isn't exactly accurate. But I don't have the time to create an example or explain why.",
      "created_at": "2018-03-15T10:35:18Z",
      "updated_at": "2018-03-15T10:35:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> You cannot cast some objects as themselves.\r\n\r\nIn C# you can, always. That is, if objects are cast to their _true_ type (as your example demonstrates).\r\n\r\nThat PowerShell pretends that a `[psobject]` (without a base object) is really a `[System.Management.Automation.PSCustomObject]` instance when you _reflect_ on the type with `.GetType()` and use `-is [System.Management.Automation.PSCustomObject]`, but then pretends that it isn't when you use `-as` is the true special-casing here: special-casing of common sense.\r\n\r\n`-as` in PowerShell _looks like_ C#'s `as` and _behaves like it_ in all cases but this.\r\nThat it doesn't, is a leak in the implementation that needs to be plugged.\r\nDitto for the related `-is` problems.\r\n\r\n(Whether special-casing _behind the scenes_ is needed to plug this leak is immaterial.)\r\n\r\nThe larger issue here is really `[psobject]` peeking from behind the curtain in several places, causing outright problems in this case and subtler variations in behavior in others.\r\n\r\n---\r\n\r\nOn a meta note:\r\n\r\n> Your test isn't exactly accurate. But I don't have the time to create an example or explain why.\r\n\r\nPlease don't post such comments. They add nothing to the discussion and only serve to antagonize.\r\n\r\n\r\n",
      "created_at": "2018-03-15T12:03:16Z",
      "updated_at": "2018-03-15T18:58:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: \r\n\r\nThat's great background information.\r\n\r\nEven though no two `[System.Management.Automation.PSCustomObject]` instances are therefore guaranteed to have the same members, it is still useful to have the ability to distinguish them from instances of regular types; e.g., you may want a function to accept a `[pscustombject]` instance as a mockup in lieu of a regular type and then detect that case in the function.\r\n\r\nWith `-is` that works (though, regrettably, only with the _full_ type name, due to `[pscustombject]` really being `[psobject]`) , but with `-as` it doesn't.\r\n",
      "created_at": "2018-03-15T12:17:32Z",
      "updated_at": "2018-03-15T12:17:32Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> Please don't post such comments. They add nothing to the discussion and only serve to antagonize.\r\n\r\nNot my intent. It would just take more time to explain than I can give at the moment. ",
      "created_at": "2018-03-15T18:27:41Z",
      "updated_at": "2018-03-15T18:27:41Z"
    }
  ],
  "created_at": "2017-07-25T19:02:49Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 4343,
  "state": "open",
  "title": "-as operator does not recognize System.Management.Automation.PSCustomObject instances as such",
  "updated_at": "2018-03-15T18:58:47Z"
}