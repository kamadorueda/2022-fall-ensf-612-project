{
  "_url": "https://github.com/PowerShell/PowerShell/issues/567",
  "author": "vors",
  "body": "We have 24 conflicting names between PS aliases and `/bin`, `/usr/bin`, etc folders \n\n```\n# /bin\ncat              \ncp               \necho             \nkill             \nls               \nmv               \nps               \npwd              \nrm               \nrmdir            \nsleep\n# /usr/bin\ncd                     \nclear                  \ncpp                    \ndiff                   \nfc                     \nman                    \nri                     \nsort                   \ntee                    \ntype                   \nwrite         \n# /usr/sbin\nac\n# /sbin\nmount\n```\n\nWe need to figure out what's out story about it.\n\nI think it make sense to play around with different options to see pros and cons on practice.\n#### ~~Try it~~ (the snippet is outdated, see the new snippet for 0.3.0 bellow)\n\nYou can add this snippet to your profile and easily switch from one mode to another\n- **Remove-PSAliases** will remove aliases, so you can use native utilities.\n- **Set-PSAliases** will restore aliases.\n\n``` powershell\n$global:__aliases = @(\n    'cat',              \n    'cp',               \n    'echo',             \n    'kill',             \n    'ls',               \n    'mv',               \n    'ps',               \n    'pwd',              \n    'rm',               \n    'rmdir',            \n    'sleep',\n    'cd',                     \n    'clear',                  \n    'cpp',                    \n    'diff',                   \n    'fc',                     \n    'man',                    \n    'ri',                     \n    'sort',                   \n    'tee',                    \n    'type',                   \n    'write',         \n    'ac',\n    'mount'\n) \n\nfunction Set-PSAliases\n{\n    $global:__aliases | % { \n        Write-Host \"Adding $_\"\n        Set-Alias $_ $global:__aliases_backup[$_] -Scope Global \n    }      \n}\n\nfunction Remove-PSAliases\n{\n    if (-not $global:__aliases_backup) {\n        $global:__aliases_backup = @{}\n        $global:__aliases | % {\n            $global:__aliases_backup[$_] = (Get-Command $_).ResolvedCommandName\n        }\n    }\n\n    $global:__aliases | % { \n        Write-Host \"Removing $_\"\n        while (Test-Path alias:$_) {\n            Remove-Item -Force alias:$_ \n        }\n    }\n}\n```\n",
  "closed_at": "2016-04-08T23:07:25Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Is this much of an issue? A user of PowerShell, I think, would expect the cmdlets to be preferred because of their object-orientedness, and the native commands can be easily accessed by absolute path or `Get-Command`.\n",
      "created_at": "2016-02-21T08:20:54Z",
      "updated_at": "2016-02-21T08:20:54Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Just observed that I did a look-up only in `/bin`, but not in other folders from PATH.\nThe original list of 11 indeed looks fine. \n\nI'm worry about `diff` and `mount`.\n\nDiff (Compare-Object) behaves very differently from what you would expect (i.e. there is no way to perform a diff in git sense of diff. Lines order is always lost).\nI even wrote a normal diff tool as one of the first things for PS https://github.com/vors/PSCompareCollection\n\nMount is tricky for the same reason. It behaves too differently and PS version is not a true replacement.\n",
      "created_at": "2016-02-21T09:48:02Z",
      "updated_at": "2016-02-21T09:48:02Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I agree, `diff` and `mount` are worrisome because the Linux behavior is likely to be preferred by default, same goes for `man`.\n",
      "created_at": "2016-02-22T01:10:58Z",
      "updated_at": "2016-02-22T01:10:58Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "As a user, I would expect to be forced to either remove or over-ride the default powershell aliases myself, and replace with the linux alternatives, or to use the absolute path of the external command.  I don't see how this breaks down with diff and mount.\n",
      "created_at": "2016-03-02T21:38:21Z",
      "updated_at": "2016-03-02T21:38:21Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "When I think thru the first time experience for somebody, who never tried powershell, but know bash\n- ok, now I'm here, lets get some stuff done\n- `cd`, `cd`, `ls`, wow the output looks different, I guess I can live with that.\n- `ps`, `kill`, yada yada, well this guys did a decent job replicating Unix utilities.\n- `diff`, wait what? What `diff` does? You kidding.\n- `exit` and stay away from it\n\nIn this thought experiment, the concept of aliases vs full command path even doesn't come to play.\n",
      "created_at": "2016-03-02T22:04:42Z",
      "updated_at": "2016-03-02T22:26:37Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "From @jpsnover:\n\n> We need to eliminate all the PS aliases for the Linux cmds\n> e.g. ls needs to be the real ls, etc.\n> We should probably ship with a sample profile with a commented out section that redefines this for the people that want them.\n",
      "created_at": "2016-03-23T16:18:49Z",
      "updated_at": "2016-03-23T16:18:49Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "For the 0.3.0 release, we will remove all the conflicting aliases.\n",
      "created_at": "2016-04-02T02:59:25Z",
      "updated_at": "2016-04-02T02:59:25Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "We have a naive agreement that most of these need to be removed at build-time on just Linux, with the exception of a few that still need to be defined (e.g. `cd`). \n\nThat being said, there's some more thinking we have to do. One option is to create a formatter that makes the output of something like Get-Process _look_ like the string output of '/bin/ps', and then enable it being piped to awk/sed. We have to think about it more.\n",
      "created_at": "2016-04-07T21:48:11Z",
      "updated_at": "2016-04-07T21:48:11Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "The mindset for this is that it will be used as an interactive shell by Linux users. \nAs such we should minimize surprises. \nThe last time I looked ps (or ls) had like 80 switches so there is no way we are going to emulate that. \n\nSent from my tablet\n\n> On Apr 7, 2016, at 11:48 AM, Joey Aiello notifications@github.com wrote:\n> \n> We have a naive agreement that most of these need to be removed at build-time on just Linux, with the exception of a few that still need to be defined (e.g. cd).\n> \n> That being said, there's some more thinking we have to do. One option is to create a formatter that makes the output of something like Get-Process look like the string output of '/bin/ps', and then enable it being piped to awk/sed. We have to think about it more.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n",
      "created_at": "2016-04-07T21:52:37Z",
      "updated_at": "2016-04-07T21:52:37Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "These are the native command (not Bash built-in) collisions on my Ubuntu 14.04 box.\n\nI'll compile these out of `InitialSessionState.cs`. The one thing that I don't like about this approach is that it leaves users without an _easy_ way to put them all back at once (a PowerShell experience).\n\nBut, in my opinion, _all_ of the built-in aliases would be much better off defined in a module outside of the `System.Management.Automation` library to begin with. Aliases really shouldn't be built into an engine; I don't know of any other shell that does this. Bash has default aliases... defined in `/etc/bashrc` or your default `~/.bash_aliases` etc., which lets users and distributions easily modify them. \n\n``` powershell\n~/PowerShell |-/ Get-Command -Type Alias | %{ which $_.Name } \n/bin/cat\n/usr/bin/clear\n/usr/bin/compare\n/bin/cp\n/usr/bin/cpp\n/usr/bin/diff\n/bin/dir\n/bin/echo\n/bin/kill\n/bin/ls\n/usr/bin/man\n/bin/mount\n/bin/mv\n/bin/ps\n/bin/pwd\n/bin/rm\n/bin/rmdir\n/bin/sleep\n/usr/bin/sort\n/sbin/start\n/usr/bin/tee\n/usr/bin/write\n```\n\nI also had `cli` which was installed by Mono, and `ri` which was installed by rbenv. We could remove these, but there will always be some level of collision among tool names.\n",
      "created_at": "2016-04-08T17:03:32Z",
      "updated_at": "2016-04-08T17:03:32Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I had these on my OS X box:\n\n``` powershell\n~/PowerShell |-/ Get-Command -Type Alias | %{ which $_.Name }\n/usr/sbin/ac\n/bin/cat\n/usr/bin/cd\n/usr/bin/clear\n/bin/cp\n/usr/bin/cpp\n/usr/bin/diff\n/bin/echo\n/usr/bin/fc\n/bin/kill\n/bin/ls\n/usr/bin/man\n/sbin/mount\n/bin/mv\n/bin/ps\n/bin/pwd\n/bin/rm\n/bin/rmdir\n/bin/sleep\n/usr/bin/sort\n/usr/bin/tee\n/usr/bin/type\n/usr/bin/write\n```\n\nI also had `gm` which is GraphicsMagick, `compare` which is from ImageMagick, and `rp`, which is a \"Tool to find ROP sequences in PE/Elf/Mach-O x86/x64 binaries\" and I don't know why I had it installed.\n",
      "created_at": "2016-04-08T17:08:19Z",
      "updated_at": "2016-04-08T17:09:49Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We do not currently have a compile time constant for OS X as it shares `LINUX` since (so far) every compile time difference has been the same. These changes do not necessarily have to be compile-time; just the current way it's written needs to be refactored to be make these runtime changes.\n\nThe only differences between the two are that OS X additionally has the `ac` command, _and_ (strangely) has native commands for what are only Bash built-ins on Linux: `cd`, `fc`, and `type`.\n",
      "created_at": "2016-04-08T17:43:44Z",
      "updated_at": "2016-04-08T17:43:44Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This brings up an interesting point: Bash itself stomps on quite a few native commands with its own built-ins (which are not aliases, but similar). So perhaps my earlier comment on moving them all out was on an erroneous understanding.\n\nBash built-ins stomp on these on Linux:\n\n``` sh\n~ |-/ for i in `<linux_commands`; do help $i 2&>/dev/null && echo $i; done\ndir\necho\nkill\npwd\n```\n\nAnd these on OS X:\n\n``` sh\n~ |-/ for i in `<osx_commands`; do help $i 2&>/dev/null && echo $i; done\ncd\necho\nfc\nkill\npwd\ntype\n```\n\nI am of the opinion to mirror Bash and let PowerShell stomp on these as well, as that would be what Linux users (possibly unknowingly) expect.\n",
      "created_at": "2016-04-08T17:54:10Z",
      "updated_at": "2016-04-08T17:54:10Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I'm surprised `kill` is in the list of bash stomped commands. What's the reason for that?\nOn the other hand, why `cd` is not in Linux, but it is in OS X?\n",
      "created_at": "2016-04-08T18:01:46Z",
      "updated_at": "2016-04-08T18:01:46Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "My guess is that `kill` is stomped so that `kill` in Bash can deal with Bash jobs properly. I am unsure of the history leading to why BSD but not Linux has a native command for `cd`.\n",
      "created_at": "2016-04-08T18:10:45Z",
      "updated_at": "2016-04-08T18:10:45Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "removing the alias for cd isn't going to work very well - it's a shell built-in (even if it does exist in the filesystem)\n",
      "created_at": "2016-04-08T18:19:48Z",
      "updated_at": "2016-04-08T18:19:48Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yes, we should keep the aliases that Bash already had as built-ins, including those that have native executables.\n",
      "created_at": "2016-04-08T18:21:00Z",
      "updated_at": "2016-04-08T18:21:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Here is a snippet to resurrect aliases in 0.3.0\n\n``` powershell\n$global:__aliases = @{\n#ri                             = \"Remove-Item\"      \ndiff                           = \"Compare-Object\"   \n#echo                           = \"Write-Output\"     \n#kill                           = \"Stop-Process\"     \nps                             = \"Get-Process\"      \ntee                            = \"Tee-Object\"       \n#type                           = \"Get-Content\"      \nac                             = \"Add-Content\"      \nrm                             = \"Remove-Item\"      \nwrite                          = \"Write-Output\"     \nrmdir                          = \"Remove-Item\"      \n#clear                          = \"Clear-Host\"       \nmount                          = \"New-PSDrive\"\nman                            = \"help\"             \n#cd                             = \"Set-Location\"     \n#fc                             = \"Format-Custom\"    \ncpp                            = \"Copy-ItemProperty\"\nsort                           = \"Sort-Object\"      \ncat                            = \"Get-Content\"      \ncp                             = \"Copy-Item\"        \nsleep                          = \"Start-Sleep\"      \nls                             = \"Get-ChildItem\"    \n#pwd                            = \"Get-Location\"     \nmv                             = \"Move-Item\" \n}\n\nfunction Set-PSAliases\n{\n    $global:__aliases.Keys | % { \n        Write-Host \"Adding $_\"\n        Set-Alias $_ $global:__aliases[$_] -Scope Global \n    }      \n}\n\nfunction Remove-PSAliases\n{\n    $global:__aliases.Keys | % { \n        Write-Host \"Removing $_\"\n        while (Test-Path alias:$_) {\n            Remove-Item -Force alias:$_ \n        }\n    }\n}\n\n```\n",
      "created_at": "2016-04-12T01:34:34Z",
      "updated_at": "2016-04-12T01:34:34Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "TIL, `which` is a built-in command in zsh, but not in bash.\nIt leads to a weird flow: \n\n```\nbash-3.2$ which time\n/usr/bin/time\n```\n\nBut really `time` is a **built-in keyword**.\n\nAnd even worse, it has a different parameters from an util one.\n\n```\n/usr/bin/time -l sleep 10\n```\n\nIs the same as\n\n```\ntime sleep 10\n```\n\nAnd note, there is no `-l`.\n\nhttp://stackoverflow.com/a/19237170/1355726\n",
      "created_at": "2016-04-12T01:41:42Z",
      "updated_at": "2016-04-12T01:41:42Z"
    }
  ],
  "created_at": "2016-02-20T05:32:51Z",
  "number": 567,
  "state": "closed",
  "title": "Aliases and native utils name collision",
  "updated_at": "2016-04-12T01:43:27Z"
}