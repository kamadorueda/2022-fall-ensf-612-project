{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5724",
  "author": "mklement0",
  "body": "`break` and `continue` accept a label argument referring to a `:<labelname> `-prefixed loop, providing the ability to transfer control to arbitrary enclosing loops.\r\n\r\nClearly, even though the `:` is part of the label _definition_ (e.g., `:foo while { ...`), it is currently not supported when _referencing_ the label (must be, e.g., `break foo`, not `break :foo`).\r\n\r\n@lzybkr explains in  https://github.com/PowerShell/PowerShell/issues/3879#issuecomment-304940545  that finding no enclosing loop to break out of / continue simply quietly exits the scripts.\r\n\r\nWhile this is true of passing _nonexistent labels_  to `break`  or `continue` in general, specifying a `:`-prefixed nonexistent label instead _targets the immediately enclosing construct_.\r\n\r\nThis is tricky especially if you think that  the `:` is part of the label name and use it as such (as is reasonable by analogy, given that both variable assignments _and_ references use the `$` sigil, for instance): By prepending the `:` to the name of an existing label, you get (a) an invalid label that (b) does unexpected things.\r\n\r\nThere are 2 possible solutions:\r\n\r\n* treat `:`-prefixed label references like any other nonexisting labels.\r\n\r\n* preferably, support `:` as an optional prefix character when _referencing_ labels\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n  :foo while($true) {   # Loop with label\r\n    switch ($i++) {\r\n      0 {\r\n        'continuing outer loop'\r\n        # !! The label must be passed as `foo`, not `:foo`:\r\n        continue :foo\r\n      }\r\n      1 {\r\n        'exiting outer loop'\r\n        break foo  # this works\r\n      }\r\n    }\r\n    # !! Because the nonexistent label was \":\"-prefixed, `continue :foo` \r\n    # !! unexpectedly continued its enclosing `switch` statement and\r\n    # !! therefore transferred control here.\r\n    'What are you doing here?'\r\n  }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\ncontinuing outer loop\r\nexiting outer loop\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\ncontinuing outer loop\r\nWhat are you doing here?\r\nexiting outer loop\r\n```\r\n\r\nThat is, the statement after the `switch` statement was unexpectedly executed.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n\ufeffPowerShell Core v6.0.0-rc.2 (v6.0.0-rc.2) on Microsoft Windows 7 Enterprise  (64-bit; v6.1.7601)\r\nWindows PowerShell v5.1.14409.1012 on Microsoft Windows 7 Enterprise  (64-bit; v6.1.7601)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "seems reasonable to me. Currently a label of `::foo` is not supported so there would be no ambiguity if `break :foo` was referring to `:foo` or `::foo`.",
      "created_at": "2017-12-20T16:00:16Z",
      "updated_at": "2017-12-20T16:00:16Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Just noting, the reasoning for this seems that because ':' is not allowed in the name part of the label, using it on the 'break' or 'continue' statement is in affect not giving the statement any argument at all, and thus describes the behavior that is witnessed.   An error is what should be returned, because there was a token, but it was not valid in construct, but an error is not returned because the colon and the term behind it are immediately treated as a label for a further appearing loop, but cannot actually be accessed because its behind the 'break'/'continue' statement, so its just ignored.",
      "created_at": "2019-02-18T06:23:02Z",
      "updated_at": "2019-02-18T06:23:02Z"
    }
  ],
  "created_at": "2017-12-20T15:29:45Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 5724,
  "state": "open",
  "title": "break and continue keywords ignore labels that start with a \":\" (colon)",
  "updated_at": "2019-02-18T06:23:02Z"
}