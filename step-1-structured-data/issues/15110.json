{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15110",
  "author": "iSazonov",
  "body": "Inspired by https://github.com/dotnet/runtime/issues/49944\r\n\r\n- We could think about getting rid of InternalsVisibleTo attributes (specially in SMA).\r\n- We could make (all) private classes sealed.\r\n- We could make (all) internal classes sealed.\r\n\r\nThis can be especially important if we use PGO for optimizing startup scenarios.",
  "closed_at": "2022-10-04T06:49:54Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> We could think about getting rid of InternalsVisibleTo attributes (specially in SMA).\r\n\r\nThis is not possible given that `management.dll`, `utility.dll`, and `security.dll` depending on this flag. Not only that, subsystems will depend on that flag as well in future.\r\n\r\nBut yeah, it would be nice to follow this best practice in our code base to mark types sealed properly.\r\n\r\n> This can be especially important if we use PGO for optimizing startup scenarios\r\n\r\n@iSazonov why PGO would require this? can you please clarify this statement? Also, can you be more specific how PGO can be used in PowerShell?",
      "created_at": "2021-06-24T05:07:27Z",
      "updated_at": "2021-06-24T05:07:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My main concern is that using of InternalsVisibleTo will absolutely block PGO for us. There is still no documentation for PGO. You may want to talk to the authors of PGO. \r\n\r\nI can only guess that InternalsVisibleTo and sealed both truncate any inheritance/virtualization and as a consequence allow bolder optimizations.\r\n\r\n> Also, can you be more specific how PGO can be used in PowerShell?\r\n\r\nFrom my understanding it is the main purpose of the PGO to improve startup scenario(s). We could create specific PowerShell PGO profile and distribute it with PowerShell.\r\n\r\n> But yeah, it would be nice to follow this best practice in our code base to mark types sealed properly.\r\n\r\nIt seems we lost this in #11773 /cc @xtqqczze ",
      "created_at": "2021-06-24T08:12:38Z",
      "updated_at": "2021-06-24T08:13:55Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> It seems we lost this in #11773 /cc @xtqqczze\r\n\r\nSo perhaps we want a new PR similar to those changes (2069d92b3e2760ab631efbf12bbde9ca46e661e2), but only `private`, `internal`?",
      "created_at": "2021-06-25T13:36:29Z",
      "updated_at": "2021-06-25T13:36:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> From my understanding it is the main purpose of the PGO to improve startup scenario(s). We could create specific PowerShell PGO profile and distribute it with PowerShell.\r\n\r\nAlso I think we could accelerate other typical scenarios too like runspace/scriptblock creation.",
      "created_at": "2021-06-25T14:34:13Z",
      "updated_at": "2021-06-25T14:34:13Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "We could look into: https://github.com/geeknoid/UnsealedAnalyzer\n\n<blockquote><img src=\"https://opengraph.githubassets.com/4bd2f3e044b8203d8bddb7431a6be87ba364d3993e65db15348ecd4030593dba/geeknoid/UnsealedAnalyzer\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/geeknoid/UnsealedAnalyzer\">geeknoid/UnsealedAnalyzer</a></strong></div><div>Prototype of an analyzer to report unsealed types. Contribute to geeknoid/UnsealedAnalyzer development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-06-25T14:35:08Z",
      "updated_at": "2021-06-25T14:35:10Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I wonder whether #15675 has improved performance and whether we could measure this?",
      "created_at": "2021-07-06T09:08:08Z",
      "updated_at": "2021-07-06T09:08:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is best practice. .Net Runtime can do more optimizations if a class cannot have derived classes and cannot be used outside. ",
      "created_at": "2021-07-06T09:41:00Z",
      "updated_at": "2021-07-06T09:41:00Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> It is best practice. .Net Runtime can do more optimizations if a class cannot have derived classes and cannot be used outside.\r\n\r\nIt would be good to quantify the improvement, to see whether further optimizations of the type would be fruitful.",
      "created_at": "2021-07-06T09:52:50Z",
      "updated_at": "2021-07-06T09:52:50Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "We now have `CA1852: Seal internal types` in .NET 7, so we should try to enable it.",
      "created_at": "2022-10-04T11:37:19Z",
      "updated_at": "2022-10-04T11:38:18Z"
    }
  ],
  "created_at": "2021-03-27T17:52:55Z",
  "number": 15110,
  "state": "closed",
  "title": "Improve performance by using sealed classes ",
  "updated_at": "2022-10-04T11:38:18Z"
}