{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11468",
  "author": "p0W3RH311",
  "body": "its possible to include x option with all regexes by default\r\n\r\nfor example instead of:\r\n\r\n`$r = [regex]'(\\d{3})-[a-z]\\1+'`\r\n\r\nor\r\n\r\n```\r\n$r = [regex]@'\r\n(x)\r\n (\\d{3})\r\n  -\r\n [a-z]\r\n \\1+\r\n'@\r\n```\r\n\r\nfor more lisibility\r\n\r\n`$r = [regex]'(\\d{3}) - [a-z] \\1+'`\r\n\r\n\r\nor \r\n\r\n```\r\n$r = [regex]@'\r\n (\\d{3})\r\n  -\r\n [a-z]\r\n \\1+\r\n'@\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This would break any existing regex which used \" \" rather than \\s which covers more characters\r\nAlthough attractive for the -match / -replace operators it would lead people to write expressions which behave differently in different places. (e.g. PowerShell won't change the default behavior of the underlying .NET regex engine) \r\nIt's generally accepted expressions ignore spaces only if (?x) is specified. \r\n",
      "created_at": "2020-01-02T08:27:55Z",
      "updated_at": "2020-01-02T08:27:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> It's generally accepted expressions ignore spaces only if (?x) is specified.\r\n\r\nYou can even specify that inline:\r\n\r\n```powershell\r\n$r = [regex]'(?x)\r\n    (x)\r\n    (\\d{3})\r\n    \\p{Zs}-\\p{Zs}\r\n    [a-z]\r\n    \\1+'\r\n\r\n$r.Match('x123 - ax')\r\n# Groups   : {0, 1, 2}\r\n# Success  : True\r\n# Name     : 0\r\n# Captures : {0}\r\n# Index    : 0\r\n# Length   : 9\r\n# Value    : x123 - ax\r\n```\r\n\r\n(Also use `(?xi)` instead for case insensitive)",
      "created_at": "2020-01-02T14:03:53Z",
      "updated_at": "2020-01-02T14:03:53Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SeeminglyScience  that's what I meant. \r\nIn some places the only option is put (?x) in the regex itself. \r\nIn others (like the .net object) it is possible to specify single-line/multi-line case [insensitive] and ignore whitespace outside of the expression \r\n\r\n",
      "created_at": "2020-01-02T14:44:55Z",
      "updated_at": "2020-01-02T14:44:55Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "\r\nSo under what circumstances is built-in? Is there a strict law of logic?\r\n\r\nIf not, do need to provide another option.",
      "created_at": "2020-01-04T06:58:27Z",
      "updated_at": "2020-01-04T07:16:59Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> So under what circumstances is built-in? Is there a strict law of logic?\r\n> \r\n> If not, do need to provide another option.\r\nThe only option which is built in is -match and -replace are actually -iMatch and -iReplace. \r\n[regex]::match(\"a\",\"A\") does not match because .net regex is case-sensitive (like most other regex implementations -cMatch and -cReplace keep the case sensitive behaviour, and the i versions specify the case-insensitive options. Since equals and like are case insentive, replace and match follow the same principle. \r\n\r\nNow...  it would be possible to have (say) Smatch and Sreplace with are space insensitive, but these would also need C and I versions.  I'm not sure it is really necessary.  I think that if you learn to write regexes which are complicated enough to need to be split for readability, then you probably pickup how to specify ignore white-space as well. \r\n\r\n \r\n",
      "created_at": "2020-01-04T22:03:05Z",
      "updated_at": "2020-01-04T22:03:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye, I don't see a whole lot of value here in just being able to specify `(?x)` in PowerShell v.s. being able to set it in the regular expression itself.",
      "created_at": "2020-01-04T23:29:11Z",
      "updated_at": "2020-01-04T23:29:11Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "There is a very simple question. What to do if you need to match the spaces?\r\n\r\n`[ValidatePattern({^[A-Z]{3,4}})]` The default is case insensitive, which puzzles me.\r\n\r\nUse general standard regex.  Actually ignore case.  Amaze me!\r\n",
      "created_at": "2020-01-05T04:13:54Z",
      "updated_at": "2020-01-05T04:13:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> There is a very simple question. What to do if you need to match the spaces?\r\n\r\nUse `\\p{Zs}` to match a literal space.  See [Supported Unicode general categories](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#SupportedUnicodeGeneralCategories).\r\n\r\n> `[ValidatePattern({^[A-Z]{3,4}})]` The default is case insensitive, which puzzles me.\r\n> \r\n> Use general standard regex. Actually ignore case. Amaze me!\r\n\r\nIt's to stay consistent with everything else in PowerShell.  Note that `[regex]'pattern'` isn't really a PowerShell thing, that's just calling the constructor.  If you need it to be case sensitive (which if possible you should avoid for parameter validation) you can add `(?-i)` to be beginning of the pattern.\r\n\r\n",
      "created_at": "2020-01-05T04:41:57Z",
      "updated_at": "2020-01-05T04:41:57Z"
    }
  ],
  "created_at": "2020-01-01T17:13:10Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 11468,
  "state": "open",
  "title": "its possible to include x option with all regexes by default",
  "updated_at": "2020-01-05T04:41:58Z"
}