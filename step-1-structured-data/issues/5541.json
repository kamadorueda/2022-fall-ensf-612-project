{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5541",
  "author": "rkeithhill",
  "body": "It is not going to be uncommon for module authors to want to provide slightly different functionality on different operating systems e.g. the module provides 30 commands, two of which only work on Windows PowerShell.  Right now, there is no good way to declare \"conditional\" module exports in the manifest where the condition is the OS platform.  \r\n\r\nIn fact, even `PowerShellVersion` is problematic if you design your module to load into both Windows PowerShell and PowerShell Core.  Which PowerShell version does that refer to? Windows PowerShell? PowerShell Core?  What if at some point, on PS Core I require 6.1.0?  Does that mean my module can't load into Windows PowerShell 5.x anymore - probably.  But I may not be providing that functionality when I'm loaded into Windows PowerShell (runtime decision) so Win PS 5.1 should be allowed when loading into Windows PowerShell.\r\n\r\nAFAICT all of these field's values may be conditional upon the OS platform and/or the PowerShell platform (Win or Core)\r\n\r\n* PowerShellVersion\r\n* PowerShellHostName / Version\r\n* RequiredAssemblies\r\n* RequiredModules\r\n* ModuleList\r\n* NestedModules\r\n* FormatsToProcess\r\n* ScriptsToProcess\r\n* TypesToProcess\r\n* ClrVersion\r\n* DotNetFrameworkVersion\r\n* AliasesToExport although CompatiblePSEditions might mitigate this one\r\n* CmdletsToExport\r\n* FunctionsToExport\r\n* VariablesToExport\r\n* Tags\r\n\r\nIn order to make any changes backwards compatible with existing Windows PowerShell instance, we could put all the conditional declarations in PrivateData.  This implies that fields not in PrivateData inherently apply to Windows PowerShell when module is loaded by Windows PowerShell.  PowerShell Core could be modified to process the conditional fields in PrivateData.  What might those look like?  Maybe this?\r\n\r\n```\r\n    PrivateData = @{\r\n        PSManifestEx = @{\r\n            PowerShellVersion = \"6.1.0\" # fields at this level apply to all OS platforms for PS Core\r\n            Linux = @{\r\n                RequiredModules = @(...)\r\n                CmdletsToExport = @(...)\r\n            }\r\n            MacOS = @{\r\n                RequiredModules = @(...)\r\n                CmdletsToExport = @(...)\r\n            }\r\n            Windows = @{ # this is for PowerShell Core on Windows\r\n                RequiredModules = @(...)\r\n                CmdletsToExport = @(...)\r\n            }\r\n        }\r\n```\r\nThis doesn't take into account Nano server which I don't have enough experience with to take it into account.  Anyway, this is just something to get the conversation started.\r\n\r\nLong term, this approach seems less than ideal - burying so much important metadata under `PrivateData`.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I originally proposed allowing variables like `$IsLinux` in the module manifest so you could write:\r\n\r\n```powershell\r\nExportedCmdlets = @(\r\n    'Get-Thing'\r\n    if ($IsLinux) { 'Get-LinuxThing' }\r\n)\r\n```\r\n\r\nUntested, but I think all that is needed is to add to this [list](https://github.com/PowerShell/PowerShell/blob/32286ed22a0c8f3b58716d5d0fb2948c558678ec/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L439).",
      "created_at": "2017-11-25T01:14:36Z",
      "updated_at": "2017-11-25T01:14:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A complementary aspect is how to _restrict_ a module to an edition / a (set of) platform(s):\r\n\r\n* From what I can tell, setting `CompatiblePSEditions` to _one_ edition  isn't being _enforced_ at module import time.\r\n\r\n* It seems that there is no key at all to limit support to a given (set of) _platform_(s).\r\n\r\n(Note that _edition_ support and _platform_ support are independent dimensions; conceivably, modules can run on both editions while requiring _Windows_ as the platform.  \r\nConversely, though, limiting support to non-Windows platforms implies the Core edition.)",
      "created_at": "2018-03-08T22:17:14Z",
      "updated_at": "2018-03-08T22:17:32Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I would like to contribute and make a PR for this issue :\r\n\r\n- Add IsLinux, IsMacOS and IsWindows to [ModuleCmdletBase.cs#L448](https://github.com/PowerShell/PowerShell/blob/759c4abde811aff1490dec92e438d61e341c3181/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L448)\r\n- Write pester tests\r\n\r\nAnything else ?",
      "created_at": "2019-04-17T11:51:02Z",
      "updated_at": "2019-04-17T11:51:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That sounds like a good start, go for it! \ud83d\ude04 ",
      "created_at": "2019-04-17T13:06:57Z",
      "updated_at": "2019-04-17T13:06:57Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I would like to add PSVersionTable too, someone against that ?\r\nArchitecture is still a missing information in PSVersionTable but can be added later [#8047](https://github.com/PowerShell/PowerShell/issues/8047)",
      "created_at": "2019-05-01T18:23:08Z",
      "updated_at": "2019-05-01T18:23:36Z"
    }
  ],
  "created_at": "2017-11-25T00:53:17Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 5541,
  "state": "open",
  "title": "Current module manifest schema is not adequate to properly support cross-platform modules",
  "updated_at": "2019-05-01T18:23:36Z"
}