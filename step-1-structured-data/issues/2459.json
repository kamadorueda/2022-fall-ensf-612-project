{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2459",
  "author": "Jaykul",
  "body": "When setting an XML node content, PowerShell doesn't correctly unwrap PSObject strings.\n\nFor instance: `Join-Path` obviously outputs strings, but it outputs them wrapped in PSObjects\n## Steps to reproduce\n\n``` posh\n[xml]$x  = \"<root><path/></root>\"\n$x.root.path = Join-Path C:\\ Windows\n```\n## Expected behavior\n\n`$x.root.path` is an XML Node with string content \"C:\\Windows\"\n## Actual behavior\n\nA `SetValueException` is thrown:\n\n```\nCannot set \"path\" because only strings can be used as values to set XmlNode properties.\nAt line:2 char:1\n+ $x.root.path = Join-Path C:\\ Windows\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], SetValueException\n    + FullyQualifiedErrorId : XmlNodeSetShouldBeAString\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.1.14393.206\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.14393.206\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n\n```\n## Workaround\n\nEither of the following would work, but should not be necessary:\n\n``` posh\n$x.root.path = (Join-Path C:\\ Windows).PSObject.BaseObject\n$x.root.path = (Join-Path C:\\ Windows).ToString()\n```\n",
  "closed_at": "2016-12-02T23:43:10Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thus the right parameter always requires explicite ToString(). And the suggestion is to make this implicit.\nIt would be the best UX for large XML. Although for processing large XML it is better to use System.XML.\n\nThe affected code is here [src/System.Management.Automation/engine/CoreAdapter.cs](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CoreAdapter.cs#L4912) \n\n``` powershell\n4912         protected override void PropertySet(PSProperty property, object setValue, bool convertIfPossible) \n4913         { \n4914             string valueString = setValue as string; \n4915             if (valueString == null) \n4916             { \n4917                 throw new SetValueException(\"XmlNodeSetShouldBeAString\", \n4918                     null, \n4919                     ExtendedTypeSystem.XmlNodeSetShouldBeAString, \n4920                     property.Name); \n4921             } \n\n```\n",
      "created_at": "2016-10-12T11:38:48Z",
      "updated_at": "2016-11-12T19:26:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov thanks for looking into this and finding the root cause\n",
      "created_at": "2016-11-04T21:24:42Z",
      "updated_at": "2016-11-04T21:24:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There may be a problem with complex types:\n\n``` powershell\n[xml]$x  = \"<root><path/></root>\"\n$b=@{c=1}\n$b.ToString()\n   System.Collections.Hashtable\n\n$x.root.path = $b\n```\n\nIf we do an implicit conversion `ToString()` path will be set to `System.Collections.Hashtable` without throw as previously. Is it acceptable UX?\n",
      "created_at": "2016-11-05T11:08:56Z",
      "updated_at": "2016-11-05T11:08:56Z"
    }
  ],
  "created_at": "2016-10-11T21:15:34Z",
  "labels": [
    "WG-Engine",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 2459,
  "state": "closed",
  "title": "XML nodes are too picky about setting values",
  "updated_at": "2017-03-15T06:42:24Z"
}