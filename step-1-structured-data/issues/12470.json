{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12470",
  "author": "lenihan",
  "body": "# Steps to reproduce\r\n\r\n\r\n```\r\n# custom struct via C#\r\n$source = @\"\r\npublic struct MyIntStruct\r\n{\r\n   public int x;\r\n}\r\n\"@\r\nAdd-Type -TypeDefinition $source\r\n\r\n# array of 1 MyIntStruct\r\n$arr = New-Object -TypeName MyIntStruct[] -ArgumentList 1\r\n$arr[0].x       # 0 \r\n$arr[0].x = 1   # change to 1\r\n$arr[0].x       # 0 -> Did not change value\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\n$arr[0].x should be set to 1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\n$arr[0].x is not changed\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "Best practice for struct/valuetype are to make them immutable. \r\nReference type and value type don't work the same (try to change a char inside a string)\r\n\r\nThis code works :\r\n```\r\n$arr =@([MyIntStruct]@{ x = 1 })\r\n$arr[0].x \r\n$arr[0] = [MyIntStruct]@{ x = 2 }\r\n$arr[0].x \r\n```",
      "created_at": "2020-04-23T23:52:37Z",
      "updated_at": "2020-04-24T00:07:42Z"
    },
    {
      "author": "lenihan",
      "author_association": "NONE",
      "body": "> Best practice for struct/valuetype are to make then immutable.\r\n> reference type and value type don't work the same (try to change a char inside a string)\r\n\r\nThat is helpful, but not as elegant as you can do in C#. \r\n\r\nI just tested in C# and this works...\r\n```\r\npublic struct MyIntStruct\r\n{\r\n   public int x;\r\n}\r\nvar arr = new MyIntStruct[1];\r\narr[0].x = 1;\r\n```\r\n\r\nShouldn't PowerShell be able to do the same?",
      "created_at": "2020-04-24T00:08:20Z",
      "updated_at": "2020-04-24T00:10:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Depends on quite a bit, I'm afraid. PS boxes value types implicitly in pretty much every operation, so trying to address things by reference like you're doing here when they're a value type aren't guaranteed to work. C# is able to get a pointer to the struct in-memory, so it's able to modify it. PowerShell, though, loses that reference by boxing the value type (since to box it, it has to copy it and now has a different reference, since it can't box the reference itself).\r\n\r\nSo by the time you get to setting a value, the struct you set the value on is actually not the same one as in the array.\r\n\r\nShould it work? I guess so, probably, depends on what your goal is really. For a quick workaround, I think you can do a simple cast to `[object[]]` after creating the array and modify the structs within that array instead, since they're already boxed and the reference will remain intact through indexing operations.\r\n\r\nCan it be made to work without breaking a significant portion of PS's functionality is a completely different question, though.\r\n\r\nThis is a few shades out of my usual depth, but that's my present understanding of the problem, as it were. \ud83d\ude42 ",
      "created_at": "2020-04-24T00:20:47Z",
      "updated_at": "2020-04-24T00:20:47Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@vexx32 I confirm your workaround is working. Thanks",
      "created_at": "2020-04-24T00:29:55Z",
      "updated_at": "2020-04-24T00:32:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5833\r\nhttps://github.com/PowerShell/PowerShell/issues/12411",
      "created_at": "2020-04-24T16:37:25Z",
      "updated_at": "2020-04-24T16:37:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, if I interpret @SeeminglyScience's comments in https://github.com/PowerShell/PowerShell/issues/12411#issuecomment-619065783 correctly (the details are beyond me), it sounds like this may not be doable, so perhaps the label \"Up-for-Grabs\" is not appropriate - but I'll let @SeeminglyScience weigh in.",
      "created_at": "2020-04-24T18:56:24Z",
      "updated_at": "2020-04-24T18:56:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Thanks @mklement0, yeah I would say this isn't feasible without a significant time investment and possibly some large architectural changes.",
      "created_at": "2020-04-24T19:37:33Z",
      "updated_at": "2020-04-24T19:37:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is not critical and rare case now but we _could_ enhance support for the scenario in future. I guess we will get the request more and more because .Net will use structs in APIs more and more.",
      "created_at": "2020-04-25T06:03:46Z",
      "updated_at": "2020-04-25T06:03:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Makes sense, @iSazonov. \r\n\r\nGiven @SeeminglyScience's assessment, however, I wonder if we need a _new label_, say,  \"Experts-Only\" - just to give would-be implementers fair warning that a big and complicated task (that also needs to be carefully evaluated for breaking changes) awaits.\r\n\r\nThis would complement the existing \"First-Time-Issue\" label.",
      "created_at": "2020-04-25T15:13:24Z",
      "updated_at": "2020-04-25T15:13:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It looks like a provocation \ud83d\ude04 ",
      "created_at": "2020-04-26T06:25:30Z",
      "updated_at": "2020-04-26T06:25:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm not sure that would be especially constructive? You're almost labelling it \"warning: this is hard as heck\" which will probably just deter pretty much everyone.\r\n\r\nIt might be best to create a meta issue so we can discuss that specifically and let the PS team weigh in on that particular point. \ud83d\ude42 ",
      "created_at": "2020-04-26T14:07:08Z",
      "updated_at": "2020-04-26T14:07:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If \"First-Time-Issue\" is considered helpful guidance rather than an insult (which it certainly isn't), then so should \"Experts-Only\" be (if it's about the _wording_, by contrast, that's negotiable).\r\n\r\nThe point is that some issues are much more intricate and/or high-risk than they look, whereas \"Up-for-Grabs\" tends to invite casual contributions. The idea is to give would-be contributors fair warning, so as to prevent wasted effort.\r\n\r\nIn other words: This label _should_ say \"this is hard\", if there are good reasons for this assessment.\r\n\r\nHowever, I don't feel strongly enough to create a meta issue myself, so I'll leave it at that.\r\n\r\n",
      "created_at": "2020-04-26T15:19:24Z",
      "updated_at": "2020-04-26T15:27:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We use \"First-Time-Issue\" and \"Up-for-Grabs\" as special labels because they are grabbed external systems like https://up-for-grabs.net/\r\nDo you know systems which grabs \"Experts-Only\"?\n\n<blockquote><img src=\"https://up-for-grabs.net/images/logo.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://up-for-grabs.net\">Up For Grabs</a></strong></div><div>Want to contribute to open source, but not sure where to start?</div></blockquote>",
      "created_at": "2020-04-26T18:00:48Z",
      "updated_at": "2020-04-26T18:00:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's good to know - I had no idea this site existed.\r\n\r\nGiven that the - perhaps previously unstated - recommendation is to _combine_ \"experts-only\"\r\nwith \"up-for-grabs\" (just like \"first-time-issue\" already is), users who come to issues via this site (which is certainly not the only route) would benefit too.\r\n\r\n",
      "created_at": "2020-04-26T18:31:55Z",
      "updated_at": "2020-04-26T18:31:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "To be honest if I was looking through `Up-for-Grabs` and this was the first issue I hit, I'd probably move on to a different project.\r\n\r\nIt's definitely within the realm of possibility that I'm wrong and that there's a simple fix I'm not thinking of, wouldn't be the first time.  If I'm not though, then someone either needs to implement a safe version of managed pointers for PowerShell or reorganize the compiler in a pretty complicated way.  Neither of those would really be feasible for someone not already very familiar with the internals.  I'm also fairly sure neither would be accepted as a PR given the scope and minimal gain.",
      "created_at": "2020-04-26T18:41:13Z",
      "updated_at": "2020-04-26T18:41:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's a fair point: perhaps a task of this nature shouldn't be up-for-grabs (which was my original thought too) - especially if you think a PR wouldn't be accepted.\r\n\r\nMy \"experts-only\" suggestion was meant to help in case we do leave it up-for-grabs - the latter being the signal that the fix / feature is recognized as potentially valuable, even though the core team has no plans to implement it themselves.\r\n\r\nIrrespective of what the right answer is for _this_ issue, I think such a label could be useful in general - except if the consensus is that issues that _would_ warrant this new label should by definition _not_ be up-for-grabs.\r\nPerhaps then we need an \"acceptable-limitation\" label instead (although, arguably, \"resolution-by-design\" is sufficient, albeit not as descriptive).\r\n",
      "created_at": "2020-04-26T19:04:06Z",
      "updated_at": "2020-04-26T19:32:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Not sure if the rest of this post should be it's own issue, or if it even belongs in this repo since it isn't really actionable, but I'mma put it here.\r\n\r\nSo I've mentioned that a large part of why this happens and in general why mutable structs are sort of wonky is because PowerShell doesn't and can't support `ref`.  It does have `PSReference` (aka `[ref]`), which sort of emulates `ref` but only really for variables. \r\n\r\nWell I do have an idea for how the concept of `ref` could be implemented in PowerShell safely.  It should however be stressed that:\r\n\r\n_**No one should work on this**_\r\n\r\nUntil a compelling enough reason is demonstrated.  The scope of these changes are too large to currently justify the benefit, not just in implementation time but also maintenance.\r\n\r\nIf there comes a time when `ref` becomes super important to PowerShell, maybe this will help the poor soul taking on that implementation.\r\n\r\n## `PSDeferredReference`\r\n\r\nThe problem with `ref` when it comes to PowerShell is that you can't store a `ref` on the heap. You can however, store all the information needed to create one. This is sort of like what `[ref]` does,\r\nbut it's a bit unwieldy. \r\n\r\n1. It only works with `PSVariable` as it's source\r\n2. It requires you to manipulate it through it's `Value` property\r\n\r\nTo solve these problems, `ref` should be implemented as a new type of dynamic meta object similar to `PSObject`. Given the example of an array reference, the meta object would contain a reference to the whole array and the index requested.\r\n\r\nEvery binder would need to be updated to account for this.\r\n\r\n### `PSInvokeMemberBinder` (and similar)\r\n\r\n If passed as an argument, use for the following\r\n\r\n- Strictly typed `ref` arguments (maybe requiring `[ref]` or a new keyword/type accelerator)\r\n- Loosely typed by value arguments (e.g. allow type conversion as usual)\r\n- Most importantly, the actual meta object should *never* be passed as is. C# code shouldn't have\r\n  to know what it is\r\n\r\nIf used as the instance\r\n\r\n- If reference type or immutable value type use the value as the instance\r\n- If mutable value type use the reference as the instance\r\n\r\n### `PSVariableAssignmentBinder`, `PSPipeWriterBinder` and `PSToArrayBinder`\r\n\r\n**Always** process by *value*. Never save or write the meta object somewhere accessible.\r\n\r\n*Maybe* allow saving to a variable with `[ref]` syntax to mirror C#, but never let the user really see it. For example:\r\n\r\n```powershell\r\n$array = [int[]](0..10)\r\n[ref] $value = [ref] $array[0]\r\n\r\n[string]$value.GetType()\r\n# int\r\n\r\n[object]$value\r\n# 0\r\n\r\n$value = 30\r\n$array[0]\r\n# 30\r\n```\r\n\r\nThe most important requirement for the meta object imo is that it must be as invisible as a managed pointer (`ref`) in C#.\r\n\r\n### PSGetIndexBinder\r\n\r\nWhen the `[ref]` syntax is used and a `ref` return is supported by the indexer, return a deferred reference. This should include at least arrays and ideally also `Memory<T>`.\r\n\r\n### PSGetMemberBinder\r\n\r\nWhen the `[ref]` syntax is used with a mutable field access or (maybe) `ref` property, return a deferred reference.\r\n\r\n### All other binders\r\n\r\nAll others need to be aware of the meta object and operate on the value directly.\r\n\r\n### `ref` parameters in PowerShell class methods\r\n\r\nThis could also be used to add support for `ref`/`out`/`in` parameters in PowerShell class methods. Since class methods are implemented by a generated method calling a scriptblock, the generated method could look something like this:\r\n\r\n```powershell\r\nclass MyRefTest {\r\n    static [void] Test([int] $byValueArg, [ref] [int] $byRefArg) {\r\n        $byRefArg = 10\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\npublic class MyRefTest\r\n{\r\n    public static unsafe void Test(int byValueArg, ref int byRefArg)\r\n    {\r\n        fixed (void* pByRefArg = &byRefArg)\r\n        {\r\n            using var mpByRefArg = new PSManagedPointer((IntPtr)pByRefArg);\r\n            MyRefTest_<staticHelpers>.<Test_1_1>.InvokeHelper(\r\n                instance: null,\r\n                sessionStateInternal: null,\r\n                new object[] { byValueArg, mpByRefArg });\r\n        }\r\n    }\r\n}\r\n\r\ninternal class PSManagedPointer : PSDeferredReference, IDisposable\r\n{\r\n    private readonly IntPtr _managedPointer;\r\n\r\n    private bool _isDisposed;\r\n\r\n    public PSManagedPointer(IntPtr managedPointer) => _managedPointer = managedPointer;\r\n\r\n    // Unsure if this would be an abstract method on `PSDeferredReference` or just part of\r\n    // some kind of new `PSGetReference` binder.\r\n    public unsafe ref T GetRef<T>()\r\n    {\r\n        // Use this as the runtime equivalent to Roslyn's stackalloc escape analysis.\r\n        if (_isDisposed) throw new ObjectDisposedException(this);\r\n        return ref Unsafe.AsRef((void*)_managedPointer);\r\n    }\r\n}\r\n```\r\n\r\nThis could remain safe because you can ensure that the managed pointer would only be used for the lifetime of the method invocation.\r\n\r\n## Caveats\r\n\r\nSince this meta object would need to perform an action every time the deferred reference is used, there are some notable problems.\r\n\r\n1. `ref` return methods would still not be possible to support. Every access would require another method invocation\r\n2. Performance would be worse than actual managed pointers. Though probably still not *measurably* worse than current behavior in most contexts\r\n3. The binder would need to be less forgiving with out of range and/or null handling. Or require some trickery with `Unsafe.AsRef<T>((void*)null)` and `Unsafe.IsNull<T>(ref T)`\r\n4. Binder code would likely double, maybe triple. Note that `Binders.cs` is currently 7,762 lines\r\n\r\n\r\n**Edit:** Added how it could be used to add support for `ref` parameters in PowerShell classes as well.",
      "created_at": "2020-04-27T15:02:57Z",
      "updated_at": "2020-04-27T18:03:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for taking the time to put this together, @SeeminglyScience. \r\n\r\nGiven that this may have to wait for a - at this point hypothetical - future PowerShell version not burdened with the need to maintain backward compatibility (see #6745), I wonder how this fits into the larger sentiment expressed by @lzybkr [here](https://github.com/PowerShell/PowerShell/issues/11171#issuecomment-558276710) (where, as an aside, he also wishes that ETS instance members on value types had not been allowed via the resurrection tables):\r\n\r\n> Note that I consider PSObject a legacy artifact that might never have been introduced if the DLR existed before PowerShell v1. \r\n\r\n",
      "created_at": "2020-04-27T17:17:14Z",
      "updated_at": "2020-04-27T17:17:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I wonder how this fits into the larger sentiment expressed by @lzybkr [here](https://github.com/PowerShell/PowerShell/issues/11171#issuecomment-558276710) (where, as an aside, he also wishes that ETS instance members on value types had not been allowed via the resurrection tables):\r\n> \r\n> > Note that I consider PSObject a legacy artifact that might never have been introduced if the DLR existed before PowerShell v1.\r\n\r\nI believe he's referring to (@lzybkr feel free to correct me if I'm wrong) `PSObject`'s use as a member bag (e.g. `pso.Properties`), not it's use as a DLR meta object.",
      "created_at": "2020-04-28T12:48:51Z",
      "updated_at": "2020-04-28T12:48:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@SeeminglyScience - when implementing DLR support - `PSObject` as a DLR metaobject was done for completeness, so you are more or less correct. PowerShell obviously needs a property bag type but probably doesn't need the apis exposed by `PSObject` given the DLR and resurrection tables.",
      "created_at": "2020-04-28T20:33:30Z",
      "updated_at": "2020-04-28T20:33:30Z"
    }
  ],
  "created_at": "2020-04-23T21:50:19Z",
  "number": 12470,
  "state": "open",
  "title": "Cannot modify array of custom structs directly",
  "updated_at": "2020-04-28T20:33:31Z"
}