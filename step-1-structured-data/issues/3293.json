{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3293",
  "author": "fanoI",
  "body": "Steps to reproduce\r\n------------------\r\nWrite 42.42 - 42 in the PowerShell prompt\r\n\r\nExpected behavior\r\n-----------------\r\n0.42 is returned\r\n\r\nActual behavior\r\n---------------\r\n0,420000000000002 is returned\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.9\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\nA possible mitigation could be as could be as it is done in C# Interactive to do \"42.42m - 42m\" to force the evalutation as Decimal.\r\n",
  "closed_at": "2017-10-01T14:57:35Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Sorry, misread your request.",
      "created_at": "2017-03-09T20:38:35Z",
      "updated_at": "2017-03-09T20:38:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Workaround:\r\n\r\n```powershell\r\nPS /home/steve/repos/PowerShell> [decimal]42.42 -42                                            \r\n0.42\r\n```\r\n\r\nThe concern I have is this would be a breaking change",
      "created_at": "2017-03-09T20:40:19Z",
      "updated_at": "2017-03-09T20:40:19Z"
    },
    {
      "author": "fanoI",
      "author_association": "NONE",
      "body": "On the other hand think when you use it to do calculation on the shell? The user would expect the behavior of the calculator application and it gets an wrong result...\r\n\r\nThis obviously should not change the behavior in a script where 42.42 without indication of type should be always considered a double as is in C#.",
      "created_at": "2017-03-10T14:24:18Z",
      "updated_at": "2017-03-10T14:41:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@fanoI I agree that for interactive shell, I would prefer it to be a decimal for quick calculations.  However, we try to keep the shell and scripting experience the same so there aren't any surprises switching from one to the other.  Maybe for interactive we could do something with formatting so it looks like a decimal even though it's still a double.",
      "created_at": "2017-03-10T16:13:55Z",
      "updated_at": "2017-03-10T16:13:55Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I wouldn't change the default formatting because it is difficult to infer the expected precision people want to see, but it's relatively easy for folks to change that themselves.\r\n\r\nWe could add an `m` suffix though, I think that's a good idea.",
      "created_at": "2017-03-10T18:17:29Z",
      "updated_at": "2017-03-10T18:17:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Isn't `d` already defined for decimal literals?",
      "created_at": "2017-03-10T18:56:41Z",
      "updated_at": "2017-03-10T18:56:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rkeithhill you're right\r\n\r\n```powershell\r\nPS /home/steve> 42.42d - 42                                                                    \r\n0.42\r\n```",
      "created_at": "2017-03-10T19:00:32Z",
      "updated_at": "2017-03-10T19:00:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I implemented it and I still can't remember that, `d` will forever mean double to me.\r\n\r\nWe could still add `m` to align with C# - I'm not sure if that's a good idea or not though.",
      "created_at": "2017-03-10T19:05:55Z",
      "updated_at": "2017-03-10T19:05:55Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "LOL.  I remembered that this feature was added but my first guess was `m` as well.  When that didn't work, I figured it might be `d` (for decimal).",
      "created_at": "2017-03-10T19:45:46Z",
      "updated_at": "2017-03-10T19:45:46Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Some comments: \r\n- PowerShell uses d for decimal because m was for 'mega'. m eventually turned into mb at a partners' request but that was later on. \r\n- FWIW the 'd' suffix e.g. 123d is what Visual Basic uses. Don't assume all PowerShell users are C# programmers.\r\n- 'd' for decimal is certainly more mnemonic.\r\n- Floating point operations in PowerShell are double by default so there's no suffix needed. You have to use the suffix f to force single precision floats. Don't assume all PowerShell users are C/C++ programmers.",
      "created_at": "2017-03-10T20:55:45Z",
      "updated_at": "2017-03-10T20:55:45Z"
    },
    {
      "author": "fanoI",
      "author_association": "NONE",
      "body": "It is possible to add a sort of configuration so that Decimal is used by default when calculations whit fractional numbers are done in the shell?",
      "created_at": "2017-03-13T10:02:52Z",
      "updated_at": "2017-03-13T10:03:26Z"
    }
  ],
  "created_at": "2017-03-09T19:31:23Z",
  "number": 3293,
  "state": "closed",
  "title": "Powershell should make it easier to use decimal values",
  "updated_at": "2017-10-01T14:57:35Z"
}