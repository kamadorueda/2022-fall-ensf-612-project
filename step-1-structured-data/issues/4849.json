{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4849",
  "author": "ebekker",
  "body": "This is not an issue or bug, but I'm looking for some *official* guidance -- if I'm writing a binary module, in general, what would be the proper or recommended way to redirect data sent to a `TextWriter` to a PowerShell output stream?\r\n\r\nSpecifically, let's say I've included a 3rd-party library in my PS module that happens to write normally to `Console.Out`.  If I want all that output to go to PowerShell's Output stream instead so that it can be *seen* by the environment and the runspace pipeline -- how should I go about this?\r\n\r\nThe naive approach would be to replace `Console.Out` via `Console.SetOut(...)` with my own `TextWriter` instance, say a `StringWriter` that buffers all the output and then I can spit it out all out at once via `WriteObject`.  A more elegant approach would be to implement my own `TextWriter` whose `Write(...)` methods do an immediate write out via `WriteOutput`.\r\n\r\nBut my intuition tells me there must be a more *standard* approach to this?\r\n",
  "closed_at": "2017-09-19T19:28:50Z",
  "comments": [
    {
      "author": "ebekker",
      "author_association": "NONE",
      "body": "Someone mentioned that @dlwyatt's [PowerShellLoggingModule](https://github.com/dlwyatt/PowerShellLoggingModule) may already be doing something like this, but taking a quick look through the code, it appears this is doing capture and redirection of the Host's output, which is on the \"PowerShell side\" of things, not in the Console IO of the underlying .NET runtime.\r\n",
      "created_at": "2017-09-16T16:13:54Z",
      "updated_at": "2017-09-16T16:13:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Cc @lzybkr might be the best person to give guidance here",
      "created_at": "2017-09-16T17:17:16Z",
      "updated_at": "2017-09-16T17:17:16Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If the 3rd-party code is wrapped in an `exe` - it might be easiest to run the exe directly to get the output back in a PowerShell friendly way, something like:\r\n\r\n```c#\r\nvar ps = PowerShell.Create(RunspaceMode.CurrentRunspace);\r\nps.AddCommand(\"your_command.exe\");\r\nvar output = ps.Invoke();\r\nforeach (var o in output) {\r\n    WriteObject(o);\r\n}\r\n```\r\n\r\nOtherwise I think your approaches are reasonable options.\r\n\r\nIt sounds like you are wrapping some 3rd-party code - so you might consider structured output instead of the strings the 3rd-party code is writing. If parsing the text output from that 3rd-party code, then you save the users of your command the trouble of parsing the text (possibly incorrectly) themselves.",
      "created_at": "2017-09-17T23:56:43Z",
      "updated_at": "2017-09-17T23:56:43Z"
    },
    {
      "author": "ebekker",
      "author_association": "NONE",
      "body": "Thanks!  I'll go with that.",
      "created_at": "2017-09-19T19:28:49Z",
      "updated_at": "2017-09-19T19:28:49Z"
    }
  ],
  "created_at": "2017-09-16T02:19:08Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 4849,
  "state": "closed",
  "title": "Guidance on redirecting Console.Out to PowerShell output stream",
  "updated_at": "2017-09-26T08:09:06Z"
}