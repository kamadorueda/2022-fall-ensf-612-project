{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11234",
  "author": "mklement0",
  "body": "If there's only _one_ explicit parameter set and that set has a _mandatory_ parameter, but no set is designated as the default, PowerShell currently chooses that one explicit set by default in an argument-less invocations, and therefore prompts for the mandatory parameter.\r\n\r\nHowever, it then neglects to reflect the effectively chosen set name in `$PSCmdlet.ParameterSetName`.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nfunction foo {\r\n  [CmdletBinding()] # Note: no default parameter set designated.\r\n  param(\r\n    [Parameter(Mandatory, ParameterSetName='ByFoo')] $Foo,\r\n    [Parameter()]                                    $Bar\r\n  )\r\n  $PSCmdlet.ParameterSetName\r\n}\r\n\r\n# Just press Enter when prompted for a -Foo value\r\nfoo | Should -Be ByFoo\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should pass.\r\n\r\n# Actual behavior\r\n\r\nThe test fails, because it is `__AllParameterSets` that is unexpectedly reported as the effective parameter set, even though the `ByFoo` set was clearly chosen.\r\n\r\n```none\r\nExpected strings to be the same, but they were different. \r\nExpected length: 5 Actual length:   18 Strings differ at index 0. \r\nExpected: 'ByFoo' But was:  '__AllParameterSets'\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.6\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-12-02T14:38:58Z",
  "number": 11234,
  "state": "open",
  "title": "A prompt for a mandatory parameter can cause $PSCmdlet.DefaultParameterSetName to reflect the wrong parameter set",
  "updated_at": "2019-12-03T00:19:19Z"
}