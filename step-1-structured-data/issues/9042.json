{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9042",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n- Use Type.EmptyTypes, remove custom implementation\r\n- Use Array.Empty<T>(), remove custom implementation\r\n\r\n## PR Context\r\n\r\nThe APIs was missing in .Net Core 1.0/1.1 and is now in .Net Core 2.0/2.1 and we can remove our temporary code.\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-03-10T01:53:31Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Can you verify that `Array.Empty` is faster than the private implementation? I recall measuring and surprisingly the private implementation was faster despite the code being identical - presumably the assembly containing the generic code has (had?) some impact on code generation.\r\n\r\nIIRC, the private code was necessary to keep Windows PowerShell running with supported versions of the desktop CLR, but I measured anyway because I was curious.",
      "created_at": "2019-03-04T21:03:37Z",
      "updated_at": "2019-03-04T21:03:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Can you verify that Array.Empty is faster than the private implementation?\r\n\r\n@lzybkr I believe that make sense only after we move to .Net Core 3.0 - the new runtime has huge performance improvements. Although now I could do a simple test using BenchmarkDotNet.",
      "created_at": "2019-03-05T05:23:47Z",
      "updated_at": "2019-03-05T05:23:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems performance of both comparable with .Net Core 3.0 Preview2 taking in account measure errors.\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.4, OS=Windows 10.0.17763.253 (1809/October2018Update/Redstone5)\r\nIntel Core i5-2410M CPU 2.30GHz (Sandy Bridge), 1 CPU, 4 logical and 2 physical cores\r\n.NET Core SDK=3.0.100-preview-010184\r\n  [Host]      : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n  TC Disabled : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n  TC Enabled  : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n\r\nRuntime=Core  Toolchain=.NET Core 3.0  \r\n\r\n```\r\n|           Method |         Job |        EnvironmentVariables |      Mean |     Error |    StdDev |    Median | Ratio | RatioSD | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|----------------- |------------ |---------------------------- |----------:|----------:|----------:|----------:|------:|--------:|------------:|------------:|------------:|--------------------:|\r\n| CoreFXEmptyArray | TC Disabled | COMPlus_TieredCompilation=0 | 4.2667 ns | 0.1326 ns | 0.1241 ns | 4.3343 ns |  1.00 |    0.00 |           - |           - |           - |                   - |\r\n| CustomEmptyArray | TC Disabled | COMPlus_TieredCompilation=0 | 4.3588 ns | 0.1441 ns | 0.1348 ns | 4.4062 ns |  1.02 |    0.04 |           - |           - |           - |                   - |\r\n|                  |             |                             |           |           |           |           |       |         |             |             |             |                     |\r\n| CoreFXEmptyArray |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0047 ns | 0.0108 ns | 0.0101 ns | 0.0000 ns |     ? |       ? |           - |           - |           - |                   - |\r\n| CustomEmptyArray |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0349 ns | 0.0406 ns | 0.0380 ns | 0.0252 ns |     ? |       ? |           - |           - |           - |                   - |\r\n",
      "created_at": "2019-03-06T18:45:31Z",
      "updated_at": "2019-03-06T18:45:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - did your benchmark use types defined in System.Management.Automation? I seem to recall that was where I saw a difference.",
      "created_at": "2019-03-06T18:52:21Z",
      "updated_at": "2019-03-06T18:52:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The test code is:\r\n```c#\r\n        [Benchmark(Baseline = true)]\r\n        public string[] CoreFXEmptyArray()\r\n        {\r\n            return Array.Empty<string>();\r\n        }\r\n\r\n        [Benchmark]\r\n        public string[] CustomEmptyArray()\r\n        {\r\n            return EmptyArray<string>();\r\n        }\r\n```\r\n",
      "created_at": "2019-03-06T19:00:18Z",
      "updated_at": "2019-03-06T19:00:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "String and object - these are most common.",
      "created_at": "2019-03-06T19:03:11Z",
      "updated_at": "2019-03-06T19:03:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Do try types in other assemblies. The code is minimal, and if there is a performance difference, I see no reason for the change.",
      "created_at": "2019-03-06T19:16:20Z",
      "updated_at": "2019-03-06T19:16:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today I can not compile SMA with .Net Core 3.0 and get types from it.\r\n\r\n>  I recall measuring and surprisingly the private implementation was faster despite the code being identical - presumably the assembly containing the generic code has (had?) some impact on code generation.\r\n\r\nWhat runtime you measure with? I guess .Net FrameWork? .Net Core 3.0 has a lot of new optimizations. I saw that 3.0 more faster 2.1 while working on Simple Case Folding.\r\nPreviously the custom code (EmptyArray) could be faster because of AggresiveInlining attribute. Both Framework and Core haven't this attribute but 3.0 uses TC and new code gen.\r\n\r\nIn my measure 3.0 generate identical code for both if TC=0 and different code if TC=1 - the second is so fast that error > value (I could get better result). Disasm file attached \r\n\r\n[System.Text.CaseFolding.IntroBenchmarkBaseline-asm.raw.html.zip](https://github.com/PowerShell/PowerShell/files/2942095/System.Text.CaseFolding.IntroBenchmarkBaseline-asm.raw.html.zip)\r\n",
      "created_at": "2019-03-07T15:53:32Z",
      "updated_at": "2019-03-07T15:53:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I most likely measured it with 4.6.2.\r\n\r\nI don't know how important SMA is, you could try using a type defined in you benchmark assembly to see if that is different than `object` or `string`.",
      "created_at": "2019-03-07T16:18:49Z",
      "updated_at": "2019-03-07T16:18:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "``` ini\r\n\r\nBenchmarkDotNet=v0.11.4, OS=Windows 10.0.17763.253 (1809/October2018Update/Redstone5)\r\nIntel Core i5-2410M CPU 2.30GHz (Sandy Bridge), 1 CPU, 4 logical and 2 physical cores\r\n.NET Core SDK=3.0.100-preview-010184\r\n  [Host]      : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n  TC Disabled : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n  TC Enabled  : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n\r\nRuntime=Core  Toolchain=.NET Core 3.0  \r\n\r\n```\r\n|                   Method |         Job |        EnvironmentVariables |      Mean |     Error |    StdDev |    Median | Ratio | RatioSD |\r\n|------------------------- |------------ |---------------------------- |----------:|----------:|----------:|----------:|------:|--------:|\r\n|   CoreFXEmptyArrayString | TC Disabled | COMPlus_TieredCompilation=0 | 4.1844 ns | 0.1102 ns | 0.1031 ns | 4.2175 ns |  1.00 |    0.00 |\r\n| CoreFXEmptyArrayTestType | TC Disabled | COMPlus_TieredCompilation=0 | 4.2873 ns | 0.1597 ns | 0.1494 ns | 4.1989 ns |  1.03 |    0.05 |\r\n|   CustomEmptyArrayString | TC Disabled | COMPlus_TieredCompilation=0 | 4.3933 ns | 0.1218 ns | 0.1140 ns | 4.4280 ns |  1.05 |    0.04 |\r\n| CustomEmptyArrayTestType | TC Disabled | COMPlus_TieredCompilation=0 | 4.3542 ns | 0.1843 ns | 0.1724 ns | 4.3928 ns |  1.04 |    0.06 |\r\n|                          |             |                             |           |           |           |           |       |         |\r\n|   CoreFXEmptyArrayString |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0539 ns | 0.0530 ns | 0.0496 ns |     ? |       ? |\r\n| CoreFXEmptyArrayTestType |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0589 ns | 0.0858 ns | 0.0803 ns | 0.0395 ns |     ? |       ? |\r\n|   CustomEmptyArrayString |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0601 ns | 0.0602 ns | 0.0563 ns | 0.0473 ns |     ? |       ? |\r\n| CustomEmptyArrayTestType |  TC Enabled | COMPlus_TieredCompilation=1 | 0.0859 ns | 0.0604 ns | 0.0535 ns | 0.0933 ns |     ? |       ? |\r\n\r\nThe same results. For TC=0 we have reliable results and approximately equal values \u200b\u200bwithin the error. For TC=1 error exceeds the value - all is very fast.\r\n\r\n> I most likely measured it with 4.6.2.\r\n\r\nThis suggests that this measures should be repeated for .Net Core (for each version with which we release?).",
      "created_at": "2019-03-07T17:21:35Z",
      "updated_at": "2019-03-07T17:21:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Thanks for testing - I don't have any concerns with the change.",
      "created_at": "2019-03-07T17:35:42Z",
      "updated_at": "2019-03-07T17:35:42Z"
    }
  ],
  "created_at": "2019-03-04T05:19:58Z",
  "number": 9042,
  "state": "closed",
  "title": "Use Type.EmptyTypes and Array.Empty<T>()",
  "updated_at": "2019-03-10T05:57:59Z"
}