{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5099",
  "author": "markekraus",
  "body": "Reference: #3603\r\n\r\nProposal is to add usage to the `using` statement to allow for ease of access to static members of classes.\r\n\r\none possible syntax:\r\n```powershell\r\nusing static System.Math\r\n\r\n$b  = Pow(1024, 2)\r\n```\r\n\r\nThis issue is open to discuss possible implementations, issues concerns, use cases, yays and nays. \r\n\r\nQuestions: Methods only? All members? syntax? support for PowerShell v5+ user defined classes? precedence?",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The proposed syntax is ambiguous with commands.\r\n\r\nToday, method invocation uses an operator with an expression before the method name (e.g. `$o.` or `[t]::` ), otherwise the parser sees a command invocation.\r\n\r\nThe parentheses do not help disambiguate, and there are other quirks to note:\r\n\r\n```powershell\r\necho(1)     # Valid\r\necho(1, 2)  # Parse error if strict mode enabled\r\necho (1, 2) # Valid\r\necho()      # Parse error, missing expression\r\n```\r\n\r\nThe strict mode error only happens if there is no space, as folks learning PowerShell were invoking functions like methods, but surprised that arguments weren't passed as expected. If there is a single argument, the parens don't matter, but if there are multiple arguments, the parens group the values in the first argument.\r\n\r\nSome possible solutions for the ambiguity:\r\n\r\n* Call static methods like functions:\r\n```powershell\r\nusing static Math\r\nusing static Console\r\npow 1 2\r\npow -y 2 -x 1 # Same as previous line, named args\r\nWriteLine \"hello\"\r\n```\r\n* Continue to use `::` (a breaking change, but probably safe):\r\n```powershell\r\nusing static Math\r\n::pow(1,2)\r\n```\r\n* Extra work at parse time (before semantic checks) so method/property names are not parsed like commands.\r\n```powershell\r\nusing static Math\r\n$e = E # [Math]::E\r\nlog(2, $e)\r\n```\r\n",
      "created_at": "2017-10-12T21:20:05Z",
      "updated_at": "2017-10-12T21:20:05Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "personally, I like the idea of them becoming function-esque. But if property members are also exposed, that might look weird.\r\n\r\n```powershell\r\nusing static System.Globalization.CultureInfo \r\n\r\nCurrentCulture = CreateSpecificCulture \"nl-NL\"\r\n```\r\nThat looks odd.\r\n\r\nI like the `::` prefix/sigil idea. Makes it a little less confusing. i was thinking a sigil would be nice, and there already kind of is one for this usage.",
      "created_at": "2017-10-12T21:48:22Z",
      "updated_at": "2017-10-12T22:05:36Z"
    }
  ],
  "created_at": "2017-10-12T20:16:10Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 5099,
  "state": "open",
  "title": "Add `use static <class>` usage to allow static member access in PowerShell",
  "updated_at": "2017-10-17T21:58:22Z"
}