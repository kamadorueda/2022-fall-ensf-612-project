{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12570",
  "author": "tfenster",
  "body": "# Intention\r\nI want to connect from one Windows container to another Windows container using `Enter-PSSession -ContainerId ...` like I can when connecting from the host to a container\r\n\r\n# Steps to reproduce\r\nOn a Windows Server 2019 (1809) machine with Docker installed (19.03.5), create two containers: The first will just be used to later try to connect to and is started like this:\r\n\r\n```powershell\r\ndocker run --name one -ti mcr.microsoft.com/powershell:lts-windowsservercore-1809\r\n```\r\n\r\nThe second will be used to connect from, which is why the Docker engine is mounted, the Docker application binaries are mounted and because we need to copy a DLL, also c:\\windows\\system32 is mounted\r\n\r\n```powershell\r\ndocker run --name two -v c:\\windows\\system32:c:\\temp -v \"c:\\program files\\docker:c:\\docker\" -v \\\\.\\pipe\\docker_engine:\\\\.\\pipe\\docker_engine -ti mcr.microsoft.com/powershell:lts-windowsservercore-1809\r\n```\r\n\r\nWhen the pwsh session has started, make sure that both containers are actually up and running by using the following command. This and all following commands are run in the second container\r\n```powershell\r\nPS C:\\> C:\\docker\\docker.exe ps\r\nCONTAINER ID        IMAGE                                                     COMMAND             CREATED             STATUS              PORTS               NAMES\r\n420066d683d1        mcr.microsoft.com/powershell:lts-windowsservercore-1809   \"pwsh.exe\"          29 seconds ago      Up 27 seconds                           one\r\n82c6cd3c4409        mcr.microsoft.com/powershell:lts-windowsservercore-1809   \"pwsh.exe\"          53 seconds ago      Up 52 seconds                           two\r\n```\r\n\r\nTo get the full id needed for `Enter-PSSession`, use the following command\r\n```powershell\r\nPS C:\\> C:\\docker\\docker.exe ps --no-trunc -qf \"name=two\"\r\n82c6cd3c440974030d4d1d4e452a9f76c6d27e2ad923677d0f128de923d18166\r\n```\r\n\r\nUse that id to try to connect from container `one` to container `two`, which results in a dll not found error\r\n```powershell\r\nPS C:\\> Enter-PSSession -ContainerId 82c6cd3c440974030d4d1d4e452a9f76c6d27e2ad923677d0f128de923d18166 -RunAsAdministrator\r\nEnter-PSSession: Unable to load DLL 'vmcompute.dll' or one of its dependencies: The specified module could not be found. (0x8007007E)\r\n```\r\n\r\nTo try and fix this, copy the dll from the host to the container\r\n```powershell\r\ncp C:\\temp\\vmcompute.dll C:\\windows\\System32\\\r\n```\r\n\r\nAfter that, I can successfully run the command, but something still not working as the command claims that the container doesn't run although I have just verified that it indeed runs\r\n```powershell\r\nPS C:\\> Enter-PSSession -ContainerId 82c6cd3c440974030d4d1d4e452a9f76c6d27e2ad923677d0f128de923d18166 -RunAsAdministrator\r\nEnter-PSSession: The input ContainerId 82c6cd3c440974030d4d1d4e452a9f76c6d27e2ad923677d0f128de923d18166 does not exist, or the corresponding container is not running.\r\n```\r\n\r\nIf I try the same on the host instead of inside of the container, it works\r\n```powershell\r\nPS C:\\> Enter-PSSession -ContainerId 82c6cd3c440974030d4d1d4e452a9f76c6d27e2ad923677d0f128de923d18166 -RunAsAdministrator\r\n[82c6cd3c4409...]: PS C:\\Users\\ContainerAdministrator\\Documents>\r\n```\r\n\r\n# Expected behavior\r\nSame as on the host, I expect the PowerShell session to be established\r\n\r\n# Actual behavior\r\nThe session is not established and the error message claims that the container doesn't exist or is not running\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-04T17:53:17Z",
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I don't think it's possible by design.\r\n\r\nWhen you use \"Enter-PSSession -ContainerId\", you use \"Host Compute Service\" (via vmcompute.dll) which is only  available on the host : \r\n![Host Compute Service](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/97066i708C622E48DA60D2)\r\n\r\nYou should use WinRM/SSHd, it's the only supported way to do it.\r\n\r\nPS : there is also a possibility that what you want to do is not secure too.",
      "created_at": "2020-05-04T17:32:20Z",
      "updated_at": "2020-05-04T17:32:20Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is correct.  PowerShellDirect connections work only from host to container, not container to container.  As mentioned above, you need to use WinRM or SSH remoting.",
      "created_at": "2020-05-04T17:53:17Z",
      "updated_at": "2020-05-04T17:53:17Z"
    },
    {
      "author": "tfenster",
      "author_association": "NONE",
      "body": "@fMichaleczek @PaulHigin thanks a lot for your quick and clear answer, very much appreciated. Should Container-to-Container WinRM work? So basically `Enter-PSSession -ComputerName <containername>`? ",
      "created_at": "2020-05-04T19:05:05Z",
      "updated_at": "2020-05-04T19:05:05Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@tfenster \"Windows Server Core\" image has Windows PowerShell 5.1 and by default PowerShell Remoting is enable (over WinRM). The only requirement is a configured network. If you want PowerShell 7.0, you will have to install it and enable PSRemoting.",
      "created_at": "2020-05-04T19:25:09Z",
      "updated_at": "2020-05-04T19:25:09Z"
    },
    {
      "author": "tfenster",
      "author_association": "NONE",
      "body": "@fMichaleczek once again, thanks a lot, I got that to work! I had to create a new local user on the \"target\" container and use basic auth with those credentials from the \"source\" container to connect which is a bit of a nuisance, but I guess there is no other way or do you see anything?",
      "created_at": "2020-05-04T20:25:57Z",
      "updated_at": "2020-05-04T20:34:51Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@tfenster If you upgrade to PowerShell 7.0 and install SSHd, you should able to implement a PSRemoting over SSH with a SSH public key authentication.  ",
      "created_at": "2020-05-04T21:05:13Z",
      "updated_at": "2020-05-04T21:05:13Z"
    },
    {
      "author": "tfenster",
      "author_association": "NONE",
      "body": "@fMichaleczek Interesting idea, will look into that. Once more, thanks a lot for the quick and very helpful answers!",
      "created_at": "2020-05-04T21:07:41Z",
      "updated_at": "2020-05-04T21:07:41Z"
    }
  ],
  "created_at": "2020-05-04T16:46:03Z",
  "number": 12570,
  "state": "closed",
  "title": "Enter-PSSession does not work from Container to Container",
  "updated_at": "2020-05-04T21:07:41Z"
}