{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14758",
  "author": "stephen147",
  "body": "In version 5.0 and 5.1 there was a `-Path` and `-LiteralPath` parameter for `Set-Clipboard`.\r\n\r\nWhy was `-LiteralPath` and `-Path` removed or is that an oversight not to include them?\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "_De facto_ I can tell you that _PowerShell Core_ supports only copying _plain text_ to the clipboard, which  you can see in https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Management/commands/management/Clipboard.cs\r\n\r\nThat is, all parameters relating _other_ data types that are supported in _Windows PowerShell_ are no longer present, namely:\r\n\r\n  * `Set-Clipboard`:\r\n    * `-LiteralPath` and `-Path` for  copying _references to files_ to the clipboard.\r\n    * `-AsHtml` for copying HTML as such (rather than as plain text that happens to contain HTML markup) to the clipboard; see #18196\r\n\r\n  * `Get-Clipboard`:\r\n    * `-Format` / `-TextFormatType` for retrieving formats other than text / specific text formats; see #12290.\r\n\r\n---\r\n\r\nGiven how `Set-Clipboard`  is implemented on _Unix-like platforms_, via external programs (`pbcopy` on macOS, `xclip` on Linux), support there is limited to _plain text_.\r\n\r\nHowever, _on Windows_ I believe it is still _technically_ possible to support the same functionality as in Windows PowerShell.\r\n\r\nI can't speak to what the design rationale was, however.\r\n\r\nA possible motivation may have been to pare down the parameters to the lowest common denominator of functionality that is supported on _all_ platforms.\r\n\r\n\r\n\r\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-02-12T02:21:40Z",
      "updated_at": "2022-10-02T13:36:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A related issue is that for `Get-Clipboard`'s  Windows-specific `-Format`  and `-TextFormatType` parameters are no longer supported either - see #12290.\r\n",
      "created_at": "2021-02-15T17:36:56Z",
      "updated_at": "2022-10-02T13:36:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Additionally,  it should  be possible to support `-LiteralPath` / `-Path` on those Linux platforms where `xclip` is installed, because the `xclip` apt-get package additionally comes with utilities that support file-reference copying and pasting: `xclip-copyfile`, `xclip-cutfile`, and `xclip-pastefile`.\r\n\r\nBy contrast, the (preinstalled) `pbcopy` utility on macOS does _not_ support this.\r\n\r\n\r\n",
      "created_at": "2021-02-16T00:17:33Z",
      "updated_at": "2021-02-16T02:28:05Z"
    },
    {
      "author": "MartyIX",
      "author_association": "NONE",
      "body": "Copying a file to clipboard was really useful. I hope it will come back one day.",
      "created_at": "2021-06-07T09:29:42Z",
      "updated_at": "2021-06-07T09:29:42Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Using PowerShell 7.2.2 on Windows, I tried the following as a substitute for `Set-Clipboard -AsHtml`:\r\n\r\n```PowerShell\r\n[string]$html = .\\my-script.ps1 | ConvertTo-Html -Fragment\r\n[System.Windows.Forms.Clipboard, System.Windows.Forms]::SetText($html, \"Html\")\r\n```\r\n\r\nbut I was unable to paste the result to applications because, unlike `Set-Clipboard -AsHtml`, the [Clipboard.SetText method](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.clipboard.settext?view=windowsdesktop-6.0#system-windows-forms-clipboard-settext(system-string-system-windows-forms-textdataformat)) does not add the \"description\" required by the [HTML Clipboard Format](https://docs.microsoft.com/en-us/windows/win32/dataxchg/html-clipboard-format). So, I had to add the description in PowerShell code instead:\r\n\r\n```PowerShell\r\n[string]$html = .\\my-script.ps1 | ConvertTo-Html -Fragment\r\n$description = \"Version:0.9`r`nStartHTML:-1`r`nEndHTML:-1`r`nStartFragment:{0:D9}`r`nEndFragment:{1:D9}`r`n\" `\r\n    -f 87, (87 + [System.Text.Encoding]::UTF8.GetByteCount($html))\r\n[System.Windows.Forms.Clipboard, System.Windows.Forms]::SetText($description + $html, \"Html\")\r\n```\r\n\r\nwhere 87 is the resulting `[System.Text.Encoding]::UTF8.GetByteCount($description))`. This is sufficient for pasting to Microsoft Word, but not for pasting to the Teams desktop client, which apparently requires more context around the HTML fragment. I'd sure like an easier way to do this.",
      "created_at": "2022-03-29T11:22:13Z",
      "updated_at": "2022-03-29T12:21:20Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "For X11, [Inter-Client Communication Conventions Manual  (ICCCM) version 2.0 section 2.6.2](https://tronche.com/gui/x/icccm/sec-2.html) mentions the `FILE_NAME` target atom, which could be used for `Set-Clipboard -LiteralPath`. The xclip program appears to support `-target FILE_NAME`.",
      "created_at": "2022-05-28T11:04:35Z",
      "updated_at": "2022-05-28T11:04:35Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> utilities that support file-reference copying and pasting: xclip-copyfile, xclip-cutfile, and xclip-pastefile.\n\nThose are unlikely to be interoperable with other applications because:\n\n- They use the `SECONDARY` selection. Paste functions in other applications are advised to use the `CLIPBOARD` or `PRIMARY` selection, in <https://freedesktop.org/wiki/Specifications/ClipboardsWiki/>.\n- They transfer not only file references but also the file contents, in tar.gz format. Regardless, they use the `UTF8_STRING` target. Other applications are unlikely to decode tar.gz, especially if mislabelled like this.\n\n<blockquote><div><strong><a href=\"https://freedesktop.org/wiki/Specifications/ClipboardsWiki/\">ClipboardsWiki</a></strong></div></blockquote>",
      "created_at": "2022-05-28T11:21:47Z",
      "updated_at": "2022-05-28T12:04:46Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Instead of `FILE_NAME`, one could use [`text/uri-list`](https://www.iana.org/assignments/media-types/text/uri-list) with [File URI Specification](https://freedesktop.org/wiki/Specifications/file-uri-spec/), like in [Drag-and-Drop Protocol for the X Window System (XDND)](https://freedesktop.org/wiki/Specifications/XDND/). This would be suitable for copying multiple file references. Or even use both `FILE_NAME` and `text/uri-list` target atoms, but that would require changes in xclip, which currently supports only one target atom at a time.",
      "created_at": "2022-05-28T12:02:52Z",
      "updated_at": "2022-05-28T12:02:52Z"
    }
  ],
  "created_at": "2021-02-11T12:26:09Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management",
    "Needs-Triage"
  ],
  "number": 14758,
  "state": "open",
  "title": "Command for Set-Clipboard (-Path and -LiteralPath) parameter no longer exist",
  "updated_at": "2022-10-02T13:36:27Z"
}