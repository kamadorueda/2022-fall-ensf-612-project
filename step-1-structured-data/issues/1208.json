{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1208",
  "author": "TravisEz13",
  "body": "<!--\n\nIf you are running a released version of powershell, but not the latest one, install the latest from https://github.com/PowerShell/PowerShell/releases and try to repro it again\n\nBefore submitting this issue, please first:\n\n- [X] Search the existing issues.\n- [ ] Refer to the [FAQ](../docs/FAQ.md).\n- [ ] Refer to the [known issues](../docs/KNOWNISSUES.md).\n- [ ] If it is a bug, fill out this form:\n-->\n## Steps to reproduce\n\nstart PowerShell with sudo\nget-process -IncludeUserName <username>\n## Expected behavior\n\nThe command should list processes for that user\n## Actual behavior\n\n```\nget-process : The 'IncludeUserName' parameter requires elevated user rights. \nTry running the command again in a session that has been opened with elevated \nuser rights (that is, Run as Administrator).\nAt line:1 char:1\n+ get-process -IncludeUserName travisez13\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Get-Process], InvalidOper \n   ationException\n    + FullyQualifiedErrorId : IncludeUserNameRequiresElevation,Microsoft.Power \n   Shell.Commands.GetProcessCommand\n```\n## Environment data\n\n<!-- If running the latest released version, specify the version, i.e. -->\n\nv0.4.0\n\n<!-- If running you own build, please fill in the results of the following commands: -->\n\n``` powershell\n> $PSVersionTable\nName                           Value                                           \n----                           -----                                           \nPSVersion                      5.1.10032.0                                     \nPSEdition                      Linux                                           \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \nBuildVersion                   3.0.0.0                                         \nGitCommitId                    v0.5.0                                          \nCLRVersion                                                                     \nWSManStackVersion              1.0                                             \nPSRemotingProtocolVersion      2.3                                             \nSerializationVersion           1.1.0.1                                         \n\n\n```\n\n``` sh\n$ dotnet --info\n\n\n$ git rev-parse HEAD; git status\n\n\n```\n",
  "closed_at": "2016-07-14T00:27:11Z",
  "comments": [
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "`get-process` with `-IncludeUserName` is a switch rather than a filter, but it is still not possible to retrieve the username with the processinfo, which is what I think you're looking for\n",
      "created_at": "2016-06-27T19:55:28Z",
      "updated_at": "2016-06-27T19:55:28Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Okay I got it to not error out, but I'm also not getting username information. Investigating...\n",
      "created_at": "2016-07-11T19:42:30Z",
      "updated_at": "2016-07-11T19:42:30Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The quick answer is that getting the username for processes is specifically not implemented for CoreCLR PowerShell. I could close this, but let me see what it would take to implement.\n\n/cc @daxian-dbw \n",
      "created_at": "2016-07-11T19:46:02Z",
      "updated_at": "2016-07-11T19:46:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`-IncludeUserName` is implemented with P/invoke to win32 APIs on windows platform. So it's expected to not work in Linux by default. And Jim is correct that it's a swtich instead of a filter.\n",
      "created_at": "2016-07-11T20:54:57Z",
      "updated_at": "2016-07-11T20:54:57Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw It's not implemented for Nano whatsoever. I can implement it for Linux, but .NET Core provides no APIs for what I'm doing, so I need to P/Invoke as well.\n",
      "created_at": "2016-07-11T22:08:39Z",
      "updated_at": "2016-07-11T22:08:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@andschwa It's implemented for Nano and it also works in PowerShell Core on windows, see below for an example (note that when running PowerShell Core on windows, the `-IncludeUserName` switch requires Admin privilege):\n\n```\n[10.123.170.206]: PS C:\\> gps -IncludeUserName\n\nHandles      WS(K)   CPU(s)     Id UserName               ProcessName\n-------      -----   ------     -- --------               -----------\n      0       2684     0.00   1768 NT AUTHORITY\\SYSTEM    cmd\n      0        976     0.91    320                        csrss\n      0          4               0                        Idle\n      0       7360    10.53    380 NT AUTHORITY\\SYSTEM    lsass\n      0      63500     5.31   1256 NT AUTHORITY\\SYSTEM    powershell\n      0       3040     0.17    360                        services\n      0        436     0.06    228                        smss\n      0       3592     0.19    480 NT AUTHORITY\\SYSTEM    svchost\n      0       4452    14.70    520 NT AUTHORITY\\NETWOR... svchost\n      0      14788     7.17    576 NT AUTHORITY\\SYSTEM    svchost\n      0       1204     0.02    644 NT AUTHORITY\\SYSTEM    svchost\n      0       2712    36.92    796 NT AUTHORITY\\SYSTEM    svchost\n      0        972     0.02    804 NT AUTHORITY\\SYSTEM    svchost\n      0       6168     0.98    812 NT AUTHORITY\\LOCAL ... svchost\n      0       5920     5.58    820 NT AUTHORITY\\LOCAL ... svchost\n      0      17736    14.30    932 NT AUTHORITY\\NETWOR... svchost\n      0       5036     0.31    964 NT AUTHORITY\\LOCAL ... svchost\n      0       1956     0.03   1028 NT AUTHORITY\\SYSTEM    svchost\n      0      11588     5.59   1036 NT AUTHORITY\\SYSTEM    svchost\n      0         80    22.02      4                        System\n      0        796     0.03    344                        wininit\n      0      69260     6.89   1744 MINWINPC\\LocalAdmin    wsmprovhost\n\n\n[10.123.170.206]: PS C:\\>\n[10.123.170.206]: PS C:\\>\n[10.123.170.206]: PS C:\\> $PSEdition\nCore\n[10.123.170.206]: PS C:\\>\n```\n\n```\nPS C:\\arena\\realm\\PSCore\\PowerShell\\src\\powershell\\bin\\Debug\\netcoreapp1.0\\win10-x64\\publish> cd \\\nPS C:\\>\nPS C:\\> gps -IncludeUserName\n\nHandles      WS(K)   CPU(s)     Id UserName               ProcessName\n-------      -----   ------     -- --------               -----------\n      0      40440    99.88   9504 REDMOND\\dongbow        ApplicationFrameHost\n      0       1000     0.23   9812 REDMOND\\dongbow        AppVShNotify\n      0       1740     3.61   2752 NT AUTHORITY\\SYSTEM    armsvc\n      0       3844     4.75   2876 NT AUTHORITY\\SYSTEM    atieclxx\n      0       1508     5.34   1540 NT AUTHORITY\\SYSTEM    atiesrxx\n      0      13812     0.39  21324                        audiodg\n      0      24376     0.53   9092 REDMOND\\dongbow        browser_broker\n      0      92292    77.19   9296 REDMOND\\dongbow        CCC\n      0      99072   274.31  29312 NT AUTHORITY\\SYSTEM    CcmExec\n      0      82828     7.59   4040 REDMOND\\dongbow        chrome\n```\n",
      "created_at": "2016-07-11T23:05:43Z",
      "updated_at": "2016-08-17T06:25:15Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw somehow we don't have that change then, see [here](https://github.com/PowerShell/PowerShell/blob/bb32a9648bd5bf0d15e8f903430d9cebc2331d28/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L786).\n",
      "created_at": "2016-07-12T02:59:22Z",
      "updated_at": "2016-07-12T02:59:22Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I did not have time to finish the Linux implementation yet. It requires reading getting the username of `/proc/<pid>`, but there is no C# API to do so, I need to add some libpsl code, which means tests etc.\n",
      "created_at": "2016-07-12T03:00:22Z",
      "updated_at": "2016-07-12T03:00:22Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw I'll compare that file to the `source-depot` branch and revert if I can, but perhaps it didn't get included in the baseline changeset.\n",
      "created_at": "2016-07-12T03:01:06Z",
      "updated_at": "2016-07-12T03:01:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> somehow we don't have that change then, see [here](https://github.com/PowerShell/PowerShell/blob/bb32a9648bd5bf0d15e8f903430d9cebc2331d28/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L786).\n\n@andschwa Not sure if I understand what you mean. We have the `-IncludeUserName` change in Github. `AddProperties(IncludeUserName.IsPresent, process, this)` adds the user name information to the Process object that is about to be written out.\n",
      "created_at": "2016-07-12T15:45:52Z",
      "updated_at": "2016-07-12T15:46:08Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Ooh I'd read that code wrong. It's two different ways of doing the same thing; I see.\n",
      "created_at": "2016-07-12T17:38:23Z",
      "updated_at": "2016-07-12T17:38:23Z"
    }
  ],
  "created_at": "2016-06-26T18:01:15Z",
  "labels": [
    "OS-Linux",
    "Resolution-Fixed"
  ],
  "number": 1208,
  "state": "closed",
  "title": "On Linux, get-process -IncludeUserName <username> fails",
  "updated_at": "2016-11-10T00:56:27Z"
}