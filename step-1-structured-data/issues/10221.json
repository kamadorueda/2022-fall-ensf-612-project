{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10221",
  "author": "msftrncs",
  "body": "# Summary of the new feature/enhancement\r\n\r\nInclude language keywords, such as 'continue', 'switch', 'foreach', etc... in with the command completions offered by intellisense/tab completion.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nI don't yet know if its possible to restrict the keywords when the insertion point is not the first command in a pipeline, but there is already 1 case in the completion logic that has decided that `foreach` should not have an ampersand `&` (invoke) operator inserted before it (its actually in the completions because its an alias for `ForEach-Object`) because its more likely what the user wanted, but none of the other keywords get this treatment.   Including the keywords would actually eliminate this special case.\r\n\r\nI am sure somewhere there is a complete list of keywords in the code, I'm just not sure if there is anything to use as a tooltip text readily available.\r\n\r\nI may experiment on this while working the other bugs out of the completion code.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Might want to clarify your issue title; it seems the request is for `language keywords` to show in tab-completion results where appropriate, rather than for commands to show (which they already do). \ud83d\ude42 \r\n\r\nBut yep, agreed, not sure why we don't include keywords. ",
      "created_at": "2019-07-24T21:57:42Z",
      "updated_at": "2019-07-24T21:58:03Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32, sometimes I speak better computer than English.  :) ",
      "created_at": "2019-07-24T23:01:36Z",
      "updated_at": "2019-07-24T23:01:36Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> I am sure somewhere there is a complete list of keywords in the code\r\n\r\nYes, [here in the tokenizer](https://github.com/PowerShell/PowerShell/blob/026a8f1f41c46f2e79f5cfcb27d49d4cec5cb034/src/System.Management.Automation/engine/parser/tokenizer.cs#L618). Copying it in:\r\n\r\n```\r\nprivate static readonly string[] s_keywordText = new string[] {\r\n    /*1*/    \"elseif\",                  \"if\",               \"else\",             \"switch\",                     /*1*/\r\n    /*2*/    \"foreach\",                 \"from\",             \"in\",               \"for\",                        /*2*/\r\n    /*3*/    \"while\",                   \"until\",            \"do\",               \"try\",                        /*3*/\r\n    /*4*/    \"catch\",                   \"finally\",          \"trap\",             \"data\",                       /*4*/\r\n    /*5*/    \"return\",                  \"continue\",         \"break\",            \"exit\",                       /*5*/\r\n    /*6*/    \"throw\",                   \"begin\",            \"process\",          \"end\",                        /*6*/\r\n    /*7*/    \"dynamicparam\",            \"function\",         \"filter\",           \"param\",                      /*7*/\r\n    /*8*/    \"class\",                   \"define\",           \"var\",              \"using\",                      /*8*/\r\n    /*9*/    \"workflow\",                \"parallel\",         \"sequence\",         \"inlinescript\",               /*9*/\r\n    /*A*/    \"configuration\",           \"public\",           \"private\",          \"static\",                     /*A*/\r\n    /*B*/    \"interface\",               \"enum\",             \"namespace\",        \"module\",                     /*B*/\r\n    /*C*/    \"type\",                    \"assembly\",         \"command\",          \"hidden\",                     /*C*/\r\n    /*D*/    \"base\",                                                                                          /*D*/\r\n};\r\n```\r\n\r\n> I'm just not sure if there is anything to use as a tooltip text readily available.\r\n\r\nWould that be beneficial? If you autocomplete `notepad.exe` you don't get very useful tooltip information. ",
      "created_at": "2019-07-27T21:20:58Z",
      "updated_at": "2019-07-27T21:20:58Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "> Would that be beneficial? If you autocomplete `notepad.exe` you don't get very useful tooltip information.\r\n\r\nThat's because `notepad.exe` isn't part of PowerShell.  You do on the other hand still get the complete path to `notepad.exe` in the tooltip.  I think something in the tooltip needs to let the user know that this is the keyword, vs the function.  Some functions do not show anything in their tooltip, so if both functions and keywords both showed nothing in the tooltip it might be slightly confusing, however, at least a command with the same name as a keyword requires the `&` and that will show when its selected.\r\n\r\nInterestingly I see the operators are already included in completions, and they have tooltips.\r\n\r\nAny data kept on whether these keywords are available, or better, available in a given context?  I would think that reserved keywords should probably not have completions offered, so that a user doesn't have as much clutter to sort through, and keywords that are not available in the current context should not be offered.   \r\n\r\nI suppose that last part is what has kept keyword completion from being implemented so far.",
      "created_at": "2019-07-27T21:49:03Z",
      "updated_at": "2019-07-27T21:49:03Z"
    }
  ],
  "created_at": "2019-07-24T17:43:05Z",
  "number": 10221,
  "state": "open",
  "title": "Feature Request: include language keywords in command completion results",
  "updated_at": "2019-07-27T21:49:03Z"
}