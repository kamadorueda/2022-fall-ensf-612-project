{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4708",
  "author": "SteveL-MSFT",
  "body": "Everyone agrees that from a style perspective, the intent is to have consistency in the code to make it more readable and maintainable.   Update https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md as needed, but should be enforced by tooling and not by PR comments.\r\n\r\n- [ ] enforcement on the CI side\r\n- [x] enforcement on the developer side (part of Start-PSPester?)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We already have PR #3504 for CI side and request from @lzybkr for developer side (git commit hooks) in the PR.",
      "created_at": "2017-08-31T10:28:49Z",
      "updated_at": "2017-08-31T10:29:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov you can close this once that PR is merged.  Thanks!",
      "created_at": "2017-08-31T19:19:19Z",
      "updated_at": "2017-08-31T19:19:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR s problematic - we can't merge it until we fix all files in the repo.\r\nAlso I believe we should address git commit hooks in another PR - I never write such hooks.\r\n\r\n/cc @lzybkr ",
      "created_at": "2017-08-31T19:53:33Z",
      "updated_at": "2017-08-31T19:53:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 Could you please comment? I think you have more experience on this and have some ideas about how we can gradually roll out the files that are covered by the formatting checks.",
      "created_at": "2017-09-01T00:03:36Z",
      "updated_at": "2017-09-01T00:03:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see GitHub introduce `Checks`. Can we use this?",
      "created_at": "2018-05-09T17:02:58Z",
      "updated_at": "2018-05-09T17:02:58Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I've seen other teams using https://www.codefactor.io/ ",
      "created_at": "2018-05-09T19:30:19Z",
      "updated_at": "2018-05-09T19:30:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Screenshots look ver interesting. Can we try this in the repo? ",
      "created_at": "2018-05-10T03:45:23Z",
      "updated_at": "2018-05-10T03:45:23Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT @daxian-dbw @adityapatwardhan  What do you think?  Can we try codefactor.io? ",
      "created_at": "2018-05-10T18:09:24Z",
      "updated_at": "2018-05-10T18:09:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 I'm open to trying it out.  I'll set it up.",
      "created_at": "2018-05-10T20:25:50Z",
      "updated_at": "2018-05-10T20:25:50Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I am open to trying it as long as it does not block PRs from being merged, at least to begin with.",
      "created_at": "2018-05-10T20:27:22Z",
      "updated_at": "2018-05-10T20:27:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "https://www.codefactor.io/repository/github/powershell/powershell/overview/master",
      "created_at": "2018-05-10T20:35:11Z",
      "updated_at": "2018-05-10T20:35:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks! Looks great.\r\n\r\n> Have your own StyleCop\uf045 rules? No problem, simply add Settings.StyleCop file to the root of this branch.\r\n\r\nWe can configure rules which we want.",
      "created_at": "2018-05-11T03:36:04Z",
      "updated_at": "2018-05-11T03:36:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Overall grade](https://support.codefactor.io/i14-glossary) is C - Satisfactory. \r\nWe could show the status on our main page. \r\nPerhaps we should work now to get into B status.\r\n\r\nI selectively reviewed the results of `CodeFactor`. \r\nMost commonly found `Duplicate Code` and `Complex Method`. Others are rare.\r\nSeems we can easily address most of CodeFactor Issues.",
      "created_at": "2018-05-11T12:49:15Z",
      "updated_at": "2018-05-11T12:49:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Duplication](https://www.codefactor.io/repository/github/powershell/powershell/issues?category=Duplication&groupId=1) rules should be disabled. - it seems completely useless.\r\n\r\n/cc @markekraus ",
      "created_at": "2018-06-05T12:08:42Z",
      "updated_at": "2018-06-05T12:09:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we should disable unneeded rules and _fix_ most of style issues.\r\nMotivation - conservative policy is very good for a closed project, for an open project we have to continuously discuss the style issues that slows code reviews and leads to the perplexity of contributors.\r\n",
      "created_at": "2018-06-05T12:23:23Z",
      "updated_at": "2018-06-05T12:23:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I wouldn't call that rule useless. It shows code reuse where we could refactor to a utility method or something. But refactoring those issues may be high risk.  ",
      "created_at": "2018-06-05T13:08:21Z",
      "updated_at": "2018-06-05T13:08:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Then we have to CodeFactor and live like before. ",
      "created_at": "2018-06-05T14:00:56Z",
      "updated_at": "2018-06-05T14:00:56Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I wasn't saying we shouldn't disable the rule, just that it wasn't completely useless. :)",
      "created_at": "2018-06-05T14:12:11Z",
      "updated_at": "2018-06-05T14:12:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need new policy and roadmap. ",
      "created_at": "2018-06-05T16:34:35Z",
      "updated_at": "2018-06-05T16:34:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I agree it isn't useless, but many of the suggested refactoring to remove duplication is risky.  It would be nice to be able to leave it on as informational if that is an option.",
      "created_at": "2018-06-08T01:08:48Z",
      "updated_at": "2018-06-08T01:08:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> duplication \r\n\r\nI see only 519 issues so it's not intrusive and we can leave this as is.",
      "created_at": "2018-06-08T04:37:43Z",
      "updated_at": "2018-06-08T04:37:57Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT \r\nI think it is a horrible experience with a style checker running on PRs but without a tool that automatically formats the code in the expected way.\r\n\r\nTakes away quite a lot of the joy of fixing things.\r\n\r\n\r\n",
      "created_at": "2018-06-29T00:07:38Z",
      "updated_at": "2018-06-29T00:07:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@powercode We're open to trying other tools if you're aware of any.",
      "created_at": "2018-06-29T03:02:04Z",
      "updated_at": "2018-06-29T03:02:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CodeFactor is only control tool. We could use https://github.com/dotnet/codeformatter but it also requires a lot of effort. Anf it is only formatting tool and it doesn't fix all style issues.",
      "created_at": "2018-06-29T03:31:48Z",
      "updated_at": "2018-06-29T03:32:33Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I just think we should do this the other way around. Start with giving people the tools to format the source, and then start to enforce it on pull requests.\r\n\r\nThis is of course a matter of opinion, but I don't think the gain (if any) in readability and maintainability is worth the hassle.\r\n\r\nI'm working on getting a ReSharper profile setup for the project that has formatting options that are at least close to Code Factor. I know it is a commercial tool, but a lot of C# devs has it. That could east the pain a bit. \r\n\r\nI installed StyleCop locally, but got lots of errors with spelling, and didn't figure out how to make it use the existing spelling dictionary.\r\n\r\nIn summary, it is not so much the tool I object to, as the backward order this is introduced in.\r\nTools first, then checks, not the other way around.\r\n\r\n",
      "created_at": "2018-06-29T12:24:13Z",
      "updated_at": "2018-06-29T12:24:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CodeFormatter doesn't work with PowerShell Core csproj files https://github.com/dotnet/codeformatter/issues/256",
      "created_at": "2018-06-29T13:24:15Z",
      "updated_at": "2018-06-29T13:24:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @daxian-dbw \r\n\r\n> About the style rules, @TravisEz13, @adityapatwardhan and I went through all issues reported from CodeFactor a few weeks back, and we got a list of rules that we think should be turned off. Here is the list:\r\n[1305: SA1305FieldNamesMustNotUseHungarianNotation](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1305.md)\r\n[1502: SA1502ElementMustNotBeOnSingleLine](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1502.md)\r\n[1310: SA1310FieldNamesMustNotContainUnderscore](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1310.md),\r\n[1204: SA1204StaticElementsMustAppearBeforeInstanceElements](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1204.md)\r\n[1009: SA1009ClosingParenthesisMustBeSpacedCorrectly](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1009.md)\r\n[1501:SA1501StatementMustNotBeOnSingleLine](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1501.md)\r\n[1513:SA1513ClosingBraceMustBeFollowedByBlankLine](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1513.md)\r\n[1306:SA1306FieldNamesMustBeginWithLowerCaseLetter](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md)\r\n[1308:SA1308VariableNamesMustNotBePrefixed](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1308.md)\r\n[1013:SA1013ClosingBracesMustBeSpacedCorrectly](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1013.md)\r\n[1500:SA1500BracesForMultiLineStatementsMustNotShareLine](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1500.md)\r\n[1010:SA1010OpeningSquareBracketsMustBeSpacedCorrectly](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md)\r\n[1026:SA1026CodeMustNotContainSpaceAfterNewKeywordInImplicitlyTypedArrayAllocation](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1026.md)\r\n[1008:SA1008OpeningParenthesisMustBeSpacedCorrectly](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1008.md)\r\n[1311:SA1311StaticReadonlyFieldsMustBeginWithUpperCaseLetter](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md)\r\n[1025:SA1025CodeMustNotContainMultipleWhitespaceInARow](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1025.md)\r\n[1012:SA1012OpeningBracesMustBeSpacedCorrectly](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1012.md)\r\n[1215:SA1215InstanceReadonlyElementsMustAppearBeforeInstanceNonReadonlyElements](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1215.md)\r\n[1214:SA1214ReadonlyElementsMustAppearBeforeNonReadonlyElements](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1214.md)\r\n[1210:SA1210UsingDirectivesMustBeOrderedAlphabeticallyByNamespace](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1210.md)\r\n[1609:SA1609PropertyDocumentationMustHaveValue](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1609.md)\r\n\r\nThe rules about \"one parameter per line\" for method definition or invocation is not in this list, but in my opinion, we probably should disable that rule because 1) it doesn't bring much benefit -- as long as the parameters are well aligned, there is no readability issue; 2) there are too many instances in our existing code base that are violating that rule, and fixing all doesn't worth the time.\r\n\r\nThe following document rules make sense for public members, but they are applied to non-public members too, which causes a lot of noise data.\r\n\r\n[1611:SA1611ElementParametersMustBeDocumented](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1611.md)\r\n[1615:SA1615ElementReturnValueMustBeDocumented](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1615.md)\r\n[1606:SA1606ElementDocumentationMustHaveSummaryText](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1606.md)\r\n",
      "created_at": "2018-07-11T04:59:03Z",
      "updated_at": "2018-07-11T04:59:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Current formatting options from Roslyn (from package version 2.8.2)\r\n(Need Microsoft.CodeAnalysis.CSharp.Workspaces.dll and Microsoft.CodeAnalysis.Workspaces.dll)\r\n\r\nAll the rules we need are enabled/disabled?\r\n\r\n```powershell\r\nPS > Add-Type -AssemblyName .\\Microsoft.CodeAnalysis.CSharp.Workspaces.dll\r\nPS > [Microsoft.CodeAnalysis.CSharp.Formatting.CSharpFormattingOptions] | Get-Member -Static -MemberType Properties | Select -ExpandProperty Name | % { \"$_ = $([Microsoft.CodeAnalysis.CSharp.Formatting.CSharpFormattingOptions]::$_.DefaultValue)\" }\r\n\r\nIndentBlock = True\r\nIndentBraces = False\r\nIndentSwitchCaseSection = True\r\nIndentSwitchCaseSectionWhenBlock = True\r\nIndentSwitchSection = True\r\nLabelPositioning = OneLess\r\nNewLineForCatch = True\r\nNewLineForClausesInQuery = True\r\nNewLineForElse = True\r\nNewLineForFinally = True\r\nNewLineForMembersInAnonymousTypes = True\r\nNewLineForMembersInObjectInit = True\r\nNewLinesForBracesInAccessors = True\r\nNewLinesForBracesInAnonymousMethods = True\r\nNewLinesForBracesInAnonymousTypes = True\r\nNewLinesForBracesInControlBlocks = True\r\nNewLinesForBracesInLambdaExpressionBody = True\r\nNewLinesForBracesInMethods = True\r\nNewLinesForBracesInObjectCollectionArrayInitializers = True\r\nNewLinesForBracesInProperties = True\r\nNewLinesForBracesInTypes = True\r\nSpaceAfterCast = False\r\nSpaceAfterColonInBaseTypeDeclaration = True\r\nSpaceAfterComma = True\r\nSpaceAfterControlFlowStatementKeyword = True\r\nSpaceAfterDot = False\r\nSpaceAfterMethodCallName = False\r\nSpaceAfterSemicolonsInForStatement = True\r\nSpaceBeforeColonInBaseTypeDeclaration = True\r\nSpaceBeforeComma = False\r\nSpaceBeforeDot = False\r\nSpaceBeforeOpenSquareBracket = False\r\nSpaceBeforeSemicolonsInForStatement = False\r\nSpaceBetweenEmptyMethodCallParentheses = False\r\nSpaceBetweenEmptyMethodDeclarationParentheses = False\r\nSpaceBetweenEmptySquareBrackets = False\r\nSpacesIgnoreAroundVariableDeclaration = False\r\nSpaceWithinCastParentheses = False\r\nSpaceWithinExpressionParentheses = False\r\nSpaceWithinMethodCallParentheses = False\r\nSpaceWithinMethodDeclarationParenthesis = False\r\nSpaceWithinOtherParentheses = False\r\nSpaceWithinSquareBrackets = False\r\nSpacingAfterMethodDeclarationName = False\r\nSpacingAroundBinaryOperator = Single\r\nWrappingKeepStatementsOnSingleLine = True\r\nWrappingPreserveSingleLine = True\r\n```",
      "created_at": "2018-07-11T10:27:57Z",
      "updated_at": "2018-07-11T10:27:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sample of formatting with codeformatter that I compiled ##7263.\r\nIf it is Ok I'll continue to format remaining projects.",
      "created_at": "2018-07-11T10:29:40Z",
      "updated_at": "2018-07-11T12:31:32Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT is this okay to close now? ",
      "created_at": "2019-05-30T20:38:22Z",
      "updated_at": "2019-05-30T20:38:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Do we have an omnisharp.json in the repo with the mentioned style rules set for VS Code users? Might be a good idea to do so if we haven't.\r\n\r\nAlso, I opened another issue already, but codefactor should definitely come back for those edge cases and misc recommendations.",
      "created_at": "2019-05-30T21:38:33Z",
      "updated_at": "2019-05-30T21:38:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello no, we need to integrate with CI",
      "created_at": "2019-06-06T14:39:13Z",
      "updated_at": "2019-06-06T14:39:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 We have .editorconfig as unified config for all editors.",
      "created_at": "2019-06-06T15:10:42Z",
      "updated_at": "2019-06-06T15:10:42Z"
    }
  ],
  "created_at": "2017-08-30T20:36:44Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Documentation"
  ],
  "number": 4708,
  "state": "open",
  "title": "Need tooling to enforce style guide",
  "updated_at": "2019-06-06T16:01:28Z"
}