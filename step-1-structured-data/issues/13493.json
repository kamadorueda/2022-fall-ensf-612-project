{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13493",
  "author": "ThomasNieto",
  "body": "## Request\r\n\r\nThe PowerShell engine does not expose events for module authors to subscribe when a module load/unload event occurs. This causes module authors to implement workarounds to identify when a module is loaded/unloaded.\r\n\r\nAdd module load/unload events.\r\n\r\n## Background\r\n\r\nI have a module that uses other modules to ship \"providers\" like the `PSProvider` system. PowerShell is able to inspect modules during load to identify if a module contains a `PSProvider` and add it to the internal cache of providers. PowerShell is also able to remove the `PSProvider` from the cache when the module is unloaded. Modules that leverage a provider model outside of the engine have to use workarounds to discover providers inside other modules.\r\n\r\n`PackageManagement` does not import providers when a module is loaded but instead requires the user to call `Import-PackageProvider` to load the provider. If the module containing the provider is removed the provider is not removed and there is no command to remove it.\r\n\r\n`SHiPS` requires the provider to use a specific naming convention for the SHiPS provider to load the script module provider.\r\n\r\n## Alternatives\r\n\r\n### PSModuleInfo.OnRemove\r\n\r\nThis can be used to inject logic into another module unload action but there is no protection against this logic from being wiped out from the module or other user.\r\n\r\n### IModuleAssemblyInitializer/IModuleAssemblyCleanup or Script Module\r\n\r\nThese run in the target module but have to implemented by the other module author.",
  "closed_at": null,
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "There is [PSModuleInfo.OnRemove](https://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/engine/Modules/PSModuleInfo.cs#L1417) .\r\nThe trick with that is allows only for a single handler. So if setting it to your handler, it is a good idea to check if it is already set by something else, save that original handler and call it in the end of your handler.",
      "created_at": "2020-08-21T01:14:57Z",
      "updated_at": "2020-08-21T01:14:57Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov the answer was partially answered with module unload but haven't heard if there is a way to subscribe to module load events. ",
      "created_at": "2020-08-21T13:26:03Z",
      "updated_at": "2020-08-21T13:26:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could look IModuleAssemblyCleanup and IModuleAssemblyInitializer.",
      "created_at": "2020-08-21T15:10:56Z",
      "updated_at": "2020-08-21T15:10:56Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> You could look IModuleAssemblyCleanup and IModuleAssemblyInitializer.\r\n\r\nOnly helps for init/cleanup of your own module, not someone else's.\r\n\r\nAlso as @anmenaga mentioned `OnRemove` is one handler at a time.  That'd be fine if everyone checked for an existing handler before setting it, but realistically no one does that, making the API sort of useless if you value consistency :/\r\n\r\n+1  for a module load/unload event.  There's been quite a few times I've wanted this as well.",
      "created_at": "2020-08-21T16:07:59Z",
      "updated_at": "2020-08-21T16:11:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since it depends on a runspace one reliable way is to use Get-Command as we do for PSReadline detection.",
      "created_at": "2020-08-21T16:12:15Z",
      "updated_at": "2020-08-21T16:12:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The problem isn't determining what commands are available but determining what modules have been loaded after your own.  Even injecting something into `prompt` and analyzing a full `Get-Command` isn't enough because you can import a module mid script.",
      "created_at": "2020-08-21T16:23:34Z",
      "updated_at": "2020-08-21T16:23:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience I say about another scenario. You could open new issue for this although it looks very questionable and you need to make a good description.",
      "created_at": "2020-08-21T16:48:12Z",
      "updated_at": "2020-08-21T16:48:12Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I'm not sure what you mean, I'm talking about the same thing @ThomasNieto is asking for.",
      "created_at": "2020-08-21T16:50:54Z",
      "updated_at": "2020-08-21T16:50:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The question was \"I have the cmdlets update a cache every time a cmdlet or completer is called.\". Answer is \" use Get-Command\" - it is only reliable way and we use this (1) to detect PSReadline, (2) in completion subsystem, (3) there are other places.\r\nAnother question about the events of loading and unloading other modules - a description of scenarios is required where one cannot do without it.\r\n",
      "created_at": "2020-08-21T17:11:01Z",
      "updated_at": "2020-08-21T17:11:01Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov This issue is all about subscribing to module load/unload events in order to perform an action. I may not have been as clear as I wanted but \"I have the cmdlets update a cache every time a cmdlet or completer is called.\" is a workaround to not being able to subscribe to module load/unload events. I have logic in the cmdlet/completer to check which modules have been loaded/unload since the the last time the cache was updated. This wouldn't be necessary if I was able to subscribe to module load/unload events directly.\r\n\r\nI'll update the description to have a better explanation and request to have module load/unload events.",
      "created_at": "2020-08-21T17:22:25Z",
      "updated_at": "2020-08-21T17:23:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'll update the description \r\n\r\nYes, please. We should understand why do you need these callbacks in runspace context.",
      "created_at": "2020-08-21T17:38:44Z",
      "updated_at": "2020-08-21T17:38:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> +1 for a module load/unload event. There's been quite a few times I've wanted this as well.\r\n\r\nYes I've also seen good reasons for wanting this, both in my own work and when others have asked. /cc @TylerLeonhardt.\r\n\r\nI'm surprised we don't already have an issue for this btw",
      "created_at": "2020-08-21T20:18:34Z",
      "updated_at": "2020-08-21T20:18:34Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Yep. I'd love this for .NET Interactive. Having to roll it by hand is _painful_.",
      "created_at": "2020-08-21T20:26:28Z",
      "updated_at": "2020-08-21T20:26:28Z"
    }
  ],
  "created_at": "2020-08-21T00:55:35Z",
  "number": 13493,
  "state": "open",
  "title": "Module Load and Unload Event",
  "updated_at": "2021-01-18T05:20:54Z"
}