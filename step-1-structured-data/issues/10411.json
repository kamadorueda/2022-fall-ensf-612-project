{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10411",
  "author": "cameron-interactive",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nEncountering an issue with Start-Transcript, SQLDataReader and Passing it to a function for processing. This occurs in Powershell 6, started in 5.1, was not present in Windows Powershell 3 (Windows Powershell 4 has issues passing the SqlDataReader object to a function anyway).\r\n\r\nWhen you call a function within a Start-Transcript block, and that function then fills a SqlDataReader object, and then passes it onto another function, it increments the record a number of times, as if calling the read() method 7 or 8 times. This causes a number of issues, firstly, a lot of data is skipped for processing, secondly, you end up trying to read data which isn't available, resulting in an error.\r\n\r\nThis only occurs when Start-Transcript is called before running (and only while the transcript is actually running), and only when passing the SqlDataReader object to another function.\r\n\r\n# Steps to reproduce\r\n\r\nRun the following script. It will output 4 lots of values. The first one will error, the next 3 will not.\r\n\r\nIt attempts to run in the following manner - \r\n\r\nPass 1 (Fail) - SqlDataReader passed to a function within a Start-Transcript block\r\nPass 2 (Success) - SqlDataReader passed to a function\r\nPass 3 (Success) - SqlDataReader processed inline within a Start-Transcript block\r\nPass 4 (Success) - SqlDataReader processed inline\r\n\r\nReplace the $SQLConnectionString string with a real connection string, any SQL database should do (so long as it's SQL 2012+), no data needed in there. Also point the $transcriptPath to a file which can be saved to.\r\n\r\n```powershell\r\n\r\n$actualSql = \"select top 25 cast(ROW_NUMBER() over(order by name) as nvarchar(255)) from sys.objects\"\r\n$SQLConnectionString = \"<SQL Connection String Here>\"\r\n$transcriptPath = \"<Transcript File Path Here>\"\r\nfunction get-Row{\r\n    param(\r\n        [System.Data.SqlClient.SqlDataReader] $TempReader\r\n    )\r\n\r\n    $row = @{}\r\n    $row[\"FirstColumn\"] = $TempReader.GetSqlValue(0)\r\n\r\n    return $row\r\n}\r\n\r\nfunction test-SQL{\r\n    param(\r\n        [switch]$NoFunctionCall\r\n    )\r\n    $sqlConn = New-Object System.Data.SqlClient.SqlConnection\r\n    $sqlConn.ConnectionString = $SQLConnectionString\r\n    $sqlConn.Open()\r\n\r\n    $sourcecmd = New-Object System.Data.SqlClient.SqlCommand\r\n    $sourcecmd.Connection = $sqlConn\r\n    $sourcecmd.CommandText = $actualSql\r\n    $sourcecmd.CommandTimeout = 600\r\n    [System.Data.SqlClient.SqlDataReader] $reader = $sourcecmd.ExecuteReader();\r\n\r\n    try {\r\n        if ($reader.HasRows -eq $true) {\r\n            while ($reader.Read()) {\r\n                if($NoFunctionCall){\r\n                    write-output $reader.GetString(0)\r\n                    $processed = @{}\r\n                    $processed[\"FirstColumn\"] = $reader.GetSqlValue(0)\r\n                    write-output $reader.GetString(0)\r\n                    Write-Output $processed.Value\r\n                }\r\n                else{\r\n                    write-output $reader.GetString(0)\r\n                    $processed = get-Row $reader\r\n                    write-output $reader.GetString(0)\r\n                    Write-Output $processed.Value\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch{\r\n        Write-Error $_.Exception | format-list -force\r\n    }\r\n}\r\n\r\nWrite-Output \"Running With Transcript and Function\"\r\nStart-Transcript -Path $transcriptPath\r\ntest-SQL\r\nStop-Transcript\r\n\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \"Running Without Transcript With Function\"\r\ntest-SQL\r\n\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \"Running With Transcript Without Function\"\r\nStart-Transcript -Path $transcriptPath\r\ntest-SQL -NoFunctionCall\r\nStop-Transcript\r\n\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \".\"\r\nWrite-Output \"Running Without Transcript And Function\"\r\ntest-SQL -NoFunctionCall\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe expected output from this command would be as follows\r\n\r\n```none\r\nRunning With Transcript and Function\r\nTranscript started, output file is c:\\Temp\\PSTestLog.txt\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\nTranscript stopped, output file is C:\\Temp\\PSTestLog.txt\r\n.\r\n.\r\n.\r\nRunning Without Transcript With Function\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\n.\r\n.\r\n.\r\nRunning With Transcript Without Function\r\nTranscript started, output file is c:\\Temp\\PSTestLog.txt\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\nTranscript stopped, output file is C:\\Temp\\PSTestLog.txt\r\n.\r\n.\r\n.\r\nRunning Without Transcript And Function\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\n```\r\n\r\n# Actual behavior\r\n\r\nWe get the following error and odd iteration of data in the first test as shown in the output here.\r\n\r\n```none\r\nRunning With Transcript and Function\r\nTranscript started, output file is c:\\Temp\\PSTestLog.txt\r\n1\r\n8\r\n9\r\n16\r\n17\r\n24\r\n25\r\ntest-SQL : System.Management.Automation.MethodInvocationException: Exception calling \"GetSqlValue\" with \"1\"\r\nargument(s): \"Invalid attempt to read when no data is present.\" ---> System.InvalidOperationException: Invalid attempt\r\nto read when no data is present.\r\n   at System.Data.SqlClient.SqlDataReader.CheckDataIsReady(Int32 columnIndex, Boolean allowPartiallyReadColumn,\r\nBoolean permitAsync, String methodName)\r\n   at System.Data.SqlClient.SqlDataReader.TryReadColumn(Int32 i, Boolean setTimeout, Boolean allowPartiallyReadColumn)\r\n   at System.Data.SqlClient.SqlDataReader.GetSqlValueInternal(Int32 i)\r\n   at System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32 i)\r\n   at CallSite.Target(Closure , CallSite , SqlDataReader , Int32 )\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception\r\nexception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nAt C:\\temp\\CommVault-Reporting\\testReader.ps1:55 char:1\r\n+ test-SQL\r\n+ ~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test-SQL\r\n\r\nTranscript stopped, output file is C:\\Temp\\PSTestLog.txt\r\n.\r\n.\r\n.\r\nRuning Without Transcript With Function\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\n.\r\n.\r\n.\r\nRunning With Transcript Without Function\r\nTranscript started, output file is c:\\Temp\\PSTestLog.txt\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\nTranscript stopped, output file is C:\\Temp\\PSTestLog.txt\r\n.\r\n.\r\n.\r\nRuning Without Transcript And Function\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n7\r\n7\r\n8\r\n8\r\n9\r\n9\r\n10\r\n10\r\n11\r\n11\r\n12\r\n12\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n16\r\n16\r\n17\r\n17\r\n18\r\n18\r\n19\r\n19\r\n20\r\n20\r\n21\r\n21\r\n22\r\n22\r\n23\r\n23\r\n24\r\n24\r\n25\r\n25\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.1004\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.1004\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess the transcription is applied to parameters too. Perhaps @SeeminglyScience or @mklement0 could make more simple repo to help discover a root of the issue.",
      "created_at": "2020-01-31T12:49:01Z",
      "updated_at": "2020-01-31T12:49:01Z"
    }
  ],
  "created_at": "2019-08-22T07:02:29Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 10411,
  "state": "open",
  "title": "Start-Transcript causes skipped record when passing SqlDataReader object to another function",
  "updated_at": "2020-01-31T12:49:10Z"
}