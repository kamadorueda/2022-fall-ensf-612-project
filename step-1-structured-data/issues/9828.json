{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9828",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe code to add `.CPL` to `PATHEXT` env var was inadvertently removed as part of https://github.com/PowerShell/PowerShell/pull/4942, added it back to be same as Windows PowerShell.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/9797\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-08-17T17:45:14Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 1 hour",
      "created_at": "2019-06-05T16:35:42Z",
      "updated_at": "2019-06-05T16:35:42Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 1 hour ago",
      "created_at": "2019-06-05T17:36:18Z",
      "updated_at": "2019-06-05T17:36:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Are you ok with the change?",
      "created_at": "2019-06-13T19:27:02Z",
      "updated_at": "2019-06-13T19:27:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT No, I don't get full understanding. I don't like that we create a (\"unneeded\" I think) side effect and delay runspace creation. I'd prefer to move the fix to `private static void InitPathExtCache(string pathExt)`.\r\nI think we could merge and then I could make new PR to demo my thoughts. Or maybe @daxian-dbw can find words I understand :-)",
      "created_at": "2019-06-14T03:28:20Z",
      "updated_at": "2019-06-14T03:28:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov ok, perf is a valid concern.  Moving it to `InitPathExtCache()` may be better.  Let me think about this.",
      "created_at": "2019-06-14T05:22:13Z",
      "updated_at": "2019-06-14T05:22:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I looked more and now I wonder why do we change the environment variable at all? An user can change this variable himself if he wants. If PowerShell need this it can do this internally only.\r\nCan we add new extension here like \".ps1\":\r\n\r\nWe can do it internally similar as `.ps1`, but, don't you think it becomes a magic to the user? A user may wonder \r\n> OK, pwsh is able to find `firewall.CPL` when I type `firewall`, but `.CPL` is not in `env:PATHEXT`, so what other secret extensions pwsh uses for command discovery?\r\n\r\nFor `.ps1`, it's powershell specific, so no one will ask question when pwsh consider `.ps1` files as commands.",
      "created_at": "2019-06-14T15:44:23Z",
      "updated_at": "2019-06-14T15:44:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We can do it internally similar as .ps1, but, don't you think it becomes a magic to the user? A user may wonder\r\n\r\nI would rather be surprised that the environment variable changes its value _even if I don\u2019t want it_. For now, it is only inside PowerShell that this is only its behavior and this can be documented. Otherwise, it may cause side effects on subprocesses - if the user wants this, then he will most likely prefer to do so by explicitly changing this variable.\r\nUpdated: Note that PowerShel itself doesn't use OS capability and uses the variable in command discovery directly.",
      "created_at": "2019-06-14T16:24:37Z",
      "updated_at": "2019-06-14T17:52:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Note that PowerShel itself doesn't use the variable in command discovery.\r\n\r\nPowerShell does use the `pathext` environment variable in command discovery. The property [`CommandDiscovery.PathExtensions`](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandDiscovery.cs#L1403) is used in `ComamndSearcher.cs` and `MshCmdlet.cs` for discovering commands.",
      "created_at": "2019-06-14T17:37:55Z",
      "updated_at": "2019-06-14T17:37:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry :- ) (weekend started), I wanted to say that PowerShell uses extensions from the variable directly and doesn't use OS capability.",
      "created_at": "2019-06-14T17:51:54Z",
      "updated_at": "2019-06-14T17:51:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'm good with this as long as it doesn't affect perf, especially since we've done it in Windows PowerShell forever. ",
      "created_at": "2019-08-14T20:22:11Z",
      "updated_at": "2019-08-14T20:22:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this.  We agree that we should retain the Windows PowerShell quirk as a compatibility feature as PS7 is positioned as a viable replacement for WinPS.",
      "created_at": "2019-08-14T22:24:43Z",
      "updated_at": "2019-08-14T22:24:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I still think that it is a mirror of PSModulePath history and we could resolve this in the same way.",
      "created_at": "2019-08-15T14:03:03Z",
      "updated_at": "2019-08-15T14:03:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Looking at `InitPathExtCache()`, it would be the equivalent of how `.ps1` is handled.  I understand your concern about manipulating an env var (although it's only an env var used by the PowerShell process).  I think we have to continue being consistent on maintaining compatibility with Windows PowerShell here unless there is a clear benefit to deviate.",
      "created_at": "2019-08-15T22:03:20Z",
      "updated_at": "2019-08-15T22:03:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks for clarify! Is the PR ready to merge?",
      "created_at": "2019-08-16T03:19:08Z",
      "updated_at": "2019-08-16T03:19:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, ready to merge. Thanks!",
      "created_at": "2019-08-17T00:32:58Z",
      "updated_at": "2019-08-17T00:32:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:52:18Z",
      "updated_at": "2019-09-19T17:52:18Z"
    }
  ],
  "created_at": "2019-06-05T14:23:27Z",
  "number": 9828,
  "state": "closed",
  "title": ".CPL should be added to PATHEXT",
  "updated_at": "2020-03-10T21:02:17Z"
}