{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10499",
  "author": "pearsonsjp",
  "body": "According to the documentation, Foreach -Parallel passes variables by _reference_ with $using: while the rest of PowerShell passes variables by _value_.\r\nThis is a dangerous feature, having the exact same syntax for such different mechanics can cause unintended effects, and could even slip by experienced developers.\r\n\r\nIf these values are to pass by reference, then I suggest the syntax be changed to $ref:\r\nThat will force people to do it with intention, and know exactly what they're looking at at all times. This would be similar to how it is done in C#.",
  "closed_at": "2019-10-23T22:56:53Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is a feature that was brought in the early days of PowerShell to be able to pass to Jobs and remote commands as listed and is documented in https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_remote_variables?view=powershell-6#using-local-variables and is required for the Foreach -Parallel to function at all.\r\n\r\nI'm not sure I can agree with you that it's either `dangerous` or would slip past `experienced developers` plus PowerShell isn't C# so those coming from C# _may_ find they get tripped up by this but those that are experienced PowerShell Developers will know this and have used it excessively in the past",
      "created_at": "2019-09-08T18:08:13Z",
      "updated_at": "2019-09-08T18:09:11Z"
    },
    {
      "author": "pearsonsjp",
      "author_association": "NONE",
      "body": "I was referring to Foreach-Object (Title updated) which nobody has used excessively in the past, because it is a new feature. It does not behave the same as previous iterations of $using because in the past it has always passed by _value_ not by _reference_\r\nThis is a fundamental change in how it works.",
      "created_at": "2019-09-08T18:26:44Z",
      "updated_at": "2019-09-08T18:26:44Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@pearsonsjp \r\n> while the rest of PowerShell passes variables by value.\r\n\r\nThis is not actually correct. In fact, PowerShell *always* passes by reference both with reference types and boxed value types.\r\n\r\nWith regards to using `$using:` to pass references - yes you can get into trouble but the performance \r\n cost of the alternative is high. In PowerShell WorkFlow, which supported `foreach -parallel`, we marshalled objects across runspaces. It was abysmally slow. To get any kind of acceptable performance, marshalling had to be turned off.",
      "created_at": "2019-09-09T22:28:07Z",
      "updated_at": "2019-09-09T22:28:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin for information.",
      "created_at": "2019-09-10T03:57:26Z",
      "updated_at": "2019-09-10T03:57:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Just to be clear, it is the `ForEach-Object -Parallel` parameter set that is new and the behavior of the existing `ForEach-Object` parameter sets has not changed.  This new parameter set implements parallelism and really cannot be expected to work the same as the existing serial processing. \r\n\r\nMuch of these concerns have already been debated in the RFC for this feature (https://github.com/PowerShell/PowerShell-RFC/pull/194).\r\n\r\nIt was felt that adding this new `-Parallel` parameter set was the best way to provide parallelism at the cmdlet level.  It can be dangerous if used incorrectly.  But then there are a lot of ways to hurt yourself with PowerShell.  Rather than diluting the feature I feel it is better make users aware so that they can use it safely and effectively.\r\n\r\nOfficial documentation is coming, but in the mean time I have written a blog to describe and clarify this new feature:\r\nhttps://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/\">PowerShell ForEach-Object Parallel Feature | PowerShell</a></strong></div><div>PowerShell ForEach-Object Parallel Feature\nPowerShell 7.0 Preview 3 is now available with a new ForEach-Object Parallel Experimental feature. This feature is a great new tool for parallelizing work, but like any tool, it has its uses and drawbacks.\nThis article describes this new feature,</div></blockquote>",
      "created_at": "2019-09-10T15:24:57Z",
      "updated_at": "2019-09-10T15:24:59Z"
    },
    {
      "author": "pearsonsjp",
      "author_association": "NONE",
      "body": "This blog is actually where I got my information:\r\n\r\n\" But there is a big difference when using the $using: keyword in ForEach-Object -Parallel. And that is for remoting, the variable being passed is a copy sent over the remoting connection. But with ForEach-Object -Parallel, the actual object reference is being passed from one script to another, violating normal isolation restrictions. So it is possible to have a non thread-safe variable used in two scripts running on different threads, which can lead to unpredictable behavior.\" <=- That is passing by value, not reference.\r\n\r\nThis is why I made the suggestion to use $ref: in this feature rather than $using.\r\n\r\nI agree that there are a lot of ways to hurt yourself with PowerShell and that education is good; this just seemed like asking for disaster. But it sounds like this has already been discussed at length.",
      "created_at": "2019-09-10T17:49:23Z",
      "updated_at": "2019-09-10T17:49:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin I don't know if I can clarify this better than @pearsonsjp already has, but it seems like you might be misunderstanding the issue?\r\n\r\nIn `Invoke-Command`, the `$using:` variables are values copied to the remote machine. No data is exchanged between individual target machines.\r\n\r\nIn the new `ForEach-Object -Parallel`, `$using:` is (as you point out in the article) not thread-safe, as the actual reference to the data can and is shared between threads.\r\n\r\nI think what @pearsonsjp is getting at is that existing expectations of how `$using:` behaves in `Invoke-Command` will almost certainly carry over to `ForEach-Object -Parallel`, creating confusion. Their proposed solution is to distinguish the difference in syntax.\r\n\r\nI agree that if the behaviour remains as it currently stands, we should probably attempt to distance the similarity from `Invoke-Command` so as to conform to existing expectations of how `$using:` variables behave. I think the proposed `$ref:variable` syntax are a reasonable compromise, as it both communicates \"this is kinda-similar to `$using:variable`\" but _also_ \"this is fundamentally different from how `$using:variable` operates\" clearly and succinctly.\r\n\r\n@Jaykul is often one to say we should attempt to engineer the language towards creating a \"pit of success\" (rather than \"pitfalls\" to be anxiously skirted around). I think this is one of those cases.",
      "created_at": "2019-09-10T18:03:28Z",
      "updated_at": "2019-09-10T18:03:28Z"
    },
    {
      "author": "pearsonsjp",
      "author_association": "NONE",
      "body": "Yes! Very much this.\r\nThank you vexx for putting my thoughts into words so eloquently.",
      "created_at": "2019-09-10T18:24:52Z",
      "updated_at": "2019-09-10T18:24:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Oh ok, I get it now.  Yes I agree that having a `$ref` keyword instead of `$using` is a very reasonable request, and would make the issues of passing by reference more apparent.",
      "created_at": "2019-09-10T19:30:35Z",
      "updated_at": "2019-09-10T19:30:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this.\r\n\r\nPSWorkFlow had already gone through this discussion where the semantics were different depending on whether it was in-proc or out-of-proc but the decision was to use `$using:` everywhere for consistency and not having to learn specific syntax based on situation even if the semantics were different.  Introducing `$ref:` would be unique here making it more difficult to discover.\r\n\r\n`$using:` means use this variable from caller space into new execution context.  Expectation is that documentation for specific cmdlets supporting `$using:` clarify the semantics.  So the PS-Committee decision is to stay with `$using:`.",
      "created_at": "2019-10-23T22:56:52Z",
      "updated_at": "2019-10-23T22:56:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. I can't say I think the comparison to workflow is particularly relevant. We're talking very distinct cmdlets and a specialised parameter set here (ForEach-Object doesn't have a $using: in its normal parameter sets, for example).\r\n\r\nPersonally I think it valuable to make a clear distinction in syntax, if only to be very clear about the potential pitfalls. If the PS team prefer to handle that burden in documentation, I suppose that's a viable option, though I feel it likely to increase misunderstandings.\r\n\r\nIf we're worried about discoverability... Well, given its constrained usage, would't it be fairly easy to just document it in the cmdlets' help documentation, and then perhaps an about topic that references $using for comparison's sake?\r\n\r\nThat said... Yeah, I guess in some ways it's \"easier\" to use the same naming system. I don't think it's a great way to go, though, since the features do behave significantly differently.\r\n\r\nJust my 2 cents! :sparkling_heart: ",
      "created_at": "2019-10-23T23:46:36Z",
      "updated_at": "2019-10-23T23:46:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The PSWorkFlow mention is that this whole discussion has already happened before within the team when it was developing PSWorkFlow.  Although PowerShellCore/7 doesn't include PSWorkFlow, some existing PSWorkFlow users may recall `$using:` there and had to keep the semantics in mind depending on how they used PSWorkFlow.  So that was a precedent already set.  I think they key thing is that `$using:` was never meant to mean a copy, it was literally just \"using this variable from caller context into a new context\".  Introducing a new prefix adds more confusion (in our opinion) and makes it less discoverable as `$using:` is a known concept.",
      "created_at": "2019-10-24T00:18:52Z",
      "updated_at": "2019-10-24T00:18:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye. And while I understand and accept that this is probably better for folks who already have used $using: variables extensively, I can't help but think it's yet another thing where users have to memorise that now we have two very clearly distinct types of $using:, rather than being able to tell the two kinds at a glance while skimming through code. \ud83d\ude42 \r\n\r\nI guess I feel like this is a good opportunity to make a clean break from the old behaviour to clarify the purpose of the variable usage, and would help new users / those not as familiar with $using: from the PSWorkflow days to more easily know the difference.\r\n\r\nWith $using: sort of pulling double duty as it were, it's much easier to draw the wrong conclusion from reading code. Much as I love documentation, I am painfully aware that there will always be a significant portion of the userbase that doesn't read the docs extensively. I'm constantly pointing people in the community to bits of the documentation who've been around for several years, and never saw or bothered to read more than one or two `about_*` help topics, if that. For those folks, the fact that $using: can behave quite unexpectedly in Start-ThreadJob or ForEach-Object -Parallel compared to, say `Invoke-Command`, which a great many users are familiar with.\r\n\r\nThe familiarity of `$using:` could easily be a double-edged sword for us here, I think. But I've said my piece; perhaps I'm worrying over nothing. \ud83d\ude01 ",
      "created_at": "2019-10-24T00:29:46Z",
      "updated_at": "2019-10-24T00:30:12Z"
    },
    {
      "author": "pearsonsjp",
      "author_association": "NONE",
      "body": "If you were worrying about nothing, then it wouldn't be an established\npractice to separate the two in some languages. Most notably as I\nreferenced originally, another language developed by the same company\nutilizes this separation in C#. (Yes, I am all tok familiar with the chasms\nof separation between orgs inside MS)\nThey did that because passing variables by reference is a known danger,\nthey created the language in such a way that you have to explicitly state\nthat you want to pass by reference.\n\nI don't think discoverability is an issue here. If a user wants to use\n$using and it doesn't work, they're going to look for answers. Likewise if\na user doesn't understand the implications and uses it as-is, expecting a\nparticular behavior that they are used to...bad things can happen.\n\nMayne I'm beating a dead horse, but I feel like we are trading safety for\nconvenience. We should strive to be proactive in creating a strong,\nreliable product, even when that reliability causes a very minor\ninconvenience.\n\nOn Wed, Oct 23, 2019, 5:30 PM vexx32 <notifications@github.com> wrote:\n\n> Aye. And while I understand and accept that this is probably better for\n> folks who already have used $using: variables extensively, I can't help but\n> think it's yet another thing where users have to memorise that now we have\n> two very clearly distinct types of $using: \ud83d\ude42\n>\n> I guess I feel like this is a good opportunity to make a clean break from\n> the old behaviour to clarify the purpose of the variable usage, and would\n> help new users / those not as familiar with $using: from the PSWorkflow\n> days to more easily know the difference.\n>\n> With $using: sort of pulling double duty as it were, it's much easier to\n> draw the wrong conclusion from reading code. Much as I love documentation,\n> I am painfully aware that there will always be a significant portion of the\n> userbase that doesn't read the docs extensively. I'm constantly pointing\n> people in the community to bits of the documentation who've been around for\n> several years, and never saw or bothered to read more than one or two\n> about_* help topics, if that. For those folks, the fact that $using: can\n> behave quite unexpectedly in Start-ThreadJob or ForEach-Object -Parallel\n> compared to, say Invoke-Command, which a great many users are familiar\n> with.\n>\n> The familiarity of $using: could easily be a double-edged sword for us\n> here, I think. But I've said my piece; perhaps I'm worrying over nothing.\n> \ud83d\ude01\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/10499?email_source=notifications&email_token=ADR57JUDJXC73E6H6DHCBFTQQDUC5A5CNFSM4IUT77Y2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECDJI7A#issuecomment-545690748>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ADR57JVRXQ7OPOE37BYOAOLQQDUC5ANCNFSM4IUT77YQ>\n> .\n>\n",
      "created_at": "2019-10-24T00:41:23Z",
      "updated_at": "2019-10-24T00:41:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The conclusion should be documented if not done yet.",
      "created_at": "2019-10-24T04:30:16Z",
      "updated_at": "2019-10-24T04:30:16Z"
    }
  ],
  "created_at": "2019-09-08T16:34:35Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed",
    "WG-Cmdlets-Core"
  ],
  "number": 10499,
  "state": "closed",
  "title": "Address Dangerous $using: in Foreach-Object -Parallel",
  "updated_at": "2019-10-24T04:30:16Z"
}