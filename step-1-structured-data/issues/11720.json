{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11720",
  "author": "zchristoffer",
  "body": "\r\n# Steps to reproduce\r\n\r\n```\r\nPS /home/user> '11111x22222y33333'.Split('xy')\r\n11111x22222y33333\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\nPS C:\\Users\\user> '11111x22222y33333'.Split('xy')\r\n11111\r\n22222\r\n33333\r\n```\r\n\r\n# Actual behavior\r\n\r\nSame issue on both pwsh 6.2.4 and 7.0.0-rc2\r\nIt does work well on Powershell 5.1\r\n\r\n# Workaround\r\n```\r\nPS /home/user>  '11111x22222y33333' -Split '[xy]'\r\n11111\r\n22222\r\n33333\r\n```\r\n\r\n# Environment data\r\n```\r\nPS /home/user> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Linux 4.15.0-76-generic #86-Ubuntu SMP Fri Jan 17 17:24:28 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-30T06:55:53Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "```\r\nPS /Users/joelfrancis> \"\".Split\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstring[] Split(char separator, System.StringSplitOptions options)\r\nstring[] Split(char separator, int count, System.StringSplitOptions options)\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string separator, System.StringSplitOptions options)\r\nstring[] Split(string separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n```\r\n\r\nLooking at the overload definitions above, there is an overload for `string[]` as the separator, which will be preferred over the `char[]` overloads. The string overloads treat the input string as a single unit, whereas the char overloads would split on each character as you expect. \r\n\r\nYou can also force the correct overload with `$string.Split([char[]]'xy')` or `$string.Split('xy'.ToCharArray())`",
      "created_at": "2020-01-29T15:18:45Z",
      "updated_at": "2020-01-29T15:18:45Z"
    },
    {
      "author": "zchristoffer",
      "author_association": "NONE",
      "body": "Ok. I learned something new. But are you saying this change from 5.1 is expected? Or this is a bug?\r\nOn 5.1 the overload def looks like this:\r\n```\r\nPS C:\\Users\\user> \"\".Split\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n```",
      "created_at": "2020-01-29T15:40:32Z",
      "updated_at": "2020-01-29T15:40:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That I'm less sure of. There definitely are different overload definitions available in .NET Core now, but I'm not really sure which the method binder would be preferring over another, or for what reason...\r\n\r\nLooking at the documentation for the method, I'd guess that this overload is being chosen instead:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.string.split?view=netcore-3.1#System_String_Split_System_String_System_StringSplitOptions_\r\n\r\nThis is a new overload since the WinPS days, so I guess you could say it's somewhat by design, but ultimately I think the change in behaviour is not entirely intentional from the PS team. It's moreso just that the method binder is choosing the best available method that matches the arguments at runtime, and in recent versions of .NET Core, there is a more appropriate method overload available (one using string, rather than char[], so it's a closer match).\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.split\">String.Split Method (System)</a></strong></div><div><p sourcefile=\"api/System.String.Split.yml\" sourcestartlinenumber=\"1\" jsonPath=\"/summary\">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</p>\r\n</div></blockquote>",
      "created_at": "2020-01-29T15:59:36Z",
      "updated_at": "2020-01-29T15:59:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There used to be an issue where @lzybkr provided a helpful explanation, but it appears to be gone; the gist of it was:\r\n\r\n**A new overload added to a .NET method may cause the PowerShell engine to select it in situations where it previously selected a _different_ overload, due to the new overload now being a _better_ fit**, which is what happened here:\r\n\r\nDuring overload resolution, the engine _can_ map a `[string]` input to a `[char[]]` method parameter, but if a `[string]` parameter is (now) also present, it is chosen first.\r\n\r\n**This is an _unavoidable_ consequence of PowerShell being a _late-bound_ language, and it is why you should generally prefer PowerShell-native solutions to .NET method calls** (`-split` vs. `.Split()`, for instance).\r\n\r\nThe - cumbersome and possibly non-obvious - **alternative is to match the method signature _precisely_, using _casts_**, which is the only way to guarantee longterm stability:\r\n\r\n```powershell\r\n# OK even in PS Core, due to exact type match\r\n'11111x22222y33333'.Split([char[]] 'xy')\r\n```",
      "created_at": "2020-01-29T17:22:27Z",
      "updated_at": "2020-10-01T15:39:46Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\nPlease Reopen!  This is not resolved yet.\r\n\r\nActual code use for repo:\r\n\r\n```\r\nforeach ($item in \"1x2y3\".Split(\"{'x', 'y'}\"))\r\n{ Write-Host($item); };\r\n```\r\n\r\nIn Windows PowerShell, the following works as expected:\r\n\r\n```\r\nPS C:\\Users\\max_t> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS C:\\Users\\max_t> foreach ($item in \"1x2y3\".Split(\"{'x', 'y'}\"))\r\n>> { Write-Host($item); };\r\n1\r\n2\r\n3\r\nPS C:\\Users\\max_t>\r\n```\r\n\r\nIn PowerShell 7.0.3, is not providing the correct default:\r\n\r\n```\r\nPS C:\\Users\\max_t> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Users\\max_t>\r\nPS C:\\Users\\max_t> foreach ($item in \"1x2y3\".Split(\"{'x', 'y'}\"))\r\n>> { Write-Host($item); };\r\n1x2y3\r\nPS C:\\Users\\max_t>\r\n```\r\n\r\nIn PowerShell Preview 7.1.0 rc.1, is not providing the correct results:\r\n\r\n```\r\nPS C:\\Users\\max_t> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-rc.1\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Users\\max_t>\r\nPS C:\\Users\\max_t> foreach ($item in \"1x2y3\".Split(\"{'x', 'y'}\"))\r\n>> { Write-Host($item); };\r\n1x2y3\r\nPS C:\\Users\\max_t>\r\n```\r\n",
      "created_at": "2020-10-04T13:49:24Z",
      "updated_at": "2020-10-04T13:49:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "See #13726. This was not a regression in PowerShell, it's the result of an enhancement in .NET.\r\n\r\nAs is mentioned in that issue, if you need to force a certain overload, you can use a type cast.",
      "created_at": "2020-10-04T18:28:47Z",
      "updated_at": "2020-10-04T18:28:47Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@vexx32 \r\n\r\nThanks! I just wanted to make sure. \r\n\r\n",
      "created_at": "2020-10-04T18:49:57Z",
      "updated_at": "2020-10-04T18:49:57Z"
    }
  ],
  "created_at": "2020-01-29T15:10:08Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11720,
  "state": "closed",
  "title": "String method Split - bug with multiple split characters",
  "updated_at": "2020-10-04T18:49:57Z"
}