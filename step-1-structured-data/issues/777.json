{
  "_url": "https://github.com/PowerShell/PowerShell/issues/777",
  "author": "JumpingYang001",
  "body": "Run \"New-Alias -Name \"ABCD\" -Value \"foo\" -Option \"Constant\" -Force:$true\" first.\nthen run below command:\ntry{New-Alias -Name \"ABCD\" -Value \"foo\" -Force:$true}catch{write-host \"Error:\"$_.FullyQualifiedErrorId}\n\nExpect:\n\n> Error:AliasNotWritable,Microsoft.PowerShell.Commands.NewAliasCommand\n\nActual:\n\n> New-Alias : Alias is not writeable because alias ABCD is read-only or constant and cannot be written to.\n> At line:1 char:5\n> - try{New-Alias -Name \"ABCD\" -Value \"foo\" -Force:$true}catch{write-host ...\n> -     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n>   - CategoryInfo          : WriteError: (ABCD:String) [New-Alias], SessionStateUnauthorizedAccessException\n>   - FullyQualifiedErrorId : AliasNotWritable,Microsoft.PowerShell.Commands.NewAliasCommand\n",
  "closed_at": "2016-04-12T03:37:17Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Boy, that's odd. Does a PowerShell `catch` not catch `SessionStateUnauthorizedAccessException` @lzybkr?\n",
      "created_at": "2016-04-08T04:04:25Z",
      "updated_at": "2016-04-08T04:04:25Z"
    },
    {
      "author": "JumpingYang001",
      "author_association": "CONTRIBUTOR",
      "body": "SessionStateException cannot catch, too.\nset-alias abcd01 efgh01\nExport-Alias  test1 abcd*\ntry{Import-Alias test1}catch{write-host \"Error:\"$_.FullyQualifiedErrorId}\n",
      "created_at": "2016-04-08T08:32:06Z",
      "updated_at": "2016-04-08T08:51:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I can't catch `ObjectNotFound`...\n\n``` powershell\ntry {\n    $moreCommand = (Get-Command -CommandType Application blah).Definition | Select-Object -First 1\n} catch {\n}\n```\n\n``` powershell\nGet-Command : The term 'blah' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or \nif a path was included, verify that the path is correct and try again.\nAt /Users/andrew/src/PowerShell/test.ps1:2 char:21\n+     $moreCommand = (Get-Command -CommandType Application blah).Defini ...\n+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (blah:String) [Get-Command], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand\n```\n",
      "created_at": "2016-04-09T04:16:40Z",
      "updated_at": "2016-04-09T04:16:40Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors PowerShell exception catching seems somehow broken. How can we debug this?\n",
      "created_at": "2016-04-09T04:17:02Z",
      "updated_at": "2016-04-09T04:17:02Z"
    },
    {
      "author": "JumpingYang001",
      "author_association": "CONTRIBUTOR",
      "body": "try{Get-Variable -Name nonexistingVariableName}catch{write-host \"Error:\"$_.FullyQualifiedErrorId}\nalso have this issue.\n",
      "created_at": "2016-04-11T06:22:38Z",
      "updated_at": "2016-04-11T06:22:38Z"
    },
    {
      "author": "TingLiu6",
      "author_association": "CONTRIBUTOR",
      "body": "Set-PSBreakpoint: can't catch exception below,\n1. when missing mandatory parameter -line\n    ```\n   try {\n            powershell.exe -noninteractive -command 'sbp -column 1' -script $scriptFileName\n        }\n        catch {\n            Write-Host $_.FullyQualifiedErrorId \n        }\n\n```\n\n2. when missing mandatory parameter -script\n```\n\n```\n  try {\n        powershell.exe -noninteractive -command 'sbp -line 1'        \n    }\n    catch \n    {\n       Write-Host \"ErrorId: \"$_.FullyQualifiedErrorId \n    }\n```\n\n```\n\n3.when Line number less than 1\n```\n\n```\n   try {\n        set-psbreakpoint -line -1 -script $scriptFileName       \n    }\n    catch \n    {\n       Write-Host \"ErrorId: \"$_.FullyQualifiedErrorId \n    }\n```\n\n```\n```\n",
      "created_at": "2016-04-11T07:51:55Z",
      "updated_at": "2016-04-11T07:51:55Z"
    },
    {
      "author": "JumpingYang001",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa @vors I use vscode to debug PSL, looks like it works to catch exception as below:\n![debugpowershellwithvscode](https://cloud.githubusercontent.com/assets/16585827/14422319/cd7c5692-0008-11e6-8084-941e144f794b.PNG)\n",
      "created_at": "2016-04-11T09:14:19Z",
      "updated_at": "2016-04-11T09:14:19Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Error handling is a bit weird, but not all errors result in catchable exceptions without explicitly setting the error action preference.\n\nYou need to read up on the difference between a non-terminating error and a terminating error.\n",
      "created_at": "2016-04-11T20:39:58Z",
      "updated_at": "2016-04-11T20:39:58Z"
    },
    {
      "author": "JumpingYang001",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr so is this by design or will we fix it in the future?\n",
      "created_at": "2016-04-12T02:49:44Z",
      "updated_at": "2016-04-12T02:49:44Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Dy design. Read \"Try/Catch/Finally\" section from this overview https://blogs.msdn.microsoft.com/kebab/2013/06/09/an-introduction-to-error-handling-in-powershell/ \n\n> If you would like to catch all possible errors (terminating and non-terminating) \u2013 then simply set the error action preference to Stop. \n",
      "created_at": "2016-04-12T03:26:53Z",
      "updated_at": "2016-04-12T03:26:53Z"
    },
    {
      "author": "JumpingYang001",
      "author_association": "CONTRIBUTOR",
      "body": "@vors great! It works.\n@andschwa we can close this issue, after set $ErrorActionPreference = \u201cStop\u201d, it works.\n",
      "created_at": "2016-04-12T03:31:56Z",
      "updated_at": "2016-04-12T03:31:56Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Great!\n",
      "created_at": "2016-04-12T03:37:17Z",
      "updated_at": "2016-04-12T03:37:17Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This change never got merged into the tests, fixed now.\n",
      "created_at": "2016-05-12T21:15:49Z",
      "updated_at": "2016-05-12T21:15:49Z"
    }
  ],
  "created_at": "2016-04-07T02:48:43Z",
  "labels": [],
  "number": 777,
  "state": "closed",
  "title": "Canot catch exception from New-Alias with existing constant one",
  "updated_at": "2016-05-12T21:15:49Z"
}