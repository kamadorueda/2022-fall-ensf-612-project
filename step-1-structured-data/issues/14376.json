{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14376",
  "author": "mklement0",
  "body": "Invoking a _method_ type member _without `(...)`_ outputs ``System.Management.Automation.PSMethod`1`` instances describing the method's signatures (overloads), which is helpful in interactive discovery; e.g.:\r\n\r\n```powershell\r\nPS> 'foo'.ToString\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstring ToString()\r\nstring ToString(System.IFormatProvider provider)\r\nstring IConvertible.ToString(System.IFormatProvider provider)\r\n```\r\n\r\nHowever, this doesn't currently work for the intrinsic `.ForEach()` and `.Where()` array methods implicitly available on all objects (though tab-completion does recognize them); e.g., `(1, 2).ForEach` returns `$null`\r\n\r\n(As a side effect, with `Set-StrictMode -Version 2` or higher, `(1, 2).ForEach` _fails_ outright; conceptually related: #2798) \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n(1, 2).ForEach | Should -Not -BeNullOrEmpty\r\n(1, 2).Where | Should -Not -BeNullOrEmpty\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should pass.\r\n\r\n## Actual behavior\r\n\r\nBoth tests fails, because both expressions evaluate to `$null` instead of outputting ``System.Management.Automation.PSMethod`1`` instances.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.1\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-12-10T15:34:38Z",
  "number": 14376,
  "state": "open",
  "title": "It should be possible to discover (print) the overloads of the intrinsic ForEach and Where array methods",
  "updated_at": "2020-12-12T12:13:02Z"
}