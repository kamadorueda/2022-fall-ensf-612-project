{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15827",
  "author": "nascarsayan",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a `New-PSSession` to a remote PC.\r\n2. Do any `Invoke-Command` on the PSSession which returns a significant size of stdout.\r\n3. Run Garbage Collectors to release as much memory as possible. I am running this : <br/> `[System.GC]::Collect(); [GC]::Collect(); [GC]::WaitForPendingFinalizers();`\r\n4. Run steps 2 and 3 multiple times, the memory keeps on increasing with the number of executions.\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nMemory consumption should reach a limit, and not increase thereafter.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nMemory consumption keeps on increasing with the number of executions.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Linux 5.4.0-31-generic #35-Ubuntu SMP Thu May 7 20:20:34 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n[This][1] clip shows the repro\r\n\r\n[1]: https://youtu.be/8xsdyyG5A7E\r\n",
  "closed_at": "2022-07-07T12:01:14Z",
  "comments": [
    {
      "author": "mkozaaczka",
      "author_association": "NONE",
      "body": "Hello\r\nI also like confirmed that issue is visible on Linux docker with.net core 3.1, PowerShell SDK 7.0.6 and as well on .net standard 5.0 , PowerShell SDK 7.1.4. I run following code https://docs.microsoft.com/en-us/powershell/scripting/developer/hosting/creating-remote-runspaces?view=powershell-7.1 that is run in continuous loop with rate 1 command per sec. After 1.5hour of working memory get leaked to 2 gigabytes level. I took memory dump and managed memory heap + loaded dlls (analyzed thru using sos) is fine up to 50 megabyte so I believe, that  leak is appearing in unmanaged code. \r\n\r\nCan some one look on this issue ?\r\n![image](https://user-images.githubusercontent.com/63739355/130230628-361d2fc7-ce0b-4552-8c78-b623d4b155e4.png)\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/developer/hosting/creating-remote-runspaces\">Creating remote runspaces - PowerShell</a></strong></div><div>Creating remote runspaces</div></blockquote>",
      "created_at": "2021-08-20T12:16:28Z",
      "updated_at": "2021-08-20T12:16:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "WG-Remoting:\r\nRepro is lacking information.  It is not clear what kind of remote connection is being used.  WinRM?  SSH?  It is not clear what script is being run or if data is being saved on the client.  Is memory pressure reduced if the remote session is closed?\r\n\r\nPlease provide detailed repro steps.\r\n\r\nAlso, keep in mind that [GC]::Collect() does not always force the GC to collect all available memory, depending on what generation it resides in.  It would be good to know if there is an increase of rooted objects.",
      "created_at": "2021-08-23T21:05:22Z",
      "updated_at": "2021-08-23T21:05:22Z"
    },
    {
      "author": "mkozaaczka",
      "author_association": "NONE",
      "body": "I created quick repo with code sample and docker definition that will allow you to reproduce this issue. Just on Windows 10 OS with docker installed (set for linux containers), clone repo https://github.com/mkozaaczka/powershellexec.git and run \"build_and_run.bat\", for target windows enable WinRM and PowerShell execution. Thanks \r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/84c800db259f74cde39f94df1b2f771b34e6cbe9f80ac602960a06f0cb76d399/mkozaaczka/powershellexec\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/mkozaaczka/powershellexec\">GitHub - mkozaaczka/powershellexec</a></strong></div><div>Contribute to mkozaaczka/powershellexec development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-08-26T15:25:02Z",
      "updated_at": "2021-08-26T15:26:55Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting\r\nRemoting working group: What we need is a simple repro script that demonstrates the problem.  Since accurately determining true memory/handle leaks in managed code is difficult, we require a solid repro along with correct memory analysis.",
      "created_at": "2022-04-07T18:26:00Z",
      "updated_at": "2022-04-07T18:26:00Z"
    },
    {
      "author": "nascarsayan",
      "author_association": "NONE",
      "body": "Hi @PaulHigin, the memory leak does not depend what script we are running. It is always happening, both from PowerShell and from C# code. Is there any way, the cached items can be disposed of? \r\n\r\nDo we need to follow up with some other team to get triage? Please let me know, as this is a very concerning issue for my team (Azure Arc for SCMM).\r\n",
      "created_at": "2022-06-13T05:50:16Z",
      "updated_at": "2022-06-13T05:50:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Create a New-PSSession to a remote PC.\r\n\r\nIs the connection WinRM or SSH?",
      "created_at": "2022-06-13T06:41:54Z",
      "updated_at": "2022-06-13T06:41:54Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@nascarsayan This issue is lacking important details such as which parameter set is being used, which determines what connection type is used (WinRM or SSH).  Also the running script does make a difference as it could be collecting data on the client end.  Please provide the repro test script, and steps to run the script that exhibits the problem.  Also note that WinRM based remoting is not supported on non-Windows platforms, only SSH remoting is officially supported.  ",
      "created_at": "2022-06-13T16:17:37Z",
      "updated_at": "2022-06-13T16:17:37Z"
    },
    {
      "author": "nascarsayan",
      "author_association": "NONE",
      "body": "Sorry for the late reply.\r\n\r\n@iSazonov , the connection is over WinRM (using NTLM Auth).\r\n\r\n@PaulHigin , I have created a concrete working program, that you can run from either Linux or Windows, in a docker container, or on k8s.\r\nPlease find the repo and code here:\r\nhttps://github.com/nascarsayan/TestPSSession\r\n\r\nThe code is pretty small. It just opens a `WInRM` connection to some remote PC, executes `return` and disposes the session.\r\n**The leak is happening only in Linux, and not on Windows.**\r\n\r\nI tried analyzing the heap dump, as I have written in the `README.md` of the repo, and I observed that it is most likely **native memory leak**, since the Heap Memory usage was pretty much the same on both the platforms.\r\n\r\nPlease let me know if any other information or analysis is to be done on my end.\r\n\r\nWill be thankful if we can find the root cause. Thanks a lot!\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/5ed6a9485bbb20f5d1627906dd1a5e01bcfc40c1491ccfeb96dca1d61a4b2ae3/nascarsayan/TestPSSession\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/nascarsayan/TestPSSession\">GitHub - nascarsayan/TestPSSession: A sample PSSession invoke using .NET</a></strong></div><div>A sample PSSession invoke using .NET. Contribute to nascarsayan/TestPSSession development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-07-01T12:16:54Z",
      "updated_at": "2022-07-02T06:30:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The code is pretty small. It just opens a `WInRM` connection to some remote PC, executes `return` and disposes the session.\r\n> **The leak is happening only in Linux, and not on Windows.**\r\n\r\nWinRM is not supported on Unix systems.",
      "created_at": "2022-07-02T17:56:58Z",
      "updated_at": "2022-07-02T17:56:58Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Please see:\r\nhttps://github.com/PowerShell/PowerShell/issues/17390",
      "created_at": "2022-07-05T15:47:02Z",
      "updated_at": "2022-07-05T15:47:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-07-07T12:01:13Z",
      "updated_at": "2022-07-07T12:01:13Z"
    }
  ],
  "created_at": "2021-07-25T03:51:55Z",
  "number": 15827,
  "state": "closed",
  "title": "Memory leak in Invoke-Command: PowerShell memory consumption increases with the number of executed commands",
  "updated_at": "2022-07-07T12:01:14Z"
}