{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13318",
  "author": "tstoian",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nOpenAPI-3.0.schema.json:\r\n[https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v3.0/schema.json](url)\r\n\r\napi.json:\r\n```json\r\n{\r\n    \"openapi\": \"3.0.0\",\r\n    \"info\": {\r\n        \"title\": \"myTitle\",\r\n        \"version\": \"1.0\"\r\n    },\r\n    \"paths\": {\r\n        \"/resource\": {\r\n            \"get\": {\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"myDescription\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```powershell\r\n$schema = Get-Content 'OpenAPI-3.0.schema.json' -Raw\r\n$value = Get-Content 'api.json' -Raw\r\nTest-Json -Json $value -Schema $schema\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nTrue\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nTest-Json: C:\\Git\\APIM\\APIM-Service\\apim-pipeline-scripts\\parse-spec.ps1:3:1\r\nLine |\r\n   3 |  Test-Json -Json $value -Schema $schema\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot parse the JSON.\r\n\r\nFalse\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```Name                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I can reproduce this in just NJsonSchema alone:\r\n\r\n```powershell\r\n$json = @'\r\n{\r\n    \"openapi\": \"3.0.0\",\r\n    \"info\": {\r\n        \"title\": \"myTitle\",\r\n        \"version\": \"1.0\"\r\n    },\r\n    \"paths\": {\r\n        \"/resource\": {\r\n            \"get\": {\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"myDescription\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n'@\r\n$schema = [NJsonSchema.JsonSchema]::FromUrlAsync('https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v3.0/schema.json').GetAwaiter().GetResult()\r\n$schema.Validate($json, @())\r\n```\r\n\r\nBased on that, I think this should be migrated to an issue in NJsonSchema",
      "created_at": "2020-07-30T18:48:32Z",
      "updated_at": "2020-07-30T18:48:53Z"
    },
    {
      "author": "tstoian",
      "author_association": "NONE",
      "body": "I created an issue in the NJsonSchema project.\r\nhttps://github.com/RicoSuter/NJsonSchema/issues/1225\r\n\r\nI thereafter found another similar issues reported one year earlier, which is still open:\r\nhttps://github.com/RicoSuter/NJsonSchema/issues/1034\r\n\r\nI feel confused to see support for a Microsoft product pointing to a third-party library. Especially since this NJsonSchema library comes installed by default with PowerShell 7.",
      "created_at": "2020-07-31T10:22:04Z",
      "updated_at": "2020-07-31T10:22:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov has submitted PRs to convert the implementation to the newer .NET implementation (System.Text.Json), but to my knowledge the PowerShell team are currently unwilling to shift the implementation as there are some behavioural differences.\r\n\r\nHowever, if this issue doesn't surface in the .NET implementation (worth investigating), perhaps that might be a reason to look at switching over once again (cc @SteveL-MSFT / @joeyaiello)",
      "created_at": "2020-07-31T13:36:04Z",
      "updated_at": "2020-07-31T13:36:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I feel confused to see support for a Microsoft product pointing to a third-party library. \n\nThis is the modern open-source world.\n\nNot only does the PowerShell team not have any business writing a Json schema implementation, but if we did it would take (a lot of) time away from working on PowerShell itself.\n\nInstead, people in the .NET community work hard to create and maintain libraries that we all get to reuse and can contribute back to freely. Rather than us insisting that only Microsoft can build good software, we participate in the ecosystem and in doing so de-fragment solutions to problems.\n\nDoes that mean there will be bugs? Sure, but there were bugs before too. Where once you might have filed a ticket that got internally bounced around into oblivion, this time support involves you communicating directly with the engineers who build the product, and if you don't like their response you still have the option of going to the original library to open an issue or even a PR.\n\nSo I understand your confusion, especially since PowerShell traditionally being a Windows product meant a certain form of product feedback. But now we're building PowerShell as a community out in the open, and that involves reuse, collaboration and pitching in.\n\n",
      "created_at": "2020-07-31T14:21:56Z",
      "updated_at": "2020-07-31T14:21:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".Net team actively enhance JSON support but it seems .Net 5 has not still API for JSON scheme validation.",
      "created_at": "2020-07-31T17:22:20Z",
      "updated_at": "2021-03-25T15:32:11Z"
    },
    {
      "author": "GlenAppleton",
      "author_association": "NONE",
      "body": "Checking to see if this issue is still being actively researched / addressed.  I'm having the same issues with validating both the OpenAPI schemas and the ARM template schemas.\r\n\r\nIf it's not, is there an alternative way using C# instead of PowerShell that will work?  I'm currently using PowerShell Core 7.x on my build servers for Azure DevOps CI builds, but if it's possible create a console utility in C# that will work, I'll go that route.",
      "created_at": "2021-03-25T13:12:56Z",
      "updated_at": "2021-03-25T13:12:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@GlenAppleton Please vote in NJsonSchema for https://github.com/PowerShell/PowerShell/issues/13318#issuecomment-667050507",
      "created_at": "2021-03-25T15:35:01Z",
      "updated_at": "2021-03-25T15:35:01Z"
    }
  ],
  "created_at": "2020-07-30T17:19:55Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 13318,
  "state": "open",
  "title": "Test-Json fails for valid Json.",
  "updated_at": "2021-03-25T15:35:01Z"
}