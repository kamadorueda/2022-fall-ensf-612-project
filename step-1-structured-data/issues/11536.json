{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11536",
  "author": "paalbra",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nIn https://github.com/PowerShell/PowerShell/pull/6542 we had to use a workaround to get a week of the year because .Net Core did not support the feature.\r\n\r\nAs result Get-Date -UFormat \"%V\" returns wrong week numbers around new year in some cases mentioned in issue #11534 .\r\n\r\nNow we have ISOWeek API in .Net Core 3.1. The PR removes our workaround and utilizes new ISOWeek.GetWeekOfYear() method.\r\n\r\n## PR Context\r\n\r\nThis PR fixes #11534 .\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-14T18:26:25Z",
  "comments": [
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "You can produce a test by comparing these two (assuming that python is 100% correct):\r\n```powershell\r\n$dt = Get-Date \"1900-01-01\"\r\nfor ($i = 0; $i -lt 100000; $i++)\r\n{\r\n    echo (\"{0:00} {1}\" -f (get-date $dt -UFormat \"%V\"), $dt.ToString(\"yyyy-MM-dd\"));\r\n    $dt = $dt.AddDays(1);\r\n}\r\n```\r\n```python\r\nimport datetime\r\n\r\ndt = datetime.datetime(1900, 1, 1)\r\n\r\nfor _ in range(100000):\r\n    print(dt.strftime(\"%V %Y-%m-%d\"))\r\n    dt += datetime.timedelta(days=1)\r\n```",
      "created_at": "2020-01-09T14:18:47Z",
      "updated_at": "2020-01-09T14:18:47Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not really sure what to do with the unchecked boxes. Guidance is wanted.",
      "created_at": "2020-01-09T14:19:58Z",
      "updated_at": "2020-01-09T14:19:58Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "If you run the above PowerShell code with the current master and with this PR fix you will get this diff:\r\n\r\n117 week numbers are wrong in these ~300 years.\r\n\r\n```\r\n$ sdiff -s outcurrent.txt outfixed.txt -w 29\r\n53 1902-01-03 | 01 1902-01-03\r\n53 1903-01-02 | 01 1903-01-02\r\n53 1903-01-03 | 01 1903-01-03\r\n53 1908-01-03 | 01 1908-01-03\r\n53 1913-01-03 | 01 1913-01-03\r\n53 1914-01-02 | 01 1914-01-02\r\n53 1914-01-03 | 01 1914-01-03\r\n53 1919-01-03 | 01 1919-01-03\r\n53 1920-01-02 | 01 1920-01-02\r\n53 1920-01-03 | 01 1920-01-03\r\n53 1925-01-02 | 01 1925-01-02\r\n53 1925-01-03 | 01 1925-01-03\r\n53 1930-01-03 | 01 1930-01-03\r\n53 1931-01-02 | 01 1931-01-02\r\n53 1931-01-03 | 01 1931-01-03\r\n53 1936-01-03 | 01 1936-01-03\r\n53 1941-01-03 | 01 1941-01-03\r\n53 1942-01-02 | 01 1942-01-02\r\n53 1942-01-03 | 01 1942-01-03\r\n53 1947-01-03 | 01 1947-01-03\r\n53 1948-01-02 | 01 1948-01-02\r\n53 1948-01-03 | 01 1948-01-03\r\n53 1953-01-02 | 01 1953-01-02\r\n53 1953-01-03 | 01 1953-01-03\r\n53 1958-01-03 | 01 1958-01-03\r\n53 1959-01-02 | 01 1959-01-02\r\n53 1959-01-03 | 01 1959-01-03\r\n53 1964-01-03 | 01 1964-01-03\r\n53 1969-01-03 | 01 1969-01-03\r\n53 1970-01-02 | 01 1970-01-02\r\n53 1970-01-03 | 01 1970-01-03\r\n53 1975-01-03 | 01 1975-01-03\r\n53 1976-01-02 | 01 1976-01-02\r\n53 1976-01-03 | 01 1976-01-03\r\n53 1981-01-02 | 01 1981-01-02\r\n53 1981-01-03 | 01 1981-01-03\r\n53 1986-01-03 | 01 1986-01-03\r\n53 1987-01-02 | 01 1987-01-02\r\n53 1987-01-03 | 01 1987-01-03\r\n53 1992-01-03 | 01 1992-01-03\r\n53 1997-01-03 | 01 1997-01-03\r\n53 1998-01-02 | 01 1998-01-02\r\n53 1998-01-03 | 01 1998-01-03\r\n53 2003-01-03 | 01 2003-01-03\r\n53 2004-01-02 | 01 2004-01-02\r\n53 2004-01-03 | 01 2004-01-03\r\n53 2009-01-02 | 01 2009-01-02\r\n53 2009-01-03 | 01 2009-01-03\r\n53 2014-01-03 | 01 2014-01-03\r\n53 2015-01-02 | 01 2015-01-02\r\n53 2015-01-03 | 01 2015-01-03\r\n53 2020-01-03 | 01 2020-01-03\r\n53 2025-01-03 | 01 2025-01-03\r\n53 2026-01-02 | 01 2026-01-02\r\n53 2026-01-03 | 01 2026-01-03\r\n53 2031-01-03 | 01 2031-01-03\r\n53 2032-01-02 | 01 2032-01-02\r\n53 2032-01-03 | 01 2032-01-03\r\n53 2037-01-02 | 01 2037-01-02\r\n53 2037-01-03 | 01 2037-01-03\r\n53 2042-01-03 | 01 2042-01-03\r\n53 2043-01-02 | 01 2043-01-02\r\n53 2043-01-03 | 01 2043-01-03\r\n53 2048-01-03 | 01 2048-01-03\r\n53 2053-01-03 | 01 2053-01-03\r\n53 2054-01-02 | 01 2054-01-02\r\n53 2054-01-03 | 01 2054-01-03\r\n53 2059-01-03 | 01 2059-01-03\r\n53 2060-01-02 | 01 2060-01-02\r\n53 2060-01-03 | 01 2060-01-03\r\n53 2065-01-02 | 01 2065-01-02\r\n53 2065-01-03 | 01 2065-01-03\r\n53 2070-01-03 | 01 2070-01-03\r\n53 2071-01-02 | 01 2071-01-02\r\n53 2071-01-03 | 01 2071-01-03\r\n53 2076-01-03 | 01 2076-01-03\r\n53 2081-01-03 | 01 2081-01-03\r\n53 2082-01-02 | 01 2082-01-02\r\n53 2082-01-03 | 01 2082-01-03\r\n53 2087-01-03 | 01 2087-01-03\r\n53 2088-01-02 | 01 2088-01-02\r\n53 2088-01-03 | 01 2088-01-03\r\n53 2093-01-02 | 01 2093-01-02\r\n53 2093-01-03 | 01 2093-01-03\r\n53 2098-01-03 | 01 2098-01-03\r\n53 2099-01-02 | 01 2099-01-02\r\n53 2099-01-03 | 01 2099-01-03\r\n53 2105-01-02 | 01 2105-01-02\r\n53 2105-01-03 | 01 2105-01-03\r\n53 2110-01-03 | 01 2110-01-03\r\n53 2111-01-02 | 01 2111-01-02\r\n53 2111-01-03 | 01 2111-01-03\r\n53 2116-01-03 | 01 2116-01-03\r\n53 2121-01-03 | 01 2121-01-03\r\n53 2122-01-02 | 01 2122-01-02\r\n53 2122-01-03 | 01 2122-01-03\r\n53 2127-01-03 | 01 2127-01-03\r\n53 2128-01-02 | 01 2128-01-02\r\n53 2128-01-03 | 01 2128-01-03\r\n53 2133-01-02 | 01 2133-01-02\r\n53 2133-01-03 | 01 2133-01-03\r\n53 2138-01-03 | 01 2138-01-03\r\n53 2139-01-02 | 01 2139-01-02\r\n53 2139-01-03 | 01 2139-01-03\r\n53 2144-01-03 | 01 2144-01-03\r\n53 2149-01-03 | 01 2149-01-03\r\n53 2150-01-02 | 01 2150-01-02\r\n53 2150-01-03 | 01 2150-01-03\r\n53 2155-01-03 | 01 2155-01-03\r\n53 2156-01-02 | 01 2156-01-02\r\n53 2156-01-03 | 01 2156-01-03\r\n53 2161-01-02 | 01 2161-01-02\r\n53 2161-01-03 | 01 2161-01-03\r\n53 2166-01-03 | 01 2166-01-03\r\n53 2167-01-02 | 01 2167-01-02\r\n53 2167-01-03 | 01 2167-01-03\r\n53 2172-01-03 | 01 2172-01-03\r\n```",
      "created_at": "2020-01-09T14:25:20Z",
      "updated_at": "2020-01-09T14:25:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@paalbra it may be worth filing a documentation issue so that we can make a note in the docs and users are aware that this functionality was broken and in which versions. Is it broken in Windows PowerShell as well, or was it broken sometime during 6.x?\r\n\r\nI would definitely recommend adding some tests as well -- perhaps test a handful of dates that are known to be affected, as well as testing perhaps at least a few weeks' worth of dates from a few different years so we have a decent test surface for the feature and can catch regressions if they occur. \r\n\r\nIf you would like to test dates from a whole century, be my guess -- just be mindful of the runtime of those tests. If it's not significant, it may be worth doing, if a _little_ bit excessive. At the least, we should definitely test the cases we know were previously broken in the last century or so and a handful of \"control\" cases just to be sure.\r\n\r\nLet us know if you have any questions / need some pointers. \ud83d\ude42 ",
      "created_at": "2020-01-09T16:39:26Z",
      "updated_at": "2020-01-09T16:39:26Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Thanks for the reply. Adding some more docs is a good idea (dates can be pretty confusing if you're not really precise). I don't think `%V` ever has worked properly/as in ISO8601.\r\n\r\nI do believe that Windows Powershell (my Windows 10 has 5.1.18362.145) and PowerShell 6.0.0 does a simple `(dateTime.DayOfYear / 7) + 1` which is kind of bad (and it doesn't zero prefix like the docs says it should). I've tested with the following and it produces no output in these two versions:\r\n```powershell\r\n$date = Get-Date \"1900-01-01\"\r\n$count = 0\r\nwhile ($count -lt 100000){\r\n    $formatdate = Get-Date $date -UFormat '%Y-%m-%d : %V'\r\n    $week1 = Get-Date $date -UFormat '%V'\r\n    $week2 = [string] ([math]::Floor(($date.DayOfYear / 7) + 1))\r\n    if ($week1 -ne $week2) {\r\n        Write-Output \"$formatdate : ($week1 != $week2)\"\r\n    }\r\n    $date = $date.AddDays(1)\r\n    $count += 1\r\n}\r\n```\r\n\r\nThe current behavior of master branch is better, but has the bug mentioned. Looks like this behavior was added in #6542, but I'm not sure which PowerShell 6.x this got released in? How can I find out?\r\n\r\nMore tests is also a good idea. I'll look into that. I think adding at least some of the dates in the sdiff output above might be enough.",
      "created_at": "2020-01-09T18:17:16Z",
      "updated_at": "2020-01-09T18:17:16Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "I've added tests for some dates that triggers this issue.\r\n\r\nAlso: @KalleOlaviNiemitalo has mentioned (in the issue) that `System.Globalization.ISOWeek` (with `GetWeekOfYear(DateTime)`)  exist in .NET Core 3.1. This is of course a much better solution than the current custom calculation. I've added a commit using this method.",
      "created_at": "2020-01-09T19:13:35Z",
      "updated_at": "2020-01-09T19:21:40Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding the change in 6bd70bc2d065918c03228f54befc3ed8cf1bfc59 .\r\n\r\nI'm not really sure how to find out when this was merged in a release, but I believe that this command might be correct?\r\n```\r\n$ git describe --contains 6bd70bc2d065918c03228f54befc3ed8cf1bfc59\r\nv6.1.0-preview.2~36\r\n```\r\nI.e. it was released in 6.1.0",
      "created_at": "2020-01-10T08:21:12Z",
      "updated_at": "2020-01-10T08:21:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@paalbra Thanks for your contribution!\r\n\r\n@SteveL-MSFT Formally it is a breaking change but I think it is right thing to get in 7.0 GA - we follow .Net Core behavior and ISO standard.",
      "created_at": "2020-01-10T13:25:34Z",
      "updated_at": "2020-01-10T13:25:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-rc.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:39:07Z",
      "updated_at": "2020-01-16T23:39:07Z"
    }
  ],
  "created_at": "2020-01-09T14:16:07Z",
  "number": 11536,
  "state": "closed",
  "title": "Use ISOWeek for week numbers in Get-Date",
  "updated_at": "2020-01-16T23:39:08Z"
}