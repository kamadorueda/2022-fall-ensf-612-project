{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17133",
  "author": "jborean93",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRemoves the usage of `BinaryFormatter` in PSRP connections.\r\n\r\n## PR Context\r\n\r\nThe `BinaryFormatter` class is marked as obsolete and is planned to be removed in a future .NET version https://github.com/dotnet/designs/blob/main/accepted/2020/better-obsoletion/binaryformatter-obsoletion.md. One location where it is used in pwsh is when serializing the client's time zone. On the server end PowerShell has ignored this property since v3 and even on v2 it has an exception handler to ignore invalid values. This means the client can either omit the property altogether or send an empty value and the server will still be fine.\r\n\r\nOne minor difference between a missing property and an empty property value is that `$PSSenderInfo.ClientTimeZone` is `$null` when it's missing and set to `[TimeZone]::Current` when it's an empty value. So to preserve as much existing behaviour an empty value was used instead.\r\n\r\nThe only concern I have with this approach that I haven't tested it with an Exchange endpoint to see if it has any special behaviour with this property.\r\n\r\nPartially addressed https://github.com/PowerShell/PowerShell/issues/14054\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-05-17T16:19:59Z",
  "comments": [
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot @jborean93 for this pull request, I really appreciate it!",
      "created_at": "2022-04-10T23:40:30Z",
      "updated_at": "2022-04-10T23:40:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I would love to get rid of the `Client Timezone` property.  It is part of the PowerShell remoting protocol (PSRP), but is listed as an optional property.  So it is Ok to not sent it, but **not** Ok to provide an incorrect value.\r\n\r\nMy main concern is how it might affect Exchange endpoints.  I was not on the team when this property was included, but I seem to recall it was included for Exchange endpoints.  One possible solution could be to serialize this object ourselves 'safely' so that it can be deserialized and used on older endpoints.  But I don't know how important it is and if it is really needed.\r\n\r\nMarking for committee review.",
      "created_at": "2022-04-11T16:21:01Z",
      "updated_at": "2022-04-11T16:21:01Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> but not Ok to provide an incorrect value.\r\n\r\nI can change the code to omit the field altogether if you wish, the only reason why I send an empty byte value is that\r\n\r\n+ If the serialization of the TZ fails on the client this is what is sent today\r\n+ the server populates the `$PSSenderInfo.ClientTimeZone` differently based on whether the property was set or not\r\n  + If missing the value is alwasy null\r\n  + If set, v2 will use the provided value and `null` if the value is empty/invalid\r\n  + If set, v3 will use `TimeZone.CurrentTimeZone`\r\n\r\nI tested both a missing and empty value and decided on the latter to try and preserve as much existing behaviour as I could (`$PSSenderInfo.ClientTimeZone` not being `null`). Considering currently PowerShell can already send an empty byte array when serialization fails (for whatever reason) it seems like the behaviour is already vaguely defined.\r\n\r\n> My main concern is how it might affect Exchange endpoints. I was not on the team when this property was included, but I seem to recall it was included for Exchange endpoints. One possible solution could be to serialize this object ourselves 'safely' so that it can be deserialized and used on older endpoints. But I don't know how important it is and if it is really needed.\r\n\r\nYea I can understand this concern and ultimately was hoping that you, or someone else in the pwsh team, can get them to review this change. I know for sure that Exchange works with the property not present altogether as my Python client doesn't add this field at all, I'm just not sure if it will be able to handle an empty value that this PR has today.",
      "created_at": "2022-04-11T19:09:22Z",
      "updated_at": "2022-04-11T19:09:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree that given dotnet's deprecation and removal plan, we should remove binaryformatter completely and not replace the optional protocol property with incorrect information.  We can get customer feedback on impact through 7.3, however, the only viable mitigation we can give them is to use 5.1 or 7.2 instead.",
      "created_at": "2022-04-20T22:49:59Z",
      "updated_at": "2022-04-20T22:51:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jborean93 and @PaulHigin, can you please help me understand if additional changes are needed given the committee's comments?",
      "created_at": "2022-04-27T00:00:35Z",
      "updated_at": "2022-04-27T00:00:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The committee Ok'd removing the ClientTimeZone message since it is optional in the protocol.  We want to see if there are any adverse affects.  However, I believe this PR will have to change to not substitute the ClientTimeZone on the server with the current local timezone, as that does not reflect the actual client timezone and violates the protocol.",
      "created_at": "2022-04-27T00:37:11Z",
      "updated_at": "2022-04-27T00:37:11Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> I believe this PR will have to change to not substitute the ClientTimeZone on the server with the current local timezone, as that does not reflect the actual client timezone and violates the protocol.\r\n\r\nThis is currently what happens today, the server (since pwsh v3) will ignore the `ClientTimeZone` value and always use the current time zone value as per https://github.com/PowerShell/PowerShell/blob/7cc9c874730e87b06dbe54d50e77c1c472996c54/src/System.Management.Automation/engine/remoting/common/WireDataFormat/EncodeAndDecode.cs#L2376-L2392.\r\n\r\nOnly PowerShell 2 actually read this value and parsed it. I have no idea what Exchange does though and whether they use this value for anything. I know it doesn't care if the property doesn't exist as per the docs it is optional but I'm unsure what it does with an empty value like `<BA N=\"ClientTimeZone\"></BA>`",
      "created_at": "2022-04-27T00:51:14Z",
      "updated_at": "2022-04-27T00:53:13Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 \r\n>Only PowerShell 2 actually read this value and parsed it\r\n\r\nHow do you know?  Do you have access to the code base?\r\n\r\nIn any case, this is contrary to what the protocol states.  So either the protocol must change or the code.  This PR should change the code and we can evaluate its effects in preview.",
      "created_at": "2022-04-27T15:21:45Z",
      "updated_at": "2022-04-27T15:21:45Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> How do you know? Do you have access to the code base?\r\n\r\nThe only way I can, through tools like dotpeek and dnsspy. On Windows 7 with pwsh 2 installed the method there will actually deserialize the .NET binary blob. On pwsh v3 and newer (since 2012) it has the same comment you see today in the code.\r\n\r\n> In any case, this is contrary to what the protocol states. So either the protocol must change or the code. This PR should change the code and we can evaluate its effects in preview.\r\n\r\nThat's fine with me, I don't know where you keep the docs, I'm just trying to remove a component that is going to be removed from .NET. My goal is to try and keep the same behaviour as is today.",
      "created_at": "2022-04-27T21:19:18Z",
      "updated_at": "2022-04-27T21:19:18Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@jborean93\r\nMakes sense, thanks.\r\n\r\nIt is not just updating protocol docs (which requires approval) but also updating the protocol version since it will be (or has been, since the code is now doing this) changed (ClientTimeZone information is actually ServerTimeZone).  That protocol change makes no sense and is not worth doing in my opinion and as the committee recommends, this PR should simply remove it, since it is optional.  I am thinking the 'ClientTimeZone' property should be set to null.  ",
      "created_at": "2022-04-27T21:53:06Z",
      "updated_at": "2022-04-27T21:53:06Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Considering the change happened in pwsh v3 the protocol version was already bumped from 2.1 to 2.2 I'm not sure it really warrants a new bump for something that has already happened.\r\n\r\nI'm happy to just omit the value altogether but it is strictly a breaking change; `$PSSenderInfo.ClientTimeZone` is now `$null` compared to the time zone. I highly doubt people are relying on this property but considering how change adverse this project is I assumed you preferred it to continue to be the server time zone, what it has been since v3. If you still want me to change the PR so it's never sent I can but I just want to make sure you are aware of the potential breaking change it can cause.",
      "created_at": "2022-04-27T21:57:29Z",
      "updated_at": "2022-04-27T21:57:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Since the property has been set to the server time zone since PowerShell v3, I think we should keep it that way to avoid potentially breaking anything.",
      "created_at": "2022-04-27T23:16:14Z",
      "updated_at": "2022-04-27T23:16:14Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  We cannot keep this behavior, regardless of how long it has been there, as it violates the protocol and we are non-compliant.  We either need to change the protocol (which doesn't make sense) or adhere to the protocol which allows us to not send the message (since it is optional).",
      "created_at": "2022-04-27T23:18:55Z",
      "updated_at": "2022-04-27T23:18:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "OK, so it looks to me that means the server side timezone needs to be fixed regardless of the rest changes in this PR.",
      "created_at": "2022-04-27T23:24:36Z",
      "updated_at": "2022-04-27T23:24:36Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw \r\nNo, the server side timezone needs to be fixed as part of this PR.  We cannot remove the TimeZone field from the client session capability message and report an invalid timezone on the server side.",
      "created_at": "2022-04-28T16:04:17Z",
      "updated_at": "2022-04-28T16:04:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jborean93 can you please address @PaulHigin's comments?",
      "created_at": "2022-05-09T18:17:37Z",
      "updated_at": "2022-05-09T18:17:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin I just pushed a commit to address you comment (leave `ClientTimeZone` to be null). Please review again and see if we can merge this PR. Thanks!",
      "created_at": "2022-05-16T22:39:50Z",
      "updated_at": "2022-05-16T22:39:50Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Sorry I've been slack in following it up, don't you also want to remove the line https://github.com/PowerShell/PowerShell/pull/17133/files#diff-24dd8a004527ebae1b7fb5796191281dc116c2f41ed925f4f12b38cab99a71dfR1604 so it doesn't add the property at all in the CLIXML. I believe that was desired rather than an empty byte array.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/8462645?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell/pull/17133\">Remove BinaryFormatter use in PSRP serialization by jborean93 \u00b7 Pull Request #17133 \u00b7 PowerShell/PowerShell</a></strong></div><div>PR Summary\nRemoves the usage of BinaryFormatter in PSRP connections.\nPR Context\nThe BinaryFormatter class is marked as obsolete and is planned to be removed in a future .NET version https://github....</div></blockquote>",
      "created_at": "2022-05-16T23:25:56Z",
      "updated_at": "2022-05-16T23:25:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin Can you comment on @jborean93's message above?",
      "created_at": "2022-05-16T23:54:54Z",
      "updated_at": "2022-05-16T23:54:54Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Hmm, yes thanks @jborean93.  I think it is best to just not include the TimeZone data item in the message stream.",
      "created_at": "2022-05-17T00:45:16Z",
      "updated_at": "2022-05-17T00:45:16Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `42` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +1 -41\r\nPercentile : 16.8%\r\n\r\nTotal files changed: 5\r\n\r\nChange summary by file extension:\r\n.cs : +1 -41\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3MTMzIiwiRXZlbnRUeXBlIjoiVGh1bWJzVXAifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3MTMzIiwiRXZlbnRUeXBlIjoiTmV1dHJhbCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamJvcmVhbjkzIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE3MTMzIiwiRXZlbnRUeXBlIjoiVGh1bWJzRG93biJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-05-17T01:13:00Z",
      "updated_at": "2022-05-17T01:13:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "OK, that line was removed. Can both of you take another look? I will merge if all look good.\r\nBTW, is it still a breaking change? I guess not, since we actually never do this assignment `result.TimeZone = TimeZone.CurrentTimeZone;` on PowerShell Core.",
      "created_at": "2022-05-17T01:13:40Z",
      "updated_at": "2022-05-17T01:15:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The only breaking change I know off is that now is when using a client with this change, the `$PSSenderInfo.ClientTimeZone` value will be `$null` on any sessions created. The same thing would occur if a client then connected to a server running with this change as well. Technically the value before wasn't 100% correct as it was set to the time zone of the server. All in all I don't think it's really a problem IMO.",
      "created_at": "2022-05-17T01:40:54Z",
      "updated_at": "2022-05-17T01:40:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thank you both. I will merge this PR today.",
      "created_at": "2022-05-17T16:19:23Z",
      "updated_at": "2022-05-17T16:19:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.4)\n",
      "created_at": "2022-05-23T16:22:44Z",
      "updated_at": "2022-05-23T16:22:44Z"
    }
  ],
  "created_at": "2022-04-10T23:23:46Z",
  "number": 17133,
  "state": "closed",
  "title": "Remove BinaryFormatter use in PSRP serialization",
  "updated_at": "2022-05-23T16:22:44Z"
}