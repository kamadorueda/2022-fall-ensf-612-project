{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10005",
  "author": "inoperable",
  "body": "I've set a number of OPT-OUT (optout? OPTOUT?) options, since i'm not sure which method is the proper one - your documentation is saying different things at different locations, and the installer, the installer says otherwise, i'm not wisers. Am I suppose to set the OPT-OUT in the user 'scope'? If the OPT-OUT var is set in the 'Machine' scope - does pwsh.exe ignores it or is the Machine Scope super-seeding User scope? Docs don't mention anything at all. \r\n\r\nDespite setting all the variants of the opt-out env variables by running snippet in pwsh 6.2.1 and 7.0.0.p1 (built-in Administrator account, Win10 Pro build 10.0.18922.1000 ) I still got **repeated** connection request to MS servers which I did  not approved nor was I asked about it **(for users who don't filter traffic they won't even know about it)**\r\n \r\nThat being said, why is it trying to connect randomly for god-knows-what every few minutes? Behaviour happens on launch / exit of pwsh.exe session - 3 times during the write of this text. Privacy being the marketing word lately in MS, but no one seems to clarify what actually is being send to where and for what - just don't drag me into the discussion about the needs of telemetry because **I dont need** it.\r\n\r\n<img width=\"300\" alt=\"req1\" src=\"https://user-images.githubusercontent.com/1571074/60141211-c23a0300-97b4-11e9-8a06-12c64c8d0fc7.PNG\">\r\n\r\n<img width=\"300\" alt=\"req2\" src=\"https://user-images.githubusercontent.com/1571074/60141367-691e9f00-97b5-11e9-821f-d5d9f49908ac.PNG\">\r\n\r\n\r\n`[System.Environment]::SetEnvironmentVariable('POWERSHELL_CLI_TELEMETRY_OPTOUT',1,'User');[System.Environment]::SetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT',1,'User');[System.Environment]::SetEnvironmentVariable('DOTNET_CLI_TELEMETRY_OPTOUT',1,'User');[System.Environment]::SetEnvironmentVariable('DOTNET_TELEMETRY_OPTOUT',1,'User');[System.Environment]::SetEnvironmentVariable('POWERSHELL_CLI_TELEMETRY_OPTOUT',1,'Machine');[System.Environment]::SetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT',1,'Machine');[System.Environment]::SetEnvironmentVariable('DOTNET_CLI_TELEMETRY_OPTOUT',1,'Machine');[System.Environment]::SetEnvironmentVariable('DOTNET_TELEMETRY_OPTOUT',1,'Machine')`",
  "closed_at": "2019-06-29T00:00:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@inoperable Could you create a simple dotnet core application and try to catch the commenctions? It helps us understand where root of the issue is - in .Net Core runtime or in PowerShell.\r\n\r\n@TravisEz13 Perhaps you could help with the issue?",
      "created_at": "2019-06-26T06:32:59Z",
      "updated_at": "2019-06-26T06:32:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The IP addresses (13.69.65.22 and 40.114.241.141) is in the list https://docs.microsoft.com/bs-latn-ba/azure/azure-monitor/app/ip-addresses but both PowerShell and .Net Core can use applicationinsights.",
      "created_at": "2019-06-26T06:36:51Z",
      "updated_at": "2019-06-26T06:36:51Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "This is all fine and dandy, but this shouldn't be the case - this makes the whole **telemetry** optout option just a superstitious move. How do you differentate between **telemetry** and **appinsights**?\r\n\r\nHow does it relate to the **POWERSHELL_TELEMETRY_OPTOUT**. I thought the whole point of the option is to make any such connections impossible - or am I missing something. ",
      "created_at": "2019-06-26T07:12:52Z",
      "updated_at": "2019-06-26T07:12:52Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "ENV VARIABLES below, as you can see, both are set - for user and system (DOTNET_CLI... and DOTNET... as well which can't be seen here) - all mentioned OPTOUT combinations I've found are set - so it can't be that the variable is missing.\r\n<img width=\"441\" alt=\"env\" src=\"https://user-images.githubusercontent.com/1571074/60159067-a7867f00-97f2-11e9-9ec1-886c2969992c.PNG\">\r\n",
      "created_at": "2019-06-26T07:15:47Z",
      "updated_at": "2019-06-26T07:15:47Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "> @inoperable Could you create a simple dotnet core application and try to catch the commenctions? It helps us understand where root of the issue is - in .Net Core runtime or in PowerShell.\r\n\r\nThank you for your answer - I dodn't have any dotnet sdk installed (yet). I simply add those OPTOUT options by default on every test machine to reduce noise. It is clearly the **AppInsights** silent optin - I went through your IP list and crossreferenced some of the ip's with my logs. Might also I just missed some smallprint somewhere but I don't remember any AppInsights part during installation. \r\n\r\nSeriously, the only consistant thing is the missuse of the word telemetry across all MS products where one should write user data collection or spyware in short. So what's next APPINSIGHTS_TELEMETRY_OPTOUT? ",
      "created_at": "2019-06-26T07:37:52Z",
      "updated_at": "2019-06-26T07:37:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How do you differentate between telemetry and appinsights?\r\n\r\n[Microsoft.ApplicationInsights](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights?view=azure-dotnet) is an API for telemetry. PowerShell and Core  uses the API.  POWERSHELL_TELEMETRY_OPTOUT=1 disables sending a telemetry in PowerShell Core.",
      "created_at": "2019-06-26T08:22:11Z",
      "updated_at": "2019-06-26T08:22:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "It looks like you did not used the wrong environment variable name.  See https://github.com/PowerShell/PowerShell/issues/10005#issuecomment-505773323",
      "created_at": "2019-06-26T20:02:30Z",
      "updated_at": "2019-06-26T20:02:30Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "> It looks like you did not used the wrong environment variable name. See [#10005 (comment)](https://github.com/PowerShell/PowerShell/issues/10005#issuecomment-505773323)\r\n\r\nI don't understand entirely what you mean - as you can see in the screenshots above, I did used the right variable name, I actually used it twice.",
      "created_at": "2019-06-26T22:53:13Z",
      "updated_at": "2019-06-26T22:53:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "`POWERSHELL_TELEMETRY_OPTOUT` must be defined before you start PowerShell.\r\n\r\nPerhaps something other than PowerShell is sending this telemetry.",
      "created_at": "2019-06-26T23:03:19Z",
      "updated_at": "2019-06-26T23:03:19Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": " As you can see in the screenshots I posted - it's definitly **pwsh.exe** process that is initializing the connection. It's not some unknown process, nor can there be any other process - I'm quite sure about it.\r\n\r\nUPDATE: I just run the same on a clean VM installed Windows 10 / Powershell Core installation and with the variables set BEFORE. This aside, does this mean that after first-run it Powershell ignore those variable afterwards? \r\n\r\nThe issue is not solved. I can repeat that behaviour. It seems that Powershell does indeed ignore thoses variables.",
      "created_at": "2019-06-27T00:08:48Z",
      "updated_at": "2019-06-27T00:08:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Try setting `DOTNET_CLI_TELEMETRY_OPTOUT` to `1` as well.  Doesn't matter whether you do it in a system or user environment variable.  Just make sure you new pwsh.exe console registers the values correctly i.e. make sure these output 1:\r\n```\r\n$env:DOTNET_CLI_TELEMETRY_OPTOUT\r\n$env:POWERSHELL_TELEMETRY_OPTOUT\r\n```",
      "created_at": "2019-06-27T01:07:06Z",
      "updated_at": "2019-06-27T01:07:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "BTW the nice thing about open source is you can look yourself to see where the telemetry is being sent:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/Microsoft.PowerShell.ConsoleHost/host/msh/Telemetry.cs#L67-L89\r\n\r\nThe logic is a bit odd.  I wish the variable on line 71 was called `optOut` without the negation and then the `if` check on line 73 wouldn't also require negation.  But it does look correct.",
      "created_at": "2019-06-27T01:13:56Z",
      "updated_at": "2019-06-27T01:14:16Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "C:\\Users\\Administrator>pwsh\r\nPowerShell 7.0.0-preview.1\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n```\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS C:\\Users\\Administrator> [System.Environment]::GetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT')\r\n1\r\nPS C:\\Users\\Administrator> [System.Environment]::GetEnvironmentVariable('DOTNET_TELEMETRY_OPTOUT')\r\n1\r\nPS C:\\Users\\Administrator> [System.Environment]::GetEnvironmentVariable('DOTNET_CLI_TELEMETRY_OPTOUT')\r\n1\r\nPS C:\\Users\\Administrator> [System.Environment]::GetEnvironmentVariable('POWERSHELL_CLI_TELEMETRY_OPTOUT')\r\n1\r\n\r\n```\r\n@rkeithhill Keith, thank you for pointing out the relevant function, can patch that function to be sure but still It does not make any sense - you can see that all of those variables are set in my first post - by simply running the snippet you can verify that they are set properly in `Machine` and `User` scopes, yet those are obviously either ignored or not read for some reason. \r\n\r\nCould it have something to do with the fact of using the built-in Administrator account instead of the usual one? I would happily patch it and be over it but the build process is - complicated - at least. \r\nNot else comes to mind (yet) \r\n\r\nLike written before,, see my first post- I've set 8 different variables in total... and it still does send telemetry - that's why I posted here in the first place. Double checked once again. DOTNET_... shouldn't even be there since that variable is not in function you've mentioned but I've set all kind of combinations to be sure (the documentation is not really clear about it and the whole discussion here proves it)",
      "created_at": "2019-06-27T02:27:49Z",
      "updated_at": "2019-06-27T02:28:24Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "RE `DOTNET_CLI_TELEMETRY_OPTOUT` PowerShell Core runs on top of .NET Core.  So that code base would have the code to disable their telemetry.  That said, you're opting out of that telemetry too.\r\n\r\nIt is possible it is another MS shared library (or PowerShell module) that is sending the telemetry.  PowerShell does run in a conhost.exe instance.  Do you see these connections if you fire up cmd.exe?  That would rule out conhost.exe (since cmd.exe also uses it).  There is active development going on with conhost right now. Maybe they're looking for telemetry on usage?",
      "created_at": "2019-06-27T03:02:54Z",
      "updated_at": "2019-06-27T03:03:39Z"
    },
    {
      "author": "inoperable",
      "author_association": "NONE",
      "body": "@rkeithhill I can't find any requests from `conhost.exe` in the log, never seen one directly from `cmd.exe` either. This happens exclusiely when `pwsh.exe`, `6.2.1` and `7.0.0.p1` is runnig - I'm gonna run it through `xdbg64` and see if I can nail it down.",
      "created_at": "2019-06-27T04:00:24Z",
      "updated_at": "2019-06-27T04:00:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I still got repeated connection request to MS servers \r\n\r\nPowerShell Core sends the telemetry _only at startup_. So it is not POwerSHell issue. Root cause could be in ApplicationInsights or in .Net Core, or another process. \r\nDebugging will help you.  ",
      "created_at": "2019-06-27T04:19:32Z",
      "updated_at": "2019-06-27T04:19:47Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The variable **MUST** be set in the environment **BEFORE** the process is start as it read at startup.\r\n\r\nAgain, Please use the issue template and provide a complete repro.  I really don't understand what you are trying to say the problem is here.  You asked as question.  The question has been answered and this issue is resolved.  \r\n\r\nIf you would like us to treat this like an issue, fill out the complete [issue template](https://github.com/PowerShell/PowerShell/issues/new?assignees=&labels=Issue-Question&template=Bug_Report.md&title=My+bug+report) with the full steps required to reproduce the issue.\r\n\r\nBut, if I understand you correctly, you have a feature request, which is to recognize that you don't want telemetry to be sent after the process is started.  If that is the case, please use the [feature request template](https://github.com/PowerShell/PowerShell/issues/new?assignees=&labels=Issue-Enhancement&template=Feature_Request.md&title=Feature+Request).",
      "created_at": "2019-06-27T17:16:49Z",
      "updated_at": "2019-06-27T17:20:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-29T00:00:11Z",
      "updated_at": "2019-06-29T00:00:11Z"
    }
  ],
  "created_at": "2019-06-25T23:57:20Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Resolution-Answered"
  ],
  "number": 10005,
  "state": "closed",
  "title": "PowerShell ignoring telemetry opt-out options, tries to call home regularly",
  "updated_at": "2019-06-29T00:00:12Z"
}