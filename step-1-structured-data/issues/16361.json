{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16361",
  "author": "MatejKafka",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n(Write-Output 1) -is [pscustomobject]  # unexpectedly True, although .GetType() returns Int32\r\n(1) -is [pscustomobject]  # False, as expected\r\n\r\n$x = Write-Output 1\r\n$x -is [pscustomobject]  # also unexpectedly True\r\n$y = 1\r\n$y -is [pscustomobject]  # False, as expected\r\n```\r\n\r\nThe issue seems reproducible in both `PowerShell 5.1` and `PowerShell Core 7.2.0-rc.1`.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nFalse each time (`Int32` is not a `pscustomobject`).\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPowerShell seems to think any object returned by `Write-Output` is somehow also `pscustomobject`.\r\n```\r\n\r\nResult of this issue is we can have a pair of \"almost exactly the same\" objects, but one of them thinks it's also a `pscustomobject`:\r\n\r\n```\r\n$x = 1\r\n$y = echo $x  # I'd assume $y is the exact same thing as $x here...\r\n\r\n$x -is [pscustomobject]\r\n$y -is [pscustomobject]  # ...but it's not, because these two checks return different things.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-rc.1\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-11-07T00:00:41Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I could be wrong here but when you use `[PSCustomObject]` it isn't actually pointing to [System.Management.Automation.PSCustomObject](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.pscustomobject?view=powershellsdk-7.0.0) but rather [System.Management.Automation.PSObject](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psobject?view=powershellsdk-7.0.0)\r\n\r\n```powershell\r\n[PSCustomObject].FullName\r\n\r\n# System.Management.Automation.PSObject\r\n\r\n[System.Management.Automation.PSCustomObject].FullName\r\n\r\n# System.Management.Automation.PSCustomObject\r\n```\r\n\r\nThis is the part I cannot really explain too well but when you output an object on the pipeline it is somewhat transparently wrapped as a `PSObject` to give it access to the extended type system info for that type/object. So while it might be an `Int32` on the .NET side when you output it through `PSCustomObject` it is in reality a `PSObject` in the background. I might have clobbered the information here so someone who is more knowledgeable is free to share the correct information.\r\n\r\nIn the end , what's the purpose of checking if it's a `PSCustomObject` type? When you do `[PSCustomObject]@{...}` you are essentially creating a type with it's own properties and 1 `PSCustomObject` may not be the same as others. There might be a better method for your original purpose.",
      "created_at": "2021-11-03T00:57:54Z",
      "updated_at": "2021-11-03T00:57:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, you more or less got it. Anything passed through the pipeline is essentially wrapped in a PSObject wrapper, and checking `-is [psobject]` (and by extension `-is [pscustomobject]` as @jborean93 points out, as they point to the same type) is pretty meaningless.\r\n\r\nIt is effectively the same thing as doing `-is [object]` -- there's not many scenarios where it makes sense to check that kind of metadata.",
      "created_at": "2021-11-03T12:50:54Z",
      "updated_at": "2021-11-03T12:51:21Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "The reason I'm checking for `[psobject]` is because I'm invoking a script (provided by a user of my module at runtime), that either returns a primitive value (string/int/bool, maybe even PathInfo and similar), or a map (key-value) container like hashtable/psobject/pscustomobject with a fixed property name (among other properties).\r\n\r\nI need to distinguish between these two cases, and testing with `-is` seemed like the best way, but apparently it isn't. Do you have any better alternatives? I could restrict the API to only accept a hashtable or a primitive value, but would prefer to also accept other map-like containers. ",
      "created_at": "2021-11-03T13:50:49Z",
      "updated_at": "2021-11-03T13:50:49Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "```(Write-Output 1) -is [int] # True```\r\n\r\nI think `.GetType().Name` method returns correct value.",
      "created_at": "2021-11-03T15:29:58Z",
      "updated_at": "2021-11-03T15:30:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you want to check for a true PSCustomObject, one constructed with `[pscustomobject]@{ .... }` you're probably best off doing `$object.PSTypeNames` and looking for the PSCustomObject type name in there.\r\n\r\n`-is` will work for most things, but PSCustomObject is more a property bag than a type in and of itself, so it's not particularly suitable for that.",
      "created_at": "2021-11-03T15:40:23Z",
      "updated_at": "2021-11-03T15:40:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can also use the full type name for that test:\r\n\r\n```powershell\r\n(Write-Output 1) -is [System.Management.Automation.PSCustomObject]\r\n# False\r\n([pscustomobject]@{thing = 1; that = 2}) -is [System.Management.Automation.PSCustomObject]\r\n# True\r\n```\r\n\r\n`PSCustomObject` is really a dummy instance used as the base object for `PSObject`s when there's no base object.  The type accelerator pointing to `PSObject`  is a little confusing but more helpful than harmful imo.",
      "created_at": "2021-11-04T02:54:09Z",
      "updated_at": "2021-11-04T02:54:09Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Yep, you more or less got it. Anything passed through the pipeline is essentially wrapped in a PSObject wrapper, and checking `-is [psobject]` (and by extension `-is [pscustomobject]` as @jborean93 points out, as they point to the same type) is pretty meaningless.\r\n\r\nI think there is a need for some **documentation** on to explain that **type accelerators** (a) exist and (b) don't do what one might expect : for example \r\n\r\n```\r\n1gb -is [int]\r\ntrue\r\n\r\n2gb -is [int] \r\nfalse\r\n```\r\nThis makes sense only when one knows that `int` serves as an alias for `[int32]`  \r\n```\r\n[int]\r\n\r\nIsPublic IsSerial Name                                     BaseType                                                                                                                                               \r\n-------- -------- ----                                     --------                                                                                                                                               \r\nTrue     True     Int32                                    System.ValueType \r\n\r\n[int].FullName\r\nSystem.Int32\r\n```\r\nSo knowing 1gb is an `int32` but 2gb is an `int64`,  **and** `-is [int]` tests for `-is [System.Int32]`  makes sense of the the example.      \r\n`System.` is not needed needed on a type name - there is an implicit `using namespace system` so we can use `-is [int32]`  and in lot of cases, *see the table below*, there's an argument for using `Int32` instead of `int`, `Boolean` instead of `bool`  etc. (moving a function to a cmdlet in C# doesn't need to change type names).     \r\nwith `pscustomobject` we get\r\n```\r\n [PSCustomObject]\r\n\r\nIsPublic IsSerial Name                                     BaseType                                                                                                                                               \r\n-------- -------- ----                                     --------                                                                                                                                               \r\nTrue     True     PSObject                                 System.Object                                                                                                                                          \r\n\r\n[PSCustomObject].FullName\r\nSystem.Management.Automation.PSObject\r\n```\r\nSo  `-is  [PSCustomObject]` does `-is [System.Management.Automation.PSObject]`  - I think this is a unique case where is     `System.Management.Automation.X` type and `[X]` is a type accelerator which points to a **different** type giving  `PSCustomObject` its split personality: interchangeable with `psobject` in some operations, but not, for example, in a *cast* \r\n```\r\n([PSCustomObject]@{Foo='Bar'}).GetType().FullName\r\nSystem.Management.Automation.PSCustomObject\r\n\r\n ([PSobject]@{Foo='Bar'}).GetType().FullName\r\nSystem.Collections.Hashtable\r\n```\r\n \r\n**IMHO**  the original design wasn't ideal and the behaviour it gives  falls in a awkward triple\r\n\r\n- It is not intuitive\r\n- Nor is it not easily discoverable -it is \"arcane\" knowledge discovered by asking the right people: there is no about_pscustomobject or similar topic and it is not covered in System.Management.Automation.PSCustomObject\r\n- It is probably too late to change.  \r\n\r\nAnd the best \"fix\" for that is to document it.  For reference any such help probably needs to explain the following:  \r\n\r\nTypeAccelerator                | Undelying type                                                                  \r\n----------------------------|------------------------------------------------------------------------------------\r\nbool                           | System.Boolean                                                                  \r\nfloat                          | System.Single                                                                   \r\nint                            | System.Int32                                                                    \r\nshort                          | System.Int16                                                                    \r\nlong                           | System.Int64                                                                    \r\npscustomobject                 | System.Management.Automation.PSObject                                           \r\nref                            | System.Management.Automation.PSReference                                        \r\nswitch                         | System.Management.Automation.SwitchParameter                                    \r\nbigint                         | System.Numerics.BigInteger                                                      \r\nushort                         | System.UInt16                                                                   \r\nuint                           | System.UInt32                                                                   \r\nulong                          | System.UInt64                                                                   \r\nxml                            | System.Xml.XmlDocument                                                          \r\nsemver                         | System.Management.Automation.SemanticVersion                                    \r\nadsi                           | System.DirectoryServices.DirectoryEntry                                         \r\nadsisearcher                   | System.DirectoryServices.DirectorySearcher                                      \r\nwmiclass                       | System.Management.ManagementClass                                               \r\nwmi                            | System.Management.ManagementObject                                              \r\nwmisearcher                    | System.Management.ManagementObjectSearcher                                      \r\n",
      "created_at": "2021-11-05T09:06:20Z",
      "updated_at": "2021-11-05T09:06:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> there's an argument for using `Int32` instead of `int`, `Boolean` instead of `bool` etc. (moving a function to a cmdlet in C# doesn't need to change type names).\r\n\r\nNote that for those particular examples (and most primitives) there are matching keywords in C#.",
      "created_at": "2021-11-05T17:35:54Z",
      "updated_at": "2021-11-05T17:35:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-11-07T00:00:40Z",
      "updated_at": "2021-11-07T00:00:40Z"
    }
  ],
  "created_at": "2021-11-03T00:02:39Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Engine-Pipeline"
  ],
  "number": 16361,
  "state": "closed",
  "title": "Write-Output result identifies as `[pscustomobject]`  (`-is [pscustomobject]`)",
  "updated_at": "2021-11-07T00:00:41Z"
}