{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11712",
  "author": "mklement0",
  "body": "<sup>This has been asked for before, but I couldn't find the original issue.</sup>\r\n\r\nWhen the _CLI_ is called with `-File` and a  `*.ps1`  script, the PowerShell process' own exit code is set as follows:\r\n\r\n* Whatever `<n>` is, if the script exits via an `exit <n>` statement (where `<n>` is an integer).\r\n\r\n* `0` otherwise  (unless an unhandled script-terminating error occurs, in which case it is `1`).\r\n\r\nIn other words: **Via the CLI, reporting a nonzero exit code from a script requires an _explicit_ `exit` statement** - unlike in POSIX-like shells, where it is derived from the (implied) exit code of the _last statement executed_ in the shell.\r\n\r\nAs an aside: with the `-Command` CLI option, it _is_ the last statement that determines the exit code, except that the _specific_ exit code reported by a script / external program is unexpectedly _lost_: essentially, the abstract Boolean `$?` value is mapped onto `0` or `1` (any failure): see #13501.\r\n\r\nExample of the CLI's exit-code reporting with `-File`:\r\n\r\n```powershell\r\n$dir = (New-Item -Force -Type Directory temp:/$PID).FullName\r\n\r\n@'\r\nls /nosuch 2>$null\r\n'@ > $dir/t1.ps1\r\n\r\n@'\r\nls /nosuch\r\nexit 5\r\n'@ > $dir/t2.ps1\r\n\r\n# -> 0, because t.ps1 did not exit via an `exit` statement,\r\n# even though the `ls` command reported a nonzero exit code as the last statement.\r\npwsh -file $dir/t1.ps1; $LASTEXITCODE\r\n\r\n# -> 5, due to explicit `exit`\r\npwsh -file $dir/t2.ps1; $LASTEXITCODE\r\n```\r\n\r\n**_Inside_ a PowerShell session, where `$LASTEXITCODE` must be queried for exit codes, the logic works _differently_ for scripts:**\r\n\r\n```powershell\r\n# -> 1 (!), because it is the `ls` utility's exit code that is now reported in $LASTEXITCODE \r\n& $dir/t1.ps1 ; $LASTEXITCODE\r\n\r\nRemove-Item -Recurse $dir\r\n```\r\n\r\n**_Inside_ PowerShell, `$LASTEXITCODE` is  _always_ set for calls to _external programs_ - even inside a script - and only overridden if the script _explicitly terminates with  `exit`_.** (If no number is passed to `exit`, `0` is implied). In other words: Inside PowerShell, if a script doesn't terminate with `exit`, `$LASTEXITCODE` (and therefore `$?`) may be set to an _incidental_ value from a script-internal external-program call.\r\n\r\n---\r\n\r\n**While exit codes are a process-level concept (and mostly used to communicate with _outside_ callers), it would still be helpful if a `*.ps1` _consistently_ reflected its  potentially intentional exit code to the caller - whether via the CLI or PowerShell-internally** - even though the inconsistent case is the one where the script _doesn't_ use `exit`.\r\n\r\nThis is technically a _breaking change_:\r\n\r\nA `$LASTEXITCODE` value resulting from an external-program call would then no longer be available across script boundaries - you could only check it in the same script scope (before you call another script or external program there).\r\n\r\nHowever, it arguably makes sense to only check `$LASTEXITCODE` right away anyway, and it's arguably better to conceive of an exit code reported inside a script by an external program as an implementation detail of that script.\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-01-28T22:24:42Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 11712,
  "state": "open",
  "title": "Consider making in-session exit-code reporting for scripts consistent with the CLI",
  "updated_at": "2021-12-21T18:49:46Z"
}