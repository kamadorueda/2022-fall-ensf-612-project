{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11665",
  "author": "he852100",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n<https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_trap?view=powershell-7>\r\n\r\n```powershell\r\nfunction TrapTest {\r\n    trap {\"Error found.\"}\r\n    nonsenseString\r\n}\r\n\r\nTrapTest\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nError found.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nError found: The term 'nonsenseString' is not recognized as the name of a\r\ncmdlet, function, script file, or operable program. Check the spelling of the\r\nname, or if a path was included verify that the path is correct, and then try\r\nagain.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPowershell Linux 6,7\r\n```\r\n",
  "closed_at": "2020-01-24T08:42:49Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 One would think it should be caught, since it does appear to be a terminating error; it is caught with `try`/`catch`.\r\n\r\nThis looks like it might be intentional, at least in part; if a user defines a `trap{}` in their profile script, for example, it would make it exceedingly difficult to see when they get a command not found error at the command line, if the trap was catching that error.",
      "created_at": "2020-01-23T13:48:23Z",
      "updated_at": "2020-01-23T13:48:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I think that doc just needs to be fixed.  `trap` doesn't silence errors unless you include `continue`.\r\n\r\n```powershell\r\nfunction TrapTest {\r\n    trap {\r\n        \"Error found.\"\r\n        continue\r\n    }\r\n\r\n    nonsenseString\r\n}\r\n\r\nTrapTest\r\n# Error found.\r\n```\r\n\r\n@vexx32 \r\n\r\n> This looks like it might be intentional, at least in part; if a user defines a `trap{}` in their profile script, for example, it would make it exceedingly difficult to see when they get a command not found error at the command line, if the trap was catching that error.\r\n\r\nOnly for the profile itself.  Traps propagate to child scopes, but cannot be dot sourced:\r\n\r\n```powershell\r\n. { trap { 'something'; continue } }\r\nthrow\r\n# Throws normally\r\n```",
      "created_at": "2020-01-23T18:35:07Z",
      "updated_at": "2020-01-23T18:35:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, it _is_ caught (note that `Error is found` prints), it just doesn't _suppress the error message_.\r\n\r\nCurrently, `trap` forces you to choose between:\r\n\r\n* _displaying_ the error (_after_ processing the `trap` script block)  and _continuing_ execution (default behavior, without a flow-control statement in the `trap` script block)\r\n\r\n* _displaying_ the error and _aborting_ execution (with `break` in the script block)\r\n\r\n* _silencing_ the error, but _continuing_ execution (with `continue` in the script block)\r\n\r\nIf you want to _both_ silence and abort, the only thing that gets you _close_ to is to use `exit` or `return` in the script block, but that doesn't guarantee that processing aborts _overall_.\r\n\r\nA few sample commands to illustrate the behaviors:\r\n\r\n```powershell\r\n& { trap { \"Error found.\" } 1/0; 'ok' }; 'after'\r\n\r\n& { trap { \"Error found.\"; continue } 1/0; 'ok' }; 'after'\r\n\r\n& { trap { \"Error found.\"; break } 1/0; 'ok' }; 'after'\r\n\r\n& { trap { \"Error found.\"; return } 1/0; 'ok' }; 'after'\r\n```\r\n",
      "created_at": "2020-01-23T22:57:03Z",
      "updated_at": "2020-01-23T22:57:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Oops, @SeeminglyScience - wires crossed, but I hope my comment is still useful.",
      "created_at": "2020-01-23T22:58:10Z",
      "updated_at": "2020-01-23T22:58:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've asked for the docs to be amended: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5348\r\n\r\n@he852100, I think it's fine to close this issue now.",
      "created_at": "2020-01-23T23:44:01Z",
      "updated_at": "2020-01-23T23:44:01Z"
    }
  ],
  "created_at": "2020-01-23T13:33:40Z",
  "number": 11665,
  "state": "closed",
  "title": "trap",
  "updated_at": "2020-01-24T08:42:49Z"
}