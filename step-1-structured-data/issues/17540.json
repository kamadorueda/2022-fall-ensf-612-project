{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17540",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n@IISResetMe pointed me to this a while back; while it may not often arise, the inconsistency is problematic.\r\n\r\nThe short of it: Explicit coercion is _always_ attempted in _named_ parameter binding, but only _if needed_ in _positional_ binding [source code link](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/ParameterBinderController.cs#L1286), which can unexpectedly result in different behavior.\r\n\r\nThe following repro is contrived, because  _doubly_ type-constraining a parameter is pointless (and should arguably be prevented at parse time), but a real-world case that _may_ have the same cause (I cannot personally verify it, including whether it also affects PS _Core_) is [this COM+PIA-related Stack Overflow answer](https://stackoverflow.com/a/72669319/45375).\r\n\r\n```powershell\r\n# Sample function with (contrived) double type constraint: [int] first, then [string]\r\nfunction foo { param( [string] [int] $p); $p }\r\n\r\n# POSITIONAL: OK, because *only [string]*, the leftmost type constraint is honored.\r\nfoo 'aha'\r\n \r\n# NAMED: !! BREAKS, because [int] is honored first, and 'aha' cannot be converted to [int]\r\nfoo -p 'aha' \r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n(Leaving aside whether double type constraints should be allowed) both `foo` calls should fail.\r\n\r\n\r\n### Actual behavior\r\n\r\nThe positional-binding call succeeds, whereas the named-binding one fails with:\r\n`foo: Cannot process argument transformation on parameter 'p'. Cannot convert value \"aha\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\"`\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.4\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-06-18T19:01:45Z",
  "number": 17540,
  "state": "open",
  "title": "Parameter binding with respect to type checks and coercion works differently in named vs. unnamed argument passing",
  "updated_at": "2022-06-19T07:24:01Z"
}