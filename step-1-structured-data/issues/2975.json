{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2975",
  "author": "MaximoTrinidad",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nUsing PowerShell Open Source,  type the following one\u00a0liner on local Windows 10 computer:\r\nGet-Process | Select\u00a0name, CPU, Responding\r\n\r\nThen, using the \"-ComputerName\" parameter:\r\nGet-Process -ComputerName Server1 | Select name, CPU, Responding\u00a0\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nShould Display all selected properties values,\u00a0\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nIn PowerShell Open Source, in local\u00a0computer it will only display\u00a0the CPU values but not the Responding values.  Then, when using the \"-ComputerName\" parameter, both CPU and Responding are blank.\r\n\r\nIn Windows PowerShell version 5.1, in local\u00a0computer it will display\u00a0both CPU and Responding values.  Then, when using the \"-ComputerName\" parameter, both CPU and Responding are blank.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0.14> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nGitCommitId                    v6.0.0-alpha.14\r\nPSVersion                      6.0.0-alpha\r\n\r\n```\r\nPS C:\\WINDOWS\\system32> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14986.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14986.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n![get-process_2017-01-07_5-14-02](https://cloud.githubusercontent.com/assets/19892435/21741128/0d123314-d49b-11e6-9508-a6f74e758e54.jpg)\r\n",
  "closed_at": "2019-05-31T22:00:55Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is unfortunately due to the .Net Process class.  On CoreCLR, Responding doesn't exist (it's dependent on specific Windows GUI apis) so it'll always be empty.  The remoting behavior on FullCLR is entirely based on the Process class.\r\n\r\nOn both full and CoreCLR, per the documentation, CPU (which is just a formatted TotalProcessorTIme) is only supported on the local computer.  Workaround is to use Invoke-Command for remoting rather than the built in .Net remoting.  https://github.com/PowerShell/PowerShell/issues/2761 would solve the remoting discrepancy.",
      "created_at": "2017-01-11T17:25:07Z",
      "updated_at": "2017-01-11T17:25:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-05-31T22:00:38Z",
      "updated_at": "2019-05-31T22:00:38Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-06-01T23:00:12Z",
      "updated_at": "2019-06-01T23:00:12Z"
    }
  ],
  "created_at": "2017-01-07T10:35:20Z",
  "number": 2975,
  "state": "closed",
  "title": "Get-Process Cmdlet\u00a0discrepancies displaying information (CPU, Responding)",
  "updated_at": "2019-06-01T23:00:13Z"
}