{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2567",
  "author": "powercode",
  "body": "It would be useful if \r\n```powershell\r\n[Diagnostics.Process[]] $p = Get-Process\r\n$p | % Prio<tab>\r\n```\r\nwould tab complete in the same way as\r\n```powershell\r\nGet-Process | % Prio<tab>\r\n```\r\nEven nicer would be if \r\n```powershell\r\n$p = Get-Process\r\n$p | % Prio<tab>\r\n```\r\nworked too. (Maybe getting the ArgumentTypeConverterAttribute from the OutputType?)\r\n\r\n\r\n\r\n\r\n",
  "closed_at": "2017-06-07T22:52:34Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Indeed, it is useful. It works too, at least some of the time, e.g. in your example.\n\nIt's a bit hacky/simple minded in how it works, so I'm certain there are scenarios where it doesn't work. Start with this [method](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/ast.cs#L284) and find it's implementations and references.\n",
      "created_at": "2016-10-31T17:15:35Z",
      "updated_at": "2016-10-31T17:15:35Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr It works when writing a script in the ISE, but not on the command line.\n\nAt the end of VariableExpressionAst::GetInferredType, the closest assignment is looked up.\nBut on the command line, we don't have that context.\n\nIs it to expensive to actually look at the Value of the variable and determine the type from it, or from the first element if it's a collection type? \n",
      "created_at": "2016-11-01T22:31:51Z",
      "updated_at": "2016-11-01T22:31:51Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "https://github.com/PowerShell/PowerShell/pull/2589\n",
      "created_at": "2016-11-02T15:24:16Z",
      "updated_at": "2016-11-02T15:24:16Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode Thanks for your onging PR.\n",
      "created_at": "2016-11-12T00:04:42Z",
      "updated_at": "2016-11-12T00:04:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr https://github.com/powercode/PowerShell/commits/typeinference-visitor\nIs this roughly what you had in mind?\n",
      "created_at": "2016-11-17T01:27:59Z",
      "updated_at": "2016-11-17T01:27:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I only took a very quick look, but it's definitely the direction I had in mind.\n",
      "created_at": "2016-11-17T02:45:25Z",
      "updated_at": "2016-11-17T02:45:25Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "Does tab expansion call some function that may have side effects, or does it simply reflect over the structure of the data?",
      "created_at": "2017-04-23T21:25:26Z",
      "updated_at": "2017-04-23T21:25:26Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@masaeedu It is a fairly complex process, that is highly context sensitive. The *-object commands has special treatment for example, and so has hashtables in certain circumstances. You can register you own completers with Register-ArgumentCompleter, and these may very well have side effects, even if that is discouraged.\r\n",
      "created_at": "2017-04-24T00:19:08Z",
      "updated_at": "2017-04-24T00:19:08Z"
    }
  ],
  "created_at": "2016-10-31T14:08:47Z",
  "labels": [
    "WG-Interactive-IntelliSense",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 2567,
  "state": "closed",
  "title": "Use the type of a variable for tab expansion",
  "updated_at": "2017-06-11T10:19:22Z"
}