{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6197",
  "author": "Jaykul",
  "body": "I think that Resolve-Path should *normalize* the path. Do we need a separate cmdlet for that?\r\n\r\nCurrently, it seems to just pass through whatever you feed it:\r\n\r\n```posh\r\nI \u2665 PS> Push-Location C:\\\r\nI \u2665 PS> Resolve-Path \\Windows | % ToString\r\n\\Windows\r\n\r\nI \u2665 PS> Push-Location FILESYSTEM::C:\\\r\nI \u2665 PS> Resolve-Path C:\\Windows | % ToString\r\nC:\\Windows\r\n\r\nI \u2665 PS> Resolve-Path FileSystem::C:\\Windows | % ToString\r\nFileSystem::C:\\Windows\r\n\r\nI \u2665 PS> Resolve-Path Microsoft.PowerShell.Core\\FileSystem::C:\\Windows | % ToString\r\nMicrosoft.PowerShell.Core\\FileSystem::C:\\Windows\r\n\r\nI \u2665 PS> Resolve-Path Microsoft.PowerShell.Core\\FILESYSTEM::\\WINDOWS | % ToString\r\nMicrosoft.PowerShell.Core\\FILESYSTEM::\\WINDOWS\r\n```\r\n\r\nHow can I test if two paths refer to the same location?\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Well, I don't know about _convenient_ but you can do that using the Provider & ProviderPath properties:\r\n```powershell\r\n$r1 = Resolve-Path C:\\Windows\r\n$r2 = Resolve-Path Microsoft.PowerShell.Core\\FileSystem::C:\\Windows\r\n($r1.ProviderPath -eq $r2.ProviderPath) -and ($r1.Provider -eq $r2.Provider)\r\n```\r\nConverting straight to string risks loosing quite a bit of information.\r\nOn the other hand, most parameters for paths happen to _be_ string, causing that conversion to happen right there.",
      "created_at": "2018-02-19T23:51:55Z",
      "updated_at": "2018-02-19T23:51:55Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Resolve-Path resolves all of the PowerShell specific stuff (drives, wildcards, etc.) into a `Path` object as @FriedrichWeinmann points out. For example:\r\n```\r\nPS[1] (120) > Resolve-Path zork:\\ | fl\r\n\r\nDrive        : zork\r\nProvider     : Microsoft.PowerShell.Core\\FileSystem\r\nProviderPath : C:\\windows\\\r\nPath         : zork:\\\r\n```\r\nThe `ProviderPath` property is what you probably want most of the time (like 99.9999% of the time) but the default `ToString()` on this object appears to return the original path you gave it which seems pretty useless.\r\n\r\n The useful bit for `Resolve-Path` is the resolution of PowerShell path artifacts (drives, wildcards, path separators) into a canonical provider-specific path. But to do this, the target path must exist so. This means that you can't use it to normalize paths that don't exist which is annoying.\r\n\r\nI'm not sure if we should try fixing this command or create new filesystem-specific path commands (including handling things like getting the basename or extension of a file, etc.)",
      "created_at": "2018-03-14T20:36:44Z",
      "updated_at": "2018-03-14T20:36:44Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "You'd think so @FriedrichWeinmann, yes, but there's some ambiguity around what happens based on your current location:\r\n\r\n```posh\r\nSet-Location C:\\\r\n$r3 = Resolve-Path FileSystem::\\Windows\r\n$r3 | fl * \r\n\r\nDrive        :                                     \r\nProvider     : Microsoft.PowerShell.Core\\FileSystem\r\nProviderPath : \\Windows                            \r\nPath         : FileSystem::\\Windows                               \r\n```\r\n\r\nYou'll note that it can't be bothered to tell me which _drive_ that path resolved to? Somehow, it \"knows\" (I guess that if no drive is specified, it uses the first one?). This path is kind-of a major problem for me, but that's not _this_ issue.\r\n\r\nDo you think we could call the drive not being set (and being missing from the provider path) a bug?\r\n\r\nPersonally, I think the `ToString()` implementation should have been `Provider + \"::\" + ProviderPath` which (except for the drive bug) would be un-ambigous (except for the possibility of having SUBST style overlapping drive letters) but I realize it's probably too late to change that.\r\n\r\n### What if we fix the drive bug, _and_ add a `FullyQualifiedPath` property?\r\n\r\n@BrucePay I wouldn't argue against adding some more \"FileSystem specific\" path commands, in general. Especially for new users, it would probably be useful to expose a few more of the static methods of System.IO.Path (even if people like me are just going to tell them it would be faster to use the static methods) \ud83d\ude09 I know I use ChangeExtension and GetFileNameWithoutExtension often...",
      "created_at": "2018-03-15T23:55:08Z",
      "updated_at": "2018-03-15T23:55:08Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "> Do you think we could call the drive not being set (and being missing from the provider path) a bug?\r\n\r\nAgreed - the missing drive is an issue (and I _do_ think it qualifies as bug).",
      "created_at": "2018-03-16T08:44:00Z",
      "updated_at": "2018-03-16T08:44:00Z"
    }
  ],
  "created_at": "2018-02-19T23:44:44Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Management"
  ],
  "number": 6197,
  "state": "open",
  "title": "Proposal: Resolve-Path should return a un-ambiguous single path",
  "updated_at": "2018-03-16T08:44:00Z"
}