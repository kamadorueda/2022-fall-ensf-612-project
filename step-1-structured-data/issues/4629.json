{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4629",
  "author": "mklement0",
  "body": "By definition, using attribute `ValueFromRemainingArguments` on a parameter:\r\n\r\n* only makes sense on _one_ parameter\r\n\r\n* which should either be unconstrained, or declared as an _array_.\r\n\r\n~~Both~~ At least the former condition should be enforced at _parse_ time, because functions that violate these principles fail on invocation in the typical use case. \r\n[_As noted below, the must-be-unconstrained-or-array condition cannot be reliably enforced without preventing exotic, but legitimate use cases._]\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nDefine the following functions:\r\n\r\n```powershell\r\n# Define *multiple* `ValueFromRemainingArguments` parameters, which makes no sense.\r\nfunction Foo1 {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(ValueFromRemainingArguments)]\r\n    $Rest1,\r\n    [Parameter(ValueFromRemainingArguments)]\r\n    $Rest2\r\n  ) \r\n  'hi1'\r\n}\r\n\r\n# Define a `ValueFromRemainingArguments` parameter with a *scalar type*, which \r\n# generally makes no sense, because the whole idea behind the attribute is to collect\r\n# *multiple* arguments.\r\nfunction Foo2 {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(ValueFromRemainingArguments)]\r\n    [int] $Rest\r\n  )\r\n}\r\n```\r\n\r\nThen, assuming you can define them (which you shouldn't be able to), invoke them:\r\n\r\n```powershell\r\nFoo1 a\r\nFoo2 1 2\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n_Parsing_ the function definitions should fail, because they violate the idea behind the `ValueFromRemainingArguments` attribute.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n# Foo1 was successfully defined, but cannot be invoked with positional arguments.\r\nFoo1 : Parameter set cannot be resolved using the specified named parameters.\r\n\r\n# Foo2 was successfully defined, but fails with more than 1 [int] argument.\r\nFoo2 : Cannot process argument transformation on parameter 'Rest'. Cannot convert the \"System.Collections.Generic.List`1[System.Object]\" value of type \r\n\"System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\" to type \"System.Int32\".\r\n```\r\n\r\nIn fact, `Foo2` even fails with a _single_ `[int]` argument, because a `ValueFromRemainingArguments` parameter currently unconditionally returns a `[List[object]]` instance, even if only a _single_ argument is bound - see #4625 \r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Reporting an error with multiple `ValueFromRemainingArguments` parameters makes sense - though it is an unlikely breaking change, and we have to be careful in the case of multiple parameter sets.\r\n\r\nReporting an error on the parameter type is not as simple - e.g. there are many possible ways (including one dynamic way) we might convert the argument(s) to a random parameter type, meaning there might be scenarios we'd break if we weren't extremely careful. While I'm not too concerned about such cases, I such an error is only marginally useful, so I'm not sure I'd bother with this one.\r\n\r\n",
      "created_at": "2017-08-21T04:24:02Z",
      "updated_at": "2017-08-21T04:24:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood re multiple parameter sets.\r\n\r\nI also get that preventing use of a pointless type is not terribly important, but I thought it was an easy mistake to prevent. It sounds like it's not easy after all.",
      "created_at": "2017-08-21T04:42:11Z",
      "updated_at": "2017-08-21T04:43:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Have GitHub ThrottleLimit to create new Issues? I'm tagging Issues at a slower speed than @mklement0  creates. \ud83d\ude04 ",
      "created_at": "2017-08-21T06:45:21Z",
      "updated_at": "2017-08-21T06:45:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "\ud83d\ude1c \r\n\r\nNo worries; my output will slow significantly soon.",
      "created_at": "2017-08-21T15:05:06Z",
      "updated_at": "2017-08-21T15:05:06Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "What about this scenario?\r\n\r\n```powershell\r\nClass MyClass {\r\n    [int]$Value1\r\n    [int]$Value2\r\n    [int]$Value3\r\n    MyClass ([System.Collections.Generic.List[Object]]$Values){\r\n        $this.Value1 = $Values[0]\r\n        $this.Value2 = $Values[1]\r\n        $this.Value3 = $Values[2]\r\n    }\r\n}\r\n\r\nfunction Foo2 {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(ValueFromRemainingArguments)]\r\n    [MyClass] $Rest\r\n  )\r\n  $Rest\r\n}\r\n\r\nFoo2 10 20 30\r\n```\r\n\r\nresult:\r\n\r\n```\r\nValue1 Value2 Value3\r\n------ ------ ------\r\n    10     20     30\r\n```\r\n\r\nShouldn't that be allowed?",
      "created_at": "2017-08-21T15:48:04Z",
      "updated_at": "2017-08-21T15:48:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus:\r\n\r\nThanks - your example is helpful in two distinct respects:\r\n\r\n* It shows an example of where a _scalar_ type _can_ make sense as a `ValueFromRemainingArguments\r\n` parameter's type. (I think we were already in agreement, but it's nice to have a concrete example).\r\n\r\n* It shows why the implementation detail of PS binding a `[List[object]]` collection rather than a regular `[object[]]` array can be problematic - see #4625\r\n\r\nTo illustrate the latter point:\r\n\r\n```powershell\r\n# The following *should* be equivalent to `Foo2 10 20,30`, but isn't\r\n> Foo2 -Rest 10, 20, 30\r\nCannot convert the \"System.Object[]\" value of type \"System.Object[]\" to type \"MyClass\".\r\n...\r\n```\r\n\r\nTo restore the expected equivalence, you'd have to define an _additional_ constructor, `MyClass ([object[]]$Values){ ...`\r\n\r\n\r\n",
      "created_at": "2017-08-21T16:21:04Z",
      "updated_at": "2017-08-21T16:21:04Z"
    }
  ],
  "created_at": "2017-08-21T03:13:02Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 4629,
  "state": "open",
  "title": "ValueFromRemainingArguments attribute should not be allowed on multiple parameters",
  "updated_at": "2017-08-21T20:20:30Z"
}