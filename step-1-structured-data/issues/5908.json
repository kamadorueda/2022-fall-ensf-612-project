{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5908",
  "author": "dronkoff",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nDear team, \r\nplease consider adding `#Requires -Edition (Desktop | Core)` statement for scripts that are not compatible with Core and still requires Desktop version to run.\r\n\r\nIt would be great to write \r\n```PowerShell\r\n#Requires -Edition Desktop\r\n```\r\ninstead of \r\n```PowerShell\r\nif($PSVersionTable.PSEdition -eq 'Core')\r\n{\r\n    throw \"Doesn't work with PowerShell Core. Please use Windows PowerShell.\"\r\n}    \r\n```\r\n\r\n",
  "closed_at": "2018-09-21T16:55:49Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "You could use the following PowerShell Core Is* variables to accomplish the result you're asking. As, if you query for these variables, then you can add the logic to either run in Windows PowerShell or PowerShell Core.  \r\n\r\n```\r\nPS C:\\Program Files\\PowerShell\\6.0.0> Get-Variable Is*\r\n\r\nName                           Value\r\n----                           -----\r\nIsCoreCLR                      True\r\nIsLinux                        False\r\nIsMacOS                        False\r\nIsWindows                      True\r\n\r\n```\r\n\r\nOn the other hand, I'm sure you can use the \"#Requires -Version 6\", as this will prevent to run it on Windows PowerShell.\r\n\r\n:)\r\n\r\n",
      "created_at": "2018-01-15T15:33:39Z",
      "updated_at": "2018-01-15T15:34:40Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "Yes, but `#Requres` is more pretty thing. :) All in all, that's why we have it.\r\nThe question is not in how to tell a script to run only on version 6 and higher (`#Requires -Version 6` will help with that), the question is how to tell a script to run only on PSEdition=Desktop and PSVersion from 3.0 to 5.1 and not on PSEdition=Core. \r\nThis is useful when a script has code that can't be executed in PS Core and we can't handle it with module references, like [adsi] or usage of .NET Framework classes that don't exist in .NET Core. \r\n\r\nBtw, $IsCoreCLR doesn't exist in early versions.\r\n```PowerShell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.98\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.98\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS C:\\> $IsCoreCLR\r\nThe variable '$IsCoreCLR' cannot be retrieved because it has not been set.\r\nAt line:1 char:1\r\n+ $IsCoreCLR\r\n+ ~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (IsCoreCLR:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : VariableIsUndefined\r\n```",
      "created_at": "2018-01-15T17:01:51Z",
      "updated_at": "2018-01-15T17:01:51Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Understood!  \r\n\r\nI know $Is* variables doesn't exist in Windows. That's why in my case, I would add the condition if it doesn't exist, then use the logic to run the code in Windows PowerShell.  This way the script could be execute on either existing version.  \r\n\r\nBut, I'm looking for cross-platform scripting where I can have the code run on either version of PowerShell.\r\n\r\nI know the possibility are endless and it will continue to evolve. \r\n\r\nI'm dare to say that version 6 (and above) will be Core all the way.\r\n\r\n:)\r\n",
      "created_at": "2018-01-15T18:47:57Z",
      "updated_at": "2018-01-15T18:47:57Z"
    },
    {
      "author": "al-ign",
      "author_association": "NONE",
      "body": "...and what your script will do if somewhere in the future it will be run in some desktop *nix ISE, without support for some win/full .NET functionality?\r\n:)",
      "created_at": "2018-01-17T19:15:41Z",
      "updated_at": "2018-01-17T19:15:41Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "@al-ign What if somewhere in the future in a far-far away galaxy are not the questions I'm targeting.\r\nFrom now, many of regular PS users can and definitely will face the situation when they have 2 PS versions installed side by side on one machine. These users already have their own script libraries that were written for Windows PowerShell and designed to manage only Windows environments. \r\nIf such script will be executed on PS Core 6 it will fail somewhere in the middle when PS will find something unsupported (remember, script was build and debugged on Windows PS). This can leave the system it is designed to manage in a non consistent state - half of the cmdlets were executed, the half were not. This is potentially a dangerous situation. Actually, this why we have `#Requires` statement at all.",
      "created_at": "2018-01-18T07:05:02Z",
      "updated_at": "2018-01-18T07:05:02Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "+1 to @dronkoff  - \".. #Requires..\"statement will be needed in such a case.  \r\n\r\nBut, that will be the task (and responsability) of the Admin scripter to adopt the new way of handling/manage scripts across platforms.  And, I would include any third-party entities producing PowerShell modules.\r\n\r\nIn this scenario, source control tools will become beneficial and important to be adopted by everyone.\r\n\r\n:)\r\n\r\n",
      "created_at": "2018-01-18T15:41:54Z",
      "updated_at": "2018-01-18T15:41:54Z"
    },
    {
      "author": "exchange12rocks",
      "author_association": "NONE",
      "body": "I agree, such statement would be useful.",
      "created_at": "2018-01-19T18:32:34Z",
      "updated_at": "2018-01-19T18:32:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Is this already in PowerShell as `#requires -PSEdition`? I found [this documentation](https://docs.microsoft.com/en-us/powershell/gallery/psget/script/scriptwithpseditionsupport), and [this](https://github.com/PowerShell/PowerShell/blob/942832c13a3c325851e9873bd25036775c85a18c/src/System.Management.Automation/engine/CommandDiscovery.cs#L447) check in the PowerShell source.",
      "created_at": "2018-03-23T04:42:59Z",
      "updated_at": "2018-03-23T04:43:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've opened [an RFC](https://github.com/PowerShell/PowerShell-RFC/pull/122) on updating the behaviour of `#requires`. Please feel free to comment in the PR.",
      "created_at": "2018-03-23T18:32:51Z",
      "updated_at": "2018-03-23T18:32:51Z"
    },
    {
      "author": "al-ign",
      "author_association": "NONE",
      "body": "Trying to figure out what #requires extensions would be meaningful, it came to me, what an additional statement could be also usefull: #testedon (or #testedfor, or just #tested).\r\n\r\nTo give you some context: my main non-Windows OS distribution is CentOS, so I'm writing scripts with CentOS-specific nuances. I wrote some scripts with Debian/Ubuntu compatibility in mind (httpd vs apache, for example), but they never been tested on it on any meaningfull extent.\r\n\r\nWhile #requires prohibits running on not supported environment, the best part in it is what it could be analyzed even *without* running the script.\r\nSo, #tested could be used as indication if current environment is tested one for execution (maybe we will have some Test-ScriptCompatibility cmdlet someday?), without even running script.\r\nAlso PS engine could emit warning/verbose/debug message, if current environment is not supported, warning user about possible incompatibilites.\r\n\r\nI would like to hear your opinion on this idea (especially @dronkoff), so if it is as good as I imagine - I will create separate thread for a more broad discussion.\r\n",
      "created_at": "2018-03-26T03:29:36Z",
      "updated_at": "2018-03-26T03:29:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@al-ign please feel free to write any suggestions for extending `#requires` as comment on the RFC linked above (by commenting on the PR). If there are features you would like included for `#requires`, that's probably the best place to raise them.",
      "created_at": "2018-03-26T17:37:03Z",
      "updated_at": "2018-03-26T17:37:03Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "This would be useful for something like AWS Lamda to parse out which powershell the script should be run with.",
      "created_at": "2018-09-21T16:30:52Z",
      "updated_at": "2018-09-21T16:30:52Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "PowerShell Core (and Windows PowerShell) already support this actual feature.\r\n\r\n```powershell\r\n#requires -PSEdition Core\r\n\r\nWrite-Output 'Hello'\r\n```\r\n\r\nSee this comment as well: https://github.com/PowerShell/PowerShell/issues/5908#issuecomment-375543426\r\n\r\nI'm guessing I left the issue open for discussion before, but closing now since the ask has been in PowerShell for a while.",
      "created_at": "2018-09-21T16:55:49Z",
      "updated_at": "2018-09-21T16:55:49Z"
    }
  ],
  "created_at": "2018-01-15T15:18:56Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 5908,
  "state": "closed",
  "title": "#Requires -Edition (Desktop | Core)",
  "updated_at": "2018-10-30T06:07:57Z"
}