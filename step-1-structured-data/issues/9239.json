{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9239",
  "author": "HumanEquivalentUnit",
  "body": "Get-WinEvent uses `-FilterHashtable @{..}` as one way to describe which events to retrieve, and the hashtable takes keys like `ID`, `StartTime`. But there's no way to find out which keys are valid without reading the help.\r\n\r\nThis feels like a PS-style design would have exposed those keys as parameters, they would show up for tab completion and introspection, and then splatting would be available for the hashtable use case.\r\n\r\nMy experience would be better if there was a quick way to see the valid keys without having to refer to the help, so:\r\n\r\n1. Would it be possible for tab-completion to suggest valid hashtable keys, if the hashtable was being written in this context, e.g. `get-winevent -filterhashtable @{ <tab>` ?\r\n1. Would it be possible to make `Ctrl-Space` suggestions, which currently lists all parameters in a nice view, also support showing some text which isn't parameters - hashtable keys specifically in this case, or in a more general case cmdlets could optionally show a cheatsheet section with some free-form text.\r\n1. What about exposing the keys as parameters, making them usable by splatting, and deprecating -FilterHashTable?\r\n\r\n(FilterXPath and FilterXml parameters also exist, I have no comment on them, they can stay how they are from my point of view).",
  "closed_at": "2022-03-04T02:09:13Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What about exposing the keys as parameters, making them usable by splatting, and deprecating -FilterHashTable?\r\n\r\nI wonder doesn't splatting use hash?\r\n\r\nI think IntelliSense for `get-winevent -filterhashtable @{ <tab>` is best choice.",
      "created_at": "2019-03-28T12:03:09Z",
      "updated_at": "2019-03-28T12:03:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sure, splatting uses hashtables, but at least you can get native tab completion for parameters (if they were exposed as parameters) and then get everything sorted before you convert it to a splat. Tab-completion would be available out of the box and not require a weird hacky solution for this specific case.",
      "created_at": "2019-03-28T12:42:46Z",
      "updated_at": "2019-03-28T12:42:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "To get started we would have to add over 15 parameters (!) for the System section only.",
      "created_at": "2019-03-28T13:25:40Z",
      "updated_at": "2019-03-28T13:25:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we get back ConvertFrom-String we could make requests on \"native\" language :-)",
      "created_at": "2019-03-28T13:27:53Z",
      "updated_at": "2019-03-28T13:27:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think relying on conversions from string is a good route to go on an administrative level for system event data gathering. \ud83d\ude15 ",
      "created_at": "2019-03-28T14:00:16Z",
      "updated_at": "2019-03-28T14:00:16Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov could you explain where the 15 comes from? The [documentation here]( https://docs.microsoft.com/en-us/powershell/scripting/samples/Creating-Get-WinEvent-queries-with-FilterHashtable?view=powershell-6) and [here](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/Get-WinEvent?view=powershell-6) only shows ten (`LogName, ProviderName, Path, Keywords, ID, Level, StartTime, EndTime, UserID, Data`) plus the ability to reference \"any named data field\". And why \"System section only\"? I cannot see where it says that they are limited to a section (or that it says they are localised into different languages - does that mean `get-winevent -filterhashtable @{StartTime='2019-01-01'}` does not work on your computer because of the English \"StartTime\" ?).\r\n\r\nAm I thinking about this all wrong, and I should imagine it like `Get-AdUser -Filter \"<blob>\"` or `Invoke-SqlCmd \"<sql blob>\"` where the filter only makes sense to the provider?  Should I be looking for Windows Event Log discussions of how it can filter?  (And if so, is the supported filtering different on different versions of Windows?)",
      "created_at": "2019-03-28T20:59:45Z",
      "updated_at": "2019-03-28T21:00:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16498, which has now been successfully released as `v7.3.0-preview.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.3)\n",
      "created_at": "2022-03-21T21:56:50Z",
      "updated_at": "2022-03-21T21:56:50Z"
    }
  ],
  "created_at": "2019-03-27T23:02:52Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-IntelliSense",
    "Resolution-Fixed"
  ],
  "number": 9239,
  "state": "closed",
  "title": "Request: Improve user experience of Get-WinEvent -FilterHashtable",
  "updated_at": "2022-03-21T21:56:50Z"
}