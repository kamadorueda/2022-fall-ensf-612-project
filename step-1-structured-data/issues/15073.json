{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15073",
  "author": "NeilMacMullen",
  "body": "Powershell: 7.1.3\r\nNuget package: System.Management.Automation  7.1.3\r\n\r\n## Expected behaviour\r\nIt should be possible to issue get-item on an ItemCmdletProvider\r\n\r\n## Actual behaviour\r\n\r\nThis error is thrown...\r\n`Get-Item: Cannot retrieve the dynamic parameters for the cmdlet. Provider methods not processed. The ContainerCmdletProvider methods are not supported by this provider.\r\n`\r\nSee below for reason and workaround.\r\n\r\n\r\n## Detail \r\n\r\nI'm attempting to create a PowerShell \"drive provider\" by following [this Microsoft article](https://docs.microsoft.com/en-us/powershell/scripting/developer/prog-guide/creating-a-windows-powershell-item-provider?view=powershell-7.1)\r\n\r\n\r\nI have created what I think is the minimum possible implementation for an `ItemCmdletProvider` that returns items...\r\n\r\n```\r\nusing System.Collections.ObjectModel;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Provider;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace CmdletTest\r\n{\r\n    [CmdletProvider(\"jfs\", ProviderCapabilities.None)]\r\n    public class Jfs : ItemCmdletProvider\r\n    {\r\n        //for testing just say that all paths are valid\r\n        protected override bool IsValidPath(string path) => true;\r\n        protected override bool ItemExists(string path) => true;\r\n\r\n        //for testing, just return a string\r\n        protected override void GetItem(string path)\r\n        {\r\n            WriteItemObject($\"hello - you asked for {path}\", path, false);\r\n        }\r\n\r\n        //set up a default drive\r\n        protected override Collection<PSDriveInfo> InitializeDefaultDrives()\r\n        {\r\n            //documentation is a bit unclear on the appropriate value of Root \r\n            //maybe it should be an empty string or just a slash?\r\n            var drv = new PSDriveInfo(\"test\", ProviderInfo, \"test:\\\\\", \"my drive\", Credential);\r\n            return new Collection<PSDriveInfo>(new[] {drv});\r\n        }\r\n\r\n        protected override PSDriveInfo NewDrive(PSDriveInfo drive)\r\n        {\r\n            Debug(\"\");\r\n            return base.NewDrive(drive);\r\n        }\r\n\r\n        private void Debug(string message, [CallerMemberName] string caller = \"none\")\r\n        {\r\n            WriteDebug($\"{caller}:  {message}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe project is a .Net5 class library using a Nuget reference to *System.Management.Automation*....\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>library</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n     <PackageReference Include=\"System.Management.Automation\" Version=\"7.1.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen I load the provider it appears to register and a plausible set of calls are made with the default drive being created:\r\n\r\n```\r\n14:36/net5.0>go clt; Import-Module .\\cmdlettest.dll -debug\r\nVERBOSE: Loading module from path 'C:\\Users\\neilm\\source\\repos\\cmdlettest\\cmdlettest\\bin\\Debug\\net5.0\\cmdlettest.dll'.\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): y\r\nDEBUG: Start:\r\nDEBUG: InitializeDefaultDrives:\r\nDEBUG: NewDrive:\r\n\r\n13:33/net5.0>Get-PSProvider\r\n\r\nName                 Capabilities                                      Drives\r\n----                 ------------                                      ------\r\nRegistry             ShouldProcess                                     {HKLM, HKCU}\r\nAlias                ShouldProcess                                     {Alias}\r\nEnvironment          ShouldProcess                                     {Env}\r\nFileSystem           Filter, ShouldProcess, Credentials                {C, D, Temp}\r\nFunction             ShouldProcess                                     {Function}\r\nVariable             ShouldProcess                                     {Variable}\r\njfs                  None                                              {test}\r\n\r\n```\r\n\r\nHowever, almost any operation on the drive returns an error *The ContainerCmdletProvider methods are not supported by this provider*\r\n\r\n```\r\n14:36/net5.0>get-item test:xhdf\r\nGet-Item: Cannot retrieve the dynamic parameters for the cmdlet. Provider methods not processed. The ContainerCmdletProvider methods are not supported by this provider.\r\n```\r\n\r\nPowershell is 7.1.3...\r\n\r\n```\r\n13:34/net5.0>$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe error message seems to resolve to `SessionStateStrings.IPropertyCmdletProvider_NotSupported` and is thrown in [ProviderBase](https://github.com/PowerShell/PowerShell/blob/76cef3b299911ba264fef7a2f510dd633f36497d/src/System.Management.Automation/namespaces/ProviderBase.cs) when it tests to see if the current Provider implements the `IPropertyCmdletProvider` property.\r\n\r\n## Workaround\r\n\r\nThe *workaround* is to use `ContainerCmdletProvider` as a base type but surely `ItemCmdletProvider` should also implement this interface?   If this has been fixed in 7.2 or I've just fundamentally misunderstood the difference between `ItemCmdletProvider` and `ContainerCmdletProvider` please close !\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-03-20T14:40:58Z",
  "number": 15073,
  "state": "open",
  "title": "ItemCmdletProvider appears not to implement IPropertyCmdletProvider ",
  "updated_at": "2021-03-20T18:04:06Z"
}