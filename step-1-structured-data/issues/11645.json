{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11645",
  "author": "mklement0",
  "body": "Related: #6562\r\n\r\nWindows PowerShell has always supported the `BigEndianUtf32` value for the `-Encoding` parameter of file-related cmdlets such as `Get-Content`, `Set-Content` and `Out-File`, to specify  UTF-32BE encoding.\r\n\r\nIt is the big-endian counterpart to identifier `UTF32`, just like the still-supported `BigendianUnicode` value is the counterpart to `Unicode` (UTF-16LE).\r\n\r\nYou can work around the issue by passing a `System.Text.Encoding` name directly: `-Encoding utf-32be`, but for symmetry and backward compatibility `BigEndianUtf32` should be supported in PS Core as well.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n{ 'hi' | Set-Content -ea stop -Encoding BigEndianUtf32 temp:$Pid.txt; ri temp:$Pid.txt } |\r\n  Should -Not -Throw\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should pass.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```none\r\nExpected no exception to be thrown, but an exception \r\n\"Cannot process argument transformation on parameter 'Encoding'. 'BigEndianUtf32' is not a supported encoding name. ...\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-01-21T18:04:09Z",
  "number": 11645,
  "state": "open",
  "title": "\"BigEndianUtf32\"  (UTF-32BE) character encoding identifier not supported by -Encoding parameters",
  "updated_at": "2020-01-22T06:55:30Z"
}