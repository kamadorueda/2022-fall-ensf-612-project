{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8106",
  "author": "endowdly",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nWhile pestering around on one of my personal modules, I noticed that the scope parameter on Cmdlets like Get-Alias, Set-Variable is not Validated. It's just... open. Don't we have defined scopes, like \"Local\", \"Script\", \"Global\", \"Private\" and _the numbers_? In fact, after examining the Pester tests included in _Powershell/test_, those are the only _valid_ values tested, and only up to scope 1. Who uses more than scope 2 anyway?? I'm going to rant and spitball here, so please bare with me.\r\n\r\n**Can we tag a ValidateSet attribute onto these parameters without breaking the intent of -Scope?**\r\n\r\nSeasoned users _know_ the scopes. And if we forget, I think we know to `Get-Help about_Scopes`. But new users may not, and with the amazing discoverability PowerShell has built-in, they may see they can set scopes on their variables and aliases. But, what scopes they can define aren't immediately available to them in the terminal. With tab completion set from a validation, that's remedied. \r\n\r\nThe only issue I see is: Where's the limit on numbered scopes? How to we get them? Are the scopes defined by the session state so if you enter in a scope 3 when you only have a scope 2, do you get a null or an exception? How high do we go and still have a valid scope integer? If there _is_ a limit that is determined by the session or stored in the ps session state, could we shift -Scope to be a Dynamic Parameter that pulls it's allowable values from \"the list\" and from the \"current allowable numbered\" scopes? \r\n\r\nMy current solution is to add tab completions for scope parameters. It will cycle through the list, and if I want to change it to a number, I can. They aren't used much anyway. This may be a big ol'nothingburger but I had to ask. ",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could add a completer (not ValidateSet).",
      "created_at": "2018-10-23T12:20:50Z",
      "updated_at": "2018-10-23T12:20:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We should probably have a custom validator to check that it's either an integer value or a named scope.",
      "created_at": "2018-10-23T13:07:54Z",
      "updated_at": "2018-10-23T13:07:54Z"
    },
    {
      "author": "endowdly",
      "author_association": "NONE",
      "body": "@iSazonov A completer is my current solution. It works just fine. But, if a user really wants to put `Some-Cmdlet -Scope Bork`, they still can and the command will, well, bork. I don't know if that's an issue or not. \r\n\r\n\r\n@vexx32 Are you speaking of a custom class derived from `ValidateArgumentsAttribute`? ...that seems easier than a dynamic validation and digging through the instance for scopes. ",
      "created_at": "2018-10-23T20:55:01Z",
      "updated_at": "2018-10-23T20:55:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@endowdly yes, indeed. You could easily model off of ValidateSet and do something like that, except if it doesn't match any of the existing named scopes it will still accept it if it's an integer. :) ",
      "created_at": "2018-10-23T20:59:07Z",
      "updated_at": "2018-10-23T20:59:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I only see a value for UX with the completer. If an user do wrong input the user will get the same error message in both cases - without validateset and with one.",
      "created_at": "2018-10-24T03:45:25Z",
      "updated_at": "2018-10-24T03:45:25Z"
    },
    {
      "author": "endowdly",
      "author_association": "NONE",
      "body": "So I've been working on the Validator Attribute. It seems to work okay in testing so far, but I haven't had a lot of time with it. I really like this as a solution as it *adds* functionality to PowerShell that users can apply to their scripts. Are you building a cmdlet and want a `-Scope` parameter, where validation is kind of important? This can definitely help with that. Just throw a `[ValidateScope()]` attribute on it and continue on. \r\n\r\nFor now, I use TabExpansionPlusPlus and this completer: \r\n\r\n``` powershell\r\n$ScopeCompleter = {\r\n    param ($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)\r\n\r\n    \"Local\", \"Script\", \"Global\" | ForEach-Object { New-CompletionResult $_ }\r\n}\r\n$ScopeCompleterArgs = @{\r\n    CommandName = (Get-CommandWithParameter -ParameterName Scope)\r\n    ParameterName = \"Scope\"\r\n    ScriptBlock = $ScopeCompleter\r\n}\r\n\r\nRegister-ArgumentCompleter @ScopeCompleterArgs\r\n```\r\n\r\nValidated scope parameters, like on `Install-Module` do not get overwritten by this. \r\n\r\n_Update_\r\n\r\nI just realized the base TabExpansionPlusPlus _already_ includes the Scope parameter expansion (wicked smart, Jason). I never included Jason's original completers, which upon review, should be a 15 yard penalty. So just importing the full TabExpansionPlusPlus solves this problem, no need to include my completer. Use it though, if you don't want to add TabExpansionPlusPlus, just be sure to swap out the `New-CompletionResult` line with a proper `[System.Management.Automation.CompletionResult]` object. ",
      "created_at": "2018-11-16T03:47:27Z",
      "updated_at": "2018-11-16T20:55:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "To get a progress we should get PowerShell Committee approvement for new public API - `ValidateScope` vs `CompleterScope`.\r\n\r\n/cc @SteveL-MSFT ",
      "created_at": "2018-11-16T03:53:48Z",
      "updated_at": "2018-11-16T03:53:48Z"
    },
    {
      "author": "romero126",
      "author_association": "CONTRIBUTOR",
      "body": "So I have been learning lot about Scopes and here is a bit of clarification.\r\n\r\nScope Levels Limits\r\nCurrently the available scope levels numbers 0-2147483647\r\nIf the scope is a number above where global exists it will kick back an error which is why scoping seems to be such a confusing beast.\r\n\r\nThat being said. As far as a Validator is concerned I am not really certain why we would need a validator for this instead of using a custom ValidateScript because scope validation is still done at the scope level when you pass parameters through.\r\n\r\n```\r\nfunction Foo\r\n{\r\n    param(\r\n        [ValidateScript({\r\n            if ([Enum]::GetValues([System.Management.Automation.ScopedItemOptions]) -contains $_ ) {\r\n                return $true\r\n            }\r\n            try {\r\n                if (([int]$_ -ge 0) -and ([int]$_ -le [int]::MaxValue)) {\r\n                    return $true\r\n                }\r\n            }\r\n            catch { }\r\n            throw \"Invalid Scope of $_\"\r\n        })]\r\n        [String]\r\n        $Scope\r\n    )\r\n}\r\n``` \r\n\r\nI understand we all want tab completion however I feel like having 2147483647+ Potential tab completions would slow down tab completion drastically where performance factors will be in play.\r\n\r\nHowever I believe a ValidateSetAttribute would be great here if it allowed for Type Information as well.\r\n\r\nExample:\r\n`[ValidateSet(\"Global\",\"Script\",\"Private\",\"Local\", [int]) ]`\r\n\r\n",
      "created_at": "2018-11-16T06:11:42Z",
      "updated_at": "2018-11-16T06:16:52Z"
    },
    {
      "author": "endowdly",
      "author_association": "NONE",
      "body": "@romero126 \r\n\r\nThe numbered scopes isn't an issue for tab completion, and there is no easy way to determine _which_ of the number is a valid scope. I mean there is, if you dig through the call stack, but that just seems like a folly. So the tab completion comes down to **4** real choices, and as I mention above, Jason Shirk's [TabExpansionPlusPlus](https://github.com/lzybkr/TabExpansionPlusPlus) module adds completer for _every_ command that uses a `-Scope` parameter (see [here](https://github.com/lzybkr/TabExpansionPlusPlus/blob/master/Microsoft.PowerShell.Core.ArgumentCompleters.ps1) if you want to do it yourself for some reason). \r\n\r\nYour ValidateScript solution is _fine_ for a one-off script and for a _single user_. I'm talking about a _systematic_ ... issue? I still don't necessarily think it's an issue nor an oversight. At this point, I guess I'm talking about an additional feature. \r\n\r\nLike I mentioned above, A ValidateScope attribute just makes it easy for validating these scopes for anyone, PowerShell wide. \r\n\r\n[Here is a Gist](https://gist.github.com/endowdly/076ecad977e3270ea238f9da8f6201a1) of my ValidateScopeAttribute I've been toying with to see what I'm talking about.\r\n",
      "created_at": "2018-11-16T21:04:11Z",
      "updated_at": "2018-11-16T21:04:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree to support tab completion for scopes",
      "created_at": "2018-12-05T23:42:45Z",
      "updated_at": "2018-12-05T23:45:48Z"
    }
  ],
  "created_at": "2018-10-23T11:59:20Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility",
    "Hacktoberfest-Accepted"
  ],
  "number": 8106,
  "state": "open",
  "title": "Add tab completion for -Scope parameters",
  "updated_at": "2021-07-12T21:17:34Z"
}