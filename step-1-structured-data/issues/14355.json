{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14355",
  "author": "mklement0",
  "body": "Note: This is ultimately another manifestation of #5579\r\n\r\n`-f`, when passed an array that is invisibly `[psobject]`-wrapped, fails to recognize the array as such.\r\n\r\nThis can happen with arrays returned _as a whole_ from cmdlets, such as with `Write-Output -NoEnumerate` and `Get-Content -ReadCount`.\r\n\r\nSimplest, but contrived repro: `'{0} {1}' -f ([psobject] (1, 2))`\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# Create two 2-element arrays: one with an expression, another via a cmdlet.\r\n$arr1 = 1, 2\r\n$arr2 = Write-Output -NoEnumerate 1, 2\r\n\r\n'{0} {1}' -f $arr1 | Should -Be '1 2'\r\n'{0} {1}' -f $arr2 | Should -Be '1 2'\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should succeed.\r\n\r\n## Actual behavior\r\n\r\nThe 2nd test fails, because `$arr2` is (invisibly) `[psobject]`-wrapped.\r\n\r\n```none\r\nInvalidOperation: Error formatting a string: Index (zero based) must be greater than or equal to zero and less than the size of the argument list..\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.1\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-12-08T21:35:20Z",
  "number": 14355,
  "state": "open",
  "title": "The -f operator doesn't recognize a [psobject]-wrapped array",
  "updated_at": "2020-12-09T04:13:39Z"
}