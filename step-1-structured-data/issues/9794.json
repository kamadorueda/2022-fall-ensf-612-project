{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9794",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nCloses #9561 \r\n\r\n- Adds `LanguagePrimitives.IsNullLike()` method to account for `DBNull.Value` and `NullString.Value` so that they can be considered the same as a null value where sensible in PowerShell.\r\n- Updates `-ne` and `-eq` binders to treat `DBNull.Value` and `NullString.Value` as equal to null/AutomationNull.\r\n- Update code paths for comparing objects in LanguagePrimitives to ensure consistency with how the `-eq` and `-ne` binders work when calling LanguagePrimitives methods to do the comparisons.\r\n- Make `LanguagePrimitives.IsNull()` and `LanguagePrimitives.IsNullLike()` public methods.\r\n- Added tests for null behaviours in `NullRepresentatives.Tests.ps1`\r\n\r\n## PR Context\r\n\r\nDBNull.Value and NullString.Value are generally considered to be equivalent to null, and it makes the most sense to have PowerShell recognise them as such instead of treating them as strange class objects. See linked issue for more details.\r\n\r\n/cc @daxian-dbw \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-06-28T18:39:35Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Given how PowerShell handles conversions from null -> string (yielding `string.Empty` if I'm not mistaken) it may not make sense to also handle `NullString.Value` as a true `null` here as well -- either that or I need to be more careful with the handling in the string conversion paths so that a null string is a valid result when given a \"null\" value.\r\n\r\nSee the failing tests, where it expects empty string because the class definition has a `[string]`-type property and it is converting \"expected\" values into empty strings as a result here.\r\n\r\nWhat would be appropriate here, do you think?\r\n\r\nEDIT: Looks like `FigureConversion()` just needs to keep track that the original type was in fact `NullString` so that the conversion paths do their thing correctly. Verified that the tests seem to pass locally with this fix. \ud83d\ude42 ",
      "created_at": "2019-06-01T20:02:48Z",
      "updated_at": "2019-06-01T21:14:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think `[DBNull]::Value` and `[NullString]::Value` should be treated as null only when comparing with `$null`, but not in general.\r\nWith your change, `gm -InputObject ([System.DBNull]::Value)` will start to fail.\r\n\r\nQuote @mklement0's comment in the original issue:\r\n> I wouldn't frame the issue in terms of $null, but in terms of (possibly implicit) to-Boolean conversion.\r\n> Secondarily, the question is how direct comparison with $null should be handled.\r\n\r\nAs for `LanguagePrimitive.IsNull`, I think it probably should be renamed to `IsLiterallyNull()` with a comment like `\"Unlike objects like DBNull.Value or NullString.Value that represent NULL in specific scenarios, this method check for literal NULL that is not considered to be an object\"` and keep the existing implementation unchanged.",
      "created_at": "2019-06-03T16:47:13Z",
      "updated_at": "2019-06-03T16:51:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 I guess that does make sense. I can do that.\r\n\r\nAny chance you can point me in the general direction of where the direct comparison with $null would be implemented instead? \r\n\r\nAlso, given that, would we consider `[DBNull]::Value -eq [NullString]::Value`? And would it make sense to make `IsLiterallyNull()` public so that PS users can more easily distinguish between $null and `[DBNull]` etc., when they do need to?",
      "created_at": "2019-06-03T17:12:15Z",
      "updated_at": "2019-06-03T17:13:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Also, given that, would we consider `[DBNull]::Value -eq [NullString]::Value`?\r\n\r\nI don't think we should consider them equal. The following shows how they should behave in my opinion:\r\n```\r\n## Equality comparison with $null should return true\r\n$null -eq [AutomationNull].Value\r\n> $true\r\n\r\n[AutomationNull].Value -eq $null\r\n> $true\r\n\r\n$null -eq [DBNull].Value\r\n> $true\r\n\r\n[DBNull].Value -eq $null\r\n> $true\r\n\r\n$null -eq [NullString]::Value\r\n> $true\r\n\r\n[NullString]::Value -eq $null\r\n> $true\r\n\r\n## Equality comparison between '[AutomationNull].Value', '[DBNull].Value', and '[NullString].Value' should return false.\r\n[AutomationNull].Value -eq [DBNull].Value\r\n> $false\r\n\r\n[DBNull].Value -eq [NullString]::Value\r\n> $false\r\n\r\n[NullString]::Value -eq [AutomationNull].Value\r\n> $false\r\n```\r\n/cc @mklement0 for comments :)\r\n\r\n> would it make sense to make IsLiterallyNull() public \r\n\r\nI agree to make it public, but we may need to chew on the name a bit more :)\r\n\r\n> Any chance you can point me in the general direction of where the direct comparison with $null would be implemented instead?\r\n\r\nSure, I will take a look at the code later today.",
      "created_at": "2019-06-03T17:39:24Z",
      "updated_at": "2019-06-03T17:39:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Appreciate it! Personally I'm a fan of `IsActuallyNull()` \ud83d\ude09  (or maybe `IsTrueNull()`)\r\n\r\nYeah, I figured those comparisons were what you had in mind. I think that might be inviting a bit of confusion, but it's still important to be able to check those against each other so I agree there.",
      "created_at": "2019-06-03T17:43:34Z",
      "updated_at": "2019-06-03T17:44:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My vote is for `IsTrueNull()`.\r\n\r\n@daxian-dbw, I agree with the proposed behavior, thanks for hashing it out.\r\n\r\nFor someone who needs to distinguish between `$null` and one of the null-like values in an expression context (as an alternative to using `Get-Member`), they can use:\r\n\r\n```powershell\r\n[NullString]::Value -is [NullString] \r\n[System.DBNull]::Value -is [System.DBNull] \r\n```\r\n\r\nUnfortunately, we do _not_ get the same behavior with `[System.Management.Automation.Internal.AutomationNull]::Value`, because it is seemingly converted to true `$null` during parameter binding and in expressions:\r\n\r\n```powershell\r\n# FAILS - same as passing $null\r\nGet-Member -InputObject ([System.Management.Automation.Internal.AutomationNull]::Value)\r\n\r\n# $FALSE, paradoxically\r\n[System.Management.Automation.Internal.AutomationNull]::Value -is [System.Management.Automation.Internal.AutomationNull]\r\n```\r\n\r\nDistinguishing between true `$null` and `[System.Management.Automation.Internal.AutomationNull]::Value` is currently only possible with obscure workarounds; e.g.:\r\n\r\n```powershell\r\n# Determine if a given variable $v is true $null or AutomationNull\r\n$isAutomationNull = $null -eq $v -and @($v).Count -eq 0\r\n$isTrueNull = $null -eq $v -and @($v).Count -eq 1\r\n```\r\n\r\nRelated: https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-399808799\r\n\r\n",
      "created_at": "2019-06-04T07:53:24Z",
      "updated_at": "2019-06-04T07:53:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw any luck finding an appropriate place to check for this? I've made a couple attempts myself but I've not found anything that gets the right behaviour as yet.",
      "created_at": "2019-06-07T22:39:26Z",
      "updated_at": "2019-06-07T22:39:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 Sorry for being tardy. I have been focusing on some PSReadLine issues and lost track of this PR.\r\nI think there are a few places that need to be updated for the desired behavior:\r\n\r\n1. For binary comparison in language\r\nhttps://github.com/PowerShell/PowerShell/blob/65a3e467cc95059d16f58174335e6dd3a58c459b/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L3024-L3041\r\nAND\r\nhttps://github.com/PowerShell/PowerShell/blob/65a3e467cc95059d16f58174335e6dd3a58c459b/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L3047-L3063\r\n\r\n2. For static methods in `LanguagePrimitives`\r\n```\r\nLanguagePrimitives.Equals\r\nLanguagePrimitives.IsTrue\r\nLanguagePrimitives.Compare // and other compare/trycompare overloads, to handle comparing $null and the special NULL representatives.\r\nReview all methods in `LangaugePrimitives.cs` that are related to null comparison in names, like 'CompareObjectToNull'\r\n```\r\nThe use of those static methods needs to be carefully reviewed as well.",
      "created_at": "2019-06-10T16:54:17Z",
      "updated_at": "2019-06-10T16:56:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "All hail @SeeminglyScience's eyeballs tbh. I missed that both binder methods needed some extra logic there.\r\n\r\nThis should work, I think. Let me know if we need to make further changes @daxian-dbw but I think this ought to do it. Verified that the test cases added appear to pass locally so we should be set to go! \ud83e\udd1e ",
      "created_at": "2019-06-16T03:00:19Z",
      "updated_at": "2019-06-16T03:00:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Okay, I see.\r\n\r\nSo @daxian-dbw the comparisons such as `[AutomationNull]::Value -eq [DBNull]::Value` are returning `$true` because that's kind of how `[AutomationNull]` is intended to behave in comparisons, typically. It's treated like a true null would be.\r\n\r\nIs it worth digging in here and trying to tease apart that logic to make these all mutually not equal each other, do you think? It would be inconsistent in terms of how comparisons to automation null typically behave.\r\n\r\nI'm thinking the way it's currently functioning is pretty sensible, given the typical cases you'll come across with AutomationNull, having it behave just like comparing these null-like values directly to null behaves. I'm also not really sure there's _really_ value in having them all not equal each other. If each individually should be treated as \"equal to\" a true null for our purposes, then logically it makes the most sense to have them \"equal\" each other as well when tested in this manner.\r\n\r\nAfter all, if you _really_ wanted to check the \"type\" of the null value... we can still do `$value -is [dbnull]` and so forth, and get definitive results.\r\n\r\nWould appreciate your thoughts here. \ud83d\ude42 ",
      "created_at": "2019-06-16T03:48:02Z",
      "updated_at": "2019-06-16T03:51:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> because that's kind of how `[AutomationNull]` is intended to behave in comparisons, typically. It's treated like a true null would be.\r\n\r\nGood catch. Yes, `[AutomationNull]::Value` is supposed to behave just like `$null` with the only difference that `$null` can be passed through pipeline while `[AutomationNull]::Value` cannot.\r\nGiven that, I think it makes sense to have `[AutomationNull]::Value -eq [DBNull]::Value` returning `$true` (the same to `[AutomationNull]::Value -eq [NullString]::Value`).\r\n@mklement0 Do you have any concerns?",
      "created_at": "2019-06-17T14:48:02Z",
      "updated_at": "2019-06-17T14:48:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw everything looks like it's all good, to the best of my ability. \ud83d\ude04 \r\n\r\n@mklement, do you have any concerns about the comparison logic discussed here? (https://github.com/PowerShell/PowerShell/pull/9794#issuecomment-502417341 and https://github.com/PowerShell/PowerShell/pull/9794#issuecomment-502714647)",
      "created_at": "2019-06-18T21:27:46Z",
      "updated_at": "2019-06-18T21:28:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for asking, @daxian-dbw  and @vexx32, and sorry for the late reply.\r\n\r\nThe intricacies of the implementation are beyond me, but here's my end-user input:\r\n\r\nMaking `[AutomationNull]::Value` consistently interchangeably with `$null` makes sense, I suppose, but I do wish we could also make the following return `$true`, which currently isn't:\r\n\r\n```\r\nusing namespace System.Management.Automation.Internal\r\n[AutomationNull]::Value -is [AutomationNull]  # should be $true\r\n```\r\n\r\nOn a related note - and that should probably be a separate issue - I wish that `Get-Member` acted differently:\r\n\r\n```\r\nGet-Member $noSuchVar  # should output $null - not fail, as it currently does\r\n[System.Management.Automation.Internal.AutomationNull]::Value | Get-Member # should indicate that no pipeline input was received, not fail \r\n```\r\n",
      "created_at": "2019-06-23T23:22:38Z",
      "updated_at": "2019-06-23T23:22:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Appreciate the input, @mklement0! Not sure about the latter, but seeing as the former already works with dbnull and nullstring it should probably be doable for automation null as well... Not sure exactly where that would need to be done, but I can take a look in a day or two :)",
      "created_at": "2019-06-24T03:37:20Z",
      "updated_at": "2019-06-24T03:37:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@mklement0 Thanks for the input!\r\n\r\n> `[AutomationNull]::Value -is [AutomationNull]  # should be $true`\r\n> but seeing as the former already works with dbnull and nullstring it should probably be doable for automation null as well... Not sure exactly where that would need to be done, but I can take a look in a day or two :)\r\n\r\n@vexx32 I suggest you to not work on supporting this in this PR. I'm not really sure we want to do that because it could cause confusion semantically -- `[AutomationNull]::Value` is treated as null in PowerShell (e.g. `[AutomationNull]::Value.GetType()` fails because it's not considered as an object), The current behavior is consistent and makes sense.",
      "created_at": "2019-06-24T15:22:09Z",
      "updated_at": "2019-06-24T15:22:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw \r\n\r\n> [AutomationNull]::Value is treated as null in PowerShell (e.g. [AutomationNull]::Value.GetType()\r\n\r\nYes, but we're now also treating `[DbNull]::Value` and `[NullString]::Value` as `$null`, correct?\r\n\r\nBut they are distinct types with distinct behaviors and _sometimes_ you want to know what specific type you're dealing with.\r\n\r\nAnd that currently only works (in a straightforward manner) with `[DbNull]::Value` and `[NullString]::Value` , with `-is <type>`.\r\n\r\nBy contrast, as shown above, it is far from trivial do distinguish between `$null` and `[AutomationNull]::Value`, yet that distinction arguably carries the most meaning in terms of behavior (sending something through the pipeline vs. not).\r\n\r\nDo you not see value in detecting `[AutomationNull]::Value`, or do you envision a different solution?",
      "created_at": "2019-06-24T15:45:38Z",
      "updated_at": "2019-06-24T15:45:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I do see your point there, and we can always add this later...\r\n\r\nHowever. There already _is_ a disparity between `$null` and `[AutomationNull]` in that respect. For example:\r\n\r\n```powershell\r\nusing namespace System.Management.Automation.Internal\r\n$null -is [psobject] # returns $false\r\n[AutomationNull]::Value -is [psobject] # returns $true\r\n```\r\n\r\nIf we want AutomationNull to properly mimic $null as much as possible (minus the pipeline behaviour of course) it might possibly make _more_ sense to have it actually inherit PSObject or something along those lines. And for the few cases where we do actually need to distinguish $null from [AutomationNull] it would be helpful to have it also be properly recognised with `-is`. \ud83d\ude15 ",
      "created_at": "2019-06-24T16:16:51Z",
      "updated_at": "2019-06-24T16:19:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Yes, but we're now also treating `[DbNull]::Value` and `[NullString]::Value` as `$null`, correct?\r\n\r\nNo exactly, that's why the method added in `LanguagePrimitive` to check for them is called `IsNullLike` -- the change is only around when comparing `[DBNull]::Value` or `[NullString]::Value` with `$null` and `[AutomationNull]::Value`, and when casting `[DBNull]::Value` and `[NullString]::Value` to `bool`. `[System.DBNull]::Value.GetType()` still give you the type `DBNull`.\r\n\r\n> Do you not see value in detecting [AutomationNull]::Value, or do you envision a different solution?\r\n\r\nPersonally, I don't see the value to differentiate `$null` and `[AutomationNull]::Value`. They should be the same, only with on difference that should be meaningful only to the engine -- `[AutomationNull]::Value` means not passing along the pipeline while `$null` does.\r\n\r\n@vexx32 Thanks for showing that example (I didn't know it before :)). The comments you put in the code snippet are reversed though, `$null -is [psobject]` returns `false` and the other one returns `true`.\r\nYes, that's inconsistent, and how to fix that (if we want to) depends on how we want to treat `[AutomationNull]::Value` -- more of an implementation detail, or something that makes sense for users to depend on and be able to tell.",
      "created_at": "2019-06-24T16:27:31Z",
      "updated_at": "2019-06-24T16:29:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I noticed that went I went to check it myself; I've edited the comments. \ud83d\ude04 \r\n\r\nGiven there are circumstances where the difference between $null and [AutomationNull] _do_ matter to the user -- for example:\r\n\r\n```powershell\r\n@($null).Count # outputs 1\r\n@([AutomationNull]::Value).Count # outputs 0\r\n```\r\n\r\n(The above method is another way, of course, as well.) Given that, I don't see any harm in permitting users to check for it explicitly with `-is [AutomationNull]`, really. If they really want to check it, there are already ways to do so, so I think we are better off permitting a more clear and explicit way to check for it, rather than forcing users to rely on this kind of hack. \ud83d\ude42 ",
      "created_at": "2019-06-24T16:38:18Z",
      "updated_at": "2019-06-24T16:39:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> `@([AutomationNull]::Value).Count # outputs 0`\r\n\r\nMaybe we should fix this \ud83d\ude04, to make it more like a `$null`.",
      "created_at": "2019-06-24T17:05:13Z",
      "updated_at": "2019-06-24T17:05:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Well, you say that, but... depending on the situation it can actually be kind of tricky. Because technically a pipeline that doesn't emit output ends up storing `[AutomationNull]::Value` iirc.\r\n\r\nQuick example would be:\r\n\r\n```powershell\r\n$a = if ($False) { 2 }\r\n@($a).Count # currently 0\r\n```\r\nNow, if we \"fix\" this, I think we may end up with a case where piping the `$a` value starts to invoke a pipeline and pass the `$null` value, or at least may _seem_ like it should.\r\n\r\nThe farther you go, the trickier it becomes. \ud83d\ude09 \r\n\r\nI think the most sensible way to go is to accept that there are going to be cases where automationnull is detectable (after all, you can't just completely decouple engine behaviour and what the user sees in every case; one is dependent on the other), and for the few cases it can actually matter, give users some way to determine which is which.",
      "created_at": "2019-06-24T17:11:37Z",
      "updated_at": "2019-06-24T17:14:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's definitely worth discussion and the behavior should depend on the real use cases where `[AutomationNull]::Value` has to be differentiated from `$null`.\r\nI think you can open an issue to track the conversions around `[AutomationNull]::Value`. Once this PR is merged, the discussion here could be lost.",
      "created_at": "2019-06-24T17:34:27Z",
      "updated_at": "2019-06-24T17:34:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @vexx32 Thanks for showing that example (I didn't know it before :)). The comment you put in the code snippet are reversed though, `$null -is [psobject]` returns `false` and the other one returns `true`.\r\n> Yes, that's inconsistent, and how to fix that (if we want to) depends on how we want to treat `[AutomationNull]::Value` -- more of an implementation detail, or something that makes sense for users to depend on the be able to tell.\r\n\r\nIdeally if this were to be fixed it would just be removed from assignment, e.g. `$obj = [AutomationNull]::Value` would populate `$obj` with true `null`.  The `-is` operator is one of the few things that never \"lie\" on occasion and I think it would be a detriment to change that.\r\n\r\nYou can also make `[AutomationNull]::Value -is [AutomationNull]` work by:\r\n\r\n1. Removing the `static` keyword from the class decl\r\n1. Make it inherit `PSObject`\r\n1. Change the singleton instance to `new AutomationNull()`\r\n\r\nThat would allow `$autoNull -is [psobject]` to still work while enabling `$autoNull -is [AutomationNull]`.  Though I think there are a few places in the compiler where it uses a pattern like `if (expr.ExpressionType == typeof(PSObject) && expr.Value == AutomationNull.Value)` so that might need to change.",
      "created_at": "2019-06-24T17:35:47Z",
      "updated_at": "2019-06-24T17:35:47Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher Can you please quickly review this PR? Thanks!",
      "created_at": "2019-06-24T17:55:32Z",
      "updated_at": "2019-06-24T17:55:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'll write up a quick issue and link back here for the [automationnull] discussion & CC you guys so we can have a more focused discussion on that. \ud83d\udc96 \r\n\r\n(Thanks for the details, Patrick!)",
      "created_at": "2019-06-24T17:57:24Z",
      "updated_at": "2019-06-24T17:57:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 2 hours",
      "created_at": "2019-06-28T15:16:39Z",
      "updated_at": "2019-06-28T15:16:39Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, this is the reminder you requested 2 hours ago",
      "created_at": "2019-06-28T17:16:53Z",
      "updated_at": "2019-06-28T17:16:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Thanks for the great work!",
      "created_at": "2019-06-29T05:58:46Z",
      "updated_at": "2019-06-29T05:58:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:35Z",
      "updated_at": "2019-07-17T20:56:35Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "Why these behavior changes between version 5.1 and version 7.0, are not shown as a breaking change ?",
      "created_at": "2019-07-18T09:56:24Z",
      "updated_at": "2019-07-18T09:56:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@LaurentDardenne Good catch. Will add this to breaking changes in the release log.",
      "created_at": "2019-07-18T15:22:02Z",
      "updated_at": "2019-07-18T15:22:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Should it be CL-BreakingChange?",
      "created_at": "2019-07-19T03:00:19Z",
      "updated_at": "2019-07-19T03:00:19Z"
    }
  ],
  "created_at": "2019-06-01T08:13:57Z",
  "number": 9794,
  "state": "closed",
  "title": "Consider DBNull.Value and NullString.Value the same as $null",
  "updated_at": "2019-07-19T16:44:01Z"
}