{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2137",
  "author": "SteveL-MSFT",
  "body": "**PROBLEM**\nUsing the [ref] keyword with a class member silently fails, also using with parentheses makes it fail (hard to troubleshoot)\n\n**IMPACT**\nAPIs that use [ref] parameters cannot be used with class members.\n\n**REPRO**\n\n``` powershell\nFunction TryGetResolvedAndExpandedPath([ref] $result) {\n    $result.Value = 'Replaced'\n}\n\nclass Foo {\n    [string] $classVar\n}\n\nDescribe \"[ref] not working with class members\" {\n\n    $foo = [Foo]::new()\n    $foo.classVar = 'StartVal'\n    TryGetResolvedAndExpandedPath ([ref]($foo.classVar))\n\n    It \"should be replaced\" {\n        $foo.classVar | Should Be \"Replaced\"\n    }\n\n    TryGetResolvedAndExpandedPath ([ref]$foo.classVar)\n\n    It \"should be replaced\" {\n        $foo.classVar | Should Be \"Replaced\"\n    }\n\n    [string] $scriptVar = 'StartVal'\n    TryGetResolvedAndExpandedPath ([ref] $scriptVar)\n\n    It \"should be replaced\" {\n        $scriptVar | Should Be \"Replaced\"\n    }\n\n    [string] $scriptVar = 'StartVal'\n    TryGetResolvedAndExpandedPath ([ref]($scriptVar))\n\n    It \"should be replaced\" {\n        $scriptVar | Should Be \"Replaced\"\n    }\n}\n```\n\nPSEdition                      Core\nCLRVersion\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.9\nPSRemotingProtocolVersion      2.3\nPSVersion                      6.0.0-alpha\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\n",
  "closed_at": "2018-12-20T19:14:32Z",
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "It has never been supposed to work that way. See <a href=\"https://msdn.microsoft.com/en-us/library/system.management.automation.psreference(v=vs.85).aspx\" target=\"_blank\">documentation</a> (Remarks, there's no saying about using it with a class member, whether it's a field, property or anything else). Moreover, reading the code of `PSReference` reveals the reason -- it is supposed to support variables and values only.\n\nMoreover, PowerShell does need marshalling when you call CLR methods with `ref` -- the value is not directly stored into the variable as the method executes, instead, it is stored after the call completes (this is different from CLR method call). For example:\n\n``` PowerShell\nAdd-Type -TypeDefinition 'public class Foo\n{\n    public string ClassField;\n    public static void EditStringAndThrow(ref string str) { str = \"Edited\"; ((object)null).ToString(); }\n    public void EditStringAndThrow() { EditStringAndThrow(ref ClassField); }\n}';\n$str = 'Initial';\n[Foo]::EditStringAndThrow($str);\n$str; <# Gives Initial. #>\n$foo = [Foo]::new(); $foo.ClassField = 'Initial';\n$foo.EditStringAndThrow();\n$foo.ClassField; <# Gives Edited. #>\n```\n\nTo explain why parentheses fail the `ref`, just note that with a pair of parentheses, the expression is no longer a variable, it's a compound expression therefore the constructor `PSReference(object value)` is used -- the `ref` has nothing to do with that variable, it's a value reference. This is a feature so that you don't really have to receive the value produced by a cmdlet/function if you don't want it.\n",
      "created_at": "2016-08-31T15:22:35Z",
      "updated_at": "2016-08-31T15:22:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps this is just a doc issue\n",
      "created_at": "2016-08-31T16:11:05Z",
      "updated_at": "2016-08-31T16:11:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We should do something - ideally support the feature or report a parse error.\n",
      "created_at": "2016-08-31T16:22:15Z",
      "updated_at": "2016-08-31T16:22:15Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "[ref] really only exists for COM. With COM, there are cases where you need to pass a value _in_ by reference so the example with the object property is not an error. It's by design.\n",
      "created_at": "2016-08-31T19:05:15Z",
      "updated_at": "2016-08-31T19:05:15Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@lzybkr unluckily that'll be a breaking change. For those examples here that doesn't do the \"ref a variable\" thing, they create a **value ref** instead, and is a feature, by design.\n\nImagine a function:\n\n``` PowerShell\nFunction Use-Ref\n{\nParam ([ref]$OutputRef)\nWrite-Output $OutputRef.Value;\n$OutputRef.Value = 42;\n}\n```\n\nThe following things are pretty equivalent in terms of calling `Use-Ref`:\n\n``` PowerShell\nUse-Ref ([ref]1)\n# create a ref from value 1\n# the ref is not used after the call\n```\n\n``` PowerShell\n$a = 1\nUse-Ref ([ref]($a))\n# use the value of $a as the parameter's\n# initial value but do not store the notified value back.\n```\n\n``` PowerShell\n$a = New-Object PSObject -Property @{ Prop = 1 }\nUse-Ref ([ref] $a.Prop)\n# evaluate the expression $a.Prop\n# and create a value ref.\n```\n\nIt is crucial to understand that `([ref]$a)` is special -- the only syntax to create a **variable** ref, which means PowerShell engine will write the value back to that variable after the cmdlet/function finishes.\n",
      "created_at": "2016-08-31T19:06:08Z",
      "updated_at": "2016-08-31T19:06:08Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "GeeLaw's assessment is pretty accurate. [ref] is \"special\" with only limited scenarios being covered. If it wasn't for COM, [ref] wouldn't exist. So If you're using [ref] and not doing COM you're probably doing it wrong.\n",
      "created_at": "2016-08-31T19:24:24Z",
      "updated_at": "2016-08-31T19:24:24Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@BrucePay weirdly, I dont really see any common cmdlets using `ref`. I encounter most of my `ref`s in a method call.\n",
      "created_at": "2016-08-31T19:28:26Z",
      "updated_at": "2016-08-31T19:28:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I suggest we document that [ref] is intended for COM interop and the need for in/out params are handled by different means\n",
      "created_at": "2016-08-31T19:35:56Z",
      "updated_at": "2016-08-31T19:35:56Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "Is this User Voice the same issue ?\n\nBUG : [Class] Can't override a C# method with an argument of type out\nhttps://windowsserver.uservoice.com/forums/301869-powershell/suggestions/13191009-bug-class-can-t-override-a-c-method-with-an-a\n",
      "created_at": "2016-10-21T15:27:53Z",
      "updated_at": "2016-10-21T15:27:53Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@fmichaleczek different, but related. Thank you for adding it to the discussion!\n",
      "created_at": "2016-10-21T15:54:16Z",
      "updated_at": "2016-10-21T15:54:16Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Going back to your original issue, you should be aware that `[ref]` can be applied to values as well as variables:\r\n```\r\nPS[1] (70) > [ref] 1\r\nValue\r\n-----\r\n    1\r\n```\r\nThis is what's happening in your example. When you do `[ref] ($foo.classvar)` you are actually creating a reference to the **value** returned by `classvar`:\r\n```\r\nPS[1] (71) > class Foo {\r\n>>     [string] $classVar\r\n>> }\r\nPS[1] (72) > $x = [foo]::new()\r\nPS[1] (73) > $x.classVar -eq $null\r\nTrue\r\nPS[1] (74) > $r = [ref] ($x.classVar)\r\nPS[1] (75) > $r.Value -eq $null\r\nTrue\r\n```\r\nSo `[ref]` is working as intended.\r\n",
      "created_at": "2018-03-13T18:14:17Z",
      "updated_at": "2018-03-13T18:14:17Z"
    },
    {
      "author": "ChrisMagnuson",
      "author_association": "NONE",
      "body": "I have needed to use `[ref]` when working with a few different soap based web services via `New-WebServiceProxy` that required `[ref]` variables for things like error strings.\r\n\r\nThe functions would error without being called with a `[ref]` variable passed in for that parameter making `[ref]` required as far as I could figure out to use the web service.",
      "created_at": "2018-12-04T15:06:10Z",
      "updated_at": "2018-12-04T15:06:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this since we have a doc issue opened",
      "created_at": "2018-12-20T19:14:32Z",
      "updated_at": "2018-12-20T19:14:32Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I tripped over this today, docs issue is still open :-(",
      "created_at": "2020-01-02T14:08:03Z",
      "updated_at": "2020-01-02T14:08:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We also don't have a proper way to handle in/out variables, judging from the discussion above and the lack of anything other than `[ref]` being available. \ud83d\ude15 ",
      "created_at": "2020-01-02T15:52:16Z",
      "updated_at": "2020-01-02T15:52:16Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I think we should definitely open a feature request issue for this and other things.\r\nToday I wrote a local `Update-ConnectionString` helper function and instead of calling it as `$configObject.connectionstrings[$index] = Update-ConnectionString $configObject.connectionstrings[$index] -otherparams $foo`, it would've been much more elegant to call it as `Update-ConnectionString ([ref]$configObject.connectionstrings[$index]) -otherparams $foo`",
      "created_at": "2020-01-02T15:58:29Z",
      "updated_at": "2020-01-02T15:58:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> it would've been much more elegant to call it as `Update-ConnectionString ([ref]$configObject.connectionstrings[$index]) -otherparams $foo`\r\n\r\nI'd love that so much, but I'm not really sure how that would be doable.  You can't safely store a managed pointer on the heap, so a general purpose `[ref]` that works in all places where `ref/in/out` work doesn't seem possible.  Maybe the compiler could have special handling and create a `PSReference` with an instance/array and a field name/index?  Not sure if enough people would use it unfortunately :/",
      "created_at": "2020-01-07T14:16:14Z",
      "updated_at": "2020-01-07T18:36:38Z"
    }
  ],
  "created_at": "2016-08-30T23:20:18Z",
  "labels": [
    "WG-Language",
    "Resolution-External"
  ],
  "number": 2137,
  "state": "closed",
  "title": "[ref] doesn't work with class members",
  "updated_at": "2020-01-07T18:36:38Z"
}