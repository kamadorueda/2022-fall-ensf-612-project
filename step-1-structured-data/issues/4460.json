{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4460",
  "author": "Vetal-ca",
  "body": "I am trying to run dot-net core app from \"Host Powershell\" section., https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell\r\nSo I can run .net app which require PS sessions support in minimalistic environment\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n\r\n1. Make sure you have your Docker daemon in Linux mode or just run it on Linux host\r\n2. Save following dockerfile locally as Dockerfile.1.1.2_ps:\r\n```\r\nFROM buildpack-deps:jessie-scm\r\n\r\n# Install .NET CLI dependencies\r\nRUN apt-get update \\\r\n    && apt-get install -y --no-install-recommends \\\r\n        libc6 \\\r\n        libcurl3 \\\r\n        libgcc1 \\\r\n        libgssapi-krb5-2 \\\r\n        libicu52 \\\r\n        liblttng-ust0 \\\r\n        libssl1.0.0 \\\r\n        libstdc++6 \\\r\n        libunwind8 \\\r\n        libuuid1 \\\r\n        zlib1g \\\r\n        apt-transport-https\t\\\r\n\t\tgit-core\\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n# Install .NET Core SDK\r\nENV DOTNET_SDK_VERSION 1.0.4\r\nENV DOTNET_SDK_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-debian-x64.$DOTNET_SDK_VERSION.tar.gz\r\nENV DOTNET_CLI_TELEMETRY_OPTOUT 1\r\n\r\n\r\nRUN curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\r\n    && mkdir -p /usr/share/dotnet \\\r\n    && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\r\n    && rm dotnet.tar.gz \\\r\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet \\\r\n\t&& mkdir /scripts\r\n\r\n# Trigger the population of the local package cache\r\nENV NUGET_XMLDOC_MODE skip\r\nRUN mkdir warmup \\\r\n    && cd warmup \\\r\n    && dotnet new \\\r\n    && cd .. \\\r\n    && rm -rf warmup \\\r\n&& rm -rf /tmp/NuGetScratch\r\n\r\n\r\n#install powershell\r\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\r\n\t&& curl https://packages.microsoft.com/config/ubuntu/14.04/prod.list | tee /etc/apt/sources.list.d/microsoft.list \\\r\n\t&& apt-get update \\\r\n\t&& apt-get install -y powershell\r\n\r\n# get powershell source \r\nRUN mkdir -p /projects/PowerShell && git clone https://github.com/PowerShell/PowerShell.git /projects/PowerShell\r\n\r\nWORKDIR /projects/PowerShell/docs/host-powershell/sample-dotnet1.1\r\n\r\nENTRYPOINT /bin/bash\r\n\r\n```\r\n\r\nThis comes from Docker hub plus code to install repo and pull Powershell repo, so there is standard and ready environment for the test\r\n\r\nThen, run\r\n`\r\ndocker build -t powershell_test -f Dockerfile.1.1.2_ps . & docker run -ti --rm powershell_test\r\n`\r\n\r\nYou'll end up in sample-dotnet1.1 app directory.\r\n\r\nNext,\r\n```dotnet restore ./MyApp/MyApp.csproj```\r\n\r\nThis one succeeded and proper NuGet packckages are pulled, as it mentioned here:\r\nhttps://github.com/PowerShell/PowerShell/issues/2284\r\n\r\n>  NuGet Config files used:\r\n      /projects/PowerShell/docs/host-powershell/sample-dotnet1.1/NuGet.config\r\n      /projects/PowerShell/nuget.config\r\n      /root/.nuget/NuGet/NuGet.Config\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n      https://powershell.myget.org/F/powershell-core/api/v3/index.json\r\n\r\nThen, start application:\r\n```dotnet run --project ./MyApp/MyApp.csproj```\r\n\r\nExpected behavior\r\n-----------------\r\nApplication runs and produce output:\r\n```\r\n\r\n Get-Command Write-Output                                                                                                                                                               \r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Write-Output                                       3.1.0.0    Microsoft.PowerShell.Utility\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nappBase: /projects/PowerShell/docs/host-powershell/sample-dotnet1.1/MyApp/bin/Debug/netcoreapp1.1\r\n\r\nEvaluating 'Get-Command Write-Output' in PS Core Runspace\r\n\r\n\r\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.TypeInitializationException: The type initializer for 'System.Management.Automation.Runspaces.RunspaceFactory' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'api-ms-win-eventing-provider-l1-1-0.dll': The specified module could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\n   at System.Management.Automation.Tracing.EtwActivity.UnsafeNativeMethods.EventActivityIdControl(ActivityControlCode controlCode, Guid& activityId)\r\n   at System.Management.Automation.Tracing.EtwActivity.GetActivityId()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke()\r\n   at Application.Test.Logic.Start(String[] args) in /projects/PowerShell/docs/host-powershell/sample-dotnet1.1/Logic/UseRunspace.cs:line 20\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Management.Automation.PowerShellAssemblyLoadContextInitializer.InitializeAndCallEntryMethod(String basePaths, AssemblyName entryAssemblyName, String entryTypeName, String entryMethodName, Object[] args)\r\n   at Application.Test.Program.Main(String[] args) in /projects/PowerShell/docs/host-powershell/sample-dotnet1.1/MyApp/Program.cs:line 25\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.4\r\nOS                             Linux 4.9.36-moby #1 SMP Wed Jul 12 15:29:07 UTC 2017\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nNot being expert in .dotnet it is not quite clear what is missing here. I've tried to set different RID in project, \"debian.8-x64\" from \"dotnet --info\". Tried to publish & run. Tried to set AppBase to \"/opt/microsoft/powershell/6.0.0-beta.4/\"\r\n\r\nSame error. Ok, if there some Win-only assemblies, why \"powershell\" executable works right in the same container? It is using the same assemblies. Or, not, \r\n\r\nI am looking for a simple and concise  answer for \"mere mortals\". Otherwise, I have to run a hybrid swarm with Linux and Windows node just for Powershell only. Dealing with Windows docker is pain, just pain and bugs. Even after having few successful Linux Docker deliveries\r\n",
  "closed_at": "2017-09-26T22:07:30Z",
  "comments": [
    {
      "author": "panhsu",
      "author_association": "NONE",
      "body": "Hi,\r\n   I have the same issue but the version is .netcore 2.0.",
      "created_at": "2017-08-22T14:41:28Z",
      "updated_at": "2017-08-22T14:41:28Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@Vetal-ca \r\n\r\nJust to make sure. I notice you're on v6.0.0-beta.4.  Have you try with PowerShell v6.0.0-beta.5? \r\nTo make sure you're getting the same issue.\r\n:)",
      "created_at": "2017-08-22T15:03:47Z",
      "updated_at": "2017-08-22T15:03:47Z"
    },
    {
      "author": "panhsu",
      "author_association": "NONE",
      "body": "@MaximoTrinidad \r\nMy environment is PowerShell v6.0.0-beta.5.\r\n## Environment Data\r\n```sh\r\n PS /app> $PSVersionTable\r\n Name                           Value\r\n ----                           -----\r\n PSVersion                      6.0.0-beta\r\n PSEdition                      Core\r\n GitCommitId                    v6.0.0-beta.5\r\n OS                             Linux 4.9.41-moby #1 SMP Fri Aug 18 07:29:56 UTC 2017\r\n Platform                       Unix\r\n PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n PSRemotingProtocolVersion      2.3\r\n SerializationVersion           1.1.0.1\r\n WSManStackVersion              3.0\r\n```",
      "created_at": "2017-08-23T07:19:54Z",
      "updated_at": "2017-08-23T07:19:54Z"
    },
    {
      "author": "pmsanford",
      "author_association": "NONE",
      "body": "Same stack trace with the example on v6.0.0-beta.6 in .netcore 2.0 (in CentOS 7):\r\n\r\n```\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.6\r\nOS                             Linux 3.10.0-514.26.1.el7.x86_64 #1 SMP Thu Jun 29 16:05:25 UTC 2017\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2017-09-10T06:58:13Z",
      "updated_at": "2017-09-10T06:58:13Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "I can repro on Debian 8.\r\n\r\nLooks like this issue is because all PowerShell Core packages we published so far contain windows assemblies only.\r\nThis is blocking hosting powershell in .NET Core applications on Linux/OSX.\r\n\r\nEssentially this is a direct result/duplicate of #3417 ",
      "created_at": "2017-09-26T22:07:30Z",
      "updated_at": "2017-09-26T22:07:30Z"
    }
  ],
  "created_at": "2017-08-02T01:39:34Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 4460,
  "state": "closed",
  "title": "Run powershell samples in clean dotnet core container",
  "updated_at": "2017-09-26T22:07:30Z"
}