{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5678",
  "author": "jazzdelightsme",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nmkdir Foo\r\ncd foo\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n    Working directory ends in `\\Foo`.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n    Working directory ends in `\\foo`. (note the difference in case)\r\n```\r\n\r\nRemarks\r\n---------------\r\nI originally thought this issue belonged with #1273, but that is about tab completion and globbing on non-Windows platforms, whereas this does not involve tabbing or globbing, and is on Windows.\r\n\r\nThis problem can cause problems with git and [other things](https://github.com/vuejs/vue-cli/issues/648#issuecomment-350622047).\r\n\r\nIf I use cmd.exe instead, it gives the expected/desired results.\r\n\r\nOn case-**sensitive** systems, I don't know what the correct behavior should be (reject it if the path doesn't exist, or automagically switch to the fs-matching case)... perhaps it should be controlled by the same settings as in #1273.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPS C:\\Users\\danthom> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17047.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17047.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2019-04-23T20:31:44Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, this has turned out to be much more complicated than I anticipated.  [DirectoryInfo]::GetFiles() and GetDirectories() aren't working correctly on macOS.  I'll need to open a issue for corefx. https://github.com/dotnet/corefx/issues/26797",
      "created_at": "2018-02-02T17:30:51Z",
      "updated_at": "2018-02-02T20:53:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "DotNet Issue was closed without resolution. :confused:",
      "created_at": "2018-05-08T09:06:27Z",
      "updated_at": "2018-05-08T09:06:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'll investigate this again once I find some time.",
      "created_at": "2018-05-09T01:20:53Z",
      "updated_at": "2018-05-09T01:20:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe we need to follow C# as discussed in #6833 and develop language means for creating portable scripts.",
      "created_at": "2018-05-09T12:31:44Z",
      "updated_at": "2018-05-09T12:31:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jazzdelightsme:\r\n\r\n> On case-**sensitive** systems, I don't know what the correct behavior should be (reject it if the path doesn't exist, or automagically switch to the fs-matching case)...\r\n\r\nThere's at least one case in which the path should be _rejected_:\r\nIf there's ambiguity due to the presence of more than 1 case-variant folder: e.g, if you specify `test` and both `TEST` and `Test` exist.\r\n\r\nIf there is no ambiguity - just 1 case-variant match - I suppose targeting that automatically is an option, but note that for consistency we'd then have to implement the same logic wherever file/directory paths are accepted, such as `Get-Content`.\r\n\r\nI suspect that that behavior would ultimately be too obscure and I suggest we keep a clean separation between:\r\n\r\n* _literal_ names that _must_ be case-exact on case-sensitive filesystems.\r\n\r\n* (possibly opt-in) case-_insensitive_ tab-completion and wildcard matching, where ambiguity can be resolved by cycling through / returning multiple matches.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-09-03T16:18:39Z",
      "updated_at": "2018-09-03T16:18:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the issue at hand:\r\n\r\n**macOS**:\r\n\r\nhttps://github.com/dotnet/corefx/issues/26797 is indeed resolved, but the issue at hand persists, and it is _PowerShell_ that is the culprit (in the following examples, a `Test` directory is created, and it is accessed via its all-lowercase variant, `test`):\r\n\r\n```powershell\r\nPS> mkdir -p /tmp/Test; Set-Location /tmp/test; $PWD.Path\r\n/tmp/test # !! *input* case was preserved, even though the actual name is a case variant\r\n```\r\n\r\nUsing .NET Core does NOT exhibit this behavior:\r\n\r\n```powershell\r\nPS> mkdir -p /tmp/Test; [Environment]::CurrentDirectory = '/tmp/test'; [Environment]::CurrentDirectory\r\n/private/tmp/Test  # OK: actual dir. name is reflected in the last path component\r\n```\r\n\r\n(Note that `/tmp` is a symlink to `/private/tmp` on macOS.)\r\n\r\n**Windows**:\r\n\r\nUnlike on macOS, it is _.NET itself_ and, I suspect, ultimately the Windows API that behaves this way, so if we want to fix this behavior, we'll have to do it in PowerShell (as `cmd.exe` apparently does):\r\n\r\n```powershell\r\nPS> $null = mkdir -Force $env:TEMP\\Test; [Environment]::CurrentDirectory = \"$env:TEMP\\test\"; [Environment]::CurrentDirectory\r\nC:\\Users\\jdoe\\AppData\\Local\\Temp\\test  # !! *input* case was preserved.\r\n```\r\n\r\n---\r\n\r\nNote that the behavior doesn't just affect `Set-Location` (`cd`), but also other cmdlets such as `Get-Item`.\r\n\r\n\r\n",
      "created_at": "2018-09-03T16:41:46Z",
      "updated_at": "2018-09-03T16:41:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks! I agree that it is PowerShell issue.\r\nPerhaps we should ask a more general question -see #1273 and #7221 last comment) - how much should we be case-sensitive/-insensitive on every platform?\r\n\r\n- on Windows, API preserves case but all comparisions is case-insensitive. PowerShell follow this.\r\n- on MacOs, API preserves case but all comparisions is case-insensitive. Currently PowerShell doesn't follow this. Bug? Should? I think yes.\r\n- on Linux, API preserves case and all comparisions is case-sensitive. PowerShell follow this. Here is the quesion - how much should we be case-sensitive on Linux taking #1273 into consideration? Perhaps we could be case-insensitive on Linux in other scenarios too. \r\nFor example, if a user accidentally types `dir /Etc` we could test that `/Etc` doesn't exists and then try `/etc` - is the behavior acceptable for Linux users? If yes, we could easily resolve the Issue and  #1273 in that way I suggested in  #7221.",
      "created_at": "2018-09-04T09:33:21Z",
      "updated_at": "2018-09-04T09:33:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Please see https://github.com/PowerShell/PowerShell/issues/5678#issuecomment-418155458 above.\r\n\r\nIn short: \r\n\r\n* I think _literal_ names should never be automatically case-corrected on case-sensitive filesystems, to avoid ambiguity.\r\n\r\n* It makes sense to offer case-_insensitivity_ for (a) tab-completion and (b) filename globbing, but I wonder if it should require an _explicit opt-in_ (perhaps via preference variables), at least for _globbing_.\r\n\r\n   * Otherwise, users may be surprised if `Get-Item test` doesn't find `.\\Test`, but `Get-Item test*` does, for instance.\r\n\r\n  * For ad-hoc use (as well as for [internal use in generating completions](https://github.com/PowerShell/PowerShell/issues/1273#issuecomment-320696245)), adding a `-CaseInsensitive` switch to `Resolve-Path` does make sense.\r\n\r\nThat said, as stated in https://github.com/PowerShell/PowerShell/issues/1273#issuecomment-324398879, the tricky thing is that a preference variable that controls globbing case-sensitivity, if set in the global scope, would potentially change the behavior of all _scripts_ run in-process, unless they explicit set the preference variable to the default in their scope.\r\n\r\nGiven that, perhaps the answer is to:\r\n\r\n* categorically use case-_insensitive_ globbing (and tab-completion) on all platforms, even on Linux.\r\n\r\n* offer case-_sensitive_ globbing, if desired, _only_:\r\n  * via the filesystem provider's `-Filter` parameter (though that could be confusing) \r\n  * via a `-CaseSensitive` (sic) switch added to `Resolve-Path` - for consistency, that switch would then have to be honored on Windows and macOS too, however (just documenting it as being ignored on these platform may not be enough to avoid confusion).\r\n\r\n",
      "created_at": "2018-09-04T17:17:57Z",
      "updated_at": "2018-10-09T15:38:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> categorically use case-insensitive globbing (and tab-completion)\r\n\r\nI agree with tab-completion but globbing - I think users will be surprised that `Copy-Item -Path $env:TEMP\\T*` will copy `$env:TEMP\\test` on Linux.",
      "created_at": "2018-09-05T12:48:15Z",
      "updated_at": "2018-09-05T12:48:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There ultimately is no _good_ solution here, but what appeals to me about the latter solution is its simplicity:\r\n\r\n* As a user, all you need to remember is that PowerShell wildcards are case-_insensitive_ _everywhere_ by default.\r\n\r\n  * Getting case-_sensitive_ filename globbing, if needed (probably rarely), must be requested explicitly with `-Resolve-Path -CaseSensitive` and _perhaps_ also the filesystem provider's `-Filter` parameter.\r\n    * I'm starting to think that the latter is not a good idea, though: on the one hand, there already are differences between `-Filter` and PS wildcards on Windows, but they are subtle and don't affect the majority use cases; on the other hand, `-Filter` is often used for _performance_ reasons alone, and having it be case-sensitive is then an inconvenience at best, and a subtle source of bugs at worst.\r\n\r\n* No new preference variables and therefore no associated issues with global state (\"convention over configuration\").\r\n\r\nObviously, the behavior would need documenting in [about_wildcards](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards).",
      "created_at": "2018-09-05T13:16:02Z",
      "updated_at": "2018-09-05T13:16:02Z"
    }
  ],
  "created_at": "2017-12-12T20:14:35Z",
  "labels": [
    "Resolution-Fixed",
    "Waiting - DotNetCore",
    "WG-Engine-Providers"
  ],
  "number": 5678,
  "state": "closed",
  "title": "Set-Location preserves case instead of matching filesystem on case-insensitive/preserving system",
  "updated_at": "2019-04-24T03:21:27Z"
}