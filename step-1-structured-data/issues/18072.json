{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18072",
  "author": "mklement0",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n` [NullString]::Value` was specifically introduced to pass a true `$null` value to `string`-typed method parameters.\r\nYet, during method overload resolution, it doesn't reliably select a `[string]`-based overload:\r\n\r\n```powershell\r\nclass Foo {\r\n  [string] Test([bool] $bar) { return 'bool'}\r\n  [string] Test([string] $bar) { return 'string' }\r\n}\r\n\r\n# *Should* select the `[string]` overload, but doesn't.\r\n[Foo]::new().Test([NullString]::Value)\r\n# OK, with cast:\r\n[Foo]::new().Test([string] [NullString]::Value)\r\n```\r\n\n\n### Expected behavior\n\n```console\nstring\r\nstring\n```\n\n\n### Actual behavior\n\n```console\nbool\r\nstring\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPowerShell Core 7.3.0-preview.7\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-09-16T00:35:57Z",
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Can I get some background on why `NullString` was introduced? Shouldn't `[string] $null` work already, or was it broken and deemed a breaking change to fix?\r\n\r\nIt looks like the `[NullString]::Value` prefers implicit conversion of null to false over implicit conversion to string. Don't quite remember C#'s implicit conversion rules to say how easy of a fix it would be.\r\n\r\nCan you play around with other overload sets? What if you add an explicit overload for `[NullString]`? Or something that it does not covert to, e.g. some other struct, but skip the bool one? ",
      "created_at": "2022-09-12T19:11:19Z",
      "updated_at": "2022-09-12T19:11:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`[string] $null` passes the empty string, not null: `'' -eq [string] $null` is `$true`.\r\nThis behavior also applies when passing `$null` to .NET methods, which - prior to the introduction of `[NullString]::Value` - made it impossible to pass true `null` to `string` parameters of .NET APIs. ",
      "created_at": "2022-09-12T20:26:37Z",
      "updated_at": "2022-09-12T20:26:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> What if you add an explicit overload for `[NullString]`?\r\n\r\nThe above implies that `[NullString]` isn't meant to be used as an actual type; its `::Value` property merely serves to indicate that it should be _translated to `null`_ in string contexts.\r\n\r\nBecause `[NullString]::Value` is a singleton of a [distinct type](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.Language.NullString), it should be easy to distinguish it from `$null` during overload resolution.\r\n",
      "created_at": "2022-09-12T20:55:12Z",
      "updated_at": "2022-09-12T21:10:22Z"
    }
  ],
  "created_at": "2022-09-12T15:08:10Z",
  "labels": [
    "Resolution-Fixed"
  ],
  "number": 18072,
  "state": "closed",
  "title": "Method overload resolution: [NullString]::Value doesn't guide toward picking a [string]-based overload",
  "updated_at": "2022-09-16T00:36:05Z"
}