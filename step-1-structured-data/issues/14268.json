{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14268",
  "author": "iSazonov",
  "body": "Here PerfView trace https://ru.files.fm/u/n2hqqsr7z\r\n![image](https://user-images.githubusercontent.com/22290914/100319461-7579dd80-2fe1-11eb-868a-3c618aef3bb7.png)\r\n\r\n- [x] ~GetFileAttributesExW() reported to .Net Runtime. I hope they can reduce these operations https://github.com/dotnet/runtime/issues/44545~ The referenced .NET issue was addressed.\r\n- [ ] PR #14411 newtonsoft.json It read powershell.config.json Expected perf win 50-100 ms.\r\n   - There is an idea to use defaults and exclude the file at all in release version. (We still need the file for preview versions for experimental features turn on/off.)\r\n   - We should migrate to .Net System.Text.Json API. It is expected being faster. \r\n- [x] ~CreateManifestAndDescriptors() I don't know if it's possible to remove this delay. Tracking issue https://github.com/dotnet/runtime/issues/45466~ This only appears when collecting ETW traces. See https://github.com/PowerShell/PowerShell/issues/14268#issuecomment-739464805\r\n- [x] ~PR #14320. SemanticVersion.op_Implicit There is dead code that we need to remove because we haven't received any feedback that it is needed. Expected perf win about 50 ms.~ PR closed because it's not dead code.\r\n- [x] ~microsoft.applicationinsights Perhaps we could lazy the initialization. PR #14281 - perf win from 30 to 100 ms.~\r\n- [x] PR #14283. InitialSessionState..cctor() See GetAppLockerPolicy() method.  Perf win ~10-30 ms\r\n- [x] ~Creation of explorer menu should be moved to right place (from line 184 to line 220) - it makes no sense to run the code in server mode - and be probably runned in background.~ Answered in https://github.com/PowerShell/PowerShell/issues/14268#issuecomment-740353164\r\n- [x] Use `StringComparison.Ordinal` insted of `StringComparison.CurrentCulture` in `string.StartsWith()` in `ConsoleHost.Start()`. It is slow ICU initialization. PR #14298 - perf win ~5 ms.\r\n- [ ] We use `string.ToLowerInvariant()` in `CommandLineParser.GetSwitchKey()`. It is slow ICU initialization - 26 ms! Reported to https://github.com/dotnet/runtime/issues/40942#issuecomment-735383698\r\n- [x] PR #14298. Use `StringComparison.Ordinal` instead of `StringComparison.CurrentCulture` at startup time. It removes early Culture initialization.  \r\n- [x] PR #14303. Use `OrdinalIgnoreCase` in `CommandLineParser`. It removes early Culture initialization. \r\n- [x] PR #14323. Exclude `string.ToLowerInvariant()` in `GetEnvironmentVariableAsBool()`. It is slow ICU initialization.\r\n- [x] Exclude loading `System.Diagnostics.FileVersionInfo.dll` on Windows in `AmsiUtils.Init()`. https://github.com/PowerShell/PowerShell/pull/14332#issuecomment-739549844\r\n- [x] ~Review how we use (1) Jit paramteters, (2) crossgen.exe for same assemblies (Build.psm1) - it seems no effect on startup scenario~ Use .NET crossgen properties in `.csproj` files. All shipped assemblies are R2R images now.\r\n- [ ] Benefit from modern CrossGen2 and dotnet-pgo\r\nhttps://github.com/dotnet/runtime/tree/master/src/coreclr/tools/dotnet-pgo\r\n \r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.1-62-g15e4e8a6af2f120bbd1eef8607131d878677c0ad\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> EventSource.CreateManifestAndDescriptors() I don't know if it's possible to remove this delay.\r\n\r\nYou see this because PerfView is collecting ETW tracing. When ETW is not collected, which is the case in a real pwsh startup scenario, no ETW trace will actually get written out and thus this method won't be called at all.",
      "created_at": "2020-12-06T06:59:39Z",
      "updated_at": "2020-12-06T06:59:39Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding point 7: Feel free to move the code to a more appropriate place but just to let you know that inside it, it creates a non-blocking thread so it should incur hardly any cost, there is also low level code making the procedure a no-op in the case of non-interactive shell",
      "created_at": "2020-12-08T03:36:45Z",
      "updated_at": "2020-12-08T03:36:45Z"
    },
    {
      "author": "89z",
      "author_association": "NONE",
      "body": "In the interest of finding the least bad option, I did a test, against all the minor versions to current. The test:\r\n\r\n~~~\r\nMeasure-Command { .\\pwsh -noprofile -c exit }\r\n~~~\r\n\r\nVersion | Milliseconds\r\n--------|-------------\r\n5.1     | 83\r\n6.0.0   | 201\r\n6.1.0   | 214\r\n6.2.0   | 184\r\n7.0.0   | 217\r\n7.1.0   | 203\r\n7.1.3   | 216\r\n\r\nSo based on this, I will be using version 6.2.0, and just keep checking every minor version to see if things have improved.",
      "created_at": "2021-05-30T14:15:10Z",
      "updated_at": "2021-05-30T14:16:30Z"
    },
    {
      "author": "sergeevabc",
      "author_association": "NONE",
      "body": "Question from https://github.com/PowerShell/PowerShell/issues/6443:\r\n\r\n> Dear fellows, I am tired that PS 5.1 currently installed on my Windows 7 x64 (please, don\u2019t even mention W10) is unable to  properly execute BOM-less *.ps1 with UTF8 strings (e.g. `$singer = \"Bj\u00f6rk\"; echo $singer` outputs as Bj\u0413\u00b6rk). That's why I downloaded both (portable) PS 6.2.7 and 7.2.0p7 and run as follows `pwsh.exe .\\test.ps1`. Indeed, they have no problem outputting UTF8, but the execution time is 2x slower: 320ms (5) vs 694ms (7) vs 760ms (6). Delay is noticeable and annoying.  \u2026[There was a trick][1] to make early PS run faster by `ngen install`. Is there something similar here, or we're doomed?\r\n\r\nThank you in advance.\r\n\r\n[1]: https://superuser.com/questions/627077/windows-powershell-is-taking-long-time-to-start-the-first-time-after-windows-log?noredirect=1&lq=1",
      "created_at": "2021-07-04T12:52:20Z",
      "updated_at": "2021-07-04T12:52:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  Is there something similar here, or we're doomed?\r\n\r\n.Net team works on the issue. I hope we will benefit from their efforts.",
      "created_at": "2021-07-04T16:53:38Z",
      "updated_at": "2021-07-04T16:53:38Z"
    }
  ],
  "created_at": "2020-11-26T07:32:51Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Performance",
    "Up-for-Grabs"
  ],
  "number": 14268,
  "state": "open",
  "title": "Startup performance PowerShell 7.2.0-Preview.1",
  "updated_at": "2022-09-01T23:37:31Z"
}