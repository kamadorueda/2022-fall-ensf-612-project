{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10897",
  "author": "SteelBlueVision",
  "body": "A very simple/question issue regarding the new coalescing operator:\r\n\r\n\\# This parses properly and works as expected\r\n`$MyVar ??= \"if null set to this\"`\r\n\r\nThis doesn't:\r\n\\# The two question marks become part of the variable name\r\n`$MyVar??=\"if null set to this\"`\r\n\\# The code is parsed as:  `${MyVar??} = \"if null set to this\"`\r\n\r\nWhy is a space before the first question mark absolutely necessary?\r\n",
  "closed_at": "2019-10-28T00:00:25Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Because, believe it or not, `?` is a valid character for a variable name.  So what you think doesn't work is parsed like this:\r\n```\r\n$MyVar?? = \"if null set to this\"\r\n```\r\nSo, according to PowerShell, this works as expected.  \r\n\r\nThere's been a discussion about disallowing `?` in variable names in PS7 for this reason but the worry is breaking existing scripts that use `?` in variable names.\r\n\r\nAt the very least there should be a new PSScriptAnalyzer rule that warns on script like `$MyVar??=\"if null set to this\"` to tell you that might not be doing what you expect.",
      "created_at": "2019-10-25T21:13:12Z",
      "updated_at": "2019-11-01T16:15:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-10-28T00:00:23Z",
      "updated_at": "2019-10-28T00:00:23Z"
    }
  ],
  "created_at": "2019-10-25T20:49:42Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 10897,
  "state": "closed",
  "title": "Powershell Core Preview 7.0.0-preview.5 null coalescing",
  "updated_at": "2019-11-01T16:15:50Z"
}