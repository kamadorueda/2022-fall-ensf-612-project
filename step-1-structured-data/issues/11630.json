{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11630",
  "author": "mikeTWC1984",
  "body": "\r\nAt the moment [CmsCommands](https://github.com/PowerShell/PowerShell/blob/3923ca172854b8f3b00dcd02b0f1829917758f10/src/Microsoft.PowerShell.Security/security/CmsCommands.cs) (Encrypting/Decrypting text with X509 cert) are only available on Windows. Those commands can be implemented with standard .net libraries, the only reason it's not working on Linux systems is that Util function that resolves certificate from string is using Cert: provider (which only implemented for Windows). Replacing cert: with X509Store class will make it work on linix systems.\r\n\r\nhere is the Util:\r\nhttps://github.com/PowerShell/PowerShell/blob/d58a82ad19fbfad81e85778c8b08cb1b28f58fce/src/System.Management.Automation/security/SecuritySupport.cs#L972\r\n\r\nThere are few lines referring to Cert:, for example\r\n\r\n\r\n```\r\n           string certificatePath = sessionState.Path.Combine(\"Microsoft.PowerShell.Security\\\\Certificate::CurrentUser\\\\My\", _identifier);\r\n                if (sessionState.InvokeProvider.Item.Exists(certificatePath))\r\n                {\r\n                    foreach (PSObject certificateObject in sessionState.InvokeProvider.Item.Get(certificatePath))\r\n                    {\r\n                        certificates.Add(certificateObject);\r\n                    }\r\n                }\r\n```\r\nIssue can be fixed by replacing it with something like that:\r\n```\r\nX509Store store = new X509Store(StoreLocation.CurrentUser);\r\nstore.Open(OpenFlags.ReadOnly);\r\n certificatesToProcess = store.Certificates.Find(X509FindType.FindBySubjectName,_identifier,false);\r\n```\r\n\r\nThis only affect ResolveFromSubjectName and ResolveFromThumbprint methods, so change is relatively small. I played with it on Ubuntu and didn't noticed any extra problems.\r\n",
  "closed_at": "2020-03-19T16:46:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mikeTWC1984 Welcome to contribute! Pull PR and we will discuss in depth.",
      "created_at": "2020-01-20T13:57:18Z",
      "updated_at": "2020-01-20T13:57:18Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "OK, here is the PR\r\nhttps://github.com/PowerShell/PowerShell/pull/11643\r\n\r\nThere is another method (bool CertIsGoodForEncryption) in CmsUtils that is using native calls (probably wont work on linux). It basically checks this condition:\r\n```\r\n Encryption certificates must contain the Data Encipherment or Key Encipherment key usage, and include the Document Encryption Enhanced Key Usage (1.3.6.1.4.1.311.80.1)\r\n```\r\n\r\nBut that seem to be overkill, all these key usages can be retrieved from  X509Certificate2  cert instance. More over, this check is not really needed to encrypt/decrypt data (I guess it's just following MSFT standards).  AFAIK any RSA key pair can be used for CMS encryption. For example openssl generated keys can be used for PKI encryption (using openssl cms) without setting any extra options . I guess for non-Windows systems this check can always return true (this would also be the easiest fix), since they mainly generate certs using openssl anyway.",
      "created_at": "2020-01-21T22:15:04Z",
      "updated_at": "2020-01-21T22:15:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @TravisEz13 @PaulHigin Please share your thoughts about @mikeTWC1984 comment.",
      "created_at": "2020-03-17T14:49:17Z",
      "updated_at": "2020-03-17T14:49:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@mikeTWC1984 This is a security standard.  Using a certificate not marked this way to encrypt or decrypt is a threat.  Key Usage ensures that you only use a properly secured cert (what every that standard is for your org) to do that kind of operation.  Allowing any cert, bypasses that assurance.",
      "created_at": "2020-03-18T21:00:49Z",
      "updated_at": "2020-03-18T21:00:49Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This type of attack was used in the Flame virus against Windows Update Agent/WSUS.  The EKUs involved where different, but the concept is the same.",
      "created_at": "2020-03-18T21:02:10Z",
      "updated_at": "2020-03-18T21:03:54Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13  Make sense. Since you mentioned this is a security concern - EKU check is implemented in the CMDlet itself, the actual .net class (EnvelopedCMS) is not checking it. So even Unprotect-CmsMessage would skip EKU check if cert is in the CurrentUser\\My store. \r\n\r\nI think we can close this, since the PR above  replaced native calls (Windows only)  with pure .net ",
      "created_at": "2020-03-19T16:46:27Z",
      "updated_at": "2020-03-19T16:46:27Z"
    }
  ],
  "created_at": "2020-01-20T03:00:20Z",
  "number": 11630,
  "state": "closed",
  "title": "CmsCommands - simple fix for linux",
  "updated_at": "2020-03-19T16:46:50Z"
}