{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2182",
  "author": "douglaswth",
  "body": "This fixes a regression that seems to have been introduced in PowerShell 5 where spaces in segments of a string with an even number of quotation marks even though some may be escaped are ignored for quoting when executing native programs.\n\nI discovered this issue when trying to run a utility that needs to have double quotes to delimit strings in its query language:\n\n``` powershell\nrsc json --x1 \"object:has(.name:val(\\`\"rs low space on C: drive\\`\"))\"\n```\n\nWith PowerShell versions before 5, this worked correctly and the query argument was accepted, but with PowerShell 5 the argument passed was getting through to the utility broken up: `object:has(.name:val(\"rs`, `low`, `space`, `on`, `C:`, `drive\"))`.\n\nOut of curiosity, I tried it out with the latest PowerShell 6 alpha and the same issue still exists, even on Linux! So I have come up with this fix which is to not count backslash escaped quotes in the quote count for the `appendOneNativeArgument` in `NativeCommandParameterBinder`.\n",
  "closed_at": "2016-09-15T02:07:56Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@douglaswth**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <span>We will now validate the agreement and then real humans will evaluate your PR.</span>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-09-04T04:35:25Z",
      "updated_at": "2016-09-04T04:35:25Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you, @douglaswth !\nCan you, please, add tests?\n",
      "created_at": "2016-09-07T18:43:47Z",
      "updated_at": "2016-09-07T18:43:47Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "To properly test it, we would need a cross-platform equivalent of [echoargs](https://chocolatey.org/packages/echoargs). It's a simple program that just returns the arguments that been passed.\n\nWe can implement it as `dotnet` application, similar to [ResGen](https://github.com/PowerShell/PowerShell/tree/master/src/ResGen) that we use in the build process.\n",
      "created_at": "2016-09-09T20:14:50Z",
      "updated_at": "2016-09-09T20:14:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "It's a very simple command.  Feel free to use this - if you want: https://github.com/Pscx/Pscx/blob/master/Src/EchoArgs/EchoArgs.cs\n\nShould compile on .NET Core.\n",
      "created_at": "2016-09-09T23:01:45Z",
      "updated_at": "2016-09-09T23:02:32Z"
    },
    {
      "author": "douglaswth",
      "author_association": "CONTRIBUTOR",
      "body": "@vors I have added tests that use `EchoArgs` via `dotnet`.\n\n@rkeithhill `EchoArgs` didn't quite compile on .NET Core due to the use of `Environment.CommandLine`, but that part was not necessary for my test so I have just left it commented out in the import.\n",
      "created_at": "2016-09-12T05:24:35Z",
      "updated_at": "2016-09-12T05:24:35Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Wow, that was fast! Great job! Let's make it vigorous. \n\ud83d\udd50 \n",
      "created_at": "2016-09-12T05:39:20Z",
      "updated_at": "2016-09-12T05:39:20Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": ":clock230:  \n",
      "created_at": "2016-09-12T17:24:31Z",
      "updated_at": "2016-09-12T17:24:31Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I verified this behavior is aligned with bash and cmd.\nWe will merge it when you address comments about the tests.\n",
      "created_at": "2016-09-13T01:04:59Z",
      "updated_at": "2016-09-13T01:04:59Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you so much for the great contribution!\n",
      "created_at": "2016-09-15T02:08:18Z",
      "updated_at": "2016-09-15T02:08:18Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I just realised where this `*.nuget.props` file came from:\n\n```\nlog  : Generating MSBuild file .../test.nuget.props.\n```\n\ncc @andschwa \n",
      "created_at": "2016-09-15T16:45:19Z",
      "updated_at": "2016-09-15T16:45:19Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Ah, looks like the CLI team is making some serious progress!\n",
      "created_at": "2016-09-15T18:49:20Z",
      "updated_at": "2016-09-15T18:49:20Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "We still need to add a backslash before a backtick-escaped double quote? This does not solve the double-escaping problem. (That is, we have to escape a double quote for both PowerShell and CommandLineToArgvW.)\n",
      "created_at": "2016-09-20T02:35:21Z",
      "updated_at": "2016-09-20T02:35:21Z"
    }
  ],
  "created_at": "2016-09-04T04:35:21Z",
  "number": 2182,
  "state": "closed",
  "title": "Fix passing escaped double quoted spaces to native executables",
  "updated_at": "2016-09-20T02:35:21Z"
}