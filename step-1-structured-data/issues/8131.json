{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8131",
  "author": "paalbra",
  "body": "## PR Summary\r\n\r\nCurrently Start-Transcript will delete the file it refers to if it's not set to append. This might lead to issues if the user running the command only has access to the file and not the parent folder. This PR makes sure the file is emptied rather than deleted. There are more details in the issue. Fix #4065. \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n\r\n## P.S.\r\n\r\nThis is my first PR in this project. I'm hopefully doing things right...",
  "closed_at": "2018-11-07T03:34:43Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My understanding is that currently we write an error and remove the file. Your suggestion is  don'nt remove the file but wipe. Right?\r\n\r\n/cc @mklement0 What do you think about the special case?",
      "created_at": "2018-10-27T10:44:12Z",
      "updated_at": "2018-10-27T10:44:12Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "> My understanding is that currently we write an error and remove the file. Your suggestion is don'nt remove the file but wipe. Right?\r\n\r\nWell, kind of. The file is deleted and when Start-Transcript tries to recreate the file you get an access denied error (if the access is set in a way mentioned in #4065 ). But it is a bit OS/filesystem dependent.\r\n\r\nThis can be avoided by not deleting the file, but rather wiping it.\r\n\r\nThe fix should not alter the behavior of successful usage of Start-Transcript, but it will fix this special access case.",
      "created_at": "2018-10-27T11:44:41Z",
      "updated_at": "2018-10-27T11:44:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@paalbra Thanks for clarification! I don't like the change because there can be very many permission combinations and we can not address all cases. Ex.: user could allow file removing and disable creation or create as read-only. Also on user system there could be a protection application which can overlap system assigned permissions.",
      "created_at": "2018-10-27T15:24:29Z",
      "updated_at": "2018-10-27T15:24:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I too agree that we shouldn't special-case this:\r\n\r\n`Start-Tanscript` makes no promises about preexisting files; it blindly tries to replace them, and always creates the new files with the default permissions.\r\n\r\nIn other words: loss of any preexisting file with the same name is always to be expected and no relationship between the old and the new file can and should be assumed.\r\n\r\nThat creation of a _new_ file then fails, is a separate issue, and requires that the permissions be set accordingly on the enclosing directory to allow file creation by the current user - which strikes me as reasonable.\r\n\r\n@paalbra: Your scenario sounds exotic and the steps to reproduce it (as shown in #4065) are quite involved. Is this a real-life scenario you've run into, and why would you expect to run into this repeatedly?\r\n",
      "created_at": "2018-10-27T18:46:27Z",
      "updated_at": "2018-10-27T18:46:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks!\r\n\r\n@SteveL-MSFT Please confirm that current behavior is \"by-design\" and we can not accept the PR.",
      "created_at": "2018-10-28T04:54:30Z",
      "updated_at": "2018-10-28T04:54:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "According to the [documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.host/start-transcript?view=powershell-6), one must use the existing `-NoClobber` switch otherwise the default is to clobber if the path is specified (otherwise it generates a unique log name to avoid collisions).  This is currently by-design.",
      "created_at": "2018-10-28T06:24:53Z",
      "updated_at": "2018-10-28T06:24:53Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I've run into this issue in my real-life environment. I don't view this issue as a special or exotic case myself.\r\n\r\nYou could even compare this to Out-File which also has an Append parameter. Out-File has no issues with the same access permissions set because Out-File doesn't delete the file. I would expect both commands to work in this setup and this is what I try to fix with this PR.",
      "created_at": "2018-10-28T18:42:14Z",
      "updated_at": "2018-10-28T18:42:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra I appreciate you bringing up this inconsistent experience and taking the time to submit a PR, however, we need to balance changes with impact to backwards compatibility.  In this specific case, it seems the current behavior is documented so it's not a strong enough justification to change the current behavior.  (I'm always open to reconsidering if there's sufficient community feedback)",
      "created_at": "2018-10-28T18:50:46Z",
      "updated_at": "2018-10-28T18:50:46Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "With the current behavior you also have other bad side effects. E.g. you can't point Start-Transcript to a symlink. If you do Start-Transcript will just delete the symlink and create a file.\r\n\r\nThere is simply no reason for Start-Transcript to delete the file. I should just overwrite the file. This is also what it says that it does in the documentation. Overwriting a file is not the same as recreating a file. So I think the current documentation and behavior don't match.",
      "created_at": "2018-10-28T18:51:06Z",
      "updated_at": "2018-10-28T18:51:06Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "I really can't agree that the behavior is the same as the documentation.\r\n\r\nAgain you could compare Start-Transcript and Out-File. They both have similar documentation when it comes to Append and NoClobber, but they do not behave the same way.",
      "created_at": "2018-10-28T18:56:31Z",
      "updated_at": "2018-10-28T18:56:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@paalbra: \r\n\r\nI see your point now: `Out-File` (without `-Append`)  / `>` and `Set-Content` indeed open a preexisting file and _truncate_ it before writing the new content.\r\n`>` in POSIX-like shells works the same.\r\n\r\nIn light of this, I think your PR has merit.\r\n\r\n@SteveL-MSFT: \r\n\r\nUnless I'm missing something, I think this PR would be an easy consistency improvement that shouldn't impact existing scripts.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-28T18:57:01Z",
      "updated_at": "2018-10-28T18:57:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra I misunderstood the intent, but thanks to @mklement0 I get it.  Based on the explanation, I would agree that this PR makes sense particularly in the symlink case.",
      "created_at": "2018-10-28T22:41:39Z",
      "updated_at": "2018-10-28T22:41:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra it would be great if you can add a test for this specific behavior.  You can probably just check the file creation date hasn't changed.",
      "created_at": "2018-10-28T22:43:42Z",
      "updated_at": "2018-10-28T22:43:42Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I'm not very familiar with the project yet, since this is my first PR, but I'll certainly look into adding more tests.",
      "created_at": "2018-10-29T10:19:56Z",
      "updated_at": "2018-10-29T10:19:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@paalbra  Tests is here https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.Powershell.Host/Start-Transcript.Tests.ps1",
      "created_at": "2018-10-29T13:33:42Z",
      "updated_at": "2018-10-29T13:33:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra Just give it a try and we'll make suggestions :)",
      "created_at": "2018-10-29T15:07:57Z",
      "updated_at": "2018-10-29T15:07:57Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, so I've tried to add a test that checks creation time, as suggested by @SteveL-MSFT , but I've encountered some problems.\r\n\r\nI've tried to add something like\r\n```powershell\r\n    It \"Should not change the creation time of existing file\" {\r\n        $oldDate = (Get-Date).AddDays(-1)\r\n        \"\" | Out-File -FilePath $transcriptFilePath\r\n        (Get-Item $transcriptFilePath).CreationTime = $oldDate\r\n        Start-Transcript -Path $transcriptFilePath\r\n        Stop-Transcript\r\n\r\n        (Get-Item $transcriptFilePath).CreationTime | Should -Be $oldDate\r\n    }\r\n```\r\n\r\nThe thing is that the CreationTime property on Windows apparently does not change when the file is recreated within a few seconds. This makes the whole test kind of useless since it won't fail.\r\n```\r\nPS C:\\temp> \"\" | Out-File temp.txt; (gi temp.txt).creationtime.tostring(\"o\"); del temp.txt; sleep -seconds 1; \"\" | Out-File temp.txt; (gi temp.txt).creationtime.tostring(\"o\")\r\n2018-10-29T22:13:09.4519817+01:00\r\n2018-10-29T22:13:09.4519817+01:00\r\n```\r\n\r\nAlso: I found out that on Ubuntu a modification of the CreationTime actually alters the LastAccessTime. So I can't really do the above test on Linux.\r\n```\r\nPS /home/myuser> \"\" | Out-File temp.txt\r\nPS /home/myuser> gi ./temp.txt | % {$_.creationtime.tostring(\"o\");$_.lastaccesstime.tostring(\"o\")}\r\n2018-10-29T22:32:19.7754239+01:00\r\n2018-10-29T22:32:19.7754239+01:00\r\nPS /home/myuser> (gi ./temp.txt).CreationTime = (get-date).adddays(-1)                               \r\nPS /home/myuser> gi ./temp.txt | % {$_.creationtime.tostring(\"o\");$_.lastaccesstime.tostring(\"o\")}\r\n2018-10-29T22:32:19.0000000+01:00\r\n2018-10-28T22:32:36.0000000+01:00\r\n```\r\n\r\nThe issue on Linux I could work around, but on Windows I'm not sure if I really can tell if a file has been deleted and recreated or not.\r\n\r\nI'm not really sure what to do here as I quickly run into these kind of filesystem/OS dependent issues. Any suggestions?",
      "created_at": "2018-10-29T22:26:40Z",
      "updated_at": "2018-10-29T22:26:40Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "A bit more of searching the web led me to the [FileSystemWatcher ](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=netcore-2.1) class.\r\n\r\nI guess I could use one of those and make a test that makes sure no file deletion events are emitted when running Start-Transcript. This seems a bit excessive to me though. Any thoughts?",
      "created_at": "2018-10-29T22:30:46Z",
      "updated_at": "2018-10-29T22:31:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra Thanks for making the effort.  I agree that using FileSystemWatcher is overkill for this.  I suspect you can't reply on the `CreationTime` because the filesystem or disk driver hasn't flushed it before the write happens within that window.  Another option (on Windows, perhaps skip on non-Windows) is to remove `Delete` permission from that file and check that no error is returned (see `Set-Acl`)",
      "created_at": "2018-10-29T22:49:29Z",
      "updated_at": "2018-10-29T22:49:29Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8131) <br/>All CLA requirements met.",
      "created_at": "2018-10-30T17:01:33Z",
      "updated_at": "2018-10-30T17:49:03Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "I decided to try the FileSystemWatcher path since I got it working on Windows and Ubuntu (the test is failing in master and passing in my branch).\r\n\r\nBut for some reason it's failing on MacOS. I'm really not sure why and I currently have no Mac available for debugging. I'll try to get my hands on a Mac some day soon though...",
      "created_at": "2018-10-30T18:00:48Z",
      "updated_at": "2018-10-30T18:00:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra there may be an issue in CoreFx where the file on macOS is deleted or that the event is being incorrectly raised",
      "created_at": "2018-10-30T18:30:24Z",
      "updated_at": "2018-10-30T18:30:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@paalbra looks like the file gets deleted on MacOS when you're not expecting it to, at least from the build logs:\r\n```\r\n2018-10-30T18:20:10.2962680Z TEST FAILURES\r\n2018-10-30T18:20:10.2962740Z Description: Should not delete the file if it already exist\r\n2018-10-30T18:20:10.2963680Z Name:        Start-Transcript, Stop-Transcript tests.Should not delete the file if it already exist\r\n2018-10-30T18:20:10.2963770Z message:\r\n2018-10-30T18:20:10.2964240Z Expected $null, but got 'FileDeleted'.\r\n2018-10-30T18:20:10.2964700Z stack-trace:\r\n2018-10-30T18:20:10.2965270Z at <ScriptBlock>, /Users/vsts/agent/2.141.1/work/1/s/test/powershell/Modules/Microsoft.Powershell.Host/Start-Transcript.Tests.ps1: line 127\r\n2018-10-30T18:20:10.2965760Z 127:         Receive-Job $job | Should -Be $null\r\n2018-10-30T18:20:10.2965830Z 1 tests in test/powershell failed\r\n2018-10-30T18:20:10.2965890Z At /Users/vsts/agent/2.141.1/work/1/s/build.psm1:1347 char:13\r\n2018-10-30T18:20:10.2966380Z +             throw \"$($x.'test-results'.failures) tests in $TestArea f ...\r\n2018-10-30T18:20:10.2966450Z +             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2018-10-30T18:20:10.2966990Z + CategoryInfo          : OperationStopped: (1 tests in test/powershell failed:String) [], RuntimeException\r\n2018-10-30T18:20:10.2967050Z + FullyQualifiedErrorId : 1 tests in test/powershell failed\r\n```",
      "created_at": "2018-10-30T18:32:34Z",
      "updated_at": "2018-10-30T18:32:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I have no explanation, but here's a data point: I just ran the test locally against this PR's code on my macOS 10.14 machine, and it succeeded in 100 successive invocations.",
      "created_at": "2018-10-30T19:46:24Z",
      "updated_at": "2018-10-30T19:46:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How we open the file? If \"Read shared\" we could open the file twice and check its content by second handle.",
      "created_at": "2018-10-31T04:49:55Z",
      "updated_at": "2018-10-31T04:49:55Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "So, I've gotten my hands on a Mac (10.13.6) and done some debugging.\r\n\r\nI also get failing results. Sometimes I actually see two file deletion events when running the test.\r\n\r\nThese failures seems to be related to the testdrive. I do not get failures if I modify the test to use some other path elsewhere. I'm not familiar with the testdrive and I honestly have no idea why the file somehow gets deleted multiple times from the testdrive when running the test. Apperently @mklement0 does not experience the same thing, which only makes it harder to understand.",
      "created_at": "2018-11-02T20:25:08Z",
      "updated_at": "2018-11-02T20:25:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @paalbra, but there's some consistency: I hadn't used the `testdrive:` drive in my tests.",
      "created_at": "2018-11-02T20:55:43Z",
      "updated_at": "2018-11-02T20:56:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps to help isolate if this is a `$TestDrive` issue or something due to PSDrives, can you try creating a PSDrive and see if you still get delete events?\r\n\r\n> New-PSDrive -PSProvider FileSystem -Name MyTestDrive -Root $env:TMPDIR",
      "created_at": "2018-11-02T22:51:32Z",
      "updated_at": "2018-11-02T22:51:32Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, so I've done some more testing. On MacOS the TestDrive doesn't seem to be \"clean\" between tests. Somehow the state/file deletion events \"bleed through\" from other tests. I've tried to resolve this by creating a new, unique path within my test and this seems to work. `$transcriptFilePath = Join-Path $TestDrive ([System.IO.Path]::GetRandomFileName())`\r\n\r\nAny thoughts or feedback on this method?",
      "created_at": "2018-11-03T16:45:53Z",
      "updated_at": "2018-11-03T16:45:53Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "I guess this is something you might want for all tests. So a better solution might be to create a new unique path in the `BeforeAll` block. I'm not sure I should touch that block in this PR though. It might be better to create this as an separate issue?",
      "created_at": "2018-11-03T16:54:48Z",
      "updated_at": "2018-11-03T16:54:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think creating a unique path for this PR is definitely the way to go.\r\n\r\nMy sense is that we needn't worry about the other tests, as they don't use file-system watchers.\r\n\r\nIt is curious that only macOS is affected, though. \r\n\r\nThere are several open issues for the `FileSystemWatcher` type in the CoreFx repo, though only \r\n one macOS-specific one and one cross-platform one: https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+filesystemwatcher++in%3Atitle\r\n\r\nAnother thing to try - though more out of curiosity, given that the use `[System.IO.Path]::GetRandomFileName()` seems like the best solution - is to call CLI `sync` beforehand, which commits pending disk writes system-wide - note that this can be expensive.\r\n\r\n\r\n",
      "created_at": "2018-11-03T18:07:50Z",
      "updated_at": "2018-11-03T18:07:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paalbra thanks for taking the time to investigate this.  My suggestion is for this PR to have the macOS specific code path (with appropriate comments).  Agree with @mklement0 that the other tests are probably ok although not ideal.  It may be worthwhile to see if `sync` helps which would indicate to me that this is an OS problem with caching.",
      "created_at": "2018-11-03T19:10:12Z",
      "updated_at": "2018-11-03T19:10:12Z"
    },
    {
      "author": "paalbra",
      "author_association": "CONTRIBUTOR",
      "body": "Adding `sync` doesn't seem to help. I've also tried adding sleep like this:\r\n\r\n```powershell\r\nIt \"Should not delete the file if it already exist\" {\r\n    # Create an existing file\r\n    #$transcriptFilePath = Join-Path $TestDrive ([System.IO.Path]::GetRandomFileName())\r\n    Out-File $transcriptFilePath\r\n    Start-Sleep -Seconds 20\r\n\r\n    $FileSystemWatcher = [System.IO.FileSystemWatcher]::new((Split-Path -Parent $transcriptFilePath), (Split-Path -Leaf $transcriptFilePath))\r\n\r\n    $Job = Register-ObjectEvent -InputObject $FileSystemWatcher -EventName \"Deleted\" -SourceIdentifier \"FileDeleted\" -Action {\r\n        return \"FileDeleted\"\r\n    }\r\n\r\n    Start-Transcript -Path $transcriptFilePath\r\n    Stop-Transcript\r\n\r\n    Unregister-Event -SourceIdentifier \"FileDeleted\"\r\n\r\n    # Nothing should have been returned by the FileSystemWatcher\r\n    Receive-Job $job | Should -Be $null\r\n}\r\n```\r\n\r\nThe above actually makes the test pass on MacOS.\r\n\r\nMy guess is that the `FileSystemWatcher` receives some kind of old events. Maybe events from the previous `AfterEach` block where the file is removed.\r\n\r\nI think the current solution, with unique file path, is the best for all OSes.",
      "created_at": "2018-11-03T20:46:53Z",
      "updated_at": "2018-11-03T20:46:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@paalbra Thanks for your contribution!",
      "created_at": "2018-11-07T03:35:09Z",
      "updated_at": "2018-11-07T03:35:09Z"
    }
  ],
  "created_at": "2018-10-26T13:08:59Z",
  "number": 8131,
  "state": "closed",
  "title": "When using `Start-Transcript` and file exists, empty file rather than deleting",
  "updated_at": "2019-01-17T04:49:06Z"
}