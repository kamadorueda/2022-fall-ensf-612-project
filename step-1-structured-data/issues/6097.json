{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6097",
  "author": "bergmeister",
  "body": "In `PowerShell,` it is possible to define a function e.g. as follows:\r\n````powershell\r\nfunction =$foo{ }\r\n````\r\nShould the Language Parser be more restrictive to not allow certain special characters? The motivation behind that question is:\r\n[PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) parses scripts as an `Ast` and uses it then to find out code smells. An example of a smell is the case where a developer was switching context from programming in `C#` to `PowerShell` and starts to write code like `if($a==$foo){}`, which the language parser accepts because one could have defined a function named `=$foo`. I can detect this in the Ast and flag it in `PSScriptAnalyzer` as a warning but I was wondering if would be better to fix this at a higher level because if the script does not parse, then we could fail earlier instead of having to write lots of custom code/rules that guesses those scenarios in `PSScriptAnalyzer`.\r\n\r\nI guess @lzybkr is a good person to ask.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2018-03-14T20:40:49Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I considered this very issue when rewriting the parser in V3. I concluded that though weird, it wasn't actively harmful, had some benefits, and changing it would break existing scripts.\r\n\r\nA PowerShell function treated to some degree like a filename - e.g. if you could have a native command like `7z`, then it should be possible to wrap that command in a function.\r\n\r\nYou also have to consider the language versus the api. It is possible to define a function via an api, e.g. via `InitialSessionState`. You may also define a function with `Set-Item Function:Name`. Changing the parser doesn't address those scenarios.",
      "created_at": "2018-02-03T23:41:00Z",
      "updated_at": "2018-02-03T23:41:00Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "And another way is `${function:!!!} = { .... } `. The ability to have non-alnum characters in function and alias names is used for the % and ? aliases for foreach-object and where-object. Basically any character allowed by the file system is valid in a command name and so in a function name.",
      "created_at": "2018-03-09T00:56:01Z",
      "updated_at": "2018-03-09T00:56:01Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Closing as by design",
      "created_at": "2018-03-14T20:40:49Z",
      "updated_at": "2018-03-14T20:40:49Z"
    }
  ],
  "created_at": "2018-02-03T11:13:00Z",
  "number": 6097,
  "state": "closed",
  "title": "Discussion: Language Parser allows function names to contain special characters such as '$' or '='",
  "updated_at": "2018-03-14T20:41:17Z"
}