{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10636",
  "author": "adityapatwardhan",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nImplement the Null Coalescing `??` and Null Coalescing Assignment `??=` operators.\r\n\r\n## PR Context\r\n\r\nThe operators are discussed in the issue #3240 \r\nThis PR addresses part of RFC https://github.com/PowerShell/PowerShell-RFC/pull/223\r\n\r\nThe PR is marked as a `Breaking Change` due to changes in the `TokenFlags` enum. The changes were made to include the new TokenFlag - `BinaryPrecedenceCoalesce`. While making this change, it was also decided to create more space in the BinaryPrecedence section of the enum for future binary operators. The `BinaryPrecedenceMask` was also changed from `0x07` to `0x0f`. The order of precedence is not changed. We expected it can cause a breaking change for binary modules as C# treats enums as constants. Though, it is a breaking change we expect the impact to be pretty low as the usage of precedence token flags should be fairly low.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4925\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [X] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n           - Issue opened https://github.com/PowerShell/EditorSyntax/issues/185\r\n",
  "closed_at": "2019-10-17T17:21:25Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "FYI this will clash with Posh-Git that implements an alias of `??` as below\r\n```\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           ?? -> Invoke-NullCoalescing                        0.7.3      Posh-git\r\n```\r\n",
      "created_at": "2019-09-27T06:00:49Z",
      "updated_at": "2019-09-27T06:00:49Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "We've already moved the use of `??` to internal-only in v1 and will happily get rid of it altogether for PS v7.  ",
      "created_at": "2019-09-27T13:06:59Z",
      "updated_at": "2019-09-27T13:06:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Please resolve merge conflicts.",
      "created_at": "2019-10-10T05:27:04Z",
      "updated_at": "2019-10-10T05:27:04Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw The PR is ready for re-review.",
      "created_at": "2019-10-10T22:20:19Z",
      "updated_at": "2019-10-10T22:20:19Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "This issue has changes that could potentially change syntax. Please consider adding this feature to [EditorSyntax](https://github.com/PowerShell/EditorSyntax) which is used for syntax highlighting in GitHub, Visual Studio Code, Atom, Sublime Text, and many more locations.\r\n\r\nConsistent syntax highlighting is very important for the language and a feature isn't \"complete\" until syntax highlighting is what is expected.\r\n\r\nIf you can't contribute to [EditorSyntax](https://github.com/PowerShell/EditorSyntax), at least open an issue to track the work - however, please note, that no one is actively working on the repo and so the work will likely not get done in a timely manner.\r\n\r\nWe hope that you consider contributing to [EditorSyntax](https://github.com/PowerShell/EditorSyntax).\r\n\r\n(note this is copy/pasted text for any change that looks like it could impact EditorSyntax - and will be a bot in the future)",
      "created_at": "2019-10-12T14:30:52Z",
      "updated_at": "2019-10-12T14:30:52Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "(thanks for opening the issue already!) ",
      "created_at": "2019-10-12T14:31:19Z",
      "updated_at": "2019-10-12T14:31:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It just occurred to me that none of the existing `ICustomAstVisitor2.VisitBinaryExpression` implementation is changed.\r\n@adityapatwardhan did you review all existing `VisitBinaryExpression` and `VisitAssignmentStatement` to see if anything needs to be changed? For example, `IsConstantValueVisitor` might need to be updated for the `??` binary operation, as this operation can be potentially constant value. ",
      "created_at": "2019-10-15T17:20:12Z",
      "updated_at": "2019-10-15T17:20:12Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> IsConstantValueVisitor might need to be updated for the ?? binary operation, as this operation can be potentially constant value.\r\n\r\nIt looks like that's just a question of the token flag:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/beb8b44420bcd8053667b44e3c3c5a5d74ee20a4/src/System.Management.Automation/engine/parser/ConstantValues.cs#L196-L201",
      "created_at": "2019-10-15T17:56:09Z",
      "updated_at": "2019-10-15T17:56:09Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw I will review all the existing `VisitBinaryExpression` and `VisitAssignmentStatement` to see if anything needs to change. I will submit those changes as part of a different PR.",
      "created_at": "2019-10-15T18:54:15Z",
      "updated_at": "2019-10-15T18:54:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed the changes to `TokenFlags` and agreed to accept this breaking change. We can revisit this decision if there is new feedback coming in during the use of `7.0.0-preview.5` and `7.0.0-preview.6` of `pwsh`.",
      "created_at": "2019-10-16T23:14:53Z",
      "updated_at": "2019-10-16T23:14:53Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:08:11Z",
      "updated_at": "2019-10-23T19:08:11Z"
    }
  ],
  "created_at": "2019-09-27T00:31:00Z",
  "number": 10636,
  "state": "closed",
  "title": "Implement Null Coalescing and Null Coalescing assignment operators",
  "updated_at": "2019-10-23T19:08:11Z"
}