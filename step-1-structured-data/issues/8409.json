{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8409",
  "author": "E3V3A",
  "body": "I'm trying to print some Unicode characters on the (Admin) Powershell Console. \r\nHowever, for the characters I am trying to print, the unicode doesn't seem to exist for default fonts available on the PS console.\r\n\r\nI am using:  The next-to-latest Poweshell Core 6.1.1. \r\n\r\n```powershell\r\n$ $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.1\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n> [Console]::OutputEncoding\r\n\r\n\r\nPreamble          :\r\nBodyName          :\r\nEncodingName      : OEM United States\r\nHeaderName        :\r\nWebName           : ibm437\r\nWindowsCodePage   :\r\nIsBrowserDisplay  :\r\nIsBrowserSave     :\r\nIsMailNewsDisplay :\r\nIsMailNewsSave    :\r\nIsSingleByte      : True\r\nEncoderFallback   : System.Text.InternalEncoderBestFitFallback\r\nDecoderFallback   : System.Text.InternalDecoderBestFitFallback\r\nIsReadOnly        : False\r\nCodePage          : 437\r\n\r\n\r\n\r\n> [Console]::InputEncoding\r\n\r\n\r\nPreamble          :\r\nBodyName          :\r\nEncodingName      : OEM United States\r\nHeaderName        :\r\nWebName           : ibm437\r\nWindowsCodePage   :\r\nIsBrowserDisplay  :\r\nIsBrowserSave     :\r\nIsMailNewsDisplay :\r\nIsMailNewsSave    :\r\nIsSingleByte      : True\r\nEncoderFallback   : System.Text.InternalEncoderBestFitFallback\r\nDecoderFallback   : System.Text.InternalDecoderBestFitFallback\r\nIsReadOnly        : True\r\nCodePage          : 437\r\n\r\n\r\n\r\n$ Get-Variable OutputEncoding\r\n\r\nName                           Value\r\n----                           -----\r\nOutputEncoding                 System.Text.UTF8Encoding\r\n\r\n$ Get-ItemProperty -Path $key\r\n\r\n# Output Pastes HERE as: \r\n\r\n932          : *\uff2d\uff33 \u30b4\u30b7\u30c3\u30af\r\n949          : *\uad74\ub9bc\uccb4\r\n00           : Consolas\r\n0            : Lucida Console\r\n950          : *\u7d30\u660e\u9ad4\r\n936          : *\u65b0\u5b8b\u4f53\r\nPSPath       : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont\r\nPSParentPath : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\r\nPSChildName  : TrueTypeFont\r\nPSDrive      : HKLM\r\nPSProvider   : Microsoft.PowerShell.Core\\Registry\r\n```\r\nBut look like this:\r\n![image](https://user-images.githubusercontent.com/194392/49611724-5324ca80-f99a-11e8-86a8-9255a0f0ab2b.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\nRun this python script:\r\n```python\r\nimport os, sys\r\nimport curses\r\n\r\ndef isColorCapable(): \r\n\t# Return TRUE if the output console is color capable\r\n\t# This is not an easy problem, that often fails on Windows for \r\n\t# all sorts of technical reasons. \r\n\ttry:\r\n\t\tcurses.setupterm(); \r\n\texcept:\r\n\t\treturn False\r\n\t\tpass\r\n\tif curses.tigetnum('colors') > 0 :\r\n\t\treturn True\r\n\telse :\r\n\t\treturn False\r\n\r\nisColorTerm = isColorCapable()\r\ndef color(text, color_code):\r\n    if not isColorTerm:\r\n        return text\r\n    return '\\x1b[%dm%s\\x1b[0m' % (color_code, text)\r\n\r\ndef red(text):    return color(text, 31);\r\ndef green(text):  return color(text, 32);\r\ndef yellow(text): return color(text, 33)\r\ndef blue(text):   return color(text, 34)\r\ndef purple(text): return color(text, 35)\r\ndef cyan(text):   return color(text, 36)\r\n\r\ncc = u'\\u2585' # Unicode Character for a \"box\" (U+2585)\r\nprint(\"\\nPrinting the Unicode character for a \\\"box\\\" (U+2585): \\\"%s\\\"\" % cc)\r\nprint( \" {} = RED box\".format(red(cc)) )\r\nprint( \" {} = Green box\".format(green(cc)) )\r\nprint( \" {} = Yellow box\".format(yellow(cc)) )\r\nprint( \" {} = Blue Box!\".format(blue(cc)) )\r\nprint( \" {} = Magenta box\".format(purple(cc)) )\r\nprint( \" {} = Cyan box\\n\".format(cyan(cc)) )\r\n```\r\n\r\n\r\n```powershell\r\n$ python3.6m.exe .\\pycol.py\r\n# (See picture)\r\n\r\n$ powershell -c \"write-host -fore Cyan This is Cyan text\"\r\n# This is correct color\r\nThis is Cyan text\r\n\r\n> powershell -c \"'?[1;31mRed ?[32mGrn ?[33mYel ?[35mMag ?[36mCya ?[m'.Replace('?', [char]27);\"\r\n# This is not\r\n\u2190[1;31mRed \u2190[32mGrn \u2190[33mYel \u2190[35mMag \u2190[36mCya \u2190[m\r\n\r\n$ [char]0x2585\r\n# and neither this, just as a \"[?]\"  (although rendering ok when pasting here in this issue)\r\n\u2585\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/194392/49611860-d2b29980-f99a-11e8-8774-c6ca28153cf6.png)\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n![image](https://user-images.githubusercontent.com/194392/49612109-8c116f00-f99b-11e8-9022-56c587e75aaf.png)\r\n\r\n\r\nHere is the correct definition/rendering of [U+2585](https://www.compart.com/en/unicode/U+2585).\r\n",
  "closed_at": "2018-12-08T01:55:03Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This is not under PowerShell's control: you need to pick a font for the console window that can render these characters; the preinstalled TrueType fonts don't all support _all_ Unicode characters.\r\n\r\nOne that would work in your case is `NSimSun`.\r\n\r\nAdditionally:\r\n\r\n* If you want Python to be able to use VT (Virtual Terminal) escape sequences, you must turn support for it on via the registry; do it globally for all console windows, run\r\n`Set-ItemProperty HKCU:\\Console VirtualTerminalLevel -Type DWORD 1`\r\n\r\n* For your Python script to actually produce colored output (once enabled via the registry), I had to make `isColorCapable()`  return `True` _uncondtionally_ - the color support was otherwise not recognized.\r\n\r\n\r\n",
      "created_at": "2018-12-06T23:51:11Z",
      "updated_at": "2018-12-06T23:51:11Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "> This is not under PowerShell's control: you need to pick a font for the console window that can render these characters; the preinstalled TrueType fonts don't all support all Unicode characters.\r\n\r\nI would argue that it **is** PowerShell (developers) that decide what fonts to use by-default, so it's quite surprising that the ones chosen are barely supporting any. It's too bad that one should have to resort to horrible hacks like having to recompile and manually install \"proper\" fonts, like [DejaVu](https://dejavu-fonts.github.io/). \r\n\r\nI managed to resolve this issue **only** by installing that font! (This IMO should not have to be the case.) \r\n\r\n> One that would work in your case is NSimSun.\r\n\r\nI just tried installing that, according to std procedures, but it doesn't show up in the console settings.  \r\nPerhaps it is [not compatible with Console](https://web.archive.org/web/20160527080735/support.microsoft.com/en-us/kb/247815)? Are there new procedures for doing this?\r\n\r\n> If you want Python to be able to use VT (Virtual Terminal) escape sequences, you must turn support for it on via the registry; do it globally for all console windows...\r\n\r\nThis is funny, because although I have done that, the following outpyt from [ConoutMode](https://github.com/rprichard/winpty/blob/master/misc/ConoutMode.cc) seem to indicate that it is not picked up... Very confusing, indeed.\r\n\r\n```powershell\r\n$VTkey = 'HKCU:\\Console'\r\nGet-ItemProperty -Path $VTkey |grep VirtualTerminalLevel\r\n# VirtualTerminalLevel   : 1\r\n\r\n# .\\ConinMode.exe\r\nmode: 0x1f\r\nENABLE_PROCESSED_INPUT        0x0001 ON\r\nENABLE_LINE_INPUT             0x0002 ON\r\nENABLE_ECHO_INPUT             0x0004 ON\r\nENABLE_WINDOW_INPUT           0x0008 ON\r\nENABLE_MOUSE_INPUT            0x0010 ON\r\nENABLE_INSERT_MODE            0x0020 off\r\nENABLE_QUICK_EDIT_MODE        0x0040 off\r\nENABLE_EXTENDED_FLAGS         0x0080 off\r\nENABLE_AUTO_POSITION          0x0100 off\r\nENABLE_VIRTUAL_TERMINAL_INPUT 0x0200 off   <===\r\n\r\n# .\\ConoutMode.exe\r\nmode: 0x3\r\nENABLE_PROCESSED_OUTPUT            0x0001 ON\r\nENABLE_WRAP_AT_EOL_OUTPUT          0x0002 ON\r\nENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004 off   <====\r\nDISABLE_NEWLINE_AUTO_RETURN        0x0008 off\r\nENABLE_LVB_GRID_WORLDWIDE          0x0010 off\r\n```\r\n\r\n> For your Python script to actually produce colored output (once enabled via the registry), I had to make isColorCapable() return True uncondtionally - the color support was otherwise not recognized.\r\n\r\n:+1:  Hmm, that's interesting too. What python are you using? \r\n",
      "created_at": "2018-12-07T13:26:46Z",
      "updated_at": "2018-12-07T13:26:46Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "BTW. What does this mean??\r\n\r\n\u2022 The font must be FF_MODERN for TrueType fonts.\r\n\u2022 The font must be OEM_CHARSET for non TrueType font.\r\n\r\n",
      "created_at": "2018-12-07T22:15:39Z",
      "updated_at": "2018-12-07T22:15:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I would argue that it is PowerShell (developers) that decide what fonts to use by-default,\r\n\r\nStill, it is a feature of the Windows Console (`conhost.exe`), not any given shell's, so please discuss the issue with the [Windows Console team](https://github.com/Microsoft/console).\r\n\r\nI don't know `ConoutMode`, so I can't speak to why it doesn't see the VT sequences as enabled, but de facto they do work once the registry is patched; e.g.,\r\n`python -c 'print (\\\"\\x1b[32mword\\x1b[m up\\\")'` prints `word` in green.\r\n\r\n> I just tried installing that [NSimSun]\r\n\r\nOn my Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.407), this font is available _by default_.\r\n\r\nRe Python version: Mine is 3.7.0\r\n\r\nRe `FF_MODERN` and `OEM_CHARSET`: My - superficial - understanding is that these attributes signal basic suitability as a console font by indicating support for the characters in the legacy OEM code pages.\r\n\r\n\r\n",
      "created_at": "2018-12-07T22:40:25Z",
      "updated_at": "2018-12-07T22:40:47Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "FF_MODERN is a property of the font family, which describes the \"look\" of the font in general terms. It means the font has a non-variable stroke width. Most (but not all) fixed-width fonts are also modern.  [see docs](https://msdn.microsoft.com/en-us/library/cc250389.aspx)\r\n\r\nYou _can_ set your console font to *any* font (including non-fixed width fonts) _via the API_. I don't recommend using non-fixed-width fonts, because they break anything like `Format-Table` \ud83d\ude09 \r\n\r\nYou can use my [WindowsConsoleFonts](https://github.com/Jaykul/WindowsConsoleFonts) module to set fonts that don't show up in the property dialog, if you want to -- or to see what sorts of contortions you'll need to [figure out](https://github.com/Jaykul/WindowsConsoleFonts/blob/master/Source/Assembly/FontHelper.cs#L86-L100) to do it yourself.\r\n\r\nHaving said all that:\r\n\r\nThe Chinese characters in the output of your `Get-ItemProperty` are the names of the fonts that you should use if you want to see the characters \ud83d\ude09 -- probably DoumChe and GulimChe (Korean), MingLiU, NSimSun, SimSun-ExtB (Chinese). They're all FF_MODERN | FF_ROMAN fonts (or at least, they claim to be) and are usable in the console through the regular property dialog. They support a lot more extended characters (basically just Chinese).\r\n\r\nConsolas also has a full set of Light, Heavy, and Double box characters. It doesn't have any support for Chinese, Japanese or Korean...\r\n\r\nHowever, if you have an East Asian environment chosen in Windows, there are [additional caveats](https://superuser.com/questions/583835/adding-microsoft-console-cmd-font-in-registry-does-not-work-with-eastern-asian)\r\n\r\nHowever, I have to agree with @E3V3A on this: PowerShell is responsible for the default font choice. It choses the \"Lucida Console\" font, even when the conhost default is \"Consolas\" ... The font is stored _in the shortcut_ **and** the registry_, \ud83d\ude12 along with the color scheme \ud83d\ude21\r\n\r\nHowever, the notion that we should use a unifont by default is preposterous. Unifonts (Asian fonts, in general) are **HUGE** and most people can't actually read every language script anyway. The original GNU Unifont is about 11,998KB of font -- some of the Microsoft East Asian fonts mentioned above are as large as 30,409KB -- while Consolas is about 1,693KB\r\n\r\nP.S. If you want to use a unifont, pick one that's _merged_ with a decent console font, like [this one, merged with DejaVu Sans](http://ilyaz.org/software/fonts). If you don't need all that, you can [try NerdFonts](https://nerdfonts.com/) which adds vector icons to fixed-width fonts...\r\n\r\n",
      "created_at": "2018-12-08T01:01:55Z",
      "updated_at": "2018-12-08T01:04:41Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "Yeah, I have spent half the day finding out what is going on. The problem I have, is really only for printing a few glyphs. So my choice of glyph above, is outside the [IBM 437 OEM_CHARSET](https://en.wikipedia.org/wiki/Code_page_437), so if I had used another box from that page, it would have worked with any console font. However, one always wonder why not more glyphs...\r\n\r\nThe thing that is still an unknown, is the definition of the statement `constant stroke width`. What does that really mean?\r\n\r\nAnyway, I really appreciate your effort in trying to help here. :) However, I don't think there is much more to be done about this issue until this ConPty stuff actually get more stable and implemented widely. The other mega issue is how color and color-escape codes are handled on different terminals.\r\n\r\nAt the end of the day, it would have been **nice** is pwsh console would just allow you to select whatever font yo have, that is compatible, so user doesn't have to bother with all these registry hacks etc, and thanks @Jaykul for trying to simplify that issue with your tool, but yet to be tried. ",
      "created_at": "2018-12-08T01:43:28Z",
      "updated_at": "2018-12-08T01:43:28Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "https://github.com/rprichard/winpty/blob/master/misc/font-notes.txt",
      "created_at": "2018-12-08T01:50:09Z",
      "updated_at": "2018-12-08T01:50:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @Jaykul - great info.\r\n\r\n> PowerShell is responsible for the default font choice\r\n\r\nGood point, but in terms of the _scripts_ (writing systems, alpabets, i.e.: set of characters) `Lucida Console` supports, it's the same as what `Consolas` supports, according to https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows: Latin, Greek, Cyrillic\r\n\r\nAs for what fonts are _available_, that's definitely not PowerShell's responsibility.\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-08T01:52:24Z",
      "updated_at": "2018-12-08T01:54:36Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, they technically support the same scripts, but ... in every subrange, Consolas has more characters than Lucida. In each supported subrange, Consolas has more than double the character glyphs \ud83d\ude09 ... \r\n![image](https://user-images.githubusercontent.com/192942/49690610-d6146500-fb01-11e8-9496-cb33061b9437.png)\r\n![image](https://user-images.githubusercontent.com/192942/49690595-8b92e880-fb01-11e8-8a0f-8b4a1ef03894.png)",
      "created_at": "2018-12-08T21:04:58Z",
      "updated_at": "2018-12-08T21:04:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @Jaykul - I had no idea.\r\n\r\nSo, is it worth opening an issue to have the installer configure Consolas as the default font, assuming it is a true superset of the Lucida Console font?\r\n",
      "created_at": "2018-12-08T21:35:56Z",
      "updated_at": "2018-12-08T21:35:56Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "@Jaykul \r\nAny ideas how to make a merged font like the one you linked? \r\nBoth the Unifont and DejaVu it's based on are a bit dated. I'd like to provide a new release.",
      "created_at": "2018-12-09T17:05:18Z",
      "updated_at": "2018-12-09T17:05:18Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "Apparently there is something called a [fontlink](https://shajisoft.com/shajisoft_wp/fontlink-for-cjk-on-english-windows-10/) in the registry, that can be used to link different fonts together. So if I understood it correcly, you can use this, to give a certain font, a type of *search path* to look at other fonts if one is not available... Has anyone tried this?",
      "created_at": "2018-12-09T21:09:26Z",
      "updated_at": "2018-12-09T21:09:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I would suggest continuing this discussion in this issue https://github.com/Microsoft/console/issues/226",
      "created_at": "2018-12-30T12:51:53Z",
      "updated_at": "2018-12-30T12:51:53Z"
    }
  ],
  "created_at": "2018-12-06T21:16:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8409,
  "state": "closed",
  "title": "Console does not print Unicode correctly",
  "updated_at": "2018-12-30T12:51:53Z"
}