{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9943",
  "author": "bgelens",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFixed bug when pwsh 7.x is used and a script has a `#requires -version 6.2`\r\n\r\nUpdated `PSCompatibleVersions` to include 6.1 and 6.2\r\n\r\n## PR Context\r\n\r\nFixes #9938\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: #9938\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-08-12T22:25:29Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bgelens Thank you for your PR. Could you add tests here: https://github.com/PowerShell/PowerShell/blob/94b6b6f4f7985be7c006c3eb87691992d872142a/test/powershell/Language/Scripting/Requires.Tests.ps1#L3",
      "created_at": "2019-06-19T16:41:19Z",
      "updated_at": "2019-06-19T16:41:19Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The way `#requires -Version` works currently, it doesn't do a version comparison, but instead looks up the version in `$PSVersionTable.PSCompatibleVersions` which is supposed to be a mechanism that keeps track of PowerShell versions that are strictly incompatible with the current runtime. Arguably that mechanism isn't used properly, but it's still the way the logic works currently.\r\n\r\nSo for that reason, I think the @PowerShell/powershell-committee should review the mechanism of `#requires -Version` in this PR.\r\n\r\nBut also, if we go down the route of changing that mechanism, we should strip out the for-loop entirely and just do a version comparison.\r\n\r\nOtherwise, the change that needs to occur is to add/change the right version in the list here:\r\nhttps://github.com/PowerShell/PowerShell/blob/29e21470d9e0a6edd163bcff9b1574ccf557b18f/src/System.Management.Automation/engine/PSVersionInfo.cs#L108",
      "created_at": "2019-06-19T16:49:54Z",
      "updated_at": "2019-06-19T16:49:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Version comparisons aren't expensive, are they? I can't think they'd be too expensive to do. We should just be doing a straight version comparison or we'll keep hitting this.",
      "created_at": "2019-06-19T17:17:21Z",
      "updated_at": "2019-06-19T17:17:21Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "I'll hold work on this PR until it is decided what path to take.",
      "created_at": "2019-06-20T08:06:14Z",
      "updated_at": "2019-06-20T08:06:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Version comparisons aren't expensive, are they? I can't think they'd be too expensive to do. We should just be doing a straight version comparison or we'll keep hitting this.\r\n\r\nNot expensive, but basically we compare the required version against every version the current PowerShell supports. To change this to a simple version > comparison represents a breaking change, so we just need the PowerShell Committee to opine.",
      "created_at": "2019-06-25T21:29:31Z",
      "updated_at": "2019-06-25T21:29:31Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "To avoid a breaking change, maybe add a new parameter like `-MininumVersion` or `-SemanticVersion` that would accept semver ranges.",
      "created_at": "2019-06-26T04:01:45Z",
      "updated_at": "2019-06-26T04:01:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We don't think we should take a big change in the heuristic for checking compatible versions at this time.  Instead, our recommendation is for now update the compatible array with additions for 6.1 and 6.2.",
      "created_at": "2019-07-10T22:27:40Z",
      "updated_at": "2019-07-10T22:27:40Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "was on holiday without computer :) I changed the pr to include 6.1 and 6.2 statically defined and rebased",
      "created_at": "2019-07-18T14:58:47Z",
      "updated_at": "2019-07-18T14:58:58Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "Gentle ping \ud83d\ude04 @SteveL-MSFT ",
      "created_at": "2019-07-26T18:46:38Z",
      "updated_at": "2019-07-26T18:46:38Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "is this going to be merged?",
      "created_at": "2019-08-09T05:36:31Z",
      "updated_at": "2019-08-09T05:36:31Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bgelens I have added some tests as I asked earlier. Please have a look.",
      "created_at": "2019-08-09T17:41:11Z",
      "updated_at": "2019-08-09T17:41:11Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "sorry, that totally slipped my mind when I did the rework for static defined versions.\r\n\r\nThe test you added only test for 6.1 and 6.2, not 7.0. They should also validate 7.0 and when 7.1 is released the tests have to be updated to deal with the incremented minor version. This is fine but it would be best if the test would fail as soon as the PowerShell minor version is incremented and the test is not updated. I'm thinking about adding a test for 7.1 which should throw, once it doesn't throw, the test will fail and the author would be reminded that the test needs to be updated.\r\n\r\nI'll add some more test logic and maybe revise the current once a little bit if that is alright?\r\n\r\nAlso, we currently have the same issue with PowerShell 6.2\r\n![image](https://user-images.githubusercontent.com/10071039/62800127-e9d5f800-bae2-11e9-92ff-150f70e846c1.png)\r\n\r\nShould I create a PR for the 6.2 branch as well?\r\n",
      "created_at": "2019-08-09T18:26:12Z",
      "updated_at": "2019-08-09T18:26:12Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bgelens I like the idea to add a test for 7.1 which expects to throw. Also maybe instead of having a static list of versions, we can use `$PSVersionTable.PSCompatibleVersions` for generating the test cases.",
      "created_at": "2019-08-09T18:59:51Z",
      "updated_at": "2019-08-09T18:59:51Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking the same but, as PSCompatibleVersions list was not updated before, this was the cause of the issue in the first place. So to spot regression, we cannot rely on this method I think. \r\n\r\nAlso the current version of PowerShell is now automatically used (based on the assembly version) in this list so we could add the tests for 6.0 until 6.2 statically and autogenerate the list for 7.x. If x is not 0, count down to 0 and add each minor (this assumes that there will never be a jump from PowerShell 7.0 to 7.2 for example). Then, add a minor to test a throw to occur.",
      "created_at": "2019-08-09T19:13:18Z",
      "updated_at": "2019-08-09T19:13:18Z"
    },
    {
      "author": "bgelens",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan I've added tests for PSVersionTable as some of discussed made more sense in that context. I also updated the requires test. Please let me know if they are ok now ",
      "created_at": "2019-08-10T18:15:59Z",
      "updated_at": "2019-08-10T18:15:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
      "created_at": "2019-08-20T22:37:04Z",
      "updated_at": "2019-08-20T22:37:04Z"
    }
  ],
  "created_at": "2019-06-19T14:58:11Z",
  "number": 9943,
  "state": "closed",
  "title": "Fix `#requires -version` for pwsh 7 to include 6.1 and 6.2 in `PSCompatibleVersions`",
  "updated_at": "2019-08-20T22:37:04Z"
}