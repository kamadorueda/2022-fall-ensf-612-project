{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13433",
  "author": "agowa338",
  "body": "## Summary of the new feature/enhancement\r\n\r\nPlease add a progress bar to ForEach-Object.\r\nIt would clearly simplify code to just write\r\n```\r\nGet-Data | ForEach-Object -Parallel -ShowProgressBar { $doLongRunningStuff } | Format-Data | Write-Data\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nThe statusbar should count the number of returns and show a progressbar with \"$#completed / $#total\".\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "This would be a great thing to have.  As it is, I still use a script called Split-Job instead of ForEach-Object -Parallel.  It gives the option to show progress on the overall job.  This is particularly useful if you have highly variable execution time per item in the queue.  i.e. You have 100 database servers and you want to back them all up in parallel.  The time it takes is dependent on the size of the databases.  So having it show that 10 are finished would be great.  And if the input is completed, then it could also show a percent completed.  Then you could generate things like items per second, ETA, elapsed time, items yet to process, and a number of other things that would be nice to see if you are waiting minutes to hours.\r\n\r\nSomething like this would be great.\r\n```\r\nImport-CSV C:\\DBServerDatabases.csv | Foreach-Object -Parallel { Invoke-SQLBackup -ComputerName $_.ComputerName -Database $_.Database } -ShowParallelProgress -ParallelProgressName 'SQL Backups'\r\n```\r\nThe exact names of the parameters isn't that critical to me, but having the option would be great.\r\n",
      "created_at": "2021-11-23T21:00:41Z",
      "updated_at": "2021-11-23T21:00:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use Write-Progress before and after ForEach-Object.",
      "created_at": "2021-11-24T03:28:27Z",
      "updated_at": "2021-11-24T03:28:27Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "@iSazonov Are you joking? What would that archive? The goal is to see how many of the jobs that foreach-object spawn have completed.\r\nWith a Write-Progress before and after it would just jump from 0% to 100%...",
      "created_at": "2021-11-24T08:17:40Z",
      "updated_at": "2021-11-24T08:17:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@agowa338 I mean you can do something like:\r\n`Get-Data | % {Write-Progress ...; $_ } | ForEach-Object -Parallel { $doLongRunningStuff } | % {Write-Progress ...; $_} | Format-Data | Write-Data`",
      "created_at": "2021-11-24T11:01:12Z",
      "updated_at": "2021-11-24T11:01:12Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "\ud83e\udd14 That could work, but how would you exactly write this? Esp. How do you calculate the value for the PercentComplete parameter? If there was a \"Add 1 chunk to progress\" sure, but as it is now? I don't know how that should work.",
      "created_at": "2021-11-25T05:59:11Z",
      "updated_at": "2021-11-25T05:59:11Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "@iSazonov played a bit with your suggestion. And now I think I don't understand how Write-Progress works at all anymore...\r\n\r\nAdding a `Start-Sleep -Second 1` is all it takes to get it from not working to working.\r\n\r\nMy example code (not working; Just prints \"Working - 0%\" and nothing else):\r\n```\r\n$items = 1..10\r\n$iComplete = 0;\r\n$iTotal = $items.count;\r\n\r\nWrite-Progress -Activity \"Activity\" -PercentComplete 0 -Status \"Working - 0%\"\r\n$items | ForEach-Object -Parallel {\r\n        if ($_ -eq 5) {\r\n            Start-Sleep -Seconds 10\r\n        }\r\n        $_\r\n    } | ForEach-Object -Process {\r\n        $iComplete +=1\r\n        $iPercentComplete = ($iComplete/$iTotal)*100\r\n        Write-Progress -Activity \"Activity\" -PercentComplete $iPercentComplete -Status (\"Working - \" + $iPercentComplete + \"%\")\r\n        $iPercentComplete\r\n    }\r\n```\r\n\r\nAnd now when I add the sleep like this the progress bar counts in 10 increments (as it should):\r\n```\r\n$items = 1..10\r\n$iComplete = 0;\r\n$iTotal = $items.count;\r\n\r\nWrite-Progress -Activity \"Activity\" -PercentComplete 0 -Status \"Working - 0%\"\r\n$items | ForEach-Object -Parallel {\r\n        if ($_ -eq 5) {\r\n            Start-Sleep -Seconds 10\r\n        }\r\n        $_\r\n    } | ForEach-Object -Process {\r\n        Start-Sleep -Seconds 1\r\n        $iComplete +=1\r\n        $iPercentComplete = ($iComplete/$iTotal)*100\r\n        Write-Progress -Activity \"Activity\" -PercentComplete $iPercentComplete -Status (\"Working - \" + $iPercentComplete + \"%\")\r\n        $iPercentComplete\r\n    }\r\n```\r\n\r\nAnd then I got completely derailed and confused by a bug(?) in vscode where code simple as:\r\n```\r\nfor ($i = 1; $i -le 100; $i++ ) {\r\n    Write-Progress -Activity \"Search in Progress\" -Status \"$i% Complete:\" -PercentComplete $i\r\n    Start-Sleep -Seconds 1\r\n}\r\n```\r\nDoesn't work and the progress bar keeps updating the text, but the actual progress bar itself somehow jumps back and freezes as soon as $i is > 22.\r\n\r\nSo do you have a working example for your suggestion? As I apparently cannot get it to work. (Also while debugging I removed the first ForEach-Object from your example and replaced it with just counting the total amount of elements and initializing the progress bar to 0; Behaviour didn't change, it's the same as the simpler testcase above).",
      "created_at": "2021-11-25T07:03:39Z",
      "updated_at": "2021-11-25T07:03:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My experiment:\r\n```powershell\r\n$items = 1..20\r\n$iComplete = 0;\r\n$iTotal = $items.count;\r\n$iPercentComplete = 0\r\n$items | ForEach-Object -Process {\r\n        Write-Progress -Activity \"Activity\" -PercentComplete 0 -Status \"Working - 0%\"\r\n        $_\r\n    } | ForEach-Object -Parallel {\r\n        #Write-Host \"in> $_`n\"\r\n            Start-Sleep -Seconds 5\r\n        #Write-Host \"out> $_`n\"\r\n        $_\r\n    } | ForEach-Object -Process {\r\n        $iComplete +=1\r\n        $iPercentComplete = ($iComplete/$iTotal)*100\r\n        Write-Progress -Activity \"Activity\" -PercentComplete $iPercentComplete -Status (\"Working - \" + $iPercentComplete + \"%\")\r\n        #Write-Host \"end> $_ : $iPercentComplete`n\"\r\n    }\r\n```",
      "created_at": "2021-11-25T10:54:26Z",
      "updated_at": "2021-11-25T10:54:26Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "@iSazonov Interesting, your code also only works with the Start-Sleep in it. As soon as I replace the parallel block with something more useful like:\r\n\r\n```\r\nForEach-Object -Parallel {\r\n        if ($_ -eq 10) {\r\n            Start-Sleep -Seconds 10\r\n            100\r\n        } else {\r\n            $_\r\n        }\r\n    }\r\n````\r\nit also only shows \"Working - 0%\"...",
      "created_at": "2021-11-26T01:47:38Z",
      "updated_at": "2021-11-26T01:47:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps \"IO\" vs \"CPU\" jobs.\r\nI guess it is how job parallelism works. Perhaps @PaulHigin can clarify the behavior and could conclude whether it is possible to improve this parallelism.",
      "created_at": "2021-11-26T04:04:42Z",
      "updated_at": "2021-11-26T04:04:42Z"
    },
    {
      "author": "dnldelRey",
      "author_association": "NONE",
      "body": "?\n",
      "created_at": "2021-11-27T00:54:54Z",
      "updated_at": "2021-11-27T17:38:10Z"
    }
  ],
  "created_at": "2020-08-14T10:32:53Z",
  "number": 13433,
  "state": "open",
  "title": "ForEach-Object -Parallel add ShowProgressBar  functionality",
  "updated_at": "2021-11-27T17:38:10Z"
}