{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16495",
  "author": "SeeminglyScience",
  "body": "### Steps to reproduce\r\n\r\nApologies for the title gore.\r\n\r\nThe compiler will skip emitting `ParserOps.MatchOperator` entirely when the expression is cast to `[void]` specifically when in the RHS of a *variable* assignment. It'll work as expected if there's no assignment or if the assignment is to `$null`.\r\n\r\nAlso if the LHS is a member expression the compiler will throw, breaking any script that contains it somewhere, but I'll make a separate issue for that.\r\n\r\n### Expected behavior\r\n\r\n```ps1\r\nPS> $a = [void]('123' -match 1); $matches\r\n\r\nName                           Value\r\n----                           -----\r\n0                              1\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```ps1\r\nPS> $a = [void]('123' -match 1); $matches\r\n\r\n# Nothing, $matches isn't set\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\nLooking at the expression tree generated by the compiler, you can see the match operation is omitted entirely.\r\n\r\n#### Without assignment (correct)\r\n\r\n```cs\r\n// From { [void]('123' -match 1) } | Get-ScriptBlockDisassembly\r\nfuncContext._currentSequencePointIndex = 1;\r\n\r\nif (context._debuggingMode > 0)\r\n{\r\n    context._debugger.OnSequencePointHit(funcContext);\r\n}\r\nParserOps.MatchOperator(\r\n    context,\r\n    Fake.Const<InternalScriptExtent>(\"-match\"),\r\n    \"123\",\r\n    1,\r\n    false,\r\n    true);\r\ncontext.QuestionMarkVariableValue = true;\r\n```\r\n\r\n#### With assignment (not correct)\r\n\r\n```cs\r\n// From { $a = [void]('123' -match 1) } | Get-ScriptBlockDisassembly\r\nfuncContext._currentSequencePointIndex = 1;\r\n\r\nif (context._debuggingMode > 0)\r\n{\r\n    context._debugger.OnSequencePointHit(funcContext);\r\n}\r\n\r\n// Basically equivalent of `$a = $null`\r\nlocals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(PSConvertBinder.Get(typeof(object)))(null);\r\ncontext.QuestionMarkVariableValue = true;\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it is a broken code path are there other statement examples where compiler creates broken code?",
      "created_at": "2021-11-20T07:00:37Z",
      "updated_at": "2021-11-20T07:00:37Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "Is there an actual use case of assigning a `[void]` casted `-match` result to a variable?",
      "created_at": "2021-11-20T09:20:09Z",
      "updated_at": "2021-11-20T09:20:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> If it is a broken code path are there other statement examples where compiler creates broken code?\r\n\r\nYeah. I haven't made an issue for this yet but `$something.Value = [void]$anyExpressionHere` straight up fails to compile. Casting to void in general probably needs a closer look.\r\n\r\n> Is there an actual use case of assigning a `[void]` casted `-match` result to a variable?\r\n\r\nNot really, but the compiler omitting code on accident is still problematic. This was found by @JustinGrote on accident while testing some changes in the PowerShell extension for VSCode.",
      "created_at": "2021-11-20T14:25:08Z",
      "updated_at": "2021-11-20T14:25:08Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also for the fix, instead of replacing the converted expression with a constant `$null` it should emit an `Expression.Block` with the RHS expression and `$null`.",
      "created_at": "2021-11-20T14:30:46Z",
      "updated_at": "2021-11-20T14:30:46Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Just to add some more test cases, it seems like most things are omitted when cast to `void` on the RHS of a variable assignment:\r\n\r\n```powershell\r\n$a = [void][PowerShell]::Create()\r\n\r\n$a = [void]($ps = [PowerShell]::Create())\r\n\r\n$a = [void][Environment]::CurrentDirectory\r\n\r\n$a = [void]$anything.Something()\r\n\r\n$a = [void]$(\r\n    anything here\r\n\tincluding multiple statements\r\n)\r\n```\r\n\r\nAll of these things emit the exact same code gen of:\r\n\r\n```csharp\r\nlocals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(PSConvertBinder.Get(typeof(object)))(null);\r\n```",
      "created_at": "2021-12-10T13:42:33Z",
      "updated_at": "2021-12-10T13:42:33Z"
    }
  ],
  "created_at": "2021-11-19T19:33:57Z",
  "number": 16495,
  "state": "open",
  "title": "`-match` operation is skipped when cast to `void` in the RHS of a variable assignment",
  "updated_at": "2021-12-10T13:42:33Z"
}