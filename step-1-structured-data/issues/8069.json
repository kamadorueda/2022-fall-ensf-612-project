{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8069",
  "author": "KirkMunro",
  "body": "Recent releases of Windows 10 have replaced the Documents folder in a user's profile with OneDrive\\Documents, which is automatically mirrored into each user's cloud-hosted OneDrive account. OneDrive only offers 5GB of cloud space for free, and once that is full important documents may not be mirrored into the cloud. Since Windows PowerShell modules can be quite large (the Az module bundle is 53MB, and the AWSPowerShell.NetCore module bundle is 81MB), it doesn't take much time with side-by-side versioning of frequently updated modules installed in a local user profile to start consuming a lot of OneDrive space, when there is no need to back those files up to OneDrive whatsoever since they are installed from a cloud repository.\r\n\r\nTo correct this, and provide one less reason for users' free OneDrive space to be completely and unnecessarily consumed, I propose that the `Documents\\PowerShell` folder for PowerShell Core on Windows be moved and renamed to `${env:USERPROFILE}\\.powershell`. This new location and naming is in line with other products like Nuget (uses a .nuget folder for package storage), VS Code (uses .vscode), LibMan in Visual Studio (uses .librarymanager), and many more. This shift is the right approach based on new handling and best practices for a user's Documents folder in Windows, which should only be used to store documents that users want automatically backed up into the cloud.",
  "closed_at": "2019-06-28T21:51:15Z",
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "It should use the [XDG Base Directory Specification](\r\nhttps://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) like the other operating system. Is there any reason to have Windows be different?",
      "created_at": "2018-10-18T22:39:16Z",
      "updated_at": "2018-10-18T22:39:16Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim I don't agree or disagree (I wasn't familiar with that spec before you mentioned it), but at a glance I think that is a different issue to propose than this specific problem that should be resolved independently of a directory specification.",
      "created_at": "2018-10-19T00:45:36Z",
      "updated_at": "2018-10-19T00:45:36Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for not being clear. What I meant to say was PowerShell already respects XDG spec for Linux and macOS. We should extend that to Windows as well. Module when then go in `~/.local/share/powershell/Modules` which would address the issue. \r\n\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/docs-conceptual/setup/Installing-PowerShell-Core-on-Linux.md#paths\r\n\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/docs-conceptual/setup/Installing-PowerShell-Core-on-macOS.md#paths\r\n\r\n",
      "created_at": "2018-10-19T01:16:44Z",
      "updated_at": "2018-10-19T01:16:44Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I've never liked modules being stored under Documents.  Seems to me they should have been stored under `$env:\\LocalAppData\\Microsoft\\PowerShell\\Modules` or some path like that.  \r\n\r\nBTW I defined this symlink a while back in my home dir:\r\n```\r\n.powershell -> C:\\Users\\Keith\\Documents\\WindowsPowerShell\\\r\n```\r\nI wonder if `.dirs` should be hidden by default like they are on Linux? I suppose mostly developers will wind up with these so perhaps it's OK that they're not hidden.\r\n\r\nRE `~\\.local`, I like the idea but you've got some other teams to convince:\r\n```\r\n.config\r\n.dotnet\r\n.electron\r\n.nuget\r\n.omnisharp\r\n.rcedit\r\n.vscode\r\n.vscode-insiders\r\n```",
      "created_at": "2018-10-19T01:22:32Z",
      "updated_at": "2018-10-19T01:22:32Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "I don\u2019t perfer .local either but having it the same across all platforms would be nice for PowerShell. All those teams are consistent across their platforms, we are not.",
      "created_at": "2018-10-19T01:28:15Z",
      "updated_at": "2018-10-19T01:28:15Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with the benefits of consistency. The path doesn't matter so much since you can just set up PSDrive's in a profile, and I wasn't personally attached to the path I proposed -- I simply chose it based on the other similar paths like .nuget, .vscode, etc.",
      "created_at": "2018-10-19T02:37:51Z",
      "updated_at": "2018-10-19T02:37:51Z"
    },
    {
      "author": "ajventi",
      "author_association": "NONE",
      "body": "I discovered this ~/OneDrive \"feature\" the other day login into a new machine. It has to be moved, because you will lose the ability to have unique profiles local to a particular machine. Not to mention scripts are not Documents in the first place.",
      "created_at": "2018-11-11T07:38:19Z",
      "updated_at": "2018-11-11T07:38:19Z"
    },
    {
      "author": "zigford",
      "author_association": "NONE",
      "body": "I find it handy to have Powershell modules/profile roam using Onedrive. That said, I agree consistency with the other OS'es would be better. I usually run a powershell setup script manually on each machine I use to symlink the profiles back to onedrive anyway.",
      "created_at": "2018-11-12T02:37:28Z",
      "updated_at": "2018-11-12T02:37:28Z"
    },
    {
      "author": "totkeks",
      "author_association": "NONE",
      "body": "I agree with the OP on this issue. I recently upgraded my Win10 and now I got those files in Onedrive/Documents as well. While I like the idea of sharing my default profiles and possibly scripts across PCs using OneDrive, this should be done using the proper Windows folders, namely AppData Local/Roaming, because this is the convention on Windows and it works well. Also better than dotfiles and dotfolders in the home directory.\r\n\r\nSo the correct path would be something like `$env:APPDATA\\Microsoft\\Powershell\\` or `$env:LOCALAPPDATA\\Microsoft\\Powershell\\`",
      "created_at": "2018-12-11T09:50:19Z",
      "updated_at": "2018-12-11T09:50:19Z"
    },
    {
      "author": "leotabakov",
      "author_association": "NONE",
      "body": "Is it possible to change it manually? And if so how I can do it? ",
      "created_at": "2019-05-28T02:19:09Z",
      "updated_at": "2019-05-28T02:19:09Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT It would be nice to iron out the direction on this one for PS 7, to bring Windows PS and PS Core together with a better user module/script path on Windows. Would you mind tabling this with the committee?",
      "created_at": "2019-05-28T13:11:27Z",
      "updated_at": "2019-05-28T13:11:27Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for raising this! I wasn't aware of these latest changes to the Documents folder, but I'd like to have some more internal discussion before we make a call either way. In particular, I'm concerned about the difficulty of creating and managing symlinks downlevel (where they're essentially only manageable by administrators). ",
      "created_at": "2019-06-12T22:25:37Z",
      "updated_at": "2019-06-12T22:25:37Z"
    },
    {
      "author": "totkeks",
      "author_association": "NONE",
      "body": "> Thanks for raising this! I wasn't aware of these latest changes to the Documents folder, but I'd like to have some more internal discussion before we make a call either way. In particular, I'm concerned about the difficulty of creating and managing symlinks downlevel (where they're essentially only manageable by administrators).\r\n\r\nWhy use the documents folder in the first place? Powershell profiles / scripts / modules are not documents in the traditional meaning. I suggest use the generic appfolders (local, roaming) provided in Windows by default instead of using Documents or even the proposed $env:USERPROFILE\\.powershell. While the latter is common on *nix operating systems, the appfolders are the way to go on Windows.",
      "created_at": "2019-06-13T09:52:12Z",
      "updated_at": "2019-06-13T09:52:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Please don't bury them all the way in appdata. There's *far* too much stuff in there to go trying to find PowerShell profiles. Somewhere in $home is fine.",
      "created_at": "2019-06-13T10:41:30Z",
      "updated_at": "2019-06-13T10:41:30Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@totkeks Better for a consistent location across OSes than one location in Windows and a different one for macOS/Linux IMHO.",
      "created_at": "2019-06-13T12:55:51Z",
      "updated_at": "2019-06-13T12:55:51Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "It would be nice if we had the ability to override the location via an environment variable if needed.",
      "created_at": "2019-06-13T14:27:34Z",
      "updated_at": "2019-06-13T14:27:34Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee reviewed this, and we believe the risk of changing the \"user PowerShell folder\" across versions/editions of PowerShell and downlevel versions of the OS is too high to take the chance. Symlinks aren't well supported downlevel, and if users want to change their Documents to not use OneDrive, they can do so. Additionally, migration logic on upgrades (and/or moving/linking to existing folders) is extremely hard to get right 100%, and we don't want to leave users in a broken state. Additionally, `$profile` can be used for changing `PSModulePath` or executing profiles in other locations, and users can create their own symlinks for re-routing the folder. \r\n\r\nThat being said, it might be worth creating an automatic variable in PowerShell that points to the \"user PowerShell folder\" across platforms. ",
      "created_at": "2019-06-20T18:01:42Z",
      "updated_at": "2019-06-20T18:01:42Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Wouldn't an environment variable be better than an automatic variable, so that it could be set broadly across many systems? Then PowerShell could check for the presence of that environment variable on launch, and if present, use that path as the user profile path, otherwise, use the default path as the user profile path.\r\n\r\nAnother argument for an environment variable is for profiles. Today user profiles are loaded from the user profile path. That wouldn't work with an automatic variable that you update as part of your user profile.",
      "created_at": "2019-06-20T20:51:43Z",
      "updated_at": "2019-06-20T21:07:49Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro technically what you describe is only accurate in 4 particular scenarios and in each of these this is historically kept in line with existing on Windows functionality where User PSModulePath has always been housed in `$env:userprofile\\Documents`\r\n\r\n1. You log in with a Microsoft account to a new Device - this is something you can bypass completely and use a Local Only account mitigating this issue completely\r\n2. You log into a new device that has Organisational policies that enforces the use of Onedrive for Business\r\n3. You sign into OneDrive (consumer) on a device using a non-Microsoft account, ie a local login, and link it with your Microsoft account login\r\n4. You sign into OneDrive for Business on a device using a either an AD or AAD backed account and link it with your organisations Office 365 instance.\r\n\r\nIn Scenario 1/3\r\nCreating a new Local user and using that bypasses this being an issue\r\nAlso telling OneDrive not to sync the PowerShell Folder (which you can do in the UI nice and easily) again bypasses this being a problem from size concerns but adds another one where syncing your profile script and other needed scripts is now a manual task.\r\n\r\nIn Scenario 2/4 \r\nThe User `$PSModulePath` updates to either\r\n\r\n-  `$env:userprofile/Onedrive-<Orgname>/Documents` \r\n-  `$env:userprofile/Onedrive/Documents`\r\n\r\nbecause under the Hood OneDrive Sync Client has performed User Document folder redirection which is actually set as a registry setting which is all that is being read here to create the path used in PowerShell\r\n\r\nIf you never enable Onedrive sync of the docs folder then the folder stays `$env:userprofile/Documents/`\r\n\r\nThe only time I know this to be different is when orgs set Users Home Drives to be a H Drive on a mapped drive location which is often set in AD and enforced via GPO which is also just a reg key setting. But that just updates the `$env:userprofile` variable not the docs folder itself\r\n\r\nSo technically this is NOT a PowerShell issue to contemplate solving and is something that with user training to say `hey you can tell Onedrive not to sync that PowerShell Folder but still sync everything else in the Docs folder` \r\n\r\n> Why use the documents folder in the first place? Powershell profiles / scripts / modules are not documents in the traditional meaning. I suggest use the generic appfolders (local, roaming) provided in Windows by default instead of using Documents or even the proposed $env:USERPROFILE.powershell. While the latter is common on *nix operating systems, the appfolders are the way to go on Windows.\r\n\r\nScripts are still documents, whether they are `traditional documents` or not is neither here nor there, same with any text file and as such should be loosely treated like standard document\r\n\r\nI for one can't stand the messiness caused by all the apps that write configurations to a folder like below because they do not allow me to bring my configurations of those applications across with me as a user of those applications to new machines. where as in the docs folder I can dump 100 scripts that I may need inc my profile script and 20 modules that I need and be 100% sure that I can rebuild that machine or deploy an additional machine and my profile brings these modules and scripts with me ready to use straight away, lowering the mean time to recover if i suffer a bricked update or a hardware failure or even a lost/stolen device.\r\n![image](https://user-images.githubusercontent.com/6355225/59885936-eeb8de00-93b4-11e9-9a88-29ef0d2ddf64.png)\r\n\r\nOverall this is a 10+ year profile placement that at the time made sense for admin scripters and IMO still makes sense in its current implementation - I am aware I am in the minority in this thread but IMO changing this to a `.powershell` folder in `$env:userprofile` or `$env:LocalAPPDATA` `$env:APPDATA` to me feels like a mix of breaking existing well understood functionality and wasted engineering effort for what I see to be no actual useful gain.\r\n\r\nand to @joeyaiello point I can't see a need for adding engineering effort behind an automatic var that perhaps is going to be used by a very small subset of users compared to the mass majority",
      "created_at": "2019-06-20T23:08:55Z",
      "updated_at": "2019-06-20T23:08:55Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit Why all the soapboxing for a issue that the Committee already responded to? Per their response, the default location of the user profile for PowerShell isn't going to change.\r\n\r\nAs for engineering effort on an environment variable, this is open source. I wasn't asking the PS Team to do it, nor would I expect them to. I'll do it via a PR though, because it matters to myself, and others as well.",
      "created_at": "2019-06-21T00:30:08Z",
      "updated_at": "2019-06-21T00:30:08Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "If this one becomes a greater issue in the future, feel free to re-file, but given the decision, I'm going to close it. ",
      "created_at": "2019-06-28T21:51:15Z",
      "updated_at": "2019-06-28T21:51:15Z"
    },
    {
      "author": "larryclaman",
      "author_association": "NONE",
      "body": "I'm aware this is a closed issue, but I found this discussion after running into the same issue as @KirkMunro (problems syncing Onedrive\\Docuements\\WindowsPowerShell), and wanted to post my solution for posterity.\r\n\r\nUltimately, what I did was to leave WindowsPowerShell in its default location, but to add the following code to my profile.ps1 file:\r\n`$env:PSModulePath = $env:PSModulePath -replace \"\\\\OneDrive\\\\Documents\\\\WindowsPowerShell\\\\\",\"\\.powershell\\\"`\r\n\r\nThis leaves the WindowsPowerShell folder in its default location, but allows the modules to be saved in $env:USERPROFILE\\.powershell, which does not sync to onedrive.\r\n",
      "created_at": "2019-11-22T14:08:10Z",
      "updated_at": "2019-11-22T14:09:52Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "But it does not change the location for local help, does it?",
      "created_at": "2020-07-25T18:56:19Z",
      "updated_at": "2020-07-25T18:56:19Z"
    }
  ],
  "created_at": "2018-10-18T15:41:54Z",
  "number": 8069,
  "state": "closed",
  "title": "Move PowerShell folder on Windows from ${env:USERPROFILE}\\OneDrive\\Documents\\PowerShell to ${env:USERPROFILE}\\.powershell",
  "updated_at": "2020-07-25T18:56:19Z"
}