{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17973",
  "author": "iRon7",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI see a lot of similar issues:\r\n* #17649 [Intrinsic .ForEach() method doesn't work with methods / parameterized properties of hashtables](https://github.com/PowerShell/PowerShell/issues/17649)\r\n* #17520 [Member-access enumeration doesn't work with numeric hashtable keys ](https://github.com/PowerShell/PowerShell/issues/17520)\r\n* #17514 [Member-access enumeration on arrays of hashtables (dictionaries) works with dot notation, but not with index notation](https://github.com/PowerShell/PowerShell/issues/17514)\r\n* #17190 [A dictionary type that only implements the generic IDictionary interface doesn't support dot notation (property-access syntax) ](https://github.com/PowerShell/PowerShell/issues/17190)\r\n\r\nso this one might be a duplicate (or have a similar cause).\r\n\r\n```PowerShell\r\n@{a=1;b=2}.GetEnumerator().Name\r\na\r\nb\r\n@{a=1;b=2}.GetEnumerator().Value\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\n1\r\n2\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nNothing return for the `value` property\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nNo errors\r\n```\r\n\r\n### Workarround\r\n\r\nUse the [Array subexpression operator `@( )`](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators#array-subexpression-operator--) or simply `@{a=1;b=2}.values` \ud83d\ude0a.\r\n```PowerShell\r\n@(@{a=1;b=2}.GetEnumerator()).Value\r\n1\r\n2\r\n```\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "`Key` does not work too (but `Name` \"mystically\" does)\r\n```\r\n@{a=1;b=2}.GetEnumerator().key\r\n```",
      "created_at": "2022-08-26T15:51:18Z",
      "updated_at": "2022-08-26T15:51:18Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "TBH, I would say expected behavior is both should not work. `GetEnumerator()` should return a .NET enumerable IIRC, which has neither `Name` nor `Value` properties, but iterates over object which do. The reason wrapping into array works is that PowerShell arrays are special case which effectively translate `.Value` into `| Where-Object 'Value'`",
      "created_at": "2022-08-26T18:20:51Z",
      "updated_at": "2022-08-26T18:20:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Technically, `.GetEnumerator()` returns an enumeraTOR, not an enumerABLE.\r\n\r\nHowever, given that the following _do_ work, one would expect `@{a=1;b=2}.GetEnumerator().Value` to work too, consistently (that it works with `.Name` magic is presumably a happy accident; it is an _alias_ property of  the type-native `.Key` property):\r\n\r\n```powershell\r\n# This *should* be the equivalent of @{a=1;b=2}.GetEnumerator().Value\r\n@{a=1;b=2}.GetEnumerator() | ForEach-Object Value # OK\r\n\r\n@{a=1;b=2}.GetEnumerator().ForEach('Value'`) # OK\r\n```\r\n\r\nThe reason that `@(...)` works is that it forces enumeration of the enumeraTOR and collects the results in an array, which itself is an enumerABLE, on which member-access enumeration works as expected. (`(...)` would _not_ do that).\r\n",
      "created_at": "2022-08-26T19:53:08Z",
      "updated_at": "2022-08-26T19:53:08Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 Thanks for correction, I always get those two mixed up.\r\n\r\nCan somebody check please what happens in `StrictMode`? From the output I cannot see whether it is an empty collection or null from missing property.\r\n\r\nBTW, is there something like `Format-Debug` which prints type of each variable and does not flatten collections? Would be really useful to verify cases like this, distinguish null from empty collection from empty string etc. I sometimes use `Get-Member` for that but it also prints functions so is quite noisy. ",
      "created_at": "2022-08-26T20:26:56Z",
      "updated_at": "2022-08-26T20:26:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It seems that `$null` is returned, as you would get with a _nonexistent_ property (with strict mode turned off).\r\n\r\nThe fact that `Set-StrictMode -Version 2; @{a=1;b=2}.GetEnumerator().Value` does _not_ complain - it recognizes the property as existing on all enumerated items, yet returns `$null` instead of the values - suggests that the intent is for ` @{a=1;b=2}.GetEnumerator().Value` to work and that we're simply dealing with a bug.\r\n\r\nAnother indication: It works fine with `.GetEnumerator()` called on an _array_: `('a', 'bc').GetEnumerator().Length`\r\n",
      "created_at": "2022-08-26T20:47:17Z",
      "updated_at": "2022-08-26T20:47:17Z"
    }
  ],
  "created_at": "2022-08-26T13:41:01Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 17973,
  "state": "open",
  "title": "Member-Access  enumeration doesn't work on enumerated values",
  "updated_at": "2022-10-17T17:55:33Z"
}