{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12393",
  "author": "espenrl",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nThere should be commands `Grant-AccountRight` and `Revoke-AccountRight` for managing rights like `SeBatchLogonRight` and `SeServiceLogonRight`. Two rights that are often needed to be set when creating a user account for running a `Task Scheduler task` or `Windows Service based executable` .\r\n\r\nThe following is the piece that finally inspired me to write this GitHub issue: Tutorial with part PowerShell automation and part manual UI work: [Host ASP.NET Core in a Windows Service: Log on as a service rights](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service?view=aspnetcore-3.1&tabs=visual-studio#log-on-as-a-service-rights)\r\n\r\nLinks\r\n- [Account Rights Constants](https://docs.microsoft.com/en-us/windows/win32/secauthz/account-rights-constants) \r\n- [LsaAddAccountRights](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-lsaaddaccountrights)\r\n- [LsaRemoveAccountRights](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-lsaremoveaccountrights)\r\n- [LSA Authentication](https://docs.microsoft.com/en-us/windows/win32/secauthn/lsa-authentication)\r\n- [Managing Account Permissions](https://docs.microsoft.com/en-us/windows/win32/secmgmt/managing-account-permissions)\r\n\r\n\r\n\r\n# Proposed technical implementation details\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nI have implemented these cmdlets in C# a long time ago. We've been using them at my work place. If you guys think the idea is appropriate I would like to make a PR.",
  "closed_at": "2021-10-26T12:35:46Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This would need to be a separate module, I think, in any case. Even if they end up shipped in-box in a future Windows edition of PowerShell they would have to be maintained as a separate module.\r\n\r\nAre these cmdlets available as a module on the PSGallery?",
      "created_at": "2020-04-20T16:18:11Z",
      "updated_at": "2020-04-20T16:18:35Z"
    },
    {
      "author": "espenrl",
      "author_association": "NONE",
      "body": "Would the `Microsoft.PowerShell.Security` module be a natural place to have it? Only published for Windows though.",
      "created_at": "2020-06-26T12:46:26Z",
      "updated_at": "2020-06-26T12:46:26Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "I know the NTFSSecurity module in the PowerShell Gallery is very popular. I'm not sure this is something that belongs in PowerShell 7 as a native experience. This is not a deficiency in PowerShell per se, especially when there are community alternatives.",
      "created_at": "2021-06-14T19:51:05Z",
      "updated_at": "2021-06-14T19:51:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd add we need cross-platform solution to include it in PowerShell distribution but I don't think anything like that exists.",
      "created_at": "2021-06-15T05:25:18Z",
      "updated_at": "2021-06-15T05:25:18Z"
    },
    {
      "author": "espenrl",
      "author_association": "NONE",
      "body": "If you guys want these cmdlets in PowerShell, tell me where to put the code and I'll do the coding. With the introduction of PInvoke source code generation these things are even easier to make, with less code.\r\n\r\nhttps://github.com/microsoft/CsWin32\n\n<blockquote><img src=\"https://opengraph.githubassets.com/5f81898a278736f26e53c5279a1214d1907aa0b86a2b629e44d93ca6bc4205b2/microsoft/CsWin32\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/microsoft/CsWin32\">microsoft/CsWin32</a></strong></div><div>A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project. - microsoft/CsWin32</div></blockquote>",
      "created_at": "2021-06-17T14:07:51Z",
      "updated_at": "2021-06-17T14:07:53Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "The PowerShell Cmdlet Working Group has looked at this issue and come to this consensus.\r\n\r\n> Ideally, these features should come from the Windows team that owns this area, but it's unlikely for that to happen realistically unless there is sufficient customer ask (via Windows feedback tool).  For now, a community-developed project in the PSGallery makes sense. This is not something the PowerShell team would own, but individuals on the team may choose to participate.\r\n",
      "created_at": "2021-10-26T12:35:46Z",
      "updated_at": "2021-10-26T12:35:46Z"
    }
  ],
  "created_at": "2020-04-20T16:03:26Z",
  "number": 12393,
  "state": "closed",
  "title": "Feature Request: Add commands for granting/revoking Windows account rights",
  "updated_at": "2021-10-26T15:44:47Z"
}