{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1270",
  "author": "vors",
  "body": "I started tweak some SMA internals. `Start-PSBuild` is a very slow way to do incremental builds.\nThe reason for slowness is that **everything** depends on SMA, so you are rebuilding the entire world on the slightest change.\n\nIf a developer doesn't alternate public API contracts, they should be able to recompile just one dll.\n\nIt could be done by calling `dotnet build --output` directly, but it requires some knowledge about build internals.\n\n```\ndotnet build --output ./src/powershell/bin/Linux/netcoreapp1.0/osx.10.11-x64 --configuration Linux --framework netstandard1.6 --runtime osx.10.11-x64 ./src/System.Management.Automation\n```\n\nWe should document this or better provide a friendly way to scope the build to one dll in `Start-PSBuild`.\n\nIf it's relevant only for SMA, perhaps we can add `Start-PSBuild -SMAOnly` switch.\n",
  "closed_at": "2016-07-30T17:05:19Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors per #1234 I intend to solve this by depending on an SMA reference assembly, but am blocked.\n",
      "created_at": "2016-07-03T19:10:00Z",
      "updated_at": "2016-07-03T19:10:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@andschwa great! Can you elaborate how it will work? Would it be done on `dotnet` or in our code?\n",
      "created_at": "2016-07-03T19:13:55Z",
      "updated_at": "2016-07-03T19:13:55Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "If we build against a reference assembly, then rebuilding SMA wouldn't rebuild anything that only consumes SMA's public APIs.\n\nBut that's the caveat, we have at least some which use internals visible too, and I don't know if we guarantee those APIs, my guess is not.\n",
      "created_at": "2016-07-03T19:15:31Z",
      "updated_at": "2016-07-03T19:15:31Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I suppose that a reference assembly could include internals. If we can generate this, our lives would be made much simpler.\n",
      "created_at": "2016-07-03T19:23:03Z",
      "updated_at": "2016-07-03T19:23:03Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I see, so the hope is basically that reference assembly doesn't change at all? What if it would?\n",
      "created_at": "2016-07-03T19:23:22Z",
      "updated_at": "2016-07-03T19:23:22Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The hope is we could generate it, and it would change when a developer makes a specific contract change.\n\nOne other problem, dotnet needs to know how to pick up a runtime and a reference assembly. That might be the end all blocker :frowning:\n",
      "created_at": "2016-07-03T19:25:58Z",
      "updated_at": "2016-07-03T19:25:58Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Lets try it out, and as a plan \"B\" we can add `-SMAOnly` switch. \n",
      "created_at": "2016-07-03T19:29:20Z",
      "updated_at": "2016-07-03T19:29:20Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "This is done\n",
      "created_at": "2016-07-30T17:05:19Z",
      "updated_at": "2016-07-30T17:05:19Z"
    }
  ],
  "created_at": "2016-07-03T08:17:32Z",
  "number": 1270,
  "state": "closed",
  "title": "Document \"quick incremental build\"",
  "updated_at": "2016-07-30T17:05:19Z"
}