{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4217",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nCreate file `./t` - note the absence of extension `.ps1` - with the content below and make it executable (`chmod +x ./t`).\r\n\r\n```powershell\r\n#!/usr/bin/env powershell\r\n\r\n'$PSCommandPath: ' + $PSCommandPath\r\n'$MyInvocation.MyCommand.Path: ' + $MyInvocation.MyCommand.Path\r\n'$MyInvocation: ' + ($MyInvocation | Out-String)\r\n```\r\n\r\nBoth the following invocation methods, from `bash`, yield the behavior described below:\r\n\r\n```sh\r\n./t  # invocation via shebang line\r\npowershell ./t   # implied -File\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n`$PSCommandPath` and `$MyInvocation.MyCommand.Path` should reflect the script's file path, and `$MyInvocation` should be populated appropriately.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n$PSCommandPath:\r\n$MyInvocation.MyCommand.Path:\r\n$MyInvocation:\r\n\r\nMyCommand             : #!/usr/bin/env powershell\r\n\r\n                        '$PSCommandPath: ' + $PSCommandPath\r\n                        '$MyInvocation.MyCommand.Path: ' + $MyInvocation.MyCommand.Path\r\n                        '$MyInvocation: ' + ($MyInvocation | Out-String)\r\n\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 0\r\nOffsetInLine          : 0\r\nHistoryId             : 1\r\nScriptName            :\r\nLine                  :\r\nPositionMessage       :\r\nPSScriptRoot          :\r\nPSCommandPath         :\r\nInvocationName        :\r\nPipelineLength        : 2\r\nPipelinePosition      : 1\r\nExpectingInput        : False\r\nCommandOrigin         : Runspace\r\nDisplayScriptPosition :\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.3 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.3 on Ubuntu 16.04.1 LTS\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it work well without \"env\"? ( `#!/usr/bin/powershell`)",
      "created_at": "2017-07-11T15:05:36Z",
      "updated_at": "2017-07-11T15:05:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "No, that doesn't make a difference.\r\n\r\nAlso keep in mind that using `env`  (`#!/usr/bin/env powershell`) is the only way to _portably_ (across Unix platforms) specify the shebang line.\r\n(On macOS, the location is `/usr/local/bin/powershell`, not `/usr/bin/powershell`).\r\n\r\n",
      "created_at": "2017-07-11T15:11:02Z",
      "updated_at": "2017-07-11T15:11:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What parameter do the shebang use to run powershell?  `powershell -f filename` ?",
      "created_at": "2017-07-11T15:20:51Z",
      "updated_at": "2017-07-11T15:20:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`#!/usr/bin/env powershell` is the full shebang line, to which the system on invocation passes the absolute script file path as an argument.\r\n\r\nIn other words: the system calls `env` with `powershell` and the script file path, effectively resulting in invocation `/path/to/powershell <script-file-path>`.\r\n\r\nGiven that we've switched to defaulting to `-File`, that is all that is needed (except that to suppress the profile loading you'd also need `-NoProfile` - see below).\r\n\r\nNote that _portably_ (across Unix platforms) only _one_ argument is supported in the shebang line, which due to using indirect invocation via `env` is already \"used up\" by the `powershell` argument.\r\n\r\nmacOS supports multiple arguments, but Linux does not, so if you wanted a shebang line that is both portable _and_ uses `-NoProfile`, you're out of luck.\r\n\r\nOf course, the larger issue is that `-NoProfile` should be the _default_ - see #3743 \r\n\r\n",
      "created_at": "2017-07-11T15:41:51Z",
      "updated_at": "2020-04-13T00:38:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify! Have we the Issue if run  /path/to/powershell <script-file-path> from bash?\r\n",
      "created_at": "2017-07-11T15:57:47Z",
      "updated_at": "2017-07-11T15:57:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, same issue, because these two invocation methods are effectively the same.",
      "created_at": "2017-07-11T15:59:18Z",
      "updated_at": "2017-07-11T15:59:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please add this to first post and maybe change the Issue subject. Thanks!",
      "created_at": "2017-07-11T16:04:39Z",
      "updated_at": "2017-07-11T16:04:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Done.",
      "created_at": "2017-07-11T16:21:40Z",
      "updated_at": "2017-07-11T16:21:40Z"
    },
    {
      "author": "eedwards-sk",
      "author_association": "NONE",
      "body": "This is still affecting PowerShell 7.0.0-preview.2",
      "created_at": "2019-08-14T19:46:09Z",
      "updated_at": "2019-08-14T19:46:09Z"
    },
    {
      "author": "PeterHodges15",
      "author_association": "NONE",
      "body": "This is still affecting PowerShell 7.0.0-RC3 and applies to the Windows environment - in Visual Studio Code. \r\nIf you have a library that uses $PSScriptRoot (ex: $Global:R = $PSScriptRoot), and you open a ps1 and selected and run (F8) \"Import-Module Library.psm1\"  The $PSScriptRoot is not evaluated (in the library load).\r\nThis appears to be a problem with Visual Studio Code insiders edition.  It is not a problem with regular Visual Studio Code.   I will add that issue there.",
      "created_at": "2020-02-25T12:58:38Z",
      "updated_at": "2020-02-25T13:03:23Z"
    },
    {
      "author": "m5x",
      "author_association": "NONE",
      "body": "I can confirm this issue still exists on PowerShell 7.0.0 final (OS Linux). Is there by any chance any workaround? ",
      "created_at": "2020-04-13T00:30:45Z",
      "updated_at": "2020-04-13T00:30:45Z"
    },
    {
      "author": "fekfoq259",
      "author_association": "NONE",
      "body": "Same issue on Windows 10.\r\n\r\n```plaintext\r\nPSVersion 7.0.2\r\nPSEdition Core\r\nOS Microsoft Windows 10.0.19041\r\n\r\nMyCommand             : test.ps1\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 0\r\nOffsetInLine          : 0\r\nHistoryId             : 1\r\nScriptName            :\r\nLine                  :\r\nPositionMessage       :\r\nPSScriptRoot          :\r\nPSCommandPath         :\r\nInvocationName        : D:\\test.ps1\r\nPipelineLength        : 2\r\nPipelinePosition      : 1\r\nExpectingInput        : False\r\nCommandOrigin         : Runspace\r\nDisplayScriptPosition :\r\n```",
      "created_at": "2020-06-23T16:49:04Z",
      "updated_at": "2020-06-23T16:52:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Took a look at this.  This is currently \"by-design\".  This [line](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHost.cs#L1840) explicitly handles the case of a shebang script that doesn't have .ps1 extension by running the contents of the script so the file path is not preserved.  Workaround is to have .ps1 extension even if using shebang to have invocation info.",
      "created_at": "2020-07-21T22:14:55Z",
      "updated_at": "2020-07-21T22:14:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is there any reason this design should be kept?",
      "created_at": "2020-07-21T23:06:04Z",
      "updated_at": "2020-07-21T23:06:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is there any reason this design should be changed? :-)",
      "created_at": "2020-07-22T06:22:13Z",
      "updated_at": "2020-07-22T06:22:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, of course there is:\r\n\r\nA script should provide invocation information _irrespective of the specific invocation method_.\r\n\r\nThe proposed workaround is only a workaround _from within PowerShell_ and would also switch from running in a child process to running in-process; when called from outside PowerShell, you'd have to call the script _with_ the `.ps1` extension, whereas the primary advantage of a shebang-line-based script is to _not_ require a filename extension.\r\n\r\n@SteveL-MSFT's statement is open to interpretation, but I read it to mean: \"While the current behavior is somewhat intentional (in the sense that there is a code path for it), it should be changed - here's the relevant source-code location for someone who wants to work on this.\"\r\n@SteveL-MSFT, can you confirm?\r\n\r\nEither way, the current behavior is clearly a bug that should be fixed, so please reopen this issue.\r\n\r\n",
      "created_at": "2020-07-22T12:17:29Z",
      "updated_at": "2020-07-22T12:42:46Z"
    },
    {
      "author": "m5x",
      "author_association": "NONE",
      "body": "> A script should provide invocation information _irrespective of the specific invocation method_.\r\n\r\nExactly. To me it also seems logical to expect external scripts to have the invocation info available no matter what the file name is. And PowerShell knows from the shebang line that the file is an external script so why not treat is as such?\r\n\r\nI have proposed such a solution in #12494 but it does not have necessary reviews to be merged nor explanations why.",
      "created_at": "2020-07-22T21:11:35Z",
      "updated_at": "2020-07-22T21:11:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Will #12494  fix the issue too?",
      "created_at": "2020-07-23T08:00:01Z",
      "updated_at": "2020-07-23T08:00:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The stated intent of #12494 is to fix this issue.\r\n\r\nUnfortunately, activity there has stalled after an initial flurry, as @m5x states.\r\n\r\nTherefore:\r\n\r\n* Please reopen this issue.\r\n\r\n* Please finish reviewing #12494, so that it can be merged.\r\n\r\nThat is, unless there truly are objections to fixing this, which I find hard to imagine.\r\nIf so, we need an unambiguous statement to that effect.\r\n\r\n",
      "created_at": "2020-07-28T17:45:37Z",
      "updated_at": "2020-07-28T17:45:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Reopen the issue as there is an open PR for this.",
      "created_at": "2020-08-03T17:05:25Z",
      "updated_at": "2020-08-03T17:05:25Z"
    }
  ],
  "created_at": "2017-07-11T02:18:59Z",
  "number": 4217,
  "state": "open",
  "title": "Unix: A script without .ps1 extension passed to the powershell binary lacks invocation information ($PSCommandPath, $MyInvocation), such as when invoked via a shebang line.",
  "updated_at": "2020-08-03T18:50:29Z"
}