{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3603",
  "author": "mklement0",
  "body": "Currently, to get exponentiation (`$x` to the power of `$n`), you must use the .NET framework:\r\n\r\nE.g., to calculate 2 to the power of 8:\r\n\r\n    > [Math]::Pow(2, 8)\r\n    256\r\n\r\nIt would be nice to have a dedicated operator, such as `**`, as in other languages (e.g., Python, Ruby, JavaScript, Perl):\r\n\r\n     > 2 ** 8\r\n     256\r\n\r\n",
  "closed_at": "2017-10-12T04:33:33Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm disinclined to support this operator. My thinking:\r\n\r\n* C# doesn't have it, so does PowerShell really need it?\r\n* An operator is potentially confusing - different languages use different tokens (is it `**` or `^`)\r\n* The operator isn't used all that often, especially in typical PowerShell scripts\r\n* `[Math]::Pow(2, 8)` is really readable.",
      "created_at": "2017-04-20T20:08:22Z",
      "updated_at": "2017-04-20T20:08:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the feedback.\r\n\r\n> C# doesn't have it, so does PowerShell really need it?\r\n> The operator isn't used all that often, especially in typical PowerShell scripts\r\n\r\nI can't speak to the real-world need, only that I keep missing it personally. Perhaps others can comment.\r\n\r\nFrankly, I find the absence of an exponentiation operator from C# puzzling; [this blog post](https://blogs.msdn.microsoft.com/csharpfaq/2004/03/07/why-doesnt-c-have-a-power-operator/) from 2004 explains that it wasn't included because it is \"fairly rare\", which wasn't too well-received in the comments.\r\n\r\nAside from that, PowerShell already has operators that C# doesn't have, and it is a sufficiently different beast so that I wouldn't rule it out just based on that.\r\n\r\nPerhaps PowerShell can lead by example and down the road we'll see an operator added to C# as well? :)\r\n\r\n> An operator is potentially confusing - different languages use different tokens (is it ** or ^)\r\n\r\n`^` indeed invites confusion, because it has [different semantics in some languages](https://en.wikipedia.org/wiki/Exponentiation#In_programming_languages).\r\n\r\n`**`, by contrast, while not used by all languages, seems to have no other meaning, and, as stated, is used in several popular languages: Python, Ruby, JavaScript, Perl\r\n\r\n> `[Math]::Pow(2, 8)` is really readable.\r\n\r\nIt is readable, but neither easy to _remember_ nor to _type_.\r\n\r\nTo me, a dedicated exponentiation operator seems like a natural complement to the arithmetic operators.",
      "created_at": "2017-04-20T21:07:22Z",
      "updated_at": "2017-04-20T21:07:22Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "I have missed the Python `**` power operator as well, sometimes. Adding a suggestion that this operator could be in the form:\r\n\r\n    2 -pow 8\r\n\r\nWhich is perhaps more clear, more discoverable, and inviting less confusion than `^` or `**`. That would be different to the arithmetic syntax (`+`, `-`, `*`, `/`), but consistent with `-shl` syntax.\r\n\r\nPowerShell tends to like full words, so `2 -power 8` is another option, but `-pow` has the advantage of matching the name of `[math]::Pow()`",
      "created_at": "2017-09-01T18:27:14Z",
      "updated_at": "2017-09-01T20:17:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@HumanEquivalentUnit: \r\n\r\nI can see both sides of the argument, and I'd be happy with either syntax.\r\n",
      "created_at": "2017-09-01T19:38:27Z",
      "updated_at": "2017-09-01T19:38:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My personal opinion is that I would be fine adding a power operator.  It would certainly not be high on my priority list, but since @Gimly is already offering to contribute the work, I don't see any major downside to enabling this capability.  For the syntax, I think I prefer `2 -pow 8` only because it enables adding more operators in the future without running out of symbols or remember what which ones means what.",
      "created_at": "2017-10-11T01:14:58Z",
      "updated_at": "2017-10-11T01:14:58Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I dunno about using `-pow`.  If we went this way, I'd expect the modulo operator to be `-mod` but instead it is `%`.  I don't see a strong need for this operator but if it gets implemented, I'd prefer syntax inline with Python and JavaScript (`**`) given that there is no equivalent operator in C#.  \r\n\r\nOne other option is to consider doing what C# did to allow folks to use \"simpler\" method invocations e.g.: `pow()`, `sin()`, `cos()` etc.  C# does this by allowing users to add a `using static System.Math`. ",
      "created_at": "2017-10-11T03:31:39Z",
      "updated_at": "2017-10-11T03:32:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`using static` might be a better general solution that works well with the math functions",
      "created_at": "2017-10-11T04:19:20Z",
      "updated_at": "2017-10-11T04:19:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I vote for `using static` - it looks very power. We need to explore this deeper.",
      "created_at": "2017-10-11T13:20:36Z",
      "updated_at": "2017-10-11T13:20:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I thinnk we should close the Issue. If we want ` discuss/implement static` it is better open new Issue.",
      "created_at": "2017-10-12T03:21:00Z",
      "updated_at": "2017-10-12T03:21:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`using static` definitely sounds like an interesting addition worth exploring separately, but it doesn't directly address what was proposed here: something that's available as _built-in_ functionality, preferably as an operator.\r\n\r\n(Making the static members of `[math]` available _by default_ would be problematic, given that it contains such generically named members such as `Log`).",
      "created_at": "2017-10-12T12:53:45Z",
      "updated_at": "2017-10-12T12:55:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I've been following this one on the periphery, so I might as well chime in. \r\n\r\nI'm not sure how useful a native power operator in PowerShell really is. I believe anyone who is using it would also be using the other `Math` statics already and I definitely don't see a need to add those as native operators. I like the `use static` idea, so long as it can be implemented at the user's discretion for the reason of @mklement0 point about `Log()`.\r\n\r\nIf `use static` were introduced as a user discretion feature, it may be confusing if this also couldn't be used on user defined PowerShell classes.",
      "created_at": "2017-10-12T13:13:02Z",
      "updated_at": "2017-10-12T13:13:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Where is Issue for ` use static`? :-)",
      "created_at": "2017-10-12T17:46:10Z",
      "updated_at": "2017-10-12T17:46:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Opened #5099 for discussion/tracking of `use static`",
      "created_at": "2017-10-12T20:16:33Z",
      "updated_at": "2017-10-12T20:16:33Z"
    },
    {
      "author": "dzmitry-lahoda",
      "author_association": "NONE",
      "body": "I still would find it usefull. pwsh has nice numbers (like python/lisp). and cannot use fsharp for as it is too typed. but for simple and small formulas in console it is great. so having 2.pow(512)  or 2**512 would be great.  ",
      "created_at": "2022-02-03T12:06:30Z",
      "updated_at": "2022-02-03T12:06:30Z"
    }
  ],
  "created_at": "2017-04-20T04:42:18Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Won't Fix",
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 3603,
  "state": "closed",
  "title": "Suggestion: implement an exponentiation (power-of) operator",
  "updated_at": "2022-02-03T12:06:30Z"
}