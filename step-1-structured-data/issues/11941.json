{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11941",
  "author": "iRon7",
  "body": "In addition to the requests #8862 and #11027 to build a lighter output than `[pscustomobject]` instances, I would like to purpose a `[DataTable]` output using something like a `-AsDataTable` switch:\r\n\r\n_Based on **`[String]`** columns_, a `[DataTable]` appears to consume about **21%** memory of what a array of `[pscustomobject]`  consumes (where an output class as purposed in #8862, takes about **20%**)\r\n\r\n**Benefits:**  \r\n\r\n- The general advance of a `[datatable]` is that they already quiet easily convert into a list of `[pscustomobject]`, take e.g.: `$DataTable | Export-Csv .\\Test.csv`, `$DataTable | Format-Table` and the default host output (simply `$DataTable`).\r\n- An advantage to #8862, is that it doesn't require to build a class (and the knowledge to do so).\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "My general feeling is that there should be a `ConvertFrom-DataTable` and `ConvertTo-DataTable` cmdlets as this is a key scenario in many database operations. Not sure how that would affect performance for piping it `Import-CSV | ConvertTo-DataTable` but that makes it so much more useful than tying it as a parameter.",
      "created_at": "2020-03-01T04:22:24Z",
      "updated_at": "2020-03-01T04:22:24Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> My general feeling is that there should be a `ConvertFrom-DataTable` and `ConvertTo-DataTable` cmdlets as this is a key scenario in many database operations. Not sure how that would affect performance for piping it `Import-CSV | ConvertTo-DataTable` but that makes it so much more useful than tying it as a parameter.\r\n\r\nThe reason for the `-AsDataTable` purpose as apposed to e.g. `AsHashTable` (#11027) purpose is that a `[DataTable]` doesn't require a `ConvertFrom-DataTable` (it automatically unrolls in powershell objects, e.g.: `$DataTable | ForEach-Object { ...`. \r\nA `ConvertTo-DataTable` cmdlet, at the other hand, would be more complex as a `[pscustomobject]` might contain different datatypes in a single column with makes a hard to define a single column `DataType` for a 'DataTable.Column` and it is also hard to determine the `DataType` if you want to support streaming. Besides a `[DataTable]` doesn't support as many data types as a `[PSCustomObject]`. Anyways, I have given it try here: https://powersnippets.com/convertto-datatable/\r\n\r\nBut I think it would be nice if PowerShell better supports the creation of that tables with an easier constructor and adding data rows, see: #11987\r\n\r\n\r\n\n\n<blockquote><div><strong><a href=\"https://powersnippets.com/convertto-datatable/\">ConvertTo-DataTable \u2013 Power$nippets</a></strong></div></blockquote>",
      "created_at": "2020-03-02T11:16:50Z",
      "updated_at": "2020-03-02T11:16:53Z"
    }
  ],
  "created_at": "2020-02-24T13:06:09Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 11941,
  "state": "open",
  "title": "Make ConvertFrom-Csv and Import-Csv support outputting DataTable",
  "updated_at": "2020-03-02T11:16:53Z"
}