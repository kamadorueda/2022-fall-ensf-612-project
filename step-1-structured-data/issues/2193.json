{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2193",
  "author": "1RedOne",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nToday, if you use Invoke-RestMethod and have any sort of malformed data in your request, Invoke-RestMethod eats the server response and instead returns a generic PowerShell error message, greatly increasing pain when troubleshooting.\n\nAs an example of desired behavior, it would be good if PowerShell surfaced the remote server response instead of just writing an error and dumping the response.\n## Expected behavior\n\nIt would be wonderful if Invoke-RestMethod wrote to an alternate stream or provided rich error data when encountering an error with an endpoint.  \n\nFor example. note the error data I'm about to get when I used the very useful Failure function[ provided in this blog post](http://wahlnetwork.com/2015/02/19/using-try-catch-powershells-invoke-webrequest/), I'm able to see the full remote server response, which makes troubleshooting this an absolute breeze.\n\n```\nfunction Failure {\n$global:helpme = $body\n$global:helpmoref = $moref\n$global:result = $_.Exception.Response.GetResponseStream()\n$global:reader = New-Object System.IO.StreamReader($global:result)\n$global:responseBody = $global:reader.ReadToEnd();\nWrite-Host -BackgroundColor:Black -ForegroundColor:Red \"Status: A system exception was caught.\"\nWrite-Host -BackgroundColor:Black -ForegroundColor:Red $global:responsebody\nWrite-Host -BackgroundColor:Black -ForegroundColor:Red \"The request body has been saved to `$global:helpme\"\nbreak\n}\n\n```\n\nWith this function loaded in memory, I'll run the below code with try/catch and call `Failure` on error.\n\n```\n$Splat = @{\n    Method      = 'PUT'\n    Uri         = 'https://api.us.onelogin.com/api/1/users/27697924/add_roles'\n    ContentType = \"application/json\"\n    Headers     = @{authorization = \"bearer:$token\" }\n    Body        = @{role_id_array = (143175)}\n}\n\nPS C:\\git> Invoke-RestMethod @Splat\n\nStatus: A system exception was caught.\n{\"status\":{\"error\":true,\"code\":400,\"type\":\"bad request\",\"message\":\"role_id_array should be -\\u003e array of positive integers\"}}\nThe request body has been saved to $global:helpme\n\n```\n## Actual behavior\n\nIn today's PowerShell, all server response data from `Invoke-RestMethod` is eaten and a generic PowerShell error is presented.  In scouring the results from `$error[0]` I was unable to find the actual server response.\n\n```\n$Splat = @{\n    Method      = 'PUT'\n    Uri         = 'https://api.us.onelogin.com/api/1/users/27697924/add_roles'\n    ContentType = \"application/json\"\n    Headers     = @{authorization = \"bearer:$token\" }\n    Body        = @{role_id_array = (143175)}\n}\n\nPS C:\\git> Invoke-RestMethod @Splat\nInvoke-RestMethod : The remote server returned an error: (400) Bad Request.\nAt line:1 char:1\n+ Invoke-RestMethod @Splat\n+ ~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-RestMethod], WebException\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\n\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\n\nName                           Value                                                                                                                                                                                                                             \n----                           -----                                                                                                                                                                                                                             \nPSVersion                      5.1.14393.103                                                                                                                                                                                                                     \nPSEdition                      Desktop                                                                                                                                                                                                                           \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                                           \nBuildVersion                   10.0.14393.103                                                                                                                                                                                                                    \nCLRVersion                     4.0.30319.42000                                                                                                                                                                                                                   \nWSManStackVersion              3.0                                                                                                                                                                                                                               \nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                                               \nSerializationVersion           1.1.0.1                                                                                                                                                                                                                           \n\n\n\n```\n",
  "closed_at": "2017-02-25T06:38:03Z",
  "comments": [
    {
      "author": "mattmcnabb",
      "author_association": "NONE",
      "body": "Excellent write-up Stephen! I can second Stephen's frustration with this issue!\n",
      "created_at": "2016-09-07T11:16:32Z",
      "updated_at": "2016-09-07T11:16:32Z"
    },
    {
      "author": "ngetchell",
      "author_association": "NONE",
      "body": "I've definitely been bitten by this. \n",
      "created_at": "2016-09-07T14:22:30Z",
      "updated_at": "2016-09-07T14:22:30Z"
    },
    {
      "author": "AWahlqvist",
      "author_association": "NONE",
      "body": "Same as the above, also using a helper function to get the error response stream. Hope the fix doesn't break those modules though, but even if it does it would be worth it not having to deal with it everytime.\n\nGreat write-up!\n",
      "created_at": "2016-09-07T16:14:23Z",
      "updated_at": "2016-09-07T16:14:23Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Essentially, if we just remove one line\r\n\r\n```\r\nresponse.EnsureSuccessStatusCode();\r\n```\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/aa764dd54edd5b214eb1fcb67aba5370014e7663/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L350\r\n\r\nwe will get a pretty decent output.\r\nFor example:\r\n\r\n```\r\n     Reading web response                                                                                                                                          StatusCode        : 400e stream... (Number of bytes read: 229)                                                                                                     StatusDescription : BadRequest                                                                                                                                     Content           : Error in call to API function \"team/get_info\": Bad HTTP \"Content-Type\" header: \"application/x-www-form-urlencoded\".  Expecting one of \r\n                    \"application/json\", \"application/json; charset=utf-8\", \"text/plain...\r\nRawContent        : HTTP/1.1 400 BadRequest\r\n                    Server: nginx\r\n                    Date: Sat, 11 Feb 2017 06:39:47 GMT\r\n                    Connection: keep-alive\r\n                    User-Agent: \r\n                    \r\n                    Error in call to API function \"tea...\r\nForms             : \r\nHeaders           : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [User-Agent, System.String[]]...}\r\nImages            : {}\r\nInputFields       : {}\r\nLinks             : {}\r\nParsedHtml        : \r\nRawContentLength  : 229\r\n```",
      "created_at": "2017-02-11T06:40:34Z",
      "updated_at": "2017-02-11T06:40:34Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Btw, in the FullCLR version there is no call to it.",
      "created_at": "2017-02-11T06:41:50Z",
      "updated_at": "2017-02-11T06:41:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Here's the experience I have coded up, feedback welcome:\r\n\r\n```powershell\r\nPS /home/steve/repos/PowerShell> invoke-webrequest http://httpstat.us/418       \r\ninvoke-webrequest : 418 I'm a teapot\r\nAt line:1 char:1\r\n+ invoke-webrequest http://httpstat.us/418\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0. \r\n   0\r\n}:HttpRequestMessage) [Invoke-WebRequest], I'm a teapot\r\n    + FullyQualifiedErrorId : 418,Microsoft.PowerShell.Commands.InvokeWebReque \r\n   stCommand\r\nPS /home/steve/repos/PowerShell> $e.FullyQualifiedErrorId                       \r\n418,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```",
      "created_at": "2017-02-13T20:15:45Z",
      "updated_at": "2017-02-13T20:15:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The content of the response is stuffed into the Message property of the ErrorDetail and the HTTP Status Code is in the front of the FullyQualifiedErrorId.  Response headers are thrown away (not sure if there's any useful case when you receive an error from the server).",
      "created_at": "2017-02-14T19:39:40Z",
      "updated_at": "2017-02-14T19:39:40Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> HTTP Status Code is in the front of the FullyQualifiedErrorId\r\n\r\nNot sure that's a good idea.",
      "created_at": "2017-02-15T04:10:20Z",
      "updated_at": "2017-02-15T04:10:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vors, open to suggestions.  Could prefix with `HttpStatus`, but then it's more parsing for scripts that want the actual code",
      "created_at": "2017-02-15T17:33:16Z",
      "updated_at": "2017-02-15T17:33:16Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee (subset of @HemantMahawar @lzybkr @khansen00 and myself) think that the most important piece is that you're able to get at the `Response` property of the exception as you can in FullCLR:\r\n\r\nWhen running `Invoke-WebRequest http://httpstat.us/418`, the behavior currently differs between Core and Full:\r\n\r\nFullCLR:\r\n```\r\nPS C:\\Users\\jaiello> $error[1].exception.response\r\n\r\n\r\nIsMutuallyAuthenticated : False\r\nCookies                 : {ARRAffinity=ce89bc5d89e3eae7a38e90a2582b973f890225b3bddc47e95c77a1d7831a8a71}\r\nHeaders                 : {X-AspNetMvc-Version, Access-Control-Allow-Origin, Content-Length, Cache-Control...}\r\nSupportsHeaders         : True\r\nContentLength           : 16\r\nContentEncoding         :\r\nContentType             : text/plain; charset=utf-8\r\nCharacterSet            : utf-8\r\nServer                  : Microsoft-IIS/8.0\r\nLastModified            : 2/15/2017 4:16:36 PM\r\nStatusCode              : 418\r\nStatusDescription       : I'm a teapot\r\nProtocolVersion         : 1.1\r\nResponseUri             : http://httpstat.us/418\r\nMethod                  : GET\r\nIsFromCache             : False\r\n```\r\n\r\nCoreCLR:\r\n```\r\nPS C:\\Program Files\\PowerShell\\6.0.0.15> $error[0].exception | fl -force *\r\n\r\n\r\nMessage        : Response status code does not indicate success: 418 (I'm a teapot).\r\nData           : {}\r\nInnerException :\r\nTargetSite     : System.Net.Http.HttpResponseMessage EnsureSuccessStatusCode()\r\nStackTrace     :    at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n                    at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\nHelpLink       :\r\nSource         : System.Net.Http\r\nHResult        : -2146233088\r\n```",
      "created_at": "2017-02-16T00:21:48Z",
      "updated_at": "2017-02-16T00:21:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The experience won't be exactly the same as the coreClr types are different, but it's improved and similar:\r\n\r\n```powershell\r\nPS /home/steve/repos/PowerShell> invoke-webrequest http://httpstat.us/418                                     \r\ninvoke-webrequest : Response status code does not indicate success: 418 (I'm a teapot).\r\nAt line:1 char:1\r\n+ invoke-webrequest http://httpstat.us/418\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], I'm a teapot\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCo \r\n   mmand\r\nPS /home/steve/repos/PowerShell> $error[0].exception.response                                                 \r\n\r\n\r\nVersion             : 1.1\r\nContent             : System.Net.Http.StreamContent\r\nStatusCode          : 418\r\nReasonPhrase        : I'm a teapot\r\nHeaders             : {[Cache-Control, System.String[]], [Server, System.String[]], [X-AspNetMvc-Version, \r\n                      System.String[]], [X-AspNet-Version, System.String[]]...}\r\nRequestMessage      : Method: GET, RequestUri: 'http://httpstat.us/418', Version: 1.1, Content: <null>, \r\n                      Headers:\r\n                      {\r\n                        User-Agent: Mozilla/5.0\r\n                        User-Agent: (Windows NT; Linux 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 \r\n                      UTC 2017; en-US)\r\n                        User-Agent: WindowsPowerShell/6.0.0\r\n                      }\r\nIsSuccessStatusCode : False\r\n```",
      "created_at": "2017-02-24T01:11:26Z",
      "updated_at": "2017-02-24T01:11:26Z"
    },
    {
      "author": "abhinavsingh003",
      "author_association": "NONE",
      "body": "Tried another work around to capture error from a REST API is anyone is trying to capture that:\r\n```\r\nfunction Failure {\r\n               $Message =  $_.ErrorDetails.Message;\r\n\t\t$json = $Message | ConvertFrom-Json  #if error you are trying to capture is returned in json\r\n               Write-Host (\"Message: \"+ $Message)\r\n}\r\n```\r\nWith this function loaded in memory, put your try / catch around Invoke-RestMethod and call Failure on error. Hope this helps.",
      "created_at": "2019-03-14T15:31:47Z",
      "updated_at": "2019-03-14T15:31:47Z"
    },
    {
      "author": "MeGoodGuy",
      "author_association": "NONE",
      "body": "Thanks abhinavsingh003 !\r\n\r\n```\r\n`        Catch {\r\n            if($_.ErrorDetails.Message) {\r\n                #WebResponseError\r\n                Write-Host $_.ErrorDetails.Message;\r\n            } else {\r\n                #UsualException\r\n                $_\r\n            }\r\n\r\n        }`\r\n```",
      "created_at": "2020-12-18T10:02:23Z",
      "updated_at": "2020-12-18T10:02:40Z"
    }
  ],
  "created_at": "2016-09-06T03:52:04Z",
  "number": 2193,
  "state": "closed",
  "title": "Invoke-RestMethod should return the full error response from the remote endpoint",
  "updated_at": "2021-04-26T10:13:33Z"
}