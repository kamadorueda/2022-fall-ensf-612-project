{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10416",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n- first commit is more cosmetic (only 0.3us (8%) perf win at startup time and 3us (80%) at opening follow runspaces). I measured the impact of the Steve's commit for .CPL and a result is this code, so I publish it. I measured with BenchmarkDotNet only the .CPL related code.\r\n- second commit remove extra SetSessionStateDrive method call. I haven't reliable tests to show perf win. Script tests have too much deviation. Main perf win in the code path (I mean AutomationEngine() ) is fixed in #10401 - there we exclude some extra file operations that is ~10 ms perf win on my system. But there still is extra SetSessionStateDrive method call - we remove this in the PR that will be ~<1 ms perf win.\r\n\r\nBased on the commit description I mark the PR as cleanup, not performance.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-08-29T21:32:14Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> first commit is more cosmetic (only 0.3us (8%) perf win at startup time and 3us (80%) at opening follow runspaces).\r\n\r\nThe 8% and 80%, what are they improving on? (what are you comparing with?) The pwsh startup time? \r\n\r\n> I guess it is about some ms but after #10401 will be less.\r\n\r\nI'm confused by this statement. Can you please reword your PR description a bit to make it more clear?",
      "created_at": "2019-08-22T17:11:53Z",
      "updated_at": "2019-08-22T17:11:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The 8% and 80%, what are they improving on? (what are you comparing with?) The pwsh startup time?\r\n\r\nSorry. I measured with BenchmarkDotNet only the .CPL related code. So as I mentioned we really don't see pwsh startup improvements - it is only code cleanup. I don't know how measure impact of each code pitch so I have to write my code and compare with current code. Here we get very small perf win. I pull my code only because it looks more simple and clean and also it states that we review the code pitch.\r\n\r\n> I'm confused by this statement. Can you please reword your PR description a bit to make it more clear?\r\n\r\nMain perf win in the code path (I mean AutomationEngine() ) is fixed in #10401 - there we exclude some extra file operations that is ~10 ms perf win. But there still is extra SetSessionStateDrive method call - we remove this in the PR that will be ~1ms perf win.\r\n",
      "created_at": "2019-08-23T05:31:53Z",
      "updated_at": "2019-08-23T05:31:53Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:51:36Z",
      "updated_at": "2019-09-19T17:51:36Z"
    }
  ],
  "created_at": "2019-08-22T12:07:11Z",
  "number": 10416,
  "state": "closed",
  "title": "Cleanup AutomationEngine and remove extra SetSessionStateDrive method call",
  "updated_at": "2019-09-19T17:51:37Z"
}