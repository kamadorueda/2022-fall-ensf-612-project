{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8926",
  "author": "Amaroq-Clearwater",
  "body": "# Summary of the new feature/enhancement\r\nIn the Linux terminal, it is possible to launch programs without going to their specific directory. For example, regardless of which directory you're in, you can simply type \"firefox\" to launch Firefox.exe without needing to type in the directory where you installed it.\r\n\r\nIn addition, the Linux terminal has Tab Autocomplete and a built-in text editor. Since the Linux terminal is open-source, and Bash is now available as a part of Windows, it would only make sense that combining features of the Linux Terminal with PowerShell would make the application more user-friendly for new users not just in general, but especially for individuals who are used to using Linux-based systems and are acclimating to using PowerShell for the first time.\r\n\r\nIn fact, why not go a step further, and eventually combine Bash and PowerShell into a single tool? To resolve conflicts between the two languages, it would by default prioritize PowerShell syntax/commands over Bash syntax/commands, but there could be a switch somewhere (accessible with either a command, a toggle shortcut, or a button in the GUI/CLI window) to switch between \"PowerShell Mode\", \"Bash Mode\", and any other syntax modes which may be present.\r\n\r\nUnfortunately as much as I would love to, I cannot really elaborate on how a toggle switch for mixed syntax would actually be implemented as I am still new to both PowerShell and Bash alike, but I seem to be picking it up relatively quickly.\r\n\r\nP.S.: The \"Issue-Enhancement\" label was added automatically. How the heck do I edit labels on GitHub? O.o",
  "closed_at": "2019-02-21T00:20:39Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aside: Issue labels are assigned based on the issue template; only repository maintainers can edit them.\r\n\r\nProvided programs are made available by adding their home directory to $env:PATH, both Bash and PowerShell should have no issues accessing them just by name, not needing full path. I'm not familiar with Bash to a great extent, but as far as I'm aware, Bash and PowerShell are very similar in this regard.\r\n\r\nPSReadLine has some configurable editing modes that mimic Vim or Emacs more closely, if that's what you're after (though personally I'm not especially fond of them, I guess I'm too accustomed to less arcane methods :wink: ). I believe you can tinker with those using `Set-PSReadLineOption`.\r\n\r\nAs for \"combining\" PowerShell and Bash, this isn't really something you can do without essentially reinventing all of Bash in a whole new language anyway. PowerShell is built on top of several core libraries, most notably .NET Core, and written in C#... whereas Bash is, as far as I know, built directly on the Linux kernel and operates completely in C. Despite the similarity in the _names_ of the languages, that's really effectively where it ends in just about every way imaginable. Invoking raw C code from C# is surprisingly costly in terms of performance.\r\n\r\nWhile Bash is (somewhat) available on Windows, the only real way I'm aware of is under WSL, which would mean restricting any Bash-centric features to that subsystem, whereas the rest of the PowerShell libraries have full access to all of Windows' processes.\r\n\r\nThe long and the short of it is they're fundamentally different tools at their core, and even if they weren't, they operate on fundamentally different designs as well; Bash is purely text-based - everything you can do with it relies on your ability to munge through bits and pieces of text. PowerShell is object-oriented, allowing for much greater flexibility and ease of operation without having to re-parse every piece of output at each step of the process, _and_ can still work quite effectively with manually parsing text should you have the need for it.\r\n\r\nIn my own opinion, Bash has a lot of catching up to do, and there's not really a lot it can add to PowerShell at this point. \ud83d\ude09 \r\n\r\nThere's been talk of an in-terminal text file editor for PS before, but the general consensus thus far seems to be that it's not an especially pressing concern as there are a wide array of vastly more usable tools available on just about every platform PS is available on.",
      "created_at": "2019-02-20T19:56:16Z",
      "updated_at": "2019-02-20T19:57:35Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "Ah, I see... Well, if they do ever try to implement Bash functionality in PowerShell, then they should probably build some heuristics into it as a line of defense against malicious commands. I don't know a list of malicious commands for Windows (let alone PowerShell), but I do know that some particularly nasty ones exist from my roaming the MalwareBytes forums, and I just came across a list of REALLY nasty Linux commands: https://www.howtogeek.com/125157/8-deadly-commands-you-should-never-run-on-linux/\r\n\r\nSelf-Preservation Heuristics probably belong in a different feature request thread, though.",
      "created_at": "2019-02-20T20:22:51Z",
      "updated_at": "2019-02-20T20:24:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Depends what you really mean by \"bash functionality\". At the present moment, I'm not really aware of anything you can do in Bash that can't be done in pwsh. Certainly, the syntax differs, but that's going to be a given; the languages are fundamentally different. \ud83d\ude04 \r\n\r\nAfter all, when only a handful of bash applications were overridden by pwsh command aliases, there was quite a bit of pushback from a fair few Linux community members, and those aliases ended up being removed from pwsh, as I recall.\r\n\r\nAnd yeah, pwsh has its fair share of \"why would you ever run that\" commands as well, though there are a few more safeguards in place, typically.",
      "created_at": "2019-02-20T20:27:15Z",
      "updated_at": "2019-02-20T20:27:42Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "Yeah, I'm going to try opening up a new issue for adding a lot more protective heuristics to PowerShell.",
      "created_at": "2019-02-20T21:13:45Z",
      "updated_at": "2019-02-20T21:13:45Z"
    }
  ],
  "created_at": "2019-02-20T19:33:53Z",
  "number": 8926,
  "state": "closed",
  "title": "Feature Request: Implementing Linux Terminal (Bash) features",
  "updated_at": "2019-02-27T15:54:29Z"
}