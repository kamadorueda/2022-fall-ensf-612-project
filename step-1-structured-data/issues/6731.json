{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6731",
  "author": "rjmholt",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nPutting a type constraint in the LHS of a `foreach` header (where the enumeration variable is defined) doesn't work. In fact, the parser gets very confused. See below:\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n> foreach ([int]$i in 1..10) { $i }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nAt line:1 char:10\r\n+ foreach ([int]$i in 1..10) { $i }\r\n+          ~\r\nMissing variable name after foreach.\r\nThe correct form is: foreach ($a in $b) {...}\r\nAt line:1 char:18\r\n+ foreach ([int]$i in 1..10) { $i }\r\n+                  ~~\r\nUnexpected token 'in' in expression or statement.\r\nAt line:1 char:26\r\n+ foreach ([int]$i in 1..10) { $i }\r\n+                          ~\r\nUnexpected token ')' in expression or statement.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : MissingVariableNameAfterForeach\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1-61-gca5aacca16a18394427a411d1ca21e88a7d8a37b\r\nOS                             Microsoft Windows 10.0.16299 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt I have no objections to adding this but I'm curious why you want to? Completeness perhaps? We've thought about it before but it never seemed particularly compelling, especially since the loop doesn't introduce a new scope the way it does in C#.  Also note that you _can_ add a type-constraint to the variable by simply initializing it before the loop as in:\r\n```\r\n[int] $i = 0\r\nforeach ($i in 1, \"two\", 3) { \"i is $i\" }\r\n```\r\nThis code will error when it hits \"two\".",
      "created_at": "2018-04-26T00:34:03Z",
      "updated_at": "2018-04-26T00:34:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "My only real motivation is the fact that the error messages the parser spits out when you try this are pretty incoherent. So ideally we fix that so the parser has a better concept of what the user's intent was and goes to the correct error state.\r\n\r\nBut if we're putting the work in there, it seems like we may as well support the actual feature. The `$i` part of `foreach ($i in 1,2,3) {}` constitutes a variable definition, so adding this we can better claim that variable definition can by constrained with a type in PowerShell. It's not obvious what we buy in the case of `[int]`, but in a more complex case, perhaps with a heterogeneous list, the type constraint could aid static analysis and completions, or provide a simple mechanism for coercive assignment. There are other ways to achieve it, but this is maybe pithier.\r\n\r\nTo be clear, I'd like to fix the error messages. The full feature isn't necessarily something I want, but seems worth discussing.",
      "created_at": "2018-04-26T02:22:10Z",
      "updated_at": "2018-04-26T02:23:56Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The error message actually seems clear to me. But I'm special :-) \r\n\r\n> constitutes a variable definition\r\n\r\nWell - we don't actually have variable definitions in PowerShell, except for  class variables. But the variable in a `foreach` loop does constitute an assignment and we allow you to attach attributes to a variable during an assignment so it's reasonable to support this\r\n```\r\nforeach ([int] [validaterange(0, 1000)] $i in 1..100) { $i }\r\n```\r\nBut of course the attributes on a variable are manipulable objects not a fixed definition as in:\r\n```\r\nPS[1] (131) > [int] [validaterange(0,1000)] $x = 123\r\nPS[1] (132) > (gv x).Attributes\r\n\r\nMinRange MaxRange TypeId\r\n-------- -------- ------\r\n       0     1000 System.Management.Automation.ValidateRangeAttribute\r\n                  System.Management.Automation.ArgumentTypeConverterAttribute\r\n\r\n\r\nPS[1] (133) > $vra = (gv x).Attributes[0]\r\nPS[1] (134) > (gv x).Attributes.Remove($vra)\r\nTrue\r\nPS[1] (135) > (gv x).Attributes\r\n\r\nTransformNullOptionalParameters TypeId\r\n------------------------------- ------\r\n                           True System.Management.Automation.ArgumentTypeConverterAttribute\r\n\r\n\r\nPS[1] (136) > $x = 2000\r\nPS[1] (137) >\r\n```\r\n",
      "created_at": "2018-04-26T22:59:24Z",
      "updated_at": "2018-04-26T22:59:24Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ah that's really cool! Thanks!",
      "created_at": "2018-04-26T23:07:05Z",
      "updated_at": "2018-04-26T23:07:05Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "One question I have here is what should happen if a validation attribute on the variable fails? Does the loop terminate or does it keep going and just spit out errors.\r\n\r\nI have a working prototype [here](https://github.com/rjmholt/PowerShell/tree/allow-attributes-foreach-6731), which I've implemented with fairly minimal changes.\r\n\r\nA couple of examples:\r\n```powershell\r\n> foreach ([int]$x in 1..10) { $x }\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n```\r\n\r\n```powershell\r\n> foreach ([int][char]$x in 'a'..'z') { $x }\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n```\r\n\r\nAnd the current semantics terminate the loop when an error occurs in the validation (I think):\r\n```powershell\r\n> foreach ([int]$x in '1','2','three','4') { $x }\r\n1\r\n2\r\nCannot convert value \"three\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\"\r\nAt line:1 char:10\r\n+ foreach ([int]$x in '1','2','three','4') { $x }\r\n+          ~~~~~~~\r\n+ CategoryInfo          : MetadataError: (:) [], ArgumentTransformationMetadataException\r\n+ FullyQualifiedErrorId : RuntimeException\r\n```\r\n\r\n```powershell\r\n> foreach ([validaterange(1,5)][int]$x in 1..10) { $x }\r\n1\r\n2\r\n3\r\n4\r\n5\r\nThe variable cannot be validated because the value 6 is not a valid value for the x variable.\r\nAt line:1 char:10\r\n+ foreach ([validaterange(1,5)][int]$x in 1..10) { $x }\r\n+          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : MetadataError: (:) [], ValidationMetadataException\r\n+ FullyQualifiedErrorId : ValidateSetFailure\r\n```\r\n\r\nBut wondering how others feel about this. Or does this just prove that attributes on enumeration variables are silly?",
      "created_at": "2018-05-01T17:18:43Z",
      "updated_at": "2018-05-01T17:18:43Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "A validation failure should be an exception (so e.g. it could be caught), so termination of the loop makes sense.",
      "created_at": "2018-05-01T19:34:35Z",
      "updated_at": "2018-05-01T19:34:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt love the look of this -- it's always been a bit of a weird quirk that foreach-defined variables are kind of type-less.\r\n\r\nPR when? \ud83d\ude04 ",
      "created_at": "2018-10-11T00:58:56Z",
      "updated_at": "2018-10-11T00:58:56Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I have a branch for this, but I was hitting a very odd error in PowerShell's variable analysis code. At that point other priorities caught up with me. I'll see if I can look into it again at some point.",
      "created_at": "2018-10-11T01:06:27Z",
      "updated_at": "2018-10-11T01:06:27Z"
    }
  ],
  "created_at": "2018-04-25T20:00:10Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 6731,
  "state": "open",
  "title": "Allow type constraints in foreach headers",
  "updated_at": "2018-10-11T01:06:27Z"
}