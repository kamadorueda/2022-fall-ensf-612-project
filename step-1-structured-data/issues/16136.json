{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16136",
  "author": "eocron",
  "body": "### Summary of the new feature / enhancement\r\n\r\nI have some username and ssh key pair to authenticate to CentOS machine and currently unable to properly establish session through New-PSSession.\r\n\r\nCurrently I take ssh key from some other SECURE place, save it, pass path to it into New-PSSession and will dispose it after usage, but New-PSSession complains about ownership of key file. Which will be deleted anyway. For non domain user.\r\n\r\nLet the user decide what secure and what is not. \r\n\r\n```\r\nThe background process reported an error with the following message: The SSH\r\n     | client session has ended with error message:\r\n     | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @         WARNING: UNPROTECTED PRIVATE KEY\r\n     | FILE!          @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions for\r\n     | 'F:\\\\Development\\\\tmp\\\\private.key' are too open. It is required that your private key files are NOT\r\n     | accessible by others. This private key will be ignored. Load key \"F:\\\\Development\\\\tmp\\\\private.key\":\r\n```\r\n\r\nAnd now Im going through world of pain of granting Ownership to non-domain user name, like \"foobar\".\r\nSo basically New-PSSession not working for me.\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nAdd -Ignore parameter or explicit -KeyBody or something.",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I'm not an SSH expert but I've seen that message before and it comes from SSH, and is passed back to `new-pssession` , it's not generated by `new-PsSession` itself.  \r\nMy guess is that \"F:\\Development\\tmp\\\": has read-write access for everyone.   \r\n\r\nAs a troubleshooting tip I've found it is worth trying to SSH to the box I want to use first and only when I know that is working, do I try to make psSession to it. ",
      "created_at": "2021-09-22T15:18:42Z",
      "updated_at": "2021-09-22T15:18:42Z"
    },
    {
      "author": "eocron",
      "author_association": "NONE",
      "body": "Im hoping that New-PSSession at least try to do this ACL nightmare, because currently I see everywhere big chunks of code which dance around ACL in hope it will grant ownership to file. And all this nightmare is just to bypass some business logic inside SSH.\r\nOn linux it is just \"chown\" invokation. On windows.......it is really really bad.",
      "created_at": "2021-09-22T15:35:40Z",
      "updated_at": "2021-09-22T15:36:31Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Yeah, the Unix permissions are very simple.  But Changing file permissions as a side effect of running another command is not the way to go. Is there a reason you can't put the file in the users home directory where ssh should be happy with the permissions ?",
      "created_at": "2021-09-22T17:18:57Z",
      "updated_at": "2021-09-22T17:18:57Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I would be -1 on such a thing. If ssh is complaining that the key is not protected enough you should fix that problem. Granted it is more complex on Windows to do such a thing but it shouldn't mean you leave a private key left open on the file system.\r\n\r\nIt's the same with `TrustedHosts` on WSMan, PowerShell just uses the provider and you still need to trust the connection outside of PowerShell for it to start working.",
      "created_at": "2021-09-22T19:18:49Z",
      "updated_at": "2021-09-22T19:18:49Z"
    },
    {
      "author": "eocron",
      "author_association": "NONE",
      "body": "Not checkin CA or other things also a security risk, but there is an option to go \"full Sayan\" or it will be enough for this environment. We just accept it. ACL for windows is garbage and this is main reason why this function particullary for me is unusable. Also, if there is no documentation about usage of KeyFilePath + ACL problems.\r\nAlso, KeyBody key will be usefull, so it can be done as much secure as other methods (method can create this file wherever he wants if he need one)",
      "created_at": "2021-09-22T20:52:39Z",
      "updated_at": "2021-09-22T21:05:25Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@eocron  you are probably not the first unix person who struggles with the idea that there are more than 3 possible permissions on a file, and more than one user or one group can have access etc.  However ACLs where there in OS/2's HPFS file system, and 30 years on you're unlikely to get anyone from the Microsoft side of the fence to accept groups for Role-Based Access Control, or a common method for setting permissions on files, directory objects, or configuration settings or anything else is actually a bad thing.  So less of \"ACL for windows is garbage\" might help you. \r\n\r\nIf you could make an ssh connection to your desired target OUTSIDE PowerShell remoting but it failed in PowerShell it's fair enough to ask PowerShell to fix it.  But you've put the keyfile in a windows folder which won't be acceptable to ssh - so it's not the PowerShell function which is unsuitable - you've ensured you cannot use ssh for anything. \r\n\r\n`icacls \"F:\\Development\\tmp\\private.key\":  /grant 'yourusername:(F)' /inheritance:r `     \r\nshould keep SSH happy whether it is run from powershell or anywhere else\r\n\r\nBefore icacls there was cacls which I think goes back to early Windows NT and possibly OS/2 and there are PowerShell get- and set- -acl commands. So people have been setting acls from the command line and scripts for decades. Is it so hard for your script to set an acl  when it copies a file or put the file somewhere that inherited permissions are acceptable to ssh ?\r\n\r\n",
      "created_at": "2021-09-22T22:17:18Z",
      "updated_at": "2021-09-22T22:17:18Z"
    },
    {
      "author": "eocron",
      "author_association": "NONE",
      "body": "Your solution is not working, nothing happens with ownership, nor it deletes all others. Nor it accepts non-domain \"foobar\" - which windows try to find in active directory, but we have no possibility to tell it stop this and just grant this \"string\" a permission, like chown does.\r\n\r\nIt is not hard to run some command or two. If it is working, of course. Not spending two weeks figuring out that you actually need to write.\r\n\r\nThis basically what I did, and it didn't work:\r\n\r\n```\r\n$private_key | Out-File -FilePath $keyfile\r\n& icacls $keyfile /grant 'foobar:(F)' /inheritance:r\r\n\r\n$session = New-PSSession -HostName $target -UserName \"foobar\" -KeyFilePath $keyfile\r\n```",
      "created_at": "2021-09-22T22:33:55Z",
      "updated_at": "2021-09-22T22:38:22Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "1. The owner will be the account which created the file. \r\n2. Write the account name as domain\\user  where domain is \"machine name\" for local accounts.  \r\n\r\nicacls on its own gives enough help that it shouldn't take you more than a few minutes\r\n![image](https://user-images.githubusercontent.com/16209593/134433805-8102e3e0-d66c-4c1f-96dc-76557b385ac8.png)\r\n\r\nBut I think if you use $keyfile =  \"$env:temp\\keyfile\"  you won't need to set the acl at all. \r\n ",
      "created_at": "2021-09-22T23:15:31Z",
      "updated_at": "2021-09-22T23:15:31Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Remember that it's more than just the owner, `ssh` also takes into consideration the DACL and who has read access. IIRC you also need to make sure that no user apart from yourself, `Administrators`, and `SYSTEM` have any access to the file. This applies to both permissions inherited and explicitly set on the file.",
      "created_at": "2021-09-22T23:20:13Z",
      "updated_at": "2021-09-22T23:20:13Z"
    }
  ],
  "created_at": "2021-09-22T15:08:05Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Core",
    "Needs-Triage"
  ],
  "number": 16136,
  "state": "open",
  "title": "Unable to disable ownership check when using New-PSSession",
  "updated_at": "2021-09-22T23:20:13Z"
}