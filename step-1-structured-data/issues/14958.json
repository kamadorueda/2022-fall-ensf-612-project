{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14958",
  "author": "p0W3RH311",
  "body": "Hi Guys !!\r\n\r\nthis is a issue with various language and the display:\r\n\r\n![Capture](https://user-images.githubusercontent.com/36144546/110250841-6c7a9f80-7f32-11eb-9f00-efa9b6fc7a98.PNG)\r\n\r\n\r\nas you can see in different languages the display is not cutted (don't worry with awk)...in PS the manipulation of the display is not easy...fo example triying working to programming bitcoin signature verfication is not easy with this syntax...\r\n\r\nplease implement i new operator exponential like \"**\" or even \"^\" or add a method to display the number as is.\r\n\r\nthanks  ",
  "closed_at": null,
  "comments": [
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "i found a solution:\r\n\r\n```\r\nPS C:\\> [bigint][math]::Pow(2,256)\r\n115792089237316195423570985008687907853269984665640564039457584007913129639936\r\nPS C:\\>\r\n```\r\n\r\nbut its not _fluent_  and not _easy_ as many many other languages",
      "created_at": "2021-03-07T18:56:35Z",
      "updated_at": "2021-03-07T19:09:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I like the idea of an exponentiation _operator_, but the idea was rejected quite some time ago: #3603\r\n\r\nIn this particular case, an operator could situationally, with a `[bigint]` operand, choose `[bigint]::pow()` over the always-`[double]` `[math]::Pow()`,  which would implicitly solve your _display_ problem:\r\n\r\n```powershell\r\nPS> [bigint]::Pow(2n, 256)\r\n115792089237316195423570985008687907853269984665640564039457584007913129639936\r\n```\r\n\r\nSeemingly, PowerShell simply uses (culture-sensitive) `.ToString(\"G\")` number display formatting (see https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings), which in the case at hand results in exponential notation:\r\n\r\n```powershell\r\nPS> 115792089237316195423570985008687907853269984665640564039457584007913129639936 # [double] literal\r\n1.15792089237316E+77\r\n```\r\n\r\nIn the case of _integers_, your `[bigint]` cast is a quick workaround; otherwise, use something like `.ToString('f')`:\r\n\r\n```powershell\r\nPS> $d = 115792089237316195423570985008687907853269984665640564039457584007913129639936; $d.ToString('f')\r\n115792089237316195423570985008687907853269984665640564039457584007913129639936.000\r\n```\r\n\r\nUse `'f0'` to omit decimal places.\r\n\r\n---\r\n\r\nAt least hypothetically, tackling the display problem by changing the default number formatting to be more helpful is an option, given that specific display formats aren't considered part of the public contract, but I see two concerns:\r\n\r\n* performance\r\n* getting consensus on when to spell out the digits (and how many decimal places) vs. when to use exponential notation.\r\n\r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings\">Standard numeric format strings</a></strong></div><div>In this article, learn to use standard numeric format strings to format common numeric types into text representations in .NET.</div></blockquote>",
      "created_at": "2021-03-07T21:54:21Z",
      "updated_at": "2021-03-08T19:26:19Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "`iex \"1$('*2' * 256)n\"` :)",
      "created_at": "2021-03-08T19:14:33Z",
      "updated_at": "2021-03-08T19:14:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine:\r\n\r\nWe recognise this would be useful to some users, but we don't feel as though it is a priority to tackle at present. There are existing workaround via .NET methods that are already available both for double and BigInteger types.\r\n\r\nHowever, we would definitely consider accepting a PR for an exponentiation operator `**` from the community, with the caveat up-front that it would also most likely be a fairly low priority to review and get merged. It would also need review from the Language WG as it would be a language level change.\r\n\r\nMarking this as up for grabs for now. \ud83d\ude42 ",
      "created_at": "2022-03-17T23:06:10Z",
      "updated_at": "2022-03-17T23:06:10Z"
    }
  ],
  "created_at": "2021-03-07T18:52:21Z",
  "number": 14958,
  "state": "open",
  "title": "exponent as string",
  "updated_at": "2022-03-17T23:06:18Z"
}