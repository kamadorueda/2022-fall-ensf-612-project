{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13601",
  "author": "mklement0",
  "body": "Follow-up from https://github.com/PowerShell/PowerShell/issues/13423#issuecomment-681153364:\r\n\r\n## Summary of the new feature/enhancement\r\n\r\nTo easily grasp the size of a directory, it would be helpful if instead of:\r\n\r\n```powershell\r\nPS> Get-ChildItem -File |  Measure-Object -Sum  Length\r\n...\r\nSum: 19241959\r\n...\r\n```\r\n\r\nit would be nice to get an auto-scaled value that is expressed as a multiple of KB, MB, GB:\r\n\r\n```powershell\r\nPS> Get-ChildItem -File |  Measure-Object -Sum  Length\r\n...\r\nSum: 18.35MB\r\n....\r\n```\r\n\r\nAdditionally, such scaling should be available _on demand_.\r\nTherefore:\r\n\r\nIntroduce a new `-DisplayHint` parameter - analogous to `Get-Date`'s - as an enumeration value that instructs the formatting system to use specific formatting, as follows:\r\n\r\n```powershell\r\n... | Measure-Object -DisplayHint { None | KB | MB | GB | AutoBytes }\r\n```\r\n\r\n* The parameter would affect the output formatting of the following properties of `GenericMeasureInfo`  / `GenericObjectMeasureInfo` output type (it wouldn't apply to the `TextMeasureInfo` output type selected with any one of the `-Line`, `-Word` or `-Character` parameters):\r\n\r\n  * `Average`, `Sum`, `Maximum`, `Minimum`\r\n\r\n* `None` would be the default, except if the first input object is of type (derived from) `System.IO.FileSystemInfo` and the\r\n`-Property` value is `Length`, in which case `AutoBytes` is implied.\r\n\r\nMeaning of the enumeration values:\r\n\r\n* `None` yields the current behavior.\r\n\r\n* `KB`, `MB`, `GB` divide the numbers by the implied binary multiplier and represent the result with `2` decimal places, including the multiplier suffix:\r\n\r\n  * E.g., with `KB`, value `1234` would be represented as `1.21KB`, the result of `'{0:N2}' -f (1234 / 1kb)`.\r\n\r\n* `AutoBytes` auto-select the highest among the binary `KB`, `MB`, `GB` multipliers that makes the scaled value greater than  or equal to `1`, with values below the `KB` threshold getting suffixed with `B`.\r\n\r\n  * E.g., `1100200` would be represented as `1.05MB`, the result of `'{0:N2}' -f (1100200 / 1mb)`, because MB is the highest multiplier that still yields a scaled value greater than `1`.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n* Make `Measure-Object` attach an _instance_ `DisplayHint` ETS member to its `GenericMeasureInfo`  / `GenericObjectMeasureInfo` (as needed).\r\n\r\n* Add formatting definitions for `GenericMeasureInfo` and `GenericObjectMeasureInfo` that acts on the `DisplayHint` instance member.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Such things must be entirely in Formatting System, otherwise we are doomed to add such things to every cmdlet. The complete solution is still proposed as PSMore.\r\n\r\n",
      "created_at": "2020-09-09T04:33:18Z",
      "updated_at": "2020-09-09T04:33:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, it's in the nature of the `Measure-Object` cmdlet that this information _cannot_ be entirely in the formatting system:\r\n\r\n* You cannot generally  know _what_ is being measured, and therefore you cannot know whether it makes sense to express the measurements in multiples of bytes.\r\n\r\n* In the one cases listed above where it _is_ known (`[System.IO.FileSystemInfo]` with `-Property Length`) - are there others? - you won't have to use the parameter at all (`-DisplayHint AutoBytes` will be implied).\r\n\r\n\r\n\r\n",
      "created_at": "2020-09-09T05:06:26Z",
      "updated_at": "2020-09-09T05:06:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's in the nature of the Measure-Object cmdlet that this information cannot be entirely in the formatting system\r\n\r\nIt is true for _current_ Formatting System. \r\nThis encourages us to add hint parameters and properties to a variety of cmdlets and types. This is a dead end road. Using the PSMore idea, we would get a very flexible formatting system for developers and it would be easier for users to indicate what they want to see in the output - local or UTC, digits or Gb - it is unlimited list of formatting options.\r\n",
      "created_at": "2020-09-09T05:47:27Z",
      "updated_at": "2020-09-09T05:47:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, the PSMore (#7857) idea is clearly languishing, and there's no telling if and when it will ever be implemented - though I would definitely welcome a better solution than the current formatting system.\r\n\r\nNot having looked at PSMore myself: please explain how it would handle this situation: \r\n\r\n* A cmdlet that accepts arbitrary input objects whose *semantics* it cannot know anything about (except  for perhaps a few well-known built-in types).\r\n\r\n* That cmdlet's output formatting should vary its formatting meaningfully based on the unknown semantics of the input objects.\r\n",
      "created_at": "2020-09-09T13:20:53Z",
      "updated_at": "2020-09-09T13:22:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Input objects know nothing about user preferences. I may want the output in terabytes, you in gigabytes. We either use a default or explicitly specify a preference. It makes no sense to put a preference in the cmdlet itself, since there are an infinite number of options.\r\nIn terms of the existing formatting system, we should use `Format-Table -View <CustomView>`. The problem is that it is too time consuming and has many limitations.\r\nAs far as PSMore, this could overcome some of these limitations. One key PSMOre feature is that users can modify defaults on the fly and attach formatting to objects.\r\n\r\n\r\n\r\n",
      "created_at": "2020-09-09T17:56:28Z",
      "updated_at": "2020-09-09T17:56:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> We either use a default or explicitly specify a preference.\r\n\r\nThe proposal suggests a  - what I consider _sensible - default_ (auto-selection of an appropriate  multiplier, depending on the size of the number for `FileSystemInfo` input with property `Length`), supplemented with the ability to _override_ with  a fixed multiplier - or none at all - via `-DisplayHint`.\r\n\r\n> It makes no sense to put a preference in the cmdlet itself\r\n\r\nIt absolutely makes sense, because in the case of `FileSystemInfo` and `Length`  we know that _bytes_ are being  measured and presenting the output in those terms is the most useful to the human observer.\r\n\r\n> we should use `Format-Table -View <CustomView>`. The problem is that it is too time consuming and has many limitations.\r\n\r\nIndeed: Which do you think is preferable?\r\n\r\n`Get-ChildItem -File |  Measure-Object -Sum  Length` (with `-DisplayHint AutoBytes` implied)\r\nvs.\r\n`Get-ChildItem -File |  Measure-Object -Sum  Length | Format-Table -View AutoBytes`\r\n\r\n---\r\n\r\nAs stated, `Measure-Object` is an _unusual_ cmdlet, because of its open-ended input - that, and only that, is the reason why the `-DisplayHint` solution is appropriate.\r\n\r\n> As far as PSMore, this could overcome some of these limitations. \r\n\r\nPlease spell such a PSMore-based solution out explicitly for the case at hand.",
      "created_at": "2020-09-09T18:14:41Z",
      "updated_at": "2020-09-09T18:14:41Z"
    }
  ],
  "created_at": "2020-09-08T21:47:58Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 13601,
  "state": "open",
  "title": "Add a -DisplayHint parameter to Measure-Object for disk-space representations that are easy to grasp",
  "updated_at": "2020-09-09T18:14:41Z"
}