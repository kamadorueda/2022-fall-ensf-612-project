{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4530",
  "author": "mklement0",
  "body": "In the script block passed to the (implied as the 1st positional) `-ScriptBlock` parameter of `Start-Job`, it is possible to reference variables from the _calling_ scope via the `$using:` scope; e.g.:\r\n\r\n```powershell\r\n# Make the background job's working directory the same as the calling session's and\r\n# print the then-current location.\r\nStart-Job { Set-Location $using:PWD; $PWD } | Receive-Job -Wait -AutoRemove\r\n```\r\n\r\nBy contrast, the following - even though I'd expect it to be equivalent - does NOT work, because the `$using:` reference is in the `-InitializationScript` script block:\r\n\r\n```powershell\r\nStart-Job -InitializationScript { Set-Location $using:PWD }  { $PWD } | Receive-Job -Wait -AutoRemove\r\n```\r\n\r\nInvocation fails with the following error messages:\r\n\r\n```none\r\nA Using variable cannot be retrieved. A Using variable can be used only with \r\nInvoke-Command, Start-Job, or InlineScript in the script workflow. When it is used with\r\nInvoke-Command, the Using variable is valid only if the script block is invoked on\r\na remote computer.\r\n....\r\n```\r\n\r\nNote that the above command would be the cleanest workaround for not having a `-WorkingDirectory` parameter (see #4287) to set the working directory explicitly.\r\n\r\nBoth script blocks execute in the _job_'s session, so they should both support `$using:` variable references.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please comment - Is this a bug or an enhancement?",
      "created_at": "2017-08-09T08:24:05Z",
      "updated_at": "2017-08-09T08:24:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It looks like an oversight, so I'll call it a bug.",
      "created_at": "2017-08-09T17:40:05Z",
      "updated_at": "2017-08-09T17:40:05Z"
    },
    {
      "author": "brantb",
      "author_association": "NONE",
      "body": "Possibly obvious statement: This affects PS 5.1 as well.\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.64\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.64\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
      "created_at": "2017-12-13T22:19:31Z",
      "updated_at": "2017-12-13T22:19:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @brantb; additionally, in Windows PowerShell it also affects `Register-ScheduledJob` (which doesn't ship with PowerShell Core, at least as of PowerShell Core 6.2.0-rc.1).",
      "created_at": "2019-03-18T19:23:26Z",
      "updated_at": "2019-03-18T19:23:26Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin any interest here? It's really hard to initialize the state of a job when you can't bring that state in from the caller's scope.",
      "created_at": "2022-02-09T19:43:11Z",
      "updated_at": "2022-02-09T19:43:11Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I agree this should be fixed.  Not sure when I can get to it, but at least it is back on my radar.  Thanks for bringing it to my attention.",
      "created_at": "2022-02-09T20:51:57Z",
      "updated_at": "2022-02-09T20:51:57Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks. To others as a workaround, you can append your init script to the main block and still be able to use USING\r\n\r\n```powershell\r\n[scriptblock]::Create(\r\n  [string]$initScript + [Environment]::NewLine + [string]$scriptblock\r\n)\r\n```",
      "created_at": "2022-02-09T21:35:17Z",
      "updated_at": "2022-02-09T21:35:17Z"
    }
  ],
  "created_at": "2017-08-08T21:37:35Z",
  "labels": [
    "Issue-Bug",
    "Up-for-Grabs",
    "WG-Cmdlets-Core"
  ],
  "number": 4530,
  "state": "open",
  "title": "Start-Job -InitializationScript should support $using: variable references too",
  "updated_at": "2022-02-09T21:35:17Z"
}