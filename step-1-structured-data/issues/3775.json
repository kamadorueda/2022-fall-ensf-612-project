{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3775",
  "author": "jpsnover",
  "body": "Repro\r\n------\r\nOpen a File Explorer window first if you find $w.Count is 0\r\n```\r\nPSv6> $s = New-Object -ComObject \"Shell.Application\"\r\nPSv6> $w = $s.Windows()\r\nPSv6> $w.Count\r\n1\r\nPSv6> $w  ## dump $w, and powershell should enumerate $w to unwrap the collection\r\n```\r\nExpected Behavior\r\n--------------------\r\n$w is unwrapped and the contained items are dumpped out (PSv5 behavior)\r\n```\r\nApplication          : System.__ComObject\r\nParent               : System.__ComObject\r\nContainer            :\r\nDocument             : System.__ComObject\r\nTopLevelContainer    : True\r\nType                 :\r\nLeft                 : -32000\r\nTop                  : -32000\r\nWidth                : 160\r\nHeight               : 28\r\nLocationName         : 6.0.0-beta1\r\nLocationURL          : file:///D:/PowerShell/6.0.0-beta1\r\nBusy                 : False\r\nName                 : File Explorer\r\nHWND                 : 923136\r\nFullName             : C:\\WINDOWS\\Explorer.EXE\r\nPath                 : C:\\WINDOWS\\\r\nVisible              : True\r\nStatusBar            : False\r\nStatusText           :\r\nToolBar              : 1\r\nMenuBar              : False\r\nFullScreen           : False\r\nReadyState           : 4\r\nOffline              : False\r\nSilent               : False\r\nRegisterAsBrowser    : False\r\nRegisterAsDropTarget : True\r\nTheaterMode          : False\r\nAddressBar           : True\r\nResizable            : True\r\n```\r\n\r\nActual Behavior\r\n-----------------\r\n```\r\nCount\r\n-----\r\n    2\r\n```\r\n\r\nEnvironment\r\n--------------\r\n```\r\nPSv6> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-beta.1\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nAdditional Observation\r\n-------------------------\r\nThe problem appears to be this:\r\n```\r\nPSv6>  $w._NewEnum()\r\nAn error occurred while enumerating through a collection: Could not load type 'System.Runtime.InteropServices.ComTypes.IEnumerator' from assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral,\r\nPublicKeyToken=7cec85d7bea7798e'..\r\nAt line:1 char:2\r\n+  $w._NewEnum()\r\n+  ~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.__ComObject:__ComObject) [], RuntimeException\r\n    + FullyQualifiedErrorId : BadEnumeration\r\n```",
  "closed_at": "2017-08-17T16:23:37Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Good catch \ud83d\udc4d\r\nMy investigation shows this is a bug in .NET Core 2.0. A dotnet/corefx issue has been filed: https://github.com/dotnet/corefx/issues/19731\r\n\r\nWhat happens is that powershell successfully casts the `ShellWindows` object to `IEnumerable`, and then a `TypeLoadException` is thrown when calling `GetEnumerator()` on the `IEnumerable` object. PowerShell catches the exception and treat the object as non-enumerable.",
      "created_at": "2017-05-12T19:10:39Z",
      "updated_at": "2017-05-12T19:10:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The issue description was updated to make it easy to understand the problem.",
      "created_at": "2017-05-12T19:21:32Z",
      "updated_at": "2017-05-12T19:21:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Reply from `CoreCLR` team on dotnet/corefx#19731\r\n> Thanks for reporting this issue. As previously discussed, CoreCLR doesn't support IDispatch (and that's why you are implementing your own IDispatch). IEnumerable.GetEnumerator uses IDispatch.Invoke(DISPID_NEWENUM) under the hood (that's the convention for IDispatch objects to support enumeration). You need to write your own enumeration code to support that pattern in CoreCLR. Based on what you already have (IDispatch and VARIANT support), it should be pretty straight-forward. I'll be happy to help out offline if you need any help.\r\n\r\nSo we need to write the enumeration code ourselves.",
      "created_at": "2017-05-24T21:38:31Z",
      "updated_at": "2017-05-24T21:38:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we remove Waiting - NetStandard20 label?",
      "created_at": "2017-05-25T03:54:09Z",
      "updated_at": "2017-05-25T03:54:09Z"
    }
  ],
  "created_at": "2017-05-12T15:50:06Z",
  "number": 3775,
  "state": "closed",
  "title": "COM objects are not enumerating properly",
  "updated_at": "2017-08-17T16:23:37Z"
}