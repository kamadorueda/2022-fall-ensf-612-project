{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13279",
  "author": "saravanaj",
  "body": "## Summary of the new feature/enhancement\r\n\r\nThere are some default PowerShell aliases that shadow built-in (`where.exe`) or popular 3rd party command line tools (`mv.exe`, `cat.exe`, etc. that come with Git). In order to invoke this currently we need to use the command with extension (`where.exe`) or use the full file path.\r\n\r\nIt would be easier if PowerShell supported [bash-like prefixes](https://unix.stackexchange.com/a/39296/268143) to ignore aliases. For example, `\\where` would call `C:\\Windows\\System32\\where.exe` instead of the `Where-Object` PowerShell alias.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Would we want to ignore _just_ aliases, or functions and cmdlets too?",
      "created_at": "2020-07-26T09:10:07Z",
      "updated_at": "2020-07-26T09:10:07Z"
    },
    {
      "author": "saravanaj",
      "author_association": "NONE",
      "body": "@vexx32 I think ignoring functions and cmdlets would be helpful as well.",
      "created_at": "2020-07-26T09:31:04Z",
      "updated_at": "2020-07-26T09:31:04Z"
    },
    {
      "author": "ericleigh007",
      "author_association": "NONE",
      "body": "Would love to see this, although i'm sure the team has many different syntaxes they'd love to see.   \r\n\r\nSince PowerShell is now many many platforms, it makes sense to support this because overriding cmdlets that don't quite work yet on a platform could give rise to shims as devs need to get things to work, prior to them/somebody else being able to do a pull request here.\r\n\r\nFor explanation, my use-case is overriding a built-in cmdlet, thus\r\n\r\n```powershell\r\n#in a profile file, etc\r\nPS> set-alias get-builtincmdlet get-replacementbuiltincmdletELS   # alias to a new enhanced thing that does something better/more`\r\n```\r\n\r\n```PowerShell\r\nfunction get-replacementbuiltincmdletELS\r\n{\r\n    Param($a, $b, $c)\r\n\r\n    if( $checkSomeHostPropertyOrOtherThingToSeeIfThisDoesntApply )\r\n    {\r\n            return \\get-builtincmdlet @PSBoundParameters  # here call the old cmdlet which was fine/better for this case\r\n     }\r\n\r\n     # else do the wonderful new thing\r\n}\r\n```",
      "created_at": "2020-10-27T11:49:10Z",
      "updated_at": "2020-10-27T11:51:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@ericleigh007 that's already possible; you can qualify a cmdlet/function name by a module (e.g., `Microsoft.PowerShell.Utility\\Sort-Object`) to accomplish that to whatever degree you need. \ud83d\ude42 \r\n\r\nIt also wouldn't be covered by this issue -- @saravanaj specifically mentioned that the target was native utilities and applications rather than PowerShell commands.",
      "created_at": "2020-10-27T12:48:08Z",
      "updated_at": "2020-10-27T12:48:08Z"
    },
    {
      "author": "ericleigh007",
      "author_association": "NONE",
      "body": "Thanks for that reminder.\r\n\r\nThe way I read it @saravanaj was using the utilities as an example, not constraining the issue.  The title is just \"disable aliases .. using command prefixes\".  My interpretation is that the author is looking for a generic, easy way to override the alias translation on a particular string (specifically mentioning \"like bash does\")\r\n\r\nWhichever way you slice it, though, it seems a documentation upgrade to the about_aliases help could show this method of temporarily overriding aliases, as others have asked the question about doing so.\r\n\r\nThanks and sorry for the interruption.",
      "created_at": "2020-10-27T13:01:28Z",
      "updated_at": "2020-10-27T13:01:28Z"
    }
  ],
  "created_at": "2020-07-26T08:38:24Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 13279,
  "state": "open",
  "title": "Feature Request: disable aliases using command prefixes",
  "updated_at": "2020-10-27T13:01:28Z"
}