{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16989",
  "author": "TheOnlyWei",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n1. Install new software.\r\n2. Modify system path to add software bin folder for the software commands.\r\n3. Open PowerShell core 7.2.1 in administrator mode.\r\n4. PowerShell Core fails to recognize installed software commands.\r\n\r\nThe following is PowerShell Core interaction after installing the software and starting a new PowerShell Core 7.2.1 session. As you can see, `$env:Path` is not being updated, whereas `[System.Environment]::GetEnvironmentVariable(\"PATH\", [System.EnvironmentVariableTarget]::Machine)` has the update. But it seems PowerShell Core uses $env:Path. Even with the target path (in this example, I used C:\\Program Files\\Go\\bin) added to both user and system environment variables, the associated command is still not recognized (see code and screenshots below). I don't have this issue in Windows PowerShell 5.\r\n```\r\nPS C:\\Windows\\System32> go version\r\ngo: The term 'go' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nPS C:\\Windows\\System32> $env:Path\r\nC:\\Program Files\\PowerShell\\7;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps\r\n\r\nPS C:\\Windows\\System32> [System.Environment]::GetEnvironmentVariable(\"PATH\", [System.EnvironmentVariableTarget]::Machine)\r\nC:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\PowerShell\\7\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\bin;C:\\Program Files\\Go\\bin;\r\n\r\nPS C:\\Windows\\System32> $env:Path = [System.Environment]::GetEnvironmentVariable(\"PATH\", [System.EnvironmentVariableTarget]::Machine)\r\n\r\nPS C:\\Windows\\System32> go version\r\ngo version go1.17.6 windows/amd64\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nExpected behavior is when I install a software, add it to environment paths, and then open a new PowerShell Core session, the $env:Path should automatically update itself so I can use newly installed software in PowerShell Core without having to manually update it myself.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n$env:Path is using some older, cached version of the environment paths. It doesn't match either the user path or the system path, so not sure where it got its values from.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\ngo: The term 'go' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\Windows\\System32> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\nThe user path screenshot:\r\n![user-path](https://user-images.githubusercontent.com/19400755/157989749-6729d0f8-fcf4-4256-b1d4-baf0394c52d6.PNG)\r\n\r\nThe system path screenshot:\r\n![system-path](https://user-images.githubusercontent.com/19400755/157989729-ea3e26f2-cc3d-42a4-a648-c9fc78ca3ecc.PNG)\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Silly question, how are you starting the new session. ?\r\nIf you run PowerShell from an app which was opened before the path changed (e.g. create a new tab in Windows terminal, run PowerShell from PowerShell this is expected behaviour because it it inherits that app's (unchanged) environment. If you run it from explorer it does pick up the change (at least in my experience having had to manually add paths to the environment on my work machine). \r\n ",
      "created_at": "2022-03-12T23:49:31Z",
      "updated_at": "2022-03-12T23:49:31Z"
    },
    {
      "author": "TheOnlyWei",
      "author_association": "NONE",
      "body": "@jhoneill I am using Windows Server 2016 Datacenter VM (in an Azure Stack environment), not sure if that might have anything to do with this. I know to restart the PowerShell console after installing new software and adding new paths. Hence I reported saying that it worked in Windows PowerShell 5 (without restart, it wouldn't work on Windows PowerShell 5 either). As far as how I restart the app, I close the PowerShell Core app, then I right-click the PowerShell Core icon pinned to task bar and run as administrator.\r\n\r\n",
      "created_at": "2022-03-14T20:47:27Z",
      "updated_at": "2022-03-14T20:53:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I close the PowerShell Core app, then I right-click the PowerShell Core icon pinned to task bar and run as administrator.\r\n\r\nIf you installed the app in another user profile and installer changed PATH env variable on user level you will do not see this in other user profiles.\r\nYou can look `$env:PATH` for diagnostic.",
      "created_at": "2022-03-15T05:28:02Z",
      "updated_at": "2022-03-15T05:28:02Z"
    },
    {
      "author": "TheOnlyWei",
      "author_association": "NONE",
      "body": "@iSazonov I never changed profiles when installing. I always do everything from the administrator account. The `C:\\Program Files\\Go\\bin` is also in both the user and system paths as in the screenshot above (although I would only need it in system path, I added it to user path to see if the command would now be recognized, but it wasn't).\r\n\r\nI can reproduce this in windows server 2019 datacenter and windows server 2016 datacenter.\r\n\r\nAs mentioned in my original post. The commands worked in Windows PowerShell but does not in PowerShell Core 7.2.1. Here is a screenshot of the exact commands run in Windows PowerShell and PowerShell Core 7.2.1. The former worked and the latter didn't:\r\n![inaccurate-envpath](https://user-images.githubusercontent.com/19400755/158463828-1281ea2e-4a1a-461e-b13f-a89bc8472cb2.PNG)\r\n\r\nI did not specially configure Windows PowerShell in any way.\r\n\r\n",
      "created_at": "2022-03-15T20:05:20Z",
      "updated_at": "2022-03-15T20:15:17Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "can you try running cmd.... \r\nIn cmd run `path`    \r\nthen run `pwsh -noprofile`    \r\nand `$env:path`    ",
      "created_at": "2022-03-16T00:07:50Z",
      "updated_at": "2022-03-16T00:07:50Z"
    },
    {
      "author": "TheOnlyWei",
      "author_association": "NONE",
      "body": "@jhoneill Attached output in screenshot below (this is from a windows server 2019 datacenter VM. The details in my main post above is from a windows server 2016 datacenter VM):\r\n![cmd-path-output](https://user-images.githubusercontent.com/19400755/158492586-aa595fd2-1c0b-45cc-b880-02d39fb6fe5d.JPG)\r\n",
      "created_at": "2022-03-16T00:15:01Z",
      "updated_at": "2022-03-16T00:41:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Does reboot resolve the issue?",
      "created_at": "2022-03-16T04:06:34Z",
      "updated_at": "2022-03-16T04:06:34Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@TheOnlyWei  So that screen shot shows when you start pwsh with -noprofile it is getting    \r\n`<pwsh path> + <Existing path>`    \r\nAnd this includes C:\\users\\administrator\\go\\bin   (last item)  and c:\\program files \\go\\bin  (end of line 4)\r\nIf you try running go there should work. \r\n\r\nThe next thing to do is run  `pwsh` without `-noprofile` and see if the path is the same. I suspect there is something in a profile which is changing the path.\r\n\r\n\r\n\r\n",
      "created_at": "2022-03-16T08:29:05Z",
      "updated_at": "2022-03-16T08:29:05Z"
    },
    {
      "author": "TheOnlyWei",
      "author_association": "NONE",
      "body": "The same issue happens with uninstalling a software. When Golang is uninstalled, it should remove the environment variables. But the administrator mode of PowerShell Core still has the old Golang environment paths. \r\nIt also seems depending on how you open PowerShell Core, it gives you different `$env:path` as well. In the screenshot below, the top window is opened by just left-clicking the PowerShell Core icon in the task bar, and the bottom window is opened by right-clicking the PowerShell Core icon in the task bar and then clicking \"Run as Administrator\". Note that I am on the local administrator account. Both windows have administrator privileges.\r\n\r\n![powershellcore-window-comparison](https://user-images.githubusercontent.com/19400755/158667048-fe42181c-5d2c-46ce-b9e0-beb85971f92e.PNG)\r\n\r\n@iSazonov Restarting seems to fix the issue.\r\n@jhoneill Running pwsh without -noprofile gives same output.",
      "created_at": "2022-03-16T18:58:37Z",
      "updated_at": "2022-03-16T21:13:10Z"
    }
  ],
  "created_at": "2022-03-11T23:39:49Z",
  "number": 16989,
  "state": "open",
  "title": "Powershell Core Does Not Detect New Paths",
  "updated_at": "2022-03-16T21:13:10Z"
}