{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13774",
  "author": "MatejKafka",
  "body": "## Summary of the new feature/enhancement\r\nCurrently, when I want to list what parameters a function has, I can call `(Get-Command fn).Parameters`. When I want to do the same with scriptblock, I have to use `$block.Ast` and manually parse the parameters from the AST, which is quite convoluted. It would be much more convenient if the same `.Parameters` attribute worked for scriptblocks.\r\n\r\n## Proposed technical implementation details (optional)\r\nAdd `.Parameters` property to `[scriptblock]` that returns same output as on `[System.Management.Automation.FunctionInfo]`",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can do a quick workaround for the same currently:\r\n\r\n```ps1\r\n$function:temp = $scriptblock\r\n(Get-Command temp -CommandType function).Parameters\r\nRemove-Item function:temp\r\n```",
      "created_at": "2020-10-13T12:53:12Z",
      "updated_at": "2020-10-13T12:53:12Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "That's an awesome hack, thanks. :)",
      "created_at": "2020-10-13T13:04:35Z",
      "updated_at": "2020-10-13T13:04:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It'd be nice if you could just cast a scriptblock to `ScriptInfo`.  Giving it a public constructor that takes `ScriptBlock` and pulls `ExecutionContext` from TLS would be great.",
      "created_at": "2020-10-13T13:17:07Z",
      "updated_at": "2020-10-13T13:17:07Z"
    }
  ],
  "created_at": "2020-10-13T12:47:03Z",
  "number": 13774,
  "state": "open",
  "title": "Expose `Parameters` on ScriptBlock, same as with functions (`[System.Management.Automation.FunctionInfo]`)",
  "updated_at": "2020-10-13T13:36:22Z"
}