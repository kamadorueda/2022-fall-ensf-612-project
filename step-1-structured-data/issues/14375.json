{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14375",
  "author": "5uhnjyiwat0ae8ns",
  "body": "Rounding of numbers is rounding down for even (before decimal place) numbers and up for odd (before decimal place) numbers\r\n\r\n## Steps to reproduce\r\n\r\nWrite-Host ([math]::round(([decimal]12.5),0))             ; # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.50000000000001),0)); # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.5000000000001),0)) ; # SHOULD BE 13; IS 13\r\nWrite-Host ([math]::round(([decimal]13.5),0))             ; # SHOULD BE 14; IS 14\r\nWrite-Host ([math]::round(([decimal]14.5),0))             ; # SHOULD BE 15; IS 14\r\n\r\n## Expected behavior\r\n\r\nWrite-Host ([math]::round(([decimal]12.5),0))             ; # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.50000000000001),0)); # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.5000000000001),0)) ; # SHOULD BE 13; IS 13\r\nWrite-Host ([math]::round(([decimal]13.5),0))             ; # SHOULD BE 14; IS 14\r\nWrite-Host ([math]::round(([decimal]14.5),0))             ; # SHOULD BE 15; IS 14\r\n\r\n## Actual behavior\r\n\r\nWrite-Host ([math]::round(([decimal]12.5),0))             ; # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.50000000000001),0)); # SHOULD BE 13; IS 12\r\nWrite-Host ([math]::round(([decimal]12.5000000000001),0)) ; # SHOULD BE 13; IS 13\r\nWrite-Host ([math]::round(([decimal]13.5),0))             ; # SHOULD BE 14; IS 14\r\nWrite-Host ([math]::round(([decimal]14.5),0))             ; # SHOULD BE 15; IS 14\r\n\r\n## Environment data\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0",
  "closed_at": "2020-12-10T17:44:01Z",
  "comments": [
    {
      "author": "5uhnjyiwat0ae8ns",
      "author_association": "NONE",
      "body": "Set-StrictMode -Version Latest;\r\n\r\nDescribe 'Internal Rounding Consistency' {\r\n\r\nContext 'Internal Rounding Consistency' {\r\n\r\nIt 'Internal Default: Number: <Number>: Digits: <Digits>: Expected: <Expected>' `\r\n\t-TestCases @(\r\n\t\t@{  Number = ([decimal]12.5)             ; Digits = 0; Expected = ([int]13); } # FAIL\r\n\t\t,@{ Number = ([decimal]12.50000000000001); Digits = 0; Expected = ([int]13); } # FAIL\r\n\t\t,@{ Number = ([decimal]12.5000000000001) ; Digits = 0; Expected = ([int]13); } # PASS\r\n\t\t,@{ Number = ([decimal]13.5)             ; Digits = 0; Expected = ([int]14); } # PASS\r\n\t\t,@{ Number = ([decimal]14.5)             ; Digits = 0; Expected = ([int]15); } # FAIL\r\n\t) {\r\n\t[math]::round($Number,$Digits) | Should -BeExactly $Expected;\r\n\t}\r\n\r\nIt 'Internal ToEven: Number: <Number>: Digits: <Digits>: Expected: <Expected>' `\r\n\t-TestCases @(\r\n\t\t@{  Number = ([decimal]12.5)             ; Digits = 0; Expected = ([int]13); } # FAIL\r\n\t\t,@{ Number = ([decimal]12.50000000000001); Digits = 0; Expected = ([int]13); } # FAIL\r\n\t\t,@{ Number = ([decimal]12.5000000000001) ; Digits = 0; Expected = ([int]13); } # PASS\r\n\t\t,@{ Number = ([decimal]13.5)             ; Digits = 0; Expected = ([int]14); } # PASS\r\n\t\t,@{ Number = ([decimal]14.5)             ; Digits = 0; Expected = ([int]15); } # FAIL\r\n\t) {\r\n\t[math]::round($Number,$Digits,[System.MidpointRounding]::ToEven) | Should -BeExactly $Expected;\r\n\t}\r\n\r\nIt 'Internal AwayFromZero: Number: <Number>: Digits: <Digits>: Expected: <Expected>' `\r\n\t-TestCases @(\r\n\t\t@{  Number = ([decimal]12.5)             ; Digits = 0; Expected = ([int]13); } # PASS\r\n\t\t,@{ Number = ([decimal]12.50000000000001); Digits = 0; Expected = ([int]13); } # PASS\r\n\t\t,@{ Number = ([decimal]12.5000000000001) ; Digits = 0; Expected = ([int]13); } # PASS\r\n\t\t,@{ Number = ([decimal]13.5)             ; Digits = 0; Expected = ([int]14); } # PASS\r\n\t\t,@{ Number = ([decimal]14.5)             ; Digits = 0; Expected = ([int]15); } # PASS\r\n\t) {\r\n\t[math]::round($Number,$Digits,[System.MidpointRounding]::AwayFromZero) | Should -BeExactly $Expected;\r\n\t}\r\n}\r\n\r\n}\r\n",
      "created_at": "2020-12-10T14:54:12Z",
      "updated_at": "2020-12-10T14:54:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re `It 'Internal Default: Number: : Digits: : Expected:` tests.\r\n\r\n.NET uses half-to-_even_ rounding by default, which in PowerShell manifests via _casts_ as well.\r\n\r\nThus, `[int] 12.5` getting rounded _down_ to `12` (the closest _even_ number) and `[int] 13.5` getting _up_ to `14` (again, the closest _even_ number)  is expected.\r\n\r\n---\r\n\r\nRe `It 'Internal ToEven: Number: : Digits: : Expected:` tests:\r\n\r\nWith `[System.MidpointRounding]::ToEven` rounding, the closest _even_ number is _always_ chosen for `.5` values; your tests seem to confuse an _even_ number with a _whole_ (integer) number.\r\n\r\n---\r\n\r\n_Separately_, there is a precision-loss issue relating to `12.50000000000001`. If you take that into account, the rounding again works as designed:\r\n\r\nIf you examine the result of `[decimal] 12.50000000000001`, you'll see that it resulted in _exactly_ `12.5`, which is then again subject to the implied / requested midpoint rounding.\r\n\r\nPowerShell parses number literal `12.50000000000001` as a `[double]`, which cannot _exactly_ represent this value.\r\nEven though `[decimal]` can, the accuracy is already lost by the time the `[decimal]` instance is constructed.\r\n\r\nThe solution is to not use a cast and instead to use suffix `d` to directly construct a `[decimal]` instance: `12.50000000000001d`\r\n\r\nThis results in a number whose fractional part  is _above_ `.5` and therefore correctly rounds _up_ by default:\r\n\r\n```powershell\r\nPS> [int] 12.50000000000001d  \r\n13   # compare to: [int] 12.5\r\n```",
      "created_at": "2020-12-10T17:32:46Z",
      "updated_at": "2020-12-10T17:38:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside, @5uhnjyiwat0ae8ns: Please use fenced code blocks in the future (` ```powershell<newline>...<newline>``` `), which make code much more readable.",
      "created_at": "2020-12-10T17:35:55Z",
      "updated_at": "2020-12-10T17:35:55Z"
    },
    {
      "author": "5uhnjyiwat0ae8ns",
      "author_association": "NONE",
      "body": "Understood. Thanks.",
      "created_at": "2020-12-10T17:44:01Z",
      "updated_at": "2020-12-10T17:44:01Z"
    }
  ],
  "created_at": "2020-12-10T14:32:14Z",
  "number": 14375,
  "state": "closed",
  "title": "Rounding of numbers is rounding down for even (before decimal place) numbers and up for odd (before decimal place) numbers",
  "updated_at": "2020-12-10T17:44:02Z"
}