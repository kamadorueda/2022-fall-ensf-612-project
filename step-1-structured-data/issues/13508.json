{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13508",
  "author": "davidreis97",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFixes #13046.\r\n\r\nAdds `CONOUT$` and  `CONIN$` to the list of reserved device names. The existing range of filename lengths to be checked for reserved names excluded `CONOUT$` since it only checked names of up to 6 characters. To include `CONOUT$`, this range has been bumped to 7 characters.\r\n\r\nWith these changes, attempting to execute filesystem commands with these names as targets will now raise an exception, as defined in the expected behaviour section of the linked issue.\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - The Pester test for reserved names has been modified to test against the names added in this pull request.\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-09-14T18:10:14Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett Have you any thoughts about blocking CONIN$ and CONOUT$ in PowerShell file operations?\r\n`Copy-Item <text file> CONOUT$` works like Get-Content and this looks good and we could expect `copy-item  CONIN$ <file path>` works too but no. Also we have New-Item and others and this force us to think that we should follow the best practice and block these reserved names.\r\nIn my opinion, we should ban these names in order to eliminate misunderstandings and unjustified expectations.\r\n",
      "created_at": "2020-08-24T07:09:02Z",
      "updated_at": "2020-08-24T07:09:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, we're already blocking the majority of them, so probably it would make sense to block all of them.\r\n\r\nMaybe a subset of them could be useful for specific provider cmdlets, but I don't think any of them would be universally useful for all the provider cmdlets to support.",
      "created_at": "2020-08-24T12:34:50Z",
      "updated_at": "2020-08-24T12:34:50Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "So, here's the thing that worries me about the windows reserved names.\r\n\r\nI don't know how we handle them in a world where pwsh also runs on Linux (and can access `/dev/sda1`, or `/dev/fd/0` which is a lot like `CONOUT$`) and macOS (`/dev/rdisk0`, `/dev/tty`).\r\n\r\nDo we have a holistic story that covers how powershell handles devicelike file handles in general? If not, is this just putting a band-aid over a problem?",
      "created_at": "2020-08-24T17:08:53Z",
      "updated_at": "2020-08-24T17:08:53Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "But, here: **We should block these names.**\r\n\r\nThere are better ways to write output to the console or read input from the console. It is generally a bad thing that we would allow PowerShell users -- users who have opted into a _higher-level abstraction_ -- direct unmanaged access to the raw I/O handles.\r\n\r\nCMD should be able to do it. Perhaps PowerShell should bend users towards using the object model instead.",
      "created_at": "2020-08-24T17:10:23Z",
      "updated_at": "2020-08-24T17:10:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT not sure who best to answer @DHowett's question regarding similarly reserved names on MacOS/Linux, but maybe worth opening an issue for? \ud83e\udd14 \r\n\r\nOtherwise... yep, agreed. \ud83d\ude42 ",
      "created_at": "2020-08-24T17:28:04Z",
      "updated_at": "2020-08-24T17:28:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Do we have a holistic story that covers how powershell handles devicelike file handles in general? If not, is this just putting a band-aid over a problem?\r\n\r\nWe follow the naming convention https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions but CONIN$/CONOUT$ is not documented there.\r\n\r\n > I don't know how we handle them in a world where pwsh also runs on Linux (and can access /dev/sda1, or /dev/fd/0 which is a lot like CONOUT$) and macOS (/dev/rdisk0, /dev/tty).\r\n\r\nIn Unix-s they are files. Users could do `cd ~; mkdir /dev/sda1` and access this by `cat ./dev/sda1`. But in Windows `./` prefix optional and users can do `type CONOUT$` and it is not clear whether this a file or a device.\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\">Naming Files, Paths, and Namespaces - Win32 apps</a></strong></div><div>All file systems supported by Windows use the concept of files and directories to access data stored on a disk or device.</div></blockquote>",
      "created_at": "2020-08-24T18:37:58Z",
      "updated_at": "2020-08-24T18:38:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-09-01T02:00:08Z",
      "updated_at": "2020-09-01T02:00:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga The PR is ready to merge.",
      "created_at": "2020-09-11T03:31:31Z",
      "updated_at": "2020-09-11T03:31:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@davidreis97 Thanks for your contribution!",
      "created_at": "2020-09-14T18:16:56Z",
      "updated_at": "2020-09-14T18:16:56Z"
    }
  ],
  "created_at": "2020-08-23T23:02:37Z",
  "number": 13508,
  "state": "closed",
  "title": "Recognize CONOUT$ and CONIN$ as reserved device names",
  "updated_at": "2020-09-14T18:16:56Z"
}