{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16506",
  "author": "markolbert",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThis may be the result of me having recently built a new Windows 11 system and not configured powershell the same way as it's configured on my previous Windows 10 desktop. But I'm reporting it in case it's a real change.\r\n\r\nI have a wake on lan powershell app I've used for several years on Windows 10. It uses the `System.Text.Json` serializer to deserialize a JSON file into a specific type of configuration object I've defined.\r\n\r\nUnder Windows 10 (all updates applied) the following call succeeds:\r\n\r\n```PS\r\n$config = [JsonSerializer]::Deserialize((Get-Content \"c:/Users/Mark/PowerShell/Wake-Device/devices.json\"), [Configuration], $null)\r\n```\r\n\r\nThe third parameter, `$null`, is a placeholder for unneeded options.\r\n\r\nUnder Windows 11 on my new desktop this call throws the \"multiple ambiguous\" error, apparently because powershell cannot determine which `Deserialize()` method to call.\r\n\r\nRemoving the `$null` parameter fixes the problem.\r\n\r\nThis obviously isn't a big deal...but it's a subtle behavioral change that could cause problems. It certainly caused me to spend quite a bit of time figuring out what was going wrong :).\n\n### Expected behavior\n\n```console\nThe deserialization should succeed\n```\n\n\n### Actual behavior\n\n```console\nThe deserialization fails if $null is passed as the third parameter\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-02T00:10:27Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markolbert What is the full name of the `[JsonSerializer]` and `[Configuration]` types? Also, are you using PS 7.2 on both Win10 and Win11?",
      "created_at": "2021-12-01T02:29:12Z",
      "updated_at": "2021-12-01T02:29:12Z"
    },
    {
      "author": "markolbert",
      "author_association": "NONE",
      "body": "JsonSerializer is System.Text.Json.JsonSerializer\r\n\r\n`Configuration` is a class defined in the psm1 file, along with `Device`:\r\n\r\n```powershell\r\nclass Device {\r\n\tstatic [string]$BroadcastIP = '192.168.1.255'\r\n\t[string]$Name\r\n\t[string]$MacAddress\r\n\r\n\t[Byte[]]GetByteArray(){\r\n\t\t$macByteArray = $this.MacAddress -split \"[:-]\" | ForEach-Object { [Byte] \"0x$_\"}\r\n\t\treturn (,0xFF * 6) + ($macByteArray * 16)\r\n\t}\r\n\r\n\t[void]Wake(){\r\n\t\t$macByteArray = $this.MacAddress -split \"[:-]\" | ForEach-Object { [Byte] \"0x$_\"}\r\n\t\t$magicPacket = (,0xFF * 6) + ($macByteArray * 16)\r\n\r\n\t\t$udpClient = New-Object System.Net.Sockets.UdpClient\r\n\t\t\r\n\t\t#$udpClient.Connect(([System.Net.IPAddress]::Broadcast), 9)\r\n\t\t# I have no idea why the default global address target doesn't work... but it sure doesn't!\r\n\t\t# no doubt some \"feature\" of Windows. Thanx, Microsoft :(\r\n\t\t$udpClient.Connect([Device]::BroadcastIP, 9)\r\n\t\t\r\n\t\t$udpClient.Send($magicPacket,$magicPacket.Length)\r\n\r\n\t\t$udpClient.Close()\r\n\t\t$udpClient.Dispose()\r\n\t}\r\n}\r\n\r\nclass Configuration {\r\n\t[Device[]] $Devices\r\n\r\n\t[void]Wake([string]$name){\r\n\t\t$device = $this.Devices | Where-Object Name -eq $name\r\n\r\n\t\tif( $null -eq $device ){\r\n\t\t\tWrite-Error \"No device named $name on file\"\r\n\t\t}\r\n\t\telse{\r\n\t\t\t$device.Wake()\r\n\t\t\tWrite-Information -InformationAction Continue \"Sent magic packet to $name at $($device.MacAddress) via $([Device]::BroadcastIP)\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI'm using Powershell 7.2.0 on Windows 11 and I believe that's the version I was using on Windows 10 as well (I've decommissioned that system).",
      "created_at": "2021-12-01T03:26:22Z",
      "updated_at": "2021-12-01T03:26:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> $config = [JsonSerializer]::Deserialize((Get-Content \"c:/Users/Mark/PowerShell/Wake-Device/devices.json\"), [Configuration], $null)\r\n\r\nCould you please point in documentation what Deserialize() overload you use?",
      "created_at": "2021-12-01T03:37:30Z",
      "updated_at": "2021-12-01T03:37:30Z"
    },
    {
      "author": "markolbert",
      "author_association": "NONE",
      "body": "Sorry, I thought that was clear from the original comment. This one: https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer.deserialize?view=net-6.0#System_Text_Json_JsonSerializer_Deserialize_System_String_System_Type_System_Text_Json_JsonSerializerOptions_\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer.deserialize\">JsonSerializer.Deserialize Method (System.Text.Json)</a></strong></div><div>Reads the UTF-8 encoded text representing a single JSON value into a returnType. The Stream will be read to completion. </div></blockquote>",
      "created_at": "2021-12-01T04:00:37Z",
      "updated_at": "2021-12-01T04:00:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markolbert Please point **exact** overload in docs or copy its signature.",
      "created_at": "2021-12-01T04:08:04Z",
      "updated_at": "2021-12-01T04:09:37Z"
    },
    {
      "author": "markolbert",
      "author_association": "NONE",
      "body": "Please read **exact** report of problem. Here is the blasted link again! \r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer.deserialize?view=net-6.0#System_Text_Json_JsonSerializer_Deserialize_System_String_System_Type_System_Text_Json_JsonSerializerOptions_\r\n\r\nThat is copied directly from the URL I'm on when I'm looking at the exact overload. I don't know how to give you anything more **exact** than that.\r\n\r\nThe title of the overload is `Deserialize(String, Type, JsonSerializerOptions)`\r\n\r\nIf this is insufficient or you are incapable of figuring out what overload I'm using from all the code, links, etc. I'm providing please feel free to close this issue. Because, as I pointed out in the initial report, I solved my problem and am only reporting this in case Microsoft cares enough about having other people **not** run into the same problem to spend a **little** time looking into it.\r\n\r\nSheesh.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer.deserialize\">JsonSerializer.Deserialize Method (System.Text.Json)</a></strong></div><div>Reads the UTF-8 encoded text representing a single JSON value into a returnType. The Stream will be read to completion. </div></blockquote>",
      "created_at": "2021-12-01T04:24:19Z",
      "updated_at": "2021-12-01T04:24:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The title of the overload is `Deserialize(String, Type, JsonSerializerOptions)`\r\n\r\nThanks! I asked because your link is not work as expected and doesn't open exact method description.\r\n\r\n> If this is insufficient or you are incapable of figuring out what overload I'm using from all the code, links, etc. I'm providing please feel free to close this issue. Because, as I pointed out in the initial report, I solved my problem and am only reporting this in case Microsoft cares enough about having other people not run into the same problem to spend a little time looking into it.\r\n\r\nIt is great you want to care other people. You would save them a lot of time if you provided simpler and more accurate steps to reproduce the problem.",
      "created_at": "2021-12-01T04:49:39Z",
      "updated_at": "2021-12-01T04:49:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I guess follow conflicts:\r\n```\r\npublic static object? Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions? options = default);\r\npublic static object? Deserialize (string json, Type returnType, System.Text.Json.Serialization.JsonSerializerContext context);\r\n```\r\nEx.:\r\n```powershell\r\n[System.Text.Json.JsonSerializer]::Deserialize(\"1\", [int], $null)\r\n\r\nMethodException: Multiple ambiguous overloads found for \"Deserialize\" and the argument count: \"3\".\r\n```\r\n\r\nI guess it is not Windows 11 issue, probably @markolbert updated from 7.1 to 7.2.\r\n![image](https://user-images.githubusercontent.com/22290914/144174161-93753d4f-6e6f-46ae-8162-413731936930.png)\r\n![image](https://user-images.githubusercontent.com/22290914/144174252-646d294c-35dc-46d6-9a52-8d16a5ecb4e7.png)\r\n",
      "created_at": "2021-12-01T04:51:35Z",
      "updated_at": "2021-12-01T04:54:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markolbert Thank you very much for providing the additional information, that helps a lot!\r\n\r\nIt's very likely you were using PS 7.1.x on the decommissioned Windows 10 machine.\r\nPS 7.1.x is on top of .NET 5, and there is [only 1 overload that takes `String, Type` as the first 2 parameters in .NET 5](https://docs.microsoft.com/dotnet/api/system.text.json.jsonserializer.deserialize?view=net-5.0):\r\n```c#\r\nJsonSerializer.Deserialize(String, Type, JsonSerializerOptions)\r\n```\r\nA lot more overloads were added in .NET 6, which include a new one that take `String, Type` as the first 2 parameters:\r\n```c#\r\nJsonSerializer.Deserialize(String, Type, JsonSerializerContext)\r\n```\r\nSo, in PowerShell 7.2, `[JsonSerializer]::Deserialize(<string>, <type>, $null)` cannot resolve from those 2 overloads, because `$null` can be applied to both `JsonSerializerOptions` and `JsonSerializerContext`. And you will get the same error message when running 7.2 on Windows 10 as well.\r\n\r\nIt's great that you already figured out the fix \ud83d\ude04 ",
      "created_at": "2021-12-01T20:21:00Z",
      "updated_at": "2021-12-01T20:21:00Z"
    },
    {
      "author": "markolbert",
      "author_association": "NONE",
      "body": "Thanx for the explanation!",
      "created_at": "2021-12-02T00:10:25Z",
      "updated_at": "2021-12-02T00:10:25Z"
    }
  ],
  "created_at": "2021-11-23T18:12:08Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Resolution-Answered"
  ],
  "number": 16506,
  "state": "closed",
  "title": "Multiple Ambiguous Error under Windows 11 but not Windows 10",
  "updated_at": "2021-12-02T00:10:27Z"
}