{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6585",
  "author": "ffeldhaus",
  "body": "For Cmdlets written in C# it is possible to inherit Parameters from other Cmdlets, but with the new features in recent PowerShell versions, more and more Cmdlets are written in PowerShell and it would be very helpful if Functions and Cmdlets written in PowerShell would be able to inherit Parameters from other Functions or Cmdlets.\r\n\r\nThis is especially important for Cmdlets interacting with REST endpoints which often have a large number of REST Commands which could result in several Cmdlets which share a common set of parameters.\r\n\r\nThis feature could be similar to `[CmdletBinding()]` which is already adding common Cmdlet parameters to a function.",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@ffeldhaus  Can you provide some concrete examples of how you think this should look?  Also some things to think through...\r\n\r\nThere is a difference between inheriting from a class and inheriting from a command: type inheritance is done statically at compile time (even with PowerShell classes). Command inheritance would have to be done dynamically (i.e. at run time) so that implies dynamic parameters. In fact, using the existing dynamic parameter mechanism, you can (somewhat awkwardly) do this today. Take a look at this comment from @jleechpe  on a semi-related question from [StackOverflow](https://stackoverflow.com/questions/49657984/how-to-call-a-powershell-function-from-a-variable/49658577?noredirect=1#comment86334665_49658577) . The question is about mocking specifically but the code takes a function to mock and generates dynamic parameters based on the mocked function's parameters. This mechanism could be built into the runtime itself fairly easily. Note that this approach has two caveats: it will be slow relative to a straight function dispatch and it may be nondeterministic - the command you think you're inheriting from might not be the one the runtime finds. \r\n\r\nAn alternate approach that could resolve everything at compile time would be to have the command \"inherit\" from a class. What do you think about this approach?\r\n\r\nFinally, what happens when there are the `begin`, `process` and `end` blocks in the base function. How do you see these being handled? Are they automatically called then the derived functions equivalent is called. Consider the case where the `begin` in the base function does some complex initialization with the parameters.",
      "created_at": "2018-04-06T22:11:37Z",
      "updated_at": "2018-04-06T22:11:37Z"
    },
    {
      "author": "jleechpe",
      "author_association": "NONE",
      "body": "I think @ffeldhaus wants it in the case where you\u2019re building a set of functions to access API calls. Since the parameters would mostly be the same being able to inherit would save code duplication (especially if changes needed to be made). I don\u2019t think it\u2019s a matter of calling the inherited function, just having it\u2019s parameters made available (or at least I would have a use for it that way).\r\n\r\nIn my case it was for reports where I needed a set of criteria filters (first for an sql query and later for lists of machines) where the parameters were for different groups of devices or time spans.  I ended up needing the filter functions for multiple reports and was building out the functions for users who needed the actual call to be as simple as possible.\r\n\r\nI had to recreate the parameters in each report (and then update them every time the sets of criteria were changed because of additional use cases), so I ended up using the dynamic parameters so I didn\u2019t need to remember to update the 5+ primary functions (type of report + criteria) every time the business wanted a new criteria option.  Having a way to have a function inherit parameters and parameter sets natively would simplify the process.\r\n\r\nThe actual calls to the filter functions were as pipelines in the management function so the `begin` and `end` blocks processed fine.",
      "created_at": "2018-04-06T22:46:05Z",
      "updated_at": "2018-04-06T22:46:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm... Well, could something like this be workable in terms of syntax?\r\n```\r\nparam(\r\n    [Parameter(ParentFunction = \"Get-ChildItem\")]\r\n    $Path\r\n)\r\n```\r\nOne way or another, you'd still have to specify the parameter name, but this would allow you to 'borrow' the validation checks and any other attributes the parameter has in that function. I have very little idea of how parameter attributes actually work behind the scenes, but essentially PS should look at that attribute, go \"OK, let's check `Get-ChildItem` for this parameter\", take all its metadata from that function and apply it to the parameter here.\r\n\r\nOne concern I have with this type of 'inheritance' is that by design it can potentially obscure what the requirements of the parameter are. A potential method of mitigating that confusion is that the help for that parameter cannot be specified by the function; it is referenced and pulled from the parent function instead.",
      "created_at": "2018-04-06T22:55:59Z",
      "updated_at": "2018-04-06T22:55:59Z"
    },
    {
      "author": "jleechpe",
      "author_association": "NONE",
      "body": "Something like that could work. However it wouldn\u2019t help quite as much of you\u2019ve got 5 or 6 variables, if not more, that you\u2019d be doing that for.  If it were a similar construct that let you take all the parameters you\u2019d still run the risk of obscuring the requirements, but if you only allow one inheritance from one function (and only of it\u2019s parameters, not inherited ones (if any)) you\u2019d at least limit the effects.",
      "created_at": "2018-04-06T23:34:08Z",
      "updated_at": "2018-04-06T23:34:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, yeah, that makes a lot more sense... So it'd probably look a bit more like... huh...\r\n```\r\nfunction Wrapper-Function {\r\n    [CmdletBinding()]\r\n    InheritParams('Get-ChildItem')\r\n    #do stuff\r\n}\r\n```\r\nThat would be... a bit odd. It would also require changing probably a bit of the syntax checking logic around `[CmdletBinding()]` in the VS Code extension, because as-is if it's not directly followed by a `param()` block it calls it out as an error.\r\n\r\nNot sure if that works better mimicking `param()` or as an attribute, but... hm. Interesting idea nonetheless.",
      "created_at": "2018-04-07T00:08:59Z",
      "updated_at": "2018-04-07T00:08:59Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I floated the idea in the Improvements for classes #6418 thread to allow us to create cmdlets with PowerShell classes like we can with C#. That would be a way to provide this functionality.",
      "created_at": "2018-04-07T04:00:34Z",
      "updated_at": "2018-04-07T04:00:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That would absolutely be the most effective way to get it done, I think. It would also make for an interesting addition in and of itself, being able to define C#-style cmdlets in native PS code...",
      "created_at": "2018-04-07T04:34:39Z",
      "updated_at": "2018-04-07T04:34:39Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that being able to base Cmdlets on PowerShell classes would be the best way to get this implemented.\r\n\r\n[With C# there seems to be another way to share parameters between cmdlets by using Dynamic Parameters](https://stackoverflow.com/questions/11254044/is-it-possible-to-share-properties-and-comments-between-powershell-cmdlets-in-c).",
      "created_at": "2018-04-07T20:53:05Z",
      "updated_at": "2018-04-07T20:53:05Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@ffeldhaus You can actually implement parameter sharing using dynamic parameters in script as illustrated in the rather long example below. The most significant line is this\r\n```\r\n DynamicParam { Get-BaseParameters baseFunction }\r\n```\r\nInclude this line in the derived function definition and you will \"inherit\" the properties from `baseFunction`. Here's the full example:\r\n```\r\nusing namespace System.Management.Automation\r\nusing namespace System.Management.Automation.Internal\r\n\r\nfunction Get-BaseParameters( $base )\r\n{\r\n    $base = Get-Command $base\r\n    $common = [CommonParameters].GetProperties().name\r\n    if ($base) \r\n    {\r\n        $dict = [RuntimeDefinedParameterDictionary]::new()\r\n        $base.Parameters.GetEnumerator().foreach{\r\n            $val = $_.value\r\n            $key = $_.key\r\n            if ($key -notin $common)\r\n            {\r\n                $param = [RuntimeDefinedParameter]::new(\r\n                    $key, $val.parameterType, $val.attributes)\r\n                $dict.add($key, $param)\r\n            }\r\n        }\r\n        return $dict\r\n    }\r\n}\r\n\r\n\r\n<#\r\n    Function to inherit from\r\n#>\r\nfunction baseFunction\r\n{\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter()]\r\n            $Foo,\r\n        [Parameter()]\r\n            $Bar,\r\n        [Parameter()]\r\n            $Baz\r\n    )\r\n}\r\n\r\n<#\r\n    Function that extends the base function\r\n#>\r\nfunction derivedFunction \r\n{\r\n    [cmdletbinding()]\r\n    param(\r\n        [Parameter()]\r\n            $Zork\r\n    )\r\n\r\n    DynamicParam { Get-BaseParameters baseFunction }\r\n\r\n    End \r\n    {\r\n        [PSCustomObject] $PSBoundParameters\r\n    }\r\n}\r\n\r\nderivedFunction -foo stuff -bar moreStuff -baz soThere -Zork \"ZORK!\"\r\n```",
      "created_at": "2018-04-08T06:04:26Z",
      "updated_at": "2018-04-08T06:04:26Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The problem with the dynamic parameter approach is that they end up as second class citizens. Try running `New-proxycommand` on any of the AD cmdlets and you will see what I mean. \r\n\r\n```\r\ngcm gci,get-aduser | % {[System.Management.Automation.CommandMetaData]::new($_)} | fl parameters\r\n```\r\n\r\nI've run into this to when building a module wrapping p4.exe. It has the basic structure of \r\n```p4 [options] command [arg ...]```\r\n\r\n`arg` is unique to the command, but `options` are common to all, and it was not pleasant to try to maintain these. \r\nI ended up moving to C#. Worked great for me, but maybe not what we want to recommend.",
      "created_at": "2018-04-08T07:43:24Z",
      "updated_at": "2018-04-08T07:43:24Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "One question here is what prevents us from writing cmdlets in PowerShell classes?\r\nThat way you could write a base class with the common parameters.\r\n\r\nOr some mix - not sure if this is a good idea - but letting a param block inherit from a class, or another function.\r\n\r\n```\r\nfunction CommonParameters {\r\n  param(\r\n    [Parameter()] \r\n    [string] $Port\r\n    ,\r\n    [Parameter()] \r\n    [string] $User\r\n  )\r\n}\r\n\r\n# or \r\n\r\nclass CommonParameters {\r\n  [Parameter()] \r\n  [string] $Port\r\n\r\n  [Parameter()] \r\n  [string] $User\r\n}\r\n\r\nfunction Do-Stuff {\r\n  param : CommonParameters (\r\n    [switch] $Force \r\n  )\r\n}\r\n```\r\n\r\n```\r\nPS> gcm -Syntax Do-Stuff\r\n\r\nDo-Stuff [[-Port] <string>] [[-User] <string>] [-Force] [<CommonParameters>]\r\n```\r\n\r\n",
      "created_at": "2018-04-08T07:52:39Z",
      "updated_at": "2018-04-08T07:58:44Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Inheritance of parameters is often insufficient - you often want to also share some code. This isn't hard to do with functions, but classes do provide a cleaner way.",
      "created_at": "2018-04-08T15:51:37Z",
      "updated_at": "2018-04-08T15:51:37Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Just to add to the mix here, there's also the pain point when you derive from a cmdlet base class that has parameters with parametersets defined. Sometimes you want to add new parameters to the base sets in the derived class (or include base parameters in the derived sets), and you can't do this without overriding/shadowing the `[Parameter]` decorated properties and redefining a new parameterattribute. It would be nice to be able to do this more succinctly.\r\n\r\n```\r\n// override base parameter LiteralPath to use position 1 and include in this parameter set\r\n[Parameter(Include=nameof(base.LiteralPath), Position=1, ParameterSetName='NewParamSet')]\r\n[Parameter(Position=0, Mandatory=true, ParameterSetName='NewParamSet')]\r\npublic string NewParam1 { get; set; }\r\n```\r\nThis could be implemented without having to rewire the entire engine by creating a `CustomReflectionContext` to surface an additional synthetic `ParameterAttribute` to the base property when the engine is discovering parameters. Worst case you'd have to scan the assembly once for this new `[Parameter(Include=...)]` directive, then create the context and scan again.\r\n\r\nThoughts, @lzybkr  ?",
      "created_at": "2020-04-08T18:19:05Z",
      "updated_at": "2020-04-08T19:00:49Z"
    },
    {
      "author": "codedChaos",
      "author_association": "NONE",
      "body": "## Bumping this! ",
      "created_at": "2021-04-10T00:58:37Z",
      "updated_at": "2021-04-10T00:58:37Z"
    }
  ],
  "created_at": "2018-04-06T20:34:05Z",
  "number": 6585,
  "state": "open",
  "title": "Allow Functions and Cmdlets written in PowerShell to inherit Parameters",
  "updated_at": "2021-04-10T00:58:37Z"
}