{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6587",
  "author": "schittli",
  "body": "Hello\r\n\r\nUsually, the `-verbose` switch is used if one would like to get more information about _one_ module or script.\r\nThe reality is, however, that we're flooded with verbose messages.\r\n\r\nTherefore it would be great if `-verbose` could be controlled. Just two ideas:\r\n\r\n- By specifying a nesting level, e.g. `-Verbose <NestingLevel>`\r\n`-Verbose 2` would activate verbose messages in the directly called script and in all commands which are called by the script itself.\r\n- By specifying a script / module filter, e.g. `-Verbose @('Build.ps1', 'Invoke-Build')`\r\nThis would activate verbose messages in the script `Build.ps1` and in the command `Invoke-Build` itself.\r\n\r\nKind regards, \r\nThomas\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`-Verbose` is not inherited.\r\nHave you give an example of this flood?",
      "created_at": "2018-04-07T15:14:50Z",
      "updated_at": "2018-04-07T15:14:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe dup #3106 ",
      "created_at": "2018-04-07T15:17:49Z",
      "updated_at": "2018-04-07T15:17:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\n`-Verbose` _is_ inherited, but _inconsistently_: The inheritance via advanced functions relies on implicitly set _local_ preference variables, `$VerbosePreference` in the case at hand:\r\n\r\n  * binary cmdlets invoked from such an advanced function _do_ honor this preference variable.\r\n  * advanced functions _implemented in a (different) module_ do _not_ - this is actually what #3106 complains about, and as such it is the _opposite_ of what @schittli is asking for.\r\n\r\nThis problematic inconsistency is the subject of #4568, but it is ultimately a separate issue.\r\n\r\n@schittli: \r\n\r\nI understand the desire to have this, but the proposed syntax can't work, because `-Verbose` is a _switch_ parameter and can therefore not accept an argument other than `$True` or `$False` _if_ directly appended with `:` (e.g., `-Verbose:$False`).\r\n\r\nSomething like `-Verbose 2` would break backward compatibility; allowing something like`-Verbose:2` may work, but it would be a first for the PowerShell language: a parameter with an _optional_ argument (other than the implied Boolean for switches).   \r\nWith an array argument it gets even trickier, because the value must be a single token: `-Verbose:('build.ps1', 'Invoke-Build')`\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-07T20:56:51Z",
      "updated_at": "2018-04-07T20:56:51Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov No, not a dup - this is related to #3106 but is it's own issue since it applies to scripts and functions as well.\r\n\r\n@mklement0 as daunting as it sounds, a new ubiquitous parameter`-VerboseLevel N` would be fine.\r\n\r\n> This problematic inconsistency is the subject of #4568, but it is ultimately a separate issue.\r\n\r\nThe issue discussed in #4568 is actually an example of an \"unfortunate\" _consistency_ :-) Local preference variables are still just local variables. Modules provide isolation and so, by design, local variables never cross the module barrier. This includes preference variables. \r\n\r\n@schittli \r\n> By specifying a script / module filter, e.g. -Verbose @('Build.ps1', 'Invoke-Build')\r\nThis would activate verbose messages in the script Build.ps1 and in the command Invoke-Build itself.\r\n\r\nYou can do this (to some extent) today with `$PSDefaultParameterValues `. For example:\r\n```\r\nPS[1] (34) > $PSDefaultParameterValues = @{'Copy-Item:Verbose'=$true}\r\nPS[1] (35) > copy xxx yyy\r\nVERBOSE: Performing the operation \"Copy File\" on target \"Item: C:\\temp\\xxx Destination: C:\\temp\\yyy\".\r\nPS[1] (36) >\r\n```\r\nNow the core issue,  the verbose (and debug, log, etc.)  message flood, is definitely a problem but I've always thought of the solution being something more like **Just My Code** in the VS debugger. (In fact it would nice to have it in the PowerShell debugger too.) @lzybkr and I have discussed this a few times. \r\n\r\n",
      "created_at": "2018-04-08T01:33:27Z",
      "updated_at": "2018-04-08T01:33:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay:\r\n\r\n> The issue discussed in #4568 is actually an example of an \"unfortunate\" consistency :-) Local preference variables are still just local variables. Modules provide isolation and so, by design, local variables never cross the module barrier. This includes preference variables.\r\n\r\nYes, it's consistent from _that_ perspective.\r\n\r\nAnd it is that consistency that produces the inconsistency with respect to inheritance of common parameters, as described.\r\n\r\nTo put it differently: \r\n\r\nThe implementation of common-parameter inheritance is fundamentally flawed in that the (intrinsically consistent) rules of variable scopes prevent the inheritance when calling advanced functions in a different module.\r\n\r\nIf the inheritance behavior - which works fine when calling compiled cmdlets and functions in the same module - wasn't, in fact, intentional, it's certainly something that people have come to rely upon - and have been frustrated when they ran in the module-boundary issue.\r\n\r\nHow subtle and tricky this behavior is is shown in #6342 and #6556, where the `-WhatIf` switch isn't inherited, just because the command invoked happens to be implemented as an advanced function rather than as a compiled cmdlet.\r\n\r\n\r\n",
      "created_at": "2018-04-08T03:20:10Z",
      "updated_at": "2018-04-08T03:21:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Old Cisco IOSes allowed turn on  global debug only. This could cause the system to crash because of the huge flood on console. Modern Cisco IOSes allow to filter the debug output very flexible (modules, interfaces, protocols, values...). From this point of view, the inheritance of preference-variable values (in other scopes) looks dangerous. \r\n`$PSDefaultParameterValues` don't allow us to filter flexibale debug, verbose, log output. ",
      "created_at": "2018-04-08T12:19:52Z",
      "updated_at": "2018-04-08T12:31:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\n> From this point of view, the inheritance of preference-variable values (in other scopes) looks dangerous.\r\n\r\nThe behavior _defaulting_ to inheritance is crucial, not just with respect to inheritance of common parameters, but also with respect to directly set _preference variables_, and that is currently broken, as discussed in #4568:  \r\n\r\n* It is crucial for behavior-controlling parameters `-ErrorAction`, `-Confirm`, and `-WhatIf`.  \r\n(To recap the problem with the current behavor: `-ErrorAction Stop` / `$ErrorActionPreference = 'Stop'`, `-WhatIf` / `$WhatIfPreference = $True` not taking effect just because a command such as `Expand-Archive` happens to be implemented as an advanced function is surprising and potentially destructive.)\r\n* Inheritance-by-default is perhaps debatable for diagnostic/supplemental-output parameters such as `-Verbose`, `-Debug`, `-InformationAction`, and `-WarningAction`, but:\r\n   * Changing their default behavior would certainly be a breaking change (and note that with a value of `Stop` you can even make these parameters behavior-controlling).\r\n   * Inheritance _can_ be desirable, as #3106 shows.\r\n   * Also note that the output-_collecting_ common parameters (`-OutVariable`, `-ErrorVariable`, `-InformationVariable`, `-WarningVariable`) exhibit _effective_ inheritance behavior too (by simply collecting stream output across all calls that happen in the advanced function's scope).\r\n\r\nTo _complement_ the default behavior with _opt-in_ mechanisms for limiting the scope of common-parameter inheritance such as `-Verbose`, `-Debug`, `-InformationAction`, `-WarningAction` and/or apply filtering makes sense.\r\n\r\n\r\n",
      "created_at": "2018-04-08T14:00:46Z",
      "updated_at": "2018-04-08T21:56:45Z"
    }
  ],
  "created_at": "2018-04-07T12:38:45Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 6587,
  "state": "open",
  "title": "Write-Verbose should be controllable",
  "updated_at": "2018-04-08T21:56:45Z"
}