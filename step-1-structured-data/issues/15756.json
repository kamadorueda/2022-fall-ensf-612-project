{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15756",
  "author": "iRon7",
  "body": "Related: [How can Powershell compares between string and double?](https://stackoverflow.com/q/68335669/1701026)\r\n\r\n### Summary of the new feature / enhancement\r\n\r\nCurrently an unquoted number with two or more dots casts to a `$Null` instead of leaving an expected `... is not recognized as a name of a cmdlet` error.\r\n\r\n```PowerShell\r\n$Version = 2.0.9\r\n$Null -eq $Version\r\nTrue\r\n```\r\n\r\nI would like to suggest to cast numbers with 3 or 4 dots (as `2.0.9` and `2.0.7.0`) automatically to a version as a semantic PowerShell sugar.\r\n",
  "closed_at": "2021-07-15T09:08:28Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Yes, `ipaddress` and `datetime` too. What makes these types worse?  If syntax then all of sugar.\r\n```\r\n[datetime] '10.7.21'\r\n[ipaddress] '10.7.21'\r\n[version] '10.7.21'\r\n```",
      "created_at": "2021-07-11T15:10:01Z",
      "updated_at": "2021-07-11T15:10:01Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> Yes, `ipaddress` and `datetime` too. What makes these types worse? If syntax then all of sugar.\r\n\r\nGood point, there is no specific type favorite here.\r\nAt the other hand, it shouldn't cast to `$null`, without warning/error too...",
      "created_at": "2021-07-11T16:05:36Z",
      "updated_at": "2021-07-12T07:55:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> At the other hand, it shouldn't cast to `$null`, without warning/error too...\r\n\r\nNote that it's not actually casting to anything here, it's attempting to access a property.\r\n\r\n```powershell\r\n> Update-TypeData -TypeName System.Double -MemberType NoteProperty -MemberName 0 -Value 'example'\r\n> 2.0.0\r\nexample\r\n```",
      "created_at": "2021-07-11T17:08:29Z",
      "updated_at": "2021-07-11T17:08:29Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I have given it some deeper thoughts:\r\n\r\n> Yes, `ipaddress` and `datetime` too. What makes these types worse? \r\n\r\nI think that the **generality** and the **specificity**  of a type defines the priority of how it is perceived.\r\nLike `2` is perceived an `[int]` and not as a `[double]` and `2.0` is perceived as a `[Double]` and not as something as a `[Version]`.\r\n\r\n### `[ipaddress]`\r\n*IP Addresses* are less general then *versions numbers* as you might have *IP Address Versions* but  not something like a *Version Addresses* (at least, I can't think of any). Besides, it concerns  an ***IP** Address* here, which even makes it less general than an (general) *address*.\r\n\r\n### `[datetime]`\r\nThe fact that `[datetime] '10.7.21'` has a lot of different formats (along with `[datetime] '10/7/21'` and `[datetime] '10-7-21'`) makes it less specific. Meaning that if I would read something like: `$x -gt 10.7.63`, I would automatically presume a *version* not a *date* (even it is my birthday \ud83d\ude03).\r\n\r\nAt the moment, I can't think of any other (general) type with a string constructor that accepts numbers separated by multiple dots. \r\n",
      "created_at": "2021-07-12T09:58:24Z",
      "updated_at": "2021-07-12T10:05:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd rather thought it is typo in double than intention to type a version or another type.",
      "created_at": "2021-07-12T10:19:44Z",
      "updated_at": "2021-07-13T05:23:40Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> I'd rather thought it is typo in double then intention to type a version or another type.\r\n\r\nPoint taken, but that would mean that it should return an error.",
      "created_at": "2021-07-12T10:40:27Z",
      "updated_at": "2021-07-12T10:40:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think it's reasonable for PS to assume the user's intent here. If we wanted numerals like this to parse as a specific type, I think we'd need to use a specific format, probably somewhat similar to how we have the existing number formats with a suffix like `84u`, using either a prefix or suffix.",
      "created_at": "2021-07-12T12:56:37Z",
      "updated_at": "2021-07-12T12:56:56Z"
    },
    {
      "author": "lkeersmaekers",
      "author_association": "NONE",
      "body": "I wouldn't expect PS to figure out the users intent but I would at least expect an error if PS can't make head or tails about it.  I would at least expect the same behavior as \r\n\r\n`$version = x`\r\n`x: The term 'x' is not recognized as a name of a cmdlet, function, script file, or executable program. `\r\n`Check the spelling of the name, or if a path was included, verify that the path is correct and try again.`\r\n\r\n",
      "created_at": "2021-07-12T18:37:18Z",
      "updated_at": "2021-07-12T18:38:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I wouldn't expect PS to figure out the users intent but I would at least expect an error if PS can't make head or tails about it. I would at least expect the same behavior as\r\n\r\nYou can use `Set-StrictMode` to configure that, but by default PowerShell does not throw when accessing a property that doesn't exist by design.\r\n\r\nI think a `PSScriptAnalyzer` warning makes sense here (specifically in the case of a member expression on a literal double with a numeric member name), but I don't think it should result in a parse or runtime error.",
      "created_at": "2021-07-12T19:44:08Z",
      "updated_at": "2021-07-12T19:47:29Z"
    }
  ],
  "created_at": "2021-07-11T12:21:19Z",
  "number": 15756,
  "state": "closed",
  "title": "Unquoted numbers with two or more dots should cast to a `[version]` rather than`$Null`",
  "updated_at": "2021-07-15T09:08:31Z"
}