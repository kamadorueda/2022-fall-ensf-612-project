{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4129",
  "author": "ffeldhaus",
  "body": "It seems `Invoke-RestMethod` fails to download very large files, probably due to not enough memory.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nInvoke-RestMethod -Uri http://speedtest.tele2.net/10GB.zip -OutFile /Users/ffeldhaus/Downloads/10GB.zip\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nVery large files should be downloaded without issues.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS /Users/ffeldhaus/development> Invoke-RestMethod -Uri http://speedtest.tele2.net/10GB.zip -OutFile /Users/ffeldhaus/Downloads/10GB.zip\r\nInvoke-RestMethod : Stream was too long.\r\nAt line:1 char:1\r\n+ Invoke-RestMethod -Uri http://speedtest.tele2.net/10GB.zip -OutFile / ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Invoke-RestMethod], IOException\r\n+ FullyQualifiedErrorId :\r\nSystem.IO.IOException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand     \r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\nMac OS X 10.12.5\r\n\r\n```powershell\r\nPS /Users/ffeldhaus/development> $PSVersionTable                                                                                                                                                                                              \r\n\r\nName                           Value                                                                                                                                                                                                         \r\n----                           -----                                                                                                                                                                                                         \r\nPSVersion                      6.0.0-beta                                                                                                                                                                                                    \r\nPSEdition                      Core                                                                                                                                                                                                          \r\nBuildVersion                   3.0.0.0                                                                                                                                                                                                       \r\nCLRVersion                                                                                                                                                                                                                                   \r\nGitCommitId                    v6.0.0-beta.2                                                                                                                                                                                                 \r\nOS                             Darwin 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64                                                                                                \r\nPlatform                       Unix                                                                                                                                                                                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                       \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                           \r\nSerializationVersion           1.1.0.1                                                                                                                                                                                                       \r\nWSManStackVersion              3.0     \r\n```\r\n",
  "closed_at": "2020-03-18T13:40:36Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Didn't get a repro on Win10 nor Ubuntu16.04.  Might be Mac specific.  Memory usage seemed reasonable on Windows/Linux (less than 64MB on Windows and 4.3MB on Linux).",
      "created_at": "2017-06-28T16:53:51Z",
      "updated_at": "2017-06-28T16:53:51Z"
    },
    {
      "author": "JoelMiller74",
      "author_association": "NONE",
      "body": "I am using Windows 10 and Powershell 5.1. Anything over 2 GB gives me \"Invoke-RestMethod : Stream was too long.\".\r\nMemory usage should not be an issue as I am streaming the file directly to disk. After it gets to 2 GB, it delivers that error\r\n",
      "created_at": "2018-02-13T20:20:29Z",
      "updated_at": "2018-02-13T20:20:29Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! Does a 10GB file download should be handle using FTP protocol?  I can't recall seen downloading an 10GB installation application using http/https protocol.\r\n\r\n:)\r\n\r\n",
      "created_at": "2018-02-13T20:31:04Z",
      "updated_at": "2018-02-13T20:31:30Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@JoelMiller74 for Windows PowerShell 5.1 issues, please use the Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell). This repo is for PowerShell Core (6.0.0 and newer). We use a different API and different underlying architecture in PowerShell Core than was use in Windows PowerShell. Issues with downloads in 5.1 would likely not translate to problems in 6.0.1 (as in, the same error message may be due to different causes).",
      "created_at": "2018-02-13T21:41:41Z",
      "updated_at": "2018-02-13T21:45:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I'm no expert on performance tuning, but It seems to me we should be calling `Flush()` every now and then in the code below.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/StreamHelper.cs#L299-L316\r\n\r\nThe chunk size is 10,000 bytes so flushing every loop is probably not ideal, but, waiting until the end of the 10GB file does some funky stuff with RAM. Can you ping someone who can provide me with some guidance on this?",
      "created_at": "2018-02-13T22:11:31Z",
      "updated_at": "2018-02-13T22:11:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw would be best to provide guidance here although he's currently on vacation\r\n\r\nEven thought we have a separate timer now for writing progress to the screen, it seems overkill to update progress every chunk.  Seems like we can solve two problems by updating progress and flushing the buffer every N milliseconds (or seconds?).",
      "created_at": "2018-02-14T00:50:18Z",
      "updated_at": "2018-02-14T00:50:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks!\r\nI agree, updating the progress that frequently is overkill. It does seem like a good 2-for-1 enhancement.",
      "created_at": "2018-02-14T01:39:55Z",
      "updated_at": "2018-02-14T01:39:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The exception is actually thrown from `BufferingStreamReader.Read` at [`_streamBuffer.Write(_copyBuffer, 0, bytesRead)`](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/InvokeRestMethodCommand.Common.cs#L307).\r\n\r\nHere is the stack trace:\r\n```\r\nat System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\nat Microsoft.PowerShell.Commands.InvokeRestMethodCommand.BufferingStreamReader.Read(Byte[] buffer, Int32 offset, Int32 count)\r\nat Microsoft.PowerShell.Commands.StreamHelper.WriteToStream(Stream input, Stream output, PSCmdlet cmdlet)\r\nat Microsoft.PowerShell.Commands.StreamHelper.SaveStreamToFile(Stream stream, String filePath, PSCmdlet cmdlet)\r\nat Microsoft.PowerShell.Commands.InvokeRestMethodCommand.ProcessResponse(HttpResponseMessage response)\r\nat Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\nat System.Management.Automation.Cmdlet.DoProcessRecord()\r\nat System.Management.Automation.CommandProcessor.ProcessRecord()\r\n```\r\nFor a 64-bit program, the memory limit for a single .NET object is 2GB, unless you enable `gcAllowVeryLargeObjects` in the `app.config` file as follows:\r\n```xml\r\n<configuration>\r\n    <runtime>\r\n        <gcAllowVeryLargeObjects enabled=\"true\" />\r\n    </runtime>\r\n</configuration>\r\n```\r\nFor a 32-bit program, the memory limit for a single .NET object is 512MB.\r\n\r\nSo the `MemoryStream` object cannot hold more than 2GB in a 64-bit program (512MB in a 32-bit program).\r\n\r\nThe `Stream` types [`BufferingStreamReader`](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/InvokeRestMethodCommand.Common.cs#L241) and [`WebResponseContentMemoryStream`](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/StreamHelper.cs#L21) need to be redesigned because they both rely on a `MemoryStream` to cache the content from the response stream, and thus they cannot handle content that is larger than 2GB in 64-bit PowerShell.",
      "created_at": "2018-02-21T00:06:43Z",
      "updated_at": "2018-02-22T01:52:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "When I was working on optimizing the progress bar I found that WriteProgress doesn't have overhead - performance problem was only in writing on screen. @daxian-dbw and @lzybkr helped me to find optimal solution with flushing by timer every 200 ms. I don't think that we can do something else with the API. If we want be better we should re-design the progress bar API. Currently we do tons extra allocations.\r\n\r\nAs for `BufferingStreamReader.Read` it looks as bug. But I'd first look at .Net Core 2.1 - there's done a huge number of optimizations. I think we could use `Spans` and maybe `Pipelines` if we want re-design. When do we plan to move on to 2.1?",
      "created_at": "2018-02-21T05:21:51Z",
      "updated_at": "2018-02-21T05:21:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov for 6.1, we will need to move to dotnetcore 2.1 for other reasons anyways (like full ARM support...)",
      "created_at": "2018-02-21T21:34:50Z",
      "updated_at": "2018-02-21T21:34:50Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus We talked about this issue during the PS Summit where `Invoke-RestMethod` fails to download a large file but `Invoke-WebRequest` works.\r\n\r\nHere are my testing results:\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/38873752/57120944-20f57a00-6d3a-11e9-995a-088eb33fef78.png)\r\n\r\n\r\n`Invoke-RestMethod` would continually consume memory and GC ~2-3 times before erroring when it reached 4GB RAM used. This screenshot is at the moment the cmdlet errored.\r\n\r\n![image](https://user-images.githubusercontent.com/38873752/57120542-bf341080-6d37-11e9-9b5c-1110e89492d9.png)  \r\n\r\n`Invoke-WebRequest` memory did not increase during download.\r\n![image](https://user-images.githubusercontent.com/38873752/57120488-6e241c80-6d37-11e9-8888-1736ad887109.png)\r\n\r\n`Invoke-RestMethod` made it to 2GB before erroring out and `Invoke-WebRequest` completed the 10GB file.\r\n![image](https://user-images.githubusercontent.com/38873752/57120470-4e8cf400-6d37-11e9-893a-8dd648ad9a52.png)",
      "created_at": "2019-05-03T05:18:23Z",
      "updated_at": "2019-05-03T05:27:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Invoke-RestMethod made it to 2GB before erroring out and Invoke-WebRequest completed the 10GB file.\r\n\r\nYes, see my previous comment https://github.com/PowerShell/PowerShell/issues/4129#issuecomment-367165975. It depends on a `MemoryStream` object to cache all the content. For x64 process, the memory limit for a single .NET object is 2GB.",
      "created_at": "2019-05-10T22:56:00Z",
      "updated_at": "2019-05-10T22:56:00Z"
    },
    {
      "author": "ChrisLynchHPE",
      "author_association": "NONE",
      "body": "I am very curious to understand how the behavior of Invoke-RestMethod differs from Invoke-WebRequest in, more specific to handling large files (upload or download) as @tnieto88 shows.  I have a [PowerShell advanced function](https://gist.github.com/ChrisLynchHPE/9c6734abee1d596ba9d3759a6ac4cbc8) that has worked for quite a long time using .NetClientFramework 4.6 and newer API, in which it uses the `System.Net.HttpWebRequest` class to interact with a REST API.  Part of it's functionality is to upload very large ISO images to its web service.  I have a [byte buffer](https://gist.github.com/ChrisLynchHPE/9c6734abee1d596ba9d3759a6ac4cbc8#file-upload-file-ps1-L198) I use to read in the file 8MB at a time.  When uploading a file larger than 2GB, the error happens with the[ `GetRequestStream.Write` method](https://gist.github.com/ChrisLynchHPE/9c6734abee1d596ba9d3759a6ac4cbc8#file-upload-file-ps1-L219).  I can see `pwsh.exe` increase in memory utilization.  I implemented a method to invoke `.Flush()` every 200ms and when the write buffer has consumed 100MB at a time.\r\n\r\nI am able to reproduce this on a Windows 10 PC:\r\n\r\n```powershell\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.18362 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n[PS] C:\\Users\\user> dotnet --list-runtimes \r\nMicrosoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\nIs there any way to handle this correctly in PowerShell 6/PowerShellCore 6?\r\n",
      "created_at": "2019-11-13T23:20:47Z",
      "updated_at": "2019-11-13T23:21:40Z"
    },
    {
      "author": "ChrisLynchHPE",
      "author_association": "NONE",
      "body": "I have done some further tests, and this looks like it is a .NetCore issue with `MemoryStream` itself.  When using the same code to upload or download large files (2GB or more), not only does the main process (pwsh.exe) continue to increase in memory allocation, the thread fails with `Stream was too long` exception.  I have even tried PowerShell 7 Preview 5 on the same Windows 10 PC as noted above, and can get the same behavior.  It almost seems like either `MemoryStream` or its base `Stream` class hasn't implemented the `Flush()` method correctly.  Why do I say that?  Using the exact same code on a PowerShell 5.1 console, with .NetFramework 4.8.1, memory allocation never increases, and each buffer (`FileStream` when reading a file to upload, `GetRequestStream` for upload the byte array) flushes correctly when either the `FlushAsync()` or `Flush()` methods are used (individually, not together).  So, shouldn't this be raised as an issue with the .NetCore project instead?",
      "created_at": "2019-11-14T21:26:11Z",
      "updated_at": "2019-11-14T21:26:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tried  7.0 Preview5 without any issue:\r\n```powershell\r\n Invoke-WebRequest -Uri https://images-dl.endlessm.com/release/3.7.3/eos-amd64-amd64/th/eos-eos3.7-amd64-amd64.191024-140039.th.iso -OutFile C:\\temp\\q.txt\r\n```\r\nIt was 9.4 Gb and was long but no memory issues and no exceptions.",
      "created_at": "2019-11-15T12:00:00Z",
      "updated_at": "2019-11-15T12:00:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov `Invoke-WebRequest` never had the problem. The problem is in `Invoke-RestMethod`. See https://github.com/PowerShell/PowerShell/issues/4129#issuecomment-488940308",
      "created_at": "2019-11-15T19:12:47Z",
      "updated_at": "2019-11-15T19:12:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for remainder! It seems BufferingStreamReader class has an issue. Also I discovered that Ctrl-C doesn't work in Invoke-RestMethod for the large file download scenario. So I pulled a PR to resolve both issues.",
      "created_at": "2019-11-17T18:10:39Z",
      "updated_at": "2019-11-17T18:11:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11095, which has now been successfully released as `v7.1.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:48:30Z",
      "updated_at": "2020-03-26T17:48:30Z"
    },
    {
      "author": "ChrisLynchHPE",
      "author_association": "NONE",
      "body": "It's nice to see this is being fixed in PowerShell Core.  But, considering that `Invoke-RestMethod` was built upon `System.Net.HttpWebRequest` class (which isn't async) and there are a TON of examples and working code that uses this serial class, why can the underlying issue not be fixed?  Meaning, not everyone can move their code to async class like `System.Net.HttpClient`.  What does someone do with existing code that uses the older (yes, I know legacy) class?",
      "created_at": "2020-04-21T22:17:03Z",
      "updated_at": "2020-04-21T22:17:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ChrisLynchHPE .Net team moved to HttpClient in .Net Core 3.0/3.1 and PowerShell 7.0 was released with the change. I am afraid that this was an inevitable breaking change.",
      "created_at": "2020-04-22T04:29:22Z",
      "updated_at": "2020-04-22T04:29:22Z"
    },
    {
      "author": "ChrisLynchHPE",
      "author_association": "NONE",
      "body": "File transfer using API's is very common.  So it is extremely frustrating to see breaking changes with no guidance on how to handle this going forward, beyond \"well, just move to an async method class like `[System.Net.HttpCliet]`.\"  As I stated, there are a ton of examples that use the legacy `[System.Net.HttpWebRequest]` class to transfer large files, and is not trivial to use `[System.Net.HttpClient]` Async class within PowerShell.  Not everyone has the luxury to use Invoke-RestMethod or Invoke-WebRequest Cmdlets.  So does anyone have any working examples on how to use `HttpClient` within PowerShell to upload and download large files?",
      "created_at": "2020-08-10T18:46:59Z",
      "updated_at": "2020-08-10T18:46:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ChrisLGardner Please open new issue to discuss your scenario and reference the issue.",
      "created_at": "2020-08-11T15:15:36Z",
      "updated_at": "2020-08-11T15:15:53Z"
    }
  ],
  "created_at": "2017-06-28T12:25:35Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 4129,
  "state": "closed",
  "title": "Invoke-RestMethod fails on very large files",
  "updated_at": "2020-08-11T15:15:53Z"
}