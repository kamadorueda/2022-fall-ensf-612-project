{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6844",
  "author": "MaximoTrinidad",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\nDue to the fact that there still are people using either 64 or 32bit processor architectures. I think it won't hurt to provide this information in the $PSVersionTable.\r\n\r\nIt could be nice to include the *$env:PROCESSOR_ARCHITECTURE in the $PSVersion variable.\r\n\r\n_*Note: While posting this feedback, I notice the $env:PROCESSOR_ARCHITECTURE doesn't exit in Linux or MacOS PSCore6._\r\n\r\nSteps to reproduce\r\n------------------\r\nCurrently, this information is only available in the $env:PROCESSOR_ARCHITECTURE variable.\r\n```powershell\r\nPROCESSOR_ARCHITECTURE         AMD64\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nIt could look like the following results:\r\n```none\r\nPS C:\\Program Files\\PowerShell\\6-preview> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17661\r\nPlatform                       Win32NT\r\nProcessor_Architecture         AMD64\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nActual behavior\r\n---------------\r\nIt doesn't exist\r\n```none\r\nPS C:\\Program Files\\PowerShell\\6-preview> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17661\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nWindows OS: Microsoft Windows 10.0.17661\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6-preview> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17661\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The solution to this might lie in resolving https://github.com/PowerShell/PowerShell/issues/4474.",
      "created_at": "2018-05-08T22:39:24Z",
      "updated_at": "2018-05-08T22:39:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that adding the bit-ness to `$PSVersionTable` can't hurt, given that there's quite a bit of OS information there  already.\r\n\r\nIn the meantime, `[Environment]::Is64BitOperatingSystem` gives you that information.\r\n\r\nIt doesn't reflect the CPU's [ISA](https://en.wikipedia.org/wiki/List_of_instruction_sets), however.\r\n",
      "created_at": "2018-05-08T22:39:54Z",
      "updated_at": "2018-05-08T22:39:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> people using either 64 or 32bit processor architectures\r\n\r\nHow PowerShell scripts depends on this? Could you give business scenarios?",
      "created_at": "2018-05-09T13:38:10Z",
      "updated_at": "2018-05-09T13:38:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "May be better to resolve this via https://github.com/PowerShell/PowerShell/issues/2693",
      "created_at": "2018-05-09T14:42:11Z",
      "updated_at": "2018-05-09T14:42:11Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Thanks everyone!!\r\n:)",
      "created_at": "2018-05-09T14:48:24Z",
      "updated_at": "2018-05-09T14:48:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can get this from .Net:\r\n```c#\r\n[System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture\r\n[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture\r\n```",
      "created_at": "2018-05-09T16:21:31Z",
      "updated_at": "2018-05-09T16:21:31Z"
    }
  ],
  "created_at": "2018-05-08T22:00:16Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 6844,
  "state": "open",
  "title": "PSCore6 - How about including the platform architecture in the $PSVersionTable?",
  "updated_at": "2018-05-09T16:21:31Z"
}