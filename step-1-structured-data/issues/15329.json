{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15329",
  "author": "stinos",
  "body": "## Steps to reproduce\r\n\r\nRun\r\n\r\n```powershell\r\nGet-ChildItem -Recurse -Force | more\r\n```\r\n\r\nthen exit `more` by pressing `q`.\r\n\r\n## Expected behavior\r\n\r\nThe pipe stops after quitting `more`.\r\n\r\n## Actual behavior\r\n\r\nThe pipe keeps on running until all child items listed.\r\n\r\n## Environment data\r\n\r\n```none\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\n```\r\n\r\n## Description\r\n\r\nThere are a couple of issues related to unix-like plaforms and pipe handling (https://github.com/PowerShell/PowerShell/issues/8420 https://github.com/PowerShell/PowerShell/issues/8421) but the same behavior seems to appears on any platform with any type of external program.\r\n\r\nIs this a known/documented issue? I looked around but maybe my search terms are not ok, I couldn't find a related issue.\r\n\r\nFor example: these keep running the upstream command even after the downstream command closes; (the `cmd /c '@echo off'` command is just to mimick an external program which consumes the pipe then stops without output before all items are consumed - a real example would be a program like [fzf](https://github.com/junegunn/fzf)):\r\n\r\n```\r\nls -Rec -Fo -File | more\r\nls -Rec -Fo -File | cmd /c '@echo off'\r\n```\r\n\r\nthis can be worked around with Select-Object to force a `StopUpstreamCommandsException`, e.g. this works as expected in that the pipe stops:\r\n\r\n```\r\nls -Rec -Fo -File | & \"C:\\Program Files\\Git\\usr\\bin\\head.exe\" | Select-Object -First 10\r\n```\r\n\r\nhowever that's only ok because it is known `head` will by default produce 10 items. That's a problem because it means piping into a command which produces no output will not stop the pipe when that command exits. So this still keeps on running:\r\n\r\n```\r\nls -Rec -Fo -File | cmd /c '@echo off' | Select-Object -First 1 | Out-Null\r\n```\r\n\r\nOne workaround is be to launch the external program with the .net Process API, then use `Register-ObjectEvent -EventName 'Exited'` and then throw a `StopUpstreamCommandsException` using a technique like https://stackoverflow.com/a/34800670. But that's non-trivial.\r\n\r\nAnother simpler one would be to make the external command always produce output no matter what. I hoped pipeline chain operators could do that but due to associativity that doesn't cut it. That is to say, I assume that\r\n\r\n```\r\nls -Rec -Fo -File | cmd /c '@echo off' || 'TERMINATOR' | Select-Object -First 1 | Out-Null\r\n```\r\ndoesn't stop right away because it comes down to\r\n```\r\n(ls -Rec -Fo -File | cmd /c '@echo off') || 'TERMINATOR' | Select-Object -First 1 | Out-Null\r\n```\r\nand not\r\n```\r\nls -Rec -Fo -File | (cmd /c '@echo off' || 'TERMINATOR') | Select-Object -First 1 | Out-Null\r\n```\r\n(which yields a ParserError).\r\n\r\nThe idea to always have the external command produce output can be done in cmd like\r\n```\r\nls -Rec -Fo -File | cmd /c '(@echo off || echo TERMINATOR) && echo TERMINATOR' | Select-Object -First 1 | Out-Null\r\n```\r\ni.e. no matter if the external program (as said mimicked by `@echo off`) produces output or not, the echos after it make sure it does. Is there another workaround? ",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is a known issue that @JamesWTruher recently raised internally, but there may not be an issue tracking it yet, so thanks for opening this issue! A native command processor should detect the exit of an executable and stop the upstream commands properly.",
      "created_at": "2021-05-03T19:39:08Z",
      "updated_at": "2021-05-03T19:39:08Z"
    }
  ],
  "created_at": "2021-04-30T10:36:37Z",
  "number": 15329,
  "state": "open",
  "title": "Powershell commands run to completion with a broken pipe to an external program",
  "updated_at": "2021-05-03T19:39:08Z"
}