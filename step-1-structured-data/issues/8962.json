{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8962",
  "author": "david-wang24",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nAdded -Raw switch to select-string for convenience. Issue #7713. \r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\nResolves #7713.\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-04-20T05:18:52Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8962) <br/>All CLA requirements met.",
      "created_at": "2019-02-24T00:06:17Z",
      "updated_at": "2019-02-24T00:09:46Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "This is a student at [HackIllinois](https://www.hackillinois.org). @rjmholt and I are working with the students here and are reviewing PRs that they send.",
      "created_at": "2019-02-24T03:11:54Z",
      "updated_at": "2019-02-24T03:11:54Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Sorry for the delay, @david-wang24! This is great work! I do have a thought about the implementation.\r\n\r\nAs we know, in PowerShell, we typically pass around objects everywhere. Into functions, into the pipeline, into variables, everywhere!\r\n\r\nWhat `Select-String` does today is it returns objects as well of type `MatchInfo`. But you already knew that \ud83d\ude01\r\n\r\nThe addition of a `-Raw` flag in my mind (and @mklement0 who originally opened the issue) is that `-Raw` would tell `Select-String` to actually return `string`s instead of `MatchInfo`s.\r\n\r\nWhat your current implementation does is still returning `MatchInfo` objects but it's changing the behavior of `MatchInfo.ToString()` to look like it's only returning the matching lines.\r\n\r\nIt's still really impressive what you've done so far, but we should look at the problem from a different angle.\r\n\r\nDoes that make sense? Let me know if you're interested in still working on this \ud83d\ude0ano rush",
      "created_at": "2019-03-07T17:28:26Z",
      "updated_at": "2019-03-07T17:28:26Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think we should resist the temptation to add nifty switches. The same thing can be accomplished with \r\n```\r\n\u2026 | % Line\r\n```",
      "created_at": "2019-03-09T19:45:48Z",
      "updated_at": "2019-03-09T20:00:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@powercode per the discussion in this PR, that would return the complete matching _lines_, not just the _matched strings_ from each MatchInfo object.",
      "created_at": "2019-03-09T19:57:05Z",
      "updated_at": "2019-03-09T19:57:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, @vexx32, `-Raw` is indeed about returning full lines, whereas it is `-OnlyMatching` (#8965) is about only returning what was matched.\r\n\r\n@powercode, adding the `-Raw` switch was greenlit in #7713, and `-OnlyMatching` was green-lit in #7712. If you feel these features shouldn't have been approved, please voice your concerns there.\r\n\r\nTo recap the rationale:\r\n\r\n* `Select-String`'s core mandate - as the name implies - is to return _strings_. As such, this is what it should always have done _by default_. Lest we break backward compatibility, the best we can do now is offer the typical use case as an _opt-in_.\r\n\r\n  * In hindsight, `Select-String` could have been patterned after `Get-Content`, which outputs strings, as expected, that are  _decorated with NoteProperty members_ to provide metadata. \r\n\r\n  * The `-Raw` switch would still make sense then, however, as an opt-out of the costly act of decoration, as has been proposed for `Get-Content` in #7537.\r\n\r\n  * The case for `-Raw` as a general opt-out-of-decoration-or-wrapping-in-helper-types was made in #7855.\r\n\r\n* `| % Line` is not only more cumbersome, but performs poorly.\r\n\r\n\r\n",
      "created_at": "2019-03-10T02:08:27Z",
      "updated_at": "2019-03-11T05:03:03Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-10T05:17:33Z",
      "updated_at": "2019-04-10T05:17:33Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically closed because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-20T05:18:50Z",
      "updated_at": "2019-04-20T05:18:50Z"
    }
  ],
  "created_at": "2019-02-24T00:06:06Z",
  "number": 8962,
  "state": "closed",
  "title": "[feature] adding select-string -raw",
  "updated_at": "2019-04-20T05:18:52Z"
}