{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3906",
  "author": "ip28",
  "body": "Hi All, \r\nFew days ago, we have done a deployment using DSC, the server was 2008 R2 version and the LCM configuration was \"ApplyAndMonitor\", we had a typo in web.config and corrected it after our tests, which was rolled back by LCM after 15mins. Can you please help me to find out how we can prevent this in future?",
  "closed_at": "2019-09-30T00:00:50Z",
  "comments": [
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "Can you share via gist your configuration script (minus real life servers/paths/passwords etc) and the LCM script as well ?\r\n",
      "created_at": "2017-06-01T17:41:23Z",
      "updated_at": "2017-06-01T17:41:23Z"
    },
    {
      "author": "ip28",
      "author_association": "NONE",
      "body": "@ArieHein , Below is the complete script which got executed. It was a remote script execution by Invoke-Expression command, the machine from which it was running (deployment agent) had Powershell 5.0 Windows Server 2008 R2, the target machine also had Windows Server 2008 R2.\r\nAlso before running the scripts from the deployment agent, the DSC modules were not able to load, then I had to mention the versions explicitly, as you can see below.\r\n\r\n\r\n```powershell\r\nparam\r\n(\r\n$DeployServerName,\r\n$Ensure,\r\n$AppPoolName,\r\n$WebsiteName,\r\n$WebApplicationName,\r\n$WebAppPhysicalPath,\r\n$BackupFolder,\r\n$WebsitePhysicalPath,\r\n$ManagedPipelineMode,\r\n$ManagedRuntimeVersion,\r\n$AppPoolIdentitytype,\r\n$UserName,\r\n$Password,\r\n$Protocol,\r\n$Port,\r\n$IP,\r\n$HostName,\r\n$ServiceEndpoint,\r\n$ClientEndpoint,\r\n$AuthRoleAllowedUsers,\r\n$ConnectionString1,\r\n$ConnectionString2,\r\n$ConnectionString3,\r\n$AppsettingsKey\r\n)\r\n$myFQDN=(Get-WmiObject win32_computersystem).DNSHostName+\".\"+(Get-WmiObject win32_computersystem).Domain\r\n$SourcePath=\"\\\\$myFQDN\\BuildShare\\MyComponent\\MyDrop\"\r\n\r\n\r\n$ErrorActionPreference = \"Stop\"\r\nconfiguration MyComponentWebsite\r\n{\r\n    \r\n    # Import the module that defines custom resources \r\n    Import-DscResource -ModuleName @{ModuleName='xWebAdministration';ModuleVersion='1.3.2'}\r\n    Import-DscResource -ModuleName @{ModuleName='WebDirProperties';ModuleVersion='1.3.2'}\r\n    Import-DscResource -ModuleName @{ModuleName='xWinEventLog';ModuleVersion='0.0.0.1'} \r\n    Import-DscResource -ModuleName @{ModuleName='Custom_cXmlEdit';ModuleVersion='1.0'}\r\n    Import-DscResource -ModuleName @{ModuleName='cEsitCustomDscResources';ModuleVersion='0.0'}\r\n    Import-DscResource -ModuleName @{ModuleName='WebsiteBindings';ModuleVersion='1.3.2'} \r\n\r\n\r\n    Node $DeployServerName\r\n    {                  \r\n                   \r\n            if($Ensure -ieq \"present\")\r\n            {\r\n                Registry RegKey_MyComponent\r\n                {\r\n                    Ensure = \"$Ensure\"  \r\n                    Key = \"HKLM:SYSTEM\\CurrentControlSet\\Services\\Eventlog\\DS\\MyComponent\"\r\n                    ValueName = \"EventMessageFile\"\r\n                    ValueData = \"%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319\\EventLogMessages.dll\"\r\n                    ValueType = \"ExpandString\"\r\n                 }\r\n                Script CreateBackup_RemoveWebAppPhyPath\r\n                {\r\n                    GetScript = {\r\n                                   $result=@{\r\n                                            WebAppPhysicalPath=$WebAppPhysicalPath\r\n                                            BackupFolder=\"$BackupFolder\"\r\n                                       }\r\n                                   return $result\r\n                                }\r\n                    TestScript = {  \r\n                                    $result=$true\r\n                                    if(Test-Path -Path \"$using:WebAppPhysicalPath\")\r\n                                    {\r\n                                        $result=$false\r\n                                    }\r\n                                    return $result\r\n                                 }\r\n                    SetScript = {\r\n                                    Write-Verbose \"Copying existing web app files to Backup folder - START\" -verbose\r\n                                    Robocopy \"$using:WebAppPhysicalPath\" \"$using:BackupFolder\" /E\r\n                                    Write-Verbose \"Copying existing web app files to Backup folder - END\" -verbose                                    \r\n                                }\r\n                 }\r\n\r\n                File Present_Copy_SourceToWebAppPhysicalPath\r\n                {\r\n                    Type = \"Directory\" \r\n                    Ensure = \"$Ensure\"\r\n                    Recurse = $true\r\n                    SourcePath = \"$SourcePath\"\r\n                    DestinationPath = \"$WebAppPhysicalPath\"\r\n                    Force = $true\r\n                    MatchSource = $true\r\n                    Checksum = \"CreatedDate\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_ConnectionString1\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/connectionStrings/add[@name=\"ConnectionString1\"]/@connectionString'\r\n                    Value=\"$ConnectionString1\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_ServiceEndpoint\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/system.serviceModel/services/service/endpoint[@contract=\"MyComponent.Interfaces.IService\"]/@address'\r\n                    Value=\"$ServiceEndpoint\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_ClientEndpoint\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/system.serviceModel/client/endpoint[@contract=\"Client.IClient\"]/@address'\r\n                    Value=\"$ClientEndpoint\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_AuthRoleAllowedUsers\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='configuration/system.web/authorization/allow/@roles'\r\n                    Value=\"$AuthRoleAllowedUsers\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_ConnectionString2\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/connectionStrings/add[@name=\"ConnectionString2\"]/@connectionString'\r\n                    Value=\"$ConnectionString2\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n\r\n                Custom_cXmlEdit Present_ConnectionString3\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/connectionStrings/add[@name=\"ConnectionString3\"]/@connectionString'\r\n                    Value=\"$ConnectionString3\"\r\n                    Ensure=\"$Ensure\"\r\n                }\r\n                \r\n                Custom_cXmlEdit Present_AppsettingsKey\r\n                {\r\n                    FilePath = \"$WebAppPhysicalPath\\web.config\"\r\n                    XPathExpression='/configuration/appSettings/add[@key=\"AppsettingsKey\"]/@value'\r\n                    Value=\"$AppsettingsKey\"\r\n                    Ensure=\"$Ensure\"\r\n                }                \r\n                \r\n            }\r\n            elseif($Ensure -ieq \"Absent\")\r\n            {\r\n                Script Absent_Remove_WebAppPhysicalPath_UnInstall\r\n                {\r\n                GetScript = {\r\n                        $result = @{\r\n                                WebAppPhysicalPath = \"$WebAppPhysicalPath\"\r\n                                BackupFolder=\"$BackupFolder\"\r\n                                WebsiteName=\"$WebsiteName\"\r\n                                WebApplicationName=\"$WebApplicationName\"\r\n                                }\r\n                                return $result\r\n                            }\r\n                TestScript = {\r\n                                return $false\r\n                             }\r\n                SetScript = {\r\n                                if(Test-Path -Path \"$using:BackupFolder\")\r\n                                {\r\n                                    Remove-Item -Path $using:WebAppPhysicalPath -Recurse -Force\r\n                                    Robocopy \"$using:BackupFolder\" \"$using:WebAppPhysicalPath\" /E\r\n                                }\r\n                                else\r\n                                {\r\n                                    Remove-WebApplication -Site $using:WebsiteName -Name $using:WebApplicationName -Verbose\r\n                                    Remove-Item -Path $using:WebAppPhysicalPath -Recurse -Force\r\n                                }\r\n                            }\r\n                }\r\n            }           \r\n            if ($Ensure -ieq \"Present\")\r\n            {                          \r\n                xWebAppPool NewWebAppPool \r\n                { \r\n                    Name   = $AppPoolName\r\n                    Ensure = \"$Ensure\"\r\n                    State  = \"Started\"\r\n                }\r\n                Script CheckWebsitePath\r\n                {\r\n                    GetScript = {\r\n                                    $result=@{WebsitePhysicalPath=$WebsitePhysicalPath}\r\n                                    return $result\r\n                                }\r\n                    TestScript = {\r\n                                    $result=$true\r\n                                    if(!(Test-Path -Path \"$using:WebsitePhysicalPath\"))\r\n                                    {\r\n                                        $result=$false\r\n                                    }\r\n                                    return $result\r\n                                }\r\n                    SetScript = {\r\n                                    New-Item -Path $using:WebsitePhysicalPath -ItemType Directory -Force \r\n                                }\r\n                    DependsOn = @(\"[xWebAppPool]NewWebAppPool\")\r\n                }\r\n                xWebsite MyComponentWebsite \r\n                { \r\n                    Ensure          = \"$Ensure\"\r\n                    Name            = $WebsiteName \r\n                    State           = \"Started\" \r\n                    PhysicalPath    = \"$WebsitePhysicalPath\"\r\n                    ApplicationPool = $AppPoolName\r\n                    BindingInfo     = MSFT_xWebBindingInformation \r\n                                        { \r\n                                            Protocol              = $Protocol\r\n                                            Port                  = $Port\r\n                                            IPAddress             = $IP\r\n                                            HostName              = $HostName\r\n                                        } \r\n                    DependsOn       = @(\"[Script]CheckWebsitePath\") \r\n                }\r\n\r\n                if($AppPoolIdentitytype -ieq \"Custom\")\r\n                {\r\n                    WebsiteBindings MyComponentBindings_Custom\r\n                    {\r\n                        WebsiteName = \"$WebsiteName\"\r\n                        APPPOOl = \"$AppPoolName\"\r\n                        ManagedPipelineMode = \"$ManagedPipelineMode\"\r\n                        ManagedRuntimeVersion = \"$ManagedRuntimeVersion\"\r\n                        UserName = \"$UserName\"\r\n                        Password = \"$Password\"\r\n                        DependsOn = @(\"[xWebsite]MyComponentWebsite\")\r\n                    }\r\n                }\r\n                else\r\n                {                    \r\n                    Script ApplicationPoolIdentity_Builtin\r\n                    {\r\n                        GetScript = {\r\n                                        $result = @{AppPoolName = $AppPoolName\r\n                                               AppPoolIdentitytype = $AppPoolIdentitytype\r\n                                               ManagedPipelineMode = $ManagedPipelineMode\r\n                                               ManagedRuntimeVersion = $ManagedRuntimeVersion\r\n                                              }\r\n                                        return $result\r\n                                    }\r\n                        TestScript = {\r\n                                        return $false\r\n                                     }\r\n                        SetScript = {\r\n                                        Import-Module WebAdministration\r\n                                        Set-ItemProperty IIS:\\AppPools\\$using:AppPoolName -name processModel.identityType -Value \"$using:AppPoolIdentitytype\"\r\n                                        Set-ItemProperty IIS:\\AppPools\\$using:AppPoolName -Name managedPipelineMode -Value \"$using:ManagedPipelineMode\"\r\n                                        Set-ItemProperty IIS:\\AppPools\\$using:AppPoolName -Name managedRuntimeVersion -Value \"$using:ManagedRuntimeVersion\"\r\n                                    }\r\n                    }\r\n                }\r\n\r\n                xWebApplication MyComponentWebApplication_Install \r\n                { \r\n                    Name = $WebApplicationName \r\n                    Website = $WebsiteName \r\n                    WebAppPool = $AppPoolName \r\n                    PhysicalPath = \"$WebAppPhysicalPath\" \r\n                    Ensure = $Ensure\r\n                    DependsOn = @(\"[xWebSite]MyComponentWebsite\") \r\n                }\r\n\r\n                Script Present_MyComponentWebApplicationProperties_Install\r\n                {\r\n                    GetScript = {\r\n                                    $result = @{WebsiteName = $WebsiteName\r\n                                           WebApplicationName = $WebApplicationName}\r\n                                    return $result\r\n                                }\r\n                    TestScript = {\r\n                                    return $false\r\n                                 }\r\n                    SetScript = {\r\n                                    Import-Module Webadministration\r\n                                    Set-WebConfigurationProperty -Filter \"/system.webServer/security/authentication/windowsAuthentication\" -Name Enabled -Value True -PSPath \"IIS:\\Sites\\$WebsiteName\" -Force -ErrorAction SilentlyContinue\r\n                                    Set-WebConfigurationProperty -Filter \"/system.webServer/security/authentication/AnonymousAuthentication\" -Name Enabled -Value True -PSPath \"IIS:\\Sites\\$WebsiteName\" -Force -ErrorAction SilentlyContinue\r\n                                    Set-WebConfigurationProperty -Filter \"/system.webServer/security/authentication/windowsAuthentication\" -Name Enabled -Value True -PSPath \"IIS:\\Sites\\$WebsiteName\\$WebApplicationName\" -Force -ErrorAction SilentlyContinue\r\n                                    Set-WebConfigurationProperty -Filter \"/system.webServer/security/authentication/AnonymousAuthentication\" -Name Enabled -Value True -PSPath \"IIS:\\Sites\\$WebsiteName\\$WebApplicationName\" -Force -ErrorAction SilentlyContinue\r\n                                }\r\n                    DependsOn = @(\"[xWebApplication]MyComponentWebApplication_Install\")\r\n                }\r\n            }             \r\n        }\r\n}\r\n\r\nWrite-Verbose \"Executing MyComponentWebsite Deployment - Start\" -Verbose\r\n\r\nMyComponentWebsite\r\nStart-DscConfiguration -Path MyComponentWebsite -Verbose -Wait -ComputerName $DeployServerName -force\r\nWrite-Verbose \"Executing MyComponentWebsite - End\" -Verbose\r\n```",
      "created_at": "2017-06-02T04:33:57Z",
      "updated_at": "2017-06-02T18:16:12Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "Hi and thanks for the configuration script,\r\n\r\nNothing i can see directly from the configuration script, except the two\r\n        if ($Ensure -ieq \"Present\")\r\nsections in the script, but that in itself shouldn't be a reason for such behavior.\r\n\r\nLCM ConfigurationMode will always try to apply a new configuration and will continue to until successful, no matter what the value is. The difference will be whether it checks for a drift and what it does if it finds one. So as long as there's a new configuration in the process of being applied, the value of ConfigurationMode isn't looked upon.\r\n\r\nI can think of one place in the code that might contribute, but its a slim chance.\r\nThis is in the File resource your using, it might have brought the file back from the original\r\n$SourcePath as you have MatchSource set to True, Force set to True, and Checksum set to CreatedDate.\r\n          \r\nWhen fixing the web.config, was it done manually on the node itself, or did you do the fix in the DSC configuration script and then pushed it again ? \r\n\r\nYou didnt  link your LCMscript but ill assume it is ok or you wouldn't be able to do other activities.\r\n\r\nYou might be able to get more insight if you try using the DSC logs on the node to see exactly what happening under the hood.\r\n\r\nhttps://msdn.microsoft.com/en-us/powershell/dsc/troubleshooting\r\n\r\n",
      "created_at": "2017-06-02T15:27:38Z",
      "updated_at": "2017-06-02T15:29:54Z"
    },
    {
      "author": "ip28",
      "author_association": "NONE",
      "body": "Hi Arie,\nThanks for your reply and explanation of the script.\n We don't have a specific LCM script as such. This deployment script is called remotely by another script. \nThe web.config was corrected manually on the target machine.\n\nRegards,\nIndranil\nSent from my iPhone\n\n> On 02-Jun-2017, at 8:57 PM, Arie Heinrich <notifications@github.com> wrote:\n> \n> Hi and thanks for the configuration script,\n> \n> Nothing i can see directly from the configuration script, except the two\n> if ($Ensure -ieq \"Present\")\n> sections in the script, but that in itself shouldn't be a reason for such behavior.\n> \n> LCM ConfigurationMode will always try to apply a new configuration and will continue to until successful, no matter what the value is. The difference will be whether it checks for a drift and what it does if it finds one. So as long as there's a new configuration in the process of being applied, the value of ConfigurationMode isn't looked upon.\n> \n> I can think of one place in the code that might contribute, but its a slim chance.\n> This is in the File resource your using, it might have brought the file back from the original\n> $SourcePath as you have MatchSource set to True, Force set to True, and Checksum set to CreatedDate.\n> \n> When fixing the web.config, was it done manually on the node itself, or did you do the fix in the DSC configuration script and then pushed it again ?\n> \n> You didnt link your LCMscript but ill assume it is ok or you wouldn't be able to do other activities.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
      "created_at": "2017-06-02T16:55:06Z",
      "updated_at": "2017-06-02T16:55:06Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "Hi,\r\n\r\nAs a rule of thumb, when you venture into the world of configuration management and deveops in generally, try to make sure you stop doing ANY manual changes to anything as you introducing \"chaos\" to a system that's trying to remain balanced.\r\n\r\nThe main idea with DSC is that I can run it on a node 1000 times and I will always get the same result = the same state, no matter what changes someone did manually. So I know for 100% at what state a system is especially when I cant control them multiple changes that may happen to a node.\r\n\r\nI've been emphasizing to my peers to stop any manual changes, any RDP session, convert all manual configurations into scripts and then when a change is needed, it is done to the code/script that's is stored in our local source control.\r\n\r\nYou want to make a change to web.config you best do it at the source and run the configuration script again. AS most of the settings in the configuration are the same the script will be very fast, compared to the first time you run the script.\r\n",
      "created_at": "2017-06-02T23:18:39Z",
      "updated_at": "2017-06-02T23:18:39Z"
    },
    {
      "author": "ip28",
      "author_association": "NONE",
      "body": "Hi Arie,\r\n Thanks a lot for giving insights on the way DSC works, I too agree with you on avoiding manual changes. I am new to DSC, this is what we are doing for our components:-\r\n1. Deployment scripts are through DSC\r\n2. Web.Config changes etc are with normal (non-DSC) PowerShell [I believe DSC will consider this also as manual change, please correct me if I am wrong]\r\n\r\nThe applications which we are deploying are kinda legacy (monolith WCFs, windows services etc.) and are very heavily dependent on configuration, also in case of Disaster Recovery or tenant (caller) on-boarding, these configs might change, also we can't afford downtime of the service (we have multiple servers and take one/few server out of load balancer before deployment). \r\n\r\nThe whole purpose of configuration (web.config etc.) , as I understood, is to give flexibility to change values/behaviour of the application without having to change the code and redeploy the application again. But if I try to run the deployment script again, just for a configuration change, which essentially redeploys the whole service, is as good as keeping all config values in the code itself.\r\nAlso, I feel I might have misunderstood the DSC documentation, I thought \"ApplyandMonitor\" LCM configuration will detect the change in state and just log it into event viewer, without changing the actual code bits.\r\n\r\nIt might be possible we are using DSC in a wrong way, but it will be really helpful if you can guide me here.\r\n\r\nThanks a ton for your elaborate reply again, really appreciate it.\r\n\r\nThanks,\r\n Indranil",
      "created_at": "2017-06-03T06:14:52Z",
      "updated_at": "2017-06-03T06:14:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-09-30T00:00:49Z",
      "updated_at": "2019-09-30T00:00:49Z"
    }
  ],
  "created_at": "2017-06-01T17:17:04Z",
  "number": 3906,
  "state": "closed",
  "title": "DSC deployment got reverted even when LCM configuration is set to ApplyandMonitor",
  "updated_at": "2019-09-30T00:00:50Z"
}