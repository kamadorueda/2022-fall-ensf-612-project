{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15102",
  "author": "trir262",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$MyDict = [System.Collections.Concurrent.ConcurrentDictionary[string,object]]::new()\r\nGet-Process -PipelineVariable Processinfo | ForEach-Object -Parallel {\r\n    $dict = $using:MyDict\r\n    $dict.TryAdd($Processinfo.id, $Processinfo) | Out-Null\r\n}\r\n\r\n$MyDict.Keys.Count\r\n1\r\n\r\n$MyDict.Keys\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\n$MyDict.Keys.Count\r\n200\r\n$MyDict.Keys\r\n0\r\n2\r\n3\r\n9\r\n1480\r\n...\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n$MyDict.Keys.Count\r\n1\r\n\r\n$MyDict.Keys\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n\r\nThe variable defined as the pipeline variable is not available in the foreach-object script when the option -Parallel is used, However then -Parallel is not used, the variable can be used correctly",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`ForEach-Object -Parallel` executes scriptblocks concurrently in separate runspaces, so the only data they have access to is the direct input data. Additional defined variables are generally not accessible.\r\n\r\nUse `$_` or `$PSItem` to access the input data, rather than a custom pipeline variable name. Alternately, `$using:Processinfo` might work here, but I wouldn't count on it.",
      "created_at": "2021-03-25T12:34:11Z",
      "updated_at": "2021-03-25T12:34:59Z"
    },
    {
      "author": "trir262",
      "author_association": "NONE",
      "body": "Thank you for the fast feedback! I tried `$using:Processinfo` but unfortunately it returns with an error:\r\n\r\n```PowerShell\r\nInvalidOperation:\r\nLine |\r\n   3 |  $dict.TryAdd($using:Processinfo.id, $using:Processinfo) | Out-Null\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | A Using variable cannot be retrieved. A Using variable can be used only with Invoke-Command, Start-Job, or InlineScript in the script workflow. When it is used with Invoke-Command, the Using variable is valid only if the script block is invoked on a remote computer.\r\n```\r\n",
      "created_at": "2021-03-25T14:47:58Z",
      "updated_at": "2021-03-25T14:47:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While @vexx32 is correct in that using `$_` aka `$PSItem` is the best solution here, you're definitely either seeing a bug or a design limitation that is surfaced via a misleading error message:\r\n\r\n* It is reasonable to expect `-PipelineVariable` to also work with `ForEach-Object -Parallel` - but, as with reference to any variable value from the caller's scope, you would then have to refer to it via the `$using:` scope.\r\n\r\n* This is what you've tried in your previous comment, but it fails _with an inapplicable error message_ - clearly, `$using:` references _can_ be used in `ForEach-Object -Parallel`; it is only the reference to a _pipeline variable_ that causes the error.\r\n\r\n* If this is a by-design limitation (I don't know the answer - perhaps @PaulHigin or @SeeminglyScience can clarify), we at least need an appropriate error message.\r\n  * As an aside: The inapplicable error message itself should be updated to mention `ForEach-Object -Parallel` too.",
      "created_at": "2021-03-25T18:02:47Z",
      "updated_at": "2021-03-25T18:04:13Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Pipeline variables are not supported for Foreach-Object -Parallel.  The RFC and blog specify that variables can be passed in only via pipeline input `$_` and with the `$using:` keyword.\r\n\r\n```\r\n...\r\nThe only variable that automatically appears in the parallel script block is the piped in object. Other variables are passed in using the $using: keyword.\r\n...\r\n```\r\n\r\nBut we may need to update the documentation to make this more clear.  This may be something that can be considered for future releases.",
      "created_at": "2021-03-25T18:51:49Z",
      "updated_at": "2021-03-25T18:51:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @PaulHigin; documenting this will certainly help, but providing an appropriate error message is important too.\r\n\r\nIf we don't want to introduce a _specific_ error message for this scenario, the existing, catch-all message should be amended, along the lines of:\r\n\r\n```\r\nA Using variable can be used only with Start-Job, Start-ThreadJob, \r\nForEach-Object -Parallel, except with pipeline variables,\r\nand Invoke-Command when targeting remote computers.\r\n```\r\n\r\nNote that I've cut out the _workflow_ reference, as it doesn't apply to PS Core anymore, and that I've also added `Start-ThreadJob`.\r\n\r\n\r\n",
      "created_at": "2021-03-25T19:32:27Z",
      "updated_at": "2021-03-25T19:32:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've created a docs issue at https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7380, and in the course of writing it up noticed that there's another enhancement worth making:\r\n\r\nThe `$using:<pipelineVar>` reference _quietly defaults to `$null`_ instead of complaining _unless property access directly on the `$using` reference is attempted_; e.g.:\r\n\r\n```powershell\r\nPS> Write-Output a, ab, abc -PipelineVariable word | ForEach-Object -Parallel { $null -eq $using:word }\r\nTrue\r\nTrue\r\nTrue\r\n```\r\n\r\nvs.\r\n\r\n```powershell\r\nPS> Write-Output a, ab, abc -PipelineVariable word | ForEach-Object -Parallel { $using:word.Length }\r\nInvalidOperation: A Using variable cannot be retrieved...\r\nInvalidOperation: A Using variable cannot be retrieved...\r\nInvalidOperation: A Using variable cannot be retrieved...\r\n```\r\n\r\nvs. _indirect_ property access (`$using:` reference again evaluates to `$null`):\r\n\r\n```powershell\r\nPS> Write-Output a, ab, abc -PipelineVariable word | ForEach-Object -Parallel { $w = $using:word; $w.Length }\r\n0\r\n0\r\n0\r\n```\r\n\r\nIt would help if an attempt to reference a pipeline variable _consistently_ resulted in a (meaningful) error.",
      "created_at": "2021-03-25T19:59:35Z",
      "updated_at": "2021-03-25T22:36:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-06-03T00:00:06Z",
      "updated_at": "2021-06-03T00:00:06Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Actually, @mklement0 has identified a new bug.  The steps shown above should result in an error message.  We should understand why it doesn't.  However, this feels low impact.",
      "created_at": "2021-06-03T15:18:36Z",
      "updated_at": "2021-06-03T15:18:36Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I looked into this some more and this is not a problem specific to ForEach-Object -Parallel, but is a general $using: variable issue, as I can repro it with Start-Job as well.  The utility method to retrieve the pipeline variable 'word' does not retrieve the value correctly.\r\n\r\nSo this is a general '$using:' variable problem.",
      "created_at": "2021-06-03T17:15:42Z",
      "updated_at": "2021-06-03T17:15:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Pipeline variables are an oddity. I'm not sure at what scope they're actually present. Naturally they're present for the lifetime of the pipeline, but are they present as part of that pipeline's parent scope? Or is a new child scope created for pipeline variables?",
      "created_at": "2021-06-03T17:18:30Z",
      "updated_at": "2021-06-03T17:18:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Don't know, but good questions.  The 'word' pipeline variable exists in scope but doesn't have any special designation that I could see, and has a value of 'null'.  This is outside my area of knowledge.  @daxian-dbw may be able to help.",
      "created_at": "2021-06-03T17:24:45Z",
      "updated_at": "2021-06-03T17:24:45Z"
    }
  ],
  "created_at": "2021-03-25T12:21:18Z",
  "labels": [
    "Issue-Bug",
    "Issue-Enhancement",
    "Up-for-Grabs",
    "WG-Cmdlets-Core"
  ],
  "number": 15102,
  "state": "open",
  "title": "PipelineVariable not available when using Foreach-Object -Parallel",
  "updated_at": "2021-06-03T17:24:45Z"
}