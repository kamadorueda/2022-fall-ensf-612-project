{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4062",
  "author": "SteveL-MSFT",
  "body": "With the change to CoreCLR 2.0 which conforms with .Net Std 2.0 as well as the update to enable searching the GAC for assemblies, we need validation that PSCore6 is a viable replacement for Windows PowerShell 5.x.  Please list modules you've tried that do not work here.  Vote with \ud83d\udc4d for which modules you most care about to help us prioritize how we work with partners to enable support or have them port to target .Net Std 2.0.\r\n\r\nUntil https://github.com/PowerShell/PowerShell/issues/4056 gets resolved, you'll need to manually add Windows PowerShell PSModulePath to discover those modules:\r\n\r\n```powershell\r\nPS > $env:psmodulepath += \";${env:userprofile}\\Documents\\WindowsPowerShell\\Modules;${env:programfiles}\\WindowsPowerShell\\Modules;${env:windir}\\system32\\WindowsPowerShell\\v1.0\\Modules\\\"\r\n```\r\n\r\nPSSnapins:\r\n- ActiveDirectory\r\n\r\nFailing due to Add-Type\r\n- RemoteDesktop\r\n\r\nBasic tests work:\r\n- Hyper-V\r\n- SecureBoot\r\n\r\nNeeds to be ported:\r\n- ODataUtils\r\n\r\nNot sure:\r\n- WindowsUpdate (I'm getting error about symsrv.dll also in Windows PowerShell)",
  "closed_at": "2018-01-31T05:36:04Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Workflow is not something we're planning on supporting.  Instead we're committed to improving the concurrency/parallel execution experience in PowerShell script which we believe is the primary reason people used Workflows.  If there's other reasons, let me know.\r\n\r\nConvertFrom-String relies on technology from Microsoft Research that currently isn't planned to be Open Source.\r\n\r\nI appreciate the feedback, though.",
      "created_at": "2017-06-21T05:08:35Z",
      "updated_at": "2017-06-21T05:08:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Workflow and ConvertFrom-String are independent with different reasons why they are not in plan to be in PSCore6.  I would agree that ConvertFrom-String would work great against existing text based native utils on Linux.  Perhaps we can create a new cmdlet with similar, but simpler capability as ConvertFrom-String.",
      "created_at": "2017-06-21T05:58:05Z",
      "updated_at": "2017-06-21T05:59:57Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "ConvertFrom-string, or similar functionality, would be extremely useful",
      "created_at": "2017-06-21T14:48:32Z",
      "updated_at": "2017-06-21T14:48:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I checked the Windows PowerShell module load on Windows 10 ver 16215 with RSAT installed.\r\nScript and results (including errors) in attached file. \r\n[4062a.txt](https://github.com/PowerShell/PowerShell/files/1092083/4062a.txt)\r\n[4062b.txt](https://github.com/PowerShell/PowerShell/files/1092110/4062b.txt) - full list modules from PowerShell Core.\r\n\r\nIn short. \r\nTotal Core modules = 12.\r\nTotal Windows and Core modules = 120. \r\nTotal Windows modules = 108.  ( In Windows Powershell Get-Module -ListAvailable).count = 109 )\r\nAfter PowerShell Core start - 3 modules is loaded. \r\nAfter attempting to load all modules - 71 modules is loaded.\r\n\r\nSo **59** from **108** Windows modules is loaded.\r\n$error.count = 79\r\n",
      "created_at": "2017-06-21T15:49:54Z",
      "updated_at": "2017-06-21T15:59:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov thanks for getting those results.  \r\n- The CDXML based cmdlet failures will be addressed once we move to newer dotnet core that has this [fix](https://github.com/dotnet/corefx/issues/18877).  \r\n- A majority of the errors are due to conflicting aliases for DSC.  \r\n- RemoteDesktop module is calling Add-Type which fails and we should investigate that\r\n- Workflow one is expected not to work\r\n- ISE one is expected not to work\r\n- ODataUtils is one my team owns that needs to be ported cc @anmenaga \r\n\r\ncc @PowerShell/powershell-committee ",
      "created_at": "2017-06-21T16:00:26Z",
      "updated_at": "2017-06-21T16:00:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Oh, ActiveDirectory module is PSSnapIn \ud83d\ude15 The main consumers of PowerShell Core (system administrators) are thrown overboard!",
      "created_at": "2017-06-22T04:12:51Z",
      "updated_at": "2017-06-22T04:12:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We'll have to talk to that team about rewriting their cmdlet...",
      "created_at": "2017-06-22T04:59:49Z",
      "updated_at": "2017-06-22T04:59:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Exchange Server 2013 EMS crushed PowerShell Core. Also it can not find Exchange assemblies.",
      "created_at": "2017-06-22T06:25:52Z",
      "updated_at": "2017-06-22T06:27:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "SCCM 2012 R2 module is not loaded - broken .Net dependences and not found assemblies in local (SCCM home) folder.",
      "created_at": "2017-06-22T06:37:59Z",
      "updated_at": "2017-06-22T06:37:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sharepoint 2013 module is PSSnapIn.",
      "created_at": "2017-06-22T06:42:05Z",
      "updated_at": "2017-06-22T06:42:05Z"
    },
    {
      "author": "40a",
      "author_association": "NONE",
      "body": "On MacOS and Linux:\r\n\r\n`Install-Module Docker -Scope CurrentUser -Repository DockerPS-Dev`\r\n\r\n`Get-Container`\r\n\r\nCould not load file or assembly 'Docker.DotNet, Version=2.124.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\r\nAt line:1 char:1\r\n+ Get-Container\r\n+ ~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [], FileNotFoundException\r\n    + FullyQualifiedErrorId : System.IO.FileNotFoundException",
      "created_at": "2017-06-27T09:17:05Z",
      "updated_at": "2017-06-27T09:18:35Z"
    },
    {
      "author": "JakeMoe",
      "author_association": "NONE",
      "body": "So do I correctly infer from comments above that ActiveDirectory isn't working because it's a PSSnapIn, not a Module, and this version doesn't support snapins?\r\n\r\nAlso, while I could Import-Module -Name MSOnline, when I tried Connect-MsolService, I got a \"Could not load type 'System.Drawing.Drawing2D.InterpolationMode' from assembly 'System.Drawing', then powershell.exe crashed.",
      "created_at": "2017-07-17T03:48:53Z",
      "updated_at": "2017-07-17T03:48:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JakeMoe Yes, PSSnapIn is deprecated in PowerShell Core.\r\n\r\n`System.Drawing` is not in CoreFS and .Net Standard 2.0.",
      "created_at": "2017-07-17T06:55:54Z",
      "updated_at": "2017-07-17T06:55:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov could you try those three (Exchange, SharePoint, and SCCM) again with beta.4? Thanks!\r\n\r\nAnd thanks to everyone else, keep 'em coming! ",
      "created_at": "2017-07-17T17:32:24Z",
      "updated_at": "2017-07-17T17:32:24Z"
    },
    {
      "author": "Rick-2CA",
      "author_association": "NONE",
      "body": "PS C:\\Program Files\\PowerShell\\6.0.0-beta.4> Import-Module MSOnline\r\nImport-Module : Could not load type 'System.Diagnostics.EventLogEntryType' from assembly 'System, Version=4.0.0.0,\r\nCulture=neutral, PublicKeyToken=b77a5c561934e089'.",
      "created_at": "2017-07-17T19:35:36Z",
      "updated_at": "2017-07-17T19:35:36Z"
    },
    {
      "author": "Rick-2CA",
      "author_association": "NONE",
      "body": "```\r\nPS > Start-Process powershell -Credential (Get-Credential)\r\n\r\nWindows PowerShell credential request\r\nEnter your credentials.\r\nUser: domain\\username\r\nPassword for user domain\\username: **************\r\n\r\nStart-Process : Unable to load DLL 'api-ms-win-security-cpwl-l1-1-0.dll': The specified module could not be found.\r\n(Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:1\r\n+ Start-Process powershell -Credential (Get-Credential)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Start-Process], DllNotFoundException\r\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.StartProcessCommand\r\n```",
      "created_at": "2017-07-17T19:42:04Z",
      "updated_at": "2017-07-20T16:10:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello \r\n\r\n- Exchange - loaded, simple cmdlets works\r\n- Sharepoint - loaded, simple cmdlets works\r\n- SCCM - NullReferenceException and crash:\r\n```\r\nat System.Management.MTAHelper.IsNoContextMTA()\r\nat System.Management.MTAHelper.CreateInMTA(Type type)\r\n...\r\n```\r\n- Skype Server 2015 - Could not load type 'System.Management.Automation.PSSnapIn'.\r\n",
      "created_at": "2017-07-18T04:50:35Z",
      "updated_at": "2017-07-18T05:39:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I again checked the Windows PowerShell module load on Windows 10 ver **162241** with RSAT installed.\r\n Script and results (including errors) in attached file.\r\n\r\n[4062Beta4fulllist.txt](https://github.com/PowerShell/PowerShell/files/1154811/4062Beta4fulllist.txt)\r\n[4062Beta4ipmoall.txt](https://github.com/PowerShell/PowerShell/files/1154812/4062Beta4ipmoall.txt) - full list modules from PowerShell Core.\r\n\r\nIn short.\r\n Total Core modules = 12.\r\n Total Windows and Core modules = 125.\r\n Total Windows modules = 113. \r\n After PowerShell Core start - 2 modules is loaded.\r\n After attempting to load all modules - 108 modules is loaded.\r\n\r\nSo **96** from **113** Windows modules is loaded.\r\n $error.count = 47\r\n",
      "created_at": "2017-07-18T06:04:25Z",
      "updated_at": "2017-07-18T06:04:25Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "checked one of my custom scripts with Beta 4 but it aborts with error:\r\ncatch:function: Process: Error:Exception calling \".ctor\" with \"0\" argument(s): \"**Could not load type 'System.Diagnostics.PerformanceCounter**' from assembly 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\"\r\n\r\nopened #4295\r\n\r\n----------------------------------\r\nEdited by @daxian-dbw:\r\nThe root cause is that `System.Diagnostics.PerformanceCounter` is currently not available in `.NET Core`. dotnet/corefx#3906 is tracking the `PerformanceCounter` support in `.NET Core` but it's marked with the 'Future' milestone which means it won't be available in `.NET Core 2.0`.\r\nPlease see #4295 for more information.",
      "created_at": "2017-07-19T14:56:40Z",
      "updated_at": "2017-07-21T00:34:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mi-hol  Please open new Issue-Question.",
      "created_at": "2017-07-19T15:06:37Z",
      "updated_at": "2017-07-19T15:06:37Z"
    },
    {
      "author": "fdncred",
      "author_association": "NONE",
      "body": "Can't get Get-WUList to work in 6.0 core beta-4 from PSWindowsUpdate version [1.6.0.3](https://www.powershellgallery.com/packages/PSWindowsUpdate/1.6.0.3). It works fine on Windows 10 Desktop PowerShell.\r\n\r\nOutput:\r\n```\r\nGet-WUList -MicrosoftUpdate\r\nTest-Connection : The client cannot connect to the destination specified in the request. Verify\r\nthat the service on the destination is running and is accepting requests. Consult the logs and\r\ndocumentation for the WS-Management service running on the destination, most commonly IIS or\r\nWinRM. If the destination is the WinRM service, run the following command on the destination to\r\nanalyze and configure the WinRM service: \"winrm quickconfig\".\r\nAt C:\\Program Files\\WindowsPowerShell\\Modules\\PSWindowsUpdate\\1.6.0.3\\Get-WUList.ps1:274 char:7\r\n+             If(Test-Connection -ComputerName $Computer -Quiet)\r\n+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [Test-Connection], CimException\r\n    + FullyQualifiedErrorId : TestConnectionException,Microsoft.PowerShell.Commands.TestConnection\r\n   Command\r\n```\r\n```\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.4\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2017-07-20T15:42:25Z",
      "updated_at": "2017-07-20T15:42:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@fdncred Thanks for your report!\r\nI tested PSWindowsUpdate. \r\n- You have a problem with Test-Connection and WS-Management. Please don't  discuss this in the topic - open new Issue-Question if you need help.\r\n- We can not still use PSWindowsUpdate because #3775 .",
      "created_at": "2017-07-21T09:23:58Z",
      "updated_at": "2017-08-03T07:34:21Z"
    },
    {
      "author": "mwrock",
      "author_association": "CONTRIBUTOR",
      "body": "Both WebAdministration and IISAdministration do not run in PS Core because they expect GAC'd assemblies to be available. Using DSC is likely a better alternative but applying configuration in core is awkward due to the lack of `Invoke-DSCResource` and `Start-DSCConfiguration`. see #4457. ",
      "created_at": "2017-08-02T17:29:07Z",
      "updated_at": "2017-08-02T17:29:07Z"
    },
    {
      "author": "Arjun4545",
      "author_association": "NONE",
      "body": "Any update on issue,  **Cant't import MsOnline module on Linux based OS**. #4269",
      "created_at": "2017-08-21T08:53:58Z",
      "updated_at": "2017-08-21T09:01:20Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "Invoke-MySqlQuery from the PowerShell Gallery doesn't work.  I get an error when I try to use it on Beta 5 on Windows 10.  My understanding of the .Net Standard was that there is a chance that this should work on Windows (not on Linux/Mac of course).  The assembly does get loaded, just get's an error on one of the most common method in it.\r\n[https://www.powershellgallery.com/packages/Invoke-MySqlQuery/1.0.0/DisplayScript](url)\r\n```\r\nInstall-Script -Name Invoke-MySqlQuery\r\n\r\n. Invoke-MySqlQuery.ps1\r\n$MyCred = Get-Credential\r\nInvoke-MySQLQuery -ComputerName MyServer -Database mysql -Query \"select @@hostname\" -Credential $MyCred\r\n\r\n\r\nException calling \"Open\" with \"0\" argument(s): \"The type initializer for 'MySql.Data.MySqlClient.Replication.ReplicationManager' threw an exception.\"\r\n```\r\nI also have an internal module that has the same issue on Conn.Open().  We use the internal module to connect to 100s of MySql servers and to AWS Aurora as well.  \r\n\r\nThis happens with both Connector/Net 6.9.9 and Connector/Net 8.0.8 (installed on different computers).  It works in previous versions of PowerShell without any issues.",
      "created_at": "2017-08-21T23:46:59Z",
      "updated_at": "2017-08-21T23:46:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@FireInWinter Thanks for your report! Please open new Issue with steps to reproduce the problem.",
      "created_at": "2017-08-22T04:27:39Z",
      "updated_at": "2017-08-22T04:27:39Z"
    },
    {
      "author": "agressiv",
      "author_association": "NONE",
      "body": "We need to be able present forms.  Ideally, via System.Drawing, but if need be, I could convert some to XAML.  However, neither work, so is anything graphical with Powershell dead?  We'll never cut over to PowershellCore if we can't use some sort of form.  And no, we're not going to use C# :P\r\n\r\nAlso, is it safe to say Get-WmiObject is dead?  I wish the syntax between Get-WmiObject and Get-CimInstance was identical, but they aren't, so you are forced to code twice if you still have any PS 2.0 out there.",
      "created_at": "2017-08-24T22:10:18Z",
      "updated_at": "2017-08-24T22:10:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@agressiv we have some investigations going on for https://github.com/PowerShell/PowerShell/issues/3957 to enable GUIs\r\n\r\n`Get-WmiObject` is considered deprecated.  @joeyaiello just posted a blog about us formally [deprecating PSv2](https://blogs.msdn.microsoft.com/powershell/2017/08/24/windows-powershell-2-0-deprecation/).  We have been recommending for some time to switch to the CIM cmdlets instead of using the WMI cmdlets which can interop with non-Windows implementations of CIM over WSMan (OpenPegasus, OMI, Dell iDrac, HP iLO, etc...).",
      "created_at": "2017-08-24T23:42:56Z",
      "updated_at": "2017-08-24T23:42:56Z"
    },
    {
      "author": "agressiv",
      "author_association": "NONE",
      "body": "We still have machines on 2.0 because Microsoft was slow in supporting WMF 4.0 on many core products, and our migration is over.   We'll have to make another pass to see who is left since we are now being asked to deploy 5.1 (which of course, isn't compatible with just about everything including Skype and Exchange Servers)\r\n\r\nIs there a list of Cmdlets like Get-WmiObject which will be removed that we can refer to?\r\n\r\nWhat is the target platform for WinPE?  Will it move to core as well?  We use Windows Forms there as well.",
      "created_at": "2017-08-25T00:13:06Z",
      "updated_at": "2017-08-25T00:13:06Z"
    },
    {
      "author": "agressiv",
      "author_association": "NONE",
      "body": "I did a dump of all cmdlets in the 6.0 beta and simply did a compare-object. here's the ones for us:\r\n\r\n- All EventLog cmdlets.  We use these extensively.\r\n- Test-ComputerSecureChannel.\r\n- Add-PSSnapin.  I'd love to not use this, but apparently lots of modules have lazy authors.  (e.g. Vmware, WSUS, MDT, Citrix, SCOM, Dell).  Perhaps there are other ways of loading some of these modules, but these OEMS are the ones actually using Add-PSSnapin in their code - so either we're modifying their code, hoping that it works, or they finally change it.  Of course, they shouldn't have used Add-PSSnapin for like 8 years now, but some things never change.",
      "created_at": "2017-08-25T00:58:04Z",
      "updated_at": "2017-08-25T00:58:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@agressiv VMware PowerCLI is now a module that can be installed from the PowerShell Gallery, and I'm almost certain they're supporting PowerShell Core with it already (I'd need to double-check that though). There are other PSSnapin stragglers out there though, as you point out.",
      "created_at": "2017-08-25T01:21:37Z",
      "updated_at": "2017-08-25T01:21:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@agressiv for PSCore6, we deliberately removed support for PSSnapins.  However, VMWare has a port of [PowerCLI for PSCore6](https://labs.vmware.com/flings/powercli-core) that is not currently on PSGallery",
      "created_at": "2017-08-25T01:36:30Z",
      "updated_at": "2017-08-25T01:36:30Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@aggresiv: On the UI front, we're definitely not abandoning GUI efforts altogether, we're just not sure exactly where we're headed yet. If you pop on over to https://github.com/PowerShell/Phosphor, you can check out an experiment we're running to try and generate web-based UIs (which avoid a lot of the problems around disparate \"native\" UI frameworks, though if someone wants to make some Qt bindings for PowerShell, that'd also make me very happy). \r\n\r\nAs for `Get-WmiObject`: you're right, we don't have any plans to bring it back. In my opinion, `Get-CimInstance` immensely improved on the syntax as `Get-WmiObject` (part of the reason it was made in the first place), and while I understand the pain of double-coding, we also [just deprecated Windows PowerShell 2.0](https://blogs.msdn.microsoft.com/powershell/2017/08/24/windows-powershell-2-0-deprecation/), so we're not going to be optimizing for back compat to 2.0 going forward. :\\ ",
      "created_at": "2017-08-25T18:42:54Z",
      "updated_at": "2017-08-25T18:42:54Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "My use cases:\r\n\r\n- Import Active Directory PowerShell module.\r\n- Import Azure Active Directory PowerShell module.\r\n- Establish remote PowerShell session to Exchange 2010 - 2016 server and import the session.\r\n- Establish remote PowerShell session to Exchange Online and import the session.\r\n- Establish remote PowerShell session to Lync/Skype server and import the session,\r\n\r\nIf you can make all of those and their cmdlets work under Windows, Linux and MacOS, you will be heralded as heroes. \r\n\r\nI imagine the AD module being the toughest, as it is currently part of RSAT and a snap-in, as explained in earlier comments. But hey, the AD team's gotta get on with the times!\r\n\r\nIf all else fails, then remote PowerShell session to a domain controller or another Windows computer that has these modules and then import the session.",
      "created_at": "2017-09-17T18:16:49Z",
      "updated_at": "2017-09-17T18:18:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KeeperB5 implicit remoting by importing a PSSession should just work with PSCore6 (Windows anyways, haven't tried with Linux/MacOS, but should work)",
      "created_at": "2017-09-17T18:54:54Z",
      "updated_at": "2017-09-17T18:54:54Z"
    },
    {
      "author": "janegilring",
      "author_association": "NONE",
      "body": "Import-Module AzureAD\r\nConnect-AzureAD\r\n\r\nUnhandled Exception: System.TypeLoadException: Could not load type 'System.Drawing.Icon' from assembly 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at System.Windows.Forms.Form.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Finalize()\r\nconnect-azuread : One or more errors occurred. (Could not load type 'System.Drawing.Drawing2D.InterpolationMode' from assembly 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.): Could not load type 'S\r\nystem.Drawing.Drawing2D.InterpolationMode' from assembly 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\nAt line:1 char:1\r\nconnect-azuread\r\n     CategoryInfo          : AuthenticationError: (:) [Connect-AzureAD], AadAuthenticationFailedException\r\n     FullyQualifiedErrorId : Connect-AzureAD,Microsoft.Open.Azure.AD.CommonLibrary.ConnectAzureAD\r\n\r\nAlso, the whole application crashes with the message \"powershell.exe has stopped working\"",
      "created_at": "2017-10-06T18:50:33Z",
      "updated_at": "2017-10-06T18:51:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Moving this out of 6.0.0 milestone as there's no planned additional work for 6.0.0",
      "created_at": "2017-11-01T20:25:18Z",
      "updated_at": "2017-11-01T20:25:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you clarify if it possible - what is MSFT plan/timeline to adopt modules of their  products for PowerShell Core 6.0?",
      "created_at": "2017-11-02T03:42:28Z",
      "updated_at": "2017-11-02T03:42:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Many product teams won\u2019t start any validation work until we get to a 6.0.0 final release, so focus is to get that done and engage with the product teams to start validation.  This won\u2019t happen quickly unfortunately so there\u2019s no timeline I can provide at this time.",
      "created_at": "2017-11-02T05:03:38Z",
      "updated_at": "2017-11-02T05:03:38Z"
    },
    {
      "author": "j3vans",
      "author_association": "NONE",
      "body": "Based on [this issue](https://github.com/dotnet/corefx/issues/24843), is there a plan to port the Active Directory/Exchange modules to PowerShell v6? Will the tools be Windows only (since System.DirectoryServices.Protocols currently runs only on windows)?\r\n",
      "created_at": "2017-12-04T17:44:11Z",
      "updated_at": "2017-12-04T17:55:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@j3vans CoreFX has still very limited API and I don't expect that MSFT teams can port these modules. We can use Windows modules via remoting.",
      "created_at": "2017-12-06T06:34:52Z",
      "updated_at": "2017-12-06T06:34:52Z"
    },
    {
      "author": "garygpope",
      "author_association": "NONE",
      "body": "Install-Module SqlServer doesn't install on Mac. \r\n\r\n```Steps to Reproduce: \r\nInstall-Module SqlServer\r\n```\r\n\r\nErrors out with: \r\nPackageManagement\\Install-Package : Unable to load DLL 'api-ms-win-core-sysinfo-l1-1-0.dll': The specified module or one of its dependencies could not be found.                (Exception from HRESULT: 0x8007007E)                                                                                                                                          At /usr/local/microsoft/powershell/6.0.0-rc.2/Modules/PowerShellGet/1.6.0/PSModule.psm1:2057 char:21                                                                           + ...          $null = PackageManagement\\Install-Package @PSBoundParameters                                                                                                    +                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n+ FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.TestModuleManifestCommand,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc.2\r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Wed Oct  4 00:17:00 PDT 2017; root:xnu-3789.71.6~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2018-01-09T09:46:46Z",
      "updated_at": "2018-01-09T09:46:46Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "About \"Install-Module SQLServer\" - This module is meant for Windows system only.  There are no Linux/Mac SQLPS nor SQLServer modules (yet).\r\n\r\nNow, if you want try building your own SQL Server PowerShell commands on non-Windows systems, You can install the \"Microsoft.SqlServer.SqlManagementObjects\" which will run in Linux.\r\n\r\nSee my blog post for more information: http://www.maxtblog.com/2017/11/streamlining-sql-server-management-objects-smo-in-powershell-core/ \r\n\r\n",
      "created_at": "2018-01-09T16:21:37Z",
      "updated_at": "2018-01-09T16:21:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "this issue will be addressed by https://github.com/PowerShell/WindowsPowerShellCompatibilityPack please open issues for specific modules there",
      "created_at": "2018-01-31T05:36:04Z",
      "updated_at": "2018-01-31T05:36:04Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "Is there any work in progress to have a functional Active Directory module for PS 6?",
      "created_at": "2018-02-28T12:57:26Z",
      "updated_at": "2018-02-28T12:57:26Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hi @apetitjean,\r\n\r\nYou may want to post the question at @SteveL-MSFT link above.  This way it can be tracked properly.\r\n:)\r\n\r\nSee you at the MVP Summit!",
      "created_at": "2018-02-28T15:37:19Z",
      "updated_at": "2018-02-28T15:37:19Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "Thank you @MaximoTrinidad. Posting here was exactly my intention. I hope @SteveL-MSFT will see my question here. \r\n\r\nIndeed see you soon! :)",
      "created_at": "2018-02-28T16:19:31Z",
      "updated_at": "2018-02-28T16:19:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@apetitjean the plan is to be able to support Active Directory module via the Windows PowerShell Compatibility Pack.  Most likely we'll use implicit remoting and perhaps with JEA.",
      "created_at": "2018-02-28T22:39:45Z",
      "updated_at": "2018-02-28T22:39:45Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Windows PowerShell Compatibility Pack will be windows only, correct? I don't think it is acceptable for an Active Directory module to work only on Windows. If the plan is to temporarily support support AD only on Windows until the required .NET Core APIs are made x-plat, than I'm ok with that. But, AD is used for more than just Windows environments and the ability to build automation in Linux (and macOS) using PowerShell should not require direct .NET manipulation or calling out to other shell/scripting languages which can support AD on Linux.",
      "created_at": "2018-03-01T09:53:25Z",
      "updated_at": "2018-03-01T09:53:38Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "From my understanding the Active Directory module is not in the PowerShell\r\nTeam's plate and it should be completely rewritten to work with PowerShell\r\nCore.\r\nI think what Steve is talking about is a workaround that should work until\r\nthe next AD module release.",
      "created_at": "2018-03-01T12:45:19Z",
      "updated_at": "2018-03-01T12:47:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "The current AD module has PSSnapin requirements which wont work in PS Core anyway, unless we are adding some PSSnapin shim in the Windows PowerShell Compatibility Pack I am not aware of... the only way for an AD module would be a re-write. This is why I'm disturbed @SteveL-MSFT saying AD module (even though it is the OS team's responsibility, and not the PowerShell Team) would be supported by Windows PowerShell Compatibility Pack. There was already a critical need for refactoring the module for core, and if its future is in the Windows PowerShell Compatibility Pack, then that is the wrong direction.",
      "created_at": "2018-03-01T16:21:45Z",
      "updated_at": "2018-03-01T16:22:04Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I'm with @markekraus opinion.  I really not in favor of using Windows PowerShell Compatibility Pack and I think \"... it should keep them separated!!\". \r\n\r\nBut that's my take!\r\n:)",
      "created_at": "2018-03-01T17:33:15Z",
      "updated_at": "2018-03-01T17:33:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My understanding of Windows PowerShell Compatibility Pack was that it contains all that never will be ported.",
      "created_at": "2018-03-01T17:38:56Z",
      "updated_at": "2018-03-01T17:38:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The intent of the Windows PowerShell Compatibility Pack is to *temporarily* help existing Windows PowerShell users move to PSCore6.  The long term plan is to have modules natively run on PSCore6 as well as be cross platform.  Some teams may decide they will never port to PSCore6 or they will, but not invest in making it cross platform compatible.  The biggest influencer to help them make the _right_ decision is customer feedback (not the PowerShell Team where we represent the customer).  ",
      "created_at": "2018-03-01T19:33:21Z",
      "updated_at": "2018-03-01T19:33:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Understood. and for anyone who feels the way I do:\r\n\r\nhttps://windowsserver.uservoice.com/forums/304621-active-directory/suggestions/33496864-port-active-directory-module-to-powershell-core-an\r\n\r\nand\r\n\r\nhttps://windowsserver.uservoice.com/forums/304621-active-directory/suggestions/13350033-open-source-the-activedirectory-powershell-module",
      "created_at": "2018-03-01T19:59:29Z",
      "updated_at": "2018-03-01T19:59:29Z"
    },
    {
      "author": "dudeNumber4",
      "author_association": "NONE",
      "body": "If I have scripts that have dependencies on .Net framework dlls, I should look for a .Net core version of those dependencies via nuget and then try to port the script to PS6?  There is no \"wrapper\" for these dependencies, correct?",
      "created_at": "2019-01-22T22:29:12Z",
      "updated_at": "2019-01-22T22:29:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dudeNumber4 it depends.  If it's an assembly PSCore6 already includes (and we include a lot), then you shouldn't need to make any change unless you refer to a specific dll via path.  For example, if you were dependent on System.DirectoryServices.AccountManagement.dll previously using Add-Type to load, if you didn't specify a path, it should just work.",
      "created_at": "2019-01-22T22:34:31Z",
      "updated_at": "2019-01-22T22:34:31Z"
    },
    {
      "author": "dudeNumber4",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @dudeNumber4 it depends. If it's an assembly PSCore6 already includes (and we include a lot), then you shouldn't need to make any change unless you refer to a specific dll via path. For example, if you were dependent on System.DirectoryServices.AccountManagement.dll previously using Add-Type to load, if you didn't specify a path, it should just work.\r\n\r\nOK, just attempted `New-Object System.Data.OleDb.OleDbConnection`.  _Cannot find type_.  On nuget, I see some kind of port that claims support for .Net Standard 2.0.  To port the script I'd have to add a nuget restore of that library, correct?",
      "created_at": "2019-01-23T06:13:33Z",
      "updated_at": "2019-01-23T06:13:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dudeNumber4 we don't include that assembly as part of PSCore6 itself, so to use it, you should be able to use `Install-Package` to download that nupkg at runtime, or do it manually and just include that assembly with your script.",
      "created_at": "2019-01-23T17:51:27Z",
      "updated_at": "2019-01-23T17:51:27Z"
    },
    {
      "author": "IanKemp",
      "author_association": "NONE",
      "body": "WebAdministration - is xWebAdministration the replacement, or will WebAdministration be ported?",
      "created_at": "2019-02-01T09:47:19Z",
      "updated_at": "2019-02-01T09:47:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@IanKemp that module is owned by the IIS team so I don't know their plans.  However, last time my team looked at that module some of the necessary .Net Framework namespaces were not available in .Net Core, so until that happens it wouldn't work unless they rewrite it",
      "created_at": "2019-02-01T21:24:53Z",
      "updated_at": "2019-02-01T21:24:53Z"
    }
  ],
  "created_at": "2017-06-20T23:03:53Z",
  "number": 4062,
  "state": "closed",
  "title": "FullCLR modules not compatible with PSCore6",
  "updated_at": "2019-02-01T21:24:53Z"
}