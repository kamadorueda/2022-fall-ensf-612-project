{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14989",
  "author": "p0W3RH311",
  "body": "hi guys !!\r\n\r\nhere an example\r\n```\r\n\r\nPS C:\\> get-random -generator char -count 5\r\na\r\nB\r\nZ\r\ni\r\nm\r\n\r\nPS C:\\> get-random -generator int -count 5\r\n5\r\n120\r\n3\r\n7898\r\n9\r\n\r\nPS C:\\> get-random -generator float -count 5\r\n1.232\r\n9.21\r\n1.32\r\n4.3\r\n5.4\r\n\r\nPS C:\\> get-random -generator chars -count 5 -length 3\r\nfoo\r\nprt\r\nvgt\r\ncAl\r\nNoi\r\n```\r\n",
  "closed_at": "2021-03-18T01:00:04Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just so we get a sense of what we would gain, let's look at how the same results can be achieved with the current features:\r\n\r\n```powershell\r\n# (Near-)equivalent of:\r\n#    get-random -generator char -count 5\r\nget-random ('a'..'z') -count 5\r\n\r\n# (Near-)equivalent of:\r\n#    get-random -generator int -count 5\r\nget-random -count 5 -Maximum 1000.0  # [int] is default, in the range 0..([int]::MaxValue-1)\r\n\r\n# (Near-)equivalent of:\r\n#    get-random -generator float -count 5\r\nget-random -Minimum 0.0  -Maximum 1000 -count 5  \r\n```\r\n\r\nNote that it usually makes sense to limit the range of values, as shown above, which requires explicit `-Minimum` and/or `-Maximum` arguments anyway, and you can use the _type_ of these arguments to imply the output type.\r\n\r\nUnfortunately, however, that works for `[int]`, `[double]` and `[long]` only; for others, such as `[byte]` or `[decimal]`, the fallback is `[double]` - see #3598; it was decided not to fix that, however, and the behavior is now documented in the [`Get-Random` help topic](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-random#notes).\r\n\r\nOnly your last example, `get-random -generator chars -count 5 -length 3`,  currently requires nontrivial extra work:\r\n\r\n```powershell\r\n(1..5).ForEach({ -join ('a'..'z')[(Get-Random -Maximum 25 -Count 3)] })\r\n```\r\n\r\nHowever, I wonder whether a syntax like `Get-Random -StringOfLength 3 -Count 5` would be sufficient.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-03-15T16:16:23Z",
      "updated_at": "2021-03-15T16:16:23Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Given that most of these can be achieved with existing syntax, and our push to drive new cmdlet functionality via Gallery/community modules, I'd encourage any experimentation for additional `Get-Random` helpers to be done in some sort of community-driven `Get-Random2`",
      "created_at": "2021-03-17T00:19:30Z",
      "updated_at": "2021-03-17T00:19:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2021-03-18T01:00:03Z",
      "updated_at": "2021-03-18T01:00:03Z"
    }
  ],
  "created_at": "2021-03-10T21:51:50Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-External",
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 14989,
  "state": "closed",
  "title": "new parameter -Generator and -Length to Get-Random",
  "updated_at": "2021-03-18T01:00:04Z"
}