{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10722",
  "author": "rjmholt",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently there are ways to register a scriptblock as a completer with `Register-ArgumentCompleter`, and on cmdlets it's possible to use the `[ArgumentCompleter()]` attribute to specify an `IArgumentCompleter` for a parameter. But there's no way to specify a completer for an ordinary command that I know of that doesn't involve executing a scriptblock.\r\n\r\nBy this I mean, you can use `Register-ArgumentCompleter` or you can use override `TabCompletion2`, but I'd really like a nicer hook for:\r\n\r\n- General completions\r\n- Command completions\r\n- Native command completions, especially\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I'd love to see more ways of extending completion!  One of the biggest things that's always stopped me from working on anything to extend general completion is that it's all or nothing.  If you override `TabExpansion2`, then anyone else trying to do the same will completely override you.  I'd love to see something like an interface that can be registered in the engine to incrementally augment completion. Something like:\r\n\r\n```csharp\r\npublic interface ICompletionExtension\r\n{\r\n    IEnumerable<CompletionResult> CompleteComment(CompletionContext context);\r\n\r\n    IEnumerable<CompletionResult> CompleteMember(CompletionContext context);\r\n\r\n    IEnumerable<CompletionResult> CompleteCommandParameter(CompletionContext context);\r\n\r\n    IEnumerable<CompletionResult> CompleteCommandArgument(CompletionContext context);\r\n\r\n    // Other cherry picked methods from CompletionCompleters/CompletionAnalysis here.\r\n}\r\n\r\npublic class CompletionEngine\r\n{\r\n    public void RegisterCompletionExtension(ICompletionExtension extension);\r\n\r\n    public void UnregisterCompletionExtension(ICompletionExtension extension);\r\n\r\n    // Mirroring CommandCompletion.CompleteInput\r\n    public CommandCompletion CompleteInput(\r\n        Ast ast,\r\n        Token[] tokens,\r\n        IScriptPosition positionOfCursor,\r\n        Hashtable options);\r\n}\r\n\r\npublic partial class EngineIntrinsics\r\n{\r\n    public CompletionEngine Completion { get; }\r\n}\r\n```",
      "created_at": "2019-10-07T13:06:27Z",
      "updated_at": "2019-10-07T13:06:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I hope we combine this in one engine with #10741.",
      "created_at": "2019-10-09T10:12:00Z",
      "updated_at": "2019-10-09T10:12:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thinking more about the request I believe it is an edge case. Can you show other use cases (besides UnixCompleters)? \r\n\r\nIf we compare PowerShell and Bash design both do the some - register a script for completion of a command. So who else would need a rapper like UnixCompleters?",
      "created_at": "2020-07-29T16:52:46Z",
      "updated_at": "2020-07-29T16:52:46Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Wouldn't this feature apply to any completions that someone wants to implement in a binary (C#-based) module?",
      "created_at": "2020-08-01T20:37:20Z",
      "updated_at": "2020-08-01T20:37:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill I want to see examples. I only see UnixCompleters scenario and it is very specific, edge scenario. PowerShell already implement completions and API for customizations. We need to be sensitive to what exactly we need to add if necessary.\r\n ",
      "created_at": "2020-08-02T17:07:03Z",
      "updated_at": "2020-08-02T17:07:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov that's gonna be hard to show.  Any time I've had a similar idea I've thrown it away once I got to the \"oh I have to make 100 script block wrappers\" step because it felt real dirty.",
      "created_at": "2020-08-02T17:47:39Z",
      "updated_at": "2020-08-02T17:47:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also probably wouldn't be **too** hard to add.  Might be able to get away with switching the internal dictionary to store `Func<string, CommandAst, int, object>` and generating a thin wrapper delegate around registered script blocks.",
      "created_at": "2020-08-02T17:50:38Z",
      "updated_at": "2020-08-02T17:50:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "On the other hand, small and simple scripts can be more attractive (easy to write, easy to debug) than one huge script or code.\r\n",
      "created_at": "2020-08-02T18:44:14Z",
      "updated_at": "2020-08-02T18:44:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah for sure it can be.  Sometimes code is complicated though \ud83e\udd37",
      "created_at": "2020-08-02T19:41:41Z",
      "updated_at": "2020-08-02T19:41:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for confirmation my thoughts.\r\n\r\nI also feel that sometimes it is convenient for authors of binary modules to write a completer on C# than a script block.\r\nFor them, we could enhance the Register-ArgumentCompleter cmdlet and allow registering code that implements a new interface.\r\n",
      "created_at": "2020-08-03T03:27:48Z",
      "updated_at": "2020-08-03T03:27:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> enhance the Register-ArgumentCompleter cmdlet \r\n\r\nStill requires running a pipeline though. That's too slow for something executed in a profile or for many commands. We need a lightweight registration mechanism that doesn't require a runspace, the pipeline thread or parameter binding.",
      "created_at": "2020-08-03T15:19:49Z",
      "updated_at": "2020-08-03T15:19:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Still requires running a pipeline though.\r\n\r\nIf you agreed that the cmdlet could register a binary completer our next step would be to recognize the need to add new public API to do this.\r\n",
      "created_at": "2020-08-03T18:25:42Z",
      "updated_at": "2020-08-03T18:25:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> If you agreed that the cmdlet could register a binary completer \r\n\r\nOh, yes, absolutely; `Register-ArgumentCompleter` should support a parameter set that takes a completer object instead of a ScriptBlock",
      "created_at": "2020-08-03T21:35:56Z",
      "updated_at": "2020-08-03T21:35:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we could discuss follow signatures:\r\n```powershell\r\nRegister-ArgumentCompleter -Command <string[]>  -CompleterType [Custom type with ICommandCompleter]\r\nRegister-ArgumentCompleter -ParameterName <string> [-Command <string[]>]  -CompleterType [Custom type with ICommandCompleter]\r\n```\r\n\r\n```c#\r\npublic void RegisterArgumentCompleter(string commandName, ICommandCompleter completer);\r\npublic void RegisterArgumentCompleter(string[] commandName, ICommandCompleter completer);\r\npublic void RegisterArgumentCompleter(IEnumerable<string> commandName, ICommandCompleter completer);\r\n\r\npublic void RegisterArgumentCompleter(string? commandName, string parameterName, IArgumentCompleter completer);\r\npublic void RegisterArgumentCompleter((string? commandName, string parameterName) commandparameterPair, IArgumentCompleter completer);\r\npublic void RegisterArgumentCompleter(IEnumerable<string?, string> commandparameterPair, IArgumentCompleter completer);\r\n\r\n\r\n```",
      "created_at": "2020-08-04T16:17:04Z",
      "updated_at": "2020-08-04T16:17:04Z"
    }
  ],
  "created_at": "2019-10-06T23:18:55Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 10722,
  "state": "open",
  "title": "Add a .NET API to add native completers",
  "updated_at": "2020-08-04T16:17:04Z"
}