{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17826",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\r\n\r\nMaybe it even qualifies as a bug but it will likely require a break change to correct it and therefore unlikely being resolved as that.\r\nAs with this [Powershell script regex single and double quotes](https://stackoverflow.com/questions/73216245), I have seen similar questions before and dealt with this myself a few times.\r\n\r\nThe [`-Replace` operator](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators#replacement-with-regular-expressions) un-escapes the first parameter `<regular-expression>` but  doesn't do that the same way for the second `<substitute>` parameter:\r\n\r\n```PowerShell\r\n'Example: \u2192' -Replace '\\u2192', '\\u2190'\r\n```\r\n### Expected:\r\n```PowerShell\r\nExample: \u2190\r\n```\r\n### Actual:\r\n```PowerShell\r\nExample: \\u2190\r\n```\r\n\r\nYou might workaround this by use double quotes and (inconsistently) use the PowerShell escape syntax (e.g. using a backtick `` ` ``):\r\n\r\n```PowerShell\r\n'Example: \u2192' -Replace '\\u2192', \"`u{2190}\"\r\n```\r\n\r\nBut this will also automatically resolve the dynamic substitution (e.g. `$1` as implied by the warning in the [<strike>Regular</strike> expressions substitutions](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.2#regular-expressions-substitutions) description:\r\n\r\n### \u26a0\ufe0f Warning\r\n\r\nThe `$` character has syntactic roles in both PowerShell and regular expressions:\r\n\r\n> In PowerShell, between double quotation marks, it designates variables and acts as a subexpression operator.\r\n> In Regex search strings, it denotes end of the line.\r\n> In Regex substitution strings, it denotes captured groups. Be sure to either put your regular expressions between single quotation marks or insert a backtick (`` ` ``) character before them.\r\n\r\n```PowerShell\r\n'\u2192Example\u2190' -Replace '\\u2192(.+)\\u2190', '\\u2192 $1 \\u2190'\r\n```\r\n### Expected:\r\n```PowerShell\r\n\u2192 Example \u2190\r\n```\r\n### Actual:\r\n```PowerShell\r\n\\u2192 Example \\u2190\r\n```\r\nTo workaround this use double quotes and the *PowerShell* escape syntax which also requires to escape the dollar sign (`$`) in the substitution with a backtick (`` ` ``):\r\n```PowerShell\r\n'\u2192Example\u2190' -Replace '\\u2192(.+)\\u2190', \"`u{2192} `$1 `u{2190}'\r\n```\r\n\r\nWhich could also be worked around with a longer but more consistent syntax using the [`[Regex]::Unescape` method](https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.regex.unescape):\r\n```PowerShell\r\n'\u2192Example\u2190' -Replace '\\u2192(.+)\\u2190', [Regex]::Unescape('\\u2192 $1 \\u2190')\r\n```\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nLet the `-Replace` operator accept a `[Regex]` type as an actual *regular expression* for the `<Substitution>` and not bluntly convert it to a string.\r\n\r\nWishful thinking:\r\n```PowerShell\r\n'\u2192Example\u2190' -Replace '\\u2192(.+)\\u2190', [Regex]'\\u2192 $1 \\u2190'\r\n\u2192 Example \u2190\r\n```",
  "closed_at": "2022-08-04T06:25:38Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While it's understandable to want regex escape sequences such as `\\u2192` to work in the substitution string, it is important to note that substitution strings by design aren't and _shouldn't be_ regexes themselves, not least because most of the regex constructs would make no sense there.\r\n\r\n`[regex]::Unescape()` is _not_ a general solution, because it would result in interpreting `\\` instances as part of _any_ regex escape sequence, which either inappropriately modifies the string or breaks altogether; e.g.:\r\n\r\n```powershell\r\n[Regex]::Unescape('\\u2192 a\\b') # !! -> '\u2192 a', seemingly; technically, \\b became \"`b\", i.e. a backspace\r\n[Regex]::Unescape('\\u2192 a\\z') # !! -> exception: ... Unrecognized escape sequence \\\\z.\"\r\n```\r\n\r\nI don't think there's a good solution to this problem: users will have to understand the distinct concepts involved:\r\n* regexes passed as strings to the .NET regex engine\r\n* substitution strings that have a minimal grammar of _only_ recognizing `$`-prefixed tokens as capture-group references (and treating everything else, including `\\` verbatim), with `$$` required for escaping a verbatim `$`; that these tokens _look like_ PowerShell variable reference is unfortunate, but here to stay.\r\n* PowerShell string literals that require `\"...\"` for string interpolation, which requires escaping `$` chars. meant for the .NET regex engine to be escapes as `` `$ ``",
      "created_at": "2022-08-03T16:13:07Z",
      "updated_at": "2022-08-03T17:06:01Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0,\r\n \r\n> `[regex]::Unescape()` is _not_ a general solution\r\n\r\nYou're right, I needed some time think this through and see if there weren't some other escapes for this.\r\nBut I guess there is indeed no other solution to this problem and my purpose is indeed too simplistic.",
      "created_at": "2022-08-04T06:25:38Z",
      "updated_at": "2022-08-04T06:26:45Z"
    }
  ],
  "created_at": "2022-08-03T08:59:08Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 17826,
  "state": "closed",
  "title": "`-Replace` should (be able to easily) `[Regex]::Unescape` the `<substitute>`",
  "updated_at": "2022-08-04T06:26:45Z"
}