{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6205",
  "author": "Jaykul",
  "body": "# Exception Handling in PowerShell is the pits (part 2)\r\n### I am _re-filing_ this from Connect from as it appears to have gone missing again.\r\n\r\nRe-throwing exceptions with `throw` (rather than `throw $_`) changes how exception handling works -- apparently breaking our ability to catch the outer exception and still handle the inner exception _type_ if it's thrown unwrapped.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nGiven an example case where the .Net Framework or PowerShell throws an exception with an InnerException (the actual types aren't important, just the fact that they are nested).\r\n\r\n```powershell\r\nfunction Throw-InnerException {\r\n       $infe = [System.Management.Automation.ItemNotFoundException]::new(\"File Not Found\")\r\n       $pbe =  [System.Management.Automation.ParameterBindingException]::new( \"FileName\", $infe)\r\n       throw $pbe\r\n}\r\n```\r\n\r\nIf we write code that calls that function, and then rethrows any exceptions, we **do not expect** that to change the exception -- but it has the effect of changing how outer exception handling works.\r\n\r\n> Note that the community believes wrapping things in a try/catch+rethrow is, in general, a _good_ practice, since it ensures that you (and any code you're calling) don't inadvertently turn terminating exceptions into non-terminating ones.\r\n\r\nHere's a simple example:\r\n\r\n```powershell\r\nfunction Invoke-Correctly {\r\n    try {\r\n        <# Do something #>\r\n        # Call the cmdlet which might throw\r\n        Throw-InnerException\r\n        <# Do other things if it does not throw #>\r\n        # Catch and re-throw, so callers can handle any unhandled errors\r\n    } catch { throw }\r\n}\r\n```\r\n\r\nNow, when that function is called (and _if you try to handle both exception types_), the inner one is **incorrectly** caught, even if it's handler is defined last (this will **incorrectly** output `INFE`):\r\n\r\n```powershell\r\n$Error.Clear()\r\ntry {\r\n    Invoke-Correctly\r\n} catch [System.Management.Automation.ParameterBindingException] {\r\n    \"PBE\" \r\n} catch [System.Management.Automation.ItemNotFoundException] {\r\n    \"INFE\"\r\n}\r\n```\r\n\r\nOnly if you do **not** have a handler for the _inner exception_, can you catch the outer exception. This will **correctly** output `PBE` and `INNER: ItemNotFoundException`:\r\n\r\n```powershell\r\n$Error.Clear()\r\ntry {\r\n    Invoke-Correctly\r\n} catch [System.Management.Automation.ParameterBindingException] {\r\n    \"PBE\"\r\n     # Note that the \"ItemNotFoundException\" is inside this one:\r\n    \"INNER: \"+ $_.Exception.InnerException.GetType().Name \r\n} catch {\r\n    \"INFE (won't be caught)\"\r\n}\r\n```\r\n\r\nThe weird thing is that we can fix this. We can get the catching behavior we _expected_ by simply changing the _rethrow_ to `throw $_` -- just adding the `$_` to the throw statement results in what is caught changing. **This _should not_ happen**:\r\n\r\n```powershell\r\nfunction Invoke-Better {\r\n    try {\r\n        # Do something\r\n        # Call the cmdlet which might throw\r\n        Throw-InnerException\r\n        # Do other things if it does not throw\r\n        # Catch and re-throw, so callers can handle the underlying error\r\n    } catch { throw $_ }\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nWe should be able to catch the *outer* exception even if we have a handler for the inner exception. Note that this will work, if we call `Invoke-Better` (but doesn't work if we call `Invoke-Correctly`):\r\n\r\n```powershell\r\n$Error.Clear()\r\ntry {\r\n    Invoke-Better\r\n} catch [System.Management.Automation.ParameterBindingException] {\r\n    \"PBE\" \r\n} catch [System.Management.Automation.ItemNotFoundException] {\r\n    \"INFE\"\r\n}\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nUsing `throw $_` as in `Invoke-Better` works the way we expect it too.\r\n\r\nBut using `throw` as in `Invoke-Correctly` (which is supposed to mean the same thing), hinders our ability to handle the exception correctly.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nThis bug has always existed (or at least, has existed for a very long time), and it still persists in PowerShell 6.\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 @SteveL-MSFT @BrucePay Is there any particular reason this behaviour is the way it is, and should we seek to design out a more consistent and reliable system for handling errors? \r\n\r\nAs it currently stands, it's not only difficult to _write_ scripts with this caveat (you have to use wordier and more complex alternatives like `$PSCmdlet.ThrowTerminatingError()`, or the workarounds @Jaykul describes), but as an end-user it also means that behaviour when applying different preference variables or parameters can't be relied upon for script modules. Practically ever module becomes a case-by-case \"did they jump through all X hoops to make sure their error handling works\".\r\n\r\nIn my opinion, we should be attempting to simplify working with errors, not introducing additional complications.",
      "created_at": "2019-02-26T16:37:21Z",
      "updated_at": "2019-02-26T16:37:21Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Recently I found myself digging into this issue while troubleshooting something related that I was working on in the debugger and compiler, and there are actually a few specific issues identified above that need to be discussed separately, as follows:\r\n\r\n## Issue descriptions\r\n\r\n1. Exceptions derived from `System.Management.Automation.RuntimeException` that contain inner exceptions cannot be caught by the outer exception type if the thing that was thrown was the raw exception (as opposed to an `ErrorRecord` or a wrapping `RuntimeException`). They can, however, be caught using the inner exception type (which should never be possible, if PowerShell aligns itself to similar designs in other languages like C#). This is an issue in [lines 1464-1466 of the FindMatchingHandler static method](https://github.com/PowerShell/PowerShell/blob/ceed73d7375cb98a199ceb19796bb2311b0b0002/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L1464-L1466), which should create a new `ErrorRecord` that wraps the `RuntimeException` and assign those two variables differently if the parent (the exception in the `rte` variable itself) contains the exception, as can be seen by inspecting the `ErrorRecord` property on the `RuntimeException`. Additionally a minor logic change should be added to prevent an unnecessary second invocation of `FindAndProcessHandler`. This issue is the root cause of what is happening here.\r\n\r\n1. When you rethrow using `throw` inside of a catch block, if whatever was thrown and then caught is derived from `System.Management.Automation.RuntimeException`, it will be rethrown as is. Otherwise it will be converted into a `System.Management.Automation.RuntimeException` and then thrown. Conversely, if instead you rethrow by invoking `throw $_` inside of the catch block, the `ErrorRecord` that was created to identify the error and that is stored in `$_` will be thrown. From an end user perspective, this seems odd, since they are both inside of the same catch block and appear like they should do the same thing; however, I believe that detail is moot once the first issue is addressed.\r\n\r\n## Alternative workaround\r\n\r\nAn alternative workaround for the first issue than what was suggested above is to wrap the exception in an `ErrorRecord`, and then throw the `ErrorRecord`. You can see how the wrapping is done in the script that demonstrates that issue below.\r\n\r\n## Test script demonstrating first issue\r\n\r\nTo demonstrate the first issue, see the following script:\r\n\r\n```PowerShell\r\nfunction Test-ExceptionHandling {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [ValidateNotNull()]\r\n        [System.Type]\r\n        $InnerExceptionType,\r\n\r\n        [Parameter(Mandatory)]\r\n        [ValidateNotNull()]\r\n        [System.Type]\r\n        $OuterExceptionType,\r\n\r\n        [Parameter(Mandatory)]\r\n        [ValidateSet('Exception','ErrorRecord','RuntimeException')]\r\n        [System.String]\r\n        $ThrowType\r\n    )\r\n    function Write-ErrorInfo {\r\n        param($ErrorRecord)\r\n        \"Caught: $($ErrorRecord.Exception.foreach('GetType').FullName)\"\r\n        \"Category: $($ErrorRecord.CategoryInfo.Category)\"\r\n        \"Message: $($ErrorRecord.Exception.Message)\"\r\n        \"InnerException: $($ErrorRecord.Exception.InnerException.foreach('GetType').FullName)\"\r\n    }\r\n\r\n    Invoke-Expression -Command @\"\r\ntry {\r\n    `$ine = `$InnerExceptionType::new(\"My inner exception\")\r\n    `$oute =  `$OuterExceptionType::new(\"My outer exception\", `$ine)\r\n    `$er = [System.Management.Automation.ErrorRecord]::new(`$oute, `$oute.Message, 'OperationStopped', `$null)\r\n    `$rte = [System.Management.Automation.RuntimeException]::new(`$oute.Message, `$oute, `$er)\r\n    switch (`$ThrowType) {\r\n        'Exception' {\r\n            throw `$oute\r\n        }\r\n        'ErrorRecord' {\r\n            throw `$er\r\n        }\r\n        'RuntimeException' {\r\n            throw `$rte\r\n        }\r\n    }\r\n} catch [$($InnerExceptionType.FullName)] {\r\n    Write-ErrorInfo `$_\r\n} catch [$($OuterExceptionType.FullName)] {\r\n    Write-ErrorInfo `$_\r\n} catch {\r\n    'Caught: Catch all'\r\n}\r\n\"@\r\n}\r\n\r\n# This works\r\nTest-ExceptionHandling -InnerExceptionType System.ArgumentException -OuterExceptionType System.Management.Automation.ItemNotFoundException -ThrowType RuntimeException\r\n\r\n# As does this\r\nTest-ExceptionHandling -InnerExceptionType System.ArgumentException -OuterExceptionType System.Management.Automation.ItemNotFoundException -ThrowType ErrorRecord\r\n\r\n# But when throwing the unwrapped raw exception, the bug is exposed, with the error handler catching the inner exception (something that should not be possible)\r\nTest-ExceptionHandling -InnerExceptionType System.ArgumentException -OuterExceptionType System.Management.Automation.ItemNotFoundException -ThrowType Exception\r\n```\r\n\r\nNow that the issue has been identified, would you like it fixed @SteveL-MSFT?",
      "created_at": "2019-04-24T19:59:26Z",
      "updated_at": "2019-04-25T01:27:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's some supreme sleuthing you've done there, Kirk, nice work! \ud83d\ude0a ",
      "created_at": "2019-04-24T20:16:36Z",
      "updated_at": "2019-04-24T20:16:36Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "~~Just to add one more thought related to the second \"issue\" identified above so that the committee can consider it.~~\r\n\r\n~~From within a `catch` block, invoking `throw` and `throw $_` are effectively doing the same thing. The end result is two `ErrorRecord` objects that are not the same (they have a different hash code because they are generated independently by PowerShell), but the properties on those `ErrorRecord` objects are identical. Given that is the case, wouldn't it make sense for the PowerShell compiler to treat `throw` and `throw $_` both as rethrows, in [this method](https://github.com/PowerShell/PowerShell/blob/ceed73d7375cb98a199ceb19796bb2311b0b0002/src/System.Management.Automation/engine/parser/ast.cs#L5294-L5314), so that they both compile and function the same way?~~\r\n\r\nOn second thought, I don't think that's a good idea because you could store `$_` in another variable and then throw that variable later, and it wouldn't be handled quite the same way. The best thing to do for `throw $_` if the first issue is addressed would probably be a PowerShell Script Analyzer rule that generates a warning recommending users simply use `throw` instead.",
      "created_at": "2019-04-25T19:17:15Z",
      "updated_at": "2019-04-26T17:16:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we believe the fundamental issue is that there are many cases in PowerShell where exceptions get wrapped.  This makes error handling difficult.  We agreed that we should allow the user to catch the inner exception.  Proposal is that in our catch code, we should recurse into it looking for a match and return that exception to the catch if found.  We should not make changes to throw behavior.  @JamesWTruher offered to author a RFC for this",
      "created_at": "2019-05-15T22:31:08Z",
      "updated_at": "2019-05-15T22:31:08Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Just to make sure I understand, when you say \"we should allow the user to catch the inner exception\", you're only suggesting that PowerShell try/catch blocks be able to catch inner exceptions that are automatically wrapped by PowerShell with other exceptions such as RuntimeException, and not inner exceptions in general, correct?",
      "created_at": "2019-05-16T01:18:32Z",
      "updated_at": "2019-05-16T01:18:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro we didn't differentiate between PS wrapped or non-PS wrapped exceptions.  The idea is that PS would look through all the inner exceptions for a match regardless of who put it there.  This is a technical breaking change, but in our discussion we agreed that since this is an error handling case, those scripts were already broken if they weren't correctly catching the exception.",
      "created_at": "2019-05-18T22:45:25Z",
      "updated_at": "2019-05-18T22:45:25Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT and @JamesWTruher: This warrants some more discussion in the committee or here on this issue discussion because you made the wrong decision.\r\n\r\nInner exceptions should not be catchable because they've already been handled. C# works this way. Java as well. I can do more research, but I suspect other programming languages behave the same way. When you have a method/command/script that invokes something inside of a try/catch block and internally catches that exception, the code is handling the exception. If it wants to surface the exception as-is, it just rethrows it. Otherwise, it may suppress it, or it may generate a new exception based on that exception and assign the original exception as the inner exception. This is known as exception chaining.\r\n\r\nIf I write some code that may throw exceptions, it is advantageous to the caller to know what type of exceptions may be thrown. For example, see any number of methods in .NET such as [this one](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.getstringasync?view=netframework-4.8) which identifies the types of exceptions that it may throw. Unless the logic within those methods specifically rethrows an exception of a certain type, you will never, ever see that documentation indicate types of inner exceptions as exceptions that it throws _because they are already handled_.\r\n\r\nPowerShell should learn from these other languages and be no different when it comes to exception chaining. Users should not be allowed to catch inner exceptions. The exception to that rule (pun intended) when it comes to PowerShell is with wrapper exceptions. PowerShell uses certain exception types to marshal exceptions through the engine and surface them to the user. In those cases, the user needs to be able to catch the original exception, not the wrapper/helper that PowerShell puts on top of it.\r\n\r\nIf you look in Issue 1 of my [earlier post](#issuecomment-486402815), it describes one place where PowerShell can be updated to properly propagate exceptions through the system so that they can be properly caught (the actual exception, not the wrapper). Those are the types of changes that need to be made through PRs -- identify where PowerShell wraps exceptions, and make sure that those exceptions are wrapped properly so that the correct exception can be caught by the end user.",
      "created_at": "2019-05-21T15:24:51Z",
      "updated_at": "2019-05-21T17:48:37Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I have obviously explained this **very** poorly if you think that making me able to catch inner exceptions would help. The original problem I was trying to work around by using `throw $_` instead of `throw` is the fact that **I am already catching inner exceptions**\r\n\r\n# I'm trying *NOT* to catch inner exceptions! \r\n\r\nI mean, I literally wrote: We should be able to catch the **_outer_** exception ...\r\n\r\nSee #9689",
      "created_at": "2019-05-22T14:45:18Z",
      "updated_at": "2019-05-22T14:50:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Additional data points:\r\n\r\nThis issue has something to do with the `throw $pbe` statement in powershell. When the exception is thrown from true .NET method, the re-throw statement works as expected. See the code below:\r\n```powershell\r\nAdd-Type -TypeDefinition @'\r\nusing System.Management.Automation;\r\nusing System;\r\npublic class Bar {\r\n    public static void ThrowException() {\r\n        var inf = new ItemNotFoundException(\"File Not Found\");\r\n        var pbe = new ParameterBindingException(\"FileName\", inf);\r\n        throw pbe;\r\n    }\r\n}\r\n'@\r\n\r\nfunction TryAgain { try { [Bar]::ThrowException() } catch { throw } }\r\n\r\ntry {\r\n    TryAgain\r\n} catch [System.Management.Automation.ParameterBindingException] {\r\n    \"PBE\" \r\n} catch [System.Management.Automation.ItemNotFoundException] {\r\n    \"INFE\"\r\n}\r\n\r\n> PBE\r\n```\r\nSo, if someone is investigating for a fix, the focus probably should be the `throw $pbe` statement.",
      "created_at": "2021-09-01T17:01:05Z",
      "updated_at": "2021-09-01T17:01:05Z"
    },
    {
      "author": "Tragen",
      "author_association": "NONE",
      "body": "Are you still thinking about this? We had this pitfall today and it took us half a day to find and understand the problem.",
      "created_at": "2021-10-06T17:18:53Z",
      "updated_at": "2021-10-06T17:18:53Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "This surfaced for me as well now.",
      "created_at": "2022-10-05T08:48:52Z",
      "updated_at": "2022-10-05T08:48:52Z"
    }
  ],
  "created_at": "2018-02-20T23:53:40Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion",
    "Committee-Reviewed"
  ],
  "number": 6205,
  "state": "open",
  "title": "How you re-throw changes our ability to catch the exception:",
  "updated_at": "2022-10-05T08:48:52Z"
}