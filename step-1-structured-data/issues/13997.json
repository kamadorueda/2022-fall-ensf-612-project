{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13997",
  "author": "jhoneill",
  "body": "\r\n#3821 , #9185  and others (which may or may not link to those) have put questions about stopping the pipeline , I think I'm asking a slightly different question here (closer to #5811) but I'm not finding an answer although I would have expected someone to have hit it before. \r\n\r\nI have a simple example  begin does some set-up , end does some tear down, and in-between process is called more than once to work on pipeline input. All good, all well understood. \r\n\r\n```powershell\r\nfunction test {\r\nparam (\r\n    [parameter(ValueFromPipeline=$true)]\r\n    [int]$p\r\n)\r\nbegin   {write-host -fore Red \"Open connection\"}\r\nprocess {\r\n         write-host -fore Red \"work for $p\" \r\n         1..$p  \r\n}\r\nend     {write-host -Fore red \"Close Connection\"}\r\n}\r\n\r\n 1,2 | test\r\n```\r\nGives\r\n```\r\nOpen connection\r\nwork for 1\r\n1\r\nwork for 2\r\n1\r\n2\r\nClose Connection\r\n```\r\nBut if select stops the upstream pipeline this happens\r\n```\r\n1,2 | test | select -first 2\r\nOpen connection\r\nwork for 1\r\n1\r\nwork for 2\r\n1\r\n```\r\nThe end block doesn't get run - because (AIUI) `Select-Object` throws a `StopUpstreamCommandsException`, and everything stops dead. A `try / catch` block doesn't _catch_ it, a `finally` block _does_ run but there is no way I can see for to detect that an error has been thrown ($error doesn't contain anything), and an unconditional tear down in the process block will mean only one item gets processed, so that's no good. (Yes, I can have process catch all the incoming items, and run everything in the end block wrapped in a giant try-catch-finally, but that's super-ugly, IMHO) .  There doesn't seem to be an event that can be hooked...  \r\n\r\nIs there a solution out there which I just can't find, or is just plain dangerous to assume when there are no errors, the end block will run ? \r\n\r\n",
  "closed_at": "2020-11-06T20:29:29Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, but this is a duplicate of #7930 (I've just updated #3821 to link to it as well).",
      "created_at": "2020-11-06T16:30:55Z",
      "updated_at": "2020-11-06T16:30:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This issue is the precise reason I wrote all of this: #9900 \r\n\r\nCurrently, there is no solution, the pipeline processor simply isn't equipped to handle the scenario by design, there is no \"guaranteed\" execution of any pipeline block. `process{}` blocks can be skipped if a downstream command's `begin{}` block throws an exception, too.\r\n\r\nThe PS team made it fairly clear in multiple issues that `end` was never intended to be a guaranteed execution and they weren't open to changing that.\r\n\r\nThe `cleanup{}` function block implemented in the above PR adds a block that is completely guaranteed to run regardless of errors or otherwise stopping pipelines, but I don't know where the PS team stand on it currently. They have expressed interest multiple times in the past, but it was ready to go well before 7.1 release cycle really started and has received only a few reviews, so I don't know if they're still looking to get it reviewed and accepted. The related RFC was approved, however, so... yeah, I don't know where that's at, it's in limbo as far as I know.",
      "created_at": "2020-11-06T16:36:24Z",
      "updated_at": "2020-11-06T16:37:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The PR sounds great, @vexx32, and I encourage you to give it more exposure by also mentioning it in the original issue, #7930.",
      "created_at": "2020-11-06T16:47:27Z",
      "updated_at": "2020-11-06T17:39:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, I thought I had. Apparently that link in the chain was overlooked, cheers!",
      "created_at": "2020-11-06T17:37:02Z",
      "updated_at": "2020-11-06T17:37:08Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0  @vexx32   Thanks both. I couldn't find search terms which would find it, what I've put in is so close to #7930 that it looks like a copy :-(   It looks like most of the work has been done to put this right so I'll close this one. ",
      "created_at": "2020-11-06T20:29:29Z",
      "updated_at": "2020-11-06T20:29:29Z"
    }
  ],
  "created_at": "2020-11-06T14:44:09Z",
  "number": 13997,
  "state": "closed",
  "title": "Upstream Commands Detecting when they are stopped",
  "updated_at": "2020-11-06T20:29:29Z"
}