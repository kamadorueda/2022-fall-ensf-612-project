{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12684",
  "author": "p3rdu",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\"thisIsAString\" -is [PSobject]\r\n# gives False\r\n420 -is [PSobject]\r\n# gives False\r\n@{} -is [PSobject]\r\n# gives False\r\n(New-Object -TypeName PSObject) -is [PSobject]\r\n# gives True\r\n# All correct this far\r\n\r\nfunction mainscript {\r\n    param(\r\n        [ValidateScript({$_ -is [PSobject]})]\r\n        $testvalue\r\n    )\r\n\r\n    Write-Host `$testvalue validation passed. Script continues..\r\n\r\n}\r\n\r\nmainscript \"thisIsAString\"\r\n# why argument \"thisIsAString\" passed the validation?\r\nmainscript 420\r\n# same with 420\r\nmainscript @{}\r\n# same with hashtable\r\nmainscript (New-Object -TypeName PSObject)\r\n# This is correct\r\n```\r\n\r\nSo in validation the actual variable is encapsulated in a PSObject referred by $_? \r\nFor example if .GetType() is called then the actual type is returned, but -is operator cannot distinguish this type for some reason?\r\n\r\nIs this by design? I personally feel that this is a caveat where a programmer can fall. ( I used that in a longer validation script, where I first checked whether type is suitable before proceeding into more extended validation part, where I check if object has proper properties and their values, and started to wonder why the first type check did not invalidate the input) \r\n\r\n# Expected behavior\r\n\r\n```none\r\nOnly the last execution of mainscript , where $testvalue is really a [PSObject] should pass the validation \r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nAll executions pass even the type of validated parameter is not [PSObject]\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Mon Feb 10 21:08:45 PST 2020; root:xnu-4903.278.28~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Element is explicitly converted to PSObject\r\nhttps://github.com/PowerShell/PowerShell/blob/fde00de77f48f4bd2eede46dc3ed4a812da0c2d6/src/System.Management.Automation/engine/Attributes.cs#L1368-L1374",
      "created_at": "2020-05-15T15:38:06Z",
      "updated_at": "2020-05-15T15:38:06Z"
    },
    {
      "author": "p3rdu",
      "author_association": "NONE",
      "body": "This limitation can be easily overcome by replacing the original -is comparison in the example with\r\n```powershell\r\n[ValidateScript({$_.GetType() -eq [System.Management.Automation.PSCustomObject]})]\r\n```\r\n\r\nIf the origin of this issue is in interest to anyone, here is the validation script.\r\n```Powershell\r\nfunction Test-ObjectStructure {\r\n    param (\r\n        [Parameter(Position=0)]\r\n        $testStructure,\r\n        [Parameter(Position=1)]\r\n        $referenceStructure,\r\n        [Switch]\r\n        $checkValues\r\n    )\r\n    <#\r\n    .SYNOPSIS\r\n\r\n    Validate a PSobject or Hashtable against a reference structure.\r\n\r\n    .DESCRIPTION\r\n\r\n    For Hashtable, it is checked that the test item has least the same keys as the reference.\r\n    For PSobject, it is checked that there is a noteproperty corresponding each key in the reference structure.\r\n    \r\n    .PARAMETER checkValues\r\n\r\n    This option checks key/noteproperty values against regular expressions in the reference structure values. \r\n\r\n    #>\r\n\r\n    # if (-not $testStructure) { # This is not really needed as ValidateScript wont pass null values.\r\n    #     throw \"Argument is an empty, 0 or null.\"\r\n    # }\r\n\r\n    if ($testStructure -isnot [Hashtable] -and $testStructure.gettype() -ne [System.Management.Automation.PSCustomObject]) {\r\n        throw \"Argument has invalid type of {0}. It needs to be a hashtable or a PSCustomObject to proceed to property checking.\" -f $testStructure.gettype() \r\n    }\r\n    \r\n    foreach ($key in $referenceStructure.Keys) {\r\n        if (-not $testStructure.$key) {\r\n            throw \"Argument has no NoteProperty or key with name '{0}'.\" -f $key\r\n        }\r\n\r\n        if ($checkValues -and ($testStructure.$key -notmatch $referenceStructure.$key)) {\r\n            throw \"Argument.$key value '$($testStructure.$key)' does not match pattern '$($referenceStructure.$key)'.\"\r\n        }\r\n    }\r\n\r\n    1\r\n}\r\n```",
      "created_at": "2020-05-17T13:46:04Z",
      "updated_at": "2020-05-17T13:46:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@p3rdu Can we close the issue if you have the workaround?",
      "created_at": "2020-05-17T17:13:39Z",
      "updated_at": "2020-05-17T17:13:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Mmm. Yeah, I think ultimately this is by design, since anything that goes through parameter binding in PowerShell is _always_ wrapped into a PSObject.",
      "created_at": "2020-05-17T22:22:48Z",
      "updated_at": "2020-05-17T22:22:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There are `ScriptBlock.DoInvokeReturnAsIs` samples where no wrapping is done. i don't know why.",
      "created_at": "2020-05-18T04:26:40Z",
      "updated_at": "2020-05-18T04:26:40Z"
    },
    {
      "author": "p3rdu",
      "author_association": "NONE",
      "body": "There is something quirky in operator -is type checking against PSObjects. Even all PowerShell objects are always inherently also PSObjects, isn't there something strange with the following:\r\n```Powershell\r\n> $obj = 420\r\n> $obj.Gettype().Name\r\nInt32\r\n> $obj -is [Int32]\r\nTrue\r\n> $obj -is [PSObject] \r\nFalse\r\n# But I can still enrich the object by adding some noteproperties\r\n> $obj | Add-Member -NotePropertyName \"metaText\" -NotePropertyValue \"silly meaning\"\r\n# And I can also access the underlying PSObject through PSObject hidden property\r\n> $psObj = $obj.PSObject\r\n> $psObj.GetType().name\r\nPSObject\r\n# But now what? Can somebody explain?\r\n> $psObj -is [PSObject]\r\nFalse\r\n> $psObj -is [Int]  \r\nFalse\r\n# Let's check sanity \r\n> $obj2 = New-Object PSObject\r\n> $obj2 -is [PSObject]       \r\nTrue\r\n# How about this then\r\n> $obj2.PSObject -is [PSObject]\r\nFalse \r\n``` ",
      "created_at": "2020-05-18T07:20:59Z",
      "updated_at": "2020-05-18T07:22:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The short version: it's confusing. PSObject was probably originally intended to be largely an invisible implementation detail/wrapper type and really isn't meant to be used in type checks.\r\n\r\n@mklement0 has a few issues with well-written up details on how it actually works (and some ways it might be better improved to be less confusing in general).",
      "created_at": "2020-05-18T07:27:28Z",
      "updated_at": "2020-05-18T07:27:28Z"
    },
    {
      "author": "p3rdu",
      "author_association": "NONE",
      "body": "Mmkay. I don't know nothing about Powershell implementation, so there is an ad-hoc PSObject behind every Powershell object, and this PSObject holds e.g. NoteProperty extensions applicable to any other types by the PowerShell paradigm. And when e.g. Add-Member is called a corresponding PSObject for that object is constructed? So what actually happens here?\r\n```Powershell\r\n> 42 | Add-Member -NotePropertyName \"metaData\" -NotePropertyValue \"meaning of life\"         \r\n> 42 | convertto-json\r\n{\r\n  \"value\": 42,\r\n  \"metaData\": \"meaning of life\"\r\n}\r\n```\r\n  ",
      "created_at": "2020-05-18T08:41:57Z",
      "updated_at": "2020-05-18T09:01:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Wrapping to PSObject assumes that we expect using PowerShell magics like ETS (Entended Type System).\r\n- I do not sure that we need this for ValidateScript.\r\n- Another thought is that `-is` operator should check BaseObject if current object is PSObject.\r\n\r\nI believe we could fix both.\r\n\r\nMaybe @daxian-dbw could make a conclusion.",
      "created_at": "2020-05-18T09:32:45Z",
      "updated_at": "2020-05-18T09:32:45Z"
    }
  ],
  "created_at": "2020-05-15T13:32:00Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12684,
  "state": "open",
  "title": "Strange behaviour with $_ variable in ValidateScript validation attribute ",
  "updated_at": "2020-05-18T09:32:45Z"
}