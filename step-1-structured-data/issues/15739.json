{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15739",
  "author": "daxian-dbw",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n```powershell\r\nfunction repro-1 {\r\n    [CmdletBinding()]\r\n    param()\r\n\r\n    Get-Command NonExist -ErrorAction Stop\r\n}\r\n\r\n## $err should contain only 1 error record since only one error happened, but you get 2 here\r\n> repro-1 -ErrorVariable err\r\n> $err.Count\r\n2\r\n\r\nfunction repro-2 {\r\n    [CmdletBinding()]\r\n    param([switch] $ErrorActionStop)\r\n\r\n    if ($ErrorActionStop) {\r\n        Get-Command NonExist -ErrorAction Stop\r\n    }\r\n}\r\n\r\n## Exactly the same error, but when wrapped in a if-block, $err becomes 3\r\n> Repro-2 -ErrorActionStop -ErrorVariable err\r\n> $err.Count\r\n3\r\n\r\nfunction repro-3 {\r\n    [CmdletBinding()]\r\n    param()\r\n\r\n    throw 'throw-exception'\r\n}\r\n\r\n## This is expected behavior, $err contains only 1 element since only 1 error was thrown\r\n> repro-3 -ErrorVariable err\r\n> $err.Count\r\n1\r\n\r\nfunction repro-4 {\r\n    [CmdletBinding()]\r\n    param([switch] $ThrowException)\r\n\r\n    if ($ThrowException) {\r\n        throw 'throw-exception'\r\n    }\r\n}\r\n\r\n## Again, exactly the same error as the above one, but when wrapped in a if-block, $err becomes 2\r\n> repro-4 -ThrowException -ErrorVariable err\r\n> $err.Count\r\n2\r\n```\n\n### Expected behavior\n\n```console\n> repro-1 -ErrorVariable err\r\n> $err.Count\r\n1\r\n\r\n> Repro-2 -ErrorActionStop -ErrorVariable err\r\n> $err.Count\r\n1\r\n\r\n> repro-3 -ErrorVariable err\r\n> $err.Count\r\n1\r\n\r\n> repro-4 -ThrowException -ErrorVariable err\r\n> $err.Count\r\n1\n```\n\n\n### Actual behavior\n\n```console\nCalled out in the repro steps. Repeat here:\r\n\r\n> repro-1 -ErrorVariable err\r\n> $err.Count\r\n2\r\n\r\n> Repro-2 -ErrorActionStop -ErrorVariable err\r\n> $err.Count\r\n3\r\n\r\n> repro-3 -ErrorVariable err\r\n> $err.Count\r\n1\r\n\r\n> repro-4 -ThrowException -ErrorVariable err\r\n> $err.Count\r\n2\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\nN/A",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "... I remember seeing weird error behaviour when I was tinkering with the dispose{}/cleanup{} code. I thought I was just imagining things, or breaking it \ud83e\udd23\r\n\r\nThese sound very familiar though.",
      "created_at": "2021-07-08T12:27:32Z",
      "updated_at": "2021-07-08T12:27:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "More information from the first repro:\r\n\r\n```console\r\n> $err[0]\r\n\r\nErrorRecord                 : The term 'NonExist' is not recognized as a name of a cmdlet, function,\r\n                              script file, or executable program.\r\n                              Check the spelling of the name, or if a path was included, verify that\r\n                              the path is correct and try again.\r\nWasThrownFromThrowStatement : False\r\nTargetSite                  : System.Collections.ObjectModel.Collection`1[System.Management.Automatio\r\n                              n.PSObject] Invoke(System.Collections.IEnumerable)\r\nMessage                     : The running command stopped because the preference variable\r\n                              \"ErrorActionPreference\" or common parameter is set to Stop: The term\r\n                              'NonExist' is not recognized as a name of a cmdlet, function, script\r\n                              file, or executable program.\r\n                              Check the spelling of the name, or if a path was included, verify that\r\n                              the path is correct and try again.\r\nData                        : {System.Management.Automation.Interpreter.InterpretedFrameInfo}\r\nInnerException              :\r\nHelpLink                    :\r\nSource                      : System.Management.Automation\r\nHResult                     : -2146233087\r\nStackTrace                  :    at\r\n                              System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable\r\n                              input) in System.Management.Automation.dll:token 0x600537f+0xb0\r\n                                 at Microsoft.PowerShell.Executor.ExecuteCommandHelper(Pipeline\r\n                              tempPipeline, Exception& exceptionThrown, ExecutionOptions options) in\r\n                              Microsoft.PowerShell.ConsoleHost.dll:token 0x600023c+0x181\r\n\r\n\r\n> $err[1]\r\n\r\nGet-Command:\r\nLine |\r\n   5 |      Get-Command NonExist -ErrorAction Stop\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The term 'NonExist' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\n> $err[0].gettype()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     ActionPreferenceStopException            System.Management.Automation.RuntimeExcep\u2026\r\n\r\n> $err[1].gettype()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     ErrorRecord                              System.Object\r\n```",
      "created_at": "2021-09-30T20:17:51Z",
      "updated_at": "2021-09-30T20:18:07Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "WG: this definitely seems like a bug. It is also not a regression from PS5.1, and should be addressed.",
      "created_at": "2021-09-30T23:22:53Z",
      "updated_at": "2021-09-30T23:22:53Z"
    }
  ],
  "created_at": "2021-07-08T04:34:27Z",
  "number": 15739,
  "state": "open",
  "title": "Unexpected number of errors caught in the error-variable when only one error was actually thrown",
  "updated_at": "2021-09-30T23:22:53Z"
}