{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17031",
  "author": "gerardog",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nFound a quite strange behaviour with Invoke-Expression.\r\nIt does nothing depending on how PowerShell was initialized... Same behaviour on 7.2.1 and Windows Powershell (5.1.22000.282)\r\n\r\nWindows 11 21H2 Home (Build 22000.556)\r\n\r\nWhen I use `-noprofile` or `-noprofile -noni` and the first command is Invoke-Expression, it does nothing.\r\n\r\n```\r\nC:\\Users\\gerar>pwsh -nop\r\nPowerShell 7.2.1\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS C:\\Users\\gerar> '1+1' | iex       # Expected: 2   Actual: void\r\nPS C:\\Users\\gerar> Invoke-Expression '1+1' # Expected: 2   Actual: void\r\nPS C:\\Users\\gerar> Write-Output ''    # This line initializes something?\r\n\r\nPS C:\\Users\\gerar> '1+1' | iex # Expected: 2   Actual: 2\r\n2\r\nPS C:\\Users\\gerar>\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nInvoke-Expression runs the expression.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nInvoke-Expression does nothing.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nGet-Error returns nothing.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-03-20T12:00:41Z",
  "comments": [
    {
      "author": "gerardog",
      "author_association": "NONE",
      "body": "I ran procmon to see if I could find something else.\r\nFound a Invoke-Expression.ps1 file in the path. \r\n\r\nI created it a while ago, when I was experimenting....\r\n\r\nI used:\r\n``` powershell\r\n[System.Management.Automation.ProxyCommand]::Create((gcm invoke-expression))\r\n```\r\n\r\nWrapped that into `function Invoke-Expression {` `}` and saved as `Invoke-Expression.ps1` in the $Env:Path.\r\nI shouldn't have wrapped it! But still, the following is strange...\r\n\r\n```\r\nC:\\>pwsh -noprofile -nologo -noni\r\nPS C:\\> get-command iex\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           iex -> Invoke-Expression.ps1\r\n\r\nPS C:\\> get-command iex\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           iex -> Invoke-Expression.ps1\r\n\r\n(... repeat many times, always same result .. )\r\n\r\nPS C:\\> echo \"calling echo fixes it\"\r\ncalling echo fixes it\r\nPS C:\\> get-command iex\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           iex -> Invoke-Expression\r\n\r\nPS C:\\>\r\n```",
      "created_at": "2022-03-19T02:09:34Z",
      "updated_at": "2022-03-19T02:35:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I would guess that it's any command from the module `Microsoft.PowerShell.Utility` that causes it to start working. The code gen for proxy commands generates a command lookup that *does not* auto import modules. So once the module is imported it'll find the proxy target and start working.",
      "created_at": "2022-03-19T02:46:57Z",
      "updated_at": "2022-03-19T02:46:57Z"
    },
    {
      "author": "RamiSJ12",
      "author_association": "NONE",
      "body": "Need one more code...\n\n{\nelse wrong;\nelse error;\nelse i = 0;\n\n     Return\n}",
      "created_at": "2022-03-19T03:15:00Z",
      "updated_at": "2022-03-19T03:15:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-03-20T12:00:40Z",
      "updated_at": "2022-03-20T12:00:40Z"
    }
  ],
  "created_at": "2022-03-19T01:22:46Z",
  "number": 17031,
  "state": "closed",
  "title": "Invoke-Expression doesn't work if Write-Output hasn't been called at least once.",
  "updated_at": "2022-03-20T12:00:41Z"
}