{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7118",
  "author": "HemantMahawar",
  "body": "Steps to reproduce\r\n------------------\r\n1.  Check the current available endpoints using **Windows PowerShell**\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.112\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.112\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n# Lists the default endpoints\r\nGet-PSSessionConfiguration | ft Name\r\n\r\nName\r\n----\r\nMicrosoft.PowerShell\r\nMicrosoft.Powershell.Workflow\r\nMicrosoft.PowerShell32\r\n```\r\n\r\n2. Install the PS Core 6.1.0-preview 3 using the MSI and select _Enable PowerShell remoting_\r\n![capture](https://user-images.githubusercontent.com/11988952/41616789-b5a58144-73b3-11e8-8eb7-e50de7348376.PNG)\r\n\r\nExpected behavior\r\n-----------------\r\nNew remoting endpoint(s) are **PRSENT** on the system as done by _Install-PowerShellRemoting.ps1_ script in $PSHome\r\n\r\n```powershell\r\n\r\n# From Windows PowerShell\r\nGet-PSSessionConfiguration | ft name\r\n\r\nName\r\n----\r\nMicrosoft.PowerShell\r\nMicrosoft.Powershell.Workflow\r\nMicrosoft.PowerShell32\r\nPowerShell.6\r\nPowerShell.6.1.0-preview.3\r\n\r\n# From PowerShell Core\r\nGet-PSSessionConfiguration |ft name\r\n\r\nName\r\n----\r\nPowerShell.6\r\nPowerShell.6.1.0-preview.3\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\nNew remoting endpoint(s) are **ABSENT** \r\n\r\n```powershell\r\n\r\n# From Windows PowerShell\r\nGet-PSSessionConfiguration | ft name\r\n\r\nName\r\n----\r\nMicrosoft.PowerShell\r\nMicrosoft.Powershell.Workflow\r\nMicrosoft.PowerShell32\r\n\r\n# From PowerShell Core\r\nGet-PSSessionConfiguration \r\n```\r\n",
  "closed_at": "2022-08-09T21:01:10Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Due to https://github.com/PowerShell/PowerShell/issues/5998 it was decided to not make the installer fail if `Enable-PSRemoting` fails, which can happen for various (see issue for details). Can you try to repro and possibly make the issue more detailed/specific by focussing on `Enable-PSRemoting` (or how it is called) the centre of this issue since I believe it is not a problem of the installer itself",
      "created_at": "2018-06-19T21:07:32Z",
      "updated_at": "2018-06-19T21:08:11Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "I don't know how to make it more specific. I tried running the following command from **elevated Windows PowerShell** to mimic elevated installer action and it succeeded\r\n\r\n```powershell\r\nPS C:\\WINDOWS\\system32> & 'C:\\Program Files\\PowerShell\\6-preview\\pwsh.exe' -noprofile -executionpolicy bypass -command 'Enable-PSRemoting'\r\n```\r\nCould it be because **Enable-PSRemoting** on PowerShell Core takes too long - 76 sec\r\n\r\n```powershell\r\nPS C:\\WINDOWS\\system32> measure-command {& 'C:\\Program Files\\PowerShell\\6-preview\\pwsh.exe' -noprofile -executionpolicy bypass -command 'Enable-PSRemoting'}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 1\r\nSeconds           : 16\r\nMilliseconds      : 558\r\nTicks             : 765582470\r\nTotalDays         : 0.000886090821759259\r\nTotalHours        : 0.0212661797222222\r\nTotalMinutes      : 1.27597078333333\r\nTotalSeconds      : 76.558247\r\nTotalMilliseconds : 76558.247\r\n```",
      "created_at": "2018-06-19T22:33:55Z",
      "updated_at": "2018-06-19T22:33:55Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister Is there anything in MSI log that I should look for to help diagnose this issue. I generated one using ```msiexec /L*V foo.log /i PowerShell-6.1.0-preview.3-win-x64.msi``` but not sure what to look inside it to know is the command ```Enable-PSRemoting``` is even called or not",
      "created_at": "2018-06-19T23:41:02Z",
      "updated_at": "2018-06-19T23:41:02Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@HemantMahawar OK. Let's debug it one by one:\r\n- For inspecting the WiX Log, look for custom actions/properties like `EnablePSRemoting` and `ENABLE_PSREMOTING`. In general I suggest to use  `/L*VX` to get as much logging info as possible but the options that you specified are probably sufficient.\r\n- If you suspect that the wiring up of the checkbox is broken, then build a custom installer that modifies [this](https://github.com/PowerShell/PowerShell/blob/master/assets/Product.wxs#L66) line to create a dummy file so that you know that the checkbox is wired up correctly and you could also pipe/redirect the output of `Enable-PSRremoting` to a log file that you can then inspect afterwards. I case you wonder: `&quot` is just the WiX escape character for a double quote.\r\n- Maybe the time issue is a separate, independent issue. I did some quick research and it seems that the custom action that we use has a non-configurable 1 minute timeout: https://github.com/wixtoolset/issues/issues/601/",
      "created_at": "2018-06-20T06:37:02Z",
      "updated_at": "2018-06-20T06:37:02Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister I tried your first suggestion w.r.t searching for ```EnablePSRemoting``` and ```ENABLE_PSREMOTING``` in the WiX log (I ran with ```/L*VX``` as you suggested). And below are the messages for **EnablePSRemoting**\r\n\r\n  Action ended 15:57:30: InstallFiles. Return value 1.\r\n  MSI (s) (68:20) [15:57:30:133]: Doing action: SetEnablePSRemoting\r\n  MSI (s) (68:20) [15:57:30:133]: Note: 1: 2205 2:  3: ActionText \r\n  Action 15:57:30: SetEnablePSRemoting. \r\n  **Action start 15:57:30: SetEnablePSRemoting.**\r\n  MSI (s) (68:20) [15:57:30:134]: PROPERTY CHANGE: Adding EnablePSRemoting property. Its value is '\"C:\\Program Files\\PowerShell\\6-preview\\pwsh.exe\" -NoProfile -ExecutionPolicy Bypass -Command \"Enable-PSRemoting\"'.\r\n  **Action ended 15:57:30: SetEnablePSRemoting. Return value 1.**\r\n  MSI (s) (68:20) [15:57:30:135]: **Skipping action: EnablePSRemoting (condition is false)**\r\n  MSI (s) (68:20) [15:57:30:135]: Doing action: SetRegisterManifest\r\n\r\n\r\nBased on the **highlighted** lines and their timestamp, it feels like the Enable-PSRemoting code was not executed at all. Am I correct or in the right direction?",
      "created_at": "2018-06-25T22:54:01Z",
      "updated_at": "2018-06-25T23:03:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@HemantMahawar the log says that `Enable-PSRemoting` was executed, but failed with exit code 1.  My guess is that if you run the equivalent command line in an elevated cmd: \"C:\\Program Files\\PowerShell\\6-preview\\pwsh.exe\" -NoProfile -ExecutionPolicy Bypass -Command \"Enable-PSRemoting\"\r\n\r\nIt will tell you why it failed.  Usually it's because some network interface is set to Public.",
      "created_at": "2018-06-26T00:36:02Z",
      "updated_at": "2018-06-26T00:36:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@HemantMahawar is this still an issue?  I don't think we want to use `-SkipNetworkProfileCheck`.",
      "created_at": "2018-09-07T18:32:30Z",
      "updated_at": "2018-09-07T18:32:30Z"
    },
    {
      "author": "nathankascopgr",
      "author_association": "NONE",
      "body": "> \r\n\r\n@SteveL-MSFT \r\nGearing up to look at deploying this to machines in my environment and want to make sure remoting gets enabled, am I correct in assuming that I will need a separate Enable-PSRemoting -Force -SkipNetworkProfileCheck if I suspect machines have public network interfaces? Or will newer 7.x MSI installs handle this cleanly/silently? ",
      "created_at": "2022-08-08T13:12:05Z",
      "updated_at": "2022-08-08T13:12:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@nathankascopgr The checkbox in the MSI (or using the [cmdline option](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2#install-the-msi-package-from-the-command-line)) simply runs `Enable-PSRemoting` without any additional parameters as that is the safest.  If it fails, you'll have to explicitly run with `-Force` or `-SkipNetworkProfileCheck` in the case that you are ok with the system having public network profiles.  That is the intended behavior to be secure by default.   At this point,  I believe this is by-design.",
      "created_at": "2022-08-08T16:33:37Z",
      "updated_at": "2022-08-08T16:33:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-09T21:01:09Z",
      "updated_at": "2022-08-09T21:01:09Z"
    }
  ],
  "created_at": "2018-06-19T18:35:34Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-By Design"
  ],
  "number": 7118,
  "state": "closed",
  "title": "MSI installer doesn't enable remoting even after selecting it",
  "updated_at": "2022-08-09T21:01:10Z"
}