{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7481",
  "author": "powercode",
  "body": "As a part of some perf work I've been doing lately, I looked at the creations of PSObjects.\r\n\r\nThe creation of them could be significantly faster if we can provide a context for the creation. The code as it exists is very defensive, doing work multiple times that in many cases is only needed once etc.\r\n\r\nI propose we add two new types, `ref struct PSObjectBuilder`, and `class PSObjectBuilderUnsafe`.\r\n\r\n\r\n`PSObjectBuilder` can be more aggressive since we can guarantee that the object it is building is only ever accessible from the same call stack. \r\n`PSObjectBuilderUnsafe` has to be a bit more defensive since it could potentially be leaked to another runspace/thread.\r\n\r\nThe PSObjectBuilder guarantees that the object under construction is never exposed to the outside world until it is fully constructed.\r\nIt also keep track of what validations has been done, and can use this to skip expensive checks that otherwise has to be performed.\r\n\r\nI have prototyped this at https://github.com/powercode/powershell/tree/PSObjectBuilder where I also used it in the JSON cmdlets and the providers.\r\n\r\nThe results are quite promising.\r\n`ConvertFrom-Json` is 7x faster.\r\n`gci -re -fo c:\\windows -ea:0` is 2-3x faster.\r\n\r\nBut I'm not quite sure about how to move forward here. \r\n\r\nThe branch I have contains changes that should go into separate PRs and there are things I would like to get design feedback on.\r\nShould I create a PR anyway or what's the best way to go about this?",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode Feel free to push the PR - it is easiest way to discuss new ideas and code. Many thanks for your investigations!\r\n\r\nCurrently I don't understand where we could use `PSObjectBuilder` - do we currently create PSObject objects for internal use only in the engine?\r\nAlso why do we need new struct and class - can we implement new constructors for PSObject ? or you say about \"PSObject fabric\"?\r\n\r\nPlease add Select-Object in your performance test. I suppose this will add clarity where we still have performance problems.",
      "created_at": "2018-08-09T09:41:39Z",
      "updated_at": "2018-08-09T09:43:39Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Add-Member performance would be good to test as well. ",
      "created_at": "2018-08-09T20:40:06Z",
      "updated_at": "2018-08-09T20:40:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Add-Member is another code path - adding new properties (members) vs bulk creating new similar PSObjects.",
      "created_at": "2018-08-10T04:24:02Z",
      "updated_at": "2018-08-10T04:24:02Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There is one use case where it might make sense, and that is the `-NotePropertyMembers @{...}`.\r\n\r\nThat could potentially be made faster. \r\n",
      "created_at": "2018-08-10T10:46:45Z",
      "updated_at": "2018-08-10T10:46:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With latest build I see that Import-Csv allocates many PSNoteProperty objects then they cloned [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/MshMemberInfo.cs#L4623) - looks wasteful. I don't know why the cloning is needed for. If we can not exclude this in general we could easily exclude this for PSNoteProperty by enhancing `Add()` method like `Add(String, Object)` in `PSMemberInfoIntegratingCollection`. Perhaps this will be useful for Select-Object where we can not expect objects of the same type. If your two new types don't cover the scenario we could consider the new Add() overload.",
      "created_at": "2018-08-10T13:37:42Z",
      "updated_at": "2018-08-10T13:37:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "That is one of the issues that is addressed by PSObjectBuilder.\r\n\r\nThey think they are defensive copies, made as we cannot know who else has references to that property. One of the benefits of PSObjectBuilder is that it can guarantee that none of the properties has been seen by anyone else, and hence skip the expensive copies.",
      "created_at": "2018-08-10T13:41:15Z",
      "updated_at": "2018-08-10T13:41:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode Thanks! I did not see your PR #7481 (Great!) - now I can review your ideas! ",
      "created_at": "2018-08-10T13:45:43Z",
      "updated_at": "2018-08-10T13:45:43Z"
    }
  ],
  "created_at": "2018-08-08T09:11:20Z",
  "number": 7481,
  "state": "open",
  "title": "Perf: Add PSObjectBuilder",
  "updated_at": "2018-08-10T13:45:43Z"
}