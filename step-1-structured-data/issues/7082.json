{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7082",
  "author": "rjmholt",
  "body": "Two questions on the PSModulePath in PowerShell Core:\r\n\r\n1. Is the the default setting of PSModulePath in PS Core documented anywhere (e.g. online) in a way that is general and cross platform? Like a table of what it is on each supported platform, or a string with unexpanded platform-specific variables in it? (e.g. `$PSHOME/Modules:$AnotherPlace/SecondModuleDir`)\r\n1. Is it possible to access the default PSModulePath at runtime? (Or to reset the current one?)",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is probably a `Documentation-Needed` situation.  Currently, you'll probably have to look at the [code](https://github.com/PowerShell/PowerShell/blob/8aec1585195e6d4871538aaa2ad2b112cf5fbfee/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs)",
      "created_at": "2018-06-15T18:39:07Z",
      "updated_at": "2018-06-15T18:39:07Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It would also be nice to have it as an API endpoint perhaps (like a variable, static property, etc) -- like `[ModuleIntrinsics]::GetModulePath()` except without requiring arguments. Curious if anyone else has felt a need for that?",
      "created_at": "2018-06-15T18:48:25Z",
      "updated_at": "2018-06-15T18:48:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think PSModulePath being an env var means you should get and set it like an env var",
      "created_at": "2018-06-15T18:52:15Z",
      "updated_at": "2018-06-15T18:52:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "What I feel is absent is not necessarily the built-in default value, but a way to access the various well-known module locations by _scope_.\r\n\r\nBy analogy, let's take the example of `$PROFILE`, which contains the well-known profile locations as named-for-the-scope `NoteProperty` members:\r\n\r\n```powershell\r\n# Sample output when run on macOS\r\nPS> $PROFILE | Get-Member -type noteproperty | Select Name, Definition\r\n\r\nName                   Definition\r\n----                   ----------\r\nAllUsersAllHosts       string AllUsersAllHosts=/usr/local/microsoft/powershell/6-preview/profile.ps1\r\nAllUsersCurrentHost    string AllUsersCurrentHost=/usr/local/microsoft/powershell/6-preview/Microsoft.PowerShell_profile.ps1\r\nCurrentUserAllHosts    string CurrentUserAllHosts=/Users/jdoe/.config/powershell/profile.ps1\r\nCurrentUserCurrentHost string CurrentUserCurrentHost=/Users/jdoe/.config/powershell/Microsoft.PowerShell_profile.ps1\r\n```\r\n\r\nI think we should provide something similar for module locations, using scopes such as `AllUsers`,     `CurrentUser`, `System`, and `Custom` (the latter comprising all `$env:PSModulePath` entries in addition to the well-known locations).\r\n\r\nI'm unclear on how best to surface this functionality, however. \r\n\r\nIn theory, we could use the same approach as with `$PROFILE`: decorate the `$env:PSModulePath` `[string]` value with `NoteProperty` members, but that is somewhat obscure.\r\n\r\nThen again, if properly documented, perhaps that's the way to go.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-17T01:36:29Z",
      "updated_at": "2019-11-28T02:37:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@BrucePay you should take @mklement0's suggestion as part of your `PSModulePath6` RFC",
      "created_at": "2018-06-18T15:35:04Z",
      "updated_at": "2018-06-18T15:35:04Z"
    },
    {
      "author": "fsackur",
      "author_association": "NONE",
      "body": "I have submitted https://github.com/PowerShell/PowerShell-Docs/pull/3214 to add the *nix locations to the existing about_Modules and about_Environment_Variables docs. I grant that this is only a partial solution.",
      "created_at": "2018-10-31T22:30:14Z",
      "updated_at": "2018-10-31T22:31:01Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Want to add that this may be of use in hosted PowerShell contexts where the hosting implementation might have reasons for using different paths for each module scope. (I would say \"or possibly define its own\", but I think we're coupled to the existing scopes now.)\r\n\r\nIt might merit being able to set the scoped module paths in the `powershell.config.json` and exposing their location through some PowerShell API. (Like @mklement0, I'm not sure what shape that API should be -- but I'd opt for either a variable or a method call, with the latter being a more direct fit to the current implementation).",
      "created_at": "2018-11-07T05:46:35Z",
      "updated_at": "2018-11-07T05:52:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "In case anyone wants this btw, here's a quick function to get the defaults:\r\n\r\n```powershell\r\nfunction Get-DefaultModulePath\r\n{\r\n    param(\r\n        [Parameter()]\r\n        [ValidateSet('AllUsers', 'CurrentUser', 'System', 'WindowsPSSystem')]\r\n        [string[]]\r\n        $Scope\r\n    )\r\n\r\n    if ($Scope -eq 'WindowsPSSystem')\r\n    {\r\n        if ($IsLinux -or $IsMacOs)\r\n        {\r\n            throw \"The scope '$Scope' does not exist on non-Windows platforms\"\r\n        }\r\n\r\n        if ($PSVersionTable.PSVersion -le '6.0')\r\n        {\r\n            throw \"The scope '$Scope' is only valid in PowerShell versions 6.1 and above\"\r\n        }\r\n    }\r\n\r\n    if (-not $Scope)\r\n    {\r\n        $Scope = 'AllUsers','CurrentUser','System'\r\n        if (-not ($IsLinux -or $IsMacOS))\r\n        {\r\n            $Scope += 'WindowsPSSystem'\r\n        }\r\n    }\r\n\r\n    $invokeModuleMethod = {\r\n        $bindingFlags = [System.Reflection.BindingFlags]'static,nonpublic'\r\n        $m = [System.Management.Automation.ModuleIntrinsics].GetMethod($args[0], $bindingFlags)\r\n        $m.Invoke($null, @())\r\n    }\r\n\r\n    $paths = @{}\r\n    switch ($Scope)\r\n    {\r\n        'CurrentUser'\r\n        {\r\n            $p = & $invokeModuleMethod 'GetPersonalModulePath'\r\n            $paths.CurrentUser = $p\r\n        }\r\n\r\n        'AllUsers'\r\n        {\r\n            $p = & $invokeModuleMethod 'GetSharedModulePath'\r\n            $paths.AllUsers = $p\r\n        }\r\n\r\n        'System'\r\n        {\r\n            $p = & $invokeModuleMethod 'GetPSHomeModulePath'\r\n            $paths.System = $p\r\n        }\r\n\r\n        'WindowsPSSystem'\r\n        {\r\n            $p = & $invokeModuleMethod 'GetWindowsPowerShellPSHomeModulePath'\r\n            $paths.WindowsPSSystem = $p\r\n        }\r\n    }\r\n\r\n    return $paths\r\n}\r\n```",
      "created_at": "2018-11-07T06:25:56Z",
      "updated_at": "2018-11-14T00:33:42Z"
    },
    {
      "author": "fsackur",
      "author_association": "NONE",
      "body": "@rjmholt thanks very much for this, I'm using it in a module and, if I can get it working nicely, I'll publish it as a standalone script.\r\n\r\nI note that on 5.1 and 6.0.1 on WIndows, and 6.1 on Linux, there is no `GetWindowsPowerShellPSHomeModulePath` method; it is only available on 6.1 on WIndows, AFAICS.",
      "created_at": "2018-11-13T10:24:46Z",
      "updated_at": "2018-11-13T11:22:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Oh good point. Yes, I wrote that method for 6.1. Windows PowerShell should have some method like that in it, but I don\u2019t know what it is. The method I wrote is equivalent to just `\u201d${env:windir}\\System32\\WindowsPowerShell\\v1.0\\Modules\u201d`",
      "created_at": "2018-11-13T13:56:05Z",
      "updated_at": "2018-11-13T13:56:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the handy function, @rjmholt (also interesting to see the use of reflection to call the non-public methods - I hope we won't need that in the long run).\r\n\r\nIt seems that in Windows PowerShell only the method that returns the `CurrentUser` scope exists, so I've amended your function to add fallback values for Windows PowerShell.\r\n(I've also changed the name to `Get-StandardModulePath`, shortened `WindowsPSSystem` to `WinPSSystem` and I'm using an _ordered_ hashtable for the result, which makes the function v3+; btw, you forgot to rename a couple of instances of `WindowsSystem` to `WindowsPSSystem` in your recent edit).\r\n\r\n```powershell\r\n#requires -version 3\r\nfunction Get-StandardModulePath {\r\n  param(\r\n    [Parameter()]\r\n    [ValidateSet('AllUsers', 'CurrentUser', 'System', 'WinPSSystem')]\r\n    [string[]]\r\n    $Scope\r\n  )\r\n\r\n  if ($Scope -eq 'WinPSSystem' -and ($IsLinux -or $IsMacOs)) {\r\n    throw \"The scope '$Scope' does not exist on non-Windows platforms.\"\r\n  }\r\n\r\n  if (-not $Scope) {\r\n    $Scope = 'CurrentUser', 'AllUsers', 'System'\r\n    if (-not ($IsLinux -or $IsMacOS)) {\r\n      $Scope += 'WinPSSystem'\r\n    }\r\n  }\r\n\r\n  $invokeModuleMethod = {\r\n    $bindingFlags = [System.Reflection.BindingFlags]'static,nonpublic'\r\n    $m = [System.Management.Automation.ModuleIntrinsics].GetMethod($args[0], $bindingFlags)\r\n    $m.Invoke($null, @())\r\n  }\r\n\r\n  $paths = [ordered] @{}\r\n  switch ($Scope) {\r\n    'CurrentUser' {\r\n      $paths.CurrentUser = try {\r\n        & $invokeModuleMethod 'GetPersonalModulePath'\r\n      }\r\n      catch {\r\n        # WinPS fallback.\r\n        \"$(Split-Path $PROFILE)\\Modules\"\r\n      }\r\n    }\r\n\r\n    'AllUsers' {\r\n      $paths.AllUsers = try {\r\n        & $invokeModuleMethod 'GetSharedModulePath'\r\n      }\r\n      catch {\r\n        # WinPS fallback.\r\n        \"$env:ProgramFiles\\WindowsPowerShell\\Modules\"\r\n      }\r\n    }\r\n          \r\n    'System' {\r\n      $paths.System = try {\r\n        & $invokeModuleMethod 'GetPSHomeModulePath'\r\n      }\r\n      catch {\r\n        # WinPS fallback.\r\n        \"$PSHOME\\Modules\"\r\n      }\r\n    }\r\n\r\n    'WinPSSystem' {\r\n      $paths.WinPSSystem = try {\r\n        & $invokeModuleMethod 'GetWindowsPowerShellPSHomeModulePath'\r\n      }\r\n      catch {\r\n        # WinPS fallback.\r\n        \"$PSHOME\\Modules\"\r\n      }\r\n    }\r\n  }\r\n\r\n  return $paths\r\n}\r\n```",
      "created_at": "2018-11-13T22:31:22Z",
      "updated_at": "2018-11-13T22:31:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Yeah I opened this issue because I think those methods (or something like them) should really be a public API, since they are a contract with PSGet",
      "created_at": "2018-11-14T00:35:55Z",
      "updated_at": "2018-11-14T00:35:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, of course, @rjmholt; so another thank you for opening this issue.",
      "created_at": "2018-11-14T02:41:40Z",
      "updated_at": "2018-11-14T02:41:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11057, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:36:05Z",
      "updated_at": "2019-11-21T22:36:05Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT is there a reason #11057 is marked as closing this issue? I couldn't find any new mechanism to solve feature request in that PR",
      "created_at": "2019-11-28T01:25:39Z",
      "updated_at": "2019-11-28T01:25:39Z"
    }
  ],
  "created_at": "2018-06-15T18:21:16Z",
  "number": 7082,
  "state": "open",
  "title": "Get the default PSModulePath at runtime?",
  "updated_at": "2019-11-28T03:27:25Z"
}