{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2089",
  "author": "0xfeeddeadbeef",
  "body": "Fixes #2088 Provider-specific help cannot be loaded from MAML XML files because of incorrect XPath query.\n\nAlso includes these bugfixes:\n- WSManConfigProvider.GetHelpMaml: Tried to load XML from\n  MemoryStream that was created from file name string. Use XmlReader\n  instead.\n- WSManConfigProvider.GetHelpMaml: Use Path.Combine instead of\n  platform-specific directory separator character.\n- WSManConfigProvider.GetHelpMaml: CmdletHelpPath MAML XML element\n  attribute `ID` must be lowercase.\n\nI have no idea how to test this using Pester, -- affected classes seem to be difficult (or impossible?) to isolate in tests. I would appreciate any ideas.\n",
  "closed_at": "2016-09-13T22:14:46Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@0xfeeddeadbeef**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    </span>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-08-26T23:05:48Z",
      "updated_at": "2016-08-26T23:05:48Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "**@0xfeeddeadbeef**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\n<br />Thanks, MSBOT;\n",
      "created_at": "2016-08-26T23:10:36Z",
      "updated_at": "2016-08-26T23:10:36Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "The changes looks good. Can you add tests for this under: https://github.com/PowerShell/PowerShell/blob/master/test/powershell/engine/HelpSystem.Tests.ps1\n\nIn the test you could use Select-Xml to get the provider specific help for Get-Item like:\n\n``` PowerShell\n\n$Namespace = @{command = \"http://schemas.microsoft.com/maml/dev/command/2004/10\"; maml = \"http://schemas.microsoft.com/maml/2004/10\"; dev = \"http://schemas.microsoft.com/maml/dev/2004/10\"; msh = \"http://msh\"}\n\n$Path = \"$PSHome\\en-US\\System.Management.Automation.dll-help.xml\"\n\n$xPath = \"/msh:helpItems/msh:providerHelp/msh:CmdletHelpPaths/msh:CmdletHelpPath[@id='FileSystem']/command:command[command:details/command:verb='Get' and command:details/command:noun='Item']\"\n\n$op = Select-Xml -Path 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\en-US\\System.Management.Automation.dll-help.xml' -XPath $xPath  -Namespace $Namespace | Select-Object -ExpandProperty Node\n\n$op.description.para \n\n```\n\n$op.description.para should match the description returned from the \n\n``` PowerShell\n(get-help get-item).description\n```\n",
      "created_at": "2016-08-29T22:33:00Z",
      "updated_at": "2016-08-29T22:33:00Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Tests failed, get details here:  https://ci.appveyor.com/project/PowerShell/powershell/build/6.0.0-alpha.9-329/tests \n",
      "created_at": "2016-08-31T20:37:57Z",
      "updated_at": "2016-08-31T20:37:57Z"
    },
    {
      "author": "0xfeeddeadbeef",
      "author_association": "CONTRIBUTOR",
      "body": "I've added some basic tests, ran CI build multiple times and results are not good: [![works badge](https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg)](https://ci.appveyor.com/project/PowerShell/powershell/build/6.0.0-alpha.9-329)\n\nWhen invoked at AppVeyor, `Get-Help -Name \"$verb-$noun\" -Path $path` cmdlet returns **\"bare\" help**, i.e. **only command syntax**, - no description, no synopsis, no other details. It even fails to locate the default help. I was unable to find the root cause of this.\n\nThis happens at AppVeyor:\n\n```\nGet-Help -Name \"New-Item\" -Path 'Cert:\\' | Select-Object -ExpandProperty Synopsis\n\n# output\nNew-Item [-Path] <string[]> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\n\nNew-Item [[-Path] <string[]>] -Name <string> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\nThis output, obviously, will not match the text from help.xml.\n\nWhen run locally, using fresh & clean build, same cmdlet is able to load text from help.xml file:\n\n```\nGet-Help -Name \"New-Item\" -Path 'Cert:\\' | Select-Object -ExpandProperty Synopsis\n\n# output\nCreates new certificate stores in the LocalMachine store location.\n```\n\nAs for Linux (Travis CI), these tests would fail, because:\n1. Fresh build output does not contain help.xml files, Pester test must run `Update-Help` to retrieve them; but `Update-Help` is not yet supported on Linux (It is using Windows Cabinet API internally). Without `Update-Help`, there will be no help.xml files to load provider-specific help from.\n2. `Cert:\\` and `WSMan:\\` providers are not yet supported on non-Windows platforms (Correct me if I'm wrong).\n\nI've disabled these tests when build is not running on Windows.\n\nLooks like I am stuck here.\n\n@adityapatwardhan @TravisEz13 Any ideas?\n",
      "created_at": "2016-08-31T20:40:15Z",
      "updated_at": "2016-08-31T20:42:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@0xfeeddeadbeef , to build the same way and run the same tests which are failing, please run the following on windows from the root of the PowerShell repo:\n\n```\nImport-Module .\\tools\\appveyor.psm1\nInvoke-AppVeyorFull\n```\n\nYou may need to rebase the latest changes as this command was only added recently.\n**Warning**: this will rerun `start-psbootstrap`\n",
      "created_at": "2016-08-31T20:51:54Z",
      "updated_at": "2016-08-31T20:51:54Z"
    },
    {
      "author": "0xfeeddeadbeef",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Thank you. That's really useful tip. I was able to attach a debugger and I think I'm onto something: when running with generated **n**ative **i**mages, `ProviderBase.ProviderInfo.HelpFile` property returns something like this: `OriginalAssemblyName.ni.dll-Help.xml` - notice the `ni` in the name. Looks like this bug is burrowed even deeper. I'll try to figure it out...\n",
      "created_at": "2016-08-31T21:33:38Z",
      "updated_at": "2016-08-31T21:33:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@0xfeeddeadbeef No Problem, it's a very recent change.  I haven't even documented it yet.  \n",
      "created_at": "2016-09-01T00:02:08Z",
      "updated_at": "2016-09-01T00:02:08Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@0xfeeddeadbeef It seems all the tests are passing. Are more changes expected for this issue?\n",
      "created_at": "2016-09-12T21:20:35Z",
      "updated_at": "2016-09-12T21:20:35Z"
    },
    {
      "author": "0xfeeddeadbeef",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan That's all. No more changes.\n",
      "created_at": "2016-09-12T23:16:54Z",
      "updated_at": "2016-09-12T23:16:54Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": ":shipit: Looks good to me.\n",
      "created_at": "2016-09-13T17:25:42Z",
      "updated_at": "2016-09-13T17:25:59Z"
    }
  ],
  "created_at": "2016-08-26T23:05:45Z",
  "number": 2089,
  "state": "closed",
  "title": "Use prefixed QNames in XPath expressions used by all implementations of ICmdletProviderSupportsHelp interface",
  "updated_at": "2016-09-13T22:14:47Z"
}