{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8173",
  "author": "LyleCorbin",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n```\r\nPS > type .\\error.ps1\r\n[Cmdletbinding()]\r\nparam()\r\n\r\n\"hello\"\r\n\"world\"\r\n\r\n\r\n\r\n\r\n    1/0\r\n\r\nPS > .\\error.ps1\r\nhello\r\nworld\r\nAttempted to divide by zero.\r\nAt D:\\junk\\error.ps1:10 char:5\r\n+     1/0\r\n+     ~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : RuntimeException\r\n\r\nPS > $ErrorActionPreference = \"Stop\"\r\nPS > .\\error.ps1\r\nhello\r\nworld\r\nD:\\junk\\error.ps1 : Attempted to divide by zero.\r\nAt line:1 char:1\r\n+ .\\error.ps1\r\n+ ~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [error.ps1], RuntimeException\r\n    + FullyQualifiedErrorId : RuntimeException,error.ps1\r\n```\r\n\r\n**Note incorrect line number being reported on second invocation when ErrorActionPreference equals \"Stop\"**\r\n\r\nThis can also be reproduced by putting \"$ErrorActionPreference = \"Stop\" at line 3 of the script.\r\n\r\nI always set ErrorActionPreference to Stop at the start of my scripts, and also have ErrorActionPreference set to \"Stop\" always in my environment for improved robustness as I write scripts, As a result this issue is very problematic. The correct line number can be obtained by digging into $Error but that is a pain.\r\n\r\nThis started happening somewhere around the v5 release. Prior to that the correct line number was always reported. This can also be reproduced by using -ErrorAction Stop at a particular invocation, although that is a less compelling scenario.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18272.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18272.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Note that the exception due to `-ErrorAction Stop` wraps the ErrorRecord that has the correct line number.  Unless we can determine if there's value in wrapping the ErrorRecord, perhaps the best thing is just to not wrap so the right line number is shown without the user having to dig into the exception for it.",
      "created_at": "2018-11-02T00:48:24Z",
      "updated_at": "2018-11-02T00:48:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Wouldn't this result in deploying the contents of defined module functions as well?\n\nIn most cases an error that is emitted is due primarily to user input, if the script or module is designed well. As such, I would contend that it makes more sense to show the user just the command call as it does now, as for many third party module functions  the innards are less relevant than the call to the command, which probably passed it the bad parameter in the first place... I think.",
      "created_at": "2018-11-02T00:52:47Z",
      "updated_at": "2018-11-02T00:52:47Z"
    },
    {
      "author": "LyleCorbin",
      "author_association": "NONE",
      "body": "From the perspective of the script author having the correct line number is of course very important. That is primarily who the information is for, I would think. If the thinking is that the user doesn't care, which is a legit position, then the line number should be omitted entirely. But having incorrect information is bad for either case.\r\n\r\nOmitting the information doesn't help anyone - I would argue it makes no difference to an end user (non-author), while it only hurts the author's ability to troubleshoot. Putting the correct info makes life substantially better for the author, while again making little to no difference to the end user.",
      "created_at": "2018-11-02T01:02:16Z",
      "updated_at": "2018-11-02T01:02:16Z"
    },
    {
      "author": "LyleCorbin",
      "author_association": "NONE",
      "body": "I would like to re-iterate as well that I'm 100% certain this is a regression from at least v4, when I was doing extensive script authoring and never saw this problem. Unfortunately, I don't know exactly when the behavior changed.",
      "created_at": "2018-11-02T01:04:30Z",
      "updated_at": "2018-11-02T01:04:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Not wrapping the ErrorRecord with an exception when $ErrorActionPreference = Stop by cause unintended side effects.  Another option to address the user experience issue is updating the default error view to show ErrorRecords and/or InnerExceptions https://github.com/PowerShell/PowerShell/issues/3647",
      "created_at": "2018-11-02T01:20:18Z",
      "updated_at": "2018-11-02T01:20:18Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "Note also difference in the script name for two reported errors:\r\n```text\r\nAt D:\\junk\\error.ps1:10 char:5\r\nAt line:1 char:1\r\n```\r\n\r\nFirst thing points to line 10 in the script. Second one points to line 1 in the console, not in the script.",
      "created_at": "2018-11-02T13:05:06Z",
      "updated_at": "2018-11-02T13:05:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That is certainly an unusual discrepancy, indeed. Two sources of information here in the one error message! \ud83d\ude04 ",
      "created_at": "2018-11-02T13:07:37Z",
      "updated_at": "2018-11-02T13:07:37Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "Save this example as a `loc.ps1` file and run it::\r\n```PowerShell\r\nfunction diverr {\r\n    [CmdletBinding()]\r\n    param()\r\n    1/0  # line 4\r\n}\r\ndiverr -ErrorAction Stop  # line 6\r\n```\r\n\r\nWith `-ErrorAction Stop` error is reported in line 6. Without `-ErrorAction Stop`, error is reported in line 4.",
      "created_at": "2018-11-02T13:12:47Z",
      "updated_at": "2018-11-02T13:18:11Z"
    },
    {
      "author": "kganjam",
      "author_association": "NONE",
      "body": "I also hit this issue of incorrectly displayed error line numbers when debugging a script that has $ErrorAction=\"Stop\".\r\n\r\nFor now, my workaround is to set the prompt function in my profile to include a check for a nested error:\r\n\r\n```\r\nFunction prompt {\r\n    if (-not $?) {\r\n        $err = $error[0]\r\n        $cmdId = $(get-history -Count 1).id\r\n        # Prevent redisplay of the error if there was no new command (e.g., just pressing enter)\r\n        if ($cmdId -ne $global:profile_lastCmdId) {  \r\n        if ($err | gm ErrorRecord) {\r\n        if ($err.ErrorRecord | gm Exception) {\r\n        if ($err.ErrorRecord.Exception | gm ErrorRecord) {\r\n            $err.ErrorRecord.Exception.ErrorRecord | out-Host\r\n    }}}}}\r\n\r\n    # ... any additional prompt logic\r\n    \"PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1))\"\r\n\r\n     $global:profile_lastCmdId = $(get-history -Count 1).id\r\n}\r\n```\r\n\r\nSeems to work reasonably well, but won't save the initial headache for those running into this issue for the first time. \r\n",
      "created_at": "2021-05-28T07:38:11Z",
      "updated_at": "2021-05-28T23:05:04Z"
    }
  ],
  "created_at": "2018-11-02T00:43:46Z",
  "number": 8173,
  "state": "open",
  "title": "Errors that terminate script due to -ErrorAction Stop do not show correct line number",
  "updated_at": "2021-05-28T23:05:04Z"
}