{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12294",
  "author": "NoMoreFood",
  "body": "# PR Summary\r\n\r\n- Adjusted behavior of GetCorrectCasedPath() which attempts to search for the file on the file system in order to normalize its case.  Since some file systems support wildcard-type characters (e.g. MacOS) in path names so these need to be skipped to avoid erroneous resolution.\r\n- Added tests to detect this behavior.\r\n\r\n## PR Context\r\n\r\nThis corrects the behavior where Set-Location fails to change directory or changes to an entirely different child directory when the target directory contains characters such as '*'.  Similarly, Get-Item also returns errant information.\r\n\r\nResolves: https://github.com/PowerShell/PowerShell/issues/12299\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee This is a breaking change.  Please review.  We made a similar change for matching commands.  Where we prefer literal matches over wildcard matches.",
      "created_at": "2020-04-11T20:50:45Z",
      "updated_at": "2020-04-11T20:50:45Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 So I can categorize these correctly in the future, can you educate me as to why this would be considered a breaking change?",
      "created_at": "2020-04-11T22:20:07Z",
      "updated_at": "2020-04-11T22:20:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agrees that the current behavior is broken where:\r\n\r\n```powershell\r\nset-location -literalpath ?\r\n```\r\n\r\nmust treat `?` as a literal value and not a wildcard.  We don't believe this is a breaking change that causes concern, however, we are concerned with the location of the code change in a helper that is used by many code paths which itself may introduce a regression somewhere else.",
      "created_at": "2020-04-15T22:22:31Z",
      "updated_at": "2020-04-15T22:22:31Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'm not sure your change addressed the committee's concern about the location of the change.",
      "created_at": "2020-05-20T22:13:31Z",
      "updated_at": "2020-05-20T22:13:31Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Sorry, the day job has distracted me from following through on this and one other PR.  I honestly thought the \"location of the code change\" comment was sort of meant to be rhetorical.  The bug itself can be scoped to that helper function: In what scenario would I possibly pass a literal, existing directory path to GetCorrectCasedPath() and it would be acceptable to get back a reference to an existing different directory?  The function exists solely to normalize case within a path --- it should NEVER be returning a path to a different file.",
      "created_at": "2020-05-21T07:30:47Z",
      "updated_at": "2020-05-21T07:31:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-28T14:00:08Z",
      "updated_at": "2020-05-28T14:00:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-17T14:00:14Z",
      "updated_at": "2020-06-17T14:00:14Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "Is this ready for merge or are we still waiting for reviews? @TravisEz13 ",
      "created_at": "2020-06-25T00:53:00Z",
      "updated_at": "2020-07-10T03:52:44Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> @TravisEz13 Sorry, the day job has distracted me from following through on this and one other PR. I honestly thought the \"location of the code change\" comment was sort of meant to be rhetorical. The bug itself can be scoped to that helper function: In what scenario would I possibly pass a literal, existing directory path to GetCorrectCasedPath() and it would be acceptable to get back a reference to an existing different directory? The function exists solely to normalize case within a path --- it should NEVER be returning a path to a different file.\r\n\r\nHere is the direct call:\r\nhttps://sourcegraph.com/search?q=repo:powershell/powershell+GetCorrectCasedPath&patternType=literal\r\n\r\nThen, `NormalizePath` is used in these places:\r\nhttps://sourcegraph.com/search?q=repo:powershell/powershell+content:%22Microsoft.PowerShell.Commands%22+content:%22NormalizePath%28%22+lang:c%23++-file:%22src/System.Management.Automation/namespaces/RegistryProvider.cs%22&patternType=literal#1\r\n\r\nWe need to make sure we didn't break any of these calls.",
      "created_at": "2020-10-27T20:49:41Z",
      "updated_at": "2020-10-27T20:49:41Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'll let the Provider working group review from here.",
      "created_at": "2020-10-27T20:51:12Z",
      "updated_at": "2020-10-27T20:51:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The GetCorrectCasedPath() is not in right place. This would only have to be used in Formatting System and completors.\r\n",
      "created_at": "2020-10-28T05:45:43Z",
      "updated_at": "2020-10-28T05:45:43Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 All of the non-file system paths you reference end up calling a base class version or provider-specific version of NormalizePath() so this change luckily does not affect them.\r\n\r\n@iSazonov I think that might be splitting hairs to some degree.  When somebody does a Set-Location to a specific path, do you want the resultant path at the prompt to be case-accurate or not?  I think it might be hard to address all the \"what if\" sort of cases.  Regardless, this PR was authored to address the \"bug\" within GetCorrectCasedPath() itself so I was hoping not to boil the ocean to get this committed. :-)",
      "created_at": "2020-11-04T11:37:46Z",
      "updated_at": "2020-11-04T11:37:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-11T14:00:06Z",
      "updated_at": "2020-11-11T14:00:06Z"
    }
  ],
  "created_at": "2020-04-10T14:42:37Z",
  "number": 12294,
  "state": "open",
  "title": "Address Set-Location/Get-Item Issue With ?/* Characters",
  "updated_at": "2021-11-11T22:00:52Z"
}