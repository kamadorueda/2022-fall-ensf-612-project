{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11459",
  "author": "jazzdelightsme",
  "body": "**And** exceptions fail to display at all.\r\n\r\n# Steps to reproduce\r\n\r\nDon't execute these in one single invocation; each line should be entered separately at the interactive prompt:\r\n```powershell\r\nif foo\r\n$error\r\n$error.Count\r\n$foo = $error[-1]\r\n$foo\r\n$error.Count\r\n```\r\n\r\n# Expected behavior\r\nThe first line should yield an error, because \"`if foo`\" is not valid syntax. And then when we execute \"`$error`\" we should see the contents of the `$error` variable, which should be that same error. And then `$error.Count` should yield \"1\". And then when we assign that error into `$foo`, and then output `$foo`, we should see the error again. And `$error.Count` should stay 1.\r\n\r\n# Actual behavior\r\nWhen `$error` is output, we get \r\n\r\n```none\r\nInvalidOperation: An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..\r\n```\r\nAnd `$error.Count` is 4, not 1.\r\n\r\nAnd then when we output `$foo`, get get... nothing. (well, a blank line)\r\n\r\nAnd then $error.Count is 6.\r\n\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.1\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-12-31T05:09:14Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think @SteveL-MSFT recently submitted a PR to fix this one... \r\n\r\nYep! Was fixed in https://github.com/PowerShell/PowerShell/pull/11415 and should be in the daily build (and hopefully in GA). \ud83d\ude42 ",
      "created_at": "2019-12-30T22:22:38Z",
      "updated_at": "2019-12-30T22:22:38Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks! I definitely hope this gets fixed for GA--it's enough trouble already when you have to deal with some sort of an exception, and a bug like this which greatly complicates the troubleshooting task is especially vexing.\r\n\r\nIs there a place I can download a daily build, so that I don't have to build myself? (What I really need is the PowerShell SDK NuGet package; I'm trying to consume that in a separate project, and this Issue is a major impediment to investigating my own bugs.)",
      "created_at": "2019-12-31T02:17:01Z",
      "updated_at": "2019-12-31T02:17:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not repo on latest build.",
      "created_at": "2019-12-31T05:09:14Z",
      "updated_at": "2019-12-31T05:09:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme as far as I'm aware, the daily build is only compiled for the main PowerShell application project itself at the moment.\r\n\r\nI'm not sure if there's a way to configure it to also build a version of the SDK that can be consumed by other applications; I'm sure that would help a lot of application developers get on top of new releases and be able to road-test things ahead of time.  @TravisEz13 is there anything available for that use case?",
      "created_at": "2019-12-31T13:33:42Z",
      "updated_at": "2019-12-31T13:33:42Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "I wouldn't object to someone handing me an easier way, but I was able to patch my local .nuget cache with a binary from here: https://powershell.visualstudio.com/PowerShell/_build/results?buildId=42139&view=artifacts&type=publishedArtifacts \r\n\r\nI was worried that nuget would notice that hashes didn't match or something, but no--it seems to be letting me get away with it so far.\r\n",
      "created_at": "2019-12-31T20:39:15Z",
      "updated_at": "2019-12-31T20:39:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If you just want to test the daily build, you can use https://github.com/PowerShell/PowerShell/blob/master/tools/install-powershell.ps1:\r\n\r\n```powershell\r\niex \"& { $(irm https://aka.ms/install-powershell.ps1) } -Daily\"\r\n```\r\n\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-01-08T03:49:25Z",
      "updated_at": "2020-01-08T03:49:27Z"
    }
  ],
  "created_at": "2019-12-30T22:10:33Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11459,
  "state": "closed",
  "title": "New error view stuff blows up when a non-ErrorRecord is in $error",
  "updated_at": "2020-01-08T03:49:27Z"
}