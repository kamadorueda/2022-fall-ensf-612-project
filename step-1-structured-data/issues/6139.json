{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6139",
  "author": "alx9r",
  "body": "Scriptblocks seem to be PowerShell's analog to other languages' anonymous functions.  I'm finding scriptblock's role as anonymous anonymous functions critical to writing maintainable code.  Unlike anonymous functions in C#, for example, how a scriptblock is invoked seems to affect its behavior.  The method of invocation seems affect behavior in (at least) the following ways:\r\n\r\n1. Whether variable assignments in the scriptblock have side-effects in the definition's scope.  \r\n2. Whether `param()` can be used.\r\n\r\nConsider the following code:\r\n\r\n```PowerShell\r\nNew-Module m {\r\n    $v = 'c'\r\n    function f {\r\n        param($sb)\r\n        % $sb\r\n    }\r\n    function g {\r\n        param($sb)\r\n        & $sb -p1 'p1 is bound'\r\n    }\r\n} | Out-Null\r\n\r\n'--- & ---'\r\n& {\r\n    $v = 'v is not modified by g'\r\n    g -sb {\r\n        param( $p1 )\r\n        process\r\n        {\r\n            $p1\r\n            $v = 'modified by g'\r\n        }\r\n    }\r\n    $v\r\n}\r\n\r\n'--- % ---'\r\n& {\r\n    $v = 'v is not modified by f'\r\n    f -sb {\r\n        param( $p1 )  # <== these line are unused because % does not \r\n        $p1           # <== use parameter binding on this scriptblock\r\n        $v = 'v is modified by f'\r\n    }\r\n    $v\r\n}\r\n```\r\n\r\nwhich outputs \r\n\r\n```none\r\n--- & ---\r\np1 is bound\r\nv is not modified by g\r\n--- % ---\r\nv is modified by f\r\n```\r\n\r\nThis seems to demonstrate the following:\r\n\r\n* assignments in scriptblocks invoked using `&` **do not** have side effects in the definition's scope\r\n* assignments in scriptblocks invoked using `%` **do** have side effects in the definition's scope\r\n* `&` supports `param()`\r\n\r\nJudging from [its help topic](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object?view=powershell-6), `%` does not support using `param()`.\r\n\r\nThe following table summarizes the behavior of `%` and `&` in these respects:\r\n\r\n| Invocation Method | supports using `param()` | variable assignment has side-effects |\r\n|-------------------|--------------------------|--------------------------------------|\r\n| %                 | no                       | yes                                  |\r\n| &                 | yes                      | no                                   |\r\n\r\nIs there a way to invoke scriptblocks that supports using both `param()` and variable assignments with side effects?",
  "closed_at": "2018-02-09T00:57:53Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`ForEach-Object` isn't really meant to be used that way, though it is sometimes abused for it's side effects.\r\n\r\nYou probably want the dot source operator, like `. $sb -p1 'p1 is bound'`",
      "created_at": "2018-02-08T18:43:29Z",
      "updated_at": "2018-02-08T18:43:29Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">ForEach-Object isn't really meant to be used that way, though it is sometimes abused for it's side effects.\r\n\r\nCould you elaborate on why relying on `ForEach-Object`'s side effects is abuse?\r\n\r\nHere is an example typical of how I rely on its side effects:\r\n\r\n```PowerShell\r\n$in = @{\r\n    a1 = 'ayeone'\r\n    a2 = 'ayetwo'\r\n    b1 = 'beone'\r\n    b2 = 'betwo'\r\n}\r\n\r\n$out = @{}\r\n\r\n$in.Keys |\r\n    where {$_ -match 'a'} |\r\n    foreach { $out.$_ = $in.$_ }\r\n```\r\n\r\nIs there something problematic about this use?\r\n\r\n-----\r\n\r\n>You probably want the dot source operator, like `. $sb -p1 'p1 is bound'`\r\n\r\nInteresting.  I think you are probably right.  I hadn't considered this because neither [about_Operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-6) nor [the language spec](https://www.microsoft.com/en-us/download/details.aspx?id=36389) makes any mention of `.` having an effect on the scope where the scriptblock is defined.  Instead the (rather terse) dot-source sections in those documents espouses the dot-source operator's effect on the \"current scope\".  Affecting the \"current scope\" at the `.` call site would be awkward in this usage.  It seems, however, that is not what `.` does.\r\n\r\nMy prior understanding of `.` seems to have been based on the statements\r\n\r\n>Runs a script in the current scope so that any functions, aliases, and variables that the script creates are added to the current scope.\r\n\r\nin about_Operators, and\r\n\r\n>However, when dot source notation is used, no new scope is created before the command is executed, so additions/changes it would have made to its own local scope are made to the current scope instead. \r\n\r\nin the language spec.\r\n\r\nBoth of those statements are inconsistent with the behavior of\r\n\r\n```PowerShell\r\nNew-Module n {\r\n    $u = 'module'\r\n    function a {\r\n        param($sb)\r\n        $u = 'function'\r\n        'input_object' | . $sb -p1 'p1 is bound'\r\n        \"u: $u\"\r\n        \"t: $t\"\r\n    }\r\n} | Out-Null\r\n\r\n$u = 'root'\r\n\r\n& {\r\n    $u = 'u is not modified by a'\r\n    a -sb {\r\n        param($p1)\r\n        process\r\n        {\r\n            \"DollarBar: $_\"\r\n            $p1\r\n            $u = 'u is modified by a'\r\n            $t = 'created variable'\r\n        }\r\n    }\r\n    $u\r\n}\r\n```\r\n\r\nwhich outputs\r\n\r\n```none\r\nDollarBar: input_object\r\np1 is bound\r\nu: function\r\nt: \r\nu is modified by a\r\n```\r\n\r\nThat seems to demonstrate that neither \"any...variables that the script creates are added to the current scope\" nor \"additions/changes it would have made to its own local scope are made to the current scope instead\" are true, in general.  It seems that if those statements were true, the output would have included `u: u is modified by a` and `t: created variable` which it did not.\r\n\r\nI'm surprised by the behavior of `.` here.  It seems contrary to the documentation and to the behavior when dot-sourcing files. Could you shed some light on what is happening with respect to scope when using the `.` dot-source operator in this manner?  ",
      "created_at": "2018-02-08T21:32:52Z",
      "updated_at": "2018-02-08T21:32:52Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "> Could you elaborate on why relying on ForEach-Object's side effects is abuse?\r\n\r\nMaybe I overstated it, but if you aren't using `ForEach-Object` in the pipeline, you are using it in a way that it wasn't designed for, so surprising things could happen, that's all. It's also not intuitive for readers of the script.\r\n\r\n> Could you shed some light on what is happening with respect to scope when using the . dot-source operator in this manner?\r\n\r\nA script block is associated with a `SessionState` which is closely related to a module, but there is a `SessionState` associated with script blocks not in a module, we could call that the global `SessionState`.\r\n\r\nA script block is bound to a `SessionState` immediately if you use the `{ ... }` syntax, or upon the first invocation if the script block was created some other way, e.g. `[ScriptBlock]::Create()`. The binding is to the active `SessionState`.\r\n\r\nInvoking a script block may involve changing the active `SessionState` if the current `SessionState` doesn't match the one bound to the script block.\r\n\r\nEach `SessionState` has it's own scope stack.\r\n\r\nNormally, when invoking a script block (including a function or ps1 script file), a new scope is created after the `SessionState` has been updated, unless you use the `dot source` invocation operator, in which case, the current scope in the active `SessionState` is used instead.\r\n\r\nOne last detail - there are at most 2 relevant `SessionState` instances involved when looking for scoped items like a variable. If the scoped item is not found in the current `SessionState`, there may be a parent `SessionState` that links directly to the global scope. This is to prevent accidentally finding something in an unexpected scope as this example demonstrates:\r\n\r\n```powershell\r\n$null = New-Module M {\r\n    $v = \"M.v\" # Never found\r\n    function a { b }\r\n}\r\n$null = New-Module N {\r\n    function b { $v <# Finds global.v #> }\r\n}\r\n$v = \"global.v\"\r\nfunction f { $v }\r\nfunction g {\r\n    $v = \"g.v\"\r\n    a # Finds global.v\r\n    f # Finds g.v\r\n}\r\na\r\nb\r\ng\r\n```",
      "created_at": "2018-02-08T21:58:57Z",
      "updated_at": "2018-02-09T00:56:32Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "I think I see how this works now.  Here is my understanding of what is happening to scope and session state:\r\n\r\n```PowerShell\r\nNew-Module p {\r\n    $mpss = $ExecutionContext.SessionState # module p session state\r\n    $v = 'p.v' <# This is never accessed because it is associated with \r\n                  $mpss, and no other scriptblock associated with \r\n                  $mpss accesses $v #>\r\n    function d {\r\n        <# the session state associated with this scriptblock is $mpss #>\r\n        param($sb)\r\n        # active session state is $mpss\r\n        . $sb # changes active session state to $gss\r\n        # active session state is $mpss again\r\n    }\r\n    function e {\r\n        param($sb)\r\n        & $sb <# changes active session state to $gss,\r\n                 and adds a new scope onto $gss's scope stack #>\r\n    }\r\n\r\n} | Out-Null\r\n\r\n$gss = $ExecutionContext.SessionState # \"global\" session state\r\n\r\n$v = 'global.v'\r\n\r\n& { <# this pushes a new scope onto $gss's scope stack #>\r\n    $v = 'global.v-1'\r\n    d -sb {\r\n        <# The session state associated with this scriptblock is $gss.\r\n        So when this scriptblock is invoked from module p, the \r\n        active session state is switched to $gss.#>\r\n\r\n        <# Because this is invoked using . no scope is added to $gss's\r\n           scope stack, so an assignment to $v overwrites 'global.v-1' #>\r\n\r\n        $v = 'modified global.v-1'\r\n\r\n        <# When this scriptblock completes its execution after being\r\n        invoked from module p, the active session state is switched back\r\n        to $mpss.#>\r\n    }\r\n    $v # 'modified global.v-1'\r\n} <# this pops the last scope from $gss's scope stack #>\r\n\r\n& {\r\n    $v = 'global.v-1'\r\n    e -sb {\r\n        <# Because this is invoked using & a new scope is added to $gss's\r\n           scope stack, so an assignment to $v creates $v in the new scope\r\n           without overwriting 'global.v-1'#>\r\n\r\n        $v = 'global.v-2'\r\n    }\r\n    $v # 'global.v-1'\r\n}\r\n```\r\n\r\nDoes this look correct @lzybkr?",
      "created_at": "2018-02-09T00:50:26Z",
      "updated_at": "2018-02-09T00:50:26Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@alx9r - yes, that looks correct.",
      "created_at": "2018-02-09T00:55:26Z",
      "updated_at": "2018-02-09T00:55:26Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Thanks very much for your help @lzybkr.",
      "created_at": "2018-02-09T00:57:52Z",
      "updated_at": "2018-02-09T00:57:52Z"
    }
  ],
  "created_at": "2018-02-08T17:39:28Z",
  "labels": [
    "Issue-Question",
    "WG-Language",
    "Resolution-Answered"
  ],
  "number": 6139,
  "state": "closed",
  "title": "Is there a way to invoke a scriptblock in its definition's scope and use `param()`?",
  "updated_at": "2018-03-24T18:10:48Z"
}