{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13153",
  "author": "ephos",
  "body": "- [x] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [x] Search the existing issues.\r\n- [x] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [x] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n## Steps to reproduce\r\n\r\nRunning the following command:\r\n\r\n```powershell\r\nInvoke-RestMethod -Method Get -Uri \"https://application/api/endpoint\" -UseDefaultCredentials -ContentType 'application/json' -ErrorAction Stop\r\n```\r\n\r\nThis consistently works on **PowerShell 7.0.2** however on both **PowerShell 7.1.0-preview.2** and **PowerShell 7.1.0-preview.5** it consistently fails with the following error:\r\n\r\n> Invoke-RestMethod: The token supplied to the function is invalid\r\n\r\nThis feels like it could be related to how `Invoke-RestMethod` is handling Kerberos identities when `-UseDefaultCredentials` is specified and given that it is possibly a bug in .Net 5.0?\r\n\r\n## Expected behavior\r\n\r\nThe REST API endpoint returns a PSCustomObject.\r\n\r\n## Actual behavior\r\n\r\n> Invoke-RestMethod: The token supplied to the function is invalid\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.5\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\nGet-Error -Newest 1\r\n\r\nException             :\r\n    Type            : System.ComponentModel.Win32Exception\r\n    NativeErrorCode : -2146893048\r\n    ErrorCode       : -2147467259\r\n    TargetSite      :\r\n        Name          : GetOutgoingBlob\r\n        DeclaringType : System.Net.NTAuthentication, System.Net.Http, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n        MemberType    : Method\r\n        Module        : System.Net.Http.dll\r\n    StackTrace      :\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(Byte[] incomingBlob, Boolean throwOnError, SecurityStatusPal& statusCode)\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(String incomingBlob)\r\n   at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean isProxyAuth,\r\nHttpConnection connection, HttpConnectionPool connectionPool, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate,\r\nBoolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts,\r\nCancellationToken callerToken, Int64 timeoutTime)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetResponse(HttpClient client, HttpRequestMessage request, Boolean keepAuthorization)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n    Message         : The token supplied to the function is invalid\r\n    Source          : System.Net.Http\r\n    HResult         : -2147467259\r\nCategoryInfo          : NotSpecified: (:) [Invoke-RestMethod], Win32Exception\r\nFullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\nInvocationInfo        :\r\n    MyCommand        : Invoke-RestMethod\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 6\r\n    Line             : Invoke-RestMethod -Method Get -Uri \"https://application/api/endpoint\" -UseDefaultCredentials -ContentType 'application/json'\r\n-ErrorAction Stop\r\n    PositionMessage  : At line:1 char:1\r\n                       + Invoke-RestMethod -Method Get -Uri \"https://application/api/endpoint \u2026\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : Invoke-RestMethod\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n",
  "closed_at": "2020-10-14T22:00:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell uses HttpClient API. You could create a simple repo on C# and report the issue in .Net 5.0 Runtime repo.",
      "created_at": "2020-07-13T11:38:19Z",
      "updated_at": "2020-07-13T11:38:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Both #12993 and this issue look like regression in `Invoke-RestMethod` cmdlet. @iSazonov I think we need to keep the issue open to drive the investigation.",
      "created_at": "2020-07-13T15:50:55Z",
      "updated_at": "2020-07-13T15:50:55Z"
    },
    {
      "author": "pcasalinho",
      "author_association": "NONE",
      "body": "I think this might be the same problem...\r\n\r\n```powershell\r\nImport-Module \"Z:\\CODE\\DevOpsCode\\Modules\\Send-OwaMail\\Microsoft.Exchange.WebServices.dll\"\r\n$Credential = Get-Credential username\r\n\r\n$_ExchangeVersion = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP2\r\n$_service = New-Object Microsoft.Exchange.WebServices.Data.ExchangeService($_ExchangeVersion)\r\n$_service.Url = new-object Uri(\"https://mail.server.domain/EWS/Exchange.asmx\")\r\n\r\n$_service.Credentials = $Credential.GetNetworkCredential()\r\n\r\n$_SentItems = New-Object Microsoft.Exchange.WebServices.Data.FolderId([Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::SentItems,$From)\r\n$_SentItems = [Microsoft.Exchange.WebServices.Data.Folder]::Bind($_service,$_SentItems)\r\n```\r\n\r\n- **PSVersion 5.1.19041.1**: We can bind without problems\r\n- **PSVersion 7.1.0-preview.6**: MethodInvocationException: Exception calling \"Bind\" with \"2\" argument(s): \"The token supplied to the function is invalid\"",
      "created_at": "2020-08-25T08:31:29Z",
      "updated_at": "2020-08-25T08:31:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Web cmdlets use `-SslProtocol Default` by default that is \"use OS default\". You could try to use explicit value Tls, Tls11, Tls12.\r\nAlso you could turn on CAPI log on Windows and see messages there to investigate why TLS negotiation fail.\r\nI guess the client asks a server with a disabled protocol.",
      "created_at": "2020-08-25T11:09:52Z",
      "updated_at": "2020-08-25T11:09:52Z"
    },
    {
      "author": "pcasalinho",
      "author_association": "NONE",
      "body": "> Web cmdlets use `-SslProtocol Default` by default that is \"use OS default\". You could try to use explicit value Tls, Tls11, Tls12.\r\n> Also you could turn on CAPI log on Windows and see messages there to investigate why TLS negotiation fail.\r\n> I guess the client asks a server with a disabled protocol.\r\n\r\nIs that diferent if using WindowsPowershell vs PowerShell (\"core\") 7.x.x ?\r\nMaybe PowerShell (\"core\") 7.x.x uses Openssl instead of Windows Certs?",
      "created_at": "2020-08-25T11:54:57Z",
      "updated_at": "2020-08-25T11:54:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like this specific issue may have been fixed with https://github.com/dotnet/runtime/pull/40222",
      "created_at": "2020-08-25T20:45:07Z",
      "updated_at": "2020-08-25T20:45:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is that diferent if using WindowsPowershell vs PowerShell (\"core\") 7.x.x ?\r\nMaybe PowerShell (\"core\") 7.x.x uses Openssl instead of Windows Certs?\r\n\r\nPowerShell 7 is based on .Net 5 and new HttpClient vs Windows PowerShell - .Net Framework and old WebClient.\r\n.Net 5 utilizes OS API on low level. OpenSSL is used on Unix only.",
      "created_at": "2020-08-26T05:24:01Z",
      "updated_at": "2020-08-26T05:24:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately that fix didn't make it into .NET 5 preview 8 (as it repro'd for me).  Will need to validate with .NET 5 RC1.",
      "created_at": "2020-08-28T05:14:49Z",
      "updated_at": "2020-08-28T05:14:49Z"
    },
    {
      "author": "ephos",
      "author_association": "NONE",
      "body": "@SteveL-MSFT @iSazonov - I tested today against PowerShell 7.1.0-rc.1 and can confirm that it targeting dotnet 5.0-RC.1 fixes the bug.",
      "created_at": "2020-09-30T17:03:30Z",
      "updated_at": "2020-09-30T17:03:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-10-14T22:00:04Z",
      "updated_at": "2020-10-14T22:00:04Z"
    }
  ],
  "created_at": "2020-07-10T17:20:32Z",
  "number": 13153,
  "state": "closed",
  "title": "[Bug] Invoke-RestMethod: The token supplied to the function is invalid - PowerShell 7.1.0-preview.5",
  "updated_at": "2020-10-14T22:00:05Z"
}