{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12883",
  "author": "SeeminglyScience",
  "body": "/cc @TobiasPSP @rjmholt\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n[psmoduleinfo]::new{\r\n    function Invoke-InCallerContext {\r\n        [CmdletBinding()]\r\n        param()\r\n        end {\r\n            $sb = { $ExecutionContext.SessionState.Module.Name }\r\n            $ExecutionContext.InvokeCommand.InvokeScript($PSCmdlet.SessionState, $sb, @())\r\n        }\r\n    }\r\n\r\n    function Invoke-InCallerContextFixed {\r\n        [CmdletBinding()]\r\n        param()\r\n        end {\r\n            $sb = { $ExecutionContext.SessionState.Module.Name }\r\n            $ExecutionContext.InvokeCommand.InvokeScript($PSCmdlet.SessionState, $sb.Ast.GetScriptBlock(), @())\r\n        }\r\n    }\r\n\r\n    Export-ModuleMember -Function Invoke-InCallerContext, Invoke-InCallerContextFixed\r\n} | Import-Module -Force\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nPS> Invoke-InCallerContext\r\n# returns nothing\r\nPS> Invoke-InCallerContextFixed\r\n# returns nothing\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nPS> Invoke-InCallerContext\r\n# returns __DynamicModule_{guid here}\r\nPS> Invoke-InCallerContextFixed\r\n# returns nothing\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n---\r\n\r\nThis happens because the API sets the `ExecutionContext.EngineSessionState` instead of the `ScriptBlock.SessionState` like `& $module { }` syntax does.",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Very interesting. This looks like a bug @daxian-dbw ",
      "created_at": "2020-06-03T19:05:47Z",
      "updated_at": "2020-06-03T19:05:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah when you mentioned it on the panel I was confused because I thought I had tried it before and it just straight up didn't work.  Makes sense after looking at the source though.\r\n\r\nAlso probably better to open a new issue for this, but the API doesn't give you an option to specify if a new scope should be created.  As a workaround, you can (*but probably shouldn't*) do this:\r\n\r\n```powershell\r\n$module = [psmoduleinfo]::new($false)\r\n\r\n# Surprised this set accessor is public \ud83e\udd37\u200d\u2642\ufe0f\r\n$module.SessionState = $PSCmdlet.SessionState\r\n\r\n& $module { 'new scope in the target session state' }\r\n. $module { 'no new scope in the target session state' }\r\n```",
      "created_at": "2020-06-03T19:33:31Z",
      "updated_at": "2020-06-03T19:33:31Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience  `PSModuleInfo` was only intended to be a public facade for a module that already existed. Take a look at 'ModuleIntrinsics.cs` for the details of module construction. Really, the only recommended way to create a new module is with the `New-Module` cmdlet. Is that insufficient?",
      "created_at": "2020-06-05T17:46:42Z",
      "updated_at": "2020-06-05T17:46:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@bpayette I don't think that's what this issue is about at all. \r\n\r\n@SeeminglyScience was just demonstrating a hacky workaround that works in the meantime.",
      "created_at": "2020-06-05T18:51:26Z",
      "updated_at": "2020-06-05T18:51:26Z"
    },
    {
      "author": "fflaten",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the explanation and workaround @SeeminglyScience! \ud83c\udf89 This has been driving me nuts!\r\nHopefully it can be fixed soon, but it will still be broken in all prior versions including Windows PowerShell 5.1, so workaround or avoiding `InvokeScript` in these scenarios will have to be my long-term solutions.",
      "created_at": "2021-06-11T18:37:07Z",
      "updated_at": "2021-06-11T18:37:07Z"
    }
  ],
  "created_at": "2020-06-03T18:00:22Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 12883,
  "state": "open",
  "title": "CommandInvocationIntrinsics.InvokeScript(SessionState, ...) should strip ScriptBlock SessionState affinity",
  "updated_at": "2021-06-11T18:37:07Z"
}