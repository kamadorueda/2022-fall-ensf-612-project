{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10669",
  "author": "Jaykul",
  "body": "# Steps to reproduce\r\n\r\nTry to implement any interfaces that is intended to be implemented in terms of yourself, E.g. IEquatable, IComparable:\r\n\r\n```powershell\r\nclass ServerName : Object, System.IEquatable[ServerName] {\r\n    [string]$ComputerName\r\n    [bool] Equals([ServerName]$other) {\r\n        return $this.ComputerName.Equals($other.ComputerName);\r\n    }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nI should be able to write IEquatable<T> and IComparable<T> classes \r\n```\r\n\r\n# Actual behavior\r\nA runtime compile error:\r\n```none\r\nAn error occurred while creating the pipeline.\r\n+ CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException                                                                 + FullyQualifiedErrorId : RuntimeException                                  \r\n```\r\n\r\n# Environment data\r\n\r\nAny version of PowerShell since classes were introduced, up to and including 7 Pre 4",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's obviously not the same, but just to mention an interim workaround: use `[object]` instead of your own type.\r\n\r\n",
      "created_at": "2019-10-01T20:48:46Z",
      "updated_at": "2019-10-01T20:48:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @SeeminglyScience for reference #10623",
      "created_at": "2019-10-02T07:45:35Z",
      "updated_at": "2019-10-02T07:45:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah this does repro without the specifics of #10623 (e.g. without the making the engine check overloads)\r\n\r\n```powershell\r\nPS> Add-Type -IgnoreWarnings -TypeDefinition 'public interface ISomething<T> { }'\r\nPS> class Test : ISomething[Test] { }\r\n# At line:1 char:14\r\n# + class Test : ISomething[Test] { }\r\n# +              ~~~~~~~~~~~~~~~~\r\n# Unable to find type [ISomething[Test]].\r\n#     + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n#     + FullyQualifiedErrorId : TypeNotFound\r\n```\r\n\r\nPresumably because it's attempting type resolution without taking the current type definition into account.\r\n\r\nAlso about valuetypes (assuming the title wasn't a mistake) #10231 is also relevant.",
      "created_at": "2019-10-02T11:59:20Z",
      "updated_at": "2019-10-02T11:59:20Z"
    },
    {
      "author": "essentialexch",
      "author_association": "NONE",
      "body": "This works. But shouldn't. And just like @mklement0 wrote, it's not the same as what you want, but a workaround. (I got seriously distracted going down the rabbit hole that is stuff not implemented by classes.)\r\n\r\n```\r\nClass ServerName: System.Collections.IEqualityComparer \r\n{\r\n    [String] $ComputerName\r\n\r\n    ServerName( [String] $serverName )\r\n        {\r\n            $this.ComputerName = $serverName\r\n        }\r\n    ServerName()\r\n        {\r\n            $this.ComputerName = ''\r\n        }\r\n\r\n    [Bool] Equals( $x, $y)  { return $x -eq $y        }\r\n    [Bool] Equals( $x )     { return $this.ComputerName -eq $x }\r\n    [Int] GetHashCode( $x ) { return $x.GetHashCode() }\r\n}\r\n\r\n$b = [ServerName]::new( 's1' )\r\n$b -eq 's1'\r\n$b -eq 's2'\r\n$b.GetHashCode( $b )\r\n\r\n```",
      "created_at": "2019-10-02T14:11:56Z",
      "updated_at": "2019-10-02T14:11:56Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "### EDIT: Was case sensitive per @SeeminglyScience, ignore for purposes of this issue\r\n\r\nI came across this issue trying to implement IObserver for CIM to do get-ciminstance asynchronously basically.\r\n\r\n```powershell\r\nusing namespace Microsoft.Management.Infrastructure\r\nclass CimObserver : Iobserver[CimInstance] {\r\n    [void] onNext(\r\n        [CimInstance]$cimInstance\r\n    ) {$null}\r\n}\r\n```\r\n```\r\nAt line:2 char:1\r\n+ class CimObserver : Iobserver[CimInstance] {\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nError during creation of type \"CimObserver\". Error message:\r\nMethod 'OnNext' in type 'CimObserver' from assembly 'PowerShell Class Assembly, Version=1.0.0.8, Culture=neutral, PublicKeyToken=null' does not have an implementation.\r\n```\r\n\r\nUnless someone can tell me what I'm doing wrong.\r\n",
      "created_at": "2020-01-13T16:58:21Z",
      "updated_at": "2020-01-13T17:16:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@JustinGrote Method names are case sensitive for declaration:\r\n\r\n```powershell\r\nusing namespace Microsoft.Management.Infrastructure\r\n\r\nclass CimObserver : IObserver[CimInstance] {\r\n    [void] OnNext([CimInstance] $value) {}\r\n    [void] OnError([Exception] $exception) {}\r\n    [void] OnCompleted() {}\r\n}\r\n```\r\n\r\nThough be aware that it's likely that `OnNext` will be called on a thread without a default runspace.  If that's the case, the method will just throw.",
      "created_at": "2020-01-13T17:14:34Z",
      "updated_at": "2020-01-13T17:14:34Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience thanks. Believe it or not it totally worked :) Full code:\r\n```powershell\r\nusing namespace Microsoft.Management.Infrastructure\r\nclass CimObserver : System.IObserver[CimInstance] {\r\n    [void] OnNext(\r\n        [CimInstance]$ciminstance\r\n    ) {\r\n        write-host -fore green $cimInstance\r\n    }\r\n    [void] OnError([Exception]$Exception) {throw $exception}\r\n    [void] OnCompleted() {$this.Unsubscribe()} \r\n}\r\n$query = (new-cimsession).QueryInstancesAsync('root/cimv2','WQL','SELECT * FROM Win32_ComputerSystem')\r\n$observer = new-object CimObserver\r\n$query.subscribe($observer)\r\n```\r\n\r\nOutputted the textual representation in green to the host.\r\n\r\n",
      "created_at": "2020-01-13T17:21:51Z",
      "updated_at": "2020-01-13T17:21:51Z"
    }
  ],
  "created_at": "2019-10-01T19:49:58Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 10669,
  "state": "open",
  "title": "PowerShell classes still can't create value types",
  "updated_at": "2020-01-13T17:21:51Z"
}