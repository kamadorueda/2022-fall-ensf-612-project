{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5699",
  "author": "mklement0",
  "body": "The 1st positional argument passed to `Get-ChildItem` binds to `-Path`, meaning that wildcard expressions _are_ supported.\r\n\r\nHowever, values that are _literal_ paths - values that do not contain wildcard metacharacters such as `*` - should be treated as such.\r\n\r\n* _Without_ `-Recurse`, that is already the case: A nonexistent literal path triggers an error.\r\n\r\n* _With_ `-Recurse`:\r\n\r\n   * The nonexistent path (assuming that it is a mere filename or its parent path exists) is treated like a wildcard expression that happens to match nothing.\r\n   * Additionally, this matching is apparently performed in _all_ the directories in the subtree.\r\n\r\nWorkaround (and generally the better choice if you know a path to be a literal one):  \r\n`Get-ChildItem -Recurse -LiteralPath <path>`\r\n\r\n_Update_: `Get-ChildItem -Recurse <name>` may also yield _false positives_, by matching `<name>` _anywhere in the subtree_ rather than just in the current location - see below.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-ChildItem NoSuch\r\nGet-ChildItem NoSuch -Recurse\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nBoth commands should report an error re nonexistent item `NoSuch`.\r\n\r\nActual behavior\r\n---------------\r\n\r\n`Get-ChildItem NoSuch -Recurse` produces no output at all (neither success nor error), and `$?` is set to `$True`.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n\ufeffPowerShell Core v6.0.0-rc.2 (v6.0.0-rc.2) on Microsoft Windows 7 Enterprise  (64-bit; v6.1.7601)\r\nWindows PowerShell v5.1.14409.1012 on Microsoft Windows 7 Enterprise  (64-bit; v6.1.7601)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The inconsistent behavior is wrong, but with the `-literalpath` workaround and checking the returned count, I'm not sure if we would change this.  It seems to me that if this was v1, I would have `-Path` and `-LiteralPath` be the root of the search and require `-Filter` for filtering rather than mixing it with the path.",
      "created_at": "2017-12-16T03:43:11Z",
      "updated_at": "2017-12-16T03:43:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I understand that the behavior is useful if the only / last path component is an actual wildcard pattern (e.g., `Get-ChildItem *.txt -Recurse` - though it gets confusing with `Get-ChildItem /tmp/*.txt -Recurse`), but with literal components you not only may get quiet no-ops when there should be an error, **you may also get _false positives_, which is more problematic:**\r\n\r\n```powershell\r\n> mkdir -p /tmp/sub/tmp2; sl /tmp; Get-ChildItem -Recurse tmp2  | % fullname\r\n/tmp/sub/tmp2\r\n```\r\n\r\nNote how `tmp2` is unexpectedly matched  _anywhere in the subtree_ of `/tmp` instead of complaining that `/tmp` has no child item named `tmp2`.\r\n\r\nNeedless to say, this can have grave consequences.\r\n\r\nIt's fine to keep the existing behavior with actual wildcard expressions in the last path component, but my vote is to fix the behavior with literals.\r\n\r\n",
      "created_at": "2017-12-17T13:24:38Z",
      "updated_at": "2017-12-17T13:24:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and is concerned about the compatibility risk with existing scripts.  We acknowledge that the behavior is surprising and would defer to potentially writing a new FileSystemProvider in the future to resolve these types of issues.  Feel free to mention me on other ones that should be addressed in FileSystemProvider v2.",
      "created_at": "2018-01-03T23:30:02Z",
      "updated_at": "2018-01-03T23:30:02Z"
    },
    {
      "author": "marckassay",
      "author_association": "NONE",
      "body": "To the developer for this issue,\r\nI noticed this issue is relevant to this PR: #5896",
      "created_at": "2018-01-29T23:53:48Z",
      "updated_at": "2018-01-29T23:56:54Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Work on a new FileSystemProvider should probably wait until all the changes to System.IO in .NET core is shipped. They are doing lots on high perf/low allocation wrt file system. Can barely wait! :)\r\n\r\nSee for example https://github.com/dotnet/designs/pull/24",
      "created_at": "2018-01-30T12:24:09Z",
      "updated_at": "2018-01-30T12:57:19Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "It works as expected in v2. As far as I remember, per the PowerShell Team explanation, this was a design decision in order to match CMD `dir` behaviour and improve the user experience. There was an issue Microsoft Connect [766100](https://connect.microsoft.com/PowerShell/feedback/details/766100) but half of Connect issues were removed, including this one.",
      "created_at": "2018-01-30T17:12:13Z",
      "updated_at": "2018-01-30T17:12:13Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@PowerShell/powershell-committee  -  @nightroman 100% is correct.  _**This is a deliberate feature**_ implemented to make it easier (and more friendly to cmd users) to recursively search for a file name. It is extremely useful, likely broadly used and consequently extremely likely to break both scripts and the user experience if it is changed. \r\n",
      "created_at": "2018-03-16T23:03:32Z",
      "updated_at": "2018-03-16T23:03:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If the consensus is that the risk of breaking existing scripts is too high, the best we can do is to _document_ the pitfalls - and the pit can be deep, as my example with the false positives shows.\r\n\r\nBut let's be clear that while the ability to match on all levels of the subtree is indeed very useful, it is regrettable that such a treacherous implementation was chosen (even if as a nod to `cmd` users) - all the more so, given that the correct implementation of the feature is _also_ available (`-Filter`, `-Include`).",
      "created_at": "2018-03-17T03:25:00Z",
      "updated_at": "2018-03-17T03:25:00Z"
    },
    {
      "author": "Atheuz",
      "author_association": "NONE",
      "body": "This is a extremely dangerous when used as such:\r\n\r\nGet-ChildItem -Path \"C:\\DoesNotExist\" -Recurse | ForEach-Object { Remove-Item -Path $_.FullName -Recurse }\r\n\r\nThis will enumerate all files on the C drive and start deleting them, where my, what I think is reasonable, expectation, is that it would try to enumerate the files in the specified path and if none exist then quit immediately not begin trawling through every file.",
      "created_at": "2018-04-12T14:36:17Z",
      "updated_at": "2018-04-12T15:09:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that if we know the path is literal (`c:\\foo` or even `.\\foo`) we shouldn't treat that as a search and that might be acceptable from a compatibility point of view",
      "created_at": "2018-04-12T17:29:15Z",
      "updated_at": "2018-04-12T17:29:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: I agree, and note that that is the very thing my original post asked for:\r\n\r\n>  values that are _literal_ paths - values that do not contain wildcard metacharacters such as `*` - should be treated as such.\r\n",
      "created_at": "2018-04-12T17:55:46Z",
      "updated_at": "2018-04-12T17:55:46Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "A really dangerous bug open for an eternity :(\r\nIs it so hard to fix?\r\nWould a headline like 'PowerShell killed all my data' be good marketing?",
      "created_at": "2018-08-09T19:28:22Z",
      "updated_at": "2018-08-09T19:28:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mi-hol the change itself is not hard, but hard problem is maintaining backwards compatibility with existing scripts dependent on this behavior",
      "created_at": "2018-08-16T18:21:27Z",
      "updated_at": "2018-08-16T18:21:27Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "@SteveL-MSFT This new feature in v3 was breaking for v2 scripts, too. And lots of people were surprised right from the beginning. Unfortunately the history on Connect (mentioned above issue) was erased.",
      "created_at": "2018-08-16T18:37:48Z",
      "updated_at": "2018-08-16T18:37:48Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Is there some way to have new behavior behind a flag/version? So we somehow could opt in to fixed, otherwise breaking changes?\r\n\r\nA bit like what @daxian-dbw did with experimental feature, but for production? Or does it become a maintenance hell?",
      "created_at": "2018-08-17T08:29:01Z",
      "updated_at": "2018-08-17T08:29:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@powercode We could certainly put this behind an experimental feature flag (which is opt-in by definition and thus less people will use it).  We currently don't have a good solution as to when something goes from experimental to stable in the case where it's a breaking change.  I'm concerned that having something that is breaking that is opt-in will fragment the community.\r\n\r\nFor the argument that v3 broke v2, I don't think we can use that as justification to break v3, v4, v5 by itself.",
      "created_at": "2018-08-17T16:04:37Z",
      "updated_at": "2018-08-17T16:04:37Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "> For the argument that v3 broke v2, I don't think we can use that as justification to break v3, v4, v5 by itself.\r\n\r\nNot at all, of course. I mentioned the history just as the precedent of making breaking changes for the greater good. Justifications should be different, something like \"potentially dangerous feature\", \"violation of the least surprise principle\", etc.\r\n",
      "created_at": "2018-08-20T18:27:05Z",
      "updated_at": "2018-08-20T18:27:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@nightroman Agree 100%.  v3 was before my time on this team, so I don't know the history of it whether the break was intentional or a mistake (feels like the latter).",
      "created_at": "2018-08-20T20:28:08Z",
      "updated_at": "2018-08-20T20:28:08Z"
    },
    {
      "author": "EklipZgit",
      "author_association": "NONE",
      "body": "Agreeing with @Atheuz here, we just encountered this for the second time in 6 months. \r\n\r\nIt is insane that when the below folder doesn't exist, the following code:\r\n`$Output = '\\\\s-buildserv\\[...]\\s\\Output'`\r\n`Get-ChildItem -Path $Output -Directory -Recurse |`\r\n`    Remove-Item -Recurse -Force -ErrorAction 'Ignore'`\r\ndeletes \r\n\\\\\\\\s-buildserv\\\\[...]\\s\\Tests\\Data\\output\r\n\\\\\\\\s-buildserv\\\\[...]\\s\\Tests\\DataDNSExtract\\output\r\n\\\\\\\\s-buildserv\\\\[...]\\s\\Tests\\DataTemplateDedupe\\output\r\n\r\nI see this as an exceptionally dangerous bug that at the very least should have a stopgap fix to recognize non-wildcard paths and refuse to recurse from one level up.\r\n\r\nEDIT: removed non-relevent portion of filepaths for clarity",
      "created_at": "2018-09-05T18:30:55Z",
      "updated_at": "2018-09-05T18:33:57Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "This is dangerous and very hard to track down. The only reason that we found it this time is because we have ran into this several times before.\r\n\r\nIf someone runs gives a path to  `.\\source\\Output`, why should it ever consider looking in `.\\source\\Tests` and every other folder in `.\\source`.\r\n\r\nThe other scenario that we run into this as an issue is when that parent folder is very large. Like when it sits in `C:\\Windows`. Not only does it take forever, you also often get access denied error for completely unrelated paths. If it is in the root of a company share with millions of files, this command will appear to never return. Both scenarios are very hard for the inexperienced to troubleshoot. Even when I have seen this before, it can be a challenge.\r\n",
      "created_at": "2018-09-05T18:38:50Z",
      "updated_at": "2018-09-05T18:39:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee due to the breaking change nature of this request, we would recommend making the behavior change in a FileSystemProvider v2 implementation",
      "created_at": "2018-10-10T22:29:53Z",
      "updated_at": "2018-10-10T22:29:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The code which implement the behavior is [here](https://github.com/PowerShell/PowerShell/blob/4d702e010d656681e42164ad02344883836668c9/src/System.Management.Automation/engine/SessionStateContainer.cs#L1320-L1371)\r\n\r\nComments in the code says the current behavior is **explicit design**:\r\n\"If we're recursing, do some path fixups to match user _expectations_:\"\r\n\r\nThere are two base scenario:\r\n1. Get-ChildItem -Recurse searchname  (searchname is not an absolute or relative path)\r\n2. Get-ChildItem -Recurse searchpath    (searchpath is <path>\\searchname)\r\n\r\nLet's see what is **real** user expectations for these scenarios.\r\n1. Using simple search name with Recurse parameter says that we want to find the name in all directory tree. The expectation looks very native.\r\n2. If I use a path I expect it works as path\r\nBefore the issue I didn't even know `dir -Recurse c:\\name` is transforming into `dir -Recurse c:\\ -Include \"name\"`. The behavior is unexpected for me. If I came across this, I would consider it a bug and use a final slash to fix the situation `dir -Recurse c:\\name\\`.\r\n\r\nIt is clear why this design arose - this is a generalization of the first scenario - if an user is on C:\\ and want to search on D:\\ the user uses `dir -Recurse c:\\name` instead of `dir -Recurse name`.\r\n_The key here is that the user must explicitly know how it works._ I could speculate that no one knows about this since it is not documented and you can only find out about it from the comments in the code. This is an incredible situation.\r\n\r\nAlso as said above https://github.com/PowerShell/PowerShell/issues/5699#issuecomment-380827924 the design (for second scenario) has a dangerous side effect because the behavior differ if <searchpath> is existence container or no. Thus, if an user create a script with confidence that the path exists the script works well until somebody removes the directory, after that, the script will unexpectedly enumerate whole directory tree which can lead to disastrous consequences.\r\n\r\nThat we see for second scenario:\r\n- unexpected\r\n- dangerous\r\n- users don't know the design and therefore cannot rely on it\r\n\r\nThus, we can conclude that:\r\n- this should be fixed\r\n- this is not a breaking change\r\n- if you still believe it is a breaking change it is a breaking change under Bracket 3.\r\n\r\n",
      "created_at": "2021-04-21T05:41:03Z",
      "updated_at": "2021-04-21T05:41:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Hear, hear, @iSazonov.\r\n\r\nI think that even letting `Get-ChildItem name -recurse` - i.e. searching by _literal_ item _name_ (or _relative_ path) only (bound to `-Path` by default) -  in the entire subtree is ultimately too treacherous, which is why I originally suggested that only _wildcard patterns_  (e.g., `name*.txt`) trigger this at-every-level-of-the-subtree matching.\r\n\r\nUltimately, however, I think that even wildcard patterns shouldn't trigger this behavior, to avoid everlasting confusion and prevent unexpected, potentially destructive results.\r\n\r\nInstead, I think the fix should be:\r\n\r\n* Only ever treat `-Path` arguments as recursion _starting_ points (the way `-LiteralPath` arguments are already treated).\r\n  * That is, an argument - _if_ it contains wildcards - should be globbed as-is (which in the name-only and relative-path cases means _relative to the current directory only_), and recursion should then only be performed on the _resulting, literal path(s)_.\r\n\r\n* For at-every-level-of-the-subtree matching, `-Filter` or `-Include` must be used.\r\n  * Given that `-Filter` is the second positional argument, that is not much of a hardship: `gci . name*.txt -r`\r\n\r\nYes, that is more of a breaking change than the previously proposed fixes, but to me is justified by:\r\n\r\n* then having consistent behavior that is easily conceptualized and documented.\r\n* avoiding unexpected, potentially destructive behavior.\r\n\r\n---\r\n\r\nAlso, @SteveL-MSFT, quoting from the committee decision [above](https://github.com/PowerShell/PowerShell/issues/5699#issuecomment-355157333):\r\n\r\n> would defer to potentially writing a new FileSystemProvider in the future to resolve these types of issues.\r\n\r\nCan you please clarify what that means in practical terms? Different cmdlet names? ...?\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-21T16:09:45Z",
      "updated_at": "2021-04-21T16:09:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > would defer to potentially writing a new FileSystemProvider in the future to resolve these types of issues.\r\n> \r\n> Can you please clarify what that means in practical terms? Different cmdlet names? ...?\r\n\r\nIn threory, we should convert FileSystemProvider in an loadable PowerShell subsystem. But I think it is impossible since most of issues is not in FileSystem class only but in Globber, cmdlets and other parts - we would have to rewrite whole PowerShell :-)",
      "created_at": "2021-04-22T06:14:09Z",
      "updated_at": "2021-04-22T06:14:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Yes, that is more of a breaking change than the previously proposed fixes, but to me is justified by:\r\n\r\nIt is clear from the previous discussion that it is unbelievable it will even be approved, not just implemented.\r\n\r\nI'd suggest to open new issue for second scenario from my previous post. I suppose the removal of this unpleasant side effect will be approved quickly.",
      "created_at": "2021-04-22T06:20:12Z",
      "updated_at": "2021-04-22T06:20:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> we would have to rewrite whole PowerShell :-)\r\n\r\nGreat idea! I have a few issues lined up in #6745 that we could then address too. (Just kidding.)\r\nThat is unfortunate. \r\n\r\nPersonally, I'm only interested in the [_fundamental_ fix proposed above](https://github.com/PowerShell/PowerShell/issues/5699#issuecomment-824182728).\r\n\r\nSo I'll leave it to you or someone else to write up a new issue for the _partial_ fix you propose.\r\n",
      "created_at": "2021-04-22T13:47:30Z",
      "updated_at": "2021-04-22T13:47:30Z"
    },
    {
      "author": "whitTech",
      "author_association": "NONE",
      "body": "If you won't implement a breaking change (just think, if you'd bitten the bullet when this first issue was raised...waiting is only compounding the issue further), please do something to prevent users from accidentally deleting all their data. I nearly just destroyed our entire fleet. This is madness. \r\n\r\n(PS 7.1.3)",
      "created_at": "2021-08-11T05:10:43Z",
      "updated_at": "2021-08-11T05:10:43Z"
    }
  ],
  "created_at": "2017-12-15T18:11:17Z",
  "number": 5699,
  "state": "open",
  "title": "Get-ChildItem -Recurse treats literals passed to -Path like wildcard expressions",
  "updated_at": "2021-11-29T17:51:19Z"
}