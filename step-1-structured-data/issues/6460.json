{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6460",
  "author": "mklement0",
  "body": "A follow-up from https://github.com/PowerShell/PowerShell/issues/6305#issuecomment-375025005, as requested by @TravisEz13:\r\n\r\n#6320 attempts to fix #6305, but only does so superficially:\r\n\r\n* while it fixes the _immediate_ problem by preventing an _error_ from surfacing when you use `Get-item env:` while case-variant environment variables are unexpectedly defined,\r\n\r\n* it can end up exposing an effectively _hidden_ value that neither `$env:<name>` nor `[environment]::GetEnvironmentVariable('<name>')` see _intermittently_; in other words: **`Get-Item env:foo` may intermittently report an incorrect value for `$env:foo`**\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nNote: Run this in PowerShell _Core_ on _Windows_,  with Node.js installed and #6320 applied (without it, `Get-Item` will fail, complaining about a duplicate key).\r\n\r\n```powershell\r\n$env:FOO = 'A'\r\n$tries = 0\r\ndo {\r\n  Write-Host '.' -NoNewline\r\n  ++$tries\r\n  $res = node -pe @'\r\n    env = {}\r\n    env.fOo = 'B' // redefine with a case variant name and different value\r\n    env.FOO = process.env.FOO // also include the original case variant with its original value.\r\n    // Contrast $env:foo with Get-Item env:foo\r\n    require('child_process').execSync(\\\"pwsh -nop -command $env:foo; (Get-Item env:foo).Value\\\", { env: env }).toString()\r\n'@\r\n} while ($res[0] -eq $res[1])\r\n\r\n\"\r\nValues differed after $tries tries: '$($res[0])' vs. '$($res[1])'\"\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe loop should never exit, because `$env:foo` and  `Get-Item env:foo` should always report the same value.\r\n\r\nActual behavior\r\n---------------\r\n\r\nBecause `Get-Item env:foo` intermittently reports `B` rather than `A`, the loop exits after a few tries with, e.g.:\r\n\r\n```\r\nValues differed after 3 tries: 'A' vs. 'B'\r\n```\r\n\r\nFix\r\n----\r\n\r\nAs proposed in https://github.com/PowerShell/PowerShell/issues/6305#issuecomment-371721480, in https://github.com/PowerShell/PowerShell/pull/6320/files#diff-1bee4b279bb56aca25fb479994641529, replace:\r\n\r\n```csharp\r\n  // Windows only: duplicate key (variable name that differs only in case)\r\n  // NOTE: Even though this shouldn't happen, it can, e.g. when npm\r\n  //       creates duplicate environment variables that differ only in case -\r\n  //       see https://github.com/PowerShell/PowerShell/issues/6305.\r\n  //       However, because retrieval *by name* later is invariably\r\n  //       case-Insensitive, in effect only a *single* variable exists.\r\n  //       We simply ask Environment.GetEnvironmentVariable() which value is\r\n  //       the effective one, and use that.\r\nproviderTable.TryAdd((string)entry.Key, entry);\r\n```\r\n\r\n(Note: the comments, taken from my original proposal, which still stands below, don't match the code - the comments explain what the code *should* do, but doesn't - see below.)\r\n\r\nwith:\r\n\r\n```csharp\r\ntry {\r\n    providerTable.Add((string)entry.Key, entry);\r\n} catch (System.ArgumentException) { // Windows only: duplicate key (variable name that differs only in case)\r\n    // NOTE: Even though this shouldn't happen, it can, e.g. when npm\r\n    //       creates duplicate environment variables that differ only in case -\r\n    //       see https://github.com/PowerShell/PowerShell/issues/6305.\r\n    //       However, because retrieval *by name* later is invariably\r\n    //       case-INsensitive, in effect only a *single* variable exists.\r\n    //       We simply ask Environment.GetEnvironmentVariable() for the effective value \r\n    //       and use that.\r\n    providerTable[(string)entry.Key] = new DictionaryEntry((string)entry.Key, Environment.GetEnvironmentVariable((string)entry.Key));\r\n}\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\nPowerShell Core post-v6.0.2 with #6320  applied.\r\n",
  "closed_at": "2018-03-30T05:47:21Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I see.  Thank for the detail repro and explanation.  Do you want to submit a PR?",
      "created_at": "2018-03-23T17:17:22Z",
      "updated_at": "2018-03-23T17:17:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13: Sure; please see #6489. Note that I've tweaked the fix slightly to recreate the entry when(ever) the effective value is encountered, so that the name casing reflects the duplicate that took effect; however, if duplicates define the very same value, it is unspecified which casing is reflected, but in practice that shouldn't matter.",
      "created_at": "2018-03-24T18:56:42Z",
      "updated_at": "2018-03-24T18:56:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed by #6489. ",
      "created_at": "2018-03-30T05:47:21Z",
      "updated_at": "2018-03-30T05:47:21Z"
    }
  ],
  "created_at": "2018-03-22T03:18:17Z",
  "number": 6460,
  "state": "closed",
  "title": "#6320 (fix for #6305) is flawed, because it may expose incorrect environment-variable values via Get-Item",
  "updated_at": "2018-04-11T06:31:51Z"
}