{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3431",
  "author": "Flonk",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n- Create `module.psm1` with content\r\n\r\n```powershell\r\nFunction With-Foo {\r\n    param([ScriptBlock]$fn)\r\n    $foo = 4\r\n    &$fn\r\n}\r\nExport-ModuleMember -Function *\r\n```\r\n\r\n- Create `main.ps1` with content\r\n\r\n```powershell\r\nImport-Module \".../module.psm1\"\r\nWith-Foo { Write-Host $foo }\r\n```\r\n\r\n- run `main.ps1`\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n4\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\n<nothing>\r\n```\r\n\r\n\r\nAdditional Info\r\n---------------\r\n\r\n- If the function is defined in the same module as it is called, it works as expected.\r\n- If `&$fn` is replaced with `&([ScriptBlock]::Create($fn.ToString()))` the code also works across modules.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSRemotingProtocolVersion      2.3\r\nPSVersion                      6.0.0-alpha\r\nGitCommitId                    v6.0.0-alpha.17\r\nWSManStackVersion              3.0\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSEdition                      Core\r\nCLRVersion\r\nBuildVersion                   3.0.0.0\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-03-28T06:02:52Z",
  "comments": [
    {
      "author": "Flonk",
      "author_association": "NONE",
      "body": "To clarify, the same issue occurs when using modules defined via `New-Module`.\r\n\r\n```powershell\r\n$m = New-Module -ScriptBlock {\r\n    Function With-Foo {\r\n        param([ScriptBlock]$fn)\r\n        $foo = 4\r\n        &$fn\r\n    }\r\n}\r\n\r\nWith-Foo { Write-Host $foo }\r\n```\r\n\r\nwill not output anything.",
      "created_at": "2017-03-27T14:04:07Z",
      "updated_at": "2017-03-27T14:04:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "A script block is associated with the SessionState that it was created in, and it will execute in that same SessionState, because the script block is very likely depending on the state (functions, variables and etc) of the SessionState it was created in.\r\n\r\nIn your example, `With-Foo` will run in the module SessionState while `{write-host $foo}` is defined in a different SessionState, and thus it won't be able to see the variables defined in the module SessionState when running within `With-Foo`.\r\n\r\nHere is an example to demonstrate that:\r\n```\r\nPS:1> $m = New-Module -ScriptBlock {\r\n>>     Function With-Foo {\r\n>>         param([ScriptBlock]$fn)\r\n>>         $foo = 4\r\n>>         &$fn\r\n>>     }\r\n>> }\r\nPS:2> & { $foo = 100; With-Foo { Write-Host $foo } }\r\n100\r\nPS:3>\r\n```\r\n\r\nTo achieve what you expect, you can define `With-Foo` like this:\r\n```\r\n$m = New-Module -ScriptBlock {\r\n    Function With-Foo {\r\n        param([ScriptBlock]$fn)\r\n        $foo = 4\r\n        $newfn = $fn.Ast.GetScriptBlock() # create a new script block via the AST\r\n        & $newfn\r\n    }\r\n}\r\n```\r\nThen you will get what you expect:\r\n```\r\nPS:1> $m = New-Module -ScriptBlock {\r\n>>     Function With-Foo {\r\n>>         param([ScriptBlock]$fn)\r\n>>         $foo = 4\r\n>>         $newfn = $fn.Ast.GetScriptBlock() # create a new script block via the AST\r\n>>         & $newfn\r\n>>     }\r\n>> }\r\nPS:2>\r\nPS:2> With-Foo { Write-Host $foo }\r\n4\r\nPS:3>\r\n```",
      "created_at": "2017-03-27T20:08:35Z",
      "updated_at": "2017-03-27T20:09:49Z"
    }
  ],
  "created_at": "2017-03-27T13:53:36Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 3431,
  "state": "closed",
  "title": "Usual ScriptBlock scoping across module boundaries seems partially broken.",
  "updated_at": "2017-03-28T06:02:52Z"
}