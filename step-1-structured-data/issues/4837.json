{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4837",
  "author": "mklement0",
  "body": "Note: The behavior may be an indication that there never should have been _statement_-terminating errors to begin with, only _script_-terminating ones, as reflected in [the current documentation neglecting to make this important distinction](https://github.com/PowerShell/PowerShell-Docs/issues/1583).\r\n\r\nIn practice, an (uncaught) statement-terminating error (e.g., `1 / 0` or `Get-Item -NoSuchParam`) does _not_ terminate the script, but _can_ be made to do so via `$ErrorActionPreference = 'Stop'`, against documented behavior (but _not_ with `-ErrorAction Stop`).\r\n\r\nIf you do, you get:\r\n\r\n* the usual error record reflecting the statement-terminating error  in `$Error`\r\n* an _additional, unhelpful_ `$Error` entry that is simply a _part_ of the statement-terminating-error record, namely the _underlying exception_.\r\n\r\nIn other words: you get _2_ `$Error` entries, with the exception-only entry coming after (reflected in `$Error[0]` immediately after, with `$Error[1]` containing the statement-terminating-error record.\r\n\r\nThe exact relationship is:\r\n\r\n```powershell\r\n[object]::ReferenceEquals($Error[1].exception, $Error[0]) # -> $True\r\n```\r\n\r\nContrast this with promoting a _non-terminating_ error to a script-terminating one, where you also get _2_ entries, but the extra entry is a _helpful_ exception (`[System.Management.Automation.ActionPreferenceStopException]`) whose message reflects the fact of the promotion:\r\n\r\n```powershell\r\n# Promote a non-terminating error to a script-terminating one.\r\n> $Error.Clear(); Get-Item -ErrorAction Stop /NoSuchItem\r\nGet-Item : Cannot find path '/NoSuchItem' because it does not exist.\r\n...\r\n# Print the message of the extra $Error entry that was recorded.\r\n# (exception System.Management.Automation.ActionPreferenceStopException)\r\n> $Error[0].Message\r\nThe running command stopped because the preference variable \"ErrorActionPreference\" or common parameter is set to Stop: Cannot find path '/NoSuchItem' because it does not exist.\r\n```\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$Error.Clear(); $ErrorActionPreference = 'stop'; Get-Item -NoSuchSwitch\r\n'---'\r\n$Error | % GetType | % Name\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI'm describing expected behavior from the perspective of consistency with how things work with _non-terminating_ errors:\r\n\r\n```none\r\nGet-Item : A parameter cannot be found that matches parameter name 'NoSuchSwitch'.\r\n...\r\n---\r\nActionPreferenceStopException  # indicate promotion to script-terminating error\r\nErrorRecord\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nGet-Item : A parameter cannot be found that matches parameter name 'NoSuchSwitch'.\r\n...\r\n---\r\nParameterBindingException # !! Simply duplicated the .Exception value of $Error[1]\r\nErrorRecord\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.6 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.6 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.6 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.502 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Wouldn't a more appropriate expected behavior for this be a single entry in `$error` consisting of the `ErrorRecord` that identifies the error, with the `Exception` property referencing an `ActionPreferenceStopException` that has an `InnerException` of `ParameterBindingException`?\r\n\r\ni.e. Why are we generating two entries in `$error` for what an end user perceives as a single error?\r\n\r\nSimilarly, when you have a `ParseException`, why are we adding an exception of type `ParseException` that contains an `ErrorRecord` with an `Exception` property of type `ParentContainsErrorRecordException` to `$error`? Why don't we simply add an `ErrorRecord` that contains an exception of type `ParseException` instead?\r\n\r\nIn either case, these changes could possibly be breaking for anyone who had built tooling that processes `$error` or that performs error handling, so does it matter? I'm not asking that because I feel these changes should not be made -- the fact that raw exceptions are added to `$error` and they way they are added makes it more difficult to process errors since the contents of the collection are inconsistent -- but I do wonder if it's worth my time to go through and try to correct such issues (which I would do, because I'm spending a lot of time with the PowerShell parser and debugger right now). I suppose an RFC is in order to discuss the collection of issues and propose a fix that would be beneficial enough to implement.",
      "created_at": "2019-04-22T14:49:01Z",
      "updated_at": "2019-04-22T16:48:09Z"
    }
  ],
  "created_at": "2017-09-14T17:39:56Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 4837,
  "state": "open",
  "title": "Promoting a statement-terminating error to a script-terminating one results in unhelpful $Error entry.",
  "updated_at": "2019-04-22T16:48:09Z"
}