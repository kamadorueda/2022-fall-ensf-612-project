{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9903",
  "author": "zzJinux",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nAs far as I know, `Get-ChildItem` does only care about children of specified path.\r\nBut it seems `-Exclude` parameter breaks the rule.\r\n\r\n# Steps to reproduce\r\nAssume the working directory is `<some_path>\\foo`.\r\nThere are some files at  `<some_path>\\foo\\`.\r\nLet them `file1.txt`, `file2.txt`, and so on\r\n```powershell\r\ngci '.' -File -Exclude 'foo'\r\n# or\r\ngci '.' -Exclude 'foo'\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        2019-06-15  \uc624\uc804 7:17              0 file1.txt\r\n-a----        2019-06-15  \uc624\uc804 7:17              0 file2.txt\r\n```\r\n\r\n# Actual behavior\r\nNothing is printed\r\n```none\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-08T17:00:08Z",
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, and it does the job only for files. If there is file with name `foo.txt` in the same directory.\r\nThis works: `Get-ChildItem -Path '.' -Exclude foo.*`\r\nThis doesn't: `Get-ChildItem -Path '.' -Exclude foo*`\r\n\r\nBut everything works when `-Name` is used.\r\n\r\n```\r\nGet-ChildItem -Path '.' -Exclude foo.* -Name\r\nGet-ChildItem -Path '.' -Exclude foo* -Name\r\nGet-ChildItem -Path '.' -Exclude foo -Name\r\n```",
      "created_at": "2019-06-16T07:52:43Z",
      "updated_at": "2019-06-16T07:55:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Certainly surprising; ultimately a duplicate of #3304\r\n\r\nIn short: the exclusion is unexpectedly applied to the leaf component of the targeted dir. _itself_, not to the children.\r\n\r\n@kvprasoon: Interesting that `-Name` behaves differently; needless to say, it shouldn't (even though it exhibits the more sensible behavior here) - there are a number of problems relating to `-Name`.\r\n\r\n\r\n",
      "created_at": "2019-06-16T19:45:06Z",
      "updated_at": "2019-06-16T19:45:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-08T17:00:06Z",
      "updated_at": "2020-05-08T17:00:06Z"
    }
  ],
  "created_at": "2019-06-14T22:24:08Z",
  "number": 9903,
  "state": "closed",
  "title": "Get-ChildItem -Exclude excludes the base directory",
  "updated_at": "2020-05-08T17:00:08Z"
}