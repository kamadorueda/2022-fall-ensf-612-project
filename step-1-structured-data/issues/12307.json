{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12307",
  "author": "mklement0",
  "body": "Programs such as `vi` / `vim` rely on being able to control the terminal buffer directly, which works fine with direct invocation.\r\n\r\nHowever, on re-execution of a call to such a program via `Invoke-History` / `r` / `ihy`, PowerShell unexpectedly inserts itself as an intermediary, which makes the program malfunction.\r\n\r\nNote: It looks like an attempt was made to fix this before: see #614\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# On macOS or Linux, for instance.\r\n\r\n# Invoke vi directly (exit by typing ':q', then Enter):\r\nPS> vi /etc/profile\r\n\r\n# Now re-invoke the same command via Invoke-History  (via built-in alias `r`):\r\nPS> r\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe editor should open again.\r\n\r\n# Actual behavior\r\n\r\nThe following error message prints:\r\n\r\n```none\r\nInvoke-History: Vim: Warning: Output is not to a terminal\r\n```\r\n\r\n`vi` still runs, but cannot show its UI (again, type ':q', then Enter to exit).\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.1\r\n```\r\n\r\nAlso affects Windows PowerShell.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Out of curiosity does the same thing happen if you use, say, `invoke-command -scriptblock {vi /etc/profile}`   just thinking it probably happens in a bunch of places and it may be fixable in some but not others.  ",
      "created_at": "2020-04-14T10:11:23Z",
      "updated_at": "2020-04-14T10:11:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`Invoke-History` needs to check if:\r\n\r\n1. It's the last item in the pipeline\r\n1. `this.CommandRuntime.OutputPipe.DownstreamCmdlet` is `Out-Default`\r\n\r\nIf those are true, it should add `Out-Default` to it's nested `PowerShell` instance. If not, it should continue as normal.\r\n\r\nIt may also need to check `ErrorOutputPipe`, and merge the two streams with `Command.MergeMyResults`.",
      "created_at": "2020-04-14T12:39:12Z",
      "updated_at": "2020-04-14T13:19:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience.\r\n\r\n@jhoneill, it works fine with `Invoke-Command`; however, you can provoke the symptom with  \r\n`vi /etc/profile | Tee-Object -ov v` (which doesn't make sense to do; exit with ^C).\r\n\r\nP.S.: While this fix is pending,  https://stackoverflow.com/a/61192256/45375 offers a workaround.",
      "created_at": "2020-04-14T12:45:02Z",
      "updated_at": "2020-04-14T12:47:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": ">  you can provoke the symptom with\r\n> `vi /etc/profile | Tee-Object -ov v` (which doesn't make sense to do; exit with ^C).\r\n\r\nYou probably know this @mklement0, but just to clarify this one is purposeful.  If the native command isn't the last thing in the pipeline then it needs to redirect output so that it can be saved.\r\n",
      "created_at": "2020-04-15T12:15:36Z",
      "updated_at": "2020-04-15T12:15:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience, understood. The purpose of the example command was to demonstrate that `Invoke-History` - inappropriately, and unlike `Invoke-Command` - behaves as if its output were redirected (pipeline, file) even when it isn't (and you've fortunately already provided [detailed pointers](https://github.com/PowerShell/PowerShell/issues/12307#issuecomment-613418301) to a fix).",
      "created_at": "2020-04-15T12:23:43Z",
      "updated_at": "2020-04-15T12:23:43Z"
    }
  ],
  "created_at": "2020-04-13T17:08:56Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 12307,
  "state": "open",
  "title": "Invoke-History doesn't execute programs such as Vim correctly",
  "updated_at": "2020-04-15T12:23:43Z"
}