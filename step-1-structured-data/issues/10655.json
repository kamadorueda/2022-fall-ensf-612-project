{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10655",
  "author": "mklement0",
  "body": "**Update**: As [@SeeminglyScience's states below](https://github.com/PowerShell/PowerShell/issues/10655#issuecomment-537142043), ignoring of exceptions  seems to be limited to indexing with types that implement `IDictionary<T1, T2>`, in which potential exceptions are deliberately _avoided_ with `.TryGetValue()` calls.\r\n\r\nAn argument could be made that this behavior makes sense for the sake of symmetry with PowerShell's regular, non-generic (ordered) hashtables, which _themselves_  _ignore_ non-existent keys.\r\n\r\nIt does amount to PowerShell modifying the behavior of .NET types in a non-obvious manner, however.\r\n\r\n----\r\n\r\nAt least with `Set-StrictMode -Version 3` or higher, using an array's indexer with an out-of-bounds index results in a statement-terminating error.\r\n\r\nThe [docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode) state with respect to version 3:\r\n\r\n> Prohibit out of bounds or unresolvable array indexes.\r\n\r\nBy contrast, _other exceptions appear to be quietly ignored_, irrespective of the effective `Set-StrictMode` setting.\r\n\r\nA follow-up question is: should exceptions _other than_ `System.IndexOutOfRangeException`  and `System.Collections.Generic.KeyNotFoundException` _always_ be surfaced?\r\n\r\nOther types of exceptions are probably rare, but they do occur; e.g.:\r\n\r\n```powershell\r\n# Note: Called  via .Item() instead of indexer syntax ([...]), \r\n# to ensure that the exception surfaces.\r\n# Throws a System.ArgumentException\r\n[Newtonsoft.Json.Linq.JObject]::Parse('{\"foo\":1}').Item([datetime]::now)\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nSet-StrictMode -Version 3\r\n\r\n# OK - exception (statement-terminating error)\r\n{ (0,1)[2] } | should -Throw -ErrorId System.IndexOutOfRangeException\r\n\r\n# Does NOT throw an exception, even though the underlying type does.\r\n# Note: The non-generic [hashtable] type (@{ ... }) does NOT throw an exception,\r\n#           but System.Collections.Generic.Dictionary<T, T> does.\r\n{ $dt = [Collections.Generic.Dictionary[string, string]]::new(); $dt['nosuch'] } |\r\n  Should -Throw -ErrorId System.Collections.Generic.KeyNotFoundException\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe 2nd test fails:\r\n\r\n```none\r\nExpected an exception, to be thrown, but no exception was thrown.\r\n```\r\n\r\nThat is, the exception that occurs in the `[System.Collections.Generic.Dictionary]` indexer is quietly ignored.\r\n\r\nYou can surface it if you call the underlying `.Item()` method (parameterized property) directly:\r\n\r\n```powershell\r\n$dt = [Collections.Generic.Dictionary[string, string]]::new(); $dt.Item('nosuch')\r\n```\r\n\r\nThis reports the following error (ultimately a `System.Collections.Generic.KeyNotFoundException` exception):\r\n\r\n```none\r\nException getting \"Item\": \"The given key 'nosuch' was not present in the dictionary\"\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": "2019-10-02T17:50:57Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 similar is seen when accessing hashtable / dictionary keys with an invalid key. \r\n\r\nNot sure that their behaviour is concretely defined with StrictMode enabled, but I would tend to think that StrictMode should surface that kind of exception as well for parity with how array indexes work. \ud83d\udc4d ",
      "created_at": "2019-09-30T19:41:14Z",
      "updated_at": "2019-09-30T19:41:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32 - didn't know that about hashtables / dictionaries. Can you give a quick example?",
      "created_at": "2019-09-30T19:46:30Z",
      "updated_at": "2019-09-30T19:46:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nSet-StrictMode -Version 3\r\n$hashtable = @{}\r\n$hashtable['nonexistentkey'] # no error\r\n```\r\n\r\nThe same is true without StrictMode enabled, of course. Though I'm not sure that's technically the same, I guess? Since arrays have defined sizes, you can go outside their bounds, but dictionaries typically aren't a bounded set by design. It may be the same for the JObject indexer?",
      "created_at": "2019-09-30T20:07:45Z",
      "updated_at": "2019-09-30T20:08:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32:  \r\n\r\nIt's not technically the same, because `Hashtable` _itself_ quietly ignores non-existent keys - no exception happens (except if you pass `$null`).\r\n\r\nBy contrast, the (directly implemented) `JObject` indexer _does_ throw an exception, which you can see if you call it via `.Item()`:\r\n\r\n```powershell\r\n# Throws exception, which surfaces due to calling via .Item()\r\n[Newtonsoft.Json.Linq.JObject]::Parse('{\"foo\": \"bar\"}').Item([datetime]::now)\r\n```\r\n\r\n",
      "created_at": "2019-09-30T20:47:02Z",
      "updated_at": "2019-09-30T20:47:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 `Dictionary<,>` does though:\r\n\r\n```powershell\r\nPS> $dt = [Collections.Generic.Dictionary[string, string]]::new()\r\nPS> $dt['what']\r\n# nothing\r\nPS> $dt.get_Item('what')\r\nException calling \"get_Item\" with \"1\" argument(s): \"The given key 'what' was not present in the dictionary.\"\r\nAt line:1 char:1\r\n+ $dt.get_Item('what')\r\n+ ~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : KeyNotFoundException\r\n```",
      "created_at": "2019-10-01T15:17:27Z",
      "updated_at": "2019-10-01T15:17:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience - I've updated the OP with your example, because a generic dictionary is probably more common in PowerShell than `Newtonsoft.Json.Linq.JObject`; I've retained the latter as an example of where an indexer throws something _other_ than `OutOfRangeException` / `KeyNotFoundException`",
      "created_at": "2019-10-01T15:44:05Z",
      "updated_at": "2019-10-01T15:44:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 here's where it happens:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/d8eca6a729a94c626bc161f94c4e694451d7e4da/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L4485-L4495\r\n\r\nI think it's pretty safe to say that it's by design. That expression generates code similar to:\r\n\r\n```csharp\r\ntry\r\n{\r\n    return (object)IndexExpressionInExprVar();\r\n}\r\ncatch (Exception)\r\n{\r\n    if (Compiler.IsStrictMode(3))\r\n    {\r\n        throw;\r\n    }\r\n}\r\n\r\nreturn null;\r\n```",
      "created_at": "2019-10-01T16:28:51Z",
      "updated_at": "2019-10-01T16:28:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience, but that doesn't seem to be what's happening in practice:\r\n\r\n```powershell\r\nSet-StrictMode -Version 3\r\n# Despite strict mode v3, the following do *not* surface the underlying exceptions.\r\n[Newtonsoft.Json.Linq.JObject]::Parse('{\"foo\":1}')[[datetime]::now]\r\n[Collections.Generic.Dictionary[string, string]]::new()['nosuch']\r\n```",
      "created_at": "2019-10-01T17:00:33Z",
      "updated_at": "2019-10-01T17:00:33Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah `IDictionary<,>` follows a different pattern, it does `TryGetValue` instead:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/d8eca6a729a94c626bc161f94c4e694451d7e4da/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L4130-L4137\r\n\r\nApparently `JObject` is also `IDictionary<,>`.",
      "created_at": "2019-10-01T17:27:27Z",
      "updated_at": "2019-10-01T17:27:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience.\r\n\r\nAn argument could be made that this behavior makes sense for the sake of symmetry with PowerShell's regular, non-generic (ordered) hashtables, which themselves ignore non-existent keys.\r\n\r\nIt does amount to PowerShell modifying the behavior of .NET types in a non-obvious manner, however - so I've created https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4868\r\n\r\nThat said, re-reading the docs, with respect to `Set-StrictMode` it really is only about _numeric_ _array_ indices, so I'm closing this.\r\n\r\n\r\n\r\n",
      "created_at": "2019-10-02T17:50:57Z",
      "updated_at": "2019-10-02T17:50:57Z"
    }
  ],
  "created_at": "2019-09-30T19:35:43Z",
  "number": 10655,
  "state": "closed",
  "title": "Exceptions in indexers are always quietly ignored for IDictionary<T1,T2> ",
  "updated_at": "2019-10-29T14:22:30Z"
}