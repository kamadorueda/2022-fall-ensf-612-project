{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9315",
  "author": "TravisEz13",
  "body": "# Summary of the new feature/enhancement\r\n\r\nSimilar to https://chocolatey.org/packages/powershell-core but maintained by the PowerShell team.\r\n\r\nOn behalf of https://devblogs.microsoft.com/powershell/powershell-core-release-improvements/#comments-52\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nNo implementation detail were given in the comment, other than it should be part of our release process.\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": "2020-07-30T23:08:05Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "based on https://devblogs.microsoft.com/powershell/powershell-core-release-improvements/#comments-52",
      "created_at": "2019-04-07T19:44:05Z",
      "updated_at": "2019-04-07T22:03:03Z"
    },
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "When you say similar do you mean a different package, or would you ask the current owner to transfer ownership?",
      "created_at": "2019-04-07T21:39:26Z",
      "updated_at": "2019-04-07T21:39:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@jcotton42 I filed this on behalf of `Brett Jacobson` who posted a comment on [my blog](https://devblogs.microsoft.com/powershell/powershell-core-release-improvements/#comments-52).  I replied to their comment and I'm hoping they would give details.",
      "created_at": "2019-04-07T22:01:44Z",
      "updated_at": "2019-04-07T22:01:44Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "cc @DarwinJS ",
      "created_at": "2019-04-07T22:36:32Z",
      "updated_at": "2019-04-07T22:36:32Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "It is totally within the ideals of the chocolatey ecosystem for software owners to take over chocolatey packaging if they wish to and I'm cool with it.\r\n\r\nThere was some previous heart-burn in github issues that all other packaged editions of powershell-core end up on a Microsoft owned packaging distribution mechanism.  But that is not true of packages distributed via Mac \"Brew\" right?",
      "created_at": "2019-04-08T00:36:51Z",
      "updated_at": "2019-04-08T00:36:51Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "In brew, brew owns all the formulas.  I wasn't there when the model for brew was decided.  Honestly, I prefer the brew model.\r\n\r\nThe technical implementation, with brew, conceptually is very similar to chocolatey.",
      "created_at": "2019-04-08T04:06:12Z",
      "updated_at": "2019-04-08T04:06:12Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 - I would agree - except with automatic virus scanning of package content and all download pointers - Chocolatey is quite likely it's safer than brew.\r\n\r\nAlso at 50-56 MB powershell core for windows is right at the threshold where it is acceptable to enclose the installer into the package.  You'd have to ask Rob - but he might be agreeable for such a prominent package.\r\n\r\nIncluding it also makes curation much easier for companies who curate public packages to internal ones and those doing builds that don't have access to the repo (they don't have to rebuild the package)\r\n\r\nFYI - when I include the binary installer, I still do the checksum so that users still get the satisfaction that the binaries are checking out correctly.\r\n\r\nYou would also have to ask about the approval process - since I have trusted packager status there is no human review - but if we add someone to the maintainers list and they submit, they might have to undergo a period of review or you could ask for that status, noting that it is CI automation building and uploading the package.",
      "created_at": "2019-04-08T12:06:06Z",
      "updated_at": "2019-04-08T12:06:06Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> except with automatic virus scanning of package content and all download pointers\r\n\r\n I know this happen with brew and the virus scanner microsoft asks me to run (I'm in a pilot though), I had to disable it for performance.  Although, chocolatey might be able to do this more explicitly with APIs available in windows.\r\n\r\n@DarwinJS We made significant changes to the [third party notices](https://github.com/PowerShell/PowerShell/blob/master/ThirdPartyNotices.txt) in 6.2.  You should look and see if it still restricts you from distributing the package.",
      "created_at": "2019-04-08T18:00:02Z",
      "updated_at": "2019-04-08T18:00:02Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 - Ahh but chocolatey does this as part of the repository services - not on your client at install time - and you can see the virus total report as package data on the site BEFORE pulling it.\r\n\r\nUnless you are referring to something else it is still the MIT license as per here: https://github.com/PowerShell/PowerShell/blob/master/ThirdPartyNotices.txt#L26-L32\r\n\r\nand the chocolatey package does distribute that license.\r\n\r\nExpand to see the contents of \"VERIFICATION.txt\" and \"LICENSE.txt\" in the web browser here: https://chocolatey.org/packages/powershell-core\r\n\r\nLet me know if the package is somehow not compliant as that is a critical filtering criteria for packages that must be removed from chocolatey.org",
      "created_at": "2019-04-08T19:32:24Z",
      "updated_at": "2019-04-08T19:32:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I don't have any reason to believe the package is **not** compliant.  https://github.com/PowerShell/PowerShell/blob/master/ThirdPartyNotices.txt#L26-L32 is embedded in the MSI itself.\r\n\r\nTo make sure all the notices are available before the package is installed, I would suggest including the third party notices here:\r\n\r\n![image](https://user-images.githubusercontent.com/10873629/55754516-ad45a300-5a01-11e9-8c05-7ad380a71d5f.png)\r\n",
      "created_at": "2019-04-08T20:35:31Z",
      "updated_at": "2019-04-08T20:35:31Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Just providing some links to prior areas where this has been brought up as this would be a partial duplicate of #2708 but also see the much in depth conversation in https://github.com/Microsoft/azure-pipelines-image-generation/pull/680 where @joeyaiello mentioned about a MSFT Backed Choco Feed - which I would be 100% behind for the same reasons @markekraus mentioned in that Pull Request  \r\n \r\nChoco is my preferred route to get PSCore until MS Store or Inboxing happens in the future but if you check out #8663 & especially my comment here https://github.com/PowerShell/PowerShell/issues/8663#issuecomment-456272838 you'll find all the links to the other similar issues where I have been able to find them in the repo\r\n\r\n",
      "created_at": "2019-04-08T22:02:45Z",
      "updated_at": "2019-04-08T22:02:45Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13, version 6.2.0.20190408 is in automated moderation.  It includes ThirdPartyNotices.txt and it references that ThirdPartyReferences.txt is available within LICENSE.txt\r\n\r\nLet me know if that seems sufficient.",
      "created_at": "2019-04-09T00:44:13Z",
      "updated_at": "2019-04-09T00:44:13Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "ping @SteveL-MSFT @joeyaiello can this be prioritised as a release mechanism for the v7 GA timeline please",
      "created_at": "2019-09-20T00:34:34Z",
      "updated_at": "2019-09-20T00:34:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kilasuit I believe at this time, we can't officially publish to Choco (@joeyaiello can confirm).  However, I do plan on publishing to MS Store.",
      "created_at": "2019-09-24T18:19:57Z",
      "updated_at": "2019-09-24T18:19:57Z"
    },
    {
      "author": "WSLUser",
      "author_association": "NONE",
      "body": "@DarwinJS The chocolately package you are maintaining is a bit behind in release version. We have rc1 available in releases but you didn't establish automation to fetch the updated binary. Please update the chocolately package to match what's available on github and consider automating this process. I know it can be automated because Windows Terminal has a chocolately package that's automated per the maintainer. Basically it's checking the Release page if a newer release is available and does this at whatever time interval you choose. For preview, I'd do it once every 4 hours to ensure the time gap between the Release page being updated and the chocolately package is minimal.",
      "created_at": "2019-12-18T15:03:57Z",
      "updated_at": "2019-12-18T15:03:57Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@WSLUser - it is exactly one release behind by less than 2a day because it\nis pending the answer to this issue.\n\nOn Wed, Dec 18, 2019 at 10:04 AM WSLUser <notifications@github.com> wrote:\n\n> @DarwinJS <https://github.com/DarwinJS> The chocolately package you are\n> maintaining is a bit behind in release version. We have rc1 available in\n> releases but you didn't establish automation to fetch the updated binary.\n> Please update the chocolately package to match what's available on github\n> and consider automating this process. I know it can be automated because\n> Windows Terminal has a chocolately package that's automated per the\n> maintainer. Basically it's checking the Release page if a newer release is\n> available and does this at whatever time interval you choose. For preview,\n> I'd do it once every 4 hours to ensure the time gap between the Release\n> page being updated and the chocolately package is minimal.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9315?email_source=notifications&email_token=ACYPLBRL662UBC5XI3MOJETQZI3V5A5CNFSM4HED2NW2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEHGM2SI#issuecomment-567070025>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACYPLBUSV73J4YRWO5GSOMTQZI3V5ANCNFSM4HED2NWQ>\n> .\n>\n",
      "created_at": "2019-12-18T15:59:56Z",
      "updated_at": "2019-12-18T15:59:56Z"
    },
    {
      "author": "WSLUser",
      "author_association": "NONE",
      "body": "When I opened pwsh it told me there was a newer version available. So I expected to update it via Chocolatey, I did not check when the update occurred. I am not the only one who expects it. If we're going to be nicely informed there's a newer version available when we open pwsh, then we should just as nicely be provided an easy install method independent of the MS Store. It can be provided there too but Chocolatey should be an alternative for Windows users.",
      "created_at": "2019-12-18T17:44:44Z",
      "updated_at": "2019-12-18T17:44:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS I don't think the team will do anything here until 7.1",
      "created_at": "2020-01-10T20:18:21Z",
      "updated_at": "2020-01-10T20:18:21Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> When I opened pwsh it told me there was a newer version available. So I expected to update it via Chocolatey\r\n\r\n@WSLUser - unfortunately that's a false expectation to have whilst the chocolatey package is not owned by the PS team nor would the official way to update be via chocolatey.\r\n\r\nThere is this simple to run script as well - https://github.com/PowerShell/PowerShell/blob/master/tools/install-powershell.ps1\r\n\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-01-10T21:08:21Z",
      "updated_at": "2020-01-10T21:08:24Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I just use the Install=PowerShell script up on Github:\r\nThis is the long winded way:\r\n```powershell\r\n$URI = \"https://aka.ms/install-powershell.ps1\"\r\nInvoke-RestMethod -Uri $URI | \r\n  Out-File -FilePath C:\\Foo\\Install-PowerShell.ps1\r\nC:\\Foo\\Install-PowerShell.ps1 -UseMSI -Quiet\r\n```",
      "created_at": "2020-01-11T16:42:28Z",
      "updated_at": "2020-01-11T16:42:28Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "With `winget` on the horizon, I don't think this is something we're going to end up pursuing. I love the fact that someone else is maintaining the PS 7 Chocolatey package, and I think you can absolutely use that one and be sure that it's our official code by validating the signature. ",
      "created_at": "2020-07-30T23:08:05Z",
      "updated_at": "2020-07-30T23:08:05Z"
    }
  ],
  "created_at": "2019-04-07T19:39:18Z",
  "number": 9315,
  "state": "closed",
  "title": "Support install powershell core via chocolately",
  "updated_at": "2020-07-30T23:08:14Z"
}