{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17136",
  "author": "SeidChr",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nComing from C#, I expect the ++ operator to yield the value of the variable that has been or will be incremented. This does not work on PowerShell (tested on 7.2.2)\r\n\r\n`$x = 1; $x++` or `$x = 1; ++$x` do not yield a value\r\n\r\nif I put round brackets around the expression, it works:\r\n`$x = 1; ($x++)` -> 1\r\n`$x = 1; (++$x)` -> 2\r\n\r\nthe operator should yield the respective value without the need to put brackets around it.\n\n### Expected behavior\n\n```console\nPS> $x = 1; $x++\r\n1\r\n\r\nPS> $x = 1; ++$x\r\n2\n```\n\n\n### Actual behavior\n\n```console\nPS> $x = 1; $x++\r\n<nothing>\r\n\r\nPS> $x = 1; ++$x\r\n<nothing>\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\n$ $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-04-11T15:50:38Z",
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "This is by design. PowerShell differs from C# where it has a [expression Mode](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_parsing#expression-mode) *and* an [argument mode](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_parsing#argument-mode). Technically, \"*yielding a value*\" means that you send the value to the pipeline and eventually display it at the end of a pipeline (see: [`Write-Output`](https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/write-output#description) which describes the default behavior).\r\n\r\nIn a nutshell:. PowerShell doesn't require parentheses when calling a function and in case you use  `$x++` as an argument, you do not want to (also) put that on the pipeline when invoking a function like this:\r\n```PowerShell\r\n$Object |ConvertTo-Json -Depth $x++\r\n```\r\n\r\n> [Parentheses (`()`) begin a new expression](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_parsing#argument-mode)",
      "created_at": "2022-04-11T12:33:39Z",
      "updated_at": "2022-04-11T12:42:01Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This is intentional behaviour and it looks weird if you are not expecting it. \r\n\r\n```\r\n($x = 2) -gt 1 \r\n```\r\nReturns true, because the value of an assignment operation is the value that was assigned, \r\nBut `$x = 2` is _normally_ silent   ; so are `$x = $x +1`  `$x += 1` and `$x ++`. \r\n\r\nThe example above needs brackets because otherwise it reads as `$x = (2 -gt 1)`  but something like  `++ $x  -gt 2`  will return true and doesn't need the brackets. \r\n\r\nThis way you can write something like \r\n```\r\nwhile ($x ++ -lt 10) do { \"something with $x\"} \r\n``` \r\nAnd the pre-increment value is available but  if you write the same thing as  \r\n```\r\nwhile ($x -lt 10) do { \"something with $x\" ; $x++} \r\n```\r\nWITHOUT the incremented value being sent as output. \r\n\r\n",
      "created_at": "2022-04-11T12:33:57Z",
      "updated_at": "2022-04-11T12:36:22Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Those tricks allow things like this \r\n```\r\n> $z = $y = $x = 1  # Sets all 3 to 1 \r\n\r\n> $z += $y += ++ $x  # Makes x 2, adds it y, and then adds Y to Z\r\n\r\n> $x,$y,$z\r\n\r\n2\r\n3\r\n4\r\n```",
      "created_at": "2022-04-11T12:38:04Z",
      "updated_at": "2022-04-11T12:38:04Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "thanks for your answers. guess ill need to check in on that expression vs. argument mode!\r\ndefinitely something you need to get used to.",
      "created_at": "2022-04-11T15:50:38Z",
      "updated_at": "2022-04-11T15:50:38Z"
    }
  ],
  "created_at": "2022-04-11T11:26:37Z",
  "number": 17136,
  "state": "closed",
  "title": "Increment operators do not yield a value",
  "updated_at": "2022-04-11T15:50:38Z"
}