{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6959",
  "author": "mklement0",
  "body": "Following up from #6946:\r\n\r\nA token to the right of `.` when accessing an object property or hashtable entry is parsed as an _expression_ if it doesn't start with a _letter_.\r\n\r\nIf that token is ultimately not a _valid_ expression, the error message erroneously suggests that _no token_ was specified, which is confusing:\r\n\r\n```powershell\r\n$obj = [pscustomobject] @{ '1a' = 'one A' }\r\nPS> $obj.1a  # !! Breaks; must use $obj.'1a', due to property name starting with a *digit*\r\nAt line:1 char:6\r\n+ $obj.1a\r\n+      ~\r\nMissing property name after reference operator.\r\n```\r\n\r\nGiven that the fact that `1a` is _not_ treated as a string - and instead evaluated as an _expression_ that _breaks_ - is not obvious, providing specific guidance in the error message along the following lines would be helpful:\r\n\r\n```none\r\nAt line:1 char:6\r\n+ $obj.1a\r\n+      ~\r\nInvalid property-name expression; use quotes for literal interpretation.\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it necessary to use quotes in the scenario? Maybe can fix this?",
      "created_at": "2018-05-31T09:06:42Z",
      "updated_at": "2018-05-31T09:06:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nThe linked issue - #6946 - discusses a fix.\r\n\r\nIn short: \r\n\r\nIf we didn't have a backward-compatibility concern, my vote would definitely be to fix it.\r\n\r\nThe problem is that for backward compatibility we must retain the behavior of at least _first_ attempting to interpret a property name / hashtable key that starts with a digit as an _expression_, for the sake of accessing hashtables with numeric keys.\r\n\r\nA real-world example is `$Matches.0` to access the hashtable entry with _integer_ key `0`.\r\n\r\nWe could _fall back_ to string interpretation if the expression turns out not to be valid, however; e.g.:\r\n\r\n```powershell\r\n# Examples of surprising behaviors we CANNOT change:\r\n$obj.1e2  # 1e2 is interpreted as [double] 100, so as a *property* access this is the same as: $obj.'100'\r\n$obj.1d # -> $obj.'1'\r\n$obj.1l # -> $obj.'1'\r\n$obj.1kb # -> $obj.'1024'\r\n\r\n# This we could fix by falling back to string, because 1a is not valid as an expression.\r\n$obj.1a  \r\n```\r\n\r\nGiven that there are cases where unexpected numeric interpretation can kick in, which results in _quiet_ failure (relative to the user's intent), the question is whether implementing fall-back-to-string behavior is ultimately more confusing than helpful:\r\n\r\nIn the absence of knowing the underlying logic, it would be hard to _infer_ what's going on; e.g., with fall-back-to-string in place, the user may be puzzled why `.1a` works, but `.1d` doesn't (in the sense of `.'1d'`).\r\n\r\nProviding guidance via the error message - i.e., use _quoting_ if you want to force interpretation as a _string_ - ultimately promotes safer habits.\r\n\r\n\r\n",
      "created_at": "2018-05-31T13:22:37Z",
      "updated_at": "2018-06-02T15:48:40Z"
    }
  ],
  "created_at": "2018-05-30T21:12:01Z",
  "number": 6959,
  "state": "open",
  "title": "Improve the error message for when a property-name / hashtable-key token cannot be parsed as such",
  "updated_at": "2018-06-02T15:48:40Z"
}