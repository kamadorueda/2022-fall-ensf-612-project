{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6861",
  "author": "mklement0",
  "body": "#6837 discussed making [ad-hoc script-block arguments](https://github.com/PowerShell/PowerShell-Docs/issues/2338) an _implicit_ feature of cmdlets / advanced functions rather than requiring explicit per-parameter opt-in via attributes.\r\n\r\nThis was ultimately problematic and decided against, but there is room for improving the existing _opt-in_ mechanism:\r\n\r\n**tl;dr:**\r\n\r\nIntroduce a `ValueFromPipelineByScriptBock` attribute to _directly_ mark a parameter as supporting ad-hoc script-block arguments.\r\n\r\n---\r\n\r\nCurrently, in order to signal that a given parameter should accept an ad-hoc script block (e.g., `Rename-Item`'s `-NewName` parameter in invocations such as  \r\n`Get-ChildItem ... | Rename-Item -NewName { $_.BaseName + ... }`, \r\nit must be decorated with either `ValueFromPipeline` or, more typically, with `ValueFromPipelineByPropertyName` (which is the case for `-NewName`).\r\n\r\nHowever, the primary purpose of `ValueFromPipelineByPropertyName` is to enable binding via _objects from the pipeline_ that _have a property by that name_.\r\n\r\nIn the case of `Rename-Item`'s `-NewName`  parameter that would mean something like:\r\n\r\n```powershell\r\n[pscustomobject] @{ NewName = 'bar.txt' } | Rename-Item -LiteralPath foo.txt\r\n```\r\n\r\nwhich is unlikely to be useful in the real world.\r\n\r\nThus, it is conceptually awkward to have to signal support for ad-hoc script-block arguments via  `ValueFromPipelineByPropertyName`:\r\n\r\n * You have to express your intent _indirectly_, via an attribute designed for a _different_ purpose.\r\n * Support for that different purpose is likely unnecessary.\r\n\r\nIntroduction of a `ValueFromPipelineByScriptBock` attribute would solve these problems.\r\n\r\nThe only down-side is that for backward compatibility `ValueFromPipelineByPropertyName` would have to continue to _imply_ `ValueFromPipelineByScriptBlock`, so users would have to examine parameters for _either_ attribute in order to determine ad-hoc script-block argument support.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": "2018-05-15T12:26:11Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I don't see this attribute getting much use. It would reduce the portability of a command for almost no benefit.\r\n\r\nI *think* your proposed semantics are:\r\n\r\n* Value from the pipeline **only** via script block binding, not by name or value.\r\n\r\nI see little (no?) harm in allowing binding by name or value to also support script block binding.",
      "created_at": "2018-05-14T17:52:22Z",
      "updated_at": "2018-05-14T17:52:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\n> It would reduce the portability of a command \r\n\r\nWhat do you mean by portability in this context?\r\n\r\n> for almost no benefit.\r\n\r\nThe benefit is semantic directness: to have an attribute that expresses the intended functionality.\r\n\r\nThe ad-hoc script-block argument feature is currently virtually unknown for two reasons:\r\n\r\n* lack of documentation - see https://github.com/PowerShell/PowerShell-Docs/issues/2338\r\n\r\n* the absence of a dedicated attribute that signals support for it (which means you can't even _stumble upon_ the feature) - see https://github.com/PowerShell/PowerShell-Docs/issues/2427\r\n\r\n> I _think_ your proposed semantics are:\r\n>  * Value from the pipeline **only** via script block binding, not by name or value.\r\n\r\nYes, and that is arguably _all_ that you want for script-block binding: binding of a parameter via a value _derived_ from the objects in the pipeline (themselves bound to a _different_ parameter;  see the `-NewName` example above).\r\n\r\n> I see little (no?) harm in allowing binding by name or value to also support script block binding.\r\n\r\nThat's fine - and won't go away with the proposed new attribute.\r\n\r\nBut the _coupling_ with the ad-hoc script-block argument feature is neither obvious nor necessary, hence my suggestion to introduce a dedicated attribute.\r\n\r\nIf you think that introducing a new attribute is not worth the trouble, then we should at least make sure that the coupling is clearly documented for the `ValueFromPipeline*` attributes (which I've already asked for via the linked docs issues).\r\n\r\n",
      "created_at": "2018-05-14T19:39:24Z",
      "updated_at": "2018-05-14T19:39:24Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Portability - commands targeting Windows PowerShell in addition to PowerShell Core.\r\n\r\nCoupling - not obvious (I agree), not necessary (I can also agree), but not harmful.\r\n\r\nI wasn't part of the team when these features were designed, but in retrospect, I'm not sure I would have introduced a third attribute - in the spirit of less is more and aligning with your desires for maximal benefit, it seems to me that declaring a parameter as working in the pipeline is sufficient to enable additional functionality.\r\n\r\nTo put it another way, if script block binding were introduced today, I could reasonably land exactly where we are right now. I would **definitely** have considered adding a new attribute, but I'm not entirely sure I'd actually implement it.\r\n\r\nDocumentation - your writing skills are not lacking, you might be one of the best people to contribute such documentation.",
      "created_at": "2018-05-14T22:18:20Z",
      "updated_at": "2018-05-14T22:18:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nGood points, especially re targeting Windows PowerShell.\r\n\r\nI guess documenting the existing attributes (and the feature in general) properly is the way to go, so I'm closing this.",
      "created_at": "2018-05-15T12:26:10Z",
      "updated_at": "2018-05-15T12:26:10Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Key sentences:\r\n\"Portability - commands targeting Windows PowerShell in addition to PowerShell Core.\" and\r\n\"Good points, especially re targeting Windows PowerShell.\"\r\n\r\nWe all know, all work efforts and concentration will only target PowerShell Core(not Windows PowerShell).  \r\n\r\nSo, if this is needed in Windows PowerShell then create the UserVoice issue for it. This way it will be taken care of.\r\n\r\n:)",
      "created_at": "2018-05-15T13:12:41Z",
      "updated_at": "2018-05-15T13:12:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad:\r\n\r\nNow that we've decided not to add it to Core, how would adding it to Windows PowerShell help?\r\n\r\n",
      "created_at": "2018-05-15T13:20:37Z",
      "updated_at": "2018-05-15T13:20:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad:\r\n\r\nOre are you saying that we generally shouldn't worry about whether changes to PowerShell Core prevent code based on these changes from running on Windows PowerShell and older versions of it and that we therefore _should_ consider adding the attribute, but in Core only?\r\n",
      "created_at": "2018-05-15T13:26:16Z",
      "updated_at": "2018-05-15T13:27:10Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Oh No!! I all in for PowerShell Core moving forward. I misunderstood thinking that it was something needed in Windows PowerShell alongside PowerShell Core.\r\n\r\nI'm all good!\r\n:)\r\n",
      "created_at": "2018-05-15T14:55:44Z",
      "updated_at": "2018-05-15T14:55:44Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\nYes! It won't hurt to have the changes moving forward to Core.  Looks interesting!\r\n",
      "created_at": "2018-05-15T14:59:22Z",
      "updated_at": "2018-05-15T14:59:22Z"
    }
  ],
  "created_at": "2018-05-13T14:24:00Z",
  "number": 6861,
  "state": "closed",
  "title": "Consider introducing a `ValueFromPipelineByScriptBlock` attribute to signal support for ad-hoc script-block arguments",
  "updated_at": "2018-05-26T18:22:46Z"
}