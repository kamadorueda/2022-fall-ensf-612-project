{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7532",
  "author": "jherby2k",
  "body": "Steps to reproduce\r\n------------------\r\nOn Windows:\r\n$env:LocalAppData returns C:\\users\\<username>\\appdata\\local\r\n$([System.Environment]::GetFolderPath(28)) returns C:\\users\\<username>\\appdata\\local\r\n\r\nOn Linux:\r\n$env:LocalAppData returns nothing\r\n$([System.Environment]::GetFolderPath(28)) returns /home/<username>/.local/share/\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPowerShell's $env should return the same special folder paths returned by .NET Core's Environment.GetFolderPath() method.\r\n\r\nActual behavior\r\n---------------\r\n\r\nSee above\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.4                                           \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.4                                          \r\nOS                             Linux 4.15.0-1019-azure #19~16.04.1-Ubuntu SM...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Such env variables is absent on Unix. Although for more predictable behavior of scripts between platforms  we could implement the default values.",
      "created_at": "2018-08-16T10:32:08Z",
      "updated_at": "2018-08-16T10:32:08Z"
    },
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "I definitely get that \u201cspecial folders\u201d and \u201cenvironment variables\u201d are slightly different concepts, but I think it might make sense to set some variables within PowerShell that don\u2019t otherwise exist in the environment, for cross-platform compatibility. In my case this was a failing build script on Linux that required the workaround.",
      "created_at": "2018-08-16T12:09:08Z",
      "updated_at": "2018-08-16T12:09:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jherby2k: I think a better solution to this problem is to provide a special namespace via a new provider that mirrors `[Environment]::GetFolderPath()` (you don't want to create Windows-only _environment variables_ on Unix); using your example:\r\n\r\n```powershell\r\n[Environment]::GetFolderPath('LocalApplicationData')\r\n```\r\n\r\nwould become:\r\n\r\n```\r\n$sf:LocalApplicationData\r\n```\r\n\r\nSee #6966 for details.",
      "created_at": "2018-08-16T19:04:18Z",
      "updated_at": "2018-08-16T19:04:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The new namespace does not provide backward compatibility.",
      "created_at": "2018-08-17T03:36:33Z",
      "updated_at": "2018-08-17T03:36:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nTrue, but I doubt that any existing scripts that were written for just Windows would magically just work if only those environment variables were present on Unix.\r\n\r\nIf there's really a need for backward compatibility, the [WindowsCompatibility module](https://www.powershellgallery.com/packages/WindowsCompatibility) is probably the right place for such shims.",
      "created_at": "2018-08-17T03:46:01Z",
      "updated_at": "2018-08-17T03:46:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 So shouldn't the new namespace address the issue too?",
      "created_at": "2018-08-17T03:50:33Z",
      "updated_at": "2018-08-17T03:50:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Also how WindowsCompatibility module can help run windows script on Unix?",
      "created_at": "2018-08-17T03:52:11Z",
      "updated_at": "2018-08-17T03:52:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re module: my bad, I guess I engaged in wishful thinking regarding the purpose of that module - it only facilitates integrating with Windows PowerShell.\r\n\r\nHowever, the point is that I don't think that functionality that projects a Windows world view onto Unix is a sensible cross-platform strategy - such functionality should be _opt-in_, if needed at all.\r\n\r\n> So shouldn't the new namespace address the issue too?\r\n\r\nAddress what issue?",
      "created_at": "2018-08-17T04:36:55Z",
      "updated_at": "2018-08-17T04:36:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Address what issue?\r\n\r\nI meant the Issue we are discussing here - windows script is not work on Unix due to the lack of environment variables. I believe we could emulate the environment variables internally.\r\n\r\nAlthough there is one more problem - perhaps there is a conflict with .Net Core special folders on Unix.\r\n",
      "created_at": "2018-08-17T04:57:36Z",
      "updated_at": "2018-08-17T04:59:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ">  believe we could emulate the environment variables internally.\r\n\r\nThat's precisely what I suggest we avoid (to put it bluntly: hacks that pretend that Unix is Windows).\r\n\r\nCoreFx already provides platform _platforms abstractions_ with its `[Environment]::GetFolderPath()` method; the right thing to do is to surface its functionality in a PowerShell-idiomatic way - which is the proposed `$sf:` namespace.\r\n\r\nWhat conflicts?",
      "created_at": "2018-08-17T05:11:47Z",
      "updated_at": "2018-08-17T05:11:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">What conflicts?\r\n\r\nOn Unix special folders is mapped here\r\nhttps://github.com/dotnet/corefx/blob/b384b309061c050a31dcf2b8f377f5da244fcf7b/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L139\r\n - it can be unexpected behavior for PowerShell scripts. We need review the mapping.",
      "created_at": "2018-08-17T05:31:48Z",
      "updated_at": "2018-08-17T05:31:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've tried to summarize the cross-platform behavior here: https://github.com/PowerShell/PowerShell/issues/6966#issuecomment-393882898\r\n\r\nAnd there is indeed a conflict between `$HOME` and `[Environment]::GetFolderPath('MyDocuments')`:\r\n\r\n* you get `$HOME` _itself_ on Unix\r\n* you get `$HOME\\Documents` on Windows\r\n",
      "created_at": "2018-08-17T12:17:46Z",
      "updated_at": "2018-08-17T12:17:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So a conclusion here is that:\r\n1. Portable script should use [Environment]::GetFolderPath with special folders names.\r\n2. User could define Windows env variables on Unix as needed. It is a feature for a compatibility module.\r\n3. We don't want fix the issue in the engine by emulating Windows env variables on Unix.\r\n4. We could open an issue in PowerShell script analyzer to detect such problems in scripts (perhaps it already exists).",
      "created_at": "2018-08-17T13:22:04Z",
      "updated_at": "2018-08-17T13:22:04Z"
    },
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "Just because [Environment]::GetFolderPath is clunky and requires looking up the enum, as a user i'd prefer something like Get-SpecialFolder with auto completion.",
      "created_at": "2018-08-17T13:27:59Z",
      "updated_at": "2018-08-17T13:27:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jherby2k Please look #6966 - perhaps there is a proposed solution (Get-Location).",
      "created_at": "2018-08-17T13:34:12Z",
      "updated_at": "2018-08-17T13:34:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great summary, thanks, @iSazonov.\r\n\r\nYes, `[Environment]::GetFolderPath()` is clunky and there's no tab completion.\r\n\r\n #6966 evolved over time: it started out with suggesting a `-SpecialFolder` parameter for `Get-Location` / `Set-Location`, but it now _only_ proposes the `sf:` drive (provider), which automatically gives us the `$sf:` namespace, analogous to the `Env:` drive / `$env:` pair.\r\n\r\nThe advantage of this approach is that you get support in _any_ context (not tied to a particular cmdlet).\r\n\r\nFor instance, you'd type be able to type `$sf:us<tab>` and it would expand to `$sf:UserProfile` - whether as a command argument, an expression operand, or inside an expandable string.\r\n\r\nNote: `sf` stands for *s*pecial *f*older; the name is negotiable, but it should be succinct; `kf` for *k*nown *f*older is another option\r\n\r\n",
      "created_at": "2018-08-17T14:31:45Z",
      "updated_at": "2018-08-17T14:31:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The discrepancy of `MyDocuments` returning `$HOME` on Unix rather than `$HOME\\Documents` seems like a bug in corefx.\r\n\r\nIt seems like a `SF:` drive is a good solution to this.",
      "created_at": "2018-08-17T14:52:58Z",
      "updated_at": "2018-08-17T14:52:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it, @SteveL-MSFT.\r\n\r\nThe `MyDocuments` behavior is unfortunate, but I wouldn't call it a bug. Presumably, the decision was based on the fact that Unix-like platforms, unlike Windows, have no restriction on placing files and folders _directly_ in the user's home folder.  \r\nHowever, in the age of macOS and friendly Linux distros such as Ubuntu, which come with predefined folders similar to Windows, `$HOME\\Documents` arguably makes more sense.\r\n\r\nIt's certainly worth considering making a - documented - exception in PowerShell to eliminate this discrepancy when we surface the functionality.\r\n\r\n",
      "created_at": "2018-08-17T19:36:46Z",
      "updated_at": "2018-08-17T19:37:25Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "If not all special folders are available cross-platform, the `SF:` drive could make it easier to separate them from OS specific folders by using a subdirectory. For example, `SF:\\Win\\WindowsOnlyFolder`. This makes it clear that the folder won't exist on Linux or macOS",
      "created_at": "2018-08-18T04:08:35Z",
      "updated_at": "2018-08-18T04:08:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dragonwolf83 Seem your suggestion make sense only if we have _conflicts_ between of platforms. In any case we want that a script works on all platforms without modifications.",
      "created_at": "2018-08-20T03:40:08Z",
      "updated_at": "2018-08-20T03:41:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's definitely worth tagging the individual entries of the `sf:` drive with what platforms they're defined on (where they have nonempty paths as their values).\r\n\r\nTo that end, I suggest attaching a `.SupportedOS` property to each item, which could be an `[enum]` type as follows:\r\n\r\n```powershell\r\n[Flags()]\r\nenum SupportedOs {\r\n  Windows = 0x1\r\n  Linux = 0x2\r\n  macOS = 0x4\r\n}\r\n```\r\n\r\nNot sure if that makes for the most convenient way to query the information. however.\r\n",
      "created_at": "2018-08-21T04:15:18Z",
      "updated_at": "2018-08-21T04:15:18Z"
    },
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "Isn\u2019t it just as easy to see which ones are empty? If you need to know how they\u2019re going to resolve on a platform other than the one you\u2019re currently on, I think just referring to documentation would suffice.",
      "created_at": "2018-08-24T12:36:04Z",
      "updated_at": "2018-08-24T12:36:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jherby2k: While we could get away with just _documenting_ the platform-specific behavior, my vote is for continuing PowerShell's rich tradition of _programmatic_ discovery, i.e., reflection.\r\n\r\nTherefore, running `Get-ChildItem sf:` could yield something like the following on macOS:\r\n\r\n```none\r\nName                   Path                             SupportedOs\r\n----                   ----                             -----------\r\nAdminTools                                                  Windows\r\nApplicationData        /Users/jdoe/.config                      All\r\nCDBurning                                                   Windows\r\nCommonAdminTools                                            Windows\r\nCommonApplicationData  /usr/share                               All\r\nCommonDesktopDirectory                                      Windows\r\nCommonDocuments                                             Windows\r\nCommonMusic                                                 Windows\r\nCommonOemLinks                                              Windows\r\nCommonPictures                                              Windows\r\nCommonProgramFiles                                          Windows\r\nCommonProgramFilesX86                                       Windows\r\nCommonPrograms                                              Windows\r\nCommonStartMenu                                             Windows\r\nCommonStartup                                               Windows\r\nCommonTemplates                                             Windows\r\nCommonVideos                                                Windows\r\nCookies                                                     Windows\r\nDesktop                /Users/jdoe/Desktop                      All\r\nDesktopDirectory       /Users/jdoe/Desktop                      All\r\nFavorites              /Users/jdoe/Library/Favorites Windows, macOS\r\nFonts                  /Users/jdoe/Library/Fonts     Windows, macOS\r\nHistory                                                     Windows\r\nInternetCache          /Users/jdoe/Library/Caches    Windows, macOS\r\nLocalApplicationData   /Users/jdoe/.local/share                 All\r\nLocalizedResources                                          Windows\r\nMyComputer                                                  Windows\r\nMyDocuments            /Users/jdoe                              All\r\nMyMusic                /Users/jdoe/Music                        All\r\nMyPictures             /Users/jdoe/Pictures                     All\r\nMyVideos                                             Windows, Linux\r\nNetworkShortcuts                                            Windows\r\nPrinterShortcuts                                            Windows\r\nProgramFiles           /Applications                 Windows, macOS\r\nProgramFilesX86                                             Windows\r\nPrograms                                                    Windows\r\nRecent                                                      Windows\r\nResources                                                   Windows\r\nSendTo                                                      Windows\r\nStartMenu                                                   Windows\r\nStartup                                                     Windows\r\nSystem                 /System                       Windows, macOS\r\nSystemX86                                                   Windows\r\nTemplates                                            Windows, Linux\r\nUserProfile            /Users/jdoe                              All\r\nWindows                                                     Windows\r\n```\r\n\r\n---\r\n\r\nIn fact, the above was obtained with the following code, based on the findings in https://github.com/PowerShell/PowerShell/issues/6966#issuecomment-393882898, which is all that is needed (though it must be kept in sync with .NET Core manually; that said, changes will likely be few and far between):\r\n\r\n```powershell\r\n[Flags()]\r\nenum SupportedOs {\r\n  All = 0x7 # !! Sum of all the flags below - BE SURE To UPDATE THIS IF NEW FLAGS ARE ADDED\r\n  Windows = 0x1\r\n  Linux = 0x2\r\n  macOS = 0x4\r\n}\r\n\r\n$specialFolders = [ordered] @{\r\n  'AdminTools' = [pscustomobject] @{ Name = 'AdminTools'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'ApplicationData' = [pscustomobject] @{ Name = 'ApplicationData'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'CDBurning' = [pscustomobject] @{ Name = 'CDBurning'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonAdminTools' = [pscustomobject] @{ Name = 'CommonAdminTools'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonApplicationData' = [pscustomobject] @{ Name = 'CommonApplicationData'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'CommonDesktopDirectory' = [pscustomobject] @{ Name = 'CommonDesktopDirectory'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonDocuments' = [pscustomobject] @{ Name = 'CommonDocuments'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonMusic' = [pscustomobject] @{ Name = 'CommonMusic'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonOemLinks' = [pscustomobject] @{ Name = 'CommonOemLinks'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonPictures' = [pscustomobject] @{ Name = 'CommonPictures'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonProgramFiles' = [pscustomobject] @{ Name = 'CommonProgramFiles'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonProgramFilesX86' = [pscustomobject] @{ Name = 'CommonProgramFilesX86'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonPrograms' = [pscustomobject] @{ Name = 'CommonPrograms'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonStartMenu' = [pscustomobject] @{ Name = 'CommonStartMenu'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonStartup' = [pscustomobject] @{ Name = 'CommonStartup'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonTemplates' = [pscustomobject] @{ Name = 'CommonTemplates'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'CommonVideos' = [pscustomobject] @{ Name = 'CommonVideos'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Cookies' = [pscustomobject] @{ Name = 'Cookies'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Desktop' = [pscustomobject] @{ Name = 'Desktop'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'DesktopDirectory' = [pscustomobject] @{ Name = 'DesktopDirectory'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'Favorites' = [pscustomobject] @{ Name = 'Favorites'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS' }\r\n  'Fonts' = [pscustomobject] @{ Name = 'Fonts'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS' }\r\n  'History' = [pscustomobject] @{ Name = 'History'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'InternetCache' = [pscustomobject] @{ Name = 'InternetCache'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS' }\r\n  'LocalApplicationData' = [pscustomobject] @{ Name = 'LocalApplicationData'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'LocalizedResources' = [pscustomobject] @{ Name = 'LocalizedResources'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'MyComputer' = [pscustomobject] @{ Name = 'MyComputer'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'MyDocuments' = [pscustomobject] @{ Name = 'MyDocuments'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'MyMusic' = [pscustomobject] @{ Name = 'MyMusic'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'MyPictures' = [pscustomobject] @{ Name = 'MyPictures'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'MyVideos' = [pscustomobject] @{ Name = 'MyVideos'; Path = $null; SupportedOs = [SupportedOs] 'Windows, Linux' }\r\n  'NetworkShortcuts' = [pscustomobject] @{ Name = 'NetworkShortcuts'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'PrinterShortcuts' = [pscustomobject] @{ Name = 'PrinterShortcuts'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'ProgramFiles' = [pscustomobject] @{ Name = 'ProgramFiles'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS' }\r\n  'ProgramFilesX86' = [pscustomobject] @{ Name = 'ProgramFilesX86'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Programs' = [pscustomobject] @{ Name = 'Programs'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Recent' = [pscustomobject] @{ Name = 'Recent'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Resources' = [pscustomobject] @{ Name = 'Resources'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'SendTo' = [pscustomobject] @{ Name = 'SendTo'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'StartMenu' = [pscustomobject] @{ Name = 'StartMenu'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Startup' = [pscustomobject] @{ Name = 'Startup'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'System' = [pscustomobject] @{ Name = 'System'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS' }\r\n  'SystemX86' = [pscustomobject] @{ Name = 'SystemX86'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n  'Templates' = [pscustomobject] @{ Name = 'Templates'; Path = $null; SupportedOs = [SupportedOs] 'Windows, Linux' }\r\n  'UserProfile' = [pscustomobject] @{ Name = 'UserProfile'; Path = $null; SupportedOs = [SupportedOs] 'Windows, macOS, Linux' }\r\n  'Windows' = [pscustomobject] @{ Name = 'Windows'; Path = $null; SupportedOs = [SupportedOs] 'Windows' }\r\n}\r\n\r\n$specialFolders.GetEnumerator() | % { \r\n  $_.Value.Path = [Environment]::GetFolderPath($_.Value.Name); $_.Value \r\n}\r\n```",
      "created_at": "2018-08-25T03:33:27Z",
      "updated_at": "2018-08-25T03:33:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As a stopgap, I've published advanced function `Get-SpecialFolder` in [this Gist](https://gist.github.com/mklement0/c0a5d8a0aa44369689800c57e2b747c2), which\r\n\r\n* by default only lists those folders that are defined for the OS at hand\r\n* supports tab-completion of the special folder names\r\n\r\nHere's the concise form of the CLI help (`Get-SpecialFolder -?`):\r\n\r\n```none\r\nSYNTAX\r\n    Get-SpecialFolder [-All] [<CommonParameters>]\r\n\r\n    Get-SpecialFolder [-Name] <String[]> [<CommonParameters>]\r\n\r\n\r\nDESCRIPTION\r\n    Gets items representing special folders (directories), i.e.,\r\n    folders whose purpose is predefined by the operating system.\r\n\r\n    In a string context, each such item expands to the full, literal path it\r\n    represents.\r\n\r\n    If no name is given, all special folders known to the current OS\r\n    are listed. Use -All to include those that are special on other platforms.\r\n```",
      "created_at": "2018-08-25T22:48:13Z",
      "updated_at": "2018-08-25T22:48:13Z"
    }
  ],
  "created_at": "2018-08-15T17:17:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Providers"
  ],
  "number": 7532,
  "state": "open",
  "title": "Special folders and $env differ on Linux",
  "updated_at": "2018-08-25T22:48:14Z"
}