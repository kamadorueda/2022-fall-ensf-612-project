{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15870",
  "author": "seschu01",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n\r\nStephenSchuster-2883 asked \u00b7 3 hours agoActions\r\nAIP - GetAIPFileStatus and Set-AIP Labels cause Powershell to crash....any ideas?\r\nSo apparently the Powershell commands for Get AIPFileStatus and Setting a label are not working properly in bulk operations.\r\n\r\nI have been testing this over the past two weeks and can consistently replicate this on both my personal machine and at work. My Personal Machine means my DEV Azure instance whereas work is using theirs.\r\n\r\nFrom what I can tell there is no rhyme or reason to this and it may actually work from time to time, but it will ultimately fail with one of the two errors listed below:\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The Windows PowerShell process will exit.\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n\r\nor...\r\n\r\nUnhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nat Microsoft.InformationProtection.Internal.SdkWrapperPINVOKE.delete_Opaque(HandleRef jarg1)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose(Boolean disposing)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose()\r\nat Microsoft.InformationProtection.Internal.ProtectionEngine.Observer.SwigDirectorMethodOnGetRightsForLabelIdSuccess(IntPtr rights, IntPtr context)\r\n\r\nWhen this does happen it will also trigger an Event Viewer failure which is about as helpful as a poke in the eye:\r\n\r\nER1nTNoQB-pBihwE-t0SNeAB0RJOm6ekn8PtkU2Sw77qJQ\r\n\r\nI have executed this via direct PowerShell, PowerShell ISE, and a Scheduled PowerShell Job. I do find that the scheduled job will continually run but when going through my log files I find that it does not apply the Labels properly or simply crashes when doping the initial get.\r\n\r\nMy final code looked something like this:\r\n\r\nGet-ChildItem $strDestSource -File -Recurse | Get-AIPFileStatus | Where-Object {($_.SubLabelId -eq $aipExistingLabelId)}\r\n\r\nI would use this for count purposes. Sometimes this fails ...\r\n\r\nThen we would do the actual apply:\r\n\r\nGet-ChildItem $strDestSource -File -Recurse | Get-AIPFileStatus | Where-Object {($_.SubLabelId -ne $aipExistingLabelId)} | Set-AIPFileLabel -LabelId $secID -PreserveFileDetails -JustificationMessage \"Automated Labeling before migration\"\r\n\r\n...and again this would work sometimes but would eventually fail randomly.\r\n\r\nTo be fair I also grabbed the Get-ChildItem object and did a foreach loop and tried to update the files one by one, but again - random failure.\r\n\r\nFunction aip{\r\nparam([parameter(ValueFromPipeline)][object[]]$inclusionsFiles)\r\nWrite-Host \"AIP Calculation for file: \" $inclusionsFiles -ForegroundColor Green\r\nProcess{\r\nforeach ($file in $inclusionsFiles){\r\ntry{\r\n.....\r\nSet-AIPFileLabel -Path $file.FullName -LabelId $aipSubLabelId -PreserveFileDetails -JustificationMessage \"Automated Labeling before migration $startTime\" | Out-Null\r\n.....\r\n\r\nHas ANYONE seen ANYTHING from MS on this bug. Is it confirmed, when is it going to be fixed????\n\n### Expected behavior\n\n```console\nI would expect PowerShell to not crash and the Labels to be set properly. This seems to work sporadically and definately if I manually powershell the command per file.\n```\n\n\n### Actual behavior\n\n```console\nThe actual behaviour is it will randomly generate the following errors:\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The Windows PowerShell process will exit.\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n\r\nor...\r\n\r\nUnhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nat Microsoft.InformationProtection.Internal.SdkWrapperPINVOKE.delete_Opaque(HandleRef jarg1)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose(Boolean disposing)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose()\r\nat Microsoft.InformationProtection.Internal.ProtectionEngine.Observer.SwigDirectorMethodOnGetRightsForLabelIdSuccess(IntPtr rights, IntPtr context)\n```\n\n\n### Error details\n\n```console\nErrors:\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The Windows PowerShell process will exit.\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n\r\nor...\r\n\r\nUnhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nat Microsoft.InformationProtection.Internal.SdkWrapperPINVOKE.delete_Opaque(HandleRef jarg1)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose(Boolean disposing)\r\nat Microsoft.InformationProtection.Internal.Opaque.Dispose()\r\nat Microsoft.InformationProtection.Internal.ProtectionEngine.Observer.SwigDirectorMethodOnGetRightsForLabelIdSuccess(IntPtr rights, IntPtr context)\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.22000.65\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.22000.65\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nBinary     2.11.58.0  AzureInformationProtection          {Add-AIPScannerRepository, Clear-AIPAuthentication, Export-AIPLogs, Get-AIPFileStatus...}\r\nManifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}\r\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\r\nScript     1.4.7      PackageManagement                   {Find-Package, Find-PackageProvider, Get-Package, Get-PackageProvider...}\r\nScript     1.0.0.1    PowerShellGet                       {Find-Command, Find-DscResource, Find-Module, Find-RoleCapability...}\r\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler, Set-PSReadLineKeyHandler...}\n```\n\n\n### Visuals\n\nNone, all PS\r\n![Error](https://user-images.githubusercontent.com/16479772/128233692-f3909a5d-151f-4ccd-83db-4f02537f1d86.png)\r\n",
  "closed_at": "2021-08-06T01:00:33Z",
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@seschu01 You are in the PowerShell Core repository, so no support for PowerShell 5.1. Then, your problem is located in a module, so please contact your module provider.\r\nI think you can close your issue.\r\nPS : you should try a higher module version and disabled your antivirus.",
      "created_at": "2021-08-04T22:37:04Z",
      "updated_at": "2021-08-04T22:37:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As best I can tell this module might be owned by AzPS team, try opening an issue in this repo: https://github.com/Azure/azure-powershell\n\n<blockquote><img src=\"https://opengraph.githubassets.com/bbc792395f39f5ed39c948dc6a03e6c4f4705309c9896f511532870e70f5e159/Azure/azure-powershell\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/Azure/azure-powershell\">GitHub - Azure/azure-powershell: Microsoft Azure PowerShell</a></strong></div><div>Microsoft Azure PowerShell. Contribute to Azure/azure-powershell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-08-04T23:12:54Z",
      "updated_at": "2021-08-04T23:12:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2021-08-06T01:00:32Z",
      "updated_at": "2021-08-06T01:00:32Z"
    }
  ],
  "created_at": "2021-08-04T18:19:49Z",
  "labels": [
    "Resolution-External"
  ],
  "number": 15870,
  "state": "closed",
  "title": "Get-AIPFileStatus and Set-AIPFileLabel PowerShell crashing on dataset loops or object loops",
  "updated_at": "2021-08-06T01:00:33Z"
}