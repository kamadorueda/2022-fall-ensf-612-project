{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9701",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\n#9684 shows that while you can _declare_ optional parameters, they are  _in effect_ mandatory, and the default value is _ignored_.\r\n\r\nReporting an error when an attempt is made to declare an optional parameter is one solution, but a better option is to _enable proper support for optional method parameters_, so that the following would work:\r\n\r\n```powershell\r\n# Wishful thinking\r\nPS> class Foo { [string] Bar($Baz = 'Bam') { return $Baz } }; [Foo]::new().Bar()\r\nBam\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need reference this in #6652 /cc @rjmholt ",
      "created_at": "2019-05-23T03:26:38Z",
      "updated_at": "2019-05-23T03:26:55Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I think this is essentially https://github.com/PowerShell/PowerShell/issues/7534.",
      "created_at": "2019-05-23T04:40:16Z",
      "updated_at": "2019-05-23T04:40:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt it might be related, but that looks to be pretty different; for one, it affects c# classes added with Add-Type, not PS classes,  and the error is different (it actually recognises that there was another argument that should be set  by default, buy the looks of it).",
      "created_at": "2019-05-23T11:06:00Z",
      "updated_at": "2019-05-23T11:06:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah `TypeDefiner` just ignores the assignment in class method parameters. This does bring up an interesting question though.\r\n\r\nMethod parameter defaults have to be written into metadata, therefore they must be constants.  How will PowerShell handle that?\r\n\r\n1. Require parameter defaults to be constants, just like C# does\r\n1. Allow expressions, set the metadata default value to `null` or `default`, and add the expression as the first line in the method body.  Problem is I can't think of a way for the expression to tell if the parameter was not specified, or if a `null` or `default` value was passed specifically.  This seems impossible.",
      "created_at": "2019-05-23T11:49:25Z",
      "updated_at": "2019-05-23T11:49:25Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 I'm imagining there are two problems:\r\n\r\n- .NET methods with optional parameters don't have those parameters honoured. It doesn't matter whether it's a C# or a PS class, at execution time it's all .NET\r\n- The PS parser does not reject assignment in method parameter specifications, creating the expectation that optional parameters will work (probably because it was planned at some stage). We'd need store the RHS in the AST and hook it into the type generator.\r\n\r\nI'd expect the fix for #7534 to make the first part work.\r\n\r\nIf we just went with ordinary .NET constant expressions, it wouldn't be too difficult to make the second part work either.\r\n\r\nBut I think it would be worth trying to make arbitrary expressions work:\r\n\r\n- Allow the RHS to be any expression, which is an implicit lambda like for function parameters\r\n- Given an argument of type `[T]`, the lambda is compiled as a `[Func[T]]`, wrapping an implicit scriptblock around the expression (since classes are decidedly type-checking)\r\n- When the parameter is supplied on method call, the lambda is not called\r\n- When the parameter is not supplied, the lambda is called (and the script block is dot-sourced into the class method body)\r\n- This could done by adding statements into the top of the class body, like:\r\n    ```\r\n    if (!paramN.HasValue && paramN.DefaultLambda != null)\r\n    {\r\n        $paramN = paramN.DefaultLambda()\r\n    }\r\n    ```",
      "created_at": "2019-05-23T15:43:00Z",
      "updated_at": "2019-05-23T15:43:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> This could done by adding statements into the top of the class body, like:\r\n\r\n~@rjmholt How will you know if the parameter was or wasn't specified though?  If the caller is from PowerShell then that could work, but if the caller isn't then it'll look like `null` or `default` was specified.~\r\n\r\n**Edit**: That actually might not be that big of a deal.  I was thinking about implementing interfaces and subclassing types from a CLR lib.  Now that I think about though, none of those can specify a default parameter value as a constraint, and even if they did the caller would still need to *actually reference* the PowerShell class to get the default value from it.  Considering that's incredibly unlikely (or impossible?) from rosyln this probably isn't a concern.",
      "created_at": "2019-05-23T16:00:03Z",
      "updated_at": "2019-05-23T16:05:26Z"
    }
  ],
  "created_at": "2019-05-22T23:18:02Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 9701,
  "state": "open",
  "title": "Make methods in custom classes support optional parameters",
  "updated_at": "2019-05-23T16:05:26Z"
}