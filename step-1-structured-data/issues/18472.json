{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18472",
  "author": "MartinGC94",
  "body": "### Summary of the new feature / enhancement\n\nThe DontShow attribute parameter that the Parameter attribute has allows a function/script author to hide parameters like this:\r\n\r\n```\r\nfunction Verb-Noun\r\n{\r\n    Param\r\n    (\r\n        [Parameter()]\r\n        [string]\r\n        $Param1,\r\n\r\n        [Parameter(DontShow)]\r\n        [string]\r\n        $Param2\r\n    )\r\n}\r\n#Tab completion does not show Param2\r\nVerb-Noun -<Tab>\r\n```\r\n\r\nThis has the side effect of also hiding the common parameters.  \r\nIt seems to have been an intentional design choice, see this: https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L768 but I think that should be changed because it makes it impractical to use `DontShow` to hide old deprecated parameters like `ConvertTo-Csv` does with the `NoTypeInformation` parameter because then the user won't see important common parameters like `ErrorAction`.\n\n### Proposed technical implementation details (optional)\n\nInstead of automatically hiding common parameters when `DontShow` has been specified, add a `HideCommonParameters` parameter to the `CmdletBinding` attribute.",
  "closed_at": null,
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Alternatively a change on L780 from false to true would be the simplest way to solve this `This has the side effect of also hiding the common parameters.`\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/9f459c05f617fe530dac340aa546d198724d85da/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L772-L781\r\n\r\nHowever expanding on your proposed implementation this I think that if a `HideCommonParameters` option to `CmdletBinding` was added then there would need to be a check for it.\r\nMy question would be `Is there really a need for us to hide the common parameters?` & if not then do we really need a `HideCommonParameters` option for the `CmdletBinding` attribute?\r\n\r\n\r\n",
      "created_at": "2022-11-10T22:47:14Z",
      "updated_at": "2022-11-10T22:47:14Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I can see why someone might want to hide the 11 common parameters you get with cmdletbinding in simple functions/scripts that are meant to be used by less technical users. So I think it's best to have a replacement instead of just completely removing the option.",
      "created_at": "2022-11-10T23:25:53Z",
      "updated_at": "2022-11-10T23:25:53Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": ">I can see why someone might want to hide the 11 common parameters you get with cmdletbinding in simple functions/scripts that are meant to be used by less technical users.\r\n\r\nFor Simple scripts/functions you can do this by omitting the `[parameter()]` attribute off of all parameters entirely\r\n\r\n``` powershell\r\nfunction Verb-Nounsimple { \r\n    Param\r\n    (\r\n        [string]\r\n        $Param1,\r\n\r\n        [string]\r\n        $Param2\r\n    )\r\n}\r\n```\r\n\r\nor also commonly written like so \r\n\r\n``` powershell\r\nfunction Verb-Nounsimple { param([string]$Param1,[string]$Param2) }\r\n```\r\nwont give you the common parameters in tab completion\r\n\r\nSame applies if you were to have a script with simple param block as per the above verb-nounsimple example - which is why I asked the question I did, because we already have the ability inbox, **unless** there really is a use case for the following\r\n- Hide a parameter from intellisense & also hide common parameters too\r\n\r\nin which case the current design makes sense\r\nHowever I don't think it does and think that the correct fix is the simplest one in the change I highlighted in L780 \r\nThat said that is **unless** you want an advanced function / script where you can Hide a parameter from intellisense but choose to either hide or show common parameters too - is this really the ask & if so then how much of a need is there for this, I'm guessing that it's not a critical need, more a nice to have and not likely to be a high priority for the team to take on",
      "created_at": "2022-11-10T23:35:04Z",
      "updated_at": "2022-11-10T23:45:10Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Sure you can, but then you miss out on pipeline support, parametersets, and mandatory parameters.",
      "created_at": "2022-11-10T23:37:22Z",
      "updated_at": "2022-11-10T23:37:22Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> Sure you can, but then you miss out on pipeline support, parametersets, and mandatory parameters.\r\n\r\nThen you want an advanced function/script and not a simple function / script which again comes back to a more important question on function/script design. which is a much larger question than many realise until later on in the development of it & often changes drastically over time.\r\n\r\n",
      "created_at": "2022-11-10T23:47:25Z",
      "updated_at": "2022-11-10T23:47:25Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "> > Sure you can, but then you miss out on pipeline support, parametersets, and mandatory parameters.\r\n> \r\n> Then you want an advanced function/script and not a simple function / script which again comes back to a more important question on function/script design. which is a much larger question than many realise until later on in the development of it & often changes drastically over time.\r\n\r\nSo what's your point here? That nobody would want to hide the common parameters for a random script with a mandatory parameter?  \r\nI'm sure I'm not the only one that has done something like this in a script where I needed a mandatory parameter but didn't want to confuse the user with the common parameters:\r\n\r\n```\r\nParam\r\n(\r\n    [Parameter(Mandatory)]\r\n    [string]\r\n    $Param1,\r\n\r\n    # Dummy parameter to hide common parameters\r\n    [Parameter(DontShow)]\r\n    $Dummy\r\n)\r\n```\r\n\r\nJust to be clear here, I'm obviously not arguing to keep the current behavior, I'm just saying that if we fix the current behavior we need to provide an alternative for the people that actually wants to hide common parameters.",
      "created_at": "2022-11-11T00:19:54Z",
      "updated_at": "2022-11-11T00:19:54Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "> > Sure you can, but then you miss out on pipeline support, parametersets, and mandatory parameters.\r\n> \r\n> Then you want an advanced function/script and not a simple function / script which again comes back to a more important question on function/script design. which is a much larger question than many realise until later on in the development of it & often changes drastically over time.\r\n\r\nSometimes one writes advanced functions for simple users.\r\n\r\nI agree with @MartinGC94 that there's value in separating `DontShow` from hiding common parameters and keeping both capabilities.  Personally, for the use-case of making things less overwhelming for less skilled users, I think I'd rather see that handled by something like a `$CommonParameterVisibility` preference variable, rather than having to deal with it on a per-function basis.",
      "created_at": "2022-11-11T21:56:03Z",
      "updated_at": "2022-11-11T21:56:03Z"
    }
  ],
  "created_at": "2022-11-05T15:09:29Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-IntelliSense",
    "Needs-Triage"
  ],
  "number": 18472,
  "state": "open",
  "title": "DontShow should not hide common parameters",
  "updated_at": "2022-11-11T21:56:03Z"
}