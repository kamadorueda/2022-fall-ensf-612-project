{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13312",
  "author": "aetos382",
  "body": "## Summary of the new feature/enhancement\r\n\r\nI propose to add parameters to the `Get-Date` command that allows specifying the time difference of the value to be output.\r\n\r\nFor example:\r\n\r\n```powershell\r\nGet-Date [-Date <DateTime | DateTimeOffset>] [-TimeZone <TimeZoneInfo>] ...\r\n```\r\n\r\n```powershell\r\nGet-Date [-Date <DateTime | DateTimeOffset>] [-Offset <TimeSpan>] ...\r\n```\r\n\r\nIf these parameters are specified, the value to be output will be [DateTimeOffset](https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset).\r\n\r\n### Date\r\nExtend this parameter to accept `DateTimeOffset`.\r\n\r\n### TimeZone\r\nSpecify the time zone of the output.\r\nThis parameter can take the [TimeZoneInfo](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo) object as well as its [ID](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id).\r\nAnd it accepts `UTC` and `Local` as special values.\r\n\r\nFor example:\r\n\r\n```powershell\r\nGet-Date -TimeZone (Get-TimeZone)\r\n```\r\n\r\n```powershell\r\nGet-Date -Date '2020-08-01T10:00:00-07:00' -TimeZone 'Asia/Tokyo'\r\n```\r\n\r\n```powershell\r\nGet-Date -TimeZone UTC\r\n```\r\n\r\n### Offset\r\nSpecifies the offset of time from UTC of the value to be output.\r\n\r\nFor example:\r\n```powershell\r\nGet-Date -Offset ([TimeSpan]::FromHours(-8))\r\n```\r\n\r\n```powershell\r\nGet-Date -Offset '-8:00'\r\n```\r\n\r\n## Usecase examples\r\nThe following example shows how to convert the time expressed in the US local time to time in Japan.\r\n\r\n```powershell\r\nGet-Date -Date '2020-08-01 10:00' -TimeZone 'America/Los_Angels' | Get-Date -TimeZone 'Asia/Tokyo' -Format f\r\n```\r\n\r\n```output\r\nSunday, August 2, 2020 2:00 PM\r\n```\r\n\r\n## Related proposals\r\n#11731 suggests adding `-AsLocal` parameter. The `-AsLocal` switch is equivalent to `-TimeZone Local`.\r\nThe `-TimeZone` parameter covers the functionality of the `-AsUTC`, `-AsLocal`, and `-AsKind` parameters, and more widely.\r\n\r\nI believe that using `DateTimeOffset` is preferable to using `DateTime` and `DateTimeKind`.\r\n\r\n## Proposed technical implementation details\r\n\r\n### Type of the `-Date` parameter\r\nThe `-Date` parameter must accept `DateTime`, `DateTimeOffset` and `Int64`.\r\nSince there is no existing type that satisfies these requirements, we need to change the type of the `-Date` parameter to a custom type such as the following.\r\n\r\n```cs\r\npublic readonly struct DateInput\r\n{\r\n    public DateInput(DateTime dateTime) {}\r\n    \r\n    public DateInput(DateTimeOffset dateTimeOffset) {}\r\n\r\n    public DateInput(long tick) {}\r\n}\r\n```\r\n\r\n### Converting time zone ID to `TimeZoneInfo` object\r\n`TimeZoneInfo` cannot be implicitly converted from a string representing its ID.\r\nWe can create a custom type for the `-TimeZone` parameter as described above, or create an attribute derived from the [ArgentTransformationAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.argumenttransformationattribute) and assign it to `-TimeZone` parameter.\r\n\r\n## Considerations\r\n\r\n### Platform dependence of time zone ID\r\nThe [TimeZoneInfo.FindSystemTimeZoneById method](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid) supports different time zone ID formats, depending on the platform.\r\nFor example, 'Pacific Standard Time' on Windows, 'America/Los_Angeles' on Linux.\r\n\r\nWe need to consider whether the parameter `-TimeZone` should be platform-independent and should be able to take the same value.\r\nBy using a library like [TimeZoneConverter](https://github.com/mj1856/TimeZoneConverter), we can make it platform-independent.\r\n\r\n### Abbreviations for time zone\r\nFor example, a format like '10:00 AM PDT' is used to describe the start time of a webinar or system maintenance.\r\nAbbreviations for time zones such as 'PDT' are widely used, but are not specified in official specifications such as ISO 8601 and are ambiguous.\r\nI think it would be useful if the `-TimeZone` parameter could accept such abbreviations, but should we support this?\r\n\r\n### Removing an `-AsUTC` parameter\r\nConsider removing the `-AsUTC` parameter because its functionality is superseded by `-TimeZone UTC`.\r\nThis parameter was added in the 7.1 preview release and is not yet generally available.\r\n\r\n### Default format for `DateTimeOffset`\r\nCurrently, the default output for `DateTimeOffset` is in the following format:\r\n\r\n```output\r\nDateTime      : 7/29/2020 10:31:25 PM\r\nUtcDateTime   : 7/30/2020 5:31:25 AM\r\nLocalDateTime : 7/29/2020 10:31:25 PM\r\nDate          : 7/29/2020 12:00:00 AM\r\nDay           : 29\r\nDayOfWeek     : Wednesday\r\nDayOfYear     : 211\r\nHour          : 22\r\nMillisecond   : 54\r\nMinute        : 31\r\nMonth         : 7\r\nOffset        : -07:00:00\r\nSecond        : 25\r\nTicks         : 637316586850545851\r\nUtcTicks      : 637316838850545851\r\nTimeOfDay     : 22:31:25.0545851\r\nYear          : 2020\r\n```\r\n\r\nOutput in the following format, like DateTime, will be easier to read.\r\n\r\n```output\r\nWednesday, July 29, 2020 10:31:25 PM (UTC -07:00)\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Get-Date cmdlet is already too complex. Maybe better to consider new Get-DateTimeOffset cmdlet?",
      "created_at": "2020-07-30T08:26:34Z",
      "updated_at": "2020-07-30T08:26:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We can't have one parameter accepting two different types. We _can_ have the parameter accept just `DateTimeOffset`, which from memory `DateTime` will convert to cleanly, but it would be somewhat confusing.\r\n\r\nPersonally if we can come up with a more intuitive name than `Get-DateTimeOffset` for the cmdlet (IMO that type name is _very_ unintuitive at best, it describes the implementation more than the usage/purpose) then I'm for a new cmdlet. Otherwise, Get-Date is the natural choice for it, but potentially in completely separate parameter sets.",
      "created_at": "2020-07-30T18:21:34Z",
      "updated_at": "2020-07-30T18:21:34Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "\"The Get-Date cmdlet is already too complex.\"  - says who?  What is lacking is some decent examples of how to use the blasted thing. I spent a week wrestling with [TimeZoneInfo]::GetSystemTimeZones() (which is  different between Windows and Linux!) and figuring out DST shifts - this suggestion above would look to meet a very real need and Get-Date is the obvious cmdlet to address it.  ",
      "created_at": "2020-08-02T05:12:35Z",
      "updated_at": "2020-08-02T05:12:35Z"
    },
    {
      "author": "aetos382",
      "author_association": "CONTRIBUTOR",
      "body": "> We _can_ have the parameter accept just `DateTimeOffset`\r\n\r\nDateTime has a constructor that takes only one `long`, while `DateTimeOffset` does not.\r\nSo changing the type of the `-Date` parameter to `DateTimeOffset` makes calls like `Get-Date -Date 1` impossible. This is a breaking change.",
      "created_at": "2020-08-05T04:45:28Z",
      "updated_at": "2020-08-05T04:45:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not necessarily. We can implement a transformation attribute to bridge the gap there if needed. But yeah, that's definitely something to keep in mind, thanks! \ud83d\udc96 ",
      "created_at": "2020-08-05T11:20:35Z",
      "updated_at": "2020-08-05T11:20:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @vexx32; just to provide some conceptual background on conversions between `[datetime]` and `[datetimeoffset]` we need to be mindful of:\r\n\r\n`Get-Date -Date 1` currently outputs an `Unspecified` `[datetime]` instance, whereas `[datetimeoffset]` has no equivalent representation (all instances represent concrete, unambiguous points in time). \r\n\r\nConverting an `Unspecified` `[datetime]` to a `[datetimeoffset]` effectively turns it into a _local_ date (that is the local time zone's then-current UTC offset is used).\r\n\r\nConverting a `[datetimeoffset]` instance back to `[datetime]` (via the `.Date` or `.DateTime` properties) invariably returns an `Unspecified` `[datetime]` instance, irrespective of the instance's specific offset.\r\n\r\nSee also the musings on whether we should for conceptual simplicity eliminate `Unspecified` output altogether (technically, a breaking change): https://github.com/PowerShell/PowerShell/issues/11731#issuecomment-659279816\r\n\r\n",
      "created_at": "2020-08-05T12:24:31Z",
      "updated_at": "2020-08-05T12:24:31Z"
    }
  ],
  "created_at": "2020-07-30T05:24:12Z",
  "number": 13312,
  "state": "open",
  "title": "Add timezone/offset related parameters to the Get-Date command",
  "updated_at": "2020-08-05T12:24:31Z"
}