{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6386",
  "author": "mklement0",
  "body": "The documented syntax for invoking a base-class method from a PS custom class is  \r\n`([<base-class>] $this).<method>()`, but that doesn't seem to work, as discovered in [this SO question](https://stackoverflow.com/q/49259408/45375).\r\n\r\nInstead, the derived class' method itself is invoked, resulting in infinite recursion.\r\n\r\n**Update**: The problem appears to be specific to `[System.Xml.XmlNode]`-derived classes; see [@daxian-dbw's comment below](https://github.com/PowerShell/PowerShell/issues/6386#issuecomment-372869624).\r\n\r\nA reflection-based workaround can be found in [this answer](https://stackoverflow.com/a/49265123/45375).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nclass child : System.Xml.XmlDocument {\r\n  [void] LoadXml([string]$content) {\r\n    Write-Host 'Inside overridden LoadXml.'\r\n    # Try to call the base type's .LoadXml() method.\r\n    ([System.Xml.XmlDocument] $this).LoadXml($content)\r\n  }\r\n}\r\n\r\n[child]::new().LoadXml('<foo>bar</foo>')\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nInside overridden LoadXml.\r\n```\r\n\r\nThe message should print once, and the XML string should be loaded into the instance via the call to the base-class method.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nInside overridden LoadXml.\r\nInside overridden LoadXml.\r\n...\r\n```\r\n\r\nThe method keeps calling itself and eventually runs into a call-depth overflow.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.1 on macOS 10.13.3\r\nPowerShell Core v6.0.1 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.1 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2018-03-15T22:09:39Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "It seems to work, at least in simple cases, when you are extending a PowerShell class as in:\r\n```\r\nPS[1] (110) > class foo { [void] doit() {Write-Host \"DOIT\" }}\r\nPS[1] (111) > class bar : foo { [void] doit() {([foo] $this).doit()}}\r\nPS[1] (112) > $b.doit()\r\nDOIT\r\n```\r\n\r\n@lzybkr Thoughts?",
      "created_at": "2018-03-13T21:56:17Z",
      "updated_at": "2018-03-13T21:56:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Sorry, no idea what is going on here.",
      "created_at": "2018-03-13T22:08:27Z",
      "updated_at": "2018-03-13T22:08:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is not specific to powershell class. It repros with a regular type added with `Add-Type`:\r\n```\r\n$code =@'\r\n  public class Foo : System.Xml.XmlDocument {\r\n    public override void LoadXml(string content) {\r\n       System.Console.WriteLine(\"BLAH\");\r\n    }\r\n  }\r\n'@\r\nAdd-Type $code\r\n$foo = [Foo]::new()\r\n([System.Xml.XmlDocument]$foo).LoadXml('<foo>bar</foo>')\r\n> BLAH\r\n```\r\n------------------------\r\nThis is actually specpfic to types that derive from `System.Xml.XmlNode`. The primary adapter of such a type is the `XmlNodeAdapter`, which is not optimizable (`SiteBinderCanOptimize` returns `false`). In such case, the invocation is done through the `Invoke` method of the adapter, instead of `PSInvokeMemberBinder.InvokeDotNetMethod`, and therefore, the `PSMethodInvocationConstraints` is not respected.",
      "created_at": "2018-03-14T01:00:10Z",
      "updated_at": "2018-03-14T01:00:10Z"
    }
  ],
  "created_at": "2018-03-13T20:32:33Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Fixed"
  ],
  "number": 6386,
  "state": "closed",
  "title": "Calling base class method in a System.Xml.XmlNode-derived custom class fails; invokes own method instead, resulting in infinite recursion",
  "updated_at": "2018-03-16T03:15:38Z"
}