{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15274",
  "author": "jazzdelightsme",
  "body": "I\u2019m trying to consume the [Microsoft.PowerShell.SDK package](https://www.nuget.org/packages/Microsoft.PowerShell.SDK/), because I want to host the PowerShell runtime in my app. But the resulting file layout does not quite work in my situation.\r\n\r\nImportantly (for this Issue), my app is built as a \"Self-Contained Deployment\" (SCD) (as opposed to a \"Framework-Dependent Deployment\" (FDD)). And targeting Windows only (RID of `win10-x64`).\r\n\r\nWhen I build my VS solution, I end up with these files in my output directory:\r\n\r\n```none\r\nC:\\SRC\\TMP_DBGSHELL2\\BIN\\DEBUG\\X64\\RUNTIMES\r\n\u251c\u2500\u2500\u2500unix\r\n\u2502   \u2514\u2500\u2500\u2500lib\r\n\u2502       \u2514\u2500\u2500\u2500net5.0\r\n\u2502           \u2514\u2500\u2500\u2500Modules\r\n\u2502               \u251c\u2500\u2500\u2500Microsoft.PowerShell.Host\r\n\u2502               \u251c\u2500\u2500\u2500Microsoft.PowerShell.Management\r\n\u2502               \u251c\u2500\u2500\u2500Microsoft.PowerShell.Security\r\n\u2502               \u2514\u2500\u2500\u2500Microsoft.PowerShell.Utility\r\n\u2514\u2500\u2500\u2500win\r\n    \u2514\u2500\u2500\u2500lib\r\n        \u2514\u2500\u2500\u2500net5.0\r\n            \u2514\u2500\u2500\u2500Modules\r\n                \u251c\u2500\u2500\u2500CimCmdlets\r\n                \u251c\u2500\u2500\u2500Microsoft.PowerShell.Diagnostics\r\n                \u251c\u2500\u2500\u2500Microsoft.PowerShell.Host\r\n                \u251c\u2500\u2500\u2500Microsoft.PowerShell.Management\r\n                \u251c\u2500\u2500\u2500Microsoft.PowerShell.Security\r\n                \u251c\u2500\u2500\u2500Microsoft.PowerShell.Utility\r\n                \u251c\u2500\u2500\u2500Microsoft.WSMan.Management\r\n                \u2514\u2500\u2500\u2500PSDiagnostics\r\n```\r\n\r\nThe \u201cunix\u201d directory is definitely not needed at all\u2014my sole TFM is \u201cnet5.0-windows\u201d and my `<TargetPlatformIdentifier>` is Windows; my RID is win10-x64\u2026 so I don\u2019t want anything n*x-related in my output.\r\n\r\nBut worse: the win \u201cModules\u201d directory IS actually needed, but it is in the wrong place to be found at runtime--it should be in the root output directory (next to S.M.A.dll, else S.M.A.dll can\u2019t find it).\r\n\r\n# Repro steps\r\n\r\n1. Create a default .NET \u201cHello world\u201d console app. (Using VS 2019; .NET 5.0)\r\na. Fixed up the Platform to be x64 if you like\r\n2. Make the app an SCD by adding the following lines to the .csproj:\r\n```xml\r\n  <PropertyGroup Condition=\"'$(Platform)'=='x64'\">\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>true</SelfContained>\r\n  </PropertyGroup>\r\n```\r\n\r\n3. Add a reference to the PowerShell SDK by adding these lines to the .csproj:\r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.1.3\" />\r\n  </ItemGroup>\r\n```\r\n4. Add some code to the Main function to run \u201c`ipmo PSDiagnostics -PassThru | fl`\u201d to load the PSDiagnostics module, and then (crucially) show where the module is being loaded from. Something like:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace ReproPowerShellSdkPackageProblem\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            PowerShell shell = PowerShell.Create();\r\n\r\n            shell.AddCommand(\"Set-ExecutionPolicy\")\r\n                 .AddParameter(\"ExecutionPolicy\", \"Bypass\")\r\n                 .AddParameter(\"Force\", true)\r\n                 .AddStatement();\r\n\r\n            shell.AddCommand(\"Import-Module\")\r\n                 .AddParameter(\"Name\", @\"PSDiagnostics\")\r\n                 .AddParameter(\"PassThru\", true)\r\n                 .AddCommand(\"Format-List\")\r\n                 .AddCommand(\"Out-String\");\r\n\r\n            var results = shell.Invoke();\r\n            foreach (var result in results)\r\n            {\r\n                Console.WriteLine(\"result: {0}\", result);\r\n            }\r\n\r\n            // Notice the output: it will say that it got imported from some wacky place\r\n            // which I think is an indication that it was imported from (legacy) Windows\r\n            // PowerShell (5.1)--something like\r\n            //\r\n            //      \"~\\AppData\\Local\\Temp\\remoteIpMoProxy_PSDiagnostics_1.0.0.0_localhost_9c08982f-951c-4119-9325-80631e83bf5a\\remoteIpMoProxy_PSDiagnostics_1.0.0.0_localhost_9c08982f-951c-4119-9325-80631e83bf5a.psm1\"\r\n            //\r\n            // But if you go to the bin dir and manually move the \"Modules\" folder from\r\n            // \"runtimes\\win\\lib\\net5.0\", up next to the EXE (and S.M.A.dll), and then\r\n            // re-run, you will get the expected result: PSDiagnostics loaded from the\r\n            // Modules directory you just placed in the bin dir.\r\n\r\n            Console.WriteLine(\"[enter] to exit\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Expected results:\r\nNo \"unix\" stuff in my output dir. My app should be able to load and use the PSDiagnostics module (and other modules) that were included as part of the SDK.\r\n\r\n## Actual results:\r\nWhen you build and then run the EXE, it shows that PSDiagnostics is getting loaded from some strange location (in my case: \"`~\\AppData\\Local\\Temp\\remoteIpMoProxy_PSDiagnostics_1.0.0.0_localhost_9c08982f-951c-4119-9325-80631e83bf5a\\remoteIpMoProxy_PSDiagnostics_1.0.0.0_localhost_9c08982f-951c-4119-9325-80631e83bf5a.psm1`\")\r\n\r\nBut if you manually move the \u201cModules\u201d directory to be next to the EXE (and S.M.A.dll), then re-run it, it will correctly load the PSDiagnostics module from the Modules folder.\r\n\r\nIt really does make a difference that I\u2019m making my app an SCD\u2014if I get rid of that (just deleting that part in the .csproj, thus making it the default, fx-dependent), then that changes where S.M.A.dll gets put, and it manages to find the Modules directory okay in that case.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@jazzdelightsme \r\nFWIW, this is my solution:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\" InitialTargets=\"Init\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net6.0;net7.0</TargetFrameworks>\r\n    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>\r\n    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.3.0-preview.3\" />\r\n    <PackageReference Update=\"Microsoft.PowerShell.SDK\" Version=\"7.2.2\" Condition=\"'$(TargetFramework)' == 'net6.0'\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Init\">\r\n    <PropertyGroup>\r\n      <CopyCmd Condition=\"'$(OS)' == 'Windows_NT'\">xcopy /s /y /i</CopyCmd>\r\n      <CopyCmd Condition=\"'$(OS)' == 'Unix'\">cp -R</CopyCmd>\r\n      <DelCmd Condition=\"'$(OS)' == 'Windows_NT'\">rmdir /S /Q</DelCmd>\r\n      <DelCmd Condition=\"'$(OS)' == 'Unix'\">rm -rf</DelCmd>\r\n      <PSModulesOS Condition=\"'$(OS)' == 'Windows_NT'\">win</PSModulesOS>\r\n      <PSModulesOS Condition=\"'$(OS)' == 'Unix'\">unix</PSModulesOS>\r\n      <PSModulesDir>runtimes/$(PSModulesOS)/lib/$(TargetFramework)/Modules</PSModulesDir>\r\n      <PSModulesBuildDir>$(ProjectDir)$(OutputPath)/$(PSModulesDir)</PSModulesBuildDir>\r\n      <PSModulesPublishDir>$(PublishDir)/$(PSModulesDir)</PSModulesPublishDir>\r\n      <BuildDir>$(ProjectDir)$(OutputPath)</BuildDir>\r\n    </PropertyGroup>\r\n  </Target>\r\n\r\n  <Target Name=\"DisplayConfiguration\" AfterTargets=\"BeforeBuild\">\r\n    <Exec Command=\"echo OS               : $(OS)\" />\r\n    <Exec Command=\"echo CopyCmd          : $(CopyCmd)\" />\r\n    <Exec Command=\"echo DelCmd           : $(DelCmd)\" />\r\n    <Exec Command=\"echo OutputPath       : $(OutputPath)\" />\r\n    <Exec Command=\"echo ProjectDir       : $(ProjectDir)\" />\r\n    <Exec Command=\"echo PSModulesOS      : $(PSModulesOS)\" />\r\n    <Exec Command=\"echo Configuration    : $(Configuration)\" />\r\n    <Exec Command=\"echo TargetFramework  : $(TargetFramework)\" />\r\n    <Exec Command=\"echo RuntimeIdentifier: $(RuntimeIdentifier)\" />\r\n  </Target>\r\n\r\n <Target Name=\"CopyModulesBuild\" AfterTargets=\"AfterBuild\">\r\n    <Exec Command=\"echo Build $(TargetFramework): $(PSModulesBuildDir)\" />\r\n    <Exec Command=\"$(CopyCmd) &quot;$(PSModulesBuildDir)&quot; &quot;$(BuildDir)/Modules&quot;\" />\r\n    <Exec Command=\"$(DelCmd) &quot;$(BuildDir)/ref&quot;\" />\r\n    <Exec Command=\"$(DelCmd) &quot;$(BuildDir)/runtimes&quot;\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CopyModulesPublish\" AfterTargets=\"Publish\">\r\n    <Exec Command=\"echo Publish $(TargetFramework): $(PSModulesPublishDir)\" />\r\n    <Exec Command=\"$(CopyCmd) &quot;$(PSModulesPublishDir)&quot; &quot;$(PublishDir)/Modules&quot;\" />\r\n    <Exec Command=\"$(DelCmd) &quot;$(PublishDir)/ref&quot;\" />\r\n    <Exec Command=\"$(DelCmd) &quot;$(PublishDir)/runtimes&quot;\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n",
      "created_at": "2021-11-10T19:25:55Z",
      "updated_at": "2022-03-22T11:32:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> NOTE: Quote from https://github.com/PowerShell/PowerShell/issues/16525#issuecomment-983108982\r\n\r\nThis is because the modules are not correctly deployed to the publish folder when you specify `dotnet publish -r <RID>`. A few PowerShell built-in modules are shipped with the `Microsoft.PowerShell.SDK` nuget package, and when running `dotnet build` or `dotnet publish`, the modules will be deployed to `bin\\...\\runtimes\\win\\lib\\net5.0`, next to the `System.Management.Automation.dll`, whose location is `$PSHOME` for the powershell hosted by the application.\r\n\r\nHowever, when build with `dotnet publish -r <RID>`, all powershell assemblies are deployed in a flat list under `<RID>\\publish` folder, but the modules are still at `<RID>publish\\runtimes\\win\\lib\\net5.0`. So `$PSHOME` becomes `<RID>\\publish` and the `Modules` folder is missing from there.\r\n\r\nThis is a known issue, and it was done so because\r\n1. There was no way (at least at the time when doing this) for a nuget package to choose where to deploy some content files depending on whether or not `-runtime` is specified.\r\n2. Most applications that need to host PowerShell care more about `dotnet publish` scenario due to cross-platform portability.\r\n\r\nSo, the decision was made to accommodate `dotnet build` and `dotnet publish`, and leave `dotnet publish -r <RID>` broken.\r\n\r\nThe workaround is simple, just have a post-build script that copy the `Modules` folder from `<RID>publish\\runtimes\\win\\lib\\net5.0` to `<RID>publish`.",
      "created_at": "2021-12-01T20:27:19Z",
      "updated_at": "2021-12-01T20:27:19Z"
    }
  ],
  "created_at": "2021-04-19T18:56:30Z",
  "labels": [
    "WG-DevEx-SDK",
    "Needs-Investigation"
  ],
  "number": 15274,
  "state": "open",
  "title": "PowerShell SDK Nuget Package does not work well with Self-Contained Deployment apps",
  "updated_at": "2022-03-22T11:32:32Z"
}