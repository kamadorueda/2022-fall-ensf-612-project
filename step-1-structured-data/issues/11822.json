{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11822",
  "author": "petercovach",
  "body": "Bring Azure App Insights native into the PowerShell Host.  When launching powershell.exe, pass the Insights ID and BOOM; you're off to the races tracing the information and errors your scripts are generating.\r\n\r\nAs the amount of scripts used in my environment grows, the management of those scripts has started to become more intimidating.  A larger strategy is necessary to understand dependencies and errors that are occurring in the application.  There are ways to bring the Application Insights imported dlls directly into the runspace, but this would require a lot of re-work of code.  Additionally, any native function that outputs to the native output streams would potentially be lost if the programmer did not explicitly capture the output.  I want a low barrier entry to easily track all of my environment's scripts.  When information is added to any of the PowerShell streams managed by the host, the host could asynchronously send that information back to App Insights.\r\n\r\n\r\n# Proposed technical implementation details\r\nThe PowerShell host should allow native support of Azure App Insights.  When launching powershell.exe, pass the App Insights token to begin effortlessly logging information and exceptions.  Anything written to the PowerShell streams should get automatically added to App Insights.  Conversely, exposing the functionality in the .Net implementation would allow for applications that did not use the native PowerShell host to take advantage of the functionality.\r\n\r\nCurrent Option:\r\n\r\n```\r\nClear-Host   \r\nAdd-Type -Path \"[Your_Assembly_Path]\\Microsoft.ApplicationInsights.dll\" \r\n$client = New-Object Microsoft.ApplicationInsights.TelemetryClient  \r\n$client.InstrumentationKey=\"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"  \r\n\r\n$eventName = \"Hello Event\"  \r\n$client.TrackEvent($eventName, $null)  \r\n\r\ntry  \r\n{  \r\n    $fileContent = Get-Content -Path \"C:\\Test.txt\" -ErrorAction Stop  \r\n}  \r\ncatch  \r\n{  \r\n    $telemtryException = New-Object \"Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry\"  \r\n    $telemtryException.Exception = $_.Exception  \r\n    $client.TrackException($telemtryException)  \r\n}\r\n```\r\n\r\nProposed Option:\r\n\r\n`powershell.exe C:\\test.ps1 -AppInsightsToken \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"`\r\n\r\nOR\r\n\r\n```\r\n$host.AppInsights.Enabled = $true\r\n$host.AppInsights.InstrumentationKey=\"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"\r\n\r\n$host.AppInsights.TrackEvent(\"My Event\",$null)\r\n\r\n$host.AppInsights.Flush()\r\n```\r\n\r\nAny logging could automatically be sent to App Insights based how it hits the Information, Warning, Verbose, Debug, Error, Output, and host streams.\r\n\r\n\r\nHere is the credit for the code:\r\nhttps://www.c-sharpcorner.com/article/using-azure-application-insights-in-powershell/\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I do not think that this should be exclusively in host because hosting applications exist and could benefit from the feature. \r\nIf we migrated to ILogger API we could expose it publicly including ApplicationInsights (with Microsoft.Extensions.Logging.ApplicationInsights provider). All developers would have to do is edit a config file.\r\n\r\n",
      "created_at": "2020-02-11T09:22:57Z",
      "updated_at": "2020-02-11T09:22:57Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Whilst this may sound like the right idea PowerShell already has App Insights integration for the PowerShell Team to get some basic telemetry and at present App Insights does not allow you to connect to multiple instances and segregate the data going between them, something I do not think is planned.\r\n\r\nYou could of course recompile the PowerShell exe with your own App Insights key and force use of your own events but I would **seriously** recommend against this path because then you'd have a high amount of pain on repackaging and then distributing repackaged exe on each updated version the PowerShell team release.\r\n\r\nThere is however an already existing Low barrier approach, which is to use Transcription which you can read up on in https://docs.microsoft.com/en-gb/powershell/module/microsoft.powershell.core/about/about_logging?view=powershell-5.1 & also at https://devblogs.microsoft.com/powershell/powershell-the-blue-team/ using the Over The Shoulder Transcription method in that post pushing all transcripts to a central location.\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging\">about_Logging - PowerShell</a></strong></div></blockquote>\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-the-blue-team/\">PowerShell \u2665 the Blue Team | PowerShell</a></strong></div><div>(Warning: Long blog post ahead! If you\u2019d like to read (or share) this as a whitepaper, you can download it here: \u201cScripting Security and Protection Advances in Windows 10\u201d). \nAt Microsoft, we invest an enormous amount of time and energy managing world-class cloud services and incredibly large enterprise networks.</div></blockquote>",
      "created_at": "2020-02-11T13:13:53Z",
      "updated_at": "2020-02-11T13:14:01Z"
    },
    {
      "author": "petercovach",
      "author_association": "NONE",
      "body": "In regards to App Insights, I cannot comment on the complexity of the task at hand.  I leave that in the hands of the very capable architects of PowerShell like yourself.  I do think that there should be an easy real time way to capture the output of your PowerShell code and analyze it at an enterprise level.\r\n\r\nI agree with you that compiling my own version of PowerShell is a non-starter.  The distribution is too complex.  Additionally I want my user statistics to go to Microsoft so that our experience is recorded and goes toward making the product better.\r\n\r\nWe have toyed with the concept of creating a centralized logger.  Again, I would not consider this a low barrier approach because the back end infrastructure to analyze the results would need to be created.  It would serve the purpose to create a centralized logging store, but dashboard, analysis, statistics would all need to be developed.  That is where I was hoping Azure App Insights could fill the gap.",
      "created_at": "2020-02-11T19:10:31Z",
      "updated_at": "2020-02-11T19:10:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have transcription, tracing, debugging, logging, App Insights... This all has an effect on performance, even when turned off. It makes us think about ILogging.\r\nPerhaps @daxian-dbw could share thoughts about this.\r\n",
      "created_at": "2020-02-12T05:03:47Z",
      "updated_at": "2020-02-12T05:03:47Z"
    }
  ],
  "created_at": "2020-02-10T16:52:27Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 11822,
  "state": "open",
  "title": "Integrate Azure App Insights natively into PowerShell Host",
  "updated_at": "2020-02-12T17:54:32Z"
}