{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17519",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote: This is related to various other, similar bugs: https://github.com/PowerShell/PowerShell/issues?q=is%3Aissue+is%3Aopen+%22parameter+parsing%2Fpassing%22\r\n\r\nWhen using `pwsh -File` trying to pass a _positional_ argument that is a _negative number_ fails, because the `-` is apparently invariably interpreted as starting a parameter _name_:\r\n\r\n```powershell\r\n# Create sample script t.ps1\r\n@'\r\n[CmdletBinding()] param([int] $p) \"-p value: $p\"\r\n'@ > t.ps1\r\n\r\npwsh -NoProfile -File t.ps1 -1     # !! BREAKS: *positional* argument\r\npwsh -NoProfile -File t.ps1 -p -1  # OK, as *named* argument.\r\n./t.ps1 -1                         # OK, positional argument with *direct invocation*.\r\n```\r\n\r\nNote that quoting `-1` does _not_ help.\r\n\r\n### Expected behavior\r\n\r\n```console\r\n-p value: -1\r\n-p value: -1\r\n-p value: -1\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nt.ps1: A parameter cannot be found that matches parameter name '1'.\r\n-p value: -1\r\n-p value: -1\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core v7.3.0-preview.4\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-07-26T21:01:16Z",
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Windows 11 + PS7.2.4 - no errors\r\n\r\ndoes this work as a workaround?\r\n`pwsh -NoProfile -File t.ps1 (-1)`",
      "created_at": "2022-06-11T16:27:57Z",
      "updated_at": "2022-06-11T16:27:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's surprising, because the error is related to PowerShell's parameter parsing, which isn't OS-specific. I don't have Windows 11, but I see the error in  WinPS, 7.2.4, and  v7.3.0-preview.4, both on Windows 10 and macOS 12.4.\r\n\r\nYour attempted workaround is syntactically only an option from _inside_ PowerShell, where there's rarely a need to call the CLI (if you needed to, you would use `pwsh -NoProfile { ./t.ps1 -1 }`, which avoids the problem); even there, however, it isn't effective, because the `(1)` gets translated to a _string_ with value `1`, given that a call to an _external program_ is being made.\r\n\r\n",
      "created_at": "2022-06-11T16:45:36Z",
      "updated_at": "2022-06-11T16:45:36Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Tested it on another Windows 11 box - no errors.\r\ntested on Windows Server 2016 - no errors.",
      "created_at": "2022-06-11T16:59:09Z",
      "updated_at": "2022-06-11T16:59:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@scriptingstudio, just to narrow things down and rule out that you're not accidentally testing something different from the repro in the OP:\r\n\r\nIn a shell started with  `powershell.exe -NoProfile`, i.e., _Windows PowerShell_, I see the error too - do you not?\r\n(The specific WinPS version is v5.1.19041.1682, though the specific version is unlikely to matter, given that Windows PowerShell is unlikely to have received a fix.)\r\n\r\nI see the error on Windows 10, macOS 12.4, and Ubuntu 18.04 - again suggesting that the OS is incidental.\r\n\r\n\r\n",
      "created_at": "2022-06-13T01:50:26Z",
      "updated_at": "2022-06-13T01:50:26Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@mklement0  I got it, could repro. I think it is `pwsh`/`powershell` parameter binder problem (or something like that). It considers an argument with `-` as a parameter ",
      "created_at": "2022-06-13T06:20:31Z",
      "updated_at": "2022-06-13T06:20:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, it appears to be `by design` based on this code https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L1352-L1383.  It's doing a simple parameter binding which is a subset of the actual PS parameter binder.\r\n\r\nI'd be worried what scenarios would break if we try to change this.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/CommandLineParameterParser.cs at master \u00b7 PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-07-25T17:02:27Z",
      "updated_at": "2022-07-25T17:02:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, calling an _implementation shortcut_ that is inconsistent with how parameter names are normally parsed _by design_  strikes me as overly generous (unavoidable differences between `-File`-based and in-session / `-Command` notwithstanding).\r\n\r\nAs for what could break if something like `-1` were no longer considered a parameter _name_ but a _positional argument_ (which is how it's interpreted in-session):\r\n\r\n* Note that _in-session_ / with `-Command`, a script's parameter that looks like a negative number, such as `-1` (`$1`) cannot be bound by a _named_ argument.\r\n\r\n   * That is, such a parameter can only be bound _positionally_, except via splatting - an inconsistency in its own right; see #17767\r\n\r\n```powershell\r\n# !! BREAKS: \"-1\" is interpreted as a positional argument:\r\n# !!   -> A positional parameter cannot be found that accepts argument 'foo'\r\n & { [CmdletBinding()] param([string]$1) \"[$1]\" } -1 foo\r\n```\r\n\r\n* However, because of the bug at hand, this _does_ work - but arguably shouldn't - when called via the CLI's `-File` parameter.\r\n\r\n```powershell\r\n'[CmdletBinding()] param([string]$1) \"[$1]\"' > t.ps1\r\n\r\n# -> 'really?'\r\npwsh -nop -file t.ps1 -1 really?\r\n```\r\n\r\nIn other words: the following code could break:\r\n\r\n* calls to scripts declared with ill-advised parameter names such as `-1` (parameter variable `$1`)\r\n* _if_ they are called with a _named_ argument binding such a parameter _but only ever via the CLI's `-File` parameter_, given that this otherwise doesn't work.\r\n\r\nPerhaps needless to say, the existence of such scripts / calls seems very unlikely.\r\n\r\nConversely, not being able to pass a negative number via `-File` is an unnecessary restriction, especially given that the functionality that implicitly prevents it shouldn't exist to begin with: if `-1 foo` doesn't work in a PowerShell session, neither should it via `-File`\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-07-25T19:51:47Z",
      "updated_at": "2022-07-25T19:51:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-07-26T21:01:15Z",
      "updated_at": "2022-07-26T21:01:15Z"
    }
  ],
  "created_at": "2022-06-10T18:00:32Z",
  "number": 17519,
  "state": "closed",
  "title": "Parameter parsing/passing: The CLI's -File parameter doesn't support negative numbers as positional arguments",
  "updated_at": "2022-07-26T21:01:16Z"
}