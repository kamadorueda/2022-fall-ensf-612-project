{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9570",
  "author": "KirkMunro",
  "body": "`ActionPreference.Suspend` is not supported in PowerShell Core (it's only used for workflows, which are not in PowerShell Core). Today it just adds confusion to the code with checks to ensure that value isn't used where there doesn't need to be any. The checks should also be performed by a PSSA rule rather than in source code (similar to `ActionPreference.Ignore`, as was decided in #4348). Do we need to keep `ActionPreference.Suspend` checks around at this point or can we just remove the half-dozen checks related to it from the source code?\r\n\r\nFurther, if we remove these checks (for the same reason we removed the checks for `ActionPreference.Ignore`), do we need the `ActionPreference.Suspend` enumeration value kept around at all?\r\n\r\n@SteveL-MSFT: For committee review.\r\n\r\n**[Update]**\r\nAs per the committee review, all workflow code should be removed. Here is the list of items requiring removal:\r\n\r\n- [x] workflow keyword\r\n- [x] parallel keyword (used for parallel activities in workflow)\r\n- [x] sequence keyword (used for sequential activities in workflow)\r\n- [x] inlinescript activity block (used for activities outside of workflow)\r\n- [x] -parallel parameter on foreach statement\r\n- [x] Checkpoint-Workflow activity (command)\r\n- [x] Suspend-Workflow activity (command)\r\n- [x] ActionPreference.Suspend enumeration\r\n- [x] plus all related classes/methods\r\n",
  "closed_at": "2020-01-31T16:00:16Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If this does not work in any case it can be removed.\r\nWe could use our suggestion system to inform users.",
      "created_at": "2019-05-11T18:01:07Z",
      "updated_at": "2019-05-11T18:01:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree but should broaden this to reviewing all the code and remove all PSWorkflow code",
      "created_at": "2019-05-15T22:12:18Z",
      "updated_at": "2019-05-15T22:12:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is a lot of such code. Maybe step-by-step will be suitable.\r\n\r\nShould we be worried about remoting?",
      "created_at": "2019-05-16T06:40:54Z",
      "updated_at": "2019-05-16T06:40:54Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Is there really a lot? Here is the list of things that need to be removed that I am aware of:\r\n\r\n- [x] workflow keyword\r\n- [x] parallel keyword (used for parallel activities in workflow)\r\n- [x] sequence keyword (used for sequential activities in workflow)\r\n- [x] inlinescript activity block (used for activities outside of workflow)\r\n- [x] -parallel parameter on foreach statement\r\n- [x] Checkpoint-Workflow activity (command)\r\n- [x] Suspend-Workflow activity (command)\r\n- [x] ActionPreference.Suspend enumeration\r\n- [x] plus all related classes/methods\r\n\r\nThat's not that long of a list. In terms of doing it piecemeal or all at once, I removed all references to `ActionPreference.Suspend` as well as the enumeration value itself as part of PR #8205. It made great sense to do so, since a new `ActionPreference` enumeration value was being added in that PR (removing it now means the enumeration can be defined without specifically assigned values/gaps caused by removing it later); however, I don't feel removing the rest all at once is too daunting of a task.",
      "created_at": "2019-05-16T12:24:43Z",
      "updated_at": "2019-07-24T21:32:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Thanks for the review! You could move your check list in the issue description and rename header.\r\n\r\nI expected that almost everything was already removed there since we had already cleaned the code several times. Therefore, I was a little surprised that there is still relatively a lot of unnecessary code.\r\n\r\nI believe we will make the cleanup step-by-step. Perhaps we will need some discussions because there is public APIs that I already catched in #9618.\r\n\r\n",
      "created_at": "2019-05-16T13:00:50Z",
      "updated_at": "2019-05-16T13:00:50Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Good idea, and done.",
      "created_at": "2019-05-16T13:10:54Z",
      "updated_at": "2019-05-16T13:10:54Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There are good arguments for not removing keywords:\r\n* You can provide better error messages (workflow not supported vs. command not found)\r\n* It wouldn't be a breaking change to use the keyword in the future.",
      "created_at": "2019-05-16T16:05:06Z",
      "updated_at": "2019-05-16T16:05:06Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I also do not think that the keywords or parameter names should be moved entirely, and they are all already flagged as errors which is the right thing to do, in my opinion.   The only downside to this is that means the `workflow` keyword cannot be used for a function name without using `&` (call).",
      "created_at": "2019-05-16T18:07:27Z",
      "updated_at": "2019-05-16T18:07:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Part of the reasoning by @PowerShell/powershell-committee to remove is to have the errors at parse time/compile time (for C# code) vs at runtime.  There is no plan to ever bring back workflow.  Instead, Jeffrey has a proposal for workflow-like state management that I'll publish a RFC for eventually.",
      "created_at": "2019-05-18T02:52:34Z",
      "updated_at": "2019-05-18T02:52:34Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "There is a [public method on the `Debugger` class called `GetWorkflowDebuggerFunctions`](https://github.com/PowerShell/PowerShell/blob/5d98b901be24094f96cad6b00bfcade96735e468/src/System.Management.Automation/engine/debugger/debugger.cs#L5442-L5455) that is not used internally and seems intended only for workflow. Given that is the case, can this (and the related const string function definitions) be removed?",
      "created_at": "2019-07-24T17:53:42Z",
      "updated_at": "2019-07-24T17:53:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro we've removed other workflow specific code that impacts public API, so now would be the time to remove it",
      "created_at": "2019-07-24T18:11:37Z",
      "updated_at": "2019-07-24T18:11:37Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT PowerShellGet internally uses the `IsWorkflow` property of `FunctionDefinitionAst` objects. How do you want that handled? I have that property removed from PR #10223 at the moment, which causes some Pester tests to fail because that property does not exist.\r\n\r\nFuther, since PowerShellGet is managed independently of PowerShell itself, why are there PowerShellGet tests that use whatever latest version a user has installed in the PowerShell test suite?",
      "created_at": "2019-07-25T02:53:58Z",
      "updated_at": "2019-07-25T02:53:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not time critical to leave the property as dummy, then cleanup PowerShellGet, and then remove the property from ast.",
      "created_at": "2019-07-25T03:10:08Z",
      "updated_at": "2019-07-25T03:10:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I'm concerned about removing the `workflow` keyword. An error message like `Workflow is not supported in PowerShell 6+` is better than `The term 'workflow' is not recognized as the name of a cmdlet ...`.\r\n/cc @SteveL-MSFT ",
      "created_at": "2019-07-25T19:33:48Z",
      "updated_at": "2019-07-25T19:38:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'm concerned about removing the workflow keyword.\r\n\r\n@daxian-dbw Please look discussion in #10223\r\n",
      "created_at": "2019-07-26T03:42:47Z",
      "updated_at": "2019-07-26T03:42:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as fixed and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-01-31T16:00:15Z",
      "updated_at": "2020-01-31T16:00:15Z"
    }
  ],
  "created_at": "2019-05-09T01:21:08Z",
  "number": 9570,
  "state": "closed",
  "title": "Can we remove workflow code from PowerShell Core?",
  "updated_at": "2020-01-31T16:00:16Z"
}