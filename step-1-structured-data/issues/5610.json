{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5610",
  "author": "markekraus",
  "body": "This issue is to track work on merging, moving , and cleaning the Web Cmdlets code\r\n\r\n* [x] Merge partial classes into single class files\r\n* [ ] Clean up and organize the cmdlets code\r\n  * [ ] Remove `partial`'s\r\n  * [ ] Sort `usings`'s, Properties, Methods, etc\r\n  * [ ] Fix comments\r\n  * [ ] Fix Formatting\r\n  * [ ] Convert to automatic properties where possible\r\n  * [ ] Remove `using Microsoft.Win32;`\r\n* [ ] Move all web cmdlet code from sub folders to `src\\Microsoft.PowerShell.Commands.Utility\\commands\\utility\\WebCmdlet\\`  top level folder\r\n* [ ] Move independent enums and classes out of WebRequestPSCmdlet.cs to separate files",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT @TravisEz13  The next phase of this cleanup is to sort and order the web cmdlet code. I looked at the [coding guidlines](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md), but I don't see any guidance for the order of fields, properties, constructors, methods, etc other than \"fields at the top unless they are backing properties\". The web cmdlets are a mess with code of varying types and access all over the place.\r\n\r\nI was looking at this http://stylecop.soyuz5.com/Ordering%20Rules.html and wondering if that would be a good reference or if this project had its own guidance that hasn't been published yet.",
      "created_at": "2017-12-06T11:24:18Z",
      "updated_at": "2017-12-06T11:24:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus I would be fine starting with stylecop.  Since the codebase is a decade old and produced by various engineers over time, it's inherently inconsistent and something that we should only address over time.",
      "created_at": "2017-12-06T17:18:32Z",
      "updated_at": "2017-12-06T17:18:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See [comment](https://github.com/PowerShell/PowerShell/pull/5972#discussion_r162855127) \r\n(null should be on first place).\r\n\r\nSee [rkeithhill's comment](https://github.com/PowerShell/PowerShell/pull/5972#discussion_r163455132)\r\n>FYI, this type of null check (null on the LHS) is a C++ idiom that is unnecessary in C# because if/while/do conditions in C# must evaluate to a Boolean. Therefore a mistaken assignment e.g. if (formData = null) would fail to compile because the type of formData can't be a Boolean (not if you're assigning null to it). In fact, the only time you need to put the literal on the LHS is when the variable type is a Boolean e.g. if (false == aBooleanVariable).\r\nMy team's internal coding guidelines suggest not using == or != in the Boolean variable case but use if (!aBooleanVariable) or if (aBooleanVariable) instead. Consequently, we never put the literal value on the LHS in C# code. And IMO this approach reads easier e.g. if (formData == null).\r\n",
      "created_at": "2018-01-22T10:09:21Z",
      "updated_at": "2018-01-29T05:59:39Z"
    }
  ],
  "created_at": "2017-12-02T14:30:03Z",
  "number": 5610,
  "state": "open",
  "title": "Merge, Move and Clean Web Cmdlets",
  "updated_at": "2018-01-29T05:59:39Z"
}