{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4024",
  "author": "Tibblez",
  "body": "Command line arguments sent to a file do not send in full if the argument contains a dollar sign.  I have tried every combination of escape character and quote configuration that I can think of.  I am not certain if this is specific to the dollar sign but I was able to use single quotes with an exclamation mark in the argument and that worked fine.\r\n\r\nI was not able to find any explanation for this in other open issues or the known issues but I apologize if I'm missing something obvious here.\r\n\r\nSteps to reproduce\r\n------------------\r\nCreate a new ps1 file called test.ps1 with this snippet.\r\n```powershell\r\nparam(\r\n[string]$foo\r\n)\r\nwrite-host $foo\r\n```\r\nThen calling it from the command line\r\n```\r\npowershell ./test.ps1 -foo 'Before$After'\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nBefore$After\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nBefore\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                           \r\n----                           -----                                                                           \r\nPSVersion                      6.0.0-beta                                                                      \r\nPSEdition                      Core                                                                            \r\nBuildVersion                   3.0.0.0                                                                         \r\nCLRVersion                                                                                                     \r\nGitCommitId                    v6.0.0-beta.2                                                                   \r\nOS                             Linux 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016                 \r\nPlatform                       Unix                                                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                         \r\nPSRemotingProtocolVersion      2.3                                                                             \r\nSerializationVersion           1.1.0.1                                                                         \r\nWSManStackVersion              3.0                                                                             \r\n\r\n\r\n```\r\n",
  "closed_at": "2017-06-29T00:01:14Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe this is by design.  Solution is to use the backtick to escape:\r\n\r\n```\r\npowershell ./test.ps1 -foo 'Before`$After'\r\n```",
      "created_at": "2017-06-15T22:55:11Z",
      "updated_at": "2017-06-15T22:55:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure it's by design.\r\n\r\nCompare:\r\n```\r\n#1 PS>  ./test.ps1 -foo 'Before$After'\r\nBefore$After\r\n#2 PS> echoargs ./test.ps1 -foo 'Before$After'\r\narg 0: <./test.ps1>\r\narg 1: <-foo>\r\narg 2: <Before$After>\r\n\r\nCommandLine:\r\n\"EchoArgs.exe\" ./test.ps1 -foo Before$After\r\n\r\n#3 PS> powershell -file  ./test.ps1 -foo 'Before$After'\r\nBefore$After\r\n#4 PS> powershell -command  ./test.ps1 -foo 'Before$After'\r\nBefore\r\n```\r\n\r\nNotice in 1, 2, and 3, `$After` is preserved. Only in 4 does `$After` disappear.\r\n\r\nI would say we need some more digging before calling this by design - but it does provide a cleaner workaround - use `-file`.",
      "created_at": "2017-06-16T00:19:21Z",
      "updated_at": "2017-06-16T00:19:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To summarize the difference in behavior:\r\n\r\n* `-File` treats its arguments as _literal strings_, without further interpretation by PowerShell.\r\n\r\n* `-Command` interprets its arguments _as if they'd been specified inside PowerShell_.\r\n\r\nIn the case at hand:\r\n\r\n* With `-File`, `Before$After` is retained as-is, as a _literal string_.\r\n\r\n    * Currently, this categorically prevents passing _Boolean_ values as arguments, because a `[bool]` / `[switch]` parameter doesn't accept _string_ values (e.g., `$True` is passed as if `'$True'` had been specified) - see #4036.\r\n\r\n\r\n* With `-Command`, `Before$After` is interpreted as an _expandable string_ - as if you had passed it as an argument in argument mode from _within_ PowerShell - and - given that variable `$After` is not defined - it expands to just `Before`.\r\n\r\n",
      "created_at": "2017-06-20T22:03:58Z",
      "updated_at": "2017-06-26T11:10:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Getting -File for .ps1 and -Command to parse args the same as -Command (so that variables are string literals) is working.  Need to figure out how to get scripts without .ps1 extension to work.  With the change I'm proposing, \"Before$After\" needs to escape the $ otherwise expectation is that PowerShell interprets it as the value of the $After variable.",
      "created_at": "2017-06-27T22:23:07Z",
      "updated_at": "2017-06-27T22:23:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: I think it's vital that we align the behavior of `-Command` with that of `-c` in POSIX-like shells, which, in short, means:\r\n\r\n* The _first_ argument following `-Command` should be interpreted like a _script_.\r\n\r\n   * If that script needs access to the subsequent arguments, it must use `$args` or a `param()` statement to access them. \r\n      * Note: POSIX-like shells bind the first subsequent argument to `$0` (rather than `$1`), whose PowerShell equivalent would be `$MyInvocation.MyCommand.Name`, but I think it's sensible _not_ to do that in PowerShell.\r\n  \r\n   * Note that this is a fundamental, breaking change from how `-Command` functions today, which basically reassembles a PowerShell command line from all the arguments by mere string concatenation (with spaces) and then invokes the result based on PowerShell rules.\r\n  \r\n* Any _subsequent_ arguments should be treated as _literals_ - just as with `-File`.\r\n\r\nIn other words: what follows an ad-hoc script (`-Command`) or a script file (`-File`, or by default), are _arguments to pass to that ad-hoc script/script file_, and they should be processed _the same_:\r\n\r\n* as _literals_ (after potential _up-front_ expansion, depending on the calling shell) - except that `$true` and `$false` must also be recognized as Boolean literals (which is currently not the case - see #4036), just as, say `22` is recognized as an `[int]`, if bound to a parameter of that type.\r\n\r\nConversely, anything that should be interpreted according to PowerShell-internal rules, must go directly into the ad-hoc script passed to `-Command`.\r\n\r\nTo illustrate the proposed difference:\r\n\r\n```powershell\r\n# Already works this way.\r\n> powershell -noprofile -command '\"$HOME\"'\r\n/home/jdoe\r\n\r\n# This is how it *should* work (currently breaks).\r\n> powershell -noprofile -command '$args' '$HOME'\r\n$HOME \r\n```\r\n",
      "created_at": "2017-06-28T02:46:50Z",
      "updated_at": "2017-06-28T11:43:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and although we agree the argument handling isn't technically correct, it has been this way since inception and would be a big breaking change without significant benefit, so the current behavior is 'by design'.",
      "created_at": "2017-06-29T00:01:13Z",
      "updated_at": "2017-06-29T00:01:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for letting me know, @SteveL-MSFT.\r\n\r\n**I sincerely wish you revisited this issue, however:**\r\n\r\nWhile I get that breaking changes are very problematic, I think:\r\n\r\n* that the current behavior is fundamentally broken _in itself_ - not just because it fundamentally differs from the behavior of POSIX-like shells.\r\n\r\n* that this broken behavior will become more evident - and be a perennial pain point - when exposed to the more command-line-savvy, quoting-aware Unix crowd.\r\n\r\n* the switch from `-Command` to `-File` already was a big breaking change; v6 is an opportunity to get _all_ aspects of the CLI right.\r\n\r\nConsider the following calling-from-`bash` examples, which highlight the _fundamental_ problem (I'm leaving the aspect of how the _first_ argument should be treated as a mini-script to which the remaining arguments should be passed via `$Args` aside for now):\r\n\r\n```powershell\r\n# Breaks, because literal `don't` is interpreted as a bareword by PowerShell.\r\n$ powershell -noprofile -command Write-Output \"don't\" # !! BREAKS\r\nThe string is missing the terminator: '. \r\n\r\n#'# With a *literal*, you can work around that, but in addition to the\r\n# outer quoting - WHICH SHOULD BE ENOUGH - it requires TWO EXTRA LAYERS OF \r\n# QUOTING: 1 for bash (\\`) and 1 for PowerShell (the ` passed through).\r\n$ powershell -noprofile -command Write-Output \"don\\`'t\" # works, but extremely cumbersome.\r\ndon't\r\n\r\n#'# Using a NOT-KNOWN-IN-ADVANCE VALUE is SIMILARLY CUMBERSOME AND COMPLEX:\r\n$ v=\"don't\"; powershell -noprofile -command Write-Output \"'${v//\\'/\\'\\'}'\" # works, but extremely cumbersome.\r\ndon't\r\n```\r\n\r\nCramming it into the _first_ argument is an option, but equally cumbersome:\r\n\r\n```powershell\r\n$ powershell -noprofile -command \"Write-Output  \\\"don't\\\"\"\r\ndon't\r\n\r\n$ v=\"don't\"; powershell -noprofile -command \"Write-Output  '${v//\\'/\\'\\'}'\"\r\ndon't\r\n```\r\n\r\n**PowerShell's current reassemble-all-arguments-into-a-command-line-and-then-reinterpret-it approach severely hampers the ability to pass arguments _as-is, as data_ to the command.**\r\n\r\n**Interpretation as PS source code should be limited to the _first_ argument - the \"mini-script\".**\r\n\r\nSeparately (as previously stated), so as to align with POSIX-like shells, the **remaining arguments should be passed via `$Args`**, which would also provide consistency with how `-File` handles its arguments; applied to the example above:\r\n\r\n```powershell\r\n# WISHFUL THINKING; note how $v is passes via $Args\r\n$ v=\"don't\"; powershell -command 'Write-Output $Args[0]' \"$v\"\r\ndon't\r\n```\r\n\r\n",
      "created_at": "2017-06-30T13:30:53Z",
      "updated_at": "2017-07-01T19:08:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 as part of the fix for the other related issue #4036 I intend to also make a doc update to hopefully clarify this for the user on the differences between `-File` and `-Command`.  The general statement is that the user needs to be aware of how the \"outer shell\" handles escaping (Bash in your examples) and what gets passed to PowerShell and what PowerShell passes to the command.  I think that if this behavior becomes a big customer sticking point, we could consider adding another switch that affects the arg passing behavior, but it was considered a bigger impactful breaking change than the switch of `-File` and `-Command` where you would at least get a reasonable error message.  ",
      "created_at": "2017-06-30T19:42:49Z",
      "updated_at": "2017-06-30T19:42:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: I'm glad to hear it's getting documented.\r\n\r\n> it was considered a bigger impactful breaking change than the switch of -File and -Command\r\n\r\nUndoubtedly.\r\n\r\n>  if this behavior becomes a big customer sticking point, we could consider adding another switch that affects the arg passing behavior\r\n\r\nJust  be aware that you're closing the door on allowing `-c` to work the same way as in POSIX-like shells; while `-e` would be the next best thing, the existence of `-Command` that works very differently will sow confusion.\r\n\r\n\r\n> The general statement is that the user needs to be aware of how the \"outer shell\" handles escaping\r\n\r\nAbsolutely, that's a must in any scenario.  \r\n\r\nBut requiring _double_ escaping for things that should be passed as _literals_ (e.g., `\"don\\`'t\"`) is both cumbersome and confusing.  \r\n\r\nTo repeat myself briefly, interpreting _individual arguments_ passed to a command as part of the command's _source code_ subverts fundamental notions of how arguments are passed in the Unix world.\r\n\r\nThe saving grace is perhaps that wanting to pass literal data arguments to a single command string that functions as an _ad-hoc_ script is not that common (e.g., `sh -c 'echo \"$1\"' - '$HOME'` printing `$HOME`).\r\n\r\nIn the absence of passing such arguments, if the current behavior is retained, I suggest documenting that the best use of `-Command` is to pass the entire command as a _single string_ for conceptual clarity; e.g., instead of:\r\n\r\n```sh\r\n$ powershell -noprofile -command 'Write-Output' '`$HOME'  # confusing: 2 args \r\n```\r\n\r\nusing:\r\n\r\n```sh\r\n$ powershell -noprofile -command 'Write-Output `$HOME' # better: 1 arg\r\n```\r\n\r\n",
      "created_at": "2017-07-01T19:59:14Z",
      "updated_at": "2017-07-01T19:59:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Cc @BrucePay ",
      "created_at": "2017-07-02T03:43:45Z",
      "updated_at": "2017-07-02T03:43:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nWhen it comes to documenting the _current_ behavior of `-Command` perhaps the following summary can be helpful to readers with a Unix background:\r\n\r\n* `-Command` _only_ accepts an ad-hoc PowerShell script (which may be a single statement) and has _no mechanism for passing arguments_ to that script.\r\n\r\n* While you can _technically_ pass additional arguments after the 1st  `-Command` argument, they simply become part of the ad-hoc script by string concatenation with spaces.\r\n\r\n* Thus, in the absence of argument-passing, shell variable-based values to be used in the ad-hoc script must be \"baked into\" it and therefore require additional quoting (escaping) by PowerShell rules in order to be treated as literals.\r\n\r\n* For conceptual clarity and to avoid additional quoting headaches, it is easier to always pass the entire ad-hoc script as a _single_ argument following `-Command` - at least in the Unix world.\r\n\r\n  * On Windows, the scarcity of shell metacharacters and `$` and `'` having no special meaning to `cmd.exe` makes this less of a problem.\r\n",
      "created_at": "2017-07-07T19:30:19Z",
      "updated_at": "2017-07-07T19:30:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 please take a look at my PR for the doc update and add any suggestions on language https://github.com/PowerShell/PowerShell-Docs/pull/1430",
      "created_at": "2017-07-07T20:31:35Z",
      "updated_at": "2017-07-07T20:31:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you, @SteveL-MSFT.\r\n\r\nTo [half-mis-]quote [Dame Edna](https://en.wikipedia.org/wiki/Dame_Edna_Everage), I mean the following in a caring way:\r\n\r\n* Like most PowerShell documentation, the one you link to falls somewhere along the spectrum of light introduction to confusing to incorrect/misleading.\r\n\r\n* I honestly wouldn't know how to fit the subtleties presented here into the existing format, so I trust you to do the right thing with the information provided here.\r\n\r\nTruthfully, I think PowerShell's documentation needs a serious overhaul, and my potential contribution to this particular help topic would feel like rearranging the deck chairs on the Titanic.\r\n",
      "created_at": "2017-07-08T00:46:46Z",
      "updated_at": "2017-07-08T00:48:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I don't think you should feel like you are constrained to the style that exists in the current docs.  They were written years ago.  I prefer to avoid a lot of detail as I feel people tend not to read that much content.  I'd rather add more examples that show the differences.  If you have thoughts on some specific ones, please share :)",
      "created_at": "2017-07-08T02:37:42Z",
      "updated_at": "2017-07-08T02:37:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:  I appreciate the invitation, but it feels overwhelming to me.\r\n\r\nA few more meta observations:\r\n\r\n* On a general note, based on my previous comment, I think that **the existing documentation needs a serious overhaul** (see the  [problems with the current documentation on error handling](https://github.com/PowerShell/PowerShell-Docs/issues/1583) as a notable example).\r\n\r\n  * I get the tension between wanting to be concise and simple (less tech-savvy sysadmins) and wanting to be comprehensive (for the benefit of developers).\r\n\r\n  * Thus, keeping the documentation concise and to-the-point is important, but, conversely, **if the actual behavior is too complex to be described concisely, perhaps the complexity of the behavior is the true problem**.\r\n\r\n     * If you need more evidence of the intractability that is the existing `-Command` behavior, see [this SO answer](https://stackoverflow.com/a/45001523/45375) of mine.\r\n\r\n* **The Unix world is used to _speed_, which PowerShell cannot compete with - PowerShell's strength is _abstraction_**.  \r\nTherefore, **PowerShell's success in the Unix world will hinge on these factors**:\r\n\r\n  * **From _inside_ PowerShell, the ability to call external Unix utilities  as seamlessly as possible**.\r\n\r\n     * Aside from proper support for POSIX-like globbing (whose current trouble spots are [overeagerness](https://github.com/PowerShell/PowerShell/issues/3931) and [inability to include hidden items](https://github.com/PowerShell/PowerShell/issues/4683)), expressive constructs such as [`&&` and `||`](#3241) are needed, and, ideally, also [process substitution](#4284) and [brace expansion](#4286).\r\n\r\n    * Arguments must be passed as-is (after potential interpretation by PowerShell), as an _array_ of _literal tokens_, as is customary in the Unix world ([no command-line reconstruction shenanigans behind the scenes and _predictable_ \"requoting\" on Windows](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-325231274))\r\n\r\n   * **From the _outside_ (e.g., from `bash`), PowerShell must present a _sane CLI_** to also encourage ad-hoc use of PowerShell, as [described above](https://github.com/PowerShell/PowerShell/issues/4024#issuecomment-312267611) and more generally in #3743.\r\n\r\n\r\n",
      "created_at": "2017-07-10T02:33:27Z",
      "updated_at": "2017-09-12T21:20:29Z"
    }
  ],
  "created_at": "2017-06-15T20:32:25Z",
  "labels": [
    "WG-Interactive-Console",
    "Resolution-By Design",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 4024,
  "state": "closed",
  "title": "Command line arguments with a dollar sign",
  "updated_at": "2017-09-12T21:20:29Z"
}