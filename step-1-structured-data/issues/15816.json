{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15816",
  "author": "krishnan-unni",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am trying to invoke dism cmdlets to get the windows updates installed in a machine. So I'm running my .Net 5 concole app with Microsoft.Powershell.SDK 7.1.3. Here is my test code:\r\n\r\n```\r\nstatic void Main(string[] args)\r\n        {\r\n            using (var powerShell = PowerShell.Create())\r\n            {\r\n                // returns \r\n                var coms = powerShell\r\n                    .AddCommand(\"get-command\")\r\n                    .AddParameter(\"Module\", \"Dism\")\r\n                    .Invoke();\r\n\r\n                var dism = powerShell\r\n                    .AddCommand(\"import-module\")\r\n                    .AddParameter(\"Name\", \"Dism\")\r\n                    .Invoke();\r\n\r\n                var results = powerShell\r\n                    .AddCommand(\"get-windowspackage\")\r\n                    .AddParameter(\"online\")\r\n                    .Invoke();\r\n\r\n                \r\n                // Display each result object.\r\n                foreach (PSObject result in results)\r\n                {\r\n                    //parse results\r\n                }\r\n\r\n                System.Console.WriteLine(\"Hit any key to exit...\");\r\n                System.Console.ReadKey();\r\n            }\r\n        }\r\n```\r\n\r\nI can run the same command in Powershell directly and I see the results just fine.\n\n### Expected behavior\n\n```console\nI should be able to see the results with installed updates in my running OS.\n```\n\n\n### Actual behavior\n\n```console\nThe Invoke for import and Get-WindowsPackage -Online commands return 0 count on PSObject list.\r\n\r\n![image](https://user-images.githubusercontent.com/14880339/126570423-3ed8712f-d41a-4bbc-9e40-f0bd7a0fcd32.png)\n```\n\n\n### Error details\n\n```console\nThere is no error. Although if I misspell the cmdlet name or the module, then it clearly throws exception. So it is clear that the cmdlet is detected and so is the module.\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/14880339/126570423-3ed8712f-d41a-4bbc-9e40-f0bd7a0fcd32.png)\r\n",
  "closed_at": "2021-07-24T16:29:01Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I'll try take a look at this the next few days",
      "created_at": "2021-07-22T23:39:52Z",
      "updated_at": "2021-07-22T23:39:52Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@krishnan-unni \r\nHi, this is because you do not clear the commands between executions. Adding a `powerShell.Commands.Clear();` between your invocation blocks will make it work.\r\nHaving said that, you can reduce your example to just one invocation because one does not need to manually import PowerShell modules that are on the `PSModulePath` environment variable, which is the case with modules that are installed or part of the OS like e.g. `Dism`.\r\nIf you still have to execute multiple commands, then you could make your own `InvokeAndClear` extension method to keep your code DRY like e.g. here: https://github.com/PowerShell/PSScriptAnalyzer/blob/58c44234d44dfd0db35bb532906963e08fde8621/PSCompatibilityCollector/Microsoft.PowerShell.CrossCompatibility/Utility/PowerShellExtensions.cs#L12\r\nAlso please note that if you want to execute something more complex later on, there is also an `AddScript` method. You are probably already aware but running `get-windowspackage -online` requires admin rights, therefore when you invoke your compiled binary, you will need to run as admin.",
      "created_at": "2021-07-24T16:22:13Z",
      "updated_at": "2021-07-24T16:23:16Z"
    },
    {
      "author": "krishnan-unni",
      "author_association": "NONE",
      "body": "@bergmeister Thank you and for pointing out the extension. That sorted out the problem. And yes, the run as admin is expected in this case, I'm aware. 2 questions - is there an official documentation on this Invoke and Clear approach? \r\nWhat is the reasoning behind this design? To have a command be cleared every time its invoked? Why is it not an automatic behavior? \r\nP.S: I am closing the issue since its resolved and the questions are for my own curiosity.",
      "created_at": "2021-07-24T16:29:01Z",
      "updated_at": "2021-07-24T16:29:01Z"
    }
  ],
  "created_at": "2021-07-21T23:15:11Z",
  "labels": [
    "Issue-Question",
    "WG-DevEx-SDK"
  ],
  "number": 15816,
  "state": "closed",
  "title": "[Microsoft.Powershell.SDK] Invoking Dism (or any) Modules commands return 0",
  "updated_at": "2021-07-24T16:29:04Z"
}