{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16672",
  "author": "MartinGC94",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nType in the following:\r\n```\r\nfunction Get-VM {throw \"Why was I run?\"}\r\nEnter-PSSession -VMName VM1 -Credential (Get-Credential)\r\n```\r\nAnd note how the error message is the same that we just added to Get-VM.\r\nIf we look at the code: https://github.com/PowerShell/PowerShell/blob/6c22065d77f0d150484ac0234938b0afb7ee11f1/src/System.Management.Automation/engine/remoting/commands/newrunspacecommand.cs#L879 we can see that it runs the script `Get-VM -Name $args` and because of the command precedence rules, the function is run instead of the cmdlet.  \r\nA simple solution to this would be to just run the command with the module qualified name: `Hyper-V\\Get-VM` and that's how it's done elsewhere in this project but that doesn't solve the issue of someone intentionally overriding the module like this: `New-Module -ScriptBlock {function Get-VM{throw \"Why was I run?\"}} -Name Hyper-V` is there a better way to do it?\r\n\r\n### Expected behavior\r\n\r\n```console\r\nA session to VM1.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nException: Why was I run?\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.10\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.10\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we could use full qualified name for Get-VM cmdlet in the code.",
      "created_at": "2021-12-25T16:20:04Z",
      "updated_at": "2021-12-25T16:20:04Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Even using the fully qualified name won\u2019t work as you can define a function `ModuleName\\My-Function` which will then be called. I\u2019ve found you need to do something like `& (Get-Command -Name My-Function -Module Module) -Param1 foo bar \u2026`. There might be a simpler way than this though but I\u2019m not sure of it.",
      "created_at": "2021-12-26T00:54:24Z",
      "updated_at": "2021-12-26T00:54:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Even using the fully qualified name won\u2019t work as you can define a function `ModuleName\\My-Function` \r\n\r\nUser could re-define whole module :-) to break a script behavior.\r\n\r\nI believe full-qualified name is best that we could do. Also there are other examples in PowerShell code where we could  do the same.",
      "created_at": "2021-12-27T04:35:24Z",
      "updated_at": "2021-12-27T04:35:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting\r\nRemoting working group agrees that this is a remoting layer bug, and that the fix is to fully qualify the `Get-VM` module command.",
      "created_at": "2022-04-07T17:55:26Z",
      "updated_at": "2022-04-07T17:55:26Z"
    }
  ],
  "created_at": "2021-12-25T16:12:27Z",
  "number": 16672,
  "state": "open",
  "title": "PowerShell will sometimes use the wrong command in internal command calls",
  "updated_at": "2022-04-07T17:55:36Z"
}