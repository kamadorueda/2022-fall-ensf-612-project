{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11213",
  "author": "mazhar10",
  "body": "I am launching a PS script from C# via PowerShell.Create(), ..., Invoke().\r\nInside the PS script, I am writing the results of Get-Module -ListAvailable to a file.\r\nNothing gets written to the file.\r\n**However**\r\nIf I do the below, then all installed modules (well, at least the ones in the PSModulePath) show up fine.\r\n. \r\n.\r\n`\r\nSessionStateProxy proxy = runspace.SessionStateProxy;\r\nstring psModulePath = proxy.GetVariable(\"eng:PSModulePath\").ToString();\r\nproxy.SetVariable(\"env:PSMOdulePAth:,$@\"{psModulePath}\");\r\n`\r\n\r\nAbove makes no sense to me - why would simply getting and setting PSModulePath make any difference?",
  "closed_at": "2021-03-01T19:15:09Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@mazhar10 would you be able to give us a full C# program with a minimal repro in it? I can't work out what's happening in the code you've supplied so far",
      "created_at": "2019-12-10T23:05:46Z",
      "updated_at": "2019-12-10T23:05:46Z"
    },
    {
      "author": "mazhar10",
      "author_association": "NONE",
      "body": "See the snippet below. The problem is remediated by adding in the piece between the \"shenanigan\" comments, and the problem appears if you remove those few lines:\r\n\r\n```csharp\r\npublic static string RunPS1(string psFile, string sJSONIn)\r\n{\r\n    InitialSessionState initPSState = InitialSessionState.CreateDefault();\r\n    initPSState.AuthorizationManager = new AuthorizationManager(\"Microsoft.PowerShell\");\r\n    Runspace runspace = RunspaceFactory.CreateRunspace(initPSState);\r\n    runspace.Open();\r\n    \r\n    // Below shenanigan is needed otherwise PS core never sees modules in PSModulePath when invoked via runspace.\r\n    SessionStateProxy proxy = runspace.SessionStateProxy;\r\n    string psModulePath = proxy.GetVariable(\"env:PSModulePath\").ToString();\r\n    proxy.SetVariable(\"env:PSModulePath\", $@\"{psModulePath}\");\r\n    // End shenanigan\r\n\r\n    string sJSONOut =\"\";\r\n\r\n    PowerShell ps1 = PowerShell.Create();\r\n    string scrpt1 = File.ReadAllText(psFile);\r\n    ps1.AddScript(scrpt1);\r\n    ps1.AddParameter(\"sJSONIn\", sJSONIn);\r\n    ps1.Runspace = runspace;\r\n    Collection<PSObject> results=ps1.Invoke();\r\n\r\n    foreach (PSObject o1 in results)\r\n    {\r\n        sJSONOut += o1.ToString();\r\n    }\r\n    runspace.Close();\r\n    ps1.Dispose();\r\n    return (sJSONOut);\r\n}\r\n```",
      "created_at": "2019-12-11T00:11:30Z",
      "updated_at": "2019-12-11T23:20:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @rjmholt Can you make a conclusion?",
      "created_at": "2020-01-31T12:13:21Z",
      "updated_at": "2020-01-31T12:13:21Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "please see #11211 for additional information. You need to be sure that the PSModulePath is propagated to the new powershell instance. Your code is one approach, but there are many other ways to do this.",
      "created_at": "2021-03-01T19:15:08Z",
      "updated_at": "2021-03-01T19:15:08Z"
    }
  ],
  "created_at": "2019-11-28T21:50:43Z",
  "number": 11213,
  "state": "closed",
  "title": "PS SDK 6.2.3 does not honor PSModulePath when used via PowerShell.invoke",
  "updated_at": "2021-03-01T19:15:09Z"
}