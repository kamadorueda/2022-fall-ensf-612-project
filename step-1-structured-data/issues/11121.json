{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11121",
  "author": "mklement0",
  "body": "_Update_: The issue is not one of _missing_ InnerException information, but one of situationally different _ordering_.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# OK: The \"InnerException :\" line is followed by a \"Message: \" line for the inner exception.\r\ntry { 1/0 } catch {}; (Get-Error | Out-String -Stream) -replace '\\e[^m]*m' | Select-String -context 0,1 '\\bInnerException\\b' | % { $_.Context.PostContext } | Should -Match 'Attempted to divide by zero'\r\n\r\n# FAILS: The \"InnerException :\" line is followed by no fields describing the inner exception.\r\ntry { [int]::parse('foo') } catch {}; (Get-Error | Out-String -Stream) -replace '\\e[^m]*m' | Select-String -context 0,1 '\\bInnerException\\b' | % { $_.Context.PostContext } | Should -Match 'not in a correct format'\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe 2nd test fails:\r\n\r\n```none\r\nExpected regular expression 'not in a correct format' to match '        TargetSite : ', but it did not match.\r\n```\r\n\r\nThat is, the `InnerException: ` line wasn't followed by the `Message: ` line.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.5\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I think your test is flawed, your query returns `TargetSite` which itself is an object and only one member of the InnerException.  Here's what I see running it manually:\r\n\r\n```powershell\r\nPS> [int]::Parse('foo')\r\nMethodInvocationException: Exception calling \"Parse\" with \"1\" argument(s): \"Input string was not in a correct format.\"\r\n[30.08ms] /Users/steve/repos/PowerShell [origin/get-error-exception-type]\r\nPS> gerr\r\n\r\nException             :\r\n    ErrorRecord    :\r\n        Exception             :\r\n            Message : Exception calling \"Parse\" with \"1\" argument(s): \"Input string was not in a correct format.\"\r\n            HResult : -2146233087\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : FormatException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : [int]::Parse('foo')\r\n            PositionMessage  : At line:1 char:1\r\n                               + [int]::Parse('foo')\r\n                               + ~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite     :\r\n        Name          : ConvertToMethodInvocationException\r\n        DeclaringType : System.Management.Automation.ExceptionHandlingOps\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace     :\r\n   at System.Management.Automation.ExceptionHandlingOps.ConvertToMethodInvocationException(Exception exception, Type\r\ntypeToThrow, String methodName, Int32 numArgs, MemberInfo memberInfo)\r\n   at CallSite.Target(Closure , CallSite , Type , String )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    Message        : Exception calling \"Parse\" with \"1\" argument(s): \"Input string was not in a correct format.\"\r\n    Data           : System.Collections.ListDictionaryInternal\r\n    InnerException :\r\n        TargetSite :\r\n            Name          : ThrowOverflowOrFormatException\r\n            DeclaringType : System.Number\r\n            MemberType    : Method\r\n            Module        : System.Private.CoreLib.dll\r\n        StackTrace :\r\n   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)\r\n   at CallSite.Target(Closure , CallSite , Type , String )\r\n        Message    : Input string was not in a correct format.\r\n        Source     : System.Private.CoreLib\r\n        HResult    : -2146233033\r\n    Source         : System.Management.Automation\r\n    HResult        : -2146233087\r\nCategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\nFullyQualifiedErrorId : FormatException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : [int]::Parse('foo')\r\n    PositionMessage  : At line:1 char:1\r\n                       + [int]::Parse('foo')\r\n                       + ~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\nThe InnerException is there and expanded.  It just happens that the colons align but the indentation shows the members.",
      "created_at": "2019-11-19T19:21:04Z",
      "updated_at": "2019-11-19T19:21:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT  - indeed I missed that the information is there.\r\n\r\nWhat caused the confusion is that `TargetSite: ` information _comes first_, which I didn't expect.\r\n\r\nHow do you feel about making sure that at least the `Message :` line comes first?",
      "created_at": "2019-11-19T19:24:37Z",
      "updated_at": "2019-11-19T19:24:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thinking about pending PR, #11076, I suggest making at least the following two lines (properties) _always_ come first:\r\n\r\n * `Type: ` (full exception type name)\r\n\r\n* `Message :`\r\n\r\nIf there are additional properties that are _always_ populated, I suggest listing them before those that are situationally missing.\r\n\r\n",
      "created_at": "2019-11-19T20:13:06Z",
      "updated_at": "2019-11-19T20:13:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 the current order of the properties is what `$_.psobject.properties` returns.  We can certainly change the ordering.  It's hard to rely on properties that are *always* populated as I don't think any of it is enforced and Exceptions and ErrorRecords (particularly nested objects) can be any form.",
      "created_at": "2019-11-19T20:26:25Z",
      "updated_at": "2019-11-19T20:26:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think it definitely makes sense to put type and message first - they are always available and the most important properties.\r\n\r\nI suggest putting the non-primitive properties (the ones with properties of their own or  \"noisy\" multi-line values) _last_, in that order:\r\n\r\n* `Data`\r\n* `TargetSite`\r\n* `StackTrace`\r\n\r\nThen follow that by a nested, indented `InnerException` block, as suggested in #11123 \r\n\r\nMy suggestion for the ordering of the remaining standard `System.Exception` properties - to go between type + message and the  non-primitive ones - is this:\r\n\r\n* `Source`\r\n* `HResult`\r\n* `HelpLink`\r\n\r\n\r\n\r\n",
      "created_at": "2019-11-19T21:01:25Z",
      "updated_at": "2019-11-19T21:01:25Z"
    }
  ],
  "created_at": "2019-11-19T18:35:43Z",
  "number": 11121,
  "state": "open",
  "title": "Get-Error situationally places other InnerException information before the Message output line",
  "updated_at": "2019-11-20T04:59:05Z"
}