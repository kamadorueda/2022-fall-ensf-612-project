{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16973",
  "author": "WillPittenger",
  "body": "### Summary of the new feature / enhancement\n\nPowerShell needs better interactivity with executables associated with the rest of Windows, DOS, and *nix.  This includes the help system and autocomplete.\n\n### Proposed technical implementation details (optional)\n\nI was reading how yt-dlp has manpages available.  That got me wondering if Powershell supports them or anything similar for components that don't directly support Powershell.  We're talking about programs that come as EXE files.\r\nThursday\r\n\r\nIt also would be nice if EXE files could provide auto-complete information for their command line options. Note that with many programs ported from *nix, `-axi` is equivalent to `-a -x -i`. That would be an obstacle.\r\n\r\nThen would PowerShell need to know when to translate `-x` into `/x` for older DOS programs.  Similarly, PowerShell would need to know if `/`, `\\`, or either should be used in paths.  (This second setting would be ignored if `/` starts a switch.\r\n\r\nI would suggest having a field in the auto-complete information file describing which is needed.  You then default it one way or the other so it can be anticipated what to do if the file omits that field.\r\n\r\nAs for the previously mentioned MAN documentation, that supports something that Powershell's system doesn't: Color.",
  "closed_at": "2022-03-09T11:24:11Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Parts of this is already somewhat doable with [Register-ArgumentCompleter](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/register-argumentcompleter?view=powershell-7.2). This cmdlet can be used to add auto completion for not just pwsh functions and cmdlets but any other command returned by `Get-Command`, i.e. a native executable. There are some popular modules out there like [post-git](https://github.com/dahlbyk/posh-git) that provide auto completers for native executables, in this case `git` and I'm sure there are many other ones out there. Tools like `clap` with `rust` can automatically generate the auto completion code needed for pwsh on rust executables. I believe there's a common repo that contains a lot of these in 1 place but I cannot seem to find it (if it exists).\r\n\r\nThe pwsh team have also developed [Crescendo](https://github.com/PowerShell/Crescendo) to take it a step further an wrap native executables as a pwsh function that can output structured objects rather than strings. This covers things like parameter binding and output handling.\r\n\r\nIn saying all that there are limits to what pwsh can do in box. There's no 1 standard to rule them all when it comes to native commands so things like argument styles, man details, help messages, auto completers so I personally don't believe pwsh can do it all. It relies on 3rd party offerings to bridge the gap.",
      "created_at": "2022-03-08T05:22:52Z",
      "updated_at": "2022-03-08T05:23:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@lzybkr 's TabExpansionPlusPlus module included some (many?) Completers, and community projects have tried to do them for things like (e.g.) git. I started doing one for docker but had to shelve it . It isn't difficult but it is repetitive and time consuming.  The same for is true for adding PowerShell help pages for anything outside the PowerShell world.  \r\n\r\n**This is certainly a good idea,** but it is like the story of the people named somebody, anybody, nobody and everybody, \r\n\"There was a job to be done and everybody said somebody should do it; anybody could have done done, but nobody did it, and then everybody got mad... \"  \r\n\r\nThe authors of the original command don't see it as their job (they didn't write a PowerShell command, and they've move on to other things).       \r\nThe PowerShell team doesn't have the resources to do all the PowerShell things they need to, never mind improving the experience of \"legacy\" stuff _in PowerShell_.  \r\nSo these things become community projects. And when people suggest this ,the response is \"hey @WillPittenger  that's a really great idea,  you should drive it\", and the poor OP thinks \"But this is an impossibly huge task and I'm just one person\".  \r\nIt actually needs someone to co-ordinate a bit of a community effort - figure out what has been done already and where effort should be directed  paging  @theJasonHelmick   can you be somebody who can co-ordinate anybody who wants to help everybody? \r\n",
      "created_at": "2022-03-08T09:27:53Z",
      "updated_at": "2022-03-08T09:27:53Z"
    },
    {
      "author": "WillPittenger",
      "author_association": "NONE",
      "body": "Regarding me doing this, while I know C# and have worked on some CmdLets, I don't know the internals of PowerShell and my projects never get far.",
      "created_at": "2022-03-08T15:44:02Z",
      "updated_at": "2022-03-08T15:44:02Z"
    },
    {
      "author": "WillPittenger",
      "author_association": "NONE",
      "body": "Actually, I mainly code UI components, but have done some API work.",
      "created_at": "2022-03-08T15:50:24Z",
      "updated_at": "2022-03-08T15:50:24Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "tab complete for non-Powershell executables has nothing to do with powershell, which is one reason why I recommend powershell. \r\n\r\nAs a powershell diehard, I would even suggest that you focus your efforts on rewriting kubectl to powershell version , let support objects, and tab completion, following the powershell specification.",
      "created_at": "2022-03-08T16:23:24Z",
      "updated_at": "2022-03-08T16:24:26Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It's not _really_ coding, you find an example and then just say wibble.exe has these parameters, and if param 1 is specified it can have... technically code, but really it's a way of declaring data. ",
      "created_at": "2022-03-08T19:01:25Z",
      "updated_at": "2022-03-08T19:01:25Z"
    }
  ],
  "created_at": "2022-03-08T03:40:33Z",
  "labels": [
    "Issue-Enhancement",
    "Needs-Triage"
  ],
  "number": 16973,
  "state": "closed",
  "title": "Autocomplete and help information for non-Powershell executables",
  "updated_at": "2022-03-09T11:24:11Z"
}