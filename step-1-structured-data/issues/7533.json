{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7533",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nFix #7301\r\nHandle operations with ByRef-like types gracefully in PowerShell.\r\nByRef-like types are supposed to be used on stack only, so we need to fail gracefully when accessing properties, calling methods, or creating objects related to ByRef-like types.\r\n\r\nFound one issue when working on this fix, tracked by #7534\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-26T19:50:59Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Sorry for the late response (I'm currently on vacation :)).\r\nYes, I thought about implicit cast to/from `Span/ReadOnlySpan`. The implicit cast doesn't help regular conversion operation in PowerShell for the same root reason -- the target ByRef-like type cannot be boxed.\r\n\r\nBut when calling methods via Expression with jitting, `Expression.Convert` can be used to implicit cast an argument to the `Span` types before passing to the call (see an example below).\r\n\r\n```c#\r\nvar arg = @\"e:\\abc\\def\";\r\nvar method = typeof(Path).GetMethod(nameof(Path.IsPathRooted), new Type[] { typeof(ReadOnlySpan<char>) });\r\n\r\nvar body = Expression.Call(method, Expression.Convert(Expression.Constant(arg), typeof(ReadOnlySpan<char>)));\r\nvar func = Expression.Lambda<Func<bool>>(body, null).Compile();\r\nvar rest = func();\r\nConsole.WriteLine(rest);\r\n\r\n> True\r\n```\r\n\r\nPowerShell evaluates with interpretation by default, which bacially translating Expression tree to pre-defined C# code, so the `Expression.Convert` might not work like when Expression tree is jitted (haven't looked into it, will investigate that). If it works with interpreter too (or we can update the interpreter to make it work), we will need to update the method resolution. We currently use the same \"figuring-out-conversion\" method for regular conversion in powershell as well as when resolving the best matching method. The implicit cast for ByRef-like target types should continue to be \"no-conversion\" for regular conversion operation, but acceptable for method resolution.\r\n\r\nAnyway, this should be done in a separate PR. ~I will open an issue to track it.~ The issue #7596 was opened to track it.",
      "created_at": "2018-08-21T18:32:57Z",
      "updated_at": "2018-08-22T00:42:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for depth comment! I think support dynamically converting Span based methods is important because main direction in .Net Core is to implement methods with Span parameters and other methods only wrap them. Later we can get APIs without the wrapped methods in CoreFX or third party libraries and PowerShell will not be able tocall them. So my fisrt think was that we could generate the wrap methods in runtime.",
      "created_at": "2018-08-22T03:58:12Z",
      "updated_at": "2018-08-22T03:58:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@lzybkr and @iSazonov Your comments have been addressed. Please take another look when you have time. Thanks!",
      "created_at": "2018-08-23T00:34:16Z",
      "updated_at": "2018-08-23T00:34:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Will it resolve:\r\n```powershell\r\n [System.Text.Encoding]::GetEncoding(0)\r\nformat-default : Cannot create boxed ByRef-like values.\r\n+ CategoryInfo          : NotSpecified: (:) [format-default], InvalidProgramException\r\n+ FullyQualifiedErrorId : System.InvalidProgramException,Microsoft.PowerShell.Commands.FormatDefaultCommand\r\n```\r\nI get this on 6.1.0 RC1.\r\n",
      "created_at": "2018-08-23T03:46:27Z",
      "updated_at": "2018-08-23T03:46:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Here is what it looks with changes from this PR:\r\n```\r\nPS:1> [System.Text.Encoding]::GetEncoding(0)\r\n\r\n\r\nPreamble          :\r\nBodyName          :\r\nEncodingName      : Western European (Windows)\r\nHeaderName        :\r\nWebName           : windows-1252\r\nWindowsCodePage   :\r\nIsBrowserDisplay  :\r\nIsBrowserSave     :\r\nIsMailNewsDisplay :\r\nIsMailNewsSave    :\r\nIsSingleByte      : True\r\nEncoderFallback   : System.Text.InternalEncoderBestFitFallback\r\nDecoderFallback   : System.Text.InternalDecoderBestFitFallback\r\nIsReadOnly        : True\r\nCodePage          : 1252\r\n```\r\n\r\nInstance property access doesn't throw in powershell, even in strict mode. So accessing `Preamble` in the formatting code won't break it like it did previously.",
      "created_at": "2018-08-23T16:47:46Z",
      "updated_at": "2018-08-23T16:47:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "BTW, the AppVeyor CI PR failed with the following error\r\n```\r\nTEST FAILURES\r\nDescription: Enable-PSSession Cmdlet creates a default PSSession configuration untied to a specific PowerShell version.\r\nName:        Validate Enable-PSSession Cmdlet.Enable-PSSession Cmdlet creates a default PSSession configuration untied to a specific PowerShell version.\r\nmessage:\r\nExpected a value, but got $null or empty.\r\nstack-trace:\r\nat <ScriptBlock>, C:\\projects\\powershell\\test\\powershell\\Modules\\Microsoft.PowerShell.Core\\PSSessionConfiguration.Tests.ps1: line 855\r\n855:             $matchedEndpoint | Should -Not -BeNullOrEmpty\r\n1 tests in test/powershell failed\r\n```\r\nThe same failure is happening in the daily build, so it's not caused by chnages in this PR.",
      "created_at": "2018-08-23T16:49:14Z",
      "updated_at": "2018-08-23T16:49:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess that remoting enpoints is created when we install PowerShell Core on base CI system but then test a preview version. So possible fix is to remove endpoints with `Get-PSSessionConfiguration  | Unregister-PSSessionConfiguration`\r\n```powershell\r\n    Describe \"Validate Enable-PSSession Cmdlet\" -Tags @(\"Feature\", 'RequireAdminOnWindows') {\r\n        BeforeAll {\r\n            if ($IsNotSkipped) {\r\n                Get-PSSessionConfiguration  | Unregister-PSSessionConfiguration\r\n                Enable-PSRemoting\r\n            }\r\n        }\r\n```",
      "created_at": "2018-08-24T03:46:12Z",
      "updated_at": "2018-08-24T03:49:01Z"
    }
  ],
  "created_at": "2018-08-15T19:26:54Z",
  "number": 7533,
  "state": "closed",
  "title": "Handle operations with ByRef-like types gracefully in PowerShell",
  "updated_at": "2018-08-28T20:47:24Z"
}