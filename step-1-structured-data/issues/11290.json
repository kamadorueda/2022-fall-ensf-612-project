{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11290",
  "author": "r-darwish",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nNew-Item .x\r\nRemove-Item .x\r\n```\r\n\r\n# Expected behavior\r\nThe file should either be removed without having to specify `-Force`. Removing it with `/bin/rm .x` works without needing to specify `-f`\r\n# Actual behavior\r\n\r\n```none\r\nRemove-Item : You do not have sufficient access rights to perform this operation.                                                                                                                                                                                                          At line:1 char:1                                                                                                                                                                                                                                                                           + Remove-Item .x                                                                                                                                                                                                                                                                           + ~~~~~~~~~~~~~~                                                                                                                                                                                                                                                                           + CategoryInfo          : PermissionDenied: (/tmp/.x:FileInfo) [Remove-Item], IOException\r\n+ FullyQualifiedErrorId : RemoveFileSystemItemUnAuthorizedAccess,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Darwin 19.0.0 Darwin Kernel Version 19.0.0: Thu Oct 17 16:17:15 PDT 2019; root:xnu-6153.41.3~29/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "For clarity, your OS is macOS Catalina.",
      "created_at": "2019-12-08T15:30:00Z",
      "updated_at": "2019-12-08T15:30:00Z"
    },
    {
      "author": "r-darwish",
      "author_association": "NONE",
      "body": "Correct. However, I just tested the same version of Powershell in Arch Linux. The results are the same but with a slightly different error id:\r\n\r\n```none\r\nRemove-Item : You do not have sufficient access rights to perform this operation.\r\nAt line:1 char:1\r\n+ Remove-Item .x\r\n+ ~~~~~~~~~~~~~~\r\n+ CategoryInfo          : PermissionDenied: (/home/roey/src/aur/topgrade/.x:FileInfo) [Remove-Item], IOException\r\n+ FullyQualifiedErrorId : RemoveFileSystemItemUnAuthorizedAccess,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n```",
      "created_at": "2019-12-08T18:10:36Z",
      "updated_at": "2019-12-08T18:10:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this behaviour is inherited from the FileSystem provider and possibly from .NET Core's `System.IO.File` APIs. On Windows, this behaviour is the same (and always has been) -- you need to specify `-Force` to remove hidden files.\r\n\r\nNot sure if we'd want to change this behaviour specifically for Unix or not, though. @SteveL-MSFT thoughts? \ud83d\ude0a ",
      "created_at": "2019-12-09T20:46:23Z",
      "updated_at": "2019-12-09T20:46:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that the behavior is consistent within PowerShell so probably shouldn't change that.  Seems like the error could be better saying because it is hidden and not a permission problem.",
      "created_at": "2019-12-09T22:25:36Z",
      "updated_at": "2019-12-09T22:25:47Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The design with hidden files was that `-force` should be required for all operations e.g. `ls -force` to list them, etc. Technically,  using `-force` expands the set of operation you can do so the \"insufficient access rights\" message makes \"sense\" *if* you fully understand the design. But practically, a message saying \"use -force to delete hidden files\" would be more useful. Alternately we could simply remove the restriction so no message is required.",
      "created_at": "2019-12-10T20:35:02Z",
      "updated_at": "2019-12-10T20:35:02Z"
    },
    {
      "author": "reynoldsbd",
      "author_association": "CONTRIBUTOR",
      "body": "I'd like to second OP's sentiment that the current behavior feels unintuitive.\r\n\r\nThe semantics and usage of hidden files are fundamentally different between Windows and non-Windows. On Windows, \"hidden\" is a first-class file system attribute that shields the file from various operations at the OS level. In contrast, on Unix-y systems hidden files are just an agreed-upon convention that some applications (chiefly `ls`) observe, but most choose safely ignore; from the OS perspective they are identical to any other file.\r\n\r\nAlso, I would argue that from a certain perspective, this behavior is _not_ consistent within PowerShell - at least for those concerned with writing cross-platform scripts. For example, the following sequence of commands works on Windows but produces an error on Linux:\r\n\r\n```\r\n\"hello\" > ./.foo.txt\r\nRemove-Item ./.foo.txt\r\n```\r\n\r\nObviously this is a simple example, but there are a number of real-world cases where scripts I have written worked on Windows but were broken on Linux.\r\n\r\nI don't want to get in the habit of defensively adding `-Force` every time I type `Remove-Item`, because I generally appreciate being protected from doing stupid things.",
      "created_at": "2021-06-02T15:29:39Z",
      "updated_at": "2021-06-02T15:29:39Z"
    }
  ],
  "created_at": "2019-12-08T12:18:17Z",
  "number": 11290,
  "state": "open",
  "title": "Removing a hidden file in Unix results in RemoveFileSystemItemUnAuthorizedAccess",
  "updated_at": "2021-12-01T07:32:03Z"
}