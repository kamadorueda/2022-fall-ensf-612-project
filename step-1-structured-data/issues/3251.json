{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3251",
  "author": "jianyunt",
  "body": "Steps to reproduce\r\n------------------\r\n1. define a class in ps as below\r\n```powershell\r\nclass Environment \r\n{\r\n    Environment()\r\n    {\r\n    } \r\n    Environment([string]$name)\r\n    {\r\n    }\r\n    [object] FooBar()\r\n    {\r\n        return get-process powershell\r\n    }\r\n }\r\n```\r\n2. save it as temp.psm1\r\n3. Import-Module .\\temp.psm1\r\n4. $mod=get-module temp\r\n5. &($mod){[Environment]::new('Hello')}\r\n\r\nExpected behavior\r\n-----------------\r\nAn instance of Environment type defined in the Temp module should be created.\r\n\r\nActual behavior\r\n---------------\r\n```\r\nCannot find an overload for \"new\" and the argument count: \"1\".\r\nAt line:1 char:9\r\n+ &($mod){[Environment]::new('hello')}\r\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodException\r\n    + FullyQualifiedErrorId : MethodCountCouldNotFindBest\r\n```\r\n\r\nInitial Analysis:\r\n---------------\r\nSomehow PowerShell, Run()/DynamicInstruction<T0,T1,TRet>class,  picks up System.Environment type first.  Should PowerShell  search the local module first?\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nGitCommitId                    v6.0.0-alpha.16-35-g669a34a27bd51756e49f50dc627cd4a89fd8244a\r\nSerializationVersion           1.1.0.1\r\nPSRemotingProtocolVersion      2.3\r\nPSEdition                      Core\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nWSManStackVersion              3.0\r\nBuildVersion                   3.0.0.0\r\n\r\n```\r\n",
  "closed_at": "2017-03-06T19:28:03Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Use \r\n`    using module .\\temp.psm1` \r\ninstead of Import-Module and then you can reference the type either using the short name\r\n`     [environment]::New(\"hello\")`\r\nor the module-qualified name:\r\n`    [myclassmodule.environment]::New(\"hello\")`",
      "created_at": "2017-03-04T00:33:37Z",
      "updated_at": "2017-03-04T00:33:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jianyunt this appears to be `by design` in terms of order of precedence in resolving types.  changing this would be breaking and @BrucePay has provided supported ways around this",
      "created_at": "2017-03-04T23:04:43Z",
      "updated_at": "2017-03-04T23:04:43Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay @SteveL-MSFT ,  the following generates an error:\r\n```\r\n$mod=get-module temp\r\nusing module $mod.Path\r\n&($mod){[Environment]::new('something')}\r\n\r\n\r\n\r\nAt line:1 char:1\r\n+ using module $mod.Path\r\n+ ~~~~~~~~~~~~~~~~~~~~~~\r\n'$mod.Path' is not a valid value for using name.\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : InvalidValueForUsingItemName\r\n```\r\nwhat's the correct syntax? I need to call it from C# and I do not think I have the module path other than via $mod.\r\n",
      "created_at": "2017-03-06T02:18:31Z",
      "updated_at": "2017-03-06T02:19:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jianyunt it should just be the module name",
      "created_at": "2017-03-06T04:10:06Z",
      "updated_at": "2017-03-06T04:10:06Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT then why does @BrucePay reference `.\\temp.psm1` in his example above? \r\n\r\nIsn't it that `using` needs parse-time values? \r\n\r\nAnd if that's the case, how does one use the fully-qualified type name with `Import-Module`?",
      "created_at": "2017-03-06T17:29:52Z",
      "updated_at": "2017-03-06T17:30:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Actually, I think both syntax is supported.  `module name` if it's in `PSModulePath` or directly to the `.psm1`\r\n\r\n@jianyunt your example doesn't work as .Path points to the `.psd1`.  We should fix that.",
      "created_at": "2017-03-06T17:40:00Z",
      "updated_at": "2017-03-06T17:40:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Keeping this issue resolved as `by-design` in terms of precedence.  @jianyunt you should open a new issue to support path to .psd1 for `using module`",
      "created_at": "2017-03-06T17:40:59Z",
      "updated_at": "2017-03-06T17:40:59Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "But I need workaround for this precedence issue.\r\n Case 1 - using module - fail\r\n``` PowerShell\r\nPS E:\\test> dir .\\temp.psm1\r\n\r\n\r\n    Directory: E:\\test\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----         3/6/2017   9:34 AM            351 temp.psm1\r\n\r\n\r\nPS E:\\test> Import-Module .\\temp.psm1\r\nPS E:\\test> $mod=get-module temp\r\nPS E:\\test> $mod.Path\r\nE:\\azure\\PSCloudConsole\\test\\temp.psm1\r\nPS E:\\azure\\PSCloudConsole\\test> using module $mod.Path\r\nAt line:1 char:1\r\n+ using module $mod.Path\r\n+ ~~~~~~~~~~~~~~~~~~~~~~\r\n'$mod.Path' is not a valid value for using name.\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : InvalidValueForUsingItemName\r\n\r\n```\r\nCase 2: using FQ module name - Fail\r\n\r\n``` PowerShell\r\nPS E:\\test> &($mod){[temp.Environment]::new('Hello')}\r\nUnable to find type [temp.Environment].\r\nAt line:1 char:9\r\n+ &($mod){[temp.Environment]::new('Hello')}\r\n+         ~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (temp.Environment:TypeName) [], RuntimeException\r\n    + FullyQualifiedErrorId : TypeNotFound\r\n\r\n```\r\n\r\nAny workaround?",
      "created_at": "2017-03-06T17:47:04Z",
      "updated_at": "2017-03-06T17:47:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`using module` requires a static name for the module as it's a parse time check",
      "created_at": "2017-03-06T18:23:17Z",
      "updated_at": "2017-03-06T18:23:17Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like the workaround is to add path to psmodulepath.  The following works.\r\n``` PowerShell\r\ncreate temp.psd1 and move both temp.psm1 and temp.psd1 under e:\\test\r\n$env:PSModulePath+=\";E:\\test\\\"\r\nget-module temp -list\r\nimport-module temp\r\nusing module temp\r\n$mod=get-module temp\r\n&($mod){[temp.Environment]::new('Hello')}\r\n```",
      "created_at": "2017-03-06T18:26:05Z",
      "updated_at": "2017-03-06T18:26:05Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding using module takes static name only, should we fix that?    Using module should take variable like ipmo?\r\n$a=\"E:\\test\\temp.psm1\"\r\nimport-module $a",
      "created_at": "2017-03-06T18:30:32Z",
      "updated_at": "2017-03-06T18:30:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe that was a specific design decision so that you would get errors only through parsing without executing code",
      "created_at": "2017-03-06T18:43:54Z",
      "updated_at": "2017-03-06T18:43:54Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Using is a static construct, it should mean the same thing every time you run a script.\r\n\r\nIf you could use a non-constant variable, the script could change behavior unexpectedly.\r\n\r\nIt was a conscious design choice to be more static with classes.",
      "created_at": "2017-03-06T19:19:54Z",
      "updated_at": "2017-03-06T19:19:54Z"
    }
  ],
  "created_at": "2017-03-03T21:28:42Z",
  "number": 3251,
  "state": "closed",
  "title": "PowerShell Class: .net type takes precedence  of my local type defined in a ps module. ",
  "updated_at": "2017-03-06T19:28:03Z"
}