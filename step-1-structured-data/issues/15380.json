{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15380",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThere's a race condition between the call to set the console cursor position and the screen buffer size has changed that puts the coordinates outside of the screen buffer area and causes pwsh to crash with an unhandled exception.  Also, it seems that the console host is calling Win32 APIs instead of the .NET APIs and I don't see any specific reason to do that other than consistency with other native APIs that need to be used.\r\n\r\nFix is to switch to using Console.SetCursorPosition and remove all use of the Win32 API.  Catch the ArgumentOutOfRangeException and ignore it.  There is really no way to avoid the race condition here as any validation of the screen buffer size can be wrong by the time we set the cursor position.  The user may have resized the window or when tabs show up on Windows Terminal, the screen buffer size automatically shrinks so that the window size doesn't change.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/15254\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-05-14T18:05:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Iwonder that tests fail.\r\n.Net GetBufferInfo() implementation https://github.com/dotnet/runtime/blob/1b09a384f29eafd98ec6bcb2d9e6fc820c9db801/src/libraries/System.Console/src/System/ConsolePal.Windows.cs#L1066-L1077\r\nPowerShell implementation looks the same\"\r\nhttps://github.com/PowerShell/PowerShell/blob/ae772462a5e9da61ab1858f46093abff83380c39/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostRawUserInterface.cs#L1290-L1296\n\n<blockquote><img src=\"https://opengraph.githubassets.com/1bdf63c3fd785f0ed194b3f3f1abad9a28698bed904be9f27248df36da79a76b/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2021-05-13T19:05:50Z",
      "updated_at": "2021-05-13T19:05:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it appears that the difference in the .NET code and the previous PS code is that PS is only using the stdout handle while .NET is checking stdin, stdout, and stderr and if any of them fail, an exception is thrown.  In this case, I suspect stdin is not a valid handle on CI.\r\n\r\nGiven that the .NET code is working differently here, I think we should revert the GetCursorPosition code back.",
      "created_at": "2021-05-13T20:06:37Z",
      "updated_at": "2021-05-13T20:06:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.6)\n",
      "created_at": "2021-05-27T17:32:50Z",
      "updated_at": "2021-05-27T17:32:50Z"
    }
  ],
  "created_at": "2021-05-11T19:21:57Z",
  "number": 15380,
  "state": "closed",
  "title": "Handle exception if ConsoleHost tries to set cursor out of bounds because screen buffer changed",
  "updated_at": "2021-05-27T17:32:50Z"
}