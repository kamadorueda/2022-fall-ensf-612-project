{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12647",
  "author": "mklement0",
  "body": "Note: The underlying behavior is currently by - surprising - design - see #6467.\r\n\r\nCombined with the native globbing feature on Unix-like platforms, the results are especially surprising and potentially destructive:\r\n\r\n* POSIX-like shells such as `bash` allow you to compose a single argument from any number of directly concatenated quoted and unquoted parts (e.g., `$ echo \"hi\"there'!'` results in literal string `hithere!`); this is especially helpful if certain parts _must_ be unquoted to trigger shell expansions, notably pathname expansion (globbing) via wildcard characters `*` and `?`.\r\n\r\n* PowerShell, by contrast, considers `\"hi\"there'!'` _two_ strings (`hi` and `there!`, because an argument that _starts with_ a _quoted_ part ends with the closing quote; by contrast, this doesn't happen if the argument starts unquoted - see #6467.\r\n\r\nSay you want to get all files (`*`) in a subfolder named `Foo Bar`:\r\n\r\n* In a POSIX like shell, `/bin/echo 'Foo Bar'/*`  would work as intended.\r\n\r\n* In PowerShell, `/bin/echo 'Foo Bar'/*` results in `/bin/echo` receiving `Foo Bar` as the first argument, followed by the files matching wildcard `/*`, i.e. files in the _root_ directory(!)\r\n\r\nNeedless to say, if you're using `rm` rather than `echo`, the results are potentially disastrous.\r\nSee [this StackOverflow question](https://stackoverflow.com/q/61674920/45375) for a real-life example.\r\n\r\nThe other implication is that the native globbing emulation is currently unavailable for literal paths that _must_ be quoted (due to having embedded spaces); starting a path with a variable reference, however, is not affected.\r\n\r\n# Steps to reproduce\r\n\r\nOn macOS or Linux:\r\n\r\n```powershell\r\nPush-Location temp:/\r\n$null = New-Directory 'Foo Bar'\r\n'hi' > 'Foo Bar/t.txt'\r\nprintf '%s\\n' 'Foo Bar'/* | Should -Be 'Foo Bar/t.txt'\r\nPop-Location\r\nRemove-Item -Recurse 'temp:/Foo Bar'\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails, because `/*` was expanded separately and the resulting root-directory files were passed as individual arguments.\r\n\r\n```none\r\nExpected 'Foo Bar/t.txt', but got \r\n@('Foo Bar', '/Applications', '/com.apple.TimeMachine.localsnapshots', '/Library', '/System', '/Users').\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-05-13T16:25:58Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12647,
  "state": "open",
  "title": "Compound string argument passed to native Unix utilities can result in surprising and potentially destructive globbing behavior",
  "updated_at": "2021-01-16T12:12:07Z"
}