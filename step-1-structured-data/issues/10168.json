{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10168",
  "author": "chucklu",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\nSave the following Powershell code as postman.ps1\r\n```powershell\r\n$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\r\n$headers.Add(\"Accept\", 'text/html')\r\n$headers.Add(\"Content-Type\", 'application/x-www-form-urlencoded')\r\n\r\n$body = \"billCode=75132077503374\"\r\n\r\n$response = Invoke-RestMethod 'https://hdgateway.zto.com/WayBill_GetDetail' -Method 'POST' -Headers $headers -Body $body\r\n$response\r\n\r\n```\r\nThen execute with\r\n```Powershell\r\n .\\postman.ps1 | ConvertTo-Json -Depth 1\r\n```\r\nresult\r\n```json\r\n{\r\n  \"result\": {\r\n    \"prescriptionStatus\": 5,\r\n    \"logisticsRecord\": \"System.Object[] System.Object[] System.Object[]\",\r\n    \"billPrescription\": \"1\u592917\u5c0f\u65f6\",\r\n    \"billCode\": \"75132077503374\"\r\n  },\r\n  \"message\": \"\u5feb\u9012\u4fe1\u606f\u67e5\u8be2\u6210\u529f\",\r\n  \"status\": true,\r\n  \"statusCode\": null\r\n}\r\n```\r\nand\r\n```Powershell\r\n .\\postman.ps1 | ConvertTo-Json -Depth 2\r\n```\r\nresult\r\n```json\r\n{\r\n  \"result\": {\r\n    \"prescriptionStatus\": 5,\r\n    \"logisticsRecord\": [\r\n      \" \",\r\n      \"  \",\r\n      \"   \"\r\n    ],\r\n    \"billPrescription\": \"1\u592917\u5c0f\u65f6\",\r\n    \"billCode\": \"75132077503374\"\r\n  },\r\n  \"message\": \"\u5feb\u9012\u4fe1\u606f\u67e5\u8be2\u6210\u529f\",\r\n  \"status\": true,\r\n  \"statusCode\": null\r\n}\r\n```\r\n\r\n\r\n# Expected behavior\r\nWhen the depth was set to 1, the output is\r\n\"logisticsRecord\": \"System.Object[] System.Object[] System.Object[]\", it's correct.\r\n**But when depth was set to 2, the logisticsRecord's item should also be object array** \r\n\r\n\r\n# Actual behavior\r\n**the logisticsRecord's items were parse as empty string, it's confused** \r\n```json\r\n   \"logisticsRecord\": [\r\n      \" \",\r\n      \"  \",\r\n      \"   \"\r\n    ]\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nWhen set depth to 3, the output is \r\n```json\r\n{\r\n  \"result\": {\r\n    \"prescriptionStatus\": 5,\r\n    \"logisticsRecord\": [\r\n      [\r\n        \"@{date=2019-03-05; country=; internationalPieces=; signMan=\u540c\u4e8b/\u540c\u5b66; operateUserPhone=13381883326; scanDate=2019-03-05 13:15:34; scanSite=; sendPiecesNum=0; operateUser=\u5415\u7ecf\u5168; isSendNoCome=False; scanType=\u7b7e\u6536; stateDescription= \u3010\u4e0a\u6d77\u5e02\u3011  \u5feb\u4ef6\u5df2\u5728 \u3010\u95f8\u5317\u5929\u76ee\u897f\u8def\u3011 \u7b7e\u6536, \u7b7e\u6536\u4eba: \u540c\u4e8b/\u540c\u5b66, \u5982\u6709\u7591\u95ee\u8bf7\u7535\u8054:13381883326 / 021-56420176, \u60a8\u7684\u5feb\u9012\u5df2\u7ecf\u59a5\u6295\u3002\u98ce\u91cc\u6765\u96e8\u91cc\u53bb, \u53ea\u4e3a\u5ba2\u5b98\u60a8\u6ee1\u610f\u3002\u4e0a\u6709\u8001\u4e0b\u6709\u5c0f, \u8d4f\u4e2a\u597d\u8bc4\u597d\u4e0d\u597d\uff1f\u3010\u8bf7\u5728\u8bc4\u4ef7\u5feb\u9012\u5458\u5904\u5e2e\u5fd9\u70b9\u4eae\u4e94\u9897\u661f\u661f\u54e6~\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-05; country=; internationalPieces=; signMan=; operateUserPhone=13381883326; scanDate=2019-03-05 08:47:15; scanSite=; sendPiecesNum=1; operateUser=\u5415\u7ecf\u5168; isSendNoCome=False; scanType=\u6d3e\u4ef6; stateDescription=\u3010\u4e0a\u6d77\u5e02\u3011  \u3010\u95f8\u5317\u5929\u76ee\u897f\u8def\u3011 \u7684\u5415\u7ecf\u5168\uff0813381883326\uff09 \u6b63\u5728\u7b2c1\u6b21\u6d3e\u4ef6, \u8bf7\u4fdd\u6301\u7535\u8bdd\u7545\u901a,\u5e76\u8010\u5fc3\u7b49\u5f85\uff0895720\u4e3a\u4e2d\u901a\u5feb\u9012\u5458\u5916\u547c\u4e13\u5c5e\u53f7\u7801\uff0c\u8bf7\u653e\u5fc3\u63a5\u542c\uff09; upOrDownSiteInfo=; problemItemDescription=}\"\r\n      ],\r\n      [\r\n        \"@{date=2019-03-04; country=; internationalPieces=; signMan=; operateUserPhone=15346929808; scanDate=2019-03-04 23:22:50; scanSite=; sendPiecesNum=0; operateUser=\u674e\u653f; isSendNoCome=False; scanType=\u5230\u4ef6; stateDescription=\u3010\u4e0a\u6d77\u5e02\u3011  \u5feb\u4ef6\u5df2\u7ecf\u5230\u8fbe \u3010\u95f8\u5317\u5929\u76ee\u897f\u8def\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-04; country=; internationalPieces=; signMan=; operateUserPhone=; scanDate=2019-03-04 23:22:45; scanSite=; sendPiecesNum=0; operateUser=\u56db\u53f7\u533a\u4e8c\u7ec4\u3001\u674e\u6cd5\u6d77; isSendNoCome=False; scanType=\u53d1\u4ef6; stateDescription=\u3010\u4e0a\u6d77\u5e02 \u3011  \u5feb\u4ef6\u79bb\u5f00 \u3010\u4e0a\u6d77\u3011 \u5df2\u53d1\u5f80 \u3010\u95f8\u5317\u5929\u76ee\u897f\u8def\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-04; country=; internationalPieces=; signMan=; operateUserPhone=; scanDate=2019-03-04 22:09:22; scanSite=; sendPiecesNum=0; operateUser=null; isSendNoCome=False; scanType=\u5230\u4ef6; stateDescription=\u3010\u4e0a\u6d77\u5e02\u3011  \u5feb\u4ef6\u5df2\u7ecf\u5230 \u8fbe \u3010\u4e0a\u6d77\u3011; upOrDownSiteInfo=; problemItemDescription=}\"\r\n      ],\r\n      [\r\n        \"@{date=2019-03-03; country=; internationalPieces=; signMan=; operateUserPhone=18942026012; scanDate=2019-03-03 21:17:59; scanSite=; sendPiecesNum=0; operateUser=\u5321\u51ac\u4e91; isSendNoCome=False; scanType=\u53d1\u4ef6; stateDescription=\u3010\u8861\u9633\u5e02\u3011  \u5feb\u4ef6\u79bb\u5f00 \u3010\u8861\u9633\u4e2d\u8f6c\u3011 \u5df2\u53d1\u5f80 \u3010\u4e0a\u6d77\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-03; country=; internationalPieces=; signMan=; operateUserPhone=15673406159; scanDate=2019-03-03 21:16:34; scanSite=; sendPiecesNum=0; operateUser=\u9648\u6d77\u82f1; isSendNoCome=False; scanType=\u5230\u4ef6; stateDescription=\u3010\u8861\u9633\u5e02\u3011  \u5feb\u4ef6\u5df2\u7ecf\u5230\u8fbe \u3010\u8861\u9633\u4e2d\u8f6c\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-03; country=; internationalPieces=; signMan=; operateUserPhone=15387470871; scanDate=2019-03-03 20:32:39; scanSite=; sendPiecesNum=0; operateUser=\u738b\u82b3\u6b66; isSendNoCome=False; scanType=\u53d1\u4ef6; stateDescription=\u3010\u957f\u6c99\u5e02\u3011  \u5feb\u4ef6\u79bb\u5f00 \u3010\u957f\u6c99\u5e02\u573a\u90e8\u3011 \u5df2\u53d1\u5f80 \u3010\u8861\u9633\u4e2d\u8f6c\u3011; upOrDownSiteInfo=; problemItemDescription=}\",\r\n        \"@{date=2019-03-03; country=; internationalPieces=; signMan=; operateUserPhone=17382112366; scanDate=2019-03-03 20:05:14; scanSite=; sendPiecesNum=0; operateUser=\u5a01\u822a\u9879\u76ee2; isSendNoCome=False; scanType=\u6536\u4ef6; stateDescription=\u3010\u957f\u6c99 \u5e02\u3011  \u3010\u957f\u6c99\u5e02\u573a\u90e8\u3011\uff080731-89529660\uff09 \u7684 \u5a01\u822a\u9879\u76ee2\uff0817382112366\uff09 \u5df2\u63fd\u6536; upOrDownSiteInfo=; problemItemDescription=}\"\r\n      ]\r\n    ],\r\n    \"billPrescription\": \"1\u592917\u5c0f\u65f6\",\r\n    \"billCode\": \"75132077503374\"\r\n  },\r\n  \"message\": \"\u5feb\u9012\u4fe1\u606f\u67e5\u8be2\u6210\u529f\",\r\n  \"status\": true,\r\n  \"statusCode\": null\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Do you know what the received structure of the JSON here is?\r\n\r\nIt looks like `logisticsRecord` is an array of arrays.\r\n\r\nThe JSON converter command at the depth threshold calls `LanguagePrimitives.Convert(object, typeof(string)`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a4e397697c3dbed414466398c4c695df712a5c7a/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/JsonObject.cs#L553-L568\r\n\r\nWhen called on an array, this works like `string.Join(\" \", arr.Select(e => e.ToString()))`.\r\n\r\nAt depth 1 you can see that gives you `System.Object[] System.Object[] System.Object[]`. At depth 2 you now get an array of each PSObject stringified. You'll notice:\r\n\r\n```\r\n> $repsonse = ./postman.ps1\r\n> $response.result.logisticsRecord[0][0].ToString().Length\r\n0\r\n```\r\n\r\nThe psobjects you get back give you the empty string when they are converted to strings, so that explains that result.\r\n\r\nUltimately though, given that your object has a finite (and small) depth, you probably won't get much use out of anything that doesn't cover the full depth of the object. Depth mostly exists to guard against recursion and not fail badly when it maxes out.",
      "created_at": "2019-07-16T06:18:03Z",
      "updated_at": "2019-07-16T06:18:03Z"
    },
    {
      "author": "chucklu",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt  I have done some test according your response,\r\nlogisticsRecord[0][0] has contents in it, execute the following command at the end of above Powershell code\r\n```powershell\r\n$response.result.logisticsRecord[0][0]\r\n```\r\nResult\r\n```None\r\ndate                   : 2019-03-05\r\ncountry                :\r\ninternationalPieces    : @{optReasonEn=Delivered.; isExport=; siteName=; optReason=; dispCount=1; dispNoCome=False}\r\nsignMan                : \u540c\u4e8b/\u540c\u5b66\r\noperateUserPhone       : 13381883326\r\nscanDate               : 2019-03-05 13:15:34\r\nscanSite               : @{isCenter=False; code=02180; province=\u4e0a\u6d77; city=\u4e0a\u6d77\u5e02; phone=021-56420176\u3001021-56420171;\r\n                         name=\u95f8\u5317\u5929\u76ee\u897f\u8def; prov=\u4e0a\u6d77}\r\nsendPiecesNum          : 0\r\noperateUser            : \u5415\u7ecf\u5168\r\nisSendNoCome           : False\r\nscanType               : \u7b7e\u6536\r\nstateDescription       : \u3010\u4e0a\u6d77\u5e02\u3011  \u5feb\u4ef6\u5df2\u5728 \u3010\u95f8\u5317\u5929\u76ee\u897f\u8def\u3011 \u7b7e\u6536, \u7b7e\u6536\u4eba: \u540c\u4e8b/\u540c\u5b66, \u5982\u6709\u7591\u95ee\u8bf7\u7535\u8054:13381883326 / 021-56420176, \u60a8\u7684\u5feb\u9012\u5df2\u7ecf\u59a5\u6295\u3002\u98ce\u91cc\u6765\u96e8\u91cc\u53bb,\r\n                         \u53ea\u4e3a\u5ba2\u5b98\u60a8\u6ee1\u610f\u3002\u4e0a\u6709\u8001\u4e0b\u6709\u5c0f, \u8d4f\u4e2a\u597d\u8bc4\u597d\u4e0d\u597d\uff1f\u3010\u8bf7\u5728\u8bc4\u4ef7\u5feb\u9012\u5458\u5904\u5e2e\u5fd9\u70b9\u4eae\u4e94\u9897\u661f\u661f\u54e6~\u3011\r\nupOrDownSiteInfo       :\r\nproblemItemDescription :\r\n```\r\n However, when execute \r\n```Powershell\r\n$response.result.logisticsRecord[0][0].ToString().Length\r\n```\r\nThe length is zero, it means `logisticsRecord[0][0].ToString()` is empty, have no idea about this.\r\n",
      "created_at": "2019-07-16T06:34:00Z",
      "updated_at": "2019-07-16T06:45:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#8393 for cross reference.",
      "created_at": "2019-11-26T10:36:24Z",
      "updated_at": "2019-11-26T10:36:24Z"
    }
  ],
  "created_at": "2019-07-16T03:18:13Z",
  "number": 10168,
  "state": "open",
  "title": "ConvertTo-Json parse object array as empty string instead of System.Object[]",
  "updated_at": "2019-11-26T10:36:24Z"
}