{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7438",
  "author": "powercode",
  "body": "## PR Summary\r\n\r\nThis PR adds the  `TryCompare` equivalent of `Compare`, just as we have a `TryConvert` alternative to `Convert`.\r\nThis enables faster comparison in the cases where the convertions throws exception.\r\n\r\nAs an example:\r\n\r\n```powershell\r\n 1..10000 | foreach{$_; [timespan]::FromSeconds($_)}  | sort\r\n```\r\ntakes `3 800 ms` before and `280 ms` after.\r\n\r\n```powershell\r\n$b = 1..1000000 | %{100; [timespan]::FromSeconds(100)}  | group\r\n```\r\ntakes `20 s` before and `15 s` after.\r\n\r\n\r\nIt is implemented equivalently to `LanguagePrimitives.Compare`, but returning false where `Compare` would have thrown an exception.\r\n\r\nThis is adding a new public API to `LanguagePrimitives`, so it will probably need a committee approval.\r\n\r\nThe new APIs are:\r\n\r\n```CSharp\r\nclass LanguagePrimitives {\r\n  public static bool TryCompare(object first, object second, out int result);\r\n  public static bool TryCompare(object first, object second, bool ignoreCase, out int result);\r\n  /// <summary>\r\n  /// Tries to compare first and second, converting second to the type of the first, if necessary.\r\n  /// If a conversion is needed but fails, false is return.\r\n  /// </summary>\r\n  /// <param name=\"first\">First comparison value.</param>\r\n  /// <param name=\"second\">Second comparison value.</param>\r\n  /// <param name=\"ignoreCase\">Used if both values are strings.</param>\r\n  /// <param name=\"formatProvider\">Used in type conversions and if both values are strings.</param>\r\n  /// <param name=\"result\">Less than zero if first is smaller than second, more than  zero if it is greater or zero if they are the same.</param>\r\n  /// <returns>True if the comparison was successful, false otherwise.</returns>\r\n  /// <exception cref=\"ArgumentException\">The parameter <paramref name=\"formatProvider\"/> is not a <see cref=\"CultureInfo\"/>.</exception>\r\n  public static bool TryCompare(\r\n      object first, \r\n      object second, \r\n      bool ignoreCase, \r\n      IFormatProvider formatProvider,\r\n      out int result);\r\n}\r\n```\r\n\r\nThe new APIs are used by `ObjectCommandPropertyValue` (used by sort-object and group-object) and `FormatGroupManager`.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-10T17:20:28Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The remaining CodeFactor issues are intentionally left that way to match the style of similar code in the same file.",
      "created_at": "2018-08-03T01:31:47Z",
      "updated_at": "2018-08-03T01:31:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This PR adds the Compare equivalent of TryConvert.\r\n\r\nSeem typo in the PR description.",
      "created_at": "2018-08-05T11:45:51Z",
      "updated_at": "2018-08-05T11:45:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and is fine with the api additions.  Thanks.",
      "created_at": "2018-08-08T22:06:26Z",
      "updated_at": "2018-08-08T22:06:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Whoops, I just saw that this has already been merged.  None of my comments are blocking.",
      "created_at": "2018-08-10T18:22:41Z",
      "updated_at": "2018-08-10T18:22:41Z"
    }
  ],
  "created_at": "2018-08-03T00:27:29Z",
  "number": 7438,
  "state": "closed",
  "title": "Adding LanguagePrimitives.TryCompare to provide faster comparisons",
  "updated_at": "2018-08-10T18:52:16Z"
}