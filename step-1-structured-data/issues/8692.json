{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8692",
  "author": "kilasuit",
  "body": "This request is for discussing amendments to the current output display of the Get-Command Syntax parameter by either/or/both\r\n\r\n- [ ] Making the Default output easier to read, perhaps making use of differentiating colours the output of `Mandatory` / `Non-Mandatory` Parameters\r\n- [ ] Adding a new Parameter that implements a `PrettySyntax` Parameter\r\n\r\n\r\nThis is based off of a tweet as per below by @IISResetMe in which the Output Syntax was much easier to read by making use of regex to amend the output of the current implementation which aligned with the PowerShell Documentation on docs.microsoft.com in which @SteveL-MSFT responded that a discussion should take place on formatting ideas\r\n\r\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Someone complained output from gcm -syntax is cluttered - there&#39;s a regex for that:<br>(gcm command -syntax) -replace &#39;\\]? \\[*(?=-|&lt;C)&#39;,&quot;`r`n &quot; <a href=\"https://t.co/p9jU3vTMAc\">pic.twitter.com/p9jU3vTMAc</a></p>&mdash; Mathias Jessen (@IISResetMe) <a href=\"https://twitter.com/IISResetMe/status/864509448110428161?ref_src=twsrc%5Etfw\">May 16, 2017</a></blockquote>\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Personally, I'd like to consider having platyPS updated so that the default view of the parameters is similar to the use of the regex above (no need for `-PrettySyntax`).  It was also [noted that PSCX](https://twitter.com/Lee_Holmes/status/864597753241796608) has a command to show parameters in a table that may be something we'd want as `gcm -syntax -astable`",
      "created_at": "2019-01-18T23:06:29Z",
      "updated_at": "2019-01-18T23:06:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That view is nice, but I think it'd be worthwhile to revisit the syntax that distinguishes mandatory and non-matching parameters.\r\n\r\nI also think that parameters that are both optional and part of all sets / have no explicitly declared set should be displayed apart from the main syntax diagrams to minimise confusion. So you'd have parameter set A, then parameter set B, then list any optional 'use-with-any-set' parameters below the main syntax diagrams.\r\n\r\nI agree the current syntax diagrams are too unclear and cluttered to be easily read. However, splitting them out as exemplified by the regex result is too space-consuming for commands with more than one or two parameter sets.\r\n\r\nPerhaps we could strike a balance by using a variant of format-wide to display the parameters in columns, maybe mandatory Params show at the far left, with optional parameters shown to the right of them in a consistently-indented format.",
      "created_at": "2019-01-18T23:24:04Z",
      "updated_at": "2019-01-18T23:26:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The webcmdlets are a good example to use to work out a generalized format that improves readability.  @vexx32 can you draft an example of what you think it should look like?",
      "created_at": "2019-01-22T22:56:09Z",
      "updated_at": "2019-01-22T22:56:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Pulling from the web cmdlets and from `New-WordCloud` (because _wow_ did I go overboard on parameters on that one), I think this is a good _start_:\r\n\r\n### Invoke-WebRequest\r\n```\r\nInvoke-WebRequest [-Uri] <uri> [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Method <WebRequestMethod>]\r\n\r\nInvoke-WebRequest [-Uri] <uri> -NoProxy [-Method <WebRequestMethod>]\r\n\r\nInvoke-WebRequest [-Uri] <uri> -CustomMethod <string> [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] \r\n\r\nInvoke-WebRequest [-Uri] <uri> -CustomMethod <string> -NoProxy \r\n\r\n[-UseBasicParsing]                        [-WebSession <WebRequestSession>]                     [-SessionVariable <string>]\r\n[-AllowUnencryptedAuthentication]         [-Authentication <WebAuthenticationType>]             [-Credential <pscredential>]\r\n[-UseDefaultCredentials]                  [-CertificateThumbprint <string>]                     [-Certificate <X509Certificate>]\r\n[-SkipCertificateCheck]                   [-SslProtocol <WebSslProtocol>]                       [-Token <securestring>]\r\n[-UserAgent <string>]                     [-DisableKeepAlive]                                   [-TimeoutSec <int>]\r\n[-Headers <IDictionary>]                  [-MaximumRedirection <int>]                           [-MaximumRetryCount <int>]\r\n[-RetryIntervalSec <int>]                 [-Body <Object>]                                      [-Form <IDictionary>]\r\n[-ContentType <string>]                   [-TransferEncoding <string>]                          [-InFile <string>]\r\n[-OutFile <string>]                       [-PassThru]                                           [-Resume]\r\n[-PreserveAuthorizationOnRedirect]        [-SkipHeaderValidation]                               [<CommonParameters>]\r\n```\r\n\r\n### PSWordCloud\\New-WordCloud\r\n```\r\nNew-WordCloud [-InputObject] <Object[]> [-Path] <string[]>  [-ImageSize <Size>] [-BackgroundColor <Color>]\r\n\r\nNew-WordCloud [-InputObject] <Object[]> [-Path] <string[]> -Monochrome  [-ImageSize <Size>] [-BackgroundColor <Color>]\r\n\r\nNew-WordCloud [-InputObject] <Object[]> [-Path] <string[]> -BackgroundImage <FileInfo> \r\n\r\nNew-WordCloud [-InputObject] <Object[]> [-Path] <string[]> -Monochrome -BackgroundImage <FileInfo> \r\n\r\n[-ColorSet <Color[]>]              [-MaxColors <int>]                 [-FocusWord <string>]\r\n[-ExcludeWord <string[]>]          [-FontFamily <FontFamily>]         [-FontStyle <FontStyle>]\r\n[-StrokeColor <Color>]             [-StrokeWidth <double>]            [-DistanceStep <Object>]\r\n[-RadialGranularity <Object>]      [-OutputFormat <string>]           [-MaxUniqueWords <int>]\r\n[-RandomSeed <int>]                [-Padding <double>]                [-WordScale <double>]\r\n[-AllowOverflow]                   [-DisableWordRotation]             [-BoxCollisions]\r\n[-AllowStopWords]                  [-WhatIf]                          [-Confirm] \r\n[<CommonParameters>]\r\n```\r\n\r\nI also think that making an effort to bring clarity through _color_ is preferable to the excessive brackets that tend to dot these diagrams... but this should be fairly simple to hammer out in code for a first iteration:\r\n\r\n1. Just grab each parameter set\r\n2. Pull out a) mandatory parameters and b) parameters specifically declared for that set, and draw them similar to current syntax diagrams to show actual command usage.\r\n3. Take all the parameters that are in \"all sets\" by virtue of not declaring a set they belong to, and give that to `Format-Wide -Columns 3` essentially, displayed below all the sets. Maybe adjust number of columns if the console width is super narrow.\r\n\r\nAdditionally, I'd ideally love to see the syntax diagrams illustrate any simple _pipeline_ usages (from `ValueFromPipeline` parameters) of the command as well. For New-WordCloud, this would possibly look a bit like this:\r\n\r\n```\r\n<Object[]> | New-WordCloud [-Path] <string[]>  [-ImageSize <Size>] [-BackgroundColor <Color>]\r\n\r\n<Object[]> | New-WordCloud [-Path] <string[]> -Monochrome  [-ImageSize <Size>] [-BackgroundColor <Color>]\r\n\r\n<Object[]> | New-WordCloud [-Path] <string[]> -BackgroundImage <FileInfo> \r\n\r\n<Object[]> | New-WordCloud [-Path] <string[]> -Monochrome -BackgroundImage \r\n```\r\n\r\nI'm not really sure of the best way to do it with commands that may accept pipeline by property name or by value, perhaps mark them with an asterisk or a cross and note that they can be used by property name.",
      "created_at": "2019-01-23T02:28:51Z",
      "updated_at": "2019-01-23T15:47:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @mklement0 on his opinion\r\n\r\nAgree we can defer the color separately.   @vexx32 your proposal looks ok to me.",
      "created_at": "2019-02-02T00:54:19Z",
      "updated_at": "2019-02-02T00:54:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I definitely like @vexx32's suggestions, including \"bracket relief\" through coloring; these issues are related:\r\n\r\n#6856 (show parameter-set names)\r\n#4135 (indicate pipeline-binding parameters)\r\n#4715 (indicate parameters with wildcard support)\r\n#4626 (indicate `ValueFromRemainingArguments` parameters)\r\n\r\n\r\n",
      "created_at": "2019-02-26T18:08:15Z",
      "updated_at": "2019-02-26T18:18:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@markekraus I think we spoke briefly on Discord about this issue a couple weeks ago, from memory. Did you have any suggestions for these, since the web cmdlets are your area of expertise? Is there a more effective way of conveying the parameter sets and optional parameters, do you think?\r\n\r\n@SteveL-MSFT Looking at @mklement0's links there, I definitely think we should also indicate those parameters in some fashion. Whether that's a secondary concern and should be considered separately I'm not sure.\r\n\r\n* Parameter set names could simply be positioned directly above each set.\r\n* Pipeline-binding parameters... not really sure about the suggestions, but those in the linked issue are pretty clear. I don't think the symbol suggested for by-property conveys the meaning intended very well, though.\r\n* Wildcard support is a bit of a funny one. Not sure if I prefer showing it in the parameter name `[-Path*]` or in the parameter type declaration `[-Path] <string[]*>` although I think I prefer the latter?\r\n* Remaining args is a good one to show as well, and the suggestions in that issue seem to be pretty solid.",
      "created_at": "2019-02-26T18:17:28Z",
      "updated_at": "2019-02-26T18:30:02Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "So with the output there's a good reason why I suggested colour being used for mandatory or non mandatory parameters and that is primarily due to the blending text effect, which by this I mean that by this is hard to read, due to the way brackets are used, it's just something that is humanly hard to parse, or is at least for me. \r\n\r\n![image](https://user-images.githubusercontent.com/6355225/53522883-457f6c80-3ad3-11e9-9866-12e6f21a1342.png)\r\n\r\nTo me the top line in just blends into 1 lump of text, which I need to reparse often 4/5 times before I really get which parameters are mandatory/non-mandatory/switches \r\n\r\nIf the second version could be implemented, even with an additional switch parameter that would make it easier on first glance how I am supposed to use this command properly, reducing potential errors caused by the inability to quickly parse the requirements of the parameter, with the above showing Red for Mandatory Parameters and their expected Type, Blue for non-mandatory and their type and a golden colour for switches (I'd suggest different colours in the implementation)",
      "created_at": "2019-02-27T21:10:27Z",
      "updated_at": "2019-02-27T21:13:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We could take pointers from the developments going on with Select-String's MatchInfo objects in #8963; emit an object that when run through the default formatter outputs a colored sequence of text, but still has a very plain .ToString() method that gets the raw text.\r\n\r\n@kilasuit even colouring won't save something as complicated as Invoke-WebRequest's syntax diagrams, which is why I think a reformat is a more effective first step. Colouring should definitely be sorted out as well, though, it will take the diagrams more readable overall.",
      "created_at": "2019-02-27T21:41:23Z",
      "updated_at": "2019-02-27T21:56:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT this would be something I'd like to look at for PS7. I know you guys are talking about working the help into a separate module / making it work in markdown / both(?) so would this fall under that bundle of work, or can you point me to where this is actually put together currently so I can implement it in the current system & you can copy it to the new system as that gets completed?",
      "created_at": "2019-06-02T00:59:29Z",
      "updated_at": "2019-06-02T00:59:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 taking some time to catch up on my GitHub notifications.  I don't believe this work is blocked behind the Helpsystem as separate module/Markdown completion work.  If you want to work on this as an Experimental Feature, that may be the best way to go here to get user feedback.",
      "created_at": "2019-07-05T22:52:48Z",
      "updated_at": "2019-07-05T22:52:48Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Before putting together an experimental feature, I recommend a more detailed analysis with examples of many cmdlets, showing their syntax before and after. We can only really figure out the right thing to do here by having a sample of data large enough to make that judgement, and the commands chosen for that sample should be among some of the more complicated commands (many parameter sets) so that we can see what they might look like.\r\n\r\nIn the past I looked at this from a different perspective, and periodically I spend time thinking about it more to flush out into a potential RFC. While I don't have those thoughts all put together, I can share what I had been exploring for syntax improvements:\r\n\r\n```none\r\nSYNTAX\r\n    Where-Object [-FilterScript] <scriptblock> [-InputObject <psobject>]\r\n    [<CommonParameters>]\r\n\r\n    Where-Object [-Property] <string> [-not] [-InputObject <psobject>]\r\n    [<CommonParameters>]\r\n\r\n    Where-Object [-Property] <string> <comparison_operator> [[-Value] <Object>]\r\n    [-InputObject <psobject>] [<CommonParameters>]\r\n\r\n\r\nSYNTAX\r\n    Get-ChildItem [<PathParameters>] [[-Filter] <string>] [-Include <string[]>] [-Exclude\r\n    <string[]>] [-Recurse] [-Depth <uint32>] [-Force] [-Name] [-UseTransaction]\r\n    [<ProviderParameters>] [<CommonParameters>]\r\n\r\n    [<PathParameters>]\r\n    Wildcard : [[-Path] <string[]>]\r\n    Specific : [-LiteralPath <string[]>]\r\n\r\n    [<ProviderParameters>]\r\n    FileSystem  : [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File]\r\n                  [-Hidden] [-ReadOnly] [-System]\r\n    Certificate : [-CodeSigningCert] [-DocumentEncryptionCert] [-SSLServerAuthentication]\r\n                  [-DnsName <DnsNameRepresentation>] [-Eku <string[]>] [-ExpiringInDays\r\n                  <int>]\r\n\r\n\r\nSYNTAX\r\n    Invoke-Command <InvokedItemParameters> [-ArgumentList <Object[]>] [-InputObject\r\n    <PSObject>] [<InvokeTargetParameters>] [<CommonParameters>]\r\n\r\n    <InvokedItemParameters>\r\n    ScriptBlock : [-ScriptBlock] <ScriptBlock>\r\n    File        : [-FilePath] <String>\r\n\r\n    [<InvokeTargetParameters>]\r\n    LocalComputer   : [-NoNewScope]\r\n    PsSession       : [-Session] <PSSession[]> [<RemotingParameters>]\r\n    RemoteComputer  : [-ComputerName] <String[]> [-Port <Int32>] [-UseSsl] [-Credential\r\n                      <PSCredential>] [-Authentication <AuthenticationMechanism>]\r\n                      [-SessionOption <PSSessionOption>] [-EnableNetworkAccess]\r\n                      [-ConfigurationName <String>] [-ApplicationName <String>]\r\n                      [-CertificateThumbprint <String>] [-InDisconnectedSession]\r\n                      [-SessionName <String>] [<RemotingParameters>]\r\n    Uri             : [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Credential\r\n                      <PSCredential>] [-Authentication <AuthenticationMechanism>]\r\n                      [-SessionOption <PSSessionOption>] [-EnableNetworkAccess]\r\n                      [-ConfigurationName <String>] [-CertificateThumbprint <String>]\r\n                      [-InDisconnectedSession] [-SessionName <String>] [<RemotingParameters>]\r\n    VmById          : [-VmId] <Guid[]> [-Credential] <PSCredential> [<RemotingParameters>]\r\n    VmByName        : -VmName <String[]> [-Credential] <PSCredential> [<RemotingParameters>]\r\n    ContainerById   : -ContainerId <String[]> [-RunAsAdministrator] [<RemotingParameters>]\r\n    ContainerByName : -ContainerName <String[]> [-RunAsAdministrator] [<RemotingParameters>]\r\n\r\n    [<RemotingParameters>]\r\n    [-ThrottleLimit <Int32>] [-AsJob] [-JobName <String>] [-HideComputerName]\r\n```\r\n\r\nGenerally speaking, I was looking for ways to group parameters into subsets that are repeatedly used across parameter sets (or across subsets -- recursive grouping can happen). In the output above, my thinking was that you'd have named groups (name followed by a colon) within a subset, where you need to choose one named group and go with that (e.g. `ContainerByName` in the `Invoke-Command` syntax), or unnamed groups (e.g. `RemotingParameters`), which are just groups of parameters that are used in multiple parameter sets or parameter groups.\r\n\r\nThe hard part is figuring out how to get there.",
      "created_at": "2019-09-16T18:19:55Z",
      "updated_at": "2019-09-16T18:53:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think you're in the right sort of vein there, Kirk, but I think we can do better.\r\n\r\nEven grouping parameters like that ultimately still leaves us with a jumbled mess that is difficult to visually parse. These displays should be formatted such that it's as easy as possible to look through and find whatever one might be looking for. Categories like that _help_, but are still liable to get unwieldy and hard to examine, not least because now we're distancing parameters from the command call itself, and we've got potentially several categories of parameters in combination with several different parameter sets.\r\n\r\nThe overall visual display also needs to be improved, I think. \ud83d\ude42 ",
      "created_at": "2019-09-16T18:42:54Z",
      "updated_at": "2019-09-16T18:42:54Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "It wasn't meant to represent the final goal -- it's just something I had experimented with when looking at help/syntax layout. The display could be better, I agree.\r\n\r\nThe point I was trying to convey is a logical breakdown of command parameters. Frankly, parameter sets often just confuse things. One parameter set may contain a ton of parameters, which have logical grouping to them, but none of that logic is conveyed in the display of the syntax. Or you may have commands with multiple parameter sets where much of the parameters are shared across many parameter sets and there are few parameters unique to a parameter set, and viewers can get lost looking at the duplication.\r\n\r\nSince PowerShell version 1, command syntax has used `[<CommonParameters>]` to identify a set of parameters that apply in multiple places (all parameter sets of all commands in that case), and I think that concept is worth trying to build on, but instead of forcing users to read about those parameters in another file, show the groups of parameters inline. That is where the syntax above came from.\r\n\r\nAlso, if you break down a command into its core functionality, the way we think about a command does not line up with the way a command is expressed. Take something as simple as `Get-ChildItem`, for example. We might describe it something like this: \"get items from a path, using general or provider-specific options as needed.\" Take that description and present syntactically, and you might end up with this slightly modified version of what I just shared:\r\n\r\n```none\r\nSYNTAX\r\n    Get-ChildItem [<PathParameters>] [<OptionParameters>] [<ProviderSpecificParameters>]\r\n    [<CommonParameters>]\r\n\r\n    [<PathParameters>]\r\n    Wildcard : [[-Path] <string[]>]\r\n    Specific : [-LiteralPath <string[]>]\r\n\r\n    [<OptionParameters>]\r\n    [[-Filter] <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth\r\n    <uint32>] [-Force] [-Name] [-UseTransaction]\r\n\r\n    [<ProviderSpecificParameters>]\r\n    FileSystem  : [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File]\r\n                  [-Hidden] [-ReadOnly] [-System]\r\n    Certificate : [-CodeSigningCert] [-DocumentEncryptionCert] [-SSLServerAuthentication]\r\n                  [-DnsName <DnsNameRepresentation>] [-Eku <string[]>] [-ExpiringInDays\r\n                  <int>]\r\n```\r\n\r\nThat tries to identify what is optional (square brackets denote optional) while following a logical explanation of the command: choose wildcard or specific path(s), identify your general search, filter, etc. options, and add any provider-specific options that are appropriate for your invocation. I don't love the display of headings in this case, but I was trying to follow what has been there since v1 (`[<CommonParameters>]`).\r\n\r\nFor commands like `Invoke-Command`, that have an obscene number of parameter sets, the breakdown makes a whole lot more sense than the overwhelming number of parameter sets combined with the overwhelming number of parameters. That command is a really good example as well, because when you break it down you will discover that some parameters are not included on parameter sets where they should be, which is understandable given the mess of parameter sets that it has.\r\n\r\nHere's another slight modification on what I shared above, playing out the thought some more:\r\n\r\n```none\r\nSYNTAX\r\n    Invoke-Command <WhatToInvoke> [<InvocationOptions>] [<WhereToInvokeIt>]\r\n    [<CommonParameters>]\r\n\r\n    <WhatToInvoke>\r\n    ScriptBlock : [-ScriptBlock] <ScriptBlock>\r\n    File        : [-FilePath] <String>\r\n\r\n    [<InvocationOptions>]\r\n    [-ArgumentList <Object[]>] [-InputObject <PSObject>]\r\n\r\n    [<WhereToInvokeIt>]\r\n    LocalComputer   : [-NoNewScope]\r\n    PsSession       : [-Session] <PSSession[]> [<RemotingParameters>]\r\n    RemoteComputer  : [-ComputerName] <String[]> [-Port <Int32>] [-UseSsl] [-Credential\r\n                      <PSCredential>] [-Authentication <AuthenticationMechanism>]\r\n                      [-SessionOption <PSSessionOption>] [-EnableNetworkAccess]\r\n                      [-ConfigurationName <String>] [-ApplicationName <String>]\r\n                      [-CertificateThumbprint <String>] [-InDisconnectedSession]\r\n                      [-SessionName <String>] [<RemotingParameters>]\r\n    Uri             : [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Credential\r\n                      <PSCredential>] [-Authentication <AuthenticationMechanism>]\r\n                      [-SessionOption <PSSessionOption>] [-EnableNetworkAccess]\r\n                      [-ConfigurationName <String>] [-CertificateThumbprint <String>]\r\n                      [-InDisconnectedSession] [-SessionName <String>] [<RemotingParameters>]\r\n    VmById          : [-VmId] <Guid[]> [-Credential] <PSCredential> [<RemotingParameters>]\r\n    VmByName        : -VmName <String[]> [-Credential] <PSCredential> [<RemotingParameters>]\r\n    ContainerById   : -ContainerId <String[]> [-RunAsAdministrator] [<RemotingParameters>]\r\n    ContainerByName : -ContainerName <String[]> [-RunAsAdministrator] [<RemotingParameters>]\r\n\r\n    [<RemotingParameters>]\r\n    [-ThrottleLimit <Int32>] [-AsJob] [-JobName <String>] [-HideComputerName]\r\n```\r\n\r\nThat would be even easier to digest if we could just have `-VM` instead of `-VmId` and `-VmName` (using a transformation attribute), and `-Container` instead of `-ContainerId` and `-ContainerName`, again using a transformation attribute, but anyhow, I think this shows how I was thinking.\r\n\r\nPresentation details for the groupings can always be improved, of course.",
      "created_at": "2019-09-16T20:47:56Z",
      "updated_at": "2019-09-16T20:47:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT would this be something you guys would accept a PR for to get in for v7? I think this would help the overall usability of the Get-Command and Get-Help cmdlets if we can get something like this in.\r\n\r\nIf it is something you guys would consider for v7... can one of you guys point me to the relevant sections of code that handle this so I can have a poke at it? \ud83d\ude01 ",
      "created_at": "2019-09-23T17:16:55Z",
      "updated_at": "2019-09-23T17:16:55Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 I still think we need more examples of specific cmdlets to demonstrate what the end result would look like first. The main concern here is cmdlets with multiple parameter sets that use some shared parameters, and other parameter sets that use other shared parameters. I also would like to see the solution use something similar to `[<CommonParameters>]` for parameters that are truly common among one or more parameter sets and moved elsewhere. So far there does not seem to be enough examples showing what this would look like to truly iron out the improvements and make sure that it works for more complicated scenarios rather than potentially making a mess of them.",
      "created_at": "2019-09-23T19:17:51Z",
      "updated_at": "2019-09-23T19:17:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32, we still have time for PS7.  As @KirkMunro noted, it would be great to have a complete examples in this issue with the cmdlets with input and output.",
      "created_at": "2019-09-23T20:21:36Z",
      "updated_at": "2019-09-23T20:21:36Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "a long, long, long time ago I built something that helped me get at the info _I_ wanted. It might not be for everyone, but it's fairly simple to do.\r\n\r\n```powershell\r\nPS> getcmd2 get-command\r\n\r\nImplementingType : Microsoft.PowerShell.Commands.GetCommandCommand\r\nDll              : /usr/local/microsoft/powershell/7/System.Management.Automation.dll\r\nCommandName      : get-command\r\nHelpFile         : System.Management.Automation.dll-Help.xml\r\n \r\nParameter Set: CmdletSet (Default)\r\nName                 Type                  Mandatory   Pos PipeValue PipeName Alias\r\n----                 ----                  ---------   --- --------- -------- -----\r\nAll                  SwitchParameter           False named     False     True \r\nArgumentList         Object[]                  False     1     False    False Args\r\nFullyQualifiedModule ModuleSpecification[]     False named     False     True \r\nListImported         SwitchParameter           False named     False     True \r\nModule               String[]                  False named     False     True PSSnapin\r\nNoun                 String[]                  False named     False     True \r\nParameterName        String[]                  False named     False    False \r\nParameterType        PSTypeName[]              False named     False    False \r\nShowCommandInfo      SwitchParameter           False named     False    False \r\nSyntax               SwitchParameter           False named     False     True \r\nTotalCount           Int32                     False named     False     True \r\nVerb                 String[]                  False named     False     True \r\n \r\nParameter Set: AllCommandSet\r\nName                     Type                  Mandatory   Pos PipeValue PipeName Alias\r\n----                     ----                  ---------   --- --------- -------- -----\r\nAll                      SwitchParameter           False named     False     True \r\nArgumentList             Object[]                  False     1     False    False Args\r\nCommandType              CommandTypes              False named     False     True Type\r\nFullyQualifiedModule     ModuleSpecification[]     False named     False     True \r\nListImported             SwitchParameter           False named     False     True \r\nModule                   String[]                  False named     False     True PSSnapin\r\nName                     String[]                  False     0      True     True \r\nParameterName            String[]                  False named     False    False \r\nParameterType            PSTypeName[]              False named     False    False \r\nShowCommandInfo          SwitchParameter           False named     False    False \r\nSyntax                   SwitchParameter           False named     False     True \r\nTotalCount               Int32                     False named     False     True \r\nUseAbbreviationExpansion SwitchParameter           False named     False     True \r\nUseFuzzyMatching         SwitchParameter           False named     False    False \r\n```",
      "created_at": "2020-07-30T23:42:04Z",
      "updated_at": "2020-07-30T23:42:04Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher is that something that could be added easily to `get-command` via another switch?\r\nBecause that would be incredibly useful as part of the default command and would help negate the need for adding colourisation initially (though for accessibility I still think colourisation makes a huge amount of sense too)",
      "created_at": "2020-08-06T20:51:02Z",
      "updated_at": "2020-08-06T20:51:02Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> a long, long, long time ago I built something that helped me get at the info _I_ wanted. It might not be for everyone, but it's fairly simple to do.\r\n> \r\n> ```powershell\r\n> PS> getcmd2 get-command\r\n\r\ncan you publish getcmd2??\r\n\r\n",
      "created_at": "2020-08-07T08:52:57Z",
      "updated_at": "2020-08-07T08:52:57Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I took a swing at this because I really liked the output that this showed, and wanted to add it to my profile. The invocation is a little different, and it also shows the syntax string for each parameter set before the parameter table. You would invoke it like this:\r\n\r\n```powershell\r\nGet-Command Get-Module | Get-CommandDetail\r\n```\r\n\r\nHere's the `Get-CommandDetail` function:\r\n\r\n```powershell\r\nfunction Get-CommandDetail {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory, Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        $Name\r\n    )\r\n    process {\r\n        if ($_ -isnot [System.Management.Automation.CommandInfo]) {\r\n            Get-Command -Name $_ | Get-CommandDetail\r\n        } else {\r\n            $commandPropDetails = ($_ | Format-List @{Name='CommandName';Expression={$_.Name}},CommandType,ImplementingType,Dll,HelpFile | Out-String) -replace '^[\\r\\n]+|[\\r\\n]+$'\r\n\r\n            $sb = [System.Text.StringBuilder]::new()\r\n            $null = $sb.AppendLine($commandPropDetails)\r\n            $null = $sb.AppendLine()\r\n\r\n            foreach ($parameterSet in $_.ParameterSets) {\r\n                $parametersToShow = $parameterSet.Parameters | Where-Object Name -NotIn @('Verbose','Debug','ErrorAction','WarningAction','InformationAction','VerboseAction','DebugAction','ProgressAction','ErrorVariable','WarningVariable','InformationVariable','DebugVariable','VerboseVariable','ProgressVariable','OutVariable','OutBuffer','PipelineVariable','WhatIf','Confirm')\r\n                $parameterGroups = $parametersToShow.where({$_.Position -ge 0},'split')\r\n                $parameterGroups[0] = @($parameterGroups[0] | Sort-Object -Property Position)\r\n                $parametersToShow = $parameterGroups[0] + $parameterGroups[1]\r\n                $parameterDetails = ($parametersToShow `\r\n                    | Select-Object -Property @(\r\n                        'Name'\r\n                        @{Name = 'Type'; Expression = {$_.ParameterType.Name}}\r\n                        @{Name = 'Mandatory'; Expression = {$_.IsMandatory}}\r\n                        @{Name = 'Pos'; Expression = {if ($_.Position -eq [int]::MinValue) {'named'} else {$_.Position}}}\r\n                        @{Name = 'PipeValue'; Expression = {$_.ValueFromPipeline}}\r\n                        @{Name = 'PipeName'; Expression = {$_.ValueFromPipelineByPropertyName}}\r\n                        @{Name = 'Alias'; Expression = {$_.Aliases -join ','}}\r\n                    ) `\r\n                    | Format-Table -Property Name,Type,Mandatory,Pos,PipeValue,PipeName,Alias `\r\n                    | Out-String) -replace '^[\\r\\n]+|[\\r\\n]+$'\r\n\r\n                $null = $sb.AppendLine(\"Parameter Set: $($ParameterSet.Name)$(if ($_.DefaultParameterSet -eq $ParameterSet.Name) {' (Default)'})\")\r\n                $null = $sb.AppendLine()\r\n                $null = $sb.Append(\"Syntax: $($_.Name) \")\r\n                $null = $sb.AppendLine($parameterSet.ToString())\r\n                $null = $sb.AppendLine()\r\n                $null = $sb.AppendLine('Parameters:')\r\n                $null = $sb.AppendLine($parameterDetails)\r\n                $null = $sb.AppendLine()\r\n            }\r\n            $sb.ToString()\r\n        }\r\n    }\r\n}\r\n```",
      "created_at": "2020-08-27T15:44:40Z",
      "updated_at": "2020-08-27T15:45:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Those are... _nice_ (ish) for the level of detail, but it's nowhere near readable in a console without quite a lot of scrolling, so while I agree a command or maybe switch on Get-Command to accompany -Syntax to opt into that would be cool, I still think we need to vastly improve the readability of the actual command syntax diagrams as well.",
      "created_at": "2020-08-27T21:20:32Z",
      "updated_at": "2020-08-27T21:20:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Here's my initial attempt for now, just to sort of show the concept for the time being, it can be expanded upon fairly easily. (Switch parameters obviously shouldn't show a type next to them, for example.) This was done with a fairly average console, but would autosize for narrower/wider ones.\r\n\r\nFor especially narrow consoles, we could fallback to the existing cluttered diagrams.\r\n\r\n```\r\nPath (Default)\r\n--------------\r\nGet-Item (-Path) [String[]]\r\n\r\nLiteralPath\r\n-----------\r\nGet-Item -LiteralPath [String[]]\r\n\r\nOptional Parameters for All Sets:\r\n\r\n-Filter                [String]                              -Include               [String[]]\r\n-Exclude               [String[]]                            -Force                 [SwitchParameter]\r\n-Credential            [PSCredential]                        -Verbose               [SwitchParameter]\r\n-Debug                 [SwitchParameter]                     -ErrorAction           [ActionPreference]\r\n-WarningAction         [ActionPreference]                    -InformationAction     [ActionPreference]\r\n-ErrorVariable         [String]                              -WarningVariable       [String]\r\n-InformationVariable   [String]                              -OutVariable           [String]\r\n-OutBuffer             [Int32]                               -PipelineVariable      [String]\r\n\r\n```\r\n<details>\r\n<summary><strong>Code</strong></summary>\r\n\r\n```ps1\r\n$command = Get-Command $commandName\r\n$sb = [System.Text.StringBuilder]::new()\r\n\r\nforeach ($parameterSet in $command.ParameterSets) {\r\n    $sb.AppendLine() > $null\r\n    $title = if ($parameterSet.IsDefault) { \"{0} (Default)\" -f $parameterSet.Name } else { $parameterSet.Name }\r\n    $sb.AppendLine($title) > $null\r\n    $sb.AppendLine(\"-\" * $title.Length) > $null\r\n    $sb.AppendFormat(\"{0} \", $command.Name) > $null\r\n    $mandatory, $optional = $parameterSet.Parameters.Where({$_.IsMandatory}, 'Split')\r\n    $optional = $optional.Where{-not $command.Parameters[$_.Name].ParameterSets.ContainsKey('__AllParameterSets')}\r\n    foreach ($param in $mandatory) {\r\n        $format = if ($param.Position -eq [int]::MinValue) {\r\n            \"-{0} [{1}] \"\r\n        }\r\n        else {\r\n            \"(-{0}) [{1}] \"\r\n        }\r\n\r\n        $sb.AppendFormat($format, $param.Name, $param.ParameterType.Name)>$null\r\n    }\r\n\r\n    $sb.AppendLine() > $null\r\n\r\n    if ($optional.Count -gt 0) {\r\n        $sb.AppendLine() > $null\r\n        $sb.AppendLine(\"Optional:\") > $null\r\n        $maxNameWidth = ($optional.Name | Measure-Object -Property Length -Maximum).Maximum + 3\r\n        $optionalParamStrings = foreach ($param in $optional) {\r\n            $format = \"{0,-$maxNameWidth} [{1}]\"\r\n            if ($param.Position -ne [int]::MinValue) {\r\n                $format -f \"(-$($param.Name))\", $param.ParameterType.Name\r\n            }\r\n            else {\r\n                $format -f \"-$($param.Name)\", $param.ParameterType.Name\r\n            }\r\n        }\r\n\r\n        $optionalParams = $optionalParamStrings | Format-Wide -Force -Property {$_} -AutoSize | Out-String\r\n        $sb.Append($optionalParams.Trim()) > $null\r\n        $sb.AppendLine() > $null\r\n    }\r\n}\r\n\r\n$allSetsOptional = $command.Parameters.Values.Where{$_.ParameterSets.ContainsKey('__AllParameterSets')}\r\nif ($allSetsOptional.Count -gt 0) {\r\n    $sb.AppendLine() > $null\r\n    $sb.AppendLine(\"Optional Parameters for All Sets:\") > $null\r\n    $sb.AppendLine() > $null\r\n    $maxNameWidth = ($allSetsOptional.Name | Measure-Object -Property Length -Maximum).Maximum + 3\r\n    $optionalParamStrings = foreach ($param in $allSetsOptional) {\r\n        $format = \"{0,-$maxNameWidth} [{1}]\"\r\n        if ($command.Parameters[$param.Name].ParameterSets['__AllParameterSets'].Position -ne [int]::MinValue) {\r\n            $format -f \"(-$($param.Name))\", $param.ParameterType.Name\r\n        }\r\n        else {\r\n            $format -f \"-$($param.Name)\", $param.ParameterType.Name\r\n        }\r\n    }\r\n\r\n    $optionalParams = $optionalParamStrings | Format-Wide -Force -Property {$_} -AutoSize | Out-String\r\n    $sb.AppendLine($optionalParams.Trim()) > $null\r\n}\r\n\r\n$sb.ToString()\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>Bonus look for Invoke-WebRequest</strong></summary>\r\n\r\n```ps1\r\nStandardMethod (Default)\r\n------------------------\r\nInvoke-WebRequest (-Uri) [Uri]\r\n\r\nOptional:\r\n-Method                       [WebRequestMethod]             -Proxy                        [Uri]\r\n-ProxyCredential              [PSCredential]                 -ProxyUseDefaultCredentials   [SwitchParameter]\r\n\r\nStandardMethodNoProxy\r\n---------------------\r\nInvoke-WebRequest (-Uri) [Uri] -NoProxy [SwitchParameter]\r\n\r\nOptional:\r\n-Method   [WebRequestMethod]\r\n\r\nCustomMethodNoProxy\r\n-------------------\r\nInvoke-WebRequest (-Uri) [Uri] -CustomMethod [String] -NoProxy [SwitchParameter]\r\n\r\nCustomMethod\r\n------------\r\nInvoke-WebRequest (-Uri) [Uri] -CustomMethod [String]\r\n\r\nOptional:\r\n-Proxy                        [Uri]                          -ProxyCredential              [PSCredential]\r\n-ProxyUseDefaultCredentials   [SwitchParameter]\r\n\r\nOptional Parameters for All Sets:\r\n\r\n-UseBasicParsing                   [SwitchParameter]         (-Uri)                             [Uri]\r\n-WebSession                        [WebRequestSession]       -SessionVariable                   [String]\r\n-AllowUnencryptedAuthentication    [SwitchParameter]         -Authentication                    [WebAuthenticationType]\r\n-Credential                        [PSCredential]            -UseDefaultCredentials             [SwitchParameter]\r\n-CertificateThumbprint             [String]                  -Certificate                       [X509Certificate]\r\n-SkipCertificateCheck              [SwitchParameter]         -SslProtocol                       [WebSslProtocol]\r\n-Token                             [SecureString]            -UserAgent                         [String]\r\n-DisableKeepAlive                  [SwitchParameter]         -TimeoutSec                        [Int32]\r\n-Headers                           [IDictionary]             -MaximumRedirection                [Int32]\r\n-MaximumRetryCount                 [Int32]                   -RetryIntervalSec                  [Int32]\r\n-Body                              [Object]                  -Form                              [IDictionary]\r\n-ContentType                       [String]                  -TransferEncoding                  [String]\r\n-InFile                            [String]                  -OutFile                           [String]\r\n-PassThru                          [SwitchParameter]         -Resume                            [SwitchParameter]\r\n-SkipHttpErrorCheck                [SwitchParameter]         -PreserveAuthorizationOnRedirect   [SwitchParameter]\r\n-SkipHeaderValidation              [SwitchParameter]         -Verbose                           [SwitchParameter]\r\n-Debug                             [SwitchParameter]         -ErrorAction                       [ActionPreference]\r\n-WarningAction                     [ActionPreference]        -InformationAction                 [ActionPreference]\r\n-ErrorVariable                     [String]                  -WarningVariable                   [String]\r\n-InformationVariable               [String]                  -OutVariable                       [String]\r\n-OutBuffer                         [Int32]                   -PipelineVariable                  [String]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>... and New-WordCloud</strong></summary>\r\n\r\n```ps1\r\nColorBackground (Default)\r\n-------------------------\r\nNew-WordCloud -InputObject [PSObject] (-Path) [String]\r\n\r\nOptional:\r\n-ImageSize         [SKSizeI]   -BackgroundColor   [SKColor]\r\n\r\nColorBackground-FocusWord\r\n-------------------------\r\nNew-WordCloud -InputObject [PSObject] (-Path) [String] -FocusWord [String]\r\n\r\nOptional:\r\n-ImageSize         [SKSizeI]   -BackgroundColor   [SKColor]  -RotateFocusWord   [Single]\r\n\r\nFileBackground\r\n--------------\r\nNew-WordCloud -InputObject [PSObject] (-Path) [String] -BackgroundImage [String]\r\n\r\nFileBackground-FocusWord\r\n------------------------\r\nNew-WordCloud -InputObject [PSObject] (-Path) [String] -BackgroundImage [String] -FocusWord [String]\r\n\r\nOptional:\r\n-RotateFocusWord   [Single]\r\n\r\nColorBackground-WordTable\r\n-------------------------\r\nNew-WordCloud -WordSizes [IDictionary] (-Path) [String]\r\n\r\nOptional:\r\n-ImageSize         [SKSizeI]   -BackgroundColor   [SKColor]\r\n\r\nColorBackground-FocusWord-WordTable\r\n-----------------------------------\r\nNew-WordCloud -WordSizes [IDictionary] (-Path) [String] -FocusWord [String]\r\n\r\nOptional:\r\n-ImageSize         [SKSizeI]   -BackgroundColor   [SKColor]  -RotateFocusWord   [Single]\r\n\r\nFileBackground-WordTable\r\n------------------------\r\nNew-WordCloud -WordSizes [IDictionary] (-Path) [String] -BackgroundImage [String]\r\n\r\nFileBackground-FocusWord-WordTable\r\n----------------------------------\r\nNew-WordCloud -WordSizes [IDictionary] (-Path) [String] -BackgroundImage [String] -FocusWord [String]\r\n\r\nOptional:\r\n-RotateFocusWord   [Single]\r\n\r\nOptional Parameters for All Sets:\r\n\r\n-Typeface              [SKTypeface]                          -ColorSet              [SKColor[]]\r\n-StrokeWidth           [Single]                              -StrokeColor           [SKColor]\r\n-ExcludeWord           [String[]]                            -IncludeWord           [String[]]\r\n-WordScale             [Single]                              -AllowRotation         [WordOrientations]\r\n-Padding               [Single]                              -WordBubble            [WordBubbleShape]\r\n-DistanceStep          [Single]                              -RadialStep            [Single]\r\n-MaxRenderedWords      [Int32]                               -MaxColors             [Int32]\r\n-RandomSeed            [Int32]                               -Monochrome            [SwitchParameter]\r\n-AllowStopWords        [SwitchParameter]                     -AllowOverflow         [SwitchParameter]\r\n-PassThru              [SwitchParameter]                     -Verbose               [SwitchParameter]\r\n-Debug                 [SwitchParameter]                     -ErrorAction           [ActionPreference]\r\n-WarningAction         [ActionPreference]                    -InformationAction     [ActionPreference]\r\n-ErrorVariable         [String]                              -WarningVariable       [String]\r\n-InformationVariable   [String]                              -OutVariable           [String]\r\n-OutBuffer             [Int32]                               -PipelineVariable      [String]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>Get-Module has a nice bit of variety</strong></summary>\r\n\r\n```ps1\r\nLoaded (Default)\r\n----------------\r\nGet-Module\r\n\r\nOptional:\r\n(-Name)               [String[]]                             -FullyQualifiedName   [ModuleSpecification[]]\r\n-All                  [SwitchParameter]\r\n\r\nCimSession\r\n----------\r\nGet-Module -CimSession [CimSession]\r\n\r\nOptional:\r\n(-Name)               [String[]]                             -FullyQualifiedName   [ModuleSpecification[]]\r\n-ListAvailable        [SwitchParameter]                      -SkipEditionCheck     [SwitchParameter]\r\n-Refresh              [SwitchParameter]                      -CimResourceUri       [Uri]\r\n-CimNamespace         [String]\r\n\r\nAvailable\r\n---------\r\nGet-Module -ListAvailable [SwitchParameter]\r\n\r\nOptional:\r\n(-Name)               [String[]]                             -FullyQualifiedName   [ModuleSpecification[]]\r\n-All                  [SwitchParameter]                      -PSEdition            [String]\r\n-SkipEditionCheck     [SwitchParameter]                      -Refresh              [SwitchParameter]\r\n\r\nPsSession\r\n---------\r\nGet-Module -PSSession [PSSession]\r\n\r\nOptional:\r\n(-Name)               [String[]]                             -FullyQualifiedName   [ModuleSpecification[]]\r\n-ListAvailable        [SwitchParameter]                      -PSEdition            [String]\r\n-SkipEditionCheck     [SwitchParameter]                      -Refresh              [SwitchParameter]\r\n\r\nOptional Parameters for All Sets:\r\n\r\n-Verbose               [SwitchParameter]                     -Debug                 [SwitchParameter]\r\n-ErrorAction           [ActionPreference]                    -WarningAction         [ActionPreference]\r\n-InformationAction     [ActionPreference]                    -ErrorVariable         [String]\r\n-WarningVariable       [String]                              -InformationVariable   [String]\r\n-OutVariable           [String]                              -OutBuffer             [Int32]\r\n```\r\n\r\n</details>\r\n\r\nI reckon we can do a bit better by dropping the `[brackets]` for type names and just coloring them different (if the console supports it). Ideally the parameter names should also be colored to match what's in PSReadLine parameter colors if possible (same for command names).",
      "created_at": "2020-08-28T13:17:46Z",
      "updated_at": "2020-08-28T14:10:47Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 That example is far too simple of to judge.\r\n\r\nWhat happens when you have optional parameters that are not common across all parameter sets, when you have 4 or more parameter sets?\r\n\r\nIMHO the most complicated use cases need to be worked out first if we're to go anywhere with a new design, to ensure that we are supporting what is there today. The (hidden by default?) Invoke-WebRequest example is better, but that is also a \"clean\" example where there are a lot of parameters common to all parameter sets. Try it for Invoke-Command.\r\n\r\nAlso, why show common parameters at all? They need to be learned once, and then you don't need to see them again, so I wouldn't want them cluttering up the view.",
      "created_at": "2020-08-28T20:46:54Z",
      "updated_at": "2020-08-28T20:48:44Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "More feedback:\r\n\r\nIt seems you're using parentheses to denote positional parameters, but the presentation does not very clearly show me their position. Plus with that you're just swapping learning one notation (that has been around for 14 years) to define how parameters work with another one. My initial reaction to that is to reject the idea, because the existing notation is well defined and unambiguous.\r\n\r\nThe layout of how named, optional parameters that are used in multiple parameter sets clutters up the presentation of the syntax and makes it difficult to parse when there are many parameter sets presents a challenge, there is no doubt of that. But re-inventing the notation itself rather than suggesting that people can just learn the notation that has been around since day 1 comes at a cost of forcing those who can read, understand and use the existing notation to describe cmdlet syntax to others to throw that notation away in favor of some different styling/markup. I'm not in favor of that part of what you are proposing.\r\n\r\nLast, suggesting colors can be used to indicate things only works if you have those colors to work with. That's not always the case, so I don't like the idea of colors replacing what is already in place to define whether or not a parameter is mandatory, positional, named, and what type of parameter it is.",
      "created_at": "2020-08-28T20:56:27Z",
      "updated_at": "2020-08-28T21:00:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm not saying it's a fully formed idea, just a proof of concept. Good points, aye.\n\nI think the main problems with the current syntax diagrams are... Threefold?\n\n1. Square brackets get used too much IMO, cluttering the output and making it hard to parse visually for anything more than very simple use cases.\n\n2. Optional parameters in _AllParameterSets tend to obscure what's actually important / necessary for each set if there are more than a few of them. This is severely exacerbated by the common parameters.\n\n3. Mandatory parameters often get strewn in amongst the rest of the parameters, further confusing things.\n\nAgreed on colors as well. I'd like to see it still, but it shouldn't be relied upon.",
      "created_at": "2020-08-28T21:11:45Z",
      "updated_at": "2020-08-28T21:11:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Take two:\r\n\r\n<details>\r\n<summary><strong>Code</strong></summary>\r\n\r\n```ps1\r\nfunction Get-CommandSyntax {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory, ValueFromPipeline)]\r\n        [string]\r\n        $CommandName\r\n    )\r\n\r\n    $command = Get-Command $CommandName\r\n    $sb = [System.Text.StringBuilder]::new()\r\n\r\n    $allParameters = $command.Parameters.Values\r\n    $maxNameLength = ($allParameters.Name | Measure-Object Length -Maximum).Maximum\r\n    $maxTypeLength = ($allParameters.ParameterType.Name | \r\n        ForEach-Object {\r\n            [System.Management.Automation.LanguagePrimitives]::ConvertTypeNameToPSTypeName($_)\r\n        } |\r\n        Measure-Object Length -Maximum).Maximum\r\n    \r\n    $optionalParamColumns = $host.UI.RawUI.WindowSize.Width / [math]::Max($maxNameLength + $maxTypeLength, 40)\r\n\r\n    foreach ($parameterSet in $command.ParameterSets) {\r\n        $sb.AppendLine() > $null\r\n        $title = if ($parameterSet.IsDefault) { \"{0} (Default)\" -f $parameterSet.Name } else { $parameterSet.Name }\r\n        $sb.AppendLine($title) > $null\r\n        $sb.AppendLine(\"-\" * $title.Length) > $null\r\n        $sb.AppendFormat(\"{0} \", $command.Name) > $null\r\n        $mandatoryAndPositional, $optionalNamed = $parameterSet.Parameters.Where( { $_.IsMandatory -or $_.Position -ne [int]::MinValue }, 'Split')\r\n        $optionalNamed = $optionalNamed |\r\n            Where-Object { -not $command.Parameters[$_.Name].ParameterSets.ContainsKey('__AllParameterSets') }\r\n\r\n        $mandatoryAndPositional = $mandatoryAndPositional | Sort-Object -Property @(\r\n            { $_.Position -ne [int]::MinValue }\r\n            'Position'\r\n        )\r\n\r\n        foreach ($param in $mandatoryAndPositional) {\r\n            $typeName = [System.Management.Automation.LanguagePrimitives]::ConvertTypeNameToPSTypeName($param.ParameterType.Name)\r\n            $format = if ($typeName) {\r\n                if ($param.Position -eq [int]::MinValue) {\r\n                    \"-{0} {1}\"\r\n                }\r\n                else {\r\n                    \"(-{0}) {1}\"\r\n                }\r\n            }\r\n            else {\r\n                \"-{0}\"\r\n            }\r\n\r\n            if ($param.IsMandatory) {\r\n                $format = \"$format \"\r\n            }\r\n            else {\r\n                $format = \"($format) \"\r\n            }\r\n\r\n            $sb.AppendFormat($format, $param.Name, $typeName)>$null\r\n        }\r\n\r\n        $sb.AppendLine() > $null\r\n\r\n        if ($optionalNamed.Count -gt 0) {\r\n            $sb.AppendLine() > $null\r\n            $sb.AppendLine(\"Other Optional Parameters:\") > $null\r\n            $maxNameWidth = ($optional.Name | Measure-Object -Property Length -Maximum).Maximum + 3\r\n            $optionalParamStrings = foreach ($param in $optionalNamed) {\r\n                $format = \"{0,-$maxNameWidth} {1}\"\r\n                $typeName = [System.Management.Automation.LanguagePrimitives]::ConvertTypeNameToPSTypeName($param.ParameterType.Name)\r\n                if ($param.Position -ne [int]::MinValue) {\r\n                    $format -f \"(-$($param.Name))\", $typeName\r\n                }\r\n                else {\r\n                    $format -f \"-$($param.Name)\", $typeName\r\n                }\r\n            }\r\n\r\n            $optionalParams = $optionalParamStrings |\r\n                Format-Wide -Force -Property { $_ } -Column $optionalParamColumns |\r\n                Out-String\r\n            $sb.Append($optionalParams.Trim()) > $null\r\n            $sb.AppendLine() > $null\r\n        }\r\n    }\r\n\r\n    $allSetsOptionalNamed = $command.Parameters.Values.Where{\r\n        $_.ParameterSets.ContainsKey('__AllParameterSets') -and\r\n        $_.ParameterSets['__AllParameterSets'].Position -eq [int]::MinValue\r\n    }\r\n    if ($allSetsOptionalNamed.Count -gt 0) {\r\n        $sb.AppendLine() > $null\r\n        $sb.AppendLine(\"Optional Parameters for All Sets\") > $null\r\n        $sb.AppendLine('-' * 32) > $null\r\n        $maxNameWidth = ($allSetsOptionalNamed.Name | Measure-Object -Property Length -Maximum).Maximum + 3\r\n        $optionalParamStrings = foreach ($param in $allSetsOptionalNamed) {\r\n            $format = \"{0,-$maxNameWidth} {1}\"\r\n            $typeName = [System.Management.Automation.LanguagePrimitives]::ConvertTypeNameToPSTypeName($param.ParameterType.Name)\r\n            if ($command.Parameters[$param.Name].ParameterSets['__AllParameterSets'].Position -ne [int]::MinValue) {\r\n                $format -f \"(-$($param.Name))\", $typeName\r\n            }\r\n            else {\r\n                $format -f \"-$($param.Name)\", $typeName\r\n            }\r\n        }\r\n\r\n        $optionalParams = $optionalParamStrings |\r\n            Format-Wide -Force -Property { $_ } -Column $optionalParamColumns |\r\n            Out-String\r\n        $sb.AppendLine($optionalParams.Trim()) > $null\r\n    }\r\n\r\n    $sb.ToString()\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThis puts the positional parameters into their place on the syntax diagrams (though named-only parameters appear first) while retaining most of the clarity of the previous iteration.\r\n\r\n<details>\r\n<summary><strong>Invoke-Command has too many parameter sets \ud83d\ude02</strong></summary>\r\n\r\n```\r\nInProcess (Default)\r\n-------------------\r\nInvoke-Command (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-NoNewScope\r\n\r\nFilePathRunspace\r\n----------------\r\nInvoke-Command (-Session) (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-ThrottleLimit [int]                   -AsJob                                 -HideComputerName\r\n-JobName [string]                      -RemoteDebug\r\n\r\nSession\r\n-------\r\nInvoke-Command (-Session) (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-ThrottleLimit [int]                   -AsJob                                 -HideComputerName\r\n-JobName [string]                      -RemoteDebug\r\n\r\nComputerName\r\n------------\r\nInvoke-Command ((-ComputerName) [string[]]) (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-Credential [pscredential]             -Port [int]                            -UseSSL\r\n-ConfigurationName [string]            -ApplicationName [string]              -ThrottleLimit [int]\r\n-AsJob                                 -InDisconnectedSession                 -SessionName [string[]]\r\n-HideComputerName                      -JobName [string]                      -SessionOption\r\n-Authentication                        -EnableNetworkAccess                   -RemoteDebug\r\n-CertificateThumbprint [string]\r\n\r\nFilePathComputerName\r\n--------------------\r\nInvoke-Command ((-ComputerName) [string[]]) (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-Credential [pscredential]             -Port [int]                            -UseSSL\r\n-ConfigurationName [string]            -ApplicationName [string]              -ThrottleLimit [int]\r\n-AsJob                                 -InDisconnectedSession                 -SessionName [string[]]\r\n-HideComputerName                      -JobName [string]                      -SessionOption\r\n-Authentication                        -EnableNetworkAccess                   -RemoteDebug\r\n\r\nUri\r\n---\r\nInvoke-Command ((-ConnectionUri) [uri[]]) (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-Credential [pscredential]             -ConfigurationName [string]            -ThrottleLimit [int]\r\n-AsJob                                 -InDisconnectedSession                 -HideComputerName\r\n-JobName [string]                      -AllowRedirection                      -SessionOption\r\n-Authentication                        -EnableNetworkAccess                   -RemoteDebug\r\n-CertificateThumbprint [string]\r\n\r\nFilePathUri\r\n-----------\r\nInvoke-Command ((-ConnectionUri) [uri[]]) (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-Credential [pscredential]             -ConfigurationName [string]            -ThrottleLimit [int]\r\n-AsJob                                 -InDisconnectedSession                 -HideComputerName\r\n-JobName [string]                      -AllowRedirection                      -SessionOption\r\n-Authentication                        -EnableNetworkAccess                   -RemoteDebug\r\n\r\nVMId\r\n----\r\nInvoke-Command -Credential [pscredential] (-VMId) [guid[]] (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -RemoteDebug\r\n\r\nVMName\r\n------\r\nInvoke-Command -Credential [pscredential] -VMName [string[]] (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -RemoteDebug\r\n\r\nFilePathVMId\r\n------------\r\nInvoke-Command -Credential [pscredential] (-VMId) [guid[]] (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -RemoteDebug\r\n\r\nFilePathVMName\r\n--------------\r\nInvoke-Command -Credential [pscredential] -VMName [string[]] (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -RemoteDebug\r\n\r\nSSHHost\r\n-------\r\nInvoke-Command -HostName [string[]] (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-Port [int]                            -AsJob                                 -HideComputerName\r\n-JobName [string]                      -UserName [string]                     -KeyFilePath [string]\r\n-SSHTransport                          -RemoteDebug                           -Subsystem [string]\r\n\r\nContainerId\r\n-----------\r\nInvoke-Command -ContainerId [string[]] (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -JobName [string]                      -RunAsAdministrator\r\n-RemoteDebug\r\n\r\nFilePathContainerId\r\n-------------------\r\nInvoke-Command -ContainerId [string[]] (-FilePath) [string]\r\n\r\nOther Optional Parameters:\r\n-ConfigurationName [string]            -ThrottleLimit [int]                   -AsJob\r\n-HideComputerName                      -JobName [string]                      -RunAsAdministrator\r\n-RemoteDebug\r\n\r\nSSHHostHashParam\r\n----------------\r\nInvoke-Command -SSHConnection [hashtable[]] (-ScriptBlock) [scriptblock]\r\n\r\nOther Optional Parameters:\r\n-AsJob                                 -HideComputerName                      -JobName [string]\r\n-RemoteDebug\r\n\r\nFilePathSSHHost\r\n---------------\r\nInvoke-Command -FilePath [string] -HostName [string[]]\r\n\r\nOther Optional Parameters:\r\n-AsJob                                 -HideComputerName                      -UserName [string]\r\n-KeyFilePath [string]                  -SSHTransport                          -RemoteDebug\r\n\r\nFilePathSSHHostHash\r\n-------------------\r\nInvoke-Command -FilePath [string] -SSHConnection [hashtable[]]\r\n\r\nOther Optional Parameters:\r\n-AsJob                                 -HideComputerName                      -RemoteDebug\r\n\r\nOptional Parameters for All Sets\r\n--------------------------------\r\n-InputObject           [psobject]      -ArgumentList          [System.Object\u2026 -Verbose\r\n-Debug                                 -ErrorAction                           -WarningAction\r\n-InformationAction                     -ErrorVariable         [string]        -WarningVariable       [string]\r\n-InformationVariable   [string]        -OutVariable           [string]        -OutBuffer             [int]\r\n-PipelineVariable      [string]\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>We sure Where-Object needs all these?</strong></summary>\r\n\r\n```\r\nEqualSet (Default)\r\n------------------\r\nWhere-Object (-Property) [string] ((-Value) [System.Object])\r\n\r\nOther Optional Parameters:\r\n-EQ\r\n\r\nScriptBlockSet\r\n--------------\r\nWhere-Object (-FilterScript) [scriptblock]\r\n\r\nCaseSensitiveNotLikeSet\r\n-----------------------\r\nWhere-Object -CNotLike (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveEqualSet\r\n---------------------\r\nWhere-Object -CEQ (-Property) [string] ((-Value) [System.Object])\r\n\r\nNotEqualSet\r\n-----------\r\nWhere-Object -NE (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveNotEqualSet\r\n------------------------\r\nWhere-Object -CNE (-Property) [string] ((-Value) [System.Object])\r\n\r\nGreaterThanSet\r\n--------------\r\nWhere-Object -GT (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveGreaterThanSet\r\n---------------------------\r\nWhere-Object -CGT (-Property) [string] ((-Value) [System.Object])\r\n\r\nLessThanSet\r\n-----------\r\nWhere-Object -LT (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveLessThanSet\r\n------------------------\r\nWhere-Object -CLT (-Property) [string] ((-Value) [System.Object])\r\n\r\nGreaterOrEqualSet\r\n-----------------\r\nWhere-Object -GE (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveGreaterOrEqualSet\r\n------------------------------\r\nWhere-Object -CGE (-Property) [string] ((-Value) [System.Object])\r\n\r\nLessOrEqualSet\r\n--------------\r\nWhere-Object -LE (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveLessOrEqualSet\r\n---------------------------\r\nWhere-Object -CLE (-Property) [string] ((-Value) [System.Object])\r\n\r\nLikeSet\r\n-------\r\nWhere-Object -Like (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveLikeSet\r\n--------------------\r\nWhere-Object -CLike (-Property) [string] ((-Value) [System.Object])\r\n\r\nNotLikeSet\r\n----------\r\nWhere-Object -NotLike (-Property) [string] ((-Value) [System.Object])\r\n\r\nMatchSet\r\n--------\r\nWhere-Object -Match (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveMatchSet\r\n---------------------\r\nWhere-Object -CMatch (-Property) [string] ((-Value) [System.Object])\r\n\r\nNotMatchSet\r\n-----------\r\nWhere-Object -NotMatch (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveNotMatchSet\r\n------------------------\r\nWhere-Object -CNotMatch (-Property) [string] ((-Value) [System.Object])\r\n\r\nContainsSet\r\n-----------\r\nWhere-Object -Contains (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveContainsSet\r\n------------------------\r\nWhere-Object -CContains (-Property) [string] ((-Value) [System.Object])\r\n\r\nNotContainsSet\r\n--------------\r\nWhere-Object -NotContains (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveNotContainsSet\r\n---------------------------\r\nWhere-Object -CNotContains (-Property) [string] ((-Value) [System.Object])\r\n\r\nInSet\r\n-----\r\nWhere-Object -In (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveInSet\r\n------------------\r\nWhere-Object -CIn (-Property) [string] ((-Value) [System.Object])\r\n\r\nNotInSet\r\n--------\r\nWhere-Object -NotIn (-Property) [string] ((-Value) [System.Object])\r\n\r\nCaseSensitiveNotInSet\r\n---------------------\r\nWhere-Object -CNotIn (-Property) [string] ((-Value) [System.Object])\r\n\r\nIsSet\r\n-----\r\nWhere-Object -Is (-Property) [string] ((-Value) [System.Object])\r\n\r\nIsNotSet\r\n--------\r\nWhere-Object -IsNot (-Property) [string] ((-Value) [System.Object])\r\n\r\nNot\r\n---\r\nWhere-Object -Not (-Property) [string]\r\n\r\nOptional Parameters for All Sets\r\n--------------------------------\r\n-InputObject           [psobject]      -Verbose                               -Debug\r\n-ErrorAction                           -WarningAction                         -InformationAction\r\n-ErrorVariable         [string]        -WarningVariable       [string]        -InformationVariable   [string]\r\n-OutVariable           [string]        -OutBuffer             [int]           -PipelineVariable      [string]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>New-WordCloud</strong></summary>\r\n\r\n```\r\nColorBackground (Default)\r\n-------------------------\r\nNew-WordCloud -InputObject [psobject] (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-ImageSize                             -BackgroundColor\r\n\r\nColorBackground-FocusWord\r\n-------------------------\r\nNew-WordCloud -InputObject [psobject] -FocusWord [string] (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-ImageSize                             -BackgroundColor                       -RotateFocusWord [float]\r\n\r\nFileBackground\r\n--------------\r\nNew-WordCloud -InputObject [psobject] -BackgroundImage [string] (-Path) [string]\r\n\r\nFileBackground-FocusWord\r\n------------------------\r\nNew-WordCloud -InputObject [psobject] -BackgroundImage [string] -FocusWord [string] (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-RotateFocusWord [float]\r\n\r\nColorBackground-WordTable\r\n-------------------------\r\nNew-WordCloud -WordSizes (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-ImageSize                             -BackgroundColor\r\n\r\nColorBackground-FocusWord-WordTable\r\n-----------------------------------\r\nNew-WordCloud -WordSizes -FocusWord [string] (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-ImageSize                             -BackgroundColor                       -RotateFocusWord [float]\r\n\r\nFileBackground-WordTable\r\n------------------------\r\nNew-WordCloud -WordSizes -BackgroundImage [string] (-Path) [string]\r\n\r\nFileBackground-FocusWord-WordTable\r\n----------------------------------\r\nNew-WordCloud -WordSizes -BackgroundImage [string] -FocusWord [string] (-Path) [string]\r\n\r\nOther Optional Parameters:\r\n-RotateFocusWord [float]\r\n\r\nOptional Parameters for All Sets\r\n--------------------------------\r\n-Typeface                              -ColorSet                              -StrokeWidth           [float]\r\n-StrokeColor                           -ExcludeWord           [string[]]      -IncludeWord           [string[]]\r\n-WordScale             [float]         -AllowRotation                         -Padding               [float]\r\n-WordBubble                            -DistanceStep          [float]         -RadialStep            [float]\r\n-MaxRenderedWords      [int]           -MaxColors             [int]           -RandomSeed            [int]\r\n-Monochrome                            -AllowStopWords                        -AllowOverflow\r\n-PassThru                              -Verbose                               -Debug\r\n-ErrorAction                           -WarningAction                         -InformationAction\r\n-ErrorVariable         [string]        -WarningVariable       [string]        -InformationVariable   [string]\r\n-OutVariable           [string]        -OutBuffer             [int]           -PipelineVariable      [string]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>Invoke-WebRequest</strong></summary>\r\n\r\n```\r\n\r\nStandardMethod (Default)\r\n------------------------\r\nInvoke-WebRequest (-Uri) [uri]\r\n\r\nOther Optional Parameters:\r\n-Method                                                    -Proxy [uri]\r\n-ProxyCredential [pscredential]                            -ProxyUseDefaultCredentials\r\n\r\nStandardMethodNoProxy\r\n---------------------\r\nInvoke-WebRequest -NoProxy (-Uri) [uri]\r\n\r\nOther Optional Parameters:\r\n-Method\r\n\r\nCustomMethodNoProxy\r\n-------------------\r\nInvoke-WebRequest -CustomMethod [string] -NoProxy (-Uri) [uri]\r\n\r\nCustomMethod\r\n------------\r\nInvoke-WebRequest -CustomMethod [string] (-Uri) [uri]\r\n\r\nOther Optional Parameters:\r\n-Proxy [uri]                                               -ProxyCredential [pscredential]\r\n-ProxyUseDefaultCredentials\r\n\r\nOptional Parameters for All Sets\r\n--------------------------------\r\n-UseBasicParsing                                           -WebSession\r\n-SessionVariable                   [string]                -AllowUnencryptedAuthentication\r\n-Authentication                                            -Credential                        [pscredential]\r\n-UseDefaultCredentials                                     -CertificateThumbprint             [string]\r\n-Certificate                       [X509Certificate]       -SkipCertificateCheck\r\n-SslProtocol                                               -Token                             [securestring]\r\n-UserAgent                         [string]                -DisableKeepAlive\r\n-TimeoutSec                        [int]                   -Headers\r\n-MaximumRedirection                [int]                   -MaximumRetryCount                 [int]\r\n-RetryIntervalSec                  [int]                   -Body                              [System.Object]\r\n-Form                                                      -ContentType                       [string]\r\n-TransferEncoding                  [string]                -InFile                            [string]\r\n-OutFile                           [string]                -PassThru\r\n-Resume                                                    -SkipHttpErrorCheck\r\n-PreserveAuthorizationOnRedirect                           -SkipHeaderValidation\r\n-Verbose                                                   -Debug\r\n-ErrorAction                                               -WarningAction\r\n-InformationAction                                         -ErrorVariable                     [string]\r\n-WarningVariable                   [string]                -InformationVariable               [string]\r\n-OutVariable                       [string]                -OutBuffer                         [int]\r\n-PipelineVariable                  [string]\r\n```\r\n\r\n</details>\r\n\r\nSo, yeah, still plenty of room for improvement, but IMO this is much nicer than...\r\n\r\n<details>\r\n<summary>The current Invoke-Command syntax diagrams</summary>\r\n\r\n```\r\nInvoke-Command [-ScriptBlock] <scriptblock> [-NoNewScope] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-Session] <PSSession[]>] [-FilePath] <string> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-Session] <PSSession[]>] [-ScriptBlock] <scriptblock> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-ComputerName] <string[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-ComputerName] <string[]>] [-FilePath] <string> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-ConnectionUri] <uri[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]\r\n\r\nInvoke-Command [[-ConnectionUri] <uri[]>] [-FilePath] <string> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-VMId] <guid[]> [-ScriptBlock] <scriptblock> -Credential <pscredential> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-ScriptBlock] <scriptblock> -Credential <pscredential> -VMName <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-VMId] <guid[]> [-FilePath] <string> -Credential <pscredential> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-FilePath] <string> -Credential <pscredential> -VMName <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-ScriptBlock] <scriptblock> -HostName <string[]> [-Port <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-Subsystem <string>] [<CommonParameters>]\r\n\r\nInvoke-Command [-ScriptBlock] <scriptblock> -ContainerId <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RunAsAdministrator] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-FilePath] <string> -ContainerId <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RunAsAdministrator] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command [-ScriptBlock] <scriptblock> -SSHConnection <hashtable[]> [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command -FilePath <string> -HostName <string[]> [-AsJob] [-HideComputerName] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n\r\nInvoke-Command -FilePath <string> -SSHConnection <hashtable[]> [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]\r\n```\r\n\r\n</details>\r\n\r\nI need to look back at the code for the original and figure out how the type names are generated there; there's an internal method for that which works a bit differently than the LanguagePrimitives method I use here. Need to dig that up so it looks a bit better, but this shows the general gist.",
      "created_at": "2020-08-29T11:22:16Z",
      "updated_at": "2020-08-29T11:25:17Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Hi all, I discovered this issue when I was looking for a solution for -synax option not showing the paameter set name. I generally find using parameter sets quite a big burden particularly when creating commands with a large number of parameters, mainly due to the lack of tools to help with these issues. I've wasted too much time on trying to figure out why I've created a parameter set that doesnt work.\r\n\r\nSo, I decided to bite the bullet and write some tools for myself. I was pleased to see your command @KirkMunro and have reversed engineered it to improve the output generated.\r\n\r\nI have an initial version of Get-CommandDetail which colours the output to make it easier to read and would appreciate any feedback. Please note that in order to achieve what I have, taken a bit of departure from using standard powershell techniques, eg Format-List/Format-Table and recrafted them myself. Here is an example of the output (I provide a snapshot instead of the raw text, because the raw text won't include colouring)\r\n\r\n![Get-NewCommandDetail snapshot](https://user-images.githubusercontent.com/49785914/106792060-9c8e0480-664d-11eb-9ed0-ca8401db0bec.jpg)\r\n\r\nSo thanks to you @KirkMunro, you saved me a bit of time in creating this (I'll be crediting you when I document this in my next scheduled release).\r\n\r\n",
      "created_at": "2021-02-03T18:36:41Z",
      "updated_at": "2021-02-03T18:36:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That looks promising, @plastikfan - if you have a link to the source code and / or plan to publish this somewhere, do let us know. (You linked here from https://github.com/EliziumNet/Loopz/issues/114, but it's not immediately clear what that means - will it be a public part of https://www.powershellgallery.com/packages?q=Elizium.Loopz?)\r\n\r\n\n\n<blockquote><img src=\"/favicon.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.powershellgallery.com/packages?q=Elizium.Loopz\">PowerShell Gallery\r\n        | Packages matching Elizium.Loopz</a></strong></div></blockquote>",
      "created_at": "2021-02-03T18:58:48Z",
      "updated_at": "2021-02-03T18:58:50Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Yup, I'm only in initial stages at the moment, but I do plan to publish the code as part of one of my powershell modules Elizium.Loopz. I havent even commited it into my repo, but I wanted to get an early heads up and solicit feedback. I have plans to create a few other functions to help with debugging parameter sets.\r\n",
      "created_at": "2021-02-03T19:02:45Z",
      "updated_at": "2021-02-03T19:02:45Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Oops and I just realised that I should also credit @JamesWTruher who wrote the original.",
      "created_at": "2021-02-03T19:08:31Z",
      "updated_at": "2021-02-03T19:08:31Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @JamesWTruher @KirkMunro @plastikfan - are any of you you not thinking of adding your versions as a PR so that we can decide to take one as a default part of Get-Command at all to to fix what this issue was raised to request, not another profile function or separate module that needs installing as it would be good if this type of functionality was just available out of the box to all users.\r\n\r\n",
      "created_at": "2021-02-04T13:45:57Z",
      "updated_at": "2021-02-04T13:45:57Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Hi @kilasuit, that's a fair point, but this issue has been opened a long time and there hasn't been a resolution yet. And ok I understand these things take time to get right and discussion is good, but I have no idea when this will be resolved so I need to do something for myself. On top of that there, seems to be a great aversion to using write-host, but that is the only way we can colour output which I think is very valuable (why is there a warning in PSSA to not use write-host?). With this fundamental diversion of philosophy in this regard I find I have to go against the established grain (or this is how it feels like to me). I don't mean to be controversial, but I do like the use of colour on command line apps and even the use of emojis as this can make eyeballing large amounts of output so much easier. I would be happy to submit a pull request but I don't think there would be much point because I just feel like it would just be rejected. ",
      "created_at": "2021-02-04T13:58:35Z",
      "updated_at": "2021-02-04T13:58:35Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Others have mentioned introducing colour for rendering output and as far as I know, there is no abstraction in powershell for doing this other than specifying foregroundcolor and/or backgroundcolor on write-host. This is why I built another module: elizium.krayola which contains a class called Krayon that provides a fluent style interface for writing coloured text. It still requires up to date documentation which I'll get round to eventually. Ideally I should submit a pull request to get this into powershell repo, but what chance is there in getting that accepted, given that using write-host is so frowned upon. \n",
      "created_at": "2021-02-04T14:08:05Z",
      "updated_at": "2021-02-04T14:08:05Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "And finally, please don't misunderstand me. I know why generally commands shouldn't be writing to the console, that makes perfect sense. But that doesn't mean there are absolutely no circumstances when using write-host is a valid scenario especially since this is the only way to write in colour. Most if not all the commands I write don't write to the console. I only write to the console for commands that's are specifically ui commands, this way I maintain separation of concerns which is one of the main rationales behind warning against using write-host in the first place.\n",
      "created_at": "2021-02-04T14:17:52Z",
      "updated_at": "2021-02-04T14:17:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'll echo @plastikfan on that as well -- I don't have a lot of confidence that converting the powershell script I put together to a C# version will be worthwhile. Until there is a fair degree of agreement / direction from the PowerShell team to the direction they _want_ this to go, there's not a lot of point putting the work in to submit a PR. Code review is fairly straightforward, but doing design review on a PR as well can be a much lengthier process and involve upwards of a dozen complete rewrites of the code.\r\n\r\nAt least for myself, I'd much rather we settle on a good direction at least before we go write this all out from start to finish.",
      "created_at": "2021-02-04T16:20:26Z",
      "updated_at": "2021-02-04T16:20:26Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "As a result of building my own colour enhanced parameter set analysis function, I think I've found a slight issue in the result produced by the -Syntax option (I'm not 100%, because it may just simply be a problem with the parameter set definition on the function I've been testing with). I have noticed that sometimes the syntax for a particular optional parameter has the type specification defined inside the square brackets: [-Param \\<type\\>]  (actually most are), but sometimes can be outside: [-Param] \\<type\\>.\r\n\r\nWhat I have also noticed (and this may be related to the above point) is that parameter can be incorrec;tly indicated to be optional in the syntax statement, but when you see the full parameter definition, you'll see that its mandatory. This can be more easily illustrated in the following output:\r\n\r\n![gips rename-many replace-with pattern syntax](https://user-images.githubusercontent.com/49785914/107045522-7edfad00-67bd-11eb-8bd3-501c36c26911.jpg)\r\n\r\nIn the syntax statement, Pattern is shown in White and inside square brackets (this is incorrect), but the in the table, you will see that Pattern is coloured red and you can see the Mandatory flag is set \u2714\ufe0f.\r\n\r\nPS: you can see that my function Get-ParameterSetInfo shows the Pattern as:\r\n\r\n> [-Pattern \\<array\\>]\r\n\r\nas I would expect given the syntax statement says it optional (but actually this is wrong) as opposed to:\r\n\r\n> [-Pattern] \\<array\\>\r\n\r\nthe type is outside of the square brackets. Get-ParameterSetInfo is using regex replacement to repair the output (as part of the colourisation process).\r\n\r\nI should also state that Pattern IS mandatory in this paremeter set:\r\n\r\n```powershell\r\nfunction Rename-Many {\r\n  [CmdletBinding(SupportsShouldProcess, DefaultParameterSetName = 'ReplaceWith')]\r\n  [Alias('remy')]\r\n  param\r\n  (\r\n\r\n    [Parameter(ParameterSetName = 'MoveToAnchor', Mandatory, Position = 0)]\r\n    [Parameter(ParameterSetName = 'ReplaceWith', Mandatory, Position = 0)]\r\n    [Parameter(ParameterSetName = 'MoveToStart', Mandatory, Position = 0)]\r\n    [Parameter(ParameterSetName = 'MoveToEnd', Mandatory, Position = 0)]\r\n    [ValidateScript( { { $(test-ValidPatternArrayParam -Arg $_ -AllowWildCard ) } })]\r\n    [array]$Pattern,\r\n```\r\n\r\nIf you run:\r\n\r\n> gcm Rename-Many -syntax\r\n\r\nyou'll see this:\r\n\r\n```\r\n\u03bb gcm rename-many -Syntax\r\n\r\nRename-Many [-Pattern] <array> -underscore <FileSystemInfo> [-Copy <array>] [-With <string>] [-Start] [-End] [-Paste <string>] [-Drop <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many [-Pattern] <array> -underscore <FileSystemInfo> -End [-With <string>] [-Paste <string>] [-Drop <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many [-Pattern] <array> -underscore <FileSystemInfo> -Start [-With <string>] [-Paste <string>] [-Drop <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many [-Pattern] <array> -underscore <FileSystemInfo> -Anchor <array> [-Relation <string>] [-Copy <array>] [-With <string>] [-Paste <string>] [-Drop <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Append <string> [-Copy <array>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nRename-Many -underscore <FileSystemInfo> -Prepend <string> [-Copy <array>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n```\r\n\r\nBut the problem with this is that these parameter sets are not decorated with the parameter name; hence me building these parameter sets tools.\r\n\r\nIf you run @KirkMunro 's Get-CommandDetails (only the 'ReplaceWith' parameter set is shown):\r\n\r\n> 'Rename-Many' | Get-CommandDetail\r\n\r\n```\r\nParameter Set: ReplaceWith (Default)\r\n\r\nSyntax: Rename-Many [-Pattern] <array> -underscore <FileSystemInfo> [-Copy <array>] [-With <string>] [-Start] [-End] [-Paste <string>] [-Drop <string>] [-File] [-Directory] [-Except <string>] [-Include <string>] [-Whole <string>] [-Condition <scriptblock>] [-Top <int>] [-Transform <scriptblock>] [-Context <psobject>] [-Diagnose] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nParameters:\r\nName       Type            Mandatory   Pos PipeValue PipeName Alias\r\n----       ----            ---------   --- --------- -------- -----\r\nPattern    Array                True     0     False    False\r\nunderscore FileSystemInfo       True named      True    False\r\nCopy       Array               False named     False    False\r\nWith       String              False named     False    False\r\nStart      SwitchParameter     False named     False    False\r\nEnd        SwitchParameter     False named     False    False\r\nPaste      String              False named     False    False\r\nDrop       String              False named     False    False\r\nFile       SwitchParameter     False named     False    False\r\nDirectory  SwitchParameter     False named     False    False\r\nExcept     String              False named     False    False x\r\nInclude    String              False named     False    False i\r\nWhole      String              False named     False    False\r\nCondition  ScriptBlock         False named     False    False\r\nTop        Int32               False named     False    False\r\nTransform  ScriptBlock         False named     False    False\r\nContext    PSObject            False named     False    False\r\nDiagnose   SwitchParameter     False named     False    False\r\n```\r\n\r\nyou can see the errorneous (or rather, yet unexplained) way that Pattern is displayed:\r\n\r\n```\r\n [-Pattern] <array>\r\n```\r\n\r\nie the type is outside of the square brackets.\r\n\r\nSo a question I have is why are there 2 representations of optional parameters presented by the -Syntax option? (Is this by design or a bug? Also, I'm not ruling out the possiblity that I have done something wrong in my parameter set definition)\r\n\r\nPS: this post is purely about the potential issue with the result presented by the -Syntax option. I just happened to notice it as a result of seeing the coloured output shown by Get-ParameterSetInfo.\r\n\r\nSorry about the verboseness, I had to make sure I explained myself comprehensively and to stake my case clearly!\r\n\r\n\r\n",
      "created_at": "2021-02-05T14:55:41Z",
      "updated_at": "2021-02-05T14:55:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I haven't read through your post in detail, but perhaps these pointers help:\r\n\r\n`-Param <type>` ... mandatory, _non_-positional parameter (requires passing _with_ parameter name) \r\n`[-Param <type>]` ... optional, _non_-positional parameter\r\n`[-Param] <type>` ... mandatory, _positional_ parameter (using the parameter name is optional, if passed in the right position among other arguments passed positionally)\r\n`[[-Param] <type>]` ... optional, positional parameter\r\n",
      "created_at": "2021-02-05T16:05:26Z",
      "updated_at": "2021-02-05T16:05:26Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Ah ok that makes a bit more sense now. I'll change my rendering to apply those rules.",
      "created_at": "2021-02-05T16:14:04Z",
      "updated_at": "2021-02-05T16:14:04Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Hi just me again. If anyone is interested, I have just published a new version of the module I've been working on which includes a finalised version of a function I call *Show-ParameterSetInfo* based upon @KirkMunro's and @JamesWTruher's *Get-CommandDetail* function. The module ([Elizium.Loopz](https://www.powershellgallery.com/packages/Elizium.Loopz)) also contains other functions that help when working with [Parameter Sets](https://github.com/EliziumNet/Loopz/blob/master/resources/docs/parameter-set-tools.md). I am still interested in the outcome of this issue and will be observing from afar. Cheers.\r\n",
      "created_at": "2021-04-15T19:43:00Z",
      "updated_at": "2021-04-15T19:43:00Z"
    }
  ],
  "created_at": "2019-01-18T22:46:40Z",
  "number": 8692,
  "state": "open",
  "title": "Add / amend syntax displayed from Get-Command -syntax",
  "updated_at": "2021-04-15T19:43:00Z"
}