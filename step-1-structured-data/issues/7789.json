{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7789",
  "author": "SeeminglyScience",
  "body": "When getting completion results while in a hashtable that is used for splatting, completion should treat keys as parameter names and values as arguments.\r\n\r\nThis would be easiest supported easiest when\r\n\r\n1. The `HashtableAst` is on the RHS of an `AssignmentStatementAst`\r\n1. A `VariableExpressionAst` is on the LHS\r\n1. The same variable is splatted in a `CommandAst`\r\n\r\nIdeally completion features would be the same as when in the `CommandAst`, such as\r\n\r\n1. Keys are completed as parameter names\r\n1. Values would take `ArgumentCompleter`, `ValidateSet`, `Enum` typed parameters, etc into account\r\n1. Parameters already bound in the `CommandAst`  would be excluded\r\n\r\n/cc @TheIncorrigible1\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Not sure I understand. When splatting you just specify the variable name:\r\n```powershell\r\nget-somthing @hashtableWithParameters\r\n```\r\nso there's nothing to complete. Could you please provide an example?",
      "created_at": "2018-09-14T23:24:29Z",
      "updated_at": "2018-09-14T23:24:29Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay \r\n\r\nUsing this example\r\n\r\n```powershell\r\n$splat = @{\r\n    Pa\r\n}\r\n\r\nGet-ChildItem @splat\r\n```\r\n\r\nIf tab was pressed with the cursor after `Pa` then `Path` would be a completion result.",
      "created_at": "2018-09-14T23:39:01Z",
      "updated_at": "2018-09-14T23:39:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience: Because it took me a while to figure out the intent myself, via the linked VSCode issue, let me try to clarify if my understanding of what you're asking for is correct:\r\n\r\nGiven a hashtable literal assigned to a variable (`$splat`) that is _later_ used for splatting (`Get-ChildItem @splat`), you want tab completion _inside the hashtable literal_ to complete the parameter names (and, if applicable, set-constrained arguments) of the cmdlet in whose context said splatting later happens.\r\n\r\nCorrect?\r\n\r\n",
      "created_at": "2018-09-15T01:55:33Z",
      "updated_at": "2018-09-15T01:59:25Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Exactly! Thanks for clarifying :)",
      "created_at": "2018-09-15T02:32:53Z",
      "updated_at": "2018-09-15T02:32:53Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "This and a few other ideal features (like for `Add-Type`, `Import-Module` and `Get-Command`) would probably benefit from some kind of constant-folding analysis. Which starts to blur the lines on what PowerShell ought to be doing, because it's not really responsible for that kind of optimisation. But just thought I'd mention it, since I keep seeing similar scenarios for it.",
      "created_at": "2018-10-10T05:47:28Z",
      "updated_at": "2018-10-10T05:47:28Z"
    }
  ],
  "created_at": "2018-09-14T20:41:52Z",
  "labels": [
    "WG-Interactive-IntelliSense",
    "Issue-Discussion"
  ],
  "number": 7789,
  "state": "open",
  "title": "Add parameter name and value completion for hashtables used for splatting",
  "updated_at": "2018-10-10T05:47:28Z"
}