{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16785",
  "author": "schittli",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n1. Start using PowerShell and Azure Pipelines with YAML\r\n2. Now Microsoft expects that customers have to install uncontrolled opensource modules just so PowerShell can work with YAML\r\n3. For us, this is extremely unexpected\r\n4. And it's a pain for many years that M$ has no inner motivation to keep the PowerShell technology stack up to date.\n\n### Expected behavior\n\n```console\nGet-Content 'config.yaml' | ConvertFrom-Json\r\n# of course, ConvertTo-Yaml is missing too.\r\n\r\n# It's a shame that we have to explain it.\n```\n\n\n### Actual behavior\n\n```console\n# 1. Search an open Source PowerShell module that handles yaml\r\n# 2. make a review to be sure it has no security issues\r\n# 3. Install and test the module\r\n# 4. Search the next module, test it\r\n# 5. If you finally have a Module, install and use it.\r\n# 6. For each Modul-Update, restart at step 3.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\n# Rel. 7.x must have yaml support\r\n# Rel. 5.x should have yaml support\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1023\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1023\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-01-22T14:00:41Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Conclusion \"Won't fix\" was made by WG-Cmdlets in Aug,2021 https://github.com/PowerShell/PowerShell/issues/3607#issuecomment-901288121\r\n\r\nIt seems .Net hasn't plans to implement YAML so close as duplication.",
      "created_at": "2022-01-21T02:54:42Z",
      "updated_at": "2022-01-21T02:54:51Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "To  put  everything  in one place here is what was said in 3607 \r\n\r\n> @PowerShell/wg-powershell-cmdlets has been discussing this issue, and despite the extremely high demand (and my own personal desire to have strong, canonical YAML cmdlets), we're unfortunately going to have to close it (for now) as Won't Fix. The reasoning is two-fold:\r\n\r\n> (1) While the PowerShell package is already fairly large, we're doing our best not to add new dependencies to the package so that we don't continue to grow our size unfettered, and because **we believe that pulling modules from the PowerShell Gallery (or an internal trusted Gallery, having been vetted appropriately by an enterprise) should be a standard part of a PS7 workflow**.\r\n> (2)  As a team, we simply don't have the capacity to build a .NET YAML parser from scratch, nor do we have the capacity to vet, support, and service a 3rd party library for which the security implications are high-stakes.\r\n>If .NET were to officially support a YAML library, we (as Microsoft) could potentially look into supporting a YAML module on the Gallery. But until that point, the existing community modules will have to suffice.\r\n\r\n[The community module referred to](https://www.powershellgallery.com/packages/powershell-yaml/0.4.2) has been downloaded 18 million times. It is based on  [YamDotNet](https://www.nuget.org/packages/YamlDotNet/) has been download from Nuget 36 Million times.   But as the quote above says the team don't have the capacity to _\"vet support and service\"_  it (I'm not sure what happened with NewonSoftJson before .NET added native JSON support). \r\n\r\nWe have a classic case of **different Microsoft teams ignoring each other** . \r\n\r\n-  **Azure Pipelines team**  YAML Is new and shiny let's be the first to use it!!! BTW despite the title Azure generally uses JSON and only pipelines use YAML.\r\n- **PowerShell team**  Customers want us to do more things than Microsoft gives resource for.  We can't write parsers for JSON, XML, YAML etc. (or validate 3rd party ones)  we need .NET to do that. A module which uses a community parser needs to be a community module. \r\n- ** .NET team **  We don't see the need to support every markup as it is invented, and there are good community libraries. \r\n\r\n and customers like the OP say they don't want \"community\"  stuff they want everything to come from Microsoft. (Though from the use of \"M$\"  I assume the OP doesn't like paying for it).   \r\n  ",
      "created_at": "2022-01-21T12:00:15Z",
      "updated_at": "2022-01-21T12:02:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-22T14:00:40Z",
      "updated_at": "2022-01-22T14:00:40Z"
    }
  ],
  "created_at": "2022-01-20T23:59:08Z",
  "labels": [
    "Resolution-Duplicate",
    "Needs-Triage"
  ],
  "number": 16785,
  "state": "closed",
  "title": "Azure uses YAML. Please finally add ConvertFrom-Yaml, ConvertTo-Yaml",
  "updated_at": "2022-01-22T14:00:41Z"
}