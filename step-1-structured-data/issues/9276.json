{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9276",
  "author": "pougetat",
  "body": "# PR Summary\r\n\r\nThis PR adds approx 50 tests (+3 seconds when running locally) for the remove-module  cmdlet. \r\n\r\nIf anyone has suggestions for test cases I missed please feel free to comment. Some of the cases listed are quite vague for the moment. My objective is to optimize the ````number of tests written / branches tested````. I will also screenshot some codeCov results once I get around to running it on the codebase.\r\n\r\nTests have been added tests for : \r\n  - [x] Remove-Module -Name\r\n      - [x] simple module name (single, multiple, repeated)\r\n      - [x] regular expressions (single, multiple, no matches) [\"*\" case breaks Pester (see code comment)]\r\n      - [x] error cases (no matches for simple names)\r\n  - [x] Remove-Module -FullyQualifiedName\r\n     - [x] using ModuleVersion\r\n     - [x] using RequiredVersion\r\n     - [x] error cases (no matches for names and versions) \r\n  - [x] Remove-Module -ModuleInfo\r\n  - [x] Remove-Module with constant module\r\n      - [x] with -Force\r\n      - [x] without -Force\r\n  - [x] Remove-Module with readonly module\r\n      - [x] with -Force\r\n      - [x] without -Force\r\n          - [ ] with constant engine module (I don't actually know how to hit this code path since these modules aren't visible in the first place via Get-Module)\r\n          - [x] without constant engine module\r\n  - [x] Remove-Module with module providing current session drive\r\n  - [x] Remove-Module containing nested modules\r\n     - [x] simple dependency A -> B\r\n     - [x] circular dependency A -> A\r\n  - [x] Remove-Module required by other modules which are also imported\r\n     - [x] A -> B : remove B then A\r\n     - [x] A -> B : remove A then B\r\n\r\n## PR Context\r\n\r\nThis PR is aimed at increasing testing coverage for the module related cmdlets which we would like to refactor down the line.\r\nThis issue tracks the refactoring work : https://github.com/PowerShell/PowerShell/issues/8936\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-04-22T17:49:59Z",
  "comments": [
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Not too sure why this is is failing for Remove-Module -Name tests when eveything works locally (running just this test locally and no others): \r\n\r\n````powershell\r\n    BeforeEach {\r\n        Import-Module -Name \"$testdrive\\Modules\\Foo\\Foo.psd1\" -Force\r\n        Import-Module -Name \"$testdrive\\Modules\\Bar\\Bar.psd1\" -Force\r\n        Import-Module -Name \"$testdrive\\Modules\\Baz\\Baz.psd1\" -Force\r\n\r\n        (Get-Module -Name \"Bar\", \"Baz\", \"Foo\").Name | Should -BeExactly \"Bar\", \"Baz\", \"Foo\"\r\n    }\r\n````\r\n\r\nWith the following error : \r\n````\r\nExpected exactly @('Bar', 'Baz', 'Foo'), but got @('Bar', 'Baz', 'Foo', 'Foo').\r\n53:         (Get-Module -Name \"Bar\", \"Baz\", \"Foo\").Name | Should -BeExactly \"Bar\", \"Baz\", \"Foo\"\r\n````\r\nFor some reason 'Foo' appears twice.",
      "created_at": "2019-04-02T22:54:17Z",
      "updated_at": "2019-04-02T23:14:30Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Fixed the CI tests though I'm still not sure why I had two modules named \"Foo\" in my environment.\r\nMy initial thought was that it could be another Pester test that did not clean up its imported modules thus leaving a Foo module present but perhaps Pester tests are sandboxed in some way and these kinds of race conditions aren't possible.\r\nThoughts ?",
      "created_at": "2019-04-03T07:47:08Z",
      "updated_at": "2019-04-03T07:47:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@pougetat Thanks for your contribution!",
      "created_at": "2019-04-23T03:24:29Z",
      "updated_at": "2019-04-23T03:24:29Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@pougetat great job ! The only missing scenario is when you import module with using [scripting.Classes.using.tests.ps1#L504](https://github.com/pougetat/PowerShell/blob/0f147ad4cc8e1a94cfe4d55cfb3d9a44a34fc3b9/test/powershell/Language/Classes/scripting.Classes.using.tests.ps1#L504) )\r\n",
      "created_at": "2019-04-23T05:27:53Z",
      "updated_at": "2019-04-23T05:27:53Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@fmichaleczek Please feel free to contribute more tests",
      "created_at": "2019-04-23T05:31:01Z",
      "updated_at": "2019-04-23T05:31:01Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@rjmholt sure ! if i write a test that failed (bug in powershell), what I should do with this test ?",
      "created_at": "2019-04-23T06:59:40Z",
      "updated_at": "2019-04-23T06:59:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The ideal I think is to open a PR with the test marked as `-Pending`, so that when the behaviour changes the test passes.",
      "created_at": "2019-04-23T07:02:04Z",
      "updated_at": "2019-04-23T07:02:04Z"
    }
  ],
  "created_at": "2019-04-02T21:53:32Z",
  "number": 9276,
  "state": "closed",
  "title": "Adding tests for `Remove-Module`",
  "updated_at": "2019-04-23T07:02:04Z"
}