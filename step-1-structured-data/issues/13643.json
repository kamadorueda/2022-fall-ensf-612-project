{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13643",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nUpdate code and project files to build PowerShell against dotnet 5.0-rc.1.\r\n\r\nMajor changes to code:\r\n- Update `ComRuntimeHelpers.cs` to change the calling convention `stdcall` to `unmanaged`, based on https://github.com/dotnet/runtime/commit/e13f72bfe26ef243fa96e67ec3ee5aa29c294c54#diff-064c99755b7df4413ffd97baf9d833db committed 2 days ago.\r\n- Remove the use of `ReliabilityContractAttribute` and `SecurityPermissionAttribute` as they are obsoleted.\r\n- Suppress the warning `CA1416` because [In .NET 5.0 we have added new attributes to annotate platform-specific APIs](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1416?view=vs-2019#rule-description).\r\n- Suppress warning about `UTF7` and `BinaryFormatter` with `SYSLIB0011` instead. See [Breaking changes for migration from version 3.1 to 5.0](https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.1-5.0#core-net-libraries).\r\n\r\n## Known issues in .NET 5 RC.1\r\n\r\nThe .NET 5 RC.1 regressions and by-design breaking changes we ran into so far are:\r\n\r\n1. Performance regression on Linux and macOS: https://github.com/dotnet/runtime/issues/41739. The fix https://github.com/dotnet/runtime/pull/41820 is made in .NET 5 RC.2\r\n2. `System.Console.TreatControlCAsInput` is backwards in .NET 5 RC.1 on Linux and macOS. Issue: https://github.com/dotnet/runtime/issues/42423. The fix https://github.com/dotnet/runtime/pull/42432 was made in .NET 5 RC.2\r\n3. `System.Console.ReadKey()` returning `Ctrl+J` for `ENTER` on macOS. Issue: https://github.com/dotnet/runtime/issues/42418. The fix https://github.com/dotnet/runtime/pull/42477 was made in .NET 5 RC.2\r\n4. **A by-design breaking change** made in .NET 5 rc.1: Tls1.0 and Tls1.1 were retired from the default on Linux machines where OpenSSL 1.1 and above is used. The .NET PR is dotnet/runtime#40746\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-09-23T21:04:02Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we track CA1416 in new issue and fix this later?",
      "created_at": "2020-09-16T18:27:09Z",
      "updated_at": "2020-09-16T18:27:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I think there is nothing that needs to be fixed. For all the types and APIs that are supported only on Windows, we compile them only for Windows build. Do you spot anything that is not the case?",
      "created_at": "2020-09-16T18:30:25Z",
      "updated_at": "2020-09-16T18:30:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Do you spot anything that is not the case?\r\n\r\nI remember we had issues with referencing methods from wrong platform. So we could review the analyzer warnings and maybe use recommended workarounds.\r\nAlso not all platform-depended API we have under conditional compiling.",
      "created_at": "2020-09-16T18:37:47Z",
      "updated_at": "2020-09-16T18:39:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The new attribute doesn't offer a suggestion, it's like `error CA1416: 'RegistryKey.GetValue(string?)' is supported on 'windows'`.\r\nI randomly reviewed some files failed with the warning and it looks to me they are either guarded in a `if/def` or protected by a runtime check on the OS platform.\r\n\r\nBut there are lots of failures due to the warning and I surely didn't review them all. So please feel free to open an issue to track , and maybe also review them if you got time. Thanks!",
      "created_at": "2020-09-16T18:53:31Z",
      "updated_at": "2020-09-16T18:54:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Tracking issue #13647.",
      "created_at": "2020-09-17T03:22:15Z",
      "updated_at": "2020-09-17T03:22:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CI Linux fail with \"OpenSslCryptographicException: error:141A90B5:SSL routines:ssl_cipher_list_to_bytes:no ciphers available\".\r\n\r\nDo they disable Tls 1.0 and 1.1 in CI Linux image in OpenSSL? ",
      "created_at": "2020-09-17T03:37:14Z",
      "updated_at": "2020-09-17T03:37:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov We are investigating but got nowhere so far :(  How to check if the Tls 1.0 and 1.1 is disabled on Ubuntu?\r\n\r\nFYI, the version of openssl on the CI agent is: `OpenSSL 1.1.0h 27 Mar 2018 (Library: OpenSSL 1.1.1g 21 Apr 2020)`",
      "created_at": "2020-09-17T18:57:45Z",
      "updated_at": "2020-09-17T19:17:17Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Dropping this here so it's not missed. Ctrl+C doesn't work on macOS\r\n\r\nthis  ^ is because of https://github.com/dotnet/runtime/issues/42423",
      "created_at": "2020-09-17T23:49:46Z",
      "updated_at": "2020-09-18T03:20:26Z"
    },
    {
      "author": "benaadams",
      "author_association": "NONE",
      "body": "Use single file publish? (also outputs a copy native libs on Windows, should be a single file on Linux though)\r\n```xml\r\n<PublishSingleFile>true</PublishSingleFile>\r\n```\r\n\r\nPerhaps assembly trimming? Though that might not work for powershell (as you could invoke apis from script?)\r\n```xml\r\n<PublishTrimmed>true</PublishTrimmed>\r\n<TrimMode>Link</TrimMode>\r\n```\r\nOn Windows can include the R2R with the single file to make startup faster (in exchange for size) https://devblogs.microsoft.com/dotnet/customizing-trimming-in-net-core-5/\r\n```xml\r\n<PublishReadyToRun>True</PublishReadyToRun>\r\n```\n\n<blockquote><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/02/swimlane-cross-platform.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\" height=\"14\"> .NET Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/dotnet/customizing-trimming-in-net-core-5/\">Customizing Trimming in .NET 5 | .NET Blog</a></strong></div><div>This second post on app trimming goes into more detail about to annotate code to control the trimming process.</div></blockquote>",
      "created_at": "2020-09-18T01:49:14Z",
      "updated_at": "2020-09-18T01:49:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How to check if the Tls 1.0 and 1.1 is disabled on Ubuntu?\r\n\r\nI see 3 cases:\r\n- OpenSSL could be compiled without the support. I don't think it is our case.\r\n- The support disabled in OpenSSL config file (min_protocol and -no_tls1, -no_tls1_1 options in the config). We can run the tests locally (WSL2?) and see results. If no problems exist locally it is question for the CI image support team.\r\n- It is a bug in .Net 5.0 for Linix - on client side (PowerShell) or/and on server side (our test WebListener). We can check this locally and separately.\r\n",
      "created_at": "2020-09-18T03:18:45Z",
      "updated_at": "2020-09-18T03:28:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@benaadams \r\n> Use single file publish? \r\n\r\nWe don't use the option today. (I tried locally and catch some issues). And we don't have PowerShell Committee conclusion whether we want to support the single file publish.\r\n\r\n> Perhaps assembly trimming?\r\n\r\nWe don't use this. And you're right this is not acceptable in general. But it could be an option for specific minimal PowerShell distributions.\r\n\r\n> On Windows can include the R2R with the single file to make startup faster\r\n\r\nYes, we use the feature. Welcome to investigate and contribute more in the scenario if you want.\r\n",
      "created_at": "2020-09-18T03:25:00Z",
      "updated_at": "2020-09-18T03:25:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov We learnt from .NET team that this is a by-design breaking change made in .NET 5 rc.1, which retired Tls1.0 and Tls1.1 from the default on Linux machines where OpenSSL 1.1 and above is used. The .NET PR is https://github.com/dotnet/runtime/pull/40746",
      "created_at": "2020-09-18T16:23:33Z",
      "updated_at": "2020-09-18T16:23:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks! Do you team to collect such by-design changes? It would be nice to see its in Release notes for 7.1 GA (I hope this reduce \"false\" feedbacks from PowerShell users and helps adoption to the new PowerShell version.).",
      "created_at": "2020-09-18T16:42:05Z",
      "updated_at": "2020-09-18T16:42:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov The breaking changes will all be documented in https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.1-5.0, though the TSL one is not yet documented.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.1-5.0\">Breaking changes, version 3.1 to 5.0 - .NET Core</a></strong></div><div>Lists the breaking changes from version 3.1 to version 5.0 of .NET, ASP.NET Core, and EF Core.</div></blockquote>",
      "created_at": "2020-09-19T19:05:33Z",
      "updated_at": "2020-09-19T19:05:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "After grappling with this issue for some time, I'm going to mark the tests that are currently failing as pending. We now expect the particular command to fail on Linux due to the configuration of both .NET 5 and the test environment, and I think it should be fixed as a patch to RC2. As such I'll open an issue to track fixing the tests and possibly PowerShell's own error messages (although after spending some time looking into it, I'm not sure how we do the latter reliably).",
      "created_at": "2020-09-21T19:30:39Z",
      "updated_at": "2020-09-21T19:30:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov, @benaadams regarding single file, we don't want to take such a big change for an RC (which means not in 7.1).  Certainly something we would look at for 7.2.  File trimming would not work for PowerShell as it exists today as PowerShell is a platform for scripts that expect as many APIs as possible.  As Ilya noted, it may be useful when we make more progress on minimal PowerShell where scripts that need .NET APIs would install those assemblies with PowerShellGet 3.x.",
      "created_at": "2020-09-21T23:30:38Z",
      "updated_at": "2020-09-21T23:30:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is a milestone should be for the PR and follow PRs?",
      "created_at": "2020-09-24T05:59:36Z",
      "updated_at": "2020-09-24T05:59:36Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "\r\n>  File trimming would not work for PowerShell as it exists today as PowerShell is a platform for scripts that expect as many APIs as possible\r\n\r\n@SteveL-MSFT I am not agree when it comes to old API. Why blacklist things when it could be remove at source ?\r\n\r\nhttps://github.com/PowerShell/underhanded-powershell\r\n\r\nI don't want this\r\n\r\n```\r\n# Windows/v7.1.0-preview.7\r\n[Microsoft.VisualBasic.Interaction]::InputBox(\"Old stuff ?\", \"VBonCore\", \"Yes\")\r\n```\r\n\r\nTrimming should be study from a security POV and the toolchain update to release at least a minimal edition. A PowerShell.SecureSdk project without distribution binaries is enough. \r\n\r\nA security contest is welcome ! . A rank by binaries file size with minimal binaries command compatibilty.\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/underhanded-powershell\">PowerShell/underhanded-powershell</a></strong></div><div>Underhanded PowerShell Contest Repository. Contribute to PowerShell/underhanded-powershell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-09-24T14:00:33Z",
      "updated_at": "2020-09-24T14:00:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> @SteveL-MSFT I am not agree when it comes to old API. Why blacklist things when it could be remove at source ?\r\n\r\nYeah we've discussed that and it's something we're gradually investigating as a sort of \"minimal PowerShell\".\r\n\r\nBut what's old to you is required by others -- take anything out and we'll break someone, or at the very least make their migration path significantly more difficult.\r\n\r\nBut also, my understanding is that trimming is an automatic process based on static code discovery, and PowerShell uses reflection pretty much everywhere. To make trimming work for us, we'd need to build a very large list of APIs we need to preserve from the trimming process.\r\n\r\nAs I say, it's something we're investigating gradually, since there are a number of large hurdles that we'd need to overcome to make it work.",
      "created_at": "2020-09-24T17:40:58Z",
      "updated_at": "2020-09-24T17:40:58Z"
    },
    {
      "author": "danmoseley",
      "author_association": "NONE",
      "body": "@daxian-dbw thank you for helping find those last issues in RC1 so we could fix in RC2 and avoid shipping them. The more often Powershell can pick up .NET Core, the better for us! ",
      "created_at": "2020-09-24T18:44:28Z",
      "updated_at": "2020-09-24T18:44:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-rc.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-rc.1)\n",
      "created_at": "2020-09-29T22:58:31Z",
      "updated_at": "2020-09-29T22:58:31Z"
    }
  ],
  "created_at": "2020-09-16T18:11:36Z",
  "number": 13643,
  "state": "closed",
  "title": "Update PowerShell to build against dotnet 5.0-RC.1",
  "updated_at": "2020-09-29T22:58:31Z"
}