{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3705",
  "author": "ghost",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n$data = @\"\r\n{\r\n\"firstName\": \"Bill\",\r\n\"Firstname\": \"Bob\",\r\n\"lastName\": \"Gates\"\r\n}\r\n\"@\r\n\r\n$json = $data | ConvertFrom-Json\r\n\r\nExpected behavior\r\n-----------------\r\nConvert JSON data, containing 3 pairs of key/value, with same key name \"firstName\" but with a different case:\r\n- firstName: with the letter \"f\" in lowercase and the letter \"N\" in upper case\r\n- Firstname: with the letter \"F\" in uppercase and the letter \"n\" in lowercase\r\n\r\nActual behavior\r\n---------------\r\nException thrown:\r\n\r\nConvertFrom-Json : Cannot convert the JSON string because a dictionary that was converted from the string contains the duplicated keys 'firstName' and 'Firstname'.\r\nAt line:8 char:17\r\n$json = $data | ConvertFrom-Json\r\n\r\n     CategoryInfo          : InvalidOperation: (:) [ConvertFrom-Json], InvalidOperationException\r\n     FullyQualifiedErrorId : DuplicateKeysInJsonString,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n\r\n\r\nAs PowerShell is case insensitive, it considers the second key \"Firstname\", with a different case, as a duplicate key.\r\nJSON allows to have same key name but with different case\r\n\r\nEnvironment data\r\n----------------\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.1066\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.1066\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1",
  "closed_at": "2017-12-12T01:01:45Z",
  "comments": [
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "[https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088237-duplicate-keys-error-with-convertfrom-json](url)",
      "created_at": "2017-05-05T13:01:04Z",
      "updated_at": "2017-05-05T13:01:04Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Workaround found using .Net method DeserializeObject (JavaScriptSerializer):\r\n\r\n[void][System.Reflection.Assembly]::LoadWithPartialName(\"System.Web.Extensions\")\r\n$json = (New-Object -TypeName System.Web.Script.Serialization.JavaScriptSerializer -Property @{MaxJsonLength=67108864}).DeserializeObject($data)\r\n\r\n(source: http://wahlnetwork.com/2016/03/15/deserializing-large-json-payloads-powershell-objects/)",
      "created_at": "2017-12-07T16:37:16Z",
      "updated_at": "2017-12-08T09:30:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "You must use `-AsHashTable` to support this usage.  The error message has been updated to indicate this if you try this with latest PSCore6.",
      "created_at": "2017-12-12T01:01:45Z",
      "updated_at": "2017-12-12T01:01:45Z"
    },
    {
      "author": "StingyJack",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry but this needs to be reopened as its not fixed. Using -AsHashTable does address the error, but it doesn't make the output usable either. ",
      "created_at": "2019-05-24T18:19:09Z",
      "updated_at": "2019-05-24T18:19:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@StingyJack can you expand on what you mean?",
      "created_at": "2019-05-24T18:23:08Z",
      "updated_at": "2019-05-24T18:23:08Z"
    },
    {
      "author": "StingyJack",
      "author_association": "CONTRIBUTOR",
      "body": "Json is case sensitive (as is .NET). The current problem I have is an ElasticSearch index mapping (`GET /indexname/_mappings` ), Its possible to have mappings with a \"DocumentURL\" and a \"documentUrl\" field existing at the same level and it be a legal json payload.  \r\n\r\nIf I use `Invoke-WebRequest` to get the mappings, and call `$response.Content | ConvertFrom-Json)` I get the duplicate error mentioned in the OP.  if I add the `-AsHashTable` parameter I get...\r\n\r\n``` json\r\n{\r\n  \"_doc\": {\r\n    \"properties\": {\r\n      \"documentUrl\": \"System.Collections.Hashtable\",\r\n      \"ExceptionId\": \"System.Collections.Hashtable\",\r\n      \"ExceptionType\": \"System.Collections.Hashtable\",\r\n      \"FullText\": \"System.Collections.Hashtable\",\r\n      \"DocumentURL\": \"System.Collections.Hashtable\",\r\n     etc.\r\n```\r\n... which is not very useful when I'm expecting to be able to navigate to the values easily and without a bunch of `[\"key\"]`-ing.\r\n",
      "created_at": "2019-05-24T19:16:45Z",
      "updated_at": "2019-05-24T19:16:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You need to set the `-Depth` parameter to enable it to convert items beyond the default depth limit of 2. :)",
      "created_at": "2019-05-24T21:37:29Z",
      "updated_at": "2019-05-24T21:37:38Z"
    },
    {
      "author": "daveneeley",
      "author_association": "NONE",
      "body": "These design choices seem to be add at odds with each other. Adding `-AsHashTable` seems to have been done to preserve backwards compatibility with PS5. BUT, `-depth` with a default limit of 2 was also added, which breaks backwards compatibility anyway.",
      "created_at": "2019-07-04T21:45:50Z",
      "updated_at": "2019-07-04T21:45:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`ConvertFrom-Json` has a default depth of 1024 which should be sufficient for most cases.  `ConvertTo-Json` has a default depth of 2 due to some .NET types having recursive properties.",
      "created_at": "2019-07-05T15:47:23Z",
      "updated_at": "2019-07-05T15:47:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, that and some of the CIM / WMI objects can get ridiculously huge even with a depth of 2, so making it any bigger by default would be veeery tricky.\r\n\r\nWould be nice if there was a simple way to detect recursive props but it can be rather difficult at times",
      "created_at": "2019-07-05T16:21:56Z",
      "updated_at": "2019-07-05T16:21:56Z"
    },
    {
      "author": "jbpAtEy",
      "author_association": "NONE",
      "body": "I'm sorry but @StingyJack is correct. The solution here is a work around at best. As the JSON RFC, https://tools.ietf.org/html/rfc8259, states, the characters are converted to numerics for evaluation, which implies that A and a are different, and thus case sensitivity is supported in JSON. Given this situation, there is no way we can say that a JSON Object Support without support for case sensitivity is supporting JSON in full. Given the additional information from @StingyJack , this issue is not resolved. a work around is stated. This should still be open and should at some point be fixed.\n\n<blockquote><img src=\"/images/rfc.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://tools.ietf.org/html/rfc8259\">RFC 8259 - The JavaScript Object Notation (JSON) Data Interchange Format</a></strong></div></blockquote>",
      "created_at": "2019-08-23T13:37:48Z",
      "updated_at": "2019-08-23T13:37:50Z"
    },
    {
      "author": "arkadios",
      "author_association": "NONE",
      "body": "Dear Collaborators, bots, MS folks and @SteveL-MSFT,\r\nForgive me if I am missing something, but this issue is still relevant (today, 2020-08-23, Win10, Powershell v5.1.18362.752).\r\nThis has not been resolved. And part from whether this can be resolved or not, this issue should be open, not closed.  \r\n\r\nI have searched for other ConvertFrom-Json posts, but could not find any other posts describing this \"anomaly\" .\r\n\r\n**'{ \"Id\":\"value1\", \"ID\":\"value2\" }' | ConvertFrom-Json** \r\nresults in error:\r\n**ConvertFrom-Json : Cannot convert the JSON string because a dictionary that was converted from the string contains the \r\n duplicated keys 'Id' and 'ID'.**\r\nwhile expected behavior should be different.\r\n\r\na function that claims to be able to convert from json should be able to do that with a well designed json object. \r\n\r\nplease re-open\r\n\r\ntnx @NotCricri for the workaround\r\n",
      "created_at": "2020-08-23T22:15:34Z",
      "updated_at": "2020-08-23T22:15:34Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Keep in mind! Window PowerShell 5.x is complete, and only security updates may be applied. \r\nAll development efforts are now on PowerShell 7 moving forward.\r\n\r\n:) \r\n",
      "created_at": "2020-08-24T15:11:18Z",
      "updated_at": "2020-08-24T15:11:18Z"
    },
    {
      "author": "arkadios",
      "author_association": "NONE",
      "body": "Tnx @MaximoTrinidad I will keep that in mind :) \r\nThis a nice moment (for me) to start using PS7... curious.\r\n\r\n",
      "created_at": "2020-08-24T15:42:08Z",
      "updated_at": "2020-08-24T15:42:08Z"
    }
  ],
  "created_at": "2017-05-05T12:59:30Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 3705,
  "state": "closed",
  "title": "ConvertFrom-Json does not handles same keys with different case (but JSON is case sensitive)",
  "updated_at": "2020-08-24T15:42:08Z"
}