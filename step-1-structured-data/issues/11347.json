{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11347",
  "author": "KirkMunro",
  "body": "When working with `-PipelineVariable` and variable breakpoints, I discovered that there are far too many updates to PipelineVariable happening.\r\n\r\nIf you review the reproduction scenario below, you'll see that pipeline variables are written to twice per object emitted from a pipeline, plus once for each additional pipeline statement beyond the first. Pipeline variables should be set once per object emitted, and cleared using a fast, internal method that doesn't result all of the extra work that is associated with setting a variable.\r\n\r\nThe main culprits seems to be the [`System.Management.Automation.Internal.Pipe.RemovePipelineVariable` method](https://github.com/PowerShell/PowerShell/blob/d80154430d600a52a1d1e3a9f3ecf032b36185d4/src/System.Management.Automation/engine/Pipe.cs#L278-L285). It sets the variable to null before removing it. Clearing the variable before removing it is the right thing to do; however, I believe this should be done with a new, internal `System.Management.Automation.PSVariable.Clear()` method rather than simply using the set accessor, because the set accessor internally invokes `SetValue`, which has a lot more work associated with it, including checking for and triggering write breakpoints if there are any. A new `Clear()` method could simply assign the value to null to allow for garbage collection to come around when appropriate, without all of the extra work that `SetValue` includes.\r\n\r\nIf you compare this with `Remove-Variable`, that cmdlet does not trigger any write breakpoints set on the variable as the variable is removed. `-PipelineVariable` functionality should not trigger breakpoints either.\r\n\r\nI haven't figured out yet if that issue is also the issue for the \"leading\" initialization of the variable to null, but it could be the cause for both.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nSet-PSBreakpoint -Variable foo -Mode write -Action {Write-Host \"Write foo: ${foo}!\" -ForegroundColor Cyan}\r\nGet-Date -PipelineVariable foo | ForEach-Object {$_} -PipelineVariable foo | ForEach-Object {$_} -PipelineVariable foo\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nWrite foo: 12/15/2019 11:37:54!\r\nWrite foo: 12/15/2019 11:37:54!\r\nWrite foo: 12/15/2019 11:37:54!\r\n\r\nDecember 15, 2019 11:37:54 AM\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nWrite foo: !\r\nWrite foo: !\r\nWrite foo: 12/15/2019 11:37:54!\r\nWrite foo: 12/15/2019 11:37:54!\r\nWrite foo: 12/15/2019 11:37:54!\r\n\r\nDecember 15, 2019 11:37:54 AM\r\nWrite foo: !\r\nWrite foo: !\r\nWrite foo: !\r\n```\r\n\r\n# Environment data\r\n\r\nCustom build of latest PowerShell (but I haven't updated my tags yet since preview 6 dropped).\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.5-124-g70828b4a46b384bc756c934d54451a275c0c9ce2\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With:\r\n```powershell\r\nSet-PSBreakpoint -Variable foo1 -Mode write -Action {Write-Host \"Write foo1: ${foo1}!\" -ForegroundColor Cyan}\r\nSet-PSBreakpoint -Variable foo2 -Mode write -Action {Write-Host \"Write foo2: ${foo2}!\" -ForegroundColor Cyan}\r\nSet-PSBreakpoint -Variable foo3 -Mode write -Action {Write-Host \"Write foo3: ${foo3}!\" -ForegroundColor Cyan}\r\nGet-Date -PipelineVariable foo1 | ForEach-Object {$_} -PipelineVariable foo2 | ForEach-Object {$_} -PipelineVariable foo3\r\n```\r\nI don't see any extra assigments:\r\n```\r\n  ID Script                      Line Command                     Variable                   Action\r\n  -- ------                      ---- -------                     --------                   ------\r\n   1                                                              foo1                       Write-Host \"Write foo1: $\u2026\r\n   2                                                              foo2                       Write-Host \"Write foo2: $\u2026\r\n   3                                                              foo3                       Write-Host \"Write foo3: $\u2026\r\nWrite foo1: 12/16/2019 00:03:06!\r\nWrite foo2: 12/16/2019 00:03:06!\r\nWrite foo3: 12/16/2019 00:03:06!\r\n\r\nDisplayHint : DateTime\r\nDate        : 16.12.2019 0:00:00\r\nDay         : 16\r\nDayOfWeek   : Monday\r\nDayOfYear   : 350\r\nHour        : 0\r\nKind        : Local\r\nMillisecond : 503\r\nMinute      : 3\r\nMonth       : 12\r\nSecond      : 6\r\nTicks       : 637120513865035251\r\nTimeOfDay   : 00:03:06.5035251\r\nYear        : 2019\r\nDateTime    : 16 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2019 \u0433. 0:03:06\r\n\r\nWrite foo1: !\r\nWrite foo2: !\r\nWrite foo3: !\r\n```",
      "created_at": "2019-12-15T19:09:05Z",
      "updated_at": "2019-12-15T19:09:05Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "There are three extra assignments at the bottom of your output, when PowerShell internally nullifies the value. Nullifying the PV value as the variable is being cleaned up should not result in variable breakpoints being triggered, just as they are not triggered when you invoke `Remove-Variable`.",
      "created_at": "2019-12-16T18:57:43Z",
      "updated_at": "2019-12-16T18:57:43Z"
    }
  ],
  "created_at": "2019-12-15T16:04:20Z",
  "labels": [
    "Issue-Bug",
    "WG-Interactive-Debugging"
  ],
  "number": 11347,
  "state": "open",
  "title": "Pipeline variable is updated way too many times",
  "updated_at": "2020-01-31T12:21:05Z"
}