{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2589",
  "author": "powercode",
  "body": "Fixes #2567 \r\n\r\nUsing the value of a variable as a last resort when trying to infer the type of a variable expression.",
  "closed_at": "2016-11-16T12:53:15Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@powercode**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-11-02T15:23:45Z",
      "updated_at": "2016-11-02T15:23:45Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Cool. Reworking it.\n",
      "created_at": "2016-11-02T16:00:31Z",
      "updated_at": "2016-11-02T16:00:31Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "New attempt. Eager to learn about better ways to do this.\n\n``` powershell\n$p = gps\n$p | % <tab>\n$p[0] | % <tab> \n$p.Where{$true} | sort BasePriority | where Description | % <Tab> \n```\n\nnow works.\n",
      "created_at": "2016-11-02T22:16:42Z",
      "updated_at": "2016-11-03T11:14:13Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I wonder if the right thing to do here is the give the CompletionContext a property TrySafeEval, and have CommandExpressionAst check if it should try a safeeval when inferring it's type.\n",
      "created_at": "2016-11-03T12:44:20Z",
      "updated_at": "2016-11-03T12:44:20Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I wonder if the key here is \n\n> GetInferredType shouldn't **require** a runspace\n\nI think it will be impossible to cover a lot of scenarios if `GetInferredType`can't ever use a runspace.\nI understand that there are situations when this limitation may be necessary, but it will limit what can be deduced by type inference.\n\nIf the `GenInferredType`methods could conditionally use a runspace (determined by the context passed in) we could have the best of both worlds.\n\nVariableExpressions, InvokeMemberExpressions, IndexExpression and probably others all depend on the possibility to query the current runspace.\n\n@lzybkr How do you feel about a property on the context, or a parameter on GetInferredType to indicate if runspace use is allowed when inferring type?\n\nOtherwise it will be hard to not end up with lots of special cases that has to be solved in hacky ways.\n\nMy PR cannot handle for example \n\n``` powershell\n$p = Get-Process\n$p | Foreach {$_.MainModule} | Foreach Com<Tab>\n```\n\nbecause it is not using the type inference, it just bypasses it for a common special case.\n",
      "created_at": "2016-11-05T14:40:03Z",
      "updated_at": "2016-11-05T14:41:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm all for a robust api that works for both static and dynamic determination of the type of an Ast, ideally one that is robust enough to make public (which `GetInferredType` is not - it works well enough, but it takes some shortcuts which can be completely wrong at times,)\n\n`GetInferredType` is already too tightly coupled to completion - and I'd like to see it move in the other direction if possible to make it more generally useful, e.g. for PSScriptAnalyzer.\n\nOne way to start is to move `GetInferredType` out of `Ast` so that the `Ast` isn't as tightly coupled to the rest of the PowerShell engine. Some tools could benefit from a parser decoupled from the rest of the PowerShell engine.\n",
      "created_at": "2016-11-07T23:05:41Z",
      "updated_at": "2016-11-07T23:05:41Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I agree. The dependency from the AST to CompletionContext is kind of strange even though that was a convenient place to put it. \nIs type inference generally useful? I.E. in other places than completion?\n",
      "created_at": "2016-11-14T23:25:28Z",
      "updated_at": "2016-11-14T23:25:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Script analyzer also needs type inference. You can imagine wanting to report a warning on members that don't exist (a likely typo).\n",
      "created_at": "2016-11-14T23:31:45Z",
      "updated_at": "2016-11-14T23:31:45Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Is it a class TypeInferer with overloads for each AST? \nWhere each method is moved and transformed to take the AST as the first parameter?\n\n```\nclass TypeInferer{\n   public TypeInferer(SomeContextOtherThanCompletionContext context)\n   public IEnumerable<PSTypeName> GetInferedType(VariableExpressionAst ast)...\n   public IEnumerable<PSTypeName> GetInferedType(InvokeMemberExpressionAst ast)...\n   ...\n}\n```\n",
      "created_at": "2016-11-15T14:31:41Z",
      "updated_at": "2016-11-15T14:31:41Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We use the GoF `Visitor` pattern to \"add\" virtual methods to the `Ast`.\n\nYou can see many examples if you look at implementations of `ICustomAstVisitor2`. Note that it's often useful to simply derive from `DefaultCustomAstVisitor2` so you can skip implementing all of the methods.\n\nNote that `ICustomAstVisitor2` is very different than `AstVisitor2` which actually walks the tree for you, calling you for each node in the Ast.\n",
      "created_at": "2016-11-16T05:26:08Z",
      "updated_at": "2016-11-16T05:26:08Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I will close this pull request, and open a new one with an implementation based on what @lzybkr  suggested, i.e. a ICustomAstVistitor2 based implementation.\n",
      "created_at": "2016-11-16T12:53:15Z",
      "updated_at": "2016-11-16T12:53:15Z"
    }
  ],
  "created_at": "2016-11-02T15:23:40Z",
  "number": 2589,
  "state": "closed",
  "title": "Tab completion of  variable expression based on the value of the variable",
  "updated_at": "2016-11-16T12:53:15Z"
}