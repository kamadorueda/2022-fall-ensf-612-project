{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17182",
  "author": "Raffaello",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n1. creating a PSCmdlet, even just an \"hello world!\" like, but writing the VT100 escape code to query the device (`\\x1B[0c`) \r\n2. reading the terminal response from the Escape code.\r\n3. writing a test for it (optionally assigning the output to `TestContext`)\r\n4. this will trigger `'Host.UI.RawUI.KeyAvailable' threw an exception of type 'System.Management.Automation.Host.HostException'`\r\n\n\n### Expected behavior\n\n```console\nIn this case there is no user input involved, but it is just a check if a key has been pressed. (Ok, implicitly can be considered that a user pressed a key, but this is not true anymore with escape codes)\r\n\r\nAlso on following on that, the `ReadKey` method won't be available if wants to interoperate with EscapeCodes. (when those are not supported won't read anything)\r\n\r\n---\r\n\r\nIt is expected to have at least an alternative method that doesn't throw if called, but can allow the normal execution of that code path, without wrapping it in a `try/catch` block.\r\n\r\nfor this specific case, when query the device with escape codes, worst case there won't be any response.\r\nbut there won't be an exception neither.\n```\n\n\n### Actual behavior\n\n```console\nIn the context of running test (automation) even just to check if a key has been pressed, in this case could be a response for the VT100 not a user, instead throws like if it is supposed to ask user input.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\n.\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-04-23T12:11:33Z",
  "comments": [
    {
      "author": "Raffaello",
      "author_association": "NONE",
      "body": "The alternative method for this specific case is to use `Console.ReadKey()` and `Console.KeyAvailable` .\r\n\r\nNot sure if it is ok to use them in a `PSCmdlet`, but it looks like it works with the same behaviour of `RawUI` methods, changing the return type only of the key read.\r\n\r\nSo i am closing this issue.",
      "created_at": "2022-04-23T12:11:33Z",
      "updated_at": "2022-04-23T12:11:33Z"
    }
  ],
  "created_at": "2022-04-23T12:04:47Z",
  "number": 17182,
  "state": "closed",
  "title": "[PS7.2] PSCMdLet: when checking if there are any input key in the buffer ['Host.UI.RawUI.KeyAvailable' threw an exception of type 'System.Management.Automation.Host.HostException']",
  "updated_at": "2022-04-23T12:11:35Z"
}