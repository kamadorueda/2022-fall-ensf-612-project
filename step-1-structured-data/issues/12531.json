{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12531",
  "author": "Conan1989",
  "body": "# Summary of the new feature/enhancement\r\nHi,\r\nRequest a native cmdlet for getting a hash value (MD5, SHA256, etc) of an inputted string.\r\neg - something like Get-FileHash  ... but not file based\r\n\r\n\r\njustification. I've seen requirements for such a thing around the place, but with incorrectly implemented (hopefully the below isn't too far off) and sub optimal solutions. eg bad code from SE and write to disk, hash from disk with Get-FileHash\r\n\r\n# Proposed technical implementation details (optional)\r\nsomething like the following maybe\r\n\r\n```powershell\r\nfunction Get-StringHash {\r\n    [CmdletBinding()]\r\n    [OutputType([System.String])]\r\n    param (\r\n        [ValidateScript({ ![System.String]::IsNullOrEmpty($PSItem) })][System.String]$inputString,\r\n        [ValidateSet('MD5', 'SHA1', 'SHA256', 'SHA384', 'SHA512')][System.String]$hashAlgo\r\n    )\r\n    process {\r\n        $ErrorActionPreference = 'stop'\r\n        Set-StrictMode -Version 'latest'\r\n\r\n        $inputBytes    = [System.Text.Encoding]::UTF8.GetBytes($inputString)\r\n        $hashAlgorithm = [System.Security.Cryptography.HashAlgorithm]::Create($hashAlgo)\r\n        # [System.Security.Cryptography.HashAlgorithmName]\r\n\r\n        return ( [System.BitConverter]::ToString( $hashAlgorithm.ComputeHash($inputBytes) ) -replace '-' )\r\n    }\r\n}\r\n\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Provide a default value or validation for $hashAlgo, otherwise you'll get\r\n```\r\nGet-StringHash : You cannot call a method on a null-valued expression.\r\nAt line:1 char:1\r\n+ Get-StringHash $s\r\n+ ~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [Get-StringHash], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull,Get-StringHash\r\n```",
      "created_at": "2020-04-30T11:56:13Z",
      "updated_at": "2020-04-30T11:56:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Conan1989 Our workflow is that you should create RFC in PowerShell-RFC repository for discussion and voting.\r\nBut it is already https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0018-Get-StringHash.md",
      "created_at": "2020-04-30T14:18:56Z",
      "updated_at": "2020-04-30T14:22:56Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "I have an implementation of Get-StringHash that is used by many of our internal powershell modules.  For a built-in implementation to be useful in our organization it would need to implement the whole matrix of a significant number of common input (strings, byte arrays, etc), algorithms (CRC, MD5, SHA256, etc) and output formats (hex, base64, ascii, etc).  \r\n\r\nFor most of our use cases we need the property `($s1 | Get-StringHash) -eq ( $s2 | Get-StringHash)` to hold for all cases where `$s1` and `$s2` are the \"same\".  I suspect that is the property needed by many users looking to convert a string to a hash.  I have found a significant number of edge cases related to text encoding, EOLs, etc on both the input and output side that prevent that property from holding across PowerShell, .NET, and OS versions and editions.  Our organization tests for that property across the subset of combinations for which we need the property to hold and make changes to our implementation to correct for edge cases.  Doing that for all possible conditions seems like a substantial undertaking.  \r\n\r\nI don't think the sort of testing to make that property hold is occurring for other PowerShell commands currently; there are combinations of PowerShell versions where `Set-Content` and `Get-Content` roundtrips aren't isomorphic, for example.  So if you write a string to a file with PowerShell 5 and read it with PowerShell 7 you can end up with significant observable differences some of which break equality.  It's not obvious that there is a conversion that completely corrects for the differences.  `Get-StringHash` would add another layer to that problem.",
      "created_at": "2020-04-30T14:49:04Z",
      "updated_at": "2020-04-30T14:49:04Z"
    },
    {
      "author": "Conan1989",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @Conan1989 Our workflow is that you should create RFC in PowerShell-RFC repository for discussion and voting.\r\n> But it is already https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0018-Get-StringHash.md\r\n\r\nThanks. Is there any way to try get some movement on that RFC? Seems it's been idle since 2017\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>",
      "created_at": "2020-05-14T01:29:10Z",
      "updated_at": "2020-05-14T01:29:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Conan1989 You can contribute and implement the RFC.",
      "created_at": "2020-05-14T04:32:12Z",
      "updated_at": "2020-05-14T04:32:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I forget about https://github.com/PowerShell/PowerShell/pull/3395",
      "created_at": "2020-05-15T13:31:03Z",
      "updated_at": "2020-05-15T13:31:03Z"
    }
  ],
  "created_at": "2020-04-30T09:34:11Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 12531,
  "state": "open",
  "title": "Get-StringHash (something like Get-FileHash but not file based)",
  "updated_at": "2020-05-15T13:31:03Z"
}