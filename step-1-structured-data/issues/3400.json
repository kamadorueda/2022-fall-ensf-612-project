{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3400",
  "author": "daxian-dbw",
  "body": "With #3398, we are now building powershell core via MSBuild with our building script. However, it seems not working properly in Visual Studio 2017. We need to make it possible to build powershell in VS2017 as well.",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Should we think about what is a Configuration and what is a Platform?\r\n\r\nLinux is a config today, but it seems more reasonable to treat it as a platform.\r\n\r\nI have a branch, https://github.com/powercode/PowerShell/tree/vs2017-build,  where I can build with vs2017, but it is untested on Linux/Mac and from the command line.",
      "created_at": "2017-03-24T13:32:52Z",
      "updated_at": "2017-03-24T13:32:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The term \"Platform\" sounds like the right one to use, but it seems always indicating the CPU architecture based on my limited MSBuild experience, for example, `Any CPU`, `x64`, and `x86`.\r\n\r\nAnd we have another problem -- with the current project files, `dotnet pack` will generate a NuGet package that only contains assemblies built for windows, which cannot be used reliably on Linux. I wonder if it's possible that we can change the .csproj somehow to make `dotnet pack` produce a single NuGet package that contains both win and unix assemblies. #3417 is tracking it.\r\n\r\nIs changing to \"Platform\" a possible direction? Do you have some resources on the differences between \"Configuration\" and \"Project\" in the new MSBuild from .NET Core SDK?",
      "created_at": "2017-03-24T23:46:00Z",
      "updated_at": "2017-03-24T23:46:00Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Platform may be what we choose. LinuxX64 for example.\r\nThey are just monikers to give builders an easy way to set different settings based on Config and platform. \r\nC++ has had Win32 and x64 while .NET has used AnyCPU, x86 and x64. But I think this traditionally has been Windows specific, so instead of saying Win-x86, they just went with the shorter alternative.\r\nI haven't had much time to dig into the changes with the new msbuild. Seems nice and clean though.",
      "created_at": "2017-03-27T07:50:00Z",
      "updated_at": "2017-03-27T07:50:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder how .Net Core resolve the same for itself packages? Can we use the same?",
      "created_at": "2017-03-27T10:15:21Z",
      "updated_at": "2017-03-27T10:15:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode Could you make PR with your vs2017 sln file?",
      "created_at": "2017-03-28T14:35:37Z",
      "updated_at": "2017-03-28T14:35:37Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Please, please, this. I am loathe to return to building software like it's 1993. I already had that life. I just wasted three hours trying to make anything work at all in VS 2017 15.3-pre (supposedly it understands net standard 2.x) and it's just a confusing mess. ",
      "created_at": "2017-06-01T02:32:23Z",
      "updated_at": "2017-06-01T02:32:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I've already started taking little steps in this direction, but @daxian-dbw  too busy these days to do the PR review.",
      "created_at": "2017-06-01T03:24:25Z",
      "updated_at": "2017-06-01T03:24:25Z"
    },
    {
      "author": "BobbyCannon-Quantros",
      "author_association": "NONE",
      "body": "It's been a few months... any progress on this?",
      "created_at": "2017-09-13T19:46:45Z",
      "updated_at": "2017-09-13T19:46:45Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Ping pong poong.\r\n\r\nI (and many others I'm sure) want it to build in VS 2017 so we can use ReSharper and other tools.",
      "created_at": "2017-10-18T18:32:40Z",
      "updated_at": "2017-10-18T18:32:40Z"
    },
    {
      "author": "BobbyCannon-Quantros",
      "author_association": "NONE",
      "body": "Plus + 1000 @oising! You know... use Visual Studio. :)",
      "created_at": "2017-10-18T18:36:16Z",
      "updated_at": "2017-10-18T18:36:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This isn't something we're prioritizing for 6.0.0, but we can add it to the 6.1.0 queue although that itself is growing quite large...",
      "created_at": "2017-10-19T01:39:39Z",
      "updated_at": "2017-10-19T01:39:39Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I just noticed that if I add a property\r\n```\r\n<TargetFramework>$(TargetFramework)</TargetFramework>\r\n```\r\nthen visual studio understands the project formats.\r\n\r\nSorry that I haven't been pushing this. So silly, I make it work locally, but never get around to pushing it.\r\n",
      "created_at": "2017-10-20T07:20:32Z",
      "updated_at": "2017-10-20T07:20:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode If you haven't free time - put a link on the file so everybody can grab, test and push PR.",
      "created_at": "2017-10-20T07:30:43Z",
      "updated_at": "2017-10-20T07:30:43Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "That seems to be needed in the csproj files. Seems like a bug in visual studio, since the property is there, but via an import. \r\nAdding the strange no-op property seems to work around it, but maybe we should push for a fix in VS too.\r\n\r\nI also ran into build issues from the command line where the latest VS version comes with tool version 2.0.2, and we require 2.0.0. Maybe we should be a bit more relaxed in the version checks?\r\n",
      "created_at": "2017-10-20T08:03:36Z",
      "updated_at": "2017-10-20T08:03:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps #5118 can help with version checks.",
      "created_at": "2017-10-20T08:17:18Z",
      "updated_at": "2017-10-20T08:17:18Z"
    },
    {
      "author": "sharpninja",
      "author_association": "NONE",
      "body": "Just pulled the current master yesterday and opened in VS 2019.  All goes well except that the RESX files are not detected at all by either VS or dotnet doing a build from VS.",
      "created_at": "2019-10-29T20:09:43Z",
      "updated_at": "2019-10-29T20:09:43Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "I did the same, and it did not work at all in VS2019. The project folders all show in project explorer but none is loaded, and there is no reason given why. \r\n\r\nSooooo...what are the prerequisites for loading and compiling powershell.sln in VS2019? What are settings that need to be in place in VS2019? That's probably a 10min effort to put together. The current documentation is super old and gives no details whatsoever.\r\n",
      "created_at": "2019-11-15T18:06:32Z",
      "updated_at": "2019-11-15T18:06:32Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I never build PowerShell in Visual Studio. We have automation for that. ;)\r\n\r\nI do the following whenever I want to work in PowerShell code:\r\n\r\n1. Open PowerShell.exe (or pwsh if you like -- I've just always done this part from PowerShell.exe).\r\n1. Browse into the root of your local PowerShell repository git clone.\r\n1. `git remote add upstream https://github.com/PowerShell/PowerShell` (if you haven't already done this).\r\n1. If I'm in a clean state with no local uncommitted changes:\r\n    1.  `git checkout master` (switch to the master branch)\r\n    1. `git pull upstream master` (get the latest PowerShell repo changes)\r\n    1. `git push origin master` (push those changes into my fork)\r\n1. If I'm about to work on a new changeset:\r\n    1. `git checkout -B my-branch-name` (where `my-branch-name` is the name of the branch I am about to start working on, using an appropriate name -- e.g. `splat-members` for a branch where I add support for splatting members of object instances)\r\n1. If I'm about to continue working on an existing changeset:\r\n    1. `git checkout my-branch-name` (switch to my changeset branch)\r\n    1. `git merge master` (catch my branch up to master)\r\n1. `ipmo ./build.psm1`\r\n1. `Start-PSBootstrap` (I only do this the first time ever on a system, and then periodically if I need to update .NET 3.x or something -- a failed build will give you a hint when this is necessary).\r\n1. `Start-PSBuild` (with `-Clean` if I want a clean rebuild, with `-ResGen` if I want to regenerate resource string DLLs -- when and how I use these depends on which branch I'm switching from/to).\r\n\r\nOnce I've got a build complete, I'll invoke it using `pwsh-debug`, which is an alias that gets defined from this script in my profile that needs to be periodically updated when the .NET version changes:\r\n\r\n```powershell\r\n#region Define pwsh-debug, and pwsh-release aliases.\r\n\r\n$pwshClone = \"${env:USERPROFILE}/source/repos/PowerShell\"\r\nif (Test-Path -LiteralPath $pwshClone) {\r\n    foreach ($buildName in @('debug','release')) {\r\n        $buildExe = \"${pwshClone}/src/powershell-win-core/bin/${buildName}/netcoreapp3.1/win7-x64/publish/pwsh.exe\"\r\n        if (Test-Path -LiteralPath $buildExe) {\r\n            if ($Host.Name -eq 'Windows PowerShell ISE Host') {\r\n                $executionContext.SessionState.PSVariable.set(\"pwsh-${buildName}\", $buildExe)\r\n                Set-Content \"function:pwsh-${buildName}\" @\"\r\nStart-Process '$buildExe'\r\n\"@\r\n            } else {\r\n                New-Alias -Name pwsh-${buildName} -Value \"$buildExe\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#endregion\r\n```\r\n\r\nYou need to prime the pump for that to be in your profile, because if you've never built PowerShell before, you won't have the alias created, so you would need to manually dot source your profile after build to get the alias. You could alternatively use `Start-DevPowerShell` (that's part of the build module), but I never use that myself, preferring to work from a single console window.\r\n\r\nAt that point, I'll open PowerShell.sln in Visual Studio if I don't have it open already (if you use `Start-PSBuild -Clean`, you'll need to close VS first to release some file locks), invoke `$PID` in my PowerShell window to get the process ID, and then use Debug | Attach to Process in Visual Studio to attach to that process and start debugging.\r\n\r\nSome folks will prefer just working in Visual Studio, but given how much PowerShell is about automation/command line, I find this process suits my needs perfectly.",
      "created_at": "2019-11-15T18:26:07Z",
      "updated_at": "2019-11-15T18:26:07Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "Thanks so much for your details. Very helpful and constructive information! Will try over the WE.\r\n\r\nI really would prefer to work on PowerShell code just like I work on *any other* software. Building is no big deal in VS (a matter of a click), so I wouldn't really consider this a need for automation, rather something that in VS is typically absolutely transparent to me, and with the powershell sources suddenly turns into a series of crucial steps to consider ;-)\r\n\r\nMy problem starts that when I open the sln in VS2019 OOB, it won't load a thing, and I have no clue why. I can't open any source.\r\n\r\nI'll dig through your checklist and am very grateful for it, probably things will resolve with your help. \r\n\r\nUltimately, though, I would expect powershell.sln to open and run *without any tricks and workarounds* in MSFT's premier dev environment VS. \r\n\r\nI might reconsider once I get the tool chain working that you describe. Meanwhile, I believe the more 'extra considerations' and 'rerequisite settings' are required to simply compile the project, the worse it is. It should be a friendly and easy first encounter, and \"just work\" for anyone used to program and compile software in VS.\r\n",
      "created_at": "2019-11-15T18:40:19Z",
      "updated_at": "2019-11-15T18:40:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TobiasPSP some things required for building pwsh are added by the build process itself, but I'm not sure why VS would be completely unable to load any of the files.\r\n\r\nI think some of the folx on the PowerShell team still work in Visual Studio, so perhaps they can assist better here. I tend to work in VS Code most of the time, so I haven't seen the issues you're running into. :(",
      "created_at": "2019-11-15T18:54:07Z",
      "updated_at": "2019-11-15T18:54:07Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "Many thanks. VS2019 can load the project and shows the subfolders, but I cannot see any files, and VS2019 says the projects could not be loaded. It is not saying why. Yes it would be awesome if someone who is actually using VS2019 to work on powershell could chime in, and possibly update the docs.\r\n\r\nI imagine once I wrap my head around the build process as you and most of the team got used to, I might find it equally appealing. \r\n\r\nMost professional devs (coming from the Windows side) use VS and their personal set of dev tools, so to welcome them, IMHO it is important to either provide a seamless dev experience using VS2019 OOB, or provide sufficient up-to-date information for new devs to quickly find their way into the build process.\r\n\r\nThe more people work with this project, the better for all. I do know of quite a few Windows devs who really struggled with the way how powershell is built/how it cannot be built from VS. Do you know of someone specifically that is using VS to build powershell.sln that I could approach?\r\n\r\nI am more than glad to help updating the documentation while I work my way into building with VS and would gladly serve as test candidate.",
      "created_at": "2019-11-16T09:04:26Z",
      "updated_at": "2019-11-16T09:04:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode has an experience with VS.",
      "created_at": "2019-11-16T10:53:19Z",
      "updated_at": "2019-11-16T10:53:19Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "Awesome, thx! I just contacted Staffan. Will share what I learned from him so we can update the docs.",
      "created_at": "2019-11-16T11:03:32Z",
      "updated_at": "2019-11-16T11:03:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could look how other projects like CoreFX build. Also previously MSFT team did not want to move from Build.psm1 to csproj-s and I stopped the work.",
      "created_at": "2019-11-16T11:11:25Z",
      "updated_at": "2019-11-16T11:11:25Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": ">VS2019 can load the project and shows the subfolders, but I cannot see any files, and VS2019 says the projects could not be loaded\r\n\r\nThis is confusing. It can load the project but the project cannot be loaded? What are you trying to say?\r\n\r\n>I imagine once I wrap my head around the build process as you and most of the team got used to, I might find it equally appealing.\r\n\r\nWell, I'm not on the team, but \"the process\" [as described](https://github.com/PowerShell/PowerShell/blob/master/docs/building/windows-core.md) is literally a few powershell commands. I personally had not trouble following them. I do not find the process \"appealing\" I found it normal, documented and working.\r\n\r\n>Most professional devs (coming from the Windows side) use VS and their personal set of dev tools, so to welcome them, IMHO it is important to either provide a seamless dev experience using VS2019 OOB, or provide sufficient up-to-date information for new devs to quickly find their way into the build process.\r\n\r\nI'm not sure about that. If a dev needs to be baby-sitted into making their dev enviroment comfortable for them, I would question how valueable their contribution might be. Don't get me wrong, I'm not against a proper VS2019 build process that is documented. It's just if the dev team does not _need_ it, it is quite understandable why this is not a priority, this is only natural.\r\n\r\nFor what it's worth: once you've build the solution with the documented Build.psm1 way, you can open the solution in Visual Studion 2019 and it loads without any problems at all, if you have the correct SDK installed. If you do not, it tells you so. After that the solution does build in VS. It does not do _everything_ that Build.psm1 does but it builds. You can set a break point and debug. You can make a code change and iterate. I found it quite straightforward.\r\n\r\nThank you for your desire to document what you've leared from Staffan, and good luck with that.",
      "created_at": "2019-11-16T11:19:15Z",
      "updated_at": "2019-11-16T11:19:15Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "Not babysitted but just a short info whether it is possible or not, and if so, how. Babysitting has a negative notation. We all work on this volunteering our spare time, so whatever mainstream dev env  someone is used to should be respected and covered properly in the docs.\r\n\r\nThanks for your feedback, will try the build script as a prerequisite. If that was it, then adding this one instruction to the VS section in the docs would make everyone happy. ",
      "created_at": "2019-11-16T12:08:44Z",
      "updated_at": "2019-11-16T12:09:56Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "> This is confusing. It can load the project but the project cannot be loaded? What are you trying to say?\r\n\r\nSorry for any confusion: the project folders show in VS project explorer, but no content (no files) are shown. For each folder, VS claims that \u201ethe project couldn\u2018t be loaded\u201c but provides no reason.",
      "created_at": "2019-11-16T13:36:06Z",
      "updated_at": "2019-11-16T13:36:06Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": ">Babysitting has a negative notation. \r\n\r\nYes, sorry about that, I should have avoided this turn of speech.",
      "created_at": "2019-11-16T19:53:12Z",
      "updated_at": "2019-11-16T19:53:12Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Up until a few months ago, VS worked quite well, it only required to build via the command line once (import-module ./build.psm1; start-psbuild) and from then on one could use VS to make changes and get intellisense and compilation/syntax errors, which made it a useful enough text editor comparable to vs code.\r\nA few months ago one of the csproj files stopped loading and I thought it was due to .net core 3 preview and VS being a bit behind. Still not a big issue unless you have to modify code in this area, but we should fix the project loading error. Apart from that I am happy with the level of VS support, even if it is not first class, we could do a better job at documentating what is supported in VS and what is not and known issues like the local changes in the sln file due to the way the projects are setup...\r\nI will try to see what the current behaviour with the VS preview (because we are on the .net core 3.1 preview now) and if I can fix it, it might even be a problem in VS or .net core where a certain element is not supported.",
      "created_at": "2019-11-17T17:00:28Z",
      "updated_at": "2019-11-17T17:03:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Perhaps you need to remove all other Core versions from your system and install only version coming with VS last update.",
      "created_at": "2019-11-17T18:17:28Z",
      "updated_at": "2019-11-17T18:17:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell/pull/11085 should allow VS to build pwsh although you still need to exercise the psm1 to run resgen and typegen the first time (or until types or resx change).  ",
      "created_at": "2019-11-17T18:40:30Z",
      "updated_at": "2019-11-17T18:40:30Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "In .Net Core 3 they re-implemented some of the resgen functionality but usage within the csproj from command line and VS is not working well for non-WinForms projects, I opened an issue with them but once that is done, we could potentially use the functionality baked into dotnet build soon",
      "created_at": "2019-11-17T23:18:21Z",
      "updated_at": "2019-11-17T23:18:21Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "Related: #12373",
      "created_at": "2020-04-28T22:12:20Z",
      "updated_at": "2020-04-28T22:12:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We already moved ResGen to csproj.\r\nOnly TypeGen is still out of csproj that is required for VS works well. We could do the move as only MSFT team approve this.",
      "created_at": "2020-04-29T03:43:15Z",
      "updated_at": "2020-04-29T03:43:15Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "Can TypeGen be invoked as a separate tool from the VS2019 prebuild commands configuration?",
      "created_at": "2020-09-17T23:47:05Z",
      "updated_at": "2020-09-17T23:47:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kyanha You could run Start-PSBiuld -TypeGen there. (pwsh -command ....)",
      "created_at": "2020-09-18T03:51:23Z",
      "updated_at": "2020-09-18T03:51:23Z"
    }
  ],
  "created_at": "2017-03-23T00:31:26Z",
  "labels": [
    "Area-Maintainers-Build"
  ],
  "number": 3400,
  "state": "open",
  "title": "Build powershell core in Visual Studio 2017",
  "updated_at": "2020-09-18T03:51:23Z"
}