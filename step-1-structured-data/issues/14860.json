{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14860",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe FileSystemProvider treats all reparsepoints as symlinks (files) so that trying to recursively remove a directory from OneDrive fails as it won't recurse and thus fails because the directory is not empty.  Fix is to don't treat reparse points as files if it is also a directory and also pass the recurse flag to the Directory.Remove() overload only if `-Force` is specified.\r\n\r\nThe breaking change behavior is that if you use `-Recurse -Force -Confirm` then it will now only confirm the top level folder before removing compared to the previous behavior (for a non-Onedrive folder) which prompts to confirm for every item within the folder.\r\n\r\nManually validated that removing nested non-empty folder on OneDrive works and also removing a directory symlink removes the symlink and not the target.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/9246\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [X] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [X] Experimental feature name(s): `PSForceRemoveReparsePoint`\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-02-24T18:27:26Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, there is a concern regarding breaking existing confirm behavior which prompts for every item, but ok with a minor break if `-Force` is specified.  Also a concern with side effects with other reparse point types so suggestion was to wrap this as an experimental feature",
      "created_at": "2021-02-23T21:15:02Z",
      "updated_at": "2021-02-23T21:15:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This is that rare case when several problems intersected in one place and everyone was confused. :-)\r\n\r\nCompare:\r\n![image](https://user-images.githubusercontent.com/22290914/108980016-0f1e5d00-76ad-11eb-9400-5d27623abb82.png)\r\nand\r\n![image](https://user-images.githubusercontent.com/22290914/108980050-18a7c500-76ad-11eb-8f15-1ebd5b25fbff.png)\r\n\r\nThe screenshots explicitly say that there was a bug in .Net 3. Now the bug is fixed in .Net 5.0.\r\nSo we can close #9246 as external and fixed in .Net 5.0 (PowerShell 7.1).\r\n\r\n----\r\n\r\nHow we work with OneDrive it is _another_ issue. \r\nPreviously we enhanced how we enumerate a file system to support OneDrive (and AppExecLink too). It was in IsReparsePointWithTarget() method.\r\nMore later discussion with @rjmholt is in #11331\r\n\r\nI think current fix is not right - we should change a behavior only for **non-named surrogates** - and this can not be a breaking change - it should be classified as new behavior or bug fix.\r\n\r\nRight fix is to use IsReparsePointWithTarget() and get the same behavior for OneDrive as for regular directory. ",
      "created_at": "2021-02-24T10:09:21Z",
      "updated_at": "2021-02-24T10:09:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov do you want to submit a new PR based on your proposal and I'll close this one?",
      "created_at": "2021-02-24T16:09:39Z",
      "updated_at": "2021-02-24T16:09:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Will do.",
      "created_at": "2021-02-24T17:04:40Z",
      "updated_at": "2021-02-24T17:04:40Z"
    }
  ],
  "created_at": "2021-02-20T00:31:53Z",
  "number": 14860,
  "state": "closed",
  "title": "Fix FileSystemProvider to not treat all reparsepoints as files",
  "updated_at": "2021-02-24T18:27:26Z"
}