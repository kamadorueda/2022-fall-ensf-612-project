{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6451",
  "author": "alx9r",
  "body": "I'm not sure which behavior is better, but I expected 5.1 and 6.0 to behave the same in this respect.  If this change is deliberate I would like to understand why.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$r = [System.Collections.ObjectModel.Collection[psobject]]{Write-Output $null -NoEnumerate}.Invoke()\r\n$r.item(0).GetType()\r\n```\r\n\r\nBehavior in PowerShell 5.1\r\n-----------------\r\n\r\n```none\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\Users\\un1\\Desktop\\test.ps1:2 char:1\r\n+ $r[0].GetType()\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n```\r\n\r\n```PowerShell\r\n>$PSVersionTable\r\n\r\nName                           Value                                                                    \r\n----                           -----                                                                    \r\nPSVersion                      5.1.14409.1012                                                           \r\nPSEdition                      Desktop                                                                  \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                  \r\nBuildVersion                   10.0.14409.1012                                                          \r\nCLRVersion                     4.0.30319.42000                                                          \r\nWSManStackVersion              3.0                                                                      \r\nPSRemotingProtocolVersion      2.3                                                                      \r\nSerializationVersion           1.1.0.1                                                                  \r\n```\r\n\r\nBehavior in PowerShell 6.0\r\n---------------\r\n\r\n```none\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     PSObject[]                               System.Array\r\n```\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.2                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.2                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                                                                        \r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, `Write-Output` is broken - see #5955 and #5122, and it all seems to be the result of the ill-fated #2038 PR that arose out of issue #2035.",
      "created_at": "2018-03-21T20:12:43Z",
      "updated_at": "2018-03-21T20:14:44Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Oi.  That's a messy broken business, indeed.",
      "created_at": "2018-03-21T21:26:52Z",
      "updated_at": "2018-03-21T21:26:52Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "It looks like [this change to Write-Output](https://github.com/PowerShell/PowerShell/commit/94a71b05d474c8e58aff9aebe7b183f68462a6b5#diff-5200263198736dec73310cecea2c56c0L58) is the culprit.  Copying the command from [the revision prior](https://github.com/PowerShell/PowerShell/blob/02b5f357a20e6dee9f8e60e3adb9025be3c94490/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Write-Object.cs) and renaming to `Write-Output2` seems to result in behavior consistent with PowerShell 5.1:\r\n\r\n```PowerShell\r\nAdd-Type '\r\n    using System.Management.Automation;\r\n\r\n    [Cmdlet(VerbsCommunications.Write, \"Output2\")]\r\n    public class WriteOutput2Command : PSCmdlet\r\n    {\r\n        private PSObject[] _inputObjects = null;\r\n\r\n        [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true, ValueFromRemainingArguments = true)]\r\n        [AllowNull]\r\n        [AllowEmptyCollection]\r\n        public PSObject[] InputObject\r\n        {\r\n            get { return _inputObjects; }\r\n            set { _inputObjects = value; }\r\n        }\r\n\r\n        [Parameter()]\r\n        public SwitchParameter NoEnumerate\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            if (null == _inputObjects)\r\n            {\r\n                WriteObject(_inputObjects);\r\n                return;\r\n            }\r\n\r\n            bool enumerate = true;\r\n            if (NoEnumerate.IsPresent)\r\n            {\r\n                enumerate = false;\r\n            }\r\n            foreach (PSObject inputObject in _inputObjects)\r\n            {\r\n                WriteObject(inputObject, enumerate);\r\n            }\r\n        }//processrecord\r\n    }' -PassThru | % Assembly | Import-Module\r\n\r\n$r = [System.Collections.ObjectModel.Collection[psobject]]{Write-Output2 $Null -NoEnumerate}.Invoke()\r\n$r.Item(0).GetType()\r\n```\r\n\r\noutputs\r\n\r\n```none\r\nYou cannot call a method on a null-valued expression.\r\nAt C:\\users\\un1\\Desktop\\test2.ps1:46 char:1\r\n+ $r.Item(0).GetType()\r\n+ ~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n```",
      "created_at": "2018-03-21T22:07:03Z",
      "updated_at": "2018-03-21T22:07:03Z"
    }
  ],
  "created_at": "2018-03-21T17:49:25Z",
  "number": 6451,
  "state": "open",
  "title": "Write-Output $null -NoEnumerate produces different Collection<PSObject> in 5.1 vs 6.0",
  "updated_at": "2019-06-03T17:52:31Z"
}