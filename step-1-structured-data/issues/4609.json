{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4609",
  "author": "markekraus",
  "body": "## Problem\r\n\r\nThere is currently no native cross-platform, CI independent mechanism to test Certificate Authentication in `Invoke-WebRequest` and `Invoke-RestMethod`.\r\n\r\n## Proposal\r\n\r\nCreate a docker container to house a minimal aspnetcore app to validate Client Certificate presence in calls made by `Invoke-WebRequest` and `Invoke-RestMethod`. The docker container will need a self-signed certificate, SSL/TLS configuration, and be Linux based (debian jessie?). The aspnetcore app will need to, at minimum, echo whether a Client Certificate was presented or not and possibly include details about the Client Certificate. The entire solution will need to work in both AppVeyor and Travis CI and be as CI agnostic as possible.\r\n\r\nsee #4546 ",
  "closed_at": "2017-08-31T09:30:36Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 We can work on the solution through this issue.",
      "created_at": "2017-08-17T22:05:38Z",
      "updated_at": "2017-08-17T22:05:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 I think I'm on to something. the built-in Kestrel server for ASP.NET core supports client certificates. I'm working on an small app that returns the client certificate details. The idea is that the test calls `dotnet run` on the project in a `Start-Job`, does the tests, then tears it down the job. I actually have a prototype of this working in a web browser, but `Invoke-WebRequest` and `Invoke-RestMethod` can't find a common algorithm with Kestrel. It looks like I need to enable TLS in Kestrel, but the examples I have found for doing so no longer work in 2.0.",
      "created_at": "2017-08-18T22:32:16Z",
      "updated_at": "2017-08-18T22:32:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we should use natively supported web server - Apache on CI Travis and IIS on CI AppVeyor. It requires more effort, but it makes our tests more predictable. I do not see the pressing need to make sure to use a port server.",
      "created_at": "2017-08-20T08:40:00Z",
      "updated_at": "2017-08-20T08:40:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "As an update on this, it was discovered in #4620 that Docker is not supported on macOS in Travis CI. The current approach in #4622 is to have the listener app published by `Publish-PSTestTools` like `TextExe` and then run the listener on demand using the baked in Kestrel server. This has the advantage of being much quicker.\r\n\r\nAlso, the possibility of moving all tests form HttpListener to this app is open for discussion.",
      "created_at": "2017-08-21T09:31:55Z",
      "updated_at": "2017-08-21T09:31:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@markekraus It seems worth investigating.  I would start with feature tests and if there are any issues with the approach the impact would not be blocking.  Then if it proves a good solution, we can try broadening the approach to other tests.",
      "created_at": "2017-08-21T18:03:31Z",
      "updated_at": "2017-08-21T18:03:31Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 How should I approach PR's for this? There are a bunch of feature `it`'s for both cmdlets, how should I break them up, if at all?",
      "created_at": "2017-08-21T18:11:11Z",
      "updated_at": "2017-08-21T18:11:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@markekraus Let's finish the current PR, then think about this if you don't mind?",
      "created_at": "2017-08-21T18:40:36Z",
      "updated_at": "2017-08-21T18:40:36Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 sure thing!",
      "created_at": "2017-08-21T18:42:10Z",
      "updated_at": "2017-08-21T18:42:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "in #4622 it was discovered that Client Certificate Authentication is still unavailable in macOS due to a compatibility issue between CoreFX and and macOS's implementation of curl. \r\n\r\ndotnet/corefx#19718\r\n\r\n",
      "created_at": "2017-08-22T21:03:20Z",
      "updated_at": "2017-08-22T21:03:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @JamesWTruher ",
      "created_at": "2017-08-28T22:22:10Z",
      "updated_at": "2017-08-28T22:22:10Z"
    }
  ],
  "created_at": "2017-08-17T22:02:32Z",
  "labels": [
    "WG-Quality-Test",
    "Resolution-Fixed"
  ],
  "number": 4609,
  "state": "closed",
  "title": "Create Native Test Solution for Certificate Authentication",
  "updated_at": "2017-09-04T05:22:18Z"
}