{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16431",
  "author": "FireInWinter",
  "body": "### Summary of the new feature / enhancement\n\nPowerShell version : 7.2.0 (and 7.1.5)\r\nOS: Windows 10 + Windows Server 2016\r\n\r\nSet-Clipboard doesn't really work as expected.  It seems to do a ToString() on each object instead of using the formatting information.  As such, Set-Clipboard copies formatting information to the clipboard if you use Format-Table/Format-View.  As PowerShell now only supports plain text, this seems very pointless.  I actually use clip.exe instead of Set-Clipboard as it works closer to what I would expect on Windows.  Clip.exe also gives you something like what you see if you look at the output (really old thing WYSIWYG).  I would suggest applying formatting (Out-String -Stream) first and not calling ToString().\r\n\r\nThis doesn't seems to work at all like I would expect.  It's doing a ToString on the formatting objects, which is sort of pointless.\r\n```\r\nGet-ChildItem C:\\ | Format-Table -Property LastWriteTime, FullName | Set-Clipboard\r\nGet-Clipboard\r\nMicrosoft.PowerShell.Commands.Internal.Format.FormatStartData\r\nMicrosoft.PowerShell.Commands.Internal.Format.GroupStartData\r\nMicrosoft.PowerShell.Commands.Internal.Format.FormatEntryData\r\n...\r\nMicrosoft.PowerShell.Commands.Internal.Format.FormatEntryData\r\nMicrosoft.PowerShell.Commands.Internal.Format.GroupEndData\r\nMicrosoft.PowerShell.Commands.Internal.Format.FormatEndData\r\n```\r\n\r\nHowever, clip.exe works more like what I expect.  \r\n```\r\nGet-ChildItem C:\\ | Format-Table -Property LastWriteTime, FullName | clip.exe\r\nGet-Clipboard\r\n\r\nLastWriteTime         FullName\r\n-------------         --------\r\n12/7/2019 2:14:52 AM  C:\\PerfLogs\r\n11/10/2021 8:45:01 AM C:\\Program Files\r\n11/4/2021 2:58:14 PM  C:\\Program Files (x86)\r\n1/1/2021 5:24:11 PM   C:\\Users\r\n11/9/2021 9:44:30 PM  C:\\Windows\r\n```\r\nUsing clip.exe also works without doing a Format-Table.\r\n```\r\nGet-ChildItem C:\\ | clip.exe\r\nGet-Clipboard\r\n    Directory: C:\\\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----           12/7/2019  2:14 AM                PerfLogs\r\nd-r--          11/10/2021  8:45 AM                Program Files\r\nd-r--           11/4/2021  2:58 PM                Program Files (x86)\r\nd-r--            1/1/2021  5:24 PM                Users\r\nd----           11/9/2021  9:44 PM                Windows\r\n```\r\n\r\nSet-Clipboard seems it is doing a ToString on each object and then putting that in the clipboard (basically just the FullName property).  This isn't going to be useful very often.  It would be like Export-CSV just doing a ToString() on each object (not on the individual properties).\r\n```\r\nGet-ChildItem C:\\ | Set-Clipboard\r\nGet-Clipboard\r\nC:\\PerfLogs\r\nC:\\Program Files\r\nC:\\Program Files (x86)\r\nC:\\Users\r\nC:\\Windows\r\n```\r\nI can get the same thing as Clip.exe if I use Out-String -Stream, but that isn't very nice to have to do it every time.  I have to include the -Stream parameter or it is just one string object that can have issues.\r\n```\r\nGet-ChildItem C:\\ | Out-String -Stream | Set-Clipboard\r\nGet-Clipboard\r\n    Directory: C:\\\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----           12/7/2019  2:14 AM                PerfLogs\r\nd-r--          11/10/2021  8:45 AM                Program Files\r\nd-r--           11/4/2021  2:58 PM                Program Files (x86)\r\nd-r--            1/1/2021  5:24 PM                Users\r\nd----           11/9/2021  9:44 PM                Windows\r\n```\n\n### Proposed technical implementation details (optional)\n\nSet-Clipboard should implicitly call Out-String -Stream instead of ToString() per object.  That way it is much easier to capture what you see on the screen.",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Conceptually related: `Select-String` too should apply `Out-String -Stream` implicitly: https://github.com/PowerShell/PowerShell/issues/10726#issuecomment-567628146",
      "created_at": "2021-11-10T20:34:25Z",
      "updated_at": "2021-11-10T20:34:25Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "@mklement0 Having Select-String do the same thing makes sense.  I think Set-Clipboard should be an even easier sell than that as the whole purpose is to copy plain text to the clipboard.  I frequently use Format-Table * | clip currently.  It works good and makes it easy to paste into Slack (as code).  Set-Clipboard doesn't need to worry about the performance implications of formatting the output as you don't normally put a million rows into your clipboard.  If you are doing more than a few thousand lines, you would probably be better off exporting your data a different way.  \r\n\r\n",
      "created_at": "2021-11-10T22:37:20Z",
      "updated_at": "2021-11-10T22:37:20Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "Another issue is that the color codes are copied to the clipboard as well.  As far as I can see, there really isn't a good reason to be catching those as I haven't pasted them anywhere that uses them for the color.  This includes pwsh.  I guess I can open that as a new issue though.",
      "created_at": "2022-05-03T22:26:55Z",
      "updated_at": "2022-05-03T22:26:55Z"
    }
  ],
  "created_at": "2021-11-10T17:51:01Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 16431,
  "state": "open",
  "title": "Set-Clipboard should copy data to clipboard after formatting has been applied",
  "updated_at": "2022-05-03T22:26:56Z"
}