{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5184",
  "author": "Jaykul",
  "body": "Because there are many executables (mostly of linux origin) which use stderr to write *status* messages (in addition to errors), and rely purely on exit code to indicate whether there actually is an error or not ....\r\n\r\nAs a Power<i>Shell</i> scripter, I need to be able to run an executable and **both** stream the output for sake of status updates _and_ capture the (stderr) output so I can report on it properly if there is an actual error.\r\n\r\nStart-Process doesn't support this -- it only captures to file, and if it does, it doesn't output. Additionally, since output stream redirection is limited to redirecting to `stdout` or file, I cannot redirect error to verbose on CLI apps that consistently behave this way...\r\n\r\nMy current company has contrived more than one complicated wrapper around `ProcessStartInfo` and `Diagnostics.Process` to handle the output events and so on. In fact, it seems that every company I work with above a certain level of PowerShell maturity has their own custom `Invoke-Process` or other replacement for Start-Process to try and handle this.\r\n\r\n## Start-Process should allow capturing _and also_ outputting\r\n## Start-Process should allow capturing (and reading input from) variables instead of just files",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Personally, I think we should not enhance `start-process` and instead provide ways to solve interacting with processes natively.  It seems that if we make the Variable: provider work like a file, this should solve some of your problems?\r\n\r\n```powershell\r\nsomecommand 2> variable:stderr 1> variable:stdout\r\n```\r\n\r\n`Tee-Object` doesn't work with redirection, so need to think how to redirect while still outputting...\r\n\r\nWe should also allow redirecting one stream to another stream beyond stdout like:\r\n\r\n```powershell\r\nsomecommand 2>&3\r\n```\r\n",
      "created_at": "2017-10-21T00:37:21Z",
      "updated_at": "2017-10-21T00:37:21Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT   For long running commands, this would make it look like powershell has hung.\r\n\r\nI think we need a layered approach where the lowest level converts output and errors to a tagged union of `output * string` and `error * string`. On top of that it is quite easy to layer redirection to different streams, or to capture in variables.\r\n\r\nIt also opens a path to handling more complex commands where there is mixed progress and verbose output in the different streams, and makes it quite easy to make a parser that interprets the output and direct it do the appropriate powershell stream.",
      "created_at": "2017-10-24T14:33:07Z",
      "updated_at": "2017-10-24T14:33:07Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "```C#\r\npublic class ProcessOutput {\r\n   private string _value;\r\n   public ProcessOutputKind Kind {get;}\r\n   public bool IsOutput => Kind == ProcessOutputKind.Output;\r\n   public string Error => Kind == ProcessOutputKind.Error ? _value : throw new InvalidOperationException();\r\n   public string Output => Kind == ProcessOutputKind.Output ? _value : throw new InvalidOperationException();\r\n}\r\n\r\nclass ProcessEx {\r\n   public IEnumerable<ProcessOutput> Run(..., CancelationToken cancel){\r\n         ...\r\n         foreach(processOutput item in someConcurrentQueueWithOutputAndErrors.Enumerate(cancel)) {\r\n              yield return processOutput;\r\n         }\r\n   }\r\n\r\n   private void OnError(...){\r\n         someConcurrentQueueWithOutputAndErrors.Add(new ProcessOutput(ProcessOutputKind.Error, theErrorString);\r\n   }\r\n   private void OnOutput(...){\r\n         someConcurrentQueueWithOutputAndErrors.Add(new ProcessOutput(ProcessOutputKind.Output, theErrorString);\r\n   }\r\n}\r\n```\r\n\r\nSomething similar would make it easy to use from the PowerShell side.\r\n\r\n```powershell\r\n\r\nforeach($po in ProcessEx.Run(...)){\r\n   if ($po.IsOutput){\r\n         # parse output and split into Output and Progress\r\n   }\r\n   else {\r\n        # parse error and split into for example Verbose, Warning and Error\r\n   }\r\n}\r\n\r\n```\r\n",
      "created_at": "2017-10-24T14:43:37Z",
      "updated_at": "2017-10-24T14:47:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`Start-Process` is of [limited usefulness particularly on Unix](https://github.com/PowerShell/PowerShell/issues/4521#issuecomment-324931106), so I think @SteveL-MSFT's suggestion of using direct invocation with enhanced redirections is the more promising idea to pursue, especially if you're interested in showing _ongoing_ output as well as capturing, which only makes sense with _synchronous_ execution (at least on Unix, where running in a _new terminal window_ is not an option).\r\n\r\nIf we had the ability to capture in a variable while optionally also passing output through, then I think no lower-level approach is needed.\r\n\r\nI had [previously suggested syntax `>&targetVarName`](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308433651), but I like the idea of using namespace notation (`> variable:targetVarName`)\r\n\r\nHowever, additional syntax is needed for:\r\n\r\n* optional pass-through-as-well behavior, as suggested by @SteveL-MSFT (`>|`?)\r\n\r\n* optional append-to-preexisting-variable-contents behavior (a `+` prefix might do, as with `-OutVariable` for instance).\r\n\r\nThese two behaviors would bring the redirection operators on par with the `-OutVariable` and `-ErrorVariable` common parameters.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-11-12T14:35:02Z",
      "updated_at": "2017-11-12T14:35:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S:  Asking for the ability to capture stderr lines in a variable is the subject of #4332",
      "created_at": "2017-11-12T14:40:29Z",
      "updated_at": "2017-11-12T14:40:29Z"
    }
  ],
  "created_at": "2017-10-20T22:42:18Z",
  "number": 5184,
  "state": "open",
  "title": "Start-Process should support redirecting to variable names or stream objects",
  "updated_at": "2017-11-12T14:40:29Z"
}