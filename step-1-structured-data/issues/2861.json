{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2861",
  "author": "HipCzeck",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\nSteps to reproduce\r\n------------------\r\n\r\n```\r\n# create ordered dictionary via [ordered] syntactic sugar\r\n$a = [ordered]@{}\r\n$a['Larry'] = 'Poik!'\r\n$a['Curly'] = 'Nyuk!'\r\n$a['Moe'] = 'Wise guy!'\r\n\r\n# get 2nd item from ordered hash\r\n$a[1]\r\n# returns: Nyuk!\r\n\r\n# Persist to disk\r\n$a | Export-Clixml ./tempObject.xml\r\n\r\n# Deserialize\r\n$b = Import-Clixml ./tempObject.xml\r\n\r\n# get 2nd item from rehydrated ordered hash\r\n$b[1]\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\n# returns: Nyuk!\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\n# returns: $null\r\n\r\n$a | Get-Member\r\n   TypeName: System.Collections.Specialized.OrderedDictionary\r\n...\r\n\r\n$b | Get-Member\r\n   TypeName: Deserialized.System.Collections.Specialized.OrderedDictionary\r\n...\r\n```\r\nDeserialized object does not have the full implementation of the original OrderedDictionary object.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nSerializationVersion           1.1.0.1\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nPSRemotingProtocolVersion      2.3\r\nWSManStackVersion              3.0\r\nPSVersion                      6.0.0-alpha\r\nGitCommitId                    v6.0.0-alpha.13-42-gf38d09dc6d7bf208cd78d86e1...\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n```\r\n",
  "closed_at": "2022-08-08T18:29:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@HipCzeck Could you make the test with the latest build Powershell 6.0?",
      "created_at": "2016-12-09T18:34:03Z",
      "updated_at": "2016-12-09T18:34:03Z"
    },
    {
      "author": "HipCzeck",
      "author_association": "NONE",
      "body": "I've tested in the latest nightly build 6.0.0.13 alpha.\r\n\r\nThe output is the same in the actual behaviour section above, and the Environment Data section has been updated to indicate version used.",
      "created_at": "2016-12-09T20:47:01Z",
      "updated_at": "2016-12-09T20:47:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@HipCzeck Thanks for the issue report! \r\nFeel free to use Powershell 6 everyday, make suggestions and report new issues.",
      "created_at": "2016-12-10T16:12:18Z",
      "updated_at": "2016-12-10T16:12:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The issue still exists in PowerShell Core v6.0.0-beta.4.\r\n\r\nWhat `Get-Member` reports is not the true type name; it is merely the first type name as reported by `.pstypename`, as part of PowerShell's ETS (extended type system), which typically, but not necessarily, reflects the actual .NET type - and doesn't, in this case.\r\n\r\n`$b.GetType().FullName` reveals that what was actually deserialized was a _regular_ hashtable, with _unordered_ keys (verify with `$b.Keys`), which also explains the inability to index.\r\n\r\nThe deserializer currently blindly - and incorrectly - assumes that a type that implements `IDictionary` must be a `[System.Collections.Hashtable]` instance, and therefore incorrectly \"rehydrates\" `[System.Collections.Specialized.OrderedDictionary]` instances as regular `[System.Collections.Hashtable]` instances.\r\n\r\nSee [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/serialization.cs#L5290) and [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/serialization.cs#L3955).\r\n\r\n@iSazonov: Please label this as a bug.",
      "created_at": "2017-07-28T00:45:48Z",
      "updated_at": "2019-10-11T06:46:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks for investigating this! It seems looks as Enhancement.\r\n\r\n@PaulHigin Could you please comment the Issue?",
      "created_at": "2017-07-28T05:35:47Z",
      "updated_at": "2017-07-28T05:35:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nWhile I understand that not all objects can be faithfully recreated during deserialization, this is a case where it can be done (at least with the respect to the container (collection) itself) and _should_ be done, because not doing so can lead to subtle bugs.\r\n\r\nMy _guess_ is that the serialization code was written pre-v3, when only regular hashtables were supported in PowerShell, and when ordered ones were introduced in v3, the serialization code wasn't updated accordingly.\r\n\r\n",
      "created_at": "2017-07-28T13:18:03Z",
      "updated_at": "2017-08-14T13:14:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess that if we make full review we discover another samples. We haven't full test set for serialization. We discussed an idea for remoting that we can do serialization-deserialization test for all types in PowerShell Core by connect to localhost and do the same for a fixed set from Windows PowerShell.",
      "created_at": "2017-07-28T13:37:10Z",
      "updated_at": "2017-07-28T13:37:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This certainly looks like a gap in the serialization, however, since this is an existing gap, it is an `enhancement` and something we can address in the future.",
      "created_at": "2017-08-14T13:05:41Z",
      "updated_at": "2017-08-14T13:05:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #3172.",
      "created_at": "2018-08-29T15:27:07Z",
      "updated_at": "2018-08-29T15:27:07Z"
    },
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "Related: Deserialized ordered dictionaries do not maintain the key order.",
      "created_at": "2019-10-11T06:08:53Z",
      "updated_at": "2019-10-11T06:08:53Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It looks like serialization wasn't updated to handle [ordered] after it was introduced.  As @SteveL-MSFT  mentions, this can be added at any time.",
      "created_at": "2019-10-11T15:38:57Z",
      "updated_at": "2019-10-11T15:38:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #15545, which has now been successfully released as `v7.3.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-12T00:01:32Z",
      "updated_at": "2022-08-12T00:01:32Z"
    }
  ],
  "created_at": "2016-12-08T19:15:12Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 2861,
  "state": "closed",
  "title": "Deserialized Ordered Dictionary via Import-Clixml is not numerically indexable.",
  "updated_at": "2022-08-12T00:01:32Z"
}