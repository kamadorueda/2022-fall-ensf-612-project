{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17177",
  "author": "phall-au",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nFiltering PSCustomObjects with multiple 'not equal' operators returns fewer results than expected. For example, consider the following sample code.\r\n\r\nAn object is created with multiple PSCustomObjects added containing the first and last names of users:\r\n```powershell\r\n$OldFile = @()\r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'Peter'; lastName = 'Hall'}\r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'Peter'; lastName = 'Griffin'}\r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'Peter'; lastName = 'Greenwood'}\r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'Jane'; lastName = 'Greenwood'} \r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'John'; lastName = 'Greenwood'}\r\n\r\n$OldFile += [PSCustomObject]@{firstName = 'James'; lastName = 'Greenwood'}\r\n\r\n$OldFile\r\n\r\n\r\nfirstName lastName\r\n--------- --------\r\nPeter     Hall\r\nPeter     Griffin\r\nPeter     Greenwood\r\nJane      Greenwood\r\nJohn      Greenwood\r\nJames     Greenwood\r\n```\r\n\r\nFiltering the object to exclude users with a first name of 'Peter' and last name of 'Hall' incorrectly excludes Peter Griffin and Peter Greenwood too:\r\n```powershell\r\n$OldFile | Where-Object {$_.firstName -ne 'Peter' -and $_.lastName -ne 'Hall'}\r\n\r\n\r\nfirstName lastName\r\n--------- --------\r\nJane      Greenwood\r\nJohn      Greenwood\r\nJames     Greenwood\r\n```\r\n\r\nIf this is the intended behaviour, reversing the logic should see Peter Hall, Peter Griffin, and Peter Greenwood included in the results, but this is not the case:\r\n```powershell\r\n$OldFile | Where-Object {$_.firstName -eq 'Peter' -and $_.lastName -eq 'Hall'}\r\n\r\n\r\nfirstName lastName\r\n--------- --------\r\nPeter     Hall\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\n$OldFile | Where-Object {$_.firstName -ne 'Peter' -and $_.lastName -ne 'Hall'}\r\n\r\n\r\nfirstName lastName\r\n--------- --------\r\nPeter     Griffin\r\nPeter     Greenwood\r\nJane      Greenwood\r\nJohn      Greenwood\r\nJames     Greenwood\r\n\r\n# Peter Griffin and Peter Greenwood are correctly included in the results.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n$OldFile | Where-Object {$_.firstName -ne 'Peter' -and $_.lastName -ne 'Hall'}\r\n\r\n\r\nfirstName lastName\r\n--------- --------\r\nJane      Greenwood\r\nJohn      Greenwood\r\nJames     Greenwood\r\n\r\n# Peter Griffin and Peter Greenwood are incorrectly excluded from the results.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\n$PSVersionTable                                                       \r\n\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Darwin 21.4.0 Darwin Kernel Version 21.4.0: Fri Mar 18 00:46:32 PDT 2022; root:x\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-04-22T13:28:45Z",
  "comments": [
    {
      "author": "Northman-de",
      "author_association": "NONE",
      "body": "Where-Object let everything pass, where the result is TRUE.\r\nYou use AND. Only TRUE AND TRUE = TRUE\r\nStep by step:\r\nFirstname = Peter / Lastname = Griffin\r\n$_.firstName -ne 'Peter' = FALSE\r\n$_.lastName -ne 'Hall' = TRUE\r\nFALSE AND TRUE = FALSE\r\nTherefore it does not pass the where-object\r\n\r\nUse this:\r\n```\r\n[PS]> $OldFile | Where-Object {-not ($_.firstName -eq 'Peter' -and $_.lastName -eq 'Hall')}\r\n\r\nfirstName lastName\r\n--------- --------\r\nPeter     Griffin\r\nPeter     Greenwood\r\nJane      Greenwood\r\nJohn      Greenwood\r\nJames     Greenwood\r\n\r\n```",
      "created_at": "2022-04-22T13:25:59Z",
      "updated_at": "2022-04-22T13:25:59Z"
    },
    {
      "author": "phall-au",
      "author_association": "NONE",
      "body": "Oh my, PEBKAC here. Thank you @Northman-de!",
      "created_at": "2022-04-22T13:28:45Z",
      "updated_at": "2022-04-22T13:28:45Z"
    }
  ],
  "created_at": "2022-04-22T12:47:57Z",
  "labels": [],
  "number": 17177,
  "state": "closed",
  "title": "Using Where-Object command with multiple 'not equals' operators returns unexpected results for PSCustomObjects",
  "updated_at": "2022-04-22T13:28:47Z"
}