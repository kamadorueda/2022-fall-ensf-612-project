{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2689",
  "author": "iSazonov",
  "body": "Close #2595 \r\n\r\nAfter this PR:\r\n```powershell\r\nPS C:\\> [timespan]\"1:12:23:56\"\r\n\r\n1.12:23:56\r\n\r\nPS C:\\> Get-Uptime\r\n\r\n8.04:44:37\r\n```",
  "closed_at": "2017-08-07T10:55:38Z",
  "comments": [
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "That's not an improvement. \n",
      "created_at": "2016-11-16T09:42:56Z",
      "updated_at": "2016-11-16T09:42:56Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I agree with @RichardSiddaway - it's not an improvement. I'd really like to see my human friendly formatting, but implemented so that it's more friendly to localization.\n",
      "created_at": "2016-11-17T19:27:55Z",
      "updated_at": "2016-11-17T19:27:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I like human friendly display too. The problem is that the solution is a _function_. In the worst case, we need to write a separate function for each language to do localization in full accordance with the rules of the language. It is a matter for the individual project [Humanizer ].(https://github.com/Humanizr/Humanizer) Can we import this project in Powershell? If not, then we need a compromise. What would it be?\n\nThis may be some kind of international format (ISO 8601) or .net timespan format (the PR use it).\n\nFinally, we can just leave it 'as is' now.\n\nSo we need a conclusion (committee?) on this.\n",
      "created_at": "2016-11-18T04:55:38Z",
      "updated_at": "2016-11-18T04:55:38Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm comfortable speaking for the @PowerShell/powershell-committee here (I am a member) - this doesn't really fall under the larger design issues the committee is focused on.\n\nThe committee did recently take a very quick look at Humanizer. I'm not sure we'll include it, but it is interesting.  That said, I think my human friendly TimeSpan is nicer than what Humanizer does, and I think it's not that hard to create in a localization friendly manner.\n",
      "created_at": "2016-11-18T22:11:13Z",
      "updated_at": "2016-11-18T22:11:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Based on this I suggest to call `Format-TimeSpanHuman` from DotNetTypes_format_ps1xml.cs and place the cmdlet in Microsoft.PowerShell.Utility.psm1 (with your code).\nLater it will be easier to localize it in-place or use a third-party package.\n",
      "created_at": "2016-11-19T08:45:09Z",
      "updated_at": "2016-11-19T08:45:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You can do some localization in a format file e.g. (from FileSystem.format.ps1xml):\n\n``` xml\n<CustomItem>\n    <Text AssemblyName=\"System.Management.Automation\" BaseName=\"FileSystemProviderStrings\" ResourceId=\"DirectoryDisplayGrouping\"/>\n    <ExpressionBinding>\n        <ScriptBlock>\n            $_.PSParentPath.Replace(\"Microsoft.PowerShell.Core\\FileSystem::\", \"\")                                                  \n        </ScriptBlock>\n    </ExpressionBinding>\n    <NewLine/>\n</CustomItem> \n```\n\nSeems like you just need various localized strings slipped into SMA e.g.: `{0} days,`, `{0} hours,` ... `{0}.{1} seconds` and the bit for formatting script that @lzybkr provided.  This would be a _sweet_ enhancement.\n",
      "created_at": "2016-11-20T01:19:18Z",
      "updated_at": "2016-11-20T01:20:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill The problem is that different languages require not only different strings but different code.\n",
      "created_at": "2016-11-20T13:53:36Z",
      "updated_at": "2016-11-20T13:53:36Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I tried a small experiment with Humanizer to see all of the strings it produces for a few different timespans and every culture it supports, see the results below.  This experiment also found a bug in Humanizer which I reported.\r\n\r\nMy conclusion - it might be nice (but maybe not required) to special case a few things like \"no time\" and to use the equivalent of \"an hour\" instead of \"1 hour\" for some languages, but it's probably not much code.\r\n\r\nBTW, it's not that hard to create a custom `ToString` method using ETS that calls into C#, here is one [example](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/System.Management.Automation/engine/Types_Ps1Xml.generated.cs#L39).\r\n\r\n```\r\n#19 PS> [timespan]::new(1,2,3,4,5) | % { $t = $_; $cultures | % { \"Culture: {0,-10} {1}\" -f $_,[Humanizer.TimeSpanHumanizeExtensions]::Humanize($t, 5, [CultureInfo]$_) } }\r\nCulture: af         1 dag, 2 ure, 3 minute, 4 sekondes, 5 millisekondes\r\nCulture: ar         \u064a\u0648\u0645 \u0648\u0627\u062d\u062f, \u0633\u0627\u0639\u062a\u064a\u0646, 3 \u062f\u0642\u0627\u0626\u0642, 4 \u062b\u0648\u0627\u0646, 5 \u0623\u062c\u0632\u0627\u0621 \u0645\u0646 \u0627\u0644\u062b\u0627\u0646\u064a\u0629\r\nCulture: bg         \u0435\u0434\u0438\u043d \u0434\u0435\u043d, 2 \u0447\u0430\u0441\u0430, 3 \u043c\u0438\u043d\u0443\u0442\u0438, 4 \u0441\u0435\u043a\u0443\u043d\u0434\u0438, 5 \u043c\u0438\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0438\r\nCulture: bn-BD      \u098f\u0995 \u09a6\u09bf\u09a8, 2 \u0998\u09a3\u09cd\u099f\u09be, 3 \u09ae\u09bf\u09a8\u09bf\u099f, 4 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1, 5 \u09ae\u09bf\u09b2\u09bf\u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1\r\nCulture: cs         1 den, 2 hodiny, 3 minuty, 4 sekundy, 5 milisekund\r\nCulture: da         en dag, 2 timer, 3 minutter, 4 sekunder, 5 millisekunder\r\nCulture: de         Ein Tag, 2 Stunden, 3 Minuten, 4 Sekunden, 5 Millisekunden\r\nCulture: el         1 day, 2 hours, 3 minutes, 4 seconds, 5 milliseconds\r\nCulture: es         un d\u00eda, 2 horas, 3 minutos, 4 segundos, 5 milisegundos\r\nCulture: fa         \u06cc\u06a9 \u0631\u0648\u0632, 2 \u0633\u0627\u0639\u062a, 3 \u062f\u0642\u06cc\u0642\u0647, 4 \u062b\u0627\u0646\u06cc\u0647, 5 \u0645\u06cc\u0644\u06cc \u062b\u0627\u0646\u06cc\u0647\r\nCulture: fi-FI      1 day, 2 hours, 3 minutes, 4 seconds, 5 milliseconds\r\nCulture: fr         1 jour, 2 heures, 3 minutes, 4 secondes, 5 millisecondes\r\nCulture: fr-BE      1 jour, 2 heures, 3 minutes, 4 secondes, 5 millisecondes\r\nCulture: he         \u05d9\u05d5\u05dd, \u05e9\u05e2\u05ea\u05d9\u05d9\u05dd, 3 \u05d3\u05e7\u05d5\u05ea, 4 \u05e9\u05e0\u05d9\u05d5\u05ea, 5 \u05d0\u05dc\u05e4\u05d9\u05d5\u05ea \u05e9\u05e0\u05d9\u05d9\u05d4\r\nCulture: hr         1 dan, 2 sata, 3 minute, 4 sekunde, 5 milisekundi\r\nCulture: hu         1 nap, 2 \u00f3ra, 3 perc, 4 m\u00e1sodperc, 5 ezredm\u00e1sodperc\r\nCulture: id         1 hari, 2 jam, 3 menit, 4 detik, 5 milidetik\r\nCulture: it         1 giorno, 2 ore, 3 minuti, 4 secondi, 5 millisecondi\r\nCulture: ja         1 \u65e5, 2 \u6642\u9593, 3 \u5206, 4 \u79d2, 5 \u30df\u30ea\u79d2\r\nCulture: nb         en dag, 2 timer, 3 minutter, 4 sekunder, 5 millisekunder\r\nCulture: nb-NO      en dag, 2 timer, 3 minutter, 4 sekunder, 5 millisekunder\r\nCulture: nl         1 dag, 2 uur, 3 minuten, 4 seconden, 5 milliseconden\r\nCulture: pl         1 dzie\u0144, 2 godziny, 3 minuty, 4 sekundy, 5 milisekund\r\nCulture: pt         1 day, 2 hours, 3 minutes, 4 seconds, 5 milliseconds\r\nCulture: ro         1 zi, 2 ore, 3 minute, 4 secunde, 5 milisecunde\r\nCulture: ru         \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c, 2 \u0447\u0430\u0441\u0430, 3 \u043c\u0438\u043d\u0443\u0442\u044b, 4 \u0441\u0435\u043a\u0443\u043d\u0434\u044b, 5 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\r\nCulture: sk         1 de\u0148, 2 hodiny, 3 min\u00faty, 4 sekundy, 5 milisek\u00fand\r\nCulture: sl         1 dan, 2 uri, 3 minute, 4 sekunde, 5 milisekund\r\nCulture: sr         1 \u0434\u0430\u043d, 2 \u0441\u0430\u0442\u0430, 3 \u043c\u0438\u043d\u0443\u0442\u0430, 4 \u0441\u0435\u043a\u0443\u043d\u0434\u0435, 5 \u043c\u0438\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0438\r\nCulture: sr-Latn    1 dan, 2 sata, 3 minuta, 4 sekunde, 5 milisekundi\r\nCulture: sv         1 dag, 2 timmar, 3 minuter, 4 sekunder, 5 millisekunder\r\nCulture: tr         1 g\u00fcn, 2 saat, 3 dakika, 4 saniye, 5 milisaniye\r\nCulture: uk         \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c, 2 \u0433\u043e\u0434\u0438\u043d\u0438, 3 \u0445\u0432\u0438\u043b\u0438\u043d\u0438, 4 \u0441\u0435\u043a\u0443\u043d\u0434\u0438, 5 \u043c\u0456\u043b\u0456\u0441\u0435\u043a\u0443\u043d\u0434\r\nCulture: uz-Cyrl-UZ 1 \u043a\u0443\u043d, 2 \u0441\u043e\u0430\u0442, 3 \u043c\u0438\u043d\u0443\u0442, 4 \u0441\u0435\u043a\u0443\u043d\u0434, 5 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\r\nCulture: uz-Latn-UZ 1 kun, 2 soat, 3 minut, 4 sekund, 5 millisekund\r\nCulture: vi         1 ng\u00e0y, 2 gi\u1edd, 3 ph\u00fat, 4 gi\u00e2y, 5 ph\u1ea7n ng\u00e0n gi\u00e2y\r\nCulture: zh-CN      1 \u5929, 2 \u5c0f\u65f6, 3 \u5206, 4 \u79d2, 5 \u6beb\u79d2\r\nCulture: zh-Hans    1 \u5929, 2 \u5c0f\u65f6, 3 \u5206, 4 \u79d2, 5 \u6beb\u79d2\r\nCulture: zh-Hant    1 \u5929, 2 \u5c0f\u6642, 3 \u5206, 4 \u79d2, 5 \u6beb\u79d2\r\n\r\n#20 PS> [timespan]::new(0,0,0,0,0) | % { $t = $_; $cultures | % { \"Culture: {0,-10} {1}\" -f $_,[Humanizer.TimeSpanHumanizeExtensions]::Humanize($t, 5, [CultureInfo]$_) } }\r\nCulture: af         geen tyd\r\nCulture: ar         \u062d\u0627\u0644\u0627\u064b\r\nCulture: bg         \u043d\u044f\u043c\u0430 \u0432\u0440\u0435\u043c\u0435\r\nCulture: bn-BD      \u09b6\u09c2\u09a8\u09cd\u09af \u09b8\u09ae\u09df\r\nCulture: cs         nen\u00ed \u010das\r\nCulture: da         ingen tid\r\nCulture: de         Keine Zeit\r\nCulture: el         no time\r\nCulture: es         0 segundos\r\nCulture: fa         \u0627\u0644\u0622\u0646\r\nCulture: fi-FI      no time\r\nCulture: fr         pas de temps\r\nCulture: fr-BE      pas de temps\r\nCulture: he         \u05d0\u05d9\u05df \u05d6\u05de\u05df\r\nCulture: hr         bez podatka o vremenu\r\nCulture: hu         nincs id\u0151\r\nCulture: id         waktu kosong\r\nCulture: it         0 secondi\r\nCulture: ja         0 \u79d2\r\nCulture: nb         ingen tid\r\nCulture: nb-NO      ingen tid\r\nCulture: nl         geen tijd\r\nCulture: pl         brak czasu\r\nCulture: pt         no time\r\nCulture: ro         niciun timp\r\nCulture: ru         \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\r\nCulture: sk         \u017eiadny \u010das\r\nCulture: sl         ni\u010d \u010dasa\r\nCulture: sr         \u0431\u0435\u0437 \u043f\u0440\u043e\u0442\u0435\u043a\u043b\u043e\u0433 \u0432\u0440\u0435\u043c\u0435\u043d\u0430\r\nCulture: sr-Latn    bez proteklog vremena\r\nCulture: sv         ingen tid\r\nCulture: tr         zaman fark\u0131 yok\r\nCulture: uk         \u0431\u0435\u0437 \u0447\u0430\u0441\u0443\r\nCulture: uz-Cyrl-UZ \u0432\u0430\u049b\u0442 \u0439\u045e\u049b\r\nCulture: uz-Latn-UZ vaqt yo`q\r\nCulture: vi         kh\u00f4ng gi\u1edd\r\nCulture: zh-CN      \u6ca1\u6709\u65f6\u95f4\r\nCulture: zh-Hans    \u6ca1\u6709\u65f6\u95f4\r\nCulture: zh-Hant    \u6c92\u6709\u6642\u9593\r\n\r\n#21 PS> [timespan]::new(1,1,1,1,1) | % { $t = $_; $cultures | % { \"Culture: {0,-10} {1}\" -f $_,[Humanizer.TimeSpanHumanizeExtensions]::Humanize($t, 5, [CultureInfo]$_) } }\r\nCulture: af         1 dag, 1 uur, 1 minuut, 1 sekond, 1 millisekond\r\nCulture: ar         \u064a\u0648\u0645 \u0648\u0627\u062d\u062f, \u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629, \u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629, \u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629, \u062c\u0632\u0621 \u0645\u0646 \u0627\u0644\u062b\u0627\u0646\u064a\u0629\r\nCulture: bg         \u0435\u0434\u0438\u043d \u0434\u0435\u043d, \u0435\u0434\u0438\u043d \u0447\u0430\u0441, \u0435\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430, \u0435\u0434\u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u0430, \u0435\u0434\u043d\u0430 \u043c\u0438\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\r\nCulture: bn-BD      \u098f\u0995 \u09a6\u09bf\u09a8, \u098f\u0995 \u0998\u09a3\u09cd\u099f\u09be, \u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f, \u098f\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1, \u098f\u0995 \u09ae\u09bf\u09b2\u09bf\u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1\r\nCulture: cs         1 den, 1 hodina, 1 minuta, 1 sekunda, 1 milisekunda\r\nCulture: da         en dag, en time, et minut, et sekund, et millisekund\r\nCulture: de         Ein Tag, Eine Stunde, Eine Minute, Eine Sekunde, Eine Millisekunde\r\nCulture: el         1 day, 1 hour, 1 minute, 1 second, 1 millisecond\r\nCulture: es         un d\u00eda, una hora, un minuto, un segundo, un milisegundo\r\nCulture: fa         \u06cc\u06a9 \u0631\u0648\u0632, \u06cc\u06a9 \u0633\u0627\u0639\u062a, \u06cc\u06a9 \u062f\u0642\u06cc\u0642\u0647, \u06cc\u06a9 \u062b\u0627\u0646\u06cc\u0647, \u06cc\u06a9 \u0645\u06cc\u0644\u06cc \u062b\u0627\u0646\u06cc\u0647\r\nCulture: fi-FI      1 day, 1 hour, 1 minute, 1 second, 1 millisecond\r\nCulture: fr         1 jour, 1 heure, 1 minute, 1 seconde, 1 milliseconde\r\nCulture: fr-BE      1 jour, 1 heure, 1 minute, 1 seconde, 1 milliseconde\r\nCulture: he         \u05d9\u05d5\u05dd, \u05e9\u05e2\u05d4, \u05d3\u05e7\u05d4, \u05e9\u05e0\u05d9\u05d9\u05d4, \u05d0\u05dc\u05e4\u05d9\u05ea \u05e9\u05e0\u05d9\u05d9\u05d4\r\nCulture: hr         1 dan, 1 sat, 1 minuta, 1 sekunda, 1 milisekunda\r\nCulture: hu         1 nap, 1 \u00f3ra, 1 perc, 1 m\u00e1sodperc, 1 ezredm\u00e1sodperc\r\nCulture: id         1 hari, 1 jam, 1 menit, 1 detik, 1 milidetik\r\nCulture: it         1 giorno, 1 ora, 1 minuto, 1 secondo, 1 millisecondo\r\nCulture: ja         1 \u65e5, 1 \u6642\u9593, 1 \u5206, 1 \u79d2, 1 \u30df\u30ea\u79d2\r\nCulture: nb         en dag, en time, ett minutt, ett sekund, ett millisekund\r\nCulture: nb-NO      en dag, en time, ett minutt, ett sekund, ett millisekund\r\nCulture: nl         1 dag, 1 uur, 1 minuut, 1 seconde, 1 milliseconde\r\nCulture: pl         1 dzie\u0144, 1 godzina, 1 minuta, 1 sekunda, 1 milisekunda\r\nCulture: pt         1 day, 1 hour, 1 minute, 1 second, 1 millisecond\r\nCulture: ro         1 zi, 1 or\u0103, 1 minut, 1 secund\u0103, 1 milisecund\u0103\r\nCulture: ru         \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c, \u043e\u0434\u0438\u043d \u0447\u0430\u0441, \u043e\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430, \u043e\u0434\u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u0430, \u043e\u0434\u043d\u0430 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\r\nCulture: sk         1 de\u0148, 1 hodina, 1 min\u00fata, 1 sekunda, 1 milisekunda\r\nCulture: sl         1 dan, 1 ura, 1 minuta, 1 sekunda, 1 milisekunda\r\nCulture: sr         1 \u0434\u0430\u043d, 1 \u0441\u0430\u0442, 1 \u043c\u0438\u043d\u0443\u0442, 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430, 1 \u043c\u0438\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\r\nCulture: sr-Latn    1 dan, 1 sat, 1 minut, 1 sekunda, 1 milisekunda\r\nCulture: sv         1 dag, 1 timma, 1 minut, 1 sekund, 1 millisekund\r\nCulture: tr         1 g\u00fcn, 1 saat, 1 dakika, 1 saniye, 1 milisaniye\r\nCulture: uk         \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c, \u043e\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430, \u043e\u0434\u043d\u0430 \u0445\u0432\u0438\u043b\u0438\u043d\u0430, \u043e\u0434\u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u0430, \u043e\u0434\u043d\u0430 \u043c\u0456\u043b\u0456\u0441\u0435\u043a\u0443\u043d\u0434\u0430\r\nCulture: uz-Cyrl-UZ 1 \u043a\u0443\u043d, 1 \u0441\u043e\u0430\u0442, 1 \u043c\u0438\u043d\u0443\u0442, 1 \u0441\u0435\u043a\u0443\u043d\u0434, 1 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\r\nCulture: uz-Latn-UZ 1 kun, 1 soat, 1 minut, 1 sekund, 1 millisekund\r\nCulture: vi         1 ng\u00e0y, 1 gi\u1edd, 1 ph\u00fat, 1 gi\u00e2y, 1 ph\u1ea7n ng\u00e0n gi\u00e2y\r\nCulture: zh-CN      1 \u5929, 1 \u5c0f\u65f6, 1 \u5206, 1 \u79d2, 1 \u6beb\u79d2\r\nCulture: zh-Hans    1 \u5929, 1 \u5c0f\u65f6, 1 \u5206, 1 \u79d2, 1 \u6beb\u79d2\r\nCulture: zh-Hant    1 \u5929, 1 \u5c0f\u6642, 1 \u5206, 1 \u79d2, 1 \u6beb\u79d2\r\n```",
      "created_at": "2016-11-21T19:08:17Z",
      "updated_at": "2016-11-21T19:08:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is Powershell the right place to do it? Perhaps it is better to do it in .Net?\r\nWhether to override `ToString`? Perhaps better to create `ToHumanString` or  IFormatProvider?\r\n",
      "created_at": "2016-11-22T13:43:47Z",
      "updated_at": "2016-11-22T13:43:47Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It'd be great if .Net added a nice api, we'd use it for sure. But if they don't, we should do something.\r\n\r\nWe should only override `ToString` when the existing one is completely useless. So yeah, we can just add some static method, call it whatever you want, and call that from the formatting entry.",
      "created_at": "2016-11-24T02:04:07Z",
      "updated_at": "2016-11-24T02:04:07Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You could also create a static extension method for  `ToString` on TimeSpan objects with a `humanize` boolean parameter.",
      "created_at": "2016-11-24T02:14:20Z",
      "updated_at": "2016-11-24T02:14:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill Thanks! \"boolean\" does not tell us about \"human\". \ud83d\ude15  Could be done IFormatProvider but a static `ToHumanString` method is more user friendly.\r\n\r\n@lzybkr What is the correct place for this \"humanizer\" code and resource file?",
      "created_at": "2016-11-24T06:08:45Z",
      "updated_at": "2016-11-24T06:14:05Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov it can \"tell you\" *if* you use C#'s named parameter functionality e.g. `timespan.ToString(humanize: true);` but it does require discipline by the caller.",
      "created_at": "2016-11-25T19:48:55Z",
      "updated_at": "2016-11-25T19:48:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill It's interesting! Is it possible to make such a call from Powershell?",
      "created_at": "2016-11-26T10:32:12Z",
      "updated_at": "2016-11-26T10:32:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Named parameters to .Net methods are not yet supported, see https://github.com/PowerShell/PowerShell-RFC/issues/6",
      "created_at": "2016-11-27T04:19:10Z",
      "updated_at": "2016-11-27T04:19:10Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Well that and PowerShell doesn't have language support for static extension methods.  However, you can invoke static extension methods the old fashioned way - like any other static method.  :-)",
      "created_at": "2016-11-27T04:40:42Z",
      "updated_at": "2016-11-27T04:40:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr What is the correct place for this \"humanizer\" code and resource file?",
      "created_at": "2016-11-28T06:55:10Z",
      "updated_at": "2016-11-28T06:55:10Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Good question. We have a few similar methods, so maybe [here](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/System.Management.Automation/engine/CodeMethods.cs#L19) or [here](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/System.Management.Automation/engine/MshObject.cs#L2412), or maybe that partial class should just be put in a new file.",
      "created_at": "2016-11-28T07:19:14Z",
      "updated_at": "2016-11-28T07:19:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks for the idea. I don't lose hope that it will be done in .Net so I suppose that a new file in [engine](https://github.com/PowerShell/PowerShell/tree/master/src/System.Management.Automation/engine) folder will be better.",
      "created_at": "2016-11-28T09:32:24Z",
      "updated_at": "2016-11-28T09:32:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I took the next step.\r\nThere is problems.\r\n1. I have not been able to compile the resource file named `Humanizer.en-Us.resx`\r\n2. Generated resource class has no `GetString(String,\u2002CultureInfo)` . Had to make a call `Humanizer.Culture = Culture;` Is it acceptable?\r\n3. How test this? As timespan formatting for en-Us only or/and full tests of ToHumanString for all cultures? ",
      "created_at": "2016-11-28T16:08:06Z",
      "updated_at": "2016-11-29T15:02:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Reopen to restart CI.",
      "created_at": "2016-12-08T19:26:23Z",
      "updated_at": "2016-12-08T19:26:23Z"
    }
  ],
  "created_at": "2016-11-16T08:57:42Z",
  "number": 2689,
  "state": "closed",
  "title": "Improve formatting of timespan",
  "updated_at": "2017-10-25T11:24:04Z"
}