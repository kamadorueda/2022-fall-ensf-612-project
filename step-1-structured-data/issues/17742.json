{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17742",
  "author": "MatejKafka",
  "body": "### Summary of the new feature / enhancement\r\n\r\n```powershell\r\nfunction x {\r\n    param(\r\n        [ValidateSet(\"A\", \"B\", IgnoreCase = $true)]\r\n        $p\r\n    )\r\n    $p\r\n}\r\n\r\nx a # returns \"a\"\r\nx A # returns \"A\"\r\n```\r\nCurrently, `[ValidateSet]` supports 2 modes of matching:\r\n - `IgnoreCase = $false`, where user has to enter the parameter value with the exact casing as the value from the set,\r\n - `IgnoreCase = $true` (the default), where casing is ignored, and the value is passed as-is, e.g. in the example above, user can pass `\"a\"` and the value of `$p` inside the function will be `\"a\"` (not `\"A\"`).\r\n\r\nHowever, I often want to allow the user to specify the value in any casing, but then internally use the value with the exact casing as written in the set (e.g. `x a` above should return `\"A\"`). Three semi-common scenarios/reasons where I find this useful:\r\n 1. Allow the user to enter a file name from a certain directory on a case-sensitive filesystem using `IValidateSetValuesGenerator`, listing files inside a directory for validation, but letting the user enter the file name in any casing.\r\n 2. When the user-selected value is shown in an UI, printed in log messages,..., it looks better to have a consistent casing.\r\n 3. Have `ValidateSet` be more consistent with enum parameters (where casing is always correct).\r\n\r\nFor scenario 2 and a fixed validated set, it is possible to \"fix\" the issue by using an enum instead, but that does not work for dynamic sets generated from `IValidateSetValuesGenerator`.\r\n\r\nCurrently, the only solutions there are to either generate the dynamic set of allowed values a second time manually, lookup the passed value and get the correct casing from the set, or use another source of truth (e.g. the filesystem name using something like `new DirectoryInfo(parentPath).EnumerateFiles(fileName).Single().Name;`), both of which are inelegant and potentially have a lot of overhead.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nIdeally, I think the default behavior of `[ValidateSet]` could be changed to always resolve the passed value to have the correct casing. This is not fully backwards compatible, but I don't believe it would cause issues in common scenarios, and it should not have any real runtime overhead over the current behavior.\r\n\r\nAlternatively, add another named boolean parameter to `[ValidateSet]` to toggle this behavior.",
  "closed_at": null,
  "comments": [
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "A better way to do this IMO is to use an ArgumentTransformationAttribute. The validation attributes should only validate that the input is correct.",
      "created_at": "2022-07-22T15:11:06Z",
      "updated_at": "2022-07-22T15:11:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> A better way to do this IMO is to use an ArgumentTransformationAttribute. The validation attributes should only validate that the input is correct.\r\n\r\nThis is technically true.  One can even `throw` in the transformation if the input values aren't valid - to avoid repeating values in a  validate set.   But that attribute is just moving code out of the function body and making it sharable between functions which have a parameter (and its values) in common.  There just as much work to do for each parameter,  What's proposed would yield code which was quicker and easier to write and to understand when maintaining it.  \r\n\r\n\r\n",
      "created_at": "2022-07-22T16:37:11Z",
      "updated_at": "2022-07-22T16:37:11Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "> One can even throw in the transformation if the input values aren't valid - to avoid repeating values in a validate set.\r\n\r\nHowever, `[ArgumentTransformation]` does not provide autocomplete, and in general is impossible to scrape if you want to e.g. list the possible parameter values from outside the function.",
      "created_at": "2022-07-22T18:37:40Z",
      "updated_at": "2022-07-22T18:37:40Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > One can even throw in the transformation if the input values aren't valid - to avoid repeating values in a validate set.\r\n> \r\n> However, `[ArgumentTransformation]` does not provide autocomplete, and in general is impossible to scrape if you want to e.g. list the possible parameter values from outside the function.\r\n\r\n**Yes**.  If everything is split up we'd have a completer attribute, a validator attribute and a transformer attribute. \r\n\r\nI think the original designers thought it would be silly put the same values in a completer and in a validator which is why a validateSet does double duty as a completer.  Martin's view is seems to be more purist than yours and mine. _To me_  a bunch of lines like :\r\n```\r\nif     ($x -ieq \"darkred\" ) {$x = \"DarkRed\" } \r\nelseif ($x -ieq \"darkblue\") {$x = \"DarkBlue\"}\r\n ```\r\nor an equivalent `switch`  (where it is not simply `ToUpper`, `ToLower`) is effort which would be good to remove. \r\n\r\nAIUI it needs a change to allow a _validator_  to change the value of the parameter it is validating.  (Which would allow a single custom class to validate and transform).  _I don't think_ that adds too much difficulty. .  \r\n\r\n",
      "created_at": "2022-07-23T13:17:11Z",
      "updated_at": "2022-07-23T13:17:34Z"
    }
  ],
  "created_at": "2022-07-22T14:54:31Z",
  "labels": [
    "Issue-Enhancement",
    "Needs-Triage"
  ],
  "number": 17742,
  "state": "open",
  "title": "`[ValidateSet]` should fix casing of passed values to match the value specified in the set",
  "updated_at": "2022-07-23T13:17:34Z"
}