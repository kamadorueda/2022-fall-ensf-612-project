{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16874",
  "author": "alexbuzzbee",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nUsing PowerShell 7.2.1 (I ran on Windows Server 2019 and on Debian 11.2 (4.4 kernel in Windows Subsystem for Linux)), enable tracing at level 1 or 2 and run this script (note that removing the `Custom` class's `Method` *prevents* the issue from occurring, but switching to `New-Object` *does not*):\r\n\r\n```powershell\r\nclass Custom {\r\n  [void] Method() {}\r\n}\r\n\r\n[Custom]::new()\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS C:\\> Set-PSDebug -Trace 2; .\\Test-TraceBug.ps1\r\nDEBUG:    1+  >>>> Set-PSDebug -Trace 2; .\\Test-TraceBug.ps1\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    1+ Set-PSDebug -Trace 2;  >>>> .\\Test-TraceBug.ps1\r\nDEBUG:    3+  >>>> [Custom]::new()\r\n\r\nDEBUG:     ! CALL function '<ScriptBlock>'  (defined in file 'C:\\Test-TraceBug.ps1')\r\nCustom\r\nPS C:\\>\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS C:\\> Set-PSDebug -Trace 2; .\\Test-TraceBug.ps1\r\nDEBUG:    1+  >>>> Set-PSDebug -Trace 2; .\\Test-TraceBug.ps1\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    1+ Set-PSDebug -Trace 2;  >>>> .\\Test-TraceBug.ps1\r\nDEBUG:    5+  >>>> [Custom]::new()\r\n\r\nDEBUG:     ! CALL function '<ScriptBlock>'  (defined in file 'C:\\Test-TraceBug.ps1')\r\nDEBUG:    5+                                     function Get-ConciseViewPositionMessage  >>>> {\r\n\r\nDEBUG:     ! CALL function 'Get-ConciseViewPositionMessage'\r\nDEBUG:    7+                                          >>>> $resetColor = ''\r\n\r\nDEBUG:     ! SET $resetColor = ''.\r\nDEBUG:    8+                                         if ( >>>> $Host.UI.SupportsVirtualTerminal -and ([string]::IsNullOrEmpty($env:__SuppressAnsiEscapeSequences))) {\r\n\r\nDEBUG:    9+                                              >>>> $resetColor = [System.Management.Automation.VTUtility]::GetEscapeSequence(\r\n\r\nDEBUG:     ! SET $resetColor = ''.\r\nDEBUG:   46+                                          >>>> $errorColor = ''\r\n\r\nDEBUG:     ! SET $errorColor = ''.\r\nDEBUG:   47+                                          >>>> $accentColor = ''\r\n\r\nDEBUG:     ! SET $accentColor = ''.\r\nDEBUG:   49+                                         if ( >>>> $null -ne $Host.PrivateData) {\r\n\r\nDEBUG:   50+                                              >>>> $errorColor = Get-VT100Color $Host.PrivateData.ErrorForegroundColor\r\n\r\nDEBUG:   14+                                         function Get-VT100Color([ConsoleColor] $color)  >>>> {\r\n\r\nDEBUG:     ! CALL function 'Get-VT100Color'\r\nDEBUG:   15+                                             if ( >>>> !$Host.UI.SupportsVirtualTerminal -or !([string]::IsNullOrEmpty($env:__SuppressAnsiEscapeSequences))) {\r\n\r\nDEBUG:   19+                                             return  >>>> [System.Management.Automation.VTUtility]::GetEscapeSequence($color)\r\n\r\nDEBUG:   20+                                          >>>> }\r\n\r\nDEBUG:     ! SET $errorColor = ''.\r\nDEBUG:   51+                                              >>>> $accentColor = Get-VT100Color ($Host.PrivateData.ErrorAccentColor ?? $errorColor)\r\n\r\nDEBUG:   14+                                         function Get-VT100Color([ConsoleColor] $color)  >>>> {\r\n\r\nDEBUG:     ! CALL function 'Get-VT100Color'\r\nDEBUG:   15+                                             if ( >>>> !$Host.UI.SupportsVirtualTerminal -or !([string]::IsNullOrEmpty($env:__SuppressAnsiEscapeSequences))) {\r\n\r\nDEBUG:   19+                                             return  >>>> [System.Management.Automation.VTUtility]::GetEscapeSequence($color)\r\n\r\nDEBUG:   20+                                          >>>> }\r\n\r\nDEBUG:     ! SET $accentColor = ''.\r\nDEBUG:   54+                                          >>>> $posmsg = ''\r\n\r\nDEBUG:     ! SET $posmsg = ''.\r\nDEBUG:   55+                                          >>>> $headerWhitespace = ''\r\n\r\nDEBUG:     ! SET $headerWhitespace = ''.\r\nDEBUG:   56+                                          >>>> $offsetWhitespace = ''\r\n\r\nDEBUG:     ! SET $offsetWhitespace = ''.\r\nDEBUG:   57+                                          >>>> $message = ''\r\n\r\nDEBUG:     ! SET $message = ''.\r\nDEBUG:   58+                                          >>>> $prefix = ''\r\n\r\nDEBUG:     ! SET $prefix = ''.\r\nDEBUG:   61+                                         if ( >>>> ($myinv -and $myinv.ScriptName -or $myinv.ScriptLineNumber -gt 1 -or $err.CategoryInfo.Category -eq 'ParserError') -and !($myinv.ScriptName.EndsWith('.psm1', [System.StringComparison]::OrdinalIgnoreCase))) {\r\n\r\nDEBUG:   62+                                              >>>> $useTargetObject = $false\r\n\r\nDEBUG:     ! SET $useTargetObject = 'False'.\r\nDEBUG:   65+                                             if ( >>>> $_.TargetObject.Line -and $_.TargetObject.LineText) {\r\n\r\nDEBUG:   69+                                             elseif ( >>>> $myinv.ScriptName) {\r\n\r\nDEBUG:   70+                                                 if ( >>>> $env:TERM_PROGRAM -eq 'vscode') {\r\n\r\nDEBUG:   75+                                                      >>>> $posmsg = \"${resetcolor}$($myinv.ScriptName):$($myinv.ScriptLineNumber)${newline}\"\r\n\r\nDEBUG:   75+                                                     $posmsg = \"${resetcolor}$( >>>> $myinv.ScriptName):$($myinv.ScriptLineNumber)${newline}\"\r\n\r\nDEBUG:   75+                                                     $posmsg = \"${resetcolor}$($myinv.ScriptName):$( >>>> $myinv.ScriptLineNumber)${newline}\"\r\n\r\nDEBUG:     ! SET $posmsg = 'C:\\Test-TraceBug.ps1:5\r\n'.\r\nDEBUG:   82+                                             if ( >>>> $useTargetObject) {\r\n\r\nDEBUG:   87+                                                  >>>> $scriptLineNumber = $myinv.ScriptLineNumber\r\n\r\nDEBUG:     ! SET $scriptLineNumber = '5'.\r\nDEBUG:   88+                                                  >>>> $scriptLineNumberLength = $myinv.ScriptLineNumber.ToString().Length\r\n\r\nDEBUG:     ! SET $scriptLineNumberLength = '1'.\r\nDEBUG:   91+                                             if ( >>>> $scriptLineNumberLength -gt 4) {\r\n\r\nDEBUG:   95+                                              >>>> $lineWhitespace = ''\r\n\r\nDEBUG:     ! SET $lineWhitespace = ''.\r\nDEBUG:   96+                                             if ( >>>> $scriptLineNumberLength -lt 4) {\r\n\r\nDEBUG:   97+                                                  >>>> $lineWhitespace = ' ' * (4 - $scriptLineNumberLength)\r\n\r\nDEBUG:     ! SET $lineWhitespace = '   '.\r\nDEBUG:  100+                                              >>>> $verticalBar = '|'\r\n\r\nDEBUG:     ! SET $verticalBar = '|'.\r\nDEBUG:  101+                                              >>>> $posmsg += \"${accentColor}${headerWhitespace}Line ${verticalBar}${newline}\"\r\n\r\nDEBUG:     ! SET $posmsg = 'C:\\Test-TraceBug.ps1:5\r\nLine |\r\n'.\r\nDEBUG:  103+                                              >>>> $highlightLine = ''\r\n\r\nDEBUG:     ! SET $highlightLine = ''.\r\nDEBUG:  104+                                             if ( >>>> $useTargetObject) {\r\n\r\nDEBUG:  110+                                                  >>>> $positionMessage = $myinv.PositionMessage.Split($newline)\r\n\r\nDEBUG:     ! SET $positionMessage = 'At C:\\Test-TraceBug.ps1:5 char:1 + [Custom]::\u2026'.\r\nDEBUG:  111+                                                  >>>> $line = $positionMessage[1].Substring(1) # skip the '+' at the start\r\n\r\nDEBUG:     ! SET $line = ' [Custom]::new()'.\r\nDEBUG:  112+                                                  >>>> $highlightLine = $positionMessage[$positionMessage.Count - 1].Substring(1)\r\n\r\nDEBUG:     ! SET $highlightLine = ' ~~~~~~~~~~~~~~~'.\r\nDEBUG:  113+                                                  >>>> $offsetLength = $highlightLine.Trim().Length\r\n\r\nDEBUG:     ! SET $offsetLength = '15'.\r\nDEBUG:  114+                                                  >>>> $offsetInLine = $highlightLine.IndexOf('~')\r\n\r\nDEBUG:     ! SET $offsetInLine = '1'.\r\nDEBUG:  117+                                             if ( >>>> -not $line.EndsWith($newline)) {\r\n\r\nDEBUG:  118+                                                  >>>> $line += $newline\r\n\r\nDEBUG:     ! SET $line = ' [Custom]::new()\r\n'.\r\nDEBUG:  122+                                             if ( >>>> $offsetLength -lt $line.Length - 1) {\r\n\r\nDEBUG:  123+                                                  >>>> $line = $line.Insert($offsetInLine + $offsetLength, $resetColor).Insert($offsetInLine, $accentColor)\r\n\r\nDEBUG:     ! SET $line = ' [Custom]::new()\r\n'.\r\nDEBUG:  126+                                              >>>> $posmsg += \"${accentColor}${lineWhitespace}${ScriptLineNumber} ${verticalBar} ${resetcolor}${line}\"\r\n\r\nDEBUG:     ! SET $posmsg = 'C:\\Test-TraceBug.ps1:5\r\nLine |\r\n   5 | '.\r\nDEBUG:  127+                                              >>>> $offsetWhitespace = ' ' * $offsetInLine\r\n\r\nDEBUG:     ! SET $offsetWhitespace = ' '.\r\nDEBUG:  128+                                              >>>> $prefix = \"${accentColor}${headerWhitespace}     ${verticalBar} ${errorColor}\"\r\n\r\nDEBUG:     ! SET $prefix = '     | '.\r\nDEBUG:  129+                                             if ( >>>> $highlightLine -ne '') {\r\n\r\nDEBUG:  130+                                                  >>>> $posMsg += \"${prefix}${highlightLine}${newline}\"\r\n\r\nDEBUG:     ! SET $posMsg = 'C:\\Test-TraceBug.ps1:5\r\nLine |\r\n   5 | '.\r\nDEBUG:  132+                                              >>>> $message = \"${prefix}\"\r\n\r\nDEBUG:     ! SET $message = '     | '.\r\nDEBUG:  135+                                         if ( >>>> ! $err.ErrorDetails -or ! $err.ErrorDetails.Message) {\r\n\r\nDEBUG:  136+                                             if ( >>>> $err.CategoryInfo.Category -eq 'ParserError' -and $err.Exception.Message.Contains(\"~$newline\")) {\r\n\r\nDEBUG:  140+                                             elseif ( >>>> $err.Exception) {\r\n\r\nDEBUG:  141+                                                  >>>> $message += $err.Exception.Message\r\n\r\nDEBUG:     ! SET $message = '     | Index was out of range. Must be non-\u2026'.\r\nDEBUG:  155+                                         if ( >>>> $myinv -and $myinv.ScriptName -or $err.CategoryInfo.Category -eq 'ParserError') {\r\n\r\nDEBUG:  156+                                              >>>> $prefixLength = Get-RawStringLength -string $prefix\r\n\r\nDEBUG:   23+                                         function Get-RawStringLength($string)  >>>> {\r\n\r\nDEBUG:     ! CALL function 'Get-RawStringLength'\r\nDEBUG:   24+                                              >>>> $vtCodes = \"`e[0m\", \"`e[2;30m\", \"`e[2;31m\", \"`e[2;32m\", \"`e[2;33m\", \"`e[2;34m\",\r\n\r\nDEBUG:     ! SET $vtCodes = '       \u2026'.\r\nDEBUG:   28+                                              >>>> $newString = $string\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ($vtCode in  >>>> $vtCodes) {\r\n\r\nDEBUG:     ! SET $foreach = 'IEnumerator'.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $vtCode = ''.\r\nDEBUG:   30+                                                  >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\nDEBUG:     ! SET $newString = '     | '.\r\nDEBUG:   29+                                             foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\nDEBUG:     ! SET $foreach = ''.\r\nDEBUG:   33+                                             return  >>>> $newString.Length\r\n\r\nDEBUG:   34+                                          >>>> }\r\n\r\nDEBUG:     ! SET $prefixLength = '17'.\r\nDEBUG:  157+                                              >>>> $prefixVtLength = $prefix.Length - $prefixLength\r\n\r\nDEBUG:     ! SET $prefixVtLength = '0'.\r\nDEBUG:  160+                                              >>>> $message = $message.Replace($newline, ' ').Replace(\"`n\", ' ').Replace(\"`t\", ' ')\r\n\r\nDEBUG:     ! SET $message = '     | Index was out of range. Must be non-\u2026'.\r\nDEBUG:  162+                                              >>>> $windowWidth = 120\r\n\r\nDEBUG:     ! SET $windowWidth = '120'.\r\nDEBUG:  163+                                             if ( >>>> $Host.UI.RawUI -ne $null) {\r\n\r\nDEBUG:  164+                                                  >>>> $windowWidth = $Host.UI.RawUI.WindowSize.Width\r\n\r\nDEBUG:     ! SET $windowWidth = '120'.\r\nDEBUG:  167+                                             if ( >>>> $windowWidth -gt 0 -and ($message.Length - $prefixVTLength) -gt $windowWidth) {\r\n\r\nDEBUG:  168+                                                  >>>> $sb = [Text.StringBuilder]::new()\r\n\r\nDEBUG:     ! SET $sb = ''.\r\nDEBUG:  169+                                                  >>>> $substring = Get-TruncatedString -string $message -length ($windowWidth + $prefixVTLength)\r\n\r\nDEBUG:   37+                                         function Get-TruncatedString($string, [int]$length)  >>>> {\r\n\r\nDEBUG:     ! CALL function 'Get-TruncatedString'\r\nDEBUG:   39+                                             if ( >>>> $string.Length -le $length) {\r\n\r\nDEBUG:   43+                                             return  >>>> ($string.Substring(0,$length) -split '\\s',-2)[0]\r\n\r\nDEBUG:   44+                                          >>>> }\r\n\r\nDEBUG:     ! SET $substring = '     | Index was out of range. Must be no\u2026'.\r\nDEBUG:  170+                                                  >>>> $null = $sb.Append($substring)\r\n\r\nDEBUG:  171+                                                  >>>> $remainingMessage = $message.Substring($substring.Length).Trim()\r\n\r\nDEBUG:     ! SET $remainingMessage = ''index')'.\r\nDEBUG:  172+                                                  >>>> $null = $sb.Append($newline)\r\n\r\nDEBUG:  173+                                                 while ( >>>> ($remainingMessage.Length + $prefixLength) -gt $windowWidth) {\r\n\r\nDEBUG:  188+                                                  >>>> $null = $sb.Append($prefix + $remainingMessage.Trim())\r\n\r\nDEBUG:  189+                                                  >>>> $message = $sb.ToString()\r\n\r\nDEBUG:     ! SET $message = '     | Index was out of range. Must be non-\u2026'.\r\nDEBUG:  192+                                              >>>> $message += $newline\r\n\r\nDEBUG:     ! SET $message = '     | Index was out of range. Must be non-\u2026'.\r\nDEBUG:  195+                                          >>>> $posmsg += \"${errorColor}\" + $message\r\n\r\nDEBUG:     ! SET $posmsg = 'C:\\Test-TraceBug.ps1:5\r\nLine |\r\n   5 | '.\r\nDEBUG:  197+                                          >>>> $reason = 'Error'\r\n\r\nDEBUG:     ! SET $reason = 'Error'.\r\nDEBUG:  198+                                         if ( >>>> $err.Exception -and $err.Exception.WasThrownFromThrowStatement) {\r\n\r\nDEBUG:  202+                                         elseif ( >>>> $myinv.MyCommand -and $myinv.MyCommand.Name -and (Get-Command -Name $myinv.MyCommand -ErrorAction Ignore))\r\n\r\nDEBUG:  207+                                         elseif ( >>>> $_.CategoryInfo.Activity) {\r\n\r\nDEBUG:  210+                                         elseif ( >>>> $myinv.MyCommand) {\r\n\r\nDEBUG:  213+                                         elseif ( >>>> $myinv.InvocationName) {\r\n\r\nDEBUG:  216+                                         elseif ( >>>> $err.CategoryInfo.Category) {\r\n\r\nDEBUG:  217+                                              >>>> $reason = $err.CategoryInfo.Category\r\n\r\nDEBUG:     ! SET $reason = 'OperationStopped'.\r\nDEBUG:  223+                                          >>>> $errorMsg = 'Error'\r\n\r\nDEBUG:     ! SET $errorMsg = 'Error'.\r\nDEBUG:  225+                                          >>>> \"${errorColor}${reason}: ${posmsg}${resetcolor}\"\r\n\r\nDEBUG:  226+                                      >>>> }\r\n\r\nDEBUG:    1+ &  >>>> { Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    1+ & {  >>>> Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:    1+ & { Set-StrictMode -Version 1;  >>>> $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:    1+ & { Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails  >>>> }\r\nOperationStopped: C:\\Test-TraceBug.ps1:5\r\nLine |\r\n   5 |  [Custom]::new()\r\n     |  ~~~~~~~~~~~~~~~\r\n     | Index was out of range. Must be non-negative and less than the size of the collection. (Parameter\r\n     | 'index')\r\n\r\nPS C:\\>\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nPS C:\\> Get-Error\r\n\r\nException             :\r\n    Type       : System.ArgumentOutOfRangeException\r\n    Message    : Index was out of range. Must be non-negative and less than the size of the collection. (Parameter\r\n'index')\r\n    ParamName  : index\r\n    TargetSite :\r\n        Name          : Insert\r\n        DeclaringType : System.Text.StringBuilder\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    Data       : System.Collections.ListDictionaryInternal\r\n    Source     : System.Private.CoreLib\r\n    HResult    : -2146233086\r\n    StackTrace :\r\n   at System.Text.StringBuilder.Insert(Int32 index, String value)\r\n   at System.Management.Automation.Language.PositionUtilities.BriefMessage(IScriptPosition position)\r\n   at System.Management.Automation.ScriptDebugger.TraceLine(IScriptExtent extent)\r\n   at System.Management.Automation.ScriptDebugger.OnSequencePointHit(FunctionContext functionContext)\r\n   at System.Management.Automation.ScriptDebugger.EnterScriptFunction(FunctionContext functionContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(ScriptBlockClauseToInvoke clauseToInvoke, Boolean\r\ncreateLocalScope, Dictionary`2 functionsToDefine, List`1 variablesToDefine, ErrorHandlingBehavior\r\nerrorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo\r\ninvocationInfo, Object[] args)\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean useLocalScope, ErrorHandlingBehavior\r\nerrorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo\r\ninvocationInfo, Boolean propagateAllExceptionsToTop, List`1 variablesToDefine, Dictionary`2 functionsToDefine,\r\nObject[] args)\r\n   at System.Management.Automation.ScriptBlock.InvokeAsMemberFunction(Object instance, Object[] args)\r\n   at System.Management.Automation.Internal.ScriptBlockMemberMethodWrapper.InvokeHelper(Object instance, Object\r\nsessionStateInternal, Object[] args)\r\n   at CallSite.Target(Closure , CallSite , Type )\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : OperationStopped: (:) [], ArgumentOutOfRangeException\r\nFullyQualifiedErrorId : System.ArgumentOutOfRangeException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 5\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    ScriptName       : C:\\Test-TraceBug.ps1\r\n    Line             : [Custom]::new()\r\n\r\n    PositionMessage  : At C:\\Test-TraceBug.ps1:5 char:1\r\n                       + [Custom]::new()\r\n                       + ~~~~~~~~~~~~~~~\r\n    PSScriptRoot     : C:\\\r\n    PSCommandPath    : C:\\Test-TraceBug.ps1\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, C:\\Test-TraceBug.ps1: line 5\r\n                        at <ScriptBlock>, <No file>: line 1\r\n\r\nPS C:\\>\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nWinver:\r\n\r\nMicrosoft Windows Server\r\nVersion 1809 (OS Build 17763.2565)\r\n```\r\n\r\nOR\r\n\r\n```powershell\r\nPS /> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Linux 4.4.0-19041-Microsoft #1237-Microsoft Sat Sep 11 14:32:00 PST 2021\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS /> Get-Content /etc/os-release\r\nPRETTY_NAME=\"Debian GNU/Linux 11 (bullseye)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"11\"\r\nVERSION=\"11 (bullseye)\"\r\nVERSION_CODENAME=bullseye\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\nPS /> Get-Content /etc/debian_version\r\n11.2\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Debug show the trace throws on empty script block.",
      "created_at": "2022-02-12T16:20:49Z",
      "updated_at": "2022-02-12T16:20:49Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I can reproduced the problem on both \u3010ps 5.1\u3011  and  \u3010ps 6.2.7\u3011",
      "created_at": "2022-02-12T18:03:51Z",
      "updated_at": "2022-02-12T18:05:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The Engine Working Group reviewed this issue and agree it's a bug that needs to be fixed.",
      "created_at": "2022-05-12T21:19:37Z",
      "updated_at": "2022-05-12T21:19:37Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "I'm now encountering a case where custom classes with no explicit constructor trigger this issue as well. The classes are derived from a parent that also has no explicit constructor; I don't know if that's part of why. I am able to work around it by adding explicit 0-argument constructors with the body `{return}`:\r\n\r\n```powershell\r\nCustomBase {\r\n  [object] AbstractMethod() {\r\n    throw \"Abstract method not implemented.\"\r\n  }\r\n  CustomBase() {return}\r\n}\r\n\r\nCustom : CustomBase {\r\n  [object] AbstractMethod() {\r\n    # Some implementation.\r\n  }\r\n  Custom() {return}\r\n}\r\n```\r\n\r\nThis seems to support that the issue has something to do with empty blocks; I assume the default implicit constructor is `{}`.",
      "created_at": "2022-09-16T14:46:47Z",
      "updated_at": "2022-09-16T14:46:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I could refactor `internal static string BriefMessage(IScriptPosition position)` method if you don't see more depth problem.",
      "created_at": "2022-09-16T17:35:13Z",
      "updated_at": "2022-09-16T17:35:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I haven't yet got a chance to understand the root cause. Will try taking a look next week.",
      "created_at": "2022-09-16T22:52:53Z",
      "updated_at": "2022-09-16T22:52:53Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "[Line 278 of Position.cs](https://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/src/System.Management.Automation/engine/parser/Position.cs#L278) is the obvious starting point for the blame game, seeing as it's the only `Insert()` call in `BriefMessage()`. I assume that, for an empty block, the trace position is at column 0, so -1 is passed as the insert offset. Special-casing column 0 (and... negative columns??) is one fix, but maybe that should never happen; I'm obviously not familiar with how tracing is supposed to work internally. It also might be that position 0 is invalid in an empty string builder, in which case the line being empty needs handling or should be prevented from happening...\r\n\r\nAmendment: Checked, position 0 is legal in empty string builders and does what you'd expect.",
      "created_at": "2022-09-19T16:26:24Z",
      "updated_at": "2022-09-19T16:29:01Z"
    }
  ],
  "created_at": "2022-02-11T19:10:35Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 16874,
  "state": "open",
  "title": "When tracing, Language.PositionUtilities.BriefMessage() passes an out-of-range index to StringBuilder.Insert()",
  "updated_at": "2022-09-19T16:29:01Z"
}