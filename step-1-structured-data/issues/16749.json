{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16749",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\n\nIt would be nice to be able to execute commands like:\r\n\r\n```powershell\r\nrm --rec --force ~/somedir\r\n```\r\n\r\nthe only difference in this command vs. one that currently works, is that parameter names start with a double dash `--` instead of a single dash `-`.\r\n\r\nIn this case, this same command is compatible with Linux (but not macOS unfortunately.)\r\n\r\nRelated: #6397\r\n\r\nHere is one possible (slightly contrived) use-case in case you are wondering why anyone would want this:\r\n\r\n```powershell\r\n$servers = 'winserver','linuxserver','otherlinuxserver'\r\n\r\nforeach ($server in $servers) {\r\n    ssh $server -- rm --rec --force ~/some/path\r\n    ...\r\n}\r\n```\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-01-17T12:00:44Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This already works:\r\n```\r\nmkdir -p foo/bar/baz\r\n/bin/rm --recursive --force ./foo/\r\n```\r\nOr are you on Windows and are using `rm` as an alias for `Remove-Item`?  If it's the latter, you might want to make that more clear in your request.\r\n\r\nAssuming it's the latter, what I'd would prefer is that `--` for a PowerShell parameter, require the full parameter name and not \"match\" based on the number of chars provided.  Partial matching becomes problematic as cmdlets add new parameter names.  I might get away with `Get-SomeNoun -f` for `-force` until later on when someone adds a `-Filter` parameter to the cmdlet. At that point, `Get-SomeNoun -f` is ambiguous and will error.  I wouldn't mind seeing `Get-SomeNoun --Force` where `Get-SomeNoun --f` would fail right away because there is no parameter named `F`.",
      "created_at": "2022-01-14T19:45:00Z",
      "updated_at": "2022-01-14T20:22:55Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "> Or are you on Windows and are using `rm` as an alias for `Remove-Item`? If it's the latter, you might want to make that more clear in your request.\r\n\r\nYeah I should have made that more clear, my apologies.\r\n\r\nThe reason I chose that particular Windows alias, is because the scenario I'm describing is where you want to run the same command on Linux and Windows, e.g. via `ssh`.\r\n\r\n> Assuming it's the latter, what I'd would prefer is that `--` for a PowerShell parameter, require the full parameter name and not \"match\" based on the number of chars provided. Partial matching becomes problematic as cmdlets add new parameter names. I might get away with `Get-SomeNoun -f` for `-force` until later on when someone adds a `-Filter` parameter to the cmdlet. At that point, `Get-SomeNoun -f` is ambiguous and will error. I wouldn't mind seeing `Get-SomeNoun --Force` where `Get-SomeNoun --f` would fail right away because there is no parameter named `F`.\r\n\r\nI think you're right, and this is a better way to go.\r\n\r\nBut in that case, would you support full parameter alias names as well? The equivalent to the `Remove-Item` `-Recurse` parameter for GNU coreutils `rm` is `--recursive`. So if `-Recursive` was an explicit parameter alias for `-Recurse` for `Remove-Item`, my usecase would still work with this command:\r\n\r\n```bash\r\nrm --recursive --force ~/some/path\r\n```\r\n.",
      "created_at": "2022-01-14T21:37:33Z",
      "updated_at": "2022-01-14T21:37:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The equivalent to the Remove-Item -Recurse parameter for GNU coreutils rm is --recursive.\r\n\r\nIf you ask the package owners to replace `--recursive` with `-recursive` what answer do you expect? :-)\r\n\r\nHere you can get only one obvious answer - it is how PowerShell language was designed for many years ago, changing this would be huge breaking change.",
      "created_at": "2022-01-15T06:59:47Z",
      "updated_at": "2022-01-15T06:59:47Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "> If you ask the package owners to replace `--recursive` with `-recursive` what answer do you expect? :-)\r\n\r\nThat's not what I meant, here we are talking about full names for parameters, and parameters can have explicit aliases, see \"Alias attribute\" here:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7.2\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters\">about Functions Advanced Parameters - PowerShell</a></strong></div><div>Explains how to add parameters to advanced functions.</div></blockquote>",
      "created_at": "2022-01-15T08:25:17Z",
      "updated_at": "2022-01-15T08:25:18Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Some aliases you are using all the time: `-ea` for `-ErrorAction`, or `-ov` for `-OutVariable`.",
      "created_at": "2022-01-15T08:37:35Z",
      "updated_at": "2022-01-15T08:37:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Every language has rules that form the essence of a language. It makes no sense to turn C++ into C#, C# into Java or PowerShell into Bash, just as Windows into Linux and vice versa - each has its purpose and its benefits in a certain area where it should be used.\r\n\r\nAs for aliases, I advise you to forget about them. Every time somebody start discussing them, it turns into a pointless battle.\r\nAliases mattered in the days of PS 3.0, when there were 10 modules and 20 cmdlets. Now on Windows there are hundreds of OOB modules at once and already thousands of cmdlets. In this situation, aliases become an evil which must be got rid of.\r\n",
      "created_at": "2022-01-15T17:53:33Z",
      "updated_at": "2022-01-15T17:53:33Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I really don't see the harm in having a `-Recursive` alias for `-Recurse` as parameter aliases are already extensively used. This is very unlikely to cause any confusion.\r\n\r\nThis has nothing to do with `bash` by the way, `--recursive` is a non-standard parameter for the external GNU coreutils `rm` command.\r\n\r\nBut that's a separate issue anyway, this one is about supporting a double dash `--Param` instead of only a single dash `-Param` syntax.\r\n\r\nMy question was, if the `--Param` syntax is implemented for full parameter names only, would any explicit aliases also be supported.",
      "created_at": "2022-01-15T20:01:38Z",
      "updated_at": "2022-01-15T20:01:38Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> My question was, if the --Param syntax is implemented for full parameter names only, would any explicit aliases also be supported.\r\n\r\nEverything should have some practical meaning. It's not for beauty that bash and other command shells use double or single dashes to indicate parameters. This is a syntax element that allows you to either use the full names of parameters or their abbreviations, which can be grouped into one parameter.\r\n```\r\nls --recursive --size\r\nls -Rs\r\n```\r\nThere is no such possibility in PowerShell, unless you write the binding function yourself, but PowerShell can auto-complete parameters and their values, shorten their spelling until there is a name conflict. In addition the new syntax even if it is as an option will break compatibility with other versions and editions of the shell.",
      "created_at": "2022-01-15T21:21:16Z",
      "updated_at": "2022-01-15T21:21:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-17T12:00:43Z",
      "updated_at": "2022-01-17T12:00:43Z"
    }
  ],
  "created_at": "2022-01-14T17:57:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 16749,
  "state": "closed",
  "title": "Support double-dash --paramname syntax for named parameters.",
  "updated_at": "2022-01-17T12:00:44Z"
}