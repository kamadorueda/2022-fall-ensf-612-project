{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9585",
  "author": "mklement0",
  "body": "<sup>Updated for technical accuracy based on @PetSerAl's feedback.</sup>\r\n\r\nThe problem at hand surfaces in the following scenarios:\r\n\r\n* Remoting:\r\n  * true remoting:\r\n    * `Invoke-Command`\r\n    * implicit remoting with `Import-PSSession`\r\n  * background jobs:\r\n     * `Start-Job`\r\n     * postpositional `&`\r\n* Minishells:\r\n    *   Calling the CLI from within PowerShell with `-Command` and a _script block_\r\n\r\nIn these scenarios, redirecting and capturing the various output streams is inconsistently supported, with partial inability to redirect and/or capture streams, and partial inability to effectively suppress output streams.\r\n\r\n(Quick stream recap: `1` = success, `2` = error, `3` = warning, `4` = verbose, `5` = debug, `6` = information.)\r\n\r\nRemoting: \r\n\r\n* (unless silenced at the source) streams `3`, `4`, `5`, `6`  cannot be suppressed (silenced) with `>`, because they are locally replicated as host output, which is invariably printed.\r\n* of these, only stream `6` can be redirected to a file, and both `3` and `6` can be captured with a `-*Variable` parameter; `4`, `5` can neither be redirected nor captured (they have no `-*Variable` parameter).\r\n\r\nMinishells:\r\n\r\n* (unless silenced at the source) streams `3`, `4`, `5`  can neither be silenced nor redirected to a file\r\n* since `-*Variable` parameters cannot be used in this case, these streams cannot be captured at all.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Remoting: Write to all output streams from a background job \r\n# and try to suppress them all when receiving the job's output.\r\n$null = & { 1; write-error 2; write-warning 3; write-verbose -vb 4; write-debug -debug 5; write-information -InformationAction Continue 6 } &\r\n($job = Get-Job) |  Receive-Job -wait  *>$null\r\n'---'\r\n# Minishell: ditto\r\npwsh -noprofile -c { 1; write-error 2; write-warning 3; write-verbose -vb 4; write-debug -debug 5; write-information -InformationAction Continue 6 } *>$null\r\n```\r\n\r\nIn the background-job scenario, as @Niali points out in https://github.com/PowerShell/PowerShell/issues/5848#issuecomment-427210446, the streams' contents are accessible _via the job object_, curiously via the `.Output`, `.Error`, ... properties of `$job.ChildJob[0]`(!).\r\n\r\n# Expected behavior\r\n\r\n```none\r\n---\r\n````\r\n\r\nThat is, no output other than the separator line.\r\n\r\n# Actual behavior\r\n\r\nThe following output:\r\n\r\n```none\r\nWARNING: 3\r\nVERBOSE: 4\r\nDEBUG: 5\r\n6\r\n---\r\nWARNING: 3\r\nVERBOSE: 4\r\nDEBUG: 5\r\n```\r\n\r\n# Environment data\r\n\r\n\r\n```none\r\nPowerShell Core 6.2.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Information stream also can be redirected. If you put `$InformationPreference = 'Continue'` outside and remove redirection, then you will see that [information record get printed twice](https://github.com/PowerShell/PowerShell/issues/7814). Also note that warning stream still will be putted to `-WarningVariable` of `Receive-Job`.",
      "created_at": "2019-05-19T14:22:11Z",
      "updated_at": "2019-05-19T14:22:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @PetSerAl, I've updated the OP accordingly. So this means that while you can capture the information stream with a redirection and  with`-InformationVariable`, and the warning stream with `-WarningVariable` only, the streams (effectively) still _also_ print to the console, which cannot be suppressed.",
      "created_at": "2019-05-21T04:12:16Z",
      "updated_at": "2019-05-21T04:12:16Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "What you are seeing on console is actually a host stream. Warning/verbose/debug/information records processed remotely and resulting writes to host transferred and replicated locally.",
      "created_at": "2019-05-21T04:18:44Z",
      "updated_at": "2019-05-21T04:18:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @PetSerAl; so, to summarize: \r\n\r\nWhen remoting:\r\n\r\n* streams 3, 4, 5, 6  cannot be suppressed, because they are locally replicated as host output, which is invariably printed.\r\n* of these, only stream 6 can be redirected to a file, and both 3 and 6 can be captured with a `-*Variable` parameter; 4, 5 can neither be redirected nor captured (they have no `-*Variable` parameter).\r\n\r\nIs this a fair summary, and do you agree that there's a problem?\r\n",
      "created_at": "2019-05-21T11:40:30Z",
      "updated_at": "2019-05-21T11:40:30Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "It is depend on how you define \"problem\". There are many things I wish was implemented differently in PowerShell, but them are not and would not. Given the amount of hoops PowerShell jump thru to implement this particular behavior, I presume it intentionally done this way for compatibility reasons, thus unlikely be changed given possibility of cross-version remoting. ",
      "created_at": "2019-05-25T10:20:00Z",
      "updated_at": "2019-05-25T10:20:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl \r\n\r\n> There are many things I wish was implemented differently in PowerShell, but them are not and would not.\r\n\r\nThat's the subject of #6745, and even if changing something isn't an option for the sake of preserving backward compatibility, it is always worth getting clarity on how things _should_ work.\r\n\r\nThat said, the behavior at hand strikes me as benefitting no one, so I don't even see a reason to hang on to it for the sake of backward compatibility.\r\n\r\nAs for defining \"problem\": In this context, it is Inconsistent, obscure behavior that prevents expected functionality. \r\n",
      "created_at": "2019-05-25T11:25:15Z",
      "updated_at": "2019-05-25T11:25:15Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 So, can you propose less inconsistent, less obscure and more expected behavior?",
      "created_at": "2019-05-25T11:33:47Z",
      "updated_at": "2019-05-25T11:33:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I can describe the desired behavior, but I can't speak to the technical challenges or feasibility:\r\n\r\nMap all remote streams to the local ones fully transparently, so that the following features work the same, whether remoting is involved or not:\r\n\r\n* redirection to a file\r\n* host-output suppression (redirection to `$null`; redirected-to-a-file output not _also_ printing to the host)\r\n* use of the common `-*Variable` parameters\r\n\r\nIsn't that the obvious expectation?\r\n",
      "created_at": "2019-05-25T11:40:05Z",
      "updated_at": "2019-05-25T11:47:47Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nInvoke-Command -ComputerName SomeName {\r\n    Write-Verbose Remote -Verbose\r\n}\r\n```\r\nShould this command display verbose message?\r\n```\r\nInvoke-Command {\r\n    Write-Verbose Local -Verbose\r\n}\r\n```\r\nHow about this one?",
      "created_at": "2019-05-25T11:48:44Z",
      "updated_at": "2019-05-25T11:48:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Both of them should. However, if you redirect that stream, it should not show.\r\n```\r\nInvoke-Command -ComputerName SomeName {\r\n    Write-Verbose Remote -Verbose\r\n} 4> $null # should suppress verbose\r\n```",
      "created_at": "2019-05-25T12:07:20Z",
      "updated_at": "2019-05-25T12:07:20Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32\r\n>Both of them should.\r\n\r\nBut when `Invoke-Command` produce verbose message locally, it should be governed by local `$VerbosePreference`, which is `SilentlyContinue` by default, thus verbose message should be suppressed.",
      "created_at": "2019-05-25T12:16:38Z",
      "updated_at": "2019-05-25T12:16:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl \r\n\r\n~~That applies to the verbose messages the `Invoke-Command` _itself_ emits, not to whatever the script block it happens to be passed does.~~\r\n\r\n~~In fact, your local example behaves exactly as expected already. Now we just need to make sure the remote behavior matches.~~ (that is debatable - see below).\r\n\r\nAlso note that there are remoting scenarios where the user may not even be aware that remoting is involved: implicit remoting, calling the CLI from within PowerShell with a script block. Having such commands behave differently with respect to output streams is, as stated, inconsistent and obscure.",
      "created_at": "2019-05-25T12:20:42Z",
      "updated_at": "2019-05-27T21:10:58Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": ">That applies to the verbose messages the `Invoke-Command` *itself* emits, not to whatever the script block it happens to be passed does.\r\n\r\nSorry, but that is not how it behave for error and information records. Everything is emitted by `Invoke-Command` itself, because there is nothing else in local session and PowerShell does not have mechanic to emit for some other guy. And when records emitted locally, them follow local preference:\r\n```\r\n$ErrorActionPreference = 'SilentlyContinue'\r\n$InformationPreference = 'Continue'\r\nInvoke-Command -ComputerName SomeName {\r\n    Write-Error Error\r\n    Write-Information Information\r\n}\r\n```\r\nSo, what are you proposing?\r\n1. Current behavior for error record (which we have here since v2, IIRC) and information record should be changed. And hope that the change will not break anything.\r\n2. Warning/verbose/debug records should behave differently and ignore local preference, when replicated. So we will get yet another inconsistency.\r\n3. Warning/verbose/debug records should behave the same way as error and information records behave now and thus\r\n   ```\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Verbose Remote -Verbose\r\n   }\r\n   ```\r\n   should not display verbose record by default, because it will be suppressed by `SilentlyContinue` default local `$VerbosePreference`.",
      "created_at": "2019-05-27T03:19:31Z",
      "updated_at": "2019-05-27T03:19:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "~~You're confusing the issue~~ by bringing _preference variables_ into the picture, which do _not_ behave the same as their common-parameter counterparts (regrettably, but that's for another debate).\r\n\r\nThe following command shows that local invocation of `Invoke-Command` does _not_ apply common parameters to whatever the script block emits:\r\n\r\n```powershell\r\nPS> icm { 1; write-error 2; write-warning 3; write-verbose 4; write-debug 5; write-information 6 } -InformationAction Continue -Verbose -Debug -ErrorAction SilentlyContinue -WarningAction SilentlyContinue\r\n1\r\n icm { 1; write-error 2; write-warning 3; write-verbose 4; write-debug 5; write-information 6 } -InformationAction Continue -Verbose -Debug -ErrorAction Stop : 2\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n\r\nWARNING: 3\r\n```\r\n\r\nThat is, none of the common parameters were honored.\r\n\r\nWhile this behavior is debatable in itself, it is not the focus of this issue; rather, the focus is the inconsistency between how streams are treated depending on whether they pass through the remoting infrastructure or not.\r\n\r\nLet's take `Invoke-Command` out of the picture:\r\n\r\n```powershell\r\n# No remoting involved:\r\nPS> pwsh -noprofile  -c \"Write-Warning 'why?'\" *>$null\r\n # no output, as expected\r\n\r\n# Remoting infrastructure involved, due to use of a script block.\r\nPS> pwsh -noprofile -c { Write-Warning 'why?' } *>$null\r\nwhy?  # !! warning stream still prints\r\n```\r\n\r\nWhat justifies the latter behavior to begin with, and what justifies hanging on to it?\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-05-27T04:52:56Z",
      "updated_at": "2019-05-27T21:12:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me take a step back: We're really discussing two different things here, which only partially overlap.\r\n\r\n* (a) Your concern: selective _silencing / un-silencing_ of output streams, and how that should be controlled - preference variables vs. common parameters.\r\n\r\n* (b) My concern: consistent ability to _redirect, suppress, and collect_ stream output - _irrespective of silencing_, and irrespective of whether the streams were routed through the remoting infrastructure.\r\n\r\nWhile there is some overlap - suppression of output streams with `{n}>$null` is an alternative to silencing with `-*Action SilentlyContinue` - my suggestion is to discuss the many inconsistencies around (a) in separate issues (only _some_ preference variables and common parameters are effective in controlling whether the remote output streams are silent / turned on; as an aside, _local_ use of `Invoke-Command` is currently virtually pointless, as it offers no benefits over `&`, given that the common stream-related parameters do not apply to the script block's output.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-05-27T21:10:41Z",
      "updated_at": "2019-05-27T21:13:05Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": ">You're confusing the issue by bringing *preference variables* into the picture, which do *not* behave the same as their common-parameter counterparts\r\n\r\nYou are wrong. In **remoting** scenario preference variables do behave the same as their common-parameter counterparts.\r\n![image](https://user-images.githubusercontent.com/17184058/58432051-44051680-80b9-11e9-996d-596047fffc1e.png)\r\n![image](https://user-images.githubusercontent.com/17184058/58432076-61d27b80-80b9-11e9-864f-53e59d15d643.png)\r\n![image](https://user-images.githubusercontent.com/17184058/58432087-68f98980-80b9-11e9-8a58-b62dce846c25.png)\r\n\r\n>The following command shows that local invocation of `Invoke-Command` does *not* apply common parameters to whatever the script block emits:\r\n\r\nBut in **remoting** scenario everything in local session is emitted by `Invoke-Command` and not by script block. Thus common parameters apply to it.\r\n\r\n>Let's take Invoke-Command out of the picture:\r\n\r\nThat is not remoting at all. Minishell scenario covered by different piece of code with different rules and many its own quirks.\r\n\r\n>(a) Your concern: selective silencing / un-silencing of output streams, and how that should be controlled - preference variables vs. common parameters.\r\n\r\nNo. My concern is what **exact** behavior you propose instead of current one. Maybe current behavior is bad, but if other option is as bad as current one, then why bother?",
      "created_at": "2019-05-28T03:15:02Z",
      "updated_at": "2019-05-28T03:15:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> You are wrong. In remoting scenario preference variables do behave the same as their common-parameter counterparts.\r\n\r\nYes, that's what I had already struck out my original claim (perhaps you missed that, because I obviously did it after the fact).\r\n\r\nI let the _general_ observation stand (without spelling out that `$ErrorAction = 'Stop'` isn't the same as `-ErrorAction Stop`) and showed _specifically_ that _local_ `Invoke-Command` doesn't apply the common parameters to the script block's output (though it inherits the preference variables; in hindsight, that behavior is arguably the wrong one).\r\n\r\nBut as I've later observed, `Invoke-Command`'s local use is virtually pointless, but, more importantly, I suggested not discussing issue (a) here anymore.\r\n\r\n> That is not remoting at all.\r\n\r\nPlease see the OP, which enumerates the scenarios that appear to be affected with respect to (b).\r\n\r\nOf course `pwsh -c` isn't _remoting_ (neither are background jobs), but I _inferred_ from the behavior that the same _serialization infrastructure_ used in remoting underlies all these scenarios.\r\n\r\nSince you're clearly more familiar with the code - is that not true?\r\nShould I change the title and the OP to talk about _serialization_ instead?\r\nWhat is a minishell? (I've heard the term on occasion, but as far as I know it isn't documented.)\r\n\r\n> No. My concern is what exact behavior you propose instead of current one. \r\n\r\nRe (b) - please [see my comment above](https://github.com/PowerShell/PowerShell/issues/9585#issuecomment-495911159). \r\nLet me know if you think something is inexact about it, or if something is missing.\r\n\r\nRe (a) I may eventually open new issues, but I feel that is a less pressing concern. Of course, if _you_ have ideas for improvement, please share them.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-05-28T11:12:05Z",
      "updated_at": "2019-05-28T11:32:39Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": ">Let me know if you think something is inexact about it, or if something is missing.\r\n\r\nGiven this six scenarios, how each one of them should behave?\r\n1. ```powershell\r\n   $ErrorActionPreference = 'SilentlyContinue'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Error Error\r\n   }\r\n   ```\r\n2. ```powershell\r\n   $ErrorActionPreference = 'Continue'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Error Error\r\n   }\r\n   ```\r\n3. ```powershell\r\n   $ErrorActionPreference = 'Stop'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Error Error\r\n   }\r\n   'Text'\r\n   ```\r\n4. ```powershell\r\n   $VerbosePreference = 'SilentlyContinue'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Verbose Verbose -Verbose\r\n   }\r\n   ```\r\n5. ```powershell\r\n   $VerbosePreference = 'Continue'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Verbose Verbose -Verbose\r\n   }\r\n   ```\r\n6. ```powershell\r\n   $VerbosePreference = 'Stop'\r\n   Invoke-Command -ComputerName SomeName {\r\n       Write-Verbose Verbose -Verbose\r\n   }\r\n   'Text'\r\n   ```\r\n\r\n>neither are background jobs\r\n\r\nWith respect to `$Host.Name` them are.\r\n\r\n>I *inferred* from the behavior that the same *serialization infrastructure* used in remoting underlies all these scenarios.\r\n\r\nWell, it is not about serialization. It is about how PowerShell decide to handle received messages. And there are two pieces of code which responsible for that decisions: one for remoting and one for minishell, which make similar but different decisions.\r\n\r\n>What is a minishell?\r\n\r\nJust search source for minishell. For example: https://github.com/PowerShell/PowerShell/blob/61c7b7f1204b282028816d958e904585ab9b2cfd/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1412-L1435",
      "created_at": "2019-05-28T16:32:37Z",
      "updated_at": "2019-05-28T16:32:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl \r\n\r\nThanks for the technical clarifications - I've amended the title and the OP accordingly, including addition of a reproducible case for the minishell scenario and a description of the similar, yet distinct problems associated with it; please review the changes for accuracy.\r\n\r\n---\r\n\r\n> Given this six scenarios, how each one of them should behave?\r\n\r\nYour scenarios - which pertain to (a) - and any associated inconsistencies are well worth exploring, but, as discussed, not as part of _this_ issue, which I suggest be restricted to (b) - and I feel the desired behavior with respect to (b) as previously specified needs no further clarification.\r\n",
      "created_at": "2019-05-29T01:58:22Z",
      "updated_at": "2019-05-29T01:58:22Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "You can't not discuss this, because this is integral part of the issue. Making streams redirectable do have consequences. And you have to specify which consequences you are ready to accept.",
      "created_at": "2019-05-29T03:03:38Z",
      "updated_at": "2019-05-29T03:04:59Z"
    },
    {
      "author": "MVKozlov",
      "author_association": "NONE",
      "body": "I just leave a link to #3354 here...",
      "created_at": "2019-06-18T10:27:13Z",
      "updated_at": "2019-06-18T10:27:13Z"
    }
  ],
  "created_at": "2019-05-13T11:34:47Z",
  "labels": [
    "Issue-Question",
    "WG-Remoting"
  ],
  "number": 9585,
  "state": "open",
  "title": "Remoting infrastructure / minishells don't consistently support capturing / redirection / suppression of streams other than success and error",
  "updated_at": "2021-09-08T18:03:57Z"
}