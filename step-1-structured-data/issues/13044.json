{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13044",
  "author": "rjmholt",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFixes https://github.com/PowerShell/PowerShell/issues/13039.\r\n\r\nCurrently `Move-Item` does not support cross-mount moves on Unix, because it doesn't check properly whether given paths lie on the same filesystem.\r\n\r\nThis PR fixes the check to identify when paths lie on different devices on Unix, so that the move logic can properly copy and delete rather than trying to call the `rename` API.\r\n\r\n**NOTE** I'm not sure how we can test this, but I would love to if possible.\r\n\r\n## PR Context\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-07-06T23:39:10Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ugh Visual Studio applied some autoformatting...",
      "created_at": "2020-06-27T18:35:35Z",
      "updated_at": "2020-06-27T18:35:35Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Would it be reasonable to try the `rename` call and recognize the `EXDEV` error? [rename(2)](https://linux.die.net/man/2/rename) says `rename` will fail with that if you try to rename between two mount points of the same file system; in which case, I think `st_dev` will be equal.",
      "created_at": "2020-06-27T19:38:33Z",
      "updated_at": "2020-06-27T20:00:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Would it be reasonable to try the rename call and recognize the EXDEV error?\n\nWe don\u2019t call that directly, it\u2019s a couple of layers down within .NET.\n\nIt turns out there\u2019s a similar check done for Windows already with the `Move-Item` call and I think the best thing is to do something similar here.\n\nPowerShell already has its own `stat` call, so basically we use that to check whether the device ID of the source and destination are the same.\n\nImplementing that conforms with the existing logic and minimises the code changes required to fix this bug (which we may not be able to test).",
      "created_at": "2020-06-28T05:49:00Z",
      "updated_at": "2020-06-28T05:49:00Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "[A comment in GNU coreutils](https://github.com/coreutils/coreutils/blob/439741053256618eb651e6d43919df29625b8714/src/mv.c#L212-L216) notes that comparing `st_dev` to decide whether to `rename` is not reliable with NFS.",
      "created_at": "2020-06-28T08:27:35Z",
      "updated_at": "2020-06-28T08:27:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> A comment in GNU coreutils notes that comparing st_dev to decide whether to rename is not reliable with NFS.\r\n\r\nHmmm, yeah that's good information.\r\n\r\nI'm also interested by the fact that .NET makes file copying work across drives but not directory copying, making me feel that this might be unintended behaviour. Since their layer is better placed to deal with this, I'll follow up with them before we proceed.",
      "created_at": "2020-06-28T14:53:27Z",
      "updated_at": "2020-06-28T14:53:27Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Given the discussion in https://github.com/dotnet/runtime/issues/31149, I don't think .NET is about to fix this, so continuing with a workaround.",
      "created_at": "2020-06-28T18:04:41Z",
      "updated_at": "2020-06-28T18:04:41Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Are there already tests for these scenarios:\r\n\r\n- Move a directory to a subdirectory of itself via a symbolic link\r\n\r\n  1. `a/b/c/d` is a file.\r\n  3. `e` is a symbolic link to `a/b`.\r\n  3. `Move-Item a e/f` must fail because that would move `a` to `a/b/f`, and the directory cannot be moved to a subdirectory of itself.\r\n  4. After `Move-Item` has failed, `a/b/c/d` must still exist.\r\n\r\n- Move a mount point\r\n\r\n  1. `a` is a directory with a file system mounted on it. Thus, the directory cannot be deleted before the file system is unmounted.\r\n  2. `a/b` is a file.\r\n  3. `c` is an empty directory.\r\n  4. `Move-Item a c/d` may succeed or fail.\r\n  5. After `Move-Item` has succeeded, `c/d/b` must exist.\r\n  6. After `Move-Item` has failed, either `c/d/b` or `a/b` must exist.\r\n\r\n  Another program used to have a [bug](https://bugs.debian.org/166369) where it detected the inability to delete `a` and incorrectly tried to roll back by deleting `c/d` as well, losing all the files.",
      "created_at": "2020-06-29T05:51:36Z",
      "updated_at": "2020-06-29T05:51:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Are there already tests for these scenarios:\r\n\r\nI'm not familiar with the `Move-Item` tests, but I suspect all the tests we have are in the file I've added to here -- so if there's no test for a given scenario in there, there may be no test.\r\n\r\nI'd prefer to keep discussion in this PR scoped, but your contribution of either an issue enumerating those tests or test code itself would be very welcome.",
      "created_at": "2020-06-29T05:58:04Z",
      "updated_at": "2020-06-29T05:58:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Move a mount point\r\n\r\nI'm not currently sure how we would reliably create mount points in our testing infrastructure, especially on the various platforms. I may need help from @adityapatwardhan and @JamesWTruher for that.",
      "created_at": "2020-06-29T05:59:09Z",
      "updated_at": "2020-06-29T05:59:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:19:55Z",
      "updated_at": "2020-08-17T22:19:55Z"
    }
  ],
  "created_at": "2020-06-27T18:34:45Z",
  "number": 13044,
  "state": "closed",
  "title": "Fix FS moves across Unix mounts",
  "updated_at": "2020-08-17T22:19:55Z"
}