{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16818",
  "author": "natebarkei",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\npwsh.exe 7.2.1 is consistently crashing in terminal when using the alternant screen buffer ansi commands. It appears to not be able to read the console buffer after a return to the original screen (ESC[?1049l). \r\n\r\nThis issue appears to not happen in 7.1.4, but does happen in 7.2.1.\r\n\r\nCode to reproduce:\r\n>\r\n>   $ESC = [char]27\r\n>    for($i=0; $i -lt 100; $i++) {\r\n>        $host.ui.Write(\"$ESC[?1049h\")\r\n>        $host.ui.Write(\"Alternate screen buffer\")\r\n>        $host.ui.Write(\"$ESC[?1049l\")\r\n>        $host.ui.Write('.')\r\n>    }\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nNot having the pwsh application crash.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n[process exited with code 2148734499]\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nSince the process terminates it is impossible to use Get-Error however these are the event logs generated.\r\n\r\n`Faulting application name: pwsh.exe, version: 7.2.1.500, time stamp: 0x61735063\r\nFaulting module name: Microsoft.PowerShell.ConsoleHost.dll, version: 7.2.1.500, time stamp: 0x82fa903e\r\nException code: 0x80131623\r\nFault offset: 0x000000000004e67a\r\nFaulting process id: 0x4470\r\nFaulting application start time: 0x01d81454ff876eb3\r\nFaulting application path: C:\\Program Files\\WindowsApps\\Microsoft.PowerShell_7.2.1.0_x64__8wekyb3d8bbwe\\pwsh.exe\r\nFaulting module path: C:\\Program Files\\WindowsApps\\Microsoft.PowerShell_7.2.1.0_x64__8wekyb3d8bbwe\\Microsoft.PowerShell.ConsoleHost.dll\r\nReport Id: f4a3f960-3476-482c-a6ce-3659f0956721\r\nFaulting package full name: Microsoft.PowerShell_7.2.1.0_x64__8wekyb3d8bbwe\r\nFaulting package-relative application ID: App`\r\n\r\n`Application: pwsh.exe\r\nCoreCLR Version: 6.0.21.52210\r\n.NET Version: 6.0.0\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: The Win32 internal error \"No process is on the other end of the pipe.\" 0xE9 occurred while getting console output buffer information. Contact Microsoft Customer Support Services.\r\nDescription: The process was terminated due to an unhandled exception.System.Management.Automation.Host.HostException: The Win32 internal error \"No process is on the other end of the pipe.\" 0xE9 occurred while getting console output buffer information. Contact Microsoft Customer Support Services.\r\n ---> System.ComponentModel.Win32Exception (233): No process is on the other end of the pipe.\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.PowerShell.ConsoleControl.GetConsoleScreenBufferInfo(SafeFileHandle consoleHandle)\r\n   at Microsoft.PowerShell.ConsoleHostRawUserInterface.get_CursorPosition()\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.Run(Boolean inputLoopIsNested)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.RunNewInputLoop(ConsoleHost parent, Boolean isNested)\r\n   at Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt()\r\n   at Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(String initialCommand, Boolean skipProfiles, Collection`1 initialCommandArgs, Boolean staMode, String configurationName)\r\n   at Microsoft.PowerShell.ConsoleHost.Run(CommandLineParameterParser cpp, Boolean isPrestartWarned)\r\n   at Microsoft.PowerShell.ConsoleHost.Start(String bannerText, String helpText)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String[] args, Int32 argc)\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String[], Int32)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(System.String[])\r\n`\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "In my environment pwsh does not crash. Just jumped cursor:\r\n\r\n\r\nhttps://user-images.githubusercontent.com/78153320/151585716-ca77d788-74a7-4ca0-865c-acfcedf089c7.mp4\r\n\r\n",
      "created_at": "2022-01-28T16:41:27Z",
      "updated_at": "2022-01-28T16:41:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT In continuation of our discussion, this issue demonstrates why I concern that we are being forced to create \"Windows Terminal\".",
      "created_at": "2022-01-28T17:26:54Z",
      "updated_at": "2022-01-28T17:26:54Z"
    },
    {
      "author": "natebarkei",
      "author_association": "NONE",
      "body": "The size of the terminal window and whether it has been maximized seems to effect this bug somewhat. There is defiantly a timing issue involved. But pwsh shouldn't just be hard faulting here... without looking at the code can't you try catch this call. I gave you the stacktrace.\r\n\r\nhttps://user-images.githubusercontent.com/30415407/151594159-710a5b6e-501e-4922-8675-06ab387307b3.mp4\r\n\r\n ",
      "created_at": "2022-01-28T17:32:45Z",
      "updated_at": "2022-01-28T17:32:45Z"
    },
    {
      "author": "natebarkei",
      "author_association": "NONE",
      "body": "Honestly, if you have a workaround that would be fine as well. Clearly, the sample code I wrote to repro this isn't the actual reason I'm reporting this bug. I have tried inserting `start-sleep` in before I attempt to access the buffer again (through ansi calls to `$host.ui.Write`) to no avail (probably because it's single threaded and not allowing whatever needs to happen to happen). \r\nThrowing an error is fine, but just terminating the entire runtime without a way to recover or trap is insane.",
      "created_at": "2022-01-28T17:43:42Z",
      "updated_at": "2022-01-28T17:43:42Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> The size of the terminal window and whether it has been maximized seems to effect this bug somewhat.\r\n\r\nI couldn't reproduce the wt crash\r\n\r\n![Screenshot 2022-01-28 203826](https://user-images.githubusercontent.com/78153320/151595364-0759e13a-1d78-467c-87ec-e9dc1852d57c.png)\r\n",
      "created_at": "2022-01-28T17:44:00Z",
      "updated_at": "2022-01-28T17:44:00Z"
    },
    {
      "author": "natebarkei",
      "author_association": "NONE",
      "body": "Well since you are having such a hard time reproducing it that probably is a good indicator of why it's not fixed. Pwsh is clearly reading into an uninitialized buffer somewhere under some circumstances. I also doubt a lot of developers are using ansi codes and alt screen on windows with ps.\r\n\r\nIf you watch this video, you will see the following amazing events in real time:\r\n- It terminating the runtime 7.2.1 (trying to switch back)\r\n- It working under PS5\r\n- It working under 7.2.1\r\n- Maximizing terminal, working under 7.2.1\r\n- Closing Terminal and reopening it\r\n- It working under 7.2.1\r\n- Maximizing terminal\r\n- It terminating the runtime under 7.2.1 (trying to switch to)\r\n\r\nhttps://user-images.githubusercontent.com/30415407/151597417-a62941e8-67ab-462d-8815-19fd3dea7ba4.mp4\r\n\r\n",
      "created_at": "2022-01-28T18:10:19Z",
      "updated_at": "2022-01-28T18:10:19Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I don't know why this bug is not reproduced. In this video pwsh is launched in the standard windows console ( `Win+R > pwsh` ).\r\n\r\nhttps://user-images.githubusercontent.com/78153320/151602658-09e0a38e-c1fc-4733-9d1f-81a5ed665b3d.mp4\r\n\r\n",
      "created_at": "2022-01-28T18:49:14Z",
      "updated_at": "2022-01-28T18:49:14Z"
    },
    {
      "author": "natebarkei",
      "author_association": "NONE",
      "body": "Has anyone else been able to try and see if they can reproduce this issue? I have been able to personally repro it on three machines so far.",
      "created_at": "2022-01-31T17:48:21Z",
      "updated_at": "2022-01-31T17:48:21Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I see the only difference - you installed pwsh from the store, and I installed it from the msi package. That's probably the reason.\r\n``` \r\n>  $PSHOME\r\nC:\\Program Files\\PowerShell\\7\r\n```",
      "created_at": "2022-02-01T06:38:22Z",
      "updated_at": "2022-02-01T07:22:41Z"
    },
    {
      "author": "elsaco",
      "author_association": "NONE",
      "body": "Can't repro either:\r\n\r\n![pwsh_issue_16818](https://user-images.githubusercontent.com/3933920/152170126-5e5696ff-e34b-4d9d-a088-37a672ccbbb4.png)\r\n\r\n",
      "created_at": "2022-02-02T14:12:17Z",
      "updated_at": "2022-02-02T14:12:17Z"
    }
  ],
  "created_at": "2022-01-28T15:36:37Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 16818,
  "state": "open",
  "title": "pwsh faulting when using Ansi alternate screen buffer",
  "updated_at": "2022-02-02T14:12:17Z"
}