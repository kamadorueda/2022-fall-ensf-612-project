{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8446",
  "author": "qt3m45su0najc7",
  "body": "Link shortcuts to folders are not currently supported by set-location.  The enhancement request is to support these file types for get-location, set-location, and querying the lnk file for what it references.",
  "closed_at": null,
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Yourself know its not a `Directory` , and `.lnk`s are not locations/directories/containers. Mentioned cmdlets are designed to work on Directories with different providers and not on Files.\r\n\r\n@mklement0 Do you see any use case for this ?",
      "created_at": "2018-12-12T16:34:24Z",
      "updated_at": "2018-12-12T17:02:40Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "@kvpraseoon, 'lnk' files can point to files or folder.",
      "created_at": "2018-12-12T16:39:38Z",
      "updated_at": "2018-12-12T16:39:38Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "I think are expecting a redirection approach. But still `.lnk` is treated as a file and not sure about the feasibility of addressing this. Let see comments from others.",
      "created_at": "2018-12-12T17:04:25Z",
      "updated_at": "2018-12-12T17:04:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The FileSystem provider's cmdlets such as `*-Location` and `*-*Item` operate only on actual _filesystem features_.\r\n\r\nBy contrast, `*.lnk`  (and `.url`) files are a feature of the [Windows (GUI) shell](https://en.wikipedia.org/wiki/Windows_shell), whereas from a filesystem perspective they are simply _files_ - the filesystem knows nothing about such files' _contents_, which is where the shortcut target information is stored.\r\n\r\nContrast this with _symlinks_ (also junctions, mount points, and hard links) which are indeed filesystem features.\r\n\r\n---\r\n\r\nIt would definitely be handy to have a PowerShell-idiomatic way to query `*.lnk` / `*.url` files, but I'm not sure direct support in `Get-Location` / `Set-Location` is the right place for it:\r\n\r\n* A `.lnk` file may point to an _executable file_, which would make its use pointless with `*-Location`.\r\n\r\n* Selectively adding non-filesystem features to just the `*-Location` cmdlets would introduce an inconsistency with the other cmdlets.\r\n\r\nPerhaps the better solution is to introduce dedicated cmdlets for querying / creating / updating shortcut files.\r\n\r\nFor instance, instead of the currently awkward (note the need to pass a _full_ path, because the shell's idea of the current directory differs):\r\n\r\n```powershell\r\nSet-Location ((New-Object -ComObject WScript.Shell).CreateShortcut(\"$pwd\\some.lnk\")).TargetPath\r\n```\r\n\r\na potential `Get-ShortcutFile` cmdlet could enable something like:\r\n\r\n```powershell\r\nSet-Location (Get-ShortcutFile some.lnk).TargetPath\r\n```",
      "created_at": "2018-12-12T18:32:20Z",
      "updated_at": "2018-12-12T18:32:20Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Hi @mklement0 Thank you.  Thoughtfully considered.  For me, even the final proposal is stall a little awkward for me.  I was hoping for an 'objects that act (transparently) like folders should be addressed uniformly' solution.  I think the utility should be able to introspect and determine that applying .targetpath, or any other hint like ornamentation, is needed rather than the developer.",
      "created_at": "2018-12-12T18:49:48Z",
      "updated_at": "2018-12-12T18:49:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@qt3m45su0najc7:\r\n\r\nWhile it would definitely be more convenient if `Set-Location` directly supported `*.lnk` files, I think it's better to keep the realms separate, not least because the overlap is imperfect: shortcut files represent not  _just_ directories / files, and integrating a _subset_ of their features into the filesystem cmdlets invites conceptual confusion.\r\n\r\nFor instance, while a `*.lnk` file passed to `Set-Location` can only be sensibly interpreted as wanting to use that shortcut file's _target path_, use of `*lnk` files with `Get-Item` / `Get-ChildItem` would require disambiguation: are you targeting the `*.lnk` file itself or its target?\r\n\r\nIndependently, I think `*-ShortcutFile` cmdlets would be a useful addition.\r\n",
      "created_at": "2018-12-12T20:29:50Z",
      "updated_at": "2018-12-12T20:31:10Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "@mklement0 , Doesn't new-item have that kind of ambiguity? Do you want a new file or a folder? Isn't it resolved by -parameter (-itemtype)?  Couldn't the same approach be applied?  \r\nJust posing the questions.  I am simply playing the amicus cruaie, not the arbiter.",
      "created_at": "2018-12-12T22:13:05Z",
      "updated_at": "2018-12-12T22:13:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`New-Item`, in the context of the FileSystem provider, defaults to item type _file_ and requires you to explicitly indicate if you want the _other_ foundational type of filesystem object - a _directory_ (folder) - or an indirection entity targeting either foundational type, such as a symlink.\r\n\r\nThe need to choose arises out of there being two foundational item types in filesystems, but note how the choices are limited to filesystem types _in the abstract_, irrespective of their (future) _content_.\r\n\r\nSimilarly, you have the `-File` and `-Directory` switches for `Get-ChildItem` to limit matching to either foundational type.\r\n\r\nNote how you cannot do `New-Item -Type WordDocument`, for instance; that is, you can't create a new file with _specific content_, which is what creating a shortcut file (`.lnk` / `.url`) would require.\r\n\r\nThe Windows shell is a separate world built _on top of_ filesystem functionality - blending the two makes for a conceptual blur, and is also problematic from a cross-platform perspective.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-12T23:55:14Z",
      "updated_at": "2018-12-12T23:55:44Z"
    }
  ],
  "created_at": "2018-12-11T15:59:40Z",
  "number": 8446,
  "state": "open",
  "title": "get-location,set-location should support '.lnk' filetypes",
  "updated_at": "2021-12-03T12:57:05Z"
}