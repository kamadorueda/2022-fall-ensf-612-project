{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5232",
  "author": "Jaykul",
  "body": "If I modify the PSModulePath, it causes errors on practically every module load.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n```posh\r\npwsh -noprofile\r\n\r\n# Add a new, folder to the PSModulePath. This one is empty. It doesn't have to be.\r\n$Env:PSModulePath += \";\" + $(mkdir TestModules | cvpa)\r\n\r\n# Try to import a module that's already imported \r\nimport-module Microsoft.PowerShell.Management\r\n\r\n# Try to import a new module\r\nimport-module Microsoft.PowerShell.Diagnostics\r\n\r\n# List the imported modules:\r\nGet-Module\r\n\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\nSilent success\r\n\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nNo matter what module you load, you get an error message. For instance:\r\n\r\n```\r\nimport-module : The specified module 'Microsoft.PowerShell.Management' was not loaded because no valid module file was\r\nfound in any module directory.\r\nAt line:1 char:1\r\n+ import-module Microsoft.PowerShell.Management\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ResourceUnavailable: (Microsoft.PowerShell.Management:String) [Import-Module], FileNotFoundException\r\n    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nNote: the module _**is** loaded_, but the error message indicates that it was not. This applies to modules that were already loaded as well as importing new modules -- you get a big error, but it appears that the module import is actually working behind the scenes:  Get0Mo\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```posh\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2017-10-26T21:16:47Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "With some code refactoring to support case-insensitive module loading on non-Windows, the loop looking for the module wasn't breaking after it found the module so even though it loaded the module, it thinks it wasn't found so it reports an error.",
      "created_at": "2017-10-25T21:32:54Z",
      "updated_at": "2017-10-25T21:32:54Z"
    },
    {
      "author": "doxxx",
      "author_association": "NONE",
      "body": "I'm still seeing this problem on Linux with powershell 6.0.0-rc.2.\r\n\r\nI have a build script that updates `$env:PSModulePath` to add a directory containing custom modules. Let's call this `/path/to/custom/modules`. So my PSModulePath looks like:\r\n\r\n```\r\n/home/myuser/.local/share/powershell/Modules:/usr/local/share/powershell/Modules:/opt/microsoft/powershell/6.0.0-rc.2/Modules:/path/to/custom/modules\r\n```\r\n\r\n The directory structure looks like this:\r\n\r\n```\r\n/path/to/custom/modules\r\n- CompanyName\r\n  - Git\r\n    - Git.psm1\r\n```\r\n\r\nWhen I try `Import-Module CompanyName\\Git` (or `CompanyName/Git`), I get the error as described in the OP. I also tried `CompanyName\\Git\\Git` and `CompanyName\\Git\\Git.psm1`.\r\n\r\nHowever, this works: `Import-Module /path/to/custom/modules/CompanyName/Git/Git.psm1`\r\n\r\nIf I move `Git.psm1` to `/path/to/custom/modules/Git/Git.psm1`, then `Import-Module Git` works.\r\n\r\nSo I'm guessing that the namespace subfolders behaviour of Powershell 5.1 on Windows no longer works in Powershell Core 6. If I use \"CompanyName.Git\" as the folder name and psm1 filename, then it works. I'm happy with this as a solution.\r\n",
      "created_at": "2017-12-22T16:02:28Z",
      "updated_at": "2017-12-22T16:27:47Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Interesting! For many years I have assume adding the custom Module folder to the PSmodulePath then the actual module folder name is the one containing the PSD1 and PSM1 files.  I have always kept it simple!\r\n\r\n:)\r\n![linuxcustommodules_2017-12-22_11-53-31](https://user-images.githubusercontent.com/19892435/34306150-ad14c7a0-e70f-11e7-89d5-a7e659e220db.png)\r\n",
      "created_at": "2017-12-22T17:00:32Z",
      "updated_at": "2017-12-22T17:00:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@doxxx Feel free open new Issue if you believe that this behavior is useful.",
      "created_at": "2017-12-22T17:48:26Z",
      "updated_at": "2017-12-22T17:48:26Z"
    },
    {
      "author": "doxxx",
      "author_association": "NONE",
      "body": "@iSazonov I think it's fine. Just initially confusing coming from PowerShell 5.1. It may be something to note in a migration guide or other documentation.",
      "created_at": "2017-12-22T17:52:23Z",
      "updated_at": "2017-12-22T17:52:23Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "You were never supposed to nest them ... except for version number folders. The other thing is a major perf bug in PS5",
      "created_at": "2017-12-23T06:14:02Z",
      "updated_at": "2017-12-23T06:14:02Z"
    }
  ],
  "created_at": "2017-10-25T17:36:37Z",
  "labels": [
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 5232,
  "state": "closed",
  "title": "Major module loading problems in beta 9",
  "updated_at": "2017-12-23T06:14:02Z"
}