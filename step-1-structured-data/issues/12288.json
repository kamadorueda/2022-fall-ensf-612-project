{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12288",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #3322 on Windows and Linux. For MacOs we will open new tracking issue to implement later.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-05-29T18:33:50Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov can you give a before and after for a perf comparison? Call `Get-CimInstance` or `Get-Content` for every `System.Diagnostics.Process` object sounds expensive.\r\n\r\nThe test can be as simple as:\r\n\r\n```PowerShell\r\nMeasure-command { 1..100 | % { get-process } }\r\n```\r\n",
      "created_at": "2020-04-18T00:31:34Z",
      "updated_at": "2020-04-18T00:31:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan It is \"on demand\" property - you evaluate it only if you explicitly call the property. But if you call you get a slowdown. It is not in default output so users don't see slowdown in common scenarios.\r\nNotice, I found WMI is very fast on latest Windows versions (Windows 10 and Windows Server 2019). If someone provides feedback that it's still slow we could consider a P/Invoke. \r\nOn Linux `/proc` works fast. \r\nFor MacOs I do not know API. I am going to open new tracking issue for this after the PR will be merged.\r\n",
      "created_at": "2020-04-18T08:00:02Z",
      "updated_at": "2020-04-18T08:00:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For both Linux and macOS, I wonder if it would be ok to run `ps` to cache the command lines and map it to the object?",
      "created_at": "2020-04-20T17:08:26Z",
      "updated_at": "2020-04-20T17:08:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Using `/proc` is simple and reliable on Linux so no need to create a workaround.\r\nI haven't Mac and can not create even a workaround. Nonetheless I hope there is a good API for that.\r\n",
      "created_at": "2020-04-20T17:13:41Z",
      "updated_at": "2020-04-20T17:13:41Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@TravisEz13 @JamesWTruher Do you know of a macOS workaround for this?",
      "created_at": "2020-04-24T18:47:16Z",
      "updated_at": "2020-04-24T18:47:16Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov I am not sure if we should take this PR without having a solution for all platforms. This introduces gotchas and makes cross platform scripting difficult.\r\n\r\n@iSazonov @SteveL-MSFT - thoughts?",
      "created_at": "2020-04-29T21:48:32Z",
      "updated_at": "2020-04-29T21:48:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My plan is to open a tracking issue for MacOs. We have a lot of time before release and can investigate how enhance the feature on MacOs. ",
      "created_at": "2020-04-30T03:17:42Z",
      "updated_at": "2020-04-30T03:17:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The APIs will probably require some native coding on the mac.\r\n\r\nWe can probably use the same apis as `top`. \r\n\r\nhttps://opensource.apple.com/source/top/top-111.20.1/libtop.c.auto.html\r\n",
      "created_at": "2020-05-08T10:51:37Z",
      "updated_at": "2020-05-08T10:54:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:01:09Z",
      "updated_at": "2020-05-27T02:01:09Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov Please open a tracking bug for macOS and also open a issue for documentation as per the PR template.",
      "created_at": "2020-05-28T20:15:45Z",
      "updated_at": "2020-05-28T20:15:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Tracking issue #12832\r\n\r\nAs for doc issue - do we really need to document this? It seems we haven't docs for extended properties at all.\r\n/cc @sdwheeler ",
      "created_at": "2020-05-29T05:10:47Z",
      "updated_at": "2020-05-29T05:10:47Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov No, we don't document the extended properties. But this is worth adding to the release notes.",
      "created_at": "2020-05-29T14:03:59Z",
      "updated_at": "2020-05-29T14:03:59Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov Thank you for your contribution!",
      "created_at": "2020-05-29T18:34:11Z",
      "updated_at": "2020-05-29T18:34:11Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:06:41Z",
      "updated_at": "2020-06-25T19:06:41Z"
    }
  ],
  "created_at": "2020-04-09T17:26:54Z",
  "number": 12288,
  "state": "closed",
  "title": "Add CommandLine property to Process",
  "updated_at": "2020-06-25T19:06:42Z"
}