{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16734",
  "author": "MartinGC94",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nFixes https://github.com/PowerShell/PowerShell/issues/3082\r\nFixes https://github.com/PowerShell/PowerShell/issues/16676\r\nFixes https://github.com/PowerShell/PowerShell/issues/13525\r\n\r\nAdds support for Type aliases. Normal types, generic types and array types are all supported. Example:\r\n```\r\nusing type MyNormalType = System.Collections.ArrayList\r\nusing type MyGenericType = System.Collections.Generic.Dictionary[string,int]\r\nusing type MyMultiDimArray = int[,]\r\nusing type MyOpenGenericType = System.Collections.Generic.List\r\n[MyNormalType]\r\n[MyGenericType]\r\n[MyMultiDimArray]\r\n[MyOpenGenericType[string]]\r\n```\r\nAlso adds support for Namespace aliases. Example:\r\n```\r\nusing namespace SMA = System.Management.Automation\r\n[SMA.PowerShell]\r\n```\r\nNaturally, the tab completion has been updated to support these alias features.\r\n\r\nThere are also some other changes that were made to better support these features:\r\n\r\n**Duplicate using namespaces are blocked at parse time.** Previously they were allowed, but caused runtime errors if you attempted to use the short type name from the duplicated namespace. See: https://github.com/PowerShell/PowerShell/issues/13525  \r\nThis is not technically required because the check could be limited to just namespace aliases, but seems unlikely to cause issues.\r\n\r\n**The public Alias property for UsingStatementAst was changed from StringConstantExpressionAst to Ast.** This was done to allow the use of TypeConstraintAst for namespace and type aliases.  \r\nThis is not technically required because the text can simply be parsed again to get the itypename where its needed but that's not ideal.\r\n\r\n**The tokenflags for both the name and alias tokens when using type aliases are changed to TypeName** for better syntax highlighting and tab completion.\r\n\r\n**The parsing rules for the alias definition uses type rules for Type/Namespace instead of generic.** This was done for better tokenization.\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\nI saw the code from @IISResetMe here: https://github.com/PowerShell/PowerShell/pull/8968 and thought it was a shame to just let it die like that.  \r\nI wouldn't have known how to do this without having his code as a starting point so most of the credit should go to him.\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> To support generic types with multiple type arguments I had to change the public Alias property for UsingStatementAst from StringConstantExpressionAst to ExpressionAst. Maybe there's a better way to do this by changing the parsing rules? The tokenization doesn't create useful tokens when generic types are involved but I don't really know how to fix that.\r\n> I would appreciate any help/advice for this.\r\n\r\nWe have #12412. I guess we need to have it first. /cc @vexx32 \r\n\r\n> This PR also fixes the parsing exception that gets thrown when you enter a newline after the equals sign in alias using statements like: using namespace whatever = but I'll probably create a separate PR for that minor change.\r\n\r\nYes, it is right intention. ",
      "created_at": "2022-01-12T03:47:43Z",
      "updated_at": "2022-01-12T03:47:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure how much help #12412 will be in the end for this specific PR, but I agree it would be better to get that in place first, so we can be sure they work together properly.",
      "created_at": "2022-01-12T04:32:45Z",
      "updated_at": "2022-01-12T04:32:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Thanks! Maybe you ask about  #12412 on next Community call.",
      "created_at": "2022-01-12T04:36:38Z",
      "updated_at": "2022-01-12T04:36:38Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Very cool, thanks for reviving this topic @MartinGC94!",
      "created_at": "2022-01-12T15:12:52Z",
      "updated_at": "2022-01-12T15:12:52Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "How should conflicting type aliases work? Consider the following example:\r\n```\r\nusing namespace System.Timers\r\nusing type Timer = string\r\n[Timer] #What type is this?\r\n```\r\nIn the above example, `Timer` can either be `System.Timers.Timer` or `System.String`.  \r\nI think it should throw an ambiguous type error, and that's what my latest commit does but based on the comment at the top of the method it seems like the intent was that type aliases should take priority just like type accelerators currently do. Meaning that `Timer` would just resolve to `System.String`.",
      "created_at": "2022-01-13T21:31:08Z",
      "updated_at": "2022-01-13T21:31:08Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> How should conflicting type aliases work? Consider the following example:\r\n> \r\n> ```\r\n> using namespace System.Timers\r\n> using type Timer = string\r\n> [Timer] #What type is this?\r\n> ```\r\n> \r\n> In the above example, `Timer` can either be `System.Timers.Timer` or `System.String`.\r\n\r\nI'm afraid I didn't write much down (beyond the code you salvaged), but I remember testing different constraint models and made some observations, I've tried compiling them here. I haven't had time to play around with code or do a full review yet, so it's entirely possible I've listed or highlighted things below that you've already addressed :) \r\n\r\n----\r\n\r\nThere are several distinct types of conflict you need to keep in mind (examples below):\r\n\r\n - Parse time conflicts (these should all be treated as parse-time errors and handled in the parser/compiler pipeline):\r\n   - Conflicting type aliases\r\n   - Conflicting namespace aliases\r\n   - Conflicting aliases (any kind) and runtime-defined type (`enum`, `class`, hereinafter referred to as PSType)\r\n - Runtime conflicts (should be handled primarily though ordered resolution, with exceptions)\r\n   - Single-lable type name resolves to multiple imported namespaces or an alias (**this one** is your example)\r\n   - Qualified type names resolve to multiple types when factoring in namespaces imported or aliases (I'll cover this in a subsequent comment, I need some sleep first \ud83d\ude05 )\r\n\r\nAdditionally, I'm going to assume the following constraint throughout (please implement test cases for this!):\r\n - Alias names are _single-label names_ - `using {type,namespace} A` is a valid pattern but `using {type,namespace} A.B` should never be allowed. This ensures we never have to worry about conflicts between namespaces and type aliases, since namespaces are always used as _qualifiers_ in type literals. \r\n\r\nI'll start with your example and circle back to the conflicts that should fail compilation below:\r\n\r\n## Precedence order for resolving single-label type names\r\n\r\nI remember briefly discussing the design intentions with @lzybkr at some point, and the idea was indeed to let type aliases take precedence - similar to command discovery precedence where aliases hide other commands of the same name - so we would have the following resolution order:\r\n\r\n 1. type alias\r\n 2. PSType\r\n 3. type accelerator\r\n 4. imported namespace \r\n 5. default discovery/`usedSystem`\r\n\r\nSo, `using type Timer = string` takes precedence and as a result, \r\n - `[Timer] -eq [string]`, (rank 1)\r\n - `[ElapsedEventArgs] -eq [System.Timers.ElapsedEventArgs]` (rank 4)\r\n - `[System.Timers.Timer]` remains unaffected (would have been resolved by rank 4, but hidden by `[Timer]` alias at rank 1)\r\n\r\nTo illustrate what PSType vs namespace looks like:\r\n```\r\nusing namespace System.Timers\r\n\r\nclass Timer\r\n{\r\n  [string] ToString() { return \"Not the timer you're looking for\" }\r\n}\r\n```\r\n\r\nHere, `[Timer]` should always and unambiguously refer to the local `class Timer {...}` type - type resolver shouldn't \"reach\" rank 4 and search `[System.Timers]` because `[Timer]` was resolved at rank 2\r\n\r\n\r\n----\r\n\r\n## Parse time conflicts\r\n\r\nI believe we should never encourage _intentional ambiguity_, the same way we don't allow conflicting member names or ambiguous local variable names in PSType definitions. \r\n\r\n### Aliases\r\n\r\nEncountering any of the following in the same scriptblock/file should result in compilation failure (at the latest):\r\n```\r\nusing type A = string\r\nusing type A = int\r\n```\r\n```\r\nusing namespace A = B.C\r\nusing namespace A = D.E\r\n```\r\n\r\nI'd argue the following statement should _not necessarily be considered invalid_, as there's no proven technical ambiguity at this point in time, but it _is_ confusing to read:\r\n ```\r\n using type A = string\r\n using namespace A = B.C\r\n ```\r\n\r\n### Conflicting aliases and PSType\r\n\r\nConflicts between `using` aliases and PSTypes should also result in a parse-time error:\r\n\r\n```\r\nusing type A = string\r\n\r\nclass A { ... }\r\n```\r\n\r\nThe following should also throw an error if classes.psm1 contains a PSType definition with name `A`, but we will probably have to delay this check until late in the compilation pipeline (just before, or during PSType generation likely):\r\n\r\n```\r\nusing type A = string\r\nusing module classes.psm1\r\n```\r\n\r\nThis doesn't cover _every_ facet of resolution across different types of qualifiers but hopefully this should be enough to help you decide on approach to resolution order, and start _writing some tests_! \ud83d\ude09 \r\n",
      "created_at": "2022-01-13T23:58:18Z",
      "updated_at": "2022-01-14T00:08:25Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> Not sure how much help #12412 will be in the end for this specific PR, but I agree it would be better to get that in place first, so we can be sure they work together properly.\r\n\r\n@vexx32 At the risk on jinxing myself here (I haven't tried merging+testing yet), these two changes appear orthogonal and shouldn't conflict. There's no syntactical concept of individual members (nor their generic type parameter arguments) in the context of `using` statements so this feature never touches your member parsing and resolution logic, and your feature simply need the type resolution API to remain stable (which is the case after this change).",
      "created_at": "2022-01-14T00:28:19Z",
      "updated_at": "2022-01-14T00:28:58Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your thoughts @IISResetMe I've added parsing errors for conflicting aliases and type definitions.\r\nI've also allowed type aliases to take priority over using namespaces again.\r\n```\r\nusing namespace System.Timers\r\nusing type Timer = string\r\n[Timer] #Resolves to System.String due to the alias, and not System.Timers.Timer\r\n```\r\n\r\nNote that I've also made a breaking change by making duplicate namespaces like:\r\n```\r\nusing namespace System.Management.Automation.Language\r\nusing namespace System.Management.Automation.Language\r\n```\r\na parsing error. Currently it's allowed, but if you try to actually use a type from that namespace you get a runtime error like this: `Type name 'Token' is ambiguous, it could be 'System.Management.Automation.Language.Token' or 'System.Management.Automation.Language.Token'.` I can limit it to duplicate namespace aliases only but I think the odds of this breaking change affecting any real world scripts seem low enough that it's worth keeping.",
      "created_at": "2022-01-15T17:12:30Z",
      "updated_at": "2022-01-15T17:12:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">Duplicate using namespaces are blocked at parse time. Previously they were allowed, but caused runtime errors if you attempted to use the short type name from the duplicated namespace. See: #13525\r\nThis is not technically required because the check could be limited to just namespace aliases, but seems unlikely to cause issues.\r\n\r\nI agree it is unlikely but it is still a breaking change so ask PowerShell Committee.\r\n\r\n> Duplicate using namespaces are blocked at parse time. Previously they were allowed, but caused runtime errors if you attempted to use the short type name from the duplicated namespace. See: #13525\r\nThis is not technically required because the check could be limited to just namespace aliases, but seems unlikely to cause issues.\r\n\r\nSince it is a change in public API - ask PowerShell Committee to confirm.\r\n\r\n/cc @SteveL-MSFT \r\n\r\n> The tokenflags for both the name/alias tokens when using type/namespace aliases are changed to TypeName for better syntax highlighting and tab completion.\r\n\r\n/cc @andschwa Please confirm it is not break PSES.",
      "created_at": "2022-02-01T04:28:00Z",
      "updated_at": "2022-02-01T04:28:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Note that I've also made a breaking change by making duplicate namespaces like:\r\nusing namespace System.Management.Automation.Language\r\nusing namespace System.Management.Automation.Language\r\n>a parsing error.\r\n\r\nI see your point - it is most often annoying when the script does not work like C#. I think it is best practice to follow a behavior of C#.\r\nHowever, PowerShell is still a scripting language and sometimes it is more convenient to deviate from this rule.\r\n\r\nFor example, PowerShell allows scope and session \"jumping\". E.g. if user does dot-sourcing the parse error will annoy. It will be even more annoying if the user runs a script in a remote session using Invoke-Command for example.\r\n\r\nSo it would be more convenient to silently skip duplicate (exact) `using` definitions during parsing and runtime. (Do we this already for `using module`?) PSSA could warn in such cases.\r\n\r\n/cc @SeeminglyScience",
      "created_at": "2022-02-01T04:55:02Z",
      "updated_at": "2022-02-01T04:56:46Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Right now we don't handle duplicates at runtime, we simply seed a runtime conflict:\r\n\r\n```\r\nusing namespace System.Collections.Specialized\r\nusing namespace System.Collections.Specialized\r\n\r\n[BitVector32]\r\n```\r\n\r\nResults in the following runtime error:\r\n\r\n```\r\nInvalidArgument:\r\nLine |\r\n   5 |  [BitVector32]\r\n     |  ~~~~~~~~~~~~~\r\n     | Type name 'BitVector32' is ambiguous, it could be 'System.Collections.Specialized.BitVector32' or 'System.Collections.Specialized.BitVector32'.\r\n```\r\n\r\n> @iSazonov: if user does dot-sourcing the parse error will annoy. It will be even more annoying if the user runs a script in a remote session using Invoke-Command for example.\r\n\r\nNot relevant, the type conflict resolution reporting applies to the using statements within a single scriptblock, runtime imports won't be affected",
      "created_at": "2022-02-01T10:09:10Z",
      "updated_at": "2022-02-01T10:09:10Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah there's no scenario that duplicate using namespace declarations would *enable* something.\r\n\r\nThe break scenario is that there might be some script with duplicates that didn't end up using any types from that namespace and therefore technically worked, but now will not. I think it's fair to call that bucket 3",
      "created_at": "2022-02-02T01:08:33Z",
      "updated_at": "2022-02-02T01:08:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Let's have WG-Language review this first",
      "created_at": "2022-02-02T20:50:07Z",
      "updated_at": "2022-02-02T20:50:07Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "i'm seeing a strange behavior between scripted and interactive use: here's a transcript:\r\n\r\n```powershell\r\nPS> cat /tmp/foo.ps1\r\nusing namespace system.management.automation\r\nusing namespace auto1 = system.management.automation\r\nusing namespace auto2 = system.management.automation\r\n\"[platform] \" + ([platform])\r\n\"[auto1.platform] \" + ([auto1.platform])\r\n\"[auto2.platform] \" + ([auto2.platform])\r\n\r\nPS> /tmp/foo.ps1\r\n[platform] System.Management.Automation.Platform\r\n[auto1.platform] System.Management.Automation.Platform\r\n[auto2.platform] System.Management.Automation.Platform\r\n\r\nPS> using namespace system.management.automation\r\nPS> using namespace auto1 = system.management.automation\r\nPS> using namespace auto2 = system.management.automation\r\nPS> \"[platform] \" + ([platform])\r\nInvalidOperation: Unable to find type [platform].\r\nPS> \"[auto1.platform] \" + ([auto1.platform])\r\nInvalidOperation: Unable to find type [auto1.platform].\r\nPS> \"[auto2.platform] \" + ([auto2.platform])\r\n[auto2.platform] System.Management.Automation.Platform\r\n```\r\n\r\nthis seems troubling to me.\r\nit seems that the script and interactive use should be the same",
      "created_at": "2022-02-02T23:52:32Z",
      "updated_at": "2022-02-02T23:53:17Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> i'm seeing a strange behavior between scripted and interactive use: here's a transcript:\r\n\r\nFWIW that's the same behavior that it currently has. It remembers the last set of `using namespace` statements given. I suspect you'll see the same behavior if you separate with `;` or hit <kbd>Shift</kbd> + <kbd>Enter</kbd> (well on Windows anyway, don't think that chord works on Linux) after each `using namespace` so they're all in the same script.",
      "created_at": "2022-02-03T00:08:48Z",
      "updated_at": "2022-02-03T00:08:48Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr mentioned that here as a pro tip: https://github.com/PowerShell/PowerShell/issues/8281#issuecomment-442288894  \r\nThe latest set of using statements completely override the old ones. On one hand it can be a little confusing, but on the other hand we don't have any other way to \"un-use\" using statements.  \r\nInterestingly (for me at least) is that when you do it with modules it even seems to unload the types:\r\n\r\n```\r\nPS C:\\Users\\Martin> using module TestModule\r\nPS C:\\Users\\Martin> [MyCustomTypeFromModule]\r\n\r\nFullName               BaseType\r\n--------               --------\r\nMyCustomTypeFromModule System.Object\r\n\r\nPS C:\\Users\\Martin> using namespace System.Management.Automation\r\nPS C:\\Users\\Martin> [MyCustomTypeFromModule]\r\nInvalidOperation: Unable to find type [MyCustomTypeFromModule].\r\nPS C:\\Users\\Martin>\r\n```\r\nContent of `TestModule.psm1`:\r\n```\r\nclass MyCustomTypeFromModule\r\n{\r\n    [string] $DemoProperty\r\n}\r\n```",
      "created_at": "2022-02-03T00:50:41Z",
      "updated_at": "2022-02-03T00:50:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems the design of `using` was abandoned halfway through. It would be great to get it right.\r\nAs I mentioned earlier, we are constantly faced with changing scopes and the current `using` behavior is perplexing.\r\n- why not enable `using`-s in nested scopes? why do we limit to file scope?\r\n- why have we the specific behavior for global scope? maybe we could have another way to reset `using`-s?\r\n- how react on exact duplications in same scope? ignore (specially in interactive)?\r\n- don't forget about  `using`  behavior in dot-sourcing and remoting.",
      "created_at": "2022-02-03T07:42:37Z",
      "updated_at": "2022-02-03T07:42:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-02-10T14:00:42Z",
      "updated_at": "2022-02-10T14:00:42Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@iSazonov using is also blocked in a scriptblock. ",
      "created_at": "2022-03-01T07:45:08Z",
      "updated_at": "2022-03-01T07:45:08Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Large&color=red)\r\n\r\nThis PR has `537` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Large\r\nSize       : +490 -47\r\nPercentile : 84.57%\r\n\r\nTotal files changed: 17\r\n\r\nChange summary by file extension:\r\n.cs : +242 -43\r\n.resx : +24 -0\r\n.ps1 : +224 -4\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczNCIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczNCIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjczNCIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-08-18T21:09:55Z",
      "updated_at": "2022-08-18T21:09:55Z"
    }
  ],
  "created_at": "2022-01-12T01:34:32Z",
  "number": 16734,
  "state": "open",
  "title": "Add type and namespace alias support",
  "updated_at": "2022-09-02T15:54:09Z"
}