{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16720",
  "author": "jpawlowski",
  "body": "### Summary of the new feature / enhancement\n\nIt would be great to have built-in support for easy access to unicode items using short codes.\r\n\n\n### Proposed technical implementation details (optional)\n\nThe new `$PSStyle` variable is great and there could be something similar like `$PSEmoji` for common Emojis and maybe even a selected source of other Unicode letters in `$PSUnicode`.\r\n\r\nShort codes for Emojis shall be based on existing GitHub short codes and could be based on the [GitHub Emoji API](https://api.github.com/emojis) together with [Unicode Full Emoji List](https://unicode.org/emoji/charts/full-emoji-list.html), similar to what is implemented by @ikatyang in his [Emoji Cheat Sheet](https://github.com/ikatyang/emoji-cheat-sheet/).",
  "closed_at": "2022-01-16T23:24:53Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Have you tried this module from the PowerShell Gallery? https://www.powershellgallery.com/packages/Emojis/0.1\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/148702440-f588937d-c2d4-415e-b491-188ce7f033ed.png)\r\n\n\n<blockquote><img src=\"https://powershellgallery.com/Content/Images/Branding/PackageDefaultIcon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://powershellgallery.com/packages/Emojis/\">Emojis 0.1</a></strong></div><div>This module enables you to retrieve a Unicode emoji as a string. Just run the command \"emoji <emojiname>\"! It even supports auto-completion of emoji names, so you can easily search for them.</div></blockquote>",
      "created_at": "2022-01-09T21:51:28Z",
      "updated_at": "2022-01-09T21:51:30Z"
    },
    {
      "author": "jpawlowski",
      "author_association": "NONE",
      "body": "I know this module but was looking for a built-in/native functionality to be potentially more lightweight. Also, I would like to avoid external dependencies as much as possible. I believe `$PSStyle` was born for similar reasons (and others I can't imagine).\r\n\r\nAlso, the module mentioned seems to be fairly outdated (last update 2016) so not up-to-date with annual changes on Emojis.",
      "created_at": "2022-01-09T22:03:42Z",
      "updated_at": "2022-01-09T22:05:04Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "What would be the purpose of this? Is it to make it easier to write emojis into a script/console? Or is it to have a different, more descriptive way to add them to a script?  \r\nI don't use emojis in scripts, but if I did I would imagine it's easier to quickly read and write `Write-Host \"It worked! \u2714\u2714\u2714\" ` than `Write-Host \"It worked $(PSEmoji.GreenCheckMark)$(PSEmoji.GreenCheckMark)$(PSEmoji.GreenCheckMark)\"`\r\n\r\nWindows includes a handy shortcut: `Win+.` to quickly add emojis in any text box and I would imagine OS X + Most desktop Linux distros have a similar feature.",
      "created_at": "2022-01-09T22:40:18Z",
      "updated_at": "2022-01-09T22:40:18Z"
    },
    {
      "author": "jpawlowski",
      "author_association": "NONE",
      "body": "I don't use Windows, the Mac is all I need and provides Emojis for a long time using keyboard shortcuts \ud83d\ude43 </OT>\r\n\r\nTo me, the purpose is everything you just wrote above. I think it is still not best practice to add UTF8 characters directly into text files/scripts, even though they might be UTF8 encoded. Am I wrong?",
      "created_at": "2022-01-09T22:47:06Z",
      "updated_at": "2022-01-09T22:47:06Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "While it doesn't have any autocompleteion support you can simply use the `u` escape sequence.\r\n\r\n```powershell\r\n\"`u{1F3B5}\" # \ud83c\udfb5 https://www.compart.com/en/unicode/U+1F3B5\r\n\"`u{1F4A9}\" # \ud83d\udca9 https://www.compart.com/en/unicode/U+1F4A9\r\n```\r\n\r\nEssentially it's `<backtick>u{unicode codpoint}`\r\n\r\n> `u{unicode codepoint}",
      "created_at": "2022-01-10T00:02:36Z",
      "updated_at": "2022-01-10T00:02:36Z"
    },
    {
      "author": "jpawlowski",
      "author_association": "NONE",
      "body": "Thank you, I know I can use direct UTF8 characters. The point is I need to look them up on a case by case basis and the pure number does not tell anyone later on what\u2019s behind. Also, this is redundant code that usually could be avoided.\r\n\r\nI can maintain a large hash table for each and every module, yes. Again, this is redundant code and better centrally maintained and kept up-to-date.",
      "created_at": "2022-01-10T00:12:08Z",
      "updated_at": "2022-01-10T00:12:08Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I don't know what the best practices are for special characters in scripts because I usually avoid them. If I had to include special characters I would only do something special if they are hard to distinguish from \"real\" characters (em dash VS regular dash).  \r\nSince Emojis can easily be read on their own I would just add them directly inside whatever string I'm using.  \r\nOne could also argue that using emojis in a script in the first place goes against best practices because regardless of the script file encoding you can have issues rendering it in the console or whatever it is you are outputting to:\r\n![image](https://user-images.githubusercontent.com/42123497/148707294-5ca10b57-a5c5-4431-b8de-7527d37d2ea5.png)\r\n\r\nThe point I was making before was that I think something like `$PSEmoji.GreenCheckMark` is a worse solution than just writing the emoji directly into the script and since Windows and apparently also OS X includes an easy way to type them in then I see little point in this feature.",
      "created_at": "2022-01-10T00:31:29Z",
      "updated_at": "2022-01-10T00:31:29Z"
    },
    {
      "author": "jpawlowski",
      "author_association": "NONE",
      "body": "All what's been said is true for ANSI characters as well, which is why PSStyle was introduced.\n\nAlso, there is now the new Windows Terminal becoming the de-facto standard to wrap the PowerShell host. Displaying issues are no more existing (just catching up with macOS and Linux, okay).\n\n---\nTL;DR\n\nI really regret having opened this Feature Request.\nThis is not a forum (GitHub has the discussion section for this). Pointing me to obvious things I already know do not help with the suggestion I made. Also, I feel like it is only worth commenting if you are part of the maintainers, which does not seem to be the case for some commenters.\n\nI forgot, this is the internet and everyone has to comment on everything.\n\nShould there be further PS developer feedback on this, let me know; I won't answer any other comments anymore. #trollsoff",
      "created_at": "2022-01-10T01:08:21Z",
      "updated_at": "2022-01-10T01:08:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "To implement the request internally we need to see:\r\n1. Either important business scenario(s)\r\n2. or many votes from community\r\n3. or if something such already implemented in other (1) shells or (2) script languages.\r\n",
      "created_at": "2022-01-10T05:28:34Z",
      "updated_at": "2022-01-10T05:28:34Z"
    },
    {
      "author": "jpawlowski",
      "author_association": "NONE",
      "body": "To me, the scenario is fairly similar to the existence of `$PSStyle`.\r\nYou can close the FR if you disagree and we just leave this documented here.",
      "created_at": "2022-01-10T05:34:18Z",
      "updated_at": "2022-01-10T05:34:18Z"
    }
  ],
  "created_at": "2022-01-09T20:54:48Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Format"
  ],
  "number": 16720,
  "state": "closed",
  "title": "Provide a variable similar to `$PSStyle` for Emoji",
  "updated_at": "2022-01-16T23:24:56Z"
}