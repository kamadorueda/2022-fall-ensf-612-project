{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3154",
  "author": "mklement0",
  "body": "<sup>Note: Also affects other common parameters: see #3773</sup>\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$null = Get-Date -OutVariable ov; $ov.GetType().FullName\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nType name `System.DateTime`\r\n\r\nActual behavior\r\n---------------\r\n\r\nType name `System.Collections.ArrayList`\r\n\r\nThat is, the single-object output stored in the variable targeted with `-OutVariable` received an _array list_ rather than a scalar (the single-element collection wasn't unwrapped).\r\n\r\nAlso, it is type `[System.Collections.ArrayList]` that is always used, in contrast with the `[System.Object[]]` instances you get with _regular_ assignments.\r\n\r\nSee also: http://stackoverflow.com/a/40666568/45375\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell v6.0.0-alpha (v6.0.0-alpha.15) on Darwin Kernel Version 16.4.0: Thu Dec 22 22:53:21 PST 2016; root:xnu-3789.41.3~3/RELEASE_X86_64\r\nPowerShell v5.1.14393.693 on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\n```\r\n",
  "closed_at": "2021-03-04T00:00:04Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "IIRC it's been this way since version 1. Changing it now would be a breaking change.",
      "created_at": "2017-02-17T20:49:15Z",
      "updated_at": "2017-02-17T20:49:15Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Note that `-OutVariable` produce live collection, you can reference to it while pipeline is still working:\r\n```powershell\r\n1..10 | echo -OutVariable a | % { \"$a\" }\r\n```\r\nUsing not resizable `[System.Object[]]` instead of `[System.Collections.ArrayList]` would be bad performance choice.",
      "created_at": "2017-02-26T21:17:35Z",
      "updated_at": "2017-02-26T21:17:58Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The behavior is surprising, and possibly falls into the [unlikely grey area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) bucket.\r\n\r\nTagging for committee review.",
      "created_at": "2017-02-27T18:01:18Z",
      "updated_at": "2017-02-27T18:01:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree with the expected result even though it is a breaking change",
      "created_at": "2017-03-02T00:27:47Z",
      "updated_at": "2017-03-02T00:27:47Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "While I agree that it's weird that this doesn't behave like pipeline output....\r\n\r\n## The **_only_** thing that PowerShell does this collection/single behavior for is pipeline output\r\n\r\nThese have been collections since the very beginning. \r\n\r\nYou'll be _potentially_ breaking every single use of these in the history of PowerShell.\r\n\r\n## Can we follow the process and RFC this?\r\n\r\nI'm pretty sure you're going to light up the comments on an RFC for this kind of breaking change.",
      "created_at": "2018-03-16T17:40:39Z",
      "updated_at": "2018-03-16T17:44:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Please see [this RFC proposal](https://github.com/PowerShell/PowerShell-RFC/pull/120) for comments on this breaking change.",
      "created_at": "2018-03-16T22:21:42Z",
      "updated_at": "2018-03-16T22:21:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul  (Cross-posting this from the related, generalized #3773)\r\n\r\n> The only thing that PowerShell does this collection/single behavior for is pipeline output\r\n\r\nThat is not much of a restriction, however, given the pervasive use of pipelines, even in places where it is not obvious:`$(...)`, `@(...)`, `&`, `.`,  script-block arguments.\r\n\r\nTo give a few examples, all of which output `$True`:\r\n\r\n```powershell\r\n$(, 1) -is [int]\r\n(. { , 1 }) -is [int]\r\n(& { , 1 }) -is [int]\r\n('' | Select-Object @{ n='foo'; e = { , 1 } }).foo -is [int]\r\n(, @{ p = , 1 }).p\r\n```\r\n\r\n<sup>There is no `@(...)` example, because `@(...)` by design ensures _array-valued_ output - though it would still recreate any input collection as a `[object[]]` array.</sup>\r\n",
      "created_at": "2018-03-17T09:39:19Z",
      "updated_at": "2018-04-05T20:26:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agrees on followig the RFC process specifically the RFC that @rjmholt published",
      "created_at": "2018-03-21T22:13:39Z",
      "updated_at": "2018-03-21T22:13:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an afterthought, given that I just stumbled upon it:\r\n\r\n`Tee-Object -Variable` exhibits pipeline, logic, as expected - unlike `-OutVariable`:\r\n\r\nSingle-object output produces a _scalar_ (unwraps the output collection):\r\n\r\n```powershell\r\n# Capture output from a command that outputs a *single* object\r\nPS> $null = Get-Item / | Tee-Object -Variable out; $out.GetType().FullName\r\nSystem.IO.DirectoryInfo  # *scalar* was captured\r\n```\r\n\r\nMulti-object output creates an `[object[]]` array.\r\n\r\n```powershell\r\n# Capture output from a command that outputs a *multiple* objects\r\nPS> $null = Get-ChildItem / | Tee-Object -Variable out; $out.GetType().FullName\r\nSystem.Object[]\r\n```\r\n",
      "created_at": "2018-09-12T02:34:48Z",
      "updated_at": "2018-09-12T02:35:29Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I called out that behavior in the RFC comments \ud83d\ude09 \r\n\r\n> In fact, `Tee-Object` _already_ has the behavior you're looking for: Unlike `-OutVariable`, `Tee-Object` doesn't populate it's variable until the end of the pipeline. Because of that, it's **able** to not output a collection when there's only one item, and it outputs an array when there is (not an ArrayList).\r\n",
      "created_at": "2018-09-12T03:19:17Z",
      "updated_at": "2018-09-12T03:19:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @Jaykul, thanks - it's been so long...\r\n\r\nThat I \"rediscovered\" this inconsistency after all the discussion is telling, however - it baffled me anew.",
      "created_at": "2018-09-12T03:21:04Z",
      "updated_at": "2018-09-12T03:23:05Z"
    },
    {
      "author": "ratijas",
      "author_association": "NONE",
      "body": "After all this time, is this still a desired feature?\r\n\r\nSeems like RFC never reached an agreement, and thus was closed. But this issue was left opened, so I wonder...",
      "created_at": "2021-03-02T15:35:40Z",
      "updated_at": "2021-03-02T15:38:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "As far as I could tell at the time with the RFC, any change to the existing behaviour would be controversial and the current behaviour is considered a feature by some. More importantly, it's public behaviour that users depend on, so I suspect it's something we can't change and we should close this issue.",
      "created_at": "2021-03-02T21:18:36Z",
      "updated_at": "2021-03-02T21:18:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It is a candidate for #6745 (in the sense that a hypothetical future PowerShell version not beholden to backward compatibility should reconsider this behavior).\r\n",
      "created_at": "2021-03-02T21:34:50Z",
      "updated_at": "2021-03-02T21:34:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-03-04T00:00:03Z",
      "updated_at": "2021-03-04T00:00:03Z"
    },
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "It seems that no-one picked up on what might be the basic reason for using an `[ArrayList]` (even for single objects),\r\n\r\n> To add the output to the variable, instead of replacing any output that might already be stored there, type a plus sign (+) before the variable name.\r\n\r\nUsing an (immutable) `[Object[]]` could result in a performance degradation as it would have to be copied to a new `[Object[]]` every time it was updated. @PetSerAl did give some insight but the example usage would be rare compared to `-OutVariable +name` (IMO).\r\n\r\nAs for storing a single object as a scalar, there would be no guarantee that a single object output stored in `-OutVariable` would not subsequently have later output appended. As with the issue of single items from pipelines being stored as scalars but possibly being used later as arrays (hence the advice about using the array subexpression operator `@()` in such cases), it would be cumbersome to have to check whether a `-OutVariable` contained a scalar or collection, or at least it would have been before PS3.0 added indexing of scalars, thereby somewhat obscuring the difference. Still, \"Once an `[ArrayList]`, always an `[ArrayList]`\".\r\n\r\nNote: `Tee-Object -Variable` does not have the option to append with `+` and so can make assumptions about the intended use of the variable and produce a result identical to that which would be stored by a variable capturing the pipeline output from `Tee-Object`. Further, if a variable containing a scalar or an `[Object[]]` is used as an appending `-OutVariable` then it is first converted to an `[ArrayList]` of the same length (1 or many), whether or not anything is appended, thereby maintaining the \"flat\" collection in a consistent container after use of `-OutVariable`.\r\n```\r\nPS > 1,2 | Tee-Object -Variable tee1\r\n1\r\n2\r\nPS > $tee1.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n\r\nPS > $tee1.Length\r\n2\r\nPS > @() | Tee-Object -Variable tee2 -OutVariable +tee1\r\nPS > $tee1.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     ArrayList                                System.Object\r\n\r\nPS > $tee1.Count\r\n2\r\nPS >\r\n```\r\n(Tested on 5.1.18362.145)",
      "created_at": "2022-01-20T13:12:47Z",
      "updated_at": "2022-01-20T13:12:47Z"
    },
    {
      "author": "KingAl",
      "author_association": "NONE",
      "body": "Agreed with @UberKluger, it's very sensible to have Pipeline-native accumulation supported in some way in Powershell; and currently `-OutVariable +var` is the only way to accumulate multiple separate outputs in a performant way, without dropping into .NET ArrayList syntax.\r\n\r\nI don't think altering the behaviour on a singleton would be a problem, although there are potential pitfalls - if an iteration produces lists, and the first list is unwrapped into the same variable, then subsequent lists would be appended to the end of the first list instead of alongside it.\r\n\r\nHowever, with respect to the other observation, Array vs ArrayList type, OutVariable behaviour should emphatically not be changed from appending to ArrayLists to appending to Arrays - that would be a huge performance hit for code correctly using the parameter. Arrays and ArrayLists are comparable for appending about 1000 elements, but once you're dealing with 40,000 items there's a factor of 12 difference (10 seconds vs 2 minutes), and 80,000 it's a factor of 24, etc. So the current behaviour is the difference between a script quite handily processing millions of items in a minute versus taking hours. (Of course, appending to an array is not a typical Powershell idiom - I'll get to that.)\r\n\r\nI think at the very least, OutVariable behaviour should be very clearly documented - it's evident that that's not the case currently, I can only imagine there was some intention to transparently handle Arrays and ArrayLists the same way in earlier design stages that never came to fruition. Note of course that _deliberate_ unwrapping of an ArrayList is very easy, `$($var)` will give us a Singleton for a one-element ArrayList and an Object[] otherwise.\r\n\r\nWith respect to the need for separate accumulations, as facilitated by OutVariable: Ideally, tasks can be broken down into separate pipelines so that separate accumulations can be performed each with a single pipeline, but some tasks don't lend themselves to this, particularly when there's variegated interdependent checks where a value from one output will influence another; in those circumstances, the alternatives without OutVariable are using Out-File, which loses type information and is disk bound (but at least can append in constant time, and clearly specifies a 'separate' output), or writing to the common output stream and performing a post-hoc Where filter, which requires a great deal more coordination and setting of metadata to facilitate a filter than would simply accumulating to separate variables.\r\n\r\nIf I had to design an alternative to supersede -OutVariable it'd be named streams - `$var = Create-Stream; @(1,2,3) | Write-Stream $var` etc. This maps to natural Powershell idioms (including writing values directly to the pipe) and reflects how people will often use Out-File naturally without the performance hit of writing to disk. Unlike an `Out-` cmdlet the OutVariable parameter allows output to pass through, which means in practice you have to deliberately redirect to $null if you just wanted it accumulated in the ArrayList; not a pretty idiom.",
      "created_at": "2022-01-29T14:03:31Z",
      "updated_at": "2022-01-29T14:03:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Agreed with @UberKluger, it's very sensible to have Pipeline-native accumulation supported in some way in Powershell; and currently -OutVariable +var is the only way to accumulate multiple separate outputs in a performant way, without dropping into .NET ArrayList syntax.\r\n\r\nYou can collate pipeline objects pretty easily with neither of those:\r\n\r\n```powershell\r\n$results = @(\r\n    Get-ChildItem $folder1\r\n    Get-ChildItem $folder2\r\n    Get-ChildItem $folder3\r\n)\r\n```\r\n\r\nThis produces a flat array with all the results of the three commands in it.",
      "created_at": "2022-01-29T17:31:13Z",
      "updated_at": "2022-01-29T17:31:13Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> This produces a flat array with all the results of the three commands in it.\r\n\r\nAs long as you can put all of the outputting lines together in one place...",
      "created_at": "2022-01-30T23:34:39Z",
      "updated_at": "2022-01-30T23:34:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "IMO it's less common to _not_ be able to do that, but it does happen. In those instances, I don't think the -OutVariable or equivalent usage of List types is a huge burden.",
      "created_at": "2022-01-30T23:37:52Z",
      "updated_at": "2022-01-30T23:37:52Z"
    },
    {
      "author": "KingAl",
      "author_association": "NONE",
      "body": "> You can collate pipeline objects pretty easily with neither of those:\r\n\r\nYeah sorry, I could have been clearer. Absolutely, that way is the best approach in general where it fits the use case; it's what Powershell encourages you to use and is the idiom people should use by default (or rather, your flat array strategy is a particular implementation of the \"just write to Output\" Powershell default). When people don't, it's normally because they're expecting Powershell to work like some other language with which they're more familiar.\r\n\r\nHowever, if you have three categories of thing, say line 1 went to $a, line 2 went to $b, line 3 went to $c, Out-Variable is the most efficient way of doing this. It's better to use three different pipelines, but sometimes the three outputs are interrelated enough that it's difficult to extricate easily, and outputting each from within the same loop is the most sensible way to keep the code simple and efficient.\r\n\r\nOther strategies - like post-processing Where filters, or PSCustomObjects with separate properties for each output - make sense in specific cases (the former where it's easy to distinguish the outputs post-hoc, the latter where there's always 1-for-1 relationship between each output), but OutVariable is the only general accumulator offered by Powershell that's actually algorithmically efficient.",
      "created_at": "2022-01-31T00:25:27Z",
      "updated_at": "2022-01-31T01:21:40Z"
    }
  ],
  "created_at": "2017-02-15T16:55:32Z",
  "labels": [
    "WG-Engine",
    "Resolution-Answered",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 3154,
  "state": "closed",
  "title": "-OutVariable doesn't unwrap single-object output and creates [System.Collections.ArrayList] values rather than [System.Object[]]",
  "updated_at": "2022-01-31T01:21:40Z"
}