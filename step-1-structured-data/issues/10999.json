{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10999",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIn many contexts in PowerShell, custom objects and hashtables can conveniently be used interchangeably, such as in JSON serialization (`ConvertTo-Json`)\r\n\r\nHowever, `Export-Csv` and `ConvertTo-Csv` currently do not support dictionaries ((ordered) hashtables, `IDictionary` instances) meaningfully: they serialize the dictionary _itself_.\r\n\r\nMaking these cmdlets  serialize the key-value pairs, analogous to property-name-value pairs in `[pscustomobject]` input would be helpful.\r\n\r\n```powershell\r\n# OK - custom object input\r\n[pscustomobject] @{ prop=1 } | ConvertTo-Csv | Should -Be '\"prop\"', '\"1\"'\r\n\r\n# Currently unsupported: hashtable input\r\n@{ prop=1 } | ConvertTo-Csv | Should -Be '\"prop\"', '\"1\"'\r\n```\r\n\r\nThe latter test fails, indicating the currently useless serialization of hashtables:\r\n\r\n```none\r\nExpected @('\"prop\"', '\"1\"'), but got\r\n@('\"IsReadOnly\",\"IsFixedSize\",\"IsSynchronized\",\"Keys\",\"Values\",\"SyncRoot\",\"Count\"',\r\n '\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"'\r\n```\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nMake `Export-Csv` and `ConvertTo-Csv` detect `IDictionary` input and serialize its key-value pairs instead of the dictionary object itself.\r\n",
  "closed_at": "2021-07-22T04:05:17Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #8855 (can we move it to the issue too?)\r\n\r\nWe need to add new switch to avoid a breaking change.\r\nAlso there is a question about Collection and related interfaces.",
      "created_at": "2019-11-09T15:17:30Z",
      "updated_at": "2019-11-09T15:18:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Current behaviour for ConvertTo-Csv results in data that is essentially useless:\r\n```powershell\r\nPS>  $data = 1..10 | % { @{ Number = $_ } }\r\nPS>  $data\r\n\r\nName                           Value\r\n----                           -----\r\nNumber                         1\r\nNumber                         2\r\nNumber                         3\r\nNumber                         4\r\nNumber                         5\r\nNumber                         6\r\nNumber                         7\r\nNumber                         8\r\nNumber                         9\r\nNumber                         10\r\n\r\nPS>  $data | convertto-csv\r\n\"IsReadOnly\",\"IsFixedSize\",\"IsSynchronized\",\"Keys\",\"Values\",\"SyncRoot\",\"Count\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"\r\n```\r\nIs there any reason someone would rely on this behaviour?",
      "created_at": "2019-11-09T15:22:12Z",
      "updated_at": "2019-11-09T15:23:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 I think the design is PowerShell generalization of psobject serialization/deserialization vs data serialization/deserialization that we discuss in the issue.",
      "created_at": "2019-11-09T16:55:12Z",
      "updated_at": "2019-11-09T16:56:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nIf there's a way to support this as part of a more generalized feature that may even improve performance for the `[pscustomobject]` case, then all the better.\r\n\r\nI haven't looked at `IDataView` yet, and I don't know how realistic near-term use in PowerShell is - by contrast, enabling support for `IDictionary` specifically seems like a pretty quick enhancement to make (that could still benefit from later under-the-hood optimizations, as long as the behavior doesn't change).\r\n\r\nEither way, I agree with @vexx32 that there's no backward-compatibility concern here and therefore no need for a new switch.",
      "created_at": "2019-11-09T17:09:55Z",
      "updated_at": "2019-11-09T17:09:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think we should also consider adding a switch to `ConvertFrom-Csv` and `Import-Csv` in order to import the data `-AsHashtable` for symmetry.",
      "created_at": "2019-11-09T17:18:09Z",
      "updated_at": "2019-11-09T17:18:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Either way, I agree with @vexx32 that there's no backward-compatibility concern here and therefore no need for a new switch.\r\n\r\nIt is not clear if we want change output:\r\n```powershell\r\nExpected @('\"prop\"', '\"1\"'), but got\r\n@('\"IsReadOnly\",\"IsFixedSize\",\"IsSynchronized\",\"Keys\",\"Values\",\"SyncRoot\",\"Count\"',\r\n '\"False\",\"False\",\"False\",\"System.Collections.Hashtable+KeyCollection\",\"System.Collections.Hashtable+ValueCollection\",\"System.Collections.Hashtable\",\"1\"'\r\n```",
      "created_at": "2019-11-09T17:30:24Z",
      "updated_at": "2019-11-09T17:30:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea, @vexx32  - see #11027.",
      "created_at": "2019-11-09T17:34:02Z",
      "updated_at": "2019-11-09T17:34:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nTo me, it's quite obvious that no one would rely on this output - the _only_ piece of information  remotely of interest in this output that is _specific to the input object_ is the _entry count_  (column \"Count\") - and for that you obviously don't need CSV output.\r\n",
      "created_at": "2019-11-09T17:36:21Z",
      "updated_at": "2019-11-09T17:37:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I would agree that the current output is not useful and thus very unlikely to break someone.",
      "created_at": "2019-11-09T17:50:24Z",
      "updated_at": "2019-11-09T17:50:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we want address more advanced scenarios we could design new Import/Export-TabularData cmdlets where \"Data\" better reflects the focus on data processing.\r\n",
      "created_at": "2019-11-09T18:27:43Z",
      "updated_at": "2019-11-09T18:27:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see a need to divide features into a new cmdlet at the moment. We're not spinning up impromptu SQL servers to process data, we're just adding a sensible input/output type. The addition isn't particularly significant, in my opinion, and shouldn't warrant additional commands.",
      "created_at": "2019-11-09T19:55:28Z",
      "updated_at": "2019-11-09T19:55:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is alternative for serialization/deserialization PowerShell objects?",
      "created_at": "2019-11-09T20:05:30Z",
      "updated_at": "2019-11-09T20:05:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, what do you mean?",
      "created_at": "2019-11-09T21:14:08Z",
      "updated_at": "2019-11-09T21:14:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#10916  This occurs from time to time. Users want to save an object and then restore it as a native object. It\u2019s worth to enhance our engine to support this, for Export/Import-Csv too that original design is for.\r\n\r\nAlso I still don't understand (see my comment above) why we only consider IDictionary if there are IList, IEnumerable, ICollection.",
      "created_at": "2019-11-10T10:09:10Z",
      "updated_at": "2019-11-10T10:20:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "We're definitely _not_ talking about a general serialization feature here.\r\n\r\n(The latter is what `Export-Clixml` is for (and enhancing that to support type-faithful deserialization for more than the handful of currently supported well-known types would be great, but also sounds challenging; #10916, if I understand it correctly, actually proposes something different, which sounds even more challenging: it is not asking for type-faithful deserialization - categorical support for which is fundamentally impossible - but for proxy methods that call back to the remoting endpoint).\r\n\r\n> why we only consider IDictionary if there are IList, IEnumerable, ICollection.\r\n\r\nWe're considering supporting `IDictionary` as a collection _element_ type, not as a _collection_ type - in the same way that `ConvertTo-Json` already does.\r\n\r\nThat is, the proposal is to not only to support collections (enumerables, lists)  _whose elements are_ `[pscustomobject]` instances, but also those _whose elements_ are `IDictionary` instances.\r\n\r\n`[pscustomobject]` instances are primarily \"property bags\", and `IDictionary` instances (at least with string-typed keys) are conceptually related and, in practice, are sometimes used interchangeably - each types has its pros and cons, but, fundamentally, they are both a (possibly ordered) collection of key-value pairs.\r\n\r\nTo give a concrete example: With this proposal implemented, the following two commands will yield the same result:\r\n\r\n```powershell\r\n# Collection of *custom objects*\r\n[pscustomobject] @{ one = 1; two = 2 }, [pscustomobject] @{ one = 1; two = 2 } | ConvertTo-Csv\r\n\r\n# Conceptually equivalent collection of *hash tables*\r\n@{ one = 1; two = 2 }, @{ one = 1; two = 2 } | ConvertTo-Csv\r\n```\r\n\r\nThat is, both commands would output:\r\n\r\n```none\r\n\"one\",\"two\"\r\n\"1\",\"2\"\r\n\"1\",\"2\"\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-11-10T12:49:04Z",
      "updated_at": "2019-11-10T13:19:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> That is, the proposal is not only to support collections (enumerables, lists) whose elements are [pscustomobject] instances, but also those whose elements are IDictionary instances.\r\n\r\n:-) Thanks for my education. I see your point.\r\n\r\nMy concern was about follow scenario:\r\n```powershell\r\nGet-Date | Export-Csv c:\\tmp\\q.txt -IncludeTypeInformation\r\n$a=Import-Csv C:\\tmp\\q.txt\r\n$a.psobject\r\n$a\r\n```\r\nWhile Export/Import-CliXml is universal, Export/Import-Csv give great UX and better performance for special, table, case, and I'd want lost this. Sorry that I was not accurate enough. I mistakenly thought that IncludeTypeInformation was by default although it was in Windows PowerShell, in Core it was changed (by me?! :upside_down_face:)\r\n\r\n",
      "created_at": "2019-11-10T14:14:46Z",
      "updated_at": "2019-11-10T14:14:46Z"
    },
    {
      "author": "ivanshen",
      "author_association": "NONE",
      "body": "I would like to work on this one if it's available.",
      "created_at": "2019-11-15T18:51:43Z",
      "updated_at": "2019-11-15T18:51:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@ivanshen apologies, I forgot to make a note here; I submitted #11029 to add this functionality already. \ud83d\ude42 ",
      "created_at": "2019-11-15T18:55:32Z",
      "updated_at": "2019-11-15T18:55:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11029, which has now been successfully released as `v7.2.0-preview.9`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.9)\n",
      "created_at": "2021-08-23T18:36:44Z",
      "updated_at": "2021-08-23T18:36:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11029, which has now been successfully released as `v7.2.0-preview.10`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.10)\n",
      "created_at": "2021-09-28T23:18:34Z",
      "updated_at": "2021-09-28T23:18:34Z"
    }
  ],
  "created_at": "2019-11-06T13:55:33Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 10999,
  "state": "closed",
  "title": "Make Export-Csv and ConvertTo-Csv support hashtables (dictionaries)",
  "updated_at": "2021-09-28T23:18:35Z"
}