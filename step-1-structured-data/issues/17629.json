{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17629",
  "author": "fflaten",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen creating an alias for local function and passing `AliasInfo` into a different module state, the module code is unable to fetch parameters from `AliasInfo` because `Parameters` is null.\r\n\r\nRepro:\r\n```powershell\r\nGet-Module funcModule | Remove-Module\r\nNew-Module funcModule { \r\n    function moduleFunc ($Param1234) { }\r\n} | Import-Module\r\n\r\nGet-Module testModule | Remove-Module\r\nNew-Module testModule { \r\n    function test($localAlias, $localFunc, $moduleFunc, $localAlias2) {\r\n        \"Running in $($ExecutionContext.SessionState.Module.name)\"\r\n        \"Script Function $($localFunc.Name) contains parameters $($null -ne $localFunc.Parameters)\"\r\n        \"Script Alias $($localAlias.Name) contains parameters $($null -ne $localAlias.Parameters)\"\r\n        \"Module Function $($moduleFunc.Name) contains parameters $($null -ne $moduleFunc.Parameters)\"\r\n        \"Script Alias $($localAlias2.Name) for module func contains parameters $($null -ne $localAlias2.Parameters)\"\r\n        \r\n        #Try accessing AliasInfo.Parameters for the local function\r\n        $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n    }\r\n} | Import-Module\r\n\r\n# running in a local scope. dot-sourcing this would work because the function is created in the root\r\n& {\r\n    function scriptFunc ($MyParam1) { }\r\n    Set-Alias -Name alias1 -Value scriptFunc\r\n    Set-Alias -Name alias2 -Value moduleFunc\r\n    test -localFunc (Get-Command scriptFunc) -localAlias (Get-Command alias1) -moduleFunc (Get-Command moduleFunc) -localAlias2 (Get-Command alias2)\r\n}\r\n```\r\n\r\nRelated: https://github.com/pester/Pester/issues/1431#issuecomment-1174989179\n\n### Expected behavior\n\n```console\n# Notice the second line. Parameters dict available and can find Parameter-key at the end\r\n\r\nRunning in testModule\r\nScript Function scriptFunc contains parameters True\r\nScript Alias alias1 contains parameters True\r\nModule Function moduleFunc contains parameters True\r\nScript Alias alias2 for module func contains parameters True\r\nTrue\n```\n\n\n### Actual behavior\n\n```console\n# Notice the second line + exception\r\n\r\nRunning in testModule\r\nScript Function scriptFunc contains parameters True\r\nScript Alias alias1 contains parameters False\r\nModule Function moduleFunc contains parameters True\r\nScript Alias alias2 for module func contains parameters True\r\nInvalidOperation:\r\nLine |\r\n  10 |          $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n     |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You cannot call a method on a null-valued expression.\n```\n\n\n### Error details\n\n```console\nException             :\r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : You cannot call a method on a null-valued expression.\r\n            HResult : -2146233087\r\n        CategoryInfo          : InvalidOperation: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : InvokeMethodOnNull\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 10\r\n            OffsetInLine     : 9\r\n            HistoryId        : -1\r\n            Line             :         $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n\r\n            PositionMessage  : At line:10 char:9\r\n                               +         $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n                               +         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at test, <No file>: line 10\r\n                                at <ScriptBlock>, <No file>: line 5\r\n                                at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object, System.String)\r\n    Message     : You cannot call a method on a null-valued expression.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : Anonymously Hosted DynamicMethods Assembly\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at CallSite.Target(Closure , CallSite , Object , String )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\nFullyQualifiedErrorId : InvokeMethodOnNull\r\nInvocationInfo        :\r\n    ScriptLineNumber : 10\r\n    OffsetInLine     : 9\r\n    HistoryId        : -1\r\n    Line             :         $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n\r\n    PositionMessage  : At line:10 char:9\r\n                       +         $localAlias.Parameters.PSBase.ContainsKey('MyParam1')\r\n                       +         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at test, <No file>: line 10\r\n                        at <ScriptBlock>, <No file>: line 5\r\n                        at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I play with your sample and I found this workaround.\r\n\r\nI'll let someone else explain why there's this behavior but it's probably performance related.\r\n\r\n```\r\n& {\r\n    function scriptFunc ($MyParam1) { }\r\n    Set-Alias -Name alias1 -Value scriptFunc\r\n    Set-Alias -Name alias2 -Value moduleFunc\r\n    $alias1 = Get-Command alias1\r\n    $alias2 = Get-Command alias2\r\n    # Force Parameters enumeration\r\n    $null = $alias1.Parameters, $alias2.Parameters\r\n    test -localFunc (Get-Command scriptFunc) -localAlias (Get-Command alias1) -moduleFunc (Get-Command moduleFunc) -localAlias2 (Get-Command alias2)\r\n}\r\n```\r\n\r\nShort Version\r\n```\r\n& {\r\n    function scriptFunc ($MyParam1) { }\r\n    Set-Alias -Name alias1 -Value scriptFunc\r\n    Set-Alias -Name alias2 -Value moduleFunc\r\n    test -localFunc (Get-Command scriptFunc) -localAlias (Get-Command alias1 | Where Parameters) -moduleFunc (Get-Command moduleFunc) -localAlias2 (Get-Command alias2 | Where Parameters)\r\n}\r\n```\r\n\r\n",
      "created_at": "2022-07-05T19:32:55Z",
      "updated_at": "2022-07-05T19:32:55Z"
    },
    {
      "author": "fflaten",
      "author_association": "CONTRIBUTOR",
      "body": "@fMichaleczek Thanks. In fact I've already suggested `Where-Object Parameters` in the related Pester-issue as a workaround. I really don't see why they even test the mock and use an alias doing it, but I'll leave that discussion for the other thread. \ud83d\ude04\r\n\r\nThe root cause however should still be looked at as it's inconsistent behavior. At least have the workaround documented (which we also do now right here)",
      "created_at": "2022-07-05T19:54:26Z",
      "updated_at": "2022-07-05T19:55:35Z"
    }
  ],
  "created_at": "2022-07-05T12:39:05Z",
  "labels": [
    "Issue-Bug",
    "Needs-Triage",
    "WG-Engine-Module"
  ],
  "number": 17629,
  "state": "open",
  "title": "Get-Command can't get parameters for alias to local function when in a different module sesssionstate",
  "updated_at": "2022-07-11T16:16:25Z"
}