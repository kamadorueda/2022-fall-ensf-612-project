{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9703",
  "author": "KirkMunro",
  "body": "When a variable with a script block is passed to a background job via `using`, the variable inside the job is a string instead of a script block.\r\n\r\nAs @bpayette [indicated below](https://github.com/PowerShell/PowerShell/issues/9703#issuecomment-495774758), this was by design to reduce the risk of accidentally executing code; however, this clearly seems like a design flaw now that we have the `&` background operator in PowerShell, and while it can be worked around, any code that works around it should be unnecessary. It is worth mentioning that the workaround demonstrated below would continue to work even if this bug was fixed because objects of type `scriptblock` convert implicitly to string, so the likelihood of this causing an issue for folks if it was fixed should be very low.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nInvoke-Pester -ScriptBlock {\r\n    Describe 'Tests for using variables of specific types' -Tags 'CI' {\r\n        It 'Implicit using with background job operator and variable of type ScriptBlock' {\r\n            $sb = {Get-Process -Id $pid}\r\n            $job = & $sb &\r\n            $results = $job | Receive-Job -Wait\r\n            $results | Should -BeOfType PSObject\r\n            $results.PSTypeNames | Should -Contain Deserialized.System.Diagnostics.Process\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n```none\r\nTests Passed: 1, Failed: 0, Skipped: 0, Pending: 0, Inconclusive: 0\r\n```\r\n\r\n### Actual behavior\r\n\r\n```none\r\nTests Passed: 0, Failed: 1, Skipped: 0, Pending: 0, Inconclusive: 0\r\n```\r\n\r\n### Workaround\r\n\r\n```PowerShell\r\nInvoke-Pester -ScriptBlock {\r\n    Describe 'Tests for using variables of specific types' -Tags 'CI' {\r\n        It 'Implicit using with background job operator and variable of type ScriptBlock' {\r\n            $sb = {Get-Process -Id $pid}\r\n            $job = & ([scriptblock]::Create($sb)) &\r\n            $results = $job | Receive-Job -Wait\r\n            $results | Should -BeOfType PSObject\r\n            $results.PSTypeNames | Should -Contain Deserialized.System.Diagnostics.Process\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "This is (or was)  by design. IIRC we serialize scriptblocks to strings in flight to reduce the risk of accidentally executing code. The problem was that, when trying to secure a remote endpoint, there were so many places that scriptblock parameters could automatically get executed we just blocked everything. Since you can explicitly turn a string into a scriptblock with `[ScriptBlock]::Create()` (but not with a cast!) it was viewed as being not too onerous. Of course this doesn't really make sense for background jobs so maybe we should reconsider our strategy here :-)",
      "created_at": "2019-05-24T20:13:19Z",
      "updated_at": "2019-05-24T20:13:19Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the background, @bpayette, that makes sense. I agree the strategy doesn't seem appropriate when running a background job that invokes an anonymous function.",
      "created_at": "2019-05-24T20:47:55Z",
      "updated_at": "2019-06-13T19:22:14Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'm going to update the title and description so that this focuses specifically on use of the `&` background operator, since that is the part of the design that needs revisiting.",
      "created_at": "2019-06-13T19:22:49Z",
      "updated_at": "2019-06-13T19:28:20Z"
    }
  ],
  "created_at": "2019-05-23T13:57:00Z",
  "number": 9703,
  "state": "open",
  "title": "Background job operator does not work when invoking a script block variable",
  "updated_at": "2019-06-13T19:28:20Z"
}