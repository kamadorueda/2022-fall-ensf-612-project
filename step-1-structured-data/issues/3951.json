{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3951",
  "author": "mklement0",
  "body": "Currently, the behavior with respect to following symlinks to directories with `Get-ChildItem -Recurse`:\r\n\r\n* differs between editions\r\n\r\n* is _invariable_ in either case.\r\n\r\n_Windows_ PowerShell _always_ follows directory symlinks, whereas PowerShell _Core_ _never_ does  - due to #3780.\r\nNote that the Core behavior also applies on Windows.\r\n\r\nGiven that `Get-ChildItem` is not just the analog of `ls`, but also of `find`, there should at least be a way to _opt in_ with respect to symlink following, as with `find -L`.\r\n\r\nNote that reintroducing symlink recursion would reintroduce the need to detect symlink _loops_, as reported in #1875.\r\n\r\nUnless infeasible due to backward compatibility concerns, it's also worth considering changing the Windows edition's default behavior to match the Core edition's.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nNote: On _Windows_, you must run the code from an _elevated_ console.\r\n\r\n```powershell\r\n# Create 2 temp. dirs.\r\n$tmpDirRoot = [IO.Path]::GetTempPath()\r\n$tmpDir1 = join-path $tmpDirRoot \"$PID-a\"\r\n$tmpDir2 = join-path $tmpDirRoot \"$PID-b\"\r\n$null = New-Item -Type Directory -Path $tmpDir1, $tmpDir2\r\n\r\nPush-Location $tmpDir1\r\n\r\n# Create 1 file each.\r\n'' > \"$tmpDir1/f1\"\r\n'' > \"$tmpDir2/f2\"\r\n\r\n# In tmpDir1, create a symlink to tmpDir2\r\n$null = New-Item -Type SymbolicLink dirlink -Value $tmpDir2\r\n\r\n# Recurse and count the items.\r\n# If the directory symlink is followed, 3 items are reported, otherwise 2.\r\n$count = (Get-ChildItem -Recurse).Count\r\n\r\n[pscustomobject] @{ 'Actual count' = $count; 'Count w/ following' = 3; 'Count w/o following' = 2 }\r\n\r\n# Comment out the following 2 lines to prevent cleanup.\r\nPop-Location\r\nRemove-Item -Force -Recurse $tmpDir1, $tmpDir2\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nWindows PowerShell:\r\n\r\n```none\r\nActual count Count w/ following Count w/o following\r\n------------ ------------------ -------------------\r\n           3                  3                   2\r\n```\r\n\r\nPowerShell Core:\r\n\r\n```none\r\nActual count Count w/ following Count w/o following\r\n------------ ------------------ -------------------\r\n           2                  3                   2\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on Ubuntu 16.04.1 LTS\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\nWindows PowerShell v5.1.14393.1198 on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\n```\r\n",
  "closed_at": "2017-07-06T19:28:27Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "symlinks aren't used heavily on Windows, but I know they are on Linux",
      "created_at": "2017-06-07T22:31:54Z",
      "updated_at": "2017-06-07T22:31:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:  Certainly now, but with the ability to create symlinks even without elevation - see #2845 -  this will hopefully change over time.  \r\n(For existing cross-platform software, the difficulties of creating symlinks on Windows are a pain point.)\r\n\r\nTherefore, given the _current_ rarity of symlinks on Windows, it sounds like changing the current Windows behavior to align with Unix (don't follow by default, need to opt in) may be an option.",
      "created_at": "2017-06-07T22:44:05Z",
      "updated_at": "2017-06-07T22:48:41Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Can I assume that opting in will require a new parameter? A switch parameter, or a boolean, or something else?\r\n\r\nAlso, what is the expected behavior when following symlinks recursively? Does the cmdlet need to be able to detect a recursive symlink loop?",
      "created_at": "2017-06-10T00:02:30Z",
      "updated_at": "2017-06-10T00:02:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yes, a new parameter is needed.  Pending feedback from @joeyaiello and @HemantMahawar, I would suggest `-FollowSymLinks` switch (maybe alias to `-L` to keep it similar to unix tools: ls and find).  We should detect loops (perhaps cache directories already visited?) and output a warning similar to what `ls -L -R` does on Linux",
      "created_at": "2017-06-10T00:15:51Z",
      "updated_at": "2017-06-10T00:15:51Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT OK, I'll start with that.\r\n\r\nFor loop detection I was planning on caching volume IDs and inodes, and their Windows counterparts.",
      "created_at": "2017-06-10T00:27:02Z",
      "updated_at": "2017-06-10T00:27:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "/cc @HemantMahawar I think that `-FollowSymlink` follows all the rules (no plural, \"Symlink\" is one word) ",
      "created_at": "2017-06-13T18:52:21Z",
      "updated_at": "2017-06-13T18:52:21Z"
    }
  ],
  "created_at": "2017-06-06T18:23:36Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Cmdlets-Management"
  ],
  "number": 3951,
  "state": "closed",
  "title": "Need the ability to opt into / out of following symlinks with Get-ChildItem -Recurse, behavior differs between editions",
  "updated_at": "2017-07-07T03:12:14Z"
}