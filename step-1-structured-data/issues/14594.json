{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14594",
  "author": "Link1J",
  "body": "## Summary of the new feature/enhancement\r\n\r\nWhen the environment variable `TERM` is set to `dumb`, avoid using escape sequences tricks as they make using the prompt impossible.\r\nI know this is an unlikely situation, as most terminal emulators have support for escape sequences.\r\n\r\nThe pictures are to help show how a few different ways PowerShell currently handles `TERM=dumb`.\r\nLinux appears to attempt to follow along with the request (Picture 2), but doesn't go all the way.\r\nWindows (Picture 1) does nothing. Not really surprising, as Windows didn't really need to tell terminal emulators apart.\r\n\r\n#### SSHed into a Windows Machine\r\n![Powershell does not like playing dumb](https://user-images.githubusercontent.com/22891267/104235407-eefb4d00-5422-11eb-94e2-fbcddfa037c8.PNG)\r\n#### Arch Linux Machine\r\n![Powershell does not like playing dumb 3](https://user-images.githubusercontent.com/22891267/104239859-2ff66000-5429-11eb-9cfe-91725f82ad97.PNG)\r\n\r\n> And here is PowerShell descends into madness. It is likely caused by the fact the PowerShell is still expecting escape sequences to work correctly.\r\n> ![Powershell does not like playing dumb 2](https://user-images.githubusercontent.com/22891267/104235529-1baf6480-5423-11eb-89ee-924b87c11aea.PNG)\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nWhen the environment variable `TERM` is set to `dumb`, avoid using escape sequences tricks. Only escape sequences tricks used internally by PowerShell should be effected. If a user profile or external script uses them, PowerShell should not remove the escape sequences.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I know this is an unlikely situation, as most terminal emulators have support for escape sequences.\r\n\r\nRoot of the issue that PowerShell directly injecting  EscS-s (escape sequences) in strings.\r\n\r\nI would call it a bad design, but in fact, it's just _the lack of design at all_.\r\n\r\n---\r\n#### PowerShell does a lot of magical things and I'm pretty sure we can do such magic things to format the output and support coloring.\r\n---\r\nThe design should has two directions:\r\n1. Getting effective internal abstraction(s) for EscS-s\r\n2. Introducing power and magic _language_ support.\r\n\r\nFor 1. It should be done today. Simplest EscS internal abstraction could be a struct like:\r\n```c#\r\nstruct EscapedString\r\n{\r\n    string Prefix;\r\n    string Value;\r\n    string Suffix;\r\n}\r\n```\r\nIt is not too difficult rewrite PowerShell internals to utilize this.\r\n\r\nUser experience:\r\n```powershell\r\n$str = [EscapedString]\"`e[31mRed string`e[0m\"\r\nWrite-Host $str\r\n```\r\n\r\nFor 2. Direct using EsqS-s is not user friendly. It is better to have any language sugars to control _rendering_. And we could think about supporting (as PowerShell magic) **generic** rendering support.\r\n**_With the approach we will can able to work transparently with any consoles - dumb terminal, VT terminal, graphical console, web browser and so on._**\r\nEx.: with `<magically formatter string> | ConvertTo-HTML` users will get rich HTML formatted output. Symmetrically, we could have  `<magically formatter string> | ConvertTo-EscString` users will get rich EscS formatted output.\r\nFinally, for generic support, we could think about `<magically formatter string> | ConvertTo-RenderingString -RenderingPlugin [HTML | VirtualTerminal | OtherRenderingPlugins]`.\r\nIt is only demo of the idea - really we have no need to work with _raw_ formatting, we should support _generic_.\r\nObviously, we shouldn't invent our own markup language. There are two main ones - HTML and EscS/VT. Currently MSFT team prefer to have EscS/VT as main one. Uses experience looks like `\"$($PSStyle.FileInfo.Executable + $exe.Name + $PSStyle.Reset)\"`.  \r\nIt looks very cumbersome and difficult for beginners. It looks very cumbersome and difficult for beginners. I would no doubt prefer a subset of HTML as it is more readable, more widely known, and more user-friendly.\r\nBut in fact it doesn't matter which rendering method we use by _default_ - our abstractions must support the generic path.\r\nIt can be done like this (this is a topic for discussion to find the best syntax super):\r\n`[RenderingString]\"a string formatter with default rendering method\"`. `RenderingString` is an abstraction which call a parser for default rendering method (EscS for VT console) and internally convert the string to `EscapedString` struct.\r\n\r\nUser experience:\r\n```powershell\r\n$str = [RenderingString]\"$($PSStyle.Foreground.Red)Red string$($PSStyle.Reset)\"\r\nWrite-Host $str\r\n```\r\n\r\n#### Such two level abstraction is very simple and very power - this allows us to work magically in any consoles, implement flexible formatting and develop step by step in any direction.\r\n",
      "created_at": "2021-01-12T06:10:13Z",
      "updated_at": "2021-01-12T06:10:13Z"
    }
  ],
  "created_at": "2021-01-11T21:32:39Z",
  "number": 14594,
  "state": "open",
  "title": "Avoid using escape sequences tricks when TERM=dumb",
  "updated_at": "2021-01-12T06:10:13Z"
}