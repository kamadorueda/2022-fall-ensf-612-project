{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16844",
  "author": "fsackur",
  "body": "### Summary of the new feature / enhancement\n\nI'm keen on #8873, but why stop at method calls and param blocks?\r\n\r\nPython allows this syntax:\r\n\r\n``` python\r\nlist = [\r\n    'foo',\r\n    'bar',\r\n]\r\n```\r\n\r\nThe trailing comma after `'bar'` is what I would like to see in PowerShell.\r\n\r\nThe advantages are:\r\n\r\n- appending to a list is a one-line diff, not a 2-line diff\r\n- commenting out the last list entry is not a syntax error\r\n\r\nI would like all bracket-enclosed list expressions to support this:\r\n\r\n``` powershell\r\n$List = (\r\n   'foo',\r\n   'bar',\r\n)\r\n\r\n$List = @(\r\n   'foo',\r\n   'bar',\r\n)\r\n```\r\n\r\nI do NOT propose support without the brackets, because it seems like a serious breaking change:\r\n\r\n``` powershell\r\n# This should remain a syntax error\r\n$List = 'foo', bar',\r\n$a = 123\r\n```\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "Array literals already allow you to remove the comma, so you get one-line diffs:\r\n~~~powershell\r\n# This is already valid syntax\r\n$List = @(\r\n   'foo'\r\n   'bar'\r\n)\r\n~~~\r\n\r\nAlso works with hashtable literals:\r\n~~~powershell\r\n$Map = @{\r\n  foo = 'bar'\r\n  baz = 'bim'\r\n}\r\n~~~\r\n",
      "created_at": "2022-02-04T18:30:08Z",
      "updated_at": "2022-02-04T18:31:45Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Array literals already allow you to remove the comma, so you get one-line diffs:\r\n\r\nNote that's not really an array literal at that point. It's a bit closer to:\r\n\r\n```powershell\r\n$List = & {\r\n    'foo'\r\n    'bar'\r\n}\r\n```\r\n\r\nAnd will only work with `@()`, not `()`.\r\n\r\nHashtable key value pairs cannot be separated with `,`, they can only be separated with `;` or new lines.",
      "created_at": "2022-02-04T18:41:27Z",
      "updated_at": "2022-02-04T18:41:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Hashtable key value pairs cannot be separated with `,`, they can only be separated with `;` or new lines.\r\n\r\nAnd tricky question - why is there `;`? \ud83d\ude38 ",
      "created_at": "2022-02-05T03:29:44Z",
      "updated_at": "2022-02-05T03:29:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> And tricky question - why is there `;`? \ud83d\ude38\r\n\r\nProbably more incidental than anything. It's just the statement terminator\r\n",
      "created_at": "2022-02-05T03:43:10Z",
      "updated_at": "2022-02-05T03:43:10Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "> Note that's not really an array literal at that point.\r\n\r\nThanks for correcting. It's called the [array sub-expression operator](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_arrays?view=powershell-7.2#the-array-sub-expression-operator).\r\n\r\nAre there any practical differences compared to real array literals, when defining _arrays over multiple lines_? I. e. which one of the following  would be preferrable under different circumstances?\r\n\r\n~~~powershell\r\n# Wishful thinking\r\n$List = \r\n   'foo',\r\n   'bar',\r\n\r\n# Wishful thinking\r\n$List = (\r\n   'foo',\r\n   'bar',\r\n)\r\n\r\n# Already possible\r\n$List = @(\r\n   'foo'\r\n   'bar'\r\n)\r\n~~~\r\n\r\nThe 1st example silently changes behaviour when we miss the comma after any element that is not the last one. It is also less readable in my opinion, because it doesn't visually group the array elements, aside from the indentation.\r\n\r\nIf we miss comma in the 2nd example, we get syntax error \"Missing closing ')' in expression\", which is better.\r\n\r\nI still prefer the last one as there is no comma to be missed and it looks visually cleaner and more similar to how we define multiline hashtable literals `@{ }`.\r\n\r\nIs there a possible performance benefit of `( )` over `@( )`?",
      "created_at": "2022-02-05T09:52:23Z",
      "updated_at": "2022-02-05T09:52:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Is there a possible performance benefit of `( )` over `@( )`?\r\n\r\nIt's more the commas than anything. `('one', 'two')` and `@('one', 'two')` compile identically. But using new lines to separate makes a significant difference in some scenarios.\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n## Click for compilation\r\n\r\n```powershell\r\n{ $list = @(\r\n'w',\r\n'b'\r\n) } | ScriptBlockDisassembler\\Get-ScriptBlockDisassembly -Minimal\r\n```\r\n\r\n</summary>\r\n\r\n```csharp\r\n// ScriptBlock.EndBlock\r\ntry\r\n{\r\n    locals.Item009 = (object)new object[] { (object)\"w\", (object)\"b\" };\r\n}\r\ncatch (FlowControlException)\r\n{\r\n    throw;\r\n}\r\ncatch (Exception exception)\r\n{\r\n    ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n## Click for compilation\r\n\r\n```powershell\r\n{ $list = @(\r\n'w'\r\n'b'\r\n) } | ScriptBlockDisassembler\\Get-ScriptBlockDisassembly -Minimal\r\n```\r\n\r\n</summary>\r\n\r\n```csharp\r\n// ScriptBlock.EndBlock\r\ntry\r\n{\r\n    locals.Item009 = (object)Fake.Dynamic<Func<CallSite, List<object>, object[]>>(PSToObjectArrayBinder.Get())(\r\n        try\r\n        {\r\n            Pipe oldPipe0 = funcContext._outputPipe;\r\n            List<object> resultList1 = new List<object>();\r\n            funcContext._outputPipe = new Pipe(resultList1);\r\n            oldPipe0.SetVariableListForTemporaryPipe(funcContext._outputPipe);\r\n            int stmt = 0;\r\n\r\n            unnamed_label_0:\r\n            try\r\n            {\r\n                switch (stmt)\r\n                {\r\n                    case 0:\r\n                        goto unnamed_label_1;\r\n                        break;\r\n\r\n                    case 1:\r\n                        goto unnamed_label_2;\r\n                        break;\r\n\r\n                    case 2:\r\n                        goto unnamed_label_3;\r\n                        break;\r\n                }\r\n\r\n                unnamed_label_1:\r\n                stmt = 1;\r\n                funcContext._outputPipe.Add(\"w\");\r\n\r\n                unnamed_label_2:\r\n                stmt = 2;\r\n                funcContext._outputPipe.Add(\"b\");\r\n            }\r\n            catch (FlowControlException)\r\n            {\r\n                throw;\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n                goto unnamed_label_0;\r\n            }\r\n\r\n            unnamed_label_3:\r\n\r\n            return resultList1;\r\n        }\r\n        finally\r\n        {\r\n            return funcContext._outputPipe = oldPipe0;\r\n        });\r\n}\r\ncatch (FlowControlException)\r\n{\r\n    throw;\r\n}\r\ncatch (Exception exception)\r\n{\r\n    ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n}\r\n```\r\n\r\n</details>\r\n\r\nTL;DR: The former just makes an array, exactly like you'd expect. The latter spins up an output pipe and evaluates every line as a statement, retrieves the result from the output pipe and then converts to an array.\r\n\r\nGranted in the majority of powershell scripts none of this matters. If however you are allocating a lot of arrays in a loop, the difference may be significant at higher scales.",
      "created_at": "2022-02-05T13:21:35Z",
      "updated_at": "2022-02-05T13:21:35Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "\r\n> If however you are allocating a lot of arrays in a loop, the difference may be significant at higher scales.\r\n\r\nIs it also true for hashtables? They are some kind of arrays.\r\n",
      "created_at": "2022-02-05T14:05:34Z",
      "updated_at": "2022-02-05T14:05:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Is it also true for hashtables? They are some kind of arrays.\r\n\r\nIf you mean the difference between these:\r\n\r\n```powershell\r\n@{\r\n    key = 'value'\r\n    key2 = 'value'\r\n}\r\n\r\n# And\r\n\r\n@{\r\n    key = 'value';\r\n    key2 = 'value';\r\n}\r\n```\r\n\r\nNo, there's no difference.",
      "created_at": "2022-02-05T14:39:12Z",
      "updated_at": "2022-02-05T14:39:12Z"
    }
  ],
  "created_at": "2022-02-04T13:52:12Z",
  "number": 16844,
  "state": "open",
  "title": "Syntax sugar: allow trailing commas in bracket-enclosed lists",
  "updated_at": "2022-02-05T14:39:13Z"
}