{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9170",
  "author": "zbalkan",
  "body": "Since the engine is accessible by powershell.exe, conhost.exe or any third party host due to it's design, it's unmanageable by means of role based security permissions. Script execution policy used with measures for different hosts might not be enough. \r\n\r\nSo an architectural change might be a solution for better security. The engine, accessed by an API in order to accessed like an object with security descriptor, may be applied to its own ACL with default settings. By default, System -or only root for non-Windows- can have the script execution permission, then other users can only have permissions via Local Policy or Group Policy Settings.",
  "closed_at": "2019-03-29T03:44:36Z",
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Access control would be better implemented through the root cause.  If you don't want a file deleted, protect it with File ACL.   Don't want them to edit the registry, use a registry ACL.  Don't want them to access the internet via Invoke-WebRequest, use a firewall with ACL.   If they write a cryptomining program in PowerShell, then control their access to the CPU/GPU to contain their access to the CPU resources required to have a meaningful output.  Last but not least, if a malicious script could be developed, antivirus software would be just as affective at stopping script execution.\r\n\r\nBeyond that, nothing is going to stop a user who can type a math problem in at the command line, from pasting script and executing it, providing they can get the text of a malicious script past the antivirus in the first place, to get it in their copy paste buffer.\r\n\r\nDoes the same fear exist for CMD.EXE (or is this a Linux control issue?)\r\n",
      "created_at": "2019-03-21T03:36:54Z",
      "updated_at": "2019-03-21T03:36:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please see PowerShell Constrained Language Mode and Just Enough Administration (JEA).",
      "created_at": "2019-03-21T14:04:27Z",
      "updated_at": "2019-03-21T14:04:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PowerShell only allows a user to do what they have permission to do.  As @msftrncs mentions, the correct way to secure a system is to ACL the resources being accessed.  PowerShell just makes some things easier, but anything it can do, you can do it through some other means so an ACL on PowerShell engine is a false sense of security.",
      "created_at": "2019-03-29T03:44:35Z",
      "updated_at": "2019-03-29T03:44:35Z"
    }
  ],
  "created_at": "2019-03-19T20:34:12Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9170,
  "state": "closed",
  "title": "ACL for Powershell engine",
  "updated_at": "2019-03-29T03:44:36Z"
}