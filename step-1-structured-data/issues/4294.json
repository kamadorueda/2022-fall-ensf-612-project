{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4294",
  "author": "loxal",
  "body": "I need to *right click* to paste which everything but aligned with everything else. On Mac's terminal you can just \"Cmd + V\" everywhere. ",
  "closed_at": "2018-01-13T06:48:32Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good find.\r\n\r\nIt looks like a [PSReadLine](https://github.com/lzybkr/PSReadLine) issue.\r\n\r\nYou can verify this by running `Remove-Module PSReadLine` in your session (which is obviously not a real solution, as it disables all PSReadLine features), at which point the W10 console windows' native selection and copy & paste features start working.\r\n\r\nI suggest posting an [issue there](https://github.com/lzybkr/PSReadLine/issues) - correct, @iSazonov?\r\n\r\n",
      "created_at": "2017-07-19T12:27:51Z",
      "updated_at": "2017-07-24T17:22:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you please test on Linux too?",
      "created_at": "2017-07-19T12:42:39Z",
      "updated_at": "2017-07-19T12:42:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nLinux terminals typically use \u2303\u21e7C and \u2303\u21e7V rather than \u2303C and \u2303V.\r\n\r\nI can confirm that \u2303\u21e7C and \u2303\u21e7V work as expected in the default terminal on Ubuntu 16.04.\r\n\r\n\r\n",
      "created_at": "2017-07-19T13:32:05Z",
      "updated_at": "2017-07-19T13:32:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0  Thanks for the test!",
      "created_at": "2017-07-19T13:45:30Z",
      "updated_at": "2017-07-19T13:45:30Z"
    },
    {
      "author": "loxal",
      "author_association": "NONE",
      "body": "After executing `Remove-Module PSReadLine` Ctrl + V works fine again on Windows 10 (Creators Update)/PS6beta4.",
      "created_at": "2017-07-19T13:59:07Z",
      "updated_at": "2017-07-19T13:59:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please comment the Issue?",
      "created_at": "2017-07-19T14:01:28Z",
      "updated_at": "2017-07-19T14:01:28Z"
    },
    {
      "author": "loxal",
      "author_association": "NONE",
      "body": "Another, slightly unrelated question:  \r\n\r\nWhen I launch \"Ubuntu Bash\" in PS and want to use `Ctrl + V` as well, I get `^V` -- only right-click works. With https://conemu.github.io/ it works fine but I do not want to use it because if its preferences bloat. ",
      "created_at": "2017-07-19T14:04:58Z",
      "updated_at": "2017-07-19T14:04:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@loxal: I don't think that's a PowerShell problem; `bash.exe` is in control of keyboard handling, and you get the same (broken) behavior whether you invoke it from PowerShell or directly, via the official shortcut.",
      "created_at": "2017-07-19T17:07:05Z",
      "updated_at": "2017-07-19T17:07:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "PSReadline depends on winforms for clipboard support, but winforms is not in .Net Core. We likely need to extract the clipboard p/invoke code from winforms to get copy/paste support in PSReadline, but that still won't help on non-Windows platforms that might not support a clipboard at all.",
      "created_at": "2017-07-22T03:30:54Z",
      "updated_at": "2017-07-22T03:30:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it work without PSReadline why we need the clipboard p/invoke ?",
      "created_at": "2017-07-22T19:53:24Z",
      "updated_at": "2017-07-22T19:53:24Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Cooked mode command line editing (conhost) supports basic selection and clipboard, but isn't extensible, so PSReadline uses raw mode and loses some things like clipboard support.",
      "created_at": "2017-07-22T21:33:48Z",
      "updated_at": "2017-07-22T21:33:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is there no way to passthrough for clipboard support?",
      "created_at": "2017-07-24T04:54:45Z",
      "updated_at": "2017-07-24T04:54:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Not really,  there could be some horrible hack, but no clean way.",
      "created_at": "2017-07-24T14:13:14Z",
      "updated_at": "2017-07-24T14:13:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks for clarify!\r\n\r\nUnix doesn't seem to have a common clipboard \ud83d\ude15. I guess we have to fix at least Windows.",
      "created_at": "2017-07-24T14:34:08Z",
      "updated_at": "2017-07-24T14:34:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Native API:\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/ms649048%28v=vs.85%29.aspx\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/ms649016(v=vs.85).aspx#_win32_Copying_Information_to_the_Clipboard\r\n\r\nWinForms uses ComObj  `OleGetClipboard` https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/Clipboard.cs,f4f3734655d33a95",
      "created_at": "2017-07-24T14:52:59Z",
      "updated_at": "2017-07-24T14:52:59Z"
    },
    {
      "author": "aarsan",
      "author_association": "NONE",
      "body": "Any movement on this? Would love to be able to get my ctrl + v back :)",
      "created_at": "2018-01-12T05:09:52Z",
      "updated_at": "2018-01-12T05:09:52Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "+1 with @aarsan \r\n\r\nThis works in Windows PowerShell without doing \"remove-module psreadline\", but not in PSCore 6.0.0.\r\nIn PSCore 6.0.0, only works if I do the \"remove-module psreadline\".\r\n\r\n:)\r\n",
      "created_at": "2018-01-12T17:27:35Z",
      "updated_at": "2018-01-12T17:27:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Run `Install-Module PSReadLine -AllowPrerelease -AllowClobber -Force` and restart, you'll have `2.0.0-beta1` which fixes most of the issues people have had.",
      "created_at": "2018-01-12T17:55:10Z",
      "updated_at": "2018-01-12T17:55:10Z"
    },
    {
      "author": "aarsan",
      "author_association": "NONE",
      "body": "Awesome. Worked, but I had to add the `-SkipPublisherCheck` argument. Thanks!",
      "created_at": "2018-01-13T02:48:10Z",
      "updated_at": "2018-01-13T02:50:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can close the Issue - with PSReadline 2.0.0 we got `Ctrl-V` and `Ctrl-C` on Windows back.",
      "created_at": "2018-01-13T06:48:32Z",
      "updated_at": "2018-01-13T06:48:32Z"
    },
    {
      "author": "Hrxn",
      "author_association": "NONE",
      "body": "In which version of PowerShell Core will PSReadline 2.0.0 land?",
      "created_at": "2018-03-24T14:12:00Z",
      "updated_at": "2018-03-24T14:12:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@Hrxn - hopefully 6.1",
      "created_at": "2018-03-24T16:23:47Z",
      "updated_at": "2018-03-24T16:23:47Z"
    },
    {
      "author": "yves-dolce",
      "author_association": "NONE",
      "body": "Any progress on this? Still not working with 6.0.2 / PSReadLine 1.2",
      "created_at": "2018-06-01T22:00:40Z",
      "updated_at": "2018-06-01T22:01:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You can install [PSReadLine 2.0.0-beta1](https://www.powershellgallery.com/packages/PSReadLine/2.0.0-beta1). Beta2 will hopefully ship with the next preview of 6.1.",
      "created_at": "2018-06-01T22:19:57Z",
      "updated_at": "2018-06-01T22:19:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nThanks for fixing most of the issues in v2, on all platforms.\r\n\r\nThe one thing that still doesn't seem to work on _Unix_ platforms is copying _keyboard-based_ selections to the clipboard.\r\n\r\nWhat would be required to support that?\r\n",
      "created_at": "2018-06-01T23:26:55Z",
      "updated_at": "2018-06-01T23:26:55Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@mklement0 - I haven't really looked into clipboard support for non-WIndows - I'd sort of assumed the only viable approach was to use an external utility like `pbcopy` or `xclip` or whatever the tool might be called.",
      "created_at": "2018-06-01T23:55:55Z",
      "updated_at": "2018-06-01T23:55:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\nIndeed: on macOS it is `pbcopy`, on freedesktop.org-compliant Linux distros (X11-based desktops)  it is the `xclip` utility, which, unfortunately, isn't preinstalled.\r\n\r\nMy [`ClipboardText` module](https://www.powershellgallery.com/packages/ClipboardText) provides a PS wrapper around these (including around `clip.exe` on Windows), if it helps. (It only _warns_ about a missing `xclip` and provides installation _hints_, however).",
      "created_at": "2018-06-02T00:03:10Z",
      "updated_at": "2018-06-02T00:03:10Z"
    }
  ],
  "created_at": "2017-07-19T08:15:58Z",
  "number": 4294,
  "state": "closed",
  "title": "Copy & paste is not working properly on Windows 10",
  "updated_at": "2018-06-02T00:03:10Z"
}