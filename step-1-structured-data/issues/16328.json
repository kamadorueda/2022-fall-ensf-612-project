{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16328",
  "author": "Stroniax",
  "body": "### Summary of the new feature / enhancement\n\nI would like the ability to cast from a hashtable using the constructor of a type, for example when no parameterless constructor is available but even if one is, using a '.ctor' key in the hashtable.\r\n\r\nThe '.ctor' key would be interpreted as an array and passed to the constructor of the type. I would expect similar if not identical behavior with this key's presence as observed using the `New-Object -ArgumentList $ConstructorParameters`.\r\n\n\n### Proposed technical implementation details (optional)\n\n```\r\n# Class definition used for functionality examples\r\nclass TestClass {\r\n  hidden static [int]$NextId\r\n  [int]$Id\r\n  [string]$Name\r\n  [object]$Payload\r\n  # Because there is no parameterless constructor, currently this class cannot be instantiated by cast from a hashtable\r\n  TestClass([string]$name) {\r\n    $this.Id = ++[TestClass]::NextId\r\n    $this.Name = $name\r\n  }\r\n}\r\n\r\n# The three test cases below each construct the TestClass class and set the value of the Payload property\r\n\r\n# TestCase1 demonstrates how we would do this currently (without New-Object)\r\n$TestCase1 = [TestClass]::new(\"FirstTest\")\r\n$TestCase1.Payload = 1\r\n\r\n# TestCase2 demonstrates how New-Object already supports this behavior\r\n$TestCase2 = New-Object -TypeName TestClass -ArgumentList SecondTest -Property @{Payload  = 2}\r\n\r\n# TestCase3 demonstrates how this operation would be performed using the '.ctor' hashtable key\r\n$TestCase3  = [TestClass]@{\r\n  '.ctor'   = @('ThirdTest')\r\n  'Payload' = 3\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It may be worth considering formalizing initialization syntax, e.g.\r\n\r\n```powershell\r\n[TestClass]::new('ThirdTest') @{ Payload = 3 }\r\n```\r\n\r\nThe introduction of init-only properties to C# makes this a lot more attractive than it's been in the past.\r\n\r\nIt should be pretty rare for the above syntax to behave differently than expected, though dynamic static invocations in command parsing may be confusing:\r\n\r\n```powershell\r\n$type = [TestClass]\r\nWrite-Output $type::new('ThirdTest') @{ Payload = 3 }\r\n```\r\n\r\nBut non-dynamic will be fine since type expressions aren't parsed in command parsing anyway.  I believe in all other scenarios this syntax would result in a parse error today.",
      "created_at": "2021-10-29T15:04:19Z",
      "updated_at": "2021-10-29T15:05:50Z"
    },
    {
      "author": "Stroniax",
      "author_association": "NONE",
      "body": "My only concern with that is that I couldn't find a way to make that look nice when spanning more than one line. You'd end up with something like\r\n```\r\n[TestClass]::new(\r\n  'ThirdTest'\r\n)@{\r\n  Payload = 3\r\n}\r\n```\r\n... and I just feel like that looks messy.",
      "created_at": "2021-10-29T15:13:14Z",
      "updated_at": "2021-10-29T15:13:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, it's tricky to make that look right. I think the original syntax proposed works pretty well, though I don't know about using `.ctor` for that, it's not something most powershell folks will be familiar with / understand too well, I think. Maybe we keep the `::new` for that or something? \ud83e\udd14 \r\n\r\n```ps1\r\n[TestClass]@{\r\n    ::new = 'TestName'\r\n    Payload = 7\r\n}\r\n```\r\n\r\nI would also suggest whatever use for the constructor key should be able to use either an array for positional parameters, or a hashtable to provide named constructor parameters:\r\n\r\n```ps1\r\n[TestClass]@{\r\n    ::new = @{\r\n        name = 'TestName'\r\n    }\r\n    Payload = 7\r\n}\r\n```",
      "created_at": "2021-10-29T15:25:57Z",
      "updated_at": "2021-10-29T15:25:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I think this looks *okay* personally:\r\n\r\n```powershell\r\n[TestClass]::new(\r\n    'ThirdTest',\r\n    'SomethingElse') @{\r\n    Payload = 3\r\n}\r\n```\r\n\r\nBut line continuation jank unfortunately just kind of comes with the territory with PS. I'm not sure that's a good reason not to do it.\r\n\r\nIf original proposal is accepted, I don't think the key name should be `.ctor` since most folks won't be familiar with that (or be able to remember it). I don't really have a good alternative in mind though, since anything that doesn't have that problem may be too risky due to potential property name conflicts.\r\n\r\nThe type name might work since most compilers won't let you have a member with the same name as the type that defines it but that may also be too obscure.\r\n\r\n---\r\n\r\nMaybe you could also allow this syntax but I'm unsure how I feel about it:\r\n\r\n```powershell\r\n[TestClass]::new(\r\n    'ThirdTest',\r\n    'SomethingElse') @\r\n    {\r\n        Payload = 3\r\n    }\r\n```\r\n \r\n---\r\n\r\n**Edit:** @vexx32 beat me to a response \ud83d\ude01. Yeah `::new` is pretty good. Considering that it's much more likely to be implemented than actually building it into the language, that might be the way to go. I'd still like to see it supported in the way that most folks may try to do it intuitively, but it's hard to justify with this alternative.",
      "created_at": "2021-10-29T15:26:07Z",
      "updated_at": "2021-10-29T15:32:57Z"
    },
    {
      "author": "Stroniax",
      "author_association": "NONE",
      "body": "I like the '::new' syntax. I think it's important to have special characters that won't be part of an actual member name like a preceeding '.' or '::'. I'd love the idea for a hashtable of named parameters and considered including that here but but what I'd really like is to see that syntax supported for calling any methods.",
      "created_at": "2021-10-29T16:08:12Z",
      "updated_at": "2021-10-29T16:08:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'd agree on that as well. I think there are existing issues around that, as well.",
      "created_at": "2021-10-29T16:29:10Z",
      "updated_at": "2021-10-29T16:29:34Z"
    }
  ],
  "created_at": "2021-10-29T05:20:17Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 16328,
  "state": "open",
  "title": "Hashtable Conversion Support Constructor Parameters",
  "updated_at": "2021-10-29T16:29:34Z"
}