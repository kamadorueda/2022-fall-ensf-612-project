{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14727",
  "author": "plastikfan",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\nThis is a platform specific issue and has been tested on mac. To reproduce run the said commands inside terminal app, or Iterm2\r\n\r\n```powershell\r\n$host.ui.RawUI.ForegroundColor\r\n```\r\n\r\nor \r\n\r\n```powershell\r\n(Get-Host).ui.RawUI.ForegroundColor\r\n```\r\n\r\n\r\n\r\n## Expected behavior\r\n\r\nShould behave like windows and return valid colours for ForegroundColor and BackgroundColor\r\n\r\n## Actual behavior\r\n\r\nOn mac:\r\n```\r\n\u03bb $host.ui.RawUI.ForegroundColor\r\n-1\r\n\r\n\r\n\u03bb (get-host).ui.rawui | Format-List -Property *\r\n\r\nForegroundColor       : -1\r\nBackgroundColor       : -1\r\nCursorPosition        : 0,52\r\nWindowPosition        : 0,0\r\nCursorSize            : 100\r\nBufferSize            : 214,53\r\nWindowSize            : 214,53\r\nMaxWindowSize         : 214,53\r\nMaxPhysicalWindowSize : 214,53\r\nKeyAvailable          : False\r\nWindowTitle           :\r\n\r\n```\r\n\r\nOn windows:\r\n\r\n```\r\n\u03bb (get-host).ui.rawui | Format-List -Property *\r\n\r\nForegroundColor       : Gray\r\nBackgroundColor       : Black\r\nCursorPosition        : 0,59\r\nWindowPosition        : 0,0\r\nCursorSize            : 25\r\nBufferSize            : 213,60\r\nWindowSize            : 213,60\r\nMaxWindowSize         : 213,60\r\nMaxPhysicalWindowSize : 1904,70\r\nKeyAvailable          : True\r\nWindowTitle           : Elizium.Krayola\r\n```\r\n\r\nI haven't tested this on Linux, but the same applies there also.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\u03bb $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.1\r\nPSEdition                      Core\r\nGitCommitId                    7.1.1\r\nOS                             Darwin 19.6.0 Darwin Kernel Version 19.6.0: Mon Aug 31 22:12:52 PDT 2020; root:xnu-6153.141.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nSee also: [PSHostRawUserInterface Class](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.host.pshostrawuserinterface?view=powershellsdk-7.0.0)\r\n\r\nI've raised this issue here because that host raw ui interface is part of the PowerShell SDK 7.0.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Another point of ponderance to me is, if these values are set to -1 and not valid colours, how does general text display in a PowerShell session work? It implies there is another place that that colours are being set from, but where? As a work around, I am manually going to set these values to 'gray' and 'black' in my module initialisation code and inform the user (via documntation) they can override these default values. However, I can foresee another problem; how can we detect wether the user is using a light or dark console? If using a dark console (which I am assuming) then foreground = 'gray' and background = 'black' are correct defaults, however, if they're using a light console, this will result in not beng able to see displayed text. To detect the light or dark console I would have just consulted $host.ui.rawui.ForegroundColor/BackgroundColor but they are incorrectly set, hence this issue. My PowerShell module code already declares a custom environment variable boolean flag that indicates light or dark console (as there is no equivalent in powershell core) which the user can set, so I'll tie my logic to this flag for the time being.\r\n\r\n\r\n",
      "created_at": "2021-02-08T11:21:01Z",
      "updated_at": "2021-02-08T11:29:34Z"
    }
  ],
  "created_at": "2021-02-08T11:02:03Z",
  "number": 14727,
  "state": "open",
  "title": "ui.RawUI on result of 'Get-Host' contains ForegroundColor/BackgroundColor set to -1 on macOS",
  "updated_at": "2021-02-08T15:06:47Z"
}