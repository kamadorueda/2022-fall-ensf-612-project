{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8098",
  "author": "p0W3RH311",
  "body": "hello\r\nplease, add a hyper-operators to PS6 [ + - * / ]\r\n\r\nhere some examples\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS C:\\> 1 * 2 * 3 * 4 * 5\r\n120\r\nPS C:\\> * 1..5\r\n120\r\nPS C:\\> 5 + 998 + 41 + 7\r\n1051\r\nPS C:\\> + 5,998,41,7\r\n1051\r\nPS C:\\> $factor_10 = * 1..10\r\n3628800\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Intriguing idea - certainly makes for more flexible and concise operation expressions.\r\n\r\nJust to note (I don't think the idea should be discounted for that reason): `*` and `/`  (but not `+` and `-`) are currently interpreted as _command names_ at the start of a statement, so interpreting them as operators is _technically_ a breaking change.\r\n\r\nConceivably, the pattern could be extended to `-and` / `-or` and `-band` / `-bor`, but note that, again, such tokens would currently be interpreted as command names at the start of a statement.\r\n",
      "created_at": "2018-10-21T15:03:47Z",
      "updated_at": "2018-10-21T15:03:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmmmm. The syntax seems a bit... Unclear in intent?\n\nPerhaps something like:\n```\n-multiply $array\n-sum $array\n```\nMight be a bit clearer?",
      "created_at": "2018-10-21T15:18:31Z",
      "updated_at": "2018-10-21T15:18:31Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Hmmmm. The syntax seems a bit... Unclear in intent?\r\n> \r\n> Perhaps something like:\r\n> \r\n> ```\r\n> -multiply $array\r\n> -sum $array\r\n> ```\r\n> \r\n> Might be a bit clearer?\r\n\r\nyes unary operator seem a good idea\r\n\r\n```powershell\r\n-add 1..5\r\n1+2+3+4+5\r\n\r\n-multiply 1..5\r\n1*2*3*4*5\r\n\r\n-subtract 1..5\r\n1-2-3-4-5\r\n\r\n-div 1..5\r\n1/2/3/4/5\r\n\r\n-Mod 1..5\r\n1%2%3%4%5\r\n\r\n # calculate the sum of squares of $x\r\n $sumSqrt = -add (-exponent $x,2)\r\n\r\n\r\n# and maybe extend the syntax to math library:\r\n-exponent 1..5,2\r\n[math]::pow(1,2) * [math]::pow(2,2) * [math]::pow(3,2) * [math]::pow(4,2) * [math]::pow(5,2)  \r\n```",
      "created_at": "2018-10-21T16:55:47Z",
      "updated_at": "2018-10-21T17:28:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\nI suggest not choosing a different name for what is essentially the same operator, only with different operator syntax - unless you're thinking of implementing `-multiply` / `-sum`, ... as _aliases_ of the existing binary infix operators `*` / `+`, ... - which I don't think is necessary.\r\n\r\nWe already have examples of operator-first operators (_unary_ ones that accept an _array operan_) that complement their binary counterparts while using the same name (`-split`, `-join`).\r\n\r\nTo me, `-multiply $array` is not any clearer than `* $array`, given that unquoted `*` doesn't have any uses other than multiplication in _expression mode_ (though in _argument mode_ you can use  `*` in unquoted wildcard arguments).\r\n\r\n",
      "created_at": "2018-10-21T17:21:04Z",
      "updated_at": "2018-10-21T17:21:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I see what you mean @mklement0. My main issue with them being unary operators too similar to their binary counterparts is that this then introduces... unclear syntax in more complex expressions. Or do we simply enforce either/or and prevent them also behaving as binary operators in such expressions?\r\n\r\nConsider:\r\n```powershell\r\n2 * 1..5 # Okay, so guess this would be equivalent to 2 * (* 1..5)? Or is it invalid syntax?\r\n* 1..5 + 1..5 # This hurts my brain.\r\n```\r\nEtc., etc. -- Some of those *look* like they ought to work, but you could possibly argue either way on exactly how they ought to behave.",
      "created_at": "2018-10-21T17:29:35Z",
      "updated_at": "2018-10-21T17:29:35Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Yeah, I see what you mean @mklement0. My main issue with them being unary operators too similar to their binary counterparts is that this then introduces... unclear syntax in more complex expressions. Or do we simply enforce either/or and prevent them also behaving as binary operators in such expressions?\r\n> \r\n> Consider:\r\n> \r\n> ```powershell\r\n> 2 * 1..5 # Okay, so guess this would be equivalent to 2 * (* 1..5)? Or is it invalid syntax?\r\n> * 1..5 + 1..5 # This hurts my brain.\r\n> ```\r\n> \r\n> Etc., etc. -- Some of those _look_ like they ought to work, but you could possibly argue either way on exactly how they ought to behave.\r\n\r\nusing parens seem resolve most problem  but not all\r\n```powershell\r\n(* 1..5) + (+ 1..5)\r\n(* 1..5) + (1..5)\r\n* (1..5 + 1..5)\r\n2 (* 1..5)\r\n```",
      "created_at": "2018-10-21T17:40:01Z",
      "updated_at": "2018-10-21T17:41:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Exactly. In pure unary syntax the proposal is great, but in a more complex expression I think we'd just end up with a largely unintelligible or overly-parenthesized mess. \ud83d\ude15 ",
      "created_at": "2018-10-21T17:44:11Z",
      "updated_at": "2018-10-21T17:44:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think the scenario can be addressed by LINQ. We already have a tracking Issue to add LINQ support.",
      "created_at": "2018-10-21T17:44:40Z",
      "updated_at": "2018-10-21T17:44:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think that one's #2226?\r\n\r\nHmm, where did the RFC for that get to...",
      "created_at": "2018-10-21T17:49:50Z",
      "updated_at": "2018-10-21T17:49:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I can see how the precedence issues can get mind-bending.\r\n\r\nLINQ support (the RFC (covering method syntax only) is [here](https://github.com/PowerShell/PowerShell-RFC/pull/86/files)) would definitely give us the same functionality in principle:\r\n\r\nConveniently in the case of `+` (summing):\r\n\r\n```powershell\r\nPS> (1, 2, 3, 4).Sum()  # once we have support for LINQ extension methods\r\n10\r\n```\r\n\r\nNot so conveniently in the other cases, using `*` as an example:\r\n\r\n```powershell\r\nPS> (1, 2, 3, 4).Aggregate({ param($soFar, $element) $element * $soFar }) \r\n24\r\n```\r\n\r\nOn the plus side, `.Aggregate()` allows implementation of custom aggregations.\r\n",
      "created_at": "2018-10-21T21:03:39Z",
      "updated_at": "2018-10-21T21:04:15Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "If you wanna turn PowerShell into an array language, steal some ideas from the J language \ud83d\ude03 \r\n\r\nhttp://www.jsoftware.com/help/learning/01.htm section 1.8 introduces the \"Insert\" operator, which is described as:\r\n\r\n> We see that `+/2 3 4` means `2+3+4` and `*/2 3 4` means `2*3*4`. The symbol `/` is called \"Insert\", because in effect it inserts whatever function is on its left between each item of the list on its right. The general scheme is that if F is any dyadic function and L is a list of numbers a, b, c, .... y, z then:\r\n>         F / L     means    a F b F .... F y F z \r\n\r\nAnd then we're well on the way to transforming an array all at once instead of loops and filters everywhere and...\r\n\r\nBut seriously, `$array | measure-object -sum | select-object -expandproperty sum` is the PowerShell way to sum a list, and LINQ Sum/Aggregate is the .Net way to `reduce()` a list, and I'd rather see LINQ support first, than new operators for things it can do.\r\n\r\n`+ 5,998,41,7` does already have a meaning in PowerShell.\r\n\r\n```\r\n# and maybe extend the syntax to math library:\r\n-exponent 1..5,2\r\n```\r\n\r\nThere is an open issue about an operator to map to `[math]::pow()` somewhere\r\n\r\n> Not so conveniently in the other cases, using * as an example:\r\n\r\nIf only we could `import operator; reduce(operator.mul, array)` like in Python, to use operators as first class functions.",
      "created_at": "2018-10-29T21:01:55Z",
      "updated_at": "2018-10-29T21:03:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Taking a leaf out of the Haskell book, where operators are just infix functions:\r\n\r\n```powershell\r\nfunction *\r\n{\r\n    param(\r\n        [Parameter(ValueFromRemainingArguments=$true, ValueFromPipeline=$true)]\r\n        [object]\r\n        $Num\r\n    )\r\n\r\n    begin\r\n    {\r\n        $acc = 1\r\n    }\r\n\r\n    process\r\n    {\r\n        if ($Num -as [object[]])\r\n        {\r\n            foreach ($v in $Num)\r\n            {\r\n                $acc = $acc * $v\r\n            }\r\n            return\r\n        }\r\n\r\n        $acc = $acc * $Num\r\n    }\r\n\r\n    end\r\n    {\r\n        return $acc\r\n    }\r\n}\r\n```\r\n\r\n```\r\n> * (1..5)\r\n120\r\n\r\n> * 3 4 5\r\n60\r\n\r\n> 10,3,7 | *\r\n210\r\n```",
      "created_at": "2018-10-31T00:55:57Z",
      "updated_at": "2018-10-31T00:55:57Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Extending this a bit further, basic folds are possible:\r\n\r\n```powershell\r\nfunction fold\r\n{\r\n    param(\r\n        [Parameter()]\r\n        [string]\r\n        $Function,\r\n\r\n        [Parameter()]\r\n        [object]\r\n        $Zero,\r\n\r\n        [Parameter(ValueFromPipeline=$true, ValueFromRemainingArguments=$true)]\r\n        [object]\r\n        $Obj\r\n    )\r\n\r\n    begin\r\n    {\r\n        $acc = $Zero\r\n    }\r\n\r\n    process\r\n    {\r\n        if (-not ($Obj -as [object[]]))\r\n        {\r\n            $acc = & $Function $acc $Obj\r\n            return\r\n        }\r\n\r\n        foreach ($o in $Obj)\r\n        {\r\n            $acc = & $Function $acc $o\r\n        }\r\n    }\r\n\r\n    end\r\n    {\r\n        return $acc\r\n    }\r\n}\r\n\r\nfunction *\r\n{\r\n    $args[0] * $args[1]\r\n}\r\n\r\nfunction +\r\n{\r\n    $args[0] + $args[1]\r\n}\r\n```\r\n\r\n```\r\n> fold + 0 1 2 3\r\n6\r\n\r\n> 3..7 | fold * 1\r\n2520\r\n\r\n> fold + '' 'x','y','z'\r\nxyz\r\n\r\n> fold + @(,@()) 1 \"Hello\" '^'\r\n1\r\nHello\r\n^\r\n```",
      "created_at": "2018-10-31T02:39:37Z",
      "updated_at": "2018-10-31T02:43:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Can we get this fold function built-in to PS in some form? That's really quite nice. \ud83d\ude04 ",
      "created_at": "2018-12-27T16:23:41Z",
      "updated_at": "2018-12-27T16:23:52Z"
    }
  ],
  "created_at": "2018-10-21T12:12:51Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 8098,
  "state": "open",
  "title": "add hyper-operators ",
  "updated_at": "2018-12-27T16:23:52Z"
}