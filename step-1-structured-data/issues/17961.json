{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17961",
  "author": "dkaszews",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe confirmation dialog uses white text which is not visible on white background. This color cannot by changed by any `Set-PSReadLineOption` or `$PSStyle` variable. The `[Y] Yes` uses light yellow which is barely visible (in fact never noticed it before taking screenshot) and everything else is completely white and therefore invisible to me.\r\n\r\nI propose to add `$PSStyle.Confirmation` options, preferably `Primary/Selected/Default`, `Other`, `Help` and `Text`.\n\n### Expected behavior\n\n```console\n# As rendered\r\n> mkdir test\r\n> '' > test/test.txt\r\n> del test\r\n\r\nConfirm\r\nThe item at /home/dkaszews/Downloads/test has children and the Recurse parameter was not specified. \r\nIf you continue, all children will be removed with the item. Are you sure you want to continue?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"Y\"):\n```\n\n\n### Actual behavior\n\n```console\n# As rendered\r\n> mkdir test\r\n> '' > test/test.txt\r\n> del test\r\n\r\nConfirm\r\nThe item at /home/dkaszews/Downloads/test has children and the Recurse parameter was not specified. \r\nIf you continue, all children will be removed with the item. Are you sure you want to continue?\r\n                                                             [?] Help (default is \"Y\"):\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.3-304-gd02c59addc24e13da3b8ee5e1a8e7aa27e00c745\r\nOS                             Linux 5.15.0-1013-raspi #15-Ubuntu SMP PREEMPT Mon Aug 8 06:33:06 UTC 2022\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\nThe `[Y] Yes` is barely visible as light yellow, all other values except `[?] Help` cannot be seen at all.\r\n\r\n![image](https://user-images.githubusercontent.com/26599495/186485344-2b811311-f650-4ce2-a8fb-5a5b62afc599.png)\r\n\r\nSelecting text reveals it.\r\n\r\n![image](https://user-images.githubusercontent.com/26599495/186485617-077196af-bec6-4e47-bb23-7fe2b12129d7.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I tracked it down to `ConsoleHostUserInterfacePromptForChoice.cs:437`\r\n\r\n```csharp\r\n/// <summary>\r\n/// Guarantee a contrasting color for the prompt...\r\n/// </summary>\r\nprivate ConsoleColor PromptColor\r\n{\r\n    get\r\n    {\r\n        switch (RawUI.BackgroundColor)\r\n        {\r\n            case ConsoleColor.White: return ConsoleColor.Black;\r\n            case ConsoleColor.Cyan: return ConsoleColor.Black;\r\n            case ConsoleColor.DarkYellow: return ConsoleColor.Black;\r\n            case ConsoleColor.Yellow: return ConsoleColor.Black;\r\n            case ConsoleColor.Gray: return ConsoleColor.Black;\r\n            case ConsoleColor.Green: return ConsoleColor.Black;\r\n            default: return ConsoleColor.White;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI guess my `RawUI.BackgroundColor` is not set correctly, how do I change it?",
      "created_at": "2022-08-24T18:37:17Z",
      "updated_at": "2022-08-24T18:37:17Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Eh, found it under `$Host.UI.RawUI`. Yet another place the colors are hidden to add to https://github.com/PowerShell/PowerShell/issues/17886 . Looking at the rest of the values there, it looks like they should be automatically read from whichever terminal you use? I don't think it is possible to do it, especially when connecting over SSH, in a TMUX session, etc.\r\n\r\nPlease just put `PromptColor` and `DefaultPromptColor` in `$PSStyle.Formatting`. I don't want to waste my time hunting every single color setting scattered across hidden settings \ud83e\udee4",
      "created_at": "2022-08-24T18:44:10Z",
      "updated_at": "2022-08-24T18:44:10Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Setting `$Host.UI.RawUI.BackgroundColor = White` does fix the prompt, but causes other visual glitches due to ANSI 'white' being actually light gray and 'BrightWhite' not being a valid `[System]::ConsoleColor`.\r\n\r\n![Screenshot_20220825-190605~2](https://user-images.githubusercontent.com/26599495/186728397-d92a57d2-3f41-440b-a680-784e7d17be48.jpg)\r\n\r\nIn general, I think we should retire all options using `[System]::ConsoleColor` and switch over to ANSI. This will fix such problems and enable more features like 256 and 24bit colors and bold fonts. ",
      "created_at": "2022-08-25T17:11:51Z",
      "updated_at": "2022-08-25T17:15:08Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I tracked it down to `ConsoleHostUserInterfacePromptForChoice.cs:437`\r\n\r\nAnything which uses relies on names of of console colours is going to hit a problem\r\n\r\nThe console defines 16 slots for RGB values and gives them names.  But there is no guarantee that the RGB values will match the names. For PowerShell.exe _in the default console host_ the 6th slot \"Dark magenta\" is  redefine as \"PowerShell Blue\" and the 7th \"Dark yellow\" as ~90% bright grey, and the terminal is told to use those two as background and foreground respectively. (Which we see in host.ui.rawui )\r\n\r\nIn _Windows Terminal_  (and IIRC VS Code)  you can change the background and/or foreground colours and they replace whatever is defined for Slot 0 (conventionally black) and slot 8 (console naming makes this the lighter of two \"grays\".  ANSI naming makes this the darker of two \"whites\". ) \r\n\r\n![image](https://user-images.githubusercontent.com/16209593/186855679-34c89975-1d36-4786-9aa6-645a3f3850b0.png)\r\n\r\nAnything that says \"The background is black, therefore yellow and white give good contrast\" may **fail when the RGB values for different colours are redefined.**  To cope with this I think we need a setting for PromptColor and PromptDefault colour. And the logical thing to do is to put it in PSStyle \r\n\r\n<hr>\r\n\r\nIncidentally an ansi code like  ``` `e[40m ``` for \"Background black\" is NOT RGB 0,0,0 it is \"Console colour 0\" \r\nAnd anything which assumes the ansi codes for black and gray  will give the background and foreground colours will also fail in the old style console host **if** it has been told to use other colours slots e.g. run PowerShell.exe. or copies PowerShell settings to apply to pwsh  (they're in Computer\\HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe)\r\n\r\nBelow I launched pwsh from Windows PowerShell, and you can see black isn't the background, magenta isn't dark magenta, but background blue, and yellow isn't dark yellow but white\r\n![image](https://user-images.githubusercontent.com/16209593/186864358-b7b14687-73b0-4cc3-94fe-be8733bfffd0.png)\r\n\r\nTo work reliably something which wants to use the background and foreground colours needs to get them via $host, when it gets \"DarkMagenta\" it needs to translate that to the right ANSI code. (Which means dealing with console colours using DarkX and X and ANSI using X and BrightX) ",
      "created_at": "2022-08-26T09:09:41Z",
      "updated_at": "2022-08-26T09:09:41Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill Fully agreed with what you say, and\r\n\r\n> Anything that says \"The background is black, therefore yellow and white give good contrast\" may fail when the RGB values for different colours are redefined. To cope with this I think we need a setting for PromptColor and PromptDefault colour. And the logical thing to do is to put it in PSStyle\r\n\r\nis exactly what I would like to implement \ud83d\ude0a",
      "created_at": "2022-08-26T13:33:31Z",
      "updated_at": "2022-08-26T13:33:31Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Started work on it, should be relatively simple, just need to make sure to not confuse string length (includes ANSI escapes) and visual length (does not) when calculating what can fit on screen. Or just drop the wrapping calculations, as I'm not sure what's the point since writing to console wraps text anyways. ",
      "created_at": "2022-08-28T08:34:32Z",
      "updated_at": "2022-08-28T08:34:32Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Can someone assign this issue to me or add some WIP tag, so that it's visible that I'm working on it? Will create a draft PR as soon as possible, but don't want to do it before there is anything reviewable (full of commented out code now).\r\n\r\nWIP, testing assigning caption and message colors, some weird interactions between `WrapToCurrentWindowWidth` (required to break at words and not chars) and ANSI background colors, probably wontfix as most people won't care.\r\n\r\n![image](https://user-images.githubusercontent.com/26599495/187083230-6728841d-21cb-4f07-b2f9-0d7b0f14beb8.png)\r\n",
      "created_at": "2022-08-28T16:04:48Z",
      "updated_at": "2022-08-28T16:04:48Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Got prompt options coloring to work, left with mostly refactor and cleanup. Set of options and default values to be discussed in PR\r\n\r\n![image](https://user-images.githubusercontent.com/26599495/187519294-3b047ce4-eea3-4deb-b9c8-e3677319e218.png)\r\n",
      "created_at": "2022-08-30T18:53:48Z",
      "updated_at": "2022-08-30T18:53:48Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> Can someone assign this issue to me \r\n\r\nDone and I will review the PR when you are happy for it to be reviewed\r\n\r\n",
      "created_at": "2022-09-01T16:09:10Z",
      "updated_at": "2022-09-01T16:09:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "For what it's worth, the `RawUI.ForegroundColor` and `RawUI.BackgroundColor` are not quite the same thing as adding a PromptColor and PromptDefault ...\r\n\r\nI mean, before `$PSStyle` broke everything, those controlled more than just the prompt color, and were supposed to be mapped to whatever color is set as the default foreground and background colors in your terminal, so that PowerShell could render using the _default_ colors.\r\n\r\nIs this really the last existing use (in PowerShell itself) of those color values?\r\n\r\nAny interaction between wrapping and escape sequences is super frustrating. Is this wrapping algorithm not ignoring those invisible characters?",
      "created_at": "2022-11-11T05:31:03Z",
      "updated_at": "2022-11-11T05:33:48Z"
    }
  ],
  "created_at": "2022-08-24T17:36:44Z",
  "number": 17961,
  "state": "open",
  "title": "Prompt colors not configurable, not visible on white background",
  "updated_at": "2022-11-11T05:33:48Z"
}