{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18154",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n**Please review commit by commit.**\r\n\r\nHistorically PowerShell code contains a lot of static constants because of limitations in old .Net APIs. For example, now we have `string.Split(char)` and can use it instead of `string.Split(char[])`.\r\nI had to refactor some methods.\r\n- `Escape()` method now is more short, simple, clear and fast - now we exactly point chars we want to escape.\r\n- GetModuleNameAndVersion() method is refactored a bit. Since all paths have been collected from file system it makes no sense to take into account alternative directory separator.\r\n- PathSearchTrimEnd is removed based on https://github.com/dotnet/runtime/issues/76122#issuecomment-1256977256\r\n(for ex., now we don't remove trail spaces that are valid in file names)\r\n\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-10-27T22:25:42Z",
  "comments": [
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "I suggest splitting `PathSearchTrimEnd` changes.",
      "created_at": "2022-09-26T00:18:57Z",
      "updated_at": "2022-09-26T00:18:57Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "We could avoid some string allocations with the following `IndexOfAny<T>` overloads, available since .NET Core 2.1:\r\n\r\n* [IndexOfAny<T>(ReadOnlySpan<T>, T, T)](https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.indexofany?view=net-6.0#system-memoryextensions-indexofany-1(system-readonlyspan((-0))-0-0)).\r\n* [IndexOfAny<T>(ReadOnlySpan<T>, T, T, T)](https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.indexofany?view=net-6.0#system-memoryextensions-indexofany-1(system-readonlyspan((-0))-0-0-0)).",
      "created_at": "2022-09-26T20:48:02Z",
      "updated_at": "2022-09-28T16:32:40Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "I suggest changes to `CompletionCompleters.NativeCompletionVariableCommands` are split as well.",
      "created_at": "2022-09-29T20:41:39Z",
      "updated_at": "2022-09-29T20:41:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't think it's really worth the changes. \r\n\r\nMy intention was to remove static initializations (not just these) that slow down **startup**. If you don't find it useful, you can close this PR. Sorry for wasting your time.",
      "created_at": "2022-10-04T06:23:12Z",
      "updated_at": "2022-10-04T06:23:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I didn't mean to frustrate you and I absolutely appreciate your intention for starting this work (this is not a simple change and you obviously put lots of effort).\r\n\r\nI do agree with the gist of your idea, and that's why I spent time going through the changes here. But we need some compromises, for example, for `IndexOfAny('\\\\', '/', ':')`, how about we have `Separators.DirectoryOrDrive` to be const string of `\"\\\\/:\"`, and then use it as `IndexOfAny(Separator.DirectoryOrDrive)`? With this, there would be less changes, which is easier for you to change as well as for others to review. I'm not asking for doing this for all existing members in `Separatos`, for those with single character values, I think you are right that we don't need to create a const member for them.\r\n\r\nAlso, it would be less obstacles to get the PR in if there are not semantic changes bundled together, such as the changes to `regex.Escape`. If you do think that's faster, then get the measurement to prove it and open a separate PR for it. Mixing them in one PR makes it harder to push it through.",
      "created_at": "2022-10-04T17:03:48Z",
      "updated_at": "2022-10-04T17:04:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I didn't mean to frustrate you\r\n\r\nI know :-)\r\n\r\n---\r\n\r\nIt's easier if you use the commits you find useful. You can delete the rest. Disagreement about personal preferences is not something worth wasting our time on.",
      "created_at": "2022-10-04T17:27:21Z",
      "updated_at": "2022-10-04T17:27:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Escape and DirectoryOrDrive reverted.",
      "created_at": "2022-10-05T17:32:17Z",
      "updated_at": "2022-10-05T17:32:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Escape was moved to #18230",
      "created_at": "2022-10-06T12:58:39Z",
      "updated_at": "2022-10-06T12:58:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-10-13T14:01:27Z",
      "updated_at": "2022-10-13T14:01:27Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `113` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +50 -63\r\nPercentile : 42.6%\r\n\r\nTotal files changed: 27\r\n\r\nChange summary by file extension:\r\n.cs : +50 -63\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTgxNTQiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTgxNTQiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTgxNTQiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-10-24T23:41:14Z",
      "updated_at": "2022-10-24T23:41:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please merge?",
      "created_at": "2022-10-27T03:10:45Z",
      "updated_at": "2022-10-27T03:10:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks for the reminder!",
      "created_at": "2022-10-27T22:25:54Z",
      "updated_at": "2022-10-27T22:25:54Z"
    }
  ],
  "created_at": "2022-09-24T10:07:07Z",
  "number": 18154,
  "state": "closed",
  "title": "Remove static constants",
  "updated_at": "2022-10-28T03:10:15Z"
}