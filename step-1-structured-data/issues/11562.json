{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11562",
  "author": "DonFrazier-zz",
  "body": "# Steps to reproduce\r\n1) Create a hard link between 2 files\r\n2) run command gci | ? { $_.LinkType } | Select FullName, LinkType, Target from Powershell V5\r\n3) run same command from powershell core.\r\n\r\n```powershell\r\nNew-Item -ItemType HardLink -Path C:\\ -Name cdl.txt -Value C:\\ComponentDetectionLog.txt\r\ngci | ? { $_.LinkType } | Select FullName, LinkType, Target\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\nTarget array returns all linked files.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\nTarget array is empty on Windows PWSH 6.2.3\r\n```\r\n\r\n# Environment data\r\n```\r\n\r\nPS c:> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.145\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.145\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS c:> gci | ? { $_.LinkType } | Select FullName, LinkType, Target\r\n\r\nFullName                     LinkType Target\r\n--------                     -------- ------\r\nC:\\cdl.txt                   HardLink {C:\\ComponentDetectionLog.txt}\r\nC:\\ComponentDetectionLog.txt HardLink {C:\\cdl.txt}\r\n\r\nPowershell Core\r\n\r\nc:> gci | ? { $_.LinkType } | Select FullName, LinkType, Target\r\n\r\nFullName                     LinkType Target\r\n--------                     -------- ------\r\nC:\\cdl.txt                   HardLink {}\r\nC:\\ComponentDetectionLog.txt HardLink {}\r\n\r\nC:> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2020-01-14T12:00:23Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You should use `childrenWithHardlink` format view.\r\nHardlinks was removed from default format output due to performance. See https://github.com/PowerShell/PowerShell/pull/8789",
      "created_at": "2020-01-12T16:41:28Z",
      "updated_at": "2020-01-12T16:41:28Z"
    },
    {
      "author": "DonFrazier-zz",
      "author_association": "NONE",
      "body": "```\r\nC:s> gci | ft -view childrenWithHardLink\r\nft : The view name childrenWithHardLink cannot be found. Specify one of the following Table views and try again: children.\r\n```\r\n\r\nI get the same output with both powershell versions listed in the original issue post.  In what versions should this work?  Or do I need to import something to my session?\r\n\r\nEven if this does work, how would a normal person EVER discover this feature?",
      "created_at": "2020-01-13T03:46:44Z",
      "updated_at": "2020-01-13T03:46:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could try latest 7.0 RC build (we expect the release in month).\r\n\r\n> Even if this does work, how would a normal person EVER discover this feature?\r\n\r\nIt is already documented https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7\r\n\r\nAlso you could open new issue to request tab completion for View parameter.\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem\">Get-ChildItem (Microsoft.PowerShell.Management)</a></strong></div><div>The Get-ChildItem cmdlet gets the items in one or more specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the Recurse parameter to get items in all child containers and use the Depth parameter to limit the number of levels to recurse. Get-ChildItem does not display empty directories. When a Get-ChildItem command includes the Depth or Recurse parameters, empty directories are not included in the output. Locations are exposed to Get-ChildItem by PowerShell providers. A location can be a file system directory, registry hive, or a certificate store. For more information, see about_Providers. </div></blockquote>",
      "created_at": "2020-01-13T04:21:55Z",
      "updated_at": "2020-01-13T04:21:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-01-14T12:00:22Z",
      "updated_at": "2020-01-14T12:00:22Z"
    },
    {
      "author": "psmitt",
      "author_association": "NONE",
      "body": "Not working even with RC2.",
      "created_at": "2020-01-27T10:19:54Z",
      "updated_at": "2020-01-27T10:19:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@psmitt Please add more info that does not work for you.",
      "created_at": "2020-01-27T10:58:42Z",
      "updated_at": "2020-01-27T10:58:42Z"
    },
    {
      "author": "psmitt",
      "author_association": "NONE",
      "body": "I still cannot display Target information for hard links, not even with Format-Table.\r\nHere is to reproduce:\r\nPS C:\\Temp> New-Item -ItemType File test1.txt\r\nPS C:\\Temp> New-Item -ItemType HardLink test2.txt -Value test1.txt\r\nPS C:\\Temp> Get-ChildItem | Format-Table -View childrenWithHardLink # will not display Target\r\nPS C:\\Temp> Get-ChildItem | Format-Table -Property Mode, Name, LinkType, Target # will display empty Target\r\n\r\nQuestion1: how to display hardlink targets?\r\nQuestion2: is there any way in PowerShell to check if two hardlinks target the same file?",
      "created_at": "2020-01-27T11:09:35Z",
      "updated_at": "2020-01-27T11:09:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Target` makes sense only for symbolic links. You will see only mode:\r\n```\r\nla---           1/27/2020  4:32 PM              0 test1.txt\r\nla---           1/27/2020  4:32 PM              0 test2.txt\r\n```",
      "created_at": "2020-01-27T11:42:03Z",
      "updated_at": "2020-01-27T11:42:03Z"
    },
    {
      "author": "psmitt",
      "author_association": "NONE",
      "body": "Please read again the original issue: it is pointing out exactly that hardlink targets are diplayed properly in older versions (even in MS PowerShell), and the question is why that behaviour changed. Is there any way to identify which hardlinks refer to the same file?",
      "created_at": "2020-01-27T11:47:25Z",
      "updated_at": "2020-01-27T11:47:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@psmitt The behavior was changed because (1) performance, (2) portability (Windows and Unix API work different).\r\n\r\n> is there any way in PowerShell to check if two hardlinks target the same file?\r\n\r\nIt is internal API. You can see source code to see how it is implemented starting with `nternal static bool IsHardLink(FileSystemInfo fileInfo)`.",
      "created_at": "2020-01-27T12:04:03Z",
      "updated_at": "2020-01-27T12:04:03Z"
    },
    {
      "author": "DonFrazier-zz",
      "author_association": "NONE",
      "body": "This feels like a breaking change to me.  A very useful feature of PS 5 has been removed.  I will admit the usage is likely lower than other but now I have to find a non-PS way to fix some scripts.  I can see not pulling in hardlinks by default.  But when they are specifically requested it seems like the caller must be willing to pay whatever performance penalty there is.  I'm only a casual *nix user but I seem to recall similar behavior there.\r\n\r\nPlease consider a feature to re-enable this on demand.  Lowest-Common-Denominator should not mean removing useful features just because they are hard to implement across platforms or are perceived as  \"slow.\"  However many hours I have to spend finding a new way, fixing broken scripts will probably never equal whatever time difference it takes to retrieve the data.  It sounds like I would have to discover the issue (already did), find the new parameter (alas!) and save all my scripts anyway.",
      "created_at": "2020-01-27T12:39:56Z",
      "updated_at": "2020-01-27T12:39:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see your point but ... Really we already have dozen of a breaking changes from Windows PowerShell to PowerShell Core. Although the policy is to avoid such changes, product evolution makes them sometimes inevitable.\r\n\r\nThe breaking change already was made and changing Target property behavior/type would again be a breaking change in 3 year old product.\r\nAnd the feature must work in the same way on all supported platforms. NTFS allows easily get all targets for the hardlink. I don't found the same API on Unix, all examples say about full enumerating that is extremely slow. Apparently, therefore, symlinks are more preferable in practice and therefore I prefer current Target property behavior (show symlink target).\r\nThe feature request looks like an edge case otherwise we would have better underlying API support in .Net Core and OS APIs.\r\n\r\nPerhaps @mklement0 has an idea how resolve this. Maybe Windows-only cmdlet like Get-HardLinkPath?\r\n\r\nFor Linux:\r\nhttps://unix.stackexchange.com/questions/398434/why-no-file-name-in-inode-information\r\nhttps://superuser.com/questions/12972/how-can-you-see-the-actual-hard-link-by-ls\r\n\r\nFor NTFS:\r\nhttps://stackoverflow.com/questions/4193309/list-hard-links-of-a-file-in-c\r\nhttps://stackoverflow.com/questions/4510269/c-sharp-count-and-list-hardlink-locations-of-a-file\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfilenamew\r\n\r\n\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/unix/img/apple-touch-icon@2.png?v=32fb07f7ce26\" width=\"48\" align=\"right\"><div>Unix & Linux Stack Exchange</div><div><strong><a href=\"https://unix.stackexchange.com/questions/398434/why-no-file-name-in-inode-information\">Why no file-name in Inode information?</a></strong></div><div>I know that symlinks have a separated inode from the original file and that they only point for the inode containing the data. My question is, where is the hardlink name stored if there's no field ...</div></blockquote>\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/superuser/img/apple-touch-icon@2.png?v=e869e4459439\" width=\"48\" align=\"right\"><div>Super User</div><div><strong><a href=\"https://superuser.com/questions/12972/how-can-you-see-the-actual-hard-link-by-ls\">How can you see the actual hard link by ls?</a></strong></div><div>I run \n\nln /a/A /b/B\r\nI would like to see at the folder a where the file A points to by ls.</div></blockquote>\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/4193309/list-hard-links-of-a-file-in-c\">List Hard Links of a file (in C#)</a></strong></div><div>I want to write a program that shows the files of an other drive with hard links.\nI want to keep both hardlinks consistent in filename and other things so I have to get a function/method where I ca...</div></blockquote>\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/4510269/c-sharp-count-and-list-hardlink-locations-of-a-file\">C# - count and list hardlink locations of a file</a></strong></div><div>I'm currently searching for a C# solution which can read the number of hardlinks of a file and their links locations. I'm thinking of the program link shell extension which can do this by going to ...</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfilenamew\">FindFirstFileNameW function (fileapi.h) - Win32 apps</a></strong></div><div>Creates an enumeration of all the hard links to the specified file. The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.</div></blockquote>",
      "created_at": "2020-01-27T14:08:43Z",
      "updated_at": "2020-01-27T14:08:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "For a workaround, see https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-812567971",
      "created_at": "2021-04-04T23:07:14Z",
      "updated_at": "2021-04-04T23:07:14Z"
    },
    {
      "author": "NickVH-MS",
      "author_association": "NONE",
      "body": "I feel like this really should just work without having to install some other component.",
      "created_at": "2022-10-12T23:52:27Z",
      "updated_at": "2022-10-12T23:52:27Z"
    }
  ],
  "created_at": "2020-01-12T14:44:24Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11562,
  "state": "closed",
  "title": "Powershell Core 6.2.3 does not show Hardlink Target as in previous versions.",
  "updated_at": "2022-10-12T23:52:27Z"
}