{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5904",
  "author": "dronkoff",
  "body": "<!--\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\n10 year ago we said that an extension will change in case of major changes.\r\nhttps://blogs.msdn.microsoft.com/powershell/2007/11/02/ctp-versioning/\r\n\"_PowerShell Scripts continue to use \u201c.PS1\u201d. We will continue to pursue this approach until there is a major change in the CLR or .NET frameworks which force us to go side-by-side. It is at that point that we\u2019ll go from .PS1 to .PS2_\"\r\nLooks like Core release is this change. Especially taking into account that PS Core 6 is not fully compatible with previous versions and not all existent *.ps1 scripts will successfully run on PS Core.\r\nWhat is the reason why we didn't change the extension?",
  "closed_at": "2018-01-18T05:40:44Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".PS2 implies a complete lack of backward compatibility, but PowerShell Core was created in the thought of maximum backward compatibility. Therefore, there is no need for .PS2 - we can execute .PS1 scripts in PowerShell Core.\r\nFrom your link:\r\n>Until then we will stay with .PS1 and everything that runs today will continue to run in new releases. ",
      "created_at": "2018-01-15T12:47:02Z",
      "updated_at": "2018-01-15T12:47:02Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "> everything that runs today will continue to run in new releases\r\n\r\nIt's ironic that the first simple script I tried to run on PS Core 6 failed. It uses [adsi] type accelerator. There are tons of WMI scripts that are still in use even by MS tools, they will fail. Of course they can be rewritten to CIM cmdlets, but it will require some work to do. I don't know much people who use Workflows, but met some customers who really do. So we can not talk about full backward compatibility and that's why I'm asking. \r\nNevertheless, thanks for the answer, I got the message - same extension because almost fully compatible an some breaking changes are not taken into account.\r\n",
      "created_at": "2018-01-15T13:33:16Z",
      "updated_at": "2018-01-15T13:47:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dronkoff That's another question. Yes, we only ported 40% of the cmdlets on Linux and 60% on Windows. Many limitations are related to the fact that not all interfaces are ported in .Net Core. We will be glad to your help and contributions.",
      "created_at": "2018-01-15T13:43:37Z",
      "updated_at": "2018-01-15T13:43:37Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "Sounds like a job offer :))",
      "created_at": "2018-01-15T13:49:18Z",
      "updated_at": "2018-01-15T13:49:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is a wonderful project for soul and mind. :)\r\nAnd MSFT experts always do great contributions!",
      "created_at": "2018-01-15T13:54:46Z",
      "updated_at": "2018-01-15T13:54:46Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I agree as well with @iSazonov. Although the cmdlet support is only a subset at the moment, it is expected that the gap becomes smaller and smaller until eventually PowerShell Core will take over in a few years. Software is all about being agile now, quoting a 10 year old blog is fun but not the right mindset.\r\nA funny story: In 2012, Rob Mensching (the maker of the WiX toolset) blogged [here](http://robmensching.com/blog/posts/2012/12/12/the-wix-toolset-v4.0-begins/) that version 4 is going to release 'in a few weeks' and WiX is still on version 3 in 2018 but they still think version 4 will be out 'soon'...",
      "created_at": "2018-01-15T21:02:56Z",
      "updated_at": "2018-01-15T21:09:42Z"
    },
    {
      "author": "al-ign",
      "author_association": "NONE",
      "body": "> It's ironic that the first simple script I tried to run on PS Core 6 failed. It uses [adsi] type accelerator.\r\n\r\nPlease, do not confuse script and functionality - your _script_ worked, ahem, 'flawlessly', it just called unsupported, on this specific machine, interface.\r\nIf you call some Exchange 2007 scripts on fresh Windows 10 Home machine - the scripts will work fine, but, of course, they will do nothing, because there would be no modules/cmdlets to work with Exchange 2007. I don't think you will blame Win10 PowerShell for failing in this scenario.\r\n\r\n",
      "created_at": "2018-01-17T19:26:08Z",
      "updated_at": "2018-01-17T19:26:08Z"
    }
  ],
  "created_at": "2018-01-15T10:40:50Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 5904,
  "state": "closed",
  "title": "Why script extesion is stille *.ps1 for PS Core 6?",
  "updated_at": "2018-01-18T05:40:44Z"
}