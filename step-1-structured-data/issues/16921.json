{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16921",
  "author": "iRon7",
  "body": "### As a scripter I want to be able to handle sensitive information as confindetial and easy as possible.\r\n\r\nAs defined by Microsoft: [**SecureString shouldn't be used**](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) <sup>(for what?)</sup>:\r\n\r\n> The general approach of dealing with credentials is to avoid them and instead rely on other means to authenticate, such as certificates or Windows authentication.\r\n\r\nThe dilemma is in its name which prentents that it is a ***secure* string** which is apparently not (completely) the case and therefore ends up which solutions that *are not possible* (as above \"*shouldn't be used*\" statement) rather than *what is possible* (and doable). A `HiddenString` implies that it is hidden and therefore also could be revealed. Meaning that there is also no argument against being able to construct it, or in other words: *hide an existing plain text string*.\r\n \r\nThis is also discussed in: [`#12188` Automatically convert SecureString to String in parameter binder](https://github.com/PowerShell/PowerShell/issues/12188) but this request differs in the fact that I am not looking for a ***Secure* String** but a clearer way to simply *hide* information and prevent it from accidentally being written to the console or logs.\r\n\r\nIf a **SecureString** should not be used, what can I do as a PowerShell scripter? I can't just change the world, meaning that I can't easially change the applications that require (or provide) sensitive information in plain text format, but as a scripter, I can take care sensitive information is handled as secure as possible by hiding it as much as possible from start to the end of the script.\r\n\r\nEven [security through obscurity](https://en.wikipedia.org/wiki/Security_through_obscurity) is rejected as secure, in certain situations, it better to hide the key under the doormat (or somewhere else) than just leaving the door open...\r\n\r\nTaken StackOverflow case [Powershell task: Hide not the output but the actual command containing sensitive info in devops logs](https://stackoverflow.com/questions/70043139/powershell-task-hide-not-the-output-but-the-actual-command-containing-sensitive) as an example:\r\nI have tried to address this issue (see also: #16502 [Set-ScheduledTask shouldn't accept a plain text Password](https://github.com/PowerShell/PowerShell/issues/16502)) to Microsoft for month now, but my (potential security) issue is completely ignored.\r\nAnd that is Microsoft, what about all the other (legacy) applications in organizations. I am trying hard, bit I can't just dictate them to change this to  ***certificates or Windows authentication*** as often it is not that feasible and therefore easer said then done.\r\n\r\nAs apposed to a `SecureString`, it would be nice to have a `HiddenString` class similar to this proto type:\r\n\r\n> I have removed the prototype and further worked out the `HiddenString` class idea [here](https://github.com/iRon7/HiddenString)\r\n\r\nWith will give me the possibility to *hide* sensitive information at the entrance (usually a parameter) of a script and *easily* reveal at last moment it needs to be passed on to another application.\r\n\r\nExample:\r\n```PowerShell\r\nfunction MyScript([String]$TaskName, [String]$UserName, [HiddenString]$Password) {\r\n\r\n    Start-Transcript -Path .\\Transcript.txt\r\n    \r\n    Write-Host \"Scheduling $TaskName for $UserName/$Password\" # Write-Log ...\r\n    Set-ScheduledTask -TaskName $TaskName -User $UserName -Password $Password.Reveal()\r\n\r\n    Stop-Transcript\r\n}\r\n```\r\n\r\n**Recommended invocation of `MyScript`:**\r\n\r\n```PowerShell\r\n$SecuredString = Read-Host 'Enter Password' -AsSecuredString\r\nMyScript NotePad.Exe JohnDoe $SecuredString\r\n```\r\n\r\n**Just *hiding* the sensitive information *inside* the `MyScript`:**\r\n\r\n```PowerShell\r\n$String = 'Sensitive Information'\r\nMyScript NotePad.Exe JohnDoe $String\r\n\r\nTranscript started, output file is .\\Transcript.txt\r\nScheduling NotePad.Exe for JohnDoe/HiddenString\r\nTranscript stopped, output file is .\\Transcript.txt\r\n```\r\n\r\nFor passwords (as in this example), keys, secrets, tokens, etc., ([qoute](https://docs.microsoft.com/dotnet/api/system.security.securestring#securestring-operations):)\r\n\r\n> A [SecureString](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0) object should never be constructed from a [String](https://docs.microsoft.com/en-us/dotnet/api/system.string?view=net-6.0), because the sensitive data is already subject to the memory persistence consequences of the immutable [String](https://docs.microsoft.com/en-us/dotnet/api/system.string?view=net-6.0) class. The best way to construct a [SecureString](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0) object is from a character-at-a-time unmanaged source, such as the [Console.ReadKey](https://docs.microsoft.com/en-us/dotnet/api/system.console.readkey?view=net-6.0) method\r\n\r\nbut often there is no other option, therefore it is better to at least **hide** them deeply.\r\nBesides, **this request is *not about securing* items but *hiding* sensitive information** which might include items that are considered private like FQDNs, SIDs IP Addresses or even usernames.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please look .Net proposal https://github.com/dotnet/designs/pull/147",
      "created_at": "2022-02-25T12:58:05Z",
      "updated_at": "2022-02-25T12:58:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If all you want is to _hide_ the data from logs etc, SecureString is likely fine for that usage in many ways. As I understand it, the guidance against using it is from a security standpoint in that it's not memory-safe, actors with access to the machine's memory can exfiltrate the password quite easily. If the goal is simply to hide it from logs and make it a bit more obscure, SecureString is fine as-is.",
      "created_at": "2022-02-25T13:24:34Z",
      "updated_at": "2022-02-25T13:24:34Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@vexx33\r\n\r\n> If the goal is simply to hide it from logs and make it a bit more obscure, SecureString is fine as-is.\r\n\r\nThanks, that means we agree on that.\r\nThe point that I am trying to make  is that (quote) \"*the general purpose of [SecureString](https://docs.microsoft.com/dotnet/api/system.security.securestring) is to avoid having secrets stored in the process memory as plain text*\" which means it will never get an easy and standard constuctor as (quote) \"*a [SecureString](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0) object should never be constructed from a [String](https://docs.microsoft.com/en-us/dotnet/api/system.string?view=net-6.0)*\" and/or get a standard method to reveal the embedded string.\r\nThe purpose of this issue enhancement is to create a standardized `HiddenString` class which differs from the general purpose of a `SecureString` and therefore might better serve a scripter with hiding sensitive informatiion.",
      "created_at": "2022-02-25T15:07:14Z",
      "updated_at": "2022-02-25T15:24:03Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@iSazonov,\r\n\r\n> Please look .Net proposal [dotnet/designs#147](https://github.com/dotnet/designs/pull/147)\r\n\r\nThanks for linking this, (I need to read this all a few times) but having a quick look at it, I get the impression its about a *more* (ultimate) secured solution (which is also good to have) where I am aiming for just *easily* hiding information in a script (this means that there is also a different need for PowerShell scripting than all other programming languages that depend on .Net. This shows from the resistance of the PowerShell community to completely deplete the `SecureString` class). From a scripting perspective: what good will it do to use all kind of security measurements (with tokens etc.) as in the end I have to send a plain text password to `Set-ScheduledTask` or any other application???",
      "created_at": "2022-02-25T17:28:35Z",
      "updated_at": "2022-02-25T18:31:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 I tried to express my concerns in that discussion. Obviously this is a big problem for them (.Net team). Technically they already have a solution. I can assume that they are now trying to come to a consensus throughout MSFT since this will be a sensitive change (for PowerShell as well).\r\nI hope that their solution will work for PowerShell as well. ",
      "created_at": "2022-02-25T20:30:16Z",
      "updated_at": "2022-02-25T20:30:16Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I have removed the prototype and further worked out the `HiddenString` class idea [here](https://github.com/iRon7/HiddenString)\r\n\r\nAnother thing to mention is that both `SecureString` class and `HiddenString` class concepts have ways to encrypt and decrypt the embedded string (which -*against all assumptions*- shouldn't be used). For a scripter, the `SecureString` string conversions are quiet cumbersome but that doesn't change the fact that they are simply available and used anyways (as they are often required by the entity that uses the script) where the `HiddenString` approach has easy string conversions but pushing the responsibly of the usage of the (insecure) string conversion to the entity that actually supplies or requires the plain text strings by returning automated warnings:\r\n\r\n```PowerShell\r\nfunction Logon ([String]$Username, [HiddenString]$HiddenPassword) {\r\n    Use-Credential $Username $HiddenPassword.Reveal() # 3rd party requirement\r\n}\r\n$HiddenPassword = [HiddenString]'P@ssW0rd'\r\nWARNING: For better obscurity, use a hidden or secure string for input.\r\nLogon 'MyName' $HiddenPassword\r\nWARNING: For better obscurity, use a secure string output.\r\n```\r\n\r\nCorrect usage (prevent warnings):\r\n```PowerShell\r\nfunction Logon ([String]$Username, [HiddenString]$HiddenPassword) {\r\n    $Credential = New-Object System.Management.Automation.PSCredential ('UserName', $HiddenPassword)\r\n}\r\n$HiddenPassword = [HiddenString](Read-Host -Prompt 'Enter your password' -AsSecureString)\r\nLogon 'MyName' $HiddenPassword\r\n```",
      "created_at": "2022-04-08T14:18:57Z",
      "updated_at": "2022-04-08T14:18:57Z"
    }
  ],
  "created_at": "2022-02-25T10:25:51Z",
  "number": 16921,
  "state": "open",
  "title": "Add `[HiddenString]` Class",
  "updated_at": "2022-04-08T14:18:57Z"
}