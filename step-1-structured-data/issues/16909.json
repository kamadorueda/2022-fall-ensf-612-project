{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16909",
  "author": "scriptingstudio",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nWhat value will a variable get in expression like this?\r\n```powershell\r\n$var1 = if (1 -eq 2) {'value'} # $null?\r\n$var1 -eq $null\r\nTrue\r\n```\r\n### Test\r\n```powershell\r\n# implicit initialization\r\n$var1 = if (1 -eq 2) {'value'}\r\n$var2 = if (1 -eq 2) {'value'}\r\n$var1,$var2 # output: none\r\n\r\n$var1,$var2,'1111' # output: 1111\r\n1111\r\n\r\n$var1,$var2,'1111' | Where-Object {$_} # output: none\r\n\r\n$var1,2222,$var2,'1111' | Where-Object {$_} # output: 2222\r\n2222\r\n\r\n2222,$var1,$var2,'1111' | Where-Object {$_} # output: 2222\r\n2222\r\n\r\n# workaround: break a \"chain\"\r\n\"$var1\",$var2,'1111' | Where-Object {$_} # output: 1111\r\n1111\r\n2222,\"$var1\",$var2,'1111' | Where-Object {$_} # output: 2222 1111\r\n2222\r\n1111\r\n\"$var1\",2222,$var2,'1111' | Where-Object {$_} # output: 2222 1111\r\n2222\r\n1111\r\n\r\n# explicit initialization\r\nremove-variable var1,var2\r\n$var1 = if (1 -eq 2) {'value'} else {$null}\r\n$var2 = if (1 -eq 2) {'value'} else {$null}\r\n$var1,$var2,'1111' | Where-Object {$_} # output: 1111\r\n1111\r\n2222,$var1,$var2,'1111' | Where-Object {$_} # output: 2222 1111\r\n2222\r\n1111\r\n```\r\n\r\nIn both cases of assignment the value is `$null` but a pipeline works differently.\r\nIs it a bug or feature?\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\n$var1,$var2,'1111' | Where-Object {$_}\r\n1111\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n$var1,$var2,'1111' | Where-Object {$_} # output: none\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nnone\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-03-01T20:00:41Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "When a variable is created and no value is assigned, it's not technically $null here, it's the `[AutomationNull]::Value`. I'm not sure if this is by design or not, but it's an interesting case.\r\n\r\n@daxian-dbw might wanna give this a look over, it's a bit of an edge case but still feasibly something folks can run into from time to time.",
      "created_at": "2022-02-23T17:32:03Z",
      "updated_at": "2022-02-23T17:32:03Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Interestingly, there are no issues with undefinded variables\r\n```powershell\r\n$v11111111,$v2222222,1111 | Where-Object {$_}\r\n1111\r\n```",
      "created_at": "2022-02-23T17:36:46Z",
      "updated_at": "2022-02-23T17:36:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep. Confusingly, variables that don't exist create a \"true\" `$null` value when accessed, whereas initialised variables that don't have a valid value are the automationnull.\r\n\r\nI would be inclined to say we should have the latter _also_ be initialised to `$null` instead of persisting the automationnull value (which primarily exists for internal engine pipeline implementation reasons anyway). Unsure if that would be likely to break things, but it would make the experience more consistent.",
      "created_at": "2022-02-23T17:38:34Z",
      "updated_at": "2022-02-23T17:38:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we already have/had an issue like that.",
      "created_at": "2022-02-23T18:05:44Z",
      "updated_at": "2022-02-23T18:05:44Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "After additional investigation of `AutomationNull`  I have found the explanation of empty null\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null?view=powershell-7.2#empty-null\r\nTurns out this is by design but it is confusing and is breaking pipeline.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null\">Everything you wanted to know about $null - PowerShell</a></strong></div><div>The PowerShell $null often appears to be simple but it has a lot of nuances. Let's take a close look at $null so you know what happens when you unexpectedly run into a null value.</div></blockquote>",
      "created_at": "2022-02-23T19:02:10Z",
      "updated_at": "2022-02-23T19:02:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Turns out this is by design but it is confusing and is breaking pipeline.\r\n\r\nIf I remember right we already discussed this in the repo and changing this would be more breaking and confusing. ",
      "created_at": "2022-02-24T03:53:15Z",
      "updated_at": "2022-02-24T03:53:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Can you point us to the discussion about this issue (or a similar issue)?",
      "created_at": "2022-02-24T17:58:18Z",
      "updated_at": "2022-02-24T17:58:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov Can you point us to the discussion about this issue (or a similar issue)?\r\n\r\nOh, pity my AI :-)\r\n\r\nI think that #9997 was the grandest discussion. With PowerShell Committee consideration :-)",
      "created_at": "2022-02-24T18:08:49Z",
      "updated_at": "2022-02-24T18:08:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That issue is a mite different, though related for sure.",
      "created_at": "2022-02-24T20:29:37Z",
      "updated_at": "2022-02-24T20:29:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #14920",
      "created_at": "2022-02-25T03:31:19Z",
      "updated_at": "2022-02-25T03:31:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-03-01T20:00:40Z",
      "updated_at": "2022-03-01T20:00:40Z"
    }
  ],
  "created_at": "2022-02-23T16:48:33Z",
  "labels": [
    "Resolution-Duplicate",
    "WG-Engine"
  ],
  "number": 16909,
  "state": "closed",
  "title": "[Issue-question] Two consecutive empty variables break a pipeline (Strange pipeline behavior)",
  "updated_at": "2022-03-01T20:00:41Z"
}