{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7436",
  "author": "chriskuech",
  "body": "\"JSON with Comments\" with the `jsonc` file extension is a natively supported file format in VS Code.  JSONC adds JS-style comments to JSON files.  `ConvertFrom-Json` currently does not support parsing JSONC strings.  JSONC support could be added through either a `-Comments` switch or by default.  \r\n\r\n### Background\r\nAzure Resource Manager PowerShell and Azure Resource Manager templates are a critical component of the Azure ecosystem; many templates provided by Azure are large and complicated JSON files with over 1000 lines.  Azure Resource Manager PowerShell cmdlets currently support JSONC templates, but cannot be used in conjunction with custom PowerShell validation due to the lack of JSONC support in `ConvertFrom-Json`\r\n",
  "closed_at": "2019-02-26T03:43:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @markekraus ",
      "created_at": "2018-08-03T06:24:44Z",
      "updated_at": "2018-08-03T06:24:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@chriskuech Can you provide some example JSON, example PowerShell code, what you expect, and what you currently see?\r\n\r\nNewtonSoft supports working with JSON comments but has 2 modes: ignore and load. Though, with how the cmdlets currently operate, it may not be possible to make use of that.",
      "created_at": "2018-08-03T12:46:52Z",
      "updated_at": "2018-08-03T12:46:52Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "### Working base case\r\n```PowerShell\r\n\"{`\"hello`\": `\"world`\", `n`\"a`\": 2}\" | ConvertFrom-Json\r\n```\r\n\r\n### Single-line comment\r\n\r\n```PowerShell\r\n\"{`\"hello`\": `\"world`\", // a common example `n`\"a`\": 2}\" | ConvertFrom-Json\r\n```\r\n```\r\nConvertFrom-Json : Invalid object passed in, ':' or '}' expected. (20): {\"hello\": \"world\", // a common example\r\n\"a\": 2}\r\nAt line:1 char:60\r\n+ ... llo`\": `\"world`\", // a common example `n`\"a`\": 2}\" | ConvertFrom-Json\r\n+                                                          ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-Json], ArgumentException\r\n    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n```\r\n\r\n### Multi-line comment\r\n```PowerShell\r\n\"{`\"hello`\": `\"world`\", /* comment test */ `n`\"a`\": 2}\" | ConvertFrom-Json\r\n```\r\n```\r\nConvertFrom-Json : Invalid object passed in, ':' or '}' expected. (20): {\"hello\": \"world\", /* comment test */\r\n\"a\": 2}\r\nAt line:1 char:59\r\n+ ... ello`\": `\"world`\", /* comment test */ `n`\"a`\": 2}\" | ConvertFrom-Json\r\n+                                                          ~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-Json], ArgumentException\r\n    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n```\r\n\r\n### Expectation\r\nComments are ignored and only the value is returned\r\n```\r\nhello a\r\n----- -\r\nworld 2\r\n```\r\n",
      "created_at": "2018-08-03T13:35:17Z",
      "updated_at": "2018-08-03T13:35:17Z"
    },
    {
      "author": "johlju",
      "author_association": "NONE",
      "body": "This would be a great addition to an already well used cmdlet, able to import a .jsonc file and convert it to an object as usually. \r\n\r\n```powershell\r\n'{\r\n    // Comment\r\n    \"property1\": \"value1\"\r\n}' | ConvertFrom-Json\r\n```\r\n\r\nTo use `ConvertFrom-Json` now, the file first needs to loaded and then be stripped from comments.",
      "created_at": "2018-08-20T12:12:21Z",
      "updated_at": "2018-08-20T12:13:22Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "One argument against supporting JSON comments is that they are not RFC defined. That makes it difficult to write code that supports something that is not well defined. The general guidance is to not use comments in JSON that are not valid JSON. Instead, adding a metadata object or a `\"_comment\"` property is recommended. \r\n\r\nIf we did support this, we would not be able to include it in the default operation of `ConvertFrom-Json` until comments for JSON were RFC-backed. It would require a Switch of some kind. `-SkipComments` or something. That is because we need to reserve the default operation of the cmdlet for RFC compliance. If a later RFC implements comments as beginning with `#`, for example.\r\n\r\nAlso, what do we do with the comment data? Nothing? Apply it as a property on the object it comments?",
      "created_at": "2018-08-20T12:51:15Z",
      "updated_at": "2018-08-20T23:08:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe delegate this to Newton.Json? Seem the library is a standard by default.",
      "created_at": "2018-08-20T13:16:46Z",
      "updated_at": "2018-08-20T13:16:46Z"
    },
    {
      "author": "johlju",
      "author_association": "NONE",
      "body": "@markekraus I would say make the use of comments opt-in. Default is today, it will fail parsing the file. If using `-AllowComments` then it can parse the file (using non-RFC backed way). It would simplify when it is RFC backed. Then the `-AllowComments` would be obsolete, and the default is to be able to parse both.\r\n\r\nI suggest we do nothing with comments, the comments are comments for the jsonc file, not part of the object or data, unless and RFC say differently in the future.",
      "created_at": "2018-08-20T13:31:52Z",
      "updated_at": "2018-08-20T13:31:52Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Delegating to Newtonsoft is a technical implementation, I'm more concerned about design at this point. I think supporting jsonc probably deserves a PowerShell-RFC.",
      "created_at": "2018-08-20T23:12:19Z",
      "updated_at": "2018-08-20T23:12:19Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "For the use case I mentioned, using metadata objects and `\"_comment\"` properties would not suffice, as it would break conformity with the external schema.",
      "created_at": "2018-08-21T03:41:59Z",
      "updated_at": "2018-08-21T03:41:59Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@chriskuech I understand. I'm just pointing out that JSONC is not an RFC backed spec and as such the general guidance is to either not use it or to add JSON compliant comments and metadata where possible. And I'm only establishing that as a reason why it should not be included in the default behavior of the cmdlet.",
      "created_at": "2018-08-21T12:44:27Z",
      "updated_at": "2018-08-21T12:44:27Z"
    },
    {
      "author": "erictorbenson",
      "author_association": "NONE",
      "body": "I think @johlju has the right idea about adding an \"-AllowComments\" switch. That way the cmdlet defaults to RFC-compliant behavior...unless someone wants to write a new RFC? :-)\r\n\r\nOne very important argument in favor of supporting comments is the Visual Studio \"Azure Resource Group\" sample project. The PowerShell wrapper that uploads the artifacts to Azure Storage and executes the deployment fails to run when one of the templates or parameters has a comment in it. I stripped out all the comments from the file manually and everything was fine -- with them there, the error that @chriskuech received is what stops the deployment. If I had an \"-AllowComments\" switch, I could just modify the wrapper script and there would be no problem.\r\n\r\nARM templates can become very confusing and stretch to thousands of lines, and not everyone is 100% dedicated to automated pipeline-based deployment yet. Putting a set of comments in to clearly mark what needs to be modified by a human reduces the chance for error.",
      "created_at": "2018-09-14T16:05:35Z",
      "updated_at": "2018-09-14T16:05:35Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, this seems very useful to me. `-AllowComments` is probably the way to go (for the reasons @markekraus pointed out). ",
      "created_at": "2019-02-26T00:54:56Z",
      "updated_at": "2019-02-26T00:54:56Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Comments are allowed by default\r\n```powershell\r\n'\"test\" /*test*/' | convertfrom-json\r\n```\r\n>test\r\n\r\n```powershell\r\n'\"test\" //test' | convertfrom-json\r\n```\r\n>test\r\n\r\n![image](https://user-images.githubusercontent.com/10873629/53381820-e7ae2180-3926-11e9-9dc2-3e1ae3fe7ed6.png)\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.3\r\nPSEdition                      Core\r\nGitCommitId                    6.1.3\r\nOS                             Darwin 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RE...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2019-02-26T01:55:37Z",
      "updated_at": "2019-02-26T02:03:50Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I have validated on PowerShell Core 6.1.3 on Windows:\r\n\r\nSingle line comment:\r\n\r\n```PowerShell\r\nPS> \"{`\"hello`\": `\"world`\", // a common example `n`\"a`\": 2}\" | ConvertFrom-Json                                                                                                                                                              \r\nhello a\r\n----- -\r\nworld 2\r\n```\r\n\r\nMulti-line comment:\r\n\r\n```PowerShell\r\nPS> \"{`\"hello`\": `\"world`\", /* comment test */ `n`\"a`\": 2}\" | ConvertFrom-Json                                                                                                                                                               \r\nhello a\r\n----- -\r\nworld 2\r\n```\r\n```PowerShell\r\nPS> $PSVersionTable                                                                                                                                                                                                                          \r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.3\r\nPSEdition                      Core\r\nGitCommitId                    6.1.3\r\nOS                             Microsoft Windows 10.0.18845\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
      "created_at": "2019-02-26T02:03:15Z",
      "updated_at": "2019-02-26T02:03:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "awesome. It has probably been like this since 6.0.0 and we just never validated the premise that they didn't work in Core.",
      "created_at": "2019-02-26T03:32:55Z",
      "updated_at": "2019-02-26T03:32:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Verified with @chriskuech \t the question was answered.",
      "created_at": "2019-02-26T03:43:42Z",
      "updated_at": "2019-02-26T03:43:42Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, I think the tag `7.0-consider` is no longer needed.  Seems this is already implemented.",
      "created_at": "2019-04-30T20:33:43Z",
      "updated_at": "2019-04-30T20:33:43Z"
    }
  ],
  "created_at": "2018-08-02T16:50:27Z",
  "number": 7436,
  "state": "closed",
  "title": "Add `.jsonc` support to `ConvertFrom-Json`",
  "updated_at": "2019-04-30T21:47:56Z"
}