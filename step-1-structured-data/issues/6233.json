{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6233",
  "author": "CallmeJoeBob",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nDescription\r\n------------------\r\nThis issue is caused by a mismatch in TLS certification. Windows Powershell ships with version 1 of TLS, while Github requires version 1.2.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nWhen building PowerShell, run the Start-PSBootstrap script\r\n```\r\nPS C:> Start-PSBootstrap\r\nInstalling PowerShell build dependencies\r\ndotnet is already installed.  Skipping installation.\r\npwsh.exe not found. Install latest PowerShell Core release and add it to Path\r\nVERBOSE: Destination: C:\\Users\\joelj\\AppData\\Local\\Microsoft\\powershell\r\nVERBOSE: About to download package from\r\n'https://github.com/PowerShell/PowerShell/releases/download/v6.0.1/PowerShell-6.0.1-win-x64.zip'\r\nInvoke-WebRequest : The request was aborted: Could not create SSL/TLS secure channel.\r\nAt D:\\HackIllinois2018\\Powershell\\PowerShell\\tools\\install-powershell.ps1:139 char:9\r\n+         Invoke-WebRequest -Uri $downloadURL -OutFile $packagePath\r\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc\r\n   eption\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nScript is able to establish a secure channel that matches default Windows certificates\r\n\r\nActual behavior\r\n---------------\r\n\r\n\r\nError is returned: The request was aborted: could not create SSL/TLS secure channel.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.248\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.248\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2018-02-24T19:01:38Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Our first issue filled as part of **Hackillinois2018**! \ud83c\udf89 ",
      "created_at": "2018-02-24T06:33:26Z",
      "updated_at": "2018-02-24T06:33:26Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "workaround:\r\n```\r\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n```",
      "created_at": "2018-02-24T08:06:05Z",
      "updated_at": "2018-02-24T08:06:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In Powershell Core we already have `Invoke-WebRequest -SslProtocol Tls12`. I don't remember - maybe it is default. /cc @markekraus \r\nI don't see the problem if pwsh was installed - we require install pwsh to build.\r\nSo I believe we can close the Issue.",
      "created_at": "2018-02-24T15:48:21Z",
      "updated_at": "2018-02-24T15:48:21Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> I don't see the problem if pwsh was installed - we require install pwsh to build.\r\n\r\nit should work on windows powershell - this is what used for bootstrapping. There is no requirement to have pwsh for bootstrapping. Fix is on the way.",
      "created_at": "2018-02-24T18:23:48Z",
      "updated_at": "2018-02-24T18:24:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "bad workaround, rushed PR. Please don't do this kind of thing.\r\n\r\n```powershell\r\n[Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12 -bor [Net.SecurityProtocolType]::Tls11\r\n````\r\n\r\nBetter workaround, but still rubs me the wrong way.",
      "created_at": "2018-02-24T19:36:39Z",
      "updated_at": "2018-02-24T19:36:39Z"
    }
  ],
  "created_at": "2018-02-24T06:31:55Z",
  "number": 6233,
  "state": "closed",
  "title": "Building PowerShell in Windows results in a mismatch in security certificates",
  "updated_at": "2018-03-24T17:52:52Z"
}