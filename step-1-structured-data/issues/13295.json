{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13295",
  "author": "ThomasNieto",
  "body": "## Summary of the new feature/enhancement\r\n\r\nPowerShell has a rich formatting and output system that allows for multiple views to be defined for a given type. This is a powerful but under utilized feature due to view name discovery. The user is unaware of what views are available for a given type. There is `Get-FormatData` added in PSv3 to get imported format views but is a lot of work to just find out what view names exist in the system. To solve the discovery problem and increase usage of the diverse format views available, an argument completer should be added to the `Format-*` command `-View` parameter.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nThis is a proof of concept for `Format-Table -View` parameter. It works when using the `-InputObject` parameter outside of the pipleline. Not sure if there is a way to get `$fakeBoundParameters` to be defined when using the pipleline. (If this needs to be a new issue I can open one)\r\n\r\n```powershell\r\n$s = {\r\n\tparam ($commandName,$parameterName,$wordToComplete,$commandAst,$fakeBoundParameters)\r\n\t\r\n\t$views = Get-FormatData -TypeName (@($fakeBoundParameters['InputObject'])[0].PSTypeNames -split '`r`n') |\r\n\tSelect-Object -ExpandProperty FormatViewDefinition |\r\n\tWhere-Object { $_.Control.GetType().Name -eq 'TableControl'} |\r\n\tSelect-Object -ExpandProperty Name\r\n\t\r\n\tforeach ($view in $views) {\r\n\t\tNew-Object -Type System.Management.Automation.CompletionResult -ArgumentList $view, $view, \"ParameterValue\", $view\r\n\t}\r\n}\r\n\r\nRegister-ArgumentCompleter -CommandName Format-Table -ParameterName View -ScriptBlock $s\r\n```\r\n",
  "closed_at": "2021-07-15T19:04:02Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We already do pipeline input type-aware completions for things like `Select-Object -Property <tab>` if I recall correctly, so there is logic already built into the argument completion logic somewhere.\r\n\r\nThis could use some of that and expand it to the Format-Table / Format-List cmdlets.",
      "created_at": "2020-07-28T05:01:53Z",
      "updated_at": "2020-07-28T05:01:53Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 You're right that about `Select-Object -Property`. `Format-* -Property` has it as well. Not sure where the logic is since there isn't an argument completer attribute for it.",
      "created_at": "2020-07-28T05:09:47Z",
      "updated_at": "2020-07-28T05:09:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It'll be buried in some of the CompletionCompleters.cs code paths, I imagine. There's a bunch of internal logic coded for that that we'd want to hook into / add onto I'd imagine.",
      "created_at": "2020-07-28T06:13:53Z",
      "updated_at": "2020-07-28T06:13:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah as @vexx32 said all that logic is currently built directly into the completions logic.  Instead of adding more to that (especially for an edge case like `View`) I'd love to see a public interface for this.  Like `[PSTypeName[]] $inferredInputType` added to argument completers maybe.",
      "created_at": "2020-07-28T11:26:01Z",
      "updated_at": "2020-07-28T11:26:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Fixed via https://github.com/PowerShell/PowerShell/pull/14513",
      "created_at": "2021-07-15T19:04:02Z",
      "updated_at": "2021-07-15T19:04:02Z"
    }
  ],
  "created_at": "2020-07-28T04:29:16Z",
  "number": 13295,
  "state": "closed",
  "title": "Feature Request: Format-* View parameter argument completers",
  "updated_at": "2021-07-15T19:04:11Z"
}