{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11975",
  "author": "FireInWinter",
  "body": "Version: PowerShell 7.0rc3\r\nOS: AWS Linux\r\n\r\nCurrently Send-MailMessage is marked obsolete, but I don't think it should be.  The API behind it should be replaced eventually, but the site that gives the reasons why it should be used, also include a reason what it would still be useful for.\r\n\r\nhttps://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md\r\n> It's great for one off emails from tools, but doesn't scale to modern requirements of the protocol.\r\n\r\nMy reasoning is that the majority of use of Send-MailMessage is exactly the \"one off emails from tools\" they mention.  If someone has some statistics, that would be great, but my guess is that 95% of use of Send-MailMessage would fall under that category.  It would be obsolete if someone is using it for sending millions of emails, but I doubt if there are many people doing that.\r\n\r\nI would suggest having it marked in some way in the source code, but let's not bug users about a problem that isn't a real problem.",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "For simple administrative things, like emailing the results of a PowerShell script run via the Task Scheduler, this is an excellent cmdlet. It does what it needs to - and sends mail. I accept the argument that it may not support the latest and greatest protocols nor is it scalable. But for simple one-off tasks, it works.\r\n\r\nIf it is to be removed, then there should be a replacement that enables a PowerShell script to send an email.",
      "created_at": "2020-02-29T17:25:07Z",
      "updated_at": "2020-02-29T17:25:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Agreed. I think the deprecation notice should be prominently displayed in the help summary and a brief comment about it including a link to the .NET Core deprecation notice for the related API should be included in the full help description and/or related links/notes.\r\n\r\nHaving it always emit a warning is primarily an annoyance to most folks who're going to be using it regardless, and doesn't add a significant degree of value here.",
      "created_at": "2020-02-29T20:43:14Z",
      "updated_at": "2020-02-29T20:43:14Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "If any cmdlet has to issue warning message then it should be actionable. What action can the user take? Just saying this is 'old' is not at all helpful.\r\n\r\n What is the alternative to this cmdlet? If an IT pro wants to send a simple email how can they do so? ",
      "created_at": "2020-03-01T10:09:04Z",
      "updated_at": "2020-03-01T10:09:04Z"
    },
    {
      "author": "user8446",
      "author_association": "NONE",
      "body": "The replacement is [MailKit](https://github.com/jstedfast/MailKit). If you want this wrapped up in a cmdlet, use [Mailozaurr module](https://github.com/EvotecIT/Mailozaurr) available in the [PS Gallery](https://www.powershellgallery.com/packages/Mailozaurr/0.0.9)",
      "created_at": "2020-08-28T03:08:44Z",
      "updated_at": "2020-08-28T15:40:44Z"
    },
    {
      "author": "martin9700",
      "author_association": "NONE",
      "body": "Why would you obsolete the cmdlet? It just seems like an odd approach to the problem. Instead of obsoleting one of the most used cmdlet's in PowerShell I have a weird suggestion:  Why not just fix it? \r\n\r\nStart a branch, re-write it from the ground up.  Wouldn't the fixes mostly be in the background?  On the surface at least, seems like you might not even blow up every script that uses it \ud83e\udd37\u200d\u2642\ufe0f",
      "created_at": "2020-08-28T11:13:22Z",
      "updated_at": "2020-08-28T11:13:22Z"
    },
    {
      "author": "user8446",
      "author_association": "NONE",
      "body": "I agree. Apparently the PS committee hasn't completely decided to not upgrade it, just wants to see it in in a separate module first and will decide later. See: https://github.com/PowerShell/PowerShell/pull/10246",
      "created_at": "2020-08-28T15:44:43Z",
      "updated_at": "2020-08-28T15:44:43Z"
    },
    {
      "author": "EchoApeiron",
      "author_association": "NONE",
      "body": "There is another alternative native to Powershell, but requires using .NET objects. Credit to these writers I used this to store my credentials securely, but this is a better method and I provide a code snippet as well to help: \r\n\r\n[Powershell: How to encrypt and store credentials securely for use with automation scripts](https://interworks.com/blog/trhymer/2013/07/08/powershell-how-encrypt-and-store-credentials-securely-use-automation-scripts/)\r\n\r\n```\r\n$userName = \"user@domain.com\"\r\n$password = Get-Content .\\encrypted_password.txt | ConvertTo-SecureString\r\n$credentials = New-Object System.Management.Automation.PsCredential($userName, $password)\r\n# SMTP Variables \r\n$emailFrom = \"info@domain.com\"\r\n$emailTo = \"user@remote-domain.com\"\r\n$subject = \"Test\"\r\n$body = \"Some test message.\" \r\n$SMTPServer = \"smtp.domain.com\"\r\n$SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, 587)\r\n$SMTPClient.EnableSsl = $true\r\n$SMTPClient.Credentials = $credentials\r\n$SMTPClient.Send($emailFrom, $emailTo, $subject, $body)\r\n```\r\n\r\n",
      "created_at": "2020-10-27T15:04:37Z",
      "updated_at": "2020-10-27T15:05:56Z"
    },
    {
      "author": "MWRobertson",
      "author_association": "NONE",
      "body": "@EchoApeiron , I had the same thought but just confirmed with someone on the PowerShell team that the Net.Mail.SmtpClient object is what's running behind the scenes of Send-MailMessage, and _that_ is what is actually marked for deprecation, so this workaround will also be obsolete. ",
      "created_at": "2020-11-19T21:34:38Z",
      "updated_at": "2020-11-19T21:34:38Z"
    }
  ],
  "created_at": "2020-02-28T17:33:52Z",
  "number": 11975,
  "state": "open",
  "title": "Should Send-MailMessage be marked obsolete",
  "updated_at": "2020-11-19T21:34:38Z"
}