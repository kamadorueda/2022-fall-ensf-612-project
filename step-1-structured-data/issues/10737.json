{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10737",
  "author": "Kriegel",
  "body": "PowerShell has the Verbose, Warning, Error, Information and Debug Streams.\r\n\r\nThis Streams are only available for Logging puposes over redirection (see: [about_redirection](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-6)).\r\n\r\nWe can merge the streams into the success stream and distinguish between the origin streams by the data type of each pipeline object.\r\nThats very fine because we can filter the Output by Type.\r\n\r\nBut do this you have to to enclose the whole script in curly braces AND do the Redirection AND Filter the Output.\r\nThat is ugly, cumbersome and unhandy.\r\nSee Example in pseudo code:\r\n\r\n```powershell\r\n& {\r\n    Write-Output good\r\n    Write-Error bad\r\n    Write-Warning problematic\r\n    Write-Verbose palaver -Verbose\r\n    Write-Information NotImportand -InformationAction Continue\r\n\r\n} *>&1 | ForEach-Object {\r\n  \r\n    switch ($_.GetType().FullName) {\r\n\r\n        'System.Management.Automation.ErrorRecord' { Write-ErrLog $_; break }\r\n\r\n        'System.Management.Automation.WarningRecord' { Write-WarnLog $_; break }\r\n\r\n        'System.Management.Automation.VerboseRecord'  { Write-VerboseLog $_; break }\r\n\r\n        'System.Management.Automation.InformationRecord' { Write-InfoLog $_ ; break }\r\n\r\n        default {$_}\r\n    }\r\n}\r\n```\r\n   \r\nOr to access the PSDataStreams from the System.Management.Automation.PowerShell class, the user has to run his script inside a new instance of it.\r\nSee Example here #7477 \r\neven if it runs allready inside an pwsh.exe or other PowerShell host. (what a nonsense...)\r\n\r\nTo enable the PowerShell Users to write their own Logging frameworks, we have to expose all the Main Pipipeline Streams to the enduser. (except the Progress Stream)\r\n\r\nIdially like the *>? Operator but inside an advanced Function to handle the filtering inside the function.\r\n\r\nOr expose the Main Pipipeline Streams trough the Host as PSDataStreams Type, so that the user can subscribe to the DataAdded events.\r\n\r\nI heared romourus tha such exist in:\r\nSystem.Management.Automation.Internal.Host.InternalHostUserInterface\r\nas an internal filed named _informationalBuffers ;-))\r\n\r\nFor the [PowerShell 7 Roadmap](https://devblogs.microsoft.com/powershell/powershell-7-road-map/) an new PowerShell Logging is advertised.\r\nI have looked in the following PowerShell Version for a Module, Cmdlets or Providers that  will do the job. Found NOTHING..... \r\nPSVersion                      7.0.0-preview.4\r\nPSEdition                      Core\r\nOS                             Microsoft Windows 10.0.16299\r\n\r\nDoes anybody has a hint, where to look or to work on?\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-10-08T19:39:01Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 10737,
  "state": "open",
  "title": "Add Userdriven Event Logging capability to PowerShell ",
  "updated_at": "2019-10-15T14:24:34Z"
}