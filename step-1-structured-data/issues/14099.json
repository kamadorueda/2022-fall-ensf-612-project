{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14099",
  "author": "martingbrown",
  "body": "I was looking at a [stack overflow question](https://stackoverflow.com/questions/64844969/powershell-exe-start-process-about-when-using-the-verb-option#64846548). It looked like it should have been simple to fix, but alas it wasn't.\r\n\r\n# Steps to reproduce\r\n\r\nI have a TestEnv.cmd file that looks like this:\r\n\r\n```\r\n@echo off\r\n\r\ncd %~dp0%\r\necho Hello > out.txt\r\necho %1 >> out.txt\r\necho %2 >> out.txt\r\necho %3 >> out.txt\r\ndate /T >> out.txt\r\ntime /T >> out.txt\r\n```\r\n\r\nI'm trying to run this from PowerShell using `Start-Process` like this:\r\n\r\n```\r\nStart-Process -Verb RunAs -FilePath (Convert-Path TestEnv.cmd) -ArgumentList 'a \"b c\" d' -Wait; Get-Content out.txt\r\n```\r\n\r\n## Expected behaviour\r\n\r\n`b` and `c` are passed as one argument and I get output li`ke this:\r\n```\r\nHello\r\na\r\n\"b c\"\r\nd\r\n15/11/2020\r\n21:10\r\n```\r\n\r\n## Actual behaviour\r\n\r\nI get the prompt to elevate the permissions and the script runs, but the output shows `b` and `c` have been passed as separate parameters.\r\n\r\nHello\r\na\r\nb\r\nc\r\n15/11/2020\r\n21:07\r\n\r\n## Environment data\r\n\r\n$PSVersionTable output\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-rc.2\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Further info\r\n\r\nIf I run the command without the `-Verb RunAs` like this it works. This next command gave me the output I've put above in Expected output.\r\n\r\n```\r\nStart-Process -FilePath (Convert-Path TestEnv.cmd) -ArgumentList 'a \"b c\" d' -Wait; Get-Content out.txt\r\n```\r\n\r\nI've also tried running it by passing an array of arguments like all of these, all of them pass `b` and `c` as separate arguments:\r\n\r\n```\r\nStart-Process -FilePath (Convert-Path TestEnv.cmd) -ArgumentList @('a','b c','d') -Wait -Verb RunAs; Get-Content out.txt\r\nStart-Process -FilePath (Convert-Path TestEnv.cmd) -ArgumentList @('a','\"b c\"','d') -Wait -Verb RunAs; Get-Content out.txt\r\nStart-Process -FilePath (Convert-Path TestEnv.cmd) -ArgumentList @('a',\"`\"b c`\"\",'d') -Wait -Verb RunAs; Get-Content out.txt\r\n```\r\n\r\n\r\n",
  "closed_at": "2020-11-16T20:32:08Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @martingbrown, but PowerShell isn't to blame here: the problem also affects the underlying .NET API , [`System.Diagnostics.ProcessStartInfo`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo), and may ultimately even be in the underlying WinAPI function, [`ShellExecuteEx`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexw).\r\n\r\nAlso note that, separately (and unfortunately), passing an _array_ of arguments to `Start-Process -ArgumentList` is broken, in that it simply blindly joins the verbatim values with spaces, without performing quoting and escaping - see #5576.\r\n\r\n",
      "created_at": "2020-11-15T21:34:40Z",
      "updated_at": "2020-11-15T21:34:40Z"
    },
    {
      "author": "martingbrown",
      "author_association": "NONE",
      "body": "Sorry, didn't see the duplicate of this. That is a proper mess.",
      "created_at": "2020-11-16T20:32:08Z",
      "updated_at": "2020-11-16T20:32:08Z"
    }
  ],
  "created_at": "2020-11-15T21:21:51Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question"
  ],
  "number": 14099,
  "state": "closed",
  "title": "Start-Process not parsing parameters correctly",
  "updated_at": "2020-11-16T20:32:08Z"
}