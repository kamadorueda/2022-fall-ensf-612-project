{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13428",
  "author": "iSazonov",
  "body": "## Motivations ##\r\n\r\nVery long history and fears of inevitable breaking changes\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/1995\r\n#7388\r\n#1908\r\nhttps://github.com/PowerShell/PowerShell/issues/13068\r\nhttps://github.com/PowerShell/PowerShell/issues/12491\r\nhttps://github.com/PowerShell/PowerShell/issues/12975\r\n#10722\r\n#10741\r\nhttps://github.com/PowerShell/PowerShell/issues/9006\r\nhttps://github.com/PowerShell/PowerShell/issues/3996\r\nhttps://github.com/PowerShell/PowerShell/issues/13393\r\n#13579\r\nhttps://github.com/PowerShell/PowerShell/issues/13640#issuecomment-693435355 PSNativePSPathResolution \r\nhttps://github.com/PowerShell/PowerShell/issues/10509#issuecomment-678951017\r\n#9343\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/90\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/88\r\n\r\nIt seems to be not all\r\n\r\n## Proposal ##\r\n\r\nIntroduce new PSNativeCmdlet class as an successor of the PSCmdlet class which will work as a wrapper for native apps.\r\n\r\n## Capabilities ##\r\n\r\nAll traditional cmdlet capabilities:\r\n- Parameter completion\r\n- Strong typed parameters\r\n- Argument validation attributes\r\n- Transformation attributes\r\n- Parameter sets\r\n- Dynamic parameters\r\n\r\nAdditionally:\r\n- input/output encodings\r\n- specific error output handling\r\n- specific error code handling\r\n- specific argument parsing, escaping (requires a hook in Binder)\r\n- output parser (for strong typed output to PowerShell pipeline) #10741\r\n- having special wrappers for specific applications like cmd.exe or msiexec\r\n- specific hook for Suggestion System\r\n- alternative optimizations for native pipelines\r\n\r\n## Benefits ##\r\n\r\n_The main thing is that this class can be integrated into the Engine subsystems selectively and gradually without total breaking changes._\r\nAnd all subsystems themselves can be enhanced gradually.\r\nAll existing Engine possibilities remain. Wrappers can overlap its or bypass to its.\r\n\r\nThe class itself can also improve gradually.\r\n\r\nWe can add flags which subsystems a particular wrapper can support. For example say that only Completions. Or run it like a regular cmdlet. Or run it as a normal external command, but use the output parser.\r\n\r\nWe could add new option in Start-Process so that it uses capabilities of the new class too.\r\n\r\nIt is compiled and works fast. (We could think about script support too)\r\n\r\n## Easy adoption ##\r\n\r\nEasy adoption for #1995 - We can implement @mklement0's Invoke-NativeShell internally in PSNativeCmdlet. Users can load a module with wrappers and get new behaviors or unload the module and get previous behavior. Or we could add flags in PSNativeCmdlet which turn on/off capabilities on the fly for the specific wrapper.\r\nGit is a good example of gradual adoption. We could implement git wrapper to address argument parsing issues and it will work with posh-git module. Later we could enhance the wrapper with posh-git capabilities in some way.\r\n\r\nBased on telemetry we will able to decide when to make the new behavior as default for all.\r\n\r\nWe can collect wrappers for the most popular commands in a separate _standard_ module and a separate PowerShell project repository. The community will be able to quickly add wrappers and improve them. Other vendors and communities may publish modules with their wrappers for their applications.\r\n\r\n## Additional thoughts ##\r\n\r\nThis approach could address questions in @JamesWTruher's blog posts about how PowerShell can take better advantage of native executables\r\nhttps://devblogs.microsoft.com/powershell/native-commands-in-powershell-a-new-approach/\r\nhttps://devblogs.microsoft.com/powershell/native-commands-in-powershell-a-new-approach-part-2/\r\n\r\nSince all native applications are built without a single parameter schema, these wrappers seem to be the only universal solution.\r\n",
  "closed_at": "2022-10-04T06:48:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "**Don't replicate ALL discussions to the issue - please continue discussions in specific issues.**",
      "created_at": "2020-08-13T17:47:27Z",
      "updated_at": "2020-08-13T17:47:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not really fully clear what this all means, but inferring what I can, it sounds like the idea is to build a whole new command processor to handle this -- among several other related tie-ins to existing subsystems.\r\n\r\nIf I'm honest, I think this is probably massively complicated to approach in this manner. It may well be a more complete approach to resolving the problems we're seeing, but I think the necessary time to put this kind of change together and review it, and then figure out how to test it... would be pretty significant.\r\n\r\nI'm not sure the slated benefit is worth the level of complexity being proposed here. \ud83e\udd14 ",
      "created_at": "2020-08-14T14:57:08Z",
      "updated_at": "2020-08-14T14:57:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'm not sure the slated benefit is worth the level of complexity being proposed here.\r\n\r\nYou see a complicity only because __all__ features from different issues we want implement are enumerated at once.\r\nReally every feature will implemented separately - so it is the same complicity as implementation of one feature. The same for testing.\r\nFor example, a parameter completion is as simple as define primitive cmdlet. I think to create a demo for this.\r\n",
      "created_at": "2020-08-14T15:46:28Z",
      "updated_at": "2020-08-14T15:46:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "To be clear - the surface features I think are desirable.\r\n\r\nBut I don't think the proposed implementation is the way to go, there seem to be too many pieces to fix what really boil down to 2-3 much simpler requests:\r\n\r\n1. Argument parsing\r\n2. Tab completion\r\n3. Alternate ways of handling stderr/stdout\r\n\r\nIn my own opinion, it's not worth duplicating significant portions of the engine code. These issues are, effectively, either bugs or feature requests that can be resolved in a much less expensive fashion -- _if_ we're willing to tackle the issue of them introducing breaking changes here and there.\r\n\r\nIt's my opinion that this approach is significantly more expensive in all respects than simply taking the necessary cost of a couple of breaking changes.",
      "created_at": "2020-08-14T15:59:47Z",
      "updated_at": "2020-08-14T15:59:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> In my own opinion, it's not worth duplicating significant portions of the engine code. \r\n\r\nWhere do you see \"duplications\" in Engine? The proposal says about (1) step-by-step (2) injection in some Engine subsystems. \r\n\r\nWhy do you say about complicity the work? \r\n- What about _simplicity_ for consumers? It is very simple for user to add one method in the class and get desired behavior without thinking about how Engine works.\r\n- Maybe it is complex for me but not for MSFT experts. You know MSFT team has limited resources and as result  postponed many useful features. But they could inject the new class in completion code and community get possibility to add completers for native commands. Then they could inject the class in pipeline output and community get possibility to create output parsers for native command. And so on. Mainly - small MSFT team efforts lead to significant ecosystem improvements.\r\n",
      "created_at": "2020-08-14T17:45:12Z",
      "updated_at": "2020-08-14T17:45:12Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I can't speak to the complexity of the implementation of a PSNativeCmdlet type but the issues around using native exes have been around for 15 years.  I don't want to see another \"bandaid\" (ahem --%) applied.  So, whatever gets done, I'd love to see that adequate time & thought is given to the implementation the team comes up with.  But please, let's not add yet another bandaid that will require additional fixes down the road and leave users with more bandaids to determine if they should use or not.  \r\n\r\nI realize you can't anticipate everything.  I suspect the team working on v1 never anticipated running on macOS and Linux. But given everything we do know, let's make sure the solution is well thought out and implemented even if it winds up being complex.  Honestly, I'd rather wait a bit longer to really nail these native exe issues.  In the meantime, modules like @mklement0's `native` could help fill the gap.",
      "created_at": "2020-08-14T18:41:04Z",
      "updated_at": "2020-08-16T05:39:23Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "That would require command providers to bundle manifests that PowerShell can read.",
      "created_at": "2020-08-15T14:44:22Z",
      "updated_at": "2020-08-15T14:44:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I don't want to see another \"bandaid\" (ahem --%) applied.\r\n\r\n@rkeithhill With the proposal end users will run native applications as is without any additional --% and cmdlets. They only have to load the module with wrappers.\r\n",
      "created_at": "2020-08-16T08:01:19Z",
      "updated_at": "2020-08-16T08:01:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, _command-individual wrappers_ are not the right solution to this problem.\r\n\r\nWe don't need to _wrappers_ for external executables, we just need argument passing to work, fundamentally, with any executable. \r\n\r\nTo put it differently, quoting the first part of the linked blog series:\r\n\r\n> PowerShell is a great shell, it can execute any executable, the same way that any good shell can do. No change is needed, just run `kubectl` and you\u2019re done!\r\n\r\nIt's precisely because that is _not_ true that we need a fundamental fix - and that is the focus of #1995.\r\n\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/1995#issuecomment-674445995 now lays out the fix in detail:\r\n\r\n* which is trivial _and complete_ on Unix\r\n* which would be trivial on Windows if we limited ourselves to supporting executables that adhere to the MS C/C++ conventions ...\r\n   * ... but since calling calling batch files and `msiexec`-style CLIs, neither of which adhere to the convention, is common, we should accommodate them too\r\n   * for any - then truly rare - edge cases not covered by these accommodations, there's `--%` or the more flexible `ins` (`Invoke-NativeShell`).\r\n\r\nThe only question is: how do we make this fix available, if a _direct_ fix is - at least for now - not an option?\r\n\r\nTo be clear: a direct fix is clearly the most desirable option, given that it is a severe handicap for a shell to not properly pass arguments to external executables.\r\n\r\nShipping an `ie` _function_ as a stopgap that can later become a no-op once a direct fix is implemented is a low-ceremony (opt-in, per-call) solution that is easy to use, publicize and document:\r\n\r\n* Assuming that the `ie` function [from the `Native` module](https://github.com/mklement0/Native) stands up to rigorous tests, it could be shipped as-is with PowerShell, requiring no engine changes whatsoever.\r\n  * That said, to also make the function work with `&&` and `||`, we should implement https://github.com/PowerShell/PowerShell/issues/10917#issuecomment-550550490, so that the function can set `$?` properly.\r\n* This means it could even be shipped with Windows PowerShell v5.1 and v6.x and v7.0 maintenance releases.\r\n\r\n---\r\n\r\nAs for the other areas of functionality mentioned in this proposal, as summarized by [@vexx32 above](https://github.com/PowerShell/PowerShell/issues/13428#issuecomment-674143584):\r\nThey would be _enhancements_, as opposed to the urgently needed bug fix required for #1995:\r\n\r\n> 2. Tab completion\r\n\r\nYou don't need a new, cmdlet-derived class to get tab completion with external executables; for instance, @bergmeister's [`posh-cli` module](https://github.com/bergmeister/posh-cli) bundles a growing number of tab-completion modules for popular CLIs.\r\n\r\n> 3. Alternate ways of handling stderr/stdout\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/88 should address the fundamental lack of integration of external executables with PowerShell's error handling.\r\n\r\n#13361 just fixed the problem with `2>` redirections from external executables unexpectedly being sensitive to `$ErrorActionPreference = 'Stop'`; a related fix regarding `$?` is pending: #13393\r\n\r\n#4332 would give us the ability to capture stderr output in a variable.\r\n\r\nOverall, I'm not convinced we need engine-level support for wrapping the _functionality_ of executables, such as parsing their text output into objects.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-16T14:28:20Z",
      "updated_at": "2020-08-16T17:47:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 All you say about #1995 right in thoughts but... PowerShell lives with this over 15 years. And you know MSFT team said a day before - \"we postpone this until 7.2\". You can read this \"We will think about it next year\". It's a polite form to say NO. So you have two alternatives - (1) stop posting about this until 7.2 (and then wait 7.3, 7.4...) (2) find an compromise solution. \r\nAnd again - I don't want to turn this issue into an endless discussion - they are already there.\r\n\r\nThis issue is also about in-depth refactoring. Today @daxian-dbw and MSFT team are thinking/working on SMA refactoring to loadable subsystems. As part of the work they could thing about refactoring these subsystems because this code is old and overgrown with extensions over the years. I suppose its partial refactoring is inevitable when creating subsystems. PSNativeCmdlets proposal is a way to make internal and external design simpler and clearer without breaking changes and the implementation faster and more compact. I believe this proposal has even more possibilities than announced.\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-16T18:09:19Z",
      "updated_at": "2020-08-16T18:09:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov\r\n\r\n> PowerShell lives with this over 15 years. \r\n\r\nIndeed, and any day longer is unacceptable.\r\n\r\n> (1) stop posting about this until 7.2\r\n\r\nI don't think there's any reason to wait; if this really won't happen until 7.2, then we have more time for discussing and honing proposals, though I think the [above proposal](https://github.com/PowerShell/PowerShell/issues/13428#issuecomment-674533349) - which took a while to work out in detail - is stable now.\r\n\r\nIn general, I believe in describing what (debatably) _should_ be the right solution, even if the powers that be decide against it.\r\n\r\n> (2) find a compromise solution.\r\n\r\nWhat I'm proposing _is_ a compromise solution - one that's easy to implement in the short term.\r\nIt specifically doesn't preclude a direct, breaking fix later and is even forward-compatible with one.\r\nIt doesn't break any existing code while giving users a very simple way to get the correct behavior.\r\n\r\n\r\n> This issue is also about in-depth refactoring.\r\n\r\nI don't see any connection between this proposal and #1995.\r\nThe changes required to fix the latter are limited to core functionality in `NativeCommandParameterBinderController.cs` and `NativeCommandProcessor.cs`.\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-16T18:52:35Z",
      "updated_at": "2020-08-17T02:12:03Z"
    },
    {
      "author": "89z",
      "author_association": "NONE",
      "body": "its been two years since the last comment - do you want to give some context of what happened here? was PSNativeCmdlet  added? or was something else done? or is idea just being refused outright?",
      "created_at": "2022-10-04T11:12:54Z",
      "updated_at": "2022-10-04T11:12:54Z"
    },
    {
      "author": "Luiz-Monad",
      "author_association": "NONE",
      "body": "> its been two years since the last comment - do you want to give some context of what happened here? was PSNativeCmdlet added? or was something else done? or is idea just being refused outright?\r\n\r\nThis is the status https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833090452\r\n\r\nThey added `$PSNativeCommandArgumentPassing='Windows'` which is the compromise https://github.com/PowerShell/PowerShell/issues/13428#issuecomment-674563240\r\n\r\nIt works correctly for most of the applications now (at least those that use `CommandLineToArgvW`), but you have to opt-in. But it has an exception for `cmd.exe` to use the old parsing, which does work if you pass a single string, the escaping go as is.\r\n\r\nIts ***Not great, not terrible***.\r\n\r\n\r\nhttps://github.com/PowerShell/PowerShell/pull/15408\r\n[Commit](https://github.com/JamesWTruher/PowerShell-1/commit/ac762c1cce10b962394b9e7589ce8a2e3f8cebb1#diff-2c8dfa27f5bc6452feceba5b5d1e9c8db440ca27c4f59a281a9aa769ad9a8dee)\r\nIt was merged [NativeCommandProcessor.cs L248](https://github.com/PowerShell/PowerShell/blob/8965af3d5201b103971b00f040c13e90ca7b6de6/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L248)",
      "created_at": "2022-10-29T04:10:05Z",
      "updated_at": "2022-10-29T04:16:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Luiz-Monad \r\n\r\n> you have to opt-in\r\n\r\nI can't speak to the official plans, but since the experimental feature was made a stable feature in preview.8,\r\nmaintaining backward compatibility would require _opt-out_, given that the `$PSNativeCommandArgumentPassing` value is currently `Standard` (Unix-like platforms) and `Windows` (Windows).\r\n\r\nIf these defaults are retained for the official v7.3 release, they amount to a substantial breaking change.\r\n\r\n---\r\n\r\n> it has an exception for cmd.exe to use the old parsing, which does work if you pass a single string\r\n\r\nAssuming you mean encoding all arguments to pass to an executable via a single string: No, you could never do that, and you won't be able to now.\r\n\r\nAlso, the exception with `Windows` in effect applies not just to `cmd.exe`, but also to the WSH executables and their associated extensions; the docs already reflect that: the [`$PSNativeCommandArgumentPassing` preference variable](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Preference_Variables#psnativecommandargumentpassing)\r\n\r\nIt's also worth repeating that the old parsing is horribly broken, and that continuing to force users to resort to it - which requires knowing the specifics of _how_ it is broken and carrying that unfortunate legacy forward - was a [terrible decision](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833568832).\r\n\r\nAnd let's not forget high-profile CLIs such as `msiexec` and `msdeploy`, which will continue to require obscure workarounds in order to ensure _partial_ quoting of arguments  - and implementing those workarounds with `Standard` or `Windows` in effect requires resorting to `--%` or calling via `cmd /c` (whereas existing workarounds will _break_, if the old behavior is opt-in).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-10-29T22:16:10Z",
      "updated_at": "2022-10-29T22:16:10Z"
    },
    {
      "author": "Luiz-Monad",
      "author_association": "NONE",
      "body": "> Assuming you mean encoding all arguments to pass to an executable via a single string: No, you could never do that, and you won't be able to now.\r\n\r\nThat's what I got from reading the source code with the changes, I thought it would in theory make the `cmd` works, but you are right, that won't solve the problem, its just keeping the old behavior so you don't have a breaking change when you use 'Windows', its the old broken behavior, not what it should be.\r\n\r\nThe way the code is written, there's no accounting to make the encoding of the single string right for the `cmd`, it doesn't really solve the problem. I overlooked it.\r\n",
      "created_at": "2022-10-31T20:11:04Z",
      "updated_at": "2022-10-31T20:11:39Z"
    },
    {
      "author": "Luiz-Monad",
      "author_association": "NONE",
      "body": "> If these defaults are retained for the official v7.3 release, they amount to a substantial breaking change\r\n\r\nThe default, if I'm understanding now, that it will be the *correct* behavior for anything that's not the `cmd` and others. And the `compatibility` behavior for the `cmd`. Its the worst of the solutions, but at least I can call `cmake` now correctly for example.\r\n\r\nBut it's not going to be a breaking change if you use `windows`, even if `windows` is the default and opt-out is `Legacy`.\r\n\r\n> It's also worth repeating that the old parsing is horribly broken, and that continuing to force users to resort to it - which requires knowing the specifics of _how_ it is broken and carrying that unfortunate legacy forward - was a [terrible decision](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833568832).\r\n\r\nThat's what I though it would do when you choose the *opt-in* `Standard` on WindowsDesktop, but there's no code to make it right, it just does ***CommandLineToArgvW***, which **DOESN'T** work for `cmd`, such a shame.\r\n\r\nAnd yet again, if they ship it, as-is, they are going to make it worse by not providing the proper behavior. That enum is going to become Hell !\r\n\r\n```csharp\r\n    public enum NativeArgumentPassingStyle\r\n    {\r\n        Legacy = 0, // legacy is legacy\r\n        Standard = 1, // this is just CommandLineToArgvW, breaks everything basically\r\n        Windows = 2, // this is CommandLineToArgvW for anything but `cmd`  on windows\r\n        NowRealStandardThatWorksAndIsNotOptOut = 3 // does what your InvokeNative Powershell module does for `cmd` and `Standard` for others.\r\n /// all else is legacylegacy, this becomes opt-in behavior , windows becomes legacywindows and opt-out , what a freak way of dealing with versioning \r\n    }\r\n\r\n```\r\n\r\nMaybe they should just have published a new `cmdlet` (that's actually just `ie`) for that and called it a day.\r\n",
      "created_at": "2022-10-31T20:26:43Z",
      "updated_at": "2022-10-31T20:31:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Hear, hear, @Luiz-Monad. \r\nIf you haven't already seen it, check out #6745\r\n\r\nWhile I share your frustration with respect to the issue at hand, the situation isn't quite as dire as you made it sound - though undoubtedly still bad enough:\r\n\r\nIf the current defaults (`Standard` on Unix, `Windows` on Windows) make it into the stable v7.3 version [update: _they have_]:\r\n\r\n* **Impact on _existing code_**,  IF it employs workarounds, namely for (a) arguments with embedded `\"` chars. and (b) _empty-string_ arguments (`''`)\r\n\r\n  * Unix: \r\n    * All existing workarounds will break, unless `$PSNativeCommandArgumentPassing` is set to `Legacy`.\r\n  * Windows: \r\n    * Existing workarounds _for programs other than `cmd.exe` and the WSH CLis (plus their associated script files)_  will break (unless `$PSNativeCommandArgumentPassing` is set to `Legacy`).\r\n    \r\n* **Impact on _future_ code**:\r\n\r\n  * Unix: \r\n    *  Life is good overall: argument-passing will finally work as it should, consistently, with _all_ external programs. \r\n\r\n  * Windows, given that the [proposed accommodations for batch files and other high-profile CLIs](https://github.com/PowerShell/PowerShell/issues/15143) were _not_ implemented:\r\n \r\n    * `cmd.exe` and the WSH CLis (plus their associated script files):\r\n    \r\n       * Script authors must understand when and how the old parsing was broken and what the specific workarounds are; that is, future generations of PowerShell users are saddled with obscure legacy debt.\r\n       \r\n       * Also, given that _batch-file_ entry points for CLIs aren't uncommon, script authors may not even be _aware_ that they're calling a batch file and that workarounds are therefore needed.\r\n      \r\n    * All other programs:\r\n\r\n       * Life is good with respect to those programs that follow [the C++ command-line parsing rules](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args#parsing-c-command-line-arguments) (which, fortunately, applies to _most_ programs in this category) - `Standard` will work as expected; from what I can tell, programs that use the [`CommandLineToArgv`](https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw) WinAPI function use those rules too.\r\n\r\n       * For those with non-standard parsing, notably programs that require _partial_ quoting of arguments, such as `msiexec.exe` and `msdeploy.exe`, workarounds via `--%` or `cmd /c` will be required.\r\n         * Of course, the challenge is to _recognize the need_ for such workarounds, as it won't be obvious _why_ calls to such programs with, say, `FOO=\"bar baz\"` fail, given that PowerShell's behind-the-scenes _re-quoting_   (to `\"FOO=bar baz\"` in this example) is hidden from view.\r\n\r\n---\r\n\r\n> Maybe they should just have published a new cmdlet (that's actually just `ie`) for that and called it a day.\r\n\r\nThat certainly would have made for a less painful situation, but it's hard to justify having to use a cmdlet / function for something as fundamental to a shell as calling external programs with arguments is.\r\n\r\nGiven that `&` is situationally already needed for calling external programs, perhaps a new _operator_ would have been less hideous, but it would still be a very visible symbol (in both sense of the word) of the fact that the original functionality is broken; plus, it wouldn't be easy to come up with a new symbol (sequence), and introducing new metacharacters is always problematic.\r\n\r\nIt's also worth noting that the current preference-variable-based solution is inherently problematic, as all preference variables are, due to PowerShell's dynamic scoping: Unless their values are carefully managed in terms of their scope (saving and restoring values), it is easy to inadvertently impact unrelated code that runs in the same scope or descendant scopes.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n           \r\n",
      "created_at": "2022-10-31T21:44:46Z",
      "updated_at": "2022-11-12T02:39:41Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> Given that `&` is situationally already needed for calling external programs,\r\n\r\nbut only if the path to the external program is evaluated from an expression, which is needed because of the implicit yield; an explicit yield operator would have been a much cleaner concept\r\n\r\n> it would not be easy to come up with a new symbol (sequence)\r\n\r\n`&*` (simulate argument vector) would be intuitive and unobtrusive\r\n`&/` (use command line) would eliminate `--%` but allow expansions; the responsibility of making the command line consistent with the syntax supported by the called tool would be on the caller\r\n```powershell\r\n&/ CMD /C START '\"HELLO WORLD\"' PAUSE\r\n```\r\n",
      "created_at": "2022-11-01T18:47:14Z",
      "updated_at": "2022-11-01T18:47:14Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> That's what I though it would do when you choose the _opt-in_ `Standard` on WindowsDesktop, but there's no code to make it right, it just does _**CommandLineToArgvW**_, which **DOESN'T** work for `cmd`, such a shame.\r\n\r\nThe responsibility to parse the command line is on the called tool.  The standard command shell does not even have a concept of an argument list, it expects a dictionary of named options, so the standard procedure to split into an argument list does not apply and there is no shame about that.  Named options are better than an argument list unless you really need to pass a homogeneous list of items.  UNIX tools simulate parsing option dictionaries using a system&#8209;imposed intermediate step of argument lists&mdash;which is a legacy feature and an inexhaustible source of funny misunderstandings and unexpected behaviour.",
      "created_at": "2022-11-01T19:16:26Z",
      "updated_at": "2022-11-01T19:17:05Z"
    },
    {
      "author": "Luiz-Monad",
      "author_association": "NONE",
      "body": "> While I share your frustration with respect to the issue at hand, the situation isn't quite as dire as you made it sound\r\n\r\nOh no, its not that dire, I can keep using your module any time. I'm just waiting for the proper solution, one day. I have hope still.",
      "created_at": "2022-11-09T00:02:19Z",
      "updated_at": "2022-11-09T00:02:19Z"
    },
    {
      "author": "Luiz-Monad",
      "author_association": "NONE",
      "body": "> The standard command shell does not even have a concept of an argument list, it expects a dictionary of named options, so the standard procedure to split into an argument list does not apply and there is no shame about that.\r\n\r\nWell, any program can parse its single *commandline* string whatever way it wants, it is what it is. The shame is not having the feature like `Invoke-NativeShell` that **serializes** for us. That does this:\r\n\r\n\r\n>>    Script authors must understand when and how the old parsing was broken and what the specific workarounds are; that is, future generations of PowerShell users are saddled with obscure legacy debt.\r\n\r\n>>    Also, given that batch-file entry points for CLIs aren't uncommon, script authors may not even be aware that they're calling a batch file and that workarounds are therefore needed.\r\n\r\nI'll keep using https://github.com/mklement0/Native . No worries ! ",
      "created_at": "2022-11-09T00:13:11Z",
      "updated_at": "2022-11-09T00:14:07Z"
    }
  ],
  "created_at": "2020-08-13T17:45:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console"
  ],
  "number": 13428,
  "state": "closed",
  "title": "PSNativeCmdlet class - wrapper for native applications",
  "updated_at": "2022-11-12T02:39:41Z"
}