{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7122",
  "author": "KirkMunro",
  "body": "This is related to #5148.\r\n\r\nIt's time for -Debug behavior to catch up to 2018.\r\n\r\nSince -Debug was added to PowerShell, it has always set DebugPreference to Inquire, resulting in users being prompted to continue execution of a command or not whenever a message is written to the debug stream. If you decide to suspend execution, you are brought into a nested prompt (_not_ the debugger), where you can look at state inside of a nested prompt, test variables, etc., but you cannot see where you are in the code, or use debugger features. _In a scripting language that has a debugger with different types of breakpoints, a native Wait-Debugger command, and an Enter-Debugger command from a community module, the usefulness of the Inquire behavior is nothing more than questionable_.\r\n\r\nThe current behavior gets in the way when you want debug information for a specific command. For example, if you are invoking a script, or maybe some compiled code, that invokes a command that is causing you some issues, and if that command was written to include debug output, how do you get the debug output for only that command? If you own the code you can set $DebugPreference to Continue right before you invoke the command, but if not you need to set that variable at a higher level, which can result in the generation of a lot of noise. Wouldn't it be much better if you could simply use $PSDefaultParameterValues to set -Debug to $true for the specific command you need debug information for? You can do that, but the result is that you'll get prompted to continue execution, which isn't user friendly at all. So command authors either need to get used to getting too much information, or use the verbose stream instead, but verbose has a different intent: to provide the command invoker with additional details that may help them troubleshoot what is going on when the command fails.\r\n\r\nTry this for fun:\r\n`Import-Module AzureRM -Verbose`\r\n\r\nHow much of that information is useful to the person invoking the command? How much of that information would be better targeted towards a debug stream, to help the command author figure out why something is happening when they don't have access to the environment where the command is invoked? The current design outputs way too much information to the verbose stream to be useful, and outputs nothing to the debug stream (_because in practice, command authors don't use the debug stream because -Debug is not useful_).\r\n\r\nThe AzureRM PowerShell team requests debug output of their commands by asking the user to set $DebugPreference to true (as described above). Instead it would be much better if they could simply ask users to invoke the command with -Debug, or if the command in question is part of a larger script or command that they cannot modify, use $PSDefaultParameterValues.\r\n\r\nThe -Debug parameter would be 1000x more useful if it resulted in DebugPreference being set to Continue instead of Inquire, so that users and command authors can have multiple levels of logging in PowerShell. Debug logging is important when you really want to see extra details that you rarely want to see, or when you want to send debug information back to the author of a command. Verbose logging is important when something isn't quite right and you can't figure out why from the error message, so you want some more details to try and figure out what might be going wrong. Each of these need to be useful independently from one another, without end users getting caught up in ridiculous prompting asking them whether or not they want to continue execution of the command.\r\n\r\nFurther to this, the Inquire action preference functionality should be deprecated entirely, and replaced with Debug, so that users can enter the debugger the moment any type of stream output is generated (e.g. imagine being able to invoke a command with -ErrorAction Debug). Nested prompts are just not useful anymore, and users should never be prompted to enter them when they want debug output.\r\n",
  "closed_at": "2018-11-30T14:47:40Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I've always thought that's how it should be: Verbose and Debug would behave the way they do in other developer logging tools like Log4net, as just different levels of logging.\r\n\r\nOn the downside (and why I've not filed this myself):\r\n1. If Verbose and Debug are **just** different logging levels, why bother with a breaking change (albeit one that surely doesn't break anything in automation). I mean, they're different \"streams\" but in practical usage, all that means is I can redirect them to separate files and/or turn one on without the other (i.e. **unlike** other logging tools, \"Debug\" wouldn't _imply_ \"Verbose\").\r\n2. We have the Information stream which we can use for even more interesting output filtering ...\r\n\r\nHaving said that, I basically agree that -Debug isn't useful and virtually nobody uses Write-Debug (I mean, anecdotally: I sometimes use it, and set `$DebugPreference = \"Continue\"`, but that never seems to swamp me with output the way you doing the same thing with Verbose does).",
      "created_at": "2018-06-20T17:49:19Z",
      "updated_at": "2018-06-20T17:49:19Z"
    }
  ],
  "created_at": "2018-06-20T14:43:50Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 7122,
  "state": "closed",
  "title": "Breaking change request: change -Debug to set $DebugPreference = 'Continue'",
  "updated_at": "2018-11-30T14:47:40Z"
}