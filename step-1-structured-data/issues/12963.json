{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12963",
  "author": "movomo",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# Create a temporary pathname that includes a leading non-breaking space.\r\nNew-Item \"$([char]0xa0)test.txt\"\r\n\r\n# Try to copy & paste the file path, either by drag & drop from Explorer or just by pressing Ctrl + V.\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nD:\\\u00a0test.txt\r\n```\r\nThe path should be pasted like above, preserving the space, because it is a valid pathname character.\r\n\r\n## Actual behavior\r\n\r\n```powershell\r\nSet-Location D:\\test.txt\r\n# Set-Location: Cannot find path 'D:\\test.txt' because it does not exist.\r\n```\r\nThe leading space is stripped out and becomes an incorrect path.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-12T12:00:20Z",
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "This looks like a PSReadLine issue, perhaps related to <https://github.com/PowerShell/PSReadLine/issues/760>. You could test whether `Remove-Module PSReadLine` fixes the problem.\r\n\r\n> by pressing Ctrl + V\r\n\r\nIs that in Windows Terminal or in conhost? Because Windows Terminal binds Ctrl+V to its own paste function by default, and that prevents PSReadLine from detecting the keypress and running *its* paste function, which might correctly preserve the non-breaking space.",
      "created_at": "2020-06-15T00:26:14Z",
      "updated_at": "2020-06-15T00:26:14Z"
    },
    {
      "author": "movomo",
      "author_association": "NONE",
      "body": "I was on Windows Terminal when I noticed this, but it also happens with conhost too. Windows powershell and cmd on Windows Terminal works fine.\r\n\r\nI tried ```Remove-Module PSReadline``` and it half-works.\r\n* It pastes the path with 'space' preserved, but apparently not 'non-breaking' space. It becomes a wrong path.\r\n* It will not enclose it with double quotes if no other breaking spaces are found in the path, even though it converted the non-breaking space to a plain space. This differs from Windows PowerShell 5.1.\r\n\r\n* Legacy powershell (5.1.19041.1) behavior:\r\n  - Pasted path is not enclosed in double quotes unless it had other ```\\x20``` spaces.\r\n  - Unless enclosed, path is incorrect.\r\n  - If enclosed manually, the path becomes recognizable.\r\n* pwsh behavior:\r\n  - Pasted path is not enclosed in double quotes unless it had other ```\\x20``` spaces. (same)\r\n  - Manually enclosed or not, path is unrecognizable.\r\n\r\nI also noticed another thing. The above tests were done with conhost, but if you do it on Windows Terminal (removing PSReadline), pwsh shows the same legacy powershell behavior. That is, manually enclosing it in quotes works. If you don't remove PSReadline, it just strips the ```\\xa0``` character as described earlier.\r\n",
      "created_at": "2020-06-15T02:58:05Z",
      "updated_at": "2020-06-15T02:58:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw for information.",
      "created_at": "2020-06-15T04:57:56Z",
      "updated_at": "2020-06-15T04:57:56Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Windows Terminal will preserve the non-breaking space in paste due to a bug.\r\n\r\nThe traditional windows console host (conhost) replaces 0xa0 with 0x20, if I recall: https://github.com/microsoft/terminal/blob/master/src/interactivity/win32/Clipboard.cpp#L348\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/100060912/dc77b180-764a-11e9-9e12-aace7d0ecd7d\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/microsoft/terminal\">microsoft/terminal</a></strong></div><div>The new Windows Terminal and the original Windows console host, all in the same place! - microsoft/terminal</div></blockquote>",
      "created_at": "2020-06-16T02:26:31Z",
      "updated_at": "2020-06-16T02:26:33Z"
    },
    {
      "author": "movomo",
      "author_association": "NONE",
      "body": "Yeah it seems like conhost is replacing 0xa0 with plain space... along with dash and quotes.\r\n\r\nBut... if Windows Terminal preserves non-breaking space due to a bug, then what is the right behavior? Now I'm confused.  So each of conhost, wt, powershell and pwsh is coming up with their own funny ideas with the clipboard??\r\n\r\n---\r\n\r\nconhost and wt comparison\r\nStarting from `D:\\`, try to cd to `\"D:\\\u00a0temp\"`,\r\n\r\nDone on the same window of cmd.exe directly executed from Run.\r\n- **cmd**: 0xa0 replaced by 0x20 (quoting doesn't make it valid)\r\n- **powershell**: space is preserved(?) but needs to be quoted\r\n- **pwsh**: space removed\r\n\r\n---\r\n\r\nWindows Terminal\r\n- **cmd**: 0xa0 is preserved and isn't even needed to be quoted\r\n- **powershell**: space is preserved(?) but needs to be quoted\r\n- **pwsh**: space removed\r\n",
      "created_at": "2020-06-16T04:18:45Z",
      "updated_at": "2020-06-16T04:18:45Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> The traditional windows console host (conhost) replaces 0xa0 with 0x20, if I recall\r\n\r\nThat must be \"Filter clipboard contents on paste\" under \"Edit Options\".\r\n\r\n![Screen shot of the \"Windows PowerShell\" Properties dialog box, highlighting the option \"Filter clipboard contents on paste\"](https://user-images.githubusercontent.com/46201428/84737914-901b4580-afb1-11ea-86fc-9323a781b1ab.png)\r\n",
      "created_at": "2020-06-16T06:16:08Z",
      "updated_at": "2020-06-16T06:16:08Z"
    },
    {
      "author": "movomo",
      "author_association": "NONE",
      "body": "Thanks, I didn't even know it existed. Having that 'Filter clipboard contents on paste' unchecked and also PSReadLine removed, then pwsh finally understands path with 0xa0. Does this mean this is PSReadLine bug?",
      "created_at": "2020-06-16T20:22:59Z",
      "updated_at": "2020-06-16T20:22:59Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "It may be the same bug as <https://github.com/PowerShell/PSReadLine/issues/760>.\r\n\r\nHowever, I think you can work around it this way:\r\n\r\n- Keep PSReadLine imported.\r\n- Paste by pressing Ctrl+V (not by right-clicking, using a menu, pressing Shift+Insert, or pressing Ctrl+Shift+V).\r\n- If you use conhost, then \"Filter clipboard contents on paste\" does not matter for Ctrl+V.\r\n- If you use Windows Terminal, then remove the [default Ctrl+V binding](https://docs.microsoft.com/windows/terminal/customize-settings/key-bindings#paste), to let PSReadLine handle the Ctrl+V.\r\n\r\nSee also <https://github.com/PowerShell/PSReadLine/issues/579>, for differences between Ctrl+V and other ways to paste.",
      "created_at": "2020-06-16T22:13:50Z",
      "updated_at": "2020-06-16T22:13:50Z"
    },
    {
      "author": "movomo",
      "author_association": "NONE",
      "body": "Ah, those two worked like a charm. Thanks!\r\nToo bad I can't use drag & drop for this though... that would be very nice.",
      "created_at": "2020-06-17T01:01:43Z",
      "updated_at": "2020-06-17T01:01:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Just saw this issue. FYI, the right-click pasting doesn't work in PSReadLine due to a .NET Core issue: https://github.com/dotnet/runtime/issues/38966",
      "created_at": "2020-07-11T00:19:47Z",
      "updated_at": "2020-07-11T00:19:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-12T12:00:19Z",
      "updated_at": "2020-07-12T12:00:19Z"
    }
  ],
  "created_at": "2020-06-14T23:27:30Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-Console",
    "Resolution-Answered"
  ],
  "number": 12963,
  "state": "closed",
  "title": "Pasting path strips leading non-breaking space from file name on Windows",
  "updated_at": "2020-09-21T16:12:10Z"
}