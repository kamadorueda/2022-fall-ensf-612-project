{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4715",
  "author": "mklement0",
  "body": "<sup>Related: #4135 and #4626.</sup>\r\n\r\nCurrently, it is not easy to discover which of a given cmdlet's / advanced function's parameters accept wildcard patterns as arguments\r\n\r\nUsing the example of `Get-Item`:\r\n\r\n* You can use `Get-Help Get-Item -Full` and then browse the entire topic for `Accept wildcard characters?` lines.\r\n\r\n* To query wildcard support for a given parameter, you can use:  \r\n`Get-Help Get-Item -Parameter Path` and read the _description_ - however, due to a separate issue, most cmdlets do not allow _programmatic_ discovery of wildcard-supporting parameters.\r\n\r\nNeither option is convenient.\r\n\r\nPerhaps the syntax diagrams could be enhanced with symbols that reflect support for wildcard patterns? \r\n\r\nSomething along the lines of (these are mere examples; the idea is to be concise):\r\n\r\n`-Param* <type>`\r\n\r\nApplied to the `Get-Item` example:\r\n\r\n```none\r\nGet-Item [-Path*] <string[]> [-Filter <string>] [-Include* <string[]>] [-Exclude* <string[]>] [-Force] [-Credential <pscredential>] [-Stream <string[]>] [<CommonParameters>]\r\n\r\nGet-Item -LiteralPath <string[]> [-Filter <string>] [-Include* <string[]>] [-Exclude* <string[]>] [-Force] [-Credential <pscredential>] [-Stream <string[]>] [<CommonParameters>]\r\n```\r\n\r\nNote: While the `-Filter` parameter supports wildcards for the _FileSystem_ provider, this may not be true for all providers - what the `-Filter` parameter accepts is entirely provider-dependent; case in point: the wildcard-pattern language supported by the FileSystem provider _differs_ (is less powerful than) PowerShell's wildcard-pattern language.\r\n\r\nWritten as of `PowerShell Core v6.0.0-beta.6`.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Get-Item [-Path] <wildcard string[]> `",
      "created_at": "2017-08-31T07:44:23Z",
      "updated_at": "2017-08-31T07:44:23Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "While I was working on #4716 I implemented this issue. Its been a while since this issue was updated is this something we still want to do?\r\n\r\n```powershell\r\nNAME\r\n    Get-Item\r\n\r\nSYNOPSIS\r\n    Gets the item at the specified location.\r\n\r\n\r\nSYNTAX\r\n    Get-Item [-Stream <wildcard String[]>] [-Credential <wildcard PSCredential>] [-Exclude <wildcard String[]>]\r\n    [-Filter <wildcard String>] [-Force] [-Include <wildcard String[]>] -LiteralPath <wildcard String[]>\r\n    [<CommonParameters>]\r\n\r\n    Get-Item [-Path] <wildcard String[]> [-Stream <wildcard String[]>] [-Credential <wildcard PSCredential>] [-Exclude\r\n    <wildcard String[]>] [-Filter <wildcard String>] [-Force] [-Include <wildcard String[]>] [<CommonParameters>]\r\n```",
      "created_at": "2020-08-05T01:59:37Z",
      "updated_at": "2020-08-05T01:59:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Nice! I'm torn kind of between that (very clear) and @mklement0's original idea (very concise).\r\n\r\nMaybe some kind of in between?\r\n\r\n`-ParamName <String>*` / `-ParamName <String[]>*` \r\n\r\nI'm hesitant to put the indicator inside the angle brackets, as that kind of implies it's somehow part of the type itself, and we don't actually have a `StringWildcard` type ^^\r\n\r\nWere this pre-PS v1.0 I might actually suggest just drop the attribute and just have all wildcard parameters use `WildcardPattern` as the actual input type; clear, saves a conversion later, etc. But there are internal APIs that probably would need overloads added, it's not a straightforward switch over. And you can't get the original string back out of those if you do need it, it'd need more changes than it's probably worth at this point.",
      "created_at": "2020-08-05T02:41:34Z",
      "updated_at": "2020-08-05T02:43:06Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 I like the concise version as well. Having wildcard spelled out is easy to understand but can get overwhelming when every parameter has it enabled. Maybe we can use your suggestion with a legend below the syntax.\r\n\r\n```powershell\r\nNAME\r\n    Get-Item\r\n\r\nSYNOPSIS\r\n    Gets the item at the specified location.\r\n\r\n\r\nSYNTAX\r\n    Get-Item [-Stream <String[]>*] [-Credential <PSCredential>*] [-Exclude <String[]>*]\r\n    [-Filter <String>*] [-Force] [-Include <String[]>*] -LiteralPath <String[]>*\r\n    [<CommonParameters>]\r\n\r\n    Get-Item [-Path] <String[]>* [-Stream <String[]>*] [-Credential <PSCredential>*] [-Exclude\r\n    <String[]>*] [-Filter <String>*] [-Force] [-Include <String[]>*] [<CommonParameters>]\r\n\r\n    * Denotes wildcard support\r\n```",
      "created_at": "2020-08-05T02:50:26Z",
      "updated_at": "2020-08-05T02:52:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I like it, that does hit both points very effectively! \ud83d\ude42 ",
      "created_at": "2020-08-05T02:54:45Z",
      "updated_at": "2020-08-05T02:54:45Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "That does bring up something with the syntax view that is confusing for new users. They don't know what the symbols mean. This might need to be in its own issue but maybe we should add an optional legend view describing each symbol.\r\n\r\n```powershell\r\nNAME\r\n    Get-Item\r\n\r\nSYNOPSIS\r\n    Gets the item at the specified location.\r\n\r\n\r\nSYNTAX\r\n    Get-Item [-Stream <String[]>*] [-Credential <PSCredential>*] [-Exclude <String[]>*]\r\n    [-Filter <String>*] [-Force] [-Include <String[]*>] -LiteralPath <String[]*>\r\n    [<CommonParameters>]\r\n\r\n    Get-Item [-Path] <String[]*> [-Stream <String[]*>] [-Credential <PSCredential>*] [-Exclude\r\n    <String[]*>] [-Filter <String>*] [-Force] [-Include <String[]*>] [<CommonParameters>]\r\n\r\nLEGEND\r\n    [-Parameter]    Positional parameter, does not require parameter name\r\n    <>              Type of object accepted\r\n    []              Parameter accepts multiple values\r\n    {Item | Item2}  Valid parameter values\r\n    *               Wildcard Support\r\n```",
      "created_at": "2020-08-05T03:07:25Z",
      "updated_at": "2020-08-05T03:07:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Shouldn't we stick to a stricter normalized notation?\r\nIn notations, this '*' sign has a special meaning that can be misleading in the proposal.\r\n",
      "created_at": "2020-08-05T05:53:44Z",
      "updated_at": "2020-08-05T05:53:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What do you mean exactly @iSazonov? \ud83e\udd14 ",
      "created_at": "2020-08-05T11:19:18Z",
      "updated_at": "2020-08-05T11:19:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, this is about a format that is human-friendly, not a strict notation for machine parsing.\r\n\r\nWhile there is some potential for confusion with the [BNF-style](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form#Variants) `*` duplication symbol (0 or more times) - given that we've borrowed the notation for optional elements from there (`[...]`, which already clashes with our type-literal notation) -  I don't think something like `<String>*` would be a problem in practice, especially if we also offer a legend, as proposed.\r\n\r\nSpeaking of: For brevity, the legend should probably only be shown with `-Full` and `-Detailed`.\r\n\r\n",
      "created_at": "2020-08-05T12:02:52Z",
      "updated_at": "2020-08-06T17:39:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I feel we need a strong notation to overcome limitations in definition of parameter sets. Syntax diagram would follow the notation.",
      "created_at": "2020-08-06T17:31:08Z",
      "updated_at": "2020-08-06T17:31:08Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov do you have an example of what that might look like?",
      "created_at": "2020-08-06T21:34:26Z",
      "updated_at": "2020-08-06T21:34:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ThomasNieto Perhaps we need something like BNF-style. Perhaps there is a better option. Today it is easy to define 2-3 parameter sets with 1 level optional parameters after mandatory ones. But creating more complex parameters sets turns into a big headache. Alternative - dynamic parameters but it does not allow discovering and syntax diagram generating.",
      "created_at": "2020-08-07T05:36:39Z",
      "updated_at": "2020-08-07T05:36:39Z"
    }
  ],
  "created_at": "2017-08-31T02:36:37Z",
  "number": 4715,
  "state": "open",
  "title": "Suggestion: make it easier to discover which cmdlet parameters accept wildcard patterns, via the syntax diagram",
  "updated_at": "2020-08-07T05:36:39Z"
}