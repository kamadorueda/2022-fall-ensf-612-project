{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15626",
  "author": "loxia01",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\nSet a new value for an environment variable (have tested with TEMP/TMP) in PowerShell 5.1 using the `SetEnvironmentVariable` method. Then, in PowerShell 7, issue a command to get the value of the environment variable, either using the `GetEnvironmentVariable` method or `Get-ItemProperty` for the registry value, in this case: `Get-ItemProperty Registry::HKCU\\Environment`. \r\n```powershell\r\n\r\n```\r\n\r\n## Expected behavior\r\nPowerShell 7 reporting the correct updated value for the environment variable or the registry entry.\r\n```none\r\n\r\n```\r\n\r\n## Actual behavior\r\nPowerShell 7 will report the old NOT updated value. This behavior is persistent across reboots. However, if referencing the environment variable using the `$env:` notation, the correct value is used.\r\n```none\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-06-22T04:55:12Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The SetEnvironmentVariable() method has overloads for various use cases, but the default option for it sets the environment for the current process only. You need to provide additional options if you want that to persist to other new processes.\r\n\r\nSee: https://docs.microsoft.com/en-us/dotnet/api/system.environment.setenvironmentvariable?view=net-5.0",
      "created_at": "2021-06-21T12:26:51Z",
      "updated_at": "2021-06-21T12:27:57Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "OK, but even if I change the environment registry values directly with `Set-ItemProperty` in PowerShell 5.1, PowerShell 7 shows the same behavior in reporting the wrong environment values.",
      "created_at": "2021-06-21T12:53:27Z",
      "updated_at": "2021-06-21T12:54:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "To my knowledge, setting the registry will not update the current logged in user's environment. As I understand it, the OS reads those registry values on startup (for machine-scope variables) and on login (for user-scope variables), but does not monitor them continually. I'm sure there are ways to update the user scope variables on the fly, but I think doing so requires a p/invoke call as well as the registry change -- I think .NET normally handles that when you call SetEnvironmentVariable() with the appropriate parameters to set the variables at the proper scopes.",
      "created_at": "2021-06-21T12:59:48Z",
      "updated_at": "2021-06-21T13:00:32Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "This issue is persistent across reboots/logins. PowerShell 7 still shows the old environment variable value after reboot/login, but `$env:TEMP` contains the correct value.",
      "created_at": "2021-06-21T13:07:12Z",
      "updated_at": "2021-06-21T13:07:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. Which installation method are you using? MSI? MSIX? Windows Store?",
      "created_at": "2021-06-21T13:08:54Z",
      "updated_at": "2021-06-21T13:08:54Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I can't repro this.  If I set a USER env var in Windows PowerShell and then start up a new PS 7, it sees the env var.  It seems you do have to start a new instance of PowerShell to see the newly defined \"USER\" env var.  That is consistent with my understanding that env vars are read at process start time.  If you use `$env:` to get/set an env var, you are setting a PROCESS env var which is only visible to that process.\r\n\r\n![PowerShellEnvVarSet](https://user-images.githubusercontent.com/5177512/122800744-8c836400-d280-11eb-8e62-c7cdb597e7ac.gif)\r\n\r\nMaybe you can post the exact commands you are using?  Also, if your issue is with `[System.Environment]::GetEnvironmentVariable()`, you should bring that up in the .NET FX repo: https://github.com/dotnet/runtime\n\n<blockquote><img src=\"https://opengraph.githubassets.com/42378b76fbe609b2aa0675f66b8533de2c38a9812470e058181acbef85f717d8/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2021-06-21T17:17:24Z",
      "updated_at": "2021-06-21T17:17:25Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Hmm. Which installation method are you using? MSI? MSIX? Windows Store?\r\n\r\nWindows Store. ",
      "created_at": "2021-06-21T21:56:31Z",
      "updated_at": "2021-06-21T21:56:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. If you can try a more recent preview version, I'd be interested to see if that changes what you see. I know @SteveL-MSFT had been working on some issues that looked pretty similar to this one.\r\n\r\nThis might be another case of the Windows Store sandboxing pwsh into a contained environment which we hit a few times in the past.",
      "created_at": "2021-06-21T22:34:14Z",
      "updated_at": "2021-06-21T22:34:14Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "\r\nDid some more testing and oddly this issue only seems to affect the TEMP & TMP environment variables (and corresponding registry entries). Tested with PATH variable and a custom created environment variable and in those cases everything seemed to be working as expected.\r\nAlso tested to manually change registry values for TEMP and TMP in RegEdit and got the same issue with PowerShell 7 not reporting the updated values even after reboot/logout.\r\nOne thing I noticed is that in the Get-Item output TMP & TEMP properties are not listed in alphabetic order as in the PowerShell 5.1 output. ",
      "created_at": "2021-06-21T23:06:52Z",
      "updated_at": "2021-06-22T05:31:13Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Hmm. If you can try a more recent preview version, I'd be interested to see if that changes what you see. I know @SteveL-MSFT had been working on some issues that looked pretty similar to this one.\r\n> \r\n> This might be another case of the Windows Store sandboxing pwsh into a contained environment which we hit a few times in the past.\r\n\r\nI will try that as soon as I get time.",
      "created_at": "2021-06-21T23:28:18Z",
      "updated_at": "2021-06-21T23:28:18Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "This works regardless of the version of PowerShell. After shell restarting.\r\n```\r\n[environment]::SetEnvironmentVariable('TMP','A:\\TMP','User')\r\n```",
      "created_at": "2021-06-22T02:17:46Z",
      "updated_at": "2021-06-22T02:17:46Z"
    },
    {
      "author": "loxia01",
      "author_association": "NONE",
      "body": "Have now tested in 7.2.0-preview.7 and there it is working as expected.\r\nAlso installed msi version of 7.1.3 and it seems to be working as expected there too. So probably some problem with my Windows Store version.\r\n\r\nThanks for your help and sorry for taking your time.\r\n\r\nClosing this issue.\r\n",
      "created_at": "2021-06-22T04:39:35Z",
      "updated_at": "2021-06-22T04:55:07Z"
    }
  ],
  "created_at": "2021-06-21T12:18:59Z",
  "labels": [],
  "number": 15626,
  "state": "closed",
  "title": "PowerShell 7 not reporting updated environment variable values if setting them in PowerShell 5.1",
  "updated_at": "2021-06-22T05:31:13Z"
}