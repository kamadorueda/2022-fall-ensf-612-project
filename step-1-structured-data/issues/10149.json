{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10149",
  "author": "photex",
  "body": "\r\n# Steps to reproduce\r\n\r\n```powershell\r\nRun pwsh.exe\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nThe shell should open quickly and use very little memory.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nThe shell opens, doesn't get to the prompt very quickly, then once running each pwsh.exe process uses rougly 250Mb of RAM (!!!)\r\nFor daily use this is not acceptable when compared to my typical shell workflow.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nLoading personal and system profiles took 2136ms.\r\nPS C:\\projects> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-07-16T12:00:22Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell is .Net Core application and this assumes Core runtime initialization that consume more resources (memory, CPU and startup time) than any application on native code.\r\nAlso PowerShell depends on that user put in PowerShell profile.\r\n\r\nWe continuously track startup delay. Now 7.0 preview has better startup time than  6.2/6.1 versions.",
      "created_at": "2019-07-15T10:26:36Z",
      "updated_at": "2019-07-15T10:26:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-07-16T12:00:19Z",
      "updated_at": "2019-07-16T12:00:19Z"
    },
    {
      "author": "photex",
      "author_association": "NONE",
      "body": "Yeesh, I step away from vacation and the issue is bot-closed. :)\r\n\r\nThis response is *alarming* to me. Is PowerShell meant to be used as an interactive shell? Everyone (including MS) seems to be moving away from cmd.exe to powershell. And if I use the system powershell I'm given a message from MS to try this new PSCore you're working on....\r\n\r\nIt's unbelievable to me that anybody would seriously suggest using a shell that uses 200Mb(!!!) per open window/tab. How can anyone realistically justify this?",
      "created_at": "2019-07-17T11:47:34Z",
      "updated_at": "2019-07-17T11:47:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@photex I just checked PS 7-preview1 -- it uses ~ 95 MB on open, and reaches the prompt much quicker than 6.2 does. Already a pretty big improvement, and I've noted several performance-oriented PRs since preview1 came out. @SteveL-MSFT tweeted yesterday that we will probably see the preview2 release today, so I would re-check when that is made available and see if you notice a marked difference.\r\n\r\nThere are ongoing efforts to improve performance. @iSazonov do we currently have a tracking issue for performance / memory usage?",
      "created_at": "2019-07-17T12:25:04Z",
      "updated_at": "2019-07-17T12:25:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> do we currently have a tracking issue for performance / memory usage?\r\n\r\nIt makes no sense. We should track only _specific scenarios_ which we can reproduce, find critical code and improve it. Feel free to open such issues.\r\nPreview2 comes with .Net Core 3.0 Preview6 where GC works very good now.\r\n\r\n> It's unbelievable to me that anybody would seriously suggest using a shell that uses 200Mb(!!!) per open window/tab. How can anyone realistically justify this?\r\n\r\nPowerShell is __Power__ Shell, not native code shell. For the power we have to pay. You can continue to use cmd.exe and VBS for simple scenarios to consume few resources.",
      "created_at": "2019-07-17T14:21:31Z",
      "updated_at": "2019-07-17T14:21:31Z"
    },
    {
      "author": "photex",
      "author_association": "NONE",
      "body": "I'd reckon high memory usage for a shell that's sitting idle to be a very specific and trackable issue. I'd love to see this situation improve.\r\n\r\nAs cool as it may be, it's not worth the price of entry as a daily use shell. If you're honestly cool with your idle terminals consuming over a Gb of RAM then more **Power** to you. ",
      "created_at": "2019-07-17T14:44:47Z",
      "updated_at": "2019-07-17T14:44:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's not consuming > 1GB of RAM when idle. While I appreciate it's perhaps not ideal for you, I don't think that exaggerating the issue is perhaps the best way to get something done about it. \ud83d\ude15\r\n\r\nPowerShell has a bit of a disadvantage there when it comes to comparing it with other shells, partially because it utilizes .NET's libraries. While there are things we can do to limit startup memory usage, some of those libraries we need to work with are surprisingly large.\r\n\r\nI do, however, agree that idle memory usage is a fairly reproducible issue, especially if we're talking right after startup. Scripts / code that is run after that may cause additional libraries to be loaded, and I'm not sure if .NET Core has quite gotten library _unloading_ sorted out completely -- and from what I've read I think there would need to be improvements in the engine to support unloading of unused libraries as well.",
      "created_at": "2019-07-17T14:49:57Z",
      "updated_at": "2019-07-17T14:51:33Z"
    },
    {
      "author": "photex",
      "author_association": "NONE",
      "body": "I'm not exaggerating and it appeared at one point that I'm your target audience. \r\n\r\nWhen I'm working on windows I might have up to 7 tabs running. Windows Terminal or Consolez, etc. On Linux systems I routinely run 5 or more shells in tmux over ssh. \r\n\r\nI noticed the high usage because of this. My terminal reported over a Gb of Ram being used. The guilty party was that every single instance of pwsh.exe was using 250Mb.\r\n\r\nAnd yes that is even when idle. There are plenty of terminal power users running on systems other than windows, routinely running 5 to 6 shells under tmux or iterm and so on. Powershell could not be used by these users. ",
      "created_at": "2019-07-17T14:58:34Z",
      "updated_at": "2019-07-17T14:58:34Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Hmm, PS7 does seem to be a bit (2x) more of a hog than 6.2.  This is after startup of PS7:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/61386593-ca480880-a871-11e9-9660-4963b911c9b5.png)\r\n",
      "created_at": "2019-07-17T15:04:23Z",
      "updated_at": "2019-07-17T15:04:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill is that preview1?\r\n\r\nCurious to see how preview2 turns out. \ud83d\ude42 ",
      "created_at": "2019-07-17T15:05:02Z",
      "updated_at": "2019-07-17T15:05:02Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yes, and same here. To be fair, it is preview and perhaps there is more perf work to be done to bring the size down.  Plus they are adding support for WPF/WinForms, so that might be adding to the size.",
      "created_at": "2019-07-17T15:06:39Z",
      "updated_at": "2019-07-17T15:06:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Maybe, but I wouldn't think WPF/WinForms libraries should be being loaded unless the code running actually needs it? \ud83e\udd14 ",
      "created_at": "2019-07-17T15:09:51Z",
      "updated_at": "2019-07-17T15:09:51Z"
    },
    {
      "author": "photex",
      "author_association": "NONE",
      "body": "Ok I've tracked down the major consumer of RAM which was the AWS tools for PsCore.\r\n\r\nThe AWS tools for standard powershell have not had this impact for whatever reason. I can use the python tools until that's resolved.\r\n\r\nThis puts things back into a ballpark where it doesn't seem so crazy! And now it is more clear why you thought I was exaggerating (250Mb is a far far cry from 30Mb - 50mb). \r\n",
      "created_at": "2019-07-17T15:16:09Z",
      "updated_at": "2019-07-17T15:16:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Yeah, you're right. Those assemblies are not loaded initially in preview1. As for loaded assemblies, all I see are two new ones (and one removed) in v7 preview1 (vs 6.2.1):\r\n```\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\nMicrosoft.Management.Infrastructure.Native.dll =>\r\nMarkdig.dll                                    =>\r\nSystem.ValueTuple.dll                          <=\r\n```\r\nCombined \"file size\" is < 600 KB.",
      "created_at": "2019-07-17T16:18:10Z",
      "updated_at": "2019-07-17T16:18:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@photex Does AWS PowerShell have a repo / forum for reporting issues with the module? Might be worth pinging them and asking why the memory increase for PS Core is so much more than it was for 5.1 \ud83d\ude42 ",
      "created_at": "2019-07-17T16:55:23Z",
      "updated_at": "2019-07-17T16:55:31Z"
    },
    {
      "author": "photex",
      "author_association": "NONE",
      "body": "I did a brief search but it was time to head to dinner. Will pick it up tomorrow because I absolutely think this should be discussed. :D",
      "created_at": "2019-07-17T17:30:21Z",
      "updated_at": "2019-07-17T17:30:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Ok I've tracked down the major consumer of RAM which was the AWS tools for PsCore.\r\n\r\nIf it uses Web cmdlets from PowerShell Core it is known issue and we have a tracking issue(s) for them (web cmdlets consume a lot of memory)",
      "created_at": "2019-07-18T03:45:45Z",
      "updated_at": "2019-07-18T03:45:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@chuanjiao10 Let's not teasing",
      "created_at": "2019-07-19T03:30:13Z",
      "updated_at": "2019-07-19T03:30:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@chuanjiao10 Please share specific scenarios with simple repo so that we could measure and then find a fix.",
      "created_at": "2019-07-19T03:46:48Z",
      "updated_at": "2019-07-19T03:46:48Z"
    },
    {
      "author": "Serentty",
      "author_association": "NONE",
      "body": "I was getting similar RAM usage to this issue, and I discovered that it was due to a couple of plugins I had installed such as \u201cPowerShell Humanizer\u201d and \u201cCommunary.ConsoleExtensions\u201d. It seems that even just putting a couple of things in your profile can really expand memory usage. I'm not sure if this is due to the plugins themselves being sloppy with RAM usage, or if it has to do with the nature of loading modules in PowerShell itself.",
      "created_at": "2020-06-05T19:56:30Z",
      "updated_at": "2020-06-05T19:56:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Serentty You need to be more specific. If you think a problem is in PowerShell then open new issue with a description/repro steps. If you think that the problem is in a module, then open the issue in its repository.\r\n",
      "created_at": "2020-06-06T19:49:04Z",
      "updated_at": "2020-06-06T19:49:04Z"
    },
    {
      "author": "Serentty",
      "author_association": "NONE",
      "body": "Well sure, I'm just +1ing what the OP said. In case anyone else is experiencing really high RAM usage, check your profile to see if there's something in there that's responsible.",
      "created_at": "2020-06-06T20:56:07Z",
      "updated_at": "2020-06-06T20:56:07Z"
    }
  ],
  "created_at": "2019-07-13T13:24:25Z",
  "number": 10149,
  "state": "closed",
  "title": "Extremely high memory usage",
  "updated_at": "2020-06-06T20:56:07Z"
}