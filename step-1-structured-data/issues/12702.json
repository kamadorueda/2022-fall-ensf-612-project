{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12702",
  "author": "Evengard",
  "body": "I tried to use PowerShell Core with the Get-DedupStatus and Get-DedupVolume.\r\n\r\nFirst of all, in an unelevated shell it just shows \"A general error has occured\" without more specific message (like Windows PowerShell does, from this message it is possible to understand that we got an ACCESS DENIED error).\r\n\r\nNow, in an elevated shell the table formatting is buggy. I.e. for Get-DedupStatus the columns \"FreeSpace\" and \"SavedSpace\" are just empty (while they are filled in Windows PowerShell), the same for Get-DedupVolume (columns SavedSpace and SavingsRate are empty) and Get-DedupSchedule (column \"StartTime\" is also empty).\r\n\r\nThis is not really deal-breaking, but seeing this type of bugs when Windows PowerShell nags to try out PowerShell Core makes me wondering if it is really ready for this...",
  "closed_at": "2020-05-20T00:00:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @anmenaga for information.",
      "created_at": "2020-05-17T18:39:45Z",
      "updated_at": "2020-05-17T18:39:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Evengard Please share .psd1 file of the module.",
      "created_at": "2020-05-17T18:40:12Z",
      "updated_at": "2020-05-17T18:40:12Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "I can't share it as it is a feature of MS Windows system, it is a system component. Even if I managed to pull it off my system somehow, I'm not sure it would work \"as is\".\r\nIt is the Windows Server deduplication system component.",
      "created_at": "2020-05-17T19:54:27Z",
      "updated_at": "2020-05-17T19:54:27Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "[remoteIpMoProxy_Deduplication_2.0.0.0_localhost_13d1805e-fb86-4596-9492-04e48eaaffba.zip](https://github.com/PowerShell/PowerShell/files/4641333/remoteIpMoProxy_Deduplication_2.0.0.0_localhost_13d1805e-fb86-4596-9492-04e48eaaffba.zip)\r\n\r\nPulled the files from the system directories...\r\n",
      "created_at": "2020-05-17T23:50:54Z",
      "updated_at": "2020-05-17T23:50:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If this module shipped with a Windows feature, it's quite possible the module has not been updated to work correctly in PowerShell 7. \r\n\r\nThe Windows component modules are generally owned by the respective product teams rather than the PowerShell team, so there's a limit to what we can do from PowerShell itself, especially if the module happens to require some .NET API that did not get reimplemented in .NET Core.\r\n\r\nI'd give it a try with an explicit `Import-Module -UseWindowsCompatibility` for the relevant module to see if it can be handled that way without losing too much functionality, but beyond that your best bet is usually filing a UserVoice ticket for the relevant feature so the team is aware that there is demand for their PowerShell module to continue to be updated.",
      "created_at": "2020-05-17T23:57:54Z",
      "updated_at": "2020-05-17T23:58:02Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "I've actually tried to load the module with `Import-Module -SkipEditionCheck Deduplication` and... Well, it actually worked! The FreeSpace, SavedSpace and all other columns actually DID appear in the output exactly as expected!\r\n\r\nCan it be that the bug is in the WinPSCompatSession remoting session?",
      "created_at": "2020-05-18T00:05:18Z",
      "updated_at": "2020-05-18T00:05:55Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "[Deduplication.zip](https://github.com/PowerShell/PowerShell/files/4641380/Deduplication.zip)\r\n\r\nPulled the actual module files from C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Deduplication",
      "created_at": "2020-05-18T00:07:45Z",
      "updated_at": "2020-05-18T00:07:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Can it be that the bug is in the WinPSCompatSession remoting session?\r\n\r\nYes and no. \ud83d\ude04 \r\n\r\nEssentially whenever you have to go over a remoting session, PS has to serialize the data between the sessions, it's not able to just reach in and read the memory or whatever to see what's up. In some cases, that doesn't play well with how something needs to work, methods on the objects are typically missing, and the object type ends up changing, because oftentimes they don't have public constructors so you can't re-instantiate objects.\r\n\r\nSo... yeah, depending on how reliant the original code is on the objects being precisely as they originally were, passing objects over a remoting session absolutely can break things. It's hard to call it a bug when it's just the only way that can work at all currently. \ud83d\ude01 \r\n\r\nIf it's able to work as-is in pwsh with just a -SkipEditionCheck that's probably the best way to handle it, but a lot of the Windows modules don't play so well with that either.",
      "created_at": "2020-05-18T00:21:48Z",
      "updated_at": "2020-05-18T00:22:14Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "Is there any way to force skipping edition check \"on the fly\" for some modules (some kind of per-module configuration)? Because this exact module is actually made available \"by default\" by the system, and usually no Import-Module is needed for using it.",
      "created_at": "2020-05-18T00:32:00Z",
      "updated_at": "2020-05-18T00:32:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there any way to force skipping edition check \"on the fly\" for some modules \r\n\r\nThe module is OS component so it should be tested and marked as Core compatible by MSFT.\r\nYou could use UserVoice site and/or Windows 10 Feedback tool to send the request to the module owners.",
      "created_at": "2020-05-18T03:10:56Z",
      "updated_at": "2020-05-18T03:10:56Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "So is there not a \"hack\" how to make it \"marked\" on my end only, by patching some files and whatnot?",
      "created_at": "2020-05-18T08:19:09Z",
      "updated_at": "2020-05-18T08:19:09Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "Made a UserVoice related topic: https://windowsserver.uservoice.com/forums/295047-general-feedback/suggestions/40450393-make-deduplication-powershell-commands-compatible\r\n\r\n<blockquote><img src=\"https://s3.amazonaws.com/uploads.uservoice.com/logo/design_setting/268950/original/WinServer_122x21_logoOnly.png?1430517494\" width=\"48\" align=\"right\"><div>Windows Server</div><div><strong><a href=\"https://windowsserver.uservoice.com/forums/295047-general-feedback/suggestions/40450393-make-deduplication-powershell-commands-compatible\">Make Deduplication powershell commands compatible with Powershell Core</a></strong></div><div>Right now when trying to use commands like Get-DedupStatus or Get-DedupVolume from PowerShell Core - the output is incorrect, i.e. content of some tables aren't displayed. If before using I load the module via Import-Module -SkipEditionCheck Deduplication, it starts working fine.\r\n\r\nPlease mark the module as compatible with PowerShell Core and/or test if it is actually compatible!\r\n\r\nRelated bug in PowerShell Core repository: https://github.com/PowerShell/PowerShell/issues/12702</div></blockquote>",
      "created_at": "2020-05-18T10:18:08Z",
      "updated_at": "2020-05-18T10:18:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@Evengard if the module in question has a `PSD1` file you can look to add the `PSEdition` (or was it `CompatiblePSEditions`? one of those) field in the manifest with `'Desktop', 'Core'` values in order for pwsh to always attempt to import it directly rather than via remoting.\r\n\r\nYMMV though, but worth a shot I suppose. \ud83d\ude42 ",
      "created_at": "2020-05-18T12:59:41Z",
      "updated_at": "2020-05-18T13:00:03Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "There is nothing of the sorts. The only thing which may be kinda close is `PowerShellVersion=\"3.0\"`, but there is nothing about PSEditions",
      "created_at": "2020-05-18T13:07:20Z",
      "updated_at": "2020-05-18T13:07:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, you'll need to add the key to the manifest, it doesn't usually exist on older modules. Best check one of the builtin powershell module manifests to see what the expected key name is.",
      "created_at": "2020-05-18T13:28:44Z",
      "updated_at": "2020-05-18T13:29:03Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "Yup, adding `CompatiblePSEditions=\"Core\",\"Desktop\"` actually worked. Although I'm a bit worried about Windows System File Protection...\r\nUPD: yup, sfc /scannow actually fails after this change. Too bad... There is no way to override a module definition file elsewhere?",
      "created_at": "2020-05-18T13:32:42Z",
      "updated_at": "2020-05-18T13:40:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not that I'm aware of. You could opt to copy the module completely into a powershell 7-specific modules directory on your PSModulePath with the modified manifest and leave the system copy untouched?",
      "created_at": "2020-05-18T15:03:20Z",
      "updated_at": "2020-05-18T15:03:36Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "Yep, that actually worked! \r\nActually I went even further:\r\n`mklink /J %userprofile%\\Documents\\PowerShell\\Modules\\Deduplication C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Deduplication`\r\nAfter this I didn't even needed to edit the module definition file at all! It just loaded natively.\r\nI consider this kinda \"workarounded\" for now.\r\n\r\nIf you want it to apply to all users, do\r\n`mklink /J \"C:\\Program Files\\PowerShell\\Modules\\Deduplication\" C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Deduplication`",
      "created_at": "2020-05-18T15:10:57Z",
      "updated_at": "2020-05-18T15:25:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-20T00:00:09Z",
      "updated_at": "2020-05-20T00:00:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Is there any way to force skipping edition check \"on the fly\"\r\n\r\nThis is deliberate, since it's not really something we want to encourage.\r\n\r\nYou could create a wrapper module with the same manifest. Then add a psm1 with the single line: `Import-Module <path-to-system-module> -SkipEditionCheck`. That way, if the module is updated in some way, everything will still work.",
      "created_at": "2020-05-20T02:42:14Z",
      "updated_at": "2020-05-20T02:42:14Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "I guess a junction link would act similarly after all, except that we would also use the actual module definition?",
      "created_at": "2020-05-20T13:15:02Z",
      "updated_at": "2020-05-20T13:15:02Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah a link should work fine. The issue there is that the manifest expects things to be loaded alongside, so the PSM1 with some stars in the exports might be easier. You might also consider opening an issue in https://github.com/PowerShell/WindowsCompatibility so we can track the need to port the module\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/WindowsCompatibility\">PowerShell/WindowsCompatibility</a></strong></div><div>Module that allows Windows PowerShell Modules to be used from PSCore6 - PowerShell/WindowsCompatibility</div></blockquote>",
      "created_at": "2020-05-20T20:40:00Z",
      "updated_at": "2020-05-20T20:40:02Z"
    },
    {
      "author": "Evengard",
      "author_association": "NONE",
      "body": "Opened the issue in there too (https://github.com/PowerShell/WindowsCompatibility/issues/83)",
      "created_at": "2020-05-21T00:02:04Z",
      "updated_at": "2020-05-21T00:02:04Z"
    }
  ],
  "created_at": "2020-05-17T16:34:55Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12702,
  "state": "closed",
  "title": "Dedup feature behving strange in PowerShell Core",
  "updated_at": "2020-05-21T05:55:14Z"
}