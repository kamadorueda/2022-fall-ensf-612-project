{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7197",
  "author": "mklement0",
  "body": "#3428 discusses the perennial point of PowerShell's current filesystem location not being in sync with .NET's, which causes surprising behavior whenever relative paths are passed to .NET methods.  \r\n(Sadly, there seems to be no good fundamental solution to this problem.)\r\n\r\nThe pain could be alleviated if there were an easy way to convert relative filesystem paths to _absolute_ ones, so that the latter can be passed to the .NET methods for predictable behavior.\r\n\r\nWhile `Convert-Path`'s purpose is to convert (relative or not) paths to provider-native absolute paths (e.g., by resolving custom-PS-drive-based paths to their underlying filesystem paths), `Convert-Path` currently requires that the input path _already exist_.\r\n\r\nHowever, you may find yourself wanting to convert a path _about to be created_ to `Convert-Path`, e.g. when trying to use `[io.file]::WriteAllText()` with the name of a new file to be created in the current location.\r\n\r\nTo that end, a new switch such as `-NoCheck` could be introduced that simply converts the path _formally_, whether or not it ends up referring to an existing item.\r\n\r\nNote: Arguably, `Convert-Path` should always have _defaulted_ to this behavior, but I presume that changing this now would be considered an unacceptable breaking change.\r\n\r\nThis could be complemented with a `-PSProvider` parameter that would allow you to target a specific provider irrespective of the current location's, thus allowing the use of `-PSProvider FileSystem` in order to reliably target the filesystem provider.\r\n\r\nFor example, you could then use the following code to reliably create a new file in the current PS filesystem location:\r\n\r\n```powershell\r\n# Wishful thinking\r\n# Add -PSProvider FileSystem if there's a chance that the current location is \r\n# not a filesystem one.\r\n[io.file]::WriteAllText((Convert-Path -NoCheck fileInCurrentDir.txt), 'file content') \r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3\r\n```\r\n",
  "closed_at": "2018-11-26T22:04:28Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do cmd.exe and .Net keep current path state internally or get from OS?",
      "created_at": "2018-06-28T07:21:44Z",
      "updated_at": "2018-06-28T07:21:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nMy understanding is that every process has a current directory (working directory) associated with it, which .NET reflects in `[Environment]::CurrentDirectory` and cmd.exe  in `%CD%`.\r\n\r\nMy guess is that cmd.exe and .NET both rely directly on the process's current directory and that it is only PowerShell that \"does its own thing\" where its notion of the current filesystem directory can deviate from the process's.\r\n",
      "created_at": "2018-06-28T13:02:41Z",
      "updated_at": "2018-06-28T13:02:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> PowerShell that \"does its own thing\"\r\n\r\nThen it is a problem of documenting and learning.\r\n\r\n[io.file]::WriteAllText and cmdlets use string as paths. But first uses .Net path, second uses filesystem path - it is different things. They are the same for full paths, but may differ for relative paths. We should treat it as two different namespaces otherwise we have to fix then other possible scenarios. \r\n\r\nIf someone wants to use methods ([io.file]::WriteAllText) instead of cmdlets why would he want to use the cmdlet to get the full path? It can use `[System.IO.FileInfo]::new(...).FullPath`.",
      "created_at": "2018-06-28T13:26:56Z",
      "updated_at": "2018-06-28T13:26:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Then it is a problem of documenting and learning.\r\n\r\nIt's a matter of _convenience_ that is _rooted in already knowing the underlying problem_ of not being able to assume that relative paths work the same in both worlds.  \r\nThat said, documenting is obviously _also needed_ - see https://github.com/PowerShell/PowerShell-Docs/issues/2626\r\n\r\n> why would he want to use the cmdlet to get the full path?  It can use [System.IO.FileInfo]::new(...).FullPath\r\n\r\nBecause it offers a predictable, robust way to pass a PS path to .NET, whether the path is relative or not, whether it is based on a custom PS drive or not, and because it is a natural extension of the existing `Convert-Path` functionality.\r\n\r\n`[System.IO.FileInfo]::new(...).FullName`, aside from being awkward to type, suffers the very same problem as the one this proposal is trying to solve: if you pass it a _relative_ path, it will be resolved relative to `[Environment]::CurrentDir`, not to _PowerShell_'s current filesystem location.\r\n\r\nIt is really too bad that the two directory locations cannot be kept in sync, but it sounds like PowerShell's multiple-runspaces-per-process feature prevents a good solution (see the linked issue).\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-28T14:06:05Z",
      "updated_at": "2018-06-28T15:10:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">It is really too bad that the two directory locations cannot be kept in sync\r\n\r\n:-) Why bad? If we want keep the state in every runspace - want? - we have not two but many cwd. It is simple and clear. \r\n\r\n> [System.IO.FileInfo]::new(...).FullName, aside from being awkward to type, suffers the very same problem as the one this proposal is trying to solve: if you pass it a relative path, it will be resolved relative to [Environment]::CurrentDir, not to PowerShell's current filesystem location.\r\n\r\nI meant that the user should stay within the same namespace.\r\nWhy would  anybody want to convert PowerShell path to .Net path? If we have scenarios where we really can't do without it, it's more useful to enhance the capabilities of PowerShell. Otherwise, we're opening an infinite path to fix PowerShell behaviors. For example, someone will want a reverse operation - convert .Net path to a PowerShell path, etc.\r\n",
      "created_at": "2018-06-28T15:53:57Z",
      "updated_at": "2018-06-28T15:53:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> :-) Why bad? If we want keep the state in every runspace [...] \r\n\r\nYes, I recognize that the multiple runspaces are a good reason not to attempt to syncing the current directories, and that the best we can do is to offer a clear and reliable method for handling the discrepancy.\r\n\r\nThe reasons the the issue isn't clear and simple _from the end user's perspective_ are:\r\n\r\n* Most users aren't even aware of multiple runspaces and how they relate to processes.\r\n* They are used to a given process having a _single_ current directory, not least because that's how it works when you call an _external program_.\r\n* They are used to thinking of the .NET framework as a readily available lower layer they can call at their convenience, often (loosely) _interchangeably_ with native PS functionality (e.g, `.Split()` vs. `-split`).\r\n* With the advent of UTF-8 as the default, the problem has lessened, but there are many workarounds out there that rely on calling `[System.IO.*]` types.\r\n\r\n> Why would anybody want to convert PowerShell path to .Net path? \r\n\r\nFor the same reason that the `Convert-Path` cmdlet exists in the first place:\r\n\r\nTo translate PS-specific paths into paths _understood by the outside world_ - which, by the way, is _not limited to calling .NET_.\r\n\r\nWhat I'm proposing is a natural extension of this functionality.\r\n\r\n> it's more useful to enhance the capabilities of PowerShell.\r\n\r\nThat's a separate issue - well worth pursuing - but a false dichotomy in the context of this discussion.\r\n",
      "created_at": "2018-06-28T16:26:30Z",
      "updated_at": "2019-09-06T14:10:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just realized that this is a duplicate of the much older #2993.\r\n\r\n@iSazonov, can you please mark this as a duplicate?",
      "created_at": "2018-11-26T22:04:28Z",
      "updated_at": "2018-11-27T03:48:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I think we would get more progress if we added Pester test prototypes to issue text description :-)",
      "created_at": "2018-11-27T03:46:57Z",
      "updated_at": "2018-11-27T03:46:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for labeling, @iSazonov, but I don't understand your comment.",
      "created_at": "2018-11-27T03:49:49Z",
      "updated_at": "2018-11-27T03:49:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry. We need tests before merge a PR. The Pester tests is exact contracts. If we create the tests in an issue discussion time we will speed up the fix creation. If there is an approved contract, even a novice developer can prepare fix.",
      "created_at": "2018-11-27T04:44:20Z",
      "updated_at": "2018-11-27T04:44:20Z"
    }
  ],
  "created_at": "2018-06-27T22:06:36Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Discussion",
    "WG-Cmdlets-Management"
  ],
  "number": 7197,
  "state": "closed",
  "title": "Allow Convert-Path to convert paths that don't exist [yet] and allow specifying the target provider",
  "updated_at": "2019-09-06T14:10:39Z"
}