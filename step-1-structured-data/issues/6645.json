{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6645",
  "author": "markekraus",
  "body": "Reported to me this week at the PowerShell summit was that the Cookies are not working on macOS when passing a session object.\r\n\r\nI have yet to get a repro or the exact details of the issue, but I'm documenting it here for further investigation.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure how useful it'll be, but since I'm here anyway, this might come in handy (aka \"it's dangerous to go alone, take this\"):\r\n```powershell\r\nfunction Get-WebSessionCookies {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Position = 0, Mandatory, ValueFromPipeline)]\r\n        [Alias('Session', 'InputObject')]\r\n        [ValidateNotNull()]\r\n        [Microsoft.PowerShell.Commands.WebRequestSession]\r\n        $WebRequestSession\r\n    )\r\n    begin {}\r\n    process {\r\n        $CookieContainer = $WebRequestSession.Cookies\r\n        try {\r\n            [hashtable] $Table = $CookieContainer.GetType().InvokeMember(\"m_domainTable\",\r\n                [System.Reflection.BindingFlags]::NonPublic -bor\r\n                [System.Reflection.BindingFlags]::GetField -bor\r\n                [System.Reflection.BindingFlags]::Instance,\r\n                $null,\r\n                $CookieContainer,\r\n                @()\r\n            )\r\n            Write-Output $Table.Values.Values\r\n        }\r\n        catch {\r\n            $PSCmdlet.ThrowTerminatingError($_)\r\n        }\r\n    }\r\n    end {}\r\n}\r\n```\r\n(Because it's low-key a bit of a pain to pull all the cookie data from a websession at times). :) ",
      "created_at": "2018-04-21T05:13:26Z",
      "updated_at": "2018-04-21T05:13:26Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Using the following I was able to verify that cookies are working as expected:\r\n\r\n```powershell\r\n$uri = 'https://httpbin.org/cookies/set?k1=v1&k2=v2'\r\n$uri2 = 'https://httpbin.org/cookies'\r\n$Session = $null\r\n$res = Invoke-WebRequest $uri -SessionVariable Session\r\n$res2 = Invoke-WebRequest $uri2 -WebSession $Session\r\n$res.Content\r\n$res2.Content\r\n```\r\n\r\nResult:\r\n\r\n```json\r\n{\"cookies\":{\"k1\":\"v1\",\"k2\":\"v2\"}}\r\n```\r\n\r\n```json\r\n{\"cookies\":{\"k1\":\"v1\",\"k2\":\"v2\"}}\r\n```\r\n\r\nI will try reaching out to the users who reported this and get more details.",
      "created_at": "2018-05-10T09:22:19Z",
      "updated_at": "2018-05-10T09:22:19Z"
    },
    {
      "author": "plmcgrn",
      "author_association": "NONE",
      "body": "I was able to reproduce this with Invoke-RestMethod, but not Invoke-WebRequest.  It appears that Invoke-RestMethod doesn't play well with object scopes or something, as the session variable is always null unless I'm referencing it from within the same function.\r\n\r\nMy code is a bit more involved than the above, as I wanted to make the actual REST API request into a reusable function, so I'm passing in headers, body, etc. to that function, and returning a hashtable with both the session and response objects.  If you are running code all in one shot, it seems to work.\r\n\r\nLike, this works:\r\n```\r\n\r\n$session = $null\r\n$response = Invoke-RestMethod -Uri 'http://www.google.com' -method 'GET' -SessionVariable session                 \r\n\r\n$session.cookies\r\n\r\nCapacity Count MaxCookieSize PerDomainCapacity\r\n-------- ----- ------------- -----------------\r\n     300     2          4096                20\r\n\r\n\r\n```\r\nHowever, creating a PowerShell script and directly calling functions in the script to do this, will not.  \r\nThe resulting object you'd return from a function containing Invoke-RestMethod does not have a session object with cookies in it.\r\n\r\nObviously the workaround to this would be to use Invoke-WebRequest and then process the response body for JSON/XML, but it's not simple as Invoke-RestMethod automatically doing that.",
      "created_at": "2018-07-01T19:48:28Z",
      "updated_at": "2018-07-01T19:50:24Z"
    },
    {
      "author": "plmcgrn",
      "author_association": "NONE",
      "body": "Here's an example of the broken behavior in Invoke-RestMethod where the Session is populated, but the cookies within the Session are null.\r\n\r\n```\r\nfunction Get-IninSession {\r\n    #build request params\r\n    $params = @{\r\n        uri = $ininprotocol + '://' + $ininhost + ':' + $ininport + '/icws/connection';\r\n        Method = 'POST'; \r\n        Headers = @{\r\n            'Accept-Language' = 'en-us';\r\n        } #end headers hash table\r\n    } #end $params hash table\r\n\r\n    $body = @{\r\n        __type = 'urn:inin.com:connection:icAuthConnectionRequestSettings';\r\n        applicationName = 'ICWS PowerShell Application';\r\n        userID = $acctname;\r\n        password = $pwd\r\n    }\r\n\r\n    #Send the API call to 'get a new login session'    \r\n    $response = Invoke-RestMethod @params -body (ConvertTo-Json $body) -SessionVariable session -SkipCertificateCheck\r\n    \r\n    $responsehash = @{\r\n        response = $response;\r\n        session = $session\r\n    }\r\n\r\n    return $responsehash\r\n}\r\n```\r\nThen running  `$r = Get-IninSession` will work, and return the hashtable of the REST response and Session variable.\r\n\r\n```IninUtilities> $r                                               \r\n\r\nName                           Value                                                                            \r\n----                           -----                                                                            \r\nsession                        Microsoft.PowerShell.Commands.WebRequestSession                                  \r\nresponse                       @{csrfToken=WAtwYXVsLm1jZ3VyblgbSUNXUyBQb3dlclNoZWxsIEFwcGxpY2F0aW9uWCQ0ZjIxNz...\r\n```\r\nAnd we can see that Session is not completely null:\r\n```IninUtilities> $r.session                                       \r\n\r\n\r\nHeaders               : {[Accept-Language, en-us]}\r\nCookies               : System.Net.CookieContainer\r\nUseDefaultCredentials : False\r\nCredentials           : \r\nCertificates          : \r\nUserAgent             : Mozilla/5.0 (Macintosh; Darwin 17.5.0 Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 \r\n                        PST 2018; root:xnu-4570.51.1~1/RELEASE_X86_64; en-US) PowerShell/6.0.2\r\nProxy                 : \r\nMaximumRedirection    : -1\r\n```\r\n\r\nHowever `$r.session.cookies` will be empty (count is 0)\r\n```IninUtilities> $r.session.cookies                               \r\n\r\nCapacity Count MaxCookieSize PerDomainCapacity\r\n-------- ----- ------------- -----------------\r\n     300     0          4096                20\r\n```",
      "created_at": "2018-07-01T20:27:01Z",
      "updated_at": "2018-07-01T20:27:27Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I cannot reproduce this.\r\n\r\n```powershell\r\nFunction Test-SessionScope {\r\n    #build request params\r\n    $params = @{\r\n        uri = 'https://httpbin.org/cookies/set?cookie=a'\r\n        Method = 'GET'\r\n    } \r\n    $response = Invoke-RestMethod @params -SessionVariable session\r\n    \r\n    [PSCustomObject]@{\r\n        cookieCount = \"{0}\" -f $Session.cookies.Count\r\n        response = $response\r\n        session = $session\r\n    }\r\n}\r\n\r\n$result = Test-SessionScope\r\n\r\n$result.cookieCount\r\n$result.response\r\n$result.session.Cookies.GetCookies('https://httpbin.org/cookies/')\r\n````\r\n\r\nResult:\r\n\r\n```none\r\n1\r\n\r\ncookies\r\n-------\r\n@{cookie=a}\r\n\r\nComment    :\r\nCommentUri :\r\nHttpOnly   : False\r\nDiscard    : False\r\nDomain     : httpbin.org\r\nExpired    : False\r\nExpires    : 1/1/0001 12:00:00 AM\r\nName       : cookie\r\nPath       : /\r\nPort       :\r\nSecure     : True\r\nTimeStamp  : 1/23/2019 5:42:55 PM\r\nValue      : a\r\nVersion    : 0\r\n```\r\n",
      "created_at": "2019-01-24T01:44:42Z",
      "updated_at": "2019-01-24T01:44:42Z"
    }
  ],
  "created_at": "2018-04-13T05:28:12Z",
  "labels": [
    "WG-Cmdlets-Utility"
  ],
  "number": 6645,
  "state": "open",
  "title": "Web Cmdlets Session Cookies not working on macOS",
  "updated_at": "2019-01-24T01:44:42Z"
}