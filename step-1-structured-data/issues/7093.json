{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7093",
  "author": "mklement0",
  "body": "### Background\r\n\r\nIn the absence of arguments provided for mandatory cmdlet / advanced function parameters, PowerShell automatically prompts the user.\r\n\r\nThese prompts support `!`-prefixed commands:\r\n\r\n* `!?` displays the help message associated with the parameter at hand, assuming a `helpMessage` argument  was provided as part of the parameter's `[Parameter()]` attribute.\r\n\r\n* `!\"\"` allows entering an empty string as an argument - this is necessary for array-valued parameters that permit empty strings as elements, such as `[string[]]`-typed parameters with the `[AllowEmptyString()]` attribute, because submitting nothing (just pressing <kbd>Enter</kbd>) signals the end of the input for that parameter, i.e., it is how you signal that all array elements have been entered.\r\n\r\n* `!!` is needed to escape a `!` at the beginning of a value; e.g., in order to submit `!foo`, `!!foo` must be typed.\r\n\r\nAs an aside: These commands unexpectedly also surface when you use `Read-Host -Prompt`, even though they serve no purpose there - see #4066.\r\n\r\n### Problems with the current behavior\r\n\r\nCurrently, when a mandatory prompt is shown, only the `!?` command is mentioned, and only if the parameter at hand has a help message defined.\r\n\r\nBy contrast, the existence of `!\"\"` and `!!` is not mentioned, and currently not even _documented_.\r\n\r\nSimilarly, it isn't documented that only _literal_ values can be entered by the user - no references to variables or subexpressions are evaluated as such.\r\n\r\nAdditional problems (not the focus of this issue):\r\n\r\n* #4068 discusses how automatic prompting doesn't work (meaningfully) for parameters types `[scriptblock]`, `[hashtable]` or `[bool]` / `[switch]`, with a fix being considered that disables automatic prompting for `[scriptblock]`, `[hashtable]`, and fixes `[bool]` / `[switch]` prompting to present Y/N-style prompts.\r\n\r\n* No tab completion is offered for `[ValidateSet()]`-constrained parameters, and entering an invalid value _aborts_ the prompt rather than given the user a chance to correct the problem.\r\n\r\n* Conversely, empty input can result in unexpected conversion, such a empty input for a mandatory `[int]` parameter getting interpreted as `0`.\r\n\r\n* As stated, only input of _literals_ is supported - allowing expressions would have to be carefully designed.\r\n\r\n* A corollary of the above is that you cannot enter `$null` (for parameters with `[AllowNull()]`).\r\n\r\n* The wording of the prompt messages should be improved.\r\n\r\n* A potential UX improvement would be to present the resulting command for final inspection to the user before submitting it, both as a safety measure and as a teaching tool (to show how the command could have been submitted non-interactively).\r\n\r\nIn short: A nontrivial amount of effort would be needed to make automatic prompting work comprehensively and in a user-friendly manner. \r\nThe solution proposed here is just a small step in that direction.\r\n\r\n### Possible solution\r\n\r\n_Eliminate_ the prompt commands altogether:\r\n\r\n* Simply print the help message *by default*, if present, obviating the need for the `!?` command.\r\n\r\n* A `!` at the start of a user-typed value would then no longer require escaping as `!!`.\r\n\r\n* The only downside is the loss of `!\"\"` for entering empty strings, but given the rarity of the need for this and the other holes in the automatic prompting functionality, that price seems worth paying.\r\n\r\nOf course, if automatic prompting is ever fixed to work comprehensively, the ability to enter empty strings would need to be restored somehow.\r\nAt this point that doesn't sound likely, however.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is it worth considering automatically including the `[Paramater(HelpMessage = \"Text\")]` information in the mandatory prompt itself, rather than waiting for the user to enter `!?` in order to see the information?\r\n\r\nHeck, even being able to specify that with a new attribute property would be nice, but reusing HelpMessage for this would be nice (as it often seems that is the perceived intent of the property anyway).",
      "created_at": "2018-09-11T14:23:13Z",
      "updated_at": "2018-09-11T14:23:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32:\r\n\r\nRe `HelpMessage`: Indeed, and it's what I meant to say by:\r\n\r\n> Simply print the help message _by default_, if present, obviating the need for the `!?` command.\r\n\r\n",
      "created_at": "2018-09-11T14:43:26Z",
      "updated_at": "2018-09-11T14:43:26Z"
    }
  ],
  "created_at": "2018-06-17T15:15:59Z",
  "number": 7093,
  "state": "open",
  "title": "Improve user guidance during automatic prompting for mandatory parameter values",
  "updated_at": "2018-09-11T14:43:26Z"
}