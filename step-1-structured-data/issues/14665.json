{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14665",
  "author": "StartAutomating",
  "body": "## Summary of the new feature/enhancement\r\n\r\nIt would be helpful to be see the output from Get-Member or from reflection in a color.  \r\n\r\nIt would be even better if that colorization could support changes in the Windows Terminal color scheme.\r\n\r\n## Proposed technical implementation details\r\n\r\nI'm pretty sure this could be accomplished with the build-in formatting engine.  In fact, I've prototyped an example.\r\n\r\nThis is it running under the default color scheme of PowerShell in Terminal:\r\n![Start-Job {\"brb\"}| Get-Member  | Format-Table -View Get-Member-In-Color](https://github.com/StartAutomating/EZOut/raw/Get-Member-Colorized/Assets/Get-Member-In-Color-Job.gif) \r\n\r\nThis is it running under the 'Jackie Brown' color scheme of PowerShell on Kali-Linux on WSL:\r\n![[console] | Get-Member -Static | Format-Table -View Get-Member-In-Color](https://github.com/StartAutomating/EZOut/raw/Get-Member-Colorized/Assets/Get-Member-In-Color-Console-Static.gif) \r\n\r\nThese are from [EZOut](https://github.com/StartAutomating/EZOut), a module that produces .format.ps1xml and .types.ps1xml files.  This module already has a couple of colorized views for reflection, visible with Format-Custom:\r\n\r\n![[string] | Format-Custom -view System.Type.Full](https://github.com/StartAutomating/EZOut/raw/master/Assets/System.Type.Full.gif)\r\n\r\n\r\n\r\nWhile these improve my own experience of using PowerShell, I think it would benefit PowerShell overall to include some formatting like this \"in the box\".  \r\n\r\nWhat would be needed to redefine the formatter for a given built-in type?",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is a good idea, but I think it can be done outside of PowerShell as a module. Basically, you override the default view for `Microsoft.PowerShell.Commands.MemberDefinition` when the module is being loaded, and restore the original view when module is unloaded.\r\n\r\nHere is an example module to show how to override the default view of `Microsoft.PowerShell.Commands.MemberDefinition`: [TestModule.zip](https://github.com/PowerShell/PowerShell/files/5882767/TestModule.zip)\r\n\r\nIt calls `Update-FormatData -PrependPath` to prepend the new view definition to the original views. Also, since the `test.ps1xml` formating file is decalred in `FormatsToProcess` in the module manifest, view definitions in `test.ps1xml` will be removed when the module is being unloaded.\r\n\r\nIn the example, I add a the column `TypeName` to the new table view. Here is how it works:\r\n```none\r\nPS:5> [System.IO.Path] | gm -Static -Name Join\r\n\r\n   TypeName: System.IO.Path\r\n\r\nName MemberType Definition\r\n---- ---------- ----------\r\nJoin Method     static string Join(System.ReadOnlySpan[char] path1, System.ReadOnlySpan[char] path2), static string Join(System.ReadOnlySpan[char] p\u2026\r\n\r\nPS:6> Import-Module .\\TestModule\r\nPS:7> [System.IO.Path] | gm -Static -Name Join\r\n\r\n   TypeName: System.IO.Path\r\n\r\nTypeName       Name MemberType Definition\r\n--------       ---- ---------- ----------\r\nSystem.IO.Path Join Method     static string Join(System.ReadOnlySpan[char] path1, System.ReadOnlySpan[char] path2), static string Join(System.ReadO\u2026\r\n\r\nPS:8> Remove-Module TestModule\r\nPS:9> [System.IO.Path] | gm -Static -Name Join\r\n\r\n   TypeName: System.IO.Path\r\n\r\nName MemberType Definition\r\n---- ---------- ----------\r\nJoin Method     static string Join(System.ReadOnlySpan[char] path1, System.ReadOnlySpan[char] path2), static string Join(System.ReadOnlySpan[char] p\u2026\r\n\r\nPS:10>\r\n```\r\n\r\nYou can optionally leverage the `$PSStyle` variable enabled in https://github.com/PowerShell/PowerShell/pull/13758. But that would make your module require 7.2+ version of PowerShell to work.\r\n\r\n",
      "created_at": "2021-01-27T20:15:01Z",
      "updated_at": "2021-01-27T20:15:01Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": "I am aware it can be done in another module (see the proof of concept).\r\n\r\nConsidering the multitude of issues that happen when a module manually loads formatters, I'm not keen on overriding the default using that technique, as it would present isssues for my users on module load/unload.\r\n\r\nMore to the point, the suggestion here was \"would this sort of a formatter be good for all users\".  If it's limited to whatever module someone goes and finds, then the average user of PowerShell doesn't get to see any of the benefit.\r\n\r\nIs this something PowerShell itself might consider doing \"in the box\" ? ",
      "created_at": "2021-01-27T20:21:33Z",
      "updated_at": "2021-01-27T20:21:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I am aware it can be done in another module (see the proof of concept).\r\n\r\nI see you are using `Format-Table -view` explicitly, so I guess you might not know how to make it override the default, and hence the example.\r\n\r\nFor features that don't have to be in-box, we recommend to go with a module in PowerShell Gallery first, so the idea can be tested and used by users. Once it proves its success and popularity, it will be the time to discuss whether that feature should be built-in PowerShell.",
      "created_at": "2021-01-27T20:31:09Z",
      "updated_at": "2021-01-27T20:31:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Considering the multitude of issues that happen when a module manually loads formatters, I'm not keen on overriding the default using that technique, as it would present isssues for my users on module load/unload.\r\n\r\nPlease open issues if you run into problems with module manually loading formatters.",
      "created_at": "2021-01-27T20:33:32Z",
      "updated_at": "2021-01-27T20:33:32Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": "Format-Table -View was used so that it did not conflict with the built-in-formatter.\r\n\r\nUpdate-FormatData is not the desired way update formatting _within a module_.   This had historically been due to issues with the formatter not being unloaded when the module unloads.\r\n\r\nIf you can link me to an issue history showing these have been addressed, or to official guidance recommending the use of Update-FormatData, then I can consider it.  Do you have knowledge of these past bugs and when they have been fixed?\r\n\r\nAs far as the suggestion goes, it seems like your current recommendation would be that I release this update into my module and encourage users to update this thread over time requesting it in box.  Is that correct?",
      "created_at": "2021-01-27T20:39:33Z",
      "updated_at": "2021-01-27T20:39:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Update-FormatData is not the desired way update formatting within a module. This had historically been due to issues with the formatter not being unloaded when the module unloads.\r\n\r\nNormally, you don't need `Update-FormatData` in a module as you can declare the format.ps1xml file in the `FormatsToProcess` field of the module manifest file. That will load the specified format file in a `append` manner, which doesn't affect the existing default view.\r\n\r\nFor the sceanrio we are discussing here, I guess you want to override the default view, so `Update-FormatData -PrependPath test.format.ps1xml` is required to run. Since `test.format.ps1xml` is declared in the `FormatsToProcess` field of the module manifest file, the module system will unload view definitions from this file when the module is unloaded. As shown in the demo I pasted above, after `Remove-Module TestModule`, the original view for `MemberDefinition` is back in effect.\r\n\r\n> As far as the suggestion goes, it seems like your current recommendation would be that I release this update into my module and encourage users to update this thread over time requesting it in box. Is that correct?\r\n\r\nWe probably will close this issue for now. When you think your module has proven to be successful and popular, you can open a new issue to propose including it in PowerShell as default.\r\n\r\nMaking a feature proposal a separate module has many benifits. It can move way faster to validate different designs/ideas. For example, if you would have a module for this, it may be more generic than just the view definitions for `MemberDefinition`, and you may also want to consider how to make it configurable so different color can be used for different elements in formatting.",
      "created_at": "2021-01-27T21:52:37Z",
      "updated_at": "2021-01-27T21:52:37Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": ">For the sceanrio we are discussing here, I guess you want to override the default view, so Update-FormatData -PrependPath test.format.ps1xml is required to run. Since test.format.ps1xml is declared in the FormatsToProcess field of the module manifest file, the module system will unload view definitions from this file when the module is unloaded. As shown in the demo I pasted above, after Remove-Module TestModule, the original view for MemberDefinition is back in effect.\r\n\r\nSo you're suggesting that in the case that I want to override a default formatter, specify it in \"formatstoprocess\" but then load it again within the .psm1 using Update-FormatData -Prepend path?  And have confirmed that this works as intended (at least on 7+)?\r\n\r\n\r\n---\r\n\r\n### As for the issue:\r\n\r\nAs it was requested that I open the issue here to track it, and the functionality is quite new, I think closing this issue out would be premature.\r\n\r\nEZOut has been downloaded a few thousand times since it's creation.  It's been used to create formatting for dozens of modules, including ones built by Microsoft (SCOM 2012, TTK).  Also, as EZOut is a built tool and not something packaged with a module, it's influence outstrips it's individual downloads.  To be 100% clear here I am not suggesting a merge of the tool into PowerShell, just a formatter. \r\n\r\nAdditionally,  I'm not suggesting taking _exactly_ this formatter.  I was led to believe that it would be ideal to open a thread to see what others wanted out of such a formatter.\r\n\r\nIf this is the intent, it seems that this issue should remain open long enough to collect feedback from others.  I would suspect that would take more than two days.",
      "created_at": "2021-01-27T22:05:07Z",
      "updated_at": "2021-01-27T22:05:07Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": "Also, FYI, the current form of that _is_ customizable.  As the two screenshots show, it uses the core 16-color ANSI set so that it can render properly in different Terminal themes.\r\n\r\nIt could be made more customizable by exposing a setting in the PSColors section of the manifest (this was an innovation of EZOut about a year ago that I'd _love_ to make sure PowerShell adopts in a way that is compatible with the existing module ecosystem).\r\n\r\nAs a general rule, user feedback has tended to prefer color schemes that auto-adapt to Terminal themes.",
      "created_at": "2021-01-27T22:14:53Z",
      "updated_at": "2021-01-27T22:14:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> So you're suggesting that in the case that I want to override a default formatter, specify it in \"formatstoprocess\" but then load it again within the .psm1 using Update-FormatData -Prepend path? And have confirmed that this works as intended (at least on 7+)?\r\n\r\nI expect it to work, and it works fine in the provided example. If you run into any problems, please open new issues so we can investigate.\r\n\r\n> To be 100% clear here I am not suggesting a merge of the tool into PowerShell, just a formatter.\r\n\r\nUnderstood. I was talking about the formatters only. What you're proposing here is not a tool to generate formating file, but new views.\r\n\r\n> Additionally, I'm not suggesting taking exactly this formatter.\r\n\r\nRight, that's exactly why having it done as a separate module would be benificial -- ideas and designs can be experimented/validated way faster than having it done in PowerShell itself.\r\n\r\n> If this is the intent, it seems that this issue should remain open long enough to collect feedback from others.\r\n\r\nI'm totally fine keeping this issue open. We are experimenting the new [Working Group governance](https://github.com/PowerShell/PowerShell/pull/14603), and we will get more clarities on how to deal with proposal issues like this one.",
      "created_at": "2021-01-27T22:32:12Z",
      "updated_at": "2021-01-27T22:32:12Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": "Ok.\r\n\r\nSo, for the moment:\r\n\r\n1. I will try to see if Update-FormatData -Prepend works as desired/expected on 5.1+.\r\n2. Assuming it does, I will switch around some overrides of \"built in\" formatters in EZOut itself.\r\n3. I'll merge that into new bits and promote the new bits\r\n4. I'll put some text on that project page linking to this issue / similar issues for other formatters that could be \"built in\", so that users can more easily find this an upvote.\r\n\r\n\r\nDoes this sound right?\r\n\r\nAnything else you'd recommend?\r\n\r\nAlso, can you point me to documentation on whatever use of .PSColor in PrivateData you are considering?  I have heard of such changes, but cannot find a link describing them to ensure that the changes PowerShell makes do not break existing modules in the ecosystem.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-01-27T22:39:26Z",
      "updated_at": "2021-01-27T22:39:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I'll put some text on that project page linking to this issue / similar issues for other formatters that could be \"built in\", so that users can more easily find this an upvote.\r\n\r\nIt may be better to have a meta issue about enhancing various default view definitions in PowerShell.\r\nThe rest sounds right.\r\n\r\n> Also, can you point me to documentation on whatever use of .PSColor in PrivateData you are considering?\r\n\r\nYou mean `$PSStyle`? It's pretty new in 7.2 preview releases. You can find the doc here: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.2#psstyle, or take a look at its PR: https://github.com/PowerShell/PowerShell/pull/13758\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables\">about_Automatic_Variables - PowerShell</a></strong></div><div>Describes variables that store state information for PowerShell. These variables are created and maintained by PowerShell.</div></blockquote>",
      "created_at": "2021-01-27T22:49:26Z",
      "updated_at": "2021-01-27T22:49:29Z"
    },
    {
      "author": "StartAutomating",
      "author_association": "NONE",
      "body": ">> You mean $PSStyle?\r\n\r\nI mean \"is there an area of development, current or planned, that will make use of a given module's PrivateData.PSColors section\"?\r\n\r\nIt was my understanding some parts of PSStyle might use this, or that this sort of functionality was being discussed.\r\n\r\nIf I am incorrect, please let me know.  If I am correct, please link me to the issue discussing it.\r\n\r\nIf, in the future, the PowerShell team decides it _does_ want to expose color customization in a consistent way across modules, I would appreciate if this aligns to the way other modules already do this.",
      "created_at": "2021-01-27T22:57:33Z",
      "updated_at": "2021-01-27T22:57:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I mean \"is there an area of development, current or planned, that will make use of a given module's PrivateData.PSColors section\"?\r\n\r\nNot that I know of. Also, I don't recall discussion about having `$PSStyle` somehow use a module's PrivateData.PSColors section.\r\n\r\n> If, in the future, the PowerShell team decides it does want to expose color customization in a consistent way across modules\r\n\r\nThe `$PSStyle` work is the effort toward that direction. It'd be great if you can look into the details of that (PR/doc), and see whether there is anything missed that could be useful.",
      "created_at": "2021-01-27T23:16:10Z",
      "updated_at": "2021-01-27T23:16:38Z"
    }
  ],
  "created_at": "2021-01-26T04:33:45Z",
  "number": 14665,
  "state": "open",
  "title": "Enhance Get-Member/Reflection Output with Colorization",
  "updated_at": "2021-01-28T05:16:52Z"
}