{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8777",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->  \r\n\r\n## PR Summary\r\n\r\nThe suggested fix by @lzybkr is to not do this additional culture name check for the first set of folders (which should be the module name).  This PR fixes a few things:\r\n\r\n- Add logic to skip checking for possible resource directories for the first set of sub directories from the top level.\r\n- There was an additional skip if the folder is hidden, rather than doing an explicit attribute check, change the `EnumerationOption` to skip hidden folders.\r\n- Since the `IsPossibleModuleDirectory()` helper now only checks to see if the name matches a culture, renamed to `IsPossibleResourceDirectory()`\r\n- When getting the default modules, we don't search recursively into individual module folders, so removed additional check for possible resource directory.\r\n\r\n## PR Context  \r\n\r\nThe current code always checks if a potential module folder is named after a culture and assumes it contains resources files as an optimization to avoid looking in that folder.   This results in the new Az module not being found as `Az` is also the name of a culture.  \r\n\r\nFix #8125 \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.  \r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**  \r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-20T20:23:28Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The static analysis failure is not related to this PR.  I'll submit a fix for it in a separate PR.",
      "created_at": "2019-02-20T19:54:51Z",
      "updated_at": "2019-02-20T19:54:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The PR description is updated as we are not using recursion when searching for modules.",
      "created_at": "2019-02-20T20:25:37Z",
      "updated_at": "2019-02-20T20:25:37Z"
    },
    {
      "author": "ronhowe",
      "author_association": "NONE",
      "body": "Could someone help me understand the delivery vehicle and timing for this fix?  Is this a fix for Windows PowerShell 5.1 or for PowerShell Core (6.0)?  If Windows PowerShell 5.1, would that mean delivery would be part of a 5.2 type release?  Are consumers today completely blocked from building module dependencies on the new Az module until this is resolved?",
      "created_at": "2019-02-28T14:23:13Z",
      "updated_at": "2019-02-28T14:23:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ronhowe The fix is only for PowerShell Core. You'll get it in PowerShell Core 6.2 RC in hours and in release PowerShell Core 6.2 in weeks.\r\n\r\nWindows PowerShell 5.2 is not expected. Although MSFT may port this fix to 5.1.\r\n\r\n> Are consumers today completely blocked from building module dependencies on the new Az module until this is resolved?\r\n\r\nThe problem is only for auto discovering. You could use full path to explicitly load the module.",
      "created_at": "2019-02-28T17:40:45Z",
      "updated_at": "2019-02-28T17:41:06Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@ronhowe: to reiterate what @iSazonov said, our bar for servicing Windows PowerShell is very high now, and we do not plan to do a 5.2 release. This has resulted in a small handful of security and accessibility fixes, and some bug fixes to fix regressions associated with those two. \r\n\r\nThat being said, I want to talk to the Azure PowerShell team about this (/cc @sphibbs and @markcowl for context), as I don't want us limiting the adoption of `Az` in any way. \r\n\r\nIn the meantime, using `Import-Module Az` explicitly (even without the full path, I believe), the module will load and you can use it. \r\n\r\nApparently, it may also be the case that `RequiredModules` will fail because it secretly uses `Get-Module -ListAvailable` under the hood (which is where we're doing the locale optimization). \r\n\r\nBut like I said, I'll follow up with the Azure PS to get their sense of the impact.\r\n\r\nPure curiosity and off-topic, but I'd also love to hear what's keeping you from using PowerShell Core. :) ",
      "created_at": "2019-02-28T20:13:15Z",
      "updated_at": "2019-03-01T00:40:53Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Dove a little deeper on this...@ronhowe: what exactly is the problem you're experiencing? \r\n\r\nWe've confirmed that `RequiredModules` doesn't work with `Az`, but `Az` is a phony module that exports nothing, and you shouldn't be pulling every single `Az.*` module into your `RequiredModules`, you should be explicitly specifying the `Az.*` modules that you need. \r\n\r\nAdditionally, because `Az` exports nothing and is the only module affected here, autoloading shouldn't actually be impacted for any of the cmdlets in `Az.*` modules. \r\n\r\nSo again, how are you actually being affected here? ",
      "created_at": "2019-02-28T20:24:24Z",
      "updated_at": "2019-02-28T20:24:24Z"
    },
    {
      "author": "ronhowe",
      "author_association": "NONE",
      "body": "> Dove a little deeper on this...@ronhowe: what exactly is the problem you're experiencing?\r\n> \r\n> We've confirmed that `RequiredModules` doesn't work with `Az`, but `Az` is a phony module that exports nothing, and you shouldn't be pulling every single `Az.*` module into your `RequiredModules`, you should be explicitly specifying the `Az.*` modules that you need.\r\n> \r\n> Additionally, because `Az` exports nothing and is the only module affected here, autoloading shouldn't actually be impacted for any of the cmdlets in `Az.*` modules.\r\n> \r\n> So again, how are you actually being affected here?\r\n\r\nI just read this and that's the exact problem.  I can try to be more selective about what my module imports.",
      "created_at": "2019-02-28T20:41:35Z",
      "updated_at": "2019-02-28T20:46:20Z"
    },
    {
      "author": "ronhowe",
      "author_association": "NONE",
      "body": "As to why we aren't using PowerShell Core?  I'm all for that.  It's a bit more difficult to spearhead that adoption across my company.  I am at the frontline of that effort, but it's a much slower ship and we have more immediate needs.",
      "created_at": "2019-02-28T20:43:49Z",
      "updated_at": "2019-02-28T20:43:49Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "The impact is that the user is given the `AZ` as an easy way to instal and manage the Azure module with all it's dependent modules. But the user cannot call `Get-Module` to see what version of the module they have. \r\n\r\nWith everyone writing their own module install\\update logic, we have to walk the `$env:psmodulepath` just for this module to determine if we should install the module or update it. So we are leaving it on the end user to solve for this.",
      "created_at": "2019-04-01T22:03:21Z",
      "updated_at": "2019-04-01T22:03:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You'd think that the Azure team would be verifying that the module works as expected in a majority of use cases before finalizing a module structure that is actually broken on both the supposedly supported platforms.\r\n\r\nI guess for whatever reason... these cases were overlooked. I don't know that I could fault the PS team for this behaviour moreso than the Azure team for not checking that the module functions as expected with the structure they chose. :/",
      "created_at": "2019-04-01T22:08:18Z",
      "updated_at": "2019-04-01T22:08:18Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "Both teams are failing ME - the user.\r\nby not fixing in 5.x and by the AZ name not being tested properly.",
      "created_at": "2019-10-14T08:11:46Z",
      "updated_at": "2019-10-14T08:11:46Z"
    }
  ],
  "created_at": "2019-01-29T02:39:36Z",
  "number": 8777,
  "state": "closed",
  "title": "Enable discovering modules that have names same as a culture (e.g. Az)",
  "updated_at": "2019-10-14T08:11:46Z"
}