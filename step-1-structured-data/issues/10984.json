{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10984",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nSimilar to #10073, this PR enhances the splat functionality that is available in PowerShell. Instead of doing this by extending operators, this PR adds a common `-splat` parameter of type `[IDictionary[]]` that supports the following new features:\r\n\r\n- inline splat of one or more hashtables\r\n- splat of one or more hashtables by value returned from a:\r\n    - variable\r\n    - property\r\n    - command\r\n\r\nThe functionality in this PR is only available if you have the `PSCommonSplatParameter` experimental feature enabled.\r\n\r\n## PR Context\r\n\r\nThis PR helps because it extends splatting to support quite a few features that were requested by the community and described in RFC0002, which can currently be found [here](https://github.com/PowerShell/PowerShell-RFC/blob/e09b14fe01b636ea38260da9e70ff024dc32936b/2-Draft-Accepted/RFC0002-Generalized-Splatting.md). Specifically, this allows users to use inline splatting of literal hashtables, variables, properties, the result of methods, or the result of commands.\r\n\r\nI have opened this PR to offer an alternative syntax to the syntax offered in #10073 while also supporting a broader set of scenarios necessary for easier splatting in scripts.\r\n\r\nHere are some examples demonstrating how this can be used:\r\n\r\n```PowerShell\r\n# Splat a literal hashtable\r\nGet-Date -splat @{Year=1971;Month=10;Day=20}\r\n\r\n# Splat a property value\r\n$getDate = [pscustomobject]@{\r\n    Parameters = @{Year=1971;Month=10;Day=20}\r\n}\r\nGet-Date -splat $getDate.Parameters\r\n\r\n# Splat the results of a command:\r\nfunction Get-ParameterSet {\r\n    @{Year=1971;Month=10;Day=20}\r\n}\r\nGet-Date -splat (Get-ParameterSet)\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **Experimental features added**\r\n     - [X] `PSCommonSplatParameter` - Enabling this feature will make the `-splat` common parameter available to end users.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-04-24T13:16:44Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I see a couple of issues with this approach.\r\n\r\nFirst, I think this breaks a common scenario:\r\n\r\n```powershell\r\nsleep -s 10\r\n```\r\n\r\nBasically any command that has exactly 1 parameter beginning with `S` would no longer be callable by specifying `-s`.\r\n\r\nSecond, a common parameter would also not work with non-cmdlet binding functions because common parameters are not added to those functions. I think it would be a mistake to introduce an alternative syntax for splatting that doesn't work everywhere, especially when the incorrect syntax might appear to work silently as is typically the case where `$args` collects the \"extra\" parameters.",
      "created_at": "2019-11-04T17:24:21Z",
      "updated_at": "2019-11-04T17:24:21Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please restart static",
      "created_at": "2019-11-04T17:43:26Z",
      "updated_at": "2019-11-04T23:52:22Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-11-04T17:43:47Z",
      "updated_at": "2019-11-04T17:43:47Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> First, I think this breaks a common scenario:\r\n> \r\n> ```powershell\r\n> sleep -s 10\r\n> ```\r\n> \r\n> Basically any command that has exactly 1 parameter beginning with `S` would no longer be callable by specifying `-s`.\r\n\r\nThere were never any guarantees with non-alias shorthand for parameter names that such syntax will continue to work over time. Only parameter aliases can guarantee consistent syntax, and commands where it is very common to use that syntax would be better off assigning those aliases so that they do continue to work over time. For the specific scenario mentioned here, we can add a `s` alias for the `-seconds` parameter in `Start-Sleep` if that is a concern.\r\n\r\nDon't get me wrong...I get the concern -- there is muscle memory to think about. That said though, shorthand parameter names don't always work from version to version because parameters are added to commands over time. I also recognize that this is a common parameter, so more invasive, vs. a command author adding a parameter and thinking to add aliases to support specific shorthand syntax as they add that parameter. The guarantee still isn't there though, unless aliases are used.\r\n\r\n> Second, a common parameter would also not work with non-cmdlet binding functions because common parameters are not added to those functions. I think it would be a mistake to introduce an alternative syntax for splatting that doesn't work everywhere, especially when the incorrect syntax might appear to work silently as is typically the case where `$args` collects the \"extra\" parameters.\r\n\r\nYou're right that this wouldn't work for basic functions. A rule should be added to PSSA to pick up on such things and warn users. If there isn't a rule already to identify when a basic function is passed common parameters, there should be, regardless of what happens with this PR. Your argument about common parameters appearing to work silently with `$args` collecting \"extra\" parameters isn't unique to the proposed `-splat` common parameter. It applies to all common parameters (`-ErrorAction`, `-WarningAction`, etc.). Users who create functions and who want common parameter support need to learn that `CmdletBinding` is required.\r\n",
      "created_at": "2019-11-04T17:52:11Z",
      "updated_at": "2019-11-06T20:19:41Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please restart static",
      "created_at": "2019-11-04T18:25:33Z",
      "updated_at": "2019-11-04T23:52:37Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-11-04T18:26:01Z",
      "updated_at": "2019-11-04T18:26:01Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please restart windows",
      "created_at": "2019-11-04T18:26:32Z",
      "updated_at": "2019-11-04T23:52:46Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-11-04T18:26:53Z",
      "updated_at": "2019-11-04T18:26:53Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "The only concern that I have is the name `Splat`:\r\nPowerShell's parameters are usually not shortened but more importantly the word splatting/splat is a word that is not very intuitive/explanatory to someone that does not know about PowerShell splatting or is not a native English speaker.\r\nI do not have a better name but it would be great to have a name that is more self-explanatory.\r\nIn Python they call it 'parameter unpacking'\r\nhttps://www.python.org/dev/peps/pep-0448/",
      "created_at": "2019-11-04T18:44:01Z",
      "updated_at": "2019-11-04T18:47:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We could opt for something like `-Parameters` with a short alias `-Params` :thinking: ",
      "created_at": "2019-11-04T18:51:24Z",
      "updated_at": "2019-11-04T18:51:24Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> We could opt for something like `-Parameters` with a short alias `-Params` \ud83e\udd14\r\n\r\nWhile I like the sound of it, I think `-Parameters` is too generic and would be a high risk for collision. For example, `Get-Help` has a `-Parameter` parameter. It would be confusing to have both `-Parameter` and `-Parameters` in any cmdlet. OTOH, the `-Splat` name is not likely to result in collision or confusion with other parameter names.\r\n\r\nSince the concept of splatting already needs to be learned, I like the explicit nature of the `-Splat` name, myself. Plus, visibility of that as a word gives users something to search for so that they can learn what it does.",
      "created_at": "2019-11-04T19:20:57Z",
      "updated_at": "2019-11-04T19:21:26Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I should note, I did consider including `@` as an alias for the `-Splat` parameter, but since PowerShell treats `-@` as a positional value (it isn't recognized as a parameter name today), that would be a breaking change. I'm not opposed to making such a change, but I didn't want it in the first implementation of this PR.",
      "created_at": "2019-11-04T19:22:58Z",
      "updated_at": "2019-11-04T19:22:58Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "How about `-ParameterSplat`? Or `-SplattedParameter`? Or `-ParameterObject`?",
      "created_at": "2019-11-04T20:15:52Z",
      "updated_at": "2019-11-04T20:15:52Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please restart Linux",
      "created_at": "2019-11-04T20:42:49Z",
      "updated_at": "2019-11-04T23:54:31Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, successfully started retry of `PowerShell-CI-Linux`",
      "created_at": "2019-11-04T20:43:34Z",
      "updated_at": "2019-11-04T20:43:34Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "What about `-PSArgumentList`?",
      "created_at": "2019-11-04T22:55:22Z",
      "updated_at": "2019-11-04T22:55:22Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "List is a type, that might be confusing. PS seems a bit redundant and not common for parameter names",
      "created_at": "2019-11-04T23:05:41Z",
      "updated_at": "2019-11-04T23:05:41Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "We keep having discussions in various threads when adding common parameters how not to clobber existing parameters. It could have been avoided if a reserved prefix was used, like with cmdlets. It's slightly off topic for this specific PR but wanted to bring it up for the overall common parameter discussion. ",
      "created_at": "2019-11-04T23:20:24Z",
      "updated_at": "2019-11-04T23:20:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:02:44Z",
      "updated_at": "2020-05-27T02:02:44Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Closing.",
      "created_at": "2021-04-24T13:16:44Z",
      "updated_at": "2021-04-24T13:16:44Z"
    },
    {
      "author": "SeidChr",
      "author_association": "NONE",
      "body": "no -splat, no -@, no @@ yet, will there be anything like that in the future? It seems like all approaches to improve splatting and thus usability are declined. Is there anything else in the work?",
      "created_at": "2021-05-26T10:10:24Z",
      "updated_at": "2021-05-26T10:10:24Z"
    }
  ],
  "created_at": "2019-11-04T17:01:36Z",
  "number": 10984,
  "state": "closed",
  "title": "Add a -splat common parameter",
  "updated_at": "2021-05-26T10:10:24Z"
}