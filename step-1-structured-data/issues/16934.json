{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16934",
  "author": "SeeminglyScience",
  "body": "### Steps to reproduce\r\n\r\n```powershell\r\nTabExpansion2 -inputScript ($s = '[array]::Empty[int]().') -cursorColumn $s.Length |\r\n    % CompletionMatches |\r\n    select -f 5\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nCompletionText ListItemText   ResultType ToolTip\r\n-------------- ------------   ---------- -------\r\nCount          Count            Property int Count { get; }\r\nIsFixedSize    IsFixedSize      Property bool IsFixedSize { get; }\r\nIsReadOnly     IsReadOnly       Property bool IsReadOnly { get; }\r\nIsSynchronized IsSynchronized   Property bool IsSynchronized { get; }\r\nLength         Length           Property int Length { get; }\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nNo results\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.2\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-05-27T18:17:53Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @MartinGC94 if you have an interest.",
      "created_at": "2022-03-01T20:01:26Z",
      "updated_at": "2022-03-01T20:01:26Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I'm working on this now, I've gotten it to work with the example in the OP but I'm having some trouble getting it to work with this example:\r\n\r\n```\r\n[System.Collections.Generic.List[int]]$list = @( 1, 2, 3, 4, 5 )\r\n$result = [System.Linq.Enumerable]::Select[int, float](\r\n    $list,\r\n    [Func[int, float]]{\r\n        param($item)\r\n        [math]::Pow($item, 3)\r\n    }\r\n)\r\n$result.<Tab>\r\n```\r\nThe type inference sees it as an:\r\n\r\n```\r\nSystem.Collections.Generic.IEnumerable`1[[System.Single, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\n```\r\nwhile the actual type after running it is:\r\n```\r\nSystem.Linq.Enumerable+SelectListIterator`2[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Single, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\n```\r\n\r\nI've just updated the method here: https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/TypeInferenceVisitor.cs#L1702 to also have a parameter for the generic type arguments and then I simply run this: `var returnType = methodInfo.MakeGenericMethod(genericTypes).ReturnType;` to get the return type.  \r\nWhat am I missing here?\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/TypeInferenceVisitor.cs at master \u00b7 PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-03-03T07:40:18Z",
      "updated_at": "2022-03-03T07:40:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Type inference is seeing the static type definition -- see https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select?view=net-6.0\r\n\r\nIt's declared as the IEnumerable type (the return type of that method). The runtime (concrete) type that you see after actually running it is just some probably internally-visible-only type that implements that IEnumerable interface. Probably not quite as important as it might change between .NET versions anyway, and it's not likely that folks will be expecting to see any methods specifically from that type. Even in C# you only deal with it as the IEnumerable, the underlying types tend to be a bit opaque.\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select\">Enumerable.Select Method (System.Linq)</a></strong></div><div>Projects each element of a sequence into a new form. </div></blockquote>",
      "created_at": "2022-03-03T13:19:48Z",
      "updated_at": "2022-03-03T13:20:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah unfortunately that seems like just another bug. Ideally it'd give you members for `float` but this also returns very little:\r\n\r\n```powershell\r\n([System.Collections.Generic.IEnumerable[float]]$null).<tab>\r\n```\r\n\r\nSo your change works! And there's more work to be done separately \ud83d\ude01 ",
      "created_at": "2022-03-03T14:07:32Z",
      "updated_at": "2022-03-03T14:07:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah I suspect there's something to be added there for checking the element type of the IEnumerable and giving those members back.",
      "created_at": "2022-03-03T14:09:37Z",
      "updated_at": "2022-03-03T14:09:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If I had to guess, I'd say we're probably looking for `IEnumerable<>` in *interfaces* of the inferred type, but not checking if the inferred type *itself* is `IEnumerable<>`. (and that might be my fault. I think I added the code for checking `IEnumerable<>` \ud83d\ude01)",
      "created_at": "2022-03-03T14:10:53Z",
      "updated_at": "2022-03-03T14:11:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16951, which has now been successfully released as `v7.3.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.5)\n",
      "created_at": "2022-06-22T20:26:28Z",
      "updated_at": "2022-06-22T20:26:28Z"
    }
  ],
  "created_at": "2022-02-28T16:51:44Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-IntelliSense",
    "Resolution-Fixed"
  ],
  "number": 16934,
  "state": "closed",
  "title": "Tab completion type inference does not account for generic method invocation with explicit type parameters",
  "updated_at": "2022-06-22T20:26:28Z"
}