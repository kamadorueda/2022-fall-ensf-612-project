{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10739",
  "author": "mklement0",
  "body": "When using the parameter sets selected by `-ErrorRecord` / `-Exception` of `Write-Error`, it makes sense to bind (the first) _positional_ argument of types (derived from) `System.Management.Automation.ErrorRecord` / `System.Exception` to those parameters.\r\n\r\nCurrently, that doesn't happen, because these parameters lack the `Position=0` attribute field in their `Parameter attributes.\r\n\r\nThe result is that using something like `Write-Error $_` in an apparent effort to pass the `System.Management.Automation.ErrorRecord` instance in `$_` through, you end up with the equivalent of:\r\n\r\n```\r\nWrite-Error -Message $_\r\n```\r\n\r\nrather than the more sensible - and probably expected:\r\n\r\n```\r\nWrite-Error -ErrorRecord $_\r\n```\r\n\r\nWhile the two resulting error records ultimately contain the same _message_ (description), the specifics of the input error record are lost.\r\n\r\nThe same applies analogously to `-Exception`.\r\n\r\nThe fix is trivial: Add `Position = 0` to the following two locations:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/d2c04f3eef071b244838ba2dfa001dd4d5731843/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Write.cs#L235-L236\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/d2c04f3eef071b244838ba2dfa001dd4d5731843/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Write.cs#L217-L218\r\n\r\n# Steps to reproduce\r\n\r\nRun the following tests:\r\n\r\n```powershell\r\n# ErrorRecord\r\ntry { [int]::parse('foo') } catch {}; (Write-Error $Error[0] 2>&1).Exception.GetType().FullName | Should -Be System.Management.Automation.MethodInvocationException\r\n\r\n# Exception\r\ntry { [int]::parse('foo') } catch {}; (Write-Error $Error[0].Exception.InnerException 2>&1).Exception.GetType().FullName | Should -Be System.FormatException\r\n\r\n# Make sure that a string still binds to -Message.\r\ntry { [int]::parse('foo') } catch {}; (Write-Error \"$($Error[0])\" 2>&1).Exception.GetType().FullName | Should -Be Microsoft.PowerShell.Commands.WriteErrorException\r\n```\r\n\r\n# Expected behavior\r\n\r\nAll tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe first two tests fail, because the positional arguments bind to `-Message`, resulting in a generic `Microsoft.PowerShell.Commands.WriteErrorException` exception wrapper.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": "2021-07-22T01:05:07Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does this interfere at all with binding `Write-Error \"message\"` positionally? I don't think it should, just want to confirm \ud83d\ude42 ",
      "created_at": "2019-10-08T20:37:21Z",
      "updated_at": "2019-10-08T20:37:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good question, @vexx32  - yes, that still works; I've added tests to the OP to confirm that.\r\n",
      "created_at": "2019-10-08T20:48:41Z",
      "updated_at": "2019-10-08T20:48:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Excellent! This seems like a minor enhancement-type change. Marking it for Hacktoberfest. \ud83d\ude01 ",
      "created_at": "2019-10-08T21:22:00Z",
      "updated_at": "2019-10-08T21:22:00Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "I'll work on this one.",
      "created_at": "2019-10-09T14:17:03Z",
      "updated_at": "2019-10-09T14:17:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@tnieto88 are you still interested in putting this one together? \ud83d\ude0a ",
      "created_at": "2019-11-10T04:42:28Z",
      "updated_at": "2019-11-10T04:42:28Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 yeah I am, would this change require new tests to be added? ",
      "created_at": "2019-11-10T14:55:16Z",
      "updated_at": "2019-11-10T14:55:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ideally yes. You can reuse the rest code @mklement0 has in the issue description and just have those three cases written up as individual tests in the Write-Error tests file. :blush: ",
      "created_at": "2019-11-10T15:11:46Z",
      "updated_at": "2019-11-10T15:11:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #13813, which has now been successfully released as `v7.2.0-preview.9`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.9)\n",
      "created_at": "2021-08-23T18:36:39Z",
      "updated_at": "2021-08-23T18:36:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #13813, which has now been successfully released as `v7.2.0-preview.10`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.10)\n",
      "created_at": "2021-09-28T23:18:28Z",
      "updated_at": "2021-09-28T23:18:28Z"
    }
  ],
  "created_at": "2019-10-08T20:34:30Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 10739,
  "state": "closed",
  "title": "Write-Error should use positional binding to -ErrorRecord and -Exception",
  "updated_at": "2021-09-28T23:18:29Z"
}