{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10688",
  "author": "mklement0",
  "body": "Follow-up from #10654. \r\n\r\nThe problem is presumably related to the fact that the `Newtonsoft.Json.Linq.JObject` Json.NET type implements `IDynamicMetaDataProvider`, in which case PowerShell delegates binding to the target object.\r\n\r\nIt is unclear if the problem is specific to Json.NET and perhaps to be fixed there or whether it affects other libraries too.\r\n\r\nThe following issues are likely related:\r\n\r\n* #10650 \r\n* #10652\r\n* #10668\r\n\r\nQuoting @SeeminglyScience from https://github.com/PowerShell/PowerShell/issues/10654#issuecomment-537566966 (lightly edited):\r\n\r\n> A fix is needed for sure, what's unclear is who needs to fix what. It seems bizarre to me that their convert binder wouldn't account for interfaces. \r\n\r\n> Maybe PowerShell should swallow the exception depending on where it happens. Maybe it should approach conversions for `IDynamicMetaDataProvider` more delicately, but imo that's kind of the point of `IDynamicMetaDataProvider`, especially in PowerShell. \r\n\r\n> My gut reaction is that the fix should be in Json.NET but I haven't looked closely enough at the PowerShell side to see if there's something better it could do there.\r\n\r\nNote that the interface being cast to below is an _explicit_ interface implementation in `JObject`.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nusing namespace System.Collections.Generic\r\nusing namespace Newtonsoft.Json.Linq\r\n\r\n# Casting to [IList[JToken]] should allow *numeric* indexing and\r\n# index 0 should return the first JProperty instance that makes up the JObject\r\n([IList[JToken]] [JObject]::Parse('{\"foo\":1}'))[0] | Should -BeOfType ([JProperty])\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```none\r\nExpected the value to have type [Newtonsoft.Json.Linq.JProperty] or any of its subtypes, but got $null with type $null.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-10-02T20:52:38Z",
  "number": 10688,
  "state": "open",
  "title": "Casting to an interface for indexer overload resolution is broken with Json.NET types",
  "updated_at": "2019-10-03T09:19:42Z"
}