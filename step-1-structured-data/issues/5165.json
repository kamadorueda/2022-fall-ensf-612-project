{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5165",
  "author": "JasonFossen",
  "body": "Please rename \"PowerShell Core **6.0**\" to \"PowerShell Core **1.0**\" to avoid confusion and disappointment.\r\n\r\nReasons: \r\n\r\nThe PowerShell Core 1.0 executable has been renamed to \"pwsh.\"\r\n\r\nPwsh is very different and limited in comparison to Windows PowerShell on Windows.\r\n\r\nPwsh DSC is going to be very different than DSC on Windows PowerShell.\r\n\r\nPwsh really is a 1.0 product (i.e., new), it's not a 6.0 product (i.e., with a decade of refinement). \r\n\r\nGoing with version 1.0 follows the pattern in version number changes for .NET and ASP.NET when they went to .NET Core 1.0 and ASP.NET Core 1.0 (they did not go to version 5.0, see http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx).\r\n\r\nUsing the 1.0 version number will help to emphasize and explain the difference between **Windows** PowerShell and PowerShell **Core**.  This helps to get the message out about cross-platform .NET Core in general, which was part of the reason for the version number choices for .NET Core and ASP.NET Core.  \r\n\r\n99% of admins and developers will assume that pwsh builds on top of and enhances Windows PowerShell 5.1, which is wrong.  Using the 6.0 version number is going to cause confusion and disappointment.  Changing the version number to 1.0 will help reduce this.  There will inevitably be bugs and limitations in something as complex, cross-platform and ambitious as pwsh 1.0, but by using the 1.0 version number, it will reduce the disappointment because \"after all, it's a new 1.0 product...\"  After a year of bug squashing, pwsh 2.0 can be released to reassure enterprise customers.\r\n\r\nThis will also help to protect the reputation of Windows PowerShell when there are complaints and griping in blogs, forums, twitter, etc. about the bugs in pwsh 1.0.  Consider, which would be less bad: complaints about \"PowerShell 6.0\" or complaints about \"PowerShell Core 1.0\"?  Again, very few people are going to be careful and precise in their distinction between **Windows** PowerShell and PowerShell **Core**, they are just going to say \"PowerShell.\"  Remember, those of us following the development of pwsh are a very tiny percentage of the overall IT market; so what might seem like a \"big\" version number change to us (here in our tiny bubble of an echo chamber on GitHub) will actually be an almost unnoticed change to the outside world. \r\n\r\nFinally, what if Microsoft changes it's mind in the future about Windows PowerShell and wants to release a new major update to it?  By having separate version tracks, someday there could be a \"Windows PowerShell 6.0\" without causing more confusion.  A few years from now, if pwsh only has a tiny market share, pwsh will be deprecated and axed, but **Windows PowerShell** will still be popular and growing strong. \r\n\r\nSo, please consider renaming pwsh to \"PowerShell Core 1.0\" before it goes live, it's definitely not too late, there's still plenty of time.\r\n\r\nThanks,\r\nJason\r\n\r\n",
  "closed_at": "2017-11-16T05:20:59Z",
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Quoting @joeyaiello \r\n\r\nhttps://blogs.msdn.microsoft.com/powershell/2017/07/14/powershell-6-0-roadmap-coreclr-backwards-compatibility-and-more/\r\n\r\n> Note: while PowerShell Core 6.0 is cross-platform, there is also a PowerShell Core 5.0/5.1 released exclusively as part of Nano Server.\r\n\r\nNaming to `PowerShell Core 1.0` would be confusing in that respect.\r\n\r\nPersonally I think 6.0 is the better choice as it shows a linear progression of PowerShell regardless of the underlying framework.\r\n",
      "created_at": "2017-10-19T15:20:45Z",
      "updated_at": "2017-10-19T15:20:45Z"
    },
    {
      "author": "JasonFossen",
      "author_association": "NONE",
      "body": "Hi @thezim: \r\n\r\nGood point about Nano, thank you.  \r\n\r\nNote that PowerShell is not a part of the Nano base container image anymore, and Nano installations as a percentage of Server installations is extremely small, and as a percentage of total machines with PowerShell installed, it is a tiny, tiny fraction of that. Besides, the future of PowerShell on Nano is pwsh, assuimg DevOps-style developers need PowerShell on Nano containers at all (they'll need it on their workstations and CI/CD servers, but perhaps not on the final Nano images outputted).  \r\n\r\nFor \"linear progression\", it's only a progression in version numbering, not in actual capabilities or for backwards compatibility.  Pwsh is not a superset of Windows PowerShell 5.1, it's a smaller subset.  This is where the confusion and disappointment will enter as people \"upgrade\" from 5.1 to 6.0.  If the cmdlets, parameters and other features were the same in pwsh, then I agree that the underlying framework would be irrelevant, but they're not the same at all.  \r\n\r\nThank you for voting!\r\n",
      "created_at": "2017-10-19T17:05:07Z",
      "updated_at": "2017-10-19T17:05:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With upgrade from 5.1 to 6.0 customers expect _enhancements_ in the language. In fact, we've lost a lot of functionality on the contrary. We're just misleading people.\r\nOf course, the internal version must be 6. But the product we'd better rename. I would even remove the version number from the product name to show people that this is the first milestone - PowerShell Core Threshold.",
      "created_at": "2017-10-19T18:44:02Z",
      "updated_at": "2017-10-19T18:44:02Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "PowerShell Core is not really a smaller subset of Windows PowerShell. The built-in cmdlets, language, and public APIs have not been simplified or fundamentally changed in a way that reduces functionality. In fact, many cmdlets like `Invoke-WebRequest` and `Invoke-RestMethod` are getting awesome enhancements in 6.0.\r\n\r\nAre there breaking changes? Yes.\r\nAre there breaking changes to some public APIs or language behaviors? Yes\r\nIs that enough to justify it being a 1.0 product? Not really.\r\n\r\nFrom [Semantic Versioning](http://semver.org/)\r\n> MAJOR version when you make incompatible API changes,\r\n\r\nA 6.0 version meets that version requirement.\r\n\r\nThe only functionality I've seen reduced is that PowerShell deprecated features like PSSnap-In and Workflow were removed. This is perfectly fine to do in a progressing API. It just means that some 3rd party cmdlets need to be updated to support 6.0, hence the MAJOR increment.\r\n\r\nThere are some issues still to be worked out on backwards compatibility which may be what gives you that subset feel. I don't think backwards compatibility though justifies starting over with 1.0.",
      "created_at": "2017-10-19T18:56:24Z",
      "updated_at": "2017-10-19T18:56:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I think a major version is fine. php4 to php5 had some of the same concerns regarding gains and losses and certainly things written for 5 didn't always run on 4 and vice versa. But it was still PHP. It, too, went through a massive underlying engine change. Not to compare PHP to my beloved PowerShell, but it is a language peer of sorts.\r\n\r\nOutside the built-in modules is where the greatest difference between Windows PowerShell 5 and PowerShell Core 6. Most of the core language features and cmdlets are compatible or only require minor tweaking. Not enough to warrant a completely new version base, IMO.",
      "created_at": "2017-10-19T19:28:38Z",
      "updated_at": "2017-10-19T19:28:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I work in enterprise and last year from time to time I tried to use PowerShell Core for everyday routine tasks. I can definitely say it doesn't work. After forcing to Utf8, I won't even be able to work properly in the interactive session.\r\n\r\nI see how much progress has been made over the past year and proud of my bit contributions, but for us it's still a toy - nobody's going to let us use even CoreFX in a production environment, not that PowerShell Core. We have no confidence. Many scenarios in Corefx are still not tested. In PowerShell Core, even the test coverage is less than 60 percent actually even less. We do not have tests for remote scenarios in general, and for remote scenarios across different platforms, all the more.\r\n\r\nYou'll be interested to know that of the 297 cmdlets we have 247 for Windows - 17% loss and 205 for Unix - 40% loss.\r\n\r\nWe need to distinguish between developers and users. For the first, we have to be internal 6.0. For the second, we should not focus on this \"6.0\", which gives rise to unjustified expectations. Nobody advertises Windows 6.0, 6.1, 6.2 - we know them under different names.",
      "created_at": "2017-10-20T06:02:32Z",
      "updated_at": "2017-10-20T06:02:32Z"
    },
    {
      "author": "WernerMairl",
      "author_association": "NONE",
      "body": "i'm working on Linux with PS Core over the last months....\r\nI can only consider to try it (Ubuntu Desktop+ VSCode + Debugging)!\r\n\r\nIt does not feel like 6.0! It is more like 1.0!\r\nI know that more projects (VSCode, Powershell Plugin, Powershell Editor Services) are involved here but for the end user only the full stack (Runtime, Editor and Debugger) counts...\r\nbut i'm happy if we are able to push the quality of the entire Linux Development Stack to a real 6.0 feeling...",
      "created_at": "2017-10-27T12:54:00Z",
      "updated_at": "2017-10-27T12:54:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The feedback is appreciated and we went through the same discussion internally before settling on calling it PowerShell Core 6.0.  At this time, we are not considering changing the version number.  There are pros/cons to both 6.0 and 1.0, however, as an engine and platform, PSCore6 is a superset of Windows PowerShell 5.1 and for some cmdlets, this is also the case with addition of new capabilities.  Certainly PSCore6 at this time has less cmdlet coverage than Windows PowerShell 5.1, but that will change over time.",
      "created_at": "2017-11-16T05:20:59Z",
      "updated_at": "2017-11-16T05:20:59Z"
    }
  ],
  "created_at": "2017-10-19T14:31:58Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 5165,
  "state": "closed",
  "title": "Please rename pwsh to PowerShell Core 1.0, not 6.0",
  "updated_at": "2017-11-16T05:20:59Z"
}