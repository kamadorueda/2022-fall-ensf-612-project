{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9960",
  "author": "SteveL-MSFT",
  "body": "- [ ] Microsoft.Management.Infrastructure.CimCmdlets\r\n- [ ] Microsoft.PowerShell.Commands.Diagnostics\r\n- [ ] Microsoft.PowerShell.Commands.Management\r\n- [ ] Microsoft.PowerShell.Commands.Utility\r\n- [ ] Microsoft.PowerShell.LocalAccounts\r\n- [ ] Microsoft.PowerShell.MarkdownRender\r\n- [ ] Microsoft.PowerShell.ScheduledJob\r\n- [ ] Microsoft.PowerShell.Security\r\n- [ ] Microsoft.WSMan.Management\r\n\r\nThis repo should eventually just be the engine, console host, and core cmdlets (see https://github.com/PowerShell/PowerShell/issues/4096).  All other modules should be in their own repos and updated async to this repo and published independently to PSGallery.\r\n\r\nUtility and Management modules should be split into separate modules (web cmdlets being one obvious example).  Since this is a breaking change (unless we invest in some module forwarding type capability), we should consider doing this in 7.0.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "this is again another attempt at #1979 which also points to issues #5681 #3607 and conflicts with the intent of PR #9926\r\n\r\n",
      "created_at": "2019-06-20T15:37:14Z",
      "updated_at": "2019-06-20T15:37:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For now, we can separate out the task of publishing the modules on PSGallery and splitting the modules from having them in separate repos.",
      "created_at": "2019-06-20T15:45:19Z",
      "updated_at": "2019-06-20T15:45:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is benefits from splitting _code_ to many repos? Looking on CoreFX experience I'd expect benefits from splitting dev workflow _process_ (like packaging and publishing in another repo)",
      "created_at": "2019-06-21T10:02:37Z",
      "updated_at": "2019-06-21T10:02:37Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee (sans @SteveL-MSFT) reviewed this today and we have some comments:\r\n\r\n* This definitely needs an RFC given the number of open issues, questions, possible benefits, etc.\r\n* Philosophically, we believe this *should* be a good move. It may give us the ability to:\r\n  * release these modules to the Gallery for downlevel versions of Windows PowerShell or PowerShell Core (where appropriate)\r\n  * build packages in the future that may or may not include certain modules (e.g. an MSI installer that gives checkboxes for module installation, or an easy path for making minimal PS containers or hosted applications that only need a small subset of modules)\r\n* We're concerned about the amount of work involved. @daxian-dbw feels that the modules are still highly tied together, and refactoring them as completely independent will be a significant undertaking.\r\n* It's hard to say without significant testing whether updated versions of the modules will actually work with downlevel versions (are we going to have to maintain manifest dependencies if the new version of MS.PS.Security requires a specific new versions of MS.PS.Management?)\r\n* We agree across the board that having \"the whole kitchen sink\" in PowerShell, especially for interactive and system management scenarios, is an important aspect of its value.\r\n* I believe having the module forwarding is a critical aspect if we go down the road of renaming the modules. @daxian-dbw believes it shouldn't be too much work relative to the decoupling, Gallery shipping, etc. to hard code the old types to the new ones. The breaking change in 7.0 won't be any less painful than a breaking change before or after 7.0. \r\n* There's an open question about how \"custom\" vs. \"minimal\" vs. \"full\" installs might work with Linux package managers (as opposed to MSIs). \r\n  * If we go down the path of having a `powershell-minimal` and `powershell-full` package, what happens if they're both installed?\r\n  * Is it worth the maintenance overhead of componentizing each of these things into their own \"library\" packages, with a `powershell-full` installing all of them?\r\n\r\n\r\nOverall, we don't think this path is critical to pursue for 7.0 given the amount of work involved. @SteveL-MSFT, we can talk offline when you're back to discuss more, we're open to being persuaded here. ",
      "created_at": "2019-06-26T22:37:35Z",
      "updated_at": "2019-06-26T22:37:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> \"custom\" vs. \"minimal\" vs. \"full\"\r\n\r\n\"minimal\" makes no sense as a final product. If we install only engine we can use only embedded operators and some .Net methods. but consumers probably need something more useful, which is, for example, in some module - that is \"custom\".\r\nI guess \"minimal\" would useful in zip form as base for \"custom\". Manufacturers can download \"minimal\" and repack as they needs. Although they can do the same with \"full\" zip. So we can consider current distribute as \"minimal\" and as \"full\".\r\n\r\n> Philosophically, we believe this should be a good move.\r\n\r\nIt already works - we have hundreds of additional modules on our computers from MSFT and other manufacturers.\r\n\r\nReturning to the .Net experience they don't implement _all_, they collect the most useful and frequently used features. It brings many benefits. First of all consolidate developers and community in one place. Unify dev process under MSFT standards.\r\nIt is impossible to _actively_ participate in dozens of projects, each of which has its own policies and its own development process. (It is even just uncomfortable in GitHub interface.)\r\n\r\nI see only one benefit for MSFT from decoupling - to reduce the burden on employees, but this is possible only if you decouple a module to the community-driven project and forget about it.\r\nWe know some very popular community-driven project in PowerShell ecosystem but nobody want to grab something existing from MSFT in last three year since PowerShell became an open project.  This implies that the decoupling is freezing. Returning to the .Net experience again I'd say that development will be about more productive if we could go this way - to identify the most necessary features and bring them here - in existing modules or new ones.\r\n",
      "created_at": "2019-06-27T07:20:05Z",
      "updated_at": "2019-06-27T07:20:05Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "The `Microsoft.PowerShell.MarkdownRender` task was completed in #14090.",
      "created_at": "2021-06-29T12:25:05Z",
      "updated_at": "2021-06-29T12:25:05Z"
    }
  ],
  "created_at": "2019-06-20T06:15:54Z",
  "number": 9960,
  "state": "open",
  "title": "Split modules and move them to separate repos",
  "updated_at": "2021-06-29T12:25:05Z"
}