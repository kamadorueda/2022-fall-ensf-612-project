{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11505",
  "author": "p0W3RH311",
  "body": "its more elegant  and more concise\r\n\r\n```\r\nPS C:\\> $a='hello world'\r\nPS C:\\> -join $a[$a.length..0]\r\ndlrow olleh\r\nPS C:\\> -reverse $a\r\ndlrow olleh\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Just one point of data, I've been using .NET since PDC 2000 and the only time I've ever used `.Reverse` was for an example.  I've never used it in a real app/script.",
      "created_at": "2020-01-06T23:39:50Z",
      "updated_at": "2020-01-06T23:39:50Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "sometimes we needs manipulating data instead of using loop and index  or maybe other tricks -reverse operator is good alternative",
      "created_at": "2020-01-06T23:47:59Z",
      "updated_at": "2020-01-06T23:47:59Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @p0W3RH311 \r\n\r\nWhy do you think this should be an operator instead of a command? For example, do you feel that it's likely to become so common an operation that we should actually add a language feature rather than a command? (I'll note that in the last decade+, we haven't really even seen a request for a `reverse` command.)\r\n\r\nAnd as you point out, reversing a collection is already fairly easy if a bit obscure:\r\n```powershell\r\nPS[1] (17) > @(1, 3, 4, 5)[3..0]\r\n5\r\n4\r\n3\r\n1\r\n```",
      "created_at": "2020-01-07T00:18:33Z",
      "updated_at": "2020-01-07T00:18:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Also worth mentioning is that arrays natively have a `Reverse()` method available:\r\n\r\n```powershell\r\n$array = 1..10\r\n[array]::Reverse($array)\r\n$array\r\n```",
      "created_at": "2020-01-07T01:20:12Z",
      "updated_at": "2020-01-07T01:20:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Implementing the operator for primitive types/scenarios makes no sense. All our operator does PowerShell magic conversions. I can not think a scenario for reverse with magic conversions.",
      "created_at": "2020-01-07T05:23:03Z",
      "updated_at": "2020-01-07T05:23:03Z"
    },
    {
      "author": "lahell",
      "author_association": "NONE",
      "body": "In this example `[bigint]::Parse()` returns i negative number and `ToByteArray()` returns bytes in reverse order compared to `$hex`. Before I can use the `$key` I have to reverse it.\r\n\r\n```\r\n$hex = '800816b1629bcfa519f57a502a6a841298a9f5c20203d8818fdd18271a3b1682'\r\n$key = [bigint]::Parse($hex, 'HexNumber').ToByteArray()\r\n[array]::Reverse($key)\r\n```\r\n\r\nWould be nice if `$key` had an extension method called `Reverse()`. It could take an optional argument of type boolean named `ReturnItems` which defaults to `$false`. In that case I could just do this:\r\n\r\n```\r\n$hex = '800816b1629bcfa519f57a502a6a841298a9f5c20203d8818fdd18271a3b1682'\r\n$key = [bigint]::Parse($hex, 'HexNumber').ToByteArray().Reverse($true)\r\n```\r\n ",
      "created_at": "2020-01-13T07:51:29Z",
      "updated_at": "2020-01-13T07:51:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@lahell if you use a different type, it can. Arrays simply don't have as many native methods attached to them, they're supposed to be simple, lightweight types with minimal bells and whistles. If you add a type cast to `List[byte]` then you'll get a `.Reverse()` method:\r\n```powershell\r\n$hex = '800816b1629bcfa519f57a502a6a841298a9f5c20203d8818fdd18271a3b1682'\r\n[System.Collections.Generic.List[byte]] $key = [bigint]::Parse($hex, 'HexNumber').ToByteArray()\r\n$key.Reverse()\r\n```\r\nBut even then, it's the same amount of code as the array method, so I don't see a lot to be gained here, really.",
      "created_at": "2020-01-13T13:33:34Z",
      "updated_at": "2020-01-13T13:33:34Z"
    }
  ],
  "created_at": "2020-01-06T23:36:00Z",
  "number": 11505,
  "state": "open",
  "title": "Introduce a -reverse operator",
  "updated_at": "2020-01-13T13:33:34Z"
}