{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3550",
  "author": "yvan-sraka",
  "body": "Hello,\r\n\r\nI occasionally use the default Powershell terminal provided by Windows (which looks like a blue version of `CMD.exe`) and I still feel a bit frustrated, for example, compared to my use of Windows Powershell inside [Hyper Terminal](https://github.com/zeit/hyper), developed by [Zeit](https://zeit.co/), which is built on top of the [Electron](https://electron.atom.io/) framework, developed by GitHub.\r\n\r\nWhat do you think of writing a terminal for Windows Powershell that would run on the UWP ([Universal Windows Platform](https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide)) and keep the shell \"native\"? I am not completely comfortable with the separation between the terminal part and the shell part in Windows Powershell as it looks like a single `PowerShell.exe` binary.\r\n\r\nThank you very much for those who could help me to understand better this technical stack!",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`powershell.exe` is actually a pretty thin host.  Most of the work is actually done by `Microsoft.PowerShell.ConsoleHost`.  I believe VSCode is built on Electron/Atom and with [PSEditorServices](https://github.com/PowerShell/PowerShellEditorServices) you get an interactive PowerShell within VSCode today.",
      "created_at": "2017-04-13T17:50:09Z",
      "updated_at": "2017-04-13T17:50:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @daviwil who might be able to provide some pointers to get started",
      "created_at": "2017-04-13T20:48:47Z",
      "updated_at": "2017-04-13T20:48:47Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "Generally what apps like Hyper or VS Code are doing is leveraging Win32 APIs for interacting with the shell so that they can re-route input and output to/from their UI.  The VS Code implementation ultimately uses a library called [winpty](https://github.com/rprichard/winpty) which converts the Win32 API to act more like a UNIX virtual terminal.  You might be able to use this to simplify (or reuse) a terminal implementation written in UWP.",
      "created_at": "2017-04-15T14:17:59Z",
      "updated_at": "2017-04-15T14:17:59Z"
    },
    {
      "author": "yvan-sraka",
      "author_association": "NONE",
      "body": "Thank you very much for all your answers and advices to guide me towards the implementation of an UWP based terminal for Powershell. I'm sure this could be a really cool learning project, and I'll start doing it soon, perhaps using the new and kitsch [acrylic material](https://docs.microsoft.com/en-us/windows/uwp/style/acrylic) from the recently unveiled [Microsoft Fluent Design Language](http://fluent.microsoft.com/).\r\n\r\nBut my original question is more focused on why Windows 10 Pro, which comes with Powershell by default, does not give us a decent terminal interface, when I want to change the terminal color, font or text size, I really feel like modifying a kind of `.Xdefault` profile for `rxvt` or `xterm` far away from the comfort of the default terminals of GNOME or OS X, to give us UNIX comparisons.",
      "created_at": "2017-05-23T11:26:45Z",
      "updated_at": "2017-05-23T11:26:45Z"
    },
    {
      "author": "LuanVSO",
      "author_association": "NONE",
      "body": "closed by [microsoft/terminal](https://github.com/microsoft/terminal)?",
      "created_at": "2020-11-25T15:15:40Z",
      "updated_at": "2020-11-25T15:15:40Z"
    }
  ],
  "created_at": "2017-04-13T12:48:31Z",
  "labels": [
    "WG-Interactive-Console",
    "Issue-Discussion"
  ],
  "number": 3550,
  "state": "open",
  "title": "Powershell on top of Windows Universal Platform?",
  "updated_at": "2020-11-25T15:15:40Z"
}