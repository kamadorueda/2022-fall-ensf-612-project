{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15159",
  "author": "NamelessUzer",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a user I want PowerShell can exclude a folder and also exclude its subfolders and subfiles.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nFor instance:\r\n```PowerShell\r\nGet-ChildItem -Recurse -ExcludeFolderAndItsSubFolders \"ExcludeFolder\"\r\n```\r\nThen, the folder \"ExcludeFolder\" and all its subfolders and all files in it and its subfolders will be excluded.\r\n\"ExcludeFolderAndItsSubFolders \" is only an example, it's a little long. Of course, you can choose any other better option name.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That would indeed be useful.\r\n\r\nThere is a related idea in #4126 - though that isn't obvious from the wording, and the idea isn't fully fleshed out  - which has been green-lit, but not implemented:\r\nIt suggests making the existing `-Include` and `-Exclude` parameters accept _paths_ rather than _name-only_ patterns.\r\n\r\nThat is, the syntax would be something like:\r\n\r\n```powershell\r\nGet-ChildItem -Recurse -Exclude ExcludeFolder/*\r\n```\r\n\r\nHowever, that would only include `ExcludeFolder` and _its children_, not any more deeply nested items.\r\n\r\nTo support something open-ended, we'd need something like `**` (e.g., `ExcludeFolder/**`, as used in the Unix world) as a signifier that the entire _subtree_ should be excluded - but that would be a departure from how PowerShell's wildcard patterns work.\r\n\r\n---\r\n\r\nSo perhaps the two ideas can be _combined_:\r\n\r\n* Allow _path_ patterns, using the normal matching rules.\r\n\r\n* _Additionally_ introduce `-ExcludeRecursive` (which I propose in lieu of your `-ExcludeFolderAndItsSubFolders` suggestion) and `-IncludeRecursive` parameters.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-05T15:39:43Z",
      "updated_at": "2021-06-13T18:45:26Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "In my opinion, this is unnecessary. This will complicate the cmdlet. This functionality is very easy to replace with `-notmatch` and `-notlike` operators. For example:\r\n\r\n```\r\n(Get-Childitem -Recurse ./.local) -notlike '*powershell*'   # returns fullnames as string[]\r\n(Get-Childitem -Recurse ./.local) -notmatch 'powershell'    # returns FileInfo[], DirectoryInfo[]\r\n```\r\nBut I am not against the idea itself, but for wider functionality of `-Exclude` and `-Include` (regex)",
      "created_at": "2021-04-05T17:14:31Z",
      "updated_at": "2021-04-05T17:14:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry:\r\n\r\n* While use of _up-front collection of all output_ combined with _operators_ is a _workaround_, it is not a satisfying solution, especially if you want to walk large hierarchies in a _streaming_ fashion and if you want to exclude large subtrees to begin with (rather than enumerating them and excluding them _after_ the fact).\r\n\r\n* The proposed new parameters may complicate the _implementation_, but they are easy to conceptualize and cover an important use case.\r\n\r\n* Certainly, _regex_ patterns would give us more power and flexibility (at the expense of increased pattern-language complexity). However, given that PowerShell has no _regex literals_ (it uses _strings_ to represent regexes), also supporting regexes would require parallel parameters (e.g., `-Exclude` vs. `-ExcludeRegex`) - and _that_ sounds like a problematic complication of the cmdlet.\r\n",
      "created_at": "2021-04-05T17:41:58Z",
      "updated_at": "2021-04-05T17:41:58Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Personally I agree with @237dmitry where this cmdlet is already complex enough and adding even more parameters is just going to make things worse. I don't see how having an `-Exclude` or `-ExcludeRegex` parameter would be beneficial over a simple `| Where-Object Name -ne 'Blah'`, you can even use `-match` to match against a regex. The latter is highly customizable and already fit the existing PowerShell paradigms and providers don't support a way to natively exclude values in their underlying implementations so there are no native benefits by filtering that far left.",
      "created_at": "2021-04-05T18:45:42Z",
      "updated_at": "2021-04-05T18:45:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93, I definitely agree that a `-ExcludeRegex` parameter is _not_ called for - I used it to illustrate that it would be the only way to bring _regex_ matching to `Get-ChildItem` and is therefore _not_ a good idea.\r\n\r\n`-Exclude` and `-Include` are _existing_, _wildcard_-based parameters that currently:\r\n\r\n* work on an item's _name_ only\r\n* at _every level_ of the subtree being traversed with `-Recurse`.\r\n\r\nWhat this _doesn't_ give you is a simple way to say \"exclude all `node_modules` subfolders _and their subtrees_\", and that is what this suggestion is about - and it seems worthwhile to me:\r\n\r\n* because it is a common use case\r\n\r\n* and something like `-ExcludeRecursive node_modules` is the most straightforward way to express this intent - no post-processing workarounds with additional patterns needed, and it also prevents unnecessary enumeration at the source.\r\n\r\n",
      "created_at": "2021-04-05T19:04:08Z",
      "updated_at": "2021-04-06T01:47:42Z"
    },
    {
      "author": "NamelessUzer",
      "author_association": "NONE",
      "body": "> That would indeed be useful.\r\n> \r\n> There is a related idea in #4126 - though that isn't obvious from the wording, and the idea isn't fully fleshed out - which has been green-lit, but not implemented:\r\n> It suggests making the existing `-Include` and `-Exclude` parameters accept _path_ rather than _name-only_ patterns.\r\n> \r\n> That is, the syntax would be something like:\r\n> \r\n> ```powershell\r\n> Get-ChildItem -Recurse -Exclude ExcludeFolder/*\r\n> ```\r\n> \r\n> However, that would only include `ExcludeFolder` and _its children_, not any more deeply nested items.\r\n> \r\n> To support something open-ended, we'd need something like `**` (e.g., `ExcludeFolder/**`, as used in the Unix world) as a signifier that the entire _subtree_ should be excluded - but that would be a departure from how PowerShell's wildcard patterns work.\r\n> \r\n> So perhaps the two ideas can be _combined_:\r\n> \r\n> * Allow _path_ patterns, using the normal matching rules.\r\n> * _Additionally_ introduce `-ExcludeRecursive` (which I propose in lieu of your `-ExcludeFolderAndItsSubFolders` suggestion) and `-IncludeRecursive` parameters.\r\n\r\nYour understanding is absolutely what I want, Thank you.",
      "created_at": "2021-04-06T02:07:40Z",
      "updated_at": "2021-04-06T02:07:40Z"
    },
    {
      "author": "NamelessUzer",
      "author_association": "NONE",
      "body": "> In my opinion, this is unnecessary. This will complicate the cmdlet. This functionality is very easy to replace with `-notmatch` and `-notlike` operators. For example:\r\n> \r\n> ```\r\n> (Get-Childitem -Recurse ./.local) -notlike '*powershell*'   # returns fullnames as string[]\r\n> (Get-Childitem -Recurse ./.local) -notmatch 'powershell'    # returns FileInfo[], DirectoryInfo[]\r\n> ```\r\n> \r\n> But I am not against the idea itself, but for wider functionality of `-Exclude` and `-Include` (regex)\r\n\r\nSuppose you are in a folder \"PowerShell\\blah\\blah\\\", your code will output nothing.",
      "created_at": "2021-04-06T02:22:54Z",
      "updated_at": "2021-04-06T02:22:54Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Suppose you are in a folder \"PowerShell\\blah\\blah\", your code will output nothing.\r\n\r\nSuppose that you will create a specific regular expression for a specific case. ",
      "created_at": "2021-04-06T03:49:57Z",
      "updated_at": "2021-04-06T03:49:57Z"
    },
    {
      "author": "NamelessUzer",
      "author_association": "NONE",
      "body": "> > Suppose you are in a folder \"PowerShell\\blah\\blah\", your code will output nothing.\r\n> \r\n> Suppose that you will create a specific regular expression for a specific case.\r\n\r\nCreate it, please.",
      "created_at": "2021-04-06T03:56:47Z",
      "updated_at": "2021-04-06T03:56:47Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Create it, please.\r\n\r\nWhat subfolder have to be excluded? `blah\\powershell`? What is the structure?\r\n\r\n```powershell\r\n<#\r\nPath\\To\\Powershell\\2                        \r\nPath\\To\\Powershell\\blah                     \r\nPath\\To\\Powershell\\2\\test                   \r\nPath\\To\\Powershell\\blah\\blah                \r\nPath\\To\\Powershell\\blah\\blah\\powershell     \r\nPath\\To\\Powershell\\blah\\blah\\powershell\\test\r\n#>\r\n((Get-Childitem PowerShell -Recurse) -notmatch '.+\\\\powershell.+powershell\\\\?').FullName\r\n<#\r\nPath\\To\\Powershell\\2        \r\nPath\\To\\Powershell\\blah     \r\nPath\\To\\Powershell\\2\\test   \r\nPath\\To\\Powershell\\blah\\blah\r\n#>\r\n```",
      "created_at": "2021-04-06T05:12:46Z",
      "updated_at": "2021-04-06T05:12:46Z"
    },
    {
      "author": "NamelessUzer",
      "author_association": "NONE",
      "body": "> > Create it, please.\r\n> \r\n> What subfolder have to be excluded? `blah\\powershell`? What is the structure?\r\n> \r\n> ```powershell\r\n> <#\r\n> Path\\To\\Powershell\\2                        \r\n> Path\\To\\Powershell\\blah                     \r\n> Path\\To\\Powershell\\2\\test                   \r\n> Path\\To\\Powershell\\blah\\blah                \r\n> Path\\To\\Powershell\\blah\\blah\\powershell     \r\n> Path\\To\\Powershell\\blah\\blah\\powershell\\test\r\n> #>\r\n> ((Get-Childitem PowerShell -Recurse) -notmatch '.+\\\\powershell.+powershell\\\\?').FullName\r\n> <#\r\n> Path\\To\\Powershell\\2        \r\n> Path\\To\\Powershell\\blah     \r\n> Path\\To\\Powershell\\2\\test   \r\n> Path\\To\\Powershell\\blah\\blah\r\n> #>\r\n> ```\r\n\r\nThank you. You are right. It's possible to implement it in your way.\r\nThe reason for this demand is that I was writing a script recently that can format the filename in a directory but need to recursively exclude some directories, such as: .vs, .git, .github and etc. But I didn't find an easy way to achieve it.",
      "created_at": "2021-04-06T05:42:57Z",
      "updated_at": "2021-04-06T05:42:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could add a recurse predicate. De-facto we have it internally (for depth control) but we could have it as public parameter - a scriptblock.",
      "created_at": "2021-04-06T16:42:15Z",
      "updated_at": "2021-04-06T16:42:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To make the regex for the given example fully robust and cross-platform, it would have to be something like:\r\n\r\n```powershell\r\n-notmatch '(^|[\\\\/])powershell[\\\\/](.+[\\\\/])?powershell([\\\\/]|$)'\r\n```\r\n\r\nThat said, that example would not - and, to me, need not - be addressed by `-ExcludeRecursive`, because for such special needs post-processing is indeed the right answer.\r\n\r\nTo emulate what `-ExcludeRecursive powershell` would do, the regex is a bit simpler:\r\n\r\n`-notmatch '(^|[\\\\/])powershell([\\\\/]|$)'`\r\n\r\nbut that:\r\n* is still a lot of ceremony\r\n* doesn't filter at the source.\r\n\r\nAs an aside: the difference in behavior between `-like` and `-match` is troubling - see #15172\r\n\r\n\r\n",
      "created_at": "2021-04-06T16:55:08Z",
      "updated_at": "2021-04-06T16:55:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "And if the subfolder(s) to exclude in the example is at a _known level of the hierarchy_, in combination with #4126, the solution would be `-ExcludeRecursive */*/*/*/*/powershell`\r\nYou could argue that the recursive (subtree) exclusion should be _implied_ if you use a wildcard _path_.\r\nNote that since PowerShell allows interchangeable use of `\\` and `/` in paths, there is no cross-platform concern.\r\n\r\n",
      "created_at": "2021-04-06T17:09:51Z",
      "updated_at": "2021-04-06T17:09:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I suggest more generic way:\r\n```powershell\r\nGet-ChildItem -RecurseCondition <ScriptBlock gets DirectoryInfo in $Item> -RecurseFilter <ScriptBlock gets FileInfo in $Item>\r\n```\r\nThis is greatly flexible.\r\n",
      "created_at": "2021-04-07T04:47:29Z",
      "updated_at": "2021-04-07T04:47:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think in this case @jborean93's concern about trying to pack too much functionality into a single cmdlet applies (I also don't understand how that would address the exclude-subtree use case - perhaps you can elaborate).\r\n\r\nWhat I - and @ssfjhh, I presume - had in mind was a simple extension of _existing_ functionality that is based on the simplicity of name literals and wildcards (and potentially _paths_).\r\n\r\nI see the following as the primary use cases of  `-Exclude` / `-Include` in combination with `Get-ChildItem -Recurse` (without the `-Recurse`, the behavior of these parameters is unfortunate - see #3304):\r\n\r\n* [Already available] Get files matching a name (pattern) across all levels of a subtree hierarchy:\r\n\r\n```powershell\r\nGet-ChildItem -Recurse -Include *.json\r\n```\r\n\r\n* [Already available] Get directories matching a name (pattern) across all levels of a subtree hierarchy:\r\n\r\n```powershell\r\nGet-ChildItem -Recurse -Directory -Include node_modules\r\n```\r\n\r\nNote: Using `-Filter` rather than `-Include` is actually more efficient and noticeably faster, because it let's the system APIs do the filtering, but `-Include` is still necessary if you want to (a) take advantage of PowerShell's `[...]` wildcard construct and/or (b) you need to specify _multiple_ patterns.\r\n\r\n* What's missing is the ability to fundamentally, up front, include / exclude directories _and their subtrees_, before potentially applying _additional_ filtering (with `-Include`, `-Exclude`, `-Filter` and/or `-File` / `Directory`):\r\n\r\n  * `-ExcludeRecursive` would exclude any matching directories and all their contents (subtrees).\r\n\r\n  * `-IncludeRecursive` would limit further processing only to the items in matching directories and their subtrees.\r\n\r\nNote: Perhaps `-ExcludeSubtree`, `-IncludeSubtree` would be clearer, but so far we haven't used that terminology elsewhere, from what I can tell.\r\n\r\nFor instance, the following would then allow you to list all `*.js`  and `*.ts` files in a directory subtree, while excluding any `obj`, `bin`, and `node_modules` directories from the search:\r\n\r\n```powershell\r\n Get-ChildItem -Recurse -Include *.js, *.ts -ExcludeRecursive obj, bin, node_modules\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-07T21:36:27Z",
      "updated_at": "2021-04-19T16:43:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The Engine Working Group discussed this issue today. We believe this is a reasonable ask -- it would be nice to make it easier to exclude/include a folder completely with `Get-ChildItem`:\r\n- We prefer to reuse the `-Include` and `-Exclude` parameters instead of introducing new ones.\r\n- The proposal we had is to have `-Include` and `-Exclude` support the [Git `pathspecs`](https://css-tricks.com/git-pathspecs-and-how-to-use-them/), like in a `.gitignore` file.\r\n- Supporting `pathspecs` means we will need to support something like `a/**/b`. This obviously doesn't work with the current globbing in PowerShell, since `a/**/b` is treated as `a/*/b` in PowerShell wildcards today. Changing the semantics of `a/**/b` would be a breaking change, but it likely falls into bucket 3 (unlikely grey area).\r\n   - As for how to support a `pathspecs` syntax like `a/**/b`, since `-Include` and `-Exclude` parameters are directly handled by the underlying provider, a possible option is to have the syntax `a/**/b` directly supported by a provider, so that we can skip the globbing and just pass the literal string to the provider.\r\n   - An alternate option is to change how globing works to support the `a/**/b` syntax, but that could be tricky (hard to do) and risky (regressions).",
      "created_at": "2021-06-25T00:25:55Z",
      "updated_at": "2021-06-25T00:25:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From my experience with #12834:\r\n- we must fix a lot of existing issues in providers and, principally, add a lot of new tests to avoid regression.\r\n- we could consider Git pathspecs for Path parameters and generic globbing but not for Include/Exclude parameters since the parameters are provider specific.\r\n- implementing `a/**/b` is very-very expensive in Include/Exclude too and I think it makes no sense. It is globbing syntax and it should be in Globbing. \r\n- Current Include/Exclude semantic is to filter leaves in output. And there are huge weird issues how they work (with -Name and -Recurse). We should review and fix the issues. I think we will have to re-design too.\r\n- Since Include/Exclude are only for leaves switching to apply them to recursion will be huge breaking change especially for cross-platform scenarios - we will be forced to do escaping which is just a nightmare\r\n- So proposal is to introduce new parameter to control recursion. See https://github.com/PowerShell/PowerShell/issues/15159#issuecomment-814596727 as a draft.",
      "created_at": "2021-06-25T04:59:11Z",
      "updated_at": "2021-06-25T04:59:11Z"
    }
  ],
  "created_at": "2021-04-05T13:43:57Z",
  "number": 15159,
  "state": "open",
  "title": "Feature Request: Could you please add a option to exclude a folder and also exclude its subfolders?",
  "updated_at": "2021-11-30T07:27:57Z"
}