{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14845",
  "author": "LeeHolmes",
  "body": "In Windows PowerShell, this used to properly parse a string as a BigInt:\r\n```\r\n$num1 = [BigInt] \"962822088399213984108510902933777372323\"\r\n```\r\nExample:\r\n```\r\nPS C:\\Users\\lee> Trace-Command TypeConversion -PSHost { $num1 = [BigInt] \"962822088399213984108510902933777372323\" }\r\nDEBUG: TypeConversion Information: 0 : Parse result: 962822088399213984108510902933777372323\r\n```\r\nIn PowerShell, this now incorrectly converts first to an integer and will likely break anybody using BigInt:\r\n```\r\n[D:\\Lee\\Cookbook4\\windows-powershell-cookbook-4e]\r\nPS:67 > $num1 = [BigInt] \"962822088399213984108510902933777372323\"\r\n\r\n[D:\\Lee\\Cookbook4\\windows-powershell-cookbook-4e]\r\nPS:68 > $num1\r\n962822088399213912109618944997163270144\r\n\r\n[D:\\Lee\\Cookbook4\\windows-powershell-cookbook-4e]\r\nPS:69 > Trace-Command TypeConversion -PSHost { $num1 = [BigInt] \"962822088399213984108510902933777372323\" }\r\nDEBUG: 2021-02-18 10:37:04.9108 TypeConversion Information: 0 : Converting to integer.\r\nDEBUG: 2021-02-18 10:37:04.9122 TypeConversion Information: 0 : Converting \"9.628220883992139E+38\" to \"System.Numerics.BigInteger\".\r\nDEBUG: 2021-02-18 10:37:04.9132 TypeConversion Information: 0 :     Constructor result: \"962822088399213912109618944997163270144\".\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's clearly a regression, but just to mention the workarounds:\r\n\r\n```powershell\r\n# Explicit call to [BigInt]::Parse(), which the cast *should* also do.\r\nPS> [BigInt]::Parse(\"962822088399213984108510902933777372323\")\r\n962822088399213984108510902933777372323  #OK\r\n\r\n# Or, with a literal, using type-specifier suffix n\r\nPS> 962822088399213984108510902933777372323n\r\n962822088399213984108510902933777372323  #OK\r\n```\r\n\r\n> converts first to an integer \r\n\r\nActually, it's a `[double]`, which - unfortunately - also happens with _suffix-less_ number literals:\r\n\r\n```powershell\r\nPS> 962822088399213984108510902933777372323\r\n9.62822088399214E+38 # !! [double], with loss of accuracy\r\n```\r\n\r\n#13212 advocates for automatic widening to `[bigint]` rather than `[double]` for integer number literals too large to fit into a `[decimal]`.\r\n\r\n---\r\n\r\nP.S., @LeeHolmes, could you please use fenced code blocks (```` ```powershell<newline>...<newline>``` ````) and possibly also inline code styling (`` `...` ``) in your posts? It greatly helps readability.\r\n\r\n",
      "created_at": "2021-02-18T18:54:04Z",
      "updated_at": "2021-02-18T18:54:04Z"
    }
  ],
  "created_at": "2021-02-18T18:37:42Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 14845,
  "state": "open",
  "title": "Parsing of BigInt broken in recent versions",
  "updated_at": "2021-05-07T22:06:40Z"
}