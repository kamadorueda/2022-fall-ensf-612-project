{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14795",
  "author": "p0W3RH311",
  "body": "```\r\nPS C:\\> $PSVersionTable.PSVersion\r\n\r\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\r\n-----  -----  -----  --------------- ----------\r\n7      1      0\r\n```\r\n\r\n\r\nHi Guys !!\r\n\r\nhere an example to demonstrate the new feature\r\n\r\n\r\nfirst create base class\r\n```\r\n\r\nPS C:\\> class foo {\r\n>>        $say = 'hello'\r\n>>       [string] sayhello($name) {\r\n>>          return '{0} {1}' -f $this.say, $name\r\n>>        }\r\n>> }\r\n\r\n```\r\n\r\nwork well\r\n```\r\n\r\nPS C:\\> [foo]::new().sayhello('world')\r\nhello world\r\n\r\n```\r\n\r\ncreate a child class with the same  method 'sayhello' to overid the base method class\r\n```\r\n\r\nPS C:\\> class bar : foo {\r\n>>         [string] sayhello($name) {\r\n>>             return \"power${name}\"\r\n>>         }\r\n>>    }\r\nPS C:\\>\r\n\r\n```\r\nwork well\r\n\r\n```\r\n\r\n\r\nPS C:\\> [bar]::new().sayhello('shell')\r\npowershell\r\n```\r\n\r\n\r\n\r\nbut sometimes we need to append the result to method \"sayhello\" in base class and the method \"sayhello\" in our child class.... like in ruby with \"super\" keyword \r\n\r\nthis example demonstate the  behaviour missing in powershell. in this example i use \"super\" keyword\r\n```\r\n\r\nPS C:\\> class bar : foo {\r\n>>         super [string] sayhello($name) {\r\n>>             return \"power${name}\"\r\n>>         }\r\n>>    }\r\n\r\nPS C:\\> [bar]::new().sayhello('shell')\r\nhello shell\r\npowershell\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "Currently you can call a method of the base class like this, but it requires an ugly type cast (see [about_Classes](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_classes?view=powershell-7.1#invoke-base-class-methods)):\r\n\r\n```powershell\r\nclass bar : foo {\r\n    [string] sayhello($name) {\r\n        return ([foo] $this).sayhello($name) + \"`npower${name}\"\r\n    }\r\n}\r\n```\r\nOutput:\r\n<pre>\r\nhello shell\r\npowershell\r\n</pre>\r\n\r\nI would prefer to call the base class without having to repeat its name and without casting, similar to C#'s [`base`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/base) keyword:\r\n```powershell\r\nclass bar : foo {\r\n    [string] sayhello($name) {\r\n        # Currently not possible!\r\n        return $base.sayhello($name) + \"`npower${name}\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-02-13T21:03:17Z",
      "updated_at": "2021-02-13T21:08:26Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@zett42  thanks,\r\n\r\nthe problem with your ideas\r\n\r\n1)         return ([foo] $this).sayhello($name) + \"`npower${name}\"\r\n\r\nis uggly\r\n\r\n2)         return $base.sayhello($name) + \"`npower${name}\"\r\n\r\nits better but it need to write explicitly the code (sometimes is good) but not all the times...imagine you have a child class inherit to a base class and the base class inherit to a super class ? OR imagine your call to method is repeated in other methods...its preferable to use a new keyword to do this...but still your idea a good idea and maybe the 2 ideas is good to implement.\r\n\r\nexample of problems:\r\n\r\n```\r\n class b  {\r\n    funct() {}\r\n}\r\n\r\nclass c : b {\r\n    super funct() {}\r\n}\r\n\r\nclass d : b {\r\n    super funct() {}\r\n}\r\n\r\nclass c : b {\r\n    super funct() {}\r\n}\r\n```\r\n\r\nit less typing",
      "created_at": "2021-02-14T00:40:23Z",
      "updated_at": "2021-02-14T00:40:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> the problem with your ideas\r\n\r\nJust to be clear, the first example isn't an idea, that's how the PowerShell team decided to implement that functionality (side note: I can kinda see why. `$base` would have been a pain to implement with how the binder works, and since it probably doesn't matter for DSC it likely wasn't a big priority).  Like that example currently works.\r\n\r\n`$base` would have been nice, but implementing it today may not be feasible without breaking changes.\r\n\r\n---\r\n\r\nAs for `super`, that's sort of confusing with a return value.  It always just adds them together? So if the method returns `int`, the parent returns `5` and the child returns `5` then the invocation returns `10`?",
      "created_at": "2021-02-14T01:39:35Z",
      "updated_at": "2021-02-14T01:46:02Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n\r\nthanks...the idea come from [Ruby](https://stackoverflow.com/questions/4632224/super-keyword-in-ruby) . ",
      "created_at": "2021-02-14T07:55:47Z",
      "updated_at": "2021-02-14T07:55:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> thanks...the idea come from [Ruby](https://stackoverflow.com/questions/4632224/super-keyword-in-ruby) .\r\n\r\nLooks like (from that SO at least) it's called in a similar way as `$base` would be (e.g. it's a method body keyword, not a method signature keyword).  And it makes a little bit more sense there since they're doing the equivalent of `Write-Host` rather than actually trying to join return values.\r\n\r\n---\r\n\r\nIt **would** be nice to have a better way to call a method on the base class, even if it doesn't come up all that often.",
      "created_at": "2021-02-14T22:41:38Z",
      "updated_at": "2021-02-14T22:41:38Z"
    }
  ],
  "created_at": "2021-02-13T16:31:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 14795,
  "state": "open",
  "title": "metamorphism++",
  "updated_at": "2021-02-14T22:41:39Z"
}