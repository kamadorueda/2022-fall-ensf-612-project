{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8817",
  "author": "arizvisa",
  "body": "Hi guys, working on deprecating some Python script I've been using in favor of pwsh core. I'm simply trying to connect over WinRM with NTLM (Negotiate) as the authentication mechanism and `powershell-core` seems to act differently from powershell native. I'm using the docker://microsoft/powershell container to test.\r\n\r\nThere error message that `powershell-core` emits is:\r\n`acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.`\r\n\r\nThis message implies that the ntlm hash isn't being exchanged, but that'd be strange unless some capability is missing. So is that really the case, or is there some capability that `powershell-core` or maybe the hosted container is missing?\r\n\r\n### Target WS-Management version\r\n```\r\nPS C:\\Users\\user> Test-WSMan -ComputerName $h -Authentication Negotiate -Credential $creds\r\n\r\nwsmid           : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd\r\nProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd\r\nProductVendor   : Microsoft Corporation\r\nProductVersion  : OS: 6.2.9200 SP: 0.0 Stack: 3.0\r\n```\r\n\r\n### Windows vs Windows\r\n```\r\nPS C:\\Users\\user> $creds = Get-Credential -UserName root\r\n\r\ncmdlet Get-Credential at command pipeline position 1\r\nSupply values for the following parameters:\r\nMessage: default root password\r\nPS C:\\Users\\user> $h\r\n172.33.33.140\r\nPS C:\\Users\\user> New-PSSession -ComputerName $h -Credential $creds -Authentication Negotiate | Set-Variable -Name s\r\nPS C:\\Users\\user> $s\r\n\r\n Id Name            ComputerName    ComputerType    State         ConfigurationName    Availability\r\n -- ----            ------------    ------------    -----         -----------------    --------\r\n 19 Session19       172.33.33.140   RemoteMachine   Opened        Microsoft.PowerShell ...lable\r\n\r\nPS C:\\Users\\user> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.2580\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.2580\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n### PowerShell-Core (docker://microsoft/powershell:latest) vs Windows:\r\n```\r\nPS /> $creds = Get-Credential -UserName root\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nPassword for user root: *********************\r\n\r\nPS /> $h\r\n172.33.33.140\r\n\r\nPS /> Enter-PSSession -ComputerName $h -Credential $creds -Authentication Negotiate\r\nEnter-PSSession : Connecting to remote server 172.33.33.140 failed with the following error message : acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\nAt line:1 char:1\r\n+ Enter-PSSession -ComputerName $h -Credential $creds -Authentication N ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (172.33.33.140:String) [Enter-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n\r\nPS /> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.2\r\nPSEdition                      Core\r\nGitCommitId                    6.1.2\r\nOS                             Linux 4.14.96-coreos #1 SMP Mon Jan 28 05:16:10 -00 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2019-02-07T06:11:54Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Try the step-by-step https://blog.quickbreach.io/ps-remote-from-linux-to-windows/",
      "created_at": "2019-02-04T12:10:07Z",
      "updated_at": "2019-02-04T12:10:07Z"
    },
    {
      "author": "arizvisa",
      "author_association": "NONE",
      "body": "Freaking awesome. Thanks. The Windows box was already configured properly. Was totally an issue with the `microsoft/powershell` container not supporting NTLM out of the box.\r\n\r\nClosing since it turns out this issue is in the wrong tracker and should be in the PowerShell-Docker tracker.",
      "created_at": "2019-02-07T06:11:53Z",
      "updated_at": "2019-02-07T06:11:53Z"
    },
    {
      "author": "arizvisa",
      "author_association": "NONE",
      "body": "Ftr, the NTLM support for the `microsoft/powershell` container is being resolved by PowerShell/PowerShell-Docker#124.",
      "created_at": "2019-02-13T21:16:04Z",
      "updated_at": "2019-02-13T21:16:04Z"
    },
    {
      "author": "RDIL",
      "author_association": "CONTRIBUTOR",
      "body": "I'm working on adding it to the Docker images",
      "created_at": "2019-03-08T14:04:51Z",
      "updated_at": "2019-03-08T14:04:51Z"
    }
  ],
  "created_at": "2019-02-03T13:30:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Remoting"
  ],
  "number": 8817,
  "state": "closed",
  "title": "WinRM differences (NTLM) between PowerShell-Core and PowerShell-Native?",
  "updated_at": "2019-03-08T14:04:51Z"
}