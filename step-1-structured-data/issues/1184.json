{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1184",
  "author": "mirichmo",
  "body": "PowerShell requires a new module path that points to PowerShell Core modules rather than inbox PowerShell modules.\n\nDesired values and order:\n1. ~\\Documents\\PowerShell\\Modules - User documents module location for PowerShell Core\n2. %ProgramFiles%\\PowerShell\\Modules - Common module path for all instances of PowerShell Core\n3. %ProgramFiles%\\PowerShell<version>\\Modules - Module path for the specific instance of PowerShell Core that is running.\n\nPowerShell on Linux will need similar values, as described inline.\n",
  "closed_at": "2016-08-12T19:18:45Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Linux values are set according to XDG BDS for user modules (per #935), and use the app base for system modules (i.e. next to SMA).\n",
      "created_at": "2016-06-24T01:31:25Z",
      "updated_at": "2016-06-24T01:31:25Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@mirichmo Is this blocked by #1187?\n",
      "created_at": "2016-07-21T21:59:10Z",
      "updated_at": "2016-07-21T21:59:10Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "Yes\n",
      "created_at": "2016-07-21T23:57:48Z",
      "updated_at": "2016-07-21T23:57:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "resolved by #1721\n",
      "created_at": "2016-08-12T19:18:45Z",
      "updated_at": "2016-08-12T19:18:45Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@mirichmo This seems to break PowershellGet for me. If I run `install-module zlocation`, this results in the ZLocation module being installed to ~\\Documents\\WindowsPowerShell\\Modules. However, this is no longer in `PSModulePath`. As a result using `ipmo zlocation` or trying to use any commands from the module fails.\n\nEither this location should be kept in PSModulePath, or PowershellGet should install modules to the updated ~\\Documents\\Powershell\\Modules location.\n",
      "created_at": "2016-08-21T20:11:02Z",
      "updated_at": "2016-08-21T20:11:38Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@masaeedu - I would preference for PowerShellGet to understand which edition it is that its being run on and install to \\Documents\\WindowsPowershell\\Modules if Desktop or \\Documents\\PowerShell\\Modules if on Core\n\nHowever there is nothing stopping you explictly adding a location to PSModulePath in your session or as part of your profile for PSCore like i've shown in this blog post https://blog.kilasuit.org/2016/08/21/1-small-thing-about-running-powershell-core-and-windows-powershell-side-by-side-on-windows/ \n",
      "created_at": "2016-08-21T20:20:16Z",
      "updated_at": "2016-08-21T20:20:16Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@kilasuit I don't have any particular preferences for where Powershell installs modules, as long as the out of box experience works without fiddling with my environment variables. Currently the out of box experience does not work. If you _do_ require me to fiddle with my environment variables before `install-module foo` will work, the exact changes should be documented in the getting started markdown.\n",
      "created_at": "2016-08-21T20:23:25Z",
      "updated_at": "2016-08-21T20:23:25Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@kilasuit Also, re:\n\n> I would preference for PowerShellGet to understand which edition it is that its being run on and install to \\Documents\\WindowsPowershell\\Modules if Desktop or \\Documents\\PowerShell\\Modules if on Core\n\nThis is not what currently happens. I'm running Powershell Core and the version of PowershellGet loaded is the one bundled with the v6 alpha. Installed modules still end up in ~\\Documents\\WindowsPowershell.\n\n```\nPS C:\\Program Files\\PowerShell\\6.0.0.9> ls C:\\Users\\masae\\Documents\\PowerShell\\Modules\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> ls C:\\Users\\masae\\Documents\\WindowsPowerShell\\Modules\\\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      6.0.0-alpha\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\nBuildVersion                   3.0.0.0\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nPSEdition                      Core\nCLRVersion\nGitCommitId                    v6.0.0-alpha.9-107-gfb3d929e15c51028cf8d6ff6afd0dd19f288e9fd\nWSManStackVersion              3.0\n\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> (get-command Install-Module).Module.Path\nC:\\program files\\powershell\\6.0.0.9\\Modules\\PowerShellGet\\PSModule.psm1\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> Install-Module zlocation -Scope CurrentUser\n\nUntrusted repository\nYou are installing the modules from an untrusted repository. If you trust this repository, change its\nInstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install the modules from\n'PSGallery'?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): A\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> ls C:\\Users\\masae\\Documents\\PowerShell\\Modules\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9> ls C:\\Users\\masae\\Documents\\WindowsPowerShell\\Modules\\\n\n\n    Directory: C:\\Users\\masae\\Documents\\WindowsPowerShell\\Modules\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----       2016-08-21   4:27 PM                ZLocation\n\n\nPS C:\\Program Files\\PowerShell\\6.0.0.9>\n```\n",
      "created_at": "2016-08-21T20:25:56Z",
      "updated_at": "2016-08-21T20:29:02Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I personally never install modules to user location but that is because\n\n> I own my machine\n> Therefore I have admin rights\n\nAlso \n\n> This is not what currently happens.\n\nYeah but logically that is how it should work with the change to the User path in PSModulePath\n\nPlus PowerShellGet requires some work before it really is a useful module and IMO should not have been bundled with PSCore until the issues were worked out especially with the move to SemanticVersioning which has broken a number of things.\n",
      "created_at": "2016-08-21T20:30:27Z",
      "updated_at": "2016-08-21T20:30:27Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "You can _**always**_ import modules using the full path to the psd1/psm1/dll file (which I actually do really more frequently than just via the module name)\n\nSo like so it would be \n\n``` powershell\nImport-Module C:\\Users\\Ryan\\OneDrive\\GitHub\\PowerShellModules\\PesterHelpers\\PesterHelpers.psd1\n```\n",
      "created_at": "2016-08-21T20:36:52Z",
      "updated_at": "2016-08-21T20:36:52Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "> I own my machine\n> Therefore I have admin rights\n\nThat's great, but non-admin installs should still work as they did before. I should mention that admin installs with Powershell Core doesn't really fix the issue, so this is not relevant. `C:\\Program Files\\WindowsPowerShell` is not in the PSModulePath either, but that's where an `AllUsers` scoped install of a module ends up.\n\n> Yeah but logically that is how it should work with the change to the User path in PSModulePath\n\nI'm not sure what this means. Are you saying this change is already checked in somewhere or that you agree it should behave as I mentioned earlier (i.e. either keep ~/Documents/WindowsPowershell in PSModulePath or make PowershellGet install to ~/Documents/Powershell on Powershell Core)?\n\n> especially with the move to SemanticVersioning which has broken a number of things.\n\nThe SemanticVersioning issues have been resolved in the nightlies.\n\nI am aware you can manually import powershell modules from wherever they may exist on disk, but I don't see how this is relevant to fixing the `install-module foo; ipmo foo;` workflow we had in Powershell 5.\n",
      "created_at": "2016-08-21T20:42:01Z",
      "updated_at": "2016-08-21T20:44:43Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@bmanikm Can you please take a look at this. It seems like @masaeedu is reporting a bug in PowerShellGet and I'd like you to confirm it. If so, please file a new issue to cover it.\n",
      "created_at": "2016-08-22T17:07:27Z",
      "updated_at": "2016-08-22T17:07:27Z"
    },
    {
      "author": "bmanikm",
      "author_association": "CONTRIBUTOR",
      "body": "@mirichmo @masaeedu I have created #2021 to correct the installation locations in PowerShell Core on Windows.\n",
      "created_at": "2016-08-22T21:54:52Z",
      "updated_at": "2016-08-22T21:54:52Z"
    }
  ],
  "created_at": "2016-06-23T21:22:49Z",
  "labels": [
    "Area-SideBySide"
  ],
  "number": 1184,
  "state": "closed",
  "title": "Update PowerShell Module Path ",
  "updated_at": "2016-08-22T21:54:52Z"
}