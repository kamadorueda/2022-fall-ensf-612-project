{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17433",
  "author": "Jaykul",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nFor **every** object, this is true:\r\n```PowerShell\r\n$InputObject.ToString -as [Func[String]]\r\n```\r\n\r\nBut if I put that code in a function:\r\n```PowerShell\r\nfilter ConvertTo-String {\r\n    [CmdletBinding()]\r\n    param([Parameter(ValueFromPipeline)]$InputObject)\r\n    if ($InputObject.ToString -as [Func[String]]) {\r\n        $PSStyle.Foreground.Yellow + $InputObject.ToString()\r\n    }\r\n}\r\n```\r\n\r\nIt's literally **never** true.\r\n\r\nI had to add this:\r\n\r\n```PowerShell\r\n    elseif ($InputObject.psobject.BaseObject.ToString -as [Func[String]]) {\r\n        $PSStyle.Foreground.Cyan + $InputObject.ToString()\r\n    }\r\n```\r\n\r\nThe weird thing is that `$InputObject.ToString.GetType() -eq $InputObject.psobject.BaseObject.ToString.GetType()` so I don't know why one is castable and the other is not.\r\n\r\nFor what it's worth, my original goal was to write some \"duck typing\" where I check for \"ToPsMetadata\" and \"FromPsMetadata\" and assume the object implements `IPSMetadataSerializable`:\r\n\r\n```csharp\r\npublic interface IPsMetadataSerializable {\r\n    string ToPsMetadata();\r\n    void FromPsMetadata(string Metadata);\r\n}\r\n```\n\n### Expected behavior\n\n```console\n`$Object.ToString -as [Func[String]]` should always return the delegate\n```\n\n\n### Actual behavior\n\n```console\nIf the `$Object` is a PSObject, the PSMethodInfo can't be cast to the delegate\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPSVersion                      7.2.4\r\nPSEdition                      Core\r\nGitCommitId                    7.2.4\r\nOS                             Microsoft Windows 10.0.22621\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Basically when `PSGetMemberBinder` calls `PSGetMemberBinder.CloneMemberInfo` it's not unwrapping psobjects. So the instance type \"doesn't match\" when creating the delegate with `MethodInfo.CreateDelegate`\r\n\r\nBinder disassembly for when wrapped in a pso:\r\n\r\n![image](https://user-images.githubusercontent.com/24977523/170174942-1a1bdf0c-9f65-4ded-a803-3a581e64b9a5.png)\r\n\r\nBinder disassembly for when *not* wrapped in a pso:\r\n\r\n![image](https://user-images.githubusercontent.com/24977523/170174981-65c9243c-eb30-45ee-bad4-f0ec3565176c.png)\r\n\r\nNotably, the former does not unwrap `self` (what I named the instance var) and just passes it as is. It should either unwrap, or take the `instance` field from the source object.",
      "created_at": "2022-05-25T03:43:35Z",
      "updated_at": "2022-05-25T03:43:35Z"
    }
  ],
  "created_at": "2022-05-25T02:33:05Z",
  "number": 17433,
  "state": "open",
  "title": "Casting method group to delegate fails when instance is PSObject",
  "updated_at": "2022-10-17T20:18:19Z"
}