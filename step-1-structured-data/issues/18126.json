{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18126",
  "author": "KatsutoshiOtogawa",
  "body": "### Summary of the new feature / enhancement\n\nI would like to add Set-WinEnvironmentVariable and Get-WinEnvironmentVariable cmdlets that work only in Windows environment so that I can manipulate environment variables from the terminal.\r\n\r\nThe existing ones require the use of setx.exe, which is inconvenient, and are not very compatible with powershell.\r\n\r\nI have already written the source code to add them, including testing, and will send a pull request as soon as the proposal is accepted.\r\n\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-09-28T08:01:19Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "```powershell\r\n PS > [Environment]::SetEnvironmentVariable      \r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic void SetEnvironmentVariable(string variable, string value)\r\nstatic void SetEnvironmentVariable(string variable, string value, System.EnvironmentVariableTarget target)\r\n\r\nPS > [Environment]::GetEnvironmentVariable      \r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic string GetEnvironmentVariable(string variable)\r\nstatic string GetEnvironmentVariable(string variable, System.EnvironmentVariableTarget target)\r\n\r\nPS > [EnvironmentVariableTarget].GetEnumValues()\r\nProcess\r\nUser\r\nMachine\r\n```\r\n",
      "created_at": "2022-09-19T15:43:53Z",
      "updated_at": "2022-09-19T15:43:53Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry It's worth noting that the environment variable handling in .NET is broken. It auto expands environment variables when you retrieve them and when you save them it changes the corresponding registry keys to regular strings instead of expandable strings.  \r\nI think it would be great to have a command for this because even if the simple .NET APIs for this weren't completely broken, they are still not as convenient to call as a regular command and it seems like a relatively common task.",
      "created_at": "2022-09-19T22:52:47Z",
      "updated_at": "2022-09-19T22:52:47Z"
    },
    {
      "author": "KatsutoshiOtogawa",
      "author_association": "NONE",
      "body": "ex)\r\n\r\n```powershell\r\n\r\n\r\n# If EnvironmentVariable is not specified\r\nPS > Get-WinEnvironmentVariable\r\n\r\n\r\nName Value\r\n---- -----\r\nOS Windows_NT\r\nUSERNAME YourName\r\nPROCESSOR_LEVEL 6\r\nGOPATH C:\\Users\\YourName\\go\r\nSystemDrive C:\r\nSystemRoot C:\\Windows\r\nHOMEPATH \\Users\\YourName\r\n...\r\n\r\n# Given Delimiter and Name, it returns with a list of strings.\r\nPS > Get-WinEnvironmentVariable -Name \r\n\r\n# Anything in Windows that has a fixed delimiter as a system\r\nPath, PATHEXT, etc.\r\nPS > Get-WinEnvironmentVariable -Name Path\r\n\r\n\r\n# If you give -Raw and -Name, it will be displayed in one line.\r\nPS > Get-WinEnvironmentVariable -Name Path -Raw\r\n\r\n\r\n# Overwrite and save\r\nPS > Set-WinEnvironmentVariable -Name Path -Value \"C:\\Program Files\\Go\\bin;C:\\Program Files\\PowerShell\\7;C:\\Windows\\system32\"\r\n\r\n\r\n# Add the path to the Path environment variable\r\nPS > \"C:\\Program Files\\Go\\bin\" | Set-WinEnvironmentVariable -Name Path -Append\r\n\r\n# When Append or Array is passed, an error is generated if Delimiter is not specified.\r\n(Prevention of op-mistakes)\r\n\r\nPS > \"C:\\Program Files\\Go\\bin\" | Set-WinEnvironmentVariable -Name foo -Append\r\nShuld be error\r\n```\r\n\r\n\r\n\r\nSet-WinEnvironmentVariable will only ask the user for confirmation by default for safety reasons, unless the EnvironmentVariableTarget is Process.\r\nFor safety reasons, the default is to ask the user for confirmation.\r\n\r\nIf Force is given, confirmation is skipped, but if administrative privileges are required, processing stops with an error.\r\n",
      "created_at": "2022-09-20T07:12:56Z",
      "updated_at": "2022-09-20T07:26:02Z"
    },
    {
      "author": "KatsutoshiOtogawa",
      "author_association": "NONE",
      "body": "@237dmitry \r\nAs it is now with Powershell, users are confused by using dotnet objects, setx.exe which is supposed to be used with cmd, and Env:Path.\r\n\r\nI think that Windows applications and api's that will be used frequently should be provided with dedicated cmdlets for them.\r\n",
      "created_at": "2022-09-20T07:23:58Z",
      "updated_at": "2022-09-20T07:23:58Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> users are confused by using dotnet objects\r\n\r\nI disagree with this statement.\r\n\r\nI very rarely change system and user environment variables, mostly in the current session, `env:` and `$env` are quite enough for this. Nevertheless, I agreed with your request for a feature.",
      "created_at": "2022-09-20T08:08:24Z",
      "updated_at": "2022-09-20T08:25:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is a dupe of https://github.com/PowerShell/PowerShell/issues/3108.  Recommendation is to do this as a module published to PowerShellGallery (there might already be such modules there)",
      "created_at": "2022-09-26T18:18:07Z",
      "updated_at": "2022-09-26T18:18:45Z"
    },
    {
      "author": "KatsutoshiOtogawa",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nIt should not be put out in a module outside of Powershell.\r\n\r\nThere are two main ways for the user to manipulate environment variables.\r\n1. dotnet's [Environment]::SetEnvironmentVariable()\r\n2. the GUI's \"Edit the System Environment Variable\".\r\n\r\nHowever, the handling of these two environment variables is clearly broken.\r\n\r\nThis is described in fixes <https://github.com/dotnet/runtime/issues/1442>. \r\n\r\n1.[Environment]::SetEnvironmentVariable() always overwrites an existing environment variable with REG_SG, no matter what its Type is. Therefore, if an environment variable in the form of %var% is saved with a Type of REG_EXPAND_SG, the value cannot be expanded.\r\n2. \"Edit the System Environemt\" will always overwrite with REG_EXPAND_SG if an environment variable is saved that contains the string %.\" It is at the point of finding the \"%\", not the variable expansion \"%var%\". Therefore, if you have saved a string containing % in an environment variable as REG_SG, it will be changed to REG_EXPAND_SG by itself when you use \"Edit the System Environment Variable\" to overwrite any value.\r\n\r\nThis bug has existed since the .net framework days and has not been resolved even in the latest dotnet 7.0-rc1, requiring users to tinker with their systems based on the [Environment]::SetEnvironmentVariable() bug assumption.\r\nSimilarly, \"Edit the System Environment Variable\" has not been fixed in Windows 11 (21H1).\r\n\r\nTherefore, Windows needs to add some functionality to allow ordinary users to manipulate environment variables without encountering bugs.\r\nCurrently, it would be most appropriate to add the functionality as a Powershell cmdlet.\r\n\r\nEven if we create a cmdlet, it is not enough to just create a wrapper for [Environment]::SetEnvironmentVariable(). You need to manipulate the registry from dotnet in order to do so safely.\r\n\r\nIf you want to handle environment variables, you should not use [Environment]::SetEnvironmentVariable(), but use\r\nSet-ItemProperty, Get-ItemProperty, and New-ItemProperty are still more appropriate.\r\n\r\nHowever, Set-ItemProperty can set types other than REG_SG and REG_EXPAND_SG, which Windows probably does not expect as environment variables. ([Environment]::GetEnvironmemtVariable() cannot expand environment variables of Types other than REG_SG and REG_EXPAND_SG and returns null.)\r\n\r\nIn light of the above, other cmdlet should be provided just for manipulating environment variables apart from *-ItemProperty.\r\n\r\nAnd since most of this process is Windows-only, it should be a Windows-only cmdlet (Linux and macos provide an easier way to change environment variables in the first place).\r\nSo the name *-WinEnvironmentVariable is more appropriate than *-EnvironmentVariable, which also supports Linux and macos.\r\n\r\n",
      "created_at": "2022-09-27T06:27:47Z",
      "updated_at": "2022-09-27T06:27:47Z"
    },
    {
      "author": "KatsutoshiOtogawa",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nI've searched the command red in PowershellGallery that manipulates Windows environment variables.\r\nAll of the cmdlets that come to the top of the search use [Environment]::GetEnvironmentVariable(), [Environment]::SetEnvironmentVariable().\r\n\r\nIf you are using EnvironmentVariableTarget.Process, these two functions are fine, but anything else is a breeding ground for bugs.",
      "created_at": "2022-09-27T06:35:14Z",
      "updated_at": "2022-09-27T06:35:14Z"
    },
    {
      "author": "KatsutoshiOtogawa",
      "author_association": "NONE",
      "body": "I am ashamed to say that I did not know about this [Environment]::SetEnvironmentVariable() bug when I submitted the pull request <https://github.com/PowerShell/PowerShell/pull/18155>,  so this pull request has the same bug as the others.\r\n\r\nHowever, I have rewritten it in a way that manipulates the registry. This way you won't be bothered by the [Environment]::SetEnvironmentVariable() bug.",
      "created_at": "2022-09-27T06:42:42Z",
      "updated_at": "2022-09-27T06:42:42Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-09-28T08:01:18Z",
      "updated_at": "2022-09-28T08:01:18Z"
    }
  ],
  "created_at": "2022-09-19T13:34:19Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement",
    "Needs-Triage"
  ],
  "number": 18126,
  "state": "closed",
  "title": "Set and Get windows environment variables from powershell",
  "updated_at": "2022-09-28T08:01:19Z"
}