{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2906",
  "author": "u-s",
  "body": "Attacker may bypass AMSI by adding \"[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('s_amsiInitFailed','NonPublic,Static').SetValue($null,$true)\" to script. \r\n\r\nThis attack was described in this article: http://www.labofapenetrationtester.com/2016/09/amsi.html",
  "closed_at": "2017-06-01T16:32:54Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "CC @LeeHolmes ",
      "created_at": "2016-12-19T17:01:04Z",
      "updated_at": "2016-12-19T17:01:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @PaulHigin ",
      "created_at": "2017-05-19T17:28:14Z",
      "updated_at": "2017-05-19T17:28:14Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "If an attacker can run C# reflection code then the machine is already compromised.  This would be a concern if the machine was locked down with application white listing (such as with AppLocker or DeviceGuard UMCI), but in this case locked down PowerShell runs in constrained language mode and does not allow DotNet reflection code to run which prevents the AMSI bypass.",
      "created_at": "2017-05-22T16:20:57Z",
      "updated_at": "2017-05-22T16:20:57Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I am closing this issue since I believe this is not a security concern.",
      "created_at": "2017-06-01T16:32:54Z",
      "updated_at": "2017-06-01T16:32:54Z"
    }
  ],
  "created_at": "2016-12-19T16:55:15Z",
  "labels": [
    "Resolution-Won't Fix",
    "WG-Engine",
    "WG-Security"
  ],
  "number": 2906,
  "state": "closed",
  "title": "Set s_amsiInitFailed to true to avoid AMSI content scan",
  "updated_at": "2017-06-02T06:31:31Z"
}