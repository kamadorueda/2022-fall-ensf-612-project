{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9731",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIf we permit the `IsFilter` property on a scriptblock to be either internally or publicly settable, we can make more effective use of anonymous scriptblocks as impromptu filters. These could be utilised in a pipeline context to emulate `ForEach-Object` without a lot of the extra features and overhead afforded that cmdlet, for scenarios where speed is significantly more important.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L325\r\n\r\nThis property needs to have at least `internal set` so that the following property that references it can also be set here instead of just throwing:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/System.Management.Automation/engine/lang/scriptblock.cs#L572-L577\r\n\r\nWith that permitted, we can perhaps implement an operator or an attribute such that this becomes possible as an impromptu `ForEach-Object` with none of the fluff.\r\n\r\n```powershell\r\n1..10 | & [filter]{ $_ % 3 } \r\n```\r\n\r\nCurrently, this is possible by specifying the process block, but this syntax becomes quite cluttered very easily:\r\n\r\n```powershell\r\n1..10 | & { process { $_ % 3 } }\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Ad hoc filtering is what \"ForEach-Object\" is for:\r\n```powershell\r\n1..10 | foreach { $_ % 3 }\r\n1..20 | % { $_ * 14 }\r\n```\r\nWhat do you think is missing? \r\n\r\n(Aside - the whole `filter` thing was a mistake I made back in V1. At one point, functions weren't going to have begin/process/end so there would be no way of  writing _functions_ that streamed. As a partial mitigation, I proposed the `Filter` keyword as a way to allow at least some stream processing. When we eventually did add begin/process/end, we really should have removed \"filter\". It just confuses people).",
      "created_at": "2019-05-28T21:43:55Z",
      "updated_at": "2019-05-28T21:43:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What's missing is any semblance of decent performance with ForEach-Object. Compared to an ad hoc function-style filter, it is extremely slow. \r\n\r\nThe fact that an ad hoc filter function can outstrip it by such large margins should be a pretty big red flag for the code that is used in ForEach-Object. Some additional overhead may be warranted, but not to this degree, surely.\r\n\r\nThere are other issues about this, which I'll happily dig up later if you need me to.",
      "created_at": "2019-05-28T22:33:02Z",
      "updated_at": "2019-05-28T22:33:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Performance of `ForEach-Object` can be significantly improved without really touching the parameter binder.\r\n\r\nOne option is to rewrite the pipeline - see how `| Out-Null` is special cased, you can make similar changes to handle **limited** uses of `ForEach-Object`, e.g. if you have a single literal scriptblock argument, you could rewrite the pipeline to not use `ForeEach-Object` and instead invoke the scriptblock as a filter.\r\n\r\nAlternatively, you could create a special parameter binder that has special knowledge about `ForEach-Object`. This is a little riskier but a reasonable option for an such an important cmdlet.",
      "created_at": "2019-05-28T23:01:08Z",
      "updated_at": "2019-05-28T23:01:08Z"
    }
  ],
  "created_at": "2019-05-26T05:12:42Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 9731,
  "state": "open",
  "title": "Allow anonymous functions to be treated as filters",
  "updated_at": "2019-05-28T23:01:08Z"
}