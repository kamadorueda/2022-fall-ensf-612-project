{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6288",
  "author": "alx9r",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\ntry\r\n{\r\n    throw\r\n}\r\ncatch\r\n{\r\n    [bool]$_.Exception.WasThrownFromThrowStatement\r\n}\r\n\r\ntry\r\n{\r\n    throw [System.Exception]::new()\r\n}\r\ncatch\r\n{\r\n    [bool]$_.Exception.WasThrownFromThrowStatement\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTrue\r\nTrue\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTrue\r\nFalse\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": "2018-03-14T19:37:51Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As discussed, the problem happens with `[System.Exception]`-_derived_ types as well, except for `[System.Management.Automation.RuntimeException]`, which is what PowerShell _implicitly_ uses when you throw nothing or any object that is not an exception.",
      "created_at": "2018-03-01T22:30:49Z",
      "updated_at": "2018-03-01T22:30:49Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The `.WasThrownFromThrowStatement` property along with `RuntimeException` are implementation details for the PowerShell runtime and aren't intended to be used by end users. `.WasThrownFromThrowStatement` exists so that the `throw` statement can throw an exception that won't be caught by pipeline exception handlers allowing the exception to propagate up through a set of nested pipelines. Since it's PowerShell-specific, it won't appear on any non-PowerShell types.",
      "created_at": "2018-03-14T19:28:21Z",
      "updated_at": "2018-03-14T19:28:21Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">Since it's PowerShell-specific, it won't appear on any non-PowerShell types.\r\n\r\nThanks for the clarity @BrucePay \r\n",
      "created_at": "2018-03-14T19:37:51Z",
      "updated_at": "2018-03-14T19:37:51Z"
    }
  ],
  "created_at": "2018-03-01T22:25:24Z",
  "number": 6288,
  "state": "closed",
  "title": ".WasThrownFromThrowStatement not available for System.Exception",
  "updated_at": "2018-03-24T17:34:22Z"
}