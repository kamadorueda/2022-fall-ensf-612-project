{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8158",
  "author": "SteveL-MSFT",
  "body": "Path normalization (fixing of slashes) is happening regardless of whether `-literalpath` is used.  Seen in `Set-Content`, `Get-Content`, `Out-File` (maybe others, search for `NormalizePath()`\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# on Unix based system\r\nSet-Content -LiteralPath \"\\foo.txt\" -Value \"bar\"\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nA file called \"\\foo.txt\" is created with content \"bar\"\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nPath normalization (fixing slashes) doesn't take into account that this is a literal path.\r\n\r\n```none\r\nSet-Content : Access to the path '/foo.txt' is denied.\r\nAt line:1 char:1\r\n+ Set-Content -LiteralPath \"\\foo.txt\" -Value \"bar\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : PermissionDenied: (/foo.txt:String) [Set-Content], UnauthorizedAccessException\r\n+ FullyQualifiedErrorId : GetContentWriterUnauthorizedAccessError,Microsoft.PowerShell.Commands.SetContentCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.1\r\nOS                             Darwin 18.0.0 Darwin Kernel Version 18.0.0: Wed Aug 22 20:13:40 PDT 2018; root:xnu-4903.201.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-03-29T03:16:43Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Given that `\\` is not a wildcard-expression metacharacter, I would expect it to be treated as a literal in `-Path` arguments too.\r\n\r\nIn https://github.com/PowerShell/PowerShell/issues/6833#issuecomment-389690161 you've talked about the need to support _escaping_ `\\` in paths, without being specific about `-Path` vs. `-LiteralPath`:\r\n\r\n```powershell\r\nSet-Content -LiteralPath '`\\foo.txt' -Value \"bar\"\r\nSet-Content  '`\\foo.txt' -Value \"bar\" # implied -Path\r\n```\r\n\r\nTo me it makes sense to treat the `\\` issue separately from the `-Path` / `-LiteralPath` dichotomy, as the latter is at least currently strictly about _wildcards_.\r\n",
      "created_at": "2018-10-31T16:57:10Z",
      "updated_at": "2018-10-31T16:57:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 the problem isn't that `\\` is treated as `wildcard`, but that the cmdlets apply path normalization first before using the path.  So all `\\` gets changed to `/` on non-Windows (and vice versa for Windows). \r\n\r\nEven:\r\n\r\n```powershell\r\nset-content \"`\\bar.txt\" -Value \"foo\"\r\n```\r\n\r\nfails as it tries to write to `/bar.txt`",
      "created_at": "2018-10-31T17:27:52Z",
      "updated_at": "2018-10-31T17:27:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood, @SteveL-MSFT. \r\n\r\nMy example commands showed how it _should_ work _once fixed_, based on my interpretation of the conclusion reached in #6833 - did I misread that conclusion?\r\n\r\nMy point was that this escaping should work with both `-Path` and `-LiteralPath` arguments, as the latter distinction - at least so far - relates to wildcards only, and the `\\` / `/` issue is conceptually separate.\r\n\r\nAfter all, I shouldn't have to forgo wildcard matching just so I can get my `\\` chars. interpreted as-is.\r\n\r\nAn aside re your example: If you use _double_ quotes, you'll have to use _two_ `` ` `` chars., because a single one is \"eaten\" by string parsing.\r\n\r\n",
      "created_at": "2018-10-31T17:48:48Z",
      "updated_at": "2018-10-31T17:48:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 ok, I see what you mean.  Yes, if escaped properly, it should work with `-Path` as well.",
      "created_at": "2018-10-31T18:52:45Z",
      "updated_at": "2018-10-31T18:52:45Z"
    }
  ],
  "created_at": "2018-10-31T16:26:04Z",
  "number": 8158,
  "state": "closed",
  "title": "Some cmdlets don't respect `-LiteralPath` when it comes to backslashes",
  "updated_at": "2019-03-29T03:16:43Z"
}