{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5561",
  "author": "kai-h",
  "body": "I can not connect to Office 365 / Exchange Online with PowerShell.\r\nApparently others can with the latest version of push, but it is not working for me on either macOS 10.12 or 10.13 with pwsh 6.0.0-rc\r\n\r\nI get an error creating the New-PSSession. Depending on the exact syntax of the command I'm using, it either says New-PSSession : This parameter set requires WSMan, and no support WSMan client library was found, or PowerShell quits with an unhandled exception and abort trap 6.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nInstall PowerShell 6.0.0-rc on macOS 10.12 or 10.13.\r\nUse Get-Credential to get an Office 365 administrator credential and then use New-PSSession to create a new session.\r\n\r\n```powershell\r\n[kai@blackmac ~]$ pwsh\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $PSVersionTable                                        \r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-rc                                        \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-rc                                       \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: T...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n\r\n\r\nPS /Users/kai> $UserCredential = Get-Credential                       \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.com\r\nPassword for user admin@example.com: ***********\r\n\r\nPS /usr/local/microsoft> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                     \r\nNew-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceUnavailable: (:) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : System.Management.Automation.Remoting.PSRemotingDataStructureException,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n \r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid -Credential $UserCredential -Authentication Basic -AllowRedirection                      \r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Management.Automation.Remoting.PrioritySendDataCollection.Clear()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.Finalize()\r\nAbort trap: 6\r\n[kai@blackmac ~]$ \r\n```\r\nYou will note from the prompt in the last line above that it's dropped me back into the bash shell.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nIt is expected that New-PSSession will work on macOS\r\n\r\nActual behavior\r\n---------------\r\n\r\nDepending on the precise syntax of the command, New-PSSession either returns an error message:\r\nNew-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found\r\nOr, New-PSSession has an unhandled exception and PowerShell quits with abort trap 6.\r\n\r\nThe differences in the syntax are with the ConnectionUri - whether or not there is a trailing slash on the uri seems to make the difference. With a trailing slash, I get the error about WSMan missing. Without the trailing slash, the PowerShell session aborts.\r\n\r\nWith trailing slash:\r\n```powershell\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                     \r\nNew-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceUnavailable: (:) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : System.Management.Automation.Remoting.PSRemotingDataStructureException,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n```\r\nWithout trailing slash:\r\n```powershell\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid -Credential $UserCredential -Authentication Basic -AllowRedirection                      \r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Management.Automation.Remoting.PrioritySendDataCollection.Clear()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.Finalize()\r\nAbort trap: 6\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPS /Users/kai> $PSVersionTable                                                                                                                                                                                Name                           Value                                                                   \r\n----                           -----                                                                  \r\nPSVersion                      6.0.0-rc                                                               \r\nPSEdition                      Core                                                                   \r\nGitCommitId                    v6.0.0-rc                                                              \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT ...\r\nPlatform                       Unix                                                                   \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                \r\nPSRemotingProtocolVersion      2.3                                                                    \r\nSerializationVersion           1.1.0.1                                                                \r\nWSManStackVersion              3.0                                                                    \r\n```\r\n",
  "closed_at": "2018-10-11T22:34:45Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is working for me on 10.13.1.  Can you confirm that in $PSHome you have `libpsrpclient.dylib`?",
      "created_at": "2017-11-29T00:23:53Z",
      "updated_at": "2017-11-29T00:23:53Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "```powershell\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> cd $PSHome                                                       \r\nPS /usr/local/microsoft/powershell/6.0.0-rc> ls -al *.dylib                     \r\n-rw-r--r--  1 root  wheel    70224 31 Oct 17:27 System.Globalization.Native.dylib\r\n-rw-r--r--  1 root  wheel    13484 31 Oct 17:27 System.IO.Compression.Native.dylib\r\n-rw-r--r--  1 root  wheel    61460 31 Oct 17:27 System.Native.dylib\r\n-rw-r--r--  1 root  wheel    16932 31 Oct 17:27 System.Net.Http.Native.dylib\r\n-rw-r--r--  1 root  wheel    15132 31 Oct 17:27 System.Net.Security.Native.dylib\r\n-rw-r--r--  1 root  wheel    46016 31 Oct 17:27 System.Security.Cryptography.Native.Apple.dylib\r\n-rw-r--r--  1 root  wheel    75708 31 Oct 17:27 System.Security.Cryptography.Native.OpenSsl.dylib\r\n-rw-r--r--  1 root  wheel  2571480 31 Oct 17:27 libclrjit.dylib\r\n-rw-r--r--  1 root  wheel  6894904 31 Oct 17:27 libcoreclr.dylib\r\n-rw-r--r--  1 root  wheel   883740 31 Oct 17:27 libdbgshim.dylib\r\n-rw-r--r--  1 root  wheel   869664 31 Oct 17:27 libhostfxr.dylib\r\n-rw-r--r--  1 root  wheel  1006336 31 Oct 17:27 libhostpolicy.dylib\r\n-rw-r--r--  1 root  wheel   843792 14 Nov 11:37 libmi.dylib\r\n-rw-r--r--  1 root  wheel  3081760 31 Oct 17:27 libmscordaccore.dylib\r\n-rw-r--r--  1 root  wheel  2021168 31 Oct 17:27 libmscordbi.dylib\r\n-rw-r--r--  1 root  wheel    20568  4 Nov 09:08 libpsl-native.dylib\r\n-rw-r--r--  1 root  wheel   224784 15 Nov 07:39 libpsrpclient.dylib\r\n-rw-r--r--  1 root  wheel   553360 31 Oct 17:27 libsos.dylib\r\nPS /usr/local/microsoft/powershell/6.0.0-rc> \r\n```",
      "created_at": "2017-11-29T00:32:09Z",
      "updated_at": "2017-11-29T00:32:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kai-h you have the right library with the right file size and permissions.  Is DYLD_LIBRARY_PATH defined?  What is the output of `$env:DYLD_LIBRARY_PATH`?",
      "created_at": "2017-11-29T01:30:39Z",
      "updated_at": "2017-11-29T01:30:39Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "It's undefined.\r\n```powershell\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $env:DYLD_LIBRARY_PATH                                           \r\nPS /Users/kai> \r\n````",
      "created_at": "2017-11-29T01:32:08Z",
      "updated_at": "2017-11-29T01:32:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "What does `[System.Environment]::Is64BitProcess` return?",
      "created_at": "2017-11-29T01:53:17Z",
      "updated_at": "2017-11-29T01:53:17Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "```powershell\r\nPS /Users/kai> [System.Environment]::Is64BitProcess                             \r\nTrue\r\n```",
      "created_at": "2017-11-29T01:55:44Z",
      "updated_at": "2017-11-29T01:55:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kai-h try (in the terminal before starting pwsh):\r\n```bash\r\nexport DYLD_LIBRARY_PATH=/usr/local/microsoft/powershell/6.0.0-rc:${DYLD_LIBRARY_PATH}\r\npwsh\r\n$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection\r\n```",
      "created_at": "2017-11-29T02:57:44Z",
      "updated_at": "2017-11-29T02:57:44Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Thank you for your persistence with this. I'm still getting the same error though.\r\n\r\n```\r\n[kai@hobbes ~]$ export DYLD_LIBRARY_PATH=/usr/local/microsoft/powershell/6.0.0-rc:${DYLD_LIBRARY_PATH}\r\n[kai@hobbes ~]$ pwsh\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                 \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: ********\r\n\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Management.Automation.Remoting.PrioritySendDataCollection.Clear()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.Finalize()\r\nAbort trap: 6\r\n[kai@hobbes ~]$ \r\n```",
      "created_at": "2017-11-29T03:14:02Z",
      "updated_at": "2017-11-29T03:14:02Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I'd like to confirm that I can successfully connect to Office 365 from PowerShell hosted on an Azure Ubuntu virtual machine, using the exact same details as I'm trying on the Mac.\r\n```powershell\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /home/kai>  $PSVersionTable                                                                                                                               \r\n\r\nName                           Value                                                                                                                        \r\n----                           -----                                                                                                                        \r\nPSVersion                      6.0.0-rc                                                                                                                     \r\nPSEdition                      Core                                                                                                                         \r\nGitCommitId                    v6.0.0-rc                                                                                                                    \r\nOS                             Linux 4.4.0-22-generic #40-Ubuntu SMP Thu May 12 22:03:46 UTC 2016                                                           \r\nPlatform                       Unix                                                                                                                         \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                      \r\nPSRemotingProtocolVersion      2.3                                                                                                                          \r\nSerializationVersion           1.1.0.1                                                                                                                      \r\nWSManStackVersion              3.0                                                                                                                          \r\n\r\n\r\nPS /home/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                                                                                                          \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: user@example.onmicrosoft.com\r\nPassword for user user@example.onmicrosoft.com: ********\r\n\r\nPS /home/kai> Import-PSSession $Session\r\n(at this point PowerShell starts loading remote modules etc and preparing the session)\r\n```",
      "created_at": "2017-11-29T03:45:34Z",
      "updated_at": "2017-11-29T03:45:34Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "What I'm going to do in order to remove any possible issues with me having tweaked something on my Mac that is conflicting with this is set up a clean install of macOS 10.12 and then a fresh install of PowerShell 6.0.0-rc and test if it works tonight.",
      "created_at": "2017-11-29T03:51:29Z",
      "updated_at": "2017-11-29T03:51:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is dup #3606",
      "created_at": "2017-11-29T05:09:15Z",
      "updated_at": "2017-11-29T05:09:15Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Issue #3606 is kind-of a dup, but they also saw the error which I haven't seen occur in my testing.\r\n```\r\nNew-PSSession : Unable to load DLL 'libpsrpclient':...\r\n```",
      "created_at": "2017-11-29T05:31:22Z",
      "updated_at": "2017-11-29T05:31:22Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I have been able to reproduce this on a clean install of macOS 10.12.6 and a clean install of PowerShell 6.0.0-rc. Everything is with default settings, new admin account created on first boot and no settings changed for the Terminal app.\r\n```powershell\r\nLast login: Thu Nov 30 08:11:57 on ttys000\r\nAdministrators-Mac-mini:~ admin$ pwsh\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/admin> $PSVersionTable                                                \r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-rc                                        \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-rc                                       \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: T...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n\r\n\r\nPS /Users/admin> $env:DYLD_LIBRARY_PATH                                         \r\nPS /Users/admin> [System.Environment]::Is64BitProcess                           \r\nTrue\r\nPS /Users/admin> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                             \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: *********\r\n\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Management.Automation.Remoting.PrioritySendDataCollection.Clear()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.CloseAsync()\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.Finalize()\r\nAbort trap: 6\r\nAdministrators-Mac-mini:~ admin$ \r\n```",
      "created_at": "2017-11-29T21:21:16Z",
      "updated_at": "2017-11-29T21:21:16Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Here are the results on a clean 10.12.6 install\r\n```powershell\r\nLast login: Thu Nov 30 08:48:11 on ttys000\r\nAdministrators-Mac-mini:~ admin$ pwsh\r\nPowerShell v6.0.0-rc\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/admin> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                                                               \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.com\r\nPassword for user admin@example.com: ********\r\n\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Management.Automation.Remoting.PrioritySendDataCollection.Clear() in /PowerShell/src/System.Management.Automation/engine/remoting/fanin/PriorityCollection.cs:line 158\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.CloseAsync() in /PowerShell/src/System.Management.Automation/engine/remoting/fanin/BaseTransportManager.cs:line 949\r\n   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.CloseAsync() in /PowerShell/src/System.Management.Automation/engine/remoting/fanin/WSManTransportManager.cs:line 1219\r\n   at System.Management.Automation.Remoting.Client.BaseClientTransportManager.Finalize() in /PowerShell/src/System.Management.Automation/engine/remoting/fanin/BaseTransportManager.cs:line 998\r\nAbort trap: 6\r\nAdministrators-Mac-mini:~ admin$ \r\n```",
      "created_at": "2017-11-29T21:49:51Z",
      "updated_at": "2017-11-29T21:49:51Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "This could be related to the issues I was seeing that are documented on #4029 \r\nAs it stands, PowerShell 6.0.0-rc requires the use of OpenSSL libraries installed by Homebrew",
      "created_at": "2017-12-06T02:56:06Z",
      "updated_at": "2017-12-06T02:56:06Z"
    },
    {
      "author": "diegoalbuquerque",
      "author_association": "NONE",
      "body": "For help. \r\n\r\nI had the same problem in a Debian 9 docker container. After read the comments above I saw thet there was some broken linkes libraries and it was because the system libraries are newer than expected. Then , i made some symbolic links and everything ran ok. \r\n\r\nroot@db70f6f67c51:/usr/lib/x86_64-linux-gnu# **ldd /opt/microsoft/powershell/6.0.1/libmi.so**\r\n\r\n        _linux-vdso.so.1 (0x00007ffd4b7fd000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f86cb670000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f86cb46c000)\r\n        libpam.so.0 => /lib/x86_64-linux-gnu/libpam.so.0 (0x00007f86cb25e000)\r\n        **libssl.so.1.0.0 =>  not found\r\n        libcrypto.so.1.0.0 => not found**\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f86cac56000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f86cb88d000)\r\n        libaudit.so.1 => /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007f86caa2e000)\r\n        libcrypto.so.1.0.2 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.2 (0x00007f86ca5ca000)\r\n        libcap-ng.so.0 => /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007f86ca3c4000)_\r\n\r\nroot@db70f6f67c51:/opt/microsoft/powershell/6.0.1# **cd /usr/lib/x86_64-linux-gnu/**\r\nroot@db70f6f67c51:/usr/lib/x86_64-linux-gnu# **ln -s libssl.so.1.0.2 libssl.so.1.0.0**\r\nroot@db70f6f67c51:/usr/lib/x86_64-linux-gnu# **ls -l libssl***\r\n\r\n_-rw-r--r-- 1 root root 738444 Nov  2 11:29 libssl.a\r\nlrwxrwxrwx 1 root root     13 Nov  2 11:29 libssl.so -> libssl.so.1.1\r\nlrwxrwxrwx 1 root root     15 Feb 21 17:27 libssl.so.1.0.0 -> libssl.so.1.0.2\r\n-rw-r--r-- 1 root root 431232 Dec 13 22:09 libssl.so.1.0.2\r\n-rw-r--r-- 1 root root 442920 Nov  2 11:29 libssl.so.1.1_\r\n\r\nroot@db70f6f67c51:/usr/lib/x86_64-linux-gnu# **ln -s libcrypto.so.1.0.2 libcrypto.so.1.0.0**\r\nroot@db70f6f67c51:/usr/lib/x86_64-linux-gnu# **ldd /opt/microsoft/powershell/6.0.1/libmi.so**\r\n\r\n        _linux-vdso.so.1 (0x00007ffdde3b4000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4e51539000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4e51335000)\r\n        libpam.so.0 => /lib/x86_64-linux-gnu/libpam.so.0 (0x00007f4e51127000)\r\n        libssl.so.1.0.0 => /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0 (0x00007f4e50ebe000)\r\n        libcrypto.so.1.0.0 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0 (0x00007f4e50a5a000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4e506bb000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f4e51756000)\r\n        libaudit.so.1 => /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007f4e50493000)\r\n        libcap-ng.so.0 => /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007f4e5028d000)_\r\n\r\n\r\n",
      "created_at": "2018-02-26T13:02:40Z",
      "updated_at": "2018-02-26T13:02:40Z"
    },
    {
      "author": "TheProdigy20P",
      "author_association": "NONE",
      "body": "I was having a similar problem but for me the problem was with the -AllowRedirection Parameter.\r\n\r\nIf i tried in linux.\r\n\r\n```\r\n$Session = $O365Session = New-PSSession \u2013ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell -Credential $O365Cred -Authentication Basic -AllowRedirection\r\n\r\nNew-PSSession : [ps.outlook.com] Connecting to remote server ps.outlook.com failed with the following error message : Basic Authorization failed for user bb.admin@billabonggroup.com For more information, see the about_Remote_Troubleshooting Help topic.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OpenError: (System.Manageme....RemoteRunspace:RemoteRunspace) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : 2,PSSessionOpenFailed\r\n```\r\nMy Powershell Version\r\n\r\n```\r\nPS /> $PSVersionTable                                                                                                                                               \r\n\r\nName                           Value                                                                                                                               \r\n----                           -----                                                                                                                               \r\nPSVersion                      6.0.2                                                                                                                               \r\nPSEdition                      Core                                                                                                                                \r\nGitCommitId                    v6.0.2                                                                                                                              \r\nOS                             Linux 4.13.0-37-generic #42-Ubuntu SMP Wed Mar 7 14:13:23 UTC 2018                                                                  \r\nPlatform                       Unix                                                                                                                                \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                             \r\nPSRemotingProtocolVersion      2.3                                                                                                                                 \r\nSerializationVersion           1.1.0.1                                                                                                                             \r\nWSManStackVersion              3.0       \r\n```\r\n\r\nSame thing in Powershell in windows 10\r\n\r\n```\r\nPS C:\\Users\\user> $O365Session = New-PSSession \u2013ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell -Credential $O365Cred -Authentication Basic -AllowRedirection\r\n\r\nWARNING: Your connection has been redirected to the following URI: \"https://ps.outlook.com/PowerShell-LiveID?PSVersion=5.1.16299.251 \"\r\n```\r\n\r\nI get a warning of a redirection but I do get the connection succesfully.\r\n\r\nMy PSversion on Windows 10\r\n\r\n```\r\nPS C:\\Users\\user> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.251\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.251\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nNow running the same command in linux but using the redirected URI  we got in windows.\r\n\r\n```\r\nPS /> $O365Session = New-PSSession \u2013ConfigurationName Microsoft.Exchange -ConnectionUri \"https://ps.outlook.com/PowerShell-LiveID?PSVersion=5.1.16299.251\" -Credential $O365Cred -Authentication Basic -AllowRedirection                                                                                                                \r\nPS /> $O365Session                                                                                                                                                  \r\n\r\n Id Name            ComputerName    ComputerType    State         ConfigurationName     Availability\r\n -- ----            ------------    ------------    -----         -----------------     ------------\r\n  6 WinRM6          ps.outlook.com  RemoteMachine   Opened        Microsoft.Exchange       Available\r\n```\r\n\r\nThis seems to me the problem is that the allowredirection paratemer is not working properly.",
      "created_at": "2018-03-20T22:55:51Z",
      "updated_at": "2018-03-20T23:50:57Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "After installing the latest PowerShell (v6.0.2) this is no longer working for me:\r\n\r\n```PowerShell\r\n[kai@blackmac ~]$ pwsh\r\nPowerShell v6.0.2\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $PSVersionTable                                                                                                             \r\n\r\nName                           Value                                                                                                      \r\n----                           -----                                                                                                      \r\nPSVersion                      6.0.2                                                                                                      \r\nPSEdition                      Core                                                                                                       \r\nGitCommitId                    v6.0.2                                                                                                     \r\nOS                             Darwin 17.5.0 Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 PST 2018; root:xnu-4570.51.1~1/RELEASE_X...\r\nPlatform                       Unix                                                                                                       \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                    \r\nPSRemotingProtocolVersion      2.3                                                                                                        \r\nSerializationVersion           1.1.0.1                                                                                                    \r\nWSManStackVersion              3.0                                                                                                        \r\n\r\n\r\nPS /Users/kai> $UserCredential = Get-Credential                                                                                            \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: ***********\r\n\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                                                                     \r\nNew-PSSession : [outlook.office365.com] Connecting to remote server outlook.office365.com failed with the following error message : Client did not get proper response from server. For more information, see the about_Remote_Troubleshooting Help topic.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OpenError: (System.Manageme....RemoteRunspace:RemoteRunspace) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : 1,PSSessionOpenFailed\r\nPS /Users/kai> \r\n```",
      "created_at": "2018-04-09T23:18:32Z",
      "updated_at": "2018-04-09T23:18:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Should we consider this as unstable, as bad UX or as bad documented?",
      "created_at": "2018-04-10T03:55:49Z",
      "updated_at": "2018-04-10T03:55:49Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Is this something that's changed in the latest versions so that Basic auth doesn't work, or is it more than that? I'm happy to do some more testing if required.",
      "created_at": "2018-04-10T04:17:49Z",
      "updated_at": "2018-04-10T04:17:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The servicing updates to 6.0.0 have not had any changes that affect this.  Not sure if there have been any changes on the server side.  cc @dantraMSFT ",
      "created_at": "2018-04-10T05:23:54Z",
      "updated_at": "2018-04-10T05:23:54Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "On MacOS, I do see a regression in 6.0.1 with a consistent ERROR_WSMAN_INVALID_SELECTORS error. I don't see any issues in 6.0.0 and 6.0.2 and libpsrpclient hasn't changed across these releases.  The machine hasn't been upgraded to High Sierra yet so that might be contributing.\r\n",
      "created_at": "2018-04-10T19:35:15Z",
      "updated_at": "2018-04-10T19:35:15Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "My testing was on a Mac that was recently upgraded from macOS 10.12 Sierra to 10.13 High Sierra. I also upgraded PowerShell from whatever version I had previously (likely to be 6.0.0 or 6.0.1) to the latest version 6.0.2. I also updated my MacPorts installation to the latest version and updated all of my ports. I have a symlink for PowerShell from where it expects to find the OpenSSL libraries as installed by Homebrew to where they are installed by MacPorts and this was all working prior to the upgrades for connecting to Office 365\r\n",
      "created_at": "2018-04-10T22:46:22Z",
      "updated_at": "2018-04-10T22:46:22Z"
    },
    {
      "author": "nmguidry72",
      "author_association": "NONE",
      "body": "I have powershell 6.0.2 installed.  I've installed MacPorts and created the OpenSSL pkg and installed that.  When I try to create $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionURI https://outlook.office365.com/powershell-liveid/ -Credential $O365Cred -Authenticatin Basic -Allowredirection, and I get the same error of New-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found.\r\n$Psversiontable                                                                            \r\n\r\nName                           Value                                                                              \r\n----                           -----                                                                              \r\nPSVersion                      6.0.2                                                                              \r\nPSEdition                      Core                                                                               \r\nGitCommitId                    v6.0.2                                                                             \r\nOS                             Darwin 17.5.0 Darwin Kernel Version 17.5.0: Fri Apr 13 19:32:32 PDT 2018; root:x...\r\nPlatform                       Unix                                                                               \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                \r\nSerializationVersion           1.1.0.1                                                                            \r\nWSManStackVersion              3.0     \r\n\r\nWhat do I need to do to fix the issue of WSMan?      ",
      "created_at": "2018-06-04T00:40:53Z",
      "updated_at": "2018-06-04T00:40:53Z"
    },
    {
      "author": "MEADITYABHASIN",
      "author_association": "NONE",
      "body": "I am new to O365 and PS on Mac. I am facing the same error message here. Would appreciate any help I can get.\r\n\r\n\r\nName                           Value                                                                                           \r\n----                           -----                                                                                           \r\nPSVersion                      6.0.2                                                                                           \r\nPSEdition                      Core                                                                                            \r\nGitCommitId                    v6.0.2                                                                                          \r\nOS                             Darwin 17.6.0 Darwin Kernel Version 17.6.0: Tue May  8 15:22:16 PDT 2018; root:xnu-4570.61.1~...\r\nPlatform                       Unix                                                                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                         \r\nPSRemotingProtocolVersion      2.3                                                                                             \r\nSerializationVersion           1.1.0.1                                                                                         \r\nWSManStackVersion              3.0                                                                                             \r\n\r\n\r\nPS /Users/AdityaBhasin> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.protection.outlook.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection                                  \r\nNew-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceUnavailable: (:) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : System.Management.Automation.Remoting.PSRemotingDataStructureException,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n \r\nPS /Users/AdityaBhasin> \r\n\r\nSystem Version:\tmacOS 10.13.5 (17F77)",
      "created_at": "2018-06-17T20:56:12Z",
      "updated_at": "2018-06-17T20:56:12Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Do you have OpenSSL installed with Homebrew? Or, if you are using MacPorts (which I recommend), have you linked the OpenSSL library directory to where PowerShell thinks it should be?\r\n```\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n```",
      "created_at": "2018-06-17T22:23:36Z",
      "updated_at": "2018-06-17T22:23:36Z"
    },
    {
      "author": "MEADITYABHASIN",
      "author_association": "NONE",
      "body": "WOW! Thank you so much @kai-h I went ahead to run command to update the open SSL with Homebrew and it now seems to work for me. I will update here if I face any new challenge.  Thanks again!",
      "created_at": "2018-06-18T01:00:40Z",
      "updated_at": "2018-06-18T01:00:40Z"
    },
    {
      "author": "ssstonebraker",
      "author_association": "NONE",
      "body": "Installing PowerShell v6.0.4 on OSX 10.13.3 fixed the problem for me.\r\n\r\nInstall Link:\r\nhttps://github.com/PowerShell/PowerShell/releases/download/v6.0.4/powershell-6.0.4-osx.10.12-x64.pkg",
      "created_at": "2018-08-21T19:27:04Z",
      "updated_at": "2018-08-21T19:27:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kai-h Can you confirm?",
      "created_at": "2018-08-22T03:31:04Z",
      "updated_at": "2018-08-22T03:31:04Z"
    },
    {
      "author": "NorthernLights",
      "author_association": "NONE",
      "body": "Reopening this issue: version 6.1.0 on Mojave is resulting in the same issue when attempting to connect to Office 365.",
      "created_at": "2018-10-11T16:15:47Z",
      "updated_at": "2018-10-11T16:15:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is also repro'ing for me with Mojave",
      "created_at": "2018-10-11T21:40:28Z",
      "updated_at": "2018-10-11T21:40:28Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "This works for me with 6.0.4 on Mojave with OpenSSL libraries installed via MacPorts, **NOT** Homebrew.\r\n\r\n```` PowerShell\r\n[kai@blackmac ~]$ pwsh                                                                                                                                              \r\nPowerShell v6.0.4\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $PSVersionTable                                                                                                                                                     \r\n\r\nName                           Value                                                                                                                                              \r\n----                           -----                                                                                                                                              \r\nPSVersion                      6.0.4                                                                                                                                              \r\nPSEdition                      Core                                                                                                                                               \r\nGitCommitId                    v6.0.4                                                                                                                                             \r\nOS                             Darwin 18.0.0 Darwin Kernel Version 18.0.0: Wed Aug 22 20:13:40 PDT 2018; root:xnu-4903.201.2~1/RELEASE_X86_64                                     \r\nPlatform                       Unix                                                                                                                                               \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                \r\nSerializationVersion           1.1.0.1                                                                                                                                            \r\nWSManStackVersion              3.0                                                                                                                                                \r\n\r\n\r\nPS /Users/kai> office365.ps1                                                                                                                                                       \r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: ********\r\n\r\nWARNING: The names of some imported commands from the module 'tmp_nlc54neg.nu0' include unapproved verbs that might make them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the Verbose parameter. For a list of approved verbs, type Get-Verb.                                                                                                                                                                                                                                                ModuleType Version    Name                                ExportedCommands                                                                                                         ---------- -------    ----                                ----------------                                                                                                         Script     1.0        tmp_nlc54neg.nu0                    {Add-AvailabilityAddressSpace, Add-DistributionGroupMember, Add-MailboxFolderPermission, Add-MailboxLocation...}         \r\n\r\n\r\nPS /Users/kai> \r\n````",
      "created_at": "2018-10-11T21:47:08Z",
      "updated_at": "2018-10-11T21:47:08Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "This also works for me when I've upgraded to 6.1.0 on Mojave.\r\nTo reiterate, I am using OpenSSH libraries from MacPorts and have linked them to the location that PowerShell expects to see them.\r\n````\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n````\r\nThen, when I run pwsh\r\n```` PowerShell\r\n[kai@blackmac ~]$ pwsh\r\nPowerShell 6.1.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Darwin 18.0.0 Darwin Kernel Version 18.0.0: Wed Aug 22 20:13:40 PDT 2018; root:xnu-4903.201.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nPS /Users/kai> office365.ps1\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: ********\r\n\r\nWARNING: The names of some imported commands from the module 'tmp_kllnlbam.5cg' include unapproved verbs that might make them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the Verbose parameter. For a list of approved verbs, type Get-Verb.                                                                                                                                                                        ModuleType Version    Name                                ExportedCommands                                                                                 ---------- -------    ----                                ----------------                                                                                 Script     1.0        tmp_kllnlbam.5cg                    {Add-AvailabilityAddressSpace, Add-DistributionGroupMember, Add-MailboxFolderPermission, Add-... \r\n\r\n\r\nPS /Users/kai> \r\n\r\n````",
      "created_at": "2018-10-11T22:17:04Z",
      "updated_at": "2018-10-11T22:17:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Using the MacPorts version of OpenSSL worked for me.",
      "created_at": "2018-10-11T22:34:45Z",
      "updated_at": "2018-10-11T22:34:45Z"
    },
    {
      "author": "travislikestocode",
      "author_association": "NONE",
      "body": "I'm reproducing this on Mojave with Macports OpenSSL:\r\nMac OS Mojave 10.14.5\r\nPowershell 6.2.3\r\n\r\nxcode tools are installed. I installed powershell with homebrew.\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Darwin 18.6.0 Darwin Kernel Version 18.6.0: Thu\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nI installed openssl using the [MS doc instructions](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-macos?view=powershell-6#install-openssl-via-macports) via MacPorts:\r\n\r\n```\r\nws2784:~ travis.brackett$ port installed\r\nThe following ports are currently installed:\r\n  openssl @1.1.1d_0 (active)\r\n  zlib @1.2.11_0 (active)\r\n```\r\n\r\nI created the symlink:\r\n\r\n```\r\nsudo mkdir -p /usr/local/opt/openssl\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n\r\nwsnnnn:~ travbrack$ ls -lha /usr/local/opt/openssl/lib/\r\ntotal 14496\r\ndrwxr-xr-x  16 root  wheel   512B Nov 22 14:39 .\r\ndrwxr-xr-x  11 root  wheel   352B Nov 22 13:58 ..\r\n-rw-r--r--   1 root  wheel     0B Oct 20 13:21 .turd_MacPorts\r\ndrwxr-xr-x   4 root  admin   128B Nov 22 14:39 engines-1.1\r\nlrwxr-xr-x   1 root  wheel    14B Nov 22 14:28 lib -> /opt/local/lib\r\n-rwxr-xr-x   1 root  admin   2.1M Sep 15 05:22 libcrypto.1.1.dylib\r\n-rw-r--r--   1 root  admin   3.7M Sep 15 05:22 libcrypto.a\r\nlrwxr-xr-x   1 root  admin    19B Sep 15 05:22 libcrypto.dylib -> libcrypto.1.1.dylib\r\n-rwxr-xr-x   1 root  admin   479K Sep 15 05:22 libssl.1.1.dylib\r\n-rw-r--r--   1 root  admin   704K Sep 15 05:22 libssl.a\r\nlrwxr-xr-x   1 root  admin    16B Sep 15 05:22 libssl.dylib -> libssl.1.1.dylib\r\n-rwxr-xr-x   1 root  admin    79K Oct  1  2018 libz.1.2.11.dylib\r\nlrwxr-xr-x   1 root  admin    17B Oct  1  2018 libz.1.dylib -> libz.1.2.11.dylib\r\n-rw-r--r--   1 root  admin    95K Oct  1  2018 libz.a\r\nlrwxr-xr-x   1 root  admin    17B Oct  1  2018 libz.dylib -> libz.1.2.11.dylib\r\ndrwxr-xr-x   6 root  admin   192B Nov 22 14:39 pkgconfig\r\nwsnnnn:~ travbrack$ ls -lha /usr/local/opt/openssl/lib\r\nlrwxr-xr-x  1 root  admin    14B Nov 22 14:02 /usr/local/opt/openssl/lib -> /opt/local/lib\r\n```\r\n\r\nI restarted my terminal, and tried enter-pssession:\r\n\r\n```\r\nPS /Users/travbrack> enter-pssession computername\r\nenter-pssession : This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\nAt line:1 char:1\r\n+ enter-pssession computername\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (computername:String) [Enter-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n ```\r\n\r\nAny assistance would be greatly appreciated",
      "created_at": "2019-11-22T22:57:47Z",
      "updated_at": "2019-11-22T22:59:56Z"
    },
    {
      "author": "jshum",
      "author_association": "NONE",
      "body": "Commenting from #10600\r\n\r\n> I had the same issue, managed to solve it by linking an older openssl version from brew with brew switch openssl 1.0.2s\r\n\r\nFor me switching to openssl 1.0.2r worked as well. I had the openssl 1.1 installed through brew as default but they did not work",
      "created_at": "2020-02-23T03:48:10Z",
      "updated_at": "2020-02-23T03:48:10Z"
    },
    {
      "author": "leeharrison",
      "author_association": "NONE",
      "body": "Hi guys,\r\n\r\nregarding the openssl version, I forced brew to use ver 1.02 and this fixed my pwsh O365 issues. The commands I ran are ...\r\n\r\nbrew uninstall openssl;\r\nbrew uninstall openssl; (to ensure nothing was left lingering around)\r\nbrew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb\r\n\r\nCredit : @kensoh\r\n\r\nThanks.\n\n<blockquote></blockquote>",
      "created_at": "2020-02-28T11:37:30Z",
      "updated_at": "2020-02-28T11:37:33Z"
    },
    {
      "author": "hazardv",
      "author_association": "NONE",
      "body": "@leeharrison that worked for me running mojave with pwsh 6.0.4. I tried all previous suggestions and nothing else worked for me.",
      "created_at": "2020-03-12T17:04:54Z",
      "updated_at": "2020-03-12T17:04:54Z"
    },
    {
      "author": "antonywm",
      "author_association": "NONE",
      "body": "thanks @leeharrison I've also had this issue on High Sierra with pwsh 6.0.4 and your suggestion has fixed for me too.",
      "created_at": "2020-04-06T14:34:20Z",
      "updated_at": "2020-04-06T14:34:20Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Can we please ensure that PowerShell on macOS doesn't have a hard dependency on an older, and insecure, version of OpenSSL libraries? It is also bad practice to explicitly require that the library is installed by Homebrew with a hardcoded path.",
      "created_at": "2020-04-06T23:23:45Z",
      "updated_at": "2020-04-06T23:23:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Also see https://github.com/PowerShell/PowerShell/issues/11216#issuecomment-608221120",
      "created_at": "2020-04-07T03:57:15Z",
      "updated_at": "2020-05-13T10:09:34Z"
    },
    {
      "author": "svinuesa",
      "author_association": "NONE",
      "body": "> Hi guys,\r\n> \r\n> regarding the openssl version, I forced brew to use ver 1.02 and this fixed my pwsh O365 issues. The commands I ran are ...\r\n> \r\n> brew uninstall openssl;\r\n> brew uninstall openssl; (to ensure nothing was left lingering around)\r\n> brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb\r\n> \r\n> Credit : @kensoh\r\n> \r\n> Thanks.\r\n\r\nThis is definitely well working !  Thank you.\n\n<blockquote></blockquote>",
      "created_at": "2020-05-13T07:45:46Z",
      "updated_at": "2020-05-13T07:45:48Z"
    },
    {
      "author": "mikeyjoel",
      "author_association": "NONE",
      "body": "> Hi guys,\r\n> \r\n> regarding the openssl version, I forced brew to use ver 1.02 and this fixed my pwsh O365 issues. The commands I ran are ...\r\n> \r\n> brew uninstall openssl;\r\n> brew uninstall openssl; (to ensure nothing was left lingering around)\r\n> brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb\r\n> \r\n> Credit : @kensoh\r\n> \r\n> Thanks.\r\n\r\nThis is working with Catalina 10.15.4\n\n<blockquote></blockquote>",
      "created_at": "2020-05-15T09:13:49Z",
      "updated_at": "2020-05-15T09:13:52Z"
    },
    {
      "author": "mbonne",
      "author_association": "NONE",
      "body": "\r\n\r\n> > Hi guys,\r\n> > regarding the openssl version, I forced brew to use ver 1.02 and this fixed my pwsh O365 issues. The commands I ran are ...\r\n> > brew uninstall openssl;\r\n> > brew uninstall openssl; (to ensure nothing was left lingering around)\r\n> > brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb\r\n> > Credit : @kensoh\r\n> > Thanks.\r\n> \r\n> This is working with Catalina 10.15.4\r\n\r\nHow are you getting this to work without breaking other brew installed tools??\r\nSeems I can only have either or when I tried it.\r\nEither roll back openssl version, pwsh works but iperf3 breaks for example.\r\n\r\n<blockquote></blockquote>\r\n\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Darwin 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X8\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n",
      "created_at": "2020-05-18T08:01:10Z",
      "updated_at": "2020-05-18T08:05:19Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Can I please just put this out there that downgrading to an older, deprecated and therefore insecure version of OpenSSL is not a real solution.\r\n\r\nApple have already got a heap of different versions of the OpenSSL libraries installed on macOS.\r\n\r\nWhy does PowerShell on macOS have hardcoded paths to the libraries, instead of searching the system library path.\r\n\r\nIn the /usr/lib folder we have half a dozen different versions that are sitting there waiting to be used.\r\n/usr/lib/libssl.0.9.8.dylib\r\n/usr/lib/libssl.dylib\r\n/usr/lib/libssl.35.dylib\r\n/usr/lib/libssl.0.9.7.dylib\r\n/usr/lib/libssl.43.dylib\r\n/usr/lib/libssl.46.dylib\r\n/usr/lib/libssl.44.dylib",
      "created_at": "2020-05-18T08:55:55Z",
      "updated_at": "2020-05-18T08:55:55Z"
    },
    {
      "author": "mikeyjoel",
      "author_association": "NONE",
      "body": "> Can I please just put this out there that downgrading to an older, deprecated and therefore insecure version of OpenSSL is not a real solution.\r\n> \r\n> Apple have already got a heap of different versions of the OpenSSL libraries installed on macOS.\r\n> \r\n> Why does PowerShell on macOS have hardcoded paths to the libraries, instead of searching the system library path.\r\n> \r\n> In the /usr/lib folder we have half a dozen different versions that are sitting there waiting to be used.\r\n> /usr/lib/libssl.0.9.8.dylib\r\n> /usr/lib/libssl.dylib\r\n> /usr/lib/libssl.35.dylib\r\n> /usr/lib/libssl.0.9.7.dylib\r\n> /usr/lib/libssl.43.dylib\r\n> /usr/lib/libssl.46.dylib\r\n> /usr/lib/libssl.44.dylib\r\n\r\nI hope you understand that those are older releases of OpenSSL. New release is v1.1.0 released August 25, 2016 -  Version 0.9.8 was released July 5, 2005. I ended up switching to Linux anyways since I can't deal with the implementation of OpenSSH on so many Windows servers and maintain them, but still looking forward on how kerberos will be supported for PSCore in future releases and if there is any care for it on macOS.",
      "created_at": "2020-05-18T09:24:33Z",
      "updated_at": "2020-05-18T09:24:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mikeyjoel Please create new issue and describe remoting scenarios you want to work.",
      "created_at": "2020-05-18T09:46:00Z",
      "updated_at": "2020-05-18T09:46:00Z"
    },
    {
      "author": "mikeyjoel",
      "author_association": "NONE",
      "body": "> @mikeyjoel Please create new issue and describe remoting scenarios you want to work.\r\n\r\nNo need for me to create a new issue since an issue was already created: [#3708](https://github.com/PowerShell/PowerShell/issues/3708)\r\n\r\nOn [RHEL/Centos](https://github.com/PowerShell/PowerShell/issues/3708#issuecomment-465233831) or [Debian/Ubuntu](https://github.com/PowerShell/PowerShell/issues/3708#issuecomment-419262332) Distribution you'll need the following packages:\r\nkrb5-workstation\r\nkrb5-devel\r\ngssntlmssp (requires epel-release to be installed beforehand)\r\npowershell\r\n\r\nWhich are available by default for each Linux distribution. I'm bringing this up because its very common that you won't be just managing Office365 but also Windows Servers in your environment.",
      "created_at": "2020-05-18T09:56:25Z",
      "updated_at": "2020-05-18T09:56:25Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "> > Can I please just put this out there that downgrading to an older, deprecated and therefore insecure version of OpenSSL is not a real solution.\r\n> > Apple have already got a heap of different versions of the OpenSSL libraries installed on macOS.\r\n> > Why does PowerShell on macOS have hardcoded paths to the libraries, instead of searching the system library path.\r\n> > In the /usr/lib folder we have half a dozen different versions that are sitting there waiting to be used.\r\n> > /usr/lib/libssl.0.9.8.dylib\r\n> > /usr/lib/libssl.dylib\r\n> > /usr/lib/libssl.35.dylib\r\n> > /usr/lib/libssl.0.9.7.dylib\r\n> > /usr/lib/libssl.43.dylib\r\n> > /usr/lib/libssl.46.dylib\r\n> > /usr/lib/libssl.44.dylib\r\n> \r\n> I hope you understand that those are older releases of OpenSSL. New release is v1.1.0 released August 25, 2016 - Version 0.9.8 was released July 5, 2005. I ended up switching to Linux anyways since I can't deal with the implementation of OpenSSH on so many Windows servers and maintain them, but still looking forward on how kerberos will be supported for PSCore in future releases and if there is any care for it on macOS.\r\n\r\nI am well aware that these are older OpenSSL libraries - however as pwsh currently only works with older libraries, they are already installed on macOS.",
      "created_at": "2020-05-18T11:08:05Z",
      "updated_at": "2020-05-18T11:08:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "So I'm not sure where to share this but I've been recently playing around with OMI to try and get it working against a newer version of OpenSSL (1.1.0) as well as Kerberos auth (and hopefully NTLM as well) on a Mac. There are a few bugs that I've fixed up on a local build but it's definitely possible to get it working and I am planning on creating a blog post/guide on helping people do the same to get PSRemoting through WinRM on their non-Windows hosts.\r\n\r\nI was wondering how interested the PowerShell team is in trying to incorporate those changes into their compiled build of OMI that they include in their release. I'm planning on trying to merge them into the OMI repo but I'm not optimistic they will actually make it in. The OpenSSL fix should also allow them to drop the requirement on OpenSSL 1.0.0 that they have documented in their install steps as it looks like it was only the PSRP client stuff that required those libraries.\r\n\r\nThis seemed to be the longest thread I could find on this problem so I thought it best to post here. Happy to create a new issue to compile the various problems and workarounds/fixes that I've found so we can document it properly for others wanting to try it out.",
      "created_at": "2020-06-01T04:36:17Z",
      "updated_at": "2020-06-01T04:36:17Z"
    },
    {
      "author": "VonZubinski",
      "author_association": "NONE",
      "body": "> Hi guys,\r\n> \r\n> regarding the openssl version, I forced brew to use ver 1.02 and this fixed my pwsh O365 issues. The commands I ran are ...\r\n> \r\n> brew uninstall openssl;\r\n> brew uninstall openssl; (to ensure nothing was left lingering around)\r\n> brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb\r\n> \r\n> Credit : @kensoh\r\n> \r\n> Thanks.\r\n\r\nFound an easy and temporary workaround. Thanks to @kensoh and @leeharrison for pointing me into the right direction:\r\n\r\n1.) Check if an old version isn't already installed\r\n`ls -al /usr/local/Cellar/openssl*  `\r\n\r\n2.) Install old version (1.0.2t right now)\r\n`brew install https://github.com/tebelorg/Tump/releases/download/v1.0.0/openssl.rb`\r\n\r\n3.) Switch to old version\r\n`brew switch openssl 1.0.2t`\r\n\r\n4.) Do Powershell shenanigans \r\n\r\n5.) Switch back to new OpenSSL version (1.1.1g in my case, check Step 1. to find your version and Cellar Folder)\r\n`brew switch openssl@1.1 1.1.1g`\r\n\r\nEnjoy \ud83d\ude09\n\n<blockquote></blockquote>",
      "created_at": "2020-06-04T20:34:07Z",
      "updated_at": "2020-06-04T20:34:09Z"
    },
    {
      "author": "Cybrosys",
      "author_association": "NONE",
      "body": "Why is this closed, it's still an issue. I was trying to execute: Enter-AzWebAppContainerPSSession but got the WSMan error and it seems this is an issue with PowerShell on Mac requiring OpenSSL 1.0.0 while I have 1.1.1g installed.\r\n\r\nUPDATE - Seems WSMan is deprecated and you're leaving it behind, but unfortunately no timeline available:\r\nhttps://github.com/PowerShell/PowerShell/issues/10600#issuecomment-610565488",
      "created_at": "2020-06-23T09:29:31Z",
      "updated_at": "2020-06-23T09:31:08Z"
    },
    {
      "author": "alaurie",
      "author_association": "NONE",
      "body": "> So I'm not sure where to share this but I've been recently playing around with OMI to try and get it working against a newer version of OpenSSL (1.1.0) as well as Kerberos auth (and hopefully NTLM as well) on a Mac. There are a few bugs that I've fixed up on a local build but it's definitely possible to get it working and I am planning on creating a blog post/guide on helping people do the same to get PSRemoting through WinRM on their non-Windows hosts.\r\n> \r\n> I was wondering how interested the PowerShell team is in trying to incorporate those changes into their compiled build of OMI that they include in their release. I'm planning on trying to merge them into the OMI repo but I'm not optimistic they will actually make it in. The OpenSSL fix should also allow them to drop the requirement on OpenSSL 1.0.0 that they have documented in their install steps as it looks like it was only the PSRP client stuff that required those libraries.\r\n> \r\n> This seemed to be the longest thread I could find on this problem so I thought it best to post here. Happy to create a new issue to compile the various problems and workarounds/fixes that I've found so we can document it properly for others wanting to try it out.\r\n\r\nHey @jborean93 whats the work around. I'm on Fedora 32 and this is annoying the bejesus out of me with the OpenSSL 1.0.0 requirement.",
      "created_at": "2020-08-12T23:55:26Z",
      "updated_at": "2020-08-12T23:55:26Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@alaurie if you aren't on macOS then you are somewhat in luck. The `omi` repo actually provides both an OpenSSL 1.0.0 and OpenSSL 1.1.0 universal package in their [releases page](https://github.com/microsoft/omi/releases). Just so I'm clear, this is in no way an official guide and merely something I run myself. Follow these instructions at your own risk and make sure you back up any files you replace.\r\n\r\nSimply download the ssl_110.ulinux.x64.rpm package and either install or extract the RPM. Next you need to copy or symlink `/opt/omi/lib/libmi.so` to `/opt/microsoft/powershell/7/libmi.so`. From there you can verify that library it's linked to with `ldd`\r\n\r\n```bash\r\n# Before (what's included with PowerShell)\r\njborean:~/dev/$ ldd /opt/microsoft/powershell/7/libmi.so\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libmi.so'\r\n        linux-vdso.so.1 (0x00007ffff6fa8000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fc517d50000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007fc517d49000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007fc517d37000)\r\n        libssl.so.1.0.0 => /opt/microsoft/powershell/7/libssl.so.1.0.0 (0x00007fc517cc5000)\r\n        libcrypto.so.1.0.0 => /opt/microsoft/powershell/7/libcrypto.so.1.0.0 (0x00007fc517a5a000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007fc517890000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007fc517f6b000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007fc517862000)\r\n        libz.so.1 => /lib64/libz.so.1 (0x00007fc517848000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007fc517840000)\r\n\r\n# After (once you symlink libmi.so)\r\njborean:~/dev/$ ldd /opt/microsoft/powershell/7/libmi.so\r\n        linux-vdso.so.1 (0x00007fffcffec000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fee443ed000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007fee443e6000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007fee443d4000)\r\n        libssl.so.1.1 => /lib64/libssl.so.1.1 (0x00007fee4433d000)\r\n        libcrypto.so.1.1 => /lib64/libcrypto.so.1.1 (0x00007fee44050000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007fee43e86000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007fee44707000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007fee43e58000)\r\n        libz.so.1 => /lib64/libz.so.1 (0x00007fee43e3e000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007fee43e36000)\r\n```\r\n\r\nYou can see that it's now linked to `/lib64/libssl.so.1.1` and `/lib64/libcrypto.so.1.1`. I do not have any idea why the PowerShell package still uses the OpenSSL 1.0.0 universal package when the 1.1.0 is \"officially\" available. Maybe there was some issue in the past but a basic test works fine for me. In saying all this you will still probably come across a few issues with libmi like\r\n\r\n* Negotiate (Kerberos/NTLM) should work but I've found it only does so in very specific setups\r\n    * I've actually changed the code on my own macOS build to fix some of the issues with GSSAPI auth in the OMI code\r\n    * While you could theoretically build OMI yourself with those changes that's a lot more involved\r\n    * Luckily O365/Exchange Online do not use Negotiate auth but just Basic auth so that's not a major problem\r\n* OMI does not offer any certificate validation over HTTPS\r\n    * You need to ensure you add `-SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)` when you create your PSSession if you are willing to take that risk\r\n\r\nFor Debian based distros, the process will be similar you just need to be `libmi` from the `.deb` and not the `.rpm`. Also keep in mind the paths may be different. For those of you on macOS, I've found you always need to build omi yourself as there's no official package that's available. My own [omi fork](https://github.com/jborean93/omi) contains changes to the code that will allow you to build it on a newer macOS version. I've even got a small guide on how to do all that for macOS [here](https://gist.github.com/jborean93/94e89f73c6e07cda591e8c440b5f33b4).",
      "created_at": "2020-08-13T02:49:52Z",
      "updated_at": "2020-08-13T02:49:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 You could open new issue in PowerShell-Docs repo - perhaps MSFT team will agree to add your investigations as unofficial/unsupported comment in PowerShell docs.",
      "created_at": "2020-08-13T10:05:06Z",
      "updated_at": "2020-08-13T10:05:06Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov they could go one step further and actually bundle the `libmi` from the 1.1.0 OMI release so this whole process is unnecessary for the Linux distributions.\r\n\r\nI'm reluctant to try and pursue this further officially because the common consensus is that WSMan on non-Windows is EOL. When trying to introduce changes into OMI officially to fix some problems when it came to building on macOS or general GSSAPI authentication problems I was effectively told no thanks. If someone from the PowerShell team is willing to investigate this further I'm happy to share the work I've done for macOS and look into updating the libmi version that is bundled with PowerShell.",
      "created_at": "2020-08-13T10:25:11Z",
      "updated_at": "2020-08-13T10:25:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 I see they moved to OMI 1.6 https://github.com/PowerShell/MMI/blob/master/build.sh#L4 and I'd expect MMI 2.0 support OpenSSL 1.1.0.\r\nPSRP package is still on OMI 1.5 but nuget package version 1.4 https://github.com/PowerShell/psl-omi-provider/blob/master/omi.version - it seems the OMI package support 1.1.0 but it is still linked to OpenSSL 1.0.0 - yes? and we should ask MSFT update to more new nuget package linked to OpenSSL 1.1.0 - yes?\r\n\r\n(First OMI with OpenSSL 1.1.0 support is 1.4.0-6 https://github.com/microsoft/omi/releases/tag/v1.4.0-6)\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/MMI\">PowerShell/MMI</a></strong></div><div>Contribute to PowerShell/MMI development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/psl-omi-provider\">PowerShell/psl-omi-provider</a></strong></div><div>PSRP Linux support library. Contribute to PowerShell/psl-omi-provider development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/6154722?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"/microsoft/omi/releases/tag/v1.4.0-6\">Release OMI 1.4.0 \u00b7 microsoft/omi</a></strong></div><div>Open Management Infrastructure\nv1.4.0-6\nRelease Notes\nIssues Fixed in this Release\nMemory leaks were cleaned up.\nNew Features\nRunning most of OMI as a non-root user.\nFor security reasons we signifi...</div></blockquote>",
      "created_at": "2020-08-13T10:58:20Z",
      "updated_at": "2020-08-13T10:58:22Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It's getting late in the day for me so I'll have another look at it tomorrow. Just a few questions though:\r\n\r\nIs MMI actually used for the native WSMan client. AFAIK the actual WSMan native dll is called through [libpsrpclient](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/fanin/WSManNativeAPI.cs#L2343) on Unix. While MMI does actually use `libmi` through OMI it seems like that repo is used to create `Microsoft.Management.Infrastructure.dll` which is used by the various CIM components. Maybe they are still linked somehow but it seems like for `Enter-PSSession` it calls a method in `libpsrpclient` which then calls various methods in `libmi`. It seems like to make sure we get the newer binary for libmi we need to look at the build process and see how libmi is actually collected during the build process.\r\n\r\nThe psl-omi-provider AFAIK is the server plugin and is unrelated to any client based activities. I'm sure getting that working would be nice but honestly I think the client side is the most important part of this story.",
      "created_at": "2020-08-13T11:23:48Z",
      "updated_at": "2020-08-13T11:23:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> we need to look at the build process and see how libmi is actually collected during the build process.\r\n\r\n@PaulHigin Could you please explain how we get libmi in PowerShell distributive? If it comes from PSPR package is it possible update the package to more new OMI version (to 1.5 or 1.6)?",
      "created_at": "2020-08-13T12:18:21Z",
      "updated_at": "2020-08-13T12:20:48Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We do not support WinRM/OMI anymore.  I believe part of the reason is that OMI itself is no longer in support.  @TravisEz13 may be able to provide more information.",
      "created_at": "2020-08-13T15:29:27Z",
      "updated_at": "2020-08-13T15:29:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My question comes from the fact that there is already inconsistency - MMI was moved to new version some months ago but PSPR was not - and both reference libmi. I'd expect MSFT makes the _minor_ update to PSPR package and close many questions about the issue.",
      "created_at": "2020-08-13T17:59:17Z",
      "updated_at": "2020-08-13T17:59:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> @PaulHigin Could you please explain how we get `libmi` in PowerShell distributive? If it comes from PSPR package is its possible update the package to newer OMI version (to 1.5 or 1.6)?\r\n\r\nYou would have to ask the OMI team for this, and they have said they will not make changes or releases for PowerShell.",
      "created_at": "2020-08-13T18:27:01Z",
      "updated_at": "2020-08-13T18:27:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 My ask about update OMI version in https://github.com/PowerShell/psl-omi-provider/blob/master/omi.version\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/psl-omi-provider\">PowerShell/psl-omi-provider</a></strong></div><div>PSRP Linux support library. Contribute to PowerShell/psl-omi-provider development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-08-13T18:30:25Z",
      "updated_at": "2020-08-13T18:30:30Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 the OMI team may not create any more releases for you but what\u2019s stopping you from using one of the existing releases yourself. Seems like you currently do this for MMI so why is the WSMan client any different. Clearly you can use one of the newer releases that is compatible with OpenSSL 1.1.x and drop the requirement for OpenSSL 1.0.x which is outdated and probably insecure.\r\n\r\nThis whole setup may be deprecated but to me it\u2019s clear that there\u2019s still a use case for using WSMan. Why not try and have PowerShell be more useful on non-Windows platforms.",
      "created_at": "2020-08-13T18:49:15Z",
      "updated_at": "2020-08-13T18:49:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Clearly you can use one of the newer releases that is compatible with OpenSSL 1.1.x and drop the requirement for OpenSSL 1.0.x which is outdated and probably insecure.\r\n\r\n@jborean93 This is the opposite of clear.  OMI is fundamentally broken.  If we move to 1.1, we will break (segfault pwsh) distros that use 1.0.  It's a non-starter.  OMI refuses to fix the fundamental issue that they don't load libraries correctly, causing segfaults.",
      "created_at": "2020-08-13T18:55:47Z",
      "updated_at": "2020-08-13T18:59:40Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": ">  If we move to 1.1, we will break (segfault pwsh) distros that use 1.0\r\n\r\nSo only use libmi that is compiled against OpenSSL 1.1 for the distros that actually come with OpenSSL 1.1? Or better yet, have the OpenSSL 1.1 build as the default and just use existing OpenSSL 1.0 for the ones that don't have 1.1. Why should we hinder newer distro builds that can take advantage of newer libs. Hell even some of the more older distros that are supported by PowerShell offer both  OpenSSL versions in some shape or form.\r\n\r\n> OMI refuses to fix the fundamental issue that they don't load libraries correctly, causing segfaults.\r\n\r\nWhile I totally understand not wanting to take on more work technically there's nothing stopping you from making the fixes yourself and compiling it specifically for PowerShell.\r\n\r\nAlso is the seg faults in relation to a known problem that's unrelated to OpenSSL or just a comment that trying to load it without the required libs will fail? If it's about the libs not being available then you already have that issue on newer distros that don't come with OpenSSL 1.0.x. Why should newer distros be hindered in the same way you are stating that older ones are hindered if the package is updated?\r\n\r\nFrom a consumer of PowerShell this is all very frustrating to see that crucial components of the language is unavailable outside of Windows hosts. Not being able to use WSMan as a client stops me not only managing existing Windows hosts from a non-Linux host but as the title of this issue states it stops me from using PowerShell to manage online service like O365 or Exchange Online. Being forced to run Windows just to manage those services really does fly in the face of cross platform support that PowerShell normally offers. I know it is all deprecated but without an alternative in place you will continue to have people try and get it working and get frustrated that it doesn't. What really annoys me is that it can actually work but there is little or no desire from the PowerShell team to actually make that happen. It seems like the team is content to keep things in the current broken state and offer platitudes to use a newer transport like ssh which won't work for these situations.\r\n\r\nI'm sorry for being blunt, I really do appreciate the time and effort you, and the team, make into this language. This is just going to be my last attempt to try and make the out of box setup more usable for end users. If the consensus is still no then I'll continue to have my own workarounds that others are free to follow if they wish.",
      "created_at": "2020-08-13T19:13:17Z",
      "updated_at": "2020-08-13T19:19:23Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@jborean93 Your questions were previously asked and answer in this thread.\r\n\r\nI've filed https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6491 to document that OMI (`libmi`) is unsupportable by PowerShell.  ",
      "created_at": "2020-08-14T15:44:37Z",
      "updated_at": "2020-08-14T15:47:58Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Just an FYI for anyone still interested in getting OMI working on Linux/macOS. I've just opened up [my fork of the OMI repo](https://github.com/jborean93/omi) which includes a wide range of fixes to get things working properly in PowerShell. You are more than welcome to have a look and play around with it if you wish. I've also written a blog post called [Wacky WSMan on Linux](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) to cover my journey in creating the fork and the various issues I came across.\r\n\r\nPlease bear in mind this is not affiliated with Microsoft or the PowerShell/OMI team in any way. The changes are my own and come with no warranty of guarantees of support. I'll try my best to help with any issues opened there if you are still having problems with the fork.",
      "created_at": "2020-08-21T00:57:49Z",
      "updated_at": "2020-08-21T00:57:49Z"
    },
    {
      "author": "flowl",
      "author_association": "NONE",
      "body": "Today was the first time I was using PowerShell and I'm already disappointed.\r\nThree years and no fix...\r\n\r\n```\r\nPowerShell 7.0.3\r\n\r\nWarning: openssl@1.1 1.1.1g is already installed and up-to-date\r\nTo reinstall 1.1.1g, run `brew reinstall openssl@1.1`\r\n```\r\n\r\n```\r\n$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection\r\n```\r\n\r\n> New-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\n\r\nIf you say a dependency of PowerShell is deprecated but this dependency is required to configure DKIM in Exchange 365, you are saying that Exchange 365 is deprecated including all these docs making use of the broken software:\r\n\r\nhttps://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/use-dkim-to-validate-outbound-email?view=o365-worldwide#SetUpDKIMO365\r\n\r\n\r\nDo I need to buy a Windows computer just to get some DKIM keys into Exchange?",
      "created_at": "2020-09-25T13:18:15Z",
      "updated_at": "2020-09-25T14:18:59Z"
    },
    {
      "author": "flowl",
      "author_association": "NONE",
      "body": "Three years still a bug, and instead of Microsoft bringing a solution and update their dependencies, non-Microsoft people need to provide forks and workarounds.\r\n\r\nEvidence of incapacity.\r\n",
      "created_at": "2020-10-05T09:53:08Z",
      "updated_at": "2020-10-05T09:53:08Z"
    },
    {
      "author": "GCHPX",
      "author_association": "NONE",
      "body": "Still waiting for a fix...\r\n",
      "created_at": "2020-11-25T10:05:16Z",
      "updated_at": "2020-11-25T10:05:16Z"
    },
    {
      "author": "eversome",
      "author_association": "NONE",
      "body": "Please re-open",
      "created_at": "2020-12-03T13:55:19Z",
      "updated_at": "2020-12-03T13:55:19Z"
    },
    {
      "author": "luckman212",
      "author_association": "NONE",
      "body": "Just to be sure I'm not missing something, I heard it was possible to run a Docker instance on macOS and spin up a PowerShell 7 core using [mcr.microsoft.com/powershell](https://hub.docker.com/_/microsoft-powershell) \u2014 but when I tried that I hit the same roadblock. I believe this would only work for the Windows-based images, correct? So we're still stuck in the same boat \u26f5",
      "created_at": "2020-12-17T22:05:49Z",
      "updated_at": "2020-12-17T22:05:49Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I've written up some instructions that work around these issues and are confirmed working with the latest version of PowerShell (I've tested with 7.1.0 Release) and any recent version of macOS (I've tested on macOS 11 Big Sur).\r\nhttps://automatica.com.au/2020/12/installing-powershell-on-macos-for-remote-administration-of-microsoft-365/\r\n\r\nBasically, install PowerShell via the pkg installer on GitHub. Then install MacPorts and with MacPorts install OpenSSL 1.0\r\nsudo port install openssl10. Finally, symlink /opt/local/lib/openssl-1.0 to /usr/local/opt/openssl/lib\r\n\r\n_I am yet to test, but I believe this will NOT work on any of the new M1 arm64 architecture Macs as the PowerShell binaries are x86_64 yet the OpenSSL libraries installed by MacPorts will be arm64. I'm sure there is a way to specify that MacPorts installs the x86_64 version of a library on an arm64 machine, but I don't know how to._\r\n\r\nDespite the fact that this works, it shouldn't need to be done.\r\n\r\nPowerShell **needs** to work with up-to-date versions of OpenSSL. It should also **NOT** have hardcoded paths for support libraries. It should **not** require old, and known insecure, versions of third-party libraries.\r\n\r\nAll this is going to be a moot point in due course as the Mac version of PowerShell will not authenticate to MS365 with modern authentication, it only supports legacy authentication. I have been unable to get an answer about, or even find out who is responsible for, modern authentication in PowerShell on non-Windows platforms.\n\n<blockquote><img src=\"https://automatica.com.au/wp-content/uploads/cropped-Automatica-Logo-512x512.png\" width=\"48\" align=\"right\"><div><img src=\"https://automatica.com.au/wp-content/uploads/cropped-Automatica-Logo-512x512-192x192.png\" height=\"14\"> Automatica</div><div><strong><a href=\"https://automatica.com.au/2020/12/installing-powershell-on-macos-for-remote-administration-of-microsoft-365/\">Installing PowerShell on macOS for remote administration of Microsoft 365</a></strong></div><div>There are a couple of catches to install PowerShell on macOS and have it work for remote sessions to Microsoft 365 / Azure AD / Exchange Online. First, install the latest release version of PowerSh\u2026</div></blockquote>",
      "created_at": "2020-12-17T22:34:24Z",
      "updated_at": "2020-12-17T22:34:27Z"
    },
    {
      "author": "luckman212",
      "author_association": "NONE",
      "body": "@kai-h That's a nice writeup and it's a noble effort, but honestly - if anyone has tenants left on 365 that DON'T use MFA then they're being foolish at best and negligent at worst. I strictly require it across the tenants I engage with. So not being able to connect with modern auth is a non-starter unfortunately.\r\n\r\nI hope MS stops finger pointing and just finds a way to fix this. Is it really that much of an edge case to want to manage 365 from a Mac these days?",
      "created_at": "2020-12-17T22:49:14Z",
      "updated_at": "2020-12-17T22:49:14Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I hear you. I strongly advise my clients to use MFA for all of their user accounts, even if it is not turned on tenancy-wide.\r\nIt is frustrating that Microsoft have invested so much effort into making PowerShell work on non-Windows platforms, yet what is likely the most common use case, administering Office 365, Exchange Online and Azure, simply doesn't work out of the box, and can not work with Modern Authentication. So near, yet so far.\r\nI'm sure there may be some other edge cases for using PowerShell on other platforms, and it's an excellent exercise in good coding practice to ensure that a big project like this works on other platforms, but in terms of actually using it, I can't see anyone administering a fleet of Macs, or Linux boxes, with PowerShell. It's here so we can talk to Office 365 and Azure.",
      "created_at": "2020-12-17T22:53:40Z",
      "updated_at": "2020-12-17T22:53:40Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@kai-h you shouldn't need to install the older OpenSSL if you use my fork. It's compiled against the newer OpenSSL version (1.1.x) distributed by Homebrew and I've been meaning to see if it will be possible to use the LibreSSL version that comes stock standard. I haven't actually tested it against Big Sur (or M1) but I would assume it would just need to be recompiled and that's it.",
      "created_at": "2020-12-17T23:07:20Z",
      "updated_at": "2020-12-17T23:07:20Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Thank you @jborean93, I'll have to give that a go. Why Microsoft can't do this is beyond me.\r\nDo you know if it still searches for the OpenSSL library at a fixed path /usr/local/opt/openssl/lib, or does it use LD_LIBRARY_PATH to find the correct library?",
      "created_at": "2020-12-17T23:09:49Z",
      "updated_at": "2020-12-17T23:09:49Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Why Microsoft can't do this is beyond me.\r\n\r\nI honestly can't blame them even if I wished the situation was better. The mi library was maintained by a separate team and is based on C so requires a completely different skill set to maintain and support. From experience the code there is quite complex and not something easy to maintain. Once that team dropped support for macOS or PowerShell then the PowerShell team had little choice. What would be nice is if the WSMan code could be implemented in pure .NET and maintained by them as a lot of the fundamental work is already in place in .NET but this is also not a trivial task to achieve. So in the end I decided to just fork the library and fix up the stuff I could. Things that I fixed with this fork\r\n\r\n* Compiled against OpenSSL 1.1.x on platforms that distribute this version\r\n* Fix up GSSAPI library calls on the various platforms\r\n    * macOS can use Kerberos now, but NTLM only works over HTTPS\r\n    * Other distributions should allow both Kerberos and NTLM (if the NTLM libs are present)\r\n* Can use your implicit Kerberos credential from `kinit`, no need to use `-Credential` on your connections if you already have a token\r\n* Fix up some of the message encryption bugs so it works on on-prem Exchange hosts over HTTP\r\n* Increase the password length limit to support modern auth\r\n* Will perform the CA and CN (CN if the version of OpenSSL supports it) verification checks when using HTTPS\r\n* Includes a slightly customised libpsrpclient to use an implicit `-Authentication Negotiate` to act like Windows\r\nPeople are free to use it but it isn't affiliated with the PowerShell team in any way.\r\n\r\n> Do you know if it still searches for the OpenSSL library at a fixed path /usr/local/opt/openssl/lib, or does it use LD_LIBRARY_PATH to find the correct library?\r\n\r\nBefore I continue, all this is relevant only to macOS, for Linux this info does not apply.\r\n\r\nIt's still hardcoded to `/usr/local/opt/openssl@1.1/lib/lib*.dylib` but it is at least for OpenSSL 1.1 and not 1.0. The main reason why it is hardcoded is because `libssl` and `libcrypto` are not in any of the default library paths for macOS `/usr/lib`, `/usr/local/lib`, or `~/.lib`. When you have a dynamically linked lib with `@rpath/lib.dylib` on macOS it will search in those default paths or ones specified by `LD_LIBRARY_PATH` (strong caveats with this env var on macOS). So a user who uses this library and has OpenSSL 1.1.x installed from Homebrew will still fail to load the library leading to a poor user experience. By hardcoding the path to the version installed by Homebrew we can at least have a works out of the box situation as long as the dependencies have been met.\r\n\r\nIn saying all that, if you really want to rely on the environment or use a different path for your specific setup you can change them yourself. To do this you need to run `install_name_tool -change <original path> <new path> <lib.dylib path>`. For example here are the paths that my fork is set to by default\r\n\r\n```\r\n/usr/local/microsoft/powershell/7/libmi.dylib:\r\n        /opt/omi/lib/libmi.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.100.1)\r\n        /usr/lib/libpam.2.dylib (compatibility version 3.0.0, current version 3.0.0)\r\n        /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib (compatibility version 1.1.0, current version 1.1.0)\r\n        /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib (compatibility version 1.1.0, current version 1.1.0)\r\n        /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)\r\n```\r\n\r\nIf I wanted to change the libssl and libcrypto library to scan from rpath I would run\r\n\r\n```bash\r\ninstall_name_tool -change \\\r\n    /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib \\\r\n    @rpath/libssl.1.1.dylib \\\r\n    /usr/local/microsoft/powershell/7/libmi.dylib\r\n\r\ninstall_name_tool -change \\\r\n    /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib \\\r\n    @rpath/libcrypto.1.1.dylib \\\r\n    /usr/local/microsoft/powershell/7/libmi.dylib\r\n```\r\n\r\nYou would need to run this as sudo and I highly recommend you make a backup of the libraries before you change them in case something breaks. You also want to make sure that the library you are linking to is actually compatible. You won't be able to use `install_name_tool` to change the `libssl.1.0.dylib` to use `libssl.1.1.dylib` as they are not API and ABI compatible.\r\n\r\nI've been meaning to look into linking against the builtin LibreSSL libs that macOS ships with but I would be concerned it will start to lag behind just like the shipped OpenSSL version that Apple had before they swapped to LibreSSL. For now relying on a newer version from homebrew gives us a new library that continues to be updated by homebrew which follows what other Linux distributions offer.",
      "created_at": "2020-12-17T23:58:22Z",
      "updated_at": "2020-12-17T23:58:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why Microsoft can't do this is beyond me.\r\n\r\nThis is an obsessive situation for the past few years, but this is a fact, possibly the result of internal political wars. :-)\r\n\r\nIt seems MSFT PowerShell team has decided to convert Remoting to a _subsystem_, which will open up the possibility of creating alternative Remoting implementations. If this happens, perhaps we will have time in next milestone to get a new implementation based on .Net WebSockets (?) that will work on all platforms without external dependencies.\r\n",
      "created_at": "2020-12-18T03:32:48Z",
      "updated_at": "2020-12-18T03:32:48Z"
    },
    {
      "author": "BichengWang",
      "author_association": "NONE",
      "body": "Same issue.",
      "created_at": "2020-12-24T07:21:44Z",
      "updated_at": "2020-12-24T07:21:44Z"
    },
    {
      "author": "suoko",
      "author_association": "NONE",
      "body": "So in the end, it's not possible to connect to exchange online via linux powershell if MFA is enable yet, right ?",
      "created_at": "2021-02-03T10:30:46Z",
      "updated_at": "2021-02-03T10:30:46Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "As far as I know, no - not on a non-Windows platform.",
      "created_at": "2021-02-03T21:54:36Z",
      "updated_at": "2021-02-03T21:54:36Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "With the one provided with PowerShell there's a good chance it won't work but it really depends on the distribution, i.e. macOS is very likely not to work. With my forked version you definitely can. It's one of the integration scenarios I test out when creating a new release https://github.com/jborean93/omi/blob/67fb46865b76ecd5d89a990fdedeb32cd219143f/libmi.tests.ps1#L470-L518.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/8462645?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jborean93/omi\">jborean93/omi</a></strong></div><div>Open Management Infrastructure. Contribute to jborean93/omi development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-02-03T21:57:08Z",
      "updated_at": "2021-02-03T21:57:10Z"
    },
    {
      "author": "suoko",
      "author_association": "NONE",
      "body": "@jborean93 \r\nSo you think this script can be tweaked to connect via lin ?\r\nhttps://o365reports.com/2019/10/05/connect-all-office-365-services-powershell/\n\n<blockquote><img src=\"https://o365reports.com/wp-content/uploads/2019/11/Connect-to-all-Microsoft-365-Services-PowerShell.png\" width=\"48\" align=\"right\"><div><img src=\"https://o365reports.com/wp-content/uploads/2016/08/cropped-o365-logo-192x192.jpg\" height=\"14\"> Office 365 Reports</div><div><strong><a href=\"https://o365reports.com/2019/10/05/connect-all-office-365-services-powershell/\">Connect to all Office 365 Services Powershell (Supports MFA too)</a></strong></div><div>We have created \u201cAll-in-One\u201d PowerShell script that connects all Office 365 services using PowerShell with MFA/non-MFA account.</div></blockquote>",
      "created_at": "2021-02-08T11:11:34Z",
      "updated_at": "2021-02-08T11:11:38Z"
    }
  ],
  "created_at": "2017-11-28T09:20:03Z",
  "labels": [
    "OS-macOS",
    "Issue-Discussion",
    "Resolution-Fixed",
    "WG-Remoting"
  ],
  "number": 5561,
  "state": "closed",
  "title": "Can not connect to Office 365 / Exchange Online with PowerShell",
  "updated_at": "2021-02-11T19:28:59Z"
}