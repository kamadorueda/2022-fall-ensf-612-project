{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13422",
  "author": "mklement0",
  "body": "Follow-up from #12103.\r\n\r\nIn PSv3, `Measure-Object` was changed to support `-Min` and `-Max` operations for input of any type that implements `IComparable` (has a tri-valued `.CompareTo()` method), in which case a `GenericObjectMeasureInfo` instance rather than a `GenericMeasureInfo` is output, with `object`-typed `.Minimum` and `.Maximum` properties that preserve the input type.\r\n\r\nWhile this works with strings, for instance, it doesn't work with _numeric_ types or `[char]` instances, which are mistakenly coerced to `[double]`, which can result in incorrect results for large integers; e.g.:\r\n\r\n```powershell\r\nPS> [long] (9223372036854770000 | Measure-Object -Maximum).Maximum\r\n9223372036854769664  # !! number was altered, due to a lossy coercion to [double]\r\n````\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n[long] (9223372036854770000 | Measure-Object -Maximum).Maximum | Should -Be 9223372036854770000\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should pass.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because the `[long]`-typed input number was coerced to `[double]`\r\n\r\n```none\r\nExpected 9223372036854770000, but got 9223372036854769664\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.5\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-08-12T20:31:33Z",
  "number": 13422,
  "state": "open",
  "title": "Measure-Object -Min / -Max changes the data type of integers to [double], resulting in incorrect output for large integers",
  "updated_at": "2020-08-26T22:24:05Z"
}