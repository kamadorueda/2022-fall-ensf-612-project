{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7940",
  "author": "mklement0",
  "body": "Note: \r\n\r\n* What I'm proposing requires adding special handling to array indices, which is currently _not_ the case: PowerShell has no special array-subscript syntax, it allows use of any expression, as long as it results in an array of (valid) indices.\r\n\r\n* While this is a very powerful concept, the lack of awareness of the array context precludes some useful features, hence this suggestion.\r\n\r\nNote that a related array-slicing feature suggestion for introducing _stepping_, #7928, does _not_ require array-being-sliced awareness and could be implemented on the range operator (`..`) itself.\r\n\r\n---\r\n\r\n* Provide **all-remaining-elements logic**:\r\n\r\n```powershell\r\n# Sample array\r\n$a = 'one', 'two', 'three', 'four', 'five'\r\n\r\n# CURRENTLY required syntax for returning everything starting with the 3rd element:\r\n$a[2..($a.Count-1)]\r\nthree\r\nfour\r\nfive\r\n\r\n# WISHFUL THINKING: having $a.Count-1 be *implied* as the end of the range.\r\n$a[2..]\r\nthree\r\nfour\r\nfive\r\n```\r\n\r\nAside from being more concise, this has the added advantage of not needing the input array to be stored in a variable beforehand.\r\n\r\n* Provide an **except-last-N-elements** idiom:\r\n\r\n```powershell\r\n# Sample array\r\n$a = 'one', 'two', 'three', 'four', 'five'\r\n\r\n# CURRENTLY required syntax for returning everything except the last 3 elements:\r\n$a[0..($a.Count-1 - 3)]\r\none\r\ntwo\r\n\r\n# WISHFUL THINKING: allow specifying just N, without explicitly needing to refer\r\n# to the end of the array.\r\n# Note that $a[0..-3] does NOT work, because it creates array 0, -1, -2, which does something different.\r\n$a[0..@-3]\r\none\r\ntwo\r\n```\r\n\r\nAs stated, this would require introducing special syntax specific to collection indexing, and such modified range expressions wouldn't make sense outside that context.\r\n\r\nI am not wedded to the specific syntax forms proposed above - `[<n>..]` and `[<m>..@-<n>]`, but what makes them appealing is not having to _explicitly_ refer to the array being sliced in the expression.\r\n\r\nThe less desirable alternative (from an end-user perspective) would be to introduce a new automatic variable representing the array's highest index, such as `$#`.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core 6.1.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "History notes: When I first implemented ranges, I'd planned to support a unary range operator e.g. `$a[1..]` but never got around to it (obviously).  For the upper bound, I'd been thinking about having a magic variable `$end` which would be equivalent to `$a.Length-1` so you could write `$a[1..$end]` to get everything but the first element.  And unfortunately we got the precedence \"wrong\" for computed endpoints (because we wanted to allow ranges to be concatenatable as in `$low .. $middle + $high .. $veryhigh`)  so I don't really see how we can avoid parens in things like `$a[1..($end-1)]` but it's still much nicer than `$a[1..($a.length-2)]`",
      "created_at": "2018-10-03T18:58:04Z",
      "updated_at": "2018-10-03T18:58:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is there any particular reason why `$end` itself cannot map cleanly to the `$_.Length - 1` value, circumventing that issue?",
      "created_at": "2018-10-03T19:29:49Z",
      "updated_at": "2018-10-03T19:29:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\nI think @BrucePay indeed meant `$end` to be `$_.Length - 1`, which requires no arithmetic in the all-remaining scenario, but obviously still does in the except-last-N scenario.\r\n\r\nNote that in the all-remaining scenario you can even currently get away without arithmetic, because it's benign (though potentially confusing) to exceed the array bounds by 1:\r\n\r\n```powershell\r\n$a=1,2,3; $a[1..$a.Count]  # works, though strictly speaking it should be `($a.Count - 1 )`\r\n2,\r\n3\r\n```\r\n\r\nYes, the need for parentheses is unfortunate, but providing the automatic highest-index variable would indeed help (I suggested `$#`, because, unlike `$end`, it is currently a syntax error and therefore cannot clash with existing user variables).\r\n\r\nThat said, using the variable-less special syntax I proposed would make both problems go away (parentheses, need for new variable).\r\n\r\nAre we open to special syntax in the context of indexing (`$a[1..]` and `$a[0..@-1]`)?\r\n\r\nIntroducing `$#` (`$end`) wouldn't require special _syntax_, but it still amounts to special-casing the indexing context.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-03T20:49:12Z",
      "updated_at": "2018-10-03T21:28:51Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "I think a lot of this is handled by `Select -Skip` and `-SkipLast`, and even works out shorter and clearer to do that:\r\n\r\n```\r\n$a = 'one', 'two', 'three', 'four', 'five'\r\n\r\n# CURRENTLY required syntax for returning everything starting with the 3rd element:\r\n$a[2..($a.Count-1)]\r\n$a|select -skip 2\r\n\r\n# CURRENTLY required syntax for returning everything except the last 3 elements:\r\n$a[0..($a.Count-1 - 3)]\r\n$a|select -SkipLast 3\r\n```\r\n\r\nBeing able to select arbitrary elements such as `$a[4,7,1,3]` is nice, but the way ranges include both endpoints, the precedence rules that mean `0..($x-1)` needs parens, they way you can't add/subtract to a whole array like `1,2,3 -1` to make it `0,1,2`..\r\n\r\nWhat about leaving range `..` alone, and introducing an entirely new slice operator, which is basically \"Python's slice operator\" ?\r\n\r\n```\r\n# PS ranges stay the same\r\n$a[0..3]   # items 0,1,2,3\r\n\r\n# Pythonic slicing \r\n# start:end\r\n# start:end:step\r\n# missing values for \"and the rest\"\r\n\r\n$a[2:]    # items from index 2 through end\r\n\r\n$a[:-2]    # from the start, stopping 2 before the end\r\n\r\n$a[::3]    # from the start to the end, in steps of 3\r\n\r\n$a[1:-2]   # items from index 1.. stopping 2 before the end\r\n\r\n$a[2::3]   # items  from index 2 through end, step 3 at a time\r\n\r\n```\r\n\r\n?\r\n\r\n> it's benign (though potentially confusing) to exceed the array bounds by 1\r\n\r\nExcept in Strict-Mode, then it's System.IndexOutOfRangeException",
      "created_at": "2018-10-03T21:54:16Z",
      "updated_at": "2018-10-03T23:11:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@HumanEquivalentUnit: \r\n\r\nAs a general rule, expression-mode solutions and pipeline solutions aren't interchangeable, for performance reasons.\r\n\r\nYes, `Select -Skip` and `Select -SkipLast`  are the _functional_ equivalent of what we're looking for in the realm of _pipelines_, but they're not an option for performant code in the realm of _expressions_.\r\n\r\n> What about leaving range .. alone, and introducing an entirely new slice operator\r\n\r\nMy preference is to make do with minor tweaks to the existing range-operator syntax, to avoid confusion and reduce complexity (another thing to learn).\r\n\r\n---\r\n\r\nAs an aside: \r\n\r\n> Except in Strict-Mode, then it's System.IndexOutOfRangeException\r\n\r\nGood point, though, to be precise, it is `Set-StrictMode -Version 3` or higher, and given the limitations of `Set-StrictMode`, I tend to stay away from it:\r\n\r\n* #2798\r\n* https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0003-Lexical-Strict-Mode.md\r\n\r\n\r\n",
      "created_at": "2018-10-04T02:01:35Z",
      "updated_at": "2018-10-04T02:01:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "<sup>Updated to reflect what ultimately made it into C# 8.0 on release.</sup>\r\n\r\n@rkeithhill points out that the <del>upcoming</del> C# 8 (released with .NET Core 3.0) gained the features discussed here, as covered [here](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges).\r\n\r\nSome of what was introduced in C# 8 has been a part of PowerShell since the beginning (kudos, PowerShell):\r\n\r\nC# 8 | PS\r\n----- | ---\r\n`^1` | `-1`\r\n`1..2` | (same)\r\n\r\nHere's what's new, which covers what this issue proposes with some extra syntactic sugar:\r\n\r\nC# 8 | PS now | This proposal (so far, written without knowledge of C# 8)\r\n--- | --- | ---\r\n`1..` | `1..($arr.Length-1)` | `1..`\r\n`..9` | `0..9` | \r\n`^9..` | `-9..-1` | `-9..`\r\n`..` | `0..($arr.Length-1)`\r\n`1..^1` | `1..($arr.Length-1 - 1)` | `1..@-1`\r\n\r\nNote: While it is possible to use ranges with `System.Span<T>` instances to get slices that are windows into the original array, using them with regular arrays creates slices that are new, independent arrays, as in PowerShell.\r\n\r\nSyntax-wise, an option is therefore to go with `^` instead of `@-` for the index-from-end syntax to align with C#.\r\n(I'm not sure why `^` was chosen for C#).\r\n\r\n`..9` for `0..9`, though less compelling than `9..`, might be nice for symmetry.\r\n\r\nAs for `..` by itself: when used on a regular array, it is effectively a way to create a shallow copy of the input array.",
      "created_at": "2018-10-05T21:28:39Z",
      "updated_at": "2020-02-03T21:28:29Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "FYI: The spec for ranges in C# 8 is [here.](https://github.com/dotnet/csharplang/blob/master/proposals/ranges.md)",
      "created_at": "2019-01-16T00:32:56Z",
      "updated_at": "2019-01-16T00:32:56Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n> Returning spans ... We cannot do that in PowerShell, as this behavior would be a breaking change,\r\n\r\nIt also won't work as ByRef types are not supported:\r\n```powershell\r\nPSCore (1:46) >  $sp = [span[int]]::Empty\r\nCannot get or set the property or field \"Empty\" of the ByRef-like type \"System.Span`1[System.Int32]\". ByRef-like types are not supported in PowerShell.\r\n```",
      "created_at": "2019-01-16T18:01:06Z",
      "updated_at": "2019-01-16T18:01:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 Could that be supported in some fashion? Certainly, that's a separate issue, but... even so. ^^",
      "created_at": "2019-01-16T18:09:31Z",
      "updated_at": "2019-01-16T18:09:31Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Also note that slices in PowerShell aren't based on ranges, they're based on _arrays_. Ranges just generate arrays so you can do things like:\r\n```powershell\r\nPSCore (1:55) >  $a = 1..100\r\nPSCore (1:56) >  $a[1,3 + 7..9]\r\n2\r\n4\r\n8\r\n9\r\n10\r\nPSCore (1:57) >  $slice = 1,3 + 7..9\r\nPSCore (1:58) >  $a[$slice]\r\n2\r\n4\r\n8\r\n9\r\n10\r\n```\r\n\r\nOne possible non-colliding alternative solution for slices would be to add code methods to arrays and strings to do the slicing: `First( int n)`, `Last(int n)`, `Slice(int n, int length)`, etc.  \r\n\r\n@vexx32 As an alternative to `Span<T>`, we could use `ArraySegment<T>` which works fine in PowerShell.\r\n",
      "created_at": "2019-01-16T18:42:48Z",
      "updated_at": "2019-01-16T18:42:48Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Please consider situations where the array is created just before the split. In this case, the result should be everything from the second path element through the end. Then, joined back up as a path. Using `999` is a hack, but it works.\r\n\r\n`Get-ChildItem -File -Recurse | ForEach-Object  { $_.FullName.Split('/')[2..999] -join '/' }`\r\n\r\nIn addition to this, what if the path without the last N elements is needed?",
      "created_at": "2019-09-23T22:43:19Z",
      "updated_at": "2019-09-23T22:43:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Using `999` is a hack, but it works.\r\n\r\nIt only works if the max. upper bound is low enough to be practical; an attempt at generalizing that with `[2..([int]::MaxValue-1)]` does _not_ work (and is prohibitively slow/memory-intensive even if you lower the number to the maximum permissible upper bound).\r\n\r\nOther than that, to address your scenarios in the the terms of this proposal:\r\n\r\n```powershell\r\n$_.FullName.Split('/')[2..]  # 3rd element and all remaining ones\r\n```\r\n\r\nAnd to get all remaining except the last, say, `2` elements:\r\n\r\n```powershell\r\n$_.FullName.Split('/')[2..@-2]  # 3rd element through all but the last 2\r\n```\r\n\r\n",
      "created_at": "2019-09-23T22:55:05Z",
      "updated_at": "2019-09-24T02:25:45Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I'm a bit late on this one, but in regards to:\r\n\r\n> @vexx32 As an alternative to `Span<T>`, we could use `ArraySegment<T>` which works fine in PowerShell.\r\n\r\n`Memory<T>` also works.  Granted, `Memory<T>` doesn't really work in PowerShell since most of it's functionality requires you call the `Span` property, but improving that handling would be great as well.\r\n\r\nAlso FWIW C#8's slicing only doesn't give you `Span` from an array, it just gives you a sub-array similar to PS. For example:\r\n\r\n```csharp\r\nobject GetSlice(int[] source) => source[0..^1];\r\n```\r\n\r\nIs translated by the compiler to:\r\n\r\n```csharp\r\nobject GetSlice(int[] source)\r\n    => RuntimeHelpers.GetSubArray(source,. new Range(0, new Index(1, fromEnd: true)));\r\n```\r\n\r\nAlso +1 to supporting <kbd>^</kbd> from C# 8's implementation.",
      "created_at": "2020-02-03T19:50:26Z",
      "updated_at": "2020-02-03T19:50:26Z"
    },
    {
      "author": "Bitfiddler",
      "author_association": "NONE",
      "body": "Has there been any movement on this request?  Would be very useful for my current work but seems like none of this has been implemented in PSv7.1.5",
      "created_at": "2021-10-20T23:12:53Z",
      "updated_at": "2021-10-20T23:13:13Z"
    },
    {
      "author": "wonghoi",
      "author_association": "NONE",
      "body": "> History notes: When I first implemented ranges, I'd planned to support a unary range operator e.g. `$a[1..]` but never got around to it (obviously). For the upper bound, I'd been thinking about having a magic variable `$end` which would be equivalent to `$a.Length-1` so you could write `$a[1..$end]` to get everything but the first element. And unfortunately we got the precedence \"wrong\" for computed endpoints (because we wanted to allow ranges to be concatenatable as in `$low .. $middle + $high .. $veryhigh`) so I don't really see how we can avoid parens in things like `$a[1..($end-1)]` but it's still much nicer than `$a[1..($a.length-2)]`\r\n\r\nI think if range `operator..` supported the optional `steps` (skipping n items) like Python's slice `operator:`, users can explicitly add a positive steps (such as +1) to tell the index `operator[]` to intercept and convert the negative range endpoint indices to positive indexing (by adding the array length) **BEFORE unrolling** the range**s** (concatenated or not). This way Powershell can keep the backward compatibility while adding a much needed _non-unit steps_ feature by offering something like `4..-1..+1` which translates to `4..($array.length-1)`.\r\n\r\nLooks like the index `operator[]` is above comma `operator,` and concatenation such as `operator+` according to this [document about operator precedence](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence?view=powershell-7.2). Does that mean that `operator[]` gets to see the range end-points in the (potentially compound) expressions inside it so it gets a chance to convert the indices to positive indices? If I misunderstood the precedence rules, could this be fixed through introducing a pre-processor stage replacing the negative index end-points with positive indexing (as appropriate based on supplied context) within the square brackets of the index `operator[]` before the interpreter's parser sees it?\r\n\r\nAnother way is to give users a shortcut referring to the array targeted by the indexing `operator[]` square brackets as it'll open up a lot more possibilities such as logical/boolean indexing (which is another way of doing filter/select element based on conditions like `$array[$_self -ge 5])` so we can do something like `$array[(1..6)+(4..($_self.count-1))]` when the $array can be unnamed, such as directly indexing into the output array of `(Get-ChildItem).Name`\r\n",
      "created_at": "2022-03-23T22:39:24Z",
      "updated_at": "2022-03-23T23:02:59Z"
    }
  ],
  "created_at": "2018-10-03T17:45:37Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 7940,
  "state": "open",
  "title": "Support array (collection) slicing with all-remaining and except-last-N elements logic",
  "updated_at": "2022-03-23T23:02:59Z"
}