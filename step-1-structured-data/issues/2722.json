{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2722",
  "author": "lzybkr",
  "body": "The default parameter set for `Get-Process` accepts `-Name` by position.\r\n\r\nMaybe it's just me, but I forget this all the time, and expect `Get-Process 1234` to work.\r\n\r\nI think we can make it work in a reasonable way too. If Name is a positive integer and we do not find a process by that name, search again assuming it was a ProcessId.\r\n\r\nEdit: instead of making this work (which might not be a good idea always) - I like the suggestion from @rkeithhill to give a better error message.",
  "closed_at": "2019-03-01T12:01:53Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's unbelievable but user can actually catching process with **name** `1234` and actually get a process with **Pid** `1234`. It's bad.\n",
      "created_at": "2016-11-19T15:05:54Z",
      "updated_at": "2016-11-19T15:05:54Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Right, if finding the process by name fails, only then look by id. Is that not safe and reasonable?\n",
      "created_at": "2016-11-19T17:28:57Z",
      "updated_at": "2016-11-19T17:28:57Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think he means that there is a risk that I have been really clever and created \n1234.exe.\n\nIt is not running, but when I do \n\n```\nGet-Process -Name 1234 | Stop-Process\n```\n\nI kill MySuperimportantProcess.exe, with pid 1234.\n",
      "created_at": "2016-11-19T19:29:45Z",
      "updated_at": "2016-11-19T19:32:54Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Maybe there should be a defaulted parameterset NameOrID with this behavior, so that you can specify -Name or -ID and _only_ get by name or by id.\n",
      "created_at": "2016-11-19T19:32:29Z",
      "updated_at": "2016-11-19T19:32:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> Maybe there should be a defaulted parameterset NameOrID \r\n\r\nThat won't help if the arg is specified by position but at least it A) gives a way to specify that you really want to match *just* by name and B) gives a more correct name for the parameter.  \r\n\r\nConceivably this could be a breaking change if a script does not use the `-Name` parameter and there just happens to be a process with a name that corresponds to a PID you want Stop (or otherwise interrogate).   That said, it is pretty uncommon to run across processes with a name that parses as a integer.  And the workaround is simple - use the `-Name` parameter.  I'd be willing to risk the back compat issue for the convenience provided.\r\n\r\nBTW why not give `Stop-Process` the same treatment?  Make a new NameOrId parameter and make it the default parameterset.  It annoys me that GPS defaults to name but SPPS defaults to PID.  I'm always forgetting to specify the -Name parameter to Stop-Process when I want to stop all instances of an app.",
      "created_at": "2016-11-20T00:27:33Z",
      "updated_at": "2016-11-21T19:37:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The risk is similar to the discussion the committee had with [RFC0011](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0011-Dot-Referencing-With-Static-Integers.md) where files named as integers can produce unexpected results.  Perhaps a safe middle ground might be to just tell the user that a process with name 1234 wasn't found and that they should try `get-process -pid 1234`\n",
      "created_at": "2016-11-20T05:37:50Z",
      "updated_at": "2016-11-20T05:38:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Based on the above. There is a possibility to make destructive actions. This is absolutely unacceptable in a script. \nAnd looks very tasty for user input but really requires of `informing the user`. \nI think it makes no sense to do this for a _single_ cmdlet. Let's try to generalize the situation. This is an area of parameter binding. We now offer an alternative parameters before the input of a value, and here we need to offer (`informing the user`) alternatives after the input of a value (insert a parameter name before the value by tab). Is it possible to do this?\n",
      "created_at": "2016-11-20T13:27:19Z",
      "updated_at": "2016-11-20T13:36:39Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This dovetails nicely into the parameter alias discussion in #2199.\r\n\r\nIf a user can extend the parameter metadata for other commands, they can add aliases or even an `ArgumentTransformationAttribute`, which would solve this problem nicely without explicitly opting into the potentially destructive and possibly surprising behavior that I'd like.",
      "created_at": "2016-11-21T19:32:49Z",
      "updated_at": "2016-11-21T19:32:49Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Regardless of the outcome here, I'd love to see more PowerShell cmdlets do this:\r\n> ... tell the user that a process with name 1234 wasn't found and that they should try get-process -pid 1234\r\n\r\nI like it when I get that sort of helpful message on Ubuntu e.g. when I run a command that isn't available, Ubuntu tells how to install that command with `apt-get`.\r\n\r\nAlso my objection is not about allowing users to add aliases.  I just wanted to make sure PowerShell wouldn't add the `-rf`, `-al` aliases by default.",
      "created_at": "2016-11-21T19:41:05Z",
      "updated_at": "2016-11-21T19:55:22Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "How about something like this?\r\n\r\n```\r\nPS> get-process 19432\r\n\r\nUse pid instead of Name?\r\nThe process with name '19432' was not found but 'devenv (pid=19432)' was. Continue?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"Y\"): y\r\n\r\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\r\n-------  ------    -----      -----     ------     --  -- -----------\r\n   4899     643  1841044    1038068   3\u00a0789,73  19432   1 devenv\r\n```\r\n",
      "created_at": "2016-11-21T22:27:15Z",
      "updated_at": "2016-11-21T22:30:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Looks good, if it only is in interactive mode but not in script.",
      "created_at": "2016-11-22T05:25:37Z",
      "updated_at": "2016-11-22T05:25:37Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "This reminds me of Get-Service.  Get-Service has -Name and -DisplayName in different parameter sets, yet you can use either when you use the -Name field.\r\n\r\ne.g.\r\n```\r\nGet-Service wuauserv\r\nGet-Service 'Windows Update'\r\n```\r\n\r\nI agree with @lzybkr's original issue, and wish Get-Process worked this way as well because it would be very convienient; however, in this case I would be satisfied with a shorthand alternative made capable via parameter alias modification or if PowerShell just included a function like this by default for ad-hoc use since looking up the current process by id is a relatively common task:\r\n```\r\nfunction pid {\r\n    [CmdletBinding()]\r\n    [OutputType([System.Diagnostics.Process])]\r\n    param()\r\n    Get-Process -Id $pid\r\n}\r\n```\r\n\r\nIt's nice and easy to remember too. And if you want, you could throw in an optional Id parameter that defaults to $pid and then just invoke `pid 1234` for other process ids.",
      "created_at": "2016-11-22T20:44:07Z",
      "updated_at": "2016-11-22T20:45:56Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Just to add to this, where this particular issue drives me the most is that Stop-Process uses a default parameter set that requires Id rather than name.  I *always* try something like this first:\r\n\r\n```\r\nspps *edge*\r\n```\r\n\r\nThen I _sigh_, then I re-run the command, explicitly using the -Name parameter.\r\n\r\nI would much prefer if this set of commands simply had a consistent rule among them that made ad-hoc use more palatable.",
      "created_at": "2016-11-24T17:52:42Z",
      "updated_at": "2016-11-24T17:52:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm convinced that the default behavior should not be changed, but I'm leaving this open until we have a better error message than `Cannot find a process with the name \"1234\"`.",
      "created_at": "2016-12-09T00:42:58Z",
      "updated_at": "2016-12-09T00:42:58Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Agreed. At the very least, the error message could say `Cannont find a process with the name \"1234\".  If 1234 is a process Id, use Get-Process -Id 1234.`  Of course, you would only use **that** error message when the Name parameter value is all digits.",
      "created_at": "2016-12-09T00:47:05Z",
      "updated_at": "2016-12-09T00:47:33Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Note that #2199 might as well be the issue to cover customizing parameter metadata.",
      "created_at": "2016-12-09T00:47:53Z",
      "updated_at": "2016-12-09T00:47:53Z"
    },
    {
      "author": "MohiTheFish",
      "author_association": "CONTRIBUTOR",
      "body": "I am working on this with @TylerLeonhardt  and @rjmholt  at HackIllinois 2019. Here is the PR: https://github.com/PowerShell/PowerShell/pull/8959",
      "created_at": "2019-02-23T08:18:27Z",
      "updated_at": "2019-02-23T08:18:27Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "If `Get-Process` and `Stop-Process` were both changed to have their parameter sets designed like Debug-Process and Wait-Process, where the Name and Id parameters are positional, wouldn't that resolve this problem entirely while making -Process cmdlets consistent in design without introducing breaking changes?\r\n\r\ni.e. Today these work:\r\n\r\n```\r\nGet-Process pwsh\r\nStop-Process $pid\r\n```\r\n\r\nand these don't:\r\n\r\n```\r\nGet-Process $pid\r\nStop-Process pwsh\r\n```\r\n\r\nIf both `Get-Process` and `Stop-Process` had positional Id and Name parameters, respectively, wouldn't that make both scenarios work without breaking existing scripts that use positional parameters? I think it would at least resolve the `Stop-Process` issue without issue, since strings would be automatically mapped to the Name parameter set. I haven't thought all of the paths for this through, and I have my head half paying attention to a debugger right now, but it seems like a possible solution for this.",
      "created_at": "2019-02-28T17:33:38Z",
      "updated_at": "2019-02-28T17:33:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro As discussed above user can fool himself typing without quotes `Stop-Process 1234` and kill process with pid 1234 instead of process with name 1234.",
      "created_at": "2019-02-28T18:09:10Z",
      "updated_at": "2019-02-28T18:09:10Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Too bad, makes for annoying parameter sets.",
      "created_at": "2019-02-28T18:23:50Z",
      "updated_at": "2019-02-28T18:23:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We could add something to the suggestion framework when a process named `1234` doesn't exist and suggest using the pid if the value is numerical.",
      "created_at": "2019-03-06T18:49:03Z",
      "updated_at": "2019-03-06T18:49:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder - what can this system return better than the current message?",
      "created_at": "2019-03-06T19:08:38Z",
      "updated_at": "2019-03-06T19:08:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Current error looks like:\r\n\r\n```none\r\nget-process : Cannot find a process with the name \"1234\". Verify the process name and call the cmdlet again.\r\nAt line:1 char:1\r\n+ get-process 1234\r\n+ ~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (1234:String) [Get-Process], ProcessCommandException\r\n+ FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.GetProcessCommand\r\n```\r\n\r\nIt could look like:\r\n\r\n```none\r\nget-process : Cannot find a process with the name \"1234\". Verify the process name and call the cmdlet again.\r\nAt line:1 char:1\r\n+ get-process 1234\r\n+ ~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (1234:String) [Get-Process], ProcessCommandException\r\n+ FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\nSuggestion: Did you mean: Get-Process -id 1234 ?\r\n```",
      "created_at": "2019-03-06T22:55:16Z",
      "updated_at": "2019-03-06T22:55:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For clarify, now the error meassage is \"Cannot find a process with the name \"{0}\". Try running with -Id to search by Id of processes\"",
      "created_at": "2019-03-07T05:28:15Z",
      "updated_at": "2019-03-07T05:28:24Z"
    }
  ],
  "created_at": "2016-11-19T00:15:16Z",
  "number": 2722,
  "state": "closed",
  "title": "Get-Process $pid should suggest using -Id $pid",
  "updated_at": "2019-03-07T05:28:24Z"
}