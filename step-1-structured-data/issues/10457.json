{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10457",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\ntry { } finally {\r\n    Write-Host Press ctrl c now\r\n    Start-Sleep 5\r\n    Write-Host You`'ll never see this one\r\n}\r\n```\r\n\r\nEvaluate the above script and press <kbd>CTRL</kbd> + <kbd>C</kbd> after the message is displayed.\r\n\r\n# Expected behavior\r\n\r\nThe entire `finally` block to complete.\r\n\r\n# Actual behavior\r\n\r\nThe finally block is cancelled when <kbd>CTRL</kbd> + <kbd>C</kbd> is pressed.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis also occurs on Windows PowerShell 5.1\r\n\r\n# Notes\r\n\r\nIf <kbd>CTRL</kbd> + <kbd>C</kbd> is pressed *in the `try` block*, additional key presses in the `finally` block will be correctly ignored. e.g.\r\n\r\n```powershell\r\ntry {\r\n    Write-Host Press ctrl c now\r\n    Start-Sleep 5\r\n} finally {\r\n    Write-Host Try pressing it a bunch, won`'t do anything\r\n    Start-Sleep 5\r\n    Write-Host You`'ll actually see this one\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @daxian-dbw this is... fairly serious, no? Being able to cancel a `finally` block seems _super_ not a good thing. \ud83d\ude26 ",
      "created_at": "2019-08-28T16:44:23Z",
      "updated_at": "2019-08-28T16:44:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Looks like there's no real system to handle \"delaying\" stops.\r\n\r\nThe example in the notes works mostly by accident.  In `ConsoleHost`, `^c` spins up a thread that handles stops the current pipeline and waits for it to finish.  In that handler, if that thread already exists it just returns early.  So the notes example only works because `ConsoleHost` thinks it's a duplicate stop request.\r\n\r\nA possible way to fix this would be to:\r\n\r\n1. Add a new field to `LocalPipeline` called `_areStopsDisabled`\r\n1. Add another field to `LocalPipeline` called `_wasStopReceivedWhileDisabled` with a better name\r\n1. Change `LocalPipeline.CoreStop` to check if `_areStopsDisabled` and to instead set `_wasStopReceivedWhileDisabled` if `true`\r\n1. Change the expression generated by the compiler for a `finally` block to set `LocalPipeline._areStopsDisabled` before the body, and to throw `PipelineStoppedException` after the body if `_wasStopReceivedWhileDisabled` is `true`\r\n1. Figure out how to do all that while accounting for nested `try`/`finally` blocks",
      "created_at": "2019-08-28T17:02:36Z",
      "updated_at": "2019-08-28T17:02:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is not issue for background scripts like task scheduled.\r\nFor interactive session it could not big issue too - users press Ctrl-C most often when the script freezes and it can freezes in `finally` block too.",
      "created_at": "2019-08-29T04:38:17Z",
      "updated_at": "2019-08-29T04:38:17Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "I pretty much agree with @iSazonov - I don't think it's really a big issue. Once you hit ctrl-C, your shell is in an inconsistent state. Because that's how interactive shells work. If you're running a batch script/task or whatever, no one is hitting ctrl-C because - well - it's not interactive. The ctrl-C implementation in PowerShell is a pretty controlled compared to the first implementation (which simply terminated the thread.)\r\n\r\nBut if one was to change anything, there is a single value that represents the fact that the shell is stopping. Just save that value away in the finally clause then restore once finally is done. But wait - what if the user hit's stop again!?! That usually means that they *really* want it to stop. So the finalizer is interrupted. Well - that's what the user wanted. I don't have a problem with that.",
      "created_at": "2019-08-29T05:36:09Z",
      "updated_at": "2019-08-29T05:36:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "From a user perspective, that might make sense.\r\n\r\nFrom a module author's perspective, that stance could be really dangerous. Sure, it might be what the user wants, but **usually** the things you put in a `finally` block are pretty important. Cancelling a `finally` block can lead to corrupted data, memory leaks (objects can't be disposed properly), among a host of other problems.\r\n\r\nThis should be fixed.",
      "created_at": "2019-08-29T12:32:33Z",
      "updated_at": "2019-08-29T12:32:39Z"
    }
  ],
  "created_at": "2019-08-28T16:23:57Z",
  "number": 10457,
  "state": "open",
  "title": "Finally clause can be canceled with CTRL + C",
  "updated_at": "2019-08-29T12:32:39Z"
}