{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7050",
  "author": "kilasuit",
  "body": "Originally opened at https://github.com/lzybkr/PSReadLine/issues/712\r\n\r\nThis is definitely less of an issue and more of a feature request/suggestion.\r\n\r\nThe scenario that I see that would be useful would be if you are typing at the console and then are Piping to another command.\r\n\r\nso for example\r\n``` powershell\r\nGet-Service | <tab>\r\n```\r\nwould then intelligently suggest the below first\r\n\r\n``` powershell\r\nGet-Service | Stop-Service\r\nGet-Service | Restart-Service\r\nGet-Service | Start-Service\r\n```\r\nI wasn't exactly sure if this would be an extension to PSReadline or whether this would be better placed directly in the main PowerShell Repository, however this would also potentialy be something that I think should (if possible) be able to be backported.\r\nThis could also allow it to become a more extensible model that would allow module authors to do things like\r\n\r\n``` powershell\r\n$GetParams = @{}\r\n$setParams = @{}\r\nGet-CUItem @getParams | Set-CUItem @setParams\r\n```\r\netc etc \r\n\r\nthis is only a basic example but hopefully makes some sense\r\n\r\nI'd actually be quite willing to work on this if given the right pointers on where to start as I expect this would take me some time but I think this would be a hugely beneficial thing to have both interactively and when writing scripts.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. So effectively you'd want PSReadline to look at the cmdlet that comes before the pipe and try to match it with another one that carries the same noun, but a different verb.\r\n\r\nI'd also suggest having `ForEach-Object` and `Where-Object` and suchlike as part of a 'default set' that get suggested for all commands.",
      "created_at": "2018-06-24T22:40:12Z",
      "updated_at": "2018-06-24T22:40:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This request is related to our [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/123) to expose extensibility to intellisense to expose this type of capability without it tied specifically to PSReadLine.  ",
      "created_at": "2018-06-26T01:18:44Z",
      "updated_at": "2018-06-26T01:18:44Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "IMO, this feature is shouldn't require or rely on any sort of extensibility.\r\n\r\nThe basic idea is - command completion uses the `OutputType` specified by the previous command to filter the list of possibilities.\r\n\r\nThis very scenario is why `OutputType` was added in the first place, we just never got around to adding the necessary support in command completion.\r\n\r\n@kilasuit - since you're willing to work on it, I think:\r\n\r\n* Start [here](https://github.com/PowerShell/PowerShell/blob/7d72e386042fe6d72b7724a9caba2f05693e92c5/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L86) - if this method is called for your scenario, then things will be a bit easier. It should definitely be called if a partial command name is specified.\r\n* If this method is not hit (e.g. you don't have a partial command name), I *think* you'll need to add some code near [here](https://github.com/PowerShell/PowerShell/blob/7d72e386042fe6d72b7724a9caba2f05693e92c5/src/System.Management.Automation/engine/CommandCompletion/CompletionAnalysis.cs#L599). It's really messy - basically a bunch of heuristics to guide completion, it's hard to provide much guidance here without really digging in.\r\n* Use this [method](https://github.com/PowerShell/PowerShell/blob/7d72e386042fe6d72b7724a9caba2f05693e92c5/src/System.Management.Automation/engine/parser/TypeInferenceVisitor.cs#L44) passing the `CommandAst` of the previous command in the pipeline to get the inferred types to help guide completion.\r\n\r\nI do think some care will be needed to not impact performance too much. We might need to exclude some types like `object`, `PSObject`, and `string` because basically every command supports those types in the pipeline. If tools like VSCode automatically invoke completion after the `|`, there could be a big impact on the user experience.",
      "created_at": "2018-06-26T01:58:48Z",
      "updated_at": "2018-06-26T01:58:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr the point of extensibility is that individuals can develop different algorithms for completion and people can try out what they prefer",
      "created_at": "2018-06-26T02:33:00Z",
      "updated_at": "2018-06-26T02:33:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT - my take on the RFC is that it is basically the same as defining your own function `TabExpansion` or `TabExpansion2`. That seems like the wrong approach to introduce an incremental improvement to the current completion infrastructure.",
      "created_at": "2018-06-26T04:17:13Z",
      "updated_at": "2018-06-26T04:17:13Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Just to update on this - I am looking to start the work on this based on `OutputType` expansion in the coming days, thanks for the pointers @lzybkr ",
      "created_at": "2018-09-24T14:12:58Z",
      "updated_at": "2018-09-24T14:13:30Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I am going to attack this as part of hacktoberfest attempts",
      "created_at": "2019-09-30T21:10:01Z",
      "updated_at": "2019-09-30T21:10:01Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@theJasonHelmick this would be one for your Shell Project.\r\nI do still want to tackle this but have yet to get chance to get started on this",
      "created_at": "2020-02-20T18:08:47Z",
      "updated_at": "2020-02-20T18:08:47Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is something I do still want to do and hope to be able to work on this in the 2nd half of the year",
      "created_at": "2022-01-13T11:06:37Z",
      "updated_at": "2022-01-13T11:06:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @MartinGC94 if you have an interest.",
      "created_at": "2022-01-13T12:37:06Z",
      "updated_at": "2022-01-13T12:37:06Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I actually have a simple version of this in my tabexpansion2. It's not very pretty, but it works decently well:\r\n<details>\r\n  <summary>Code here</summary>\r\n  \r\n```\r\nfunction TabExpansion2\r\n{\r\n    [CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]\r\n    [OutputType([System.Management.Automation.CommandCompletion])]\r\n    Param\r\n    (\r\n        [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]\r\n        [string]\r\n        $inputScript,\r\n\r\n        [Parameter(ParameterSetName = 'ScriptInputSet', Position = 1)]\r\n        [int]\r\n        $cursorColumn = $inputScript.Length,\r\n\r\n        [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]\r\n        [System.Management.Automation.Language.Ast]\r\n        $ast,\r\n\r\n        [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]\r\n        [System.Management.Automation.Language.Token[]]\r\n        $tokens,\r\n\r\n        [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]\r\n        [System.Management.Automation.Language.IScriptPosition]\r\n        $positionOfCursor,\r\n\r\n        [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]\r\n        [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]\r\n        [Hashtable]\r\n        $options = $null\r\n    )\r\n    End\r\n    {\r\n        $ExcludedTokenKinds = [System.Collections.Generic.HashSet[System.Management.Automation.Language.TokenKind]]@(\r\n            [System.Management.Automation.Language.TokenKind]::LineContinuation\r\n            [System.Management.Automation.Language.TokenKind]::NewLine\r\n        )\r\n        $ExcludedTypes = [System.Collections.Generic.HashSet[string]]@(\r\n            'System.Byte'\r\n            'System.String'\r\n            'System.Object'\r\n            'Microsoft.Management.Infrastructure.CimInstance'\r\n            'System.Management.Automation.PSObject'\r\n            'System.Management.Automation.PSCustomObject'\r\n        )\r\n\r\n        if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')\r\n        {\r\n            [System.Management.Automation.Language.Token[]]$tokens = $null\r\n            $ParsedErrors = $null\r\n            $ast          = [System.Management.Automation.Language.Parser]::ParseInput($inputScript, [ref]$tokens, [ref]$ParsedErrors)\r\n            $CursorOffset = $cursorColumn\r\n        }\r\n        if ($psCmdlet.ParameterSetName -eq 'AstInputSet')\r\n        {\r\n            $CursorOffset = $positionOfCursor.Offset\r\n        }\r\n\r\n        $TokenBeforeCursor = $tokens.Where({$_.Extent.EndOffset -le $CursorOffset -and !$ExcludedTokenKinds.Contains($_.Kind)})[-1]\r\n\r\n        if ($TokenBeforeCursor.Kind -eq [System.Management.Automation.Language.TokenKind]::Pipe)\r\n        {\r\n            $LastPipeline = $ast.Find({\r\n                    param ($CurrentAst)\r\n                    $CurrentAst.Extent.EndOffset -le $TokenBeforeCursor.Extent.StartOffset -and\r\n                    $CurrentAst -is [System.Management.Automation.Language.PipelineAst]\r\n                },\r\n                $true\r\n            )\r\n\r\n            $LastPipelineElement = $LastPipeline.PipelineElements[-1]\r\n            if ($LastPipelineElement -is [System.Management.Automation.Language.CommandAst])\r\n            {\r\n                if (!$Script:ResultCache)\r\n                {\r\n                    $Script:ResultCache = @{}\r\n                }\r\n                $Result = $Script:ResultCache[$LastPipelineElement.GetCommandName()]\r\n                if ($Result)\r\n                {\r\n                    return [System.Management.Automation.CommandCompletion]::new($Result, -1, $CursorOffset, 0)\r\n                }\r\n                $Command = Get-Command -Name $LastPipelineElement.GetCommandName() -ErrorAction Ignore\r\n                if ($Command)\r\n                {\r\n                    $TypeToSearch = $Command.OutputType.Where({!$ExcludedTypes.Contains($_.Name)}, [System.Management.Automation.WhereOperatorSelectionMode]::First, 1)[0]\r\n                    $RelevantCommands = @(\r\n                        if ($Command.Noun)\r\n                        {\r\n                            Get-Command -Noun $Command.Noun\r\n                        }\r\n                        if ($TypeToSearch)\r\n                        {\r\n                            Get-Command -CommandType Cmdlet,Function -ParameterType $TypeToSearch\r\n                        }\r\n                    ) | Select-Object -Unique\r\n                    if ($RelevantCommands.Count -gt 0)\r\n                    {\r\n                        [System.Collections.Generic.List[System.Management.Automation.CompletionResult]]$Result = foreach ($Item in $RelevantCommands)\r\n                        {\r\n                            [System.Management.Automation.CompletionResult]::new(\r\n                                $Item.Name, #CompletionText\r\n                                $Item.Name, #ListItemText\r\n                                [System.Management.Automation.CompletionResultType]::Command,\r\n                                $Item.Name #ToolTip\r\n                            )\r\n                        }\r\n                        $Script:ResultCache.Add($LastPipelineElement.GetCommandName(), $Result)\r\n                        return [System.Management.Automation.CommandCompletion]::new($Result, -1, $CursorOffset, 0)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')\r\n        {\r\n            return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn, $options)\r\n        }\r\n        else\r\n        {\r\n            return [System.Management.Automation.CommandCompletion]::CompleteInput($ast, $tokens, $positionOfCursor, $options)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\nIf I try to complete with no input after a pipe it looks for commands with the same noun as the previous command + commands that have a parametertype that matches the output type of the previous command.  \r\nThe reason why I don't try to handle partial input is because I probably already know what I want I want if I've typed in a partial name so there's no point in slowing the tab completion of that down.  \r\nA better and hopefully faster native solution would be nice but it's not very high on my personal priority list.",
      "created_at": "2022-01-13T16:12:27Z",
      "updated_at": "2022-01-13T16:12:27Z"
    }
  ],
  "created_at": "2018-06-12T18:06:34Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-IntelliSense"
  ],
  "number": 7050,
  "state": "open",
  "title": "[Feature Suggestion] Add slightly more intelligent tab completion ",
  "updated_at": "2022-01-13T16:12:27Z"
}