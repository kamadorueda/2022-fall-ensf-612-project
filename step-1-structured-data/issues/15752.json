{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15752",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\nRelated: #7829\r\n\r\n### Steps to reproduce\r\n\r\nNote:\r\n\r\n  * While the current behavior is [_documented_]((https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-psdrive?view=powershell-7.2), the better alternative to documenting counterintuitive behavior is to _fix_ it, as suggested below.\r\n\r\n---\r\n\r\nTo establish a _persistent_ network drive mapping on Windows (independently of PowerShell, for the current user, as `net use /persistent:yes` does), `New-PSDrive` must be invoked with the `-Persistent` switch.\r\n\r\nUnexpectedly, however, when calling from a script (a scope other than the global one), `-Scope Global` is _also_ required - even though the concept of PowerShell scopes is inapplicable to such drive mappings.\r\n\r\nTherefore, \r\n\r\n* The behavior should be changed to make `-Persistent` effective even without `-Scope Global` (but continue to allow the latter for backward compatibility).\r\n\r\n* Ideally, trying to combine `-Persist` with  `-Scope Local` or `-Scope Script` should result in a statement-terminating error, as such a combination makes no sense; the alternative is to quietly _ignore_ the `-Scope` argument in this case.\r\n\r\n```powershell\r\n# Use a UNC share that works on your system\r\n& { New-PSDrive -Persist T FileSystem \"\\\\$env:COMPUTERNAME\\C`$\" }\r\n```\r\n\r\n### Expected behavior\r\n\r\nA persistent network drive mapping `T:` should be established for the current user, as confirmed by running `net user T:`\r\n\r\n### Actual behavior\r\n\r\nNo _persistent_ drive mapping is established (that is, a PS-only drive is created, which goes out of scope when the script block exits.\r\n\r\nIn effect, `-Persist` is _quietly ignored_ in any scope other than the _global_ one (except if `-Scope Global` is added, which is logically extraneous and should therefore not be required).\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.7 on Windows\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-01-20T18:24:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can create new persist drive without Scope parameter but I can not it with Remove-PSDrive.",
      "created_at": "2021-07-12T10:13:20Z",
      "updated_at": "2021-07-12T10:13:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov, but the problem only occurs when running _outside the global scope_ - please see the updated OP (I have since been able to confirm that the problem still exists).\r\n\r\nThe separate bug that prevents _removal_ of successfully established persistent drive mappings is also mentioned in the OP, but, to be safe, here is the link again: #7829\r\n\r\n",
      "created_at": "2021-07-12T19:15:28Z",
      "updated_at": "2021-07-12T19:15:28Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "The Cmdlets and Modules Working group has investigated and discussed this issue. It is our consensus to not make any changes to New-PSDrive. The cmdlet has parameters that a script author can use to explicitly achieve the desired scoped result. PowerShell expressions should always be clear and concise. The best solution for this issue is improved documentation.",
      "created_at": "2022-01-20T18:24:05Z",
      "updated_at": "2022-01-20T18:24:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Here's my suggestion for improving the documentation:\r\n\r\n\"\r\nThis cmdlet has a glaring design flaw that we have decided not to fix (even though we could, without breaking anything):\r\n\r\nWhen you attempt to establish a _persistent_ drive mapping from a script with `-Persist`, your request will be quietly ignored - unless you inexplicably also specify an additional, conceptually unrelated argument - `-Scope Global` (persistent drive mappings are a system-wide concept unrelated to PowerShell scopes; any persistent drive mapping is invariably visible in all PowerShell scopes).\r\n\r\nAn added pitfall is that, because a _transient, scope-local PowerShell-only_ drive _is_ created in this case, you may not notice the problem until you try to use the drive in (non-descendant) other scopes, child processes, or future sessions.\r\n\"\r\n\r\n",
      "created_at": "2022-01-23T21:54:01Z",
      "updated_at": "2022-01-24T03:36:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From the WS conclusion it is not clear why don't implement \"Ideally, trying to combine -Persist with -Scope Local or -Scope Script should result in a statement-terminating error,\".",
      "created_at": "2022-01-24T03:48:11Z",
      "updated_at": "2022-01-24T03:48:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, @iSazonov, but the most important fix is to consistently make `-Persist` work  _without_ a `-Scope` argument;  combining the latter - whatever its value -  with`-Persist` never made any sense.\r\n\r\n",
      "created_at": "2022-01-24T04:42:37Z",
      "updated_at": "2022-01-24T04:43:18Z"
    }
  ],
  "created_at": "2021-07-10T19:23:29Z",
  "labels": [
    "Resolution-Won't Fix",
    "WG-Cmdlets-Management"
  ],
  "number": 15752,
  "state": "closed",
  "title": "New-PSDrive -Persist should not also require -Scope Global",
  "updated_at": "2022-01-24T04:43:18Z"
}