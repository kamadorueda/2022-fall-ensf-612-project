{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16805",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\r\n\r\nThe [**SecureString operations**](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0#securestring-operations) warning:\r\n\r\n> \u26a0 Important\r\n>\r\n> A SecureString object should never be constructed from a String, because the sensitive data is already subject to the memory persistence consequences of the immutable String class. The best way to construct a SecureString object is from a character-at-a-time unmanaged source, such as the Console.ReadKey method.\r\n\r\nAlso implies that a SecureString object should never be constructed from a ***clipboard* string**.\r\nTherefore `Read-Host -AsSecureString` should not allow to for clipboard pasting (or have at least have a switch for this*)\r\n\r\n* e.g. `-AllowClipboardPaste`, meaning that I recommend to disallow by default\r\nThis will make developers aware of this security risk.\r\n* In \"disallow\" mode, an additional `Write-Warning` to the user might be given that placing passwords on the clipboard is a potential security risk.\r\n\r\nRelated (contradicted) issue: [`#3511` Read-Host -AsSecureString failing on pasting value into it](https://github.com/PowerShell/PowerShell/issues/3511)\r\n",
  "closed_at": "2022-01-26T15:28:48Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It doesn't really have a way to read clipboard input. If you're successfully pasting into `Read-Host -AsSecureString`, then it's the terminal you're using sending the clipboard text as input.\r\n\r\nThat doesn't create a string in the same way that the `SecureString` docs are referencing. Even if it did though, PowerShell just gets the input as if they were key presses.",
      "created_at": "2022-01-26T14:24:31Z",
      "updated_at": "2022-01-26T14:24:31Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Pasting a secret from the clipboard is a requirement in many places, API keys are often impractical to type because it is assumed they will be pasted - they are also too long and random for most people to commit to memory. Azure Devops creates  API keys of >50 characters and typically they need to be copied from a web page, pasted, and saved in some secure-at-rest form (secure string fills this role nicely).  \r\nThe advice that secrets should not be in memory as clear text is all very fine and good but if something is capable of being copied to the clipboard, having the user read it in one window and type it and type it another still has a clear version in memory but adds exposure to key loggers. \r\n\r\n\r\n\r\n",
      "created_at": "2022-01-26T15:06:03Z",
      "updated_at": "2022-01-26T15:06:03Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n>It doesn't really have a way to read clipboard input. If you're successfully pasting into `Read-Host -AsSecureString`, then it's the terminal you're using sending the clipboard text as input.\r\n\r\nI wasn't aware of that, issue: [`#3511` Read-Host -AsSecureString failing on pasting value into it](https://github.com/PowerShell/PowerShell/issues/3511) gave me the (incorrect) feeling that it was controlled by the cmdlet.\r\n\r\nI have closed the issue as I understood that this can't actually be implemented",
      "created_at": "2022-01-26T15:28:48Z",
      "updated_at": "2022-01-26T15:29:10Z"
    }
  ],
  "created_at": "2022-01-26T12:31:31Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 16805,
  "state": "closed",
  "title": "`Read-Host -AsSecureString` should not allow to paste from clipboard",
  "updated_at": "2022-01-26T15:51:55Z"
}