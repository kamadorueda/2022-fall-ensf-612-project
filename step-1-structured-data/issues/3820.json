{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3820",
  "author": "mklement0",
  "body": "Both C# and PowerShell allow calling a _base_ class constructor from a given constructor.\r\n\r\nHowever, it seems that only C# currently supports calling another constructor in the _same_ class.\r\n\r\nThe ability to do so enables constructors of a given class to call each other to avoid duplication of initialization code.\r\n\r\nDesired behavior\r\n-----------------\r\n\r\n```powershell\r\nclass Foo {\r\n  [string] $bar\r\n  [int] $n\r\n  # Argument-less constructor for shared (dynamic) initialization code.\r\n  Foo() { $this.bar = 'none' }\r\n  # Already works: call the (argument-less) *base*-class constructor\r\n  Foo([int]    $n) : base() { $this.n = $n }   \r\n  # Wishful thinking: call the (argument-less) constructor in the *same* class.\r\n  Foo([double] $n) : this() { $this.n = $n }\r\n}\r\n```\r\nThat is, given the above class, calling the `Foo([double] $n)` constructor would call the parameter-less `Foo()` constructor _in the same class_ by virtue of `: this()` following the method signature:\r\n\r\n```powershell\r\n# .bar is initialized to 'None' in the argument-less same-class constructor\r\n> [Foo]::new(2.0)\r\n\r\nbar  n\r\n---- -\r\nnone 2\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.1)\r\n```\r\n",
  "closed_at": "2017-05-19T16:42:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Please clarify that you means:\r\nhttps://msdn.microsoft.com/en-us/powershell/wmf/5.0/class_baseconstructor\r\nhttps://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_classes",
      "created_at": "2017-05-19T15:07:23Z",
      "updated_at": "2017-05-19T15:07:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: See if my update clarifies it.",
      "created_at": "2017-05-19T16:23:16Z",
      "updated_at": "2017-05-19T16:23:16Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "PowerShell is not C# and it was not a goal to replicate all of C#'s capabilities.\r\n\r\nFor this specific area - we added the `: base()` syntax because some syntax is required to call a base class constructor.\r\n\r\nWe did not add `: this()` syntax because there is a reasonable alternative that is also somewhat more intuitive syntax wise - introduce a shared initialization method and just call it, e.g.:\r\n\r\n```powershell\r\nclass Foo {\r\n  [string] $bar\r\n  [int] $n\r\n  Foo() { $this.Init() }\r\n  Foo([double] $n) { $this.Init(); $this.n = $n }\r\n  hidden Init() { $this.bar = 'none' }\r\n}\r\n```",
      "created_at": "2017-05-19T16:31:20Z",
      "updated_at": "2017-05-19T16:31:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nGood to know, thanks for the rationale; I'm closing this.\r\n\r\nTwo parting thoughts:\r\n\r\n* Given that `: base()` is already supported, to me it is `: this()` that is more intuitive (and more concise), irrespective of C#.  \r\nConversely, however, given the unusual C# \"look\" of `: base()`, people familiar with C# will naturally expect `: this()` as well.\r\n\r\n* It would be great to collect such design rationales publicly somewhere - perhaps in the upcoming language spec.\r\n\r\n",
      "created_at": "2017-05-19T16:42:09Z",
      "updated_at": "2017-05-19T16:58:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\nP.S.: I've added your rationale to [this SO answer](http://stackoverflow.com/a/44035451/45375) (which I've also updated based on your recommended solution - initially, I had more clumsily used a _static_ helper method).",
      "created_at": "2017-05-19T16:53:58Z",
      "updated_at": "2017-05-19T16:53:58Z"
    }
  ],
  "created_at": "2017-05-19T13:05:00Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 3820,
  "state": "closed",
  "title": "Class-definition syntax should support calling the same class's other constructors",
  "updated_at": "2017-05-19T17:16:49Z"
}