{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7735",
  "author": "felixfbecker",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nConsider API client functions like this:\r\n\r\n```powershell\r\nfunction Get-GitHubRepository {\r\n\t[CmdletBinding()]\r\n\tparam(\r\n\t\t[Parameter(Mandatory)]\r\n\t\t[string] $Token\r\n\t)\r\n\tInvoke-GitHubApiRequest \"/repositories\" -Token $token\r\n}\r\n\r\nfunction Get-GitHubIssue {\r\n\t[CmdletBinding()]\r\n\tparam(\r\n\t\t[Parameter(Mandatory)]\r\n\t\t[string] $Repository,\r\n\t\t[Parameter(Mandatory)]\r\n\t\t[string] $Token\r\n\t)\r\n\tInvoke-GitHubApiRequest \"/issues\" -Token $token  \r\n}\r\n```\r\n\r\nAnd you want to write an argument completer like this:\r\n```powershell\r\nRegister-ArgumentCompleter -CommandName Get-GitHubIssue -ParameterName Repository -ScriptBlock {\r\n\t[CmdletBinding()]\r\n\tparam(\r\n\t\t[string]$commandName,\r\n\t\t[string]$parameterName,\r\n\t\t[string]$wordToComplete,\r\n\t\t[CommandAst]$commandAst,\r\n\t\t[Hashtable]$fakeBoundParameter\r\n\t)\r\n\r\n\tGet-GitHubRepository -Token $fakeBoundParameter['Token'] |\r\n\t\tForEach-Object { $_.Name } |\r\n        Where-Object { $_ -like \"$wordToComplete*\" } |\r\n        ForEach-Object { [CompletionResult]::new($_, $_, [CompletionResultType]::ParameterValue, $_) }\r\n}\r\n```\r\n\r\nNow, as a user, I don't want to pass `-Token` everytime I call these functions, so I add this to my profile.ps1:\r\n```powershell\r\n$PSDefaultParameterValues['*-GitHub*:Token'] = 'abc123'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nWhen invoking completion for `Get-GitHubIssue -Repository`, the `Token` parameter should be filled in `$fakeBoundParameter`, since it was set in `PSDefaultParameterValues`.\r\n\r\nActual behavior\r\n---------------\r\n\r\nPowerShell prompts for the `Token` parameter because it is not set.\r\n\r\nIt's not even possible to work around this by checking `$PSDefaultParameterValues` manually in the completer, or even `$global:PSDefaultParameterValues`. The hashmap always appears empty for the completer.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Darwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does that not require `[CmdletBinding()]` to be set in the functions? I was under the impression that that was a requirement for that to bind correctly.",
      "created_at": "2018-09-07T15:10:59Z",
      "updated_at": "2018-09-07T15:10:59Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 you are right, the docs say that:\r\n\r\n> The <CmdletName> must be the name of a cmdlet or the name of an advanced function that uses the CmdletBinding attribute. You cannot use $PSDefaultParameterValues to specify default values for scripts or simple functions.\r\n\r\nHowever, even if all the functions use `CmdletBinding()`, the parameter does not get filled.",
      "created_at": "2018-09-07T15:18:15Z",
      "updated_at": "2018-09-07T15:18:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Gotcha, just wanted to make sure. In that case yes, this should probably be the way it works. :D",
      "created_at": "2018-09-07T15:20:21Z",
      "updated_at": "2018-09-07T15:20:21Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@felixfbecker\r\nIn general, you could create a so called proxy function to add your own defaults to functions:\r\nhttps://blogs.technet.microsoft.com/heyscriptingguy/2011/03/01/proxy-functions-spice-up-your-powershell-core-cmdlets/",
      "created_at": "2018-09-07T17:03:28Z",
      "updated_at": "2018-09-07T17:03:54Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister that doesn't sound user friendly. I have tons of cmdlets that interact with APIs, where in my profile.ps1 I set\r\n```powershell\r\n$PSDefaultParameterValues['*Foo*:Token'] = ('encryptedkey' | ConvertTo-SecureString)\r\n```\r\nThis is an elegant way of configuring API tokens for all the cmdlets that need it at once and in an manually-overridable way. And it works great, except that they are not applied to argument completers, which seems like a bug to me.\r\n\r\nHaving to create a proxy function for each function of those modules on the other hand sounds awful.\r\n\r\nWhy can't PowerShell apply DefaultParameterValues to argument completers?",
      "created_at": "2019-02-25T12:39:23Z",
      "updated_at": "2019-02-25T12:39:23Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Workaround: Calling this in every argument completer\r\n\r\n```powershell\r\nfunction Add-DefaultParamterValues([string] $Command, [hashtable] $Parameters) {\r\n    foreach ($entry in $global:PSDefaultParameterValues.GetEnumerator()) {\r\n        $commandPattern, $parameter = $entry.Key.Split(':')\r\n        if ($Command -like $commandPattern) {\r\n            $Parameters.Add($parameter, $entry.Value)\r\n        }\r\n    }\r\n}\r\n```",
      "created_at": "2019-02-25T13:07:23Z",
      "updated_at": "2019-02-25T13:07:23Z"
    }
  ],
  "created_at": "2018-09-07T14:59:36Z",
  "number": 7735,
  "state": "open",
  "title": "DefaultParameterValues not assigned to fakeBoundParameter in ArgumentCompleter",
  "updated_at": "2019-02-25T13:07:23Z"
}