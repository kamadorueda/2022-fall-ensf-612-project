{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17784",
  "author": "Molkree",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\nReenable compound assignment preference in .editorconfig.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\nAll violations of the rule should be fixed by now.\r\nFixes #17631 \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-07-31T12:57:50Z",
  "comments": [
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, I already see some missed cases. I wonder what is different between the CI and my local environment?",
      "created_at": "2022-07-27T15:19:49Z",
      "updated_at": "2022-07-27T15:19:49Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "Hm, one of them looks like a false positive. In `/src/System.Management.Automation/singleshell/config/MshSnapinInfo.cs(1287,25)`:\r\n\r\n```c#\r\n                        if (s_defaultMshSnapins == null)\r\n                        {\r\n                            s_defaultMshSnapins = new List<DefaultPSSnapInInformation>()\r\n                            {\r\n#if !UNIX\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Diagnostics\", \"Microsoft.PowerShell.Commands.Diagnostics\", null,\r\n                                    \"GetEventResources,Description\", \"GetEventResources,Vendor\"),\r\n#endif\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Host\", \"Microsoft.PowerShell.ConsoleHost\", null,\r\n                                    \"HostMshSnapInResources,Description\", \"HostMshSnapInResources,Vendor\"),\r\n\r\n                                s_coreSnapin,\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Utility\", \"Microsoft.PowerShell.Commands.Utility\", null,\r\n                                    \"UtilityMshSnapInResources,Description\", \"UtilityMshSnapInResources,Vendor\"),\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Management\", \"Microsoft.PowerShell.Commands.Management\", null,\r\n                                    \"ManagementMshSnapInResources,Description\", \"ManagementMshSnapInResources,Vendor\"),\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Security\", \"Microsoft.PowerShell.Security\", null,\r\n                                    \"SecurityMshSnapInResources,Description\", \"SecurityMshSnapInResources,Vendor\")\r\n                            };\r\n\r\n#if !UNIX\r\n                            if (!Utils.IsWinPEHost())\r\n                            {\r\n                                s_defaultMshSnapins.Add(new DefaultPSSnapInInformation(\"Microsoft.WSMan.Management\", \"Microsoft.WSMan.Management\", null,\r\n                                    \"WsManResources,Description\", \"WsManResources,Vendor\"));\r\n                            }\r\n#endif\r\n                        }\r\n```\r\n\r\nIt's not just an assignment inside the outer if, so analyzer shouldn't trigger here, what do you think? ",
      "created_at": "2022-07-27T15:49:25Z",
      "updated_at": "2022-07-27T15:49:25Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "> I wonder what is different between the CI and my local environment?\r\n\r\nThe system is different, CI errored on Linux and macOS and I use Windows. 3 cases were inside `#if UNIX` hence why they didn't trigger for me.\r\n\r\n4th one has `#if !UNIX` clause inside hence why it doesn't trigger on my local machine. But in CI Analyzer thinks there's no extra code inside and suggests this change. I'm not sure if it is correct behaviour.",
      "created_at": "2022-07-27T16:58:18Z",
      "updated_at": "2022-07-27T16:58:18Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "> It's not just an assignment inside the outer if, so analyzer shouldn't trigger here, what do you think?\r\n\r\nWe can rewrite the code block into this and it should please Analyzer on both platforms:\r\n```c#\r\n#if UNIX\r\n                        s_defaultMshSnapins ??= new List<DefaultPSSnapInInformation>()\r\n                        {\r\n                            new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Host\", \"Microsoft.PowerShell.ConsoleHost\", null,\r\n                                \"HostMshSnapInResources,Description\", \"HostMshSnapInResources,Vendor\"),\r\n\r\n                            s_coreSnapin,\r\n\r\n                            new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Utility\", \"Microsoft.PowerShell.Commands.Utility\", null,\r\n                                \"UtilityMshSnapInResources,Description\", \"UtilityMshSnapInResources,Vendor\"),\r\n\r\n                            new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Management\", \"Microsoft.PowerShell.Commands.Management\", null,\r\n                                \"ManagementMshSnapInResources,Description\", \"ManagementMshSnapInResources,Vendor\"),\r\n\r\n                            new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Security\", \"Microsoft.PowerShell.Security\", null,\r\n                                \"SecurityMshSnapInResources,Description\", \"SecurityMshSnapInResources,Vendor\")\r\n                        };\r\n#else\r\n                        if (s_defaultMshSnapins == null)\r\n                        {\r\n                            s_defaultMshSnapins = new List<DefaultPSSnapInInformation>()\r\n                            {\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Diagnostics\", \"Microsoft.PowerShell.Commands.Diagnostics\", null,\r\n                                    \"GetEventResources,Description\", \"GetEventResources,Vendor\"),\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Host\", \"Microsoft.PowerShell.ConsoleHost\", null,\r\n                                    \"HostMshSnapInResources,Description\", \"HostMshSnapInResources,Vendor\"),\r\n\r\n                                s_coreSnapin,\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Utility\", \"Microsoft.PowerShell.Commands.Utility\", null,\r\n                                    \"UtilityMshSnapInResources,Description\", \"UtilityMshSnapInResources,Vendor\"),\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Management\", \"Microsoft.PowerShell.Commands.Management\", null,\r\n                                    \"ManagementMshSnapInResources,Description\", \"ManagementMshSnapInResources,Vendor\"),\r\n\r\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Security\", \"Microsoft.PowerShell.Security\", null,\r\n                                    \"SecurityMshSnapInResources,Description\", \"SecurityMshSnapInResources,Vendor\")\r\n                            };\r\n\r\n                            if (!Utils.IsWinPEHost())\r\n                            {\r\n                                s_defaultMshSnapins.Add(new DefaultPSSnapInInformation(\"Microsoft.WSMan.Management\", \"Microsoft.WSMan.Management\", null,\r\n                                    \"WsManResources,Description\", \"WsManResources,Vendor\"));\r\n                            }\r\n                        }\r\n#endif\r\n```\r\n\r\nOr we can ignore this rule locally.\r\n\r\nI'll let the maintainers decide.",
      "created_at": "2022-07-27T17:14:02Z",
      "updated_at": "2022-07-27T17:14:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Hm, one of them looks like a false positive. In `/src/System.Management.Automation/singleshell/config/MshSnapinInfo.cs(1287,25)`:\r\n\r\nPlease suppress locally.",
      "created_at": "2022-07-28T05:51:40Z",
      "updated_at": "2022-07-28T05:51:40Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "> Please suppress locally.\r\n\r\n@iSazonov, done",
      "created_at": "2022-07-28T15:30:30Z",
      "updated_at": "2022-07-28T15:30:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Molkree I guess CIs fail because we need to fix compound assignment in test code (weblistener).",
      "created_at": "2022-07-29T04:37:05Z",
      "updated_at": "2022-07-29T04:37:05Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I am stumped, from failing tests I can only see that the `WebListener did not start before the timeout was reached.`, with no pointers as to why. Any help here?",
      "created_at": "2022-07-29T11:02:43Z",
      "updated_at": "2022-07-29T11:02:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Molkree Try compile `test\\tools\\WebListener\\` - I guess there are compound assignments we should fix.",
      "created_at": "2022-07-29T11:56:09Z",
      "updated_at": "2022-07-29T11:56:09Z"
    },
    {
      "author": "Molkree",
      "author_association": "CONTRIBUTOR",
      "body": "> Try compile `test\\tools\\WebListener\\`\r\n\r\n@iSazonov, thank you!",
      "created_at": "2022-07-29T12:37:00Z",
      "updated_at": "2022-07-29T12:37:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.7` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-11T23:59:08Z",
      "updated_at": "2022-08-11T23:59:08Z"
    }
  ],
  "created_at": "2022-07-27T15:03:40Z",
  "number": 17784,
  "state": "closed",
  "title": "Reenable compound assignment preference",
  "updated_at": "2022-08-11T23:59:08Z"
}