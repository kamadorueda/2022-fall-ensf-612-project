{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5661",
  "author": "LethiferousMoose",
  "body": "Steps to reproduce\r\n------------------\r\n1) Create a module file (*.psm1) and add the following code block.\r\n2) Attempt to call Test-ValidateSet -Item 'Hello' from PowerShell\r\n\r\n```powershell\r\nclass ValidateSetTest : System.Management.Automation.IValidateSetValuesGenerator\r\n{\r\n    [string[]] GetValidValues()\r\n    {\r\n        return 'Hello', 'World'\r\n    }\r\n}\r\n\r\nfunction Test-ValidateSet\r\n{\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Mandatory = $true)]\r\n        [ValidateSet([ValidateSetTest])]\r\n        [string[]]\r\n        $Item\r\n    )\r\n    $Item\r\n}\r\n```\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nHello\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nUnable to find type [ValidateSetTest].\r\nAt C:\\PSTest\\PSTest.psm1:1364 char:9\r\n+         [ValidateSet([ValidateSetTest])]\r\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: ([ValidateSet([ValidateSetTest])]:AttributeAst) [], RuntimeException\r\n+ FullyQualifiedErrorId : TypeNotFound\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis happens because the defined class is only known to the module. In order for this feature to work currently \"Using Module \\<ModuleName>\" must be called from PowerShell to load the class definitions or a second option is to define a *.ps1 file that contains your class definitions, then in the *.psd1 file, add that script path to the ScriptsToProcess attribute list.\r\n\r\nThe advantages of modifying the manifest file is that it does not require anything from the end user to get the module to work, however since the class definition lives in an external file, that also means it cannot reference of the internal workings of the module. On the flip side, \"using module\" allows for the class to remain within the module, but also mean a script must be written or end user action must be taken to bring the class definition into the current session. Additionally this will load any internal class definitions inside the module into their session as well.\r\n\r\nWithout doing something around these lines, this new feature #3744 cannot be used in modules and only works if you dot-source a script file. As this feature was added to get around having to create dynamic parameters to simply add dynamic ValidateSet values, I feel like modules were the intended use case for this feature as they typically are responsible for exposing multiple functions to the end user whereas scripts as generally just called as a script.\r\n\r\nAlso note that when using the workaround solutions mentioned above, it also exposes those class definitions to the end users session, something that they really should not care about.",
  "closed_at": "2018-01-09T09:43:55Z",
  "comments": [
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Do you think this issue needs to be looked at prior to GA?",
      "created_at": "2017-12-12T18:32:18Z",
      "updated_at": "2017-12-12T18:32:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LethiferousMoose I don't think this blocks 6.0.0 release as it won't impact most users",
      "created_at": "2017-12-12T20:16:34Z",
      "updated_at": "2017-12-12T20:16:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You should update the repro with specific details so nobody has to guess at what you are trying.\r\n\r\nIt's possible this is by design and there is a straightforward way to get it working.",
      "created_at": "2017-12-15T19:47:22Z",
      "updated_at": "2017-12-15T19:47:22Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I can repro this with the provided code. https://github.com/markekraus/PowerShellPowerShellRepro5661/tree/6292b92926128f2c6854e4dc4df04c0c870a7f00",
      "created_at": "2017-12-15T20:12:25Z",
      "updated_at": "2017-12-15T20:12:25Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@lzybkr Updated description and referenced the original issue you created that lead the eventual implementation of supporting dynamically created values in the ValidateSetAttribute.\r\n\r\nI'll leave it up to the development team to determine whether this is a viable solution, if another better solution exists, or if something else should be done as a defect fix.",
      "created_at": "2017-12-15T20:17:08Z",
      "updated_at": "2017-12-15T20:28:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Yeah, that's a bug and I found the problem, PR submitted (but I'll ask someone else to add tests.)",
      "created_at": "2017-12-15T21:28:26Z",
      "updated_at": "2017-12-15T21:28:26Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@lzybkr I was reading over the PR comments on #3784, do you know if anything more came out of the discussions around accessing the context?",
      "created_at": "2017-12-15T21:59:10Z",
      "updated_at": "2017-12-15T21:59:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LethiferousMoose Thanks for your report! We started with the implementation for C# and later added for scripts. As far as the modules and _contexts_ are concerned, we have not considered this until we receive feedbacks like your one, especially since we have a number of problems with the classes and modules that we plan to address in 6.1.0 phase as I understand.",
      "created_at": "2017-12-16T14:48:40Z",
      "updated_at": "2017-12-16T14:48:40Z"
    },
    {
      "author": "danstur",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Is there any way of sharing IValidateSetValuesGenerator between multiple files? Currently it seems like we're forced to duplicate the implementation (or at least define one generator and then forward to a shared implementation function) of generators in every file we want to use them. \r\n\r\nStill much better than previously, but I'm wondering if there's a way around that too.",
      "created_at": "2021-08-27T09:11:08Z",
      "updated_at": "2021-08-27T09:11:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@danstur Please open new issue and share more information with simple repro for your scenario.",
      "created_at": "2021-08-27T18:05:39Z",
      "updated_at": "2021-08-27T18:05:58Z"
    }
  ],
  "created_at": "2017-12-09T04:13:24Z",
  "labels": [
    "Issue-Bug",
    "WG-Language",
    "Resolution-Fixed"
  ],
  "number": 5661,
  "state": "closed",
  "title": "Getting error \"Unable to find type\" when using IValidateSetValuesGenerator in a PowerShell module",
  "updated_at": "2021-08-27T18:05:58Z"
}