{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16186",
  "author": "moh-hassan",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI tried to run the next script using WriteLine method in v7.4:\r\n```\r\nFunction Test {\r\n       $i = 3\r\n       $j = 0\r\n    [Console]::WriteLine(\"j={0} i={1}\", $j,$i)\r\n    }\r\nTest\r\n```\t \r\n \r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nj=0 i=3\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nError Exception is raised:\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nMethodException:\r\nLine |\r\n   4 |      [Console]::WriteLine(\"j={0} i={2}\", $j,$i)\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Multiple ambiguous overloads found for \"WriteLine\" and the argument count: \"3\".\r\n```\r\n\r\n\r\nThe workaround solution to fix this issue is using splat parameters as :\r\n```\r\n $args= @($j,$i)\r\n [Console]::WriteLine(\"j={0} i={1}\",$args)  # working fine\r\n```\t\r\nargs in c# is params type.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\7> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-10-06T21:00:36Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Try to use string type for formatting\r\n```\r\nFunction Test {\r\n       $i = 3\r\n       $j = 0\r\n    [Console]::WriteLine(\"j={0} i={1}\", \"$j\",\"$i\")\r\n    }\r\nTest\r\n```\r\nor\r\n```\r\nFunction Test {\r\n       $i = \"3\"\r\n       $j = \"0\"\r\n    [Console]::WriteLine(\"j={0} i={1}\", $j,$i)\r\n    }\r\nTest\r\n```\r\nOr get substring by index\r\n```\r\nFunction Test {\r\n    $i = 0\r\n    $j = 3\r\n    [Console]::WriteLine([char[]]'string', $i, $j)\r\n    }\r\nTest\r\n```",
      "created_at": "2021-10-01T23:41:04Z",
      "updated_at": "2021-10-01T23:51:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw for information. I think we could better pick up a method by signature.",
      "created_at": "2021-10-02T12:56:49Z",
      "updated_at": "2021-10-02T12:56:49Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": "@237dmitry, I think that the provided solution is another workaround ones  by converting data type to string. \r\nIt's supposed that  Powershell  use .Net methods as used in c#. \r\nIt's strange for powershell to fire this exception.\r\nhave a look to these cases:\r\n```\r\n1- [Console]::WriteLine(\"{0} {1}\",10, [long]20)  #working, just cast one parameter to long\r\n2- [Console]::WriteLine(\"{0} {1}\",10, 20.0)  #working, just convert one parameter to decimal !\r\n3- [Console]::WriteLine(\"{0} {1}\",10, [int]20)  #NOT WORKING !!! see working case 1\r\n4- [Console]::WriteLine(\"{0} {1}\",10, 20)  #NOT WORKING !!! see working case 2\r\n```\r\nEven this is working:\r\n```\r\n[string]::Format(\"i={0} j={1}\",10,20)  #working\r\n```",
      "created_at": "2021-10-02T14:02:56Z",
      "updated_at": "2021-10-02T14:07:37Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "My understanding as why `[Console]::WriteLine(\"{0} {1}\",10, 20)` doesn't work is because it cannot differentiate between these 2 choices:\r\n\r\n```\r\nstatic void WriteLine(string format, System.Object arg0, System.Object arg1)\r\nstatic void WriteLine(char[] buffer, int index, int count)\r\n```\r\n\r\nWhen you cast any of the 2nd values to something that isn't an int it's able to determine the first option is correct but if you have a string (automatically casts to `char[]`) and 2 integers both overloads can technically work with PowerShell.\r\n\r\nI'm not saying which behaviour is correct as I feel there's no real correct answer personally; people will have different opinions.",
      "created_at": "2021-10-03T04:12:58Z",
      "updated_at": "2021-10-03T04:12:58Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": "@jborean93, I agree partially with you :), there is other one should be taken into account with `params object[]`\r\nThe signaure of  [Console.WriteLine](https://referencesource.microsoft.com/#mscorlib/system/console.cs,214d8f5050887fc0) in .Net(core) framework is:\r\n```\r\n//ideal selection method for all types including int and undefined numbers of parameters\r\npublic static void WriteLine(String format, params Object[] arg)    //why ignored by powershell\r\npublic static void WriteLine(String format, Object arg0, Object arg1)\r\n  //other overload methods         \r\n```\r\nThe next is working fine by casting int to object:\r\n```\r\n[Console]::WriteLine(\"{0} {1}\",[object]10,  [object]20)   //working fine\r\n```\r\nSo, signature with `params object[]`  may  be  the ideal for such a method. It can be the last choice before firing the Exception.\r\n\r\n\r\n \r\n\r\n\r\n",
      "created_at": "2021-10-03T14:32:05Z",
      "updated_at": "2021-10-03T15:02:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "From the specified arguments, there is no reason for PowerShell to think `(String format, params Object[] arg)` would be the best \r\nmatch. With `[Console]::WriteLine(\"{0} {1} {2} {3}\",10, 20, 30, 40)`, powershell will choose `(String format, params Object[] arg)` as the best match.\r\n\r\nThe main ambiguity in the case of `[Console]::WriteLine(\"{0} {1}\",10, 20)` is that the first argument is a string, which exactly matches `(String format, ...` but could be converted to `char[]`, while the rest 2 arguments are of `[int]` , which exactly match `int index, int count` but could be converted to `object`. There is no strong argument to say which overload is the best fit in this case -- both have partial matching parameter types -- and thus the resolution failed. I believe this is by design.",
      "created_at": "2021-10-04T17:18:06Z",
      "updated_at": "2021-10-04T17:18:06Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": "@daxian-dbw \r\nAlthough this code is running without issues in c# (compiler/or scripter), It's supposed that PowerShell  run .Net(Core) methods in the same way as c# (Except there is a document shows the  limitation or consideration to run .Net(Core) methods  in PowerShell)\r\n\r\nWhat is the official way to run such a code without issue ?",
      "created_at": "2021-10-05T13:25:15Z",
      "updated_at": "2021-10-05T13:25:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The supported way for clarifying overloads is by casting.  Even if no cast actually happens, the compiler and method binder take it into account as intent when selecting the best candidate.\r\n\r\nSo for this I'd say probably:\r\n\r\n```powershell\r\n[Console]::WriteLine([string]'{0} {1}', 10, 30)\r\n```\r\n\r\nIs the easiest way to clarify intent.\r\n\r\n> It's supposed that PowerShell run .Net(Core) methods in the same way as c#\r\n\r\nPowerShell gives you the ability to interop with CLR methods but I'm not aware of any documentation that claims that it will be the same experience as C#.  There are many ways where it differs significantly (dynamic binding, type conversions are done for you, etc).",
      "created_at": "2021-10-05T13:32:58Z",
      "updated_at": "2021-10-05T13:32:58Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\nIt seems that the direct cast of string as string is the only way to avoid the issue as you showed.\r\nThis code, although I show the intent that $format is string, is firing an Exception:\r\n```\r\n[string] $format='{0} {1}' \r\n[Console]::WriteLine($format,10,20); #Fire Exception \r\n```\r\n",
      "created_at": "2021-10-05T13:59:47Z",
      "updated_at": "2021-10-05T13:59:47Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": " The next is `IL` generated from `LINQPad`, shows that `Console.WriteLine(String, Object, Object)` is selected\r\n  \r\n```\r\nIL_0000\tnop\t\r\nIL_0001\tldstr\t\"{0} {1}\"\r\nIL_0006\tldc.i4.s\t0A  // 10\r\nIL_0008\tbox\tInt32\r\nIL_000D\tldc.i4.s\t14  // 20\r\nIL_000F\tbox\tInt32\r\nIL_0014\tcall\tConsole.WriteLine\u2009(String, Object, Object)\r\nIL_0019\tnop\t\r\nIL_001A\tret\t\r\n```",
      "created_at": "2021-10-05T14:36:05Z",
      "updated_at": "2021-10-05T14:36:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience It seems that the direct cast of string as string is the only way to avoid the issue as you showed. This code, although I show the intent that $format is string, is firing an Exception:\r\n> \r\n> ```\r\n> [string] $format='{0} {1}' \r\n> [Console]::WriteLine($format,10,20); #Fire Exception \r\n> ```\r\n\r\nCorrect, it's the explicit cast *at the call site* that signals intent to the method binder.\r\n\r\n> The next is `IL` generated from `LINQPad`, shows that `Console.WriteLine(String, Object, Object)` is selected\r\n\r\nYeah, C# is statically bound (overload is selected at compile time rather than runtime like PowerShell) and has much more strict type conversion rules.  PowerShell lets you implicitly convert from `string` and `char[]` where C# requires you to call `ToCharArray()`.\r\n\r\nFrom the perspective of PowerShell, `string, object, object` is just as likely as `char[], int, int` due to conversion rules.  In C#, the former is the only possibility.",
      "created_at": "2021-10-05T14:45:05Z",
      "updated_at": "2021-10-05T14:45:05Z"
    },
    {
      "author": "moh-hassan",
      "author_association": "NONE",
      "body": "Thanks @SeeminglyScience  for clarification.\r\nAs you said, explicit cast at the call site  is the solution for such issues even for string arguments.",
      "created_at": "2021-10-05T17:47:15Z",
      "updated_at": "2021-10-05T17:47:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-10-06T21:00:35Z",
      "updated_at": "2021-10-06T21:00:35Z"
    }
  ],
  "created_at": "2021-10-01T22:44:59Z",
  "labels": [
    "WG-Engine",
    "Resolution-By Design"
  ],
  "number": 16186,
  "state": "closed",
  "title": "[Console]::WriteLine raise an Exception: 'Multiple ambiguous overloads found for \"WriteLine\"...'",
  "updated_at": "2021-10-06T21:00:36Z"
}