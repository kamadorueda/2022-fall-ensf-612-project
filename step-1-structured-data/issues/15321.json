{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15321",
  "author": "iRon7",
  "body": "In addition to the other requests to more easily iterate through the _index_ of an object list:\r\n- [`#14724` implement indexer in loop](https://github.com/PowerShell/PowerShell/issues/14724)\r\n- [`#13772` Automatic variable for the pipeline index](https://github.com/PowerShell/PowerShell/issues/13772)\r\n\r\nThere are currently common ways to iterate through the _index_ of an object list:\r\n\r\n```PowerShell\r\n$List = @(\r\n    [pscustomobject]@{Name = 'One';   Value = 1}\r\n    [pscustomobject]@{Name = 'Two';   Value = 2}\r\n    [pscustomobject]@{Name = 'Three'; Value = 3}\r\n)\r\n```\r\n```PowerShell\r\nFor ($i = 0; $i -lt $List.Count; $i++) {\r\n    Write-Host $List[$i].Name '=' $List[$i].Value\r\n}\r\n```\r\n```PowerShell\r\n0..($List.Count - 1) |ForEach-Object {\r\n    Write-Host $List[$_].Name '=' $List[$_].Value\r\n}\r\n```\r\n\r\nKnowing that the `For` command generates an error when no parenthesis are used:\r\n\r\n> ```PowerShell\r\n> PS C:\\> For $Test\r\n> ParserError:\r\n> Line |\r\n>    1 |  For $Test\r\n>      |     ~\r\n>      | Missing opening '(' after keyword 'for'.\r\n> ```\r\n\r\nIt might might just generate a (new) index if a object (list) is supplied.\r\n\r\n**Wishful thinking:**\r\n```PowerShell\r\nFor $List {\r\n    Write-Host $List[$_].Name '=' $List[$_].Value\r\n}\r\n```\r\nOr using the pipeline:\r\n```PowerShell\r\n$List |For {\r\n    Write-Host $List[$_].Name '=' $List[$_].Value\r\n}\r\n```\r\n\r\nCaveat: As with the `ForEach-Object`, it might be required to force the input to an array: `@($List) |For { ...`",
  "closed_at": "2021-05-03T22:00:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> ```powershell\r\n> $List |For {\r\n>     Write-Host $List[$_].Name '=' $List[$_].Value\r\n> }\r\n> ```\r\n\r\nFollow does not work for you?\r\n\r\n```powershell\r\n$List |ForEach {\r\n     Write-Host $_.Name '=' $_.Value\r\n }\r\n```",
      "created_at": "2021-04-30T03:53:31Z",
      "updated_at": "2021-04-30T03:53:31Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nI think that I oversimplified the examples in the purpose... \ud83e\udd74\r\n\r\n> Follow does not work for you?\r\n\r\nYes, that works with the examples but not if I want also need to use the index for some thing else, like:\r\n\r\n```PowerShell\r\n$Dutch = @(\r\n    [pscustomobject]@{Name = 'Een';  Value = 1}\r\n    [pscustomobject]@{Name = 'Twee'; Value = 2}\r\n    [pscustomobject]@{Name = 'Drie'; Value = 3}\r\n)\r\n\r\nFor ($i = 0; $i -lt $List.Count; $i++) { # purposed syntax: For $List {\r\n    [PSCustomObject]@{\r\n        Number  = $List[$i].Value\r\n        English = $List[$i].Name\r\n        Dutch   = $Dutch[$i].Name\r\n    }\r\n}\r\n```\r\n\r\nNote that the purpose is not more than an idea for a simantic sugar for iterating thought the *index* of a object list.",
      "created_at": "2021-04-30T07:25:27Z",
      "updated_at": "2021-04-30T07:49:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iRon7, it seem to me that your expanded example - processing the corresponding elements from two (or more) collections - is more elegantly handled by the proposal in #14732; e.g.:\r\n\r\n```powershell\r\n# Wishful thinking.\r\nforeach ($en, $nl in $List, $Dutch) {\r\n    [PSCustomObject] @{\r\n        Number  = $en.Value\r\n        English = $en.Name\r\n        Dutch   = $nl.Name\r\n    }\r\n}\r\n```\r\n\r\nAnd since #14732 can be combined with #14724, you could easily add an index with\r\n`foreach ($en, $nl in $List, $Dutch; $i) ...`\r\n",
      "created_at": "2021-04-30T17:21:29Z",
      "updated_at": "2021-04-30T17:21:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iRon7 What you are proposing here is more of a command (the pipeline behavior `$list | For`). You can implement one by wrapping the existing `for` loop, like this extremely simplified example:\r\n```\r\nfunction MyFor\r\n{\r\n    param($list, $sb)\r\n    for ($i = 0; $i -lt $list.Count; $i++) { & $sb } }\r\n}\r\n```\r\nThen I got\r\n```\r\nPS:103> MyFor $List {\r\n>>     [PSCustomObject]@{\r\n>>         Number  = $List[$i].Value\r\n>>         English = $List[$i].Name\r\n>>         Dutch   = $Dutch[$i].Name\r\n>>     }\r\n>> }\r\n\r\nNumber English Dutch\r\n------ ------- -----\r\n     1 One     Een\r\n     2 Two     Twee\r\n     3 Three   Drie\r\n```\r\nThe proposal in  #14732 is more general purpose to discuss, so I will close this one.",
      "created_at": "2021-05-03T22:00:51Z",
      "updated_at": "2021-05-03T22:00:51Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\n>  is more elegantly handled by the proposal in #14732\r\n\r\nYou have a good point here. Yet, if these proposal(s) do not make it, I think it could be alternative.\r\nBesides, I don't think that the \"lengthy\" common `For ($i = 0; $i -lt $List.Count; $i++)` or `0..($List.Count - 1) |ForEach-Object` statements will be completely disappear from the scene by any or all of these proposals.\r\n\r\n@daxian-dbw \r\n\r\n> You can implement one by wrapping the existing for loop, like this extremely simplified example\r\n\r\nAgree (thanks for adding the prototype \ud83d\ude00).\r\nThe question is: whether this is to the scripter to add or could be a part of native PowerShell?\r\nAs a comparison: years ago, PowerShell had no easy syntax for an inline if, probably because it could also be done with lengthy statement or an *extremely simplified [`IIf` function](https://stackoverflow.com/a/25682508/1701026)*. Today, we have an  `Immediate if`/`ternary If` syntax included in PowerShell.\r\n",
      "created_at": "2021-05-04T07:14:31Z",
      "updated_at": "2021-05-04T07:25:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iRon7 when it comes to a new command proposal, the guidance we have is that the proposed command could be shipped as a module by the community member. Once the use of that command is proven to be popular, we can start the conversation about whether it should be included in powershell by default.",
      "created_at": "2021-05-06T18:16:57Z",
      "updated_at": "2021-05-06T18:16:57Z"
    }
  ],
  "created_at": "2021-04-29T08:38:26Z",
  "number": 15321,
  "state": "closed",
  "title": "Easily index a list with `for` command",
  "updated_at": "2021-05-06T18:16:57Z"
}