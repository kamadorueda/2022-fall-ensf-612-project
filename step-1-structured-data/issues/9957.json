{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9957",
  "author": "SteveL-MSFT",
  "body": "Based on @PowerShell/powershell-committee decision at https://github.com/PowerShell/PowerShell-RFC/pull/133#issuecomment-467192489, we should:\r\n\r\n- PSCore6 currently will create $env:PSModulePath from config.json file, a new setting EnvVarToAppendToPSModulePath with value PSModulePath (this means the $PSHOME/Modules and user paths are first, then appends the $env:PSModulePath from the system)\r\n- Some logic needs to be retained so child PSCore6 trims any duplicates in $env:PSModulePath\r\n- When pwsh is started, we preserve the original $env:PSModulePath. Have whitelist to special case powershell.exe and powershell_ise.exe so when they are started within pwsh, they receive the original $env:PSModulePath. In all other cases, they inherit the current $env:PSModulePath.\r\n- Since modules are auto-discovered by newest version and not by order of the path, there is a scenario where starting different versions of pwsh from pwsh may result in unexpected behavior.",
  "closed_at": "2019-11-16T01:29:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd can grab this in near future. (Although there are already a lot of my PRs without review)",
      "created_at": "2019-06-20T04:06:37Z",
      "updated_at": "2019-06-20T04:06:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I'll ask the team to spend more time on PR reviews to get the number back down.  Thanks for your continued contributions!",
      "created_at": "2019-06-20T15:24:47Z",
      "updated_at": "2019-06-20T15:24:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please clarify about:\r\n> PSCore6 currently will create $env:PSModulePath from config.json file, a new setting EnvVarToAppendToPSModulePath with value PSModulePath (this means the $PSHOME/Modules and user paths are first, then appends the $env:PSModulePath from the system)\r\n\r\nIt seems already implemented by @daxian-dbw \r\nhttps://github.com/PowerShell/PowerShell/blob/e3d81313908903772c901a25e4f4a206b14c5112/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L1348-L1352\r\n\r\nI guess that we need only replace writing to the pwsh process $env:PSModulePath with saving the module paths in global static variable s_psModulePath.",
      "created_at": "2019-06-25T15:03:45Z",
      "updated_at": "2019-06-25T15:03:45Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "I get bit by this one often when calling powershell inside pwsh, because it ends up loading the \"newer\" microsoft.powershell.utility and for whatever reason import-powershelldatafile doesn't materialize, so I get lots of issues about import-powershelldatafile command not found.\r\n\r\nA simple try/catch on a not found to force import the PS5.1 version resolves the issue, but it'd be nice not to have to do it in the first place :)",
      "created_at": "2019-10-17T18:12:55Z",
      "updated_at": "2019-10-17T18:12:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JustinGrote You could try artifact from #10300 and feedback how it works for you.",
      "created_at": "2019-10-18T04:15:04Z",
      "updated_at": "2019-10-18T04:15:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Since modules are auto-discovered by newest version and not by order of the path, there is a scenario where starting different versions of pwsh from pwsh may result in unexpected behavior.\r\n\r\nIs this true? What's the recommendation being made here?",
      "created_at": "2019-10-24T21:23:28Z",
      "updated_at": "2019-10-24T21:23:28Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "Here's a lightweight fix you can put at the beginning of your script/profile or after any time you may have loaded some core libraries, it only does anything if this condition is met.\r\n\r\nThe ideal fix would be that Windows Powershell Import-Module wouldn't load modules that have PSCompatibleEdition as 'Core' only, but we wouldn't be able to rely on that downstream functionality being available.\r\n\r\nAnother option would be to proxy the import-module command and add the logic to filter out the core-only items until #11057 is merged.\r\n\r\n``` powershell\r\nfunction Reset-WinPSModules {\r\n    if ($PSEdition -eq 'Desktop') {\r\n        Get-Module | Where-Object CompatiblePSEditions -eq 'Core' | foreach {\r\n            $moduleToImport = Get-Module $PSItem.Name -ListAvailable | Where-Object CompatiblePSEditions -match 'Desktop' | Sort-Object Version -Descending | Select-Object -First 1\r\n            if ($moduleToImport) {\r\n                write-verbose \"Reloading $($PSItem.Name) with Windows Powershell-compatible version $($moduleToImport.version)\"\r\n                Remove-Module $PSItem\r\n                Import-Module $moduleToImport -Force -Verbose:$false\r\n            } else {\r\n                throw \"A core-only version of the $($PSItem.Name) module was detected as loaded and no Windows Powershell Desktop-compatible equivalent was found in the PSModulePath. Please copy a Desktop-Compatible version of the module to your PSModulePath.\"\r\n            }\r\n        }\r\n    }\r\n}\r\nReset-WinPSModules\r\n```",
      "created_at": "2019-11-15T23:06:56Z",
      "updated_at": "2019-11-15T23:06:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11057, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:36:07Z",
      "updated_at": "2019-11-21T22:36:07Z"
    }
  ],
  "created_at": "2019-06-19T23:08:58Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 9957,
  "state": "closed",
  "title": "Fix `$env:PSModulePath` for starting powershell within pwsh and vice versa",
  "updated_at": "2019-11-21T22:36:07Z"
}