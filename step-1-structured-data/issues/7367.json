{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7367",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nI have two modules, MainMod and HelperMod. HelperMod is a general utility library, and is a NestedModule of MainMod, which MainMod uses internally, but MainMod does not export HelperMod's functions.\r\n\r\nBecause HelperMod is a general utility library, there may be other things that use it. The user may even have it loaded at the global scope.\r\n\r\nIf I have HelperMod loaded, and then `Import-Module -Force MainMod`, it wipes out HelperMod and I can no longer use it at the global scope (until it gets imported again).\r\n\r\n```powershell\r\n\r\n$mainModPsd1Content = @'\r\n@{\r\nRootModule = 'MainMod.psm1'\r\nModuleVersion = '1.0.0.0'\r\n\r\n# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess\r\nNestedModules = @( 'HelperMod' )\r\n\r\n# IMPORTANT:\r\n#\r\n# Note that we do not export anything from HelperMod (this is important to the repro)\r\n#\r\nFunctionsToExport = @()\r\n}\r\n'@\r\n\r\n$mainModPsm1Content = ''\r\n\r\n$helperModPsd1Content = @'\r\n@{\r\nRootModule = 'HelperMod.psm1'\r\nModuleVersion = '1.0.0.0'\r\n}\r\n'@\r\n\r\n$helperModPsm1Content = @'\r\nfunction FuncFromHelperMod { Write-Host 'hi' -Fore green }\r\n'@\r\n\r\n\r\n$testDir = Join-Path ([System.IO.Path]::GetTempPath()) 'tmpReproDir'\r\n\r\nRemove-Module MainMod*\r\nRemove-Module HelperMod*\r\nif( Test-Path $testDir ) { rmdir -force -recurse $testDir }\r\n\r\nmkdir $testDir | Out-Null\r\nWrite-Host 'Test directory:' -Fore Yellow\r\nWrite-Host \"   $testDir\" -Fore Yellow\r\n\r\nSet-Content -Path \"$testDir\\MainMod.psd1\"   -Value $mainModPsd1Content\r\nSet-Content -Path \"$testDir\\MainMod.psm1\"   -Value $mainModPsm1Content\r\nSet-Content -Path \"$testDir\\HelperMod.psd1\" -Value $helperModPsd1Content\r\nSet-Content -Path \"$testDir\\HelperMod.psm1\" -Value $helperModPsm1Content\r\n\r\n#\r\n# Setup done; commence repro:\r\n#\r\n\r\nImport-Module \"$testDir\\HelperMod.psd1\"\r\n\r\n# This gives output, as expected:\r\ngcm FuncFromHelperMod | fl\r\n\r\nImport-Module -Force \"$testDir\\MainMod.psd1\"\r\n\r\n# I expect to still be able to call FuncFromHelperMod, but the function no longer exists:\r\ngcm FuncFromHelperMod | fl\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nI should see the command info for `FuncFromHelperMod` twice.\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe second call to `Get-Command FuncFromHelperMod` fails.\r\n\r\n```none\r\nTest directory:\r\n   C:\\Users\\danthom\\AppData\\Local\\Temp\\tmpReproDir\r\n\r\n\r\nName        : FuncFromHelperMod\r\nCommandType : Function\r\nDefinition  :  Write-Host 'hi' -Fore green\r\n\r\n\r\n\r\ngcm : The term 'FuncFromHelperMod' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt C:\\src\\PsModuleUtil_for_github\\repro\\ReproScript.ps1:59 char:1\r\n+ gcm FuncFromHelperMod | fl\r\n+ ~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (FuncFromHelperMod:String) [Get-Command], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3-127-gda7b5216b5ab0b5173d694c0e7c878ce60b7429d\r\nOS                             Microsoft Windows 10.0.17692\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "I also had a repro of a similar problem where the function from the HelperMod still seems to exist (`gcm` finds it), but it seemed to have lost its definition. I wasn't able to get a simplified repro of that, but in retrospect, I think it was related to the fact that I had some other module in my module path that also used HelperMod, and it /did/ export HelperMod's functions, but when pwsh tried to load it, it was unable to load it for an unrelated reason (because the `Hyper-V` required module was not found).",
      "created_at": "2018-07-26T02:37:18Z",
      "updated_at": "2018-07-26T02:37:18Z"
    }
  ],
  "created_at": "2018-07-26T02:29:49Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 7367,
  "state": "open",
  "title": "Import-Module -Force wipes out nested module",
  "updated_at": "2018-07-26T06:33:47Z"
}