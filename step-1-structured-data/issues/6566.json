{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6566",
  "author": "jianyunt",
  "body": "I am trying to programmatically launch vim for allowing users to edit a file on a Linux VM.  So I did  \r\n\r\n [System.Diagnostics.Process]::Start(\"vim\", \"/home/myname/foobar.ps1\") \r\n\r\n\r\nThe vim does launched, however the screen is busted by injecting some random characters for a while then hangs.\r\n\r\n![image](https://user-images.githubusercontent.com/10171679/38340009-022818b6-3826-11e8-914e-e25ed519796f.png)\r\n\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\nLinux VM\r\npwsh\r\n[System.Diagnostics.Process]::Start(\"vim\", \"/home/myname/foobar.ps1\") \r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe editor should work just as a user directly launches it.\r\n\r\nActual behavior\r\n---------------\r\n\r\nSee above.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n![image](https://user-images.githubusercontent.com/10171679/38339457-3a743af4-3823-11e8-92c4-460edfc7f4d5.png)\r\n\r\nenv $TERM\r\nxterm-256color\r\nuname -a:\r\n4.4.0-116-generic #140-UBuntu\r\nUBuntu 16.04.1 LTS\r\n",
  "closed_at": "2018-04-05T22:14:31Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! Although I don't know reason of using [System.Diagnostics.Process]::Start( ) with VIM, as by itself runs OK!\r\n\r\n![diagproces_issue_02_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38340548-0bd5cc02-3842-11e8-84b4-2f4f7335564e.jpg)\r\n\r\nBut, Yes! Using [System.Diagnostics.Process]::Start(\"vim\", \"/home/myname/foobar.ps1\") will impact the console to the point of not able to exit and leaving the swap file open.\r\n\r\n![diagproces_issue_01_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38340553-136312ae-3842-11e8-8f1f-61d08e540cde.jpg)\r\n\r\nThis happening in my Ubuntu 17.10 \r\nPowerShell\r\n```\r\nPS /home/maxt> $PSVersionTable                                                                                          \r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Linux 4.13.0-38-generic #43-Ubuntu SMP Wed Mar 14 15:20:44 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nAlso,  my VIM in Windows won't work any more in PowerShell Core Preview.1 as is not accepting keys entries misbehaving to the point not able to make any changes to the file.\r\n\r\n![diagproces_issue_03_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38340723-db358906-3842-11e8-8359-6709150faa74.jpg)\r\n\r\nI remember VIM working fine in PowerShell 6.0.1 in Windows.\r\n:(",
      "created_at": "2018-04-05T00:02:44Z",
      "updated_at": "2018-04-05T00:02:44Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Doing `[System.Diagnostics.Process]::Start(\"vim\", \"/home/myname/foobar.ps1\") ` creates a background process that will conflict with the foreground PowerShell since both processes are writing to the screen. What happens when you just do\r\n`start-process -Wait -FilePath vim -ArgumentList /home/myname/foobar.ps1`\r\nor just\r\n`vim /home/myname/foobar.ps1`",
      "created_at": "2018-04-05T00:03:38Z",
      "updated_at": "2018-04-05T00:03:38Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I just verify that in one of my Windows 10 VM I have VIM installed and works without any issues in PowerShell 6.0.2.\r\n\r\n![diagproces_issue_04_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38341189-3f241250-3845-11e8-955b-3f4c6bd01818.jpg)\r\n\r\nBut, using the [System.Diagnostics.Process]::Start(\"vim\", \"/home/myname/foobar.ps1\") method will make PowerShell Core console misbehave to the point forcing you to close it.\r\n\r\nNow, very interesting, using the \"start-process\" method in Windows will open another console and works like a charm.\r\n\r\n![diagproces_issue_05_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38341437-81765202-3846-11e8-8707-63bc142f7dfd.jpg)\r\n\r\nThen, in Linux using start-process, it just stays in the same console but works.  I tested this in both PowerShell Core 6.0.2 and 6.1.0-Preview.1 Ubuntu and WSL.\r\n\r\n![diagproces_issue_06_2018-04-04_19-47-29](https://user-images.githubusercontent.com/19892435/38341507-ed54184c-3846-11e8-8b11-aa3187e0cdbd.jpg)\r\n\r\nSo here's the status:\r\n1. VIM will work in both Windows and Linux in PowerShell Core\r\n2. Start-Process work with VIM in PowerShell Core Windows and Linux.\r\n3. Using the [System.Diagnostics.Process]::Start() method - FATAL BLOW!\r\n\r\n:)\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-05T00:35:09Z",
      "updated_at": "2018-04-05T00:35:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can close this with By-Design.",
      "created_at": "2018-04-05T13:41:55Z",
      "updated_at": "2018-04-05T13:41:55Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks all. \"start-process -wait\" helps. ",
      "created_at": "2018-04-05T22:14:31Z",
      "updated_at": "2018-04-05T22:14:31Z"
    }
  ],
  "created_at": "2018-04-04T23:40:43Z",
  "number": 6566,
  "state": "closed",
  "title": "Screen buffer seems busted after starting a new process on Linux",
  "updated_at": "2018-04-06T02:33:04Z"
}