{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3015",
  "author": "PaulHigin",
  "body": "These changes provide the ability to debug remote running scripts started with the Invoke-Command cmdlet.  The design is event based and provides new public events that allow subscribers to be notified when an Invoke-Command remote session is ready for debugging.  Since Invoke-Command allows running scripts on multiple targets at once (fan-out) the notification event is raised for each remote session as it becomes ready for debugging.  The subscriber to these events will be a script debugger implementation (such as PowerShell console, ISE, or VSCode) and will handle all debugging details such as simultaneously debugging multiple remote sessions at once in separate windows.\r\n\r\nBut these changes also include an internal implementation which is used by default if host debuggers don't want to handle the debugging details.  This internal implementation is what PowerShell console, ISE uses so they can have this new behavior without having to modify their debugger implementations.  The internal implementation serializes each remote session of Invoke-Command so that they can be debugged one at a time.  The remote session debugger is \"pushed\" onto the internal debugger stack so that debugging transitions to the remote session.  Existing debugging commands work so that the \"quit\" debugging command will stop the current remote session script from running and allow the next remote session to be debugged.  Similarly the \"continue\" debugging command allows the script to continue running outside step mode and again go to the next remote session for debugging.  The \"stepout\" debugging command steps out of all Invoke-Command remote sessions and lets the script continue to run for each remote session in parallel as they are normally run.\r\n\r\nThe purpose of Invoke-Command step-in remote debugging is allow seamless debugging of a local script that calls Invoke-Command on remote targets.  But there is also a new Invoke-Command \"-RemoteDebug\" parameter that lets you Invoke-Command on the command line and have it drop directly into the debugger.\r\n\r\nAn example from the PowerShell command line looks like this:\r\n```powershell\r\nPS C:\\> C:\\TestICM.ps1\r\nEntering debug mode. Use h or ? for help.\r\n\r\nHit Command breakpoint on 'Invoke-Command'\r\n\r\nAt C:\\TestICM.ps1:2 char:1\r\n+ Invoke-Command -cn $computerName,paulhig-3 -File c:\\LinuxScript.ps1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[DBG]: PS C:\\>> list\r\n\r\n    1:  $computerName = \"localhost\"\r\n    2:* Invoke-Command -cn $computerName,paulhig-3 -File c:\\LinuxScript.ps1\r\n    3:  \"Test Complete!\"\r\n\r\n[DBG]: PS C:\\>> stepin\r\nAt line:1 char:1\r\n+ Write-Output \"Running script on Linux!\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[paulhig-3]:[DBG]: [Process:14072]: [Runspace5]: PS C:\\Users\\paulhi\\Documents>\r\n```\r\nNotice that the debugger \"stepin\" command transitioned from local script debugging to debugging the remote session on computer \"paulhig-3\", as can be seen by the change in the debugger prompt.\r\n\r\nYou can also do this from the command line to drop directly into the debugger\r\n```powershell\r\nInvoke-Command -cn localhost -Script  $scriptblock -RemoteDebug\r\n```\r\n\r\nThese changes also remove an old behavior that was incompatible with this new step-in feature.  Previously if a remote session running script hit a break point it would stop in the debugger and go to the \"disconnected session\" state.  This was to allow the user to reconnect using Enter-PSSession and then interactively debug the remote session script.  This behavior has been removed and now the user needs to attach a debugger using the newer Debug-Runspace cmdlet.\r\n",
  "closed_at": "2017-03-01T18:28:26Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Whether to increase the number of files with similar tests? \r\nIf so, then perhaps we should move `TestDebugger` to `TestRemoting.psm1` and merge `DummyHost ` with `TestHostCS` in `TestHostCS.psm1`.",
      "created_at": "2017-02-11T09:36:06Z",
      "updated_at": "2017-02-11T09:36:06Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I feel it is not necessary at this point.  If in the future more tests rely on these classes then the code can be refactored.",
      "created_at": "2017-02-13T16:44:18Z",
      "updated_at": "2017-02-13T16:44:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Thanks for clarification! Clear.",
      "created_at": "2017-02-13T18:33:48Z",
      "updated_at": "2017-02-13T18:33:48Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@lzybkr and @iSazonov - Do you have any additional comments, outstanding questions, or discussion points? Is this PR ready to go?",
      "created_at": "2017-02-17T00:16:40Z",
      "updated_at": "2017-02-17T00:16:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mirichmo With regard to the tests the minor question remains open about IoT https://github.com/PowerShell/PowerShell/pull/3015#pullrequestreview-17386350\r\n> PaulHigin  The test works on Windows Core Server. I don't know about IoT",
      "created_at": "2017-02-17T03:31:10Z",
      "updated_at": "2017-02-17T03:31:10Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw This PR has been languishing for weeks.  Is there any reason why it cannot be merged?  It seems to me that any minor issues can be addressed as they come up.  Otherwise I am Ok abandoning this PR since this a debugging feature requested internally.\r\nThanks!",
      "created_at": "2017-03-01T16:08:02Z",
      "updated_at": "2017-03-01T16:08:02Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "I think this should be merged, it adds value for all our users, not just the internal ones. This functionality will light up for users in VS Code once it's released in PowerShell Core. ",
      "created_at": "2017-03-01T16:18:26Z",
      "updated_at": "2017-03-01T16:18:26Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Most of my feedback was addressed.\r\n\r\nI won't block merging, but do think my feedback on the host test code should be addressed - I expanded on my thinking inline.",
      "created_at": "2017-03-01T18:18:46Z",
      "updated_at": "2017-03-01T18:18:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I opened #3236 to capture 2 open comments in the review. Given that, I'm merging this PR.",
      "created_at": "2017-03-01T18:24:24Z",
      "updated_at": "2017-03-01T18:24:24Z"
    }
  ],
  "created_at": "2017-01-19T00:33:40Z",
  "number": 3015,
  "state": "closed",
  "title": "Implementation for Invoke-Command step-in remote debugging",
  "updated_at": "2017-03-27T05:50:50Z"
}