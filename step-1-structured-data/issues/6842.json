{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6842",
  "author": "blixthecat",
  "body": "If you try to do a -replace with a string that has two or more dollar signs next to it, one dollar sign gets removed. This happens even if the characters are escaped. \r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nScenario 1:  Two Dollar Signs in String Literal\r\n![image](https://user-images.githubusercontent.com/5242266/39775028-9c924944-52ca-11e8-9d67-2c7c0b77c232.png)\r\n\r\nScenario 2: More  Than Two Dollar Signs in String Literal\r\n![image](https://user-images.githubusercontent.com/5242266/39775082-c78d7a2e-52ca-11e8-9d54-61d16d08681e.png)\r\n\r\nScenario 3: One Dollar Sign in String Literal\r\n![image](https://user-images.githubusercontent.com/5242266/39775126-f3fd32fc-52ca-11e8-9706-f00a579bd902.png)\r\n\r\nScenario 4: Two Dollar Signs in String Literal (escaped)\r\n![image](https://user-images.githubusercontent.com/5242266/39775158-0af61bd6-52cb-11e8-86a6-1e52e9734c5f.png)\r\n\r\n\r\n\r\n\r\nExpected behavior\r\n-----------------\r\nScenario 1: P@$$w0rd \r\nScenario 2: P@$$$w0rd \r\nScenario 3: P@$w0rd \r\nScenario 3: P@`$`$w0rd \r\n\r\n\r\nActual behavior\r\n---------------\r\nScenario 1: \r\n![image](https://user-images.githubusercontent.com/5242266/39775297-7764ecac-52cb-11e8-93c6-0e4afca2c9e7.png)\r\n\r\nScenario 2:\r\n![image](https://user-images.githubusercontent.com/5242266/39775330-889a8b44-52cb-11e8-86b4-dd0d53088234.png)\r\n\r\nScenario 3: \r\n![image](https://user-images.githubusercontent.com/5242266/39775461-ee162f6e-52cb-11e8-8a37-fda841867bb1.png)\r\n\r\nScenario 4:\r\n![image](https://user-images.githubusercontent.com/5242266/39775491-0949bfda-52cc-11e8-9a21-51db11c47c5e.png)\r\n\r\nEnvironment data\r\n----------------\r\n> $PSVersionTable\r\n![image](https://user-images.githubusercontent.com/5242266/39775595-64668b00-52cc-11e8-9600-6a582e005480.png)\r\n\r\n\r\n```\r\n",
  "closed_at": "2018-05-26T18:03:52Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The `-replace` replacement operand is not a _literal_: `$` has special meaning in it and is used to refer to aspects of the regex matching, such as `$&` to refer to the entire match and `$1` to refer to what the 1st capture group matched.\r\n\r\nTherefore, `$` characters you want to treat _literally_ must be _escaped_ by _doubling_ them.\r\n(Note that this escaping mechanism is unrelated to PowerShell's `` ` ``-based escaping).\r\n\r\nAnd that is what happened accidentally in your case: the `$$` sequence was interpreted as an _escaped_ `$`.\r\n\r\nUnescaped `$` sequences that happen not to form a valid regex-match reference are also retained as literals, but it's better not to rely on that.\r\n\r\nYou can read more about this [here](https://stackoverflow.com/a/40683667/45375).\r\n\r\nThe robust workaround is to use the following:\r\n\r\n```powershell\r\n$testString -replace '...', $password.Replace('$', $$')\r\n```\r\n\r\nHowever, if your replacement operation doesn't actually need _regex_ matching, only simple _substring_ replacement, you can use [`[string]::Replace()`](https://docs.microsoft.com/en-us/dotnet/api/system.string.replace?view=netframework-4.7.2#System_String_Replace_System_String_System_String_) for the entire operation, but note that it is case-_sensitive_ by default:\r\n\r\n```powershell\r\n$testString.Replace('...', $password)\r\n```\r\n",
      "created_at": "2018-05-08T19:08:00Z",
      "updated_at": "2018-05-09T01:28:10Z"
    },
    {
      "author": "blixthecat",
      "author_association": "NONE",
      "body": "Thank you for explaining! I couldn't find a reference to that kind of escaping anywhere!",
      "created_at": "2018-05-08T20:14:06Z",
      "updated_at": "2018-05-08T20:14:06Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "We should probably have include a link to [Substitutions in Regular Expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions) in `about_Comparison_Operators` as well as mentioning that substitutions happen with `-replace` in the body of the document. ",
      "created_at": "2018-05-09T17:56:31Z",
      "updated_at": "2018-05-09T17:56:31Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Someone forgot to post that the symptom exist in PSCore6.  Although I would have use the following .NET object replace method:\r\n```\r\nPS C:\\Program Files\\PowerShell\\6-preview> $password\r\nP@$$word\r\nPS C:\\Program Files\\PowerShell\\6-preview> $password.Length\r\n8\r\nPS C:\\Program Files\\PowerShell\\6-preview> $password.ToString()\r\nP@$$word\r\nPS C:\\Program Files\\PowerShell\\6-preview> \"$($password.ToString())\"\r\nP@$$word\r\nPS C:\\Program Files\\PowerShell\\6-preview> $testString.replace('%MGR_PWD',\"$($password.ToString())\");\r\nP@$$word\r\n```\r\nI mostly use .NET object methods instead of using parameters. But, that's me!\r\n\r\n",
      "created_at": "2018-05-09T18:44:27Z",
      "updated_at": "2018-05-09T18:44:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad: \r\n\r\nTo be clear: the **behavior is by design, and it is here to stay**.\r\nHowever, the behavior is **poorly documented**, hence @BrucePay's suggestion.\r\n\r\n**Using `String.Replace(string oldvalue, string newvalue)` may be the simplest solution in _this_ case, but it is by no means a _general_ alternative to `-replace`**; not only do the behaviors differ, `-replace` offers many more features:\r\n\r\n* Regex support, which `-replace` _invariably_ applies.\r\n\r\n   * `String.Replace()` _only_ supports literal substring replacement - both for matching and in the replacement string.\r\n      * This prevents advanced matching behavior, such as anchoring matches or capturing parts of the input string and referencing these parts in the replacement-string operand.\r\n      * On the flip side, you do not have to worry about escaping `$` chars. in the replacement string, as you demonstrate.\r\n\r\n   * You can _indirectly_ get literal substring replacements with `-replace` too:\r\n        * If the _search_ operand is a string literal, `\\`-escape all regex metacharacters that you want to be treated as literals.\r\n             * If the search operand is a _variable_ reference, call `[regex]::Escape()` on it.\r\n       * If the _replacement_ operand is a string literal, `$`-escape `$` instances that you want to be treated as literals (i.e., _double_ `$` chars. meant to be literals).\r\n            * If the search operand is a _variable_ reference, call `.Replace('$', '$$'`) on it (i.e., take advantage of simple substring replacement via `String.Replace()`) or, if you want to stick with `-replace`, use `(... -replace '\\$', '$$$$')`.\r\n\r\n   * As an aside: thanks to [work by @IISResetMe](https://github.com/PowerShell/PowerShell/pull/6029), `-replace` as of v6.1.0-preview.2 even supports passing a _script block_ as the replacement operand; e.g.,\r\n`'1 + 1 = 2' -replace '\\d+', { [int] $_.Value * 2 }` yields `'2 + 2 = 4'`\r\n\r\n\r\n* Case-insensitivity.\r\n\r\n   *  `String.Replace(string oldValue, string newValue)`, is case-_sensitive_, but you can opt into case-sensitivity via overloads  `String.Replace(string oldValue, string newValue, bool ignoreCase, cultureinfo culture)` or `String.Replace(string oldValue, string newValue, System.StringComparison comparisonType)`\r\n   * Conversely, `-creplace` gives you case-sensitivity (more conveniently) in PowerShell.\r\n\r\n* Support for array-valued LHS operands.\r\n\r\n* Support for implicit to-string conversion of the LHS.\r\n\r\n\r\nP.S.: You can find an analogous juxtaposition of `-split` and `String.Split()` in [this SO answer](https://stackoverflow.com/a/41905031/45375).\r\n\r\n",
      "created_at": "2018-05-09T21:13:20Z",
      "updated_at": "2018-05-09T21:14:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've created a doc issue at https://github.com/PowerShell/PowerShell-Docs/issues/2416\r\n\r\n@blixthecat: Now that the issue is being tracked there, can I ask you to close _this_ one?",
      "created_at": "2018-05-10T15:34:05Z",
      "updated_at": "2018-05-10T15:34:05Z"
    }
  ],
  "created_at": "2018-05-08T18:31:16Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 6842,
  "state": "closed",
  "title": "Dollar Sign Gets 'Eaten' by -replace When More Than One Dollar Sign Adjacent In String",
  "updated_at": "2018-05-26T18:03:52Z"
}