{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7880",
  "author": "nyanhp",
  "body": "\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Get a personal access token from dev.azure.com\r\n$PersonalAccessToken = 'ACCESS TOKEN HERE'\r\n$UserName = 'USERNAMEHERE'\r\n$tokenString = \"Basic {0}\" -f ([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f '',$PersonalAccessToken))))\r\n$result = Invoke-RestMethod -Uri \"https://dev.azure.com/$UserName/_apis/distributedtask/tasks\" -Method Get -Headers @{ Authorization = $tokenString}\r\n$result\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nProperly parsed data, like Invoke-RestMethod usually returns. Essentially the same I can get with ConvertFrom-JsonNewtonsoft, which works perfectly fine:\r\n\r\n$result | ConvertFrom-JsonNewtonsoft\r\n\r\nName                           Value                                                                                                                                                                                                                             \r\n----                           -----                                                                                                                                                                                                                             \r\ncount                          171                                                                                                                                                                                                                               \r\nvalue                          {System.Collections.Specialized.OrderedDictionary, System.Collections.Specialized.OrderedDictionary, System.Collections.Specialized.OrderedDictionary, System.Collections.Specialized.OrderedDictionary...}     \r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nA gigantic, unusable string - it appears as if Invoke-RestMethod\r\nsilently fails to do the conversion and simply returns the raw\r\nresponse instead.\r\n\r\n$result.Length\r\n878493\r\n\r\nWhen I try to convert the \r\nresponse manually, this comes to light:\r\n\r\n$result | Convertfrom-json\r\nConvertfrom-json : The provided JSON includes a property whose name is an empty string, this is only supported using the -AsHashTable switch.\r\nAt line:1 char:11\r\n+ $result | Convertfrom-json\r\n+           ~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [ConvertFrom-Json], InvalidOperationException\r\n+ FullyQualifiedErrorId : EmptyKeyInJsonString,Microsoft.PowerShell.Commands.ConvertFromJsonCommand\r\n\r\n\r\nSince I have no choice how Invoke-RestMethod works and I cannot always check if the cmdlet decided to do the work or not it would be nice to see some sort of fix. The same issue exists in Windows PowerShell as well.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem is that by default, `Invoke-RestMethod` tries to convert the json to a PSCustomObject.  However, PSCustomObject doesn't support a property without a name.  In your script, add `-AsHashTable` to get an object that supports this.\r\n\r\nHowever, I think that a warning instead of an error may be better here and have the resulting object not contain that property by default.",
      "created_at": "2018-09-27T21:51:38Z",
      "updated_at": "2018-09-27T21:51:38Z"
    },
    {
      "author": "nyanhp",
      "author_association": "NONE",
      "body": "Thanks @SteveL-MSFT for the suggestion. Maybe an additional switch parameter for Invoke-RestMethod would make sense then? If Invoke-RestMethod automatically converts the response, it should offer a way to do exactly what you suggested I do with ConvertFrom-Json. That way, there would be no need to test the result for a (probably yet unknown) JSON property to determine if the conversion silently failed or not.\r\nFor the time being, the workaround sure works for me.",
      "created_at": "2018-09-30T21:04:49Z",
      "updated_at": "2018-09-30T21:04:49Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@nyanhp I have considered exposing the same option to `Invoke-RestMethod`. I'm torn because it violates single responsibility principle. The `Invoke-RestMethod` auto-conversion covers a very large number of use cases, but not all of them (including the one you outline here). `ConvertFrom-Json` is the right tool for more complex JSON conversion. I would like to limit coupling changes in `ConvertFrom-Json` to changes in `Invoke-RestMethod` as much as possible.\r\n\r\nAssuming we did add `-AsHashTable`  to `Invoke-RestMethod`, in instances where the remote endpoint returns a blank/empty key name, you would still run into the surprise of having to add `-AsHashTable`.  the effort to change the code to include `-AsHashTable` or pipe the result to `ConvertFrom-Json -AsHashTable` is effectively the same.\r\n\r\nI'm not sure the convenience of adding `-AsHashTable`  to `Invoke-RestMethod` outweighs the cost of coupling those cmdlets further.",
      "created_at": "2018-10-02T00:25:52Z",
      "updated_at": "2018-10-02T00:26:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Our preference is investigate supporting PSCustomObject with a property name of empty string rather than introduce a `-AsHashTable` switch.",
      "created_at": "2018-10-03T22:36:05Z",
      "updated_at": "2018-10-03T22:36:05Z"
    }
  ],
  "created_at": "2018-09-27T18:26:01Z",
  "number": 7880,
  "state": "open",
  "title": "Invoke-RestMethod fails to parse JSON response",
  "updated_at": "2018-10-03T22:36:05Z"
}