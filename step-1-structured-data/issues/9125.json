{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9125",
  "author": "msftrncs",
  "body": "# Summary of the new feature/enhancement\r\n\r\n`switch` could use to support an array of condition arguments per each condition statement block.  This would have effectively be the same as `-in item1, item2, \u2026`\r\n\r\nIEC 61131-3 (similar to Pascal) supports this with their `CASE {expression} OF` statement.\r\n\r\n```PASCAL\r\nACTION\tCleanUp:\r\n(* Processing CleanUp, intended for the CAN implementation to utilize if Request_RESULT is > 1 prior\r\n   to processing of the next received request. *)\r\n(* handle cleanup if application doesn't react to Request_RESULT, as its not really required to *)\r\nCASE Request_RESULT OF\r\n2,3:\r\n\t(* download or upload request was not acted upon, must be an invalid object *)\r\n\tTX_ERR_INV_OBJ(); (* object of request must have been invalid and could not be found *)\r\n4,5:\r\n\t(* when = 4, application must have accepted the download completion without error *)\r\n\tRequest_RESULT := SEL( ActXfr_Dn OR ActXfr_Up, 0, 1 );\r\n6:\r\n\t(* application accepted an upload request which coincides with an active download,\r\n\t   the download is being aborted, so notify the application.  *)\r\n\tRequest_RESULT := 5;\r\n7:\r\n\t(* application must have accepted the expedited download without error *)\r\n\tTX_ACK_EXP_DN();\r\nEND_CASE\r\n\r\nEND_ACTION\r\n```\r\n\r\nEDITED: Here is an example application except, where `switch` replaces `foreach` and a set of `if`/`elseif` statements.\r\n\r\n```PowerShell\r\n# iterate through the rule set and capture the possible scope names\r\nforeach ($key in $ruleset.PSObject.Properties.Name) {\r\n\tif ($key -cin 'name', 'contentName') {\r\n\t\t# return the specified scope selectors\r\n\t\t$ruleset.PSObject.Properties[$key].Value\r\n\t}\r\n\telseif ($key -cin 'patterns') {\r\n\t\tforeach ($rule in $ruleset.PSObject.Properties[$key].Value) {\r\n\t\t\t# recurse the contained patterns\r\n\t\t\tgetscopes_recurse $rule\r\n\t\t}\r\n\t}\r\n\telseif ($key -cin 'beginCaptures', 'captures', 'endCaptures', 'repository') {\r\n\t\tforeach ($prop in $ruleset.PSObject.Properties[$key].Value.PSObject.Properties) {\r\n\t\t\t# recurse the sub-items, note that we don't keep the sub-items names, including the sub-repositories\r\n\t\t\tgetscopes_recurse $prop.Value\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nas\r\n\r\n```PowerShell\r\n# iterate through the rule set and capture the possible scope names\r\nswitch -CaseSensitive ($ruleset.PSObject.Properties.Name) {\r\n\tname, contentName {\r\n\t\t# return the specified scope selectors\r\n\t\t$ruleset.PSObject.Properties[$_].Value\r\n\t\tcontinue\r\n\t}\r\n\tpatterns {\r\n\t\tforeach ($rule in $ruleset.PSObject.Properties[$_].Value) {\r\n\t\t\t# recurse the contained patterns\r\n\t\t\tgetscopes_recurse $rule\r\n\t\t}\r\n\t\tcontinue\r\n\t}\r\n\tbeginCaptures, captures, endCaptures, repository {\r\n\t\tforeach ($prop in $ruleset.PSObject.Properties[$_].Value.PSObject.Properties) {\r\n\t\t\t# recurse the sub-items, note that we don't keep the sub-items names, including the sub-repositories\r\n\t\t\tgetscopes_recurse $prop.Value\r\n\t\t}\r\n\t\tcontinue\r\n\t}\r\n}\r\n```\r\n(notice the arguments not requiring quotes)\r\n\r\nAnother simpler example:\r\n```PowerShell\r\n    hidden [object] GetAddress () {\r\n        return $(switch ($this.RecType.value__) {\r\n            0 {$this.GetAddress16()}\r\n            1 {$this.GetAddress16()}\r\n            2 {$this.GetAddress24()}\r\n            3 {$this.GetAddress32()}\r\n            5 {$this.GetAddress16()}\r\n            6 {$this.GetAddress24()}\r\n            7 {$this.GetAddress32()}\r\n            8 {$this.GetAddress24()}\r\n            9 {$this.GetAddress16()}\r\n        })\r\n    }\r\n```\r\nvs\r\n```PowerShell\r\n    hidden [object] GetAddress () {\r\n        return $(switch ($this.RecType.value__) {\r\n            0, 1, 5, 9 {$this.GetAddress16()}\r\n            2, 6, 8 {$this.GetAddress24()}\r\n            3, 7 {$this.GetAddress32()}\r\n        })\r\n    }\r\n```\r\n\r\nSince the `switch` statement already breaks up sets, and the engine already errors if it finds a comma in the condition argument, I cannot see a reason this couldn't be implemented.   The confusion might come, on what other ways can a collection of condition values be passed.  I don't think there would be any other ways.\r\n\r\n`value1, value2, value3` - this is 3 conditions\r\n`(value1, value2, value3)` - this is a single condition of a collection of 3 values (and is currently supported)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I have updated above my somewhat poorly configured first comparison\r\n\r\nI might add, that IEC 61131-3 also supports a range condition (using `..`) in its `CASE`, but that might not be so easy to implement, as the range operator wouldn't be available with the argument syntax currently employed by PowerShell's `switch`.  IEC 61131-3's `CASE` was only meant for numeric values.",
      "created_at": "2019-03-12T23:23:21Z",
      "updated_at": "2019-03-12T23:23:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "One option is to _actually_ use the -in operator (or indeed any other).\r\n\r\n```powershell\r\nswitch ($values) {\r\n    {$_ -in 1, 2, 3} {\r\n        \"Value was 1, 2, or 3\"\r\n    }\r\n}\r\n```\r\n\r\nYou can provide a script block as the case-defining block. It will behave similarly to Where-Object, wherein any non-boolean results will be implicitly cast to Boolean for evaluation.\r\n\r\nIn a switch statement, $_ becomes a reference to the current item from the input that is being considered or executed.",
      "created_at": "2019-03-12T23:25:47Z",
      "updated_at": "2019-03-12T23:28:11Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, correct, I originally had this code (first comparison) configured that way, but it didn't seem to benefit the application at that time but I had other issues as well, due to needing to access the names of the properties of the PSCustomObject returned from ConvertFrom-JSON, so I had rewritten it to the way the first comparison shows.",
      "created_at": "2019-03-12T23:31:29Z",
      "updated_at": "2019-03-12T23:31:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure I follow what you're trying to achieve here. It sounds like it should be doable with what we have already.\r\n\r\nWhat are you looking to accomplish?",
      "created_at": "2019-03-12T23:34:12Z",
      "updated_at": "2019-03-12T23:34:12Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "What I am proposing is just a syntactically shorter way (specifically for `-in` applications).  The difference is after using `{$_ -in (collection)}`, and then being sure to use `continue`, I might as well use `if` and `elseif`, which is why I switched my code back to that method.  My original code example however didn't originally use the property names, instead iterating on the entire property requiring the longer `{$_.Name -cin (collection of strings)}`.\r\n\r\nAlso notice that single word simple string values do not need quotes if they are the argument of the condition, but they do when they are the operand of an operator.  That is what defeats the possible use of the range operator, however.",
      "created_at": "2019-03-13T00:50:30Z",
      "updated_at": "2019-03-13T00:50:30Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm definitely in favor of improvements, but have concerns over breaking existing scripts.\r\n\r\nToday this \"works\" though the behavior is surprising:\r\n\r\n```powershell\r\nswitch (\"1 2 3\") {\r\n    (1,2,3) {'matched'}\r\n}\r\n```\r\n\r\nThis syntax is dangerously close to your obvious syntax.\r\n\r\nI know some folks would like something more like the `match` expression in F# or Rust - that might be an option to have a `switch` that is less surprising without the worries about compatibility.\r\n\r\nAt any rate, it would be good to see a RFC for a change like this, regardless of the eventual proposal.",
      "created_at": "2019-03-13T01:39:11Z",
      "updated_at": "2019-03-13T01:39:11Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Is there any concern here of breaking existing scripts, so far with what I propose here?  My experimentation so far suggests that a comma separated value is not currently directly supported, so while `(1,2,3)` is valid and works as you describe, `1, 2, 3` is not currently valid and generates an error.",
      "created_at": "2019-03-13T02:59:01Z",
      "updated_at": "2019-03-13T02:59:01Z"
    }
  ],
  "created_at": "2019-03-12T06:21:14Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 9125,
  "state": "open",
  "title": "Feature Request: allow switch to support collection of conditions per condition statement block",
  "updated_at": "2019-03-13T05:40:31Z"
}