{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17297",
  "author": "agaace",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nWhen there are comments adjacent to documentation comments, documentation comments are not recognized by `Get-Help`. This doesn't work:\r\n```powershell\r\n# Regular comment\r\n<#\r\n.SYNOPSIS\r\nMy documentation.\r\n#>\r\n```\r\n\r\nWhen an empty line is added between these comments, `Get-Help` works correctly. This works:\r\n```powershell\r\n# Regular comment\r\n\r\n<#\r\n.SYNOPSIS\r\nMy documentation.\r\n#>\r\n```\r\n\r\nPowershell version: 7.2.3\r\nWindows version: 11\r\nFile encoding: UTF8 (no BOM)\r\nFile endings: LF\r\n\r\nFor a demo, save the following file as `BugDemo.ps1`:\r\n\r\n```powershell\r\n# This comment makes the documentation comments below stop being recognized by Get-Help.\r\n# Add an empty line below this comment (in line 3) and Get-Help works well again.\r\n<#\r\n.SYNOPSIS\r\nSays hi.\r\n\r\n.DESCRIPTION\r\nGreets you politely.\r\n\r\n.PARAMETER name\r\nYour name.\r\n#>\r\nfunction SayHi\r\n{\r\n  [OutputType([void])]\r\n  param\r\n  (\r\n    [Parameter(mandatory=$true, position=0, valueFromPipeline=$true)]\r\n    [string]\r\n    $name\r\n  )\r\n\r\n  Write-Host \"Hi, $name! Nice to meet you!\"\r\n}\r\n\r\nSayHi Fred\r\nGet-Help SayHi\r\n```\r\n\r\n[BugDemo.ps1.txt](https://github.com/PowerShell/PowerShell/files/8655919/BugDemo.ps1.txt)\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS> ./BugDemo.ps1\r\nHi, Fred! Nice to meet you!\r\n\r\nNAME\r\n    SayHi\r\n\r\nSYNOPSIS\r\n    Says hi.\r\n\r\n\r\nSYNTAX\r\n    SayHi [-name] <String> [<CommonParameters>]\r\n\r\n\r\nDESCRIPTION\r\n    Greets you politely.\r\n\r\n\r\nRELATED LINKS\r\n\r\nREMARKS\r\n    To see the examples, type: \"Get-Help SayHi -Examples\"\r\n    For more information, type: \"Get-Help SayHi -Detailed\"\r\n    For technical information, type: \"Get-Help SayHi -Full\"\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS> ./BugDemo.ps1\r\nHi, Fred! Nice to meet you!\r\n\r\nNAME\r\n    SayHi\r\n    \r\nSYNTAX\r\n    SayHi [-name] <string> [<CommonParameters>]\r\n    \r\n\r\nALIASES\r\n    None\r\n    \r\n\r\nREMARKS\r\n    None\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS> $PsVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.3\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I think this has been the same over the whole life of comment based help. \r\n\r\nThe rule seems to be \r\n1. Comments before the function declaration are merged.. If the result starts with .Synopis, .Description, etc it is treated as help text and  help inside the function is ignored. (white space around comments and before the first . is ignored).\r\n2. If there is no valid comment based help before the function, comments at the start of the block (before any [cmdletbinding()] or similar) are merged  If the result starts with .Synopis, .Description, etc it is treated as help text and any help at the end of the block is ignored.\r\n3. If 1 & 2 don't provide help, comments at the end of the block are merged  If the result starts with .Synopis, .Description, etc it is treated as help text \r\n4. For a parameter if no help is defined by 1,2 or 3comment(s) on the parameter  (merged if there are 2 or more) become its help.\r\n\r\nAlthough inserting a comment before a comment _shouldn't_ change things, the combination of allowing the comment based help to be split, and quick and simple recognition of the help text leads to what we have. \r\n  \r\n\r\n\r\n\r\n",
      "created_at": "2022-05-10T11:52:42Z",
      "updated_at": "2022-05-10T11:52:42Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "True it's always been like that, but it might be able to skip line comments that don't fit if there's a trailing block comment that does. Opening to `WG-Interactive-HelpSystem`",
      "created_at": "2022-05-10T15:10:47Z",
      "updated_at": "2022-05-10T15:10:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SeeminglyScience  I'm sure it _can_, and I doubt if the hit of doing so is significant. It might also be worth asking if there would be benefit in unifying help found outside, at the start and end, and allowing help to the be other side of [cmdletbinding()]. After all this time I still stop and think \"which has to come first\". \r\n",
      "created_at": "2022-05-10T15:30:36Z",
      "updated_at": "2022-05-10T15:30:36Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> It might also be worth asking if there would be benefit in unifying help found outside, at the start and end, and allowing help to the be other side of [cmdletbinding()]\r\n\r\nI'm not sure if that's strictly related to this issue, could you open a new one for discussion?\r\n\r\n",
      "created_at": "2022-05-10T21:31:02Z",
      "updated_at": "2022-05-10T21:31:02Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SeeminglyScience  \r\n\r\nI was thinking if the way help was merged and selected was going to change, then merging help from two or all three of the possible locations could be part of the same piece of work.  Thinking a bit more my feeling is keeping the help in one place is better practice, so we shouldn't be adding support for fragmenting it. \r\n\r\n\r\n\r\n",
      "created_at": "2022-05-11T09:39:09Z",
      "updated_at": "2022-05-11T09:39:09Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "If the help system could provide flexibility here and aggregate comment based help, that would be good. That said, I have the sense that doing so might impact the code leading to higher code size and complexity.  Just asking the question: is this worth 'fixing'??",
      "created_at": "2022-05-11T09:53:06Z",
      "updated_at": "2022-05-11T09:53:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@doctordns   My first thought was aggregating was (potentially) good, but the more I thought about it the more the more I thought fragmenting the help was bad - though I'm torn between parameter help in the main help block, and parameter help on the parameters where PowerShell gives me a choice.  If aggregation had always been there, as a matter of style we'd tell people to keep the help text together, wouldn't we ? ",
      "created_at": "2022-05-11T11:17:27Z",
      "updated_at": "2022-05-11T11:17:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I was thinking if the way help was merged and selected was going to change, then merging help from two or all three of the possible locations could be part of the same piece of work. Thinking a bit more my feeling is keeping the help in one place is better practice, so we shouldn't be adding support for fragmenting it.\r\n\r\nI'm not sure what you mean. The OP is saying they have an unrelated-to-help comment above their CBH that breaks CBH parsing. I'm saying we can probably just skip that comment when looking for CBH\r\n\r\n**Edit:** I think I see the confusion, in the actual and expected behavior, the line `Hi, Fred! Nice to meet you!` is a `Write-Host`. It's not the leading comment. That aren't asking for the leading comment to be merged in, they're just asking for CBH not to break when you have one.",
      "created_at": "2022-05-11T16:08:12Z",
      "updated_at": "2022-05-11T16:12:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SeeminglyScience \r\n\r\nYes. \r\nRight now what happens is comments get merged.  If you have \r\n```\r\n# foo\r\n<#\r\n.synopsis\r\n blah\r\n#>\r\n```\r\nOR \r\n```\r\n<#\r\nfoo\r\n\r\n.synopsis\r\n blah\r\n#>\r\n```\r\n\r\nCBH breaks.\r\n\r\nIf there is work to be done, after merging the pieces of help out any lines before the first CBH tag should be filtered and any CBH is left it gets used. . \r\nBut if the merge and filter process is to be \"fixed\", should merge cast its net a bit wider? I thought \"maybe\" now I think \"probably not\". So Ignore what I suggested yesterday \r\n\r\n\r\n",
      "created_at": "2022-05-11T18:43:04Z",
      "updated_at": "2022-05-11T18:43:04Z"
    }
  ],
  "created_at": "2022-05-09T23:11:45Z",
  "number": 17297,
  "state": "open",
  "title": "Get-Help does not recognize documentation comments in PS 7.2.3",
  "updated_at": "2022-05-11T18:43:04Z"
}