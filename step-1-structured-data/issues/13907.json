{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13907",
  "author": "mklement0",
  "body": "Follow-up from #13857:\r\n\r\nIn #2480, a deliberate enhancement was introduced for ignoring one or more `#`-prefixed comment (metadata) lines at the start of data passed to `Import-Csv` / `ConvertFrom-Csv`, so as to support common logging file formats.\r\n\r\nHowever, the **detection of such comment lines is overzealous in that even a _double-quoted_ `#` (`\"#\"` as opposed to `#`) as the first non-whitespace token at the start of the line is misidentified as a comment**.\r\n\r\nFor instance, the following valid CSV data is mishandled:\r\n\r\n```\r\n\"#Tag\",\"Name\"\r\n\"10\",\"foo\"\r\n```\r\n\r\n(An _unquoted_ `#` at the start of the line can similarly be part of a valid header row, though in that case there is unavoidable ambiguity, and defaulting to interpretation as a comment line, as is already the case, is defensible. Fortunately, `Export-Csv` and `ConvertTo-Csv` _always_ double-quote fields by default.)\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n[pscustomobject]@{ '#Tag' = 10; Name = 'foo' } | ConvertTo-Csv | ConvertFrom-Csv | \r\n  ConvertTo-Json -compress | Should -Be '{\"#Tag\":\"10\",\"Name\":\"foo\"}'\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should succeed due to successful round-trip conversion to and from CSV.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because the first line is misidentified as a comment, despite the `#` being double-quoted.\r\n\r\n```none\r\nExpected '{\"#\":\"10\",\"Name\":\"foo\"}', but got $null.\r\n```\r\n\r\n## Environment data\r\n\r\n\r\n```none\r\nPowerShell Core 7.1.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I don't understand why you open the issue if this was approved and implemented as by-design. For several years, no one has brought an important scenario for which it would be worth changing something. As soon as such a scenario appears, we can start a discussion on the merits\r\n",
      "created_at": "2020-10-27T16:01:25Z",
      "updated_at": "2020-10-27T16:01:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Treating a _double-quoted_ `#` as the start of a comment line isn't by design - it is a _bug_, and that's what this issue is about.\r\n\r\nIn no language / file format where `#` is used as the line-initial comment / annotation sigil does `\"#\"` work as well - obviously, it shouldn't.\r\n\r\nThe _correct_ aspect of the approved, by-design changes (_unquoted_ `#`) will continue to function.",
      "created_at": "2020-10-27T17:12:21Z",
      "updated_at": "2020-10-27T17:17:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I've updated the OP to make it clearer that this is only about `\"#\"`,  not about `#` - let me know if anything is still unclear.",
      "created_at": "2020-10-27T17:43:18Z",
      "updated_at": "2020-10-28T12:33:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There one parser is used for all lines and it was design decision.  We would need new parser for header. And we should think about performance too.\r\n\r\nThe code is here https://github.com/PowerShell/PowerShell/blob/dfc591c218ae2647e23577ebd77a380b3193e5f0/src/Microsoft.PowerShell.Commands.Utility/commands/utility/CsvCommands.cs#L1313",
      "created_at": "2020-10-28T04:46:11Z",
      "updated_at": "2020-10-28T05:01:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "By relabeling to \"up-for-grabs\" I see that you now agree that this should be fixed, but just to spell it out: whether it was by design or not, the current behavior, as described in the OP, is flawed.\r\n\r\nYes, some refactoring is needed, but I'm pretty sure it's not that hard and can be done without a noticeable impact on performance.\r\n\r\nJust to throw a quick idea out there: add a `bool` `out` parameter named `firstValueWasDoubleQuoted` to `ParseNextRecord()` that tells the caller whether the first non-whitespace token was double-quoted - if it was, the row is by definition _not_ a comment.\r\n\r\n",
      "created_at": "2020-10-28T12:41:38Z",
      "updated_at": "2020-10-28T12:41:38Z"
    }
  ],
  "created_at": "2020-10-27T15:51:06Z",
  "number": 13907,
  "state": "open",
  "title": "Import-Csv / ConvertFrom-Csv misinterpret a double-quoted hash  (#) as starting a comment line",
  "updated_at": "2020-10-28T12:41:38Z"
}