{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4823",
  "author": "joeyaiello",
  "body": "Given our push for semantic versioning, I think it'd be helpful for the `New-ModuleManifest` defaults to set `ModuleVersion` to 0.1 \r\n\r\nI don't *think* this is a breaking change because `-ModuleVersion` provides deterministic behavior. \r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nNew-ModuleManifest -Path ./foo.psd1\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n...\r\nModuleVersion = '0.1'\r\n...\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n...\r\nModuleVersion = '1.0'\r\n...\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n```\r\n",
  "closed_at": "2017-09-18T23:40:46Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "## Nope, that's wrong!\r\n\r\nSee the spec:\r\n\r\n2. A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain leading zeroes... [spec](http://semver.org/#spec-item-2)",
      "created_at": "2017-09-13T04:08:02Z",
      "updated_at": "2017-09-13T04:08:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Leading zero means it can't be 001.002.003, but the major version can be 0.  0.1.0 is probably more correct.\r\n\r\n```none\r\n4. Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\r\n```",
      "created_at": "2017-09-13T04:36:54Z",
      "updated_at": "2017-09-13T04:36:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Aside from fixing the syntax issue (`0.1` -> `0.1.0` - though casting to `[semver]` curiously works with `0.1` too, and even with just `0`), can I suggest even more humble beginnings, namely `0.0.1`?\r\n\r\nAt least in the world of Node.js / npm, the `0.0.x` range is nowadays used for early development - see [here](http://markup.im/#q4_cRZ1Q) for background info.\r\n",
      "created_at": "2017-09-13T04:43:12Z",
      "updated_at": "2017-09-13T04:43:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`0.1.0` looks good to me. We actually use it now, so we just need to add zero.",
      "created_at": "2017-09-13T07:54:55Z",
      "updated_at": "2017-09-13T07:54:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "SemVer recommends `0.1.0` although it doesn't say `0.0.1` isn't allowed.  Personally, I prefer `0.1.0` as the default and someone could always explicitly use `0.0.1` if they choose.",
      "created_at": "2017-09-13T14:48:38Z",
      "updated_at": "2017-09-13T14:48:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\n`0.1.0` is definitely an improvement over `1.0` and, as you state, `0.1.0` is what SemVer recommends, so the following is just food for thought:\r\n\r\n[SemVer](http://semver.org/) also imposes virtually _no_ rules on any version < `1.0.0` (to recap what you've already quoted):\r\n\r\n> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\r\n\r\nSo what the Node.js / npm community has done is to extend the rules to cover < `1.0.0` in an effort to support a two-stage approach to releasing:\r\n\r\n* Allow beta releases of sorts in the < `1.0.0` range, with beta testers / early adopters being able to rely on rules analogous to the > `1.0.0` ones to communicate changes, which means:\r\n\r\n   * `0.0.p` - no guarantees whatsoever - any change in the patch number can be a breaking one.\r\n   * `0.m.p`, with `m` >= 1: changes to `m` are breaking changes, changes to `p` (only) maintain backward compatibility and are either simple fixes or add functionality.\r\n\r\n* Once you hit `1.0.0`, after beta testing, when the API has settled, the official SemVer rules apply.",
      "created_at": "2017-09-13T15:21:16Z",
      "updated_at": "2017-09-13T15:23:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I can see value in standardizing and differentiating between 0.y.z and 0.0.z.  I would be fine starting with `0.0.1` and if a user wants to use `0.1.0`, they can certainly specify that.",
      "created_at": "2017-09-13T16:29:35Z",
      "updated_at": "2017-09-13T16:29:35Z"
    },
    {
      "author": "LDSpits",
      "author_association": "CONTRIBUTOR",
      "body": "I'm willing to pick up this issue. Can I get it assigned? Looks relatively easy to implement.",
      "created_at": "2017-09-14T11:49:03Z",
      "updated_at": "2017-09-14T14:15:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LDSpits consider it assigned to you as GitHub doesn't let me assign to people to you.  I'll set it assigned to me so someone else doesn't duplicate your effort.  Thanks!  We generally label issues `Up-for-grabs` that we think are easy and not high priority.",
      "created_at": "2017-09-14T14:52:07Z",
      "updated_at": "2017-09-14T14:53:15Z"
    }
  ],
  "created_at": "2017-09-12T22:23:25Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Cmdlets-Core"
  ],
  "number": 4823,
  "state": "closed",
  "title": "New-ModuleManifest should set ModuleVersion to 0.1 by default",
  "updated_at": "2017-09-18T23:40:46Z"
}