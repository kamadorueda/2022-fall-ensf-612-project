{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13769",
  "author": "mklement0",
  "body": "See also: #11752\r\n\r\n## Summary of the new feature/enhancement\r\n\r\n`Select-Object -Index` allows me to select a subset of the input objects by an array of indices (`0`-based positions in the input stream):\r\n\r\n```powershell\r\nPS> 1..5 | Select-Object -Index 1, 3  # here the same as: (1..5)[1,3]\r\n2\r\n4\r\n```\r\n\r\nIt would be helpful to be able to select the _complement_, i.e. all elements _other_ than the ones specified, using a new `-NotIndex` parameter:\r\n\r\n_Update_: The original proposal suggested a separate `-Not` switch to be combined with `-Index`, but this was changed based on @jhoneill's suggestion.\r\n\r\n```powershell\r\n# WISHFUL THINKING: -Not returns everything *but* the objects at the specified positions.\r\nPS> 1..5 | Select-Object -NotIndex 1, 3 \r\n1\r\n3\r\n5\r\n```\r\n\r\nFor instance, it would allow you to exclude a line with a given number from an array of a file's input lines:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> 1..3 + 'exclude me' + 4..5 > sample.txt; Get-Content sample.txt | Select-Object -NotIndex 3\r\n1\r\n2\r\n3\r\n4\r\n5\r\n```\r\n\r\nNote: While it is hypothetically possible to allow _combining_ `-Index` with `-NotIndex`,  it wouldn't be easy to reason about by the user and is probably of little practical value.\r\nThus, `-Index` and `-NotIndex` should be made mutually exclusive.\r\n\r\n",
  "closed_at": "2020-10-11T17:48:52Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Probably a single -NotIndex would be better.  Otherwise people would wonder if you can do -not -first (where skip already exists) and similar. \r\n\r\nWhile looking at this\r\n`1..5 | select  -First 2 -last 1 -Skip 1`   Works on 7..0.3  as I'd expect (i.e. it gives 2,3 and 5)\r\n`1..5 | select  -last 2 -Skip 1 `   skips the last 1 and gives the last 2 before that. Not sure what I'd expect it to do, or that this is \"right\"  \r\n\r\n`1..5 | select  -SkipLast 3` works but -skiplast won't combine with -first or -last.\r\n\r\n",
      "created_at": "2020-10-11T08:33:53Z",
      "updated_at": "2020-10-11T08:33:53Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Maybe -skip <int[]> (range) would be better?",
      "created_at": "2020-10-11T10:39:30Z",
      "updated_at": "2020-10-11T10:39:30Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Maybe -skip <int[]> (range) would be better?\r\n\r\n`-Skip 7,8,9` sounds OK for skipping 3 items by index  and `-skip (7..9)` for the same does as well. The problem is that `-skip 7` is already skipping the first 7 items so a version of `-skip 7...` which _included_ 1..6 would make it easier to confuse people, would `skip 7,10`  suggest 7 _to_ 10, 7 _and_ 10, or starting at 7 _continuing for_ 10 \r\n\r\n\r\n\r\n",
      "created_at": "2020-10-11T11:14:33Z",
      "updated_at": "2020-10-11T11:14:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that `-Skip` is not an option due to the existing semantics; it would also lack symmetry with `-Index`.\r\n\r\nI do see the appeal of `-NotIndex`, so I've updated the OP accordingly - thanks, @jhoneill.\r\n\r\n\r\n",
      "created_at": "2020-10-11T14:39:19Z",
      "updated_at": "2020-10-11T14:39:19Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`-SkipIndex` does exist already (though appears to be missing in help?), but all of the `-Skip*` parameters feel really awkward to use interactively imo. I personally like the `-Not` switch better, here's how I picture it working:\r\n\r\n```powershell\r\n0..2 | select -Not -Index 1\r\n# 0\r\n# 2\r\n\r\n0..5 | select -Not -First 2 -Last 1\r\n# 2\r\n# 3\r\n# 4\r\n\r\n0..5 | select -Not -Skip* 3\r\n# throw\r\n```\r\n\r\nUnsure if it's worth it while they already exist in different forms though \ud83e\udd37",
      "created_at": "2020-10-11T14:54:31Z",
      "updated_at": "2020-10-11T14:56:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience - indeed it was the omission of `-SkipIndex` from an outdated local help file that made me miss that parameter. (`Update-Help` fixes the problem, and `Get-Command -Syntax Select-Object` would have shown it either way).\r\n\r\nAs for a `-Not` as a general switch that negates whatever the other switches select: I think it probably isn't worthwhile, as the coexistence with `-Skip` may create confusion, as you say.\r\n\r\n---\r\n\r\n`-Skip` is particularly awkward in combination with `-Last`, as @jhoneill's example shows: \r\n* If `-First` _isn't_ also present, it is interpreted as a _negative_ offset from the _end_.\r\n* If `-First` is (also) present, it is always interpreted as a positive offset from the start (only).\r\n\r\n```powershell\r\nPS> 1, 2, 3, 4, 5 | Select-Object -First 1 -Skip 1 -Last 2\r\n2\r\n4\r\n5   # Due to presence of -First, -Skip had no effect on -Last\r\n\r\nPS> 1, 2, 3, 4, 5 | Select-Object -Skip 1 -Last 2\r\n3\r\n4 # Due to absence of -First, -Skip acted as negative offset from the end.\r\n\r\n# Edge case, though still worrisome:\r\nPS> 1, 2, 3, 4, 5 | Select-Object -First 0 -Skip 1 -Last 2\r\n3\r\n4   # -First 0 acted like not specifying -First at all\r\n```\r\n\r\n\r\n",
      "created_at": "2020-10-11T17:48:52Z",
      "updated_at": "2020-10-11T17:50:41Z"
    }
  ],
  "created_at": "2020-10-10T19:48:21Z",
  "number": 13769,
  "state": "closed",
  "title": "Select-Object: Add a -NotIndex parameter to complement -Index to select all BUT the objects at the specified positions",
  "updated_at": "2020-10-11T17:50:41Z"
}