{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1654",
  "author": "Krishna-Vutukuri",
  "body": "## Steps to reproduce\r\n1. Install PowerShell on Ubuntu 14.04\r\n2. Launch PowerShell\r\n3. Run the following:\r\n```powershell\r\n   $password = Convertto-Securestring -String \"PowerShellRocks!\" -AsPlainText -Force\r\n   ConvertFrom-SecureString $password  \r\n```\r\n## Expected behavior\r\n\r\nNo error\r\n## Actual behavior\r\n\r\nThe following error is thrown\r\n```\r\nPS /home/chythu/temp> ConvertFrom-SecureString $password                        ConvertFrom-SecureString : Unable to load DLL 'CRYPT32.dll': The specified\r\nmodule could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:1\r\n- ConvertFrom-SecureString $password\r\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  - CategoryInfo          : NotSpecified: (:) [ConvertFrom-SecureString], Dl\r\n    lNotFoundException\r\n  - FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell\r\n    .Commands.ConvertFromSecureStringCommand\r\n```\r\n## Environment data\r\n```\r\nName                           Value\r\n---\r\nPSVersion                      5.1.10032.0\r\nPSEdition                      PowerShellCore\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.7\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n# Updates by @travisez13 on 2016-04-10\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.2                                           \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.2                                          \r\nOS                             Darwin 17.5.0 Darwin Kernel Version 17.5.0: M...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n\r\n\r\n```\r\n\r\n## Workaround\r\n\r\nThe following works\r\n ```Powershell\r\n# you should generate your own key\r\n$Key = (3,4,2,3,56,34,254,222,1,1,2,23,42,54,33,233,1,34,2,7,6,5,35,43)       \r\n$s  | ConvertFrom-SecureString -Key $Key                                      \r\n```",
  "closed_at": "2019-03-23T17:11:06Z",
  "comments": [
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/security/SecureStringHelper.cs#L449\n\nSeems to be CoreCLR that is lacking.\n",
      "created_at": "2016-08-05T00:23:22Z",
      "updated_at": "2016-08-05T00:23:22Z"
    },
    {
      "author": "hiteshraigandhi",
      "author_association": "CONTRIBUTOR",
      "body": "Talked @KrishnaV-MSFT This is not needed for Azure demo. Moving it out of Alpha.10\n",
      "created_at": "2016-08-10T00:19:26Z",
      "updated_at": "2016-08-10T00:19:26Z"
    },
    {
      "author": "jaredmichaelwilliams",
      "author_association": "NONE",
      "body": "Came across the same error on MacOS 10.12 Beta (16A270f)\n\nWas just messing around got this:\n\n```\nPS> $User=\"Jared\"\nPS> $PWord = ConvertTo-SecureString \u2013String \"TestString\" \u2013AsPlainText -Force   \nPS> $Cred = New-Object -TypeName \"System.Management.Automation.PSCredential\" \u2013ArgumentList $User, $PWord\nPS> ConvertFrom-SecureString -SecureString ($Cred.Password)\n```\n\nResult:\n\n```\nConvertFrom-SecureString : Unable to load DLL 'CRYPT32.dll': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\nAt line:1 char:1\n+ ConvertFrom-SecureString -SecureString ($Cred.Password)\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-SecureString], DllNotFoundException\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ConvertFromSecureStringComman\n```\n",
      "created_at": "2016-08-18T17:53:26Z",
      "updated_at": "2016-08-18T17:54:58Z"
    },
    {
      "author": "35359595",
      "author_association": "NONE",
      "body": "Hi,\n\nsame library error when trying to use mapped cert: psdrive:\n\n`Get-ChildItem Cert:/LocalMachine/`\n\nError:\n\n> get-childitem : Unable to load DLL 'crypt32.dll': The specified module could not be found.\n>  (Exception from HRESULT: 0x8007007E)\n> At line:1 char:1\n> - get-childitem Cert:/LocalMachine/\n> - ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n>   - CategoryInfo          : NotSpecified: (:) [Get-ChildItem], DllNotFoundException\n>   - FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.GetChildItemCommand\n",
      "created_at": "2016-10-02T15:14:02Z",
      "updated_at": "2016-10-02T15:14:02Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@35359595 good finding! The error definitely should be friendlier. On Linux and macOS `Cert:/` provider needs some re-thinking. The way these two systems approach storing certificates are completely different from each other and windows.\n",
      "created_at": "2016-10-02T20:26:44Z",
      "updated_at": "2016-10-02T20:27:04Z"
    },
    {
      "author": "ChrisMagnuson",
      "author_association": "NONE",
      "body": "Fyi, 16.04.1 with PowerShell v6 alpha 14 still has this same issue",
      "created_at": "2017-01-04T19:06:44Z",
      "updated_at": "2017-01-04T19:06:44Z"
    },
    {
      "author": "ngetchell",
      "author_association": "NONE",
      "body": "This is holding me back from bringing my modules over to Linux. I'd like to be able to store Web API keys securely on all OSes, not just Windows. ",
      "created_at": "2017-02-12T21:11:46Z",
      "updated_at": "2017-02-12T21:11:46Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This is something we'll only be able to enable with the .NET Standard 2.0 APIs that bring back SecureString: \r\n* CoreFX Issue: dotnet/corefx#13062\r\n* CoreFX 2.0 PR: dotnet/corefx#13362",
      "created_at": "2017-02-13T18:02:10Z",
      "updated_at": "2017-02-13T18:02:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`ConvertFrom-SecureString` and `ConvertTo-SecureString` depend on `System.Security.Cryptography.ProtectedData`, which is still not available in [`netstandard2.0`](https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md).\r\nSo these 2 cmdlets need to be re-worked on Unix platforms.",
      "created_at": "2017-04-13T16:38:53Z",
      "updated_at": "2017-04-13T16:39:44Z"
    },
    {
      "author": "reddwarf666",
      "author_association": "NONE",
      "body": "I would really appreciate it if this functionality comes to .Net Core\r\nWe rely on WinRM and use PSCredential to authenticate. Running our scripts on Linux or MacOS is not possible right now and it's holding us back a bit.\r\n\r\nError we see:\r\nConvertTo-SecureString : Unable to load DLL 'CRYPT32.dll': The specified module could not be found.\r\n (Exception from HRESULT: 0x8007007E)",
      "created_at": "2017-05-14T12:35:25Z",
      "updated_at": "2017-05-14T12:35:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@reddwarf666 The package [`System.Security.Cryptography.ProtectedData`](https://www.nuget.org/packages/System.Security.Cryptography.ProtectedData/4.4.0-preview1-25305-02) is available on nuget.org and is netstandard2.0 complaint, However, it doesn't have implementation for Unix platforms -- it will throw 'PlatformNotSupportedException' on Unix platformas. So `ConvertFrom/ConvertTo-SecureString` need to be re-written for Unix. We will try to get some guidance from .NET Core team on how to do the same tasks on Unix. /cc @joeyaiello ",
      "created_at": "2017-05-15T17:57:45Z",
      "updated_at": "2017-05-15T17:57:45Z"
    },
    {
      "author": "nowakca",
      "author_association": "NONE",
      "body": "Would [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR and [System.Runtime.InteropServices.Marshal]::PtrToStringAuto likely come along for the ride?",
      "created_at": "2017-06-11T14:29:15Z",
      "updated_at": "2017-06-11T14:29:15Z"
    },
    {
      "author": "GoateePFE",
      "author_association": "NONE",
      "body": "Still seeing this on 6.0.0-beta3 on Mac and Linux when using SecureString cmdlets.\r\n\r\nConvertFrom-SecureString : Unable to load DLL 'CRYPT32.dll': The specified \r\nmodule or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\n",
      "created_at": "2017-06-23T15:19:55Z",
      "updated_at": "2017-06-23T15:19:55Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "same here with convertfrom-securestring and convertto-securestring (v6.0.0-beta.3) on linux debian (jessie 64bit):\r\n```\r\nPS /> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.3\r\nOS                             Linux 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u2 (2017-06-26)\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS />\r\n\r\n```\r\n```\r\nPS /> read-host -assecurestring | convertfrom-securestring | out-file securestring.txt\r\n********\r\nconvertfrom-securestring : Unable to load DLL 'CRYPT32.dll': The specified module or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:29\r\n+ read-host -assecurestring | convertfrom-securestring | out-file secur ...\r\n+                             ~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertFrom-SecureString], DllNotFoundException\r\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ConvertFromSecureStringCommand\r\n```\r\n\r\n```\r\nPS /> $pass = cat securestring.txt | convertto-securestring\r\nconvertto-securestring : Unable to load DLL 'CRYPT32.dll': The specified module or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:32\r\n+ $pass = cat securestring.txt | convertto-securestring\r\n+                                ~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [ConvertTo-SecureString], DllNotFoundException\r\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ConvertToSecureStringCommand\r\n```\r\n\r\ni tried copying the file from windows server 2012r2 (64bit) and loading it with having the file in current directory:\r\n```\r\nPS /> [Reflection.Assembly]::LoadFrom(\"CRYPT32.dll\")\r\nException calling \"LoadFrom\" with \"1\" argument(s): \"Bad IL format.\"\r\nAt line:1 char:1\r\n+ [Reflection.Assembly]::LoadFrom(\"CRYPT32.dll\")\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : BadImageFormatException\r\n```\r\n\r\n```\r\nPS /> Add-Type -Path 'CRYPT32.dll'\r\nAdd-Type : Bad IL format.\r\nAt line:1 char:1\r\n+ Add-Type -Path 'CRYPT32.dll'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Add-Type], BadImageFormatException\r\n    + FullyQualifiedErrorId : System.BadImageFormatException,Microsoft.PowerShell.Commands.AddTypeCommand\r\n```\r\n\r\ncopying to /opt/microsoft/powershell/6.0.0-beta.3/ and also when specified the absolute path, gives same error as above.\r\n\r\nis there a workaround possible/known or do we have to wait until this is fixed?",
      "created_at": "2017-07-01T07:08:43Z",
      "updated_at": "2017-07-01T12:27:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vchrizz Windows and Unix isn't binary compatible and we cannot use Windows dll on Unix. So we should wait CoreFX.",
      "created_at": "2017-07-01T17:00:02Z",
      "updated_at": "2017-07-01T17:00:02Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "@iSazonov i'm aware of this, was wondering because of those .dll files in /opt/microsoft/powershell/6.0.0-beta.3/ but then found out:\r\nlinux .dll files:\r\n\"PE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\"\r\n\"PE32+ executable (DLL) (console) Mono/.Net assembly, for MS Windows\"\r\nwindows CRYPT32.dll file:\r\n\"PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\"\r\n\r\nnow looking for a workaround and found the same problem with Export-Clixml:\r\n```\r\nPS /> $cred=Get-Credential \u2013credential \"myuser\" | Export-Clixml SecureCredentials.xml\r\n\r\nWindows PowerShell credential request\r\nEnter your credentials.\r\nPassword for user myuser: **********\r\n\r\nExport-Clixml : Unable to load DLL 'CRYPT32.dll': The specified module or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:45\r\n+ ... Credential \u2013credential \"myuser\" | Export-Clixml SecureCredentials.xml\r\n+                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Export-Clixml], DllNotFoundException\r\n    + FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ExportClixmlCommand\r\n```",
      "created_at": "2017-07-02T13:20:11Z",
      "updated_at": "2017-07-02T13:21:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vchrizz Currently .Net CLI puts all assemblies in Unix packages.  #3961 track the Unix packaging.",
      "created_at": "2017-07-02T15:43:22Z",
      "updated_at": "2017-07-02T15:43:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw We could use [OpenSSH](https://www.howtoforge.com/tutorial/linux-commandline-encryption-tools/) to protect/unprotect data.",
      "created_at": "2017-07-02T16:01:26Z",
      "updated_at": "2017-07-02T16:01:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'd rather we don't do a custom thing for non-Windows.  Looks like Nuget team is also asking for this.",
      "created_at": "2017-07-20T18:45:27Z",
      "updated_at": "2017-07-20T18:45:27Z"
    },
    {
      "author": "psmulovics",
      "author_association": "NONE",
      "body": "@SteveL-MSFT , can confirm that the nuget team needs it ( NuGet/Home#1851 ), as I was the one who brought up with them as a missing functionality",
      "created_at": "2017-07-20T20:33:54Z",
      "updated_at": "2017-07-20T20:33:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @psmulovics It seems CoreFX team don't track closed issues at all - I believe we should  open new Issue there if we want any progress.",
      "created_at": "2017-07-21T03:38:50Z",
      "updated_at": "2017-07-21T03:38:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Created new issue https://github.com/dotnet/corefx/issues/22510",
      "created_at": "2017-07-21T22:14:38Z",
      "updated_at": "2017-07-21T22:14:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It worked! \ud83d\ude04 Now we have a answer:\r\n>We have no plans to do this. It requires OS features that are only available on Windows. \r\n..\r\nWhat we have in .NET Core is clear. On Windows it does whatever DPAPI does. On non-Windows it does what Windows DPAPI does on those platforms: not exist.\r\n\r\nSo we should conclusion:\r\n1. Use the package [`System.Security.Cryptography.ProtectedData`](https://www.nuget.org/packages/System.Security.Cryptography.ProtectedData/4.4.0-preview1-25305-02) on Windows and block the feature on other planforms.\r\n2. Create workaround for other planforms. - If so I believe we should open a new Issue for tracking.",
      "created_at": "2017-07-22T20:28:32Z",
      "updated_at": "2017-07-22T20:28:32Z"
    },
    {
      "author": "ngetchell",
      "author_association": "NONE",
      "body": "Thanks for looking into this. \r\n\r\n@iSazonov would option 2 also bring in System.Runtime.InteropServices.Marshal ? ",
      "created_at": "2017-07-22T21:55:07Z",
      "updated_at": "2017-07-22T21:55:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I suppose at least we have clarity on why it won't be done instead of just getting the issue closed.  Since this isn't a small work item, I think we'll look into it for 6.1.0",
      "created_at": "2017-07-23T04:06:18Z",
      "updated_at": "2017-07-23T04:06:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT For backward compatibility with Windows PowerShell I believe it is good to use  System.Security.Cryptography.ProtectedData today.\r\n\r\n@ngetchell The workaround as described in the CoreFX Issue, requires  too much specific work so we shall wait CoreFX. Possible workaround for Unix systems may be - to use a remote connection to windows systems.",
      "created_at": "2017-07-24T04:29:44Z",
      "updated_at": "2017-07-24T04:29:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the repro works for me with beta.4 on Windows, I believe the issue is only on non-Windows currently",
      "created_at": "2017-07-24T17:07:47Z",
      "updated_at": "2017-07-24T17:07:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Sorry for the inaccuracy, under  System.Security.Cryptography.ProtectedData  I meant _CoreFX package_. Currently we use internal implementation. Questions is - should we remove the internal code and migrate to the package? Should we remove *-SecureString cmdlets from Unix?",
      "created_at": "2017-07-25T10:20:47Z",
      "updated_at": "2017-07-25T10:20:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I believe we should move to the official package.  As for Unix, it seems like the right thing to do is to remove them.  cc @joeyaiello ",
      "created_at": "2017-07-25T20:00:12Z",
      "updated_at": "2017-07-25T20:00:12Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Just want to *ping* this story again.\r\nIs it still the plan to _remove_ the ConvertTo/ConvertFrom SecureString cmdlets?\r\nWhat about the handling of Credentials and SecureStrings in Import/Export CliXml?\r\n\r\nAll of these are still throwing the very unfriendly DllNotFoundException from HRESULT ...",
      "created_at": "2017-11-13T06:03:50Z",
      "updated_at": "2017-11-13T06:03:50Z"
    },
    {
      "author": "forgottentq",
      "author_association": "NONE",
      "body": "I have the same issue with CRYPT32.dll error on Linux when using Export-Clixml cmdlet.   PS Version 6.0.0 ",
      "created_at": "2018-01-21T14:35:23Z",
      "updated_at": "2018-01-21T14:35:23Z"
    },
    {
      "author": "cenit",
      "author_association": "NONE",
      "body": "Same here. Since we are discussing about portability of some scripts, it would be wonderful to know if we have to work around the problem or if something is going to be done on the `pwsh` or `CoreFX` side (the latter seems not).",
      "created_at": "2018-01-22T15:04:47Z",
      "updated_at": "2018-01-22T15:04:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@cenit Perhaps we'll use [Windows Compatibility Pack](https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/)",
      "created_at": "2018-01-22T17:29:44Z",
      "updated_at": "2018-01-22T17:29:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it's my understanding that SecureString depends on specific OS support which is not available on non-Windows and not part of the Windows Compatibility Pack.\r\n\r\nWe should provide a better error message even though this won't work.",
      "created_at": "2018-01-22T22:13:48Z",
      "updated_at": "2018-01-22T22:13:48Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "Is there some possible alternative to the *-SecureString cmdlets on Unix if they will be removed?\r\nSorry if i missed it, give me a pointer on why it is not possible on unix. What is the missing \"os-specific\" part required on unix?\r\nHow else could one handle credentials to get them in the correct format and further use them?",
      "created_at": "2018-01-22T23:21:09Z",
      "updated_at": "2018-01-22T23:21:09Z"
    },
    {
      "author": "cenit",
      "author_association": "NONE",
      "body": "I think this Issue on CoreFX sums it perfectly: https://github.com/dotnet/corefx/issues/22510\r\nIt also seems that no progress is being done, unfortunately.",
      "created_at": "2018-01-22T23:24:47Z",
      "updated_at": "2018-01-22T23:24:47Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "thanks, that explains it very well.",
      "created_at": "2018-01-22T23:38:49Z",
      "updated_at": "2018-01-22T23:38:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Using WCP assume using common pattern ` if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) { ... }` \r\nIf some API is absent in WCP we could feedback in WCP repo. But even without it we can use the common pattern combined with `#if !UNIX`.",
      "created_at": "2018-01-23T04:05:09Z",
      "updated_at": "2018-01-23T04:05:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov for this specific issue I don't believe WCP will solve this as the SecureString type is really an empty implementation on non-Windows.",
      "created_at": "2018-01-24T01:26:54Z",
      "updated_at": "2018-01-24T01:26:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I like it anyway. \ud83d\ude04 ",
      "created_at": "2018-01-24T05:12:33Z",
      "updated_at": "2018-01-24T05:12:33Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, I'm editing this to make sure I got it straight... \r\n\r\n1. There was no SecureString implementation except on Windows.\r\n2. The PowerShell team mocked it, so they could avoid changing all their APIs that require it.\r\n3. Then the .NET team implemented it but only the short-term in-memory protection\r\n4. So trying to serialize a (in)SecureString crashes except on Windows, because the whole function is now Windows only, but is *exposed* everywhere...\r\n\r\nDespite the early warning of this from 18 months ago\r\n\r\nDespite the _extremely clear_ message from the .Net Framework team 6 months ago.\r\n\r\n\ud83d\ude44 ",
      "created_at": "2018-01-26T05:04:18Z",
      "updated_at": "2018-01-26T15:43:35Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "The bottom line is that the .NET framework (and PowerShell) needs a cross-platform data protection library, because dev/ops need to store secrets didn't just suddenly disappear when we added new OSes to the mix, and it's not always practical to rely on web services like Azure KeyVault, RED Identity management, or Thycotic Secret Server. \ud83d\ude15 \r\n\r\nThe .NET team is apparently not inclined to be particularly helpful here.\r\n\r\nI know that ASP.NET wrote their own [DataProtection](https://github.com/aspnet/DataProtection) stuff, but it's fairly weird and they recommend limiting it's use to specific scenarios...\r\n\r\nWhat we need to know is: \r\n\r\n## Does the PowerShell team plan to create a cross-platform implementation of SecureString serialization?\r\n\r\nIf not, please remove the cmdlets that do not work at all, and provide a better error message for CliXML than the current, \"oh darn, if only there was a Crypto dll available\" error.\r\n\r\n",
      "created_at": "2018-01-26T15:59:12Z",
      "updated_at": "2018-01-26T15:59:12Z"
    },
    {
      "author": "psmulovics",
      "author_association": "NONE",
      "body": "Check out related items:\r\nNuGet/Home#1851\r\ndotnet/corefx#6746",
      "created_at": "2018-01-26T16:15:32Z",
      "updated_at": "2018-01-26T16:15:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could use ASP.NET DataProtection. This is the most reliable of what is available today. Especially as we need quite a bit.",
      "created_at": "2018-01-26T16:35:11Z",
      "updated_at": "2018-01-26T16:35:11Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "I'm trying to read a password securely, to pass into a MySQL command line. What's the recommended alternative, so that I'm not echoing passwords to the console as I type them?\r\n\r\n### Repro Steps\r\n\r\n```\r\n$str = Read-Host -AsSecureString\r\nConvertFrom-SecureString -SecureString $str\r\n```\r\n\r\n### Result\r\n\r\n```\r\nConvertFrom-SecureString : Unable to load DLL 'CRYPT32.dll': The specified module or one of its dependencies could not be found.\r\n (Exception from HRESULT: 0x8007007E)\r\nAt line:1 char:1\r\n+ ConvertFrom-SecureString -SecureString $str\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [ConvertFrom-SecureString], DllNotFoundException\r\n+ FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ConvertFromSecureStringCommand\r\n```",
      "created_at": "2018-03-22T02:00:48Z",
      "updated_at": "2018-03-22T02:00:48Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pcgeek86 This is one solution to get the Plain text string from a securestring on linux:\r\n\r\n```powershell\r\n$str = Read-Host -AsSecureString\r\n$plaintext = [System.Net.NetworkCredential]::new('',$str).Password\r\n```",
      "created_at": "2018-03-22T09:00:31Z",
      "updated_at": "2018-03-22T09:00:31Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I added another workaround in the description",
      "created_at": "2018-04-11T01:40:31Z",
      "updated_at": "2018-04-11T01:40:31Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "Handling secrets on Linux seems to be quite a mess. There are many implementation efforts and outdated projects.\r\n\r\nIt seems Gnome is or was using the [Secret Service API](https://specifications.freedesktop.org/secret-service/). [libsecret](https://developer.gnome.org/libsecret/) seems to be a library to access secrets using the Secret Service bus.\r\n\r\nMac OS X allows to interact with the Keychain via the `security` command line utility or programmatically via the [Keychain Services](https://developer.apple.com/documentation/security/keychain_services).\r\n\r\n[QtKeychain](https://github.com/frankosterfeld/qtkeychain) is an approach to create a platform independent password and secret manager for Linux (using libsecret), Mac OS X (using the Key Chain) and Windows (using the Windows Credential Store) and is probably closest to what is required for PowerShell. Could we use this as a starting point?",
      "created_at": "2018-06-07T15:55:48Z",
      "updated_at": "2018-06-07T15:55:48Z"
    },
    {
      "author": "splatteredbits",
      "author_association": "NONE",
      "body": "Until this gets fixed, here's code to securely pass a credential to a background job:\r\n\r\n```\r\n\r\n$credentialKey = New-Object 'byte[]' (256/8)\r\n$rng = New-Object 'Security.Cryptography.RNGCryptoServiceProvider'\r\n$rng.GetBytes($credentialKey)\r\n\r\n$serializableCredential = [pscustomobject]@{ \r\n                                                UserName = $credential.UserName;\r\n                                                Password = ConvertFrom-SecureString -SecureString $credential.Password -Key $credentialKey\r\n                                            }\r\n\r\n$job = Start-Job {\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [byte[]]\r\n        $Key\r\n    )\r\n    $serializedCredential = $using:serializableCredential\r\n\r\n    $password = ConvertTo-SecureString -String $serializedCredential.Password -Key $Key\r\n    $credential = New-Object 'PSCredential' ($serializedCredential.UserName,$password)\r\n    [Array]::Clear($Key,0,$Key.Length)\r\n} -ArgumentList (,$credentialKey) | Wait-Job | Receive-Job\r\n\r\n[Array]::Clear($credentialKey,0,$credentialKey.Length)\r\n   \r\n```",
      "created_at": "2019-01-23T21:17:36Z",
      "updated_at": "2019-01-23T21:18:01Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "> Password = ConvertFrom-SecureString -SecureString $credential.Password -Key $credentialKey\r\n\r\nhow is this supposed to work if this has an issue itself?\r\n\r\nanyways, tried your script though but got error:\r\n\r\n    ConvertFrom-SecureString : Cannot bind argument to parameter 'SecureString' because it is null.\r\n    At /home/myusername/powershell.ps1:7 char:99\r\n    + ... = ConvertFrom-SecureString -SecureString $credential.Password -Key $c ...\r\n    +                                              ~~~~~~~~~~~~~~~~~~~~\r\n\r\nso i tried to define username and password in a variable but:\r\n\r\n    ConvertFrom-SecureString : Cannot bind parameter 'SecureString'. Cannot convert the \"testpassword\" value of type \"System.String\" to type \"System.Security.SecureString\".",
      "created_at": "2019-02-05T09:41:28Z",
      "updated_at": "2019-02-05T09:41:28Z"
    },
    {
      "author": "KKomarov",
      "author_association": "NONE",
      "body": "Why there is no separate issue for passing secure string over psremote? All opened issues closed as duplicates of this. In my opinion problem is different.\r\nPSRemote hangs during key exchange due to lack of CryptoAPI implementation on Linux.\r\nWho interested it hangs here https://github.com/PowerShell/PowerShell/blob/5ece96a37fc9bb5cda962b32741b00396ae0f135/src/System.Management.Automation/utils/CryptoUtils.cs#L1117\r\nBtw, we can add exception handler showing message that securestring not supported yet ^ it's quite hard to realise it related to securestrings if it hangs like that.\r\nI think psremoting can be fixed without fixing `ConvertFrom-SecureString` commandlet, because we don't need to store keys on machine for later use. We need only generate rsa 2048 key pair, crypt/decrypt using rsa, crypt decrypt using AES CBC crossplatform.\r\n\r\nSome good news there is crossplatform workaround.\r\n**Workaround for PSRemoting**\r\nUse python fresh implementation of PSRP [pypsrp](https://github.com/jborean93/pypsrp) it supports securestrings!",
      "created_at": "2019-03-14T09:29:08Z",
      "updated_at": "2019-03-14T09:29:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KKomarov Please open new issue with repo steps and your suggestion.",
      "created_at": "2019-03-14T09:54:50Z",
      "updated_at": "2019-03-14T09:54:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KKomarov the hang has been fixed in PSCore6.2-RC as part of https://github.com/PowerShell/PowerShell/issues/8723 already.  The ability to actually send secure strings over for non-Windows should be a separate issue.",
      "created_at": "2019-03-15T17:48:03Z",
      "updated_at": "2019-03-15T17:48:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "DE0001: SecureString shouldn't be used\r\nhttps://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md#de0001-securestring-shouldnt-be-used",
      "created_at": "2019-03-15T18:11:07Z",
      "updated_at": "2019-03-15T18:11:07Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\n> DE0001: SecureString shouldn't be used\r\n> https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md#de0001-securestring-shouldnt-be-used\r\n\r\nWhile that's nice in a perfect ivory tower world, in Powershell we are constantly gluing things together and that requires authenticating in whatever format that application requires, be it rest API, legacy application that only supports Basic authenticaiton, etc. We can't just simply \"use windows credentials or certificates\" for everything as this recommendation states, that's a nice recommendation for developing a new app, but not what we use powershell for.\r\n\r\nIt's not like PSCredential is going anywhere which is an implementation of SecureString, so until we have something in .net core that can use a TPM to encrypt keys or something, we need a \"good enough\" option.\r\n\r\nSomething like using AES256 and having the encryption key be a 600 permission-ed file on the non-windows file system is a possible start, not much worse than using the Crypto API in Windows",
      "created_at": "2019-03-19T16:38:46Z",
      "updated_at": "2019-03-19T16:39:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I added the link for information only.\r\n\r\nEssentially:\r\n1. It is impossible to port SecureString because System.Security.Cryptography.ProtectedData is Windows-only. There is no plans to port the API. Core team deprecate the API.\r\n2. We can keep backward compatibility for SecureString on Windows (including remoting)\r\n3. PowerShell Core must remain flexible and allow to work with legacy applications.\r\n4. It is acceptable to use basic authentication in protected environment\r\n5. Main problem how to detect protected environment vs public environment and what to do (prevent basic authentication, only warn, ...).",
      "created_at": "2019-03-20T05:06:23Z",
      "updated_at": "2019-03-20T05:06:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Early on, the @PowerShell/powershell-committee discussed introducing a `SensitiveString` to replace the functional need of `SecureString` even though both are not secure (the `SecureString` type would still be needed for backwards compat).  A type (whether \"Sensitive\" or \"Secure\" is needed to indicate to PowerShell to prompt without echoing the input so it's used more than just for remoting.  As for the original issue of this bug, this has been fixed (you don't get an error anymore), just keep in mind the SecureString is internally in plain text.",
      "created_at": "2019-03-20T19:09:41Z",
      "updated_at": "2019-03-20T19:09:41Z"
    },
    {
      "author": "vchrizz",
      "author_association": "NONE",
      "body": "thanks for the update, looks promising!\r\nmay we ask for an approximately timeframe when to expect to be able to utilize this (e.g. in microsoft-debian-stretch-prod debian repository)?",
      "created_at": "2019-03-21T00:45:02Z",
      "updated_at": "2019-03-21T00:45:02Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "> As for the original issue of this bug, this has been fixed (you don't get an error anymore), just keep in mind the SecureString is internally in plain text.\r\n\r\nDoes anyone have a link to the fix or know what release version it will be available in? I'm still getting crypt32.dll errors in powershell_6.1.3-1.ubuntu.16.04_amd64.deb (same deal with the 6.2.0-rc.1 preview package).\r\n\r\nI'm also curious how this fix affects Import/Export-CliXml when the data to be serialized contains SecureString or PSCredential objects.",
      "created_at": "2019-03-21T05:03:35Z",
      "updated_at": "2019-03-21T05:23:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rmbolger Could you please check with latest build (6.2.0-RC)?",
      "created_at": "2019-03-21T06:44:21Z",
      "updated_at": "2019-03-21T06:44:21Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm seeing the same as @rmbolger \r\n\r\n```\r\n/home/hillr\r\n03-20 23:44:55 31ms 11> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-rc.1\r\nOS                             Linux 4.4.0-17763-Microsoft #379-Microsoft Wed Mar 06 19:16:00 PST 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n/home/hillr\r\n03-21 00:47:45 35ms 12> ConvertFrom-SecureString -SecureString $ss\r\nConvertFrom-SecureString : Unable to load shared library 'CRYPT32.dll' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libCRYPT32.dll: cannot open shared object file: No such file or directory\r\nAt line:1 char:1\r\n+ ConvertFrom-SecureString -SecureString $ss\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [ConvertFrom-SecureString], DllNotFoundException\r\n+ FullyQualifiedErrorId : System.DllNotFoundException,Microsoft.PowerShell.Commands.ConvertFromSecureStringCommand\r\n```",
      "created_at": "2019-03-21T06:48:24Z",
      "updated_at": "2019-03-21T06:49:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The cmdlets load directly the CRYPT32.dll\r\nhttps://github.com/PowerShell/PowerShell/blob/8763c0b1d11ce3ee8639e9386383f158976490e0/src/Microsoft.PowerShell.Security/security/SecureStringCommands.cs#L169\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/8763c0b1d11ce3ee8639e9386383f158976490e0/src/System.Management.Automation/security/SecureStringHelper.cs#L158\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/8763c0b1d11ce3ee8639e9386383f158976490e0/src/System.Management.Automation/security/SecureStringHelper.cs#L449\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/8763c0b1d11ce3ee8639e9386383f158976490e0/src/System.Management.Automation/security/SecureStringHelper.cs#L590",
      "created_at": "2019-03-21T17:36:07Z",
      "updated_at": "2019-03-21T17:36:07Z"
    }
  ],
  "created_at": "2016-08-04T22:32:05Z",
  "labels": [
    "Issue-Bug",
    "OS-macOS",
    "OS-Linux",
    "WG-Cmdlets",
    "Resolution-Fixed"
  ],
  "number": 1654,
  "state": "closed",
  "title": "ConvertFrom-SecureString is broken on Linux",
  "updated_at": "2019-03-23T17:21:32Z"
}