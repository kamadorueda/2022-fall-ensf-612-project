{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8154",
  "author": "dermeister0",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n\r\nRun PowerShell script from Jenkins or another Windows service.\r\n\r\n```groovy\r\nbat 'pwsh -File C:\\\\Temp\\\\Test.ps1 -NonInteractive -NoProfile'\r\nbat 'powershell -File C:\\\\Temp\\\\Test.ps1 -NonInteractive -NoProfile'\r\n```\r\n\r\nThe `NonInteractive` option changes behavior of some cmdlets (Read-Host, Get-Credential), but it's not used to detect if user is able to type text in terminal. It's fine.\r\n\r\nTest.ps1:\r\n\r\n```powershell\r\n\"UserInteractive: \" + [Environment]::UserInteractive\r\n\r\n$s = New-PSSession -UserName JohnDoe -HostName example.com\r\nInvoke-Command -Session $s -ScriptBlock { hostname }\r\nRemove-PSSession $s\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPowerShell works correctly, `UserInteractive` value is `False`.\r\n\r\n```none\r\nUserInteractive: False\r\nNew-PSSession : A parameter cannot be found that matches parameter name \r\n'UserName'.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nPowerShell Core does not detect non-interactive user session. The SSH tool hangs with 'Are you sure you want to continue connecting (yes/no)?' question.\r\n\r\n```none\r\nUserInteractive: True\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-11-21T18:00:20Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`[Environment]::UserInteractive` is a bit misleading.  It checks if the process is running in a winstation (has a desktop).  Windows services don't have a winstation, otherwise it is considered \"UserInteractive\".  The `-noninteractive` switch for pwsh controls whether the console host prompts (basically if `ReadLine()` is needed).  It has no control over native commands that prompt (or cmdlets/scripts that call `[Console]::ReadLine()` directly.  `New-PSSession` uses `ssh.exe` under the covers which is what is providing that prompt.  Not sure if the cmdlet can detect if `pwsh` was run with `-noninteractive` and even then what it can do about the `ssh.exe` prompt.",
      "created_at": "2018-10-31T14:50:11Z",
      "updated_at": "2018-10-31T14:50:11Z"
    },
    {
      "author": "dermeister0",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nI understand that `-Noninteractive` and `[Environment]::UserInteractive` are not linked at all.\r\n\r\nDon't you think it's strange that `[Environment]::UserInteractive` returns different value for PowerShell and PowerShell Core?\r\n\r\n> even then what it can do about the ssh.exe prompt\r\n\r\nI assume that `pwsh` redirects standard input. It reads a response from user and sends it to `ssh.exe`. I think `pwsh` may disable `stdin` if there is no \"winstation\" and input stream is not redirected.",
      "created_at": "2018-10-31T15:21:28Z",
      "updated_at": "2018-10-31T15:21:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dermeister0 so you are saying Windows PowerShell returns `false`?",
      "created_at": "2018-10-31T16:28:41Z",
      "updated_at": "2018-10-31T16:28:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ".NET Core is the culprit: `[Environment]::UserInteractive` currently _always_ returns `$True` (hard-coded):\r\n\r\nhttps://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Runtime.Extensions/src/System/Environment.cs#L152\r\n\r\n(The platform-specific class files do not override this behavior.)\r\n\r\n",
      "created_at": "2018-10-31T19:14:52Z",
      "updated_at": "2018-10-31T19:17:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dermeister0: If you're willing to define _user-interactive_ as _runs in a console/terminal window visible to the current user_, see [this answer on StackOverflow.com](https://stackoverflow.com/a/53716169/45375) for a workaround.",
      "created_at": "2018-12-17T03:29:14Z",
      "updated_at": "2018-12-17T03:29:14Z"
    },
    {
      "author": "ili101",
      "author_association": "NONE",
      "body": "Migrating from 5.1 to 7 Preview and encountered this problem.\r\nI used `[Environment]::UserInteractive` in 5.1 to know if the script is running from Scheduled Task or not.\r\nThe .Net issue is tracked here https://github.com/dotnet/coreclr/issues/25595\r\nThe workaround suggested there is to use this instead:\r\n```powershel\r\nAdd-Type -AssemblyName System.Windows.Forms\r\n[System.Windows.Forms.SystemInformation]::UserInteractive\r\n```\r\nWould be nice if `[Environment]::UserInteractive` will work like it did in 5.1",
      "created_at": "2019-11-20T12:12:52Z",
      "updated_at": "2019-11-20T12:12:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-11-21T18:00:19Z",
      "updated_at": "2019-11-21T18:00:19Z"
    }
  ],
  "created_at": "2018-10-31T14:15:06Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-External",
    "WG-Remoting",
    "Waiting - DotNetCore"
  ],
  "number": 8154,
  "state": "closed",
  "title": "PowerShell Core does not detect non-interactive user session correctly",
  "updated_at": "2019-11-21T18:00:20Z"
}