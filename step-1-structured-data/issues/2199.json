{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2199",
  "author": "be5invis",
  "body": "",
  "closed_at": "2021-07-08T22:00:51Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Having `Remove-Item -F` work just like `Remove-Item -Force` seems like a good idea.\n\nThere is a small concern - `Remove-Item` is a cmdlet that is implemented by providers (like the file system, registery, environment, etc) and providers can add dynamic parameters.  Providers that add dynamic parameters aren't all that common, but there is a risk that a provider adds a dynamic parameter with an identical alias `-F` which would be masked by this change.\n\nIn an ideal world, this wouldn't break scripts because they should be using full parameter names, but we don't live in that ideal world.\n\nIt feels like an unlikely breaking change, but we should have data to confirm that assumption before considering this enhancement.\n",
      "created_at": "2016-09-07T01:24:40Z",
      "updated_at": "2016-09-07T16:04:13Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@lzybkr The current Remove-Item\u2019s -f is... ambiguous (-Force and -Filter), so scripts cannot use it directly.\n",
      "created_at": "2016-09-07T01:43:05Z",
      "updated_at": "2016-09-07T01:43:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That's not necessarily true if, as I previously stated, a provider adds a dynamic parameter with an alias.\n",
      "created_at": "2016-09-07T01:46:47Z",
      "updated_at": "2016-09-07T16:04:21Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@lzybkr At least can alias `-f` for file provider, or other existing providers with only `-Force`.\n",
      "created_at": "2016-09-07T01:52:45Z",
      "updated_at": "2016-09-07T01:52:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@be5invis - in theory, sure, but I think that would be difficult to implement correctly.\n\nDynamic parameters don't support adding an alias to an existing parameter and we couldn't move `-Force` to be dynamic for a specific set of providers because the parameter must exist for all providers.\n",
      "created_at": "2016-09-07T02:05:24Z",
      "updated_at": "2016-09-07T02:05:24Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I'm proposing a way to implement this... Allow specifying the precedence of a parameter when ambiguity happens. E.g. `[Parameter(Precedence = 1)][switch]$Force, [Parameter(Precedence = 0)][string]$Filter`, then `-F`, if not otherwise resolved, would be `-Force`.\n\nFor backward compatibility, `Precedence` should be `System.Nullable<System.Int32>` or `System.Nullable<System.UInt32>`. Resolution step **regarding precedence** (of course full name and aliases should be used to resolve parameters before we come to this step) should be:\n1. If no parameter candidate has `Precedence.HasValue`, the resolution fails;\n2. Collect all parameter candidates with `Precedence.HasValue` that has the largest `Precedence.Value`, say this is collection `A`;\n3. If the size of `A` is 1, the parameter resolves to the only element in `A`;\n4. Otherwise, the resolution fails.\n\nThis won't break current providers that adds a dynamic parameter / an alias of a dynamic parameter `-F`, and is consistent in all providers -- You don't lose `-F` as an alias for `-Force` magically because you are not using built-in providers, you lose it because `-F` resolves before it reaches `-Force` and `-Filter`.\n",
      "created_at": "2016-09-07T03:15:35Z",
      "updated_at": "2016-09-07T03:15:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@GeeLaw - that might work, but the parameter binder is already too complicated, so it's hard to say if it'd be worth adding this complexity.\n",
      "created_at": "2016-09-07T16:18:51Z",
      "updated_at": "2016-09-07T16:18:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Using aliases degrades readability of scripts.\nUsing Foreach-Object better using foreach. \nUsing Where-Object better using where. \nUsing -Force better using -F.\n",
      "created_at": "2016-10-06T11:53:43Z",
      "updated_at": "2016-10-06T11:53:43Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "In reply to @iSazonov : If you read carefully enough, you would find that the proposed alias `-F` for `-Force` is intended to be used interactively, shortening the type for a often-used switch.\n",
      "created_at": "2016-10-06T11:57:04Z",
      "updated_at": "2016-10-06T11:57:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'd vote against building in a shorthand aliases for parameters (such as -F for -Force) because it could lead to accidents.. It's pretty well known that you can abbreviate any parameter using the minimum number of characters required to unambiguously identify that parameter.  If -F is explicitly aliased to -Force, and someone forgets about the conflict between -Force and -Filter because there aren't multiple parameters that start with -F on every command that has a -Force parameter, suddenly they may invoke a command with -Force when they really meant to invoke it with -Filter.\n\nA better solution for this problem would be to unlock parameter aliases in PowerShell (they currently cannot be modified by end users), allowing PowerShell users to add parameter aliases that they want to use in their interactive work to their profile,  much like they can add command aliases today.  Then if someone specifically wants -F to be an alias for -Force in Remove-Item for ad-hoc work, they can make that decision and change it for themselves without forcing a potentially unwanted change on the rest of the community.\n\nIn this particular scenario, having to type ri -fo vs just ri -f isn't really that bad IMHO.\n",
      "created_at": "2016-10-06T12:08:08Z",
      "updated_at": "2016-10-06T12:08:08Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I agree with Kirk that the present capabilities of abbreviating parameters to the minimum that is unambiguous is sufficient. Add aliases to parameters is an unnecessary complication\n",
      "created_at": "2016-10-06T12:37:44Z",
      "updated_at": "2016-10-06T12:37:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "An user can add parameter alias by means of proxy function.\n",
      "created_at": "2016-10-06T12:46:50Z",
      "updated_at": "2016-10-06T12:46:50Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@RichardSiddaway: Being able to add aliases to parameters is not unnecessary. I've run into multiple scenarios where I would gladly have added an alias to a parameter if I could; however, adding shorthand aliases seems like the wrong thing to do.\n\n@iSazonov: Creating a proxy function (that must be then kept up to date over time as commands evolve) is a lot of work just to add a parameter alias. I would greatly prefer being able to simply add an alias to a command via .NET or via a PowerShell command. For example:\n\n```\n$cmd = Get-Command -Name Select-Object\nif ($cmd.Parameters['First'].Aliases -notcontains 'Top') {\n    $cmd.Parameters['First'].Aliases.Add('Top')\n    if (-not ($cmd.Parameters['First'].Attributes | Where-Object {($aliasAttribute = $_ -as [System.Management.Automation.AliasAttribute]) -and ($aliasAttribute.AliasNames -contains 'Top')})) {\n        $aliasAttribute = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList Top\n        $cmd.Parameters['First'].Attributes.Add($aliasAttribute)\n    }\n}\ngps | sort WorkingSet64 -desc | select -top 10 # This fails, so the added alias isn't being recognized\n```\n\nI'd like to see that actually work since the collections can be updated, but PowerShell must be using cached metadata for the command when the parser resolves the parameters, so maybe all that's missing is an additional call that would update that command in the command cache.\n",
      "created_at": "2016-10-06T13:33:17Z",
      "updated_at": "2016-10-06T13:33:17Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee agree that it is useful and should be done generically (enable things like ls -al, rm -rf etc.). \n",
      "created_at": "2016-11-11T23:15:00Z",
      "updated_at": "2016-11-11T23:15:00Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "But didn't this sort of thing get us into trouble with curl/wget?  Wouldn't this further trick folks into thinking that by executing `rm -rf` they're using a *nix utility instead of PowerShell's `Remove-Item`?  And when I'm on Linux, `ls` and `rm` better be invoking the native Linux utilities.  \n\nSo this seems to apply only to Linux folks moving over to Windows.  For that scenario, it seems better to supply a module that provides better emulation of the Linux utilities they are used to.  Perhaps using @KirkMunro suggestion of parameter alias modification.  Then if they wind up writing scripts that rely on these *nixy parameter aliases, they can require that module for portability.\n",
      "created_at": "2016-11-20T01:51:58Z",
      "updated_at": "2016-11-20T01:51:58Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@rkeithhill We can write a different `rm`, a different function that is parameter-compatible WITH Linux `rm`.\n",
      "created_at": "2016-11-20T01:55:47Z",
      "updated_at": "2016-11-20T01:55:47Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm fine with that as long as it's in an optional module.  As a 11+ year user of PowerShell, my muscle memory doesn't include `rm -f`, `rm -rf` or `ls -al`, etc.  :-)  \n",
      "created_at": "2016-11-20T02:07:28Z",
      "updated_at": "2016-11-20T02:07:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Up to now I see beginners in Powershell and never heard from them that they find it difficult to understand Powershell. Powershell is great because it has clear idea and it's strange to refuse this and turn it into a half-baked bash. We all once migrated from VBS and no one simulates the VBS in Powershell.",
      "created_at": "2016-11-21T04:09:20Z",
      "updated_at": "2016-11-21T04:09:20Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@HemantMahawar To be clear, which part of this did the @PowerShell/powershell-committee agree is useful?",
      "created_at": "2016-11-21T08:55:54Z",
      "updated_at": "2016-11-21T08:55:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro the committee agreed that user defined parameter aliases would be useful for interactive use (aliases should never be used in scripts and we should have a corresponding rule for this) where `rm` is aliased to `remove-item` and `-rf` is aliased to `-recurse -force`.  seemsl like this should be a RFC to get more feedback.",
      "created_at": "2016-11-21T16:36:39Z",
      "updated_at": "2021-06-23T23:06:13Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Limiting to interactive scenarios would be most important for this to work. I'm not a Bash user. If I inherit a script that someone wrote with Linux aliases, it would make it much harder to understand the script. \r\n\r\nPowerShell needs to maintain consistency with scripts across platforms in order to make it easier for scripters to maintain in the long-term.",
      "created_at": "2016-11-25T08:52:19Z",
      "updated_at": "2016-11-25T08:52:19Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "I don't see any reason to invest resources into providing this feature. Parameter aliases add an unnecessary layer of complexity. Going back to the original post, there's no reason to run a command like `rm -f`, when you can just as easily type `rm -f<tab>` and autocomplete the parameter. I'd make a case for tab-completing the cmdlet name as well. If there are parameter aliases that a user might be expecting to use, that should be well documented.",
      "created_at": "2021-06-14T17:52:00Z",
      "updated_at": "2021-06-14T17:52:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Upon further thinking on this, I don't know if this is worth a feature to enable custom parameter aliases if the primary (only?) use case is `rm -rf`.  So a feature would not be trivial and currently without other real world scenarios, seems potentially little benefit vs the cost.  For `Remove-Item` specifically, I have personally encountered the displeasure of having to use `rm -r -fo` (since `-filter` conflicts) and prefer `rm -rf` for expedient typing when used interactively. \r\n\r\nSo one possible alternate solution is to add a new `-RecurseForce` switch in a new parameterset which has the `-rf` alias.  This should be a pretty small change.  I think there is a question whether this sets a bad precedent. ",
      "created_at": "2021-06-24T23:08:47Z",
      "updated_at": "2021-06-24T23:08:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think there is a question whether this sets a bad precedent.\r\n\r\nYes. Users can create any wrappers based on functions in their profiles.",
      "created_at": "2021-06-25T03:51:19Z",
      "updated_at": "2021-06-25T03:51:19Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": " > So one possible alternate solution is to add a new `-RecurseForce` switch in a new parameterset which has the `-rf` alias. This should be a pretty small change. I think there is a question whether this sets a bad precedent.\r\n\r\nIt does, but I think if it solved the problem it would be worth it. I would bet that just about every single person who used PowerShell extensively has been annoyed by this at some point.\r\n\r\nThat said, I think the main frustration is \"I feel like should be able to do *this* but that throws, now I gotta do *that*\".  I don't think the pain point is specifically the extra character, so I'm not sure how much this would actually help in the end.",
      "created_at": "2021-06-25T13:15:15Z",
      "updated_at": "2021-06-25T13:15:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It is worth discussing whether the parameter binder should, as a final fallback if nothing matches the given parameter name unambiguously, mimic behaviour from how these tools handle shorthand switches?\r\n\r\ne.g., `Remove-Item -rf` where `-rf` is not able to be matched to any singular parameter name, should it enumerate switch parameters and see if it can unambiguously assign _multiple_ parameters, one to each character specified?",
      "created_at": "2021-06-25T15:31:02Z",
      "updated_at": "2021-06-25T15:31:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/wg-powershell-cmdlets has discussed this, and despite the fact that a couple of us have the `rm -rf` muscle memory, we are rejecting this proposal for the following reasons:\r\n* it creates an unreasonable expectation of consistency between platforms (e.g. `rm -rf` on macOS/Linux actually executes `/bin/rm` while it would execute `Remove-Item` on Windows)\r\n* the implementation is complex and rife with potential for regression around the parameter binder\r\n\r\nWe also don't want to pursue the `-RecurseForce` as a one-off for `Remove-Item` because of the precedent that it sets with creating arguments like that for other cmdlets\r\n\r\nIf folks feel very passionately about having this functionality, the community is welcome to create a Gallery module that has well-formed wrapper functions for common scenarios like this. That module could even end up being configurable for folks with slightly different muscle memory requirements",
      "created_at": "2021-06-30T17:30:01Z",
      "updated_at": "2021-06-30T17:30:01Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as declined and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-07-08T22:00:51Z",
      "updated_at": "2021-07-08T22:00:51Z"
    }
  ],
  "created_at": "2016-09-06T21:44:00Z",
  "number": 2199,
  "state": "closed",
  "title": "Support user defined parameter aliases, e.g. -F to -Force for Remove-Item",
  "updated_at": "2021-07-08T22:00:51Z"
}