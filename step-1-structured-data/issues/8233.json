{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8233",
  "author": "SteveL-MSFT",
  "body": "PSCore6 currently depends on OMI native client library for non-Windows to remote PSRP over WSMan.  This library currently has a number of limitations and issues.  To continue to support WSMan based remoting, we should consider writing a new library in managed code.  It also appears that [corefx supports Kerberos/NTLM over HttpClient](https://github.com/dotnet/corefx/issues/30203) so that should solve one of the immediate limitations with the native library.  This library should also be a generally useful public api on nuget for other languages to remote into PowerShell via PSRP.",
  "closed_at": "2018-11-30T18:00:58Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference [psl-omi-provider](https://github.com/PowerShell/psl-omi-provider)\r\nSeems there are no tests. Without them, porting will be problematic.\r\n\r\nAnd should the new library be used on all platforms including Windows?",
      "created_at": "2018-11-13T05:26:55Z",
      "updated_at": "2018-11-13T05:26:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov tests is lacking which is why we get reports of issues that should have been caught by tests.  In this case, we would add tests along with this porting work.  We would probably use the same library on downlevel Windows that doesn't have WMF4+, however, this library isn't expected to have full parity with WinRM (at least initially) so relying on WinRM in those cases would make sense.  Long term, it would make sense to have a single library for all platforms.",
      "created_at": "2018-11-13T06:44:40Z",
      "updated_at": "2018-11-13T06:44:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In which repository should this be done?\r\nWe need at least a test environment.",
      "created_at": "2018-11-26T07:49:52Z",
      "updated_at": "2018-11-26T07:49:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I created https://github.com/PowerShell/PSRP-Client-Library if you want to experiment.  cc @PaulHigin ",
      "created_at": "2018-11-26T17:23:36Z",
      "updated_at": "2018-11-26T18:26:04Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "If we want to create a new managed version of WSMan client, then I feel we should start with an RFC.",
      "created_at": "2018-11-26T18:12:00Z",
      "updated_at": "2018-11-26T18:12:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "... and continue with tests :-) \r\n\r\nSeems it will be large and complex RFC.",
      "created_at": "2018-11-26T18:14:20Z",
      "updated_at": "2018-11-26T18:14:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree with @PaulHigin that the intent here is:\r\n\r\n1. remove dependency on omi-psl-provider native library\r\n2. provide public api to create remote PSRP session (I'll rename it to PSRP instead of WSMan specific)\r\n\r\nSo it would make sense to have an RFC for the apis.",
      "created_at": "2018-11-26T18:25:36Z",
      "updated_at": "2018-11-26T18:25:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How this correlate with https://www.dmtf.org/standards/ws-man ?",
      "created_at": "2018-11-27T10:38:00Z",
      "updated_at": "2018-11-27T10:38:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov PSRP over WSMan relies on the [PowerShell Remoting Protocol](https://msdn.microsoft.com/en-us/library/dd357801.aspx?f=255&MSPPError=-2147217396) which is built on top of WS-Man (or SSH now in PSCore6) which is the same as the one you linked to.  WS-Man is a SOAP based protocol that goes over HTTP(S).",
      "created_at": "2018-11-27T20:42:01Z",
      "updated_at": "2018-11-27T20:42:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we should port [this client](https://github.com/PowerShell/psl-omi-provider/blob/master/src/Client.c) and get direct dependency on native OMI library?",
      "created_at": "2018-11-28T15:48:34Z",
      "updated_at": "2018-11-28T15:48:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the goal here is to remove dependency on OMI library altogether and just have C# code",
      "created_at": "2018-11-28T18:01:45Z",
      "updated_at": "2018-11-28T18:01:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see OMI project is actively updated. Shouldn't this issue be addressed there? I mean OMI client library ported at first in OMI project? What is a reasonable compromise?",
      "created_at": "2018-11-29T15:15:54Z",
      "updated_at": "2018-11-29T15:15:54Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "PowerShell remoting uses OMI only as a bridge for non-Windows platforms.  Its support of WinRM client is incomplete and problematic.  My goal is to completely remove OMI as a dependency.  I agree with @SteveL-MSFT that the best way to do this is to investigate implementing WinRM client in cross-platform managed code, resulting in an RFC that outlines the work required.",
      "created_at": "2018-11-29T16:57:33Z",
      "updated_at": "2018-11-29T16:57:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems I started to understand :-)\r\n\r\n1. We really will not have a conflict with the OMI project?\r\n2. Having two client (Windows (WMF) and the new one on Unix) is seems a problem too. CoreFX reimplemented HttpClient to exclude curl and get the _same behavior_ on all platforms. \r\nI assume that we are doomed to the same thing - to have single managed WinRM client library for all platforms including Windows 10 (not only Windows 7 without WMF4). In other words, PowerShell Core uses the new managed client, Windows PowerShell uses WMF client.\r\nIt even simplified development that could be done on Windows.",
      "created_at": "2018-11-29T17:35:40Z",
      "updated_at": "2018-11-29T17:37:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I've had discussions with the OMI team internally and there is no conflict or overlap.  We should use the same client code for both Windows and non-Windows although that would not happen initially as some capabilities we get from WinRM are not a priority for non-Windows.",
      "created_at": "2018-11-29T21:20:43Z",
      "updated_at": "2018-11-29T21:20:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please update the issue description and title that we want to implement WinRM client on managed code?\r\n\r\nIs there someones (firms) to whom this may be useful and who could be contribute/test? You could blog post to announce the new project.\r\n\r\nAlso I hope your team prepares the RFC (I have no idea who else could do it.) \r\nCurrently, I can only review a code in the repo and maybe reorganize/cleanup it to make it easier to add the new experimental code.\r\n",
      "created_at": "2018-11-30T06:44:39Z",
      "updated_at": "2018-11-30T06:44:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think this specific item is pretty specialized and complicated so unlikely for someone in the community to be able to contribute.  Since we have the new repo for this work, I'm going to close this item.  It's not blocking at this time, but will become blocking in the future if more customers want to use PSRP over WSMan from non-Windows.",
      "created_at": "2018-11-30T18:00:58Z",
      "updated_at": "2018-11-30T18:00:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today I researched this a bit and came to the conclusion that it could be useful for other projects on managed code. There is nothing on GitHub like WSMan on C#. I hope the project will not be frozen for a long time. Ping me when it will start.",
      "created_at": "2018-11-30T19:47:32Z",
      "updated_at": "2018-11-30T19:47:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov to set expectation, I don't expect to start on this until at least April 2019",
      "created_at": "2018-11-30T22:39:48Z",
      "updated_at": "2018-11-30T22:39:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @PaulHigin What is a status of \"WSMan on C#\"? We receive continuous issues for remoting from Unix-s.\r\n",
      "created_at": "2020-05-14T10:44:26Z",
      "updated_at": "2020-05-14T10:44:26Z"
    },
    {
      "author": "sakno",
      "author_association": "NONE",
      "body": "Guys, any progress on this?",
      "created_at": "2020-06-26T08:00:38Z",
      "updated_at": "2020-06-26T08:00:38Z"
    }
  ],
  "created_at": "2018-11-12T01:13:19Z",
  "number": 8233,
  "state": "closed",
  "title": "PSRP WSMan client library to C#",
  "updated_at": "2020-06-26T08:00:39Z"
}