{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7204",
  "author": "rthardin",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nStart a fresh Docker container with either the latest stable or latest preview of the `mcr.microsoft.com/powershell:centos-7` container, on either OS X or Linux (see **Environment data** for more detail):\r\n\r\n```bash\r\ndocker run -it mcr.microsoft.com/powershell:centos-7 bash\r\n```\r\nor\r\n```bash\r\ndocker run -it mcr.microsoft.com/powershell:6.1.0-preview.3-centos-7 bash\r\n```\r\n\r\nInstall the prerequisites for SPNEGO/NTLM Authentication on OMI as per this guide: https://github.com/Microsoft/omi/blob/master/Unix/doc/setup-ntlm-omi.md\r\n\r\n```bash\r\nyum install -y epel-release && yum install -y krb5-workstation gssntlmssp\r\n```\r\n\r\nFrom `pwsh`, create a new session with negotiated authentication, and run any remote commands on the remote computer (using `hostname` here as an example). In this example, the remote machine is running Windows Server 2016.\r\n\r\n```powershell\r\n# Open a session with negotiated authentication.\r\n$pwd = ConvertTo-SecureString -AsPlainText -Force -String \"...\"\r\n$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"...\", $pwd\r\n$session = New-PSSession -ComputerName \"...\" -Credential $cred -Authentication Negotiate\r\n\r\n# Execute some remote commands and observe increasing memory usage.\r\nfor ($i=0; $i -le 100; $i++) {\r\n\tInvoke-Command -Session $session -ScriptBlock { hostname }\r\n}\r\n\r\n# Clean up the session and observe that memory is not freed.\r\n$session | Remove-PSSession\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nSome increase in memory utilization by `pwsh` as shown by `top` while the loop is executing, stabilizing as garbage is collected. Eventually, the memory used by `pwsh` should reduce until it's near where it started.\r\n\r\nActual behavior\r\n---------------\r\n\r\nLinear increase in memory utilization by `pwsh` as shown by `top` while the loop is executing, which seems to have no upper-bound (until the host is out of memory). The memory used by `pwsh` is not reduced after ~6 hours of sitting idle. As a rough estimate, I've seen an increase in memory of about one megabyte per call to `Invoke-Command` (e.g. the usage procedure in the **Steps to reproduce** section increased memory used by `pwsh` from about 70 MB to about 150 MB in 100 calls to `Invoke-Command`).\r\n\r\nEnvironment data\r\n----------------\r\n\r\nPowerShell versions:\r\n\r\n```powershell\r\n> $PSVersionTable                                                                                                                                       \r\n\r\nName                           Value                                                                                                                       \r\n----                           -----                                                                                                                       \r\nPSVersion                      6.0.2                                                                                                                       \r\nPSEdition                      Core                                                                                                                        \r\nGitCommitId                    v6.0.2                                                                                                                      \r\nOS                             Linux 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 15:12:16 UTC 2018                                                              \r\nPlatform                       Unix                                                                                                                        \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                     \r\nPSRemotingProtocolVersion      2.3                                                                                                                         \r\nSerializationVersion           1.1.0.1                                                                                                                     \r\nWSManStackVersion              3.0       \r\n```\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3\r\nOS                             Linux 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 ...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nDocker on OS X:\r\n```bash\r\n> docker version\r\nClient:\r\n Version:      18.03.1-ce\r\n API version:  1.37\r\n Go version:   go1.9.5\r\n Git commit:   9ee9f40\r\n Built:        Thu Apr 26 07:13:02 2018\r\n OS/Arch:      darwin/amd64\r\n Experimental: false\r\n Orchestrator: swarm\r\n\r\nServer:\r\n Engine:\r\n  Version:      18.03.1-ce\r\n  API version:  1.37 (minimum version 1.12)\r\n  Go version:   go1.9.5\r\n  Git commit:   9ee9f40\r\n  Built:        Thu Apr 26 07:22:38 2018\r\n  OS/Arch:      linux/amd64\r\n  Experimental: true\r\n```\r\n\r\nDocker on Linux (CentOS):\r\n```bash\r\n> sudo docker version\r\nClient:\r\n Version:      18.03.1-ce\r\n API version:  1.37\r\n Go version:   go1.9.5\r\n Git commit:   9ee9f40\r\n Built:        Thu Apr 26 07:20:16 2018\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n Orchestrator: swarm\r\n\r\nServer:\r\n Engine:\r\n  Version:      18.03.1-ce\r\n  API version:  1.37 (minimum version 1.12)\r\n  Go version:   go1.9.5\r\n  Git commit:   9ee9f40\r\n  Built:        Thu Apr 26 07:23:58 2018\r\n  OS/Arch:      linux/amd64\r\n  Experimental: false\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #7112.",
      "created_at": "2018-06-29T14:44:18Z",
      "updated_at": "2018-06-29T14:44:18Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "I'm experiencing this issue as well. Only difference seems to be the NTLM/Kerberos related apps I install in my image. Which is Ubuntu bionic based.\r\n\r\nThey are:\r\n- krb5-user\r\n- cifs-utils\r\n\r\nI've tried the following localize the culprit of the memory issue I see when executing my PowerShell code inside a Docker container.\r\n\r\n* WinDbg analyzing a full mem. dump. Taken outside a container. As the code is the same. Though there is a difference in the PowerShell version. Inside the container it is v7 preview 2 and outside it is v5.1. Couldn't find the issue. Might be my less than average skills in debugging memory dumps.\r\n* Used GC.Collect(). No difference\r\n* Tried configuring the `System.GC.Server` & `System.GC.Concurrent` settings in the `pwsh.runtimeconfig.json` file. Made no difference. The container **was** restarted and calling e.g. `[System.Runtime.GCSettings]::IsServerGC` returns `True` after the restart.\r\n* Went through my code to see if there might be variables I do not remove, or other objects that might be hogged so that they are not cleared from memory when garbage collection occurs. Optimized in many places. The issue remained.\r\n* Been through the issues in this repository and found some very interesting issues besides this one (which is the one being closest to the issue I'm experiencing). The issues are:\r\n  * [ConvertFrom-JSON high memory consumption](https://github.com/PowerShell/PowerShell/issues/7698)\r\n  * [Invoke-RestMethod is slow and uses a lot of memory ](https://github.com/PowerShell/PowerShell/issues/6199) - my code also uses the `Invoke-RestMethod`. However, it should not be a problem according to the close note on the issue. However, I'm using `ConvertFrom-JSON` soooo\r\n  * [Performance of Windows PowerShell is better then PowerShell Core](https://github.com/PowerShell/PowerShell/issues/7112)\r\n\r\nThe code I execute makes great use of Invoke-Command over a remote PowerShell session from the Linux Ubuntu container to different Windows servers. As @rthardin I also make sure to remove the PS session after use.\r\n\r\nI don't see this issue as being thaaaat tightly related to #7112 @iSazonov .... read through that issue and yes there are similarities. However, the big difference is the use of `Invoke-Command` and `New-PSSession` and the challenges in regards to memory consumption that seems to come with.\r\n\r\nI'll happily provide more info. Feel free to ask. ",
      "created_at": "2020-02-18T07:17:48Z",
      "updated_at": "2020-02-18T07:35:32Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "Any news on this?",
      "created_at": "2020-02-25T10:11:01Z",
      "updated_at": "2020-02-25T10:11:01Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I imagine that the PS team at MSFT is very busy with the upcoming 7GA release. But, is there any chance I could get a little comment on this issue. Por favor \ud83d\udcaf \r\n\r\nThank you and have a great day.",
      "created_at": "2020-03-02T07:41:23Z",
      "updated_at": "2020-03-02T07:41:23Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "Any news on this? A couple of more months have passed by. @iSazonov ? Or maye you @rthardin \r\n\r\nThank you so much.",
      "created_at": "2020-05-05T10:26:58Z",
      "updated_at": "2020-05-05T10:26:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin is this something within your area of expertise?",
      "created_at": "2020-05-05T11:35:57Z",
      "updated_at": "2020-05-05T11:35:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The code I execute makes great use of Invoke-Command over a remote PowerShell session from the Linux Ubuntu container to different Windows servers.\r\n\r\n@larssb \r\n1. Do you see the issue with latest PowerShell 7.0 Preview?\r\n2. Do you see the issue without container (direct connect from Linux to Windows Server)?\r\n",
      "created_at": "2020-05-05T13:26:45Z",
      "updated_at": "2020-05-05T13:26:45Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "We'll be updating to version 7 of PowerShell this week. Then we'll know more. Unless there is some fixes or the like in the latest v7 preview, that makes you ask @iSazonov ?\r\n\r\nI'll see what I can do on your second question. \r\n\r\nThank you ... also to you @vexx32 for chirping in.",
      "created_at": "2020-05-05T18:13:08Z",
      "updated_at": "2020-05-05T18:13:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@larssb There were some performance fixes.\r\n\r\nNow you could collect .Net traces on Linux and analyze with PerfView https://michaelscodingspot.com/dotnet-trace/\r\n\r\n<blockquote><img src=\"https://i0.wp.com/michaelscodingspot.com/wp-content/uploads/2019/11/performance-profiling-linux-dotnet-core-3.jpg?fit=1000%2C640&ssl=1\" width=\"48\" align=\"right\"><div><img src=\"https://i1.wp.com/michaelscodingspot.com/wp-content/uploads/2017/01/cropped-stillOnWhite4-transparent-big.png?fit=192%2C192&ssl=1\" height=\"14\"> Michael's Coding Spot</div><div><strong><a href=\"https://michaelscodingspot.com/dotnet-trace/\">Performance Profiling of .NET Core 3 applications on Linux with dotnet-trace and PerfView - Michael's Coding Spot</a></strong></div><div>Performance issues never seem to disappear from the world, no matter how fast new computers become. To deal with those issues we need proper tools. We have some great tools on Windows. On .NET Core with Linux, things are not so great. But they're getting better.</div></blockquote>",
      "created_at": "2020-05-06T03:45:02Z",
      "updated_at": "2020-05-06T03:45:32Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "A couple of comments:\r\n\r\nWhen measuring memory pressure, be sure and run `[gc]::Collect()` to ensure you are seeing a real memory leak, and not just the CLR neglecting to garbage collect freed objects.\r\n\r\nThis is WinRM over OMI remoting, which has been deprecated and is something we are no longer supporting.  So if there is a memory leak in the implementation, it is unlikely we would address it.  Instead, we are encouraging cross platform remoting through SSH.",
      "created_at": "2020-05-06T17:14:21Z",
      "updated_at": "2020-05-06T17:14:21Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "Hmm @PaulHigin. Interesting. I wasn't aware of the lack of support for WinRM over OMI. I've tried `[gc]::Collect()` to get the debugging effect you mention. Still an issue.\r\nHowever, if what Microsoft support is remoting through SSH I'll see if I can work with that relative to the infrastructure on which I have to do the remoting.\r\n\r\nLooking at [OpenSSH Server Configuration....](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_server_configuration). It looks like it's only from Windows 2019 server that SSH is fully supported. What if one uses 2016 or 12? Is there anything to do there. Besides using WinRM over OMI? I would prefer to use remoting through SSH. As that is what you say you are supporting.\r\n\r\nThank you very much.",
      "created_at": "2020-05-06T18:13:08Z",
      "updated_at": "2020-05-06T18:13:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@larssb You can download OpenSSH here https://github.com/PowerShell/Win32-OpenSSH/releases \r\nWiKi says that it works on Windows Server 2008 R2.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Win32-OpenSSH\">PowerShell/Win32-OpenSSH</a></strong></div><div>Win32 port of OpenSSH. Contribute to PowerShell/Win32-OpenSSH development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-05-06T18:57:19Z",
      "updated_at": "2020-05-06T18:57:21Z"
    }
  ],
  "created_at": "2018-06-28T20:45:43Z",
  "number": 7204,
  "state": "open",
  "title": "Memory leak executing remote commands from Linux (Docker) to Windows",
  "updated_at": "2020-05-06T18:57:21Z"
}