{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7361",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nA bit of explanation before the repro script, which is hard to understand at a glance:\r\n\r\nMy original scenario is that I have a module. Actually, I may have more than one version of it. So two copies of the same module (same name, same guid, different version number). In addition to checking available versions of the module, the module may have been changed since it was loaded. So I tried to write code to force-reload the module. But when I do, things become completely discombobulated.\r\n\r\nIn narrowing down the problem, I found that it does not require having multiple versions of a module--just force-importing the current module. In the repro below, the module exports a function, `DoIt`. That calls a script, `SeparateScript.ps1`, and that script calls `Import-Module -Force` on the module. And then stuff is totally broken. For example, `Get-Command hi` returns a result, but running `hi` fails because it can't find a function from the module, and `Get-Module (Get-Command hi).Module.Name` returns nothing.\r\n\r\nMaybe force-importing a module when code from that module is currently running is too much to ask (but I'll ask for it anyway :D). But it would be better if it at least failed instead of resulting in a brain-damaged state.\r\n\r\n```powershell\r\n    $global:error.Clear()\r\n    Set-StrictMode -Version Latest\r\n\r\n    try\r\n    {\r\n        $modDir = Join-Path ([System.IO.Path]::GetTempPath()) 'tmpReproMod'\r\n        Remove-Module tmpReproMod*\r\n        if( Test-Path $modDir ) { rmdir -force -recurse $modDir }\r\n\r\n        mkdir $modDir | Out-Null\r\n        Write-Host 'Test directory:' -Fore Yellow\r\n        Write-Host \"   $modDir\" -Fore Yellow\r\n\r\n        $scriptModContent = @'\r\nfunction OtherPrivateFunc()\r\n{\r\n    Write-Host '(other private func)' -Fore Green\r\n}\r\n\r\nfunction hi\r\n{\r\n    try\r\n    {\r\n        Write-Host \"hello $(OtherPrivateFunc -ErrorAction Stop)\" -Fore Green\r\n    }\r\n    finally { }\r\n}\r\n\r\nfunction DoIt()\r\n{\r\n    $null = OtherPrivateFunc\r\n    & \"$PSScriptRoot\\SeparateScript.ps1\"\r\n}\r\nExport-ModuleMember hi\r\nExport-ModuleMember DoIt\r\n'@\r\n\r\n        Set-Content \"$modDir\\tmpReproMod.psm1\" $scriptModContent\r\n\r\n        $scriptModManifestContent = @'\r\n@{\r\n    RootModule = 'tmpReproMod.psm1'\r\n    ModuleVersion = '1.0'\r\n    GUID = 'f00815d2-f63f-4f59-8cb5-2594ca7e3a2a'\r\n}\r\n'@\r\n\r\n        Set-Content \"$modDir\\tmpReproMod.psd1\" $scriptModManifestContent\r\n\r\n        $separateScriptContent = @'\r\nWrite-Host \"~~~~~~~~ SeparateScript.ps1 script ~~~~~~~~\" -Fore Magenta\r\nWrite-Host \"Here are the currently-loaded tmp* modules:\" -Fore Magenta\r\nGet-Module tmp* | fl Name, Path, Version\r\n\r\n$localModuleManifestPath = Join-Path $PSScriptRoot 'tmpReproMod.psd1'\r\n\r\ntry\r\n{\r\n    function ScriptLocalFunc()\r\n    {\r\n        Write-Host \"(script-local func)\" -Fore DarkMagenta\r\n    }\r\n\r\n    Write-Host \"I just defined the ScriptLocalFunc function.\" -fore Magenta\r\n\r\n\r\n    $mod = Get-Module 'tmpReproMod' | %{\r\n        if( $_.Path.StartsWith( [System.IO.Path]::GetDirectoryName( $localModuleManifestPath ) ) ) { $_ }\r\n    }\r\n\r\n    if( $mod )\r\n    {\r\n        Write-Host \"The tmpReproMod is already loaded (from $($mod.Path)).\" -Fore Magenta\r\n\r\n        $c = Get-Command 'DoIt'\r\n        if( $c -and ($c.Module.Path -eq $mod.Path) )\r\n        {\r\n            Write-Host \"And it's where commands will come from.\" -Fore Magenta\r\n            # It's already /non-locally/ loaded.\r\n            # We'll force-reload it in case it has been updated.\r\n            # N.B. This is what causes everything to go off the rails.\r\n            Write-Host \"Going to force reload the module.\" -Fore Magenta\r\n            $mod = Import-Module $localModuleManifestPath -ErrorAction Stop -Verbose:$false -PassThru -Force\r\n            if( $mod )\r\n            {\r\n                Write-Host \"Did the force-import succeed? Well, `$mod is not null!\" -Fore Magenta\r\n            }\r\n            else\r\n            {\r\n                Write-Host \"Wha?\" -Fore Red\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Write-Host \"But some other copy has precedence.\" -Fore Magenta\r\n            Write-Warning \"Re-loading $($mod.Name) at '$localModuleManifestPath'.\"\r\n            Remove-Module -ModuleInfo $mod -Verbose:$false\r\n        }\r\n    }\r\n    else\r\n    {\r\n        Write-Host \"It's not loaded from that location ($($localModuleManifestPath)).\" -Fore Magenta\r\n    }\r\n\r\n\r\n    # If we comment out this call to ScriptLocalFunc, then the subsequent call\r\n    # to 'hi' will succeed (although calling 'hi' in the parent scope will\r\n    # still blow up).\r\n    Write-Host \"Going to call ScriptLocalFunc.\" -Fore Magenta\r\n    ScriptLocalFunc\r\n\r\n    Write-Host \"Going to call 'hi'\" -Fore Magenta\r\n    hi\r\n}\r\nfinally\r\n{\r\n    Write-Host \"~~~~~~~~ end of SeparateScript.ps1 script ~~~~~~~~\" -Fore Magenta\r\n}\r\n'@\r\n        Set-Content \"$modDir\\SeparateScript.ps1\" $separateScriptContent\r\n\r\n        Import-Module \"$modDir\\tmpReproMod.psd1\"\r\n\r\n        Write-Host \"We have now imported the module. Let's try calling the DoIt function:\" -Fore Yellow\r\n        try\r\n        {\r\n            #DoIt\r\n            #Write-Host \"First call to DoIt suceeded\" -Fore DarkYellow\r\n            & \"$modDir\\SeparateScript.ps1\"\r\n        }\r\n        catch\r\n        {\r\n            Write-Host \"Expected results: I should not get here.\" -Fore Red\r\n            $_\r\n        }\r\n\r\n        try\r\n        {\r\n            hi\r\n            Write-Host \"Call to hi suceeded\" -Fore DarkYellow\r\n        }\r\n        catch\r\n        {\r\n            Write-Host \"Expected results: I should not get here, either.\" -Fore Red\r\n            $_\r\n        }\r\n\r\n        Write-Host \"Here's something funny: the 'hi' command says it is from the module at '$((gcm hi).Module.Path)', but is there any module loaded from there? Nope. Here they all are:\" -Fore Yellow\r\n        Get-Module tmp* | fl Name, Path, Version\r\n    }\r\n    finally\r\n    {\r\n    }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nNone of the red \"should not get here\" lines should show up; you should be able to force-import a module that is running.\r\n\r\nActual behavior\r\n---------------\r\nThe red \"should not get here\" lines are printed.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3-127-gda7b5216b5ab0b5173d694c0e7c878ce60b7429d\r\nOS                             Microsoft Windows 10.0.17692\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2018-07-25T20:42:28Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 7361,
  "state": "open",
  "title": "A module that tries to force-import itself causes module context to come completely unglued",
  "updated_at": "2018-07-26T10:54:54Z"
}