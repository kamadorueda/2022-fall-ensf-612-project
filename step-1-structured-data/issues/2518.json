{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2518",
  "author": "KirkMunro",
  "body": "This changeset addresses issue #2462, along with all feedback received in the comments for that issue.\n\nThe original issue was identified as an enhancement to add -Top <int> support to Sort-Object, so that (a) you would get results back faster when you only wanted the top N, and (b) you would get code elegance by not having to pipe to Select-Object. Several commenters wanted -Bottom N support added for completeness, so an additional parameter set was created with a -Bottom <\u00ecnt> parameter.  Over 40 tests were written for Pester to compare the sort results using Sort -Top <int> or Sort -Bottom <int> with sort results when -Top and -Bottom are not used to ensure that we always get back the data we want according with how Sort-Object sorts data without -Top/-Bottom.  That means that if Sort-Object is broken (if it returns results in a different order), these tests will pass; however, the intent of these tests is to compare the sort results with those of a basic Sort-Object invocation, and other tests exist to verify the order of the items returned from Sort-Object, so this is all good.\n\nAdditionally, performance testing was done and -Top/-Bottom sorts on very large data sets (1M integers) returned results about twice as fast as when using sort | select -First/-Last, as long as -Unique is not used.  This performance improvement is partly because of the reduced pipeline and partly because of a faster sort algorithm (an indexed min-/max-heap sort is used to process Top N/Bottom N results more quickly).\n\nWorth noting: Using -Top/-Bottom sorts using -Unique are really, really slow with very large data sets, just as sort | select -First/-Last are slow with very large data sets. This code is old, and while looking at it I felt it would be worth looking at SortedSet for -Unique sorts (SortedSet did not exist when sort-object was first written) to see if it would return unique sorted results more quickly. That investigation was outside of the scope of this PR though, so I'm simply mentioning it here so that I don't forget about the item. A separate issue should probably be created to investigate SortedSet with Sort-Object -Unique to see if it improves performance like I hope it will.\n",
  "closed_at": "2016-11-04T21:09:48Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@KirkMunro**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-10-21T20:03:01Z",
      "updated_at": "2016-10-21T20:03:01Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not entirely sure what to do with the failures in AppVeyor/Travis CI. Saw on another PR thread that @vors indicated there were some problems due to changes in .NET Core that he was looking into. These changes build fine on my machine, so pointers if I need to do anything would be helpful.  Thanks.\n",
      "created_at": "2016-10-21T21:28:45Z",
      "updated_at": "2016-10-21T21:28:45Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@KirkMunro**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-10-22T00:58:15Z",
      "updated_at": "2016-10-22T00:58:15Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Reopened PR to re-trigger the execution on the fixed master\n",
      "created_at": "2016-10-22T00:58:31Z",
      "updated_at": "2016-10-22T00:58:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Thanks for Sort-Object improvements!\n\n> A separate issue should probably be created to investigate SortedSet with Sort-Object -Unique to see if it improves performance like I hope it will.\n\nFeel free to open the Issue _now_! I believe that performance improving is the right direction.\n",
      "created_at": "2016-10-22T10:29:54Z",
      "updated_at": "2016-10-22T10:29:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Could you please rebase your branch (and drop unnecessary commits) ? Your PR contains some _merge_ commits.\n",
      "created_at": "2016-10-22T18:10:35Z",
      "updated_at": "2016-10-22T18:12:12Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: All changes requested on this discussion have been addressed and committed to this PR. I'm not sure what I need to do to respond to your requested changes other than send this note. One very noteworthy change came out of this discussion: since you highlighted that List.Remove had a strong negative impact on performance vs in-place sorting of the items in the list, I was able to get a 5x performance improvement out of -Unique -Top/-Bottom sorts, which is great! On a collection of 250K random values between 1 and 175K, Sort -Unique performs 5x faster than before, it performs slightly faster than that with -Bottom N, and it performs faster than that with -Top N. Non-unique -Top/-Bottom N sorts perform more than 2x faster than a base sort (and even more than that with sort | select -First/-Last). As suggested by @iSazonov, I will blog about this change set, probably in an article for PowerShell Magazine. I'm just waiting for results from appveyor/travis CI and will respond to any issues they have if they come up.\n",
      "created_at": "2016-10-28T14:00:59Z",
      "updated_at": "2016-10-28T14:00:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Please rebase your branch.\n",
      "created_at": "2016-10-28T14:02:49Z",
      "updated_at": "2016-10-28T14:02:49Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I did rebase my branch.\n",
      "created_at": "2016-10-28T14:13:16Z",
      "updated_at": "2016-10-28T14:13:16Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Something is clearly wrong because this PR now shows 26 files changed, yet when I compare my branch here (https://github.com/PowerShell/PowerShell/compare/master...KirkMunro:sort-top-or-bottom) it properly shows 4 files have changed. _sigh_ I didn't have this issue before I rebased my branch.\n",
      "created_at": "2016-10-28T14:18:48Z",
      "updated_at": "2016-10-28T14:19:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Rebase is also my headache \ud83d\ude0a \nFrom my notes (maybe help you):\n\n```\n# rebase pull request on top of master\ngit chechout <branch>\ngit fetch PowerShell master\ngit pull --rebase PowerShell master\ngit push -f\n```\n",
      "created_at": "2016-10-28T15:15:10Z",
      "updated_at": "2016-10-28T15:15:10Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm glad the improvements were notable. Please do fix the commits in the PR and I'll finish reviewing.\n\nFor future reference, when we merge, we decide if we'll squash, rebase, or commit with a merge commit, so it's not normally necessary for most folks to rebase themselves.\n\nThat said, it is useful to be comfortable with rebase.\n",
      "created_at": "2016-10-28T15:46:42Z",
      "updated_at": "2016-10-28T15:46:42Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr Commit cleanup finished and checks passed, awaiting your review.\n\nI should add one note: I didn't benchmark using struct vs class because I moved my additional properties into the existing class and changing that to a struct was non-trivial due to other dependencies (Compare-Object, Group-Object) and outside of the scope of this work.\n",
      "created_at": "2016-10-28T19:12:19Z",
      "updated_at": "2016-10-28T19:14:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Great work!!! \nI looked up the new tests. They are very elegant. But why haven't you moved a initialize codes in BeforeAll?\n",
      "created_at": "2016-10-28T19:23:31Z",
      "updated_at": "2016-10-28T19:23:31Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I just committed an update that improves -unique -top/-bottom sorts performance substantially. On a collection of 500K integers that were generated randomly with values from 1 to 175K, sort -unique took 18 seconds to complete, and with the previous implementation a -Top/-Bottom N -Unique sort would finish slightly faster than that, in around 17 seconds. With these changes, the -Top/-Bottom N -Unique sort finishes in a little over 6 seconds.\n\nI couldn't make this work with the min-/max-heap sort without either walking the heap to see if an item was already added, since an item could be anywhere in the heap.  Walking the heap could result in comparing a new item with every item in the heap in the worst case.  Instead I decided to add another collection to track the unique items. I use SortedSet to store anything unique that is added to the heap, and then skip items that are already in that set instead of adding them to the heap.  This seems pretty efficient, and definitely improves the performance.\n\n@lzybkr Let me know what you think of this commit when you have time to review the most recent changes.  Thanks!\n\n[Update] I committed a follow-up change that removes a few lines that weren't necessary due to the changes I just made, and cleaned up the code in sort-object.cs based on my changes so that it's easier to follow.\n",
      "created_at": "2016-11-02T23:31:55Z",
      "updated_at": "2016-11-02T23:57:25Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Great work @KirkMunro.\n\nA Set should be fine for typical uses of Top/Bottom w/ `-Unique` because I'd expect Top/Bottom to be small relative to the total number of objects.\n\nIf that assumption is wrong, we could look at insertion sort.\n",
      "created_at": "2016-11-04T21:12:26Z",
      "updated_at": "2016-11-04T21:12:26Z"
    }
  ],
  "created_at": "2016-10-21T20:02:58Z",
  "number": 2518,
  "state": "closed",
  "title": "Added -Top/-Bottom params to Sort-Object for Top/Bottom N sort and many Pester tests",
  "updated_at": "2019-01-07T21:23:25Z"
}