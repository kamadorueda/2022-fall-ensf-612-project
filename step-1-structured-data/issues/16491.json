{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16491",
  "author": "nmbell",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n`ErrorVariable` is not populated when `ErrorAction` is `Ignore`.\r\n[Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-7.2#-erroraction) lists `Ignore` as an accepted value, but does not explicitly mention the expected behavior with regards to the `ErrorVariable` parameter.\r\n\r\n`WarningVariable` is populated when `WarningAction` is `Ignore`.\r\n[Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-7.2#-warningaction) lists `Ignore` as an accepted value, but does not mention the expected behavior.\r\n\r\n`InformationVariable` is populated when `InformationAction` is `Ignore`.\r\n[Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-7.2#-informationaction) lists `Ignore` as an accepted value, but does not explicitly mention the expected behavior with regards to the `InformationVariable` parameter.\r\n\r\n```\r\n$myErrors = $null\r\nWrite-Error 'Some error' -ErrorAction Ignore -ErrorVariable myerrors\r\n$myErrors\r\nWrite-Error 'Some error' -ErrorAction SilentlyContinue -ErrorVariable myerrors\r\n$myErrors\r\n\r\n$myWarnings = $null\r\nWrite-Warning 'Some warning' -WarningAction Ignore -WarningVariable myWarnings\r\n$myWarnings\r\nWrite-Warning 'Some warning' -WarningAction SilentlyContinue -WarningVariable myWarnings\r\n$myWarnings\r\n\r\n$myInformation = $null\r\nWrite-Information 'Some information' -InformationAction Ignore -InformationVariable myInformation\r\n$myInformation\r\nWrite-Information 'Some information' -InformationAction SilentlyContinue -InformationVariable myInformation\r\n$myInformation\r\n```\r\n\r\nThe ErrorVariable\\ErrorAction behavior feels intuitively correct; I think this should be implemented across the board.\r\nAlso, what about having `$Warning` and `$Information` automatic variables? Learn how it works with one, and you know how it works with all three.\n\n### Expected behavior\n\n```console\nShould return:\r\n\r\nWrite-Error: Some error\r\nSome warning\r\nSome information\r\n```\n```\n\n\n### Actual behavior\n\n```console\nActually returns:\r\n\r\nWrite-Error: Some error\r\nSome warning\r\nSome warning\r\nSome information\r\nSome information\r\n```\n```\n\n\n### Error details\n\n```console\nn/a\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0, 6.1.0, 6.2.0, 7.0.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine:\r\n\r\nThis does look like an oversight in terms of how ActionPreference.Ignore is handled for non-Error streams. We're unsure whether it makes a lot of sense to have Ignore behave any differently to SilentlyContinue in this instance -- if this combination works it's essentially the same as simply not specifying a -WarningVariable at all.\r\n\r\nCan you share more of your use case here? Why would you use this combination if the expectation is for it to do nothing?\r\n\r\nWe'll mark this as up for grabs for the time being; if anyone has the time to fix it, you're more than welcome to file a PR. \ud83d\ude42 ",
      "created_at": "2021-12-09T23:35:36Z",
      "updated_at": "2021-12-09T23:36:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's essentially the same as simply not specifying a -WarningVariable at all.\r\n\r\nBut `Ignore` can be in a variable. \r\n```powershell\r\n$ea = 'Ignore'\r\nWrite-Error 'Some error' -ErrorAction $ea\r\n```\r\nSo I'd expect all three cases have the same behavior and _ignore_  (don't save in variable) as the keyword implies - I mean for error stream this works right and two other streams should be fixed.",
      "created_at": "2021-12-10T03:15:32Z",
      "updated_at": "2021-12-10T03:17:21Z"
    },
    {
      "author": "nmbell",
      "author_association": "NONE",
      "body": "Sorry if I'm laboring the point, but my perspective is that the use cases are the same for all the streams. Sometimes you want to generate errors, sometimes warnings, sometimes information. Regardless of which, the way these are _handled_ should be the same. Think of the current situation from a new-user perspective: harder to train, harder to learn, harder to remember = harder to use. And that's just not PowerShell \ud83d\ude09.",
      "created_at": "2021-12-10T20:15:51Z",
      "updated_at": "2021-12-10T20:15:51Z"
    }
  ],
  "created_at": "2021-11-19T04:22:36Z",
  "number": 16491,
  "state": "open",
  "title": "Inconsistent population of ErrorVariable\\WarningVariable\\InformationVariable when ErrorAction\\WarningAction\\InformationAction is Ignore",
  "updated_at": "2021-12-10T20:15:51Z"
}