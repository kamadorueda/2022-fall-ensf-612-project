{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1819",
  "author": "mirichmo",
  "body": "## Steps to reproduce\n1. Install PowerShell 6.0.0-alpha.8\n2. Register its remoting endpoint\n3. Create a session to that endpoint and run Invoke-Command -Session $s -Command {$PSVersionTable}\n\nThis is another aspect of #1589 that was not fixed when addressing the original issue. The repro also shows that it works through Enter-PSSession, but not Invoke-Command.\n\nThis issue appears to be limited to the serialization & deserialization of SemanticVersion during Invoke-Command calls.\n## Expected behavior\n\nThe value of $PSVersionTable should be returned.\n## Actual behavior\n\n``` powershell\nPS F:\\GitRepos\\PowerShell> $sxs = nsn . -ConfigurationName powershell.6.0.0-alpha.8\nPS F:\\GitRepos\\PowerShell> Invoke-Command -Session $sxs -Command {1+1}\n2\nPS F:\\GitRepos\\PowerShell> Invoke-Command -Session $sxs -Command {$psversiontable}\nSemanticVersion XML tag is not recognized. Line 1, position 1046.\n    + CategoryInfo          : OperationStopped: (localhost:String) [], PSRemotingTransportException\n    + FullyQualifiedErrorId : JobFailure\n    + PSComputerName        : localhost\n\nPS F:\\GitRepos\\PowerShell> enter-pssession $sxs\n[localhost]: PS C:\\Users\\mirichmo\\Documents> $psversiontable\n\nName                           Value\n----                           -----\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nCLRVersion\nGitCommitId                    v6.0.0-alpha.8-44-ga35d6adc631309319fa9f85f142feb9b77e2b5ed\nBuildVersion                   3.0.0.0\nPSRemotingProtocolVersion      2.3\nPSVersion                      6.0.0-alpha\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\nName                           Value\n----                           -----\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nCLRVersion\nGitCommitId                    v6.0.0-alpha.8-44-ga35d6adc631309319fa9f85f142feb9b77e2b5ed\nBuildVersion                   3.0.0.0\nPSRemotingProtocolVersion      2.3\nPSVersion                      6.0.0-alpha\n```\n",
  "closed_at": "2018-06-08T18:38:15Z",
  "comments": [
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "Initially reported by @alexandair over email.\n",
      "created_at": "2016-08-15T20:44:04Z",
      "updated_at": "2016-08-15T20:44:04Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "my real concern about this would be other types which exist in PSCore that don't exist in full - are there more of these lurking about?",
      "created_at": "2017-03-30T23:06:10Z",
      "updated_at": "2017-03-30T23:06:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How can we catch it in our tests?",
      "created_at": "2017-03-31T06:42:40Z",
      "updated_at": "2017-03-31T06:42:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I don't think we can repro this on a single machine test, it needs to be across machines that have different representations of the same type.  @JamesWTruher is working on bring up cross platform and cross PS version tests, this should catch it there.",
      "created_at": "2017-03-31T17:41:19Z",
      "updated_at": "2017-03-31T17:41:19Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "it can be caught on *Windows* as follows:\r\nfrom PSCore\r\n     $psversiontable | export-clixml versiontable.clixml\r\nfrom Full PowerShell\r\n    import-clixml versiontable.clixml\r\n-- error will happen --\r\nthe problem isn't the remote connection, but the serializer",
      "created_at": "2017-03-31T23:47:39Z",
      "updated_at": "2017-03-31T23:47:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher Great!\r\nIt looks that we can make a test in the same way as for monitoring approved aliases:\r\nfor every build type (Win FullCRL, Win CoreCLR, Unix CoreCLR) create `approvedTypes-<Build>.clixml` with list of approved types and 1. trying import them in CI test time and 2. comparing with the current runtime generated (export-clixml) list.",
      "created_at": "2017-04-01T11:02:00Z",
      "updated_at": "2017-04-01T11:02:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mirichmo this is remoting only from Windows PowerShell to PSCore6?",
      "created_at": "2017-04-11T16:38:55Z",
      "updated_at": "2017-04-11T16:38:55Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This is still relevant. @SteveL-MSFT: yes. ",
      "created_at": "2017-05-24T18:27:26Z",
      "updated_at": "2017-05-24T18:27:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe this is a change we'll have to make in Windows PowerShell 5.1",
      "created_at": "2017-11-13T19:11:00Z",
      "updated_at": "2017-11-13T19:11:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We still haven't tests for serializer as mentioned above. I believe it is blocking issue.\r\nAlso we merged #5037 to get SemVer 2.0 - should it be added to PS 5.1 too?",
      "created_at": "2017-11-14T05:51:46Z",
      "updated_at": "2017-11-14T05:51:46Z"
    }
  ],
  "created_at": "2016-08-15T20:43:01Z",
  "labels": [
    "Resolution-Fixed",
    "WG-Remoting",
    "Consider-WindowsPowerShell51"
  ],
  "number": 1819,
  "state": "closed",
  "title": "Invoke-Command -Session $s -Command {$PSVersionTable} Fails Due to SemanticVersion",
  "updated_at": "2018-06-09T03:05:23Z"
}