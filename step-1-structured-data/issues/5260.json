{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5260",
  "author": "anmenaga",
  "body": "Condition in build.psm1 seems to be looking for exact match with \"2.0.0\", while the tools are of \"2.0.2\". This blocks the build.\r\n\r\n```none\r\n$dotnetCLIRequiredVersion = \"2.0.0\"\r\n...\r\n    # Verify if the dotnet in-use is the required version\r\n    $dotnetCLIInstalledVersion = (dotnet --version)\r\n    If ($dotnetCLIInstalledVersion -ne $dotnetCLIRequiredVersion) {\r\n        Write-Warning @\"\r\nThe currently installed .NET Command Line Tools is not the required version.\r\n...\r\n```\r\nExpected behavior:\r\n---------------\r\nBuild succeeds.\r\n\r\n\r\nActual behavior\r\n---------------\r\nBuild stops at warning:\r\n\r\n![versions](https://user-images.githubusercontent.com/11860095/32125069-1b1bee6c-bb1f-11e7-813e-953a89f0702e.png)\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```\r\ngit clone --recursive https://github.com/PowerShell/PowerShell.git\r\nImport-Module ./build.psm1\r\nStart-PSBootstrap\r\nStart-PSBuild\r\n```\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17025.1001\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17025.1001\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-11-10T00:28:39Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Do you have a `global.json` file in the root of the repo?  It's contents should specify that PowerShell currently uses the 2.0.0 version of the SDK.  The gist is that the presence of this file should cause `dotnet --version` to return `2.0.0` **if** that command is run within the repo dir structure.  From that code snippet, I can't tell which dir the command is run from.  I suspect the dir isn't being set to the repo path which would cause this problem.\r\n\r\nTry this, cd into your local PowerShell repo and run `dotnet --version`.  What version do you get?",
      "created_at": "2017-10-27T21:06:47Z",
      "updated_at": "2017-10-27T21:07:25Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "All commands are run from PowerShell repo root `C:\\github\\PowerShell`\r\n```\r\nPS C:\\github\\PowerShell> dir global.json\r\n\r\n\r\n    Directory: C:\\github\\PowerShell\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       10/27/2017   1:34 PM             47 global.json\r\n\r\n\r\nPS C:\\github\\PowerShell> gc .\\global.json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.0.0\"\r\n  }\r\n}\r\nPS C:\\github\\PowerShell> dotnet --version\r\n2.0.2\r\nPS C:\\github\\PowerShell>\r\n```",
      "created_at": "2017-10-27T21:21:52Z",
      "updated_at": "2017-10-27T21:26:13Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Hmm, that is not what I see but I have both 2.0.0 and 2.0.2 installed.  Which versions do you have in your `C:\\Program Files\\dotnet\\sdk` and `C:\\Users\\anmenaga\\AppData\\Local\\Microsoft\\dotnet\\sdk` folders?",
      "created_at": "2017-10-27T21:44:41Z",
      "updated_at": "2017-10-27T21:46:51Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nPS C:\\github\\PowerShell> dir \"C:\\Program Files\\dotnet\\sdk\"\r\n\r\n\r\n    Directory: C:\\Program Files\\dotnet\\sdk\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       10/11/2017   3:05 PM                2.0.2\r\nd-----       10/27/2017   2:38 PM                NuGetFallbackFolder\r\n\r\n\r\nPS C:\\github\\PowerShell>\r\n```",
      "created_at": "2017-10-27T21:46:56Z",
      "updated_at": "2017-10-27T21:46:56Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Anything in the `C:\\Users\\anmenaga\\AppData\\Local\\Microsoft\\dotnet\\sdk` folder?",
      "created_at": "2017-10-27T21:48:25Z",
      "updated_at": "2017-10-27T21:48:25Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nPS C:\\github\\PowerShell> dir C:\\Users\\anmenaga\\AppData\\Local\\Microsoft\\dotnet\\sdk\r\n\r\n\r\n    Directory: C:\\Users\\anmenaga\\AppData\\Local\\Microsoft\\dotnet\\sdk\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----       10/27/2017   1:36 PM                2.0.0\r\nd-----       10/27/2017   1:45 PM                NuGetFallbackFolder\r\n```",
      "created_at": "2017-10-27T21:51:21Z",
      "updated_at": "2017-10-27T21:51:21Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Hmm, I wonder why `dotnet` is not seeing the sdk under you AppData dir.  As an experiment, would you be willing to install the .NET SDK from [here](https://www.microsoft.com/net/download/core), restart PowerShell and then re-run `dotnet --version` from the PowerShell repo folder.  Does that still report 2.0.2?",
      "created_at": "2017-10-27T22:05:19Z",
      "updated_at": "2017-10-27T22:05:29Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Can't we optimize the version check in `build.psm1` to do ordinal version comparison after validating the major version of the dotnet CLI?\r\n\r\nPowerShell seems to compile just fine with version `2.0.2`",
      "created_at": "2017-10-28T08:43:26Z",
      "updated_at": "2017-10-28T08:43:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "There's definitely an argument to be made to simply let global.json inform of `dotnet` of the desired version of the SDK and let `dotnet` determine compatibility.  \r\n\r\nThat said, it seems like there is a bug in `dotnet` because on my system with both 2.0.0 and 2.0.2, `dotnet --version` reports `2.0.0` in the PowerShell repo.  Not sure why the OP isn't seeing the same thing given they also have both the 2.0.2 and 2.0.0  SDK installed.",
      "created_at": "2017-10-28T18:34:38Z",
      "updated_at": "2017-10-28T18:34:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We decided to use a fixed version after a number of compatibility problems.\r\nWe now expect 2.0.3 version with important patches.",
      "created_at": "2017-10-29T07:30:10Z",
      "updated_at": "2017-10-29T07:30:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe related https://github.com/dotnet/cli/issues/6836",
      "created_at": "2017-10-29T07:39:19Z",
      "updated_at": "2017-10-29T07:39:19Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "It appears that perhaps the PowerShell build is installing the .NET Core SDK into a place that isn't ideal.  https://github.com/dotnet/cli/issues/7928#issuecomment-340522972\r\n\r\n> 'dotnet' does not consider versions that were installed to the user's AppData folder; this is by design.\r\n\"That will install .NET Core 2.0.0 into the user's AppData folder\" - **consider changing this installation location.**\r\n\r\n@anmenaga This answers the question as to why you're seeing this error.  Installing the .NET Core 2.0 SDK from https://www.microsoft.com/net/download/core will get you around this issue.\r\n\r\nQuestion for @PowerShellTeam, why does the build system install into the user's AppData folder instead of the normal program files location?  Because of the need to elevate?  As it stands now, the global.json file apparently will not help unless the user has installed .NET Core SDK ahead of time.\r\n",
      "created_at": "2017-10-30T17:49:48Z",
      "updated_at": "2017-10-30T17:49:48Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @rkeithhill \r\n\r\nAn interesting observation...\r\nOn my machine \"Program Files\\dotnet\" location (with version 2.0.2) was in %PATH% system-wide env var. Looks like it was added there when I recently installed Visual Studio 2017 (I've confirmed on a clean machine that VS2017 adds to the %PATH% system-wide env var).\r\nWhen I changed %PATH% env var to have AppData|2.0.0 location instead - things started working again.",
      "created_at": "2017-11-01T00:06:24Z",
      "updated_at": "2017-11-01T00:06:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we document this and/or add a check in Start-PSBootStrap?",
      "created_at": "2017-11-01T04:35:11Z",
      "updated_at": "2017-11-01T04:35:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We use the [`dotnet-install.ps1`](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1) script from 'dotnet/cli' repo to install dotnet sdk, and it installs dontet to AppData folder by default.\r\n\r\nThe `global.json` file did resolve the same build issue in our AppVeyor CI about 2 weeks ago. It seemed there was an update to the \"Server 2016+VS2107\" image we are using in AppVeyor. The new image has dotnet installed in `Program Files`, and caused `Start-PSBuild` to stop working. Then we merged the PR #5118 and the CI started to work again. I guess that was because the dotnet installed at `Program Files` has both 2.0.2 and 2.0.0 installed (need to verify it myself).",
      "created_at": "2017-11-02T18:37:42Z",
      "updated_at": "2017-11-02T18:53:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Just verified on an AppVeyor builder. The `dotnet` SDK installed at `C:\\Program Files\\dotnet` has the following versions installed. That's why `global.json` fixed the CI runs.\r\n```\r\nPS C:\\Program Files\\dotnet\\sdk> dir\r\n\r\n\r\n    Directory: C:\\Program Files\\dotnet\\sdk\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nda----         4/8/2017   1:00 PM                1.0.1\r\nda----         4/7/2017  10:10 PM                1.0.2\r\nda----        4/10/2017  12:06 PM                1.0.3\r\nd-----        5/28/2017  12:02 PM                1.0.4\r\nd-----        8/15/2017   3:26 PM                1.1.0\r\nd-----        8/15/2017  12:36 PM                2.0.0\r\nd-----       10/17/2017   8:47 PM                2.0.2\r\nd-----        11/2/2017   1:08 PM                NuGetFallbackFolder\r\n```",
      "created_at": "2017-11-02T20:20:20Z",
      "updated_at": "2017-11-02T20:20:20Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Got this info from the[ dotnet/cli](https://github.com/dotnet/cli/issues/7928#issuecomment-341842011) folks:\r\n\r\n> Set the environment variable MULTI_LEVEL_LOOKUP to false to disable it.\r\nThe install script is used to download a ZIP and it puts the contents of the ZIP in the path for your current shell session. We don't make any statements regarding the dotnet host being able to find the SDK in the default location that the install script installs the SDK.\r\nAlso note that if you use the install script, the expectation is that you will run dotnet.exe from where the script installed the SDK, and the host will find the SDK that is sitting right next to it.\r\n\r\nIt appears to me that this is likely to work correctly the first time the user bootstraps the build env as the install-dotnet script adds the download path (user's appdata dir) to the PowerShell process's path.  After that session is closed, the user is at the mercy of what they have officially installed AFAICT because the build script is executing `dotnet ` as in `dotnet --version`, `dotnet restore`, etc.  There is no attempt to use the version of dotnet that the bootstrapper installed.  This seems a bit perilous.  \r\n\r\nOne option is to use the install-dotnet script to install into `$env:ProgramFiles\\dotnet` (on Windows) but would require elevation.  Another option is to configure `$dotnet` as a path to the executable where that path is under the user's app data folder.  Finally, you could try setting `$env:MULTI_LEVEL_LOOKUP=\"false\"` but I'm still a little fuzzy as to what that actually does.",
      "created_at": "2017-11-04T02:18:00Z",
      "updated_at": "2017-11-04T02:18:00Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I've been looking at how the PowerShellEditorServices does this. It installs into a `.dotnet` folder at the root of the repo.  You'd need to gitignore that but that is another option to consider.",
      "created_at": "2017-11-04T04:27:27Z",
      "updated_at": "2017-11-04T04:27:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "OK did a bit more investigating into this. I removed the 2.0.2 SDK that was in my `C:\\Program Files\\dotnet\\sdk` dir and also removed the one from my app data dir.  Then I bootstrapped and tried to build w/no joy:\r\n```\r\n14:109ms> ipmo .\\build.psm1\r\n15:88ms> Start-PSBootstrap\r\nInstalling PowerShell build dependencies\r\ndotnet not present.  Installing dotnet.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.2/dotnet-sdk-2.0.2-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.2/dotnet-sdk-2.0.2-win-x64.zip\r\ndotnet-install: Adding to current process PATH: \"C:\\Users\\Keith\\AppData\\Local\\Microsoft\\dotnet\\\". Note: This change will not be visible if PowerShell was run as a child process.\r\ndotnet-install: Installation finished\r\n\r\n17:367ms> gcm dotnet\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nApplication     dotnet.exe                                         2.0.255... C:\\Program Files\\dotnet\\dotnet.exe\r\n\r\n18:133ms> Start-PSBuild\r\nWARNING: The currently installed .NET Command Line Tools is not the required version.\r\n\r\nInstalled version: 2.0.0\r\nRequired version: 2.0.2\r\n\r\nFix steps:\r\n\r\n1. Remove the installed version from:\r\n    - on windows '$env:LOCALAPPDATA\\Microsoft\\dotnet'\r\n    - on macOS and linux '$env:HOME/.dotnet'\r\n2. Run Start-PSBootstrap or Install-Dotnet\r\n3. Start-PSBuild -Clean\r\n```\r\nThe problem is that the `precheck` method is looking for **any** `dotnet` in the path.  In this case, it finds the `dotnet` in `C:\\Program Files\\dotnet` which is not able to see the SDK that was just downloaded. \r\n\r\nThis can be fixed by having `Find-Dotnet` first check to see if dotnet is in the current path and if so, does it have the required SDK version.  If it does then we use it.  Mostly likely this dotnet is the global dotnet in which case we avoided installing dotnet when it doesn't need to be installed.  \r\n\r\nMore importantly though, we don't settle on a version of dotnet (global) that doesn't have the required SDK.  In the case the globally installed dotnet doesn't have the required SDK, we **prepend** the user's local path for dotnet.  If we can't find dotnet or the required SDK in the user's local dotnet dir, this triggers a user local installation of dotnet.\r\n\r\nPR coming on this.\r\n",
      "created_at": "2017-11-04T22:19:37Z",
      "updated_at": "2017-11-06T18:34:52Z"
    }
  ],
  "created_at": "2017-10-27T21:01:14Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 5260,
  "state": "closed",
  "title": ".NET Core tools version check in build.psm1 blocks the build",
  "updated_at": "2017-11-10T03:34:15Z"
}