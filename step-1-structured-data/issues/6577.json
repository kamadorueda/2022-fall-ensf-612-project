{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6577",
  "author": "SurferJeffAtGoogle",
  "body": "Not all commands.  `ls` takes 20 seconds.  `dir` is nearly instant.  This is just the simplest example, but the overall experience makes me want to stop using powershell on Linux.  :-(  Tab completion also takes around 20 seconds.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\nPS > measure-command { ls }                                 \r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 20\r\nMilliseconds      : 25\r\nTicks             : 200252179\r\nTotalDays         : 0.000231773355324074\r\nTotalHours        : 0.00556256052777778\r\nTotalMinutes      : 0.333753631666667\r\nTotalSeconds      : 20.0252179\r\nTotalMilliseconds : 20025.2179\r\n\r\nPS > measure-command { dir }                                \r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 3\r\nTicks             : 33095\r\nTotalDays         : 3.83043981481481E-08\r\nTotalHours        : 9.19305555555556E-07\r\nTotalMinutes      : 5.51583333333333E-05\r\nTotalSeconds      : 0.0033095\r\nTotalMilliseconds : 3.3095\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nls takes a second or so.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nls takes 20 seconds.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Linux 4.9.0-6-amd64 #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02)\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SurferJeffAtGoogle Can you run `Get-Command ls` and `Get-Command dir` to see what commands are actually being executed? We don't install the \"ls -> Get-ChildItem\" alias on Linux by default so you should just be running the native `/bin/ls` (or whatever's in your path). We do ship the \"dir->Get-ChildItem\" alias but you say that's OK which is confusing.",
      "created_at": "2018-04-05T23:01:47Z",
      "updated_at": "2018-04-05T23:01:47Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "What's surprising is that calling `get-command ls` also takes 20 seconds!\r\n\r\n```powershell\r\nPS > get-command ls                                         \r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nApplication     ls                                                 0.0.0.0    /bin/ls\r\n\r\n\r\nPS > get-command dir                                        \r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           dir -> Get-ChildItem                                          \r\n\r\n\r\nPS > measure-command { get-command ls }                     \r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 20\r\nMilliseconds      : 35\r\nTicks             : 200359003\r\nTotalDays         : 0.000231896994212963\r\nTotalHours        : 0.00556552786111111\r\nTotalMinutes      : 0.333931671666667\r\nTotalSeconds      : 20.0359003\r\nTotalMilliseconds : 20035.9003\r\n```\r\n\r\nBut with a bash shell, the equivalent of `get-command` takes hardly any time:\r\n\r\n```bash\r\n$ which ls\r\n/bin/ls\r\n$ time which ls\r\n/bin/ls\r\n\r\nreal\t0m0.003s\r\nuser\t0m0.000s\r\nsys\t0m0.000s\r\n```",
      "created_at": "2018-04-06T15:36:53Z",
      "updated_at": "2018-04-06T15:36:53Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I have experiencing the same issue sporadically in both Windows and Linux.  Sometimes is fast and other time slow.\r\n(?)\r\n",
      "created_at": "2018-04-06T15:45:01Z",
      "updated_at": "2018-04-06T15:45:01Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SurferJeffAtGoogle  What happens when you launch ls with a fully qualified path\r\n```\r\n/bin/ls\r\n```\r\nAlso, can you try other executables like `true`\r\n```\r\ntrue\r\n/bin/true\r\n```\r\nFinally, what does your path look like in PowerShell\r\n```\r\n$ENV:PATH\r\n```\r\nIf it's mangled, then that would explain both slow launching and slow `Get-Command` calls.",
      "created_at": "2018-04-06T19:10:47Z",
      "updated_at": "2018-04-06T19:10:47Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "Launching with the full path runs quick:\r\n\r\n```powershell\r\nPS > measure-command { ls }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 20\r\nMilliseconds      : 62\r\nTicks             : 200625091\r\nTotalDays         : 0.000232204966435185\r\nTotalHours        : 0.00557291919444444\r\nTotalMinutes      : 0.334375151666667\r\nTotalSeconds      : 20.0625091\r\nTotalMilliseconds : 20062.5091\r\n\r\n\r\n\r\nPS > measure-command { /bin/ls }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 6\r\nTicks             : 66497\r\nTotalDays         : 7.69641203703704E-08\r\nTotalHours        : 1.84713888888889E-06\r\nTotalMinutes      : 0.000110828333333333\r\nTotalSeconds      : 0.0066497\r\nTotalMilliseconds : 6.6497\r\n\r\n\r\n\r\nPS > measure-command { true }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 20\r\nMilliseconds      : 30\r\nTicks             : 200306653\r\nTotalDays         : 0.000231836403935185\r\nTotalHours        : 0.00556407369444444\r\nTotalMinutes      : 0.333844421666667\r\nTotalSeconds      : 20.0306653\r\nTotalMilliseconds : 20030.6653\r\n\r\n\r\n\r\nPS > measure-command { /bin/true }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 15\r\nTicks             : 155612\r\nTotalDays         : 1.80106481481481E-07\r\nTotalHours        : 4.32255555555556E-06\r\nTotalMinutes      : 0.000259353333333333\r\nTotalSeconds      : 0.0155612\r\nTotalMilliseconds : 15.5612\r\n```\r\n\r\nHere's my path.  It's identical in bash, and bash does not experience the same slowness.\r\n\r\n```powershell\r\nPS /usr/local/google/home/rennie/tmp>   ls\r\nPS /usr/local/google/home/rennie/tmp> /bin/ls\r\nPS /usr/local/google/home/rennie/tmp> $env:PATH\r\n/opt/microsoft/powershell/6.1.0~preview.1:/usr/local/google/home/rennie/Downloads/google-cloud-sdk/bin:/usr/local/google/home/rennie/Downloads/phantomjs-1.9.8-linux-x86_64/bin:/usr/local/google/home/rennie/.composer/vendor/bin:/usr/local/google/home/rennie/bin:/usr/local/google/home/rennie/.phpenv/bin:/usr/local/google/home/rennie/Downloads/dotnet-2.0.5:/usr/local/google/home/rennie/Downloads/dotnet-1.1.2:/usr/local/google/home/rennie/Downloads/apache-maven-3.3.9/bin:/usr/local/google/home/rennie/Downloads/node-v4.2.1-linux-x64/bin:/usr/local/google/home/rennie/Downloads/google-cloud-sdk/bin:/usr/local/google/home/rennie/.composer/vendor/bin:/usr/local/google/home/rennie/bin:/usr/local/google/home/rennie/.phpenv/bin:/usr/local/google/home/rennie/Downloads/dotnet-2.0.5:/usr/local/google/home/rennie/Downloads/dotnet-1.1.2:/usr/local/google/home/rennie/Downloads/apache-maven-3.3.9/bin:/usr/local/google/home/rennie/Downloads/node-v4.2.1-linux-x64/bin:/usr/lib/google-golang/bin:/usr/local/buildtools/java/jdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nPS /usr/local/google/home/rennie/tmp> \r\n```\r\n\r\n```bash\r\nrennie@rennie:~/tmp$\r\nrennie@rennie:~/tmp$ env | grep ^PATH\r\nPATH=/usr/local/google/home/rennie/Downloads/google-cloud-sdk/bin:/usr/local/google/home/rennie/Downloads/phantomjs-1.9.8-linux-x86_64/bin:/usr/local/google/home/rennie/.composer/vendor/bin:/usr/local/google/home/rennie/bin:/usr/local/google/home/rennie/.phpenv/bin:/usr/local/google/home/rennie/Downloads/dotnet-2.0.5:/usr/local/google/home/rennie/Downloads/dotnet-1.1.2:/usr/local/google/home/rennie/Downloads/apache-maven-3.3.9/bin:/usr/local/google/home/rennie/Downloads/node-v4.2.1-linux-x64/bin:/usr/local/google/home/rennie/Downloads/google-cloud-sdk/bin:/usr/local/google/home/rennie/.composer/vendor/bin:/usr/local/google/home/rennie/bin:/usr/local/google/home/rennie/.phpenv/bin:/usr/local/google/home/rennie/Downloads/dotnet-2.0.5:/usr/local/google/home/rennie/Downloads/dotnet-1.1.2:/usr/local/google/home/rennie/Downloads/apache-maven-3.3.9/bin:/usr/local/google/home/rennie/Downloads/node-v4.2.1-linux-x64/bin:/usr/lib/google-golang/bin:/usr/local/buildtools/java/jdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nrennie@rennie:~/tmp$\r\n```",
      "created_at": "2018-04-06T21:12:38Z",
      "updated_at": "2018-04-06T21:12:38Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "Even when I reduce my path to almost nothing, the performance is similar:\r\n\r\n```powershell\r\nPS /usr/local/google/home/rennie/tmp> $env:PATH\r\n$env:PATH\r\n/opt/microsoft/powershell/6.1.0~preview.1:/usr/bin\r\nPS /usr/local/google/home/rennie/tmp> measure-command { ls }\r\nls : The term 'ls' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:19\r\n+ measure-command { ls }\r\n+                   ~~\r\n+ CategoryInfo          : ObjectNotFound: (ls:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 40\r\nMilliseconds      : 122\r\nTicks             : 401220615\r\nTotalDays         : 0.000464375711805556\r\nTotalHours        : 0.0111450170833333\r\nTotalMinutes      : 0.668701025\r\nTotalSeconds      : 40.1220615\r\nTotalMilliseconds : 40122.0615\r\n\r\n\r\n\r\nPS /usr/local/google/home/rennie/tmp> measure-command { /bin/ls }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 14\r\nTicks             : 141501\r\nTotalDays         : 1.63774305555556E-07\r\nTotalHours        : 3.93058333333333E-06\r\nTotalMinutes      : 0.000235835\r\nTotalSeconds      : 0.0141501\r\nTotalMilliseconds : 14.1501\r\n\r\n\r\n\r\nPS /usr/local/google/home/rennie/tmp>\r\n```",
      "created_at": "2018-04-06T21:26:44Z",
      "updated_at": "2018-04-06T21:26:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@SurferJeffAtGoogle Is this still an issue with 6.2?",
      "created_at": "2019-03-23T19:06:09Z",
      "updated_at": "2019-03-23T19:06:09Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "I haven't tried 6.2 yet:\n\nPS /usr/local/google/home/rennie> $PSVersionTable.PSVersion\n\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\n-----  -----  -----  --------------- ----------\n6      1      3\n\n\nPS /usr/local/google/home/rennie> measure-command { clear }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 14\nMilliseconds      : 249\nTicks             : 142493659\nTotalDays         : 0.000164923216435185\nTotalHours        : 0.00395815719444444\nTotalMinutes      : 0.237489431666667\nTotalSeconds      : 14.2493659\nTotalMilliseconds : 14249.3659\n\nOn Sat, Mar 23, 2019 at 12:06 PM Steve Lee <notifications@github.com> wrote:\n\n> @SurferJeffAtGoogle <https://github.com/SurferJeffAtGoogle> Is this still\n> an issue with 6.2?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/6577#issuecomment-475896182>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ALO54srnStQZaWiQRpKutZjzkwd1KVeLks5vZns3gaJpZM4TJN34>\n> .\n>\n",
      "created_at": "2019-03-25T17:24:47Z",
      "updated_at": "2019-03-25T17:24:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@SurferJeffAtGoogle I setup a new Debian 9 VM on my macBook Pro.  Installed 6.1.3, and executed:\r\n\r\n> measure-command { clear }\r\n\r\nThat finished in 46ms\r\n",
      "created_at": "2019-03-25T18:26:42Z",
      "updated_at": "2019-03-25T18:26:42Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "I suspect my corp environment has some quirks that don't exist elsewhere.\nIs there a tool I can run to trace where PowerShell is spending its time?\n\nOn Mon, Mar 25, 2019 at 11:27 AM Steve Lee <notifications@github.com> wrote:\n\n> @SurferJeffAtGoogle <https://github.com/SurferJeffAtGoogle> I setup a new\n> Debian 9 VM on my macBook Pro. Installed 6.1.3, and executed:\n>\n> measure-command { clear }\n>\n> That finished in 46ms\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/6577#issuecomment-476322368>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ALO54iKThLfzku3XDHnNqrJg21avv2nWks5vaRUHgaJpZM4TJN34>\n> .\n>\n",
      "created_at": "2019-03-25T20:52:37Z",
      "updated_at": "2019-03-25T20:52:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Would you be able to clone my branch from https://github.com/PowerShell/PowerShell/pull/9230 which adds timestamps to the trace command and do this:\r\n\r\n```powershell\r\ntrace-command -Name * -Expression { true } -PSHost\r\n```\r\n\r\nAnd see where it's spending its time?",
      "created_at": "2019-03-26T18:21:32Z",
      "updated_at": "2019-03-26T18:21:32Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "Thank you.  I'll try that.  But it could take a few days due to my other\ncommitments.\n\nOn Tue, Mar 26, 2019 at 11:22 AM Steve Lee <notifications@github.com> wrote:\n\n> Would you be able to clone my branch from #9230\n> <https://github.com/PowerShell/PowerShell/pull/9230> which adds\n> timestamps to the trace command and do this:\n>\n> trace-command -Name * -Expression { true } -PSHost\n>\n> And see where it's spending its time?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/6577#issuecomment-476784404>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ALO54t30ivILSl7Yc95tMSSjBCra0SuRks5vamVNgaJpZM4TJN34>\n> .\n>\n",
      "created_at": "2019-03-27T16:22:56Z",
      "updated_at": "2019-03-27T16:22:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@SurferJeffAtGoogle Thanks!  No rush, not much we can do for 6.2 right now anyways.",
      "created_at": "2019-03-27T19:26:18Z",
      "updated_at": "2019-03-27T19:26:18Z"
    },
    {
      "author": "bendowski",
      "author_association": "NONE",
      "body": "Fellow Googler here, with similar corp setup. \r\n\r\nThe problem seems to be that we have symlinks in `/usr/bin`, pointing to files on slow filesystems. In zsh I can see `ls --color=never /usr/bin` is instant but `ls ---color=always /usr/bin` takes seconds (presumably resolving symlinks to print them in them red if invalid). I can confirm by looking at `trace-command` output that the time is spent \"looking for true in /usr/bin\" and removing `/usr/bin` from `$env:PATH` fixes the issue.",
      "created_at": "2019-08-23T09:12:40Z",
      "updated_at": "2019-08-23T09:13:46Z"
    },
    {
      "author": "SurferJeffAtGoogle",
      "author_association": "NONE",
      "body": "Thank you @bendowski!  That helps.",
      "created_at": "2019-08-23T22:29:12Z",
      "updated_at": "2019-08-23T22:29:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I see this as a pain point, but this seems to do with the filesystem perf and not something PowerShell can do without someone coming up with a proposal",
      "created_at": "2019-10-15T21:00:12Z",
      "updated_at": "2019-10-15T21:00:12Z"
    },
    {
      "author": "bendowski",
      "author_association": "NONE",
      "body": "For the record: other shells (bash, zsh) work fine in this setup. I can only guess they don't check the executable bit (or other file attributes) ahead of time for every file on the PATH, only when needed to actually run a binary.",
      "created_at": "2019-10-16T10:46:39Z",
      "updated_at": "2019-10-16T10:46:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bendowski ok, that's something we could potentially do as an optimization!",
      "created_at": "2019-10-16T16:19:45Z",
      "updated_at": "2019-10-16T16:19:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We look files by paths from PATH environment variable and by executable extentions in https://github.com/PowerShell/PowerShell/blob/48db3de03ed427f10646f1fbb824a2b4eb958378/src/System.Management.Automation/engine/CommandPathSearch.cs#L408\r\n\r\nWe could try new API  FileSystemEnumerable() in the method where we can use custom predicate to filter files in directory but it is another scenario (Suggestions, or FuzzyMatch).\r\n\r\nAlso we see possible perf issue in the algorithm. We use search pattern like \"ping.exe.*\" and then the same for all extensions - \"ping.exe.ps1*\", \"ping.exe.cpl\" and so on, but it seems the first pattern overlaps the follow ones: if we do not find first then it makes no sense check rest.\r\n",
      "created_at": "2019-10-16T17:53:38Z",
      "updated_at": "2019-10-17T13:53:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT If I remember correctly PATHEXT is only for Windows. So \r\nthere is no need to check extensions on Unix-s, right?\r\n",
      "created_at": "2019-10-17T07:20:52Z",
      "updated_at": "2019-10-17T07:20:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT We have a perf regression on Windows. For `Get-Command ping` __~3 ms__ on my system.\r\n\r\nTest script:\r\n```powershell\r\nfor ($i=0; $i -lt 2000; $i++) {\r\n    Get-Command ping > $null\r\n}\r\n```\r\nOn Windows PowerShell 5.1 and up to PowerShell Core 6.1.0-Preview2 I get __~2.5 sec__.\r\nStarting with PowerShell Core 6.1.0-Preview2 I get __~8.2 sec__.\r\n\r\nI compare traces for PowerShell Core 6.1.0-Preview2 and PowerShell Core 6.1.0-Preview3\r\n![image](https://user-images.githubusercontent.com/22290914/67015912-c184fe00-f110-11e9-90dc-42c89c36a2ef.png)\r\n![image](https://user-images.githubusercontent.com/22290914/67015941-cba6fc80-f110-11e9-8dd4-7c32b8bebc2e.png)\r\n\r\nYou can see that there other P/Invokes are used in Preview3.\r\nI guess it was a change in .Net Core. If so I guess they know about this and accepted consciously.\r\n\r\nShould we worry about this or can we ignore it?\r\n\r\nUpdate: Maybe on Unix we have have the same root of the regression?",
      "created_at": "2019-10-17T14:12:41Z",
      "updated_at": "2019-10-17T15:19:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, PATHEXT is a Windows only thing.  On non-Windows, the executable bit is what is interesting although we special case .ps1.  The perf data is different from what this issue is discussing which is specific to traversing symlinks opening files at discovery time rather than at runtime.",
      "created_at": "2019-10-17T19:29:14Z",
      "updated_at": "2019-10-17T19:29:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks! Clear about PATHEXT.\r\n\r\nMy trace is for discovery code. I think just the enumeration (Directory.EnumerateFiles()) is slow, not exec bit check.\r\nOur exec bit check is _on last step_ for single file (after we enumerate all files in a directory and filter by name) so if we remove them it does not help.\r\n\r\n",
      "created_at": "2019-10-18T03:43:21Z",
      "updated_at": "2019-10-18T03:44:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bendowski @SurferJeffAtGoogle Please download compiled artifact from #10815 and look if you see any perf change.",
      "created_at": "2019-10-18T04:10:32Z",
      "updated_at": "2019-10-18T04:10:32Z"
    },
    {
      "author": "0xd4d",
      "author_association": "NONE",
      "body": "@iSazonov Can you open a corefx issue about `Directory.EnumerateFiles()`? That perf regression is really bad and not expected.",
      "created_at": "2019-10-18T13:57:30Z",
      "updated_at": "2019-10-18T13:57:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@0xd4d PowerShell repo steps is not useful for Core team. This requires a C# repo. I didn't have time to check it out (on different .Net Core versions).\r\n",
      "created_at": "2019-10-18T14:06:41Z",
      "updated_at": "2019-10-18T14:07:10Z"
    },
    {
      "author": "0xd4d",
      "author_association": "NONE",
      "body": "@iSazonov I opened a corefx issue about that problem https://github.com/dotnet/corefx/issues/41898",
      "created_at": "2019-10-18T15:54:15Z",
      "updated_at": "2019-10-18T15:54:15Z"
    },
    {
      "author": "bendowski",
      "author_association": "NONE",
      "body": "I'm sorry for the delay. I tried the build you linked as well as the latest preview (7.0.0-preview5) and they seem to behave the same. It's much better than before (with ls taking 20 seconds), but still some commands take longer than I would expect. This seems to be somewhat non-deterministic, see this example of running \"true\" 4 times in a row:\r\n\r\n```\r\nPS /> measure-command { true }   \r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 28\r\nTicks             : 289087\r\nTotalDays         : 3.34591435185185E-07\r\nTotalHours        : 8.03019444444444E-06\r\nTotalMinutes      : 0.000481811666666667\r\nTotalSeconds      : 0.0289087\r\nTotalMilliseconds : 28.9087\r\n\r\n\r\nPS /> measure-command { true }   \r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 443\r\nTicks             : 4435776\r\nTotalDays         : 5.134E-06\r\nTotalHours        : 0.000123216\r\nTotalMinutes      : 0.00739296\r\nTotalSeconds      : 0.4435776\r\nTotalMilliseconds : 443.5776\r\n\r\n\r\nPS /> measure-command { true }   \r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 34\r\nTicks             : 346932\r\nTotalDays         : 4.01541666666667E-07\r\nTotalHours        : 9.637E-06\r\nTotalMinutes      : 0.00057822\r\nTotalSeconds      : 0.0346932\r\nTotalMilliseconds : 34.6932\r\n\r\n\r\nPS /> measure-command { true }   \r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 422\r\nTicks             : 4221326\r\nTotalDays         : 4.88579398148148E-06\r\nTotalHours        : 0.000117259055555556\r\nTotalMinutes      : 0.00703554333333333\r\nTotalSeconds      : 0.4221326\r\nTotalMilliseconds : 422.1326\r\n```\r\nDoing the same with `trace-command` confirms the additional ~400ms is spent in /usr/bin:\r\n\r\n```\r\nDEBUG: 2019-10-24 13:53:38.2773 CommandDiscovery Information: 0 : Looking for true.ps1 in /usr/sbin\r\nDEBUG: 2019-10-24 13:53:38.2784 CommandSearch Information: 0 :  WriteLine   Current directory results are invalid\r\nDEBUG: 2019-10-24 13:53:38.2785 CommandSearch Information: 0 :  WriteLine   Current patterns exhausted in current directory: /usr/sbin\r\nDEBUG: 2019-10-24 13:53:38.2785 CommandDiscovery Information: 0 : Looking for true in /usr/bin\r\nDEBUG: 2019-10-24 13:53:38.6796 CommandSearch Information: 0 :  WriteLine   Current directory results are invalid\r\nDEBUG: 2019-10-24 13:53:38.6798 CommandDiscovery Information: 0 : Looking for true.ps1 in /usr/bin\r\nDEBUG: 2019-10-24 13:53:38.6914 CommandSearch Information: 0 :  WriteLine   Current directory results are invalid\r\nDEBUG: 2019-10-24 13:53:38.6914 CommandSearch Information: 0 :  WriteLine   Current patterns exhausted in current directory: /usr/bin\r\n```",
      "created_at": "2019-10-24T12:56:58Z",
      "updated_at": "2019-10-24T12:56:58Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Would love to see if someone could reproduce this one again on .NET 5 with the latest version of Win10. I know a ton of work has been done around filesystem access and symlinks in both of those products. ",
      "created_at": "2020-07-20T22:29:04Z",
      "updated_at": "2020-07-20T22:29:04Z"
    },
    {
      "author": "TsekNet",
      "author_association": "NONE",
      "body": "Just noting that this issue still seems to be present on the latest PowerShell 7.1. \r\n\r\nI tried to install PowerShell 7 on my gLinux host today. Unfortunately, it's too slow at the moment for me to switch to using PowerShell on Linux. I did try modifying path as @bendowski suggested, but still experienced this issue. \r\n\r\nHappy to provide more logs as necessary and help troubleshoot, as I imagine others have/will experience the same issues.\r\n\r\nThe latest PowerShell 7 on my Windows corp workstation (20H2) does not experience this issue.",
      "created_at": "2021-01-27T15:22:09Z",
      "updated_at": "2021-01-27T15:22:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Happy to provide more logs as necessary and help troubleshoot, as I imagine others have/will experience the same issues.\r\n\r\n@TsekNet I have already prepared some fixes. There is already open PR (one from some follow). But we have no resources to make this work fast. We need more code reviewers and developers. MSFT team introduce Working Groups (you can read in their PowerShell blog). You could take participation in related WG if you have an interest.",
      "created_at": "2021-01-28T04:57:58Z",
      "updated_at": "2021-01-28T04:57:58Z"
    }
  ],
  "created_at": "2018-04-05T21:55:03Z",
  "number": 6577,
  "state": "open",
  "title": "Command discovery on systems with symlinks to slow filesystems is slow",
  "updated_at": "2021-11-30T15:07:58Z"
}