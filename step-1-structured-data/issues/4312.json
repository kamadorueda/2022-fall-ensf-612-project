{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4312",
  "author": "mklement0",
  "body": "Note: This issue was discovered by @PetSerAl and has been a problem since v3.\r\nFuture resolution of #2230 may have an impact.\r\n\r\n<sup>Note: Updated based on feedback from @PetSerAl below.</sup>\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$a='a'\r\n\r\n# Optimization bug: child-scope PS variable $a is created, but the parent-scope $a \r\n# isn't seen when `+=` is applied, resulting only in the RHS getting assigned.\r\n# Variable type is LocalVariable rather than PSVariable\r\n& {$a; $a+='b'; $a; (Get-Variable a).GetType().FullName }\r\n\r\n'-'\r\n\r\n# NO optimization bug, due to inclusion of a call to Remove-Variable.\r\n# The mere *presence* of Remove-Variable in the block is enough, even if it is not actually called.\r\n# Using the *built-in* alias `rv`, works too, but not *custom* aliases - see below.\r\n# The outer-scope $a reappears after the Remove-Variable call.\r\n& { $a; $a+='b'; $a; (Get-Variable a).GetType().FullName; Remove-Variable a; $a } \r\n\r\n'-'\r\n\r\n# Optimization bug: Due to use of a *custom* alias, the call to Remove-Variable is not recognized, \r\n# and the problem surfaces again.\r\nSet-Alias rvar Remove-Variable; &{ $a; $a+='b'; $a; (Get-Variable a).GetType().FullName; rvar a; $a } \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\na\r\nab\r\nSystem.Management.Automation.PSVariable\r\n-\r\na\r\nab\r\nSystem.Management.Automation.PSVariable\r\na\r\n-\r\na\r\nab\r\nSystem.Management.Automation.PSVariable\r\na\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\na\r\nb # !!\r\nSystem.Management.Automation.LocalVariable # !!\r\n-\r\na\r\nab\r\nSystem.Management.Automation.PSVariable\r\na\r\n-\r\na\r\nb # !!\r\nSystem.Management.Automation.LocalVariable  # !!\r\nrvar : Cannot remove variable a because the variable has been optimized and is not removable. Try using the Remove-Variable cmdlet (without any aliases), or dot-sourcing the command that you are using to remove the variable. # !!\r\n...\r\nb # !!\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.4 on Ubuntu 16.04.2 LTS\r\nPowerShell Core v6.0.0-beta.4 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "You are not correct in first case. You should replace `$a+='a'` to `$a+='b'`. Then you will see, that child-scope variable is created, but parent-scope variable is not read by compound assignment.\r\n\r\nAlso, I do not see any easy fix for third case, unless you gave up on optimization entirely. It does not matter of detecting custom aliases, but deep problem with dynamic nature of PowerShell language:\r\n```powershell\r\n&{ $a='asd'; &(Read-Host) a; $a }\r\n```\r\nAnd I type `rv` at runtime.",
      "created_at": "2017-07-21T00:09:08Z",
      "updated_at": "2017-07-21T00:09:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the correction, @PetSerAl; I've updated the initial post - see if it's accurate now.\r\n\r\nBased on what you say, the *title* of this issue may be mistaken too - what do you suggest instead?\r\n\r\nRe 3rd case:\r\n\r\nThat's an intriguing edge case.\r\n\r\nPragmatically speaking, asking innocently : how important are these optimizations?",
      "created_at": "2017-07-21T01:04:00Z",
      "updated_at": "2017-07-21T01:04:00Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Something like this: \"Compound assignment do not read parent-scope variable\".",
      "created_at": "2017-07-21T01:10:33Z",
      "updated_at": "2017-07-21T01:10:33Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.\r\nActual behavior, second case: `aa` -> `ab`.",
      "created_at": "2017-07-21T01:26:23Z",
      "updated_at": "2017-07-21T01:26:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl: Thanks, fixed.",
      "created_at": "2017-07-21T01:33:19Z",
      "updated_at": "2017-07-21T01:33:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\n$a='a'\r\n& {$a; $a+='b'; $a; (Get-Variable a).GetType().FullName }\r\n\r\na\r\nab\r\n```\r\nI see the suggested fix is that `$a` is Global.\r\nWhat about `$a` is Local? (Is it the optimization goal?) And the output:\r\n```powershell\r\n<null>\r\nb\r\n```\r\n",
      "created_at": "2017-07-21T05:11:57Z",
      "updated_at": "2017-07-21T05:13:09Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov If there are no variable `$a` in parent scope, then you still have different behavior:\r\n```powershell\r\nSet-StrictMode -Version Latest\r\n& { $a; $a+='a'; $a; if(0){rv} }\r\n& { $a; $a+='a'; $a }\r\n```",
      "created_at": "2017-07-21T11:15:27Z",
      "updated_at": "2017-07-21T11:15:27Z"
    },
    {
      "author": "cfinnberg",
      "author_association": "NONE",
      "body": "I just closed a dup of this. But just to note that, $private:var seems to have same effect as remove-variable. :var can be any variable, even a non-existent one.\r\n\r\n```powershell\r\n$a='a'\r\n& { $a += 'b'; $a; if(0){$private:c} }       # ab\r\n& { $a += 'b'; $a }                                    # b",
      "created_at": "2017-10-08T12:37:26Z",
      "updated_at": "2017-10-08T12:37:26Z"
    },
    {
      "author": "mikeclayton",
      "author_association": "NONE",
      "body": "Real world example just found on Stack Overflow here:\r\n\r\nhttps://stackoverflow.com/questions/56452820/handling-array-in-powershell-script/56457580#56457580\r\n\r\nwhich basically boils down to:\r\n\r\n```powershell\r\n$myArray = @( \"xxx\" );\r\n\r\nfunction Invoke-MyFunction\r\n{\r\n    write-host \"before function = '$($myArray | ConvertTo-Json)'\";\r\n    $myArray += \"aaa\";\r\n    $myArray += \"bbb\";\r\n    write-host \"after function = '$($myArray | ConvertTo-Json)'\";\r\n}\r\n\r\nwrite-host \"before script = '$($myArray | ConvertTo-Json)'\";\r\nInvoke-MyFunction;\r\nwrite-host \"after script = '$($myArray | ConvertTo-Json)'\";\r\n```\r\n\r\ngives output\r\n\r\n```powershell\r\nbefore script = '\"xxx\"'\r\nbefore function = '\"xxx\"'\r\nafter function = '\"aaabbb\"'\r\nafter script = '\"xxx\"'\r\n```\r\n\r\ni.e. in the context of a child scope, if ```$myArray += \"aaa\"``` is the first assignment to a parent scope variable, doesn't add an item to an array like ```$myArray = $myArray + \"aaa\"``` - it does string concatenation instead ```$myArray = $null + \"aaa\"```\r\n\r\nsome workarounds that bypass the problematic optimisations are:\r\n\r\n**don't use \"assignment by addition operator\" in first assignment**\r\n```powershell\r\nfunction Invoke-MyFunction\r\n{\r\n    write-host \"before function = '$($myArray | ConvertTo-Json)'\";\r\n    # don't use \"assignment by addition operator\" in first assignment\r\n    $myArray = $myArray + \"aaa\";\r\n    $myArray += \"bbb\";\r\n    write-host \"after function = '$($myArray | ConvertTo-Json)'\";\r\n}\r\n```\r\n\r\n**do an assignment first to intialise the local variable***\r\n```powershell\r\nfunction Invoke-MyFunction\r\n{\r\n    # do an assignment first to intialise the local variable\r\n    $myArray = $myArray ;\r\n    $myArray += \"aaa\";\r\n    $myArray += \"bbb\";\r\n}\r\n```\r\n\r\nboth of these then give this output:\r\n\r\n```text\r\nbefore script = '\"xxx\"'\r\nbefore function = '\"xxx\"'\r\nafter function = '[\r\n    \"xxx\",\r\n    \"aaa\",\r\n    \"bbb\"\r\n]'\r\nafter script = '\"xxx\"'\r\n```",
      "created_at": "2019-06-05T09:45:09Z",
      "updated_at": "2019-06-05T09:47:17Z"
    }
  ],
  "created_at": "2017-07-20T21:28:54Z",
  "number": 4312,
  "state": "open",
  "title": "Presumptive DLR optimization bugs cause compound assignments not to read parent-scope variables.",
  "updated_at": "2019-06-05T09:47:17Z"
}