{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15887",
  "author": "John0King",
  "body": "### Summary of the new feature / enhancement\r\n\r\ntoday , when I just want to connect to other computer  in the same network , and  `Enter-Pssesstion`  tell me  I have to trust that in WinRM ,  or   The remote side must use HTTPS  Or I must to make those two computer in  \"Domain\" , (ps:  windows Domain is nobody used in China, I can guarantee that, and I believe many and many  people do not use that (person and company)) ,  and  powershell  now also run on linux and mac , right ?  WinRm on linux/Mac  ??   I don't think so.\r\n\r\nand Why I (as the client )  must trust the remote computer ,  I mean it's that I want to connect to other computer  instead of other computer want to connect to my computer right ?  this \"trust\" action  do not make any since !\r\n\r\nI think your team should base on a new protocol that doesn't need  any other \"old tech\" on the OS,  maybe lean or just use ssh.\r\n\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nthe new architecture should work as  client/server mode,   if a computer need remote access as a Server, then it must install/enable the server capability (like the ssh server) ,  and  the client can connect any   computer that enable the server capability (and the firewall)",
  "closed_at": "2021-08-10T12:00:36Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell already can use SSH as transport instead of WinRM. See documentation.\r\nFor future there are plans to convert remoting in separate subsystem and open way to implement alternative remoting subsystems based on other transports.",
      "created_at": "2021-08-07T17:02:24Z",
      "updated_at": "2021-08-07T17:02:24Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "While it is true that you can use SSH and other transport methods the WSMan situation is handled by a different program on Windows. PowerShell is just using the WSMan client API to make the calls so it\u2019s subject to the same limitations as any other user of the API.\r\n\r\nThe reason why you need to add the target as a trusted host is a safety feature due to these facts:\r\n\r\n* in a domain less scenario and without https you are relying on NTLM authentication is vulnerable to relay attacks\r\n* there is no mutual authentication, you cannot verify the target host is who you think it is\r\n* if you use CredSSP you\u2019ve now given the username/password to a potential malicious host\r\n\r\nUltimately there\u2019s not much PowerShell can do here. They already offer alternatives and WSMan lives outside of PowerShell.",
      "created_at": "2021-08-07T21:57:15Z",
      "updated_at": "2021-08-08T00:00:13Z"
    },
    {
      "author": "John0King",
      "author_association": "NONE",
      "body": "> PowerShell is just using the WSMan client API to make the calls so it\u2019s subject to the same limitations as any other user of the API.\r\n\r\nso that's why I created this issue,  because there should be a PowerShell server program\uff0c that can use 2way RSA or over SSL to transfer user's input\uff0c  and then we won't be limited by winrm\r\n\r\n(ps:  WinRM  can be use to load bad software ,  I've seen before)",
      "created_at": "2021-08-08T06:42:25Z",
      "updated_at": "2021-08-08T06:42:25Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That's one of the reasons why SSH is now the main transport going forward. WSMan is an option but not the only one. PowerShell remoting can essentially work over anything where data is exchanged, the mains ones are just WSMan and SSH.\r\n\r\n> (ps: WinRM can be use to load bad software , I've seen before)\r\n\r\nThat's nothing unique to WinRM, the nature of being able to run a process remotely is always going to be used as an attack vector. Things like ssh bring the same thing to the table, the key is securing your host properly and using ssh does not mean it's instantly secure.",
      "created_at": "2021-08-08T09:30:50Z",
      "updated_at": "2021-08-08T09:30:50Z"
    },
    {
      "author": "John0King",
      "author_association": "NONE",
      "body": "> That's nothing unique to WinRM, the nature of being able to run a process remotely is always going to be used as an attack vector.Things like ssh bring the same thing to the table, the key is securing your host properly and using ssh does not mean it's instantly secure.\r\n\r\nwell , it's not,       WinRm  with or without remoting  can be use as an  Auto Startup option (some really bad software use it to run there process on windows start)\r\n\r\n> and That's one of the reasons why SSH is now the main transport going forward.\r\n\r\nI install the PS 7.x  on Win7,   and  When I run `Enable-PsRemoting`   there no SSH option  to let me start SSH server.\r\nI had to  update win10 and do a lot of step to just setup SSH ?\r\n\r\nIMO, `PSSesstion` is for powershell to connect remote computer,  it should not depend on OS native feature that do not portable.  and my optional is ,  include a SSH Server  in powershell (or download it when I enable remoting)    ,  and if SSH is also not portable for windows , then we should consider build an new tansport option with .net 5/6 .  \r\n\r\n~~and beside ,  if I will access SSH, then I will need an  SSH client, then it probably no position for  Powershell  anymore.~~",
      "created_at": "2021-08-08T10:16:27Z",
      "updated_at": "2021-08-08T10:16:27Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "You have to remember, with PSRP, the client and target server must trust each other somehow in order to open a remoting session. The server can always trust the client if it gets a credential object that resolves to a credential the servers know and against which to allow access. That bit is easy, almost. But how does the client trust the server. If you use `Enter-PSSession -Computer $Computerhname`, how do you know that the computer responding really is who it says it is, vs a man in the middle? With server authentication, the client can be assured that either the server really is to be trusted (eg via Kerberos or SSL), or you explicitly say you trust. Remember DNS is not foolproof. :-)\r\n\r\nIf we separate the PSRP client/server piece from the transport piece, you **are** able to run PSRP over both WinRM and SSH It seems to me that remoting over WinRM, as a default, but allowing other transports is what you are asking for and what is possible.\r\n\r\nSadly, SSH is not installed by default on any supported Windows Server edition and is not installable via `Install-WindowsFeature`. But that is an issue for another place. MSFT really missed the boat (with Server 2022) regarding updating what can be installed via the Server Manager module. It would also be nice to improve `Enable-PsRemoting` to have a `-Transport` parameter that ensured the chosen transport was installed and available. ",
      "created_at": "2021-08-08T11:05:42Z",
      "updated_at": "2021-08-08T11:05:42Z"
    },
    {
      "author": "John0King",
      "author_association": "NONE",
      "body": "`Install-WindowsFeature`   I don't like it , because it means that it's not portable,  and it will be limited by OS.\r\n\r\n> how do you know that the computer responding really is who it says it is\r\n\r\nI never ever use the computer name even once.I use IpAddress,  and for the question,  if you not trust your DNS, then go ahead with Ip directy,  and if you trust your DNS,  then   create a permanent setting for your computer is not OK to me.   \r\nI annoying of this trust process  is that it doesn't means to trust for this time,  it means trust that computer for this account of this computer.\r\nat least powershell can do this\r\n```\r\n> Eneter-PsSesstion \r\n> input computername :   <IpAddress>\r\n> trust this computer ?   Y/N\r\n> remember  ? Y/N\r\n```\r\n\r\nand personally I hope there is a **new transport  server that  build with .net6  that can be use to enable the PS remoting anywhere** !  and the new transport can use 2way RSA,  and  generate a Identity security string   to ensure that your password is secure and  you can detect the remote is change when  remote computer be replaced to other computer ! and the good of this idea is that it total portable for window(include win7)  mac and linux",
      "created_at": "2021-08-09T05:27:11Z",
      "updated_at": "2021-08-09T05:27:11Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You are essentially talking about SSH which is already possible, I highly doubt anything else can really be done about this due to the myriad of questions that come up with packaging and updating SSH as a shared component on an OS.",
      "created_at": "2021-08-09T05:32:00Z",
      "updated_at": "2021-08-09T05:32:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-08-10T12:00:35Z",
      "updated_at": "2021-08-10T12:00:35Z"
    },
    {
      "author": "John0King",
      "author_association": "NONE",
      "body": "setup OpenSSH-win32 for win7  sp 1  failed   :( \r\nsshd never started ,\r\nPS: I installed .Net 6 preview 6 on that",
      "created_at": "2021-08-20T06:50:07Z",
      "updated_at": "2021-08-20T06:53:20Z"
    }
  ],
  "created_at": "2021-08-07T08:24:29Z",
  "number": 15887,
  "state": "closed",
  "title": "Remove the need of  WinRM  and  make it easier for everyone who want use `Enter-PSSesstion`",
  "updated_at": "2021-08-20T06:53:20Z"
}