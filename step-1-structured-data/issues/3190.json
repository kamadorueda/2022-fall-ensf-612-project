{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3190",
  "author": "kittholland",
  "body": "Currently Write-Error has many parameters to create a rich ErrorRecord and write it to the error channel as a non-terminating error.\r\n\r\nThrow allows us to generate a terminating error and provide a string for the exception message, or an ErrorRecord object to pass, but without getting into New-Object territory there is no easy way to create an error record and pass to Throw. \r\n\r\nNew-ErrorRecord would allow us to generate the error details and then choose to write or throw it as necessary.\r\n\r\nSee https://gist.github.com/wpsmith/e8a9c54ca1c7c741b5e9 as an example Cmdlet.\r\n\r\nSee also this search for 1683 examples of this pattern:\r\nhttps://github.com/search?utf8=%E2%9C%93&q=%22New-Object+System.Management.Automation.ErrorRecord%22+language%3APowerShell&type=Code&ref=searchresults",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Is there a good reason to not prefer an improved api?\r\nI'd imagine this is annoying for authors of C# cmdlets as well.",
      "created_at": "2017-02-23T19:17:18Z",
      "updated_at": "2017-02-23T19:17:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we use \r\n```powershell\r\n$a=Write-Error -Message \"eee\" 2>&1\r\n```\r\ninstead of `New-ErrorRecord`?",
      "created_at": "2017-02-24T18:00:14Z",
      "updated_at": "2017-02-24T18:00:14Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov that's a clever way to achieve the same result, but I don't think everyone should need to be that clever to create an error record for throwing. ",
      "created_at": "2017-02-24T21:13:58Z",
      "updated_at": "2017-02-24T21:13:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe we just add such feature in `Write-Error` ? New parameter?\r\n",
      "created_at": "2017-02-25T09:57:59Z",
      "updated_at": "2017-02-25T09:57:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "A new parameter on `Write-Error` is still not obvious, and still doesn't help C# authors.\r\n\r\nI'd start with a new api - and if that's still not sufficient, only then would I consider a new cmdlet.",
      "created_at": "2017-02-25T16:48:25Z",
      "updated_at": "2017-02-25T16:48:25Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr Can you help me understand as someone without background in C# what the experience would be in Powershell for interacting with a new API? I'm not sure what that would mean in this context. I'm happy for any solution that makes it easier to generate detailed terminating/non-terminating errors. ",
      "created_at": "2017-02-25T18:07:13Z",
      "updated_at": "2017-02-25T18:07:13Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Is the objection to needing `New-Object`?  Or the need for multiple invocations to `New-Object`?\r\n\r\nIt's already fine to throw an `ErrorRecord` today even though it is not an Exception.\r\n\r\nI was thinking there could be another constructor to `ErrorRecord` with a signature similar to the `New-ErrorRecord` script you linked to, so you'd use something like:\r\n\r\n```PowerShell\r\n$err = [ErrorRecord]::new([InvalidOperationException], $message, $errorId, $errorCategory, $targetObj)\r\n```",
      "created_at": "2017-02-25T22:28:15Z",
      "updated_at": "2017-02-25T22:28:15Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "It's definitely useful to be able to make a new error record with an exception in a single line, but I'm pretty sure that it would be enough if there was just a `-AsTerminatingException` switch on Write-Error ;-)",
      "created_at": "2017-02-26T22:43:22Z",
      "updated_at": "2017-02-26T22:43:22Z"
    },
    {
      "author": "kittholland",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul Personally I am fine with that solution. I think that covers 95% of the use cases, I just wasn't sure if throwing a terminating error was kosher for a \"Write\" verb. ",
      "created_at": "2017-02-27T16:07:07Z",
      "updated_at": "2017-02-27T16:07:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe `-Throw` more clear for users?\r\n\r\nIt is not exclude `New-ErrorRecord` for more complex cases (5%).",
      "created_at": "2017-02-27T16:49:15Z",
      "updated_at": "2017-02-27T16:49:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me try to summarize and make a suggestion:\r\n\r\n* In _PowerShell code_, `Write-Error`, via its `-Category`, `-ErrorId`, ... parameters, already offers a way to create custom `ErrorRecord` instances, by either wrapping a _custom error message_ (`-Message`) or a _preexisting exception_ (`-Exception`) - though the latter is currently broken - see #10774.\r\n\r\n  * However, creating such a  custom `ErrorRecord` is currently tied solely to writing directly to the error stream, i.e. limited to creating a _non-terminating_ error.\r\n\r\n    * Introducing something like a  `-AsTerminatingError` switch  as suggested by @Jaykul (or @iSazonov's simpler alternative name, `-Throw`, which I like for its association with the `Throw` statement)  would remove this limitation, to allow the custom error record to be thrown as a script-terminating (runspace-terminating) error as well, like a customized `Throw` call.\r\n       * As an aside: A _script_-terminating error is the only kind of terminating error you can emit from PowerShell code ( unless you use `$PSCmdlet.ThrowTerminatingError` directly, which scripters should not be expected to need to use); conversely, (binary) cmdlets _cannot_ raise script-terminating errors themselves and can only create _statement_-terminating ones, via `Cmdlet.ThrowTerminatingError()` or by throwing or not catching a raw exception.\r\n\r\n  * Someone who really wants to create a custom `ErrorRecord` _in isolation_, for later use - which is clearly an advanced use case - can use `New-Object System.Management.Automation.ErrorRecord` or `[System.Management.Automation.ErrorRecord]::new()` directly, as needed.\r\n\r\n* _Separately_, in parallel, _for SDK users_ (in C#) , providing a more convenient way to construct custom `ErrorRecord`s implicitly, via arguments passed to new `Cmdlet.WriteError()` / `Cmdlet.ThrowTerminatingError()` overloads, as suggested by @lzybkr,  is well worth considering.\r\n",
      "created_at": "2019-10-11T14:04:08Z",
      "updated_at": "2020-01-27T13:20:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": " One point I'd like to mention is that `Write-Error` _does_ in fact support creating terminating errors, via `-ErrorAction Stop` if I'm not mistaken. \ud83d\ude42 \r\n\r\nThe rest sounds good!",
      "created_at": "2019-10-11T20:53:53Z",
      "updated_at": "2019-10-11T20:53:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32. `-ErrorAction Stop` does work, but is suboptimal in that it creates an _extra_ entry in `$Error`: a `System.Management.Automation.ActionPreferenceStopException` exception with message\r\n`The running command stopped because the preference variable \"ErrorActionPreference\" or common parameter is set to Stop`",
      "created_at": "2019-10-11T21:31:52Z",
      "updated_at": "2019-10-11T21:31:52Z"
    },
    {
      "author": "BernieWhite",
      "author_association": "NONE",
      "body": "`Write-Error` also doesn't provide access to all the properties of `ErrorRecord`. Consider `ScriptStackTrace` for example.",
      "created_at": "2020-01-27T03:14:30Z",
      "updated_at": "2020-01-27T03:14:30Z"
    }
  ],
  "created_at": "2017-02-23T17:29:29Z",
  "number": 3190,
  "state": "open",
  "title": "Implement New-ErrorRecord Cmdlet",
  "updated_at": "2020-01-27T13:20:36Z"
}