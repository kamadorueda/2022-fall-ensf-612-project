{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9561",
  "author": "replicaJunction",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a scripter who has recently been working with databases quite a bit, it's become a headache to check constantly for [DBNull]::Value. It has a tendency to \"leak\" outside of my database code, and I need to start checking for DbNull values all over the rest of my code as well.\r\n\r\nPowerShell already handles both $null and an empty string in the same manner. Can it also treat [DBNull]::Value as $null for purposes of conditionals?\r\n\r\nHere is a contrived example of what I mean,\r\n\r\n```powershell\r\n$myVar = $null\r\nif (-not $myVar) {\r\n  # This will run\r\n  'MyVar is null'\r\n}\r\n\r\n$myVar = ''\r\nif (-not $myVar) {\r\n  # This will also run\r\n  'MyVar is null'\r\n}\r\n\r\n$myVar = [DbNull]::Value\r\nif (-not $myVar) {\r\n  # This will not run\r\n  'MyVar is null'\r\n}\r\n```\r\n\r\nThe last case is what I'd like to see changed - I'd like that to be handled in the same way as the first two cases.",
  "closed_at": "2019-06-28T18:39:35Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "+1, but I wouldn't frame the issue in terms of `$null`, but in terms of (possibly implicit) _to-Boolean conversion_.\r\n\r\n```powershell\r\n# Explicit\r\nPS> [bool] [DbNull]::Value\r\nTrue # !! Should be $false\r\n\r\n# Implicit\r\nPS> if ([DbNull]::Value) { 'have value' }\r\nhave value # !! conditional was unexpectedly $true\r\n```\r\n\r\nSecondarily, the question is how _direct comparison with `$null`_ should be handled.\r\n\r\n```powershell\r\nPS> $null -eq [DbNull]::Value\r\nFalse   # !! Should probably be true.\r\n```\r\n\r\nCurrently, there is only _one_ RHS value other than `$null` itself that yields `$true` with `-eq`, and that is `[System.Management.Automation.Internal.AutomationNull]::Value`, the \"array-valued null\" that commands that do not produce output technically return.\r\n\r\nYou could argue that `[DbNull]::Value` should similarly be considered a \"subspecies\" of `$null`, in which case the above should yield `$true` also.\r\n\r\n\r\n",
      "created_at": "2019-05-12T18:00:14Z",
      "updated_at": "2019-05-12T18:00:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, since this type comes from an assembly we already reference, we agree it makes sense as more DB users use PS we should support this",
      "created_at": "2019-05-15T22:15:00Z",
      "updated_at": "2019-05-15T22:15:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Just to add that currently `$null -eq [NullString]::Value` returns `false`. If we are supporting `$null -eq [DbNull]::Value`, `[NullString]::Value` should also be supported.",
      "created_at": "2019-05-31T17:27:12Z",
      "updated_at": "2019-05-31T17:27:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sounds good to me. This change can come in at the `LanguagePrimitives.IsNull()` method. We will also have to check the codebase to ensure we are using that method everywhere it is appropriate. I noticed during a recent cleanup PR that there were a few points where we _don't_ actually use the method and instead check manually for `[AutomationNull]::Value` which may complicate matters if we don't direct those to use the method as well. I believe I corrected the ones I saw, but there may be others still hiding somewhere. \ud83d\ude04 ",
      "created_at": "2019-05-31T17:58:53Z",
      "updated_at": "2019-05-31T17:58:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I noticed during a recent cleanup PR that there were a few points where we don't actually use the method and instead check manually for `[AutomationNull]::Value`\r\n\r\n@vexx32 can you please point me to the regarding PR? `[AutomationNull]::Value` is handled specially in pipeline, `null` is passed through a pipeline, but `[AutomationNull]::Value` is not.",
      "created_at": "2019-05-31T18:04:45Z",
      "updated_at": "2019-05-31T18:04:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "True that. Let me see if I can find where it was, one moment.\r\n\r\nEDIT: Oh, never mind. I was thinking I'd changed it, but I think I was thinking of #9735 where I was just doing formatting changes. Left those untouched as it was -- as you say -- specifically pipeline operations.\r\n\r\nIf I come across anything that might raise that question I'll ping you to make sure I don't break anything. \ud83d\ude04  Pretty sure I've seen a couple though.",
      "created_at": "2019-05-31T18:06:33Z",
      "updated_at": "2019-05-31T18:24:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Separate comment for reasons, but this is the pattern I'm referring to @daxian-dbw. It seems a lot of cmdlets _don't utilise_ the LanguagePrimitives method for this. The pattern to search for in the code base that turns up a few matches (14, to be precise) is a regex of: `== null \\|\\| .+? == AutomationNull.Value`\r\n\r\nA couple of entries:\r\n\r\n- `ConvertTo-Html.cs#692`\r\n- `OutGridViewCommand.cs#177`\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/58726698-65fbe300-83b0-11e9-90bd-09a46a0a75c9.png)\r\n",
      "created_at": "2019-05-31T18:28:05Z",
      "updated_at": "2019-05-31T18:28:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #9794, which has now been successfully released as `v7.0.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:37Z",
      "updated_at": "2019-07-17T20:56:37Z"
    }
  ],
  "created_at": "2019-05-08T14:14:50Z",
  "number": 9561,
  "state": "closed",
  "title": "Feature Request: Handle DBNull as $null",
  "updated_at": "2019-07-17T20:56:37Z"
}