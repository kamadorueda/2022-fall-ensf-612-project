{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11670",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAfter the switch to use `InvocationInfo.PositionMessage` instead of crafting equivalent, the use of `Trim()` caused a mismatch between the line of script with the error and the underlining line so the line of code to insert VT100 color can be out of bounds.  The whitespace at the beginning of the line causes this issue because `Trim()` makes the highlight line too short (previously the script line would also be trimmed).\r\n\r\nAlso fixed an issue where it was splitting `PositionMessage` by `+` to get the individual parts, but the message itself can contain a `+` so using newline instead.  This with the trim is what caused the index to be out of bounds as the line is now too short to insert the VT100 code to reset the color back.\r\n\r\nIn addition, switched all use of `` `n`` to `[Environment]::Newline`.\r\n\r\nFinally, removed an extra newline in the rendering.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/11669\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-30T19:03:40Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have many issues with these helper functions. Maybe put them in a temp module? This can simplify debugging and fixing. ",
      "created_at": "2020-01-24T07:23:03Z",
      "updated_at": "2020-01-24T07:23:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov which helpers are you referring to?  The tests don't really have any helpers?",
      "created_at": "2020-01-24T17:04:38Z",
      "updated_at": "2020-01-24T17:04:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I mean the formatting functions like Show-Error and Get-ConciseViewPositionMessage.",
      "created_at": "2020-01-24T17:16:20Z",
      "updated_at": "2020-01-24T17:16:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov In 7.1, we'll have appropriate APIs for coloring/VT100, we can consider some refactoring then vs making a big change now",
      "created_at": "2020-01-24T21:14:44Z",
      "updated_at": "2020-01-24T21:14:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-rc.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.3)\n",
      "created_at": "2020-02-21T23:55:09Z",
      "updated_at": "2020-02-21T23:55:09Z"
    }
  ],
  "created_at": "2020-01-24T05:43:50Z",
  "number": 11670,
  "state": "closed",
  "title": "Fix unnecessary trimming of line resulting in incorrect indexi\u2026",
  "updated_at": "2020-02-21T23:55:09Z"
}