{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3035",
  "author": "letmaik",
  "body": "Steps to reproduce\r\n------------------\r\n1. Use [TraceLogging](https://msdn.microsoft.com/en-us/library/windows/desktop/dn904637(v=vs.85).aspx) and record some events.\r\n2. Run:\r\n```ps\r\n$Events = Get-WinEvent -Path trace.etl -Oldest -MaxEvents 500\r\n$Events[401] | Format-List *\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe information should correspond to what can be seen when opening the file in Windows Performance Analyzer.\r\n\r\nActual behavior\r\n---------------\r\nFields like task name, or custom fields are not included and can't be accessed:\r\n\r\n```\r\n> $Events[401] | Format-List *\r\n\r\nMessage              :\r\nId                   : 1362\r\nVersion              : 0\r\nQualifiers           :\r\nLevel                : 5\r\nTask                 : 0\r\nOpcode               : 1\r\nKeywords             : 0\r\nRecordId             : 401\r\nProviderName         :\r\nProviderId           : 3970f9cf-2c0c-4f11-b1cc-e3a1e9958833\r\nLogName              :\r\nProcessId            : 9880\r\nThreadId             : 5260\r\nMachineName          : ***\r\nUserId               :\r\nTimeCreated          : 23/01/2017 21:49:31\r\nActivityId           : 486882ca-72a5-0000-56e0-7848a572d201\r\nRelatedActivityId    :\r\nContainerLog         : c:\\...\\trace.etl\r\nMatchedQueryIds      : {}\r\nBookmark             : System.Diagnostics.Eventing.Reader.EventBookmark\r\nLevelDisplayName     : Verbose\r\nOpcodeDisplayName    : Start\r\nTaskDisplayName      :\r\nKeywordsDisplayNames : {}\r\nProperties           : {}\r\n```\r\n\r\nAre the TraceLogging-generated traces introduced in Windows 10 supported by this cmdlet?\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.206\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.206\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@letmaik \r\n1. Please try `$Events[401] | Format-List * -Force`\r\n2. The cmdlet use Windows standard API call to read events. So if it is not working then most likely this is a limitation of the API.",
      "created_at": "2017-01-27T19:48:36Z",
      "updated_at": "2017-01-27T19:48:36Z"
    },
    {
      "author": "letmaik",
      "author_association": "NONE",
      "body": "I had tried `-Force` but got the same results.\r\nWhat underlying API is this using? Then I could check that.",
      "created_at": "2017-01-28T12:11:07Z",
      "updated_at": "2017-01-28T12:11:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\r\nYou can start with [Get-WinEvent](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Diagnostics/GetEventCommand.cs)\r\nTarget is WEVTAPI https://github.com/PowerShell/PowerShell/blob/02b5f357a20e6dee9f8e60e3adb9025be3c94490/src/Microsoft.PowerShell.CoreCLR.Eventing/DotNetCode/Eventing/UnsafeNativeMethods.cs#L542\r\n\r\n",
      "created_at": "2017-01-29T10:57:38Z",
      "updated_at": "2017-01-29T10:57:38Z"
    },
    {
      "author": "letmaik",
      "author_association": "NONE",
      "body": "It seems that the [trace data helper APIs](https://msdn.microsoft.com/en-us/library/windows/desktop/ee441329(v=vs.85).aspx) can be used to decode the event data, according to the [About TraceLogging](https://msdn.microsoft.com/en-us/library/windows/desktop/dn904632(v=vs.85).aspx) page:\r\n> [TraceLogging] Events are self-describing which means that a binary containing the instrumentation manifest does not need to be registered on the system in order to use the Trace Data Helper (TDH) APIs to decode and show events.\r\n\r\nDo you think that this is in any way integrateable to Get-WinEvent with the current Win APIs used?",
      "created_at": "2017-01-30T22:41:12Z",
      "updated_at": "2017-01-30T22:41:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My understanding is that current `Get-WinEvent` code stack based on [\"static\" property set](https://github.com/PowerShell/PowerShell/blob/02b5f357a20e6dee9f8e60e3adb9025be3c94490/src/Microsoft.PowerShell.CoreCLR.Eventing/DotNetCode/Eventing/Reader/NativeWrapper.cs#L829)\r\nIf we want to decode the self-described events and expose them, we will need to migrate to a dynamic property set. It looks like a lot of work.\r\n\r\nI am not an expert in the WEVTAPI so maybe Powershell PG comment this.\r\nI can say that this addition would be useful for users.\r\nI also see a lot of questions that are likely to be disclosed in a Powershell RFC prior to implementation.\r\n",
      "created_at": "2017-01-31T05:51:38Z",
      "updated_at": "2017-01-31T05:51:38Z"
    },
    {
      "author": "letmaik",
      "author_association": "NONE",
      "body": "Just wanted to say that I have been successfully using the [TraceEvent library](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent) within C# to read TraceLogging events.",
      "created_at": "2017-02-09T23:40:50Z",
      "updated_at": "2017-02-09T23:40:50Z"
    },
    {
      "author": "letmaik",
      "author_association": "NONE",
      "body": "And here's a snippet using that within a powershell script:\r\n\r\n```powershell\r\n#Require -Version 5.0\r\nusing namespace Microsoft.Diagnostics.Tracing\r\nusing namespace Microsoft.Diagnostics.Tracing.Etlx\r\n\r\nparam (\r\n    [Parameter(Mandatory=$true)][string]$etlPath\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n\r\n(new-object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/ligershark/nuget-powershell/master/get-nugetps.ps1\") | iex\r\n\r\n$libpath = (Get-NuGetPackage Microsoft.Diagnostics.Tracing.TraceEvent -binpath)\r\nAdd-Type -Path (Join-Path $libpath 'Microsoft.Diagnostics.Tracing.TraceEvent.dll')\r\n\r\n$traceLog = [TraceLog]::OpenOrConvert($etlPath)\r\n\r\n$events = $traceLog.Events | where {$_.ProviderName -eq \"MyProvider\"}\r\necho $events\r\n```\r\n\r\nThis has full access to all data, very comprehensive in general with lots of helper functionality.",
      "created_at": "2017-02-10T00:34:45Z",
      "updated_at": "2017-02-10T00:45:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see the Microsoft TraceEvent Library is very popular - over 240000 downloads and actively developed.\r\nIt would be useful to integrate these capabilities in Powershell Core.\r\n@powershell-committee @SteveL-MSFT Could you consider this?",
      "created_at": "2017-02-10T04:30:53Z",
      "updated_at": "2017-02-10T04:30:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov this seems like a great enhancement",
      "created_at": "2017-02-10T17:05:30Z",
      "updated_at": "2017-02-10T17:05:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can MSFT move the TraceEvent Library sources in the Powershell repo?",
      "created_at": "2017-02-10T17:58:23Z",
      "updated_at": "2017-02-10T17:58:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov why do we need the sources?  shouldn't referencing it from nuget be sufficient?",
      "created_at": "2017-02-10T18:14:41Z",
      "updated_at": "2017-02-10T18:14:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We would try to merge it with Get-WinEvent.",
      "created_at": "2017-02-10T18:31:12Z",
      "updated_at": "2017-02-10T18:31:12Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Sorry to ask!\r\n\r\nBut, is this incident considered a PowerShell Core or Windows PowerShell issue?  I've notice a lot of Windows\u00a0PowerShell issue been submitted\u00a0under PowerShell Core.\r\n\r\nSo, how about providing a\u00a0different tag(label) so it can be identified? Or, does\u00a0it really matter?\r\n\r\nI just want to be clear and help others on how-to submit\u00a0the feedbacks.\r\n\r\nThanks,\r\n:)",
      "created_at": "2017-02-10T18:49:22Z",
      "updated_at": "2017-02-10T18:49:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad Get-WinEvent ships with PSCore for Windows.  We wouldn't take these changes for Windows PowerShell.\r\n\r\n@iSazonov seems better to use it as a library",
      "created_at": "2017-02-10T18:56:29Z",
      "updated_at": "2017-02-10T18:56:29Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Thanks @SteveL-MSFT .. I appreciate\u00a0your quick response. \r\n:)",
      "created_at": "2017-02-10T18:59:41Z",
      "updated_at": "2017-02-10T18:59:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Have we examples of such integration in the Powershell repo?",
      "created_at": "2017-02-10T19:07:01Z",
      "updated_at": "2017-02-10T19:07:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov we do it today with Newtonsoft.Json",
      "created_at": "2017-02-10T19:16:15Z",
      "updated_at": "2017-02-10T19:16:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks! Good example!\r\n\r\nI shortly have look at the TraceEvent Library.\r\nWe could not only expand Get-WinEvent to support this trace format.\r\nAlso it would be interesting to create trace events, to manipulate trace files...\r\n(On the other hand why we don't use low-level trace internally in Powershell Core?)",
      "created_at": "2017-02-12T17:25:55Z",
      "updated_at": "2017-04-09T07:24:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vancem Could you please comment the discussion and help enhance the PowerShell capabilities for working with trace events?",
      "created_at": "2017-04-09T07:31:21Z",
      "updated_at": "2017-04-09T07:31:21Z"
    },
    {
      "author": "vancem",
      "author_association": "NONE",
      "body": "> @vancem Could you please comment the discussion and help enhance the PowerShell capabilities for working with trace events?\r\n\r\nYou have a bunch of possible options here.   As @ISazonov indicates you can do a bunch more.   But frankly I think just getting Get-WinEvent to work well both (ideally for both files and 'real time' monitoring), would be a very reasonable design point (at least to start).    Ideally it could decode\r\n\r\n1) TraceLogging style events.\r\n2) EventSource events that happen to not use TraceLogging.  \r\n\r\nBoth of these may require a bit of extra effort.   One solution is to simply use the TraceEvent library to do this decoding (note that you do NOT have to call 'OpenOrConvert' as was done above to use the library (since that complicates things for the end user).   The TraceEvent library can open ETL files directly (as well as real time session) and parse them fully.   \r\n\r\nit is also possible to call native windows APIs (the Tdh* APIs that were mentioned).   This is effectively how the TraceEvent library works.   The value of doing this is that you avoid the dependency on the TraceEventLibrary.  It is more work, but you grab much of what you need from the TraceEvent source code (it is available on the https://github.com/Microsoft/PerfView GitHub repo).    \r\n\r\nI can help with details of doing this (or of using the TraceEvent library if you want to just use that).   Adding this is probably reasonably easy (< 1man week).    \r\n\r\n\r\n\r\n",
      "created_at": "2017-04-10T16:18:03Z",
      "updated_at": "2017-04-10T16:18:03Z"
    }
  ],
  "created_at": "2017-01-23T22:37:57Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "Up-for-Grabs"
  ],
  "number": 3035,
  "state": "open",
  "title": "Get-WinEvent does not read all TraceLogging event details",
  "updated_at": "2017-04-10T16:18:03Z"
}