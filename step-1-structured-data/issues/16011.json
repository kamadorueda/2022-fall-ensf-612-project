{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16011",
  "author": "mklement0",
  "body": "### Summary of the new feature / enhancement\r\n\r\nThe `$PSDefaultParameterValues` preference variable allows presetting parameter values not just with static values, but also _dynamically_, via _script blocks_.\r\n\r\nThe script block is currently passed a single argument that is a custom object containing the _names_ of the already-bound parameters, but it would be useful to also pass their _values_, so as to determine the preset value based on the specific argument values in the call at hand.\r\n\r\nA real-world example, from [this Stack Overflow question](https://stackoverflow.com/q/68954591/45375):\r\n\r\nFor `New-Item`, `-Force` should be preset to `$true` only if the item being created is a _directory_ (so that a preexisting directory is returned rather than causing an error).\r\n\r\nTo that end, the already-bound value of the `-ItemType` parameter must be inspected, but it currently isn't available, necessitating the following - incomplete - workaround:\r\n\r\n```powershell\r\n$PSDefaultParameterValues = @{\r\n  'New-Item:Force' = { \r\n    ($false, $true)[\r\n      $args.BoundParameters.Contains('ItemType') -and \r\n      # !! Incomplete workaround: examine the raw invocation command line.\r\n      (Get-PSCallStack)[1].Position.Text -match '\\bDirectory\\b'\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nAdd a `.BoundParameterValues` property containing dictionary to the `[pscustomobject]` instance passed to the script block that allows retrieving the bound parameter _values_ by name, which would enable the following - robust - solution:\r\n\r\n```powershell\r\n$PSDefaultParameterValues = @{\r\n  'New-Item:Force' = { \r\n    ($false, $true)[\r\n      $args.BoundParameterValues['ItemType'] -eq 'Directory'\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nNote: Arguably, it is `.BoundParameters` itself that should contain this dictionary, but this would amount to a breaking change.\r\n\r\nHere's the structure of the object currently being passed, using sample values from an invocation such as `New-Item -ItemType Directory foo`:\r\n\r\n```none\r\nclass PSCustomObject\r\n{\r\n  BoundParameters =\r\n    [\r\n      ItemType\r\n      Path\r\n    ]\r\n\r\n  BoundPositionalParameters =\r\n    [\r\n      Path\r\n    ]\r\n\r\n  BoundDefaultParameters =\r\n    [\r\n    ]\r\n}\r\n```\r\n\r\nNote: `BoundParameters` and `BoundPositionalParameters` only contain _names_ (`[string]`s); I presume `BoundDefaultParameters` would too, but it's unclear to me under what conditions it gets filled; parameters with default values in the target command's parameter declaration apparently do _not_ show up here.\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-08-28T17:10:06Z",
  "labels": [
    "Issue-Enhancement",
    "Needs-Triage",
    "WG-Engine-ParameterBinder"
  ],
  "number": 16011,
  "state": "open",
  "title": "The argument passed to script block-based $PSDefaultParameterValues entries should include bound parameter values too, not just names",
  "updated_at": "2021-10-27T13:11:56Z"
}