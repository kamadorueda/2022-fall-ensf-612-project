{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2328",
  "author": "AdamHepner",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\n`powershell -command {exit 1} && echo $?`\nresults in output\n\n> exit 1\n> 0\n\nAnother suggested way:\n`powershell -command {throw \"exception\"} && echo $?`\nresults in\n\n> throw exception\n> 0\n## Expected behavior\n\nIn both of the cases I expected the exit code to be 1\n## Actual behavior\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable                                    \n\nName                           Value                                           \n----                           -----                                           \nPSVersion                      6.0.0-alpha                                     \nPSEdition                      Core                                            \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \nBuildVersion                   3.0.0.0                                         \nGitCommitId                    v6.0.0-alpha.9                                  \nCLRVersion                                                                     \nWSManStackVersion              3.0                                             \nPSRemotingProtocolVersion      2.3                                             \nSerializationVersion           1.1.0.1   \n```\n\nAdditionally: GNU bash, version 4.3.46(1)-release (x86_64-pc-linux-gnu)\nOS: Ubuntu 16.04.1\n",
  "closed_at": "2016-09-22T23:22:04Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The correct usage is:\n\npowershell -command \"& {exit 1}\"\npowershell -command \"& {throw 'exception'}\"\n\nexit code is 1 as expected on Windows and Linux\n",
      "created_at": "2016-09-22T22:49:39Z",
      "updated_at": "2016-09-22T22:49:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This functions the same way as Windows PowerShell.  Perhaps @lzybkr knows why powershell -command {get-process} doesn't actually execute get-process\n",
      "created_at": "2016-09-22T22:50:37Z",
      "updated_at": "2016-09-22T22:50:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "running `powershell -command {get-process}` from bash or cmd.exe actually just creates a script block and writes it out. It's like running `{get-process}` in an interactive powershell console.\n\nWhat interest me is that `powershell -command 'exit 1' && echo $?` output nothing, while doing it like following outputs 1 as expected.\n\n```\npowershell -command 'exit 1'\necho $?\n```\n\nso , how do we use the `<native> && <name>` syntax in bash with `powershell -command`?\n",
      "created_at": "2016-09-22T22:59:53Z",
      "updated_at": "2016-09-22T23:00:29Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT - the syntax `powershell -command \"& {exit 42}\"` is a little more than necessary - `powershell -command \"exit 42\"` is sufficient.\n\nNote that `&&` short circuits when the return code is non-zero, so you'd use `powershell -command \"exit 42\" || echo $?`.\n\n@daxian-dbw is correct about why `powershell -command {exit 42}` doesn't work - from bash/cmd, the curly braces are just random text, they know nothing about script blocks.\n\nIn PowerShell, we know what a script block is, and when we know we're calling another native executable that understands script blocks (these days, basically just powershell, but the deprecated mini-shells worked the same), we are smart enough to drop the curly braces.\n\nIt's true that this can be confusing - the same command line will do something different b/w powershell and bash/cmd, but it is useful syntax in PowerShell because you get syntax highlighting and parse time checking before running the script.\n",
      "created_at": "2016-09-22T23:22:04Z",
      "updated_at": "2016-09-22T23:22:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Note that && short circuits when the return code is non-zero, so you'd use powershell -command \"exit 42\" || echo $?.\n\nAh, thanks @lzybkr, that explains \ud83d\ude04 \n\n```\nlinux:~$ powershell -command \"write-output hello\" && echo world\nhello\nworld\n\nF:\\temp>powershell -command \"write-output hello\" && echo world\nhello\nworld\n```\n",
      "created_at": "2016-09-22T23:24:17Z",
      "updated_at": "2016-09-22T23:24:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Submitted doc fix to make the example more clear which led to this misunderstanding \nhttps://github.com/PowerShell/PowerShell-Docs/pull/649\n",
      "created_at": "2016-09-23T00:38:06Z",
      "updated_at": "2016-09-23T00:38:06Z"
    },
    {
      "author": "rsalinas",
      "author_association": "NONE",
      "body": "I was very shocked by the importance of the quote type:\r\n\r\n```\r\nC:\\Users\\salinas>powershell -command \"throw 1\" && echo ok\r\n1\r\nEn l\u00ednea: 1 Car\u00e1cter: 1\r\n+ throw 1\r\n+ ~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (1:Int32) [], RuntimeException\r\n    + FullyQualifiedErrorId : 1\r\n\r\n\r\nC:\\Users\\salinas>powershell -command 'throw 1' && echo ok\r\nthrow 1\r\nok\r\n```",
      "created_at": "2019-05-02T07:32:56Z",
      "updated_at": "2019-05-02T07:32:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rsalinas CMD strips off the double quotes and keeps the single quotes\r\n```none\r\nC:\\>E:\\PowerShell\\test\\tools\\TestExe\\bin\\Debug\\netcoreapp2.1\\win10-x64\\testexe.exe -echoargs 'qrr'\r\nArg 0 is <'qrr'>\r\n\r\nC:\\>E:\\PowerShell\\test\\tools\\TestExe\\bin\\Debug\\netcoreapp2.1\\win10-x64\\testexe.exe -echoargs \"fafa\"\r\nArg 0 is <fafa>\r\n```",
      "created_at": "2019-05-10T22:33:13Z",
      "updated_at": "2019-05-10T22:33:13Z"
    }
  ],
  "created_at": "2016-09-21T08:55:29Z",
  "labels": [
    "WG-Engine",
    "Resolution-By Design"
  ],
  "number": 2328,
  "state": "closed",
  "title": "Powershell under Linux fails to provide requested exit code",
  "updated_at": "2019-05-10T22:33:13Z"
}