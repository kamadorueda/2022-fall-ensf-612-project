{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3267",
  "author": "SteveL-MSFT",
  "body": "Some websites do not populate the `charset` property of the `content-type` header so characters aren't rendered correctly.  Suggestion is to expose a `-charset` parameter, however the user still needs to know the expected charset.  Advanced users today can do the encoding translation in script.  `utf-8` probably works in most cases, so not entirely sure how useful this will be to expect the user to know ahead of time the correct charset.\r\n\r\nSee discussion from https://github.com/PowerShell/PowerShell/issues/3126 for details on how this came about",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we should discuss here a default encoding for Web cmdlets.\r\nCurrently [we use RFC 2616 \"ISO-8859-1\" ](https://github.com/PowerShell/PowerShell/blob/77c622eeea474e21af0ea954836d49c53f71f5b1/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/ContentHelper.Common.cs#L20)\r\nIn fact, browsers for a long time use Windows-1252.\r\nAnd HTML5 default is UTF-8.\r\n\r\nPerhaps we should also use Windows 1252.",
      "created_at": "2017-03-06T18:44:00Z",
      "updated_at": "2017-03-06T18:44:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I looked Web cmdlets and found that we use `ContentType` parameter to encode a request (Content-Type header can contains `charset` value). If we don't specify a charset in `ContenType` we use default charset ISO-8859-1.\r\nFor decoding a response we use a charset from `ContentType` of the response. If a server return no `ContentType` we use the same default charset ISO-8859-1.\r\n\r\nSo we should treat `-CharSet` as `-ResponseCharSet`.\r\n\r\nAfter some thought, I believe that using Windows 1252 as default is obsolete and we should aim at HTML5 and UTF-8 as defaults. https://w3techs.com/technologies/details/ml-html5/all/all",
      "created_at": "2017-03-07T17:17:04Z",
      "updated_at": "2017-03-07T17:21:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree this is an issue for customers.  proposal is to parse the HTTP header first, if charset is in content-type, we use that.  otherwise if content-type is html, we parse `<meta charset=\"X\">`  for the charset attribute and use that",
      "created_at": "2017-03-09T00:17:30Z",
      "updated_at": "2017-03-09T00:17:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In Windows Powershell we use Internet Explorer to parse HTML. What portable parser we can use in PowerShell Core?\r\n\r\n- [HtmlAgilityPack](https://www.nuget.org/packages/HtmlAgilityPack)\r\n- [AngleSharp](https://www.nuget.org/packages/AngleSharp)\r\n\r\nAnd if HTML don't contain `<meta charset=\"foo\">` ? What defaults we should use for fallback?",
      "created_at": "2017-03-09T04:53:00Z",
      "updated_at": "2017-03-09T14:31:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the proposal is that we don't rely on any browser for the html parsing (if complete parsing is needed, I still think it would make more sense in a `convertfrom-html` cmdlet).  I think \"best effort\" for this is sufficient (perhaps even just a regular expression) to cover the majority of cases and we wouldn't worry about malformed html.",
      "created_at": "2017-03-09T16:49:01Z",
      "updated_at": "2017-03-09T16:49:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Original Windows web cmdlet returns `ParsedHtml        : mshtml.HTMLDocumentClass` - we want lost the functionality?",
      "created_at": "2017-03-09T17:00:41Z",
      "updated_at": "2017-03-09T17:00:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `.ParshedHtml` relied on Internet Explorer.  I don't think we can have a dependency on any particular web browser in the webcmdlets.\r\n\r\nTo answer your other question I missed, if `<meta charset>` doesn't exist and `charset` isn't specified in the `content-type` HTTP header, then we do what we do today which is assume ISO-8859-1",
      "created_at": "2017-03-09T17:02:44Z",
      "updated_at": "2017-03-09T17:02:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT \r\n>  .ParshedHtml  relied on Internet Explorer\r\n\r\nIf we use any ported library for HTML parsing we will solve this Issue, get `ParshedHtml` ported, as well as get a base for `ConvertFrom-HTML`.\r\n\r\nI wonder about `ISO-8859-1`. Why we do not want to accept the new standard HTML5?",
      "created_at": "2017-03-09T17:23:01Z",
      "updated_at": "2017-03-09T17:23:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov my understanding is that HTTP1.1 still defaults to `iso-8859-1`, if the content-type is `text/html`, we should just follow the [HTML 5 rules for determining content type](https://dev.w3.org/html5/cts/html5-type-sniffing.html) ideally just using one of the OSS HTML parsing libraries you already found",
      "created_at": "2017-03-09T17:32:56Z",
      "updated_at": "2017-03-09T17:32:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT It seems the doc is very old. New is http://www.w3.org/TR/html5/syntax.html#the-input-byte-stream It don't mention `iso-8859-1` at all.",
      "created_at": "2017-03-09T18:00:19Z",
      "updated_at": "2017-03-09T18:00:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently CoreFX already use [UTF8 as default](https://github.com/dotnet/corefx/blob/b1865ea0847a7a86baefe8378b772ecf0b785681/src/System.Net.Http/src/System/Net/Http/HttpContent.cs#L223).",
      "created_at": "2017-03-11T18:58:14Z",
      "updated_at": "2017-03-11T18:58:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov that's html5, HTTP 1.1 defaults to ISO-8859-1 if charset is not specified.  See 3.4.1 in https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html",
      "created_at": "2017-03-12T02:42:34Z",
      "updated_at": "2017-03-12T02:42:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "These standards are too muddled \ud83d\ude15 From https://tools.ietf.org/html/rfc7231:\r\n>The default charset of ISO-8859-1 for text media types has been\r\n   removed; the default is now whatever the media type definition says.\r\n   Likewise, special treatment of ISO-8859-1 has been removed from the\r\n   Accept-Charset header field.\r\n\r\nIn any case we trust CoreFX. Yes?",
      "created_at": "2017-03-12T18:35:52Z",
      "updated_at": "2017-03-12T18:35:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Ideally, we should just leave this to corefx.",
      "created_at": "2017-03-13T05:11:17Z",
      "updated_at": "2017-03-13T05:11:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This already is in CoreFX so we can. \r\nOnly is this in CoreFX version we use currently or we blocked until NetStandard 2.0?",
      "created_at": "2017-03-13T05:16:39Z",
      "updated_at": "2017-03-13T05:16:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Marking as waiting on NetStandard20.  Once we move to latest CoreClr, we can verify if this is still an issue.",
      "created_at": "2017-03-13T15:53:15Z",
      "updated_at": "2017-03-13T15:53:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can you initiate internal conclusion about using HtmlAgilityPack or\r\nAngleSharp? What one we can more trust?\r\nThen I would try to replace IE on one of these parsers for PowerShell Core (and leave IE for FullCLR).\r\n",
      "created_at": "2017-03-15T05:01:19Z",
      "updated_at": "2017-03-15T05:01:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee believes AngleSharp is a better choice as it seems to be more actively updated and this should be a separate `convertfrom-html` cmdlet/module.  The `charset` attribute on the `meta` html tag parsing should still be in the webcmdlets and a simplified best effort than using a complete html parser.",
      "created_at": "2017-03-15T23:59:48Z",
      "updated_at": "2017-03-16T00:00:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dantraMSFT can you look into this?",
      "created_at": "2017-08-27T19:16:07Z",
      "updated_at": "2017-08-27T19:16:07Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "Looking now.",
      "created_at": "2017-08-28T14:54:49Z",
      "updated_at": "2017-08-28T15:05:19Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "The problem occured because Invoke-RestMethod was calling ContentHelper.GetEncoding.  This returns a fallback encoding which was defeating checks for meta tags in the response.  Explicit tests were added to cover the same variations as are tested for Invoke-WebRequest.",
      "created_at": "2017-08-28T22:38:18Z",
      "updated_at": "2017-08-28T22:38:18Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "\r\nI'm not seeing the problem with 'http://weibo.com'.  Invoke-RestMethod is detecting the encoding correctly.  Can you be more specific?\r\n\r\nFor tv.sohu.com and ip138.com, I found a bug in Invoke-RestMethod. It is calling WriteVerbose with the encoding indicating the encoding name or header name but Encoding.EncodingName is throwing.  I'll need to change this and update the tests.",
      "created_at": "2017-09-18T20:02:01Z",
      "updated_at": "2017-09-18T20:02:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We already do this in [private static void EncodingRegisterProvider()](https://github.com/PowerShell/PowerShell/blob/deb8c4485d0b9755bdfa1f17c9d8bdd2855e2620/src/System.Management.Automation/utils/ClrFacade.cs#L131)",
      "created_at": "2017-09-19T10:37:38Z",
      "updated_at": "2017-09-19T10:37:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Any further work on this I'm deferring to 6.1.0",
      "created_at": "2017-11-03T00:48:40Z",
      "updated_at": "2017-11-03T00:48:40Z"
    },
    {
      "author": "MSAdministrator",
      "author_association": "NONE",
      "body": "Submitted RFC for the creation of `ConvertFrom-Html` here: https://github.com/PowerShell/PowerShell-RFC/pull/137",
      "created_at": "2018-07-15T01:58:04Z",
      "updated_at": "2018-07-15T01:58:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We get new HttpClient with .Net 3+ so I remove the label.",
      "created_at": "2020-07-16T11:56:31Z",
      "updated_at": "2020-07-16T11:56:31Z"
    }
  ],
  "created_at": "2017-03-06T17:07:12Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 3267,
  "state": "open",
  "title": "Webcmdlets should parse the <html><head><meta charset=\"foo\"> attribute for the correct encoding if not in http header",
  "updated_at": "2020-07-16T11:56:40Z"
}