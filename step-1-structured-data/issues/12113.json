{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12113",
  "author": "agowa338",
  "body": "The progressbar is not displayed, if the loop that writes the progressbar also writes any output, even debug output.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$DebugPreference = \"Continue\"\r\n$WarningPreference = \"Continue\"\r\n$InformationPreference = \"Continue\"\r\nforeach($element in (1..100)) {\r\n  Write-Progress -Activity \"Test\" -Status \"$element of 100\" -PercentComplete $element\r\n  Write-Debug $element\r\n  # Write-Host $element\r\n  # Write-Warning $element\r\n  # Write-Information $element\r\n  Start-Sleep -Seconds $element\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe progressbar as well as the other output are visible in the console.\r\n\r\n# Actual behavior\r\n\r\nOnly the console output is visible, the progressbar is not.\r\n\r\n# Environment data\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Linux 5.5.8-arch1-1 #1 SMP PREEMPT Fri, 06 Mar 2020 00:57:33 +0000\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Write-Progress` behaves quite differently on Unix systems, by the looks of it. I can reproduce on my Catalina machine as well:\r\n\r\n```\r\nName                           Value                                                                                    ----                           -----                                                                                    PSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Darwin 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan  9 20:58:23 PST 2020; root:xnu-6153\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nIt probably needs a rewrite to support anything other than Windows properly. \ud83d\ude15 ",
      "created_at": "2020-03-12T15:12:51Z",
      "updated_at": "2020-03-12T15:13:20Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "Ok, if it needs a rewrite anyway, I'd just like to drop this link for some \"visual\" inspiration.\r\nhttps://appliedgo.net/tui/\r\n\r\n<blockquote><div><img src=\"/favicon.png\" height=\"14\"> Applied Go</div><div><strong><a href=\"https://appliedgo.net/tui/\">Text-Based User Interfaces - Applied Go</a></strong></div><div>Beef up your Go console application with a Text-Based UI</div></blockquote>",
      "created_at": "2020-03-12T23:49:40Z",
      "updated_at": "2020-03-12T23:49:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I know @TylerLeonhardt has been working with the gui.cs project; perhaps he'd like to take a look at utilising some of that here. \ud83d\ude01 ",
      "created_at": "2020-03-13T00:03:55Z",
      "updated_at": "2020-03-13T00:03:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see gui.cs support [ProgressBar](https://migueldeicaza.github.io/gui.cs/api/Terminal.Gui/Terminal.Gui.ProgressBar.html). We could use this but we need to approve from MSFT team /cc @SteveL-MSFT to include gui.cs in the repo.",
      "created_at": "2020-03-13T03:14:28Z",
      "updated_at": "2020-03-13T03:14:28Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "That would be a pretty substantial effort to move to `gui.cs` for just progress bars. `gui.cs` operates on an alternative screen buffer so we'd need the output of the script (Write-Debug) and the progress bar to both be sent to this alternative screen buffer.",
      "created_at": "2020-03-13T04:38:52Z",
      "updated_at": "2020-03-13T04:38:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt Can you share more info? PowerShell uses Windows specific console API on Windows and .Net Core console API on Unix. My understanding is that PowerShell does not use a screen buffer (only a buffer for progress bar on Windows).\r\nSo I guess we could integrate `gui.cs` in PowerShell conhost.",
      "created_at": "2020-03-13T05:28:52Z",
      "updated_at": "2020-03-13T05:28:52Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": ">  My understanding is that PowerShell does not use a screen buffer (only a buffer for progress bar on Windows).\r\n\r\nThis is correct. Today, PowerShell doesn't use a screen buffer... but introducing gui.cs to the mix would mean that a screen buffer would need to be used since gui.cs only knows how to write into a screen buffer and that's the only way to have full control of the what is rendered in the terminal window on non-Windows.",
      "created_at": "2020-03-13T05:36:44Z",
      "updated_at": "2020-03-13T05:36:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt Thanks! I also guess that PowerShell have only one method to write to screen so we could easily switch to `gui.cs` API. Only concern I have is how formatting (Format-Table) and coloring (Select-String) will work.\r\nOpsss... Do you know that `gui.cs` support a tty output mode?",
      "created_at": "2020-03-13T05:54:31Z",
      "updated_at": "2020-03-13T05:54:31Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Not 100% sure... But It's definitely not ready for prime time because it can't seem to render non-ASCII characters well and supports Windows Terminal quite poorly...\n\nOut-ConsoleGridView is fine... It's external and not GA, but for PowerShell I don't think it's at the level it needs to be at.\n\nMaybe in the future my team can help fund work to make gui.cs better but it's not a priority in the near future at this time from what I know",
      "created_at": "2020-03-13T06:23:13Z",
      "updated_at": "2020-03-13T06:23:13Z"
    },
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "I have the same issue, what i'm observing is that the progress bar is clearing up multiple lines, even those lines that don't belong to it. \r\n\r\n```POWERSHELL\r\n$DebugPreference = \"Continue\"\r\n$WarningPreference = \"Continue\"\r\n$InformationPreference = \"Continue\"\r\nforeach($element in (1..100)) {\r\n  write-error \"error is written\"\r\n  write-verbose \"verbose is written\"\r\n  write-output \"output is written\"\r\n  write-host \"host is written\"\r\n  Write-Progress -Activity \"Test\" -Status \"$element of 100\" -PercentComplete $element\r\n  Write-Debug $element\r\n  # Write-Host $element\r\n  # Write-Warning $element\r\n  # Write-Information $element\r\n  Start-Sleep -Seconds $element\r\n} *>&1\r\n\r\n```\r\nas you see, all the `write-output` and `write-host` are missing. verbose either before the error and after the error is missing\r\n\r\n![image](https://user-images.githubusercontent.com/8991783/80918954-1a10a580-8d9a-11ea-8282-c29ec2a42255.png)\r\n\r\n\r\nOS: Ubuntu 18.0\r\nPowershell 7.0",
      "created_at": "2020-05-03T16:05:35Z",
      "updated_at": "2020-05-03T16:10:11Z"
    }
  ],
  "created_at": "2020-03-12T12:34:28Z",
  "number": 12113,
  "state": "open",
  "title": "Write-Debug and Write-Progress",
  "updated_at": "2020-05-03T16:10:11Z"
}