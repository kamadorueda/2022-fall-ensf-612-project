{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8724",
  "author": "iCodeSometime",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a user, I'd like to be able to easily switch directories for a short series of commands.\r\nI'd like to be able to do this without needing to remember to manually call popd in order to switch back.\r\n\r\nI'd imagine that most of the time pushd is used in companion with popd, therefore it makes sense to add optional block scoping to the command. e.g.\r\n\r\n```powershell\r\npushd \"MyDirectory\" {\r\n  # Do things in MyDirectory\r\n} # popd is called automatically here.\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@kennycoc PowerShell doesn't have block scoping as such but it's possible to add a parameter that takes a scriptblock to evaluate after the pushd. In fact you can do it yourself with a function along the lines of:\r\n```powershell\r\nfunction MyPushD ($path, [scriptblock] $action) {\r\n    Push-Location -ErrorAction stop -Path $path\r\n     try {\r\n        . $action\r\n     }\r\n     finally {\r\n        Pop-Location\r\n     }\r\n}\r\n```\r\n     \r\n",
      "created_at": "2019-01-23T21:52:07Z",
      "updated_at": "2019-01-23T21:52:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this idea is awesome and will as you say make things very easy to get right.\r\n\r\nHowever, I don't think the Push-Location cmdlets is the right place for it. Possibly a new cmdlet is warranted here, at least from a semantic perspective.",
      "created_at": "2019-01-23T21:53:30Z",
      "updated_at": "2019-01-23T21:53:30Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 how about:\r\n```powershell\r\nUsing-Location $path {\r\n    <# code #> \r\n}\r\n```\r\nWe don't allow `using` as a verb now but that could change...",
      "created_at": "2019-01-23T22:54:40Z",
      "updated_at": "2019-01-23T22:54:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay that's exactly what I was thinking. :smile:\r\n\r\nHaving `Using` as an approved verb would be a lovely addition. Would be great to have a generalised `Using-DisposableObject` (or just `Using-Object` I guess?) too, but that's a little trickier :wink:",
      "created_at": "2019-01-23T22:58:38Z",
      "updated_at": "2019-01-23T22:58:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> We don't allow using as a verb now but that could change...\r\n\r\n`Use` is an approved verb.  Not a whole lot that uses it (two default cmdlets?) but it seems like a good fit.\r\n\r\nAlso, @vexx32 \r\n\r\n> Would be great to have a generalised Using-DisposableObject (or just Using-Object I guess?) too, but that's a little trickier \ud83d\ude09\r\n\r\nThe biggest problem with that is that the expression generating the disposable object would a separate sequence point.  So a pipeline stop could occur between the object's creation and the start of the cmdlet.  I'd love to see a `using` keyword built in that solves that problem, though I'm not sure how much use it'd get.",
      "created_at": "2019-01-24T02:31:52Z",
      "updated_at": "2019-01-24T02:45:42Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience We could do something like:\r\n```powershell\r\nUsing-Object { New-MyObject } {\r\n    Do-SomethingWithObject $_  # created object is passed in $_ like ForEach-Object\r\n}\r\n```\r\nwhere the cmdlet takes two scriptblocks. This would defer creation of the object until after the cmdlet has started.\r\n",
      "created_at": "2019-01-24T17:18:10Z",
      "updated_at": "2019-01-24T17:18:10Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay Yeah that's a great idea.\r\n\r\nThat said, `using (expr) { }` is already a parse error thanks to `using namespace|module|etc`, so maybe there's hope for a keyword? \ud83e\udd1e (shh, let me dream \ud83d\ude09)",
      "created_at": "2019-01-24T17:40:18Z",
      "updated_at": "2019-01-24T17:40:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I mean `using` is already a recognised keyword that is only usable at the very start of a script so co-opting those code paths shouldn't be all that tricky.",
      "created_at": "2019-01-24T17:41:31Z",
      "updated_at": "2019-01-24T17:41:31Z"
    },
    {
      "author": "iCodeSometime",
      "author_association": "NONE",
      "body": "Just to add to this, it could also make things like the following just super clean:\r\n\r\n```powershell\r\nGet-ChildItem -Directory | Using-Directory $_ {\r\n  # Do things in each directory\r\n}\r\n```",
      "created_at": "2019-07-28T20:48:24Z",
      "updated_at": "2019-07-28T20:49:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In that situation it's basically just a ForEach-Object though. If all those objects being piped in were disposable, then yeah absolutely. It does still assume that the object creation won't fail, though.",
      "created_at": "2019-07-28T22:57:44Z",
      "updated_at": "2019-07-28T22:57:44Z"
    }
  ],
  "created_at": "2019-01-23T21:39:07Z",
  "number": 8724,
  "state": "open",
  "title": "Add optional block scoping to pushd.",
  "updated_at": "2019-07-28T22:57:44Z"
}