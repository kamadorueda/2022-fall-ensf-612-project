{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6388",
  "author": "ikanni",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\necho \"testline1\" > test.txt\r\necho \"testline2\" >> test.txt\r\n\r\n$textContent = Get-Content .\\test.txt\r\n$json=ConvertTo-Json -InputObject $textContent -Depth 10 \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nConvertTo-Json should not hang and it should display proper error or exception\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nConvertTo-Json cmdlet hangs\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                        \r\n----                           -----                                                                                        \r\nPSVersion                      5.1.16299.248                                                                                \r\nPSEdition                      Desktop                                                                                      \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                      \r\nBuildVersion                   10.0.16299.248                                                                               \r\nCLRVersion                     4.0.30319.42000                                                                              \r\nWSManStackVersion              3.0                                                                                          \r\nPSRemotingProtocolVersion      2.3                                                                                          \r\nSerializationVersion           1.1.0.1                                                                                      \r\n\r\n```\r\n",
  "closed_at": "2018-03-19T16:13:06Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @ikanni  - I suspect it's not actually hanging - it's just descending very deeply into the object tree which takes a very, very long time. Just take a look at the output from:\r\n`ConvertTo-Json -InputObject $textContent -Depth 3`\r\nIt's converting two `PSObjects ` wrapping strings. These objects have a lot of extra metadata added by `Get-Content`:\r\n```\r\n[\r\n  {\r\n    \"value\": \"testline1\",\r\n    \"PSPath\": \"C:\\\\Users\\\\brucepay.REDMOND\\\\AppData\\\\Local\\\\Temp\\\\test.txt\",\r\n    \"PSParentPath\": \"C:\\\\Users\\\\brucepay.REDMOND\\\\AppData\\\\Local\\\\Temp\",\r\n    \"PSChildName\": \"test.txt\",\r\n    \"PSDrive\": {\r\n      \"CurrentLocation\": \"Users\\\\brucepay.REDMOND\\\\AppData\\\\Local\\\\Temp\",\r\n      \"Name\": \"C\",\r\n      \"Provider\": {\r\n        \"ImplementingType\": \"Microsoft.PowerShell.Commands.FileSystemProvider\",\r\n        \"HelpFile\": \"System.Management.Automation.dll-Help.xml\",\r\n        \"Name\": \"FileSystem\",\r\n        \"PSSnapIn\": \"Microsoft.PowerShell.Core\",\r\n        \"ModuleName\": \"Microsoft.PowerShell.Core\",\r\n        \"Module\": null,\r\n        \"Description\": \"\",\r\n        \"Capabilities\": 52,\r\n        \"Home\": \"C:\\\\Users\\\\brucepay.REDMOND\",\r\n        \"Drives\": \"C D E\",\r\n        \"VolumeSeparatedByColon\": true\r\n      },\r\n      \"Root\": \"C:\\\\\",\r\n      \"Description\": \"Windows\",\r\n      \"MaximumSize\": null,\r\n      \"Credential\": {\r\n        \"UserName\": null,\r\n        \"Password\": null\r\n      },\r\n      :\r\n      :\r\n```\r\nEach additional level of depth will introduce more fields that will then need to be serialized. To get to depth 10, you'll be nesting very deeply into the object tree and it will seem to hang. If you call `Get-Content` with the `-Raw` flag, your example completes immediately:\r\n```\r\n$textContent = Get-Content .\\test.txt -Raw\r\n$json=ConvertTo-Json -InputObject $textContent -Depth 10\r\n```\r\nUsing `-Raw` tells `Get-Content` to not add all of the extra metadata, reducing the amount of work that needs to be done to serialize the objects.",
      "created_at": "2018-03-13T23:08:50Z",
      "updated_at": "2018-03-13T23:08:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree with @BrucePay that the cmdlet is doing what it is supposed to.  Perhaps `Get-Content` should be returning an array of strings and not objects (separate issue).\r\n\r\nThe actual bug is that `ConvertTo-Json` doesn't implement StopProcessing() to Ctrl+C doesn't break out.",
      "created_at": "2018-03-14T16:08:11Z",
      "updated_at": "2018-03-14T16:08:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Perhaps `Get-Content` should be returning an array of strings and not objects (separate issue).\r\n\r\n`Get-Content` does return an array of strings, but it adds several NoteProperties to the string, including `PSDrive` and `PSProvider` that point to objects.\r\n```\r\n> $s | gm\r\n\r\n   TypeName: System.String\r\n\r\nName             MemberType            Definition\r\n----             ----------            ----------\r\nClone            Method                System.Object Clone(), System.Object ICloneable.Clone()\r\n...\r\nPSChildName      NoteProperty          string PSChildName=test.txt\r\nPSDrive          NoteProperty          PSDriveInfo PSDrive=F\r\nPSParentPath     NoteProperty          string PSParentPath=F:\\\r\nPSPath           NoteProperty          string PSPath=F:\\test.txt\r\nPSProvider       NoteProperty          ProviderInfo PSProvider=Microsoft.PowerShell.Core\\FileSystem\r\nReadCount        NoteProperty          long ReadCount=1\r\n```",
      "created_at": "2018-03-14T16:41:46Z",
      "updated_at": "2018-03-14T16:41:53Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Looking at the code, I don't think `StopProcessing()` is appropriate because the thread is not blocked. Adding checks to `Stopping` in the inner loops should be sufficient.\r\n\r\n@daxian-dbw Right - it would still return `PSObjects` but we could stop adding the extra metadata by default. This is a conceptually significant breaking change but in practice I don't think anyone would notice (except that `Get-Content` performance and memory foot print would suddenly improve.) ",
      "created_at": "2018-03-14T17:02:06Z",
      "updated_at": "2018-03-14T17:02:06Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Marked as a bug for the need to support `Stopping` in the cmdlet.",
      "created_at": "2018-03-14T20:45:42Z",
      "updated_at": "2018-03-14T20:45:42Z"
    },
    {
      "author": "ikanni",
      "author_association": "NONE",
      "body": "@daxian-dbw  @BrucePay @SteveL-MSFT Get-Content adds several NoteProperties, including PSDrive and PSProvider or extra metadata by default. Whether we will fix the  Get-Content in future release to remove the several NoteProperties or extra metadata ? I understand it is breaking change.",
      "created_at": "2018-03-21T12:32:05Z",
      "updated_at": "2018-03-21T12:32:05Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@ikanni as a workaround you can do something like this:\r\n\r\n```powershell\r\nGet-Content C:\\path\\to\\file.txt | %{$_.PSObject.BaseObject} | ConvertTo-Json\r\n```\r\n\r\nI suggest opening a separate issue or locating an existing open issue and voting/commenting on it.",
      "created_at": "2018-03-21T12:45:47Z",
      "updated_at": "2018-03-21T12:45:47Z"
    }
  ],
  "created_at": "2018-03-13T22:41:26Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 6388,
  "state": "closed",
  "title": "ConvertTo-Json cmdlet hangs with -Depth 10 for object created using Get-Content",
  "updated_at": "2018-03-21T12:45:47Z"
}