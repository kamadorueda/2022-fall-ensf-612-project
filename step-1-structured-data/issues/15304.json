{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15304",
  "author": "thecliguy",
  "body": "Based on my own observations, it would appear that in PowerShell 5.1 the order in which `Get-ChildItem` lists files is governed by the file system, which is in accordance with [this article](https://devblogs.microsoft.com/oldnewthing/20140304-00/?p=1603) by Raymond Chen where he explains how the command prompt's DIR command lists files when no explicit sorting is specified.\r\n\r\nWhereas in PowerShell Core, `Get-ChildItem` appears to list files using case-insensitive lexicographical sorting irrespective of the underlying file system.\r\n\r\nMy questions are:\r\n  * Can someone point to the code that's responsible for producing case-insensitive lexicographical sorting? I'm not sure if this behaviour is due to coding within PowerShell or if it's just the result of behaviour exhibited by something within .Net core.\r\n  * Is this behaviour now considered contractual or is it liable to change? If contractual then should it be documented?\r\n  * There are certainly benefits to having a standardised file listing order however the case-insensitive aspect of it is somewhat contrary to expectation on GNU/Linux. Should `Get-ChildItem` provide a means of respecting case on GNU/Linux?\r\n\r\nBelow are details of my observations...\r\n\r\n# NTFS File System\r\n\r\nExcerpt from Raymond Chen's [article](https://devblogs.microsoft.com/oldnewthing/20140304-00/?p=1603): _\"The NTFS file system internally maintains directory entries in a B-tree structure, which means that the most convenient way of enumerating the directory contents is in B-tree order...\"_\r\n\r\nHaving done some further research, the B-tree that Raymond alludes to is organised lexicographically.\r\n\r\n## Test Performed\r\n\r\n```\r\n# Create five files that adhere to the format `foo_<YYYYMMDD>.txt`, one of which\r\n# is uppercase.\r\n\r\nNew-Item -Path \"C:\\TestFiles\" -ItemType Directory\r\n\"Hello\" > \"C:\\TestFiles\\foo_20210304.txt\"\r\n\"Hello\" > \"C:\\TestFiles\\foo_20210301.txt\"\r\n\"Hello\" > \"C:\\TestFiles\\FOO_20210303.txt\"\r\n\"Hello\" > \"C:\\TestFiles\\foo_20210302.txt\"\r\n\"Hello\" > \"C:\\TestFiles\\foo_20210305.txt\"\r\n```\r\n\r\n### Result: Windows PowerShell 5.1 on Windows 10\r\n\r\nFiles are listed in case-insensitive lexicographical order.\r\n\r\n```\r\nPS C:\\> Get-ChildItem \"C:\\TestFiles\"\r\n\r\n\r\n    Directory: C:\\TestFiles\r\n\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a----        25/04/2021     04:02             16 foo_20210301.txt\r\n-a----        25/04/2021     04:02             16 foo_20210302.txt\r\n-a----        25/04/2021     04:02             16 FOO_20210303.txt\r\n-a----        25/04/2021     04:02             16 foo_20210304.txt\r\n-a----        25/04/2021     04:02             16 foo_20210305.txt\r\n```\r\n\r\n### Result: PowerShell Core 7.1.3 on Windows 10\r\n\r\nFiles are listed in case-insensitive lexicographical order.\r\n\r\n```\r\nPS C:\\> Get-ChildItem \"C:\\TestFiles\"\r\n\r\n    Directory: C:\\TestFiles\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          25/04/2021    04:07              7 foo_20210301.txt\r\n-a---          25/04/2021    04:07              7 foo_20210302.txt\r\n-a---          25/04/2021    04:07              7 FOO_20210303.txt\r\n-a---          25/04/2021    04:07              7 foo_20210304.txt\r\n-a---          25/04/2021    04:07              7 foo_20210305.txt\r\n```\r\n\r\n# FAT32 File System\r\n\r\nExcerpt from Raymond Chen's [article](https://devblogs.microsoft.com/oldnewthing/20140304-00/?p=1603): _\"If the storage medium is a FAT-formatted USB thumb drive, then the files will be enumerated in a complex order based on the order in which files are created and deleted and the lengths of their names.\"_\r\n\r\n## Test Performed\r\n\r\nI connected a FAT32 formatted USB thumb drive to a computer running Windows 10 where it was mounted as `D:\\` drive.\r\n\r\n```\r\n# Create five files that adhere to the format `foo_<YYYYMMDD>.txt`, one of which\r\n# is uppercase.\r\n\r\nNew-Item -Path \"D:\\TestFiles\" -ItemType Directory\r\n\"Hello\" > \"D:\\TestFiles\\foo_20210304.txt\"\r\n\"Hello\" > \"D:\\TestFiles\\foo_20210301.txt\"\r\n\"Hello\" > \"D:\\TestFiles\\FOO_20210303.txt\"\r\n\"Hello\" > \"D:\\TestFiles\\foo_20210302.txt\"\r\n\"Hello\" > \"D:\\TestFiles\\foo_20210305.txt\"\r\n```\r\n\r\n### Result: Windows PowerShell 5.1 on Windows 10\r\n\r\nFiles are listed in the order they were created.\r\n\r\n```\r\nPS C:\\> Get-ChildItem \"D:\\TestFiles\"\r\n\r\n\r\n    Directory: D:\\TestFiles\r\n\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a----        25/04/2021     04:11             16 foo_20210304.txt\r\n-a----        25/04/2021     04:11             16 foo_20210301.txt\r\n-a----        25/04/2021     04:11             16 FOO_20210303.txt\r\n-a----        25/04/2021     04:11             16 foo_20210302.txt\r\n-a----        25/04/2021     04:11             16 foo_20210305.txt\r\n```\r\n\r\n### Result: PowerShell Core 7.1.3 on Windows 10\r\n\r\nFiles are listed in case-insensitive lexicographical order.\r\n\r\n```\r\nPS C:\\> Get-ChildItem \"D:\\TestFiles\"\r\n\r\n    Directory: D:\\TestFiles\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          25/04/2021    04:12              7 foo_20210301.txt\r\n-a---          25/04/2021    04:12              7 foo_20210302.txt\r\n-a---          25/04/2021    04:12              7 FOO_20210303.txt\r\n-a---          25/04/2021    04:12              7 foo_20210304.txt\r\n-a---          25/04/2021    04:12              7 foo_20210305.txt\r\n```\r\n\r\n# Ext4 File System\r\n\r\n## Test Performed\r\n\r\n```\r\n# Create five files that adhere to the format `foo_<YYYYMMDD>.txt`, one of which\r\n# is uppercase.\r\n\r\nNew-Item -Path \"~/TestFiles\" -ItemType Directory\r\n\"Hello\" > \"~/TestFiles/foo_20210304.txt\"\r\n\"Hello\" > \"~/TestFiles/foo_20210301.txt\"\r\n\"Hello\" > \"~/TestFiles/FOO_20210303.txt\"\r\n\"Hello\" > \"~/TestFiles/foo_20210302.txt\"\r\n\"Hello\" > \"~/TestFiles/foo_20210305.txt\"\r\n```\r\n\r\n### Result: PowerShell Core 7.1.3 on Ubuntu 20.04\r\n\r\nFiles are listed in case-insensitive lexicographical order (contrary to what you'd expect on GNU/Linux).\r\n\r\n```\r\nPS /> Get-ChildItem \"~/TestFiles\"\r\n\r\n    Directory: /home/thecliguy/TestFiles\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-----          04/25/2021    04:27              6 foo_20210301.txt\r\n-----          04/25/2021    04:27              6 foo_20210302.txt\r\n-----          04/25/2021    04:27              6 FOO_20210303.txt\r\n-----          04/25/2021    04:27              6 foo_20210304.txt\r\n-----          04/25/2021    04:27              6 foo_20210305.txt\r\n```",
  "closed_at": "2021-05-29T12:00:17Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> contrary to what you'd expect on GNU/Linux\r\n\r\n```\r\n $ ls -l\r\ntotal 0\r\n-rw-r--r-- 1 user user 0 Apr 25 10:47 foo_20210301.txt\r\n-rw-r--r-- 1 user user 0 Apr 25 10:47 foo_20210302.txt\r\n-rw-r--r-- 1 user user 0 Apr 25 10:47 FOO_20210303.txt\r\n-rw-r--r-- 1 user user 0 Apr 25 10:47 foo_20210304.txt\r\n-rw-r--r-- 1 user user 0 Apr 25 10:47 foo_20210305.txt\r\n\r\n $ bash --version\r\nGNU bash, version 5.1.4(1)-release (x86_64-pc-linux-gnu)\r\nCopyright (C) 2020 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\n\r\nThis is free software; you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\n```",
      "created_at": "2021-04-25T07:57:46Z",
      "updated_at": "2021-04-25T07:57:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I can't speak to the contractual aspect, but here's the code that explicitly sorts:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/c857392c34613fc8ece1432ceb89a5310d9e5fd9/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1617-L1618",
      "created_at": "2021-04-25T16:42:57Z",
      "updated_at": "2021-04-25T16:42:57Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "We discussed this today in the Engine Working Group and looked at:\r\n\r\n- When the ordering was introduced (it's not present in powershell.exe)\r\n- Whether it's explicitly documented or is an established contract\r\n- Whether comparable tools order output (like `ls`, which does by default)\r\n- Whether filesystems themselves guarantee order (they often don't)\r\n- How .NET does this ([it doesn't sort outputs, so that it can lazily enumerate them for performance](https://stackoverflow.com/a/5669642))\r\n- What tradeoffs are made by ordering output (it could significantly slow down something like `gci | ? { Test $_ } | select -first 1`, where you want to stop enumerating early)\r\n- The order of objects emitted to the pipeline vs the order that they're formatted in\r\n- The principle of modularity and being able to achieve a sorting with pipelines today (with `Sort-Object`)\r\n\r\nGiven these things, we think that:\r\n\r\n- Ordering by default makes sense\r\n- That output order and format order should ideally be the same to minimise confusion\r\n- The current ordering might not be the right one (particularly `CurrentCultureIgnoreCase`, especially in terms of case-sensitivity on various platforms) and that it shouldn't *yet* be considered a contract\r\n- We should discuss ordered filesystem output in a separate issue as an enhancement, and that enhancement should also include a switch to opt out of sorting to enable [performance-conscious scenarios](https://github.com/PowerShell/PowerShell/issues/3575). See https://github.com/PowerShell/PowerShell/issues/15476.\r\n\r\nFor now, the answer to the original issue here is **no**, we don't consider `Get-ChildItem` output (to the pipeline, rather than the formatter) order to be guaranteed. Note that formatting is considered an interactive feature and so any ordering there should not be relied on either.",
      "created_at": "2021-05-28T00:53:49Z",
      "updated_at": "2021-05-28T00:58:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Given these things, we think that:\r\n> \r\n> * Ordering by default makes sense\r\n> * That output order and format order should ideally be the same to minimise confusion\r\n\r\nThis is a dangerous trend. \r\n**You can't make scripts and the engine slow for the sake of cosmetic changes.**\r\nSuch things only make sense where the user sees them with his own eyes. Otherwise it should be explicitly spelled out in the script if it needs to be sorted there.\r\nWe already have this problem with case normalization. As a result, we have up to 10 times slower file operations. \r\n**All cosmetic goodies should be in the formatting system and yes it should be switchable.**\r\n\r\n\r\n> * The current ordering might not be the right one (particularly `CurrentCultureIgnoreCase`, especially in terms of case-sensitivity on various platforms) and that it shouldn't _yet_ be considered a contract\r\n> * We should discuss ordered filesystem output in a separate issue as an enhancement, and that enhancement should also include a switch to opt out of sorting to enable [performance-conscious scenarios](https://github.com/PowerShell/PowerShell/issues/3575). See #15476.\r\n> \r\n\r\nWe **must** follow the general rule that all output for users in PowerShell uses **Culture**.\r\n\r\nIf we say about case we must follow the general rule too - **PowerShell is case-insensetive**. Deviation from this rule generates an infinite number of bugs, of which there are _already a lot in this subsystem_. I'm not saying that we should ignore the properties of file systems and work with EXT4 just like NTFS, but we should not break the general principles on which PowerShell works. \r\nIf these design fundamentals do not meet the user's expectations, he can use other tools.\r\nBut we must not allow the reverse situation where a user is forced to give up PowerShell because we ourselves are destroying its principles. So my script runs for about 5 hours on Windows PowerShell. I've never been able to find out how long it runs on PowerShell Core since I can't wait a _few days_. I would like to use it, but I can't. I would like to make it the fastest, but ... so far everything is being done to make it the slowest, and we've succeeded.\r\n\r\n",
      "created_at": "2021-05-28T04:19:43Z",
      "updated_at": "2021-05-28T04:19:43Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-05-29T12:00:16Z",
      "updated_at": "2021-05-29T12:00:16Z"
    }
  ],
  "created_at": "2021-04-25T03:59:31Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered",
    "WG-Engine-Providers"
  ],
  "number": 15304,
  "state": "closed",
  "title": "Get-ChildItem's Influence on File Listing Order",
  "updated_at": "2021-05-29T12:00:17Z"
}