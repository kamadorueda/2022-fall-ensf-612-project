{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17283",
  "author": "MatejKafka",
  "body": "### Summary of the new feature / enhancement\n\nCurrently, argument completers for native commands must be explicitly registered using `Register-ArgumentCompleter`. However, this means that the module which registers the completer must be eagerly loaded in `$PROFILE` during startup, otherwise the completions aren't loaded. If many different argument completers are registered, this may take a considerable amount of time on each startup, even when most of the completions are never used in the session.\r\n\r\nAs an example, importing `https://github.com/MatejKafka/PowerShell-ArgumentCompleters` takes about 175 ms on my computer. Currently, I'm loading them in an `OnIdle` event callback, which helps, but it's still not ideal and doesn't scale well to a larger number of completers.\r\n\r\nIt would be nice to add an autoloading support for argument completers. Completions for native commands (together with inline description) are the main reason why I prefer `fish` shell autocompletion over the one in PowerShell.\r\n \r\n---\r\n\r\nAs an additional food for thought (which is definitely out-of-scope for this issue), currently there isn't any official repository for argument completers. If that was added, it could be possibly to interactively offer the user to download completions for the given command (if available) when he first triggers autocomplete on it, greatly improving the experience of using native commands in PowerShell. It already kinda works this way on Linux, where many packages also install autocompleters for commonly used shells.\n\n### Proposed technical implementation details (optional)\n\nPossible implementation: Add an entry to the module manifest, listing the commands for which it provides argument completers. When completions for the command are requested, the module is autoloaded, which registers the argument completers.\r\n\r\nThis implementation has an issue where if the module is large (slow to load), there may be a considerable delay before the completions appear. This could be further improved by also specifying which file contains the argument completer for the given command, so that only that file could be loaded, without loading the whole module. This would allow for one big module, which registers many different completers, each in a separate file, without having to load the whole module.",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Auto loading a module at the time of user pressing <kbd>Tab</kbd> is dangerous. It's likely will block the user input for a very noticeable period of time and the user simply cannot cancel whatever PowerShell is doing at that point. So, it seems PowerShell freezes, and the user has to wait till it becomes responsive.",
      "created_at": "2022-10-17T22:22:33Z",
      "updated_at": "2022-10-17T22:22:33Z"
    },
    {
      "author": "MatejKafka",
      "author_association": "NONE",
      "body": "1) The current alternative is eagerly loading the autocompletion module in `$PROFILE`, so the user has to pay this cost on each startup, not just on the first completion invocation.\r\n\r\n2) Your described behavior is exactly what already happens for PowerShell commands \u2013 if I invoke completion on a command from a not-yet-loaded module, there's a delay where PowerShell is loading the module to provide completion. Thus, allowing autoload for external completers does not make this situation any worse.",
      "created_at": "2022-10-18T09:06:49Z",
      "updated_at": "2022-10-18T09:07:13Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The WG discussed this. We feel that there are a number of threads that need pulling here:\r\n\r\n- @daxian-dbw raised an excellent point about performance (think the huge `az` module)\r\n- We did agree that the module should likely have a way to specify completions\r\n- We absolutely agree about having a good way to acquire/share completions\r\n- We can't ignore completions for non-Modules (scripts/native apps)\r\n- fish/bash/zsh all do completion a little differently, what can we learn from them (and what can we avoid)?\r\n\r\nWe think a comprehensive approach is going to provide better results long term, rather than just trying to solve this problem for modules. We're suggesting that an RFC is really needed here.\r\n\r\n",
      "created_at": "2022-10-21T00:38:20Z",
      "updated_at": "2022-10-21T00:38:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> * fish/bash/zsh all do completion a little differently, what can we learn from them (and what can we avoid)?\r\n\r\nThey use scripts for completion. This is a way for code injection. I highly doubt that MSFT will agree to run someone else's extra code! Mandatory signing of such files is not convenient for users.\r\n\r\nNow the .Net Command Line project uses the approach of starting target application with every tab. It is obvious how problematic this approach is.\r\n\r\nI would suggest joining forces with this project and developing a standard for declarative description of meta information about parameters and arguments.\r\nPowerShell uses this now through attributes. If there were a standard, it would be able to read external information (XML/Json) from any application and use it for completion.",
      "created_at": "2022-10-21T03:30:07Z",
      "updated_at": "2022-10-21T03:30:07Z"
    }
  ],
  "created_at": "2022-05-06T23:21:42Z",
  "number": 17283,
  "state": "open",
  "title": "Add a way to lazily autoload argument completers",
  "updated_at": "2022-10-21T03:30:07Z"
}