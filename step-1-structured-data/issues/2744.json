{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2744",
  "author": "powercode",
  "body": "fixes #2567 \r\n\r\nAdding TypeInferenceVisitor (transforming GetInferredType method of corresponding types)\r\nRemoving Ast.GetInferredType hierarchy of virtual methods\r\nAdding calls to SafeExpressEval when TypeInference is used in tabexpansion to allow\r\nuse of runtime variables when inferring type.",
  "closed_at": "2017-06-07T22:52:34Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@powercode**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-11-20T22:40:09Z",
      "updated_at": "2016-11-20T22:40:09Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I'm between a rock and a hard place here, having to explain the new push with either arrogance or incompetence :) It was the latter. I heard you the first time, but missed how I had Beyond compare configured to ignore whitespace.\r\nFixed now",
      "created_at": "2016-11-21T06:28:12Z",
      "updated_at": "2016-11-21T06:28:12Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@powercode can you, please, rebase and resolve the conflicts?",
      "created_at": "2016-12-01T21:55:05Z",
      "updated_at": "2016-12-01T21:55:05Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Waiting on addressing the code-review comments",
      "created_at": "2016-12-03T03:17:29Z",
      "updated_at": "2016-12-03T03:17:29Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "If I understand correctly, we still have to \r\n\r\n- determine a good name for PowerShellExecutionHelper\r\n- decide if the public API is good enough or what changes should be made to it.\r\n- anything else?",
      "created_at": "2016-12-31T01:57:55Z",
      "updated_at": "2016-12-31T01:57:55Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "The iterations on this PR are very unclear. It's impossible to tell what changed from the previos time, because history is constantly rewritten.\r\nI think @daxian-dbw already proposed to encourage keep the history as-is in the PR and only rewrite it when the review is done. I think it would help a lot to follow such proposition in this particular case.\r\nI would not have time in the next 2 week to do the review, so clearing the assignment.",
      "created_at": "2017-01-07T06:17:27Z",
      "updated_at": "2017-01-07T06:17:27Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@vors  Sorry about all the rebasing. We had a discussion offline about this, that wasn\u00b4t conclusive. But in this case, with so many iteration, it got really bad. I think I agree with @daxian-dbw. Even though it adds burden when doing the final merge, the ease of reviewing makes up for it.",
      "created_at": "2017-04-18T07:06:52Z",
      "updated_at": "2017-04-18T07:07:08Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I'm addressing the comments, but need advice on how to proceed with the tests that are using the public API.",
      "created_at": "2017-04-20T20:19:56Z",
      "updated_at": "2017-04-20T20:19:56Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Can we have a test assembly with InternalsVisibleTo SMA which just delegate to the internal API?",
      "created_at": "2017-04-21T05:15:57Z",
      "updated_at": "2017-04-21T05:15:57Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Tests are now using reflection. I think all comments are addressed.",
      "created_at": "2017-04-27T19:55:59Z",
      "updated_at": "2017-04-27T19:55:59Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Good suggestions! Have a look and see if I've understood you correctly.",
      "created_at": "2017-04-28T19:00:41Z",
      "updated_at": "2017-04-28T19:00:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@lzybkr LINQ is used in many places in the changes, some are new and some are from existing code. \r\nTab completion code is perf-sensitive, so should we always disallow LINQ usages? What would be the guideline?\r\n\r\nFor precisely, I'm not talking about LINQ query expressions, but usages like `X.Where(predicate)`, `X.SelectMany(..)`. They do create additional objects. I wonder what is the guideline for those usages.",
      "created_at": "2017-04-28T19:45:36Z",
      "updated_at": "2017-04-28T20:07:33Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I discussed this with @lzybkr and @vors  on gitter. I wanted to use a preallocated list that was filled in by the visitor. Mostly for ease of debugging, but also for performance. My impression was that Sergei liked the readablilty of linq and Jason was slightly in favor of using the list.\r\n\r\nI'm open to both. It would be nice to see some performance data on the existing code to see if it is actually needed. The data sets are seldom large here. \r\nOr maybe they are when analyzing scripts?",
      "created_at": "2017-04-28T21:00:41Z",
      "updated_at": "2017-04-28T21:00:41Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "By the way, @daxian-dbw : what a great review! Working through the issues.",
      "created_at": "2017-04-28T21:01:50Z",
      "updated_at": "2017-04-28T21:01:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "When LINQ gets used inappropriately - you end up with many allocations, and that affects GC at some point, possibly during your scenario, possibly not.\r\n\r\nThis is unrelated to `yield` vs. a list.",
      "created_at": "2017-04-28T21:05:49Z",
      "updated_at": "2017-04-28T21:05:49Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I have chosen to not make too many changes since the main job of this PR was to enable a new feature.\r\nI tried to keep the code fairly similar to the original to make it easier to see my changes but that is soon a moot point :)\r\nMaybe things like Linq usage can be a separate PR?",
      "created_at": "2017-04-28T21:29:28Z",
      "updated_at": "2017-04-28T23:09:15Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I believe I have addressed all comments except for LINQ usage.",
      "created_at": "2017-04-28T22:42:22Z",
      "updated_at": "2017-04-28T22:42:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The impact of LINQ usage doesn't show up immediately. Initially, the perf difference won't be measurable, but as more LINQ usages put in the code gradually, the perf diff will show up. By that time, it would be difficult to refactor the code to replace those uses.\r\nSo I vote for minimizing LINQ uses in perf-sensitive codes like Parser, Compiler and Auto-Completion.\r\n\r\n> Maybe things like Linq usage can be a separate PR?\r\n\r\nI agree to make the LINQ usage changes a separate PR.",
      "created_at": "2017-04-28T23:38:41Z",
      "updated_at": "2017-04-28T23:38:41Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Opened #3857 to track improvement of type inference for IndexExpresssions. @lzybkr ",
      "created_at": "2017-05-24T20:46:21Z",
      "updated_at": "2017-05-24T20:51:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Opened #3858 to track the removal of LINQ from TypeInferenceVisitor. @daxian-dbw ",
      "created_at": "2017-05-24T20:51:16Z",
      "updated_at": "2017-05-24T20:51:16Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> My impression was that Sergei liked the readablilty of linq and Jason was slightly in favor of using the list.\r\n\r\nNot really: I was in favor of stateless passing everything around as parameters, linq was not discussed.",
      "created_at": "2017-06-03T03:45:53Z",
      "updated_at": "2017-06-03T03:45:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode Thanks for the great work!",
      "created_at": "2017-06-08T05:31:19Z",
      "updated_at": "2017-06-08T05:31:19Z"
    }
  ],
  "created_at": "2016-11-20T22:40:04Z",
  "number": 2744,
  "state": "closed",
  "title": "Adding support for Typeinference based on runtime variable values",
  "updated_at": "2018-01-26T19:04:56Z"
}