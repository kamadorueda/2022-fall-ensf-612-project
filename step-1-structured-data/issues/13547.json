{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13547",
  "author": "user8446",
  "body": "## Steps to reproduce:\r\nUsing the conditional `If`, use the incorrect comparison operator of `=` instead of `-eq`:\r\n\r\n```\r\n$Sky = 'blue'\r\n\r\nif ($Sky = 'green') {\r\n\r\n    Write-Host \"The sky is green\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nWe should get the error `Unexpected token '=' in expression or statement` like this if we used the incorrect comparison operator `equals`:\r\n\r\n```\r\nParserError: \r\nLine |\r\n   3 |  if ($Sky equals 'green') {\r\n     |           ~~~~~~\r\n     | Unexpected token 'equals' in expression or statement.\r\n```\r\nThe variable should also not have been changed to `green` as you don't set variables inside of the condition to be met inside of conditionals.\r\n\r\n## Actual behavior\r\n\r\nNo error is produced, the script continues, and the variable is set to `green`\r\n\r\n```\r\n\r\n## Environment data\r\n\r\nObserved in both PowerShell & Windows PowerShell\r\n",
  "closed_at": "2021-01-18T05:35:41Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is by design.\r\n\r\nWhat's happening here is that the expression `$sky = 'green'`, which doesn't normally output data, can also be written `($sky = 'green')`, which _does_ produce output (it outputs the value `'green'` to the pipeline as well as storing it in the variable).\r\n\r\nKnowing this, the parentheses in an `if` statement (and indeed other conditionals like `switch`) behave the same way, forcing the output and processing it in the conditional statement.\r\n\r\nC# works the same way, it's likely a pattern copied from there.\r\n\r\n```ps1\r\n$sky = 'green' # no output\r\n($sky = 'blue') # outputs 'blue'\r\nif ($sky = 'green') {\r\n    # 'green' is evaluated by the if statement and coerces to a boolean `$true` as it is not an empty or null string.\r\n    Write-Warning \"we do indeed get here\"\r\n}\r\n\r\n$sky # is now 'green'\r\n```\r\n\r\nIn other words, assigning a variable in an if statement will always be an assignment and a test of the value you assigned, and never a test of the _current_ value of the variable.",
      "created_at": "2020-08-30T16:55:56Z",
      "updated_at": "2020-08-30T16:57:35Z"
    },
    {
      "author": "user8446",
      "author_association": "NONE",
      "body": "Thank you for the response. \r\nEven though the syntax of `($Sky = 'green')` with the parenthesis is valid, the parenthesis inside of an `if` statement is *only* the condition that is to be met.\r\nThis would be really confusing for people coming to PS from other languages that may use `=` as a comparison operator.",
      "created_at": "2020-08-30T17:04:53Z",
      "updated_at": "2020-08-30T17:05:17Z"
    },
    {
      "author": "Northman-de",
      "author_association": "NONE",
      "body": "This behavior can be useful:\r\n\r\n```powershell\r\nwhile (($results = $Folder.FindItems($view)).Items.Count -gt 0) {\r\n```\r\nIf the folder is empty the while-loop will not be entered. If there are items they are stored in `$results`\r\n\r\nbtw: $folder.FindItems() is from the Exchange Managed API (EWS)\r\n",
      "created_at": "2020-08-30T17:15:58Z",
      "updated_at": "2020-08-30T17:15:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Indeed. And whether or not it can be confusing is pretty much not very relevant an this point. That's a pretty fundamental language design decision that was decided 15+ years ago.\n\nDifferent languages have different syntax, that's always going to be the case. Sometimes that syntax will conflict with what folks who already know a different language might expect. \ud83e\udd37",
      "created_at": "2020-08-30T17:43:27Z",
      "updated_at": "2020-08-30T17:43:27Z"
    },
    {
      "author": "user8446",
      "author_association": "NONE",
      "body": "Thank you @vexx32 ",
      "created_at": "2020-08-30T17:55:03Z",
      "updated_at": "2020-08-30T17:55:03Z"
    }
  ],
  "created_at": "2020-08-30T16:47:52Z",
  "number": 13547,
  "state": "closed",
  "title": "The Conditional If does not produce error if specific syntax is incorrect",
  "updated_at": "2021-01-18T05:35:50Z"
}