{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4655",
  "author": "rebro-msft",
  "body": "Steps to reproduce\r\n------------------\r\n```powershell\r\nfunction Test-EV\r\n{\r\n    [CmdletBinding()]\r\n    Param\r\n    (\r\n    )\r\n    process {\r\n        Foo @PSBoundParameters | ForEach-Object { $_ }  \r\n    }\r\n}\r\nfunction foo {\r\n    [CmdletBinding()]\r\n    Param\r\n    (\r\n    )\r\n    Write-Error 'Some error message' -ErrorId 'CustomErrorId'\r\n}\r\n$ev = $null\r\nTest-EV -ErrorVariable ev\r\n$ev\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nError variable $ev should contain the error.\r\n\r\n\r\nActual behavior\r\n---------------\r\nError variable $ev does not contain the error.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.502\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.502\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Not sure if this is by-design or not, workaround:\r\n\r\n```powershell\r\nTest-EV -ErrorVariable ev -ErrorAction Stop\r\n```\r\n\r\ncc @BrucePay \r\n\r\nrelated https://github.com/PowerShell/PowerShell/issues/4292",
      "created_at": "2017-08-24T01:44:19Z",
      "updated_at": "2017-08-24T01:44:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nThe workaround fundamentally changes the behavior of the original command (you're escalating to a script-terminating error).\r\n\r\nTo narrow the puzzling behavior down further:\r\n\r\nThe problem only surfaces when the `foo` call is made as part of a (multi-stage) pipeline:\r\n\r\n```powershell\r\nfunction Test-EV\r\n{\r\n    [CmdletBinding()] Param([switch] $NoPipe)\r\n    process {\r\n        # If you call foo @PSBoundParameters by itself, not as \r\n        # part of a multi-stage pipeline, the problem does NOT occur.\r\n        if ($NoPipe) {\r\n            $null = $PSBoundParameters.Remove('NoPipe')\r\n            # OK: $ev is set both in this scope and in the caller's scope.\r\n            foo @PSBoundParameters\r\n        } else { \r\n            # POSSIBLY BROKEN: $ev is only set in this scope.\r\n            foo @PSBoundParameters | Out-Default\r\n        }\r\n    }\r\n    end {\r\n        \"inside `$ev: [$ev]\"\r\n    }\r\n}\r\nfunction foo {\r\n    [CmdletBinding()] Param()\r\n    Write-Error 'Some error message' -ErrorId 'CustomErrorId'\r\n}\r\n\r\n\"-- With pipeline: \"\r\n$ev = $null\r\nTest-EV -ErrorVariable ev 2>$null\r\n\"outside `$ev: [$ev]\"\r\n\"-- Without pipeline: \"\r\n$ev = $null\r\nTest-EV -NoPipe -ErrorVariable ev 2>$null\r\n\"outside `$ev: [$ev]\"\r\n```\r\n\r\nThe above yields:\r\n\r\n```powershell\r\n-- With pipeline: \r\ninside $ev: [Some error message]\r\noutside $ev: []\r\n-- Without pipeline: \r\ninside $ev: [Some error message]\r\noutside $ev: [Some error message]\r\n```",
      "created_at": "2017-08-24T15:33:30Z",
      "updated_at": "2017-08-24T15:33:30Z"
    }
  ],
  "created_at": "2017-08-23T21:19:20Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 4655,
  "state": "open",
  "title": "Error Variable not captured when piping",
  "updated_at": "2017-08-24T15:33:31Z"
}