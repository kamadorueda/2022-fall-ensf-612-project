{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16694",
  "author": "T35R6braPwgDJKq",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace TestCore\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (PowerShell ps = PowerShell.Create())\r\n            {\r\n                var results = ps.AddScript(\"Get-NetTCPConnection\").Invoke();\r\n                Console.WriteLine(results[0].ToString());\r\n                Console.WriteLine(ps.Streams.Error);\r\n                ps.Commands.Clear();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"System\">\r\n      <HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Management.Automation\">\r\n      <HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Management.Automation.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```powershell\r\n&\"$env:localappdata\\microsoft\\dotnet\\dotnet\" publish -r win10-x64 --self-contained=true /p:PublishSingleFile=true --configuration Debug\r\nTestCore\\bin\\Debug\\net6.0\\win10-x64\\publish\\TestCore.exe\r\n```\r\n\r\n\r\nI am pretty sure that this initial error may be related to missing library references? \r\nI also read https://github.com/PowerShell/PowerShell/issues/13013 where @iSazonov said\r\n> Get-NetTCPConnection is not in the repository. Use UserVoice site to send your request to MSFT owner team.\r\n\r\nOkay, doing the same in `..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\pwsh -ep bypass`:\r\n```powershell\r\nGet-NetTCPConnection\r\n\r\nLocalAddress                        LocalPort RemoteAddress                       RemotePort State       AppliedSetting OwningProcess\r\n...\r\n```\r\n\r\nWhat is the problem here?\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nsomething like\r\n\r\nLocalAddress                        LocalPort RemoteAddress                       RemotePort State       AppliedSetting OwningProcess\r\n...\r\n```\r\n\r\n### Actual behavior\r\nwith 2 libs\r\n```console\r\nUnhandled exception. System.Management.Automation.Runspaces.PSSnapInException: System error.\r\n   at System.Management.Automation.Runspaces.PSSnapInHelpers.LoadPSSnapInAssembly(PSSnapInInfo psSnapInInfo) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\InitialSessionState.cs:line 5014\r\n   at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\InitialSessionState.cs:line 3877\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault() in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\InitialSessionState.cs:line 1512\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\ConnectionFactory.cs:line 68\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace() in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\ConnectionFactory.cs:line 45\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 5466\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4596\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4788\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4536\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings) in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 2431\r\n   at System.Management.Automation.PowerShell.Invoke() in C:\\Users\\test\\source\\repos\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 2308\r\n   at TestCore.Program.Main(String[] args) in C:\\users\\test\\source\\repos\\TestCore\\TestCore\\Program.cs:line 12\r\n```\r\n\r\nWith the following additional libs (wild guesses - basically randomly chosen)\r\n```csproj\r\n\t\t<Reference Include=\"Microsoft.Management.Infrastructure\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.Management.Infrastructure.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.WSMan.Management\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.WSMan.Management.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.CodeAnalysis.CSharp\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.CodeAnalysis.CSharp.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.CodeAnalysis\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.CodeAnalysis.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.Commands.Diagnostics\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.Commands.Diagnostics.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.Commands.Management\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.Commands.Management.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.Commands.Utility\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.Commands.Utility.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.ConsoleHost\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.ConsoleHost.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.CoreCLR.Eventing\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.CoreCLR.Eventing.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.MarkdownRender\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.MarkdownRender.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.PowerShell.Security\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.PowerShell.Security.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.Win32.Registry\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.Win32.Registry.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Microsoft.WSMan.Runtime\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Microsoft.WSMan.Runtime.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"Newtonsoft.Json\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\Newtonsoft.Json.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"NJsonSchema\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\NJsonSchema.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Diagnostics.EventLog\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Diagnostics.EventLog.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Drawing.Common\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Drawing.Common.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.IO.FileSystem.AccessControl\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.IO.FileSystem.AccessControl.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Security.AccessControl\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Security.AccessControl.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Security.Principal.Windows\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Security.Principal.Windows.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.ServiceProcess.ServiceController\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.ServiceProcess.ServiceController.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Text.Encoding\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Text.Encoding.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Text.Encoding.CodePages\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Text.Encoding.CodePages.dll</HintPath>\r\n\t\t</Reference>\r\n\t\t<Reference Include=\"System.Threading.AccessControl\">\r\n\t\t\t<HintPath>..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Threading.AccessControl.dll</HintPath>\r\n\t\t</Reference>\r\n```\r\n\r\n```\r\nMSFT_NetTCPConnection (InstanceID = \"::??49670??::??0\")\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.10\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.10-192-g6c22065d77f0d150484ac0234938b0afb7ee11f1\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nsystem: 10.0.19044\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-01-09T00:00:52Z",
  "comments": [
    {
      "author": "T35R6braPwgDJKq",
      "author_association": "NONE",
      "body": "Lets assume I get that worked out and the weird `MSFT_NetTCPConnection (InstanceID = \"::??49670??::??0\")` can be transformed to actual useful information, the next step is to copy the binary to another computer (10.0.19043).\r\n\r\nExecuting it there, I get:\r\n```\r\nErr:    at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke()\r\n   at TestCore.Program.Main(String[] args)\r\n```\r\n\r\nThat is acutally the initial reason why I wanted to report a bug, but my MWE above didn't yield the same results as my actual project, so I'm asking for help twice.",
      "created_at": "2022-01-04T10:09:57Z",
      "updated_at": "2022-01-04T10:11:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder why do you create and build your project in so weird way? Why don't you read and follow docs?",
      "created_at": "2022-01-04T18:50:13Z",
      "updated_at": "2022-01-04T18:50:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@T35R6braPwgDJKq Please directly use `Microsoft.PowerShell.SDK` with the `PackageReference` tag in your project file.\r\nAlso, running `Get-NetTCPConnection` in your application means you rely on the module to be present in the module path on the machine the application is running.",
      "created_at": "2022-01-04T19:10:58Z",
      "updated_at": "2022-01-04T19:12:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> /p:PublishSingleFile=true\r\n\r\nThis is not supported too.",
      "created_at": "2022-01-04T19:17:02Z",
      "updated_at": "2022-01-04T19:17:02Z"
    },
    {
      "author": "T35R6braPwgDJKq",
      "author_association": "NONE",
      "body": "> I wonder why do you create and build your project in so weird way? Why don't you read and follow docs?\r\n\r\nwhat do you mean exactly? The project is an update to an existing project (which was built against ~netcore 2 or so)\r\nAlso, i'm using VS2019 which does not support .net6; i also guess that this does not really relate to the problem\r\nEdit: not just an update of an existing but also a change from powershell to pwsh of a third project...\r\nThe mwe is just as approximate as possible I guess\r\n\r\n> `/p:PublishSingleFile=true` is not supported too.\r\n\r\nMay be, but that does not seem the problem here either\r\n\r\n@daxian-dbw uhm, I installed the nuget package and set the reference - Do we expect another/more detailed error message here? If so, its not the case.\r\n",
      "created_at": "2022-01-04T22:52:28Z",
      "updated_at": "2022-01-05T07:56:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@T35R6braPwgDJKq I gave it a try with `<PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.2.1\" />` to reference the PowerShell SDK package and it works fine. Here are the details:\r\n\r\n```c#\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace TestCore\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (PowerShell ps = PowerShell.Create())\r\n            {\r\n                ps.AddCommand(\"Set-ExecutionPolicy\")\r\n                    .AddParameter(\"ExecutionPolicy\", \"RemoteSigned\")\r\n                    .AddParameter(\"Scope\", \"Process\")\r\n                    .Invoke();\r\n\r\n                var results = ps.AddScript(\"Get-NetTCPConnection\").Invoke();\r\n                Console.WriteLine(results[0].ToString());\r\n                ps.Commands.Clear();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.2.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n![image](https://user-images.githubusercontent.com/127450/148620299-14e443f2-c05f-4601-bbd3-fe7be5124bcf.png)\r\n\r\n------------\r\n\r\n`results[0].ToString()` won't get you the formatting output like in PowerShell because doing that in C# application doesn't go through the PowerShell formatting system. But you will get back the object and thus you can access its properties/fields as you need.",
      "created_at": "2022-01-07T23:37:06Z",
      "updated_at": "2022-01-07T23:37:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-09T00:00:51Z",
      "updated_at": "2022-01-09T00:00:51Z"
    },
    {
      "author": "T35R6braPwgDJKq",
      "author_association": "NONE",
      "body": "But how would I reference my `..\\..\\PowerShell\\src\\powershell-win-core\\bin\\Release\\net6.0\\win7-x64\\publish\\System.Management.Automation.dll`? \r\nIf I use the nuget package, the reference to my version is completely lost, isnt it?\r\n\r\n\r\n1 day is a very short period for closing issues.",
      "created_at": "2022-01-12T11:57:49Z",
      "updated_at": "2022-01-12T11:58:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Referencing local files in your .csproj for hosting PowerShell is not supported scenario. You can pick the nuget package with the same version as the powershell you installed, and that will make sure they are in sync.",
      "created_at": "2022-01-12T17:47:56Z",
      "updated_at": "2022-01-12T17:47:56Z"
    },
    {
      "author": "T35R6braPwgDJKq",
      "author_association": "NONE",
      "body": "Well, I made changes to the pwsh code so it is required that my version is taken into consideration. I dont see neither why it should not work?\r\nIs there a way to build the Microsoft.PowerShell.SDK based on my pwsh?",
      "created_at": "2022-01-15T11:54:52Z",
      "updated_at": "2022-01-15T11:54:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "To build nuget packages, use `New-ILNugetPackage` from the `tools/packaging` module. Example:\r\n```\r\nNew-ILNugetPackage -PackagePath <path-to-save-nuget-packages> -PackageVersion <version, ex: 7.2.0-preview.1> -WinFxdBinPath <path-to-publish-folder-of-the-fxdep-build-for-windows> -LinuxFxdBinPath <path-to-publish-folder-of-the-fxdep-build-for-Linux> -GenAPIToolPath <path-to-genapi>\r\n```\r\n1. This command needs to run on Windows. But you need to first build pwsh with `-Runtime fxdependent`.\r\n1. You can get `genAPI` from https://www.nuget.org/packages/Microsoft.DotNet.BuildTools.GenAPI/1.0.0-beta-00081. You will need to unzip the package and copy the `genAPI.exe` and related dlls to `<path-to-genapi>`.\r\n1. Your `PATH` env variable need to contain path to `nuget.exe`.\n\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.buildtools.genapi/1.0.0-beta-00081/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.DotNet.BuildTools.GenAPI/\">Microsoft.DotNet.BuildTools.GenAPI 1.0.0-beta-00081</a></strong></div><div>This package provides build-time support generating reference assembly source.  Referencing this package will cause the build to produce a CS file in the output directory that represents the public surface area of the project.  This package requires .NET Framework 4.6 or later to be installed on your build machine.</div></blockquote>",
      "created_at": "2022-01-18T19:42:13Z",
      "updated_at": "2022-01-18T19:42:15Z"
    },
    {
      "author": "T35R6braPwgDJKq",
      "author_association": "NONE",
      "body": "I will give that a try, but I do not understand why it isnt enough to reference the generated pwsh libs\r\nWhen I use the systems System.Management.Automation.dll it works flawlessly",
      "created_at": "2022-01-19T10:42:11Z",
      "updated_at": "2022-01-19T10:42:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I'm not sure why that's not working, but it's not a supported scenario, so we will not investigate into it.",
      "created_at": "2022-01-19T17:34:53Z",
      "updated_at": "2022-01-19T17:34:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "At least pwsh SMA has additional dependencies vs WinPS SMA.",
      "created_at": "2022-01-19T17:40:57Z",
      "updated_at": "2022-01-19T17:40:57Z"
    }
  ],
  "created_at": "2022-01-04T10:01:08Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 16694,
  "state": "closed",
  "title": "Unhandled exception. System.Management.Automation.Runspaces.PSSnapInException: System error.",
  "updated_at": "2022-01-19T17:40:58Z"
}