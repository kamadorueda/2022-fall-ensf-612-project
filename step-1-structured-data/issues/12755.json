{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12755",
  "author": "sba923",
  "body": "This should speak for itself:\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sTimeFormat).sTimeFormat;  (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sShortDate).sShortDate; Get-Date -DisplayHint Time; Get-Date | ConvertTo-Csv\r\n7.0.1\r\nHH:mm:ss\r\nyyyy-MM-dd\r\n\r\n10:03:10\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 10:03:10\",\"2020-05-22 00:00:00\",\"22\",\"Friday\",\"143\",\"10\",\"Local\",\"179\",\"3\",\"5\",\"10\",\"637257385901795718\",\"10:03:10.1795718\",\"2020\"\r\n\r\n> $PSVersionTable.PSVersion.ToString(); (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sTimeFormat).sTimeFormat;  (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sShortDate).sShortDate; Get-Date -DisplayHint Time; Get-Date | ConvertTo-Csv\r\n7.1.0-preview.3\r\nHH:mm:ss\r\nyyyy-MM-dd\r\n\r\n10:03:37 AM\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 10:03:37 AM\",\"5/22/2020 12:00:00 AM\",\"22\",\"Friday\",\"143\",\"10\",\"Local\",\"61\",\"3\",\"5\",\"37\",\"637257386170614178\",\"10:03:37.0614178\",\"2020\"\r\n\r\n````\r\n\r\n# Steps to reproduce\r\n\r\n- use the standard `en-US` culture\r\n- set the time format to 24-hr `HH:mm:ss` and date format to `yyyy-MM-dd` via Settings\r\n- run `Get-Date | ConvertTo-Csv`\r\n\r\n\r\n# Expected behavior\r\n\r\nTime is formatted using 24-hr format, date using specified `yyyy-MM-dd` format.\r\n\r\n# Actual behavior\r\n\r\nTime is formatted in 12-hr am/pm format, date using `M/dd/yyyy` format\r\n\r\n# Environment data\r\n\r\n```\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-09-10T16:04:05Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is this behaviour new in the latest preview or has it always been this way?",
      "created_at": "2020-05-22T10:07:05Z",
      "updated_at": "2020-05-22T10:07:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I would say it's new in preview 3. Too bad, I've just upgraded my last system, so I don't have any preview 2 system anymore.",
      "created_at": "2020-05-22T10:12:25Z",
      "updated_at": "2020-05-22T10:12:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We'll need to confirm if there was a change at some point or if this is the original behaviour.\n\nAlso, can you confirm if this is affected at all by using the `-UseCulture` parameter explicitly?",
      "created_at": "2020-05-22T11:19:46Z",
      "updated_at": "2020-05-22T11:19:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We use `Datetime.ToLongTimeString()` method for output in the case.\r\nAlso you could look `(Get-Culture).DateTimeFormat`.",
      "created_at": "2020-05-22T11:29:26Z",
      "updated_at": "2020-05-22T11:29:26Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "In 7.0.1:\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); (Get-Culture).DateTimeFormat\r\n7.0.1\r\n\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : -\r\nFirstDayOfWeek                   : Monday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy HH:mm:ss\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : HH:mm:ss\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : yyyy-MM-dd\r\nShortTimePattern                 : HH:mm\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {Su, Mo, Tu, We\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n````\r\n\r\nIn 7.1 preview 3:\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); (Get-Culture).DateTimeFormat\r\n7.1.0-preview.3\r\n\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : /\r\nFirstDayOfWeek                   : Sunday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy h:mm:ss tt\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : h:mm:ss tt\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : M/d/yyyy\r\nShortTimePattern                 : h:mm tt\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {S, M, T, W\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n````\r\n",
      "created_at": "2020-05-22T17:30:15Z",
      "updated_at": "2020-05-22T17:30:15Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> We'll need to confirm if there was a change at some point or if this is the original behaviour.\r\n> \r\n> Also, can you confirm if this is affected at all by using the `-UseCulture` parameter explicitly?\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); Get-Date | ConvertTo-Csv -UseCulture\r\n7.0.1\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 19:33:59\",\"2020-05-22 00:00:00\",\"22\",\"Friday\",\"143\",\"19\",\"Local\",\"174\",\"33\",\"5\",\"59\",\"637257728391742480\",\"19:33:59.1742480\",\"2020\"\r\n\r\n> $PSVersionTable.PSVersion.ToString(); Get-Date | ConvertTo-Csv -UseCulture\r\n7.1.0-preview.3\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 7:34:45 PM\",\"5/22/2020 12:00:00 AM\",\"22\",\"Friday\",\"143\",\"19\",\"Local\",\"63\",\"34\",\"5\",\"45\",\"637257728850632108\",\"19:34:45.0632108\",\"2020\"\r\n\r\n````\r\n",
      "created_at": "2020-05-22T17:35:20Z",
      "updated_at": "2020-05-22T17:35:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks like a regression indeed. @iSazonov do you know if there were any changes merged to this area of code since 7.1-p2? I can't recall any at the moment. \r\n\r\nPerhaps it's a regression or change in .NET Core?",
      "created_at": "2020-05-22T17:43:31Z",
      "updated_at": "2020-05-22T17:47:31Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Here's what I get with preview 2 on the same system:\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sTimeFormat).sTimeFormat;  (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sShortDate).sShortDate; Get-Date -DisplayHint Time; Get-Date | ConvertTo-Csv\r\n7.1.0-preview.2\r\nHH:mm:ss\r\nyyyy-MM-dd\r\n\r\n19:42:05\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 19:42:05\",\"2020-05-22 00:00:00\",\"22\",\"Friday\",\"143\",\"19\",\"Local\",\"14\",\"42\",\"5\",\"5\",\"637257733250149958\",\"19:42:05.0149958\",\"2020\"\r\n\r\n> $PSVersionTable.PSVersion.ToString(); Get-Date | ConvertTo-Csv -UseCulture\r\n7.1.0-preview.2\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Friday, May 22, 2020 19:42:40\",\"2020-05-22 00:00:00\",\"22\",\"Friday\",\"143\",\"19\",\"Local\",\"847\",\"42\",\"5\",\"40\",\"637257733608470239\",\"19:42:40.8470239\",\"2020\"\r\n````\r\n",
      "created_at": "2020-05-22T17:43:33Z",
      "updated_at": "2020-05-22T17:43:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not confirm. After I changed these format strings in registry and restarted PowerShell I get right outputs.",
      "created_at": "2020-05-23T13:57:56Z",
      "updated_at": "2020-05-23T13:57:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What? Where was changing the format strings in the registry mentioned here? \ud83d\ude15 ",
      "created_at": "2020-05-23T14:24:44Z",
      "updated_at": "2020-05-23T14:24:44Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "To get things right I uninstalled preview 3 and installed preview 2\n\n\ud83d\ude1c",
      "created_at": "2020-05-23T14:39:21Z",
      "updated_at": "2020-05-23T14:39:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-27T12:00:16Z",
      "updated_at": "2020-05-27T12:00:16Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I don't understand: there is an issue in preview 3, it has to be fixed!",
      "created_at": "2020-05-27T15:05:30Z",
      "updated_at": "2020-05-27T15:05:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can repo. We need reliable repo steps.\r\nYou could download zip packages, install PowerShell side-by-side, run both version and check result (better on clean system).",
      "created_at": "2020-05-27T17:06:54Z",
      "updated_at": "2020-05-27T17:06:54Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "You mean you **can't repro**?\r\n\r\nI don't have a clean system to test on (could set up a test VM, but would take a significant amount of time).\r\n\r\nI'll test with XCOPY-deployed SxS installations of preview 2 and preview 3.",
      "created_at": "2020-05-27T18:09:18Z",
      "updated_at": "2020-05-27T18:09:18Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Here's the outcome, using these launch scripts:\r\n\r\n````\r\nREM runpwsh.bat\r\ncls\r\nPATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem\r\n.\\pwsh -noprofile -file .\\runtest.ps1\r\n````\r\n\r\n````\r\n# runtest.ps1\r\n$PSVersionTable.PSVersion.ToString()\r\n(Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sTimeFormat).sTimeFormat\r\n(Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sShortDate).sShortDate\r\nGet-Date -DisplayHint Time\r\nGet-Date | ConvertTo-Csv\r\n````\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/83057980-f1599400-a057-11ea-96cd-a332aa618cb8.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/83057899-d4bd5c00-a057-11ea-8f32-27675fdf87a2.png)\r\n\r\n\r\nRepro'ed on two different systems.\r\n",
      "created_at": "2020-05-27T18:27:52Z",
      "updated_at": "2020-05-27T18:27:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is  output:\r\n\r\n[Datetime]::Now.ToLongTimeString()\r\n\r\n$Host\r\n\r\n(Get-Culture).DateTimeFormat",
      "created_at": "2020-05-27T18:45:00Z",
      "updated_at": "2020-05-27T18:47:18Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "On preview 2:\r\n\r\n````\r\nC:\\tmp\\PowerShell-7.1.0-preview.2-win-x64>PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem\r\n\r\nC:\\tmp\\PowerShell-7.1.0-preview.2-win-x64>.\\pwsh -noprofile -file .\\runtest.ps1\r\n7.1.0-preview.2\r\n\r\nName             : ConsoleHost\r\nVersion          : 7.1.0-preview.2\r\nInstanceId       : 91f11a8e-5486-4058-b1e8-9bb93bb9adc9\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\r\nCurrentCulture   : en-US\r\nCurrentUICulture : en-US\r\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : -\r\nFirstDayOfWeek                   : Monday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy HH:mm:ss\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : HH:mm:ss\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : yyyy-MM-dd\r\nShortTimePattern                 : HH:mm\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {Su, Mo, Tu, We\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n\r\n\r\n````\r\n\r\nOn preview 3:\r\n\r\n````\r\nC:\\tmp\\PowerShell-7.1.0-preview.3-win-x64>PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem\r\n\r\nC:\\tmp\\PowerShell-7.1.0-preview.3-win-x64>.\\pwsh -noprofile -file .\\runtest.ps1\r\n7.1.0-preview.3\r\n\r\nName             : ConsoleHost\r\nVersion          : 7.1.0-preview.3\r\nInstanceId       : 9244eab6-c591-4b06-9148-719bc5cba22d\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\r\nCurrentCulture   : en-US\r\nCurrentUICulture : en-US\r\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n\r\nAMDesignator                     : AM\r\nCalendar                         : System.Globalization.GregorianCalendar\r\nDateSeparator                    : /\r\nFirstDayOfWeek                   : Sunday\r\nCalendarWeekRule                 : FirstDay\r\nFullDateTimePattern              : dddd, MMMM d, yyyy h:mm:ss tt\r\nLongDatePattern                  : dddd, MMMM d, yyyy\r\nLongTimePattern                  : h:mm:ss tt\r\nMonthDayPattern                  : MMMM d\r\nPMDesignator                     : PM\r\nRFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\r\nShortDatePattern                 : M/d/yyyy\r\nShortTimePattern                 : h:mm tt\r\nSortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss\r\nTimeSeparator                    : :\r\nUniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'\r\nYearMonthPattern                 : MMMM yyyy\r\nAbbreviatedDayNames              : {Sun, Mon, Tue, Wed\u2026}\r\nShortestDayNames                 : {S, M, T, W\u2026}\r\nDayNames                         : {Sunday, Monday, Tuesday, Wednesday\u2026}\r\nAbbreviatedMonthNames            : {Jan, Feb, Mar, Apr\u2026}\r\nMonthNames                       : {January, February, March, April\u2026}\r\nIsReadOnly                       : True\r\nNativeCalendarName               : Gregorian Calendar\r\nAbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr\u2026}\r\nMonthGenitiveNames               : {January, February, March, April\u2026}\r\n\r\n\r\n````",
      "created_at": "2020-05-27T19:58:56Z",
      "updated_at": "2020-05-27T19:58:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is time you change the datetime format?\r\n\r\nThe PowerShell versions use different .Net 5 Preview - 3 and 4.\r\nYou could download nightly build (it is on .Net 5.0 Preview5) and check again.\r\nIf you will see the issue you could discuss this in .Net Runtime repo.",
      "created_at": "2020-05-28T09:17:52Z",
      "updated_at": "2020-05-28T09:17:52Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sure I understand your question. When did I change the datetime format? That must've been when I installed the systems in the first place, 'cos as a software engineer I prefer 1) the English UI, so I changed the display language to English (my computers came with French Windows) 2) the ISO8601 YYYY-MM-DD date format. So I've probably never run any version of PowerShell with the default en-US date/time formats.\r\n\r\nWhere can I get the nightly builds from?\r\n\r\nWhat is the .NET Core API that's used by PowerShell Core to convert a date/time to string? I need this information if I want to open an issue on .NET 5.0.",
      "created_at": "2020-05-29T07:23:49Z",
      "updated_at": "2020-05-29T07:23:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can download night build from main page of the repository.\r\n\r\nPowerShell uses Datetime.ToLongTimeString() method. All formats you get above with (Get-Culture).DateTimeFormat.",
      "created_at": "2020-05-29T09:31:49Z",
      "updated_at": "2020-05-29T09:31:49Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "On that main page, I can see the status of the nightly builds in CI, but no download links. Am I missing something?\r\n\r\nI'll try creating a C# test program and run it with various previous versions of .NET 5.",
      "created_at": "2020-05-29T10:38:01Z",
      "updated_at": "2020-05-29T10:38:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Press on the status icon and look artifacts under \"Build for Windows\".",
      "created_at": "2020-05-29T10:43:08Z",
      "updated_at": "2020-05-29T10:43:08Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Same repro:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/83258408-8377ae80-a1b6-11ea-8966-69386535fd7e.png)\r\n",
      "created_at": "2020-05-29T12:13:15Z",
      "updated_at": "2020-05-29T12:13:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The code that handles this is here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b1e998046e12ebe5da9dee479f20d479aa2256d7/src/Microsoft.PowerShell.Commands.Utility/commands/utility/CsvCommands.cs#L1045-L1067\r\n\r\nWith this code in mind, can you check what you get back for `(Get-Date).ToString()` and `(Get-Date).PSObject.ToString()`?\r\n\r\nI'm reopening this as it doesn't look like we've gotten to the bottom of it yet. \ud83d\ude42 ",
      "created_at": "2020-05-29T13:13:36Z",
      "updated_at": "2020-05-29T13:13:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "![image](https://user-images.githubusercontent.com/12860484/83279304-36ef9b80-a1d5-11ea-8771-ca0ba62a7685.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/83279318-3eaf4000-a1d5-11ea-8b96-6d519e3b5942.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/83279339-44a52100-a1d5-11ea-89ca-0ec97587b9c9.png)\r\n",
      "created_at": "2020-05-29T15:53:29Z",
      "updated_at": "2020-05-29T15:53:29Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "What's the easy way to create a C# program that invokes that `.ToString()` method **and run it under various previews of .NET 5**?",
      "created_at": "2020-05-29T15:56:42Z",
      "updated_at": "2020-05-29T15:56:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14  OK, that _definitely_ looks like a regression in .NET 5 then, nice find. \r\n\r\nDunno if there's an easy way, but you can specify which preview to run against with usually a `global.json` in the project folder; you can see an example in the `global.json` in this repo. \ud83d\ude42 \r\n\r\nIf you can figure out which preview broke the ToString() behaviour, definitely worth opening up an issue on the [dotnet/runtime](/dotnet/runtime) repository so we can get that fixed.",
      "created_at": "2020-05-29T18:15:48Z",
      "updated_at": "2020-05-29T18:16:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You will save time if you discuss with .Net Runtime experts.",
      "created_at": "2020-05-31T05:16:43Z",
      "updated_at": "2020-05-31T05:16:43Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "That's what I want to do next... once I have found how to deploy the last 3 previews of .NET 5 side-by-side to run the C# test program against. I presume there are XCOPY-deployable zipfiles of those previews somewhere...",
      "created_at": "2020-05-31T14:28:31Z",
      "updated_at": "2020-05-31T14:28:31Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Can someone help me find those .NET bits (at least the versions used by PS7.1 preview 2 and preview 3)?",
      "created_at": "2020-06-07T08:35:36Z",
      "updated_at": "2020-06-07T08:35:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe I'll just wait until preview 4, based on .NET 5 Preview 5, comes out, and test again there...",
      "created_at": "2020-06-14T13:32:01Z",
      "updated_at": "2020-06-14T13:32:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can download nightly build - it is on .Net 5 Preview 5 already.",
      "created_at": "2020-06-14T19:30:12Z",
      "updated_at": "2020-06-14T19:30:12Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Good news!\r\n\r\nBut... when I reach [https://powershell.visualstudio.com/PowerShell/_build/results?buildId=55455&view=artifacts&type=publishedArtifacts](https://powershell.visualstudio.com/PowerShell/_build/results?buildId=55455&view=artifacts&type=publishedArtifacts) I get:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/84602859-85b25c00-ae8a-11ea-951e-dfd50817c0be.png)\r\n\r\nand clicking `artifacts` doesn't do anything. What am I doing wrong?\r\n\r\nSorry for sounding dumb, I'm definitely a GH CI rookie...",
      "created_at": "2020-06-14T20:03:32Z",
      "updated_at": "2020-06-14T20:03:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can load nightly build from main page https://github.com/PowerShell/PowerShell#build-status-of-nightly-builds\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-06-15T04:32:27Z",
      "updated_at": "2020-06-15T04:32:29Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "That's exactly what I've been trying to do, see \r\n[Can't download PS nightly build.zip](https://github.com/PowerShell/PowerShell/files/4778139/Can.t.download.PS.nightly.build.zip)\r\n",
      "created_at": "2020-06-15T05:21:10Z",
      "updated_at": "2020-06-15T05:21:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Try \"Artifacts\" - button on the right.\r\n",
      "created_at": "2020-06-15T07:05:30Z",
      "updated_at": "2020-06-15T07:13:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "What \"Artifacts\" button on the right? Please refer to my PSR slideshow, or make a screenshot on your own.\r\n\r\nI presume you wanted a ProcMon log of me reproducing the problem? Here it is, with preview 3.\r\n\r\n[runpwsh.bat.procmon.202006150911.PML.zip](https://github.com/PowerShell/PowerShell/files/4778584/runpwsh.bat.procmon.202006150911.PML.zip)\r\n",
      "created_at": "2020-06-15T07:13:01Z",
      "updated_at": "2020-06-15T07:13:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 I still suggest to open new issue in .Net Runtime.",
      "created_at": "2020-06-15T07:49:00Z",
      "updated_at": "2020-06-15T07:49:00Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "That's what I've been aiming at for some time now, but I can't unless I can post a repro. For this, I need to know how to get a side-by-side deployment of different previews of .NET 5, and then write a C# program I would run against each of those .NET previews. I haven't been able to find out how to download and deploy those previews. Yet...",
      "created_at": "2020-06-15T08:29:13Z",
      "updated_at": "2020-06-15T08:29:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Download link https://dotnet.microsoft.com/download/dotnet/5.0?utm_source=dotnet-website&utm_medium=banner&utm_campaign=preview5-banner\r\nYou can use install scripts from the link.\r\n",
      "created_at": "2020-06-15T08:58:05Z",
      "updated_at": "2020-06-15T08:58:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the hint.\r\n\r\nBut before I do this I'd like to test with a .NET 5 Preview 5-based build of PowerShell... ;-)",
      "created_at": "2020-06-15T09:23:12Z",
      "updated_at": "2020-06-15T09:23:12Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is it ;-)\r\n\r\n````\r\nusing System;\r\n\r\nnamespace DateTimeToString\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string dotnetversion = System.Environment.Version.ToString();\r\n            Console.WriteLine(\"dotnet version: {0}\", dotnetversion);\r\n            var now = System.DateTime.Now;\r\n            string str = now.ToString();\r\n            Console.WriteLine(\"DateTime.Now.ToString(): {0}\", str);\r\n        }\r\n    }\r\n}\r\n````\r\n\r\n````\r\ngci -dir 'dotnet5p*' | % {\r\n        $dotnetdir = $_.FullName\r\n        \"Testing in: \" + $dotnetdir\r\n        & ($dotnetdir + '\\dotnet') --info | sls -raw 'Version:.*preview'\r\n        & ($dotnetdir + '\\dotnet') ($dotnetdir + '\\DateTimeToString.dll')\r\n}\r\n````\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/84645937-a79af580-af01-11ea-85cc-f43471a39b3a.png)\r\n\r\n\r\n",
      "created_at": "2020-06-15T10:15:05Z",
      "updated_at": "2020-06-15T10:15:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Opened https://github.com/dotnet/runtime/issues/37897\r\n",
      "created_at": "2020-06-15T11:36:12Z",
      "updated_at": "2020-06-15T11:36:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In procmon log I see an access to ICU - I guess the issue could be related to the fact.",
      "created_at": "2020-06-15T13:32:22Z",
      "updated_at": "2020-06-15T13:32:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems .Net has an option to opt out ICU. You could try and see a result.",
      "created_at": "2020-06-15T13:35:07Z",
      "updated_at": "2020-06-15T13:35:07Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Here's what I get with `\"System.Globalization.Invariant\": true` if this is what you were referring to:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/84669241-ef7f4400-af24-11ea-8488-42a6765efb2d.png)\r\n\r\nFormatting is incorrect whatever the .NET 5 preview version.",
      "created_at": "2020-06-15T14:26:56Z",
      "updated_at": "2020-06-15T14:26:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No, there is an option to switch back from ICU to Windows traditional API.",
      "created_at": "2020-06-15T14:44:35Z",
      "updated_at": "2020-06-15T14:44:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See https://docs.microsoft.com/en-us/dotnet/core/run-time-config/globalization#nls\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/core/run-time-config/globalization\">Globalization config settings - .NET Core</a></strong></div><div>Learn about run-time settings that configure globalization aspects of a .NET Core app, for example, how it parses Japanese dates.</div></blockquote>",
      "created_at": "2020-06-15T15:04:14Z",
      "updated_at": "2020-06-15T15:04:17Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Will test... The change to use ICU was introduced in .NET 5 preview 4...",
      "created_at": "2020-06-15T16:16:37Z",
      "updated_at": "2020-06-15T16:16:37Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Bingo!\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/84692202-c7eca380-af45-11ea-8ab2-f9a956b3c35b.png)\r\n\r\nThe .NET folks marked my issue as a duplicate of https://github.com/dotnet/runtime/issues/37121, where @safern claims this was fixed for .NET 5 Preview 5--not what I see...\r\n\r\nAm I correct to assume that you will not want to use NLS in PowerShell? IMVHO this would be a potential cause for PowerShell behaving differently on Windows and on other platforms.",
      "created_at": "2020-06-15T18:28:41Z",
      "updated_at": "2020-06-15T18:28:41Z"
    },
    {
      "author": "safern",
      "author_association": "NONE",
      "body": "> The .NET folks marked my issue as a duplicate of dotnet/runtime#37121, where @safern claims this was fixed for .NET 5 Preview 5--not what I see...\r\n\r\nThat claim from my side was initially wrong as I thought https://github.com/dotnet/runtime/issues/37121 was a dupe of https://github.com/dotnet/runtime/issues/35638 which was fixed in Preview5. I expect to have a fix for https://github.com/dotnet/runtime/issues/37121 this week and hopefully will be able to port it to Preview6 on time. ",
      "created_at": "2020-06-15T18:35:16Z",
      "updated_at": "2020-06-15T18:35:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Am I correct to assume that you will not want to use NLS in PowerShell?\r\n\r\nPowerShell follows .Net (and OS) improvements. It would be amazing for users to discover that PowerShell works differently than other .Net and native OS applications.",
      "created_at": "2020-06-15T18:49:54Z",
      "updated_at": "2020-06-15T18:49:54Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I'm not sure I know how to interpret your answer. Are you (on behalf of the PowerShell team) in favor of aligning PowerShell on Windows with all other Windows applications (in which case NLS is the norm), or of aligning PowerShell on Windows with PowerShell on other platforms (in which case ICU's behavior will rule)?",
      "created_at": "2020-06-16T06:27:07Z",
      "updated_at": "2020-06-16T06:27:07Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "For now, I might go for setting `DOTNET_SYSTEM_GLOBALIZATION_USENLS=true` in my global environment so that I get the expected behavior when running PowerShell 7.1 preview 3. Or I'll stick to using PowerShell 7.0.2 for any affected workloads.",
      "created_at": "2020-06-16T06:30:17Z",
      "updated_at": "2020-06-16T06:30:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 Since NLS and ICU have differences it can be a problem - one .Net application can work differently on different OS-es. MSFT has started to migrate to ICU. It was added in latest Window versions and .Net 5.0 uses ICU by default. \r\nPowerShell 7.1 gets the enhancement automatically. The same is true for all .Net 5+ applications.",
      "created_at": "2020-06-16T10:28:46Z",
      "updated_at": "2020-06-16T10:28:46Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "So you'll go for PS7.1 using ICU, and assuming this is backwards compatible e.g. abides by the user's settings, correct? ",
      "created_at": "2020-06-16T11:13:37Z",
      "updated_at": "2020-06-16T11:13:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 7.1 will be on .Net 5.0. If the .Net will use ICU by default PowerShell will do the same.",
      "created_at": "2020-06-16T15:54:38Z",
      "updated_at": "2020-06-16T15:54:38Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Should be OK, provided this does not introduce severe breaking changes. ",
      "created_at": "2020-06-16T20:30:01Z",
      "updated_at": "2020-06-16T20:30:01Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Expectedly, the issue is still present in 7.1 preview 4...",
      "created_at": "2020-06-25T20:25:08Z",
      "updated_at": "2020-06-25T20:25:08Z"
    },
    {
      "author": "safern",
      "author_association": "NONE",
      "body": "To give an update I have a PR out for the fix: https://github.com/dotnet/runtime/pull/38372",
      "created_at": "2020-06-25T20:40:09Z",
      "updated_at": "2020-06-25T20:40:09Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> To give an update I have a PR out for the fix: [dotnet/runtime#38372](https://github.com/dotnet/runtime/pull/38372)\r\n\r\nGood! See my comment there about taking user changes into account on the fly. Does this need a code change on the PowerShell side of things?",
      "created_at": "2020-06-26T05:57:57Z",
      "updated_at": "2020-06-26T08:52:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If PowerShell 7.0 version sees the time (culture) changes immediately, then we get a breaking change.\r\n",
      "created_at": "2020-06-26T11:37:59Z",
      "updated_at": "2020-06-26T11:37:59Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> If PowerShell 7.0 version sees the time (culture) changes immediately, then we get a breaking change.\r\n\r\nHow do you mean? That 7.1 should behave the same as 7.0? I don't know what 7.0's behavior is, but I _would expect_ that it takes user changes into account dynamically.",
      "created_at": "2020-06-26T12:12:39Z",
      "updated_at": "2020-06-26T12:12:39Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "PS C:\\src\\t> ($PSVersionTable.PSVersion).ToString(),(Get-Culture).DateTimeFormat.ShortDatePattern\r\n7.1.0-preview.3\r\nM/d/yyyy\r\n\r\nPS C:\\src\\t> ($PSVersionTable.PSVersion).ToString(),(Get-Culture).DateTimeFormat.ShortDatePattern\r\n7.0.1\r\nyyyy-MM-dd",
      "created_at": "2020-06-30T01:43:18Z",
      "updated_at": "2020-06-30T01:43:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".Net fix was merged. We get it soon. (.Net 5.0 Preview8)",
      "created_at": "2020-07-03T04:02:32Z",
      "updated_at": "2020-07-03T04:48:18Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> .Net fix was merged. We get it soon. (.Net 5.0 Preview8)\r\n\r\nWhat's the plan for testing? How difficult is it to make a private build of PS7.1 with that .NET fix in so that we can test for side effects / regressions ?",
      "created_at": "2020-07-04T06:55:12Z",
      "updated_at": "2020-07-04T06:55:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 You could build .Net locally and test. But it is not worth the effort. We can wait about a month.\r\n",
      "created_at": "2020-07-04T15:58:35Z",
      "updated_at": "2020-07-04T15:58:35Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Still waiting for .NET Preview 8 to be released...",
      "created_at": "2020-08-20T11:52:22Z",
      "updated_at": "2020-08-20T11:52:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "PowerShell 7.1.0-preview.7 ships with .NET Preview 8, which should address this issue. Let us know if it hasn't.",
      "created_at": "2020-09-10T16:04:05Z",
      "updated_at": "2020-09-10T16:04:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I concur \ud83d\ude1c\r\n\r\n````\r\n> $PSVersionTable.PSVersion.ToString(); (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sTimeFormat).sTimeFormat;  (Get-ItemProperty 'HKCU:\\Control Panel\\International' -name sShortDate).sShortDate; Get-Date -DisplayHint Time; Get-Date | ConvertTo-Csv\r\n7.1.0-preview.7\r\nHH:mm:ss\r\nyyyy-MM-dd\r\n\r\n18:08:34\r\n\"DisplayHint\",\"DateTime\",\"Date\",\"Day\",\"DayOfWeek\",\"DayOfYear\",\"Hour\",\"Kind\",\"Millisecond\",\"Minute\",\"Month\",\"Second\",\"Ticks\",\"TimeOfDay\",\"Year\"\r\n\"DateTime\",\"Thursday, September 10, 2020 18:08:35\",\"2020-09-10 00:00:00\",\"10\",\"Thursday\",\"254\",\"18\",\"Local\",\"25\",\"8\",\"9\",\"35\",\"637353581150253074\",\"18:08:35.0253074\",\"2020\"\r\n````\r\n",
      "created_at": "2020-09-10T16:09:14Z",
      "updated_at": "2020-09-10T16:09:14Z"
    }
  ],
  "created_at": "2020-05-22T08:06:54Z",
  "number": 12755,
  "state": "closed",
  "title": "PowerShell 7.1 preview 3 doesn't use configured date/time format",
  "updated_at": "2020-09-10T18:06:07Z"
}