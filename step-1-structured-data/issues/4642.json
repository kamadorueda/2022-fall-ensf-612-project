{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4642",
  "author": "mklement0",
  "body": "`Get-Location -Stack` currently outputs a `[System.Management.Automation.PathInfoStack]` stack object rather than an array of  `[System.Management.Automation.PathInfo]` instances representing the individual locations in the stack.\r\n\r\nWhile this is behavior is documented, and changing it would technically be a breaking change, it should be considered for two reasons:\r\n\r\n* Outputting a custom stack object rather than an array of locations is of little benefit, given that location stacks are meant to be managed via the `*-Location` cmdlets.\r\n\r\n  * Stack management support in these cmdlets currently lacks options for deleting / clearing a stack, but that is a separate issue - see #4643.\r\n\r\n  * As an aside: While calling the `.Clear()` _method_ on the stack object may seem like a workaround for the current inability to clear a stack using cmdlets, it doesn't actually work (only clears the object returned, not the actual stack).\r\n\r\n* Outputting a custom stack object rather than an array of locations contravenes the expectation that a regular PowerShell array is output that can be indexed into, which doesn't work as intended with the stack object  (`.ToArray()[0]` must be used, for instance).\r\n\r\n   * The current default output certainly _looks_ like a _collection_ (array) of `[System.Management.Automation.PathInfo]` instances.\r\n\r\n\r\nCurrent behavior\r\n------------------\r\n\r\n```powershell\r\n# Try to obtain the 2nd location from the bottom of the stack, which is \"/\"\r\n> Push-Location /; Push-Location $HOME; (Get-Location -Stack)[-2]\r\n# !! No output\r\n```\r\n\r\nBecause `Get-Location -Stack` returns a _scalar_ - the stack object - indexing into the scalar with `[-2]` makes PowerShell return `$null`.\r\n\r\nTo make this work currently, `.ToArray()` must be used:\r\n\r\n```powershell\r\n# Note the awkward .ToArray()\r\n> Push-Location /; Push-Location $HOME; (Get-Location -Stack).ToArray()[-2]\r\n\r\nPath\r\n----\r\n/   \r\n\r\n```\r\n\r\n\r\nDesired behavior\r\n-----------------\r\n\r\nIf a regular array is returned, indexing will work as expected.\r\n\r\n```none\r\n> Push-Location /; Push-Location $HOME; (Get-Location -Stack)[-2]\r\n\r\nPath\r\n----\r\n/   \r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "To avoid a breaking change, I wonder if adding a `-StackAsArray` (or variant) may be viable?",
      "created_at": "2017-09-23T18:48:04Z",
      "updated_at": "2017-09-23T18:48:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I haven't done any research, but I'd be surprised if anyone relies on the existing behavior, given that the fact that a special collection object is returned is neither obvious nor useful.\r\n\r\nSomeone who did run into the inability to index with, say, ` (Get-Location -Stack)[-1]` probably worked around that with `(Get-Location -Stack) | Select-Object -Last 1` (note the parentheses), which will continue to work if the proposed change is made.\r\n\r\nWorkaround `(Get-Location -Stack).ToArray()[-1]`, however, will cease to work, because `.ToArray()` is invariably applied to each _element_ of an array.\r\n\r\n",
      "created_at": "2017-09-23T22:30:19Z",
      "updated_at": "2017-09-24T03:07:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "A [quick search on GitHub](https://github.com/search?l=PowerShell&p=2&q=get-location+-stack&type=Code&utf8=%E2%9C%93) says some people will be broken as they are using `.ToArray()` but the majority of uses is simply to get the count and that should continue to work.",
      "created_at": "2017-09-23T23:22:19Z",
      "updated_at": "2017-09-23T23:22:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we add ` ToArray()` in PathInfo[] by ETS?",
      "created_at": "2017-09-25T11:04:24Z",
      "updated_at": "2017-09-25T11:04:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nGreat idea; we could do the C# equivalent of the following:\r\n\r\n```powershell\r\n# Sample location-stack array.\r\n# I suggest using a regular [object[]] array, as usual.\r\n$a = 'one', 'two'\r\n\r\n# Insert helper type name.\r\n$a.pstypenames.insert(0, 'LocationStack')\r\n\r\n# Add a .ToArray() method to the helper type, unless already defined.\r\nif (-not $a.psobject.methods['ToArray']) {\r\n  Update-TypeData -TypeName LocationStack -MemberType ScriptMethod -MemberName ToArray -Value { $this  }\r\n}\r\n```\r\n\r\nWe could use the same technique for adding a `.Name` property, which the current stack objects have.",
      "created_at": "2017-09-25T13:25:11Z",
      "updated_at": "2017-09-25T13:25:11Z"
    },
    {
      "author": "AlanMcBee",
      "author_association": "NONE",
      "body": "I would like to do this, and maybe a couple of other things related to location stacks (as separate issues). Mind if I go at it? This will be my first contrib for this repo, but I'm reading the guideline and I think I can do this. I'm asking @PowerShellTeam (@powershell/powershell) for an assignment.",
      "created_at": "2019-11-26T05:36:11Z",
      "updated_at": "2019-11-26T05:52:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AlanMcBee Welcome to pull the fix! \r\nGithub doesn't allow to explicitly assign you but the issue is now yours.",
      "created_at": "2019-11-26T06:55:03Z",
      "updated_at": "2019-11-26T06:55:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that the problem here is that the indexer for `System.Management.Automation.PathInfoStack` is broken and if that was fixed then this issue would be resolved.  This is likely a bucket 3 breaking change.\r\n\r\n```powershell\r\nPS> $s = (get-location -stack)\r\nPS> $s\r\n\r\nPath\r\n----\r\n/\r\n/Users/steve/test\r\n/Users/steve\r\n```\r\n\r\nExpected this test to pass:\r\n```powershell\r\n$s[1] | Should -BeExactly $s.ToArray()[1]\r\nInvalidResult:\r\nLine |\r\n   1 | $s[1] | Should -BeExactly $s.ToArray()[1]\r\n     | Expected exactly /Users/steve/test, but got $null.\r\n```\r\n\r\nWhere `$s[1]` should return the value `/Users/steve/test`",
      "created_at": "2021-06-08T20:17:04Z",
      "updated_at": "2021-06-08T20:19:42Z"
    }
  ],
  "created_at": "2017-08-22T17:13:22Z",
  "number": 4642,
  "state": "open",
  "title": "Fix indexer for System.Management.Automation.PathInfoStack type",
  "updated_at": "2021-06-08T20:20:26Z"
}