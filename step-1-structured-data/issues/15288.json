{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15288",
  "author": "abhiphirke",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nI have a requirement to develop Windows Forms (desktop) application in .Net5. This application is expected to run multiple different PowerShell scripts as may be required in a particular run. I am required to support PowerShell version 5.1 and/or 7.1. When I try to use the System.Management.Automation.PowerShell class, in test application, to begin with.\r\n\r\n## Expected behavior\r\n\r\nI am confused if this is problem of Windows Form application or .Net version or PowerShell version.\r\n\r\nI am not able to understand what the issue is and how can I make it work.\r\n\r\nAlso, if different scripts that I am supposed to run target different PowerShell versions (one of 5.1 or 7.1), how can I control it from the same application?\r\n\r\nAny reference material or hints or any help will be of much value since I am stuck on this.\r\n\r\n## Actual behavior\r\n\r\nIn my simple test application, .Net5 Windows Forms Application, I am receiving following error. \r\n\r\n![image](https://user-images.githubusercontent.com/8724807/115531177-1aa79200-a2b2-11eb-8624-be6c79fcbbe0.png)\r\n\r\nIf I try the same in .Net Framework 4.7.2, it works!\r\n\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nI have PowerShell 5.1 and  7.1.3 are installed on my machine.\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.610\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.610\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2021-05-21T00:00:14Z",
  "comments": [
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@abhiphirke You need to add `https://www.nuget.org/packages/Microsoft.PowerShell.SDK/` so your project will use NET5-release of System.Management.Automation.PowerShell.",
      "created_at": "2021-04-21T12:32:32Z",
      "updated_at": "2021-04-21T12:32:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could read great post from @rjmholt  https://devblogs.microsoft.com/powershell/depending-on-the-right-powershell-nuget-package-in-your-net-project/\r\n\r\nAs meta note, currently MSFT released preview version of MAUI https://devblogs.microsoft.com/dotnet/announcing-net-multi-platform-app-ui-preview-3/ and if you are starting new project for many years maybe you should look this way, but no one has gone this way yet.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell Team</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/depending-on-the-right-powershell-nuget-package-in-your-net-project/\">Depending on the right PowerShell NuGet package in your .NET project | PowerShell Team</a></strong></div><div>Alongside the pwsh executable packages published with each PowerShell release, the PowerShell team also maintain several NuGet packages that are available on NuGet to allow targeting PowerShell as an API platform in .NET. As a .NET application that both provides APIs and expects to load .NET libraries implementing its own (binary modules),</div></blockquote>\n<blockquote><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/04/maui-winui.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\" height=\"14\"> .NET Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-multi-platform-app-ui-preview-3/\">Announcing .NET Multi-platform App UI Preview 3 | .NET Blog</a></strong></div><div>Announcing .NET Multi-platform App UI updates in .NET 6 Preview 3, which includes the latest progress for mobile and desktop development.</div></blockquote>",
      "created_at": "2021-04-22T13:40:24Z",
      "updated_at": "2021-04-22T13:40:26Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Impossible to know for sure from your screenshot (we'd need the full error and stack trace), but I strongly suspect you are compiling for one .NET platform and trying to run on another, which won't work.\r\n\r\nYour starting point has a fundamental issue in it, which is that you have an application (i.e. a standalone executable) that needs to work with two different PowerShells. An application can only target one framework (if you target multiple, you will have multiple executables created in your publish step), but different PowerShells run different .NET frameworks. PowerShell is itself an executable, but that executable just wraps a set of assemblies that you can reuse via something like the SDK or the reference assemblies.\r\n\r\nSo the question essentially is: what are your base requirements? That will determine whether you need to build:\r\n\r\n- Two different applications (the same code with two `TargetFrameworks`), one targeting .NET 4.8 and one targeting .NET Core 3.1, that each load PS 5.1 and PS 7 respectively\r\n- A single application written in whatever you like that uses a serialisation layer to talk to its PowerShell of choice out of process\r\n- A PowerShell module targeting .NET Standard and PowerShell standard that can be loaded by both PS 5.1 and PS 7, and a script that starts the relevant PowerShell, loads your module, and runs your \"application\" from that (this is what PowerShell Editor Services does)",
      "created_at": "2021-04-22T15:58:37Z",
      "updated_at": "2021-04-22T15:58:37Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-05-21T00:00:14Z",
      "updated_at": "2021-05-21T00:00:14Z"
    },
    {
      "author": "abhiphirke",
      "author_association": "NONE",
      "body": "Thank you for all the help!",
      "created_at": "2021-06-02T09:58:44Z",
      "updated_at": "2021-06-02T09:58:44Z"
    }
  ],
  "created_at": "2021-04-21T09:40:52Z",
  "number": 15288,
  "state": "closed",
  "title": "Running scripts targeting 5.1 or 7.1 from .Net5 Windows Forms Application",
  "updated_at": "2021-06-02T09:58:44Z"
}