{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5578",
  "author": "alx9r",
  "body": "Consider the following code:\r\n\r\n```PowerShell\r\nfunction AssertSomething {\r\n    param (\r\n        [parameter(ValueFromPipeline)]\r\n        $InputObject\r\n    )\r\n    process\r\n    {\r\n        # Is there a robust way to distinguish between these\r\n        # two cases:\r\n        #  1.  $InputObject is the only element emitted by\r\n        #      the enumerator of the object piped to the function\r\n        #      at the call site.\r\n        #      \r\n        #  2.  $InputObject is the object piped to the function\r\n        #      at the call site.\r\n    }\r\n}\r\n\r\n# For example, \r\n@(1) | AssertSomething # I would like this call to throw\r\n1 | AssertSomething # and this call to succeed.\r\n```\r\n\r\nIs there a way to robustly distinguish between the two call sites on the basis of whether the object piped to `AssertSomething` was enumerated?\r\n\r\n### Background\r\n\r\nI've been experimenting with improved assertion commands for use with Pester to validate return values.  Wherever a return value encounters `|` on its way to the command there is a potential for PowerShell to enumerate and pass the object contents rather than pass the object itself.  Here is an example:\r\n\r\n```PowerShell\r\nfunction AssertProperty {\r\n    param (\r\n        [Parameter(Position = 1)] $PropertyName,\r\n        [Parameter(Position = 2)] $eq,\r\n        [Parameter(ValueFromPipeline)] $InputObject\r\n    )\r\n    process\r\n    {\r\n        if ( $InputObject.$PropertyName -eq $eq ) \r\n        {\r\n            return\r\n        }\r\n        throw \"Property $PropertyName was $($InputObject.$PropertyName).\"\r\n    }\r\n}\r\n\r\nfunction SomeUserFunction {\r\n    ,@([pscustomobject]@{Count=2})\r\n}\r\n\r\nDescribe SomeUserFunction {\r\n    It 'returns an object whose Count property is 2' {\r\n        $r = SomeUserFunction\r\n        $r | AssertProperty Count 2\r\n    }\r\n}\r\n```\r\n\r\nThis test passes even though `$r.Count` is 1.  The cause of the false negative is obvious in this contrived example.  In real tests, however, I've found this situation to be much less obvious and much more pernicious.\r\n\r\nI've experimented with a few different promising strategies for compensating for this situation, but so far all of them involve somewhat unnatural PowerShell. ( eg. `AssertProperty $r Count 2` or `subject $r | AssertProperty Count 2`).  The ability to detect when the object piped to `AssertProperty` was enumerated would open up some other strategies.",
  "closed_at": "2017-11-30T00:53:56Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think you can do it _implicitly_ via the pipeline, but here are 2 options:\r\n\r\n* Use the `-InputObject` parameter directly, in which case no enumeration happens:\r\n\r\n```powershell\r\nAssertProperty -InputObject $r Count 2\r\n```\r\n\r\n* Use `Write-Output -NoEnumerate` to prevent enumeration:\r\n\r\n```powershell\r\nWrite-Output -NoEnumerate $r | AssertProperty Count 2\r\n```\r\n",
      "created_at": "2017-11-29T18:55:03Z",
      "updated_at": "2017-11-29T18:55:03Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "I see.  Those two options _avert_ enumeration.  I was really hoping to _detect_ enumeration.",
      "created_at": "2017-11-29T19:22:20Z",
      "updated_at": "2017-11-29T19:22:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood; I personally don't know how to do that, but perhaps someone else does.",
      "created_at": "2017-11-29T20:01:58Z",
      "updated_at": "2017-11-29T20:01:58Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Without private reflection, I'm not sure it's possible.\r\n\r\nI think [this](https://github.com/PowerShell/PowerShell/blob/4bc52d2358222084738157a08907fac32d13bd3a/src/System.Management.Automation/engine/pipeline.cs#L1140) is the decision point, so maybe with some private reflection on `firstcommandProcessor.CommandRuntime.InputPipe`, you can do something.",
      "created_at": "2017-11-29T20:28:06Z",
      "updated_at": "2017-11-29T20:28:06Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Thanks @lzybkr.  That seems promising enough for to prove the concept, but I'm not sure I'd be able to get comfortable relying on private reflection for production.\r\n\r\nI think the enumeration could also be inferred if I had a reference to the object that may or may not have been enumerated.  Is there a public way to get a reference to the `input` `object` that appears [here](https://github.com/PowerShell/PowerShell/blob/4bc52d2358222084738157a08907fac32d13bd3a/src/System.Management.Automation/engine/pipeline.cs#L1125)?",
      "created_at": "2017-11-30T00:44:02Z",
      "updated_at": "2017-11-30T00:44:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I don't think there is even a non-public way, it's a parameter (so it's on the stack) and I'm not aware of a reason for it to be stored elsewhere.",
      "created_at": "2017-11-30T00:50:01Z",
      "updated_at": "2017-11-30T00:50:01Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Ok.  Thanks for your help.  I think I'll try first for a solution that doesn't rely on detecting enumeration.",
      "created_at": "2017-11-30T00:53:55Z",
      "updated_at": "2017-11-30T00:53:55Z"
    }
  ],
  "created_at": "2017-11-29T18:17:44Z",
  "number": 5578,
  "state": "closed",
  "title": "Is there a way to robustly detect that an input object was output by an object's enumerator?",
  "updated_at": "2017-12-01T11:27:11Z"
}