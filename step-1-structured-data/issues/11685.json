{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11685",
  "author": "E3V3A",
  "body": "I've been using PWSH 6.1.1 since introduced and that shell has been working great, mostly.\r\nDecided to give the  `7.0.0-rc.2` a run... \r\n* Good News:  start up is 25% faster\r\n* Bad news:  Lots of escape character garbage on command line, appearing as soon as you type anything. (In particular the **`[104m`**.)\r\n\r\n# Steps to reproduce\r\n```powershell\r\n# type a \"$\" (the first one is part of the prompt)\r\n$ $\u2b1c[104m\r\n```\r\n(I had to manually paste a box character above, since it didn't show in the github markup.)\r\n\r\n```none\r\n----------------------------------------------------------\r\n  PowerShell Version    : 7.0.0-rc.2\r\n  OS Name               : Microsoft Windows 8.1 (64-bit)\r\n  OS Version            : 6.3.9600  [2014-08-16 00:50:01]\r\n  OS BuildLabEx         : 9600.19538\r\n  OS HAL                : 6.3.9600.18969\r\n  OS Kernel             : 6.3.9600.18217\r\n  OS UBR                : 19599\r\n  -------------------------------------------------------\r\n  on Host               : xxxx\r\n  as User               : xxxx\r\n  with Privilege        : Administrator\r\n  -------------------------------------------------------\r\n  ExecutionPolicy :\r\n        MachinePolicy   : Undefined\r\n        UserPolicy      : Undefined\r\n        Process         : Undefined\r\n        CurrentUser     : Bypass\r\n        LocalMachine    : RemoteSigned\r\n\r\n  Console Settings:\r\n      Type              : ConsoleHost\r\n      OutputEncoding    : Unicode (UTF-8)\r\n      Color Capability  : 151\r\n      Registry VT Level : 1\r\n      CodePage (input)  : 437\r\n      CodePage (output) : 437\r\n      Mode (input)      : 0x1f7\r\n      Mode (output)     :\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\nPossibly related issues:\r\n* #9491\r\n* #9420\r\n* #7570\r\n* #2381\r\n* https://www.twitch.tv/videos/424738436?t=00h05m36s\r\n\r\n",
  "closed_at": "2020-05-27T01:00:10Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you repo without PSReadline? What font do you use (can change)?",
      "created_at": "2020-01-27T09:37:12Z",
      "updated_at": "2020-01-27T09:37:12Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "@iSazonov \r\n> Can you repo without PSReadline?\r\n\r\nI don't understand. What do you want me to do?\r\n\r\nI tried all fonts and also just tried this in the latest 7.1.1 and it's still the same issue. \r\n\r\n```\r\npowershell -NoProfile -c \"'?[104mWHOOT ?[m'.Replace('?', [char]27);\"\r\n```",
      "created_at": "2020-04-29T22:40:52Z",
      "updated_at": "2020-04-29T23:17:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't understand. What do you want me to do?\r\n\r\nRun pwsh.exe, remove PSReadline module `Remove-Module PSReadline` and try repo.\r\n\r\n> powershell -NoProfile\r\n\r\nIt is not PowerShell 7 - you run Windows PowerShell.\r\n",
      "created_at": "2020-04-30T03:29:29Z",
      "updated_at": "2020-04-30T03:29:29Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\n> It is not PowerShell 7 \r\n\r\nIt was just for example to try to print colored output, works even in Cygwin. Replace with whatever term you want to test in.\r\n\r\n... however\r\n\r\nSome limited success:\r\n* `Remove-Module PSReadline`: escape character **garbage disappear** but removes CLI command completion & highlights.\r\n* `Install-Module PSReadLine`: 'escape garbage is still gone, but while CLI completion works, cmd highlight disabled.\r\n* `Import-Module -Name PSReadLine`: garbage is back!\r\n\r\n---\r\n\r\nBasically, no ANSI coloring seem to work:\r\n```\r\npwsh -NoProfile -c \"'?[1;31mRed ?[32mGrn ?[33mYel ?[35mMag ?[36mCya ?[m'.Replace('?', [char]27);\"\r\n\r\n# \u2190[1;31mRed \u2190[32mGrn \u2190[33mYel \u2190[35mMag \u2190[36mCya \u2190[m\r\n```\r\nBut instead of checking if available and returning nothing when it isn't, it actually tries to return the ANSI codes, assuming it should work. \r\n\r\nInterestingly that particular code `104m` is for a [bright-blue background](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) with RGB `[59,120,255]`. \r\n\r\nAlso see: \r\n* https://stackoverflow.com/questions/44047988/windows-10-console-colors-not-working-virtual-terminal-control-character-sequen\r\n* https://4sysops.com/wiki/change-powershell-console-syntax-highlighting-colors-of-psreadline/\r\n* `(Get-ItemProperty -path \"HKCU:\\Console\" -name ScreenColors).ScreenColors`\r\n* `[System.ConsoleColor].GetEnumValues() | ForEach-Object { Write-Host $_ -ForegroundColor $_ }`\r\n* https://www.powershellgallery.com/packages/PSReadLine/2.0.0-beta1/Content/Changes.txt\r\n* [ColorTool](https://github.com/microsoft/terminal/releases/tag/1904.29002)\r\n\r\nand:\r\n```powershell\r\nInstall-Module TMOutput\r\nShow-TMOutputColor\r\n```\r\n",
      "created_at": "2020-05-01T08:57:22Z",
      "updated_at": "2020-05-01T10:15:42Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "I think the issue is that \"blue\" is a 24-bit color code, and on non Win10 shells, we don't have that. So that either *PSReadLine* should probably be fixed to accommodate by **not** attempting to output 24-bit colors, when not available or that *powershell/pwsh* is made to filter out those 24-bit escape codes, when found in stream. \r\n\r\n* https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#text-formatting\r\n\r\nHere's [a 24-bit color table](https://stackoverflow.com/a/60684606/). ",
      "created_at": "2020-05-01T10:32:18Z",
      "updated_at": "2020-05-01T10:34:22Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": "Any idea which one of these, that code refer to? \r\n\r\n```\r\nThe valid keys include:\r\n\r\n    ContinuationPrompt: The color of the continuation prompt.\r\n    Emphasis: The emphasis color. For example, the matching text when searching history.\r\n    Error: The error color. For example, in the prompt.\r\n    Selection: The color to highlight the menu selection or selected text.\r\n    Default: The default token color.\r\n    Comment: The comment token color.\r\n    Keyword: The keyword token color.\r\n    String: The string token color.\r\n    Operator: The operator token color.\r\n    Variable: The variable token color.\r\n    Command: The command token color.\r\n    Parameter: The parameter token color.\r\n    Type: The type token color.\r\n    Number: The number token color.\r\n    Member: The member name token color.\r\n```",
      "created_at": "2020-05-01T11:42:03Z",
      "updated_at": "2020-05-01T11:42:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@E3V3A Thanks for your investigation! Since it is PSReadline issue open new issue in https://github.com/PowerShell/PSReadline (please use issue template there and a script from the template)\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PSReadLine\">PowerShell/PSReadLine</a></strong></div><div>A bash inspired readline implementation for PowerShell - PowerShell/PSReadLine</div></blockquote>",
      "created_at": "2020-05-01T16:04:28Z",
      "updated_at": "2020-05-01T16:04:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-05-27T01:00:08Z",
      "updated_at": "2020-05-27T01:00:08Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I believe this is a known issue in PSReadLine caused by the assumption that all hosting terminals understand VT100 escape codes (which it uses to do things like set colours).\r\n\r\nVT100 escape codes work in Windows 10, but do not on older Windows versions.\r\n\r\nI'm not sure of the intent to fix this in PSRL, since it's only older versions of Windows where this is an issue, but some possible workarounds might be:\r\n\r\n- Install an older version of PSRL\r\n- Use PowerShell 7.0 rather than the 7.1 preview version; this may use a non-preview version of PSRL that doesn't assume VT100 compatibility, although I'm not sure",
      "created_at": "2020-05-27T01:54:33Z",
      "updated_at": "2020-05-27T01:54:33Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "This W81 \"legacy\" issue has not gone away by itself. It is still there and comparing latest PSRL on both latest `pwsh 7.1.0-rc.1 `with an earlier `pwsh 6.1.1`, we can easily find there is something wrong with the color rendering of **`Blue`** and **`DarkBlue`** which renders the same color in the new pwsh. \r\n\r\nWe can compare this: \r\n```powershell\r\n\"`n\"; [enum]::GetValues([System.ConsoleColor]) | Foreach-Object { Write-Host (\"{0,-14} \" -f $_) -NoNewline;  Write-Host $_ -ForegroundColor $_ }\r\n```\r\n\r\n---\r\nOLD: \r\n```\r\n  PowerShell Version    : 6.1.1\r\n  OS Name               : Microsoft Windows 8.1 (64-bit)\r\n  PSReadLine version    : 2.1.0-beta2\r\n```\r\n\r\n\r\n![pwsh_2020-10-18_02-17-07](https://user-images.githubusercontent.com/52289379/96355403-08be1a00-10ea-11eb-93cb-6593c297fa4f.png)\r\n\r\n---\r\n\r\nNEW:\r\n```\r\n  PowerShell Version    : 7.1.0-rc.1\r\n  OS Name               : Microsoft Windows 8.1 (64-bit)\r\n  PSReadLine version    : 2.1.0-beta2\r\n```\r\n\r\n![pwsh_2020-10-18_02-16-46](https://user-images.githubusercontent.com/52289379/96355405-0956b080-10ea-11eb-9642-d711a985b121.png)\r\n\r\n\r\n",
      "created_at": "2020-10-17T23:37:18Z",
      "updated_at": "2020-10-17T23:37:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@eabase Please look PSReadline issue referenced above.",
      "created_at": "2020-10-19T04:56:41Z",
      "updated_at": "2020-10-19T04:56:41Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "@iSazonov \r\nI am now in the belief that powershell/pwsh version later than 6.1.1 does not handle the ANSI reset code properly. So you guys need to collaborate a little more on this issue. How can I say that? Because any PSR version works on those old shells. Clearly from my post just above and many others already reported in the PSR repo, it all points to something fishy you guys implemented back then. (Seeing how some of your code is using regex, my current suspicion is that you're missing some over-hungry regex, that removes the reset code, and subsequently forgets to put it back, or puts it back wrongly. Does pwsh use regex for processing ANSI vs Win VT API?)",
      "created_at": "2020-10-22T22:28:12Z",
      "updated_at": "2020-10-22T22:28:12Z"
    },
    {
      "author": "eabase",
      "author_association": "NONE",
      "body": "@rjmholt \r\n@iSazonov \r\n\r\nI have made a chocking discovery that this issue is due to how (new?) powershell core installations are creating symlinks to desktop.\r\n\r\nI just installed the latest `PowerShell 7.2.0-preview.2` and yet again the pwsh link that appear on desktop has the classic broken command line garbage. So I copied the old link I had, from pwsh 6.1.1, and modified it to be exactly the same as far as its adjustable in the file `properties`. The result is that the **old** link with new paths is working perfectly! Going through some link forensics from [here](https://github.com/libyal/liblnk/issues/47) I noticed that the two symlinks are different by ~40 bytes and by structure. This is only visible by hexedit/hexdump and not even the `lnkinfo.exe` forensic tool. \r\n\r\nSo what is powershell installer doing to create these links?\r\n\r\nSo in conclusion, **this is not a PSReadLine issue.**\r\n",
      "created_at": "2020-12-22T05:00:47Z",
      "updated_at": "2020-12-22T05:00:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@eabase Thanks for your investigations! Please open new issue with repro steps after you get more info in issue you referenced..",
      "created_at": "2020-12-22T16:07:51Z",
      "updated_at": "2020-12-22T16:07:51Z"
    }
  ],
  "created_at": "2020-01-26T13:53:57Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-PSReadLine",
    "Resolution-External"
  ],
  "number": 11685,
  "state": "closed",
  "title": "Escape character garbage on command line (Win81)",
  "updated_at": "2020-12-22T16:07:52Z"
}