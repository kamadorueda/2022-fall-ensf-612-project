{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11988",
  "author": "doctordns",
  "body": "The GCIM alias works in WIndows PowerShell 5.1 and points to Get-CImInstance.\r\n\r\nThis alias is not present in RC3\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nGCIM -Class WIn32_bios\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nPS C:\\foo> gcim -class win32_Bios\r\n\r\nSMBIOSBIOSVersion : A16\r\nManufacturer      : Dell Inc.\r\nName              : Phoenix ROM BIOS PLUS Version 1.10 A16\r\nSerialNumber      : 87Q285J\r\nVersion           : DELL   - 15\r\n```\r\n\r\n# Actual behavior\r\nPS C:\\foo> gcim win32_bios\r\ngcim: The term 'gcim' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: gci, gcm, gc, gcs, gi, gm, icm, gcb, gin.\r\n```none\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS C:\\foo> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.3\r\nOS                             Microsoft Windows 10.0.19569\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0, 6.1.0, 6.2.0, 7.0.0-rc.3}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nPlease return this alias as it's useful at the command line.\r\n",
  "closed_at": "2020-05-22T19:56:48Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not repo:\r\n```powershell\r\n get-alias gcim\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           gcim -> Get-CimInstance\r\n```",
      "created_at": "2020-03-02T16:56:12Z",
      "updated_at": "2020-03-02T16:56:12Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "it works as expected (PowerShell 7 RC3)\r\n```\r\nGCIM -Class WIn32_bios\r\n\r\nSMBIOSBIOSVersion : 02.25\r\nManufacturer      : AMI\r\nName              : BIOS Date: 10/24/18 11:07:25 Ver: 04.06.05\r\nSerialNumber      : CZC5390L7Y\r\nVersion           : HPQOEM - 1072009\r\n```",
      "created_at": "2020-03-03T05:37:02Z",
      "updated_at": "2020-03-03T05:37:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Wow that's bizarre. It works for me now, but I know for fact I've hit a command not found for `gcim` since installing RC3.\r\n\r\nIf I can figure out how to repro I'll update, but *something* is up.",
      "created_at": "2020-03-03T17:31:42Z",
      "updated_at": "2020-03-03T17:31:42Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I can't repo it now either - but it _was_ failing.",
      "created_at": "2020-03-03T17:35:55Z",
      "updated_at": "2020-03-03T17:35:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I wouldn't close this yet. There appears to be something situational that causes the command lookup to fail.  Until we know what that is, the issue should stay open.",
      "created_at": "2020-03-03T18:57:43Z",
      "updated_at": "2020-03-03T18:57:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Close is not remove :-) As soon as someone can reproduce the problem we will continue.\r\n",
      "created_at": "2020-03-03T20:06:01Z",
      "updated_at": "2020-03-03T20:06:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I know it's not removed.  I'm saying \"we don't know what causes the problem\" is not a good reason to close an issue.",
      "created_at": "2020-03-03T21:43:44Z",
      "updated_at": "2020-03-03T21:43:44Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Well - if it's closed it's effectively removed. :-)\r\n\r\nI have seen this a couple of times but it is NOT repeatable. And it _always_ goes away after a reboot.",
      "created_at": "2020-03-04T09:25:01Z",
      "updated_at": "2020-03-04T09:25:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@doctordns You could use transcription or logging to get more info. Or add `(Get-Alias).Count` in prompt function to see every second the count.",
      "created_at": "2020-03-04T12:33:32Z",
      "updated_at": "2020-03-04T12:33:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "There's definitely some race condition that triggers this.  I had it happen again, here's some info:\r\n\r\n<sub>Note that `f` in this context is a custom alias to `ForEach-Object`</sub>\r\n\r\n<details>\r\n\r\n<summary>Whole transcript</summary>\r\n\r\n```powershell\r\nLoading personal and system profiles took 2272ms.\r\nPS> gcm add-odbcdsn\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Add-OdbcDsn                                        1.0.0.0    Wdac\r\n\r\nPS> gcm add-odbcdsn|f Definition\r\n\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n\r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_OdbcDsn')]\r\n\r\n    param(\r\n\r\n    [Parameter(ParameterSetName='Add0', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\r\n    [Alias('DsnName')]\r\n    [ValidateLength(1, 32)]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${Name},\r\n\r\n    [Parameter(ParameterSetName='Add0', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${DriverName},\r\n\r\n    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${SetPropertyValue},\r\n\r\n    [Parameter(ParameterSetName='Add0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PassThru},\r\n\r\n    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('32-bit','64-bit')]\r\n    [string]\r\n    ${Platform},\r\n\r\n    [Parameter(ParameterSetName='Add0', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('User','System')]\r\n    [string]\r\n    ${DsnType},\r\n\r\n    [Parameter(ParameterSetName='Add0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Add0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Add0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try\r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n\r\n    Process {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Name')) {\r\n          [object]$__cmdletization_value = ${Name}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DriverName')) {\r\n          [object]$__cmdletization_value = ${DriverName}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriverName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriverName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SetPropertyValue')) {\r\n          [object]$__cmdletization_value = ${SetPropertyValue}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetPropertyValue'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetPropertyValue'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PassThru')) {\r\n          [object]$__cmdletization_value = ${PassThru}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Platform')) {\r\n          [object]$__cmdletization_value = ${Platform}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DsnType')) {\r\n          [object]$__cmdletization_value = ${DsnType}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DsnType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DsnType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_OdbcDsn'\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_OdbcDsnTask_v1.0.cdxml-Help.xml\r\n\r\nPS> gcm add-odbcdsn\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Add-OdbcDsn                                        1.0.0.0    Wdac\r\n\r\nPS> gmo wdac\r\n\r\nModuleType Version    PreRelease Name                                ExportedCommands\r\n---------- -------    ---------- ----                                ----------------\r\nManifest   1.0.0.0               Wdac                                {Add-OdbcDsn, Disable-OdbcPerfCounter, Disable-WdacBidTrace, Enable-O\u2026\r\n\r\nPS> gmo wdac|f path\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\Wdac\\Wdac.psd1\r\nPS> gcim -namesp root/microsoft/windows/wdac msft_odbcdsntask\r\ngcim: The term 'gcim' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: gci, gcm, gc, gcs, gi, gm, icm, gcb, gin, vim.\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Just the commands</summary>\r\n\r\n```powershell\r\ngcm add-odbcdsn\r\ngcm add-odbcdsn|f Definition\r\ngcm add-odbcdsn\r\ngmo wdac\r\ngmo wdac|f path\r\ngcim -namesp root/microsoft/windows/wdac msft_odbcdsntask\r\n```\r\n\r\n</details>\r\n\r\nRepeating those steps exactly doesn't repro which is what makes me think it's a race condition.  I tend to have quite a few pwsh windows open and move between them a lot.  I think it's possible that something I was doing in one of the other windows at the same time as something else caused this, but I couldn't tell you what else I was doing at the time.\r\n\r\nI tried a few things to get `gcim` back in that session, nothing worked.  The CIM commands like `Get-CimInstance` worked fine, just the alias was missing.  In all other sessions `gcim` is found without issue.\r\n\r\n@iSazonov Please reopen this issue.",
      "created_at": "2020-05-06T13:15:06Z",
      "updated_at": "2020-05-06T13:15:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could look __how__ the alias and some other aliases is created at the module load time.",
      "created_at": "2020-05-06T13:24:31Z",
      "updated_at": "2020-05-06T13:24:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov oh... yeah... good call...\r\n\r\nI had assumed it was a built-in alias since `gcm gcim` doesn't show a module as a source.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/2c0f138a96c100093c1af8c091410f47647311c4/src/Microsoft.Management.Infrastructure.CimCmdlets/CimCmdletModuleInitialize.cs#L35-L53\r\n\r\nThat's really fragile, here's a super easy repro:\r\n\r\n```powershell\r\n# Start a new session and run this:\r\n& { $null = Get-CimInstance win32_process <# or any other class #>  }\r\ngcim\r\n```\r\n\r\nIt probably occurred with what I posted above because I have a custom `TabExpansion2` and must have triggered the import through that without realizing it.",
      "created_at": "2020-05-06T13:46:15Z",
      "updated_at": "2020-05-06T13:46:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Doesn't repro in Windows PowerShell though, so maybe there was a change made to how `AllScope` aliases are resolved (`alias.Options` is `ReadOnly, AllScope`).",
      "created_at": "2020-05-06T13:55:17Z",
      "updated_at": "2020-05-06T13:55:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could move this to alias attributes.",
      "created_at": "2020-05-06T13:57:13Z",
      "updated_at": "2020-05-06T13:57:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Seems odd not to be using the alias attributes, indeed. Would there be a reason not to be? Or just because the code hasn't been updated in a while?",
      "created_at": "2020-05-06T13:58:04Z",
      "updated_at": "2020-05-06T13:58:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Maybe they wanted to demo `IModuleAssemblyInitializer`? Or the CIM cmdlets were just written by another team that didn't know about the attribute?  I thought it was added in PSv3, but I could be wrong.\r\n\r\nEither way, definitely should use the attribute.",
      "created_at": "2020-05-06T14:02:52Z",
      "updated_at": "2020-05-06T14:03:09Z"
    },
    {
      "author": "thlac",
      "author_association": "CONTRIBUTOR",
      "body": "I've gone ahead and created a pull request for just that, my first one, so hope I got it somewhat right",
      "created_at": "2020-05-10T16:24:48Z",
      "updated_at": "2020-05-10T16:24:48Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12617, which has now been successfully released as `v7.1.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:06:35Z",
      "updated_at": "2020-06-25T19:06:35Z"
    }
  ],
  "created_at": "2020-03-02T11:36:41Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "First-Time-Issue"
  ],
  "number": 11988,
  "state": "closed",
  "title": "GCIM Alias does not work in PowerShell 7 RC3",
  "updated_at": "2020-06-25T19:06:36Z"
}