{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7593",
  "author": "alx9r",
  "body": "This came up when experimenting with @lzybkr's workaround for #7530.  In short, I'm using the ScriptBlock (not just its string representation) from one runspace in another so that file position information is correctly reported when an error is encountered.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$scriptblock = {\r\n    \"a in dot-invoked scriptblock: $a\"\r\n}\r\n\r\n$powershell = [powershell]::Create().\r\n    AddScript({\r\n        \"a in outer scriptblock: $a\"\r\n        . $args[0]\r\n    }).\r\n    AddArgument($scriptblock)\r\n\r\n$initialSessionState = [initialsessionstate]::CreateDefault()\r\n$initialSessionState.Variables.Add(\r\n    [System.Management.Automation.Runspaces.SessionStateVariableEntry]::new(\r\n        'a',\r\n        1,\r\n        ''\r\n    )    \r\n)\r\n$runspace = [runspacefactory]::CreateRunspace($initialSessionState)\r\n$runspace.Open()\r\n\r\n$powershell.Runspace = $runspace\r\n$powershell.Invoke()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\na in outer scriptblock: 1\r\na in dot-invoked scriptblock: 1\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\na in outer scriptblock: 1\r\na in dot-invoked scriptblock:\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 6.3.9600 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Scriptblocks are afinitized to the runspace where they were created. Basically,the internal session state pointer for the scriptblock still points to the original runspace. If you create the scriptblock on a thread that doesn't have a runspace associated with it (i.e. from a C# host app) then this might work but there's no way you can do that from within PowerShell.",
      "created_at": "2018-08-22T00:21:03Z",
      "updated_at": "2018-08-22T00:21:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@BrucePay - that's mostly right, but scriptblocks created via `[ScriptBlock]::Create` are not bound to a runspace until they are first invoked.",
      "created_at": "2018-08-22T00:28:27Z",
      "updated_at": "2018-08-22T00:28:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Right but then you lose all of the source context which was the whole point of the exercise. Now If we made the overload of `[scriptblock]::Create()` that takes an AST public, then everything should work.",
      "created_at": "2018-08-23T16:06:39Z",
      "updated_at": "2018-08-23T16:06:39Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The binding to the runspace happens [here](https://github.com/PowerShell/PowerShell/blob/d6817a42e4b75c915d9ccc3772172a4a63395d1a/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L1254) - and you can see it is not part of `ScriptBlock.Create`, though that line could maybe be moved into `ScriptBlock.Create`.",
      "created_at": "2018-08-23T16:29:03Z",
      "updated_at": "2018-08-23T16:29:03Z"
    }
  ],
  "created_at": "2018-08-21T21:40:15Z",
  "number": 7593,
  "state": "open",
  "title": "Variable defined in InitialSessionState is not available in scriptblock originating from another runspace",
  "updated_at": "2018-08-23T16:29:03Z"
}