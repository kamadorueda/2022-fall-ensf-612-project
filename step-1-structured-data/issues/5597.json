{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5597",
  "author": "stknohg",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nI installed 64-bit PowerShell 6.0-rc using MSI installer first.\r\nNext I installed 32-bit PowerShell 6.0-rc using MSI installer.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nBoth 64-bit and 32-bit PowerShell is installed.\r\n\r\nActual behavior\r\n---------------\r\n\r\n64-bit PowerShell was removed.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n* 64-bit Windows 10 Pro(1703)\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n",
  "closed_at": "2018-01-10T12:23:18Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@stknohg Thanks for reporting this severe bug. Could you also please state if you reported this bug just because you found it or if you have a use case where you need to have 32 and 64 bit installed? This would help estimate the customer impact of it.\r\nAbout the bug:\r\nI think the `-arch x64` argument to `candle.exe` [here](https://github.com/PowerShell/PowerShell/blob/master/build.psm1#L2167) is the culprit since it apparently overrides the `Platform` originally defined by `ProductTargetArchitecture`. Therefore WiX wrongly thinks that the 32 bit installer is 64 bit. Addiitionally, I found that another problem is the `UpgradeCode`, which is hardcoded. With those 2 fixes, side by side works. I will prepare a PR with a fix for it.\r\n\r\n  ",
      "created_at": "2018-01-06T22:14:06Z",
      "updated_at": "2018-01-08T20:01:49Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Yes, Thanks for reporting this bug.",
      "created_at": "2018-01-08T19:52:44Z",
      "updated_at": "2018-01-08T19:52:44Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 @SteveL-MSFT  I think we can close the issue now with the PR being merged into master and the release branch.",
      "created_at": "2018-01-10T11:47:03Z",
      "updated_at": "2018-01-10T11:47:03Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister in the future, you can have issues auto-close on merge with special key words: https://help.github.com/articles/closing-issues-using-keywords/ ",
      "created_at": "2018-01-10T12:23:18Z",
      "updated_at": "2018-01-10T12:23:18Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, I did not know that. But it also sounds dangerous because it should be a conscious decision and review of maintainers. What if the PR says 'partially fixes '? GitHub would close the issue then. VSTS has a checkbox to close related task that can be ticked upon completion of a PR.",
      "created_at": "2018-01-10T12:39:00Z",
      "updated_at": "2018-01-10T12:39:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister It is something the PR assignee is responsible for checking before merging. Collaborators/maintainers/owners can update the PR details if needed before merging or they can re-open the issue. Issue watchers also get notified on close and can always request it be re-opened. I'd say the risk is low.",
      "created_at": "2018-01-10T13:12:40Z",
      "updated_at": "2018-01-10T13:12:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\ude04 There was an extra word in \"Fix bug #5597\"",
      "created_at": "2018-01-10T14:04:32Z",
      "updated_at": "2018-01-10T14:04:32Z"
    },
    {
      "author": "stknohg",
      "author_association": "CONTRIBUTOR",
      "body": "I confirmed that the problem was solved.\r\nThank you everyone.",
      "created_at": "2018-01-11T07:19:56Z",
      "updated_at": "2018-01-11T07:19:56Z"
    }
  ],
  "created_at": "2017-12-01T05:19:57Z",
  "number": 5597,
  "state": "closed",
  "title": "Can't install 32-bit/64-bit PowerShell together when using MSI installer",
  "updated_at": "2018-01-11T07:19:56Z"
}