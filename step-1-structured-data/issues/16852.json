{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16852",
  "author": "ohadschn",
  "body": "### Summary of the new feature / enhancement\n\nConsider the following pattern, common among PowerShell libraries, including official Microsoft ones such as [Azure-PowerShell](https://github.com/Azure/azure-powershell/search?q=%24PSCmdlet.ParameterSetName):\r\n```ps1\r\nfunction Foo {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(ParametersetName=\"First\")]\r\n        [switch] $A,\r\n        [Parameter(ParametersetName=\"Second\")]\r\n        [switch] $B,\r\n        [Parameter(ParametersetName=\"Third\")]\r\n        [switch] $C\r\n    )\r\n\r\n    switch ($PSCmdlet.ParameterSetName) {\r\n        \"First\" { Write-Host \"First set selected\" }\r\n        \"Second\" { Write-Host \"Second set selected\" }\r\n        \"Third\" { Write-Host \"Third set selected\" }\r\n    }\r\n}\r\n```\r\n\r\nStraightforward executions work well:\r\n`Foo -A` -> _First set selected_\r\n`Foo -B` -> _Second set selected_\r\n`Foo -C` -> _Third set selected_\r\n\r\nHowever, any attempt to explicitly set switch parameter values using a boolean value (which is invaluable in scripting) will fail:\r\n`Foo -A:$true -b:$false` -> _**Parameter set cannot be resolved using the specified named parameters. One or more parameters issued cannot be used together or an insufficient number of parameters were provided.**_\r\n\r\nOf course, this breaks the Switch parameter contract when specified as above: https://github.com/Azure/azure-powershell/issues/12881\r\n\r\n\r\n\r\n\n\n### Proposed technical implementation details (optional)\n\nThere seem to be many suggestions for improving the parameter set experience (https://github.com/PowerShell/PowerShell/issues/11237, https://github.com/PowerShell/PowerShell/issues/13746, https://github.com/PowerShell/PowerShell/issues/10137, https://github.com/PowerShell/PowerShell/issues/12818 etc.) however many of them have far reaching, backward compatibility implications. \r\n\r\nThere is one suggestion in particular I think could be very helpful, namely an additional attribute value to help PowerShell's resolution mechanism choose the right parameter set by considering the parameter's value, not just its presence (in this case `$false` would not match the selector)\r\n* https://github.com/PowerShell/PowerShell/issues/4102 (see my comment there as well).",
  "closed_at": "2022-02-10T00:00:41Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "A switch is **NOT A BOOLEAN**\r\n\r\nA switch is an instruction to **do something non-default.**   Writing `-A:$true` is redundant    \r\nThe **absence** of a switch says follow the **default** path. \r\n`-A:$false`   **does not say follow the default path**  it says UNDO a previous change from the default and bring it back to the default. Often the Undo path doesn't exist  for example `-NoClobber:$false` has the same effect as  writing nothing which is what almost everyone does almost all the time.  But consider a `Set` command  which can disable something instead of removing it.   \r\n\r\n-  `Set-Thing -disabled` would disable something .       \r\n-  `Set-Thing` with no switch doesn't do anything to the state    \r\n-  `Set-Thing -disabled:$false` would change the state from disabled back to enabled.   \r\n\r\nThe author might add a switch `-ReEnable` because it is accepted that new users take time to discover `:$false`  and Parameter sets are there to prevent mutually exclusive parameters being specified like `Set-Thing -Disabled -ReEnable`  some bad code exists where someone writes something like this \r\n```\r\nfunction Export-Picture {\r\nparam (\r\n[switch]$AsJpg\r\n[switch]$AsPNG\r\n[switch]$AsTIF\r\n```\r\nwhen they should have a type field with  a `validateSet` and a default value.  \r\n\r\nOne case where non default options are mutually exclusive is exporting to excel. Data can be a _range,_ or it can be a _table_. By default it's neither, but it cannot  be _both_ so `-AsRange`  `-AsTable` might be  in different sets. \r\n\r\nWhere someone  is determined to write their switches as **UNDO** to mean **Do Not do** it is better to educate them than to redesign the behaviour which authors already rely on.\r\n \r\n ",
      "created_at": "2022-02-06T17:07:26Z",
      "updated_at": "2022-02-06T17:11:03Z"
    },
    {
      "author": "ohadschn",
      "author_association": "NONE",
      "body": "@jhoneill Could you please provide a reference to support your view on switch parameters? \r\n\r\nThe docs seems to support my view above, namely that `-Switch=$false` is the same as not specifying `-Switch` it at all . More specifically, they equate boolean parameters with switch parameters semantically, merely pointing out the convenience advantage of the latter. \r\n\r\nTo the extent that we both agree boolean parameters don't mean what you detailed above, the official docs would seem to contradict your view. I assume we both agree that when I write `\r\nfunction Foo ([bool)$B= $false])`, then calling `Foo` is completely equivalent to `Foo -B $false`.\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/strongly-encouraged-development-guidelines?view=powershell-7.2#parameters-that-take-true-and-false\r\n\r\n> Parameters That Take True and False\r\n> If your parameter takes only true and false, define the parameter as type [System.Management.Automation.SwitchParameter](https://docs.microsoft.com/en-us/dotnet/api/System.Management.Automation.SwitchParameter). A switch parameter is treated as true when it is specified in a command. If the parameter is not included in a command, Windows PowerShell considers the value of the parameter to be false. Do not define Boolean parameters.\r\n\r\nA similar explanation is provided here: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7.2#switch-parameters\r\n\r\n> Switch parameters are parameters that take no parameter value. Instead, they convey a Boolean true-or-false value through their presence or absence, so that when a switch parameter is present it has a true value and when absent it has a false value.\r\n\r\nAnd here: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/types-of-cmdlet-parameters?view=powershell-7.2\r\n\r\n> Windows PowerShell provides a [System.Management.Automation.SwitchParameter](https://docs.microsoft.com/en-us/dotnet/api/System.Management.Automation.SwitchParameter) type that allows you to define a parameter whose value is automatically set to false if the parameter is not specified when the cmdlet is called. Whenever possible, use switch parameters in place of Boolean parameters.\r\n\r\nMoreover, in the official System Center blog I found this stated explicitly:\r\nhttps://techcommunity.microsoft.com/t5/system-center-blog/oit-quick-tip-using-powershell-switch-parameters-in-cli/ba-p/345469\r\n\r\n> Here\u2019s an example:\r\n> `get-scoevents`\r\n> `get-scoevents \u2013formatXML`\r\n> The equivalent of the example lines above looks like this:\r\n> `get-scoevents \u2013formatXML:$false`\r\n> `get-scoevents \u2013formatXML:$true`\r\n\r\nNote that in the Azure-PowerShell bug I linked to, no one rejected the fact that it was a bug. Rather they pointed out the implementation difficulty, which was my motivation for opening this issue.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/strongly-encouraged-development-guidelines\">Strongly Encouraged Development Guidelines - PowerShell</a></strong></div><div>Strongly Encouraged Development Guidelines</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters\">about Functions Advanced Parameters - PowerShell</a></strong></div><div>Explains how to add parameters to advanced functions.</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/types-of-cmdlet-parameters\">Types of Cmdlet Parameters - PowerShell</a></strong></div><div>Types of Cmdlet Parameters</div></blockquote>\n<blockquote><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/78679iFF8C102977D8F653?v=v2\" width=\"48\" align=\"right\"><div>TECHCOMMUNITY.MICROSOFT.COM</div><div><strong><a href=\"https://techcommunity.microsoft.com/t5/system-center-blog/oit-quick-tip-using-powershell-switch-parameters-in-cli/ba-p/345469\">OIT Quick Tip: Using PowerShell Switch Parameters in CLI Activities</a></strong></div><div>First published on TECHNET on May 04, 2012   One of the common parameter types in PowerShell is the switch parameter. It\u2019s basically a Boolean (true/false) type of parameter, and you either add it to the command line or not. Here\u2019s an example:  get-scoevents get-scoevents \u2013formatXML The above comman...</div></blockquote>",
      "created_at": "2022-02-06T23:31:10Z",
      "updated_at": "2022-02-06T23:31:12Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I will just point to the entire history of PowerShell :-) \r\n\r\nYou quoted this\r\n\r\n>  **Switch parameters are parameters that take no parameter value.** \r\n\r\nUnder normal circumstances a user should write `-Switch`  to covey true and _nothing_ implies false. \r\n\r\nThere are _exceptions_ in scripts / functions.  \r\n1. Splatting.   If I call `some-commnd @params`   and the parameters need to include a switch, the hash table needs set `s=true` . It is not good practice to put  `s = $false` in the hash table but it is _mostly harmless_ . It's often easier to write code which always sets the value and generally doesn't cause a problem. \r\n2. -S is a switch parameter in function 1 which calls function 2 and wants to pass the value it was passed to function 2 and specifies  `-s:$s`\r\n\r\nThe guide to developers is clear. **Booleans create a bad user interface, don't use them**, There are still Microsoft supplied cmdlets where the team which implemented them did not follow the developers guide, or look at existing practice, or ask the PowerShell team for advice. Microsoft is not one homogenous hive mind - trust me I worked there for 10 years -  and parts of it say or do  things which contradict others. The graph API team don't observe any of the normal rules, the Azure AD team and even ordinary AD cmdlets break the rules on Booleans, accepting `-erroraction` etc,  \r\n\r\n>A switch parameter is treated as true when it is specified in a command. If the parameter is not included in a command, Windows PowerShell considers the value of the parameter to be false. Do not define Boolean parameters.\r\n\r\nThis ignores the case where the parameter is specified with `:$false` but is true in **normal use** I.e.  when the param block declares    \r\n`[Switch]$S `    \r\n$S evaluates to boolean true if switch is specified and and boolean false if not.   The default state is the user doesn't specify the switch so the code inside the function looks like:\r\n``` \r\nIf ($s)  {   non default  action with a name like  'S' } \r\nelse     {  default action , if any }\r\n``` \r\nor if $s defines \"Do Not Do something you would do by default\"\r\n``` \r\nIf ( -not $s)   {  default action }\r\n``` \r\nSo for example in` write-host`  it would look like `If ( -not $NoNewLine)   {  write a new line }` ;  In both cases although the user _should not_ write `-s:$false` it has the same effect as writing nothing.  Obviously requesting the default behaviour with a `-NoNewLine:$false`  adds an confusing double negative when the code is read. \r\n\r\nSome authors who want to make everything strongly typed do not like treating `$s` as a boolean and the either use  `$s.ispresent` or `$psboundparameters.containsKey('s')`   To show the effect of these: \r\n```\r\nfunction f {\r\nparam ([Switch]$s)\r\n\r\n\"S acts as $([boolean]$s)\"\r\nif ($PSBoundParameters.ContainsKey('S')) {\"S in bound parameters\"}\r\n\"IsPresent set to $($s.IsPresent)\" \r\n}\r\n\r\n\r\nps> f\r\nS acts as False\r\nIsPresent set to False\r\n\r\nps> f -s\r\nS acts as True\r\nS in bound parameters\r\nIsPresent set to True\r\n\r\nps> f -s:$false\r\nS acts as False\r\nS in bound parameters\r\nIsPresent set to False\r\n````\r\n\r\nThe last case shows (a) how one would detect `:$false`  and (b) if the author is using dynamic parameters where `$Param` isn't created and it is necessary to look at `$PSBoundParameters`  if they _only check for presence_ of  a switch specifying `$false` will have the same effect as specifying true!  \r\n\r\nWhat SystemCenter blog says is true for the command it is talking about and for _most_ other commands.         \r\n-  `-Switch:$true` is **always** the same as `-Switch`  -  `-Switch` is the preferred form\r\n-  `-Switch:$False` is **Usually** the same as  writing _nothing_  and omitting the switch entirely is the preferred form.    \r\n-  In the few cases where `-Switch:$False` is **not** the same as  writing _nothing_   either the author has created a bug as above, or it means something else.  \r\n\r\nI used exporting to excel as  an example and it might have \r\n`Format-Cell   -Size 14 -bold -underline`      \r\nFor \"change the font to 14 point, make it bold and underlined **but do not change** italic\" compared with   \r\n`Format-Cell   -Size 14 -bold -underline  -italic:$false`      \r\nFor \"change the font to 14 point, make it bold and underlined and **remove italic if it was set previously**.\" \r\n\r\n\"Don't add\" and \"Remove\" are not the same. The same with the `-Disable` switch in the previous comment. \"Don't disable\" is not the same as \"Enable\" \r\n\r\nAs I said before if the user writes something which they should not, and which is redundant, AND they happen to do with parameters which are declared mutually exclusive, **user education**  is the solution to the problem. The resource required to add this functionality would never be justified, and even if it were added what you proposed on the other issue would require commands to be changed, and would require authors to think \"Oh, I've put that in an exclusive set but I need to add something in case the user writes in a way which they should not write it.\"  It would be lovely to think that would happen. \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-02-07T10:56:05Z",
      "updated_at": "2022-02-07T10:57:12Z"
    },
    {
      "author": "ohadschn",
      "author_association": "NONE",
      "body": "Thank you, I understand your argument, what I'm missing is any reference to the fact that this is indeed the expected semantic. I concede that different groups within MS could be out of sync, but as far as I can tell you haven't supplied an actual example to support your case in terms of existing libraries, let alone any piece of documentation (which we both agree would hold more weight than any specific implementation). \r\n\r\nIn my humble opinion, my previous post demonstrated that on both fronts my view is more likely, but let's wait for someone from the PowerShell team to weigh in... I'd be happy to be proven wrong, and hopefully we can both agree on that as the official word :)",
      "created_at": "2022-02-08T00:53:18Z",
      "updated_at": "2022-02-08T00:54:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't know what else to add. As you yourself pointed out, the choice of the parameter set is based on the _presence_ of the parameter, but not on its _value_.\r\nPowerShell switch semantic is not something new too. For example in cmd.exe, `dir /s` - `/s` switch turns on recursion if present and turns off recursion if absent. \r\nThe fact that PowerShell switch can be converted to Boolean is an implementation detail to make it using more convenient. ",
      "created_at": "2022-02-08T05:07:26Z",
      "updated_at": "2022-02-08T05:07:26Z"
    },
    {
      "author": "ohadschn",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nGoing by the docs, I don't see the conversion to boolean as strictly an implementation detail, more like a design meant to abolish Boolean parameters. The basically say - don't use boolean params, use switch.\r\n\r\nBut we digress. The question here is not how switch parameters or parameter set resolution work technically. \r\nRather the question is about PowerShell standard / contract / convention: \r\n**Should not specifying a switch to a CmdLet (`Foo`) behave exactly the same as specifying it as false (`Foo -Switch:$false`)?**\r\n\r\n",
      "created_at": "2022-02-08T11:32:32Z",
      "updated_at": "2022-02-08T11:34:53Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @iSazonov the question here is not how switch parameters or parameter set resolution work technically. Rather the question is about PowerShell standard / contract / convention: **Should not specifying a switch to a CmdLet (`Foo`) behave exactly the same as specifying it as false (`Foo -Switch:$false`)?**\r\n\r\n_Should_ it ?   Most the time it **does**. _Must_ it do so  ?  I gave this example before \r\n\r\n> `Format-Cell -Size 14 -bold -underline`  is \"do not change italic\" compared with\r\n> `Format-Cell -Size 14 -bold -underline -italic:$false`    is  \"remove italic if it was set previously.\"\r\n> \"Don't add\" and \"Remove\" are not the same. The same with the -Disable switch in the previous comment. \"Don't disable\" is not the same as \"Enable\"\r\n\r\nSometimes specifying `Foo -Switch:$false` **intentionally does something different from not specifying `-switch`**\r\nAs such switch is like a _nullable_ Boolean.  Usually we only care if it is true or not true, but sometimes (-not $b) is not the same as ($b -eq $false). \r\n\r\n\r\nYou have demanded documentation. :-)  I'm pretty sure no PowerShell documentation recommends writing `-switch:$false` , (outside of the help for commands where it does something different).  I have been criticized for using `-Italic:$false`  because \"Nobody knows you can write that\".     \r\nIt's not widely understood, even in documentation for the switch class at  \r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.management.automation.switchparameter?view=powershellsdk-7.0.0 \r\nit says the type is \r\n> used to define a parameter on a cmdlet script of function that **can only be used as a switch**\r\n\r\nBut all of this shows it **can**  be used, not as a switch.  It also says that the `ispresent` property\r\n> Returns true if the parameter was specified on the command line, false otherwise.\r\n\r\nagain that's not the case if  `-Switch:$false` is specified. \r\n\r\n- The purpose of `switch` is to be a parameter which takes no value and is either present or absent. \r\n- Most documents ignore the  `-Switch:$Variable` syntax which is sometimes needed in code and the use of `-Switch:$false`  for undo.\r\n- Use of `:$true` and `:$false`  is never encouraged, and is at best considered \"mostly-harmless\" \r\n- In PowerShell code, a switch parameter can be treated as a Boolean which, when true, adds a non-default action and/or removes a default one. Code rarely looks for `-Switch:$false` being passed and occasionally mistakes it for `-Switch`. The OP gave https://github.com/Azure/azure-powershell/issues/12881 as an example of that.  As that showed, the advice to a user when specifying `-Switch:$false`  does something unexpected is \"Don't do that then\".\r\n- Allowing a parameter to be in one parameter set when its value meets a test, and in all parameter sets otherwise requires both a change to PowerShell AND a change to the code where the parameter is used - assuming the author thought to do that and was happy their code would only run a new release;  it is not certain that the AZ cmdlets in question would be updated \r\n- There *is* a proposal https://github.com/PowerShell/PowerShell/issues/16173  for a `[dynamic]`  (\"*appear if*\") label for parameters which would support  \"only allow switch X if neither switch Y nor switch Z evaluates to true\".  This still requires a PowerShell update and still results in code which requires that version.  \r\n- The problem as described can be addressed today with a `DynamicParam{}` but most developers avoid using it and that proposal avoids the need for `DynamicParam` and simplifies the use of parameter sets. \r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.switchparameter\">SwitchParameter Struct (System.Management.Automation)</a></strong></div><div>Type used to define a parameter on a cmdlet script of function that can only be used as a switch. </div></blockquote>",
      "created_at": "2022-02-08T12:30:48Z",
      "updated_at": "2022-02-08T12:35:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Going by the docs,\r\n\r\n@ohadschn PowerShell documentation was never at the _specification level_. In the last couple of years PowerShell team has made a lot of improvements, but it's still not specs like it is for Windows APIs and features. You can open new issue-request in PowerShell Doc repo to improve the topic.\r\n",
      "created_at": "2022-02-08T14:23:45Z",
      "updated_at": "2022-02-08T14:23:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-02-10T00:00:40Z",
      "updated_at": "2022-02-10T00:00:40Z"
    }
  ],
  "created_at": "2022-02-06T11:44:42Z",
  "labels": [
    "Issue-Enhancement",
    "Issue-Question",
    "Resolution-Answered",
    "Needs-Triage",
    "WG-Engine-ParameterBinder"
  ],
  "number": 16852,
  "state": "closed",
  "title": "Reconcile -Switch:$false parameter invocation with parameter set resolution",
  "updated_at": "2022-02-10T00:00:41Z"
}