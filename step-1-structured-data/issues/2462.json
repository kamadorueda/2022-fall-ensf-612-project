{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2462",
  "author": "KirkMunro",
  "body": "As per the discussion on pull request #2446 that I recently closed, it would be very useful to have a -Top parameter on Sort-Object. This parameter would allow users to indicate they only want the top N results from their sort. The original pull request I referenced tried to address the need for -Top by adding -Top and -Bottom parameter aliases to Select-Object, but as @lzybkr pointed out, it makes more sense to have a new -Top parameter (not alias) on Sort-Object instead since Top implies sorting.\n\nThis issue should be marked as Issue-Enhancement and I would like it to be assigned to me as I have already started work on it. See the discussion on #2446 for details.\n\nThe current syntax of Sort-Object is as follows:\n\n```\nSort-Object [[-Property] <Object[]>] [-Descending] [-Unique] [-InputObject <psobject>]\n[-Culture <string>] [-CaseSensitive] [<CommonParameters>]\n```\n\nThe new syntax I would like to propose is as follows:\n\n```\nSort-Object [[-Property] <Object[]>] [-Descending] [-Unique] [-Top <int>] [-InputObject <psobject>]\n[-Culture <string>] [-CaseSensitive] [<CommonParameters>]\n```\n\nThis design approach avoids making assumptions about what -Top means in a given data set, requiring users to control what is top by using the -Descending parameter (e.g. in some data sets, the top items may be the lowest values in the set, such as priority, while in others, the top items may be the highest values in the set, such as workingset64). I believe this is really the only syntax that makes sense for this cmdlet.\n",
  "closed_at": "2016-11-16T20:10:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Thanks for the offer!\nWhy do you missed **Bottom** parameter? It cannot be replaced by a Top + Descending.\n\n``` powershell\n1,2,3,4,5,6,7,8,9 | Sort-Object -Top 2\n1\n2\n\n1,2,3,4,5,6,7,8,9 | Sort-Object -Top 2 -Descending\n9\n8\n\n1,2,3,4,5,6,7,8,9 | Sort-Object -Bottom 2\n8\n9\n\n1,2,3,4,5,6,7,8,9 | Sort-Object -Bottom 2  -Descending\n2\n1\n```\n",
      "created_at": "2016-10-12T09:58:33Z",
      "updated_at": "2016-10-12T09:59:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Ok, you're right, there are some sorts that can't be done without a -Bottom parameter, and for those cases with my proposal you would have to use Select-Object to get those results.\n\nThe question I need to ask before I would add -Bottom to this enhancement as well is: does it matter?\n\nI don't think it does, which I think is why I felt -Top N covered all of the use cases. In Select-Object, -First and -Last are both needed and there are use cases for both parameters (e.g. $path -split '\\' | select -last 2). In sorted data, there isn't really such a need. I believe that's why in modern SQL servers, they don't have a bottom N command. Instead they suggest using a top N -Descending sort (e.g. http://stackoverflow.com/questions/1876606/how-to-select-bottom-most-rows).\n\nFurther, adding -Bottom would require an additional parameter set in Sort-Object, which is trivial to implement but adds complexity that should be avoided unless it's really necessary. I don't believe it should be added just for completeness if the recommendation for people looking for bottom N would most likely be to use -Top N -Descending instead. If someone can demonstrate a real-world use case where -Bottom N would be useful in PowerShell, then I'll happily include it here. I don't think there is such a use case, but feel free to prove me wrong.\n",
      "created_at": "2016-10-12T13:47:32Z",
      "updated_at": "2016-10-12T13:47:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The -Bottom parameter can be replaced by select-object -Last as the -Top parameter can be replaced by select-object -First. Therefore, this Issue is not critically necessary change. But here we are only talking about Sort-Object and should forget about Select-Object. Let's consider only the Sort-Object UX.\nIf we consider the sort-object as a whole then saying 'Top' we should say 'Bottom'.\nI do not see any difficulties to do Top and Bottom because the sort-object is already doing \"sorted-array\" as result and we can only add sorted-array[1..Top] or sorted-array[length-Bottom..length].\n\nSample:\n`dir filelogs | sort-object -Property createddate -Desc | Select-Object -First 10 | Sort-Object  -Property createddate | \"process last logs in history order\"`\n\nNew UX:\n`dir filelogs | sort-object -Property createddate -Bottom 10 | \"process last logs in history order\"`\n\nOtherwise I have to:\n`dir filelogs | sort-object -Property createddate -Top 10 -Desc | Sort-Object  -Property createddate | \"process last logs in history order\"`\n\nMoreover I can:\n`dir filelogs | sort-object -Property createddate  | Select-Object -Last 10 | \"process last logs in history order\"`\n\nTop removes one operator, the Bottom also removes one operator. The absence of Bottom leading to +1 operator. Why should we exclude Bottom? The full symmetry!\n",
      "created_at": "2016-10-12T14:58:29Z",
      "updated_at": "2016-10-12T14:58:29Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "For the last two examples you provided @iSazonov, I wouldn't sort the sorted data because you already know the data is sorted and you just want to reverse it. Instead I would just store the results in an array and then:\n\n```\nforeach ($item in $results[-1..-$results.Length]) {\n    ....\n}\n```\n\n(or I would just call .reverse() on the array if I was using TypePx, a script method which is very useful and that I may propose that as a separate pull request later).\n\nInternally if I was to implement bottom, this is exactly what bottom would do: invoke top with the appropriate value for -descending and then return the reversed results.\n\nAnyhow, I have reached out to @lzybkr for comment so that I can get his perspective as well since I'm still a little concerned with adding a second parameter set to Sort-Object unless it's really necessary.\n",
      "created_at": "2016-10-12T15:56:00Z",
      "updated_at": "2016-10-12T15:57:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Some very quick comments before I disappear for a week.\n\nI'm ambivalent about `-Bottom` vs. reversing w/ `-Descending`. I do think `-Bottom` is a good example of why we proposed mutually exclusive parameters in a parameter set.\n\nIf I say - give me the least ..., I probably do want `-Top -Descending` order, not `-Bottom` order, so maybe maybe I'm leaning towards not needing `-Bottom`.\n",
      "created_at": "2016-10-12T16:32:03Z",
      "updated_at": "2016-10-12T16:32:03Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I see pros and cons in both approaches\n\n### Why `-Bottom`\n- Symmetry as @iSazonov pointed out. I like it too.\n- In my opinion, the main use-case for `-Top` is not to avoid one extra `| Select-Object -First`, but to avoid the performance cost that is associated with piping a big amount of objects. Hence introducing more piping in the `-Bottom` case compare to `-Top` case is undesirable and `-Bottom` should be it's own parameter\n- `Sort -Top 10 -Descending | Sort` (or equivalent) is kind of ugly and hard to read. Maybe if we introduce a `Reverse-Object` at the same time as one of the core cmdlets, it would be fine.\n\n### Why not `-Bottom`\n- These parameters are mutually exclusive and adding both of them multiplies the parameter sets count by 2. In this case, I think it's acceptable. There is only 1 parameter set currently.\n- Introducing `-Bottom` will make parameter sets asymmetrical: there should be an optional named parameter `Top` and mandatory named parameter `Bottom` in non-default parameter set. Asymmetry!\n\n### Summary\n\nI'm almost ambivalent with a slight preference toward including `-Bottom` or not adding it, but adding `Reverse-Object` at the same time.\n",
      "created_at": "2016-10-12T20:27:25Z",
      "updated_at": "2016-10-12T20:27:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vors  Reverse-Object  is an interesting direction. I don't like this because with the end user's point of view it is another new cmdlet  in addition to **thousands** of other already existing in the (Windows) system. Users are well aware of Sort-Object, they will look for opportunities just inside it and ignore the new cmdlet. \nTop and Bottom are symmetry for end users. Its good UX. And users don't think about any asymmetry or problems within internal code.\n\n@lzybkr Without Bottom, we will deprive users of one case. This is rare, but it will be bad for UX. We add Top to exclude excessive pipeline, but still leave one case... This is annoying.\n\n@KirkMunro \n\n> Internally if I was to implement bottom, this is exactly what bottom would do: invoke top with the appropriate value for -descending and then return the reversed results.\n\nCould be just:\n\n> I do not see any difficulties to do Top and Bottom because the sort-object is already doing \"sorted-array\" as result and we can only add sorted-array[1..Top] or sorted-array[length-Bottom..length].\n",
      "created_at": "2016-10-13T05:00:17Z",
      "updated_at": "2016-10-13T05:09:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Need to close the Issue. @PowerShellTeam \n",
      "created_at": "2016-11-16T13:15:00Z",
      "updated_at": "2016-11-16T13:15:00Z"
    }
  ],
  "created_at": "2016-10-12T07:40:54Z",
  "number": 2462,
  "state": "closed",
  "title": "Add -Top parameter to Sort-Object",
  "updated_at": "2016-11-29T20:52:01Z"
}