{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12079",
  "author": "TobiasPSP",
  "body": "When a function is defined within a script, code completion for this function won't work for some scenarios. \r\n\r\nThis painfully surfaces in editors such as *ISE* and *VSCode*: when working on code in one editor pane, intellisense stops working inside of this editor pane.\r\n\r\nIt does work on other editor panes. However, when a typical script author works on a solution with more than one function and tries to reference one of these functions from other places *in the same script*, Intellisense is broken.\r\n\r\n# Steps to Reproduce\r\n\r\n## Example 1: Complete Corruption of Parameter Completion\r\nWhen a function parameter uses PS-defined enums, all function parameters become invisible:\r\n**Actual Behavior**\r\n```powershell\r\n$script1 = '\r\nenum Cities\r\n  {\r\n    Hannover\r\n    Redmond\r\n    NewYork\r\n  }\r\n\r\n  function Test-It\r\n  {\r\n    param\r\n    (\r\n      [Cities]\r\n      $City\r\n    )\r\n\r\n    $PSBoundParameters\r\n  }\r\n  \r\n  Test-It -'\r\n\r\nTabExpansion2 -inputScript $script1 -cursorColumn $script1.Length | select -ExpandProperty CompletionMatches\r\n```\r\n*Result: none*\r\n\r\n### Expected Behavior\r\nTo simulate the *expected* behavior, simply remove the enum from the code and place it into a parent scope:\r\n\r\n```powershell\r\nenum Cities\r\n  {\r\n    Hannover\r\n    Redmond\r\n    NewYork\r\n  }\r\n  \r\n$script1 = '\r\n  function Test-It\r\n  {\r\n    param\r\n    (\r\n      [Cities]\r\n      $City\r\n    )\r\n\r\n    $PSBoundParameters\r\n  }\r\n  \r\n  Test-It -'\r\n\r\nTabExpansion2 -inputScript $script1 -cursorColumn $script1.Length | select -ExpandProperty CompletionMatches\r\n\r\n```\r\n*Result: Completion Match for parameter **-City***\r\n\r\n## Example 2: Corruption of Argument Completion\r\nWhen a function parameter uses the attribute [ArgumentCompleter()], the argument completion fails if the function is defined in the same script:\r\n**Actual Behavior**\r\n```powershell\r\n$script = '\r\n  function Test-It\r\n  {\r\n    param\r\n    (\r\n      [ArgumentCompleter({\"Hannover\",\"Redmond\",\"NewYork\"})]\r\n      $City\r\n    )\r\n\r\n    $PSBoundParameters\r\n  }\r\n\r\nTest-It -City '\r\n\r\nTabExpansion2 -inputScript $script -cursorColumn $script.Length | select -ExpandProperty CompletionMatches  \r\n```\r\n*Result: default path completion*\r\n\r\n### Expected Behavior\r\nTo simulate the *expected* behavior, place the function definition into the parent scope:\r\n\r\n```powershell\r\nfunction Test-It\r\n  {\r\n    param\r\n    (\r\n      [ArgumentCompleter({\"Hannover\",\"Redmond\",\"NewYork\"})]\r\n      $City\r\n    )\r\n\r\n    $PSBoundParameters\r\n  }\r\n  \r\n$script = 'Test-It -City '\r\n\r\nTabExpansion2 -inputScript $script -cursorColumn $script.Length | select -ExpandProperty CompletionMatches\r\n```\r\n*Result: Completion Matches for the three cities defined by the attribute*\r\n\r\nNote: `Register-ArgumentCompleter` is unaffected by this issue because the associated scriptblocks are defined outside the current scope.\r\n# Environment data\r\n\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I tried example 1 in WinPS 5.1 and it also fails.  I thought this might have been a regression, but it appears that has never worked?",
      "created_at": "2020-03-08T23:19:49Z",
      "updated_at": "2020-03-08T23:19:49Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "It in fact seems to be a bug carried over from the old code base. It actually surfaced in VSCode where it messes up IntelliSense but is present in ISE as well.\r\n\r\nIt is surfacing with a delay probably because it is triggered by techniques that only recently became increasingly popular and were newly added in WPS 5.",
      "created_at": "2020-03-08T23:28:12Z",
      "updated_at": "2020-03-08T23:28:12Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Note that with example one, that behavior happens whenever there is a parameter type that cannot be resolved.  That can be because an assembly that is loaded at runtime is not yet loaded, a type definition that hasn't been invoked, or even just a typo.\r\n\r\nMy guess is that type resolution throws an exception that isn't handled gracefully until a few more levels up the callstack than would be ideal for completion.\r\n\r\nI don't think example two is an unexpected limitation.  It's decidedly more difficult to implement that based purely on AST.  Once the function is already loaded into the session it becomes a lot easier.\r\n\r\nIt's a great feature request though.  I don't know exactly how feasible it is without changing a significant chunk of code, but `ArgumentCompleterAttribute` feels really inconsistent to a lot of folks.  It's very difficult to understand why it appears to only work *sometimes*.",
      "created_at": "2020-03-09T12:35:25Z",
      "updated_at": "2020-03-09T12:35:25Z"
    }
  ],
  "created_at": "2020-03-08T10:35:51Z",
  "number": 12079,
  "state": "open",
  "title": "Code completion does not complete when function is defined within the script",
  "updated_at": "2022-07-14T22:21:21Z"
}