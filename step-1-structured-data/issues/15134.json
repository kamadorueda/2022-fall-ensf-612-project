{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15134",
  "author": "Prakash82x",
  "body": "## Summary of the new feature/enhancement\r\n\r\nI was working with some API query using Invoke-WebRequest and felt the need of retrieving timestamp when a particular variable was assigned/initialized.\r\n\r\nAlhough I think there are different other workarounds available to get the date/time but I think it out of the box might be a fair idea and if it can be made available as a property/extended property of a Variable and Creation/Update timestamp of the variable can be retrieved from there.\r\n\r\n\r\n## Proposed technical implementation details : Example\r\nExample will be like this:\r\nI am getting auth token from an API which is valid for 60 minutes and assigning that to a variable, using that token I can make several other queries untill that token gets expired.\r\n\r\nUpon Every query I want to check if the token is still valid based on the Token generation time from the Variable's timestamp and if it is found that 60 minutes has passed since it was initialized then regenerate the token otherwise continue using it.\r\n\r\n\r\n",
  "closed_at": "2022-05-18T00:01:04Z",
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Setting a time stamp every time a variable is assigned would probably have some serious performance implications. It would also be somewhat awkward to use since the property would be on the PSVariable object not the value. You would probably have to do something like:\r\n```powershell\r\nif ((Get-Variable \"myvar\").TimeSet -gt $targetTime) { ... }\r\n```\r\nAs an alternative, we could add a synthetic \"@TimeFetched\" property to the objects retrieved by `Invoke-WebRequest` i.e. to the value not the variable. This might look like\r\n```powershell\r\nif ($myvar.\"@TimeFetched\" -gt $targetTime) { ... }\r\n```\r\nWould this work for you?",
      "created_at": "2021-04-02T03:25:45Z",
      "updated_at": "2021-04-02T03:25:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Example will be like this:\r\nI am getting auth token from an API which is valid for 60 minutes and assigning that to a variable, using that token I can make several other queries untill that token gets expired.\r\nUpon Every query I want to check if the token is still valid based on the Token generation time from the Variable's timestamp and if it is found that 60 minutes has passed since it was initialized then regenerate the token otherwise continue using it.\r\n\r\n@PaulHigin It is seem a scenario for your great module.",
      "created_at": "2021-04-02T06:55:50Z",
      "updated_at": "2021-04-02T06:55:50Z"
    },
    {
      "author": "Prakash82x",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Setting a time stamp every time a variable is assigned would probably have some serious performance implications. It would also be somewhat awkward to use since the property would be on the PSVariable object not the value. You would probably have to do something like:\r\n> \r\n> ```powershell\r\n> if ((Get-Variable \"myvar\").TimeSet -gt $targetTime) { ... }\r\n> ```\r\n> \r\n> As an alternative, we could add a synthetic \"@TimeFetched\" property to the objects retrieved by `Invoke-WebRequest` i.e. to the value not the variable. This might look like\r\n> \r\n> ```powershell\r\n> if ($myvar.\"@TimeFetched\" -gt $targetTime) { ... }\r\n> ```\r\n> \r\n> Would this work for you?\r\n\r\nHey Bruce, Thanks for looking into this..\r\nI agree to the point you raised regarding performance implications and that's why I mentioned if it can be made available in the extended properties of a variable or something can be thought as it (timestamp) is added as an additional object **on demand** or something at the time when variable is being initialized/assigned.\r\n\r\nFor now I can very well use workarounds like adding a custom property containing timestamp to the variable or a separate variable altogether too and that should work for me to check the validity of the token.\r\n\r\n\r\n",
      "created_at": "2021-04-05T06:50:57Z",
      "updated_at": "2021-04-05T06:50:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-18T00:01:03Z",
      "updated_at": "2022-05-18T00:01:03Z"
    }
  ],
  "created_at": "2021-04-01T09:01:31Z",
  "number": 15134,
  "state": "closed",
  "title": "Feature Request : Find TimeStamp of a Variable creation/update in PowerShell",
  "updated_at": "2022-05-18T00:01:04Z"
}