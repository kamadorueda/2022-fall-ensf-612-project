{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11942",
  "author": "iRon7",
  "body": "The `ConvertFrom-Csv` and `Import-Csv` currently only outputs `[String]` properties as [CSV lacks any type information to distinguish the string \"1\" from the number 1](https://en.wikipedia.org/wiki/Comma-separated_values). Yet the data contained in `CSV` columns is often meant to be treated as a different type, take as common example: [Sort-Object and Integers](https://stackoverflow.com/q/15040460/1701026). \r\nThis can currently be corrected with a calculated property but as it is actually a `CSV` shortcoming, it might make more sense to correct this intermediately at the beginning of the pipeline with a `-ColumnType` argument, which will allow a syntax like:\r\n\r\n**By column name:**\r\n```PowerShell\r\nImport-Csv .\\Test.csv -ColumnType @{ Name = [string], Id = [long]; Date = [datetime] } | Sort-Object Date\r\n```\r\n**By column position:**\r\n```PowerShell\r\nImport-Csv .\\Test.csv -ColumnType [string], [long], [datetime] | Sort-Object Date\r\n```\r\n<sub>(The default column type is expected to be a `[String]`)</sub>\r\n\r\nUsing a standard `[PSCustomObject]` output, this purpose doesn't appear to have an advantage with regards to memory usage, see: #8862 (some testing I did, even suggest the opposite) but in combination with the request #11941 (using a `DataTable`), it might decrease the memory usage further down to about 50%, depending of the data types used (note here that here that a `[DataTable]` doesn't support as much types as a custom PowerShell object).\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Some thought should be put in headerless csv files (such as the example I referred to [Sort-Object and Integers](https://stackoverflow.com/q/15040460/1701026)):\r\nThe `-Header` parameters could support the same format  as the purposed `-ColumnType` parameter:  a`[HashTable]` or combined array of `[String]` and `[HashTable]` types.\r\n(Where the `-Header` and `-ColumnType` parameters should than be made mutually exclusive.)\r\nThe point is, in case the `-ColumnType` parameter is used, the order of the columns is defined by the `CSV` file but in case multiple column types are provided via the `-Header` parameter, a `[Ordered]` dictionary is required:\r\n\r\n```PowerShell\r\nImport-Csv .\\Test.csv -Header [ordered]@{ Name = [string], Id = [long]; Date = [datetime] }\r\n```",
      "created_at": "2020-02-25T10:51:45Z",
      "updated_at": "2020-02-25T11:00:33Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": "IRon, you may also want to take a peek at #11754 \r\n",
      "created_at": "2020-02-25T12:48:28Z",
      "updated_at": "2020-02-25T12:48:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we say about typed columns I don't see a value for headerless. In the case we could simplify parameters.",
      "created_at": "2020-02-28T19:31:03Z",
      "updated_at": "2020-02-28T19:31:03Z"
    }
  ],
  "created_at": "2020-02-24T13:06:28Z",
  "number": 11942,
  "state": "open",
  "title": "Ability to define column types for ConvertFrom-Csv and Import-Csv",
  "updated_at": "2020-03-04T17:58:23Z"
}