{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9294",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nCurrently, piping a `FileSystemInfo` object to `Set-Location` causes it to use the `PSPath` value as-is, without resolving it to a provider path. This causes `$pwd` to not have a `Drive` property set.\r\n\r\nThis PR causes it to first resolve the PSPath as an additional step and then set the location to avoid the issue.\r\n\r\nResolves #9293.\r\n\r\n## PR Context\r\n\r\nSee #9293 for context. Thanks to @TheIncorrigible1 for finding this!\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2020-05-31T23:24:16Z",
  "comments": [
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, you are not authorized to request test failures",
      "created_at": "2019-04-04T20:40:45Z",
      "updated_at": "2019-04-04T20:40:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Patrick advised we also have `GetUnresolvedProviderPathFromPSPath` so I'm having it use that to avoid it resolving wildcards at all... I _think_ the current commit should address both your concerns. I moved it to the process block also.\r\n\r\nReally not sure what's up with the test failures though, but it seems that converting to the provider path in all cases seems to break things, but I'm really not sure _why_. \ud83d\ude41 ",
      "created_at": "2019-04-05T03:38:43Z",
      "updated_at": "2019-04-05T13:27:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please get failures",
      "created_at": "2019-04-05T17:04:34Z",
      "updated_at": "2019-04-05T17:04:34Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 26 failures in `PowerShell-CI-linux`\r\n(These are 5 of the failures)\r\n\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Validate Resolve-Path Cmdlet Parameters.Verify relative\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 2\r\nActual length:   39\r\nStrings differ at index 1.\r\nExpected: './'\r\nBut was:  '../1cd99b2f-d7e9-42ba-83b0-6471cbba01e8'\r\n------------^\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1208\r\n1208:             $relativePath | Should -BeExactly (Join-Path \".\" \"\")\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Validate Join-Path Cmdlet Parameters.Validate Resolve\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 19\r\nActual length:   50\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0'\r\nBut was:  '/tmp/1cd99b2f-d7e9-42ba-83b0-6471cbba01e8/Level1_0'\r\n-----------^\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1219\r\n1219:                 $result | Should -BeExactly \"TestDrive:/$level1_0\"\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Set-Location Cmdlets Parameters.By LiteralPath\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 19\r\nActual length:   50\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0'\r\nBut was:  '/tmp/1cd99b2f-d7e9-42ba-83b0-6471cbba01e8/Level1_0'\r\n-----------^\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1276\r\n1276:             $result.Path | Should -BeExactly $level1_0Full\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Push-Location and Pop-Location Cmdlets Parameters.Verify Push + Path\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 28\r\nActual length:   59\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0/Level2_0'\r\nBut was:  '/tmp/1cd99b2f-d7e9-42ba-83b0-6471cbba01e8/Level1_0/Level2_0'\r\n-----------^\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1301\r\n1301:             $location1.Path | Should -BeExactly $level2_0Full\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Push-Location and Pop-Location Cmdlets Parameters.Verify Push + PassThru\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 28\r\nActual length:   59\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0/Level2_0'\r\nBut was:  '/tmp/1cd99b2f-d7e9-42ba-83b0-6471cbba01e8/Level1_0/Level2_0'\r\n-----------^\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1317\r\n1317:             $location3.Path | Should -BeExactly $level2_0Full\r\n```\r\n",
      "created_at": "2019-04-05T17:04:48Z",
      "updated_at": "2019-04-05T17:04:48Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 26 failures in `PowerShell-CI-macos`\r\n(These are 5 of the failures)\r\n\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Validate Resolve-Path Cmdlet Parameters.Verify relative\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 2\r\nActual length:   39\r\nStrings differ at index 1.\r\nExpected: './'\r\nBut was:  '../0bd3b56d-6e47-4c20-9361-81e9b97ed5b8'\r\n------------^\r\nat <ScriptBlock>, /Users/vsts/agent/2.149.2/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1208\r\n1208:             $relativePath | Should -BeExactly (Join-Path \".\" \"\")\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Validate Join-Path Cmdlet Parameters.Validate Resolve\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 19\r\nActual length:   50\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0'\r\nBut was:  '/tmp/0bd3b56d-6e47-4c20-9361-81e9b97ed5b8/Level1_0'\r\n-----------^\r\nat <ScriptBlock>, /Users/vsts/agent/2.149.2/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1219\r\n1219:                 $result | Should -BeExactly \"TestDrive:/$level1_0\"\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Set-Location Cmdlets Parameters.By LiteralPath\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 19\r\nActual length:   50\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0'\r\nBut was:  '/tmp/0bd3b56d-6e47-4c20-9361-81e9b97ed5b8/Level1_0'\r\n-----------^\r\nat <ScriptBlock>, /Users/vsts/agent/2.149.2/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1276\r\n1276:             $result.Path | Should -BeExactly $level1_0Full\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Push-Location and Pop-Location Cmdlets Parameters.Verify Push + Path\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 28\r\nActual length:   59\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0/Level2_0'\r\nBut was:  '/tmp/0bd3b56d-6e47-4c20-9361-81e9b97ed5b8/Level1_0/Level2_0'\r\n-----------^\r\nat <ScriptBlock>, /Users/vsts/agent/2.149.2/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1301\r\n1301:             $location1.Path | Should -BeExactly $level2_0Full\r\n```\r\nExtended FileSystem Path/Location Cmdlet Provider Tests.Valdiate Push-Location and Pop-Location Cmdlets Parameters.Verify Push + PassThru\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 28\r\nActual length:   59\r\nStrings differ at index 0.\r\nExpected: 'TestDrive:/Level1_0/Level2_0'\r\nBut was:  '/tmp/0bd3b56d-6e47-4c20-9361-81e9b97ed5b8/Level1_0/Level2_0'\r\n-----------^\r\nat <ScriptBlock>, /Users/vsts/agent/2.149.2/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 1317\r\n1317:             $location3.Path | Should -BeExactly $level2_0Full\r\n```\r\n",
      "created_at": "2019-04-05T17:04:51Z",
      "updated_at": "2019-04-05T17:04:51Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, test results were not published for PowerShell-CI-static-analysis at vstfs:///Build/Build/19482",
      "created_at": "2019-04-05T17:04:53Z",
      "updated_at": "2019-04-05T17:04:53Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, your last commit had 67 failures in `PowerShell-CI-windows`\r\n(These are 5 of the failures)\r\n\r\nBasic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-ChildItem\r\n```powershell\r\nExpected exactly 2, but got 32.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1: line 68\r\n68:             $items.Count | Should -BeExactly 2\r\n```\r\nBasic Registry Provider Tests.Validate basic registry provider Cmdlets.Verify Get-ChildItem can get subkey names\r\n```powershell\r\nExpected exactly 2, but got 32.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1: line 75\r\n75:             $items.Count | Should -BeExactly 2\r\n```\r\nBasic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify New-ItemProperty\r\n```powershell\r\nExpected 99, but got $null.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1: line 113\r\n113:             $property.NewTestEntry | Should -Be 99\r\n```\r\nBasic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Set-ItemProperty\r\n```powershell\r\nExpected 2, but got $null.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1: line 120\r\n120:             $property.\"$testPropertyName\" | Should -Be 2\r\n```\r\nBasic Registry Provider Tests.Valdiate basic registry property Cmdlets.Verify Set-Item\r\n```powershell\r\nProvider operation stopped because the provider does not support this operation.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1: line 124\r\n124:             Set-Item -Path $testKey -Value $defaultPropertyValue\r\n\r\n```\r\n",
      "created_at": "2019-04-05T17:04:53Z",
      "updated_at": "2019-04-05T17:04:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "O.o @SteveL-MSFT either PoshChan is picking up something funky or our CI is ignoring some test failures.",
      "created_at": "2019-04-05T17:05:52Z",
      "updated_at": "2019-04-05T17:05:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry all\r\n\r\nEDIT: aww... \ud83d\ude09 ",
      "created_at": "2019-04-05T17:06:09Z",
      "updated_at": "2019-04-05T17:06:48Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, you are not authorized to request a rebuild",
      "created_at": "2019-04-05T17:06:18Z",
      "updated_at": "2019-04-05T17:06:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Really not sure what's up with the test failures though, but it seems that converting to the provider path in all cases seems to break things, but I'm really not sure why. \r\n\r\n`GetUnresolvedProviderPathFromPSPath` resolves a path to its provider path, meaning if I create a drive `Temp` using `New-PSDrive` with the `FileSystemProvider`, then a path like `Temp:\\` will be resolved to the root path of this drive by that method.\r\n\r\nI think maybe the fix should be in `SessionState.Path.SetLocation` instead of in this cmdlet.",
      "created_at": "2019-04-05T20:57:25Z",
      "updated_at": "2019-04-05T20:57:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm thinking that might be better here. I'll take a poke around there in a while. :smile:",
      "created_at": "2019-04-06T00:59:19Z",
      "updated_at": "2019-04-06T00:59:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 PoshChan has one issue where calling AzDevOps APIs returns failures, but they are old failures.  I'll need to look at the data returned to see if I can correlate the failure to a particular commit so I can have it ignore the older ones.",
      "created_at": "2019-04-06T01:03:07Z",
      "updated_at": "2019-04-06T01:03:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw it appears the error surfaces when CurrentDrive is set. It looks like `Globber.IsAbsolutePath()` doesn't set a drive name when called on a PSPath as it's designed to work on provider (drive-qualified?) paths only. See here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/1be3f4cc0e465ae11ad8e59e9060f5a59e4762eb/src/System.Management.Automation/engine/SessionStateLocationAPIs.cs#L295-L316\r\n\r\nIt looks like it should be handled in the `IsAbsolutePath()` method, but PSPath handling appears to be completely absent from that method / not handling the drive names correctly.\r\n\r\nShould we handle it there? Should it be automatically resolving PSPaths to provider / drive-qualified paths somehow? I'm not sure how to proceed here, I don't know the internal path logic well enough I think. \r\n\r\nMaybe if we had an `IsPSPath()` method somewhere in the IsAbsolutePath() method? Or even just before it, to handle that case specifically? Is there an existing method, and if not is there anything existing in the internals here that I can use to determine that or would I essentially be looking for patterns in the string to determine that?",
      "created_at": "2019-04-06T03:40:36Z",
      "updated_at": "2019-04-06T03:51:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I quickly debugged it and it looks to me the problem is here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/e299a301281e3629ad956f39166c0e0c79b1e0d1/src/System.Management.Automation/engine/SessionStateLocationAPIs.cs#L288-L292\r\n\r\nWhen it's a provider qualified path, somehow powershell is using `HiddenDrive` as the `CurrentDrive`. And by looking at `PathInfo.Drive`, it returns `null` for a hidden drive:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/e299a301281e3629ad956f39166c0e0c79b1e0d1/src/System.Management.Automation/namespaces/PathInfo.cs#L16-L30\r\n\r\nI'm not sure what this hidden drive is for ... not sure it's by design or what. More investigation on it is needed.",
      "created_at": "2019-04-08T18:43:15Z",
      "updated_at": "2019-04-08T18:43:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Cheers! I think that gives me enough to go on for the moment. I'll see if I can tunnel deep enough into this to see what on earth's going on there! \ud83d\ude02 ",
      "created_at": "2019-04-08T18:48:44Z",
      "updated_at": "2019-04-08T18:48:44Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-05-08T20:45:55Z",
      "updated_at": "2019-05-08T20:45:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan remind me in one week.",
      "created_at": "2019-06-21T01:26:55Z",
      "updated_at": "2019-06-24T17:25:40Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, all requests start with the magic word: `Please`\n\nCommands available in this repo for you:\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-06-21T01:27:11Z",
      "updated_at": "2019-06-24T17:25:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please remind me in 7 days",
      "created_at": "2019-06-21T01:27:56Z",
      "updated_at": "2019-06-21T01:27:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Have you time to continue? ",
      "created_at": "2019-09-18T15:40:44Z",
      "updated_at": "2019-09-18T15:40:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov not at the moment unfortunately. I'm not really clear on what actually needs to change here ultimately, but I'm not too far off I think.\r\n\r\nIf you'd like to take over you're more than welcome, otherwise I'll come back around to it when I wrap up my higher-priority items. \ud83d\ude42 ",
      "created_at": "2019-09-18T15:44:03Z",
      "updated_at": "2019-09-18T15:44:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Hidden drive is placeholder for provider-qualified and remote (\\\\\\server\\share)  paths.\r\nSee \r\nhttps://github.com/PowerShell/PowerShell/blob/79e80a8e06ddf286b231dc853347059f6da37d39/src/System.Management.Automation/engine/DataStoreAdapterProvider.cs#L213-L229\r\nand ProviderInfo constructor\r\nhttps://github.com/PowerShell/PowerShell/blob/79e80a8e06ddf286b231dc853347059f6da37d39/src/System.Management.Automation/engine/DataStoreAdapterProvider.cs#L412-L423\r\n\r\nIt seems the behavior is by design for provider-qualified paths.",
      "created_at": "2019-09-18T15:58:51Z",
      "updated_at": "2019-09-18T16:00:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "To a point; see @daxian-dbw's comment above. There are cases where the HiddenDrive returns `null` and breaks things, unfortunately. \ud83d\ude15 ",
      "created_at": "2019-09-18T16:00:43Z",
      "updated_at": "2019-09-18T16:00:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Above Dongbo referenced PathInfo.Drive. My comment about ProviderInfo - it is never null and it is placeholder, and it is by design.\r\n\r\nAs for original scenario we send PSObject wrapped PathInfo to Set-Location and bind PSPath to LiteralPath. As result we have a behavior that is by design too. It looks like more general issue than we thought because we use the same binding in many cmdlets.",
      "created_at": "2019-09-18T16:13:59Z",
      "updated_at": "2019-09-18T16:13:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think most other cmdlets are OK binding PSPath to LiteralPath, because they do their own normalization / resolution of the path via APIs that handle this. But yeah, it might crop up elsewhere. \ud83d\ude15 \r\n",
      "created_at": "2019-09-18T16:23:44Z",
      "updated_at": "2019-09-18T16:23:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could change binding from PSPath to FullName, I mean replacing PSPath alias with FullName for LiteralPath. This resolves the issue but I am not sure about a breaking change.",
      "created_at": "2019-09-18T17:15:38Z",
      "updated_at": "2019-09-18T17:15:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, that may well resolve the issue for the parameter binding problem. If a user directly passes a PSPath to the parameter, though, should we handle that here, or accept the PSPath as-is and simply set the location to that path regardless of the occasional oddity it causes?",
      "created_at": "2019-09-18T19:10:55Z",
      "updated_at": "2019-09-18T19:10:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 #10522 tracking this.",
      "created_at": "2019-09-19T04:07:06Z",
      "updated_at": "2019-09-19T04:07:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:57Z",
      "updated_at": "2020-05-27T02:03:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 It is a time to finish the PR or close. :-)",
      "created_at": "2020-05-31T18:02:23Z",
      "updated_at": "2020-05-31T18:02:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I've had another look here but I don't see a great way to resolve it, short of having it manually search all currently available PSDrives when it sees a provider-qualified path. I don't think that's an especially great fix, though.\r\n\r\nClosing this for now, until someone has any better ideas. \ud83d\ude42 ",
      "created_at": "2020-05-31T23:24:12Z",
      "updated_at": "2020-05-31T23:24:12Z"
    }
  ],
  "created_at": "2019-04-04T18:59:50Z",
  "number": 9294,
  "state": "closed",
  "title": ":wrench: Fix parameter bind issue for Set-Location",
  "updated_at": "2020-05-31T23:24:16Z"
}