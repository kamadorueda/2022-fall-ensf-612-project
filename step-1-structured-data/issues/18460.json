{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18460",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\n\nThe general answer to this purpose is probably: use the [`Invoke-Command`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command) cmdlet for this. but seen the amount of StackOverflow questions were people invoke the PowerShell CLI from PowerShell (-Windows or -Core), as e.g.[Passing a Scriptblock with complex Arguments to a New Powershell Instance](https://stackoverflow.com/questions/72867634/passing-a-scriptblock-with-complex-arguments-to-a-new-powershell-instance) this is not always practical. And there are several other good reasons to invoke one or the other as e.g. compatibility: [Powershell 7.2: ConvertFrom-Json - Date Handling](https://stackoverflow.com/questions/74314557/powershell-7-2-convertfrom-json-date-handling)\r\nSending and receiving complex objects to external command is known to be quiet a hassle mainly because of the (incompatible) serialization and string (quoting) interpretations. See: [assing arguments that contain quote characters](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7.2#passing-arguments-that-contain-quote-characters).\r\nBut that shouldn't be an issue between a PowerShell (-Windows or -Core) and PowerShell (-Windows or -Core).\n\n### Proposed technical implementation details (optional)\n\nA `Invoke-PowerShell` (and possibly an `Invoke-Pwsh`) might at least make things easier for invoking PowerShell.\r\n(For a prototype see: [Powershell 7.2: ConvertFrom-Json - Date Handling](https://stackoverflow.com/questions/74314557/powershell-7-2-convertfrom-json-date-handling))",
  "closed_at": "2022-11-04T16:54:13Z",
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "As commented by @mklement0:\r\n>  ago \r\n1\r\n\r\nCalling via powershell.exe is a pragmatic workaround (albeit slow and Windows-only), but note that you don't need a helper function: if you pass a script block to powershell.exe (or pwsh.exe) from PowerShell, Based64 CLIXML-based serialization happens automatically behind the scenes: try `powershell.exe -noprofile { $args | ConvertFrom-Json } -args '{ \"date\":\"2022-09-30T07:04:23.571+00:00\" }'` For that reason, I don't think there's a need for an Invoke-PowerShell cmdlet.",
      "created_at": "2022-11-04T16:54:12Z",
      "updated_at": "2022-11-04T16:54:12Z"
    }
  ],
  "created_at": "2022-11-04T11:17:44Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 18460,
  "state": "closed",
  "title": "`Invoke-PowerShell`",
  "updated_at": "2022-11-04T16:54:19Z"
}