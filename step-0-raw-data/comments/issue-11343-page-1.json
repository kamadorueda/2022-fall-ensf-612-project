[
  {
    "author_association": "COLLABORATOR",
    "body": "@SteveL-MSFT @joeyaiello My current conclusion is that we have only single way to implement cross-planform sudo - using PowerShell remoting like @anmenaga implemented Windows Compatibility.\r\nWe gathered a lot of information in #3232 and now MSFT team could have been brainstorming to make a conclusion.\r\n",
    "created_at": "2019-12-14T20:20:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565749994",
    "id": 565749994,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc0OTk5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565749994/reactions"
    },
    "updated_at": "2019-12-14T20:20:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565749994",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This has been discussed on and off.\r\n\r\nThere are a few thoughts that I haven't seen in the other thread. Since that one is focused more on the UX, I'll do the dump on implementation here.\r\n\r\nBasically because PowerShell runs everything except for native commands in-process, this is very tricky.\r\n\r\nThere are essentially two options, both with significant drawbacks.\r\n\r\n1. `sudo` becomes an alias to a remote/subprocess invocation in PowerShell to an Administrator/root process, where it runs the given command and gives back the result. This works fine for native commands, but for cmdlets only gives back deserialised objects. It also means that to make things performant we basically need to set up a persistent remote root session to host those commands. The main drawback is then the deserialisation (`sudo` cmdlets work subtly differently from non-sudo), with the two other drawbacks of having to override `sudo` (makes sense, but not ideal) and having to manage the security boundary and lifetime of the administrator remote host.\r\n\r\n2. PowerShell itself becomes a `setuid` command and `sudo` works in process as a builtin (again we must override the util), becoming an administrator process when a `sudo` command is run. The major drawbacks here are (1) being a `setuid` command makes PowerShell quite dangerous and requires authentication to use in whatever scenario and (2) upgrading the entire process to root does not cater to the abstraction of runspaces or indeed any threading at all.\r\n\r\nGiven the two options, I really don't like either of them, but certainly think (2) is the more flawed and should be excluded at the outset.\r\n\r\nThis is just a braindump off the top of my head, so feel free to share, expand on or poke holes in implementation ideas here.",
    "created_at": "2019-12-15T02:22:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565771015",
    "id": 565771015,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc3MTAxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565771015/reactions"
    },
    "updated_at": "2019-12-15T02:23:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565771015",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@rjmholt If you continue your thinking you will finish on a kind (JEA?) of  \"PowerShell remoting\" as implementation like me.\r\n\r\n1. We should have the same UX on all platforms.\r\n- We can not use Process.Start() (or Start-Process) even for native commands because on Windows new windows will be opened.\r\n2. We should run script blocks that assumes having PowerShell context\r\n- We can not use single elevated process because we need to have per user/per session/per runspace/per scope powershell context",
    "created_at": "2019-12-15T07:36:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565785361",
    "id": 565785361,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc4NTM2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565785361/reactions"
    },
    "updated_at": "2019-12-15T07:36:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565785361",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah I think we agree that the best path would be an implementation using a kind of “remoting as security boundary” architecture.\r\n\r\nThe part I don’t like about it is the lifetime of the elevated session. If we spin a new one up every time, it could be terribly slow. If we keep one open indefinitely, it leaves open a large attack surface.\r\n\r\nAnyway, @jameswtruher @paulhigin @stevel-msft might have thoughts here",
    "created_at": "2019-12-15T08:50:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565789597",
    "id": 565789597,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc4OTU5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565789597/reactions"
    },
    "updated_at": "2019-12-15T08:50:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565789597",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> If we spin a new one up every time, it could be terribly slow.\r\n\r\nYes, it is the same as \"ForEach -Parallel\" - it is slow for inappropriate scenarios but works great for target scenarios.\r\nI guess we get acceptable response time for interactive sessions (pwsh startup time is ~400 ms, with -NonInteractive it is less). For background, non-interactive scenarios I believe that using of pssudo is not right thing.",
    "created_at": "2019-12-15T18:41:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565835324",
    "id": 565835324,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTgzNTMyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565835324/reactions"
    },
    "updated_at": "2019-12-15T18:41:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565835324",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Sounds like we want `sudo` to be an entry point into a wider effort to allow offloading to and management of an elevated PowerShell worker process",
    "created_at": "2019-12-15T19:50:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-565840665",
    "id": 565840665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTg0MDY2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565840665/reactions"
    },
    "updated_at": "2019-12-15T19:50:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565840665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Windows does not allow attach elevated process to current console\r\n.Net Core (and I guess Windows API too) doesn't allow to run new process attached to the same console.\r\n> So we can not get elevated Start-Process pwsh -NoNewWindow -Credential $cred\r\n\r\nSudo implementations in the wild resolve this by spawing a new hidden process, then using the AttachConsole Api to attach the elevated process to the non-elevated caller. Check [Luke Sampson's sudo.ps1](https://github.com/lukesampson/psutils/blob/master/sudo.ps1) implementation. This doesnt work if you want to redirect StdIn/StdOut. So on my own implementation [gsudo](https://github.com/gerardog/gsudo) (windows-only) I did a workaround for this scenario capturing StdIn/Out/Err and streaming via RPC to the non-elevated instance (when redirected, as in 'gsudo dir > somefile'.\r\n",
    "created_at": "2020-01-13T18:20:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-573799877",
    "id": 573799877,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Mzc5OTg3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/573799877/reactions"
    },
    "updated_at": "2020-01-13T18:21:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/573799877",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3901474?v=4",
      "events_url": "https://api.github.com/users/gerardog/events{/privacy}",
      "followers_url": "https://api.github.com/users/gerardog/followers",
      "following_url": "https://api.github.com/users/gerardog/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerardog/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gerardog",
      "id": 3901474,
      "login": "gerardog",
      "node_id": "MDQ6VXNlcjM5MDE0NzQ=",
      "organizations_url": "https://api.github.com/users/gerardog/orgs",
      "received_events_url": "https://api.github.com/users/gerardog/received_events",
      "repos_url": "https://api.github.com/users/gerardog/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gerardog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerardog/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gerardog"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Looks like @gerardog is willing to contribute his code to a cmdlet in PowerShell (for Windows).  We should discuss the cmdlet design first.  I'm ok with a `pssudo` alias, but the cmdlet still needs a verb-noun and adding a new parameterset to `Start-Process` might not be the way to go.",
    "created_at": "2020-02-24T01:55:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-590144709",
    "id": 590144709,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE0NDcwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590144709/reactions"
    },
    "updated_at": "2020-02-24T01:55:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590144709",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'd go for something like `Invoke-ElevatedCommand` perhaps?",
    "created_at": "2020-02-24T04:31:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-590164192",
    "id": 590164192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE2NDE5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590164192/reactions"
    },
    "updated_at": "2020-02-24T04:31:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590164192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "Is there any thought of an additional common parameter to elevate a cmdlet instead of a specific cmdlet that does it?",
    "created_at": "2020-02-24T04:41:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-590165536",
    "id": 590165536,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE2NTUzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 2,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590165536/reactions"
    },
    "updated_at": "2020-02-24T04:41:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590165536",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17297466?v=4",
      "events_url": "https://api.github.com/users/gdoenlen/events{/privacy}",
      "followers_url": "https://api.github.com/users/gdoenlen/followers",
      "following_url": "https://api.github.com/users/gdoenlen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gdoenlen/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gdoenlen",
      "id": 17297466,
      "login": "gdoenlen",
      "node_id": "MDQ6VXNlcjE3Mjk3NDY2",
      "organizations_url": "https://api.github.com/users/gdoenlen/orgs",
      "received_events_url": "https://api.github.com/users/gdoenlen/received_events",
      "repos_url": "https://api.github.com/users/gdoenlen/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gdoenlen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gdoenlen/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gdoenlen"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The hidden elevated helper process should allow getting a close as possible to 'same UX on all platforms', shouldn't it? ",
    "created_at": "2020-02-24T07:43:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-590199100",
    "id": 590199100,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE5OTEwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590199100/reactions"
    },
    "updated_at": "2020-02-24T07:43:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/590199100",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12860484?v=4",
      "events_url": "https://api.github.com/users/sba923/events{/privacy}",
      "followers_url": "https://api.github.com/users/sba923/followers",
      "following_url": "https://api.github.com/users/sba923/following{/other_user}",
      "gists_url": "https://api.github.com/users/sba923/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sba923",
      "id": 12860484,
      "login": "sba923",
      "node_id": "MDQ6VXNlcjEyODYwNDg0",
      "organizations_url": "https://api.github.com/users/sba923/orgs",
      "received_events_url": "https://api.github.com/users/sba923/received_events",
      "repos_url": "https://api.github.com/users/sba923/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sba923/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sba923/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sba923"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "We definitely want pipeline support and also between cmdlets and native tools to work as expected.  We could add a `-Elevated` type switch to `Invoke-Command` and have a wrapper `pssudo` function make use of that since PowerShell aliases are a bit limited today rather than having a separate cmdlet just for sudo-type operation.  We should also keep in mind that this should work on non-Windows as well where we would have to sudo the pwsh process and handle redirection.  The limitation of deserialized objects in the pipeline vs live objects is an acceptable limitation in my mind.",
    "created_at": "2020-02-27T20:29:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592161733",
    "id": 592161733,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE2MTczMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592161733/reactions"
    },
    "updated_at": "2020-02-27T20:29:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592161733",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The limitation of deserialized objects in the pipeline vs live objects is an acceptable limitation in my mind.\r\n\r\nsudo scenario assumes executing \"a whole job\". So I guess the serialization may not be a problem because we must send/receive only data but not elevated methods .\r\n\r\nThinking about security I believe PSSudo implemented by remoting should allow only to connect to __local__ endpoint. (In the case we could use binary serialization for _data_)",
    "created_at": "2020-02-27T21:02:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592174998",
    "id": 592174998,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE3NDk5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592174998/reactions"
    },
    "updated_at": "2020-02-27T21:02:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592174998",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This looks very cool to me, but I am unclear as to what the design will be.  Will it be based on remoting or @gerardog spawning a new process?  Should we have an RFC to discuss?  I would prefer not using remoting since it adds overhead.  The serialization system can be used outside of remoting.\r\n\r\nAlso I don't like the idea of using Invoke-Command since it has so many parameter sets already.  I would prefer a new cmdlet like 'Invoke-AsElevated'.\r\n\r\nI am more concerned than @SteveL-MSFT  about returning deserialized PSObjects, and I think it may trip up a lot of users, e.g.,\r\n\r\n```powershell\r\npsudo Get-Process \"pwsh\" | Foreach-Object { $_.Kill() }\r\n```",
    "created_at": "2020-02-27T21:20:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592182115",
    "id": 592182115,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE4MjExNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592182115/reactions"
    },
    "updated_at": "2020-02-27T21:20:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592182115",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I agree that this is very nice, but I'm trying to wrap my head around a cmdlet implementation. Would there be an issue with a cmdlet using dotnet core (rather than 4.7.1) due to the \"can't attach to the console\" notes above, or would that just dictate the specific implementation.",
    "created_at": "2020-02-27T21:25:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592184155",
    "id": 592184155,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE4NDE1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592184155/reactions"
    },
    "updated_at": "2020-02-27T21:25:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592184155",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Perhaps we could find how implement \"process fork\" version on both platforms but it causes huge problems. 1. It is double work. 2. It is obviously impossible to get the same behavior on all platforms and as result 3. we will get many negative feedbacks (bug issues).\r\n\r\nIf we look .Net Core team experience they re-write some native code things on C# get same behavior on all platforms (ex., libcurl history).\r\nI would like to avoid different implementations for each platformю\r\n\r\n> I am more concerned than @SteveL-MSFT about returning deserialized PSObjects, and I think it may trip up a lot of users, e.g.,\r\n> psudo Get-Process \"pwsh\" | Foreach-Object { $_.Kill() }\r\n\r\npssudo should accept a script block and execute it elevated.\r\n\r\n\r\n",
    "created_at": "2020-02-28T15:15:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592557547",
    "id": 592557547,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjU1NzU0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592557547/reactions"
    },
    "updated_at": "2020-02-28T15:15:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592557547",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "Yes, we need double implementations (unless the double code is moved to .Net Core):\r\n\r\nOn Unix/Linux\r\n* using `sudo` means an interactive password text prompt will appear. (IMHO the preferred, standard Unix way). The user can still opt-in to configure `sudoers` for silent elevation.\r\n* using `setuid` on a helper process would be an administrative nightmare: (configuration, controlling who can and can't use the `pssudo`, requiring root access during installation to set `setuid`...)\r\n\r\nOn Windows: \r\n* Correct me if I am wrong but elevation with user and password (no UAC popup) is not possible (shouldn't be, right, otherwise would be a UAC Bypass?), unless some change is done on WinRM/loopback, and I believe that is undesirable. (I would like to hear a word from Microsoft/PowerShell team about this). And then: Is it ok/desirable to just ask for user password on a console? \r\n* A simple `Start-Process -Verb RunAs` to launch the helper process will show one UAC pop-up. Given that Remote PS Sessions already can run as admin and (i think) we are targeting local system interactive sessions only, this looks acceptable to me.\r\n\r\nThat being said, starting the elevated session will be interactive (either text or UAC), so I wonder how people will be using elevation on scripts and handle the 'interactive step'. Probably providing an easy way to fail fast if the user refuses to elevate would be a good idea:  \r\n\r\n`Start-PSElevatedSession -NonInteractive` --> Test if the elevated session is already available. Provides a way to throw 'This script requires admin privileges'.\r\n\r\nI think Microsoft should update us here on a list of what is acceptable or not to do from a security **compliance** perspective. That is required to define the user experience specs first. The technical challenges should be addressed later (e.g. if we hypothetically can't launch an elevated process in the current console we can do a workaround to attach the non-elevated into the elevated one). This team can probably get help from other MS teams to find new ways to overcome those limitations.",
    "created_at": "2020-02-28T18:25:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592662013",
    "id": 592662013,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjY2MjAxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592662013/reactions"
    },
    "updated_at": "2020-02-28T18:27:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592662013",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3901474?v=4",
      "events_url": "https://api.github.com/users/gerardog/events{/privacy}",
      "followers_url": "https://api.github.com/users/gerardog/followers",
      "following_url": "https://api.github.com/users/gerardog/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerardog/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gerardog",
      "id": 3901474,
      "login": "gerardog",
      "node_id": "MDQ6VXNlcjM5MDE0NzQ=",
      "organizations_url": "https://api.github.com/users/gerardog/orgs",
      "received_events_url": "https://api.github.com/users/gerardog/received_events",
      "repos_url": "https://api.github.com/users/gerardog/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gerardog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerardog/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gerardog"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Correct me if I am wrong but elevation with user and password (no UAC popup) is not possible (shouldn't be, right, otherwise would be a UAC Bypass?), unless some change is done on WinRM/loopback, and I believe that is undesirable. (I would like to hear a word from Microsoft/PowerShell team about this). And then: Is it ok/desirable to just ask for user password on a console?\r\n\r\nI want to point you towards this:\r\nhttps://github.com/PowerShell/PowerShell/issues/3232#issuecomment-565839733\r\nAs well as: https://github.com/PowerShell/Win32-OpenSSH/issues/1308#issuecomment-448430464\r\n\r\nKB4480116 introduced this limitation *only* for powershell, 3rd party libraries are **not** affected, therefore I'd say we should just undo that KB.",
    "created_at": "2020-02-28T23:41:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-592779806",
    "id": 592779806,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Mjc3OTgwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592779806/reactions"
    },
    "updated_at": "2020-02-28T23:54:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/592779806",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2544867?v=4",
      "events_url": "https://api.github.com/users/agowa338/events{/privacy}",
      "followers_url": "https://api.github.com/users/agowa338/followers",
      "following_url": "https://api.github.com/users/agowa338/following{/other_user}",
      "gists_url": "https://api.github.com/users/agowa338/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/agowa338",
      "id": 2544867,
      "login": "agowa338",
      "node_id": "MDQ6VXNlcjI1NDQ4Njc=",
      "organizations_url": "https://api.github.com/users/agowa338/orgs",
      "received_events_url": "https://api.github.com/users/agowa338/received_events",
      "repos_url": "https://api.github.com/users/agowa338/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/agowa338/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agowa338/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/agowa338"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I spent some time reading through the various links.  This is great investigatory work.  AFAIK there is no way to bypass UAC other than disabling it system wide, so for Windows this will have to be part of the experience.  \r\n\r\nI don't immediately see a security issue with passing an elevated console through the un-elevated console, when it is the same user only elevated.  Only admin users can elevate.  I don't know about supporting a RunAs option, where alternate credentials would be passed in, and could be a security concern.  But in any case a full security review would have to be done on the final design.\r\n\r\nAt this point, I think an RFC document should be created that outlines the feature, user experience and different design approaches.",
    "created_at": "2020-03-05T19:16:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-595399014",
    "id": 595399014,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTM5OTAxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595399014/reactions"
    },
    "updated_at": "2020-03-05T19:16:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595399014",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Only admin users can elevate. I don't know about supporting a RunAs option, where alternate credentials would be passed in, and could be a security concern.\r\n\r\nWorth noting that UAC can prompt for credentials depending on how [UAC: Behavior of the elevation prompt for standard users](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-behavior-of-the-elevation-prompt-for-standard-users) is configured.  It's pretty common to be configured as something other than \"Automatically deny elevation requests\".\r\n\r\n",
    "created_at": "2020-03-05T19:49:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-595414357",
    "id": 595414357,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTQxNDM1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595414357/reactions"
    },
    "updated_at": "2020-03-05T19:49:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595414357",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "I don't see a problem by attaching an elevated command prompt to an non elevated one in general. Also the UAC is not a security feature. There are multiple ways to bypass it in a network. Even without credential delegation.\r\n1. Do powershell remoting from A to B.\r\n2. Create a scheduled task at B (you're full admin at B, even though you're invoker at A) that runs with Administrative rights and that connects back to A and performs your action...\r\n3. Wait for that scheduled task to be executed.\r\n\r\nOr simpler using a non standard winrm client to connect via loopback to it, as mentioned in one of the links I attached earlier.\r\n\r\nAlso another thing to consider: If there are two persons, one with a limited user account and the other with an administrative one, why should the 2nd person enter his credentials into a non trusted session of the first one? This is the only case where detaching the terminal really would change anything, but the 1st user could as well just intercept the keyboard using a hardware accessory.\r\n\r\n_of topic: He has physical access and regarding Microsoft security concepts it is game over, he could even get System rights by just applying windows updates, even if bitlocker disk encryption is on, yes that vulnerability is publicly known and Microsoft refused to patch it..._\r\n\r\nback to topic what are possible threads:\r\nFor the scenario where the user is compromised using e.g. (what is currently popular?) lets say Emoted, but it was not able to get system rights yet, what could it do? Right, it could connect to the command prompt running with the same user credentials in the same session. So if we attach the administrative one it could hijack the connection. *But* with that permissions if we spawn a new console/window it would just intercept the creation of that process and append some parameters to it so that the administrator is tricked into acknowledging it...\r\n\r\nNow see how unix systems handle these threads:\r\nProcesses with user rights cannot initiate communication with the sudo process (except for stdin) which is only attached to the terminal. Therefore the administrator has to check *before* he grants access using his credentials that:\r\n1. The sudo binary is not overwritten (or use full path)\r\n2. The Terminal, or more specific the terminal emulator software is trustworthy.\r\n3. The command that he wants to elevate is trustworthy.\r\n\r\nWhat was uac designed for regarding enterprises?\r\nFrom what I've read it was designed to help admins to \"not shoot them selves into the food that easily\", e.g. \"del /S /Q C:\\\" in the search bar... Basically it provides a kind of \"-Confirm\".\r\nAnd regarding private and/or standalone computers?\r\nIt just inadvertently helps to obey good security habits of two separate user accounts for non administrative and administrative tasks. For the advantage of having separate contexts at all, because most people just have used the administrative account for everything including browsing the internet and so on.\r\n\r\nI'd be totally fine with the attach to unprivileged process solution, as it provides the same guarantee uac currently does, but also for comandline applications. Also it is a feature that could be made to be disableable, like uac.\r\n\r\nBut anyway, we do not need to start from scratch for the security part, there is already something similar that we can hook onto its called *UIAccess* *Applications*: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop\">User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop (Windows 10) - Windows security</a></strong></div><div>Best practices and more for the policy setting, User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop.</div></blockquote>",
    "created_at": "2020-03-05T20:37:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-595434883",
    "id": 595434883,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTQzNDg4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595434883/reactions"
    },
    "updated_at": "2021-04-16T03:31:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595434883",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2544867?v=4",
      "events_url": "https://api.github.com/users/agowa338/events{/privacy}",
      "followers_url": "https://api.github.com/users/agowa338/followers",
      "following_url": "https://api.github.com/users/agowa338/following{/other_user}",
      "gists_url": "https://api.github.com/users/agowa338/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/agowa338",
      "id": 2544867,
      "login": "agowa338",
      "node_id": "MDQ6VXNlcjI1NDQ4Njc=",
      "organizations_url": "https://api.github.com/users/agowa338/orgs",
      "received_events_url": "https://api.github.com/users/agowa338/received_events",
      "repos_url": "https://api.github.com/users/agowa338/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/agowa338/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agowa338/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/agowa338"
    }
  },
  {
    "author_association": "NONE",
    "body": "> I don't see a problem by attaching an elevated command prompt to an non elevated one in general. Also the UAC is not a security feature. There are multiple ways to bypass it in a network. Even without credential delegation.\r\n> \r\n> 1. Do powershell remoting from A to B.\r\n> 2. Create a scheduled task at B (you're full admin at B, even though you're invoker at A) that runs with Administrative rights and that connects back to A and performs your action...\r\n> 3. Wait for that scheduled task to be executed.\r\n> \r\n> Or simpler using a non standard winrm client to connect via loopback to it, as mentioned in one of the links I attached earlier.\r\n> \r\n> Also another thing to consider: If there are two persons, one with a limited user account and the other with an administrative one, why should the 2nd person enter his credentials into a non trusted session of the first one? This is the only case where detaching the terminal really would change anything, but the 1st user could as well just intercept the keyboard using a hardware accessory.\r\n> \r\n> _of topic: He has physical access and regarding Microsoft security concepts it is game over, he could even get System rights by just applying windows updates, even if bitlocker disk encryption is on, yes that vulnerability is publicly known and Microsoft refused to patch it..._\r\n> \r\n> back to topic what are possible threads:\r\n> For the scenario where the user is compromised using e.g. (what is currently popular?) lets say Emoted, but it was not able to get system rights yet, what could it do? Right, it could connect to the command prompt running with the same user credentials in the same session. So if we attach the administrative one it could hijack the connection. _But_ with that permissions if we spawn a new console/window it would just intercept the creation of that process and append some parameters to it so that the administrator is tricked into acknowledging it...\r\n> \r\n> Now see how unix systems handle these threads:\r\n> Processes with user rights cannot initiate communication with the sudo process (except for stdin) which is only attached to the terminal. Therefore the administrator has to check _before_ he grants access using his credentials that:\r\n> \r\n> 1. The sudo binary is not overwritten (or use full path)\r\n> 2. The Terminal, or more specific the terminal emulator software is trustworthy.\r\n> 3. The command that he wants to elevate is trustworthy.\r\n> \r\n> What was uac designed for regarding enterprises?\r\n> From what I've read it was designed to help admins to \"not shoot them selves into the food that easily\", e.g. \"del /S /Q C:\" in the search bar... Basically it provides a kind of \"-WhatIf\".\r\n> And regarding private and/or standalone computers?\r\n> It just inadvertently helps to obey good security habits of two separate user accounts for non administrative and administrative tasks. For the advantage of having separate contexts at all, because most people just have used the administrative account for everything including browsing the internet and so on.\r\n> \r\n> I'd be totally fine with the attach to unprivileged process solution, as it provides the same guarantee uac currently does, but also for comandline applications. Also it is a feature that could be made to be disableable, like uac.\r\n> \r\n> But anyway, we do not need to start from scratch for the security part, there is already something similar that we can hook onto its called _UIAccess_ _Applications_: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"https://camo.githubusercontent.com/33f806df33d5e02f85f614b0b73745ce34fcf1ac/68747470733a2f2f646f63732e6d6963726f736f66742e636f6d2f656e2d75732f6d656469612f6c6f676f732f6c6f676f2d6d732d736f6369616c2e706e67\">**[User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop (Windows 10) - Windows security](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop)**Best practices and more for the policy setting, User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop.\r\n\r\nSo, how does this enable us to elevate a running powershell session?\r\n\r\nThought. Is their a command we can run (such as \"Powershell /elevated /no-new-window) that would allow us to do the *nix  command su root to start an elevated sub-session?\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop\">User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop (Windows 10) - Windows security</a></strong></div><div>Best practices and more for the policy setting, User Account Control Allow UIAccess applications to prompt for elevation without using the secure desktop.</div></blockquote>",
    "created_at": "2020-03-05T22:05:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-595470938",
    "id": 595470938,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTQ3MDkzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595470938/reactions"
    },
    "updated_at": "2020-03-05T22:05:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595470938",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42992675?v=4",
      "events_url": "https://api.github.com/users/minecraftchest1/events{/privacy}",
      "followers_url": "https://api.github.com/users/minecraftchest1/followers",
      "following_url": "https://api.github.com/users/minecraftchest1/following{/other_user}",
      "gists_url": "https://api.github.com/users/minecraftchest1/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/minecraftchest1",
      "id": 42992675,
      "login": "minecraftchest1",
      "node_id": "MDQ6VXNlcjQyOTkyNjc1",
      "organizations_url": "https://api.github.com/users/minecraftchest1/orgs",
      "received_events_url": "https://api.github.com/users/minecraftchest1/received_events",
      "repos_url": "https://api.github.com/users/minecraftchest1/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/minecraftchest1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minecraftchest1/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/minecraftchest1"
    }
  },
  {
    "author_association": "NONE",
    "body": "Reading about UAC elevating the current shell, what about creating a new subshell, elevating that shell, running the specified command, then exiting that shell.",
    "created_at": "2021-04-13T00:31:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-818333122",
    "id": 818333122,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODMzMzEyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818333122/reactions"
    },
    "updated_at": "2021-04-13T00:31:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818333122",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42992675?v=4",
      "events_url": "https://api.github.com/users/minecraftchest1/events{/privacy}",
      "followers_url": "https://api.github.com/users/minecraftchest1/followers",
      "following_url": "https://api.github.com/users/minecraftchest1/following{/other_user}",
      "gists_url": "https://api.github.com/users/minecraftchest1/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/minecraftchest1",
      "id": 42992675,
      "login": "minecraftchest1",
      "node_id": "MDQ6VXNlcjQyOTkyNjc1",
      "organizations_url": "https://api.github.com/users/minecraftchest1/orgs",
      "received_events_url": "https://api.github.com/users/minecraftchest1/received_events",
      "repos_url": "https://api.github.com/users/minecraftchest1/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/minecraftchest1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minecraftchest1/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/minecraftchest1"
    }
  },
  {
    "author_association": "NONE",
    "body": "@minecraftchest1 UAC doesn't allow you to pass input into the new shell. You could only spawn a new window. Or alternatively you would need to go through e.g. IPC to let both processes talk to each other. It's not as simple as \"just spawning\" another shell.\r\n\r\n> So, how does this enable us to elevate a running powershell session?\r\n\r\nIt won't, I was talking about why UAC is **NOT** a security boundary and related security concerns...",
    "created_at": "2021-04-16T03:25:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-820879839",
    "id": 820879839,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDg3OTgzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/820879839/reactions"
    },
    "updated_at": "2021-04-16T03:29:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/820879839",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2544867?v=4",
      "events_url": "https://api.github.com/users/agowa338/events{/privacy}",
      "followers_url": "https://api.github.com/users/agowa338/followers",
      "following_url": "https://api.github.com/users/agowa338/following{/other_user}",
      "gists_url": "https://api.github.com/users/agowa338/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/agowa338",
      "id": 2544867,
      "login": "agowa338",
      "node_id": "MDQ6VXNlcjI1NDQ4Njc=",
      "organizations_url": "https://api.github.com/users/agowa338/orgs",
      "received_events_url": "https://api.github.com/users/agowa338/received_events",
      "repos_url": "https://api.github.com/users/agowa338/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/agowa338/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agowa338/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/agowa338"
    }
  },
  {
    "author_association": "NONE",
    "body": "So no matter how it gets done, it will require a modification to windows to do it cleanly?\n\n\n",
    "created_at": "2021-04-16T14:58:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-821237319",
    "id": 821237319,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTIzNzMxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821237319/reactions"
    },
    "updated_at": "2021-04-16T14:58:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821237319",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42992675?v=4",
      "events_url": "https://api.github.com/users/minecraftchest1/events{/privacy}",
      "followers_url": "https://api.github.com/users/minecraftchest1/followers",
      "following_url": "https://api.github.com/users/minecraftchest1/following{/other_user}",
      "gists_url": "https://api.github.com/users/minecraftchest1/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/minecraftchest1",
      "id": 42992675,
      "login": "minecraftchest1",
      "node_id": "MDQ6VXNlcjQyOTkyNjc1",
      "organizations_url": "https://api.github.com/users/minecraftchest1/orgs",
      "received_events_url": "https://api.github.com/users/minecraftchest1/received_events",
      "repos_url": "https://api.github.com/users/minecraftchest1/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/minecraftchest1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minecraftchest1/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/minecraftchest1"
    }
  },
  {
    "author_association": "NONE",
    "body": "@minecraftchest1 The cleanest implementation would be an addition to windows internals it self. It would provide the most standardized way of handling this especially because this is a core functionality that not only PowerShell is looking for.\r\n\r\nBut that said there are different ways to implement it.\r\n1. The pipe based one I explained above.\r\n2. Create a service that either runs with LocalSystem privileges or with an user having SeTcbPrivilege (Act as part of the operating system) and that service than could perform the call to GetTokenInformation/SetTokenInformation with TokenLinkedToken (or even full impersonation) on behalf of the actual application and therefore bypass UAC (the official way) and elevating the already running application/thread (after checking permissions of course).\r\n\r\nEdit:\r\nAfter thinking a bit more about this. It doesn't work quite that easily as windows doesn't allow to change/overwrite the primary token of a process after it was launched (maaybe a kernel driver could do that though). But even that we could work around. But than we'd have two use cases:\r\n1. Elevating native applications\r\n2. Elevating PowerShell cmdlets/functions/Win32-Api-Calls/…\r\n\r\nFor the 1st one we could just use:\r\n1. Invoker process calls \"sudo notepad.exe\"\r\n2. sudo creates a new but suspended process for notepad.exe and invokes an IPC call to the helper process (running with SeTcbPrivileges, SeDebugPrivilege, SeCreateTokenPrivilege and SeAssignPrimaryTokenPrivilege).\r\n3. The helper process than duplicates the token of the calling process checks its privileges according to predefined rules for elevation (like /etc/sudoers on linux) than either crafts a new one (if another user should be impersonated) or just uses the linked token (if the user is an administrator but the process is currently running as invoker).\r\n4. The helper process than injects the token into the suspended process using the token acquired in the previous step.\r\n5. The helper process than resumes the suspended process and returns control back to the caller.\r\n6. The sudo process now acts as a proxy in between the unprivileged and the privileged process and forwards stdin/stdout/stderr.\r\n\r\nFor the 2nd one we would have to do a bit more advanced handling:\r\n1. Modify the PSSession stuff in powershell to be an interface (e.g. so that *-PSSession is transport-agnostic and that anyone can implement new kinds of transportation).\r\n2. Create a new kind of PSSession (in addition to SSH and WinRM) that will connect two PowerShell processes one being elevated and the other one not.\r\n3. Call `sudo powershell-IPCSession.exe` (for details about what sudo does see above) in the background\r\n4. `powershell-IPCSession.exe` once started spawns a new powershell session and connects it to the named pipe created by the non privileged process.\r\n5. The non privileged process now can perform elevated actions within this session via the IPC pipe.",
    "created_at": "2021-04-17T08:49:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-821791293",
    "id": 821791293,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTc5MTI5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821791293/reactions"
    },
    "updated_at": "2021-04-17T11:05:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821791293",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2544867?v=4",
      "events_url": "https://api.github.com/users/agowa338/events{/privacy}",
      "followers_url": "https://api.github.com/users/agowa338/followers",
      "following_url": "https://api.github.com/users/agowa338/following{/other_user}",
      "gists_url": "https://api.github.com/users/agowa338/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/agowa338",
      "id": 2544867,
      "login": "agowa338",
      "node_id": "MDQ6VXNlcjI1NDQ4Njc=",
      "organizations_url": "https://api.github.com/users/agowa338/orgs",
      "received_events_url": "https://api.github.com/users/agowa338/received_events",
      "repos_url": "https://api.github.com/users/agowa338/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/agowa338/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agowa338/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/agowa338"
    }
  },
  {
    "author_association": "NONE",
    "body": "I understand. I shared this with the ReactOS project to ask what they could do. I personally don't have the patience to do things like this.",
    "created_at": "2021-04-17T13:58:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-821826911",
    "id": 821826911,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTgyNjkxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821826911/reactions"
    },
    "updated_at": "2021-04-17T13:58:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821826911",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42992675?v=4",
      "events_url": "https://api.github.com/users/minecraftchest1/events{/privacy}",
      "followers_url": "https://api.github.com/users/minecraftchest1/followers",
      "following_url": "https://api.github.com/users/minecraftchest1/following{/other_user}",
      "gists_url": "https://api.github.com/users/minecraftchest1/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/minecraftchest1",
      "id": 42992675,
      "login": "minecraftchest1",
      "node_id": "MDQ6VXNlcjQyOTkyNjc1",
      "organizations_url": "https://api.github.com/users/minecraftchest1/orgs",
      "received_events_url": "https://api.github.com/users/minecraftchest1/received_events",
      "repos_url": "https://api.github.com/users/minecraftchest1/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/minecraftchest1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minecraftchest1/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/minecraftchest1"
    }
  },
  {
    "author_association": "NONE",
    "body": "I perfer to open UAC popup on Windows personally, just like the installers.\r\nIn my envisage, `pssudo` have following design:\r\n- Start an evaluated pwsh process by `sudo pwsh ...` or RunAs equalvent, and specify IPC channel, lifetime(if we have subsequent command to sudo), communication token(maybe not necessary), etc. on command line parameters. For example `sudo pwsh -SudoMode -SudoLifetime 5min -SudoToken 1234567890abcdef  -SudoIpcPipe pipename`\r\n- Send variables and command to elevated instance through IPC channel, and receive result.\r\n- Signal the elevated instance to exit, if subsequnt elevated commands are executed.",
    "created_at": "2022-05-27T17:28:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-1139833203",
    "id": 1139833203,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "IC_kwDOAvT7bc5D8Hlz",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139833203/reactions"
    },
    "updated_at": "2022-05-27T17:29:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139833203",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/43724908?v=4",
      "events_url": "https://api.github.com/users/Akarinnnnn/events{/privacy}",
      "followers_url": "https://api.github.com/users/Akarinnnnn/followers",
      "following_url": "https://api.github.com/users/Akarinnnnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/Akarinnnnn/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Akarinnnnn",
      "id": 43724908,
      "login": "Akarinnnnn",
      "node_id": "MDQ6VXNlcjQzNzI0OTA4",
      "organizations_url": "https://api.github.com/users/Akarinnnnn/orgs",
      "received_events_url": "https://api.github.com/users/Akarinnnnn/received_events",
      "repos_url": "https://api.github.com/users/Akarinnnnn/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Akarinnnnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Akarinnnnn/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Akarinnnnn"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hi! just wanted to let you know that **`gsudo`** ships with an [**`Invoke-gsudo`**](https://gerardog.github.io/gsudo/docs/usage/powershell#invoke-gsudo-cmdlet) cmdlet to elevate like the `pssudo` proposal.\r\n\r\nIt runs a `ScriptBlock` on an elevated PS instance, so it is a different lexical scope: the `ScriptBlock` can't access your `$variables`, but you can use `$using:variable` to apply it´s serialized value. Pipeline inputs and outputs are automatically serialized and deserialized.\r\n\r\nExample usage from the [docs](https://gerardog.github.io/gsudo/docs/usage/powershell#invoke-gsudo-cmdlet).\r\n\r\n> ``` powershell\r\n> # Accepts pipeline input.\r\n> Get-process SpoolSv | Invoke-gsudo { Stop-Process -Force }\r\n> \r\n> # Variable usage\r\n> $folder = \"C:\\ProtectedFolder\"\r\n> Invoke-gsudo { Remove-Item $using:folder }\r\n> \r\n> # The result is serialized (PSObject) with properties.\r\n> (Invoke-gsudo { Get-ChildItem $using:folder }).LastWriteTime\r\n> ```\r\n> \r\n\r\n(The cmdlet is optional, you can still just prepend `gsudo` to [elevate a command string](https://gerardog.github.io/gsudo/docs/usage/powershell))\r\n\r\nSorry if I am spamming this thread. I thought that mentioning it here once was on-topic. My apologies if it's not.\r\nI created [this discussion](https://github.com/gerardog/gsudo/discussions/139) at gsudo's repo for anyone interested in discussing the cmdlet design, usage, troubleshooting, etc.",
    "created_at": "2022-05-27T18:32:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11343#issuecomment-1139926854",
    "id": 1139926854,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11343",
    "node_id": "IC_kwDOAvT7bc5D8edG",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139926854/reactions"
    },
    "updated_at": "2022-05-27T18:41:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139926854",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3901474?v=4",
      "events_url": "https://api.github.com/users/gerardog/events{/privacy}",
      "followers_url": "https://api.github.com/users/gerardog/followers",
      "following_url": "https://api.github.com/users/gerardog/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerardog/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gerardog",
      "id": 3901474,
      "login": "gerardog",
      "node_id": "MDQ6VXNlcjM5MDE0NzQ=",
      "organizations_url": "https://api.github.com/users/gerardog/orgs",
      "received_events_url": "https://api.github.com/users/gerardog/received_events",
      "repos_url": "https://api.github.com/users/gerardog/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gerardog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerardog/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gerardog"
    }
  }
]
