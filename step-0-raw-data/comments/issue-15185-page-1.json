[
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah struct enumerators are going to be real inconsistent.  The engine is probably copying the struct to the variable and not retrieving it.\r\n\r\nEven though the engine is almost definitely referencing the boxed version (via `IEnumerator` or similar), `PSVariable` has some special logic to copy mutable structs.",
    "created_at": "2021-04-08T15:52:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-815938518",
    "id": 815938518,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTkzODUxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815938518/reactions"
    },
    "updated_at": "2021-04-08T15:52:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815938518",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I don't know why, but the Pester test from the old repro step gives me different results, on both 7.1.3 and 7.2.0-preview.6:\r\n```\r\nDescribing $switch variable\r\n  [+] Handles array 68ms\r\n  [-] Handles file 54ms\r\n    Expected @(2, 3), but got '2'.\r\n    54:     $output | Should -be 2, 3\r\n  [+] Handles pipeline 6ms\r\n```\r\nBut when I run the 'pipeline' part separately, I do get `2,1`, which means the Pester test should have failed :/\r\n\r\nBesides, for `switch (file)`, `$switch` is actually unset (`$null`), but the test doesn't reflect that correctly because there is an outer `switch` statement and `$switch` was set for the outer switch.\r\n\r\nGiven the above issues with the repro steps, I will update the repro steps to split it into 3, for array, file, and pipeline respectively.",
    "created_at": "2021-06-24T16:03:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-867762609",
    "id": 867762609,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Nzc2MjYwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/867762609/reactions"
    },
    "updated_at": "2021-06-24T20:32:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/867762609",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "For `switch -file`, I think it's by design to not set `$switch`. The file content is read line by line, and each line is fed to the test clause after read it from the file. We should update the help doc to capture this.\r\n\r\nFor `switch ($list)`, like @SeeminglyScience said, it's because the enumerator is a value type, but I observed different behaviors between when the `switch` statement is in a local scope and when it's in the global scope. See below code snippets:\r\n\r\n```\r\n### make $switch unoptimized (by running directly in global scope) -- will store in PSVariable ###\r\n\r\n$testData = 1, 2, 3, 4\r\n$switchIsNull = $true\r\n\r\n$list = [System.Collections.Generic.List[object]]::new()\r\n$list.AddRange($testData)\r\n$output = switch ($list) {\r\n    (2) {\r\n        $_\r\n        $switchIsNull = $null -eq $switch\r\n        if ($switch -and $switch.MoveNext()) {\r\n            $switch.Current\r\n        }\r\n    }\r\n}\r\n$output\r\n> 2\r\n> 1\r\n\r\n### ====== Versus ====== ###\r\n\r\n### Make $switch optimized (by running within a new local scope) -- will store in local tuples ###\r\n\r\n& {\r\n    $testData = 1, 2, 3, 4\r\n    $switchIsNull = $true\r\n\r\n    $list = [System.Collections.Generic.List[object]]::new()\r\n    $list.AddRange($testData)\r\n    $output = switch ($list) {\r\n        (2) {\r\n            $_\r\n            $switchIsNull = $null -eq $switch\r\n            if ($switch -and $switch.MoveNext()) {\r\n                $switch.Current\r\n            }\r\n        }\r\n    }\r\n    \r\n    $output\r\n}\r\n> 2\r\n> 3\r\n```\r\nAs is called out in the code snippets, the difference is [how `$switch` is stored](https://github.com/PowerShell/PowerShell/blob/170a226689f8d1d095d74be8d1f40907b3961d75/src/System.Management.Automation/engine/parser/Compiler.cs#L5196-L5203):\r\n- when it's stored in `PSVariable`, we got a copy of the value type enumerator, and thus see `2, 1` as the output\r\n- when it's stored in local tuples, it looks it's referencing the same boxed value of the enumerator, and thus we see `2, 3` as the output.",
    "created_at": "2021-06-24T21:52:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-867975329",
    "id": 867975329,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Nzk3NTMyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/867975329/reactions"
    },
    "updated_at": "2021-06-25T15:56:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/867975329",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> For `switch -file`, I think it's by design to not set `$switch`. The file content is read line by line, and each line is fed to the test clause after read it from the file. We should update the help doc to capture this.\r\n\r\n@bpayette Can you please take a look and see if you agree? Thanks",
    "created_at": "2021-06-24T23:27:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-868025403",
    "id": 868025403,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODAyNTQwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868025403/reactions"
    },
    "updated_at": "2021-06-24T23:27:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868025403",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> `### Running in global scope, and thus $switch is unoptimized -- will store in PSVariable ###`\r\n\r\nSmall point of clarification, it's unoptimized due to dot sourcing rather than the specific scope. e.g. you can probably see similar behavior with `& { . { <# repro code #> } }`\r\n",
    "created_at": "2021-06-25T00:14:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-868088982",
    "id": 868088982,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODA4ODk4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868088982/reactions"
    },
    "updated_at": "2021-06-25T00:14:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868088982",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "PowerShell uses optimized compilation if\r\n1. it's not in debugging, AND\r\n2. it's running in a new local scope (a new local scope is created for the invocation)\r\n\r\nRunning something directly in the global scope is an easy way to make it unoptimized.\r\n\r\n[update] updated the comments to the following, and hope that makes it more clear that the behavior difference is caused by whether the script block is compiled with optimization or not.\r\n> `### make $switch unoptimized (by running directly in global scope) -- will store in PSVariable ###`\r\n> `### Make $switch optimized (by running within a new local scope) -- will store in local tuples ###`\r\n\r\nThis also explains why the `[+] Handles pipeline 6ms` test passed for me when running the original repro steps :)",
    "created_at": "2021-06-25T00:34:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-868096108",
    "id": 868096108,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODA5NjEwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868096108/reactions"
    },
    "updated_at": "2021-06-25T16:03:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868096108",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah, I think @SeeminglyScience was just clarifying that the global scope is not the only way to have this problem, so any fix needs to be aware that non-global scopes can also end up unoptimized via dot sourcing, which is fairly common for (for example) importing scripts into another file to reuse functions/variables, etc.",
    "created_at": "2021-06-25T15:24:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-868596618",
    "id": 868596618,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODU5NjYxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868596618/reactions"
    },
    "updated_at": "2021-06-25T15:24:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868596618",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "From a user's perspective, it is just as useful to be able to skip some input when it is a file, so I think we should strive to fix this for `-file` as well.",
    "created_at": "2021-07-05T14:31:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-874158106",
    "id": 874158106,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDE1ODEwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/874158106/reactions"
    },
    "updated_at": "2021-07-05T14:31:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/874158106",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The engine could do it's own sort of boxing for every enumerable.  Maybe a class like this:\r\n\r\n```csharp\r\npublic class PSEnumerator : IEnumerator\r\n{\r\n    private IEnumerator _base;\r\n\r\n    public object Current => _base.Current;\r\n\r\n    public bool MoveNext() => _base.MoveNext();\r\n\r\n    // etc\r\n}\r\n```\r\n\r\nThere would be a performance hit for sure.  But the only way I can think of to solve this is to make sure all references are of the same boxed copy which will be very difficult without something like this.  `PSVariable` will always force a copy for mutable structs.",
    "created_at": "2021-07-05T23:38:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-874369586",
    "id": 874369586,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDM2OTU4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/874369586/reactions"
    },
    "updated_at": "2021-07-05T23:38:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/874369586",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > For `switch -file`, I think it's by design to not set `$switch`. The file content is read line by line, and each line is fed to the test clause after read it from the file. We should update the help doc to capture this.\r\n> \r\n> @bpayette Can you please take a look and see if you agree? Thanks\r\n\r\n@daxian-dbw  Actually `$switch` with `-file` doesn't work because I never got around to implementing it in V1 and it never showed up on the radar again.  Implementing it would be a good thing.\r\n\r\n@powercode WRT skipping lines, while `$switch` doesn't currently work with `-file`,  as a workaround, you can just not match a line and continue iterating:\r\n```powershell\r\n# Return all the lines containing  \"^ *function\"\r\nswitch -file $profile -regex { \"^ *function\" { $_ } }\r\n```\r\nIf you want to skip (or keep) multiple lines, you can do something like:\r\n```powershell\r\n# Return the function line followed by some context lines (doesn't work for short functions)\r\nswitch -file $profile -regex { {$num} {$num--; \">> $_\"}  \"^ *function\" { $num = 3; $_ } }\r\n```\r\nYou could also use the `continue` keyword to skip to the next line. (I'm sure you know all this but others might not).",
    "created_at": "2021-07-21T23:32:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-884563314",
    "id": 884563314,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "IC_kwDOAvT7bc40uV1y",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/884563314/reactions"
    },
    "updated_at": "2021-07-21T23:32:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/884563314",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "We discussed this in the working group meeting (7/22/21) and decided that there are two issues here:\r\n- we agree that using `$switch` with `-file` should be supported. I have opened  https://github.com/PowerShell/PowerShell/issues/15821 and it's marked `UpForGrabs`\r\n- this issue (out of sync struct enumerators in `$switch`) is a bug - also marked `UpForGrabs`",
    "created_at": "2021-07-23T00:27:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15185#issuecomment-885322741",
    "id": 885322741,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15185",
    "node_id": "IC_kwDOAvT7bc40xPP1",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/885322741/reactions"
    },
    "updated_at": "2021-07-23T00:27:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/885322741",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  }
]
