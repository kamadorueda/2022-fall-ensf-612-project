[
  {
    "author_association": "COLLABORATOR",
    "body": "@rjmholt @daxian-dbw @lzybkr The goal with classes is to be **_substantially more rigorous_** than normal PowerShell. We wanted to catch as many errors at compile time as possible. If you have an unresolved type in a method at compile time, then add the necessary `using module` statement so the type resolves. That way you won't have an unresolved type exception at runtime. Dongbo questioned the inconsistency with commands which are resolved at runtime. I don't know - maybe we should make you add `using module` statements for cmdlets that aren't part of the PowerShell core.",
    "created_at": "2018-04-24T17:23:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384013333",
    "id": 384013333,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDAxMzMzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384013333/reactions"
    },
    "updated_at": "2018-04-24T17:23:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384013333",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay \r\n> I don't know - maybe we should make you add `using module` statements for cmdlets that aren't part of the PowerShell core.\r\n\r\nLets say I have the following `MyModule.psm1`:\r\n\r\n```powershell\r\nEnum MyEnum {\r\n    A\r\n    B\r\n}\r\n\r\nclass MyClass {\r\n    [MyEnum]$Prop1\r\n\r\n    MyClass () {\r\n        $This.Prop1 = Get-MyEnumPrivate\r\n    }\r\n}\r\n\r\nfunction Get-MyClassPublic {\r\n    [CmdletBinding()]\r\n    [OutputType([MyClass])]\r\n    param ()\r\n    end {\r\n        [MyClass]::New()\r\n    }\r\n}\r\nExport-ModuleMember -Function Get-MyClassPublic\r\n\r\nfunction Get-MyEnumPrivate {\r\n    [CmdletBinding()]\r\n    [OutputType([MyEnum])]\r\n    param ()\r\n    end {\r\n        [MyEnum]::B\r\n    }\r\n}\r\n```\r\n\r\nIf checking for unresolved commands and compile time resulted in an error, would that mean module authors would now need to ensure the private functions a method consumes exists or is defined before the class is compiled? That would seem troubling.",
    "created_at": "2018-04-24T17:40:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384018689",
    "id": 384018689,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDAxODY4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384018689/reactions"
    },
    "updated_at": "2018-04-24T17:40:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384018689",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Why? It's already the case for functions i.e. functions must be defined before they can be used. Alternatively we could build the AST for the module, find all the function definitions in the ast and then check the methods to make sure all of the directly called functions are defined, either in the module or through `using module` statements. And for dynamic dispatches, you could still use the call (`&`) operator. \r\n",
    "created_at": "2018-04-25T00:16:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384120137",
    "id": 384120137,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyMDEzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384120137/reactions"
    },
    "updated_at": "2018-04-25T00:16:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384120137",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay \r\n> It's already the case for functions i.e. functions must be defined before they can be used.\r\n\r\nPerhaps I'm misunderstanding here, but weren't you suggesting with this \r\n\r\n> I don't know - maybe we should make you add using module statements for cmdlets that aren't part of the PowerShell core.\r\n\r\nThat the PowerShell classes would error at compile time if a method body contained a function that is not already defined? That is a different from a function calling another function at runtime. I can define a function that calls another function that is not yet defined and that will only cause an error at runtime. it does not, however, cause an error at definition time.\r\n\r\n> Alternatively we could build the AST for the module, find all the function definitions in the ast and then check the methods  [snip]\r\n\r\nYes. That's where I was going with this, but I just wanted clarity first. ",
    "created_at": "2018-04-25T00:30:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384122488",
    "id": 384122488,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyMjQ4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384122488/reactions"
    },
    "updated_at": "2018-04-25T00:30:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384122488",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> That the PowerShell classes would error at compile time if a method body contained a function that is not already defined?\r\n\r\nRight. This is different than the dynamic behaviour of functions but we've had a lot of asks for essentially static function resolution at compile time. (I implemented it once to see if it would make dispatch faster - at the time it didn't). Since we've had this idea that classes would exhibit more traditional programming language semantics, having static function resolution seems appropriate.\r\n",
    "created_at": "2018-04-25T00:39:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384123796",
    "id": 384123796,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyMzc5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384123796/reactions"
    },
    "updated_at": "2018-04-25T00:39:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384123796",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "So long as the module author doesn't need to care too deeply about the order in which the Classes, Enums, and functions are defined in the module, I'm on board with it being stricter. ",
    "created_at": "2018-04-25T01:02:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-384127120",
    "id": 384127120,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyNzEyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384127120/reactions"
    },
    "updated_at": "2018-04-25T01:02:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384127120",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Being strict is fine, but if we have to start being incredibly picky about the order of definition it would quickly become nothing more than a nuisance. So... yes go for it.",
    "created_at": "2018-08-14T14:47:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6722#issuecomment-412898344",
    "id": 412898344,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6722",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjg5ODM0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/412898344/reactions"
    },
    "updated_at": "2018-08-14T14:47:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/412898344",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
