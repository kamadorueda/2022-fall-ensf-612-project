[
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 If you add a valid initializer then it's fine\r\n```powershell\r\nPSCore (2:59) >  Invoke-Expression 'param([ValidateSet(\"one\", \"two\")] $foo = \"one\") \"hi\"'\r\nhi\r\n```\r\nNote that the behaviour is the same with the `InvokeScript` method:\r\n```powershell\r\n$ExecutionContext.InvokeCommand.InvokeScript('param([ValidateSet(\"one\", \"two\")] $foo) \"hi\"')\r\n```\r\nas well as\r\n```powershell\r\n{param([ValidateSet(\"one\", \"two\")] $foo) \"hi}.Invoke()\r\n```\r\nWhy the error isn't raised when running a script does warrant further investigation.",
    "created_at": "2019-01-29T05:47:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458415636",
    "id": 458415636,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQxNTYzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458415636/reactions"
    },
    "updated_at": "2019-01-29T05:47:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458415636",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@BrucePay that discrepancy is weird. This pattern of declaring a parameter with a validation attribute and then **not** giving it a default value is pretty common and has been the way it is understood to work for a long time. \r\n\r\nI think the better question is why is this error appearing in this context when this pattern has been used for a long time now in declaring parameters. :confused:",
    "created_at": "2019-01-29T11:14:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458502347",
    "id": 458502347,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODUwMjM0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458502347/reactions"
    },
    "updated_at": "2019-01-29T11:14:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458502347",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The scenarios that fail use `ScriptBlock.InvokeWithPipeImpl` (or any of the other `*Invoke*` methods that eventually hit it)\r\n\r\nThe scenarios that don't fail are from a compiled command AST, which creates a [command processor instead](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L93).\r\n\r\nMore specifically, [here's the line from the `InvokeWithPipe` code path where it fails](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L1269).  I believe it should use `PSVariable.AddParameterAttributesNoChecks` instead of that constructor.\r\n\r\n**Note** Same thing happens with the `Where`/`ForEach` magic methods as well as `ForEach-Object`",
    "created_at": "2019-01-29T13:31:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458540130",
    "id": 458540130,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODU0MDEzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458540130/reactions"
    },
    "updated_at": "2019-01-29T14:56:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458540130",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @vexx32 and @SeeminglyScience.\r\n\r\n@BrucePay:\r\n\r\n@vexx32 is correct that not specifying a value has always worked and should work in all situations.\r\nIn fact, even specifying an _invalid_ default value has always worked:\r\n\r\n```powershell\r\nPS> . { param([ValidateSet(\"one\", \"two\")] $foo = \"invalid\") $foo }\r\ninvalid\r\n```\r\n\r\nAlso, the fact that `& ([scriptblock]::Create('param([ValidateSet(\"one\", \"two\")] $foo = \"invalid\") $foo'))')` works fine too supports @SeeminglyScience's findings.\r\n\r\nI haven't delved into the code, but, functionally, it seems that the default value / lack thereof is validated when it shouldn't be.",
    "created_at": "2019-01-29T14:34:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458561904",
    "id": 458561904,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODU2MTkwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458561904/reactions"
    },
    "updated_at": "2019-01-29T14:35:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458561904",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thinking about this some more, based on @BrucePay's response and @SeeminglyScience's findings:\r\n\r\n* It sounds like the - sensible - original design intent was indeed to check whether a validation-constrained parameter's default value passes the validation and to complain at parse time, if not.\r\n\r\n * Currently only the `Invoke-Expression` code path enforces that check, but it does so _overzealously_, because _not using a default value at all_ should definitely be considered acceptable.\r\n\r\n* Conversely, the fact that regular invocation - perhaps accidentally - _bypass_ the check  opened the door for behavior that is arguably _too permissive_:\r\n\r\n   * As demonstrated, default values that are _invalid_ in terms of the parameter's validation attributes are happily accepted.\r\n\r\nI see two possible resolutions:\r\n\r\n* Make `Invoke-Expression` invocations as permissive as the AST-based invocations.\r\n\r\n* Fix the `Invoke-Expression` invocations to accept the case where a validation-constrained parameter has _no_ default value - while still enforcing the validation of default values -  _and make AST-based invocations do the same_.\r\n\r\n   * Caveat: Technically, that would be a _breaking change_, as it is conceivable that there are functions out there that use an invalid default value as an _explicit_ signal that no argument was passed, along the lines of: `. { param([ValidateSet(\"one\", \"two\")] $foo=\"<none>\") $foo }`\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-01-30T14:55:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458973228",
    "id": 458973228,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk3MzIyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458973228/reactions"
    },
    "updated_at": "2019-01-30T14:55:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458973228",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 I believe it's just a bug.  I think the `ScriptBlock.InvokeWithPipeImpl` code path should just use the `PSVariable.AddParameterAttributesNoChecks` method, like the AST compiler code path already does.",
    "created_at": "2019-01-30T15:21:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458983439",
    "id": 458983439,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk4MzQzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458983439/reactions"
    },
    "updated_at": "2019-01-30T15:21:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458983439",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SeeminglyScience: That's definitely the most straightforward way to resolve this issue.\r\n\r\nHowever, the question is whether we see value in _preventing invalid default values_, which currently doesn't happen (and the bug fix wouldn't give us).\r\n\r\nI personally see value in that (e.g., during refactoring of a validation set you may forget to update the default value accordingly),  but there are two considerations:\r\n\r\n* backward compatibility, as stated above\r\n\r\n* performance (introducing additional checks; seemingly even script blocks for `ValidateScript` attributes are executed during the validation; e.g.: `iex 'param([ValidateScript({ $_ -eq \"A\" })] $foo=\"B\") $foo'`)\r\n\r\n",
    "created_at": "2019-01-30T15:33:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458987880",
    "id": 458987880,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk4Nzg4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458987880/reactions"
    },
    "updated_at": "2019-01-30T15:33:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458987880",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 while I do agree that preventing invalid default values is probably a good idea &mdash; after all, one can generally check `$PSBoundParameters.ContainsKey()` if there is a need to verify if a particular parameter is supplied &mdash; I think it would be best if that were questioned in a separate issue, rather than attempting to answer both questions in this one issue. 🙂 ",
    "created_at": "2019-01-30T15:38:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458989811",
    "id": 458989811,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk4OTgxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458989811/reactions"
    },
    "updated_at": "2019-01-30T15:38:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458989811",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @vexx32 - please see #8795\r\n",
    "created_at": "2019-01-30T15:58:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-458998373",
    "id": 458998373,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk5ODM3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458998373/reactions"
    },
    "updated_at": "2019-01-30T15:58:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/458998373",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Also interestingly it seems that if you declare a parameter with validation, then change the value of that variable inside the script to something that is _not_ a valid value; it will throw this exception.\r\n\r\ne.g.\r\n\r\nSave this as a file and execute, supplying one of the three _valid_ options for this parameter [ biff, bash, bosh ];\r\n\r\n```PowerShell\r\n[Cmdletbinding()]\r\nParam(\r\n    [Parameter(Mandatory=$True)]\r\n    [ValidateSet(\"biff\",\"bash\",\"bosh\")]\r\n    [String]$Word\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\";\r\nWrite-Host \"Let's give this thing something to do\";\r\n\r\n$Word = \"boosh\"; # This will throw an exception\r\n```\r\naaand..\r\n```\r\nPS C:\\DevOps\\Snips> .\\param-validation.ps1 biff\r\nLet's give this thing something to do\r\nC:\\DevOps\\Snips\\param-validation.ps1 : The variable cannot be validated because the value boosh is not a valid value for the Word variable.\r\nAt line:1 char:1\r\n+ .\\param-validation.ps1 biff\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : MetadataError: (:) [param-validation.ps1], ValidationMetadataException\r\n    + FullyQualifiedErrorId : ValidateSetFailure,param-validation.ps1\r\n \r\n\r\nPS C:\\DevOps\\Snips> \r\n```\r\nIt's quite interesting to learn that the params are _continually_ evaluated to see whether they confirm to the validation attributes.\r\n\r\n-J",
    "created_at": "2020-02-05T12:21:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-582382238",
    "id": 582382238,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MjM4MjIzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/582382238/reactions"
    },
    "updated_at": "2020-02-05T12:21:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/582382238",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/59835010?v=4",
      "events_url": "https://api.github.com/users/johngeorgef1/events{/privacy}",
      "followers_url": "https://api.github.com/users/johngeorgef1/followers",
      "following_url": "https://api.github.com/users/johngeorgef1/following{/other_user}",
      "gists_url": "https://api.github.com/users/johngeorgef1/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/johngeorgef1",
      "id": 59835010,
      "login": "johngeorgef1",
      "node_id": "MDQ6VXNlcjU5ODM1MDEw",
      "organizations_url": "https://api.github.com/users/johngeorgef1/orgs",
      "received_events_url": "https://api.github.com/users/johngeorgef1/received_events",
      "repos_url": "https://api.github.com/users/johngeorgef1/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/johngeorgef1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johngeorgef1/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/johngeorgef1"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@johngeorgef1, this is actually standard behavior, and not specific to `Invoke-Expression` use:\r\n\r\n```powershell\r\n& { param([ValidateRange(1,2)] $foo) $foo = 3 }\r\nMetadataError: The variable cannot be validated because the value 3 is not a valid value for the foo variable.\r\n```\r\n\r\nIt is not well known, but you can apply constraints to _any_ variable, not just a _parameter_ variable:\r\n\r\n```powershell\r\n[ValidateRange(1,2)] $foo = 1;  # regular variable with validation attribute\r\n$foo = 3 # same error as above\r\n```\r\n\r\nWhile that is a powerful feature,  constraints that apply to _parameter_ variables only are inappropriately applied in at least one case: #10426\r\n",
    "created_at": "2020-02-05T13:12:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8778#issuecomment-582400748",
    "id": 582400748,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8778",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MjQwMDc0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/582400748/reactions"
    },
    "updated_at": "2020-02-05T13:12:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/582400748",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
