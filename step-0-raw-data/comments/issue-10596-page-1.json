[
  {
    "author_association": "COLLABORATOR",
    "body": "Referencing this comment from @lzybkr https://github.com/PowerShell/PowerShell/issues/3239#issuecomment-365072448\r\n\r\nThe syntax that I believe is most `PowerShelly` would be `$x -then $y -else $z` & is the syntax that I am requesting also be implemented to aid in possible adoption of this operator",
    "created_at": "2019-09-22T14:29:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-533886859",
    "id": 533886859,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzg4Njg1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533886859/reactions"
    },
    "updated_at": "2019-09-22T14:29:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533886859",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It's worth mentioning as it kinda feels like it's been forgotten that PowerShell's primary target userbase was **always** Windows Administrators and **NOT** C# Developers, whether Windows based or not.\r\n\r\nI don't think that it's too much of an ask to implement this before v7 goes GA to appease both camps of users\r\n\r\n",
    "created_at": "2019-09-22T15:14:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-533890431",
    "id": 533890431,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzg5MDQzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533890431/reactions"
    },
    "updated_at": "2019-09-22T15:14:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533890431",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It was already discussed here but the reaction was quite negative from a few people: https://twitter.com/Steve_MSFT/status/1152013489965109252\r\n\r\n<blockquote><img src=\"https://pbs.twimg.com/profile_images/705100912310644736/cGIMuYyu_400x400.jpg\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/Steve_MSFT/status/1152013489965109252\">Steve Lee on Twitter</a></strong></div><div>“@CoryKnox @CBergmeister We’re unlikely to do both.  Would probably cause confusion”</div></blockquote>",
    "created_at": "2019-09-22T20:27:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-533915819",
    "id": 533915819,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzkxNTgxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533915819/reactions"
    },
    "updated_at": "2019-09-22T20:28:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533915819",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If you want a bit more verboseness what is wrong with just using the existing `if` statement `if ($x) {$y} else {$z}`?  I honestly don't see much advantage of adding `-then / -else` operators.  It saves two chars:\r\n```\r\n$x -then $y -else $z\r\nif ($x) {$y} else {$z}\r\n```\r\nAnd only one char if your code style is:\r\n```\r\n$x -then $y -else $z\r\nif($x) {$y} else {$z}\r\n```",
    "created_at": "2019-09-22T20:50:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-533917509",
    "id": 533917509,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzkxNzUwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 7,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533917509/reactions"
    },
    "updated_at": "2019-09-22T20:50:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533917509",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Character count isn't everything. Typing parentheses and braces is slightly awkward, and honestly it's harder to read if/then/else on one line. Of course the ternary operator can be hard to read too, which is why my proposed syntax doesn't seem universally hated.",
    "created_at": "2019-09-23T17:44:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-534207735",
    "id": 534207735,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDIwNzczNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/534207735/reactions"
    },
    "updated_at": "2019-09-23T21:00:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/534207735",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That's true, as well. My only concern for using `-then`/`-else` syntax for a ternary operator is that it creates an exception in the language rules.\r\n\r\nAll other operators with `-operator` syntax are purely binary operators. While they may have multiple arguments on their LHS or RHS, they _only_ have a LHS and RHS argument. None of them have a third argument.\r\n\r\nFrom a newbie's perspective, `$a -then $b -else $c` looks pretty similar to `$a -eq $b -as $c` (or any other consecutive sequence of operators; they're not super common, but also not unheard of). This creates a pitfall in terms of the expectation of what an `-operator` does and how it should work. The ternary syntax is a completely different mode of operation than all existing operators using this syntax.\r\n\r\nThe expectation we currently have for an `-operator` is:\r\n\r\n> $LHS -operator $RHS # creates some definite result that can be further operated on\r\n\r\nExtending this to the proposed syntax creates a false assumption:\r\n\r\n> `$a -then $b` and `$a -else $b` are also valid syntaxes, and `$a -then $b -else $c` is just an extended variant of these.\r\n\r\nI'm not saying this is a hard-line \"we should under no circumstances do this\", but I would think that given the proposal is to create, effectively, a \"clearer\" version of the ternary syntax, we should probably avoid creating a behaviour that is easily misunderstood based on currently reasonable assumptions about how the language patterns behave.\r\n\r\n---\r\n\r\n_That said_, there's a fairly easy solution here: implement `-then` and `-else` as separate operators, which can then be combined to create this ternary syntax.\r\n\r\nFor example:\r\n\r\n```powershell\r\n# if $a is truthy, returns $b, otherwise returns $null\r\n$a -then $b \r\n\r\n# if $a is not null, returns $a, otherwise returns $b\r\n$a -else $b \r\n\r\n# if a is truthy, returns $b; otherwise the first operation is evaluated, \r\n# leaving us with: $null -else $c, which then returns $c\r\n$a -then $b -else $c \r\n```\r\n\r\nThis has a bonus effect: `$a -else $b` then becomes an analogue to C#'s `a ?? b` syntax, and you can utilise `-then` as another null-coalescing operator: `$a -then $a.Property` or `$a -and $a.Property -then $a.Property.SubProperty`\r\n\r\nI'm not especially fond of `-then`/`-else` as being implemented in precisely the same way as the current ternary operator. I don't like introducing exceptions to established and presently well-defined language rules if we can help it.\r\n\r\nTL;DR: I'm in favor of it as long as `$a -then $b` and `$a -else $c` don't create parse errors, essentially.",
    "created_at": "2019-09-23T18:43:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-534231198",
    "id": 534231198,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDIzMTE5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/534231198/reactions"
    },
    "updated_at": "2019-09-25T13:14:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/534231198",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Someone in the PowerShell Discord brought up one potential issue with my above idea:\r\n```powershell\r\n$true -then $null -else $someValue\r\n```\r\n\r\nIf implemented as separate operators... this could be a potential pitfall if it is not handled carefully by the parser. Ternary syntaxes should return `$null` in that kind of case (`$true ? $null : $value` will return `$null`) but if the operators are completely independent it's possible that `-else` could be mistakenly triggered. \r\n\r\nI still think that's the best way to proceed, but we'd need to add a special case somewhere in the logic to also skip an immediately following `-else` if the `-then` condition passes, even if the positive result of the `-then` is in fact `$null`.\r\n\r\nMind you, I'm not sure that's a _likely_ occurrence, since `$a -then $null` will _always_ result in null; it's rather a pointless operation. However, it's conceivable that in any given `$a -then $b` statement, `$b` could potentially be $null by accident, if not on purpose.\r\n\r\n(also, edited the above to clarify the proposed behaviour of `-else` as I made an error there)",
    "created_at": "2019-09-25T13:11:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-535015217",
    "id": 535015217,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTAxNTIxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/535015217/reactions"
    },
    "updated_at": "2019-09-25T13:15:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/535015217",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'm just reading this issue for the first time now.\r\n\r\n> TL;DR: I'm in favor of it as long as $a -then $b and $a -else $c don't create parse errors, essentially.\r\n\r\nYeah, that's how `&&` and `||` work in JavaScript. I think that's the most logical way for them to operate. Essentially the same as `-and` and `-or`, but returning the value rather than the boolean coercion of that value.\r\n\r\nI don't see any particular composition of that as a pitfall, just a regular result of left-associative operator parsing.\r\n\r\nI think the value of these operators is in being able to pass out a meaningful result in a truthy situation, but stop an error in a falsey situation:\r\n\r\n```powershell\r\nreturn $item -then $item.Transform()\r\n```",
    "created_at": "2020-02-19T04:38:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-588031579",
    "id": 588031579,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODAzMTU3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/588031579/reactions"
    },
    "updated_at": "2020-02-19T04:38:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/588031579",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I personally think this is still needed from an accessibility perspective for ease of scan readability for those that may be new to the language / new to writing any code and even to those that know exactly what they are looking at with the current operator.\r\nI realise that I seem on this point be in the minority but as more and more people pick up coding and languages like PowerShell we should realistically keep accessibility and how readability by tooling like screen readers will play an important part in future. \r\nI also would like to see a new feature to tooling like PSScriptAnalyzer and an accessibility scanning report generator in future, which I know would be a **huge** undertaking to achieve.\r\n\r\nKeeping this open for now and will discuss this further in future.",
    "created_at": "2022-09-01T22:30:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-1234852884",
    "id": 1234852884,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "IC_kwDOAvT7bc5JmlwU",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1234852884/reactions"
    },
    "updated_at": "2022-09-01T22:30:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1234852884",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I personally don't see any benefit to adding a THIRD way of writing the same thing. Plus, I am quite worried about adding new operators since PowerShell already has some arguably messed up precedence, see `1 -or 1 -and 0` or `1, 2 + 3, 4`. How should something like `$a ? $b : $c -then $d -else $e` be parsed? `($a ? $b : $c) -then $d -else $e` or `$a ? $b : ($c -then $d -else $e)`? What about the other way around: `$a -then $b -else $c ? $d : $e`? The only way I could see solving it is by making `-then` and `-else` aliases for `?` and `:` respectively, though that opens up questions whether mixing the two with `$x ? $y -else $z` and `$x -then $y -else $z` should be allowed - probably not.",
    "created_at": "2022-09-03T18:48:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10596#issuecomment-1236180928",
    "id": 1236180928,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10596",
    "node_id": "IC_kwDOAvT7bc5Jrp_A",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1236180928/reactions"
    },
    "updated_at": "2022-09-03T18:49:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1236180928",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26599495?v=4",
      "events_url": "https://api.github.com/users/dkaszews/events{/privacy}",
      "followers_url": "https://api.github.com/users/dkaszews/followers",
      "following_url": "https://api.github.com/users/dkaszews/following{/other_user}",
      "gists_url": "https://api.github.com/users/dkaszews/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dkaszews",
      "id": 26599495,
      "login": "dkaszews",
      "node_id": "MDQ6VXNlcjI2NTk5NDk1",
      "organizations_url": "https://api.github.com/users/dkaszews/orgs",
      "received_events_url": "https://api.github.com/users/dkaszews/received_events",
      "repos_url": "https://api.github.com/users/dkaszews/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dkaszews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dkaszews/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dkaszews"
    }
  }
]
