[
  {
    "author_association": "COLLABORATOR",
    "body": "IIRC [shebangs/hashbangs](https://en.wikipedia.org/wiki/Shebang_(Unix)) are really handled in the kernel and not the shell and the Win32 subsystem on the NT kernel doesn't have a concept of shebangs. For non-executable files, Windows really uses the extension of the file to determine what program to use to open the file itself so when you do `./mypyscript` with a shebang of `#!/usr/bin/env python3` Windows has no idea what to do with it. Even trying to add support for interpreting Unix shebangs will be fraught with danger and IMO too magical, using `#!/usr/bin/env python3` as an example:\r\n\r\n* On Windows Python is just installed with `python.exe` so there will be no `python3.exe` in the `PATH`\r\n* Even if there was, what Python 3 interpreter will be used if there are multiple present\r\n* If it was also just `#!/usr/bin/python3` then it's the same issue, probably even more so because it's a hardcoded path and on Unix it won't rely on the `PATH`\r\n\r\nPersonally I think this would require too much magic and maintenance to achieve.",
    "created_at": "2020-11-09T20:48:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-724269706",
    "id": 724269706,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDI2OTcwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/724269706/reactions"
    },
    "updated_at": "2020-11-09T20:48:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/724269706",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@eabase, while I like the idea in principle, I think @jborean93 is correct - we can't just do this _automatically_.\r\n\r\nWhat may be worth considering is to propose a _PowerShell-specific_ feature: something along the lines of a dedicated new filename extension, say `.psx`, with perhaps a custom shebang-line format that covers all platforms, and that PowerShell (only) would allow you to call _without the filename extension_ even on Unix-like platforms.\r\n\r\nOn Unix-like platforms, for security reasons, the executable bit would have to be set too.\r\n\r\nIf this sounds interesting to you, I encourage you to open a new feature request and flesh this idea out (though I can't guarantee that others may find it interesting / unproblematic).\r\n",
    "created_at": "2020-11-22T17:09:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-731778630",
    "id": 731778630,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTc3ODYzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731778630/reactions"
    },
    "updated_at": "2020-11-22T17:09:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731778630",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\n\r\n> What may be worth considering is to propose a _PowerShell-specific_ feature: something along the lines of a dedicated new filename extension, say `.psx`, with perhaps a custom shebang-line format that covers all platforms, and that PowerShell (only) would allow you to call _without the filename extension_ even on Unix-like platforms.\r\n\r\nI don't quite understand what you mean there. Are you proposing to handle *files* with a new extension like, `myscript.psx` or are you proposing a hashbang, like `#!/usr/bin/enx psx`?\r\n\r\nI think maybe you're proposing the former, but regardless, from a portability perspective, I disagree with both. The whole point here, being that we should be able to execute any script (regardless platform) using the dot method. \r\n\r\n> On Unix-like platforms, for security reasons, the executable bit would have to be set too.\r\n\r\nYes, that is also needed, but I have no Widows experience for this, as all my Windows machines are completely permission free. The very first thing I do on **any** vanilla Windows machine is to turn off UAC, and enable Admin on all my shells by default. As a non-corporate sysop, I just find my life unbearable having those (sorry, but rather useless) productivity blocking features on. So until the day that the incomprehensible windows group/file/execute policy/permissions become a one-click operation, that is how I will continue to operate. And in those few cases I have ran into file ownership trouble, Cygwin has come to the rescue and been my best friend for the last 20 years!  \r\n\r\n-- So yes, latest development Windows 10 version, always has Cygwin installed! (And no, WSL with all it's bloated VM features and gigabyte installs, will never replace the lightness of Cygwin.)\r\n\r\n> If this sounds interesting to you, I encourage you to open a new feature request and flesh this idea out (though I can't guarantee that others may find it interesting / unproblematic).\r\n\r\nI think the hacks presented in the linked SO post will have to do for now. ",
    "created_at": "2020-11-22T20:58:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-731846128",
    "id": 731846128,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTg0NjEyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731846128/reactions"
    },
    "updated_at": "2020-11-22T21:01:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731846128",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/52289379?v=4",
      "events_url": "https://api.github.com/users/eabase/events{/privacy}",
      "followers_url": "https://api.github.com/users/eabase/followers",
      "following_url": "https://api.github.com/users/eabase/following{/other_user}",
      "gists_url": "https://api.github.com/users/eabase/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/eabase",
      "id": 52289379,
      "login": "eabase",
      "node_id": "MDQ6VXNlcjUyMjg5Mzc5",
      "organizations_url": "https://api.github.com/users/eabase/orgs",
      "received_events_url": "https://api.github.com/users/eabase/received_events",
      "repos_url": "https://api.github.com/users/eabase/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/eabase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eabase/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/eabase"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Are you proposing to handle files with a new extension like, `myscript.psx`?\r\n\r\nYes.\r\n\r\n> Windows machine is to turn off UAC, and enable Admin on all my shells by default.\r\n\r\nUnderstood, but just to spell it out: You're choosing to bypass the platform's security features.\r\nIt is the equivalent of running all scripts on Unix with `sudo` / as `root`.\r\n\r\n> The whole point here, being that we should be able to execute any script (regardless platform) using the dot method.\r\n\r\nCross-platform abstractions are a wonderful thing, and I welcome them in general.\r\n\r\nIt is why I created the hack in the linked SO post, but it is just that: a _hack_.\r\n\r\nHere, the only safe and predictable way forward is to create an abstraction _in the realm of PowerShell_, hence my suggestion.\r\n\r\nThe alternative on Windows is to _stay in the realm of WSL_ and install PowerShell _there_ - but that's not a true cross-platform solution.\r\nHowever, it even allows you to execute shebang-based scripts stored in the _Windows_ file-system, as long as these scripts use LF-only newlines rather than Windows CRLF ones and the shebang line refers to an executable in the _WSL_ file-system (WSL2 seemingly implicitly considers all Windows file-system files _executable_).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-11-22T21:15:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-731848342",
    "id": 731848342,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTg0ODM0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731848342/reactions"
    },
    "updated_at": "2020-11-22T21:36:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731848342",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A terminology caveat:\r\n\r\n> dot-execute\r\n\r\nThis sounds like [_dot-sourcing_](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Operators#dot-sourcing-operator-), which is entirely unrelated to the issue at hand.\r\nIt is a general requirement in PowerShell, for security reasons, to explicitly signal the intent to invoke executables located in the _current directory_, using a _path_, which in the simplest case means prefixing the file name with `.\\` or `./`\r\n\r\n",
    "created_at": "2020-11-22T21:57:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-731853553",
    "id": 731853553,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTg1MzU1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731853553/reactions"
    },
    "updated_at": "2020-11-22T22:17:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731853553",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Instead consider removing the path altogether, by using just the interpreter's name, like `#!python3`\r\n\r\nNote that this is tantamount to calling for a _PowerShell-specific_ abstraction, given that Unix shebang lines require _full_ paths - and breaking the _native_ shells on Unix-like platforms - which rely on the _kernel_'s interpretation of the shebang lines, which would then fail - is ill-advised.\r\n\r\n",
    "created_at": "2020-11-22T22:06:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-731854677",
    "id": 731854677,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTg1NDY3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731854677/reactions"
    },
    "updated_at": "2020-11-22T22:16:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731854677",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> This sounds like dot-sourcing, which is entirely unrelated to the issue at hand.\r\n\r\nNot sure what you're saying here, but I mean that with proper shebang behavior, you can execute the script with same method as in Powershell, with `./myscript.py`, **`in the current scope`**, and without additional source dot in front. AFACT, this is how *nix behaves.\r\n\r\n> Note that this is tantamount to calling for a _PowerShell-specific_ abstraction, given that Unix shebang lines require _full_ paths - and breaking the _native_ shells on Unix-like platforms - which rely on the _kernel_'s interpretation of the shebang lines, which would then fail - is ill-advised.\r\n\r\n\r\nYes, Indeed. I didn't really like that, but it was not my idea, it was mentioned as a [comment](https://stackoverflow.com/questions/55601446/how-to-run-a-python-program-from-powershell-based-on-python-hashbang#comment97901358_55601446) by `Eryk Sun` in that SO link. \r\n",
    "created_at": "2020-11-23T17:38:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-732315700",
    "id": 732315700,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjMxNTcwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/732315700/reactions"
    },
    "updated_at": "2020-11-23T17:38:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/732315700",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/52289379?v=4",
      "events_url": "https://api.github.com/users/eabase/events{/privacy}",
      "followers_url": "https://api.github.com/users/eabase/followers",
      "following_url": "https://api.github.com/users/eabase/following{/other_user}",
      "gists_url": "https://api.github.com/users/eabase/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/eabase",
      "id": 52289379,
      "login": "eabase",
      "node_id": "MDQ6VXNlcjUyMjg5Mzc5",
      "organizations_url": "https://api.github.com/users/eabase/orgs",
      "received_events_url": "https://api.github.com/users/eabase/received_events",
      "repos_url": "https://api.github.com/users/eabase/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/eabase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eabase/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/eabase"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Not sure what you're saying here\r\n\r\nThis was primarily a terminology quibble: we're talking about regular PowerShell invocation of _external executables_ here, nothing to do with \"dots\", which makes people think of dot-sourcing, which is limited to in-process execution of _PowerShell code_ directly in the caller's scope instead of in a child scope.\r\n\r\n> in the current scope\r\n\r\nShebang-based scripts invariably run in a _child process_, the concept of a PowerShell scope therefore doesn't apply.\r\n\r\n---\r\n\r\nHere's how I could _potentially_ see this happen without introducing new PowerShell constructs such as `.psx`, relying on PowerShell to directly act on Unix shebang lines (and note that I'm just a fellow PowerShell user, these are just my thoughts):\r\n\r\n* For backward compatibility and security reasons, an _opt-in_ would be required:\r\n\r\n  * The hack in the SO answer _implicitly_ uses such an opt-in, by requiring `.` to be added to `$env:PATHEXT` in order to mark extension-less files as executable; however, given that the interpretation of such files would be PowerShell-specific, it's better not to modify an _environment_ variable that other shells such as `cmd.exe` would see too, and instead use a PowerShell _preference_ variable.\r\n \r\n  * The security challenge there is that either way this would be a _global_ switch, unlike in the Unix world, where each shebang-line-based script must _individually_ have executable permission bit(s) set.\r\n    * _Conceivably_, NTFS alternate data streams could be used, they way they are for blocking scripts downloaded from the internet, but that sounds obscure and cumbersome.\r\n\r\n* For security and predictability reasons, only `#!/usr/bin/env <utility>` would be supported - not also direct paths such as `/usr/bin/python` - and PowerShell would interpret that as having to look for `<utility>` in `$env:PATH`.\r\n\r\n  * The upshot is that any cross-platform shebang-based scripts would have to be created using the form `#!/usr/bin/env <utility>`\r\n\r\nI'm no security expert, so others will have to weigh in whether a global opt-in is acceptable or not.\r\n",
    "created_at": "2020-11-23T18:17:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-732338235",
    "id": 732338235,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjMzODIzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/732338235/reactions"
    },
    "updated_at": "2020-11-23T18:17:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/732338235",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Just for reference, this is what the Python3.8 Docs [says about shebang](https://docs.python.org/3.8/using/windows.html?highlight=shebang#shebang-lines): \r\n\r\n> To allow shebang lines in Python scripts to be portable between Unix and Windows, this launcher supports a number of ‘virtual’ commands to specify which interpreter to use. The supported virtual commands are:\r\n\r\n```gitignore\r\n/usr/bin/env python\r\n/usr/bin/python\r\n/usr/local/bin/python\r\npython\r\n```\r\n\r\nand ...\r\n\r\n> For example, a shebang line of `#!python` has no version qualifier, while `#!python3` has a version qualifier which specifies only a major version.\r\n> \r\n> If no version qualifiers are found in a command, the environment variable `PY_PYTHON` can be set to specify the default version qualifier. If it is not set, the default is “3”. The variable can specify any value that may be passed on the command line, such as “3”, “3.7”, “3.7-32” or “3.7-64”. (Note that the “-64” option is only available with the launcher included with Python 3.7 or newer.)\r\n\r\n",
    "created_at": "2020-11-24T15:22:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-733044393",
    "id": 733044393,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzA0NDM5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733044393/reactions"
    },
    "updated_at": "2020-11-24T15:22:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733044393",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/52289379?v=4",
      "events_url": "https://api.github.com/users/eabase/events{/privacy}",
      "followers_url": "https://api.github.com/users/eabase/followers",
      "following_url": "https://api.github.com/users/eabase/following{/other_user}",
      "gists_url": "https://api.github.com/users/eabase/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/eabase",
      "id": 52289379,
      "login": "eabase",
      "node_id": "MDQ6VXNlcjUyMjg5Mzc5",
      "organizations_url": "https://api.github.com/users/eabase/orgs",
      "received_events_url": "https://api.github.com/users/eabase/received_events",
      "repos_url": "https://api.github.com/users/eabase/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/eabase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eabase/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/eabase"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Interesting, @eabase; didn't know about Python's shebang support.\r\nTwo observations:\r\n\r\n* Since Python is not a shell, it still relies on the underlying shell for invocation of scripts, which means that scripts have to have the `.py` extension in order to be executable (hacks aside) - something we would want to avoid.\r\n\r\n* Overlaying Windows-only functionality on a Unix concept - e.g. `#!python3` and version/bit-ness specifiers - strikes me as ill-advised.\r\n\r\n---\r\n\r\n* `/usr/bin/env <binary>` is _unequivocally_ an expression of the intent to defer to `$env:PATH` to locate the binary.\r\n\r\n* `/usr/bin/ <binary>` (Linux) and `/usr/local/bin/ <binary>` (macOS) are _defensibly_ so, though they aren't _strictly_, given that it is possible to preempt these locations in `$env:PATH`. Still, overall it makes sense to me to also defer to `$env:PATH`.\r\n\r\n* All others paths I still recommend _not_ be supported, because there's no sensible _guessing_ as to the intent, and with something like `/bin/sh` - signaling the intent to use the platform's _default shell_ - there is no analog on Windows, and executing an arbitrary `sh.exe` somewhere in the path could be considered a security risk.\r\n\r\n---\r\n\r\nTo flesh out the need for an _opt-in_: Without it, at least hypothetically, things may start executing that didn't execute before:\r\n\r\n* If you have a currently dormant extension-less shebang script somewhere in `$env:PATH`, calling it by file name only will start executing it - even if an `*.exe` file or file with any other extension listed in `$env:PATHEXT` with the same base name is also present.\r\n\r\n  * Note: if there _isn't_ a true executable with the same base name also present in the same directory, you already do get execution of sorts: such a file is unexpectedly opened _as a document_, which I consider a bug that should be addressed separately - see #12632.\r\n\r\n* Similarly, if both a shebang script `foo` and `foo.ps1` are present in the current directory, `./foo` will then start executing `foo`, given that its file name is an exact match (this is how it already works on Unix).\r\n\r\n\r\n\r\n",
    "created_at": "2020-11-25T13:22:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-733703314",
    "id": 733703314,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzcwMzMxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733703314/reactions"
    },
    "updated_at": "2020-11-25T13:23:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733703314",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\nI agree on all part in section A and B, as for the last section C, I don't have anything to add. \r\n\r\nPerhaps we need to get someone into this thread, that doesn't agree and may have some sensible counter arguments? ",
    "created_at": "2020-11-25T21:49:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-733961366",
    "id": 733961366,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzk2MTM2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733961366/reactions"
    },
    "updated_at": "2020-11-25T21:49:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733961366",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/52289379?v=4",
      "events_url": "https://api.github.com/users/eabase/events{/privacy}",
      "followers_url": "https://api.github.com/users/eabase/followers",
      "following_url": "https://api.github.com/users/eabase/following{/other_user}",
      "gists_url": "https://api.github.com/users/eabase/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/eabase",
      "id": 52289379,
      "login": "eabase",
      "node_id": "MDQ6VXNlcjUyMjg5Mzc5",
      "organizations_url": "https://api.github.com/users/eabase/orgs",
      "received_events_url": "https://api.github.com/users/eabase/received_events",
      "repos_url": "https://api.github.com/users/eabase/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/eabase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eabase/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/eabase"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@eabase, my recommendation is to open a _new_ issue, of type \"Feature Request/Idea\", and to make a focused case based on our shared understanding, leaving the security / opt-in issue as an open question, soliciting feedback.\r\n",
    "created_at": "2020-11-25T22:30:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14009#issuecomment-733974350",
    "id": 733974350,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14009",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMzk3NDM1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733974350/reactions"
    },
    "updated_at": "2020-11-25T22:30:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/733974350",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
