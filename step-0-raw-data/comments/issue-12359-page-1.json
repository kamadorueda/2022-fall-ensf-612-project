[
  {
    "author_association": "COLLABORATOR",
    "body": "When would you use this in a practical case? PowerShell is pretty permissive when it comes to converting types, but in general I'd pretty much expect that you're only going to end up duplicating code that would otherwise go in the transformation attribute, so I'm not sure what this would really be adding overall?",
    "created_at": "2020-04-17T15:38:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615315454",
    "id": 615315454,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTMxNTQ1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615315454/reactions"
    },
    "updated_at": "2020-04-17T15:38:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615315454",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "for example:\r\n\r\n```\r\nfunction foo {\r\n  param(\r\n    [unionType('string','System.Management.Automation.PSModuleInfo')]\r\n   [parameter(valuefrompipeline)]\r\n    $module\r\n  )\r\n  proceess {\r\n\r\n     # code\r\n  }\r\n}\r\n\r\n```\r\nworks in all caases \r\n\r\n\r\n```\r\nPS>  get-module mymodule | foo\r\nPS> foo -module  mymodule\r\nPS> 'mymddule'  |  foo\r\n```\r\n\r\n\r\nthis feature is not to replace  paramsets or argument transformer but its more easy less typing...etc ",
    "created_at": "2020-04-17T15:52:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615323135",
    "id": 615323135,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTMyMzEzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615323135/reactions"
    },
    "updated_at": "2020-04-17T16:25:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615323135",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "A `string` and a `PSModuleInfo` are pretty different.  How would you use them as if they were the same?",
    "created_at": "2020-04-17T16:13:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615334151",
    "id": 615334151,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTMzNDE1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615334151/reactions"
    },
    "updated_at": "2020-04-17T16:13:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615334151",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience \r\n\r\nthe idea is like  ArgumentTransformtionAttribue transform type of attribbute but in easy way",
    "created_at": "2020-04-17T16:23:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615339477",
    "id": 615339477,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTMzOTQ3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615339477/reactions"
    },
    "updated_at": "2020-04-17T16:23:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615339477",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Right but with that attribute you're transforming it into the real expected type.  Here it's just going to be any one of those without any transformation.  So since `$module` will either be `string` or `PSModuleInfo`, can you give an example of how you would expect interacting with it to look?",
    "created_at": "2020-04-17T16:50:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615352593",
    "id": 615352593,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTM1MjU5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615352593/reactions"
    },
    "updated_at": "2020-04-17T16:50:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615352593",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "the logic in body of this  function is same as the logic of body of ArgumentTransformtionAttribue.\r\nwe tests the type of  $module \r\n\r\npseudo-code\r\n`if string then ... else if PSmoduleInfo ....`\r\n\r\n\r\nalso with parametersets is the same mechanism we tests the parametersets \r\n\r\nthis is a prototype...maybee samee chaange  occuurs...\r\n\r\nthe goal  is to simplify  the convertion between multiple type \r\n\r\nsorry  for my english",
    "created_at": "2020-04-17T17:06:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615360635",
    "id": 615360635,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTM2MDYzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615360635/reactions"
    },
    "updated_at": "2020-04-17T17:45:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615360635",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "NONE",
    "body": "That's not how types work with parameter  \r\n```\r\n[String]$p1 \r\n[int]$p2\r\n[system.io.file]$p3\r\n```\r\n\r\nSays \"Convert P1 to a string\" , \"Convert P2 to an int\"  and \"Convert p3 to a file\" \r\nThe third case does some really stupid things (like creating a reference to a non-existent read only file in \\windows\\system). \r\nIf you say $p4 **might be a string or an int** , what does it do with 3.14 ? Make it a \"3.14\" or 3 \r\n\r\n`[int]$p2 `says if it is a string try to make it an int. If that fails we get an error. \r\nIf you want to say $P might be a name, and ID or an object (which is good !) then you specify no conversion attribute and check inside the function to see what you were passed and proceed accordingly.  \r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-04-17T17:47:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615379474",
    "id": 615379474,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTM3OTQ3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615379474/reactions"
    },
    "updated_at": "2020-04-17T17:47:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615379474",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> pseudo-code\r\n> `if string then ... else if PSmoduleInfo ....`\r\n\r\nIf you need to do that logic manually anyway, I think typing the parameter as `[psobject]` will do what you want.  I could see the value in an attribute that describes the types that a `[psobject]` typed parameter can accept, but if it was anything other than purely documentation it would make parameter binding really hard to reason about.\r\n\r\n> sorry for my english\r\n\r\nNo worries, your english is excellent 🙂 \r\n",
    "created_at": "2020-04-17T17:56:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615383743",
    "id": 615383743,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTM4Mzc0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615383743/reactions"
    },
    "updated_at": "2020-04-17T17:56:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615383743",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience \r\n\r\nthanks you.\r\nbut why [psobject] work and the baseobject [object] not work ? ",
    "created_at": "2020-04-18T09:04:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615802548",
    "id": 615802548,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTgwMjU0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615802548/reactions"
    },
    "updated_at": "2020-04-18T09:04:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615802548",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It looks like there are two distinct aspects:\r\n\r\n(a) **Making argument type _transformation_ easier** - where, as with `ArgumentTransformationAttribute`, you always end up with the single declared parameter type.\r\n\r\nTaking the `System.Management.Automation.PSModuleInfo` / `string` example, I can see how it would be nice to have a simpler way to implement a transformation, namely via  a script block:\r\n\r\n```powershell\r\nfunction foo {\r\n  param(\r\n     # Wishful thinking: If a [string] with a module name or path is given, \r\n     # transform it to a PSModuleInfo instance.\r\n     [Transform([string], { Get-Module -ListAvailable $_  })]\r\n     [System.Management.Automation.PSModuleInfo] $Module\r\n  )\r\n}\r\n```\r\n \r\n(Of course, you could argue that `[System.Management.Automation.PSModuleInfo] '/path/to/module'` should be supported by default, but that's a separate issue.)\r\n\r\n---\r\n\r\n(b) **Allowing a parameter to be limited to a fixed set of types**, with command-internal logic to examine the type ultimately passed.\r\n\r\nGiven the manual effort needed to examine the type inside the function anyway, and given @SeeminglyScience's point about how enforcing the set of types would make parameter binding hard to reason about, I think **this would call for a different solution**:\r\n\r\n**Distinct, strongly typed, mutually exclusive parameters.**\r\n\r\nOf course, that's what _parameter sets_ are for - but implementing this logic is currently quite cumbersome.\r\n\r\nFor instance, the following implements two mutually exclusive, positional parameters that target something either by a numeric ID or a name string, so that you can call `foo 42` or `foo bar`, and the former will bind to `-ID`, the latter to `-Name` (as an aside: `Wait-Process` already works that way, but not `Get-Process` / `Stop-Process` - see #6551).\r\n\r\n```powershell\r\nfunction foo {\r\n  [CmdletBinding(DefaultParameterSetName='Name')]\r\n  param(\r\n    [Parameter(Position=0)]\r\n    [int] $ID\r\n    ,\r\n    [Parameter(Position=0, ParameterSetName='Name')]    \r\n    [string] $Name\r\n  )\r\n  \"[$ID] [$NAME]\"\r\n}\r\n```\r\n\r\nThat's a lot of ceremony, and I wonder if we should allow a more succinct expression of this concept.\r\n\r\nWe have thought about this before, namely in the context of this since-withdrawn RFC: https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0001-Mutual-Exclusion-Parameters-and-Properties.md\r\n\r\n---\r\n\r\n> why [psobject] work and the baseobject [object] not work ?\r\n\r\n`[object]` would work, and in fact I suggest using _it_ rather than `[psobject]`, because from a scripter's perspective `[psobject]` should really be considered an invisible helper type not to be used directly.\r\n\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>",
    "created_at": "2020-04-18T13:40:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615873708",
    "id": 615873708,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTg3MzcwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615873708/reactions"
    },
    "updated_at": "2020-04-18T13:40:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615873708",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> `[object]` would work, and in fact I suggest using _it_ rather than `[psobject]`, because from a scripter's perspective `[psobject]` should really be considered an invisible helper type not to be used directly.\r\n\r\nI usually recommend `psobject` because in some circumstances `object` can strip ETS properties, and in others it can result in (a very minor) amount of overhead when unwrapping and rewrapping. Plus that's typically what cmdlets type their parameters as so I like the consistency.",
    "created_at": "2020-04-18T14:40:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615882323",
    "id": 615882323,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTg4MjMyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615882323/reactions"
    },
    "updated_at": "2020-04-18T14:40:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615882323",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "(If what was originally discussed here is to go anywhere, I feel (a) and (b) would have to become new issues anyway, so I hope it's OK to continue the tangent here):\r\n\r\nI think the presence of `[psobject]` in PowerShell code is ultimately more confusing and harmful than beneficial.\r\n\r\nEven in cmdlets I wish parameters - and especially output objects - weren't `PSObject`s - see #5551 and #5579.\r\n\r\nNote that _not_ typing a parameter does _not_ result in an extra `[psobject]` wrapper.\r\nThat is, omitting a type is equivalent to `[object]` typing, not `[psobject]`:\r\n\r\n```powershell\r\n# Ditto with `[object] $p`\r\nPS> & { param($p) $p -is [psobject] } 42\r\nFalse \r\n\r\n# vs.\r\nPS> & { param([psobject] $p) $p -is [psobject] } 42\r\nTrue\r\n```\r\n\r\nAs for ETS members getting stripped; @lzybkr alludes to that [here](https://github.com/PowerShell/PowerShell/issues/5551#issuecomment-384784596), but I can't actually get that to happen:\r\n\r\n```powershell\r\nPS> (Get-Item / | add-member -passthru  -NotePropertyName foo -NotePropertyValue bar),\r\n('other' | add-member -passthru  -NotePropertyName foo -NotePropertyValue bar),\r\n(42 | add-member -passthru  -NotePropertyName foo -NotePropertyValue bar),\r\n($false | add-member -passthru  -NotePropertyName foo -NotePropertyValue bar) | % {\r\n    & { param($p) $p.foo } $_\r\n  }\r\n\r\n# ETS property .foo was passed through in all cases.\r\nbar\r\nbar\r\nbar\r\nbar\r\n``` \r\n\r\nAre there still cases where they get stripped?\r\n",
    "created_at": "2020-04-18T16:18:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615897547",
    "id": 615897547,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTg5NzU0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615897547/reactions"
    },
    "updated_at": "2020-04-18T16:18:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615897547",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I think the presence of [psobject] in PowerShell code is ultimately more confusing and harmful than beneficial.\r\n\r\nEh I see where you're coming from but I disagree.  I remember very early on just thinking \"oh it's a PowerShell object, it makes objects do PowerShell things\".  I know that's just anecdotal but I don't think most ps users would think about it much ~~last~~ past that. Though I could understand it being confusing for C# folks maybe.\r\n\r\n>Are there still cases where they get stripped?\r\n\r\nThe one that comes to mind is method parameters where the object will not be rehydrated the same (such as when `StoreTypeNameAndInstanceMembersLocally` is true).  I believe there are more, but none other readily remember-able.\r\n\r\n```powershell\r\nclass Test {\r\n    static [object] GetMembers([object] $obj) {\r\n        return Get-Member -InputObject $obj\r\n    }\r\n}\r\n\r\n[Test]::GetMembers($profile) | ? MemberType -eq  NoteProperty\r\n```\r\n\r\nIn that example only certain types and pso instances will be stripped of ETS properties because in most cases they will be rehydrated correctly.  That said, if the method is binary it will not. That's why `PSSerializer.Serialize` *always* strips ETS.\r\n\r\nThe reason for that (and the reason it can't be fixed) is because most dotnet API's have no awareness of `psobject`.  They won't know that they need to (or if they don't need to) unwrap it.  They also don't typically know how to enumerate the properties since just using straight up reflection won't yield much useful.\r\n\r\nIs it super likely that you'll ever run into one of these scenarios? Nah, but if it does it'll be real hard for most to troubleshoot and I personally don't think there's a downside.",
    "created_at": "2020-04-18T18:43:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615924296",
    "id": 615924296,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkyNDI5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615924296/reactions"
    },
    "updated_at": "2020-04-18T20:42:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615924296",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @SeeminglyScience.\r\n\r\n>  I don't think most ps users would think about it much last that.\r\n\r\nWith the presumably accidental extra words in that sentence I'm not sure I got the gist of this. Did you mean to say that most PS users don't think about it much and are accustomed to using `[psobject]`?\r\n\r\nI know that _historically_ `[psobject]` was often used, notably with `New-Object PSObject` - before the `[pscustomobject] @{ ... }` syntax sugar was introduced in v3. Even before that, `New-Object PSCustomObject` would have made more sense conceptually.\r\n\r\nStill, I think we would benefit in the long run if `[psobject]` became a truly invisible, transparent-to-the-scripter type. The way it currently peeks from behind the curtain - situationally, in ways that are virtually unpredictable to the casual user - will remain a pain point.\r\n\r\n---\r\n\r\nIn that vein (thanks for the method example): Do you think it's possible in principle to make a non-breaking change that prevent the occasional loss of ETS member _without_ having to use `[psobject]` variables explicitly?\r\n\r\n> In that example only certain types and pso instances will be stripped of ETS properties\r\n\r\nWhat causes the loss with `$PROFILE`, specifically? Looking at the source code, it appears _not_ to use `StoreTypeNameAndInstanceMembersLocally`\r\n\r\nAlso,  `StoreTypeNameAndInstanceMembersLocally` appears to be a v2 legacy feature anyway (see https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426154780), and its continued use causes the problem in #7937, for instance.\r\n\r\n\r\n",
    "created_at": "2020-04-18T19:38:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615933324",
    "id": 615933324,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkzMzMyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615933324/reactions"
    },
    "updated_at": "2020-04-18T19:38:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615933324",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Thanks, @SeeminglyScience.\r\n> \r\n> > I don't think most ps users would think about it much last that.\r\n> \r\n> With the presumably accidental extra words in that sentence I'm not sure I got the gist of this.\r\n\r\nSupposed to be past instead of last, I'll fix that ty :)\r\n\r\n> Did you mean to say that most PS users don't think about it much and are accustomed to using `[psobject]`?\r\n\r\nI think they won't think much about it other than \"use psobject instead of object because it does ps things\".\r\n\r\n> Still, I think we would benefit in the long run if `[psobject]` became a truly invisible, transparent-to-the-scripter type. The way it currently peeks from behind the curtain - situationally, in ways that are virtually unpredictable to the casual user - will remain a pain point.\r\n\r\nIt's a nice thought, but I fear that would end up being a more impactful and confusing version of what happened to `AutomationNull`.\r\n\r\n> In that vein (thanks for the method example): Do you think it's possible in principle to make a non-breaking change that prevent the occasional loss of ETS member _without_ having to use `[psobject]` variables explicitly?\r\n\r\nUnfortunately no.  If you change the member binder to pass the `PSObject` wrapper instead of the base object, a whole lot of code will still failing.\r\n\r\n> What causes the loss with `$PROFILE`, specifically? Looking at the source code, it appears _not_ to use `StoreTypeNameAndInstanceMembersLocally`\r\n\r\nStrings are treated like that member is `true` implicitly, probably because of string interning.\r\n\r\n> Also, `StoreTypeNameAndInstanceMembersLocally` appears to be a v2 legacy feature anyway (see [#7768 (comment)](https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426154780)), and its continued use causes the problem in #7937, for instance.\r\n\r\nI don't see where in that issue (including the linked comment) where that's said, did you link the right one?",
    "created_at": "2020-04-18T20:42:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615944920",
    "id": 615944920,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTk0NDkyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615944920/reactions"
    },
    "updated_at": "2020-04-18T20:42:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615944920",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As always, I appreciate the deep dive, @SeeminglyScience.\r\n\r\n> Strings are treated like that member is true implicitly, probably because of string interning.\r\n\r\nLet's try to narrow this down: Is `[string]` the _only_ type to which that applies?\r\nThat does appear to be the case:\r\n\r\n```powershell\r\nclass Test {\r\n    static [object] GetMembers([object] $obj) {\r\n        return Get-Member -InputObject $obj\r\n    }\r\n}\r\n\r\n# .foo resurfaces; ditto with `$true | Add-Member ...`\r\n[Test]::GetMembers((42 | Add-Member foo bar -PassThru)) | ? MemberType -eq  NoteProperty\r\n```\r\n\r\nI think the larger point is that attaching ETS instance members to strings and value types is generally a bad idea, and the `$PROFILE` implementation - a _string_ with `NoteProperty` members - always struck me as awkward and obscure.\r\n\r\nIf a `[string]` instance with `NoteProperty` members is the only case where `[psobject]` is needed, I'd say that hardly warrants its use.\r\n\r\n> I don't see where in that issue (including the linked comment) where that's said, did you link the right one?\r\n\r\nThe [linked comment](https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426154780) states:\r\n\r\n> in V3 when we changed the underlying representation of instance members.\r\n\r\nThat suggests to me that a _better_ mechanism was introduced that _supersedes_ the old one , and the linked comment details the improvements.\r\n\r\nConversely, the _old_ mechanism is both obscure and can cause problems, as #7937 demonstrates, and as summarized int [this comment](https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426649706) by someone I implicitly trust (just kidding):\r\n\r\n> Generally, the - seemingly legacy - mechanism of associating instance member with a - usually invisible - [psobject] wrapper rather than the wrapped object itself strikes me as highly obscure\r\n\r\n\r\nLet me ask the opposite: why do you think it's still useful (leaving aside true [edge cases](https://github.com/PowerShell/PowerShell/issues/11122#issuecomment-555736430))?\r\n",
    "created_at": "2020-04-18T21:16:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615950952",
    "id": 615950952,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTk1MDk1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615950952/reactions"
    },
    "updated_at": "2020-04-18T21:19:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615950952",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "\r\n> Let's try to narrow this down: Is `[string]` the _only_ type to which that applies?\r\n\r\nThink so\r\n\r\n> I think the larger point is that attaching ETS instance members to strings and value types is generally a bad idea, and the `$PROFILE` implementation - a _string_ with `NoteProperty` members - always struck me as awkward and obscure.\r\n\r\n🤷 won't stop folks from doing it.\r\n\r\n> If a `[string]` instance with `NoteProperty` members is the only case where `[psobject]` is needed\r\n\r\nAlso pso's with `StoreTypeNameAndInstanceMembersLocally`.\r\n\r\n> I'd say that hardly warrants its use.\r\n\r\nBetween the two `psobject` handles some niche cases better.  If you personally don't like `psobject` for style or philosophical reasons, yeah the world for sure isn't going to end if you use `object`.\r\n\r\n> The [linked comment](https://github.com/PowerShell/PowerShell/issues/7768#issuecomment-426154780) states:\r\n> \r\n> > in V3 when we changed the underlying representation of instance members.\r\n> \r\n> That suggests to me that a _better_ mechanism was introduced that _supersedes_ the old one , and the linked comment details the improvements.\r\n\r\nHe's saying that they added resurrection tables and then describes the benefits of them. `StoreTypeNameAndInstanceMembersLocally` is how you purposefully skip resurrection tables.\r\n\r\n> Let me ask the opposite: why do you think it's still useful (leaving aside true [edge cases](https://github.com/PowerShell/PowerShell/issues/11122#issuecomment-555736430))?\r\n\r\nNo matter how I feel about it personally, it's still used.\r\n\r\nI do kinda wish it was used more though.  Resurrection is really annoying with types that are cached for instance.  For example, making a provider that outputs `Type` objects, now every literal has `PSPath` attached to it.  You could argue that you should create a wrapper type, but then you have to reimplement all of the methods on `Type`, etc.  Or lets say you're just trying to add a property or type name for formatting, now everywhere that instance is used is changed.  It's like global variables imo, I don't want to dirty up global scope.",
    "created_at": "2020-04-19T00:21:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-615990047",
    "id": 615990047,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTk5MDA0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615990047/reactions"
    },
    "updated_at": "2020-04-19T00:21:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615990047",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let's try to summarize:\r\n\r\n* For _function_ and _script_ parameters (the premise of this issue) _omitting_ a type constraint or using `[object]` works fine in all cases - ETS members are never  lost, so there's no need for `[psobject]`.\r\n\r\n* For _method_ parameters in _PowerShell_ classes, _omitting_ a type constraint or using `[object]` works fine, _except_ in the following edge case:\r\n\r\n   * `PSObject` instances that have _instance_ ETS members _and_ whose private `StoreTypeNameAndInstanceMembersLocally` property is `true`, i.e. whose ETS instance members are associated with the _incidental `PSObject` wrapper_ rather than the wrapped objects themselves (via the v3+ resurrection tables); to  support such objects, you must declare your parameter as `[psobject]` (which means that arguments that aren't yet `[psobject]`-wrapped will be, which can have behavioral implications - see #5579). Such objects are created under the following conditions:\r\n\r\n      * _Invariably_, for technical reasons (the CLR's string interning), when attaching ETS instance members to `[string]` instances (actually, it seems that the resurrection tables _are_ also used in this case, only with the `[psobject]` wrapper rather than the `[string]` instance as the lookup key, but the net effect is the same: the ETS instance members are attached to the _wrapper_).\r\n\r\n         * It is generally not advisable to create such wrapped `[string]` instances, because the ETS properties are hard to discover, given that the `[psobject]` wrapper still prints like a string by default; it is unfortunate that the automatic `$PROFILE` variable uses this technique; similarly, the strings output by `Get-Content` are wrapped this way, currently without an opt-out - see #7537. Such wrapped strings can conversely surface their ETS instance members in unexpected situations - see #5797.\r\n        \r\n         * For the same reasons it is not advisable to add instance ETS members to instance of .NET primitive types (such as most number types, `[char]`, and  `[bool]`) (even though they _are_ passed through to methods); additionally, the engine _caches_ certain numbers so `$v = 42; $v | Add-Member foo bar` doesn't just make `$v.foo` return `'bar'`, but also associates the property with the _literal_:  \r\n`& { param($p) $p.foo } 42` then prints `'bar'`.\r\n\r\n      * _Potentially_, by _engine-internal_ code that _opts-into_ the v2 behavior; the - sensible - default in v3+ is to leave `StoreTypeNameAndInstanceMembersLocally`  at `false`, i.e. to associate the ETS instance members with the the wrapped object themselves. (Note that _user code_ cannot opt-into v2 behavior, because the [static method that creates a `PSObject` with `StoreTypeNameAndInstanceMembersLocally` set to `true` is `internal`](https://github.com/PowerShell/PowerShell/blob/2c8955eaebfa147e6973e24ef8495afc6d6ef104/src/System.Management.Automation/engine/MshObject.cs#L1050).) See below.\r\n\r\nNote that for a method in _compiled code_ the _only_ way to receive an object with ETS members - whether instance or type-level, whether with `StoreTypeNameAndInstanceMembersLocally` set to `true` or not - is to declare the parameter as `PSObject`. \r\n\r\nBy contrast, a _cmdlet's_ parameters - which are implemented as .NET type _properties_ - _do_ receive `PSObject` wrappers as such even for `object`-typed parameters = properties (not just for `PSObject`-typed ones).\r\n\r\n---\r\n\r\n**Instances of wrapper-only instance members  in the engine code as of PowerShell Core 7.1.0-preview.1** (`StoreTypeNameAndInstanceMembersLocally` set to `true`):\r\n\r\nNote: Obtained via regex `PSObject.AsPSObject([^)]+?,.+?)`, with false positives weeded out.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/022c14917f266818ca5d1e9c08955d85a0b70a87/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Get-Error.cs#L79\r\n\r\n> Or lets say you're just trying to add a property or type name for formatting, now everywhere that instance is used is changed\r\n\r\nThe above use avoids that, and constitutes  the aforementioned [edge case](https://github.com/PowerShell/PowerShell/issues/11122#issuecomment-555736430); it is a legitimate use that should have no impact on user code and is unlikely to raise questions, given that the context is _for-display_ formatting.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/022c14917f266818ca5d1e9c08955d85a0b70a87/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Select-Object.cs#L536\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/022c14917f266818ca5d1e9c08955d85a0b70a87/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Select-Object.cs#L553\r\n\r\nThis is the _bug_ reported in #7937.\r\n\r\n---\r\n\r\n> I do kinda wish it was used more though. Resurrection is really annoying with types that are cached for instance. For example, making a provider that outputs Type objects, now every literal has PSPath attached to it.\r\n\r\nI think we can cross that bridge when we get to it. Instance members showing up on cached instances is already a problem with cached number literals, as shown above, but adding ETS instance members to instances of such types is ill-advised anyway.\r\n\r\nOverall, I think it is important _not_ to use per-wrapper instance members anymore, so as to spare users the confusion of members disappearing in ways that are hard to reason about and may seem inexplicable altogether to the casual user.\r\n\r\nIt's technically different, but the behavior described in #4347 sows similar confusion.\r\n\r\n",
    "created_at": "2020-04-19T21:32:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616228470",
    "id": 616228470,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjIyODQ3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616228470/reactions"
    },
    "updated_at": "2020-04-29T14:39:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616228470",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "In the light of this discussion what is the better (preferred,safe,right...) way of using `generic.list`?\r\n`[System.Collections.Generic.List[psobject]]` or `[System.Collections.Generic.List[object]]`?\r\n",
    "created_at": "2020-04-20T05:18:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616315715",
    "id": 616315715,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjMxNTcxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616315715/reactions"
    },
    "updated_at": "2020-04-20T05:18:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616315715",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17237559?v=4",
      "events_url": "https://api.github.com/users/scriptingstudio/events{/privacy}",
      "followers_url": "https://api.github.com/users/scriptingstudio/followers",
      "following_url": "https://api.github.com/users/scriptingstudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/scriptingstudio/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/scriptingstudio",
      "id": 17237559,
      "login": "scriptingstudio",
      "node_id": "MDQ6VXNlcjE3MjM3NTU5",
      "organizations_url": "https://api.github.com/users/scriptingstudio/orgs",
      "received_events_url": "https://api.github.com/users/scriptingstudio/received_events",
      "repos_url": "https://api.github.com/users/scriptingstudio/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/scriptingstudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scriptingstudio/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/scriptingstudio"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Use `[System.Collections.Generic.List[object]]` - there is no need for `[psobject]` wrappers around the elements.\r\n\r\n* In PowerShell code, the wrappers will mostly not be noticeable (though can cause side effects, as shown in #5579), but they're unnecessary.\r\n\r\n* In compiled code, if you pass something like `[System.Collections.Generic.List[psobject]] @(1, 2)` to a `System.Collections.Generic.List<object>`-typed method parameter, that code will see the list elements as `[psobject]`, not `[int]`.\r\n\r\n---\r\n\r\nLet me try to summarize at a higher level (my personal assessment):\r\n\r\n* From the perspective of code _written in  PowerShell_, `[psobject]` should never have entered the picture: it should always have been an _invisible helper type, used only behind the scenes_ (Compiled (C#) code for cmdlets, by contrast, _does_ need to be aware of `PSObject` and use it on occasion, but by no means always - see #5551). To put it differently: The presence of `[psobject]` in Powershell code amounts to a _leaky abstraction_.\r\n\r\n* There are unfortunate historic reasons that promoted the visibility and use of `PSObject`:\r\n\r\n  * The unfortunate technical conflation of `[pscustomobject]` and `[psobject]`: they _both_ point to `System.Management.Automation.PSObject` - even though there is a distinct `System.Management.Automation.PSCustomObject` type (see #4344). Only the latter should be visible to PowerShell code. The conflation causes a number of problems, such as #4343 and #11921\r\n\r\n  * Early PowerShell code - before the availability of syntactic sugar `[pscustomobject] @{ ... }`, which notably does _not_ work in the form `[psobject] @{ ... }` - often used `New-Object PSObject`, even though `New-Object PSCustomObject` would have been the conceptually appropriate form from the beginning.\r\n\r\n  * Syntax diagrams for cmdlets with \"untyped\" parameters show `<PSObject>` (which is technically correct, but from a PowerShell user's perspective `<Object>` would make more sense - it would be a beneficial \"lie\", just like `([psobject] 42) -is [int]` being `$true` is).\r\n\r\n  * (Note that hidden members such as `.psobject` are obviously useful for advanced tasks, but, given that they're automatically available on any value directly, they don't require dealing with `[psobject]` as a whole.)\r\n\r\nWhile `[psobject]` cannot _technically_ be banished anymore from PowerShell code due to backward compatibility concerns:\r\n\r\n* we can fix the aforementioned bugs resulting from the conflation of `[pscustomobject]` and `[psobject]`, as well as the bugs that cause different behavior in the presence of incidental `[psobject]` wrappers.\r\n\r\n* we can _document_ that direct use of `[psobject]` is virtually never necessary (see below), thereby discouraging its use.\r\n\r\nEliminating `[psobject]` from PowerShell code simplifies the \"object ontology\" for PowerShell users: Objects fall into only one of two categories:\r\n\r\n* instances of .NET types that PowerShell optionally decorates with additional members, the implementation of which you needn't know or care about.\r\n\r\n* dynamically constructed ad hoc objects (\"property  bags\") in the form of `[pscustomobject]` / `System.Management.Automation.PSCustomObject` instances.\r\n\r\nThat both these features are ultimately implemented via `[psobject]` is purely an implementation detail.\r\n\r\n---\r\n\r\nTo recap the _only_  scenario in which you currently truly _need_ `[psobject]` in PowerShell code:\r\n\r\n* If you define a _method_ in a _PowerShell class_ that accepts what is conceptually a `[string]` parameter _and_ that parameter needs access to a given string's ETS _instance_ members (which would apply if you pass `$PROFILE` and need access to the `AllUsersAllHosts` property, for instance, or if you pass a `Get-Content`-output string and need access to the `.ReadCount` property, for instance), you must define that parameter as `[psobject]`.\r\n\r\n  * This conceptually obscure requirement solely exists due to a _technical limitation_ that is outside PowerShell's control.\r\n\r\n* As stated, `[psobject]`-wrapped instances of _other_ types work fine (except, potentially, due to the _bug_ described in  #7937), and in _functions_ / _scripts_ / _script blocks_ even `[string]` works fine, so there is _never_ a need to type a parameter `[psobject]` there.\r\n",
    "created_at": "2020-04-20T13:34:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616556799",
    "id": 616556799,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjU1Njc5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616556799/reactions"
    },
    "updated_at": "2020-04-20T13:41:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616556799",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 thanks for a detailed response. It is clear and cool. ",
    "created_at": "2020-04-20T18:53:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-616744062",
    "id": 616744062,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjc0NDA2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616744062/reactions"
    },
    "updated_at": "2020-04-20T18:53:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616744062",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17237559?v=4",
      "events_url": "https://api.github.com/users/scriptingstudio/events{/privacy}",
      "followers_url": "https://api.github.com/users/scriptingstudio/followers",
      "following_url": "https://api.github.com/users/scriptingstudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/scriptingstudio/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/scriptingstudio",
      "id": 17237559,
      "login": "scriptingstudio",
      "node_id": "MDQ6VXNlcjE3MjM3NTU5",
      "organizations_url": "https://api.github.com/users/scriptingstudio/orgs",
      "received_events_url": "https://api.github.com/users/scriptingstudio/received_events",
      "repos_url": "https://api.github.com/users/scriptingstudio/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/scriptingstudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scriptingstudio/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/scriptingstudio"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm glad to hear the comment was helpful, @scriptingstudio, and I appreciate the feedback.\r\n\r\n@SeeminglyScience, per the protocol we had agreed on - expressing  an overall sentiment of dissent via a thumbs-down emoji - I've already marked your previous comment accordingly, but, given that the follow-up comments were lengthy, perhaps a focused summary is helpful:\r\n\r\n>  I remember very early on just thinking \"oh it's a PowerShell object, it makes objects do PowerShell things\".\r\n\r\nThat something has a long history of usage is not per se justification for continuing that usage.\r\n\r\n> 🤷 won't stop folks from doing it.\r\n\r\nShowing indifference toward ill-advised usage is problematic in general, but especially in the context of recommending related usage explicitly on the grounds of accommodating the ill-advised usage.\r\n\r\n> I do kinda wish it was used more, though.\r\n\r\nAdvocating for increased use of a feature that represents a step backward and decreases the predictability of the language for end users is problematic.\r\n\r\n\r\n\r\n",
    "created_at": "2020-04-21T23:40:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-617466920",
    "id": 617466920,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQ2NjkyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/617466920/reactions"
    },
    "updated_at": "2020-04-21T23:40:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/617466920",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S., @SeeminglyScience: perhaps you can shed light on the behavior described in #12411.",
    "created_at": "2020-04-21T23:48:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12359#issuecomment-617468843",
    "id": 617468843,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12359",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQ2ODg0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/617468843/reactions"
    },
    "updated_at": "2020-12-19T22:20:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/617468843",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
