[
  {
    "author_association": "COLLABORATOR",
    "body": "That is the syntax used for types. I think it would be confusing and ambiguous to use that.\r\nIf you have a type named ReadOnly or Constant, which is completely legal, you can't tell that apart from variable properties. ",
    "created_at": "2021-03-16T19:38:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800550016",
    "id": 800550016,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDU1MDAxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800550016/reactions"
    },
    "updated_at": "2021-03-16T19:38:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800550016",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "NONE",
    "body": "maybe this:\r\n[PSReadOnly]\r\n[PSConstant]\r\n\r\nwith the prefix PS",
    "created_at": "2021-03-16T19:40:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800551141",
    "id": 800551141,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDU1MTE0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800551141/reactions"
    },
    "updated_at": "2021-03-16T19:41:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800551141",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think @powercode is correct: we should reserve the `[<name>]` syntax for type literals to avoid confusion and name conflicts (we already have one unfortunate exception, pseudo type `[ordered]`; I don't think we should add more.)\r\n\r\nI do think it would be nice to have a simpler way to declare such variables, however.\r\n\r\nGiven that `$private:foo` already declares an `-Option Private` variable, one option is to support `$readonly:foo` and `$constant:foo`.\r\n\r\nDue to support for namespace variable notation, there too the potential for naming conflict exists, if someone happens to declare PS drives named `readonly` and `constant` (which doesn't seem likely, however).\r\n\r\n",
    "created_at": "2021-03-16T19:55:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800560343",
    "id": 800560343,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDU2MDM0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800560343/reactions"
    },
    "updated_at": "2021-03-16T20:57:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800560343",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "We can definitely have attributes on a var like `[ValidateNotNull()]$var` so extending that further like `[ReadOnly()]` or `[Constant()]` doesn't seem too hard of an ask. The different between an attribute and type here are the parenthesis.",
    "created_at": "2021-03-16T20:11:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800569649",
    "id": 800569649,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDU2OTY0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800569649/reactions"
    },
    "updated_at": "2021-03-16T20:11:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800569649",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "For me at least, a readonly/constant attribute seems to make more sense than a pseudo-namespace.\r\n\r\nThat said, the utility of this kind of thing in PowerShell is generally fairly limited, so I'm not sure it's really worth the necessary time investment to implement.",
    "created_at": "2021-03-16T21:04:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800603551",
    "id": 800603551,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDYwMzU1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800603551/reactions"
    },
    "updated_at": "2021-03-16T21:04:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800603551",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> more sense than a pseudo-namespace.\r\n\r\nMy thinking is twofold:\r\n\r\n* We already have such pseudo namespaces / scope specifiers: `$private:`, `$using:`, `$global:`, `$script:`, `$local:` - they wont go away, and `$readonly:` and `$constant:` fit right in.\r\n   * `$private:` isn't a _scope_. it is a variable _option_ applied to a _local_ variable, as would `$readonly:` and `$constant:` be; this conflation isn't great, but it is well-established.\r\n\r\n* By contrast, even though the use of attributes ultimately provides more flexibility:\r\n  * Using attributes to constrain variable assignments is an advanced technique rarely seen in the wild, probably because people don't _expect_ it to work.\r\n  * The syntax doesn't come naturally to those used to PowerShell-native features only, except if they're savvy enough to author advanced functions.\r\n  ",
    "created_at": "2021-03-16T21:14:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800610346",
    "id": 800610346,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDYxMDM0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800610346/reactions"
    },
    "updated_at": "2021-03-16T21:16:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800610346",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I don't agree. We currently have scope modifiers. `$private:` is the only real outlier, but that's mainly an implementation detail. All the current scope modifiers are just that.\r\n\r\n\"readonly\" is not a scope. Nor is \"constant\". Neither of those properties are scopes. They're properties of a variable.\r\n\r\nAnd yeah, it won't come naturally. _**Good**_. There are irritating caveats and weirdness associated with using readonly or constant variables. Folks who use them should be well aware before they stumble into a day's worth of needless confusion resulting from careless use.",
    "created_at": "2021-03-17T00:33:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800705514",
    "id": 800705514,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDcwNTUxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800705514/reactions"
    },
    "updated_at": "2021-03-17T00:33:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800705514",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> There are irritating caveats and weirdness associated with using readonly or constant variables. \r\n\r\nThat's a separate discussion. \r\nWe're not debating the inherent merits of PowerShell's readonly / constant variables here - only how to facilitate _declaring_ them.\r\n\r\nThe general point is: `$<name>:` is already a muddled conflation of several concepts in that, `<name>`:\r\n\r\n* can refer to a _drive_, e.g., `$function:`\r\n\r\n* can refer to a bona fide _scope_: `$global:`, `$local:`, `$script:`\r\n\r\n* can refer to a _quasi_-scope - a reference to the caller's scope _tree_ (something either _directly_ in the caller's scope or _visible_ in the caller's scope via an ancestral scope), via `$using:`\r\n\r\n* yes,  currently an outlier, a local-scope variable with _option_ `Private`, preventing it from being seen by descendant scopes (`$scope:`) - just like `ReadOnly` and `Constant` (and `AllScope`) are options, but currently don't have their own specifier.\r\n\r\nYes, I can see how \"we've-already-created-this-mess-so-let's-add-to-it\"  isn't a great argument in general.\r\n\r\nPragmatically speaking, however, adding `$readonly:` and `$constant:` works in a kinda-sorta-if-you-squint-just-right way, and to my mind better than venturing into the world of attributes.\r\n\r\nAnd, to recap, arguing that this shouldn't be made easy because you don't like the underlying concepts is (a)  specious in itself and (b) debating these concepts is an entirely separate conversation.\r\n\r\nTo put it differently: if you think the underlying concepts aren't worthwhile, we shouldn't be discussing the best syntax to implement them.\r\n\r\nAnd, of course, if you're just happy with _some_ syntax: `New-Variable` and `Set-Variable` already provide that.\r\n",
    "created_at": "2021-03-17T01:32:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800725766",
    "id": 800725766,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDcyNTc2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800725766/reactions"
    },
    "updated_at": "2021-03-17T02:47:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800725766",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me try to frame it another way:\r\n\r\n* If we think that read-only and constant variables are too treacherous a feature to spring on unsuspecting users:\r\n  * We should debate these features and see if they're redeemable.\r\n  * Before a conclusion is reached, any discussion about _syntactic sugar_ should be _shelved_.\r\n\r\n* Once a conclusion has been reached:\r\n  * If the features are redeemable, let's discuss syntactic sugar: attributes vs. pseudo scopes.\r\n  * If not, the existing `New-Variable` and `Set-Variable` cmdlets will do.\r\n\r\nMixing the merit and syntactic-sugar debates should be avoided.",
    "created_at": "2021-03-17T02:12:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800739009",
    "id": 800739009,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDczOTAwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800739009/reactions"
    },
    "updated_at": "2021-03-17T02:27:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800739009",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To return to the syntactic sugar debate:\r\n\r\n> \"readonly\" is not a scope. Nor is \"constant\". Neither of those properties are scopes. They're properties of a variable.\r\n\r\nIn PowerShell terms, they are variable _options_ ([`System.Management.Automation.ScopedItemOptions`](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.ScopedItemOptions)) - just like `Private` is, _for which we already have a \"scope\" specifier_, `$private:` That said, unlike `ReadOnly` and `Constant`, `Private` has scope-behavior _implications_, as does `AllScope`.",
    "created_at": "2021-03-17T03:07:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800757633",
    "id": 800757633,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDc1NzYzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800757633/reactions"
    },
    "updated_at": "2021-03-17T03:07:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800757633",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Related/half dupe of #8906\r\n\r\nAlso I'm not sure it makes sense to put any effort into this until they're reworked.  The way they were designed and implemented doesn't really make sense outside of automatic variables, and makes accidental shadowing even more of an issue.",
    "created_at": "2021-03-17T04:31:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800785677",
    "id": 800785677,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDc4NTY3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800785677/reactions"
    },
    "updated_at": "2021-03-17T04:31:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800785677",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for that link, @SeeminglyScience - hadn't seen it; interesting debate.\r\n\r\nSince the linked issue is open and has actually been green-lighted - based on the attributes approach - but doesn't mention shadowing or other pitfalls, perhaps you can flesh these out there - or perhaps create a new issue, if you have specific ideas for how to improve how these variables work. (I get that accidental variable shadowing is a general concern in PowerShell).\r\n",
    "created_at": "2021-03-17T07:31:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-800863081",
    "id": 800863081,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDg2MzA4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800863081/reactions"
    },
    "updated_at": "2021-03-17T07:31:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/800863081",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Since the linked issue is open and has actually been green-lighted - based on the attributes approach\r\n\r\nFWIW my understanding was that they asserted what the right pattern would be, but have not ruled on if it would be accepted.  Maybe that's implied though, I dunno.\r\n\r\n> perhaps you can flesh these out there - or perhaps create a new issue, if you have specific ideas for how to improve how these variables work. (I get that accidental variable shadowing is a general concern in PowerShell).\r\n\r\nI went over it a little bit in [this comment](https://github.com/PowerShell/PowerShell/issues/8906#issuecomment-531911209).  Basically I'd like to see these as parse time concepts.\r\n\r\nFor constants, the compiler would actually treat them as a constant value rather than a variable lookup. This would greatly limit what types of variables or expressions could be used (similar to C#), but it could provide some solid readability (variables in attributes for instance) and somewhat of a performance boost.\r\n\r\nFor readonly, I'd like to see something that does *not* set the `ScopedItemOptions`, but instead just tells the parser to yell if it sees a reassignment. That solves the shadowing problem, and gives immediate feedback in the editor when accidently shadowing in the same lexical scope.\r\n\r\nWould these changes be breaking? Yeah. Are they worth doing anyway? Ehhh... probably not.  I don't think it'd get much use still and it'd be a lot of work.",
    "created_at": "2021-03-17T13:47:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801094493",
    "id": 801094493,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTA5NDQ5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801094493/reactions"
    },
    "updated_at": "2021-03-17T13:47:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801094493",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> but have not ruled on if it would be accepted.\r\n> Maybe that's implied though, I dunno.\r\n\r\nYes, I believe the label \"Up-for-Grabs\" implies that.\r\n@iSazonov, can you confirm?\r\n\r\nThe improvements you suggest make sense, and I can see the potential problem with the effort-reward balance (as well as the potential to break things). The bigger, fundamental problem, I think, is PowerShell's dynamic scoping and shadow-on-assignment logic - but changing that would be the mother of all breaking changes.\r\n\r\nA potential middle ground that requires much less effort is to make the attribute turn on _both_ `AllScope` and `ReadOnly` / `Constant` - which is supported, ~~but not directly via the syntax of `New-Variable` and `Set-Variable`, because the flag nature of the `ScopedItemOptions` enum isn't supported due to only supporting a _scalar_ `-Option` argument~~ [_turns out it still works with multiple values_].\r\n\r\nTo demonstrate:\r\n\r\n```powershell\r\nNew-Variable foo bar -Option AllScope, ReadOnly\r\n\r\n& { $foo = 'baz' } # FAILS even in CHILD SCOPE, as intended: \"WriteError: Cannot overwrite variable foo because it is read-only or constant.\"\r\n```\r\n\r\nThis would solve the shadowing problem.\r\n\r\nWould PSES be able to pick up on this?\r\n\r\nGoing back to the syntax and potential implementation, and reviving @p0W3RH311's idea of using _types_ rather than _attributes_, which do strike me as syntactically preferable:\r\n\r\n`[PSReadOnly]` and `[PSConstant]` could then be new type accelerators that refer to two new classes that could derive from [`System.Management.Automation.PSVariable`](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.PSVariable), `System.Management.Automation.PSReadOnlyVariable`  and `System.Management.Automation.PSConstantVariable`  (somewhat paradoxically), which could encapsulate the `ReadOnly | AllScope` and `Constant | AllScope` construction respectively, which would give us:\r\n\r\n```powershell\r\n[PSReadOnly] $foo = 'bar'\r\n& { $foo = 'baz' } # FAILS\r\n```\r\n\r\n\r\n\r\n",
    "created_at": "2021-03-17T14:20:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801120130",
    "id": 801120130,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTEyMDEzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801120130/reactions"
    },
    "updated_at": "2021-03-17T18:21:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801120130",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S.: Of course, this logic could also be hidden behind `$readonly:` and `$constant:`.\r\n\r\nTo me, the only thing the attribute-based solution has going for it is that it bears the _lowest_ risk of name conflicts - for the developer experience, I think `[PSReadOnly]` and `$readonly:` are preferable.\r\n\r\n~~Either way, we should ~~fix~~ enhance `New-Variable` and `Set-Variable` to ~~allow~~ make direct construction of `ReadOnly | AllScope` and `Constant | AllScope` variables easier - in the simplest case by changing `-Option <ScopedItemOptions>` to `-Option <ScopedItemOptions[]>` - see #15057.~~",
    "created_at": "2021-03-17T14:29:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801130534",
    "id": 801130534,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTEzMDUzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801130534/reactions"
    },
    "updated_at": "2021-03-17T18:21:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801130534",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> This would solve the shadowing problem.\r\n\r\nOr cause it, depending on how you look at it. There's two sides to the shadowing problem\r\n\r\n1. Variable shadowing within the same project/script. `AllScope` deals with that somewhat\r\n2. Shadowing between different non-module projects/scripts. If you call a build script that happens to use the same variable, it now blows up\r\n\r\nThat's why I think it should be a semantic check in the parser rather than something the runtime enforces.\r\n\r\n> Would PSES be able to pick up on this?\r\n\r\nPSSA could hack together an analyzer, but it'd be very fragile.\r\n",
    "created_at": "2021-03-17T15:30:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801178131",
    "id": 801178131,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTE3ODEzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801178131/reactions"
    },
    "updated_at": "2021-03-17T15:30:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801178131",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Shadowing between different non-module projects/scripts.\r\n\r\nDynamic scoping: the gift that keeps on giving - and which we cannot ungift without serious breaking changes.\r\n\r\n>  a semantic check in the parser \r\n\r\nIf I understand correctly, this wouldn't _solve_ that problem, it would only report it _earlier_ (parsing script B in which `$foo` is assigned to after having executed script A that defined a read-only `$foo`; it also wouldn't help at _edit_ time)  - and that to me indeed doesn't seem worth the effort.\r\n\r\nA proper solution will have to wait till #6745, I think.\r\n\r\nIn the meantime, the `ReadOnly | AllScope` solution provides at least _some_ value and is comparatively easy to implement and, as an _opt-in_, is non-breaking - you just need to be aware of the pitfall you describe.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-03-17T17:56:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801291150",
    "id": 801291150,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTI5MTE1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801291150/reactions"
    },
    "updated_at": "2021-03-17T17:57:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801291150",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Dynamic scoping: the gift that keeps on giving - and which we cannot ungift without serious breaking changes.\r\n\r\n😁\r\n\r\n> If I understand correctly, this wouldn't _solve_ that problem, it would only report it _earlier_ (parsing script B in which `$foo` is assigned to after having executed script A that defined a read-only `$foo`; it also wouldn't help at _edit_ time) - and that to me indeed doesn't seem worth the effort.\r\n\r\nThe semantic check would be purely static analysis.\r\n\r\nSo for example:\r\n\r\n```powershell\r\n$sb = {\r\n    $testing = 'something'\r\n}\r\n\r\nfunction Foo {\r\n    param([scriptblock] $Action)\r\n    end {\r\n        [readonly()] $testing = ''\r\n\r\n        # Doesn't throw here, code is external\r\n        & $Action\r\n\r\n        # Parser error here.  It can determine that it's a reassignment of a readonly variable.\r\n        # No runtime checks needed.\r\n        $testing = 'a'\r\n}\r\n\r\nFoo $sb\r\n```\r\n\r\nThink of it like how in a class, if you try to use a variable that wasn't explicitly assigned in the method, you get a parse error.  Same type of thing, runtime state doesn't matter, it's purely analysis.\r\n\r\n> In the meantime, the `ReadOnly | AllScope` solution provides at least _some_ value and is comparatively easy to implement and, as an _opt-in_, is non-breaking - you just need to be aware of the pitfall you describe.\r\n\r\nIt solves the problem that is the least concerning imo.  I still very strongly recommend against this pattern for anything other than automatic variables.",
    "created_at": "2021-03-17T18:10:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801300459",
    "id": 801300459,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTMwMDQ1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801300459/reactions"
    },
    "updated_at": "2021-03-17T18:10:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801300459",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Quick follow-up on the `-Option` typing: I forgot that even a scalar `ScopedItemOptions` allows you to pass _multiple_ flags, courtesy of PowerShell's flexible from-string conversion: `New-Variable foo bar -Option 'ReadOnly, AllScope'` works; however, because it is obscure, it still makes sense to make the parameter array-valued (for the more natural `New-Variable foo bar -Option ReadOnly, AllScope` syntax) - see #15057",
    "created_at": "2021-03-17T18:16:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801304687",
    "id": 801304687,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTMwNDY4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801304687/reactions"
    },
    "updated_at": "2021-03-17T18:19:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801304687",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As a quick aside, @SeeminglyScience: Thanks for showing me that multiple values can actually be passed as an _array_ to a flag-based enum parameter type, even if the parameter type is a scalar; that is,\r\n`New-Variable foo bar -Option ReadOnly, AllScope` works just fine - I've created an issue to suggest better user guidance in syntax diagrams, parameter names, and the docs in that regard: #15058",
    "created_at": "2021-03-17T21:57:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801469011",
    "id": 801469011,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTQ2OTAxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801469011/reactions"
    },
    "updated_at": "2021-03-17T21:57:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801469011",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Understood re static analysis; I made an assumptions that you didn't make, namely that the variable is declared with `AllScope`, in which case the per-script static analysis doesn't help in the script-calling-another-script scenario (and if the static analysis of script B doesn't take into account the state created by calling script A at the time of invocation of B, then even the earlier-detection bonus doesn't apply).\r\n\r\nWith per-script-file-in-isolation static analysis all you get is early warning _per script_, and _cross-script_  you're again faced with:\r\n\r\n* potential inadvertent shadowing if `AllScope` is _not_ used.\r\n* potential unwanted breakage if `AllScope` _is_ used.\r\n\r\nSuch static analysis would amount to a limited \"lexical scoping overlay\" over PowerShell's dynamic scoping that to me doesn't seem worth the - nontrivial, I'm sure - effort.\r\nI think a hypothetical future PowerShell version with proper lexical scoping only would be the only satisfactory solution.\r\n\r\n---\r\n\r\nIn terms of providing guidance to script authors who want to make do with the _current_ features, it boils down to this:\r\n\r\n* If you want to limit your readonly/constant variable to the _current scope only_, use\r\n`New-Variable foo bar -Option Private, Readonly` - but you need to be aware of what does and doesn't directly in the current scope.\r\n\r\n* Otherwise, dynamic scoping applies, and you have two options:\r\n\r\n  * If you want your descendant scopes to be able to shadow (override with local copies) your readonly/constant variables, use\r\n`New-Variable foo bar -Option ReadOnly` - but note that _accidental_ shadowing may occur.\r\n\r\n  * If you want to make your descendant scopes to use your definition of your readonly/constant variable (though in the readonly case descendant scope can still  forcefully remove and thereby override it), use\r\n`New-Variable foo bar -Option ReadOnly, AllScope` - but note that unrelated code may accidentally try to assign to your variable and therefore malfunction.\r\n\r\nThis leaves the question whether it's worth throwing syntactic sugar at these use cases.\r\nI can see both sides of the argument, and ultimately don't feel strongly about this.\r\n\r\n\r\n",
    "created_at": "2021-03-17T22:15:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-801477647",
    "id": 801477647,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTQ3NzY0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801477647/reactions"
    },
    "updated_at": "2021-03-17T22:16:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/801477647",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Language working group:\r\nThis is a duplicate of #8906. The powershell committee has reviewed it and agreed that \"attributes is the right solution\", so let's go with what has been decided. If there is any disagreement with that decision, please raise your concern in #8906 and carry on with the discussion there.\r\n",
    "created_at": "2021-05-06T17:08:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15044#issuecomment-833694235",
    "id": 833694235,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15044",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzY5NDIzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833694235/reactions"
    },
    "updated_at": "2021-05-06T17:50:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833694235",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  }
]
