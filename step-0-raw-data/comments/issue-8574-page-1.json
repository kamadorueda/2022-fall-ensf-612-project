[
  {
    "author_association": "NONE",
    "body": "more specifically, a session:\r\n\r\n```\r\nPS C:\\Users\\geoff> Get-ExecutionPolicy\r\nRestricted\r\nPS C:\\Users\\geoff> .\\hello.ps1\r\n.\\hello.ps1 : File C:\\Users\\geoff\\hello.ps1 cannot be loaded because running scripts is disabled on this system. For\r\nmore information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\r\nAt line:1 char:1\r\n+ .\\hello.ps1\r\n+ ~~~~~~~~~~~\r\n    + CategoryInfo          : SecurityError: (:) [], PSSecurityException\r\n    + FullyQualifiedErrorId : UnauthorizedAccess\r\nPS C:\\Users\\geoff> powershell.exe -ExecutionPolicy Bypass -File .\\hello.ps1\r\nhello!\r\nPS C:\\Users\\geoff> powershell.exe -File .\\hello.ps1 -ExecutionPolicy Bypass\r\nFile C:\\Users\\geoff\\hello.ps1 cannot be loaded because running scripts is disabled on this system. For more\r\ninformation, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\r\n    + CategoryInfo          : SecurityError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : UnauthorizedAccess\r\n```\r\n",
    "created_at": "2019-01-01T00:11:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8574#issuecomment-450700783",
    "id": 450700783,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8574",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDcwMDc4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/450700783/reactions"
    },
    "updated_at": "2019-01-01T00:11:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/450700783",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1680611?v=4",
      "events_url": "https://api.github.com/users/Groostav/events{/privacy}",
      "followers_url": "https://api.github.com/users/Groostav/followers",
      "following_url": "https://api.github.com/users/Groostav/following{/other_user}",
      "gists_url": "https://api.github.com/users/Groostav/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Groostav",
      "id": 1680611,
      "login": "Groostav",
      "node_id": "MDQ6VXNlcjE2ODA2MTE=",
      "organizations_url": "https://api.github.com/users/Groostav/orgs",
      "received_events_url": "https://api.github.com/users/Groostav/received_events",
      "repos_url": "https://api.github.com/users/Groostav/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Groostav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Groostav/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Groostav"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As I recall, both the `-File` and `-Command` parameters must _always_ come last in a command line call to `powershell`. \r\n\r\nWhen using `-File`, any further arguments after the file name are interpreted as _arguments to be passed to the script itself_. See [here](https://docs.microsoft.com/en-us/powershell/scripting/components/console/powershell.exe-command-line-help?view=powershell-6#-file--).\r\n\r\n\r\nWhen using `-Command` everything that follows is interpreted as part of the command string when called from the command line. If you're executing an instance of `powershell` _from_ PowerShell itself, then you can use an actual script block to properly delineate the command you're passing in. If you specify `-Command` from a standard command line or without using a script block as the argument, it _must_ be the last parameter supplied for this reason. See [here](https://docs.microsoft.com/en-us/powershell/scripting/components/console/powershell.exe-command-line-help?view=powershell-6#-command).\r\n\r\nSo, yeah, it's not really possible for `-File` or `-Command` to be order-agnostic; in general those two need to be the last in any command sequence, although apart from that you can put the other parameters in whichever order you like. ðŸ˜„ ",
    "created_at": "2019-01-01T00:51:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8574#issuecomment-450702357",
    "id": 450702357,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8574",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDcwMjM1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/450702357/reactions"
    },
    "updated_at": "2019-01-01T00:53:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/450702357",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "ah, so this is just yet another gotcha in shell scripting --though now that I think about it the C family of languages all have their own gotchas around `vararg` arguments, so I suppose I shouldn't be surprised to find them here too. \r\n\r\nIs another good practice is then to also write scripts that validate they dont get any data they don't expect? Then I would've seen an exception in something like the `param` block for my script, once I had it running. Though, looking at [about function advanced parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-6) nothing there immediately implies that I can somehow forbid extra command line arguments. \r\n\r\nIs there an option for something like that with `Param()` and its various annotations? In other words, is there an elegant way I can use the `Param` block to test if any extra arguments or options have been left on the command line for my script, and throw an exception in such a case?\r\n\r\nAlso, I'm no expert at reading complex usage documents, but this seems unfortunate:\r\n\r\n```\r\n> powershell.exe /?\r\nPowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]\r\n    #...\r\n    [-ConfigurationName <string>]\r\n    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]\r\n    [-Command { - | <script-block> [-args <arg-array>]\r\n    #...\r\n```\r\n\r\nIf you write `-File path arg1 arg2 -ExecutionPolicy Bypass`, as is kind've implied by the documentation, then `-ExecutionPolicy` and `Bypass` simply become _arg3_ and _arg4_, correct? \r\n\r\nAnyways, thanks for the clarification, I'm suprised at long I've been using powershell for and not realized some of these ambiguities. ",
    "created_at": "2019-01-07T19:09:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8574#issuecomment-452046414",
    "id": 452046414,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8574",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA0NjQxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452046414/reactions"
    },
    "updated_at": "2019-01-07T19:10:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452046414",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1680611?v=4",
      "events_url": "https://api.github.com/users/Groostav/events{/privacy}",
      "followers_url": "https://api.github.com/users/Groostav/followers",
      "following_url": "https://api.github.com/users/Groostav/following{/other_user}",
      "gists_url": "https://api.github.com/users/Groostav/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Groostav",
      "id": 1680611,
      "login": "Groostav",
      "node_id": "MDQ6VXNlcjE2ODA2MTE=",
      "organizations_url": "https://api.github.com/users/Groostav/orgs",
      "received_events_url": "https://api.github.com/users/Groostav/received_events",
      "repos_url": "https://api.github.com/users/Groostav/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Groostav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Groostav/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Groostav"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "In my experience, specifying `[CmdletBinding()]` will explicitly forbid any additional arguments from being supplied, _unless_ a declared parameter has the `[Parameter(ValueFromRemainingArguments)]` attribute declared. However, some arguments may be declared positionally and will accidentally accept the input in certain cases.\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/50788084-615e5300-1286-11e9-883b-3f45fb83ef3a.png)\r\n\r\nFor this reason, I generally recommend only declaring positions for the most commonly used parameters.\r\n\r\nAgreed that the display is confusing as heck, and yes your inference is correct. ",
    "created_at": "2019-01-07T19:12:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8574#issuecomment-452047373",
    "id": 452047373,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8574",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA0NzM3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452047373/reactions"
    },
    "updated_at": "2019-01-07T19:14:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452047373",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
