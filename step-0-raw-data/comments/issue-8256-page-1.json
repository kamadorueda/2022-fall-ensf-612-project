[
  {
    "author_association": "MEMBER",
    "body": "I'm not sure the engine should automatically add attributes, at least not in a way that is visible via `ScriptBlock.Attributes`.\r\n\r\nHow does C# work, e.g. with local functions?\r\n\r\nI realize I've broken this ideal already with format script blocks, but I didn't see a better option. Maybe I should have just marked those script blocks as \"format\" script blocks and the debugger would also skip those.\r\n\r\nFor the debugging related attributes, I do think it is reasonable to behave as though the parent attribute was specified, just that it shouldn't be visible via the api.\r\n\r\nAs for the implementation, you can get the parent from the Ast property.",
    "created_at": "2018-11-26T21:00:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-441796263",
    "id": 441796263,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTc5NjI2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/441796263/reactions"
    },
    "updated_at": "2018-11-26T21:00:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/441796263",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Blowing the dust off of this as it just came on my radar again.\r\n\r\n> I'm not sure the engine should automatically add attributes, at least not in a way that is visible via `ScriptBlock.Attributes`.\r\n\r\nI agree. I wouldn't want the attributes to show up in the `Attributes` collection.\r\n\r\n> How does C# work, e.g. with local functions?\r\n\r\nLocal functions in C# need to define their own attributes in order for those attributes to be in effect. The key difference there is that you can define those attributes on local functions, but you cannot define those attributes on script blocks that do not have a `param` block. With that in mind, I'm thinking if a script block is a \"simple\" script block (i.e. it does not have a `param` block, and is therefore not meant to function like a command does), it should inherit the debugger attributes that are set on the nearest parent \"command\" script block (i.e. one that has a `param` block). Functionality-wise, that would solve this problem nicely, allowing script blocks to be used as usual, but authors would have to set those attributes on any \"command\" script block (script block with parameters) if they wanted them set, because they are able to do so.\r\n\r\n> I realize I've broken this ideal already with format script blocks, but I didn't see a better option. Maybe I should have just marked those script blocks as \"format\" script blocks and the debugger would also skip those.\r\n\r\nAre you referring to the script blocks defined in the C# format ps1xml definitions? From what I can tell, those already have `DebuggerHidden` automatically set to true on them. It only falls short when they internally invoke a nested script block using a call operator so that they can turn down strict mode for some things, but this change would resolve that.\r\n\r\n> For the debugging related attributes, I do think it is reasonable to behave as though the parent attribute was specified, just that it shouldn't be visible via the api.\r\n> \r\n> As for the implementation, you can get the parent from the Ast property.\r\n\r\nThanks for pointing out just using `Ast.Parent` -- that will do nicely. A few things I've noticed since looking more closely at this:\r\n\r\n1. `Ast` has `Find`, but it does not have `ReverseFind`. I'm essentially doing a `ReverseFind`, so I wonder if that would be worth adding to `Ast`. I can keep it as a one-off thing, but `ReverseFind` (and `ReverseFindAll`) could be useful when you want to look up the tree for information. After looking a little more at this though, I think it is faster for me to just process the attributes inline without finding each one, so I'm not moving forward with this.\r\n\r\n1. With respect to the `DebuggerHidden` and `DebuggerStepThrough` properties, I think I should do something like the following:\r\n\r\n    * ~~Add an internal `_debuggerAttributeInheritanceChecked` boolean field to `ScriptBlock`.~~\r\n    * When processing a basic script block, ~~if `_debuggerAttributeInheritanceChecked` is false~~, check recursively for a parent script block that has a param block. If one is found, update `DebuggerHidden` and `DebuggerStepThrough` according to whether or not that script block has a `DebuggerHidden` or `DebuggerStepThrough` attribute on it. ~~Regardless of the outcome of the search, set the `_debuggerAttributeInheritanceChecked` boolean field to true.~~\r\n\r\n(As it turns out, the extra internal field was not necessary)",
    "created_at": "2019-09-11T14:44:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-530413954",
    "id": 530413954,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDQxMzk1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530413954/reactions"
    },
    "updated_at": "2019-09-11T19:36:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530413954",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Also, something that needs to be considered here is compiled script blocks. Based on my tests, a script block is compiled when it is defined. That means if you come along later and tweak the `DebuggerHidden` attribute on that script block, it will make that script block hidden or visible to the debugger (depending on how you changed it), _but any script blocks that are defined within that script block will maintain the debugger visibility that they had when the outer script block was defined_.\r\n\r\nAssuming my understanding of how script block compilation works in PowerShell, that means toggling the debugger visibility attributes should result in a recompilation of the compiled script block that contains those attributes in order to ensure script blocks have the appropriate debugger visibility settings.\r\n\r\nRight now I appear to have this working the way it should locally, except for when someone toggles a `DebuggerHidden` property on a script block.",
    "created_at": "2019-09-11T18:51:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-530515872",
    "id": 530515872,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDUxNTg3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530515872/reactions"
    },
    "updated_at": "2019-09-11T20:04:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530515872",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Is it worthwhile looking at whether you can simply set a flag when entering a scriptblock with DebuggerHidden set and retain it until you actually exit that scope? I.e., all child scopes should inherit it by simple virtue of how PS handles the structure, rather than having to recursively set it implicitly?",
    "created_at": "2019-09-11T19:17:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-530525938",
    "id": 530525938,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDUyNTkzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530525938/reactions"
    },
    "updated_at": "2019-09-11T19:17:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530525938",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Compilation happens in stages. Each stage happens on demand, e.g. if you access a property that requires that stage.  Attributes happen to be one of the first things that get \"compiled\" because the `Attributes` property happens to be important in various ways.\r\n\r\nThere is one design difficulty regarding recompilation - caches. You'd want a design that invalidates caches that might be affected, and also a way to ensure new caches can't be introduced that accidentally miss invalidation upon recompilation.",
    "created_at": "2019-09-11T19:19:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-530526663",
    "id": 530526663,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDUyNjY2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530526663/reactions"
    },
    "updated_at": "2019-09-11T19:19:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/530526663",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As I experiment with this more and dig into how these work, I think it would make much more sense if `DebuggerHidden` acted as a bouncer, keeping the debugger out of a block of code and anything that it invokes (i.e. preventing breakpoints from triggering within that call stack until it immediately steps out of the hidden code). That has been suggested as part of #10530. With that design, it doesn't need to be inherited.\r\n\r\n`DebuggerStepThrough`, however, and `DebuggerNonUserCode`, should carry though to any script blocks defined and invoked within the script block that contains those attributes.\r\n\r\n@vexx32: Your suggestion about setting a flag would work well for what I just described for `DebuggerHidden`. I'm not sure it would work with the others though, but I'm looking into it. I think it would be useful if a given `ScriptBlockAst` had an additional parameter called `ParentScriptBlock` that would refer to the `ScriptBlockAst` in which a nested script block is defined. If I had that, lookup of debugger attributes for assignment to a given script block would be fast and simple.\r\n\r\n@lzybkr: Thanks for those details -- the caches (where they are configured, how to invalidate them) is something I haven't figured out yet.",
    "created_at": "2019-09-13T13:20:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8256#issuecomment-531233893",
    "id": 531233893,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8256",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTIzMzg5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531233893/reactions"
    },
    "updated_at": "2019-09-13T13:30:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531233893",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  }
]
