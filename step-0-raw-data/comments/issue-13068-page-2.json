[
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I've seen that. How exactly would you combine `Start-NativeExecution` with `Invoke-NativeShell` if you'd like the later to effectively throw on a non-zero exit code? I really hope that something like PR #3523 makes it in along with this call native feature because I want the two to work together. I suppose if call native winds up being implemented as a cmdlet (Invoke-NativeShell vs --%) then `-ErrorAction Stop` could be implemented to have it throw (terminating error) on a non-zero exit code.\r\n\r\nCurrently it will be `Start-NativeExecution { Invoke-NativeShell @whatever }`.",
    "created_at": "2020-07-19T05:49:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660592200",
    "id": 660592200,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU5MjIwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660592200/reactions"
    },
    "updated_at": "2020-07-19T05:49:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660592200",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> This point I don't get at all. It's no more lacking a closing delimiter than ins/invoke-nativecommand is. If you need to delimit or feed from the LHS, use here-strings, else it is considered as a single statement.\r\n\r\n`Invoke-NativeShell` does not _need_ any closing delimiter because it is a regular command, whereas the horror of `--%` is not.",
    "created_at": "2020-07-19T05:54:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660592658",
    "id": 660592658,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU5MjY1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660592658/reactions"
    },
    "updated_at": "2020-07-19T05:54:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660592658",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > and SHELL on Linux (defaults to `/bin/bash`)\r\n> \r\n> No: **the _system_ shell on Unix-like platforms is _invariably_ `/bin/sh`**.\r\n\r\nI think the thing should be equivalent to making an executable script file and running it, which delegates the task of choosing the right shell to the operating system and we should not be bothered.  Including, if it starts with `#!`, so be it.",
    "created_at": "2020-07-19T06:02:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660593401",
    "id": 660593401,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU5MzQwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660593401/reactions"
    },
    "updated_at": "2020-07-19T06:02:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660593401",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The idea behind `Invoke-NativeShell` is to provide a convenience wrapper around the native shell's _CLI_.\r\n\r\n* On Unix, that is fully sufficient, and creating an auxiliary script file not only introduces extra overhead, but then reports a random value in `$0` (the script file path), whereas invocation via the CLI it predictably contains `/bin/sh` and can even be set explicitly by following the code-argument with another argument (e.g., `sh -c 'echo $0' foo`)\r\n   * (As an aside: creating a shell script with shebang line `#!/bin/sh` means targeting the system shell by full path just as explicitly as invoking `/bin/sh` directly).\r\n\r\n* On Windows, the execution via a batch file _would_ bring advantages (but not for delegating the task of locating the system shell, which `$env:ComSpec` predictably does), as it would avoid the problems with `%` escaping and `for` behavior mentioned [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660263405).\r\n\r\nTo address the latter as a courtesy (so that users don't have to write their own aux. batch files), for conceptual clarity, we could offer  an\r\n`-AsBatchFile` switch as an _opt-in_.\r\n\r\nThat said, if there is consensus that the majority of public `cmd` command lines used for cut-and-paste are written with _batch-file_ semantics in mind (`%%i` rather than `%i` as a loop variable, ability to escape a verbatim `%` as `%%`), perhaps invariably using an aux. batch file _on Windows_ (while sticking with the CLI on Unix) is the better solution - I do not feel strongly about this, but it would have to be clearly documented, especially given that it means exhibiting behavior that is different from other scripting languages.\r\n\r\n\r\n",
    "created_at": "2020-07-19T12:34:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660637060",
    "id": 660637060,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDYzNzA2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660637060/reactions"
    },
    "updated_at": "2020-07-19T16:14:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660637060",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill\r\n\r\nTo me, the [integration-of-native-errors RFC](https://github.com/PowerShell/PowerShell-RFC/pull/88/files?short_path=e6e13bd#diff-e6e13bdbc99ad974811df49f562f816b) you link to is worth addressing just as urgently as #1995:\r\n\r\nBoth represent necessary steps toward making external programs (native utilities) first-class citizens in PowerShell (as much as conceptually possible), _which they should always have been_.\r\n\r\nBeing a first-class citizen means: _direct_ invocation (with `&` needed  only for _syntactic_ reasons, situationally), not _via a cmdlet_.\r\nIn other words: there should never be an `Invoke-NativeCommand` cmdlet or a `Start-NativeExecution` cmdlet.\r\n\r\n(As an aside: `Start-NativeExecution` is misnamed, as many functions in the `build` module are; `Start` signals _asynchronous_ operation, whereas most of these function are _synchronous_ - see the discussion about `Start-Sleep` at https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4474).\r\n\r\nTherefore, `Invoke-NativeShell` requires no special consideration: PowerShell, as it already does, will set `$LASTEXITCODE` based on the exit code reported by the native-shell executable process (`cmd` / `sh`) invoked.\r\n\r\nThen the mechanism proposed in the RFC will act on it, as it would act on directly invoked executables (e.g., if `$PSNativeCommandErrorAction = 'Stop'` is set, a script-terminating error would occur if `$LASTEXITCODE` is nonzero.)\r\n\r\n(A quick aside - this discussion doesn't belong here: As for a _per-call_ mechanism: something like\r\n`/bin/ls nosuch || $(throw 'ls failed)` works, as does `/bin/ls nosuch || $(exit $LASTEXITCODE)` (the equivalent to a POSIX shell's `/bin/ls nosuch || exit`); #10967 discusses why we unfortunately cannot avoid `$(...)` (without major changes to the grammar); similarly, needing to refer to `$LASTEXITCODE` explicitly probably cannot be avoided.)",
    "created_at": "2020-07-19T13:14:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660642186",
    "id": 660642186,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY0MjE4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660642186/reactions"
    },
    "updated_at": "2020-07-19T13:18:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660642186",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> (As an aside: creating a shell script with shebang line `#!/bin/sh` means targeting the system shell by full path just as explicitly as invoking `/bin/sh` directly).\r\n\r\nThat is not what I wanted to say.  I wanted to say that PowerShell does not need to know what the default shell is because operating systems have this feature built in.  Linux knows how to execute an executable script in case it does not start with `#!` or it starts with something else, like `#!/usr/bin/env python` and Windows knows what to do to call a `.CMD` script, so we should not peek into`%COMSPEC%`’n’stuff either IMHO.  Windows can also execute other scripts but it is based on the script file’s extension, so it obviously does not apply to this case.",
    "created_at": "2020-07-19T18:50:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660690224",
    "id": 660690224,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY5MDIyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660690224/reactions"
    },
    "updated_at": "2020-07-19T18:54:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660690224",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Again, `Invoke-NativeShell`'s mandate should be calling the native shell's _CLI_, not creating auxiliary script files (with side effects) behind the scenes (except for different reasons, as discussed [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660637060)). \r\n\r\nWith respect to robustly determining the system shell, there is no problem to solve here: hard-coding `/bin/sh` on Unix is perfectly appropriate, as is consulting `$env:ComSpec` on Windows.\r\n\r\nNo, Unix platforms at the system-call level do _not_ know how to execute an executable plain-text file _without a shebang line_; that you still _can_ invoke such files is a convenience feature of POSIX-like shells: they try `exec`, then _fall back_ to interpreting such files as written _for them_; that is, it is whatever POSIX-like shell that is being run that ends up executing the file - whereas PowerShell simply _fails_, because it doesn't implement this courtesy fallback (you'll get `Program 'foo' failed to run: Exec format error`).\r\n\r\nNeedless to say, it is therefore ill-advised to create such scripts.\r\n\r\n",
    "created_at": "2020-07-19T19:03:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660692109",
    "id": 660692109,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY5MjEwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660692109/reactions"
    },
    "updated_at": "2020-07-19T19:12:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660692109",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> No, Unix platforms at the system-call level do _not_ know how to execute an executable plain-text file _without a shebang line_; that you still _can_ invoke such files is a convenience feature of POSIX-like shells: they try `exec`, then _fall back_ to interpreting such files as written _for them_; that is, it is whatever POSIX-like shell that is being run that ends up executing the file - whereas PowerShell simply _fails_, because it doesn't implement this courtesy fallback (you'll get `Program 'foo' failed to run: Exec format error`).\r\n\r\n`csh` is not POSIX-like and it does not fail on `exec` a bare script.  It invokes `sh`.  So does `perl`.",
    "created_at": "2020-07-19T20:20:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660702730",
    "id": 660702730,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcwMjczMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660702730/reactions"
    },
    "updated_at": "2020-07-19T20:20:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660702730",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I hope it is obvious that this makes my point: it's _up to each shell_ to decide what to do, and different shells / scripting languages do different things; PowerShell currently just fails - if it had to make a choice, and you wanted that choice to be `/bin/sh`, we're back at square one: `/bin/sh` must be assumed.\r\n",
    "created_at": "2020-07-19T20:32:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660704390",
    "id": 660704390,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcwNDM5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660704390/reactions"
    },
    "updated_at": "2020-07-19T20:32:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660704390",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I hope it is obvious that this makes my point: it's _up to each shell_ to decide what to do, and different shells / scripting languages do different things; PowerShell currently just fails - if it had to make a choice, and you wanted that choice to be `/bin/sh`, we're back at square one: `/bin/sh` must be assumed.\r\n\r\n`exec` in `perl` is a direct system call, `perl` does not modify it in any way.  In particular, it does not _choose_ the interpreter.",
    "created_at": "2020-07-19T20:36:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660704829",
    "id": 660704829,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcwNDgyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660704829/reactions"
    },
    "updated_at": "2020-07-19T20:36:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660704829",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Of course, that assumes that users know the difference between single-quoted (verbatim) and double-quoted (interpolating) strings and about selective `` ` ``-escaping of `$`, but I think it's an important (advanced) option to have.\r\n\r\nMaybe it is just me, but I would trade a thousand `\"`’s for one `-f`.  ",
    "created_at": "2020-07-19T20:55:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660707896",
    "id": 660707896,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcwNzg5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660707896/reactions"
    },
    "updated_at": "2020-07-19T20:56:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660707896",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@yecril71pl \r\n>exec in perl is a direct system call, perl does not modify it in any way. In particular, it does not choose the interpreter.\r\n\r\nThat can not be true if it works with scripts without `#!` line. The exec syscall on linux does not work without `#!`, as one can easily test:\r\n\r\n```\r\nuser@Programming-PC:/tmp/exec_test$ ls\r\ntest.c  testscript\r\nuser@Programming-PC:/tmp/exec_test$ cat test.c\r\n#include <unistd.h>\r\n#include <stdio.h>\r\n \r\nint main(int argc, char **argv) {\r\n  char *binaryPath = \"./testscript\";\r\n \r\n  execl(binaryPath, binaryPath, NULL);\r\n\r\n  perror(\"Error\");\r\n \r\n  return 0;\r\n}\r\nuser@Programming-PC:/tmp/exec_test$ gcc test.c -o testexecutable\r\nuser@Programming-PC:/tmp/exec_test$ chmod +x testscript \r\nuser@Programming-PC:/tmp/exec_test$ cat testscript \r\necho test from script\r\nuser@Programming-PC:/tmp/exec_test$ #works from shell:\r\nuser@Programming-PC:/tmp/exec_test$ ./testscript \r\ntest from script\r\nuser@Programming-PC:/tmp/exec_test$ #doesn't work via exec syscall:\r\nuser@Programming-PC:/tmp/exec_test$ ./testexecutable \r\nError: Exec format error\r\nuser@Programming-PC:/tmp/exec_test$ vim testscript \r\nuser@Programming-PC:/tmp/exec_test$ cat testscript \r\n#!/bin/sh\r\necho test from script\r\nuser@Programming-PC:/tmp/exec_test$ #exec syscall works with #! line:\r\nuser@Programming-PC:/tmp/exec_test$ ./testexecutable \r\ntest from script\r\nuser@Programming-PC:/tmp/exec_test$ uname -a\r\nLinux Programming-PC 4.4.0-176-generic #206-Ubuntu SMP Fri Feb 28 05:02:04 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\nuser@Programming-PC:/tmp/exec_test$ \r\n```\r\n\r\n---\r\n\r\nEdit: I just noticed, that if you use the *library function* `execlp` then according to the man page:\r\n>If  the  header  of a file isn't recognized (the attempted execve(2) failed with the error ENOEXEC), these functions will execute the shell (/bin/sh) with the path of the file as its first argument.  (If this attempt fails, no further searching is done.)\r\n\r\nHowever this is not a feature of \"linux\" but of the gnu c library - and again according to the man page it uses explicitly /bin/sh and not some userdefinable shell. (Hardcoded in the source of [`posix/execvpe.c`](https://sourceware.org/git/?p=glibc.git;a=blob;f=posix/execvpe.c;hb=HEAD#l59) (`new_argv[0] = (char *) _PATH_BSHELL;`) and [sysdeps/unix/sysv/linux/paths.h](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/paths.h;hb=HEAD#l41) (or [sysdeps/generic/paths.h](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/paths.h;hb=HEAD#l41) - I don't know which header is used...) (`#define _PATH_BSHELL    \"/bin/sh\"`))",
    "created_at": "2020-07-19T21:24:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660712091",
    "id": 660712091,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcxMjA5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660712091/reactions"
    },
    "updated_at": "2020-07-19T22:01:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660712091",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> However this is not a feature of \"linux\" but of the gnu c library - and again according to the man page it uses explicitly /bin/sh and not some userdefinable shell. (Hardcoded in the source of [`posix/execvpe.c`](https://sourceware.org/git/?p=glibc.git;a=blob;f=posix/execvpe.c;hb=HEAD#l59) (`new_argv[0] = (char *) _PATH_BSHELL;`) and [sysdeps/unix/sysv/linux/paths.h](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/paths.h;hb=HEAD#l41) (or [sysdeps/generic/paths.h](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/paths.h;hb=HEAD#l41) - I don't know which header is used...) (`#define _PATH_BSHELL \"/bin/sh\"`))\r\n\r\nSince it comes from `sysdeps/**/linux`, it is a Linux thing.  It may also be the generic thing but it is overridable — obviously not locally but per OS.",
    "created_at": "2020-07-19T22:45:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660720640",
    "id": 660720640,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcyMDY0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660720640/reactions"
    },
    "updated_at": "2020-07-19T22:45:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660720640",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > Yes, I understand the _current_ behaviour @vexx32 . But we're not (at least I'm not) talking about the _current_ behaviour of `--%` -- we're talking about enhancing it, no? Why do I get the feeling that we're all talking around each other here? :)\r\n> \r\n> So the current pitch for adjusting `--%` is that if it's where the command name would typically be, everything to the right of it is parsed _as is_ (up to a new line) and sent directly to bash/cmd. There's no room any PowerShell syntax like here-strings and what not because then it has all the same problems that `--%` and the native command processor currently have.\r\n\r\nOh lordy... Is everyone just trying to troll me? 😄  No, Patrick -- if you want to use powershell expressions, then use here-strings with `--%`. If you want multiline, use here-strings. If you want multline without variable substitution, you could use single-quote here-strings. \r\n\r\nAnyway, I don't have any skin in this game and I think I've said enough. I still think there's something seriously wrong about using a cmdlet to defer to another shell from within a shell. It's just clumsy. It's especially clumsy when you're using a cmdlet to execute another shell to execute a native command that has no need for that secondary shell in the first place. The whole thing just smells bad. \r\n\r\nedit: last word\r\n\r\nThe title of this item is \"call native operator.\" I see a wasted opportunity when we already have a call operator `&` and we already have a token that was designed to deal with passing arguments to native commands, `--%`. Right now, using `&` with `--%` is NOT recognized and as such will NOT introduce a breaking change should we decide to enable this scenario and give it specific behavior to fix the problems being discussed here.  \r\n\r\n\r\n",
    "created_at": "2020-07-19T23:47:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660728820",
    "id": 660728820,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcyODgyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660728820/reactions"
    },
    "updated_at": "2020-07-19T23:51:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660728820",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> if you want to use powershell expressions, then use here-strings with `--%`. If you want multiline, use here-strings.\r\n\r\nThe point of the operator is that it doesn't parse **literally any** PowerShell syntax.  There's no such thing as here-strings.  There's no such thing as single quoted string constants.  It's \"send the text to the right as is\" not \"evaluate the expression to the right, convert to string and send it's value\"\r\n\r\nSo for example, if you had this:\r\n\r\n```powershell\r\n--% @'\r\necho my native command\r\n'@\r\n```\r\n\r\nit would translate to:\r\n\r\n```powershell\r\ncmd.exe /c \"@'\"\r\necho my native command\r\n'@\r\n```\r\n\r\nExcept you'd get a parser error because `'@` would just be that start of a single quoted string constant containing <kbd>@</kbd>.\r\n\r\nI think maybe you're picturing the implementation differently so that it's more or less the same thing as the pitch for `ins`, but the above is the current pitch being discussed for `--%`.\r\n\r\nAlso worth noting that this is how the existing functionality works as well.  This example works mostly the same way:\r\n\r\n```powershell\r\ncmd /c --% @'\r\necho my native command\r\n'@\r\n```\r\n\r\n",
    "created_at": "2020-07-20T00:45:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660739335",
    "id": 660739335,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDczOTMzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660739335/reactions"
    },
    "updated_at": "2020-07-20T00:54:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660739335",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I repeat:\r\n\r\n> Right now, using & with --% is NOT recognized/undefined and as such will NOT introduce a breaking change should we decide to enable this scenario and **give it specific behavior to fix the problems being discussed here**.\r\n\r\nLet me spell it out even clearer: Allow here-strings to follow `--%` when used with `&`\r\n",
    "created_at": "2020-07-20T04:50:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660800104",
    "id": 660800104,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDgwMDEwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660800104/reactions"
    },
    "updated_at": "2020-07-20T04:50:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660800104",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Hah that's a big oof - yeah I missed that, sorry @oising.\r\n\r\nAbout that idea I think it would be a little confusing to have `--%` mean stop parsing in some contexts and \"do a better job at native argument binding\" in others (likewise with making it work like `Invoke-NativeShell` if that's what you mean instead).",
    "created_at": "2020-07-20T11:56:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660982420",
    "id": 660982420,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDk4MjQyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660982420/reactions"
    },
    "updated_at": "2020-07-20T11:56:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660982420",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for digging deeper re `exec`, @TSlivede. Let me try to summarize and therefore hopefully close this tangent; applies to both Linux and macOS:\r\n\r\n**There is no system (or library) function called `exec`** on Unix, there is only a _family_ of related functions with `exec` in their name (most of them as a prefix).\r\n\r\n* The _system_ functions (`man` section `2`), `execve` at its heart, _fail_ when you try to execute a shebang-less script.\r\n\r\n* Among the _library_ functions  that _build on the system functions_ (`man` section `3` - `man 3 exec`), only those that have `p` (for \"path\", I presume) have the pass-to-the-system-shell fallback (e.g., `execlp`).\r\n  * The GNU library implementations of these functions hard-code `/bin/sh`, as @TSlivede has shown, whereas the BSD-based ones [use just `sh`](https://github.com/freebsd/freebsd/blob/8edea978e32b4a77521d59eccb0fee8cc07075c2/lib/libc/gen/exec.c#L149), and rely on `sh` to be in `$env:PATH` (though, curiously, the `man` page states `/bin/sh`).\r\n\r\nAs stated, for _direct execution_ the major POSIX-like shells (`bash`, `dash`, `ksh`, and `zsh`) fall back to executing shebang-less scripts _themselves_, which implies that they do _not_ use the fallback variants among the `exec` library functions; by contrast, `perl`'s choice for its own `exec` function was to rely on the fallback; similarly, the `exec` _builtins_ of the major POSIX-like shells rely on the fallback, except in `bash`.\r\n\r\nSince on Unix the use of a script file behind the scenes is unnecessary, we can make the same assumptions about the system shell path as the fallback library functions, and **I recommend `/bin/sh` over `sh`**, for security and predictability:\r\n\r\nDespite the [POSIX spec _not_ mandating the location of `sh`](https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html) (that is, strictly speaking, the BSD library functions are the compliant ones):\r\n\r\n* `/bin/sh` is safe to assume, because it is the _de facto_ standard location, not least because writing portable Unix shell _necessitates_ referring to `sh` by its full path, given that shebang lines support only _full, literal_ paths (`#!/bin/sh`).\r\n\r\n* Conversely, relying on locating `sh` via `$env:PATH` can be a security risk, given that `$env:PATH` could be manipulated to invoke a different `sh`.\r\n\r\nThe same risk applies to locating `cmd.exe` via `$env:ComSpec`, by the way, so perhaps the better way is to call the [`GetSystemDirectory`](https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemdirectoryw) WinAPI function and append `\\cmd.exe` to its result (we need a fallback anyway, if `$env:ComSpec` happens not to be defined).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-20T20:07:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661306461",
    "id": 661306461,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTMwNjQ2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661306461/reactions"
    },
    "updated_at": "2020-08-22T13:21:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661306461",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> `/bin/sh` is safe to assume, because it is the _de facto_ standard location, not least because writing portable Unix shell _necessitates_ referring to `sh` by its full path, given that shebang lines support only _full, literal_ paths (`#!/bin/sh`).\r\n\r\nNormally you say `#!/usr/bin/env sh` (except in system scripts).\r\n",
    "created_at": "2020-07-20T21:45:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661350136",
    "id": 661350136,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTM1MDEzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661350136/reactions"
    },
    "updated_at": "2020-07-20T21:47:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661350136",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "* Normally, you _don't_: googling [\"#!/bin/sh\"](https://www.google.com/search?q=%22%23%21%2Fbin%2Fsh%22) yields about 3,900,000 matches, [\"#!/usr/bin/env sh\"](https://www.google.com/search?q=%22%23%21%2Fusr%2Fbin%2Fenv+sh%22) yields about 34,100 matches.\r\n\r\n* Normally, you _shouldn't_: you want to predictably target _the_ system shell, `/bin/sh`, not whatever `sh` utility happens to come first in `$env:PATH`.\r\n\r\nThe only reason to target an executable named `sh` is to portably target the lowest-common-denominator-assume-POSIX-features-only _system_ shell, i.e. `/bin/sh`.",
    "created_at": "2020-07-21T00:20:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661480367",
    "id": 661480367,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTQ4MDM2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661480367/reactions"
    },
    "updated_at": "2020-07-21T00:20:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661480367",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Normally, you _don't_: googling [\"#!/bin/sh\"](https://www.google.com/search?q=%22%23%21%2Fbin%2Fsh%22) yields about 3,900,000 matches, [\"#!/usr/bin/env sh\"](https://www.google.com/search?q=%22%23%21%2Fusr%2Fbin%2Fenv+sh%22) yields about 34,100 matches.\r\n\r\nThere is no way to limit a Web search to user scripts, especially since many user scripts are not marked executable at all, and even if they are, they may rely on `execlp`; but even if most user scripts said that, we should not take _customary_ for _normal_.  The scripts to be run by PowerShell are user scripts; when users want a shell, they call `sh`, not `/bin/sh`, unless they are paranoid.",
    "created_at": "2020-07-21T05:44:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661646760",
    "id": 661646760,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY0Njc2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661646760/reactions"
    },
    "updated_at": "2020-07-21T05:46:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661646760",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@oising \r\n\r\n **Passing the native-shell command line _as a single string_ (in whatever string(-literal) form is easiest), and _only_ as a single string** (save for the additional, pass-to-the-command-line arguments supported on Unix (only) discussed [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653526374)) - assuming you agree with that - **sounds like common ground.**\r\n\r\nPassing the command line as a _single string_ is the prerequisite for:\r\n* being able to incorporate such a call into a _PowerShell_ pipeline.\r\n* being able to incorporate _PowerShell variables and expression_ into the native-shell command line.\r\n\r\nPassing a single string is a _direct conceptual expression_ of what the call will do; by contrast, trying to somehow directly incorporate a different shell's syntax directly in PowerShell's with _individual_ (optionally bare-word) arguments brings unsolvable problems that result in a confusing compromise with fundamental limitations, which the existing `--%` already embodies.\r\n\r\n---\r\n\r\nWhile you could argue that it then isn't all that important whether we choose an _operator_ or a _cmdlet_ to pass that single-string command line to (save for questions of _discoverability_), I have conceptual concerns about use of both `&` and `--%` (preceded by `&`):\r\n\r\n* The concern re `&`: if we need to pass a - quoted - string containing the command line, we're effectively operating in _expression_ mode, whereas the `&` currently implies _argument_ mode (which means: _individual_ arguments, quoting only when necessary). Therefore, the involvement of `&` is confusing.\r\n\r\n* The concern re `--%` is about the Windows-only origin and muddled semantics of `--%` as the stop-parsing symbol; it would be especially confusing if `--%` as the stop-parsing symbol operated in _argument_ mode (e.g. \r\n`& /bin/ls --% dir1 dir2`), whereas `& --%` operated in _expression_ mode (e.g. `& --% '/bin/ls dir1 dir2 >out.txt'`)\r\n\r\n----\r\n\r\nLet me take a step back and examine `--%`, the stop-parsing symbol, as currently implemented:\r\n\r\nIt was an attempt to solve two ultimately unrelated problems (Windows-only at the time):\r\n\r\n* (a) A use case that also applies to other platforms: Let me reuse _command lines_ written for `cmd.exe` / the native shell as-is, so I don't have to adapt them to PowerShell's syntax.\r\n\r\n* (b) An always Windows-only problem: Let me call a _rogue CLI_ (that is, a call to a _single_ external console application) that requires a very specific style of quoting that PowerShell's generic behind-the-scenes re-quoting cannot provide, by allowing me to craft the command line ultimately passed to the WinAPI for such CLIs _verbatim_. (To limit the problem statement to this assumes that PowerShell's re-quoting generally works properly, which it never has - that is the subject of #1995).\r\n\r\n`--%` was implemented as a muddled _conflation_ of solution attempts to both (a) and (b), and ended up solving neither problem properly:\r\n\r\n* It was advertised as the solution to (a), but in reality has severe limitations, because _the only `cmd` exe feature that it emulates is the expansion of `%...%`-style environment-variable references_:\r\n\r\n    * It only ever supports a _single_ `cmd` command, given that an `|` (and \r\n`&&` and `||`, even though they weren't implemented at the time) implicitly terminate the pass-to-`cmd` portion.\r\n\r\n   * A _single_ `&` -  which is `cmd`s multi-command separator -  _is_ passed through, but that too did _not_ result in multi-command support, because - since `cmd` isn't actually involved - the `&` is passed _verbatim to the target program_; e.g.\r\n`echoArgs.exe --% a & b` doesn't echo `a` then invokes `b`, it passes verbatim arguments `a`, `&`, and `b` to `echoArgs`.\r\n\r\n   * `cmd`'s escape character (`^`) in unquoted arguments isn't honored.\r\n\r\n   * As a corollary, `%...%` tokens that refer to existing environment variables are _invariably_ expanded; an attempt to prevent that via `^` doesn't work properly (e.g.\r\n`echoArgs.exe Don't expand %^USERNAME%`, which in `cmd` prevents expansion _and strips the `^`_, retains the `^` when called from PowerShell as `echoArgs.exe --% Don't expand %^USERNAME%`\r\n\r\n* As a solution to (b), it fell short as well:\r\n\r\n  * Just like in the (a) use, there's no ability to incorporate _PowerShell_ variables and expressions into the command - except if you awkwardly first define an _aux. environment_ variable_ that you then reference via `%...%` after `--%`; e.g.\r\n`$env:FOO='foo'; echoArgs.exe --% %FOO%!`\r\n\r\n---\r\n\r\nThe proper solution to (a) would have been `Invoke-NativeShell` / `ins`, as discussed here.\r\n\r\nThe proper solution to (b) would have been to:\r\n  * support `--%` as special only as the _first_ argument\r\n  * and, just like with `ins`, require it to be followed _by a single string_ that constitutes the pass-through command line _as a whole_, again with the ability to incorporate _PowerShell_ variables and expressions by way of string interpolation (or other ways of constructing the string)\r\n  * e.g. `` msiexec --% \"/i installer.msi INSTALLLOCATION=`\"$loc`\"\" ``, with `$loc` containing `'c:\\foo\\bar none'`, would result in verbatim command line `/i installer.msi INSTALLLOCATION=\"c:\\foo\\bar none\"` getting passed through, satisfying `msiexec`'s nonstandard requirement that in `<prop>=<value>` arguments only the `<value>` part be double-quoted.\r\n\r\nWhile that isn't _convenient_, it is the price to pay for a robust solution to the anarchy that is command-line-based argument passing on Windows.\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-21T17:02:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661984949",
    "id": 661984949,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk4NDk0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661984949/reactions"
    },
    "updated_at": "2020-07-21T17:38:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661984949",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 Thank you for the patient and thoughtful reply (as usual.)\r\n\r\nSo, I wholeheartedly agree with;\r\n\r\n> The proper solution to (b) would have been to:\r\n> - support --% as special only as the first argument\r\n> - and, just like with ins, require it to be followed by a single string that constitutes the pass-through command line as a whole, > - again with the ability to incorporate PowerShell variables and expressions by way of string interpolation (or other ways of constructing the string)\r\n>  - e.g. msiexec --% \"/i installer.msi INSTALLLOCATION=`\"$loc`\"\", with $loc containing 'c:\\foo\\bar none', would result in verbatim command line /i installer.msi INSTALLLOCATION=\"c:\\foo\\bar none\" getting passed through, satisfying msiexec's nonstandard requirement that in <prop>=<value> arguments only the <value> part be double-quoted.\r\n\r\nThis is what I've been trying to expound as a generalized solution to both (a) and (b), except I still don't really get that (a) should exist as an independent problem to solve? What I'm really struggling with is if (b) is implemented _specifically_ for `&`, why can't that cover (a) also? e.g. What does `ins ...` give that `& cmd --% ...` cannot? And it won't be a breaking change other than not allowing `&` to pass `--%` as an argument (which seems ridiculously unlikely.) Bonus that you don't have to worry about comspec, shells or whatever. Let the caller decide. ",
    "created_at": "2020-07-22T03:47:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662225135",
    "id": 662225135,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjIyNTEzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662225135/reactions"
    },
    "updated_at": "2020-07-22T03:49:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662225135",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this:\r\n\r\n- This will be an **experimental feature** to get real usage feedback; we are still open to the actual sigil; we defer `/bin/sh` vs `/bin/env sh` to the PR review\r\n- We will move forward with `--%` as a new operator specifically for the \"stackoverflow\" scenario where the user cuts and pastes a command-line into PowerShell and it should just work (with, of course, the new operator preceding it)\r\n- A `Invoke-NativeShell` cmdlet is separate from this proposal and could be published by the community in PowerShellGallery; also, requiring a here-string doesn't solve the user experience problem without knowing ahead of time to wrap it as a here-string\r\n- We do not want to make a breaking change to `--%` switch where existing users may depend on that behavior\r\n- Users who need streaming behavior like `--%` switch should continue to use that switch and escape special characters as necessary\r\n- There is still a discovery problem for users to know about `--%` (or any solution)\r\n- We are not currently entertaining a change to PSReadLine to modify pasted content as a here-string trying to predict user intent\r\n- We are not looking at multiple solutions that allow for here-string vs non-here-string (expansion) scenarios; e.g. `& --%` vs `--%`\r\n",
    "created_at": "2020-07-22T22:39:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662732627",
    "id": 662732627,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjczMjYyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662732627/reactions"
    },
    "updated_at": "2020-07-22T22:39:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662732627",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I also want to add that, despite @SteveL-MSFT and I closing #1995 at the same time as opening this one, it really wasn't our intent to communicate this as a definitive solution to that problem. \r\n\r\nIt's my view that the benefits of this particular feature are much more significant than the impact #1995. I think there are a LOT of StackOverflow examples and docs examples for non-PS enlightened tools that folks would like to cut/paste (myself included). \r\n\r\nThere's additionally a desire to provide proper escaping within PowerShell's own language, but I'm not seeing people hit #1995 in the wild en masse (but I'll elaborate more on this over there).",
    "created_at": "2020-07-22T22:43:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662733935",
    "id": 662733935,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjczMzkzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662733935/reactions"
    },
    "updated_at": "2020-07-22T22:43:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662733935",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "NONE",
    "body": "> * We will move forward with `--%` as a new operator\r\n\r\nSorry to drag this out, and I'm not looking for additional discussion, but what kind of operator? (I'm primarily interested in syntax.)\r\n\r\n`$a = --% find . -iname *$pdf -print0 | xargs -0 ls -ltr`\r\n\r\nWho gets the pipe? What happens to the `$`? Similar with `&`, `&&`, and `||`.\r\n\r\nUnder what conditions, if any, will `--%` be usable in a PS pipe moving forward?\r\n\r\nThanks.",
    "created_at": "2020-07-22T23:05:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662740450",
    "id": 662740450,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc0MDQ1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662740450/reactions"
    },
    "updated_at": "2020-07-22T23:05:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662740450",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Sorry to drag this out, and I'm not looking for additional discussion, but what kind of operator? (I'm primarily interested in syntax.)\r\n\r\nAST wise it probably won't technically be an operator but it's own AST type.  If it does get implemented as an operator, it'd be a unary operator.\r\n\r\n> `$a = --% find . -iname *$pdf -print0 | xargs -0 ls -ltr`\r\n> \r\n> Who gets the pipe? What happens to the `$`? Similar with `&`, `&&`, and `||`.\r\n\r\nThe string `find . -iname *$pdf -print0 | xargs -0 ls -ltr` would be sent as is to the native shell.  `$a` would still be populated though, so you could in the next line pipe that to something.\r\n\r\n> Under what conditions, if any, will `--%` be usable in a PS pipe moving forward?\r\n\r\nIf ~in the first command element slot~ it's at the start of a statement, probably not.  That's one of the draws of the new syntax.  If not ~in the first slot~ at the start, it'll continue to work like it does today.\r\n\r\n(@daxian-dbw @SteveL-MSFT if any of that is wrong please correct ❤️)",
    "created_at": "2020-07-22T23:12:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662742849",
    "id": 662742849,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc0Mjg0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 1,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662742849/reactions"
    },
    "updated_at": "2020-07-23T00:31:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662742849",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@SeeminglyScience is exactly right",
    "created_at": "2020-07-22T23:47:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662752775",
    "id": 662752775,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc1Mjc3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 1,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662752775/reactions"
    },
    "updated_at": "2020-07-22T23:47:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662752775",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> If in the first command element slot, probably not. That's one of the draws of the new syntax. If not in the first slot, it'll continue to work like it does today.\r\n\r\nIt may be tricky to pass the output of upstream command to the native command that will be invoked by `--%`. `--%` basically just hands the string as it to a native shell, like `bash`, but the output from upstream command cannot just be fed to `bash`, but should be fed to the native command itself, such as `find`.\r\n\r\nI think streaming behavior is not a consideration to this feature as it's mainly for the \"StackOverflow\" scenario. So I think we'd better just make `--%` a special statement ast, so that it's clear it won't work with _PowerShell_ pipelines.",
    "created_at": "2020-07-23T00:21:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662761677",
    "id": 662761677,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc2MTY3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662761677/reactions"
    },
    "updated_at": "2020-07-23T00:21:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662761677",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Ahh I knew there was a reason that \"command element slot\" was wrong.  I meant at the start of a statement.  I'll fix it, thanks!",
    "created_at": "2020-07-23T00:28:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662763472",
    "id": 662763472,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mjc2MzQ3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662763472/reactions"
    },
    "updated_at": "2020-07-23T00:28:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662763472",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> the output from upstream command cannot just be fed to `bash`\r\n\r\nDoes _upstream_ mean _us_?  I think can do: `'ls' | bash`.  Not a peculiarly smart thing to do but possible.",
    "created_at": "2020-07-23T05:48:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662829777",
    "id": 662829777,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjgyOTc3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662829777/reactions"
    },
    "updated_at": "2020-07-23T05:48:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662829777",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Was discussing with @jpsnover about this and he proposed the shebang `#!` as the sigil.  In this case, you would just type:\r\n\r\n```powershell\r\n#!/bin/sh ls | grep foo\r\n#!sh | grep foo\r\n```\r\n\r\n(where the second case assumes `sh` is in the path).  In this case, we would have to decide if specifying the shell is required or if we always run that under the default shell, so in this example, `sh` is started twice.  However, there is a problem with this due to how shebang files work today.  They work in PowerShell because the shebang is ignored as a comment.  If we decide to ignore the first line in a script if it's a comment, then we still have a problem in the interactive shell where each new set of lines is a new script and there's no way today to determine if that script is run as a script or interactively.\r\n\r\nAn alternative might be to borrow markdown syntax:\r\n\r\n````powershell\r\n  ```bash\r\n  ls |\r\n  grep foo\r\n  ```\r\n````\r\n\r\nIn this example, we would use markdown code fencing syntax.  This would also solve the multi-line problem and would use a concept that isn't entirely new.  Given that we still have initial discovery problem for new users, I don't think this is that much worse in that you need to have the trailing triple-backticks.\r\n\r\nIn this case, this could potentially work:\r\n\r\n````powershell\r\n  $a = ```bash\r\n    ls |\r\n     grep foo\r\n   ``` | select-string bar\r\n````\r\n",
    "created_at": "2020-07-24T23:50:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663776540",
    "id": 663776540,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc3NjU0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 4,
      "confused": 2,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663776540/reactions"
    },
    "updated_at": "2020-07-24T23:50:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663776540",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT Markdown Syntax makes a lot of sense. If we are able to specify. other types as well such as python or perhaps by extension?\n\nThe shebang #! Would interfere with existing comments.",
    "created_at": "2020-07-25T00:23:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663782051",
    "id": 663782051,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc4MjA1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663782051/reactions"
    },
    "updated_at": "2020-07-25T00:23:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663782051",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That seems massively overcomplicated to me, both to handle in parsing and for users to actually _use_.\r\n\r\nAnd yeah, we don't need to confuse folks with lines that _should_ be comments not turning out as comments. `#Requires` is already edging on kind of weird, a full on shebang is going to confuse Windows folks at best, and probably Linux folks too.",
    "created_at": "2020-07-25T00:40:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663784792",
    "id": 663784792,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc4NDc5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663784792/reactions"
    },
    "updated_at": "2020-07-25T00:41:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663784792",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I personally would prefer to not mixing this feature with shebang, it's confusing in my opinion.\r\nAlso, if we start to use the markdown code-block syntax, then it's just a matter of time for people to request running arbitrary language code directly in PowerShell. I don't think we want to go that way ...",
    "created_at": "2020-07-25T00:46:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663785444",
    "id": 663785444,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc4NTQ0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663785444/reactions"
    },
    "updated_at": "2020-07-25T00:47:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663785444",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Also, if we start to use the markdown code-block syntax, then it's just a matter of time for people to request running arbitrary language code directly in PowerShell.\r\n\r\nI would literally never stop asking for inline C# even though I know it's a bad idea.",
    "created_at": "2020-07-25T00:48:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663785711",
    "id": 663785711,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc4NTcxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 3,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663785711/reactions"
    },
    "updated_at": "2020-07-25T00:48:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663785711",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The markdown syntax does not introduce arbitrary language code because the embedded script will run in a child process.  You can place arbitrary language code inside `@'` now and nothing bad happens.",
    "created_at": "2020-07-25T07:41:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663823852",
    "id": 663823852,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgyMzg1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663823852/reactions"
    },
    "updated_at": "2020-07-25T07:41:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663823852",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "In the team discussion and also with Jeffrey, we should not be against people wanting to run other languages within a PowerShell script.  As @yecril71pl noted, we are not directly supporting other languages but relying on a different process to interpret and execute that code.  The scenario here is that a user sees a block of python or bash script and just wants to use it as-is within their PowerShell script.  There's nothing requiring people to do this.  They can decide to port that other script to PowerShell if they prefer.  This just provides an option for users to be able to cut and paste into PowerShell to get stuff done.\r\n\r\nWe don't need to mix the single-line vs multi-line proposals in that we could support both although the downside is now we have two ways of doing very similar things but with different syntax.",
    "created_at": "2020-07-25T14:42:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663863093",
    "id": 663863093,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg2MzA5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663863093/reactions"
    },
    "updated_at": "2020-07-25T14:42:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663863093",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I would prefer to drop the single-line stuff.  Alien code islands should be prominent, otherwise nobody will understand what is going on.",
    "created_at": "2020-07-25T14:50:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663863931",
    "id": 663863931,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg2MzkzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663863931/reactions"
    },
    "updated_at": "2020-07-25T14:50:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663863931",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@yecril71pl I'm leaning towards that myself primarily because from a discovery standpoint, the markdown syntax I think would be more easily recognizable, but that might just be because I write markdown often.  I also expect that lots of examples scripts are probably multi-line rather than just a single line as they expect some state to be retained where each single line would be an independent process.",
    "created_at": "2020-07-25T14:55:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663864583",
    "id": 663864583,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg2NDU4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663864583/reactions"
    },
    "updated_at": "2020-07-25T14:56:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663864583",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> In the team discussion and also with Jeffrey, we should not be against people wanting to run other languages within a PowerShell script.\r\n\r\nAbsolutely 100%, but that doesn't mean it needs to be built directly into the language.  \r\n\r\n> As @yecril71pl noted, we are not directly supporting other languages but relying on a different process to interpret and execute that code. The scenario here is that a user sees a block of python or bash script and just wants to use it as-is within their PowerShell script.\r\n\r\nThat can already be done with here-strings right?  Can you elaborate a little bit on what benefits this provides over existing methods?\r\n\r\nAlso why stop at python and bash?  Why not C#, CIL, C++?\r\n\r\n> There's nothing requiring people to do this. They can decide to port that other script to PowerShell if they prefer. This just provides an option for users to be able to cut and paste into PowerShell to get stuff done.\r\n\r\nI'm not against this because I think I'm going to be forced to use it.  I don't like it because it's going to be difficult to maintain from a language perspective, a nightmare for editors, and ultimately encourage scripts that are unreadable unless you know several languages.\r\n\r\n---\r\n\r\nReally though this is a pretty different concept from the original topic of this thread with much wider implications.  I'd recommend creating a new issue for it.",
    "created_at": "2020-07-25T15:55:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663870756",
    "id": 663870756,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg3MDc1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 5,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663870756/reactions"
    },
    "updated_at": "2020-07-25T15:56:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663870756",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> That can already be done with here-strings right? Can you elaborate a little bit on what benefits this provides over existing methods?\r\n\r\nA universal code editor will be able to detect them and decorate them appropriately, whereas there is nothing to be done with `@'` because the editor has no idea what is inside.\r\n\r\n> Also why stop at python and bash? Why not C#, CIL, C++?\r\n\r\nBecause they are not scripting languages?",
    "created_at": "2020-07-25T16:16:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663872898",
    "id": 663872898,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg3Mjg5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663872898/reactions"
    },
    "updated_at": "2020-07-25T16:16:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663872898",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> A universal code editor will be able to detect them and decorate them appropriately, whereas there is nothing to be done with `@'` because the editor has no idea what is inside.\r\n\r\nAn editor can tell that ` bash -c @'` contains bash just as easily as a code fence.  Also the challenging part isn't determining what language a section of code is, it's juggling language servers and syntax highlighters.  The only way it would work without significant time and effort investment would be to essentially render it like it was a here-string.\r\n\r\n> Because they are not scripting languages?\r\n\r\nC# and C++ both have script oriented subsets.  Even if they didn't, \"scripting language\" is subjective with no real definition.  It isn't helpful as a definitive boundary for what would and would not be considered for inclusion.",
    "created_at": "2020-07-25T16:27:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663873983",
    "id": 663873983,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg3Mzk4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663873983/reactions"
    },
    "updated_at": "2020-07-25T16:27:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663873983",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> C# and C++ both have script oriented subsets. Even if they didn't, \"scripting language\" is subjective with no real definition.\r\n\r\nA language is a (stand-alone) scripting language when you normally call `interpet options… script arguments…` and that call leaves nothing except what it was intended to leave, excluding temporary stuff and private to the interpreter.  It also means that it normally requires a copy of the interpreter to run.  There are embedded scripting languages that you cannot run this way.",
    "created_at": "2020-07-25T16:33:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663874598",
    "id": 663874598,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg3NDU5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663874598/reactions"
    },
    "updated_at": "2020-07-25T16:35:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663874598",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@SeeminglyScience \r\n\r\n> That can already be done with here-strings right? Can you elaborate a little bit on what benefits this provides over existing methods?\r\n\r\nPeople can use here-strings today or they can escape all the arguments passed to native commands if they can figure out how to get it right.  The intent here is to make it simpler for new users for cut-and-paste (Stackoverflow) scenarios.  \r\n\r\n> Also why stop at python and bash? Why not C#, CIL, C++?\r\n\r\nThe scenarios being supported here is a block of text passed to a native command.  Any language can be supported if it supports that calling convention.  There is no proposal to create a temp source file and have it be compiled.\r\n\r\n> I'm not against this because I think I'm going to be forced to use it. I don't like it because it's going to be difficult to maintain from a language perspective, a nightmare for editors, and ultimately encourage scripts that are unreadable unless you know several languages.\r\n\r\nThere is no expectation that you get mixed language syntax coloring.  Any nested script from another language will just be monotoned.\r\n\r\n> Really though this is a pretty different concept from the original topic of this thread with much wider implications. I'd recommend creating a new issue for it.\r\n\r\nThe proposed implementation is different from the original issue, but the problem is the same which is the cut-and-paste and \"just work\" scenario.\r\n",
    "created_at": "2020-07-25T16:56:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663877022",
    "id": 663877022,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg3NzAyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663877022/reactions"
    },
    "updated_at": "2020-07-25T16:56:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663877022",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> People can use here-strings today or they can escape all the arguments passed to native commands if they can figure out how to get it right. The intent here is to make it simpler for new users for cut-and-paste (Stackoverflow) scenarios.\r\n\r\nRight but how is it actually easier? I get that it's subjective but these don't seem that different to me:\r\n\r\n~~~powershell\r\n$a = ```bash\r\n    find . -iname *$pdf -print0 | xargs -0 ls -ltr\r\n```\r\n~~~\r\n\r\nvs\r\n\r\n```powershell\r\n$a = bash -c @'\r\n   find . -iname *$pdf -print0 | xargs -0 ls -ltr\r\n'@\r\n```\r\n\r\nThey seem *almost* the same with the exception that the latter is significantly more clear in what is going to happen.\r\n\r\n> The scenarios being supported here is a block of text passed to a native command. Any language can be supported if it supports that calling convention. There is no proposal to create a temp source file and have it be compiled.\r\n\r\nWell C# wouldn't need a temp source file.  Maybe not CIL either (no idea about C++).  Either way though a code fence strictly being syntactic sugar for calling an executable (e.g. bash/python/cmd) is confusing to me.  Code fences imply *language* support imo.\r\n\r\n> There is no expectation that you get mixed language syntax coloring. Any nested script from another language will just be monotoned.\r\n\r\nIt'll still be a nightmare for tmLanguage based parsers.  They can barely handle syntax they expect atm.  More than that though, if that's the case I don't get why it's different from a here-string.  \r\n\r\n> The proposed implementation is different from the original issue, but the problem is the same which is the cut-and-paste and \"just work\" scenario.\r\n\r\nFair but we're already 145 comments into discussing the previously proposed solutions.  Especially since this thread already came to a conclusion, you'll likely see a lot more involvement in a new, dedicated thread.",
    "created_at": "2020-07-25T18:22:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663885745",
    "id": 663885745,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg4NTc0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663885745/reactions"
    },
    "updated_at": "2020-07-25T18:22:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663885745",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> Well C# wouldn't need a temp source file. Maybe not CIL either (no idea about C++). Either way though a code fence strictly being syntactic sugar for calling an executable (e.g. bash/python/cmd) is confusing to me. Code fences imply language support imo.\r\n\r\nI just want to echo @SeeminglyScience's comment on this. We can [run C# script](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) without involving compilation with the library [`Microsoft.CodeAnalysis.CSharp.Scripting`](https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Scripting/). That's what dotnet-interactive uses in the C# Jupyter kernel. So it might not be unreasonable for users to ask for C# scripting or even F# scripting support with such a syntax.\r\n\r\nYou can say that the code fencing syntax in PowerShell is for calling a native command, which theoretically allows this:\r\n```\r\n    ```c:\\mypath\\MyArbitraryExe\r\n        args to my arbitrary executable\r\n    ```\r\n```\r\nbut then it's different from users' established understanding of it from markdown, which, as @SeeminglyScience called out, implies language support. Using a similar syntax with different semantics is confusing in my opinion.",
    "created_at": "2020-07-25T19:00:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663889302",
    "id": 663889302,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg4OTMwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663889302/reactions"
    },
    "updated_at": "2020-07-25T19:00:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663889302",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> which theoretically allows this\r\n\r\nYou put the script inside, not the arguments, and the script is equivalent to the input stream.  Also, if this is meant to provide SO support, full paths should not be allowed.",
    "created_at": "2020-07-25T19:06:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663889965",
    "id": 663889965,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg4OTk2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663889965/reactions"
    },
    "updated_at": "2020-07-25T19:08:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663889965",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> You put the script inside, not the arguments, and the script is equivalent to the input stream\r\n\r\nThe script is the argument for bash/cmd/python.\r\n\r\n> Also, if this is meant to provide SO support, full paths should not be allowed.\r\n\r\nThen switch it for this example:\r\n\r\n~~~powershell\r\n$a = ```ipconfig\r\n/all\r\n```\r\n~~~\r\n\r\nOr add the arbitrary exe to path first.",
    "created_at": "2020-07-25T19:11:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663890438",
    "id": 663890438,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg5MDQzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663890438/reactions"
    },
    "updated_at": "2020-07-25T19:11:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663890438",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > You put the script inside, not the arguments, and the script is equivalent to the input stream\r\n> \r\n> The script is the argument for bash/cmd/python.\r\n\r\nNone of them allows to pass a script as a positional argument.  `CMD` does not even allow a batch file.\r\n\r\n> \r\n> > Also, if this is meant to provide SO support, full paths should not be allowed.\r\n> \r\n> Then switch it for this example:\r\n> \r\n> $a = ```ipconfig\r\n> /all\r\n\r\nThat would not work.",
    "created_at": "2020-07-25T19:17:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663890973",
    "id": 663890973,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg5MDk3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663890973/reactions"
    },
    "updated_at": "2020-07-25T19:17:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663890973",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Seems like we'd be making an awful lot of special cases on very arbitrary basis for this markdown idea to work.\r\n\r\nAlso, the main reason this is even supported in Markdown is for syntax highlighting. That's going to be a constant request if we add something like this into the language. \r\n\r\nThis is not an effective solution.",
    "created_at": "2020-07-25T19:22:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663891455",
    "id": 663891455,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzg5MTQ1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663891455/reactions"
    },
    "updated_at": "2020-07-25T19:22:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663891455",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Was discussing with @jpsnover about this and he proposed the shebang `#!` as the sigil\r\n\r\njust to add my 2 cents, i think it's a mistake to restart this discussion after a solution had been announced. and personally i dislike both the shebang and markdown syntax (and both are breaking changes).",
    "created_at": "2020-07-25T22:18:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663911779",
    "id": 663911779,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzkxMTc3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663911779/reactions"
    },
    "updated_at": "2020-07-25T22:18:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663911779",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I don't mind restarting discussions **if** someone has come up with something demonstrably better.  Indeed better to do that **now** than after the feature has shipped. I just don't think `#!` or the markdown approach is a better solution to supplying an \"un-PowerShell-adulterated\" command line string to a native exe.  Maybe I just need to try it to get used to it but my initial reaction is ... um, eew.",
    "created_at": "2020-07-26T00:26:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-663920300",
    "id": 663920300,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzkyMDMwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 7,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663920300/reactions"
    },
    "updated_at": "2020-07-26T00:26:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663920300",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "_If we (and PowerShell) know that we run a native executable why do we need \"call native operator\" at all?_\r\n\r\nIf PowerShell parse an input string and get CommandAst then PowerShell does a discover of the command.\r\nIf the command is a native command PowerShell converts the ast to NativeCommandProcessor.\r\nWe can implement new (experimental NativeCommandProcessor) for the case which will re-parse the Ast extent (that is the input string) so that to get the native executable name/path and rest of the string as argument or arguments by OS rules.\r\n\r\nIf an user want copy-paste from shell he should type \"cmd <Ctrl-V>\" or \"bash <Ctrl-V>\" - that will works without editing.\r\nIf an user want copy-paste an native command line <Ctrl-V> will works too like `g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11`.",
    "created_at": "2020-07-27T17:15:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664526006",
    "id": 664526006,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDUyNjAwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664526006/reactions"
    },
    "updated_at": "2020-07-27T17:15:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664526006",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> If an user want copy-paste from shell\r\n\r\nWe have `Get-/Set-Clipboard` for that.",
    "created_at": "2020-07-27T17:52:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664545567",
    "id": 664545567,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU0NTU2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664545567/reactions"
    },
    "updated_at": "2020-07-27T17:52:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664545567",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> for the case which will re-parse the Ast extent (that is the input string) so that to get the native executable name/path and rest of the string as argument or arguments by OS rules.\r\n\r\nMy thinking here is that doing this you either:\r\n\r\n- Inefficiently parse the command AST, only to reparse the extent later as a string and throw the original AST away, OR\r\n- You take the AST and try to reform it back into a string (the way the current NativeCommandProcessor does), but in doing so things will be lost\r\n\r\nSo instead we need to preserve the string from the start. Now, I think arguably PowerShell already has three kinds of string token, but the main request in this discussion seems to be not wanting to escape things. Any string needs to be able to escape its terminator, but the solution discussed there seems to be using newline as the terminator and not being able to escape newlines (there's always semicolons).\r\n\r\nI'm not totally wedded to a newline-only terminator, but it does seem to be the only solution to not wanting to escape anything. Basically that would make a \"native call operator\" tokenise similarly to how a line comment is today &mdash; from the operator to the end of the line is the string passed to the \"native shell\".\r\n\r\nSo:\r\n\r\n```powershell\r\n--% ps -o pid,args -C bash | awk '/running_script/ { print $1 }'\r\n```\r\n\r\nwill tokenise as:\r\n\r\n```\r\n--% ps -o pid,args -C bash | awk '/running_script/ { print $1 }'\r\n|-||-----------------------------------------------------------|\r\n |                                  \\\r\nNative call operator        Invocation to be passed to native shell\r\n```\r\n\r\n(Note that we send even the space directly after `--%` to the native shell, since the string begins immediately after `--%`)\r\n\r\nThen this token is wrapped in a very simple AST, like:\r\n\r\n```csharp\r\n// We need to carefully work out what AST this inherits from\r\n// This syntax has almost no interoperability with PowerShell by design,\r\n// so can't implement fields like redirections or backgrounding faithfully.\r\n// But in order to participate in pipelines and similar, would need to extend a more concrete class\r\npublic class NativeCallInvocationAst : StatementAst\r\n{\r\n    public string NativeInvocation { get; }\r\n}\r\n```\r\n\r\nThen, after this is compiled and sent to the pipe, this uses a new native command processor to send the string directly as an argument to the native shell.\r\n\r\nWhile that all seems implementable, some questions in my mind are:\r\n\r\n- Is the native shell configurable? If not, how do we justify that? If so, should it be explicit as part of the syntax (complicating the syntax), or implemented as a preference variable (making it harder to discover and manage)?\r\n- Is such an implementation going to be discoverable and not confuse people? Will users understand how little PowerShell is doing here, or what's happening when they use `|` or `&` or even strings?\r\n- How many scenarios are going to be serviced by a single-line verbatim string here? Are we going to implement this just to find out that many people want multi-line invocations? Is the need to avoid doing something like escaping a single quote great enough to add these constraints?\r\n- This seems like a very specific scenario for a whole new language syntax. If we're creating a new verbatim string syntax, why are we coupling it directly to the concept of native invocation? If we're creating a new invocation mechanism, why are we coupling it directly to the concept of other shells? Good syntax and good language constructs compose, both syntactically and functionally, and try not to bake too much into the language itself (instead providing a platform of elements for the user to assemble as their program) &mdash; does our proposed native call syntax meet the bar for a new elementary syntax to be composed into programs? Is there a better alternative approach we could take that solves this problem in a simple way, but still allows us to keep the building blocks uncoupled so they can be composed to solve other problems?\r\n- Would other shells or other languages implement this or have they already? At a syntax level, or at any other level? If so, how?\r\n",
    "created_at": "2020-07-27T18:22:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664560728",
    "id": 664560728,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU2MDcyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664560728/reactions"
    },
    "updated_at": "2020-07-27T23:25:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664560728",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> My thinking here is that doing this you either\r\n\r\n@rjmholt CommandAst has Extent property with input string. Re-parsing is as simple as split by first space on Windows or split by spaces on Unix. So I expect we lost nothing in the string and get good performance.",
    "created_at": "2020-07-27T18:49:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664574665",
    "id": 664574665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU3NDY2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664574665/reactions"
    },
    "updated_at": "2020-07-27T18:49:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664574665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "However this gets implemented, I think we need a set of use cases to test against. Let me \"propose\" the following:\r\n\r\n* **Use case 1: I want a single exe literal (no interpolation) invocation to work without knowing about quoting/escaping rules** e.g.: ` g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11`.   The current work-around for this is to figure out what to quote e..g: `g++ timer.cpp '@conanbuildinfo.args' -o timer --std=c++11`  A more complicated example might include command lines spanning multiple lines e.g.:\r\n```bash\r\ntar -cvpzf /share/Recovery/Snapshots/$(hostname)_$(date +%Y%m%d).tar.gz \\\r\n    --exclude=/proc \\\r\n    --exclude=/lost+found \r\n```\r\nCurrent workaround (swap backtick for `\\`) e.g.:\r\n```bash\r\ntar -cvpzf /share/Recovery/Snapshots/$(hostname)_$(date +%Y%m%d).tar.gz `\r\n    --exclude=/proc `\r\n    --exclude=/lost+found\r\n```\r\n* **Use case 1a: I want a single exe invocation with PS interpolation to work** e.g.: ` g++ $CppFile @conanbuildinfo.args -o timer --std=c++11`.   The current work-around for this is to figure out what to quote (single or double) and what to escape e..g: `g++ $CppFile '@conanbuildinfo.args' -o timer --std=c++11`  A more complicated example might include command lines spanning multiple lines e.g.:\r\n```bash\r\ntar -cvpzf \"/share/Recovery/Snapshots/${ComputerName}_`$(date +%Y%m%d).tar.gz\" \\\r\n    --exclude=/proc \\\r\n    --exclude=/lost+found \r\n```\r\nCurrent workaround, double-quote first arg, swap backtick for `\\` and escape the `$` at the start of `$(date + ...).\r\n\r\n* **Use case 2: I want to execute a literal *pipelined command* in another shell** e.g.: `ps -o pid,args -C bash | awk '/running_script/ { print $1 }'` and `wsl ls $foo && echo $PWD`.  _I'm not sure if this needs to be a separate use case from the previous one._   The current work-around is to quote the bash command e.g.: `bash -c 'ps -o pid,args -C bash | awk ''/-bash/ { print $1 }'''`.  This use case might include multiline strings as well e.g.:\r\n```bash\r\nps -o pid,args -C bash | \\\r\nawk '/running_script/ { print $1 }'\r\n```\r\n\r\n* **Use case 2a: I want to execute a *pipelined command* in another shell with some PS interpolation** - is this a use case?\r\n\r\n* **Use case 3: I need `npm run $scriptName` to continue to work i.e. interpolate variables**. (this may be implicit and not need to be stated).\r\n\r\nThere's a question of whether there should be use cases for `interpolating` strings i.e. `g++ $CppFile @conanbuildinfo.args -o timer --std=c++11` or do we just punt on that and say that the current escaping rules cover this?  \r\n\r\n**These are likely not the right (or all) use cases but I think it would be helpful to have documented use cases and be able to refer to them when discussing this feature otherwise it's easy to get lost in how the feature actually addresses (or not) customer use cases.**\r\n\r\nAlso, the second use case seems to me to require \"shell invocation\".  I'm not sure the first one does though.  Seems like the exe could be invoked directly.",
    "created_at": "2020-07-27T18:50:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664574903",
    "id": 664574903,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU3NDkwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664574903/reactions"
    },
    "updated_at": "2020-07-27T22:57:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664574903",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@rkeithhill Could you add existing workarounds for completeness in your previous post?\r\n",
    "created_at": "2020-07-27T18:59:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664578867",
    "id": 664578867,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU3ODg2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664578867/reactions"
    },
    "updated_at": "2020-07-27T18:59:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664578867",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@oising, I too appreciate your thoughtful response.\r\n\r\n> What does `ins ...` give that `& cmd --% ...` cannot?\r\n\r\n`--%` in its current, _parameter_ (symbol) form - whose behavior I presume we want to retain - cannot be used for `cmd /c --%`, because it doesn't support _multi-command_ `cmd` command lines (nor `^` as the escape char.), given that the first unquoted `|` will be interpreted as _PowerShell's_ pipe operator and that `&` is passed verbatim.\r\nThe same would apply on Unix, where `--%` is generally near-useless, and with `sh -c` fails altogether, because `sh` expects the command line as a _single_ argument (e.g., `sh -c --% echo hi` yields an empty line, because `echo` alone is executed as the command).\r\n\r\n`ins`, with its requirement to delimit the pass-through command line by passing it _as a single string_ solves these problems, and, as stated, also allows the use of string interpolation to incorporate _PowerShell_ variable and expression values.\r\n\r\nAnd the latter brings us to **why the proposed `--%` _statement_ is a _dead-end street_**:\r\n\r\n* There is _no transition path_ from executing a preexisting command line _exactly as is_ to incorporating _PowerShell_ variable and expression values into it.\r\n\r\n  * The only - obscure and cumbersome - way to achieve this is to define _auxiliary environment variables_ that store the PowerShell values of interest and that you can then reference (shell-appropriately with `%...%` or `$...`) in the native command line.\r\n\r\n* You have the awkwardness of not being able to incorporate a `--%` statement into a larger PowerShell pipeline.\r\n\r\n  * Note that there are legitimate _non_-cut-and-paste reasons to call the native shell, where you may expect this integration; specifically, passing _raw byte data_ through (an intermediate) pipeline and sending _strings without a trailing newline_ require use of the native pipe - see [this SO answer](https://stackoverflow.com/a/48372333/45375) for a real-life example.\r\n\r\n* There is also the awkwardness of the `--%` _parameter_ being virtually useless on Unix, which introduces an odd asymmetry: if the `--%` _statement_ works on Unix too, why not the `--%` _parameter_? (e.g., \r\n`/bin/echo --% 'hi     \"noon\"'` yields verbatim `'hi noon'` (rather than the expected `hi \"noon\"`), due to `echo` receiving _two_ arguments, verbatim `'hi` and `noon'`, with single quotes retained as data and double quotes stripped).\r\n\r\n---\r\n\r\n`ins`, as the suggested alternative to the `--%` statement, would ideally just be a _convenience wrapper_ around `cmd /c` and `sh -c`, but it is actually _required_:\r\n\r\n* At least _temporarily_ on Unix, as long as #1995 isn't fixed, because calling `sh -c '...'` directly currently doesn't pass arguments with embedded `\"` through properly.\r\n\r\n* _Invariably_ on Windows, because you need to pass the command line _as-is_ to `cmd`  via the `lpCommandLine` parameter of `CreateProcess` (which the `--%` parameter cannot do due to being limited to _one_ command); alternatively  trying to pass the command line as a _single string_ enclosed in `\"...\"` overall again doesn't work robustly due to #1995.\r\n\r\n---\r\n\r\nThe troubles with _argument_ passing could be avoided by providing the command line to execute _via stdin_ (which `ins` could and should also support), i.e. to _pipe_ the command line / script text to the shell executable:\r\n\r\n* On Unix, this works just fine, because passing code via _stdin_ to `sh` is essentially the same as passing a _script file_ for execution (just as `sh -c '<code>' is`):\r\n\r\n```powershell\r\nPSonUnix> @'\r\necho '{ \"foo\": \"bar\" }' | cat -n\r\n'@ | sh\r\n\r\n     1\t{ \"foo\": \"bar\" }\r\n```\r\n\r\n* Alas, on Windows `cmd` doesn't handle such input nicely: it prints its logo and echoes each command before execution, along with the prompt string: \r\n\r\n```powershell\r\nPSonWin> 'date /t & ver' | cmd\r\n\r\nMicrosoft Windows [Version 10.0.18363.836]\r\n(c) 2019 Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Users\\jdoe>date /t & ver\r\nSun 07/26/2020\r\n\r\nMicrosoft Windows [Version 10.0.18363.836]\r\n\r\nC:\\Users\\jdoe>\r\n```\r\n\r\nSadly, PowerShell itself exhibits similarly unhelpful behavior: see #3223\r\n\r\n---\r\n\r\nJust like `sh` and all major POSIX-like shells (`dash`, `bash`, `ksh`, `zsh`), most scripting languages _do_ properly support stdin-as-script input, such as `python`, `node`, `ruby`, and `perl`.\r\n\r\n```powershell\r\nPS> 'print(\"hi\")' | python\r\n\r\nhi\r\n```\r\n\r\nFor incorporating _PowerShell_ variable and expression values, you again have the option of using string interpolation / concatenation:\r\n\r\n```powershell\r\nPS> $foo = 'bar'; \"print(`\"$foo`\")\" | python\r\n\r\nbar\r\n```\r\n\r\nor using the interpreter's argument-passing feature:\r\n\r\n```powershell\r\nPS> @'\r\nimport sys\r\nprint(sys.argv[1])\r\n'@ | python - bar\r\n\r\nbar\r\n```\r\n\r\n---\r\n\r\nI hope the above makes it clear that **there is _no_ need for special syntax at all - neither a `--%` statement,  nor a `#!` statement, nor Markdown code blocks** - all of which again would lack the ability to incorporate values from the calling PowerShell script.\r\n\r\nAs for the configurability of the native shell to use: For predictability, I don't think we should offer one; users who want to target a different shell can just pipe the command line to that shell's specific executable or, once #1995 is fixed, pass it as an argument.\r\n\r\n* A debatable variation is to target `/bin/bash` (with an (unlikely) fallback to `/bin/sh`) - while one would hope that published command lines rely on POSIX-mandated features only, command lines with Bash-isms (non-POSIX features that not all `/bin/sh` implementations can be expected to support) are likely out there, given the prevalence of `bash`.\r\n\r\n---\r\n\r\n@joeyaiello \r\n\r\n> It's my view that the benefits of this particular feature are much more significant than the impact #1995.\r\n\r\n**I find it mind-boggling that we spend as much effort as we have on making this cut-and-paste feature - primarily for _interactive_ convenience - an (awkward, feature-limited) first-class citizen, whereas PowerShell's fundamental inability to pass empty arguments and arguments with embedded `\"` chars. to external programs has been left unaddressed for years.**\r\n\r\n> but I'm not seeing people hit #1995 in the wild en masse\r\n\r\nI do, and for the [reasons I've previously discussed](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654851541) _you'll see it more and more_.\r\n\r\nAgain, I would argue **a shell that does the following, as PowerShell currently does, has a serious problem**:\r\n\r\n```powershell\r\n# On Unix\r\nPS> /bin/echo '{ \"foo\": \"bar\" }'\r\n\r\n{ foo: bar }\r\n```\r\n\r\n",
    "created_at": "2020-07-27T19:13:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664586141",
    "id": 664586141,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU4NjE0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664586141/reactions"
    },
    "updated_at": "2020-07-28T16:35:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664586141",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @rjmholt CommandAst has Extent property with input string. Re-parsing is as simple as split by first space on Windows or split by spaces on Unix. So I expect we lost nothing in the string and get good performance.\r\n\r\nYeah, I understand the draw there, and perhaps the allocations of the AST in that scenario aren't awful (although I'd argue that the language ought not to generate needless allocations for simple syntax). But all you have to do is imagine an input that bash/cmd sees as a string and PowerShell doesn't to start hitting issues:\r\n\r\nDoes not parse with current PowerShell:\r\n```powershell\r\n--% my_command \"\\\" \"\r\n```\r\n\r\nParses, but splitting by spaces gives the wrong result:\r\n```powershell\r\n--% my_command \"\\\"    \"\\\"\r\n```\r\n\r\n(We must send 4 spaces in the string, but PowerShell sees two strings separated in an array)",
    "created_at": "2020-07-27T19:20:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664588996",
    "id": 664588996,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU4ODk5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664588996/reactions"
    },
    "updated_at": "2020-07-27T19:23:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664588996",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt, all great questions at the bottom of your [comment above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664560728), which to me again suggest that the right answer is: no need for special syntax.\r\n\r\nI've addressed the question about what native shell executable to use in my [previous comment](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664586141), but as for:\r\n\r\n> Would other shells or other languages implement this or have they already? At a syntax level, or at any other level? If so, how?\r\n\r\nI am not aware of any other language having done this at the syntax level without employing _explicit delimiters_ and allowing _interpolation_.\r\nE.g., `perl` has `` `...` `` for running shell commands, so you can run the following command from a script on Unix, for instance:\r\n`` my $foo='/'; print `ls $foo | cat -n` ``\r\n\r\nThe key aspects are the use of explicit delimiters and the ability to incorporate values from the caller - both of which are missing from the current proposal for the `--%` statement.\r\n\r\nAs stated before, we _could_ use this approach for a new _operator_ (or some sort of delimiter-based, optionally interpolating syntax), but I don't think that's worth it, given that\r\n` ins \"ls $foo | cat -n\" ` (or with a here-string variant) will do, without burdening the language with additional complexity.\r\n\r\n`perl` offers a (proper) syntax-level solution _because it isn't itself a shell_ but wants to make shell calls as convenient as possible.\r\n\r\nBy contrast, we _are_ a shell (too), and offer shell-style invocations _directly_, without any additional syntax (albeit presently flawed - see #1995).\r\nProviding special syntax to make _a different shell's_ invocations as easy as possible seems unnecessary.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-27T20:58:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664635110",
    "id": 664635110,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNTExMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664635110/reactions"
    },
    "updated_at": "2020-07-27T20:58:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664635110",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@iSazonov \r\n\r\n> _If we (and PowerShell) know that we run a native executable why do we need \"call native operator\" at all?_\r\n> \r\n> If PowerShell parse an input string and get CommandAst then PowerShell does a discover of the command.\r\n> If the command is a native command PowerShell converts the ast to NativeCommandProcessor.\r\n> We can implement new (experimental NativeCommandProcessor) for the case which will re-parse the Ast extent (that is the input string) so that to get the native executable name/path and rest of the string as argument or arguments by OS rules.\r\n> \r\n> If an user want copy-paste from shell he should type \"cmd \" or \"bash \" - that will works without editing.\r\n> If an user want copy-paste an native command line will works too like `g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11`.\r\n\r\nBut wait wouldn't you never be able to use any PowerShell syntax with native commands if we did all that?  So like `sc.exe query $serviceName` would pass `$serviceName` as a literal string?",
    "created_at": "2020-07-27T22:32:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664671746",
    "id": 664671746,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY3MTc0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664671746/reactions"
    },
    "updated_at": "2020-07-27T22:32:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664671746",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> But wait wouldn't you never be able to use any PowerShell syntax with native commands if we did all that? So like `sc.exe query $serviceName` would pass `$serviceName` as a literal string?\r\n\r\nThe `--%` option is not intended to address that need.\r\n\r\n`sc.exe query $serviceName` is handled by `&\"<cmd>\"`",
    "created_at": "2020-07-27T23:20:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664687166",
    "id": 664687166,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY4NzE2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664687166/reactions"
    },
    "updated_at": "2020-07-27T23:20:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664687166",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The `--%` option is not intended to address that need.\r\n> \r\n> `sc.exe query $serviceName` is handled by `&\"<cmd>\"`\r\n\r\nYeah for sure, I don't think that's what @iSazonov is referring to though. I'm reading that as though they're suggesting a general change to how parameter binding works for native commands.",
    "created_at": "2020-07-27T23:30:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664690358",
    "id": 664690358,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY5MDM1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664690358/reactions"
    },
    "updated_at": "2020-07-27T23:30:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664690358",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Yeah for sure, I don't think that's what @iSazonov is referring to though. I'm reading that as though they're suggesting a general change to how parameter binding works for native commands.\r\n\r\nLord, I hope not.",
    "created_at": "2020-07-27T23:32:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664690923",
    "id": 664690923,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY5MDkyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664690923/reactions"
    },
    "updated_at": "2020-07-27T23:32:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664690923",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Lord, I hope not.\r\n\r\nEh sometimes when you're brainstorming the abstract it's easy to forget about the obvious.  I mean to be fair we all read it and immediately started thinking implementation without realizing how much it would break.\r\n\r\nOr I'm missing something obvious and that's not at all what's being proposed 😁 ",
    "created_at": "2020-07-27T23:39:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664692758",
    "id": 664692758,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY5Mjc1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664692758/reactions"
    },
    "updated_at": "2020-07-27T23:39:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664692758",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@essentialexch, to be clear, re:\r\n\r\n> `sc.exe query $serviceName` is handled by `&\"<cmd>\"`\r\n\r\n`&  \"<cmd>\"` only works if `<cmd>` evaluates to a mere command _name or path_, _not including arguments_ - arguments must be passed separately, individually - and they don't per se need `\"....\"` quoting for variable references to be expanded (e.g., \r\n`$exe = 'findstr'; & \"where.exe $exe\"` fails by design; must be `& \"where.exe\" $exe` (double quotes optional here; if omitted, the `&` is then optional too))",
    "created_at": "2020-07-28T01:57:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664730470",
    "id": 664730470,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDczMDQ3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664730470/reactions"
    },
    "updated_at": "2020-07-28T01:59:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664730470",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Yeah for sure, I don't think that's what @iSazonov is referring to though. I'm reading that as though they're suggesting a general change to how parameter binding works for native commands.\r\n\r\n[My proposal](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664526006) is to fix #1995 (with breaking change) as simple as possible. Of cause interpolation does not work. Of cause it is not final proposal - it demo how we could implement a fix in minutes. And it mainly demos that we do not need a call native operator at all as @mklement0 pointed too.\r\n\r\n> Parses, but splitting by spaces gives the wrong result:\r\n\r\n@rjmholt Yes, but I think you catch the idea.\r\nFirst child of the CommandAst is StringConstantExpressionAst with the native command as BareWord. We can cut the bare word from CommandAst Extent and get parameter list without ast-s change. But we could add new ast to keep the parameter list too.\r\nI spend a time for the explanation because below I want to summarize the discussion and I feel we will need to implement some enhancement which looks complex but I feel they could be implemented simple and __with easy opt-out for backward compatibility__.\r\n\r\n-----------\r\nI believe the @SteveL-MSFT's intention of the initial proposal was to avoid a breaking change.\r\nI agree with @TSlivede and @mklement0 that this discussion showed that the new syntax is not needed since it does not solve all _fundamental_ problems like #1995 and #12975. On the other hand, it adds complexity to the language, while we want, on the contrary, to _simplify_ work with native applications.\r\n\r\n__The only way to move forward is to make a breaking change or more.__ (After that, a new operator or cmdlet might be useful in some scenarios too.)\r\n\r\n-----------\r\n\r\nWe should start with summarization of use cases and user expectations.\r\nSee @rkeithhill's [great post above](https://github.com/rkeithhill)\r\n\r\n1. Users want enable/disable interpolation.\r\nPowerShell already has strings/here-strings with single and double quotes.\r\nOur goal is to understand how to apply/refine/enhance its.\r\n2. Users want run any executable or a shell\r\n    - any executable - command starts with the app name and follows arguments \r\n        - with/without interpolation\r\n        - on single line/on multi line\r\n    - shell is probably a special case because argument(s) is a _script_\r\n        - in copy-paste scenario users don't want interpolation and want single and multi line\r\n        - in script scenario users want to enable/disable interpolation and want single and multi line\r\n\r\n    Thoughts:\r\n        This makes us think that the copy-paste scenario behavior should be the default.\r\n        Line terminators depend on executable (\\ in bash, ` in PowerShell). This makes us think that:\r\n            (1) a shell should be explicitly stated as any executable,\r\n            (2) perhaps any executable with multi line should be called by means of a shell or we have to do a special parsing (to remove \\ terminator and build argument list falling back to the issue with escaping)\r\n            (3) we could address copy-paste scenario in PSReadline. It could convert a buffer to right PowerShell command.\r\n\r\n3. Users want single line and multiline.\r\n    - perhaps we need to enhance here-strings for single line to address some scenarios as discussed previously.\r\n    - see 2 - (2) - always use a shell for multiline or implement a special parsing\r\n\r\nI don't want to write more because @TSlivede and @mklement0 could update their thoughts and conclusions from earlier but which can now be based on acceptance of breaking change(s). I'd ask to open new issue (and close all olds), enumerate all use cases (starting with @@rkeithhill's and add more), and maybe create Pester tests - it would be great step to fix the Issue.\r\n\r\nI want only add that we could consider new cmdlets to simplify user adoptions like Invoke-Shell (Invoke-NativeShell), Test-Arguments (like echoargs.exe to show that native app gets and show a help for users), Convert-Arguments (to convert user input to right escaped arguments).\r\n\r\nPS: As I showed above single line behavior could be easily opt-out for backward compatibility at run time.\r\n",
    "created_at": "2020-07-28T09:58:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664946709",
    "id": 664946709,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk0NjcwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664946709/reactions"
    },
    "updated_at": "2020-07-28T09:58:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664946709",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Line terminators depend on executable (\\ in bash, ` in PowerShell).\r\n\r\n`\\` is not a line terminator in `bash`.\r\n\r\n",
    "created_at": "2020-07-28T10:08:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664953046",
    "id": 664953046,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk1MzA0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664953046/reactions"
    },
    "updated_at": "2020-07-28T10:08:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664953046",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Of cause interpolation does not work. Of cause it is not final proposal - it demo how we could implement a fix in minutes. And it mainly demos that we do not need a call native operator at all as @mklement0 pointed too.\r\n\r\nIn the same way that we could fix all bugs in a few minutes if we just deleted the repo.  That's a pretty enormous break you're proposing.  Even if just a hypothetical I don't see how it's helpful.",
    "created_at": "2020-07-28T11:15:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664981001",
    "id": 664981001,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk4MTAwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664981001/reactions"
    },
    "updated_at": "2020-07-28T11:15:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664981001",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": ">  Even if just a hypothetical I don't see how it's helpful.\r\n\r\n@SeeminglyScience It seems we are in different contexts. I say that we can implement a fix for single line native call as a breaking change but without breaking Parser. In other words, we can even switch the behavior on the fly, no matter what new behavior we would implement.\r\n",
    "created_at": "2020-07-28T11:46:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664993032",
    "id": 664993032,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk5MzAzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664993032/reactions"
    },
    "updated_at": "2020-07-28T11:46:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664993032",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> In other words, we can even switch the behavior on the fly, no matter what new behavior we would implement.\r\n\r\nI guess the thing I'm missing is how do you switch that behavior on the fly without explicitly asking for it (like with a call native operator).",
    "created_at": "2020-07-28T11:51:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664995074",
    "id": 664995074,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk5NTA3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664995074/reactions"
    },
    "updated_at": "2020-07-28T11:51:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664995074",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@iSazonov \r\n\r\n> _If we (and PowerShell) know that we run a native executable why do we need \"call native operator\" at all?_\r\n> \r\n> If PowerShell parse an input string and get CommandAst then PowerShell does a discover of the command.\r\n> If the command is a native command PowerShell converts the ast to NativeCommandProcessor.\r\n> We can implement new (experimental NativeCommandProcessor) for the case which will re-parse the Ast extent (that is the input string) so that to get the native executable name/path and rest of the string as argument or arguments by OS rules.\r\n> \r\n> If an user want copy-paste from shell he should type \"cmd \" or \"bash \" - that will works without editing.\r\n> If an user want copy-paste an native command line will works too like `g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11`.\r\n\r\nI want to confirm what you mean by that: Are you suggesting to essentially ignore all powershell syntax, when calling external executables?\r\n\r\nSpecifically: Are you suggesting, that running for example\r\n```\r\n/bin/echo (1..5)\r\n```\r\nin powershell will no longer out put `1 2 3 4 5` but should instead output literal `(1..5)`?\r\n\r\nIf that is actually what you are suggesting, than I have to say: I think that is a terrible idea.\r\n\r\nThat doesn't simplify things (external executables behave now **syntactically** different than internal cmdlets) and it also does't have to do anything with #1995 IMHO...",
    "created_at": "2020-07-28T15:32:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665110383",
    "id": 665110383,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTExMDM4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665110383/reactions"
    },
    "updated_at": "2020-07-28T15:33:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665110383",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "@rjmholt \r\nFrom [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664560728):\r\n> - Would other shells or other languages implement this or have they already? At a syntax level, or at any other level? If so, how?\r\n\r\nThe only thing, that comes to my mind would be ipythons [`!` operator](https://ipython.readthedocs.io/en/stable/interactive/reference.html#system-shell-access):\r\n\r\nRunning `!ps -'fax' || true` in ipython outputs:\r\n```\r\n  261 pts/0    Sl     0:00          \\_ /usr/bin/python /usr/bin/ipython\r\n  311 pts/0    S      0:00              \\_ /bin/bash -c ps -'fax' || true\r\n  312 pts/0    R      0:00                  \\_ ps -fax\r\n```\r\n([ps doesn't show quotes around arguments](https://unix.stackexchange.com/questions/243142/how-to-show-quoted-command-list), but `ps -'fax' || true` is really given as one single argument to bash.)\r\n\r\nHowever, this feature still allows interpolation of python variables into that command (`{pyvar}`).\r\n\r\nAnd similar to @mklement0's [example](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664635110), ipython only implements this\r\n>because it isn't itself a shell\r\n\r\nIf ipython would only allow python syntax it wouldn't be very useful as a shell, so they allow this syntax to forward commands to bash to be usable as a shell. Powershell on the other hand claims to be a shell (until #1995 is solved, I won't say that it *is* a shell), so it would be quite strange to add a special syntax for calling *other* shells.",
    "created_at": "2020-07-28T15:58:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665125375",
    "id": 665125375,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTEyNTM3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665125375/reactions"
    },
    "updated_at": "2020-07-28T15:58:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665125375",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "If something like this gets for whatever reason actually implemented (hopefully not), I'd suggest to use `! ` instead of `--%` as the \"call shell operator\".\r\n\r\n`! ` is something people might guess (because they know `!` for that purpose from ipython (or from the vim command mode or from `less` or from `ftp`))\r\n\r\n`--%` on the other hand is harder to type, unlikely to be guessed and most importantly: The current usage of `--%` has in my opinion very little in common with the \"pass stuff to another shell\" behavior. The current `--%` emulates exactly one element of cmd syntax: variable substitution (and even that not completely). It doesn't support the escape char `^`, doesn't allow redirection to files, and so on. The only thing somewhat useful about the current `--%` is the ability to pass verbatim content into the `lpCommandLine` - but that is something that the proposed \"call shell operator\" isn't good at.\r\n\r\nOne more difference (which was already mentioned) between the proposed \"call shell operator\" and the current `--%`: One ends at pipes, the other doesn't - very confusing for new users. `!` on the other hand forwards `|` to the shell in all applications I tested so far (ipython, vim, less, ed, etc.).\r\n",
    "created_at": "2020-07-28T16:37:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665146164",
    "id": 665146164,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTE0NjE2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665146164/reactions"
    },
    "updated_at": "2020-07-28T16:40:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665146164",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "```powershell\r\nHELP about_Logical_Operators -S\r\n```",
    "created_at": "2020-07-28T18:00:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665188478",
    "id": 665188478,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTE4ODQ3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665188478/reactions"
    },
    "updated_at": "2020-07-28T18:00:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665188478",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah, `!` by itself is problematic because it's a logical negation operator in the language.",
    "created_at": "2020-07-28T18:01:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665189248",
    "id": 665189248,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTE4OTI0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665189248/reactions"
    },
    "updated_at": "2020-07-28T18:01:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665189248",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "BTW one of the alternate proposals was `&!` - sort of a \"call native/shell\" operator.",
    "created_at": "2020-07-28T18:08:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665192898",
    "id": 665192898,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTE5Mjg5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665192898/reactions"
    },
    "updated_at": "2020-07-28T18:08:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665192898",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I wish @TSlivede had stressed the \"hopefully not\" part more when he said \"If something like this gets for whatever reason actually implemented (hopefully not)\"\r\n\r\n* No operator/statement _with individual arguments_ can cleanly solve the I-want-to-use-PowerShell-values-in-the-native-command-line problem, given that `$` is used as the variable sigil in _both_ PowerShell and POSIX-like shells.\r\n\r\n* No operator/statement _without explicit delimiters around the entire native command line_ can solve the where-does-the-native-command-line-end problem (which you may or may not care about).\r\n",
    "created_at": "2020-07-28T18:28:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665204111",
    "id": 665204111,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIwNDExMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665204111/reactions"
    },
    "updated_at": "2020-07-28T18:33:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665204111",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this today.  At this point, there doesn't seem to be agreement on the initial problem statement nor a design on how to resolve so we don't believe we can get this into 7.1 w/ a stable design.",
    "created_at": "2020-07-28T19:19:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665228685",
    "id": 665228685,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIyODY4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 7,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665228685/reactions"
    },
    "updated_at": "2020-07-28T19:19:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665228685",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> @PowerShell/powershell-committee discussed this today. At this point, there doesn't seem to be agreement on the initial problem statement nor a design on how to resolve so we don't believe we can get this into 7.1 w/ a stable design.\r\n\r\n182 comments!",
    "created_at": "2020-07-28T19:30:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665233698",
    "id": 665233698,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIzMzY5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665233698/reactions"
    },
    "updated_at": "2020-07-28T19:30:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665233698",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "There's been some great discussion on this!  I'll continue to monitor any new comments on this issue.  We still encourage the community to implement `Invoke-NativeCommand` type cmdlet published to PSGallery independent of this issue.",
    "created_at": "2020-07-28T19:37:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665236710",
    "id": 665236710,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIzNjcxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665236710/reactions"
    },
    "updated_at": "2020-07-28T19:37:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665236710",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "I think it unfortunate, when you had a compromise but very useful solution at https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-662732627, to drop this. I know you want consensus, but sometimes a compromise is the best that can happen. No, it isn't perfect, but a one-liner SO solution would be extremely useful. At least in this one person's opinion.",
    "created_at": "2020-07-28T20:59:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665279808",
    "id": 665279808,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTI3OTgwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665279808/reactions"
    },
    "updated_at": "2020-07-28T20:59:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665279808",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@essentialexch to be clear, we don't even have consensus within the PowerShell team",
    "created_at": "2020-07-28T21:24:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665291443",
    "id": 665291443,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTI5MTQ0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665291443/reactions"
    },
    "updated_at": "2020-07-28T21:24:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665291443",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Since this is postponed what about implementation of helpers\r\n> we could consider new cmdlets to simplify user adoptions like Invoke-Shell (Invoke-NativeShell), Test-Arguments (like echoargs.exe to show that native app gets and show a help for users), Convert-Arguments (to convert user input to right escaped arguments).\r\n\r\nI think Test-Arguments could be very useful.",
    "created_at": "2020-07-29T04:05:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665418031",
    "id": 665418031,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTQxODAzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665418031/reactions"
    },
    "updated_at": "2020-07-29T04:05:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665418031",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I've just published a module, **[`Native`](https://github.com/mklement0/Native), (`Install-Module Native -Scope CurrentUser`) which I invite you all to try and whose commands I'll be using below**; the numeric use cases referenced are from @rkeithhill's comment [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-664574903).\r\n\r\nIf we ever want the conceptual fog to clear, I think we need to frame the uses cases differently.\r\n_None of them require any changes in parsing_.\r\n\r\n### Use case [native-shell call]: \r\n\r\nYou want to execute an _individual command_ (use case 1) or an entire _multi-command command line_ (use case 2) _written for the platform-native shell_ (this issue):\r\n\r\n  * Since you're using  a different shell's syntax, you're passing the command (line) _as a single string_ to the target shell, for _it_ to do the parsing; PowerShell's string interpolation offers the ability to embed PowerShell values into the string passed (use case 2a). \r\n  * **`ins` (`Invoke-NativeShell`)** covers these uses cases.\r\n\r\n```powershell\r\n# Use case 1: Single executable call with line continuation, on Unix.\r\n@'\r\ntar -cvpzf /share/Recovery/Snapshots/$(hostname)_$(date +%Y%m%d).tar.gz \\\r\n    --exclude=/proc \\\r\n    --exclude=/lost+found \r\n'@ | ins\r\n\r\n# Use case 2: Entire Bash command line (also with line continuation)\r\n@'\r\nps -o pid,args | awk \\\r\n  '/pwsh/ { print $1 }'\r\n'@ | ins\r\n\r\n# Use case 2a: Entire Bash command line (also with line continuation) with string interpolation.\r\n# Note the double-quoted here-string and the need to escape the $ that is for Bash as `$\r\n$fields = 'pid,args'\r\n@\"\r\nps -o $fields | awk \\\r\n  '/pwsh/ { print `$1 }'\r\n\"@ | ins\r\n\r\n# Alternative to use case 2a: pass the PowerShell value *as a pass-through argument*,\r\n# which allows passing the script verbatim.\r\n# Bash sees the pass-through arguments as $1, ... (note that the `awk` $1 is unrelated).\r\n@'\r\nps -o $1 | awk \\\r\n  '/pwsh/ { print $1 }'\r\n'@ | ins - 'pid,args'\r\n```\r\n\r\nThe  here-string syntax isn't the most convenient (hence the suggestion to implement an in-line variant - see #13204), but you don't _have_ to use it; for verbatim commands, you can use `'...'`, which only requires _doubling_ embedded `'`, if present.\r\n\r\nAlso, here's a **reasonable substitute for the  \"StackOverflow operator\"**: \r\n\r\n**If you place the following `PSReadLine` key handler in your `$PROFILE` file, you'll be able to use <kbd>Alt-v</kbd> to scaffold a call to `ins` with a verbatim here-string into which the current clipboard text is pasted.\r\n<kbd>Enter</kbd> submits the call.**\r\n\r\n```powershell\r\n# Scaffolds an ins (Invoke-NativeShell) call with a verbatim here-string\r\n# and pastes the text on the clipboard into the here-string.\r\nSet-PSReadLineKeyHandler 'alt+v' -ScriptBlock {\r\n  [Microsoft.PowerShell.PSConsoleReadLine]::Insert(\"@'`n`n'@ | ins \")\r\n  foreach ($i in 1..10) { [Microsoft.PowerShell.PSConsoleReadLine]::BackwardChar() }\r\n  # Comment the following statement out if you don't want to paste from the clipboard.\r\n  [Microsoft.PowerShell.PSConsoleReadLine]::Insert((Get-Clipboard))\r\n}\r\n```\r\n\r\n\r\n### Use case [direct executable call]: \r\n\r\nYou want to call a _single external executable_ using _PowerShell_'s syntax, with _individual arguments_ (use cases 1a and 3).\r\n\r\n* **This is a core mandate of any shell, and it is of vital importance that it work robustly.**\r\n\r\n  * You need to be able to rely on PowerShell being able to pass through any arguments that result from _its_ parsing _as-is_ to the target executable. **This is currently not the case - see #1995**.\r\n\r\n* **It requires you to understand _PowerShell's_ syntax and _its_ argument-mode metacharacters. Of necessity, these differ from the native shells', but it is the price to pay for PowerShell's superior command-line capabilities - it's a price we want to encourage users to pay.**\r\n\r\n  * You need to be aware that `` ` `` is used as the escape character and for line continuation.\r\n  * You need to be aware that PowerShell has additional metacharacters that require quoting/escaping for verbatim use; these are (note that `@` is only problematic as an argument's first char.):\r\n\r\n     * for POSIX-like shells (e.g., Bash): `` @ { } ` `` (and `$`, if you want to prevent up-front expansion by PowerShell)\r\n     * for `cmd.exe`: `` ( ) @ { } # ` ``\r\n     * Individually `` ` ``-escaping such chars. is sufficient (e.g., `` printf %s `@list.txt ``).\r\n\r\n**While we're waiting for #1995 to be fixed, function `ie` (for *i*nvoke (external) *e*xecutable) fills the gap,** simply by prepending to a direct call; e.g., instead of the following call:\r\n\r\n```powershell\r\n# This command is currently broken, because the '{ \"name\": \"foo\" }' argument isn't properly passed.\r\ncurl.exe -u jdoe  'https://api.github.com/user/repos' -d '{ \"name\": \"foo\" }'\r\n```\r\n\r\nyou'd use the following:\r\n\r\n```powershell\r\n# OK, thanks to `ie`\r\nie curl.exe -u jdoe  'https://api.github.com/user/repos' -d '{ \"name\": \"foo\" }'\r\n```\r\n\r\nThe `Native` module comes with something akin to `echoArgs.exe`, the `dbea` (`Debug-ExecutableArguments`) command; sample output on Windows:\r\n\r\n```powershell\r\n# Note the missing first argument, the missing \" chars., and the erroneous argument boundaries.\r\nPS> dbea '' 'a&b' '3\" of snow' 'Nat \"King\" Cole' 'c:\\temp 1\\' 'a \\\" b'\r\n7 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <a&b>\r\n  <3 of snow Nat>\r\n  <King>\r\n  <Cole c:\\temp>\r\n  <1\\ a>\r\n  <\">\r\n  <b>\r\n\r\nCommand line (helper executable omitted):\r\n\r\n  a&b 3\" of snow \"Nat \"King\" Cole\" \"c:\\temp 1\\\\\" \"a \\\" b\"\r\n```\r\n\r\nBy using the `-UseIe` (`-ie`) switch, you can tell `dbea` to pass the arguments via `ie`, which demonstrates that it fixes the problems:\r\n\r\n```powershell\r\n# OK, thanks to -UseIe\r\nPS> dbea -UseIe '' 'a&b' '3\" of snow' 'Nat \"King\" Cole' 'c:\\temp 1\\' 'a \\\" b'\r\n6 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <>\r\n  <a&b>\r\n  <3\" of snow>\r\n  <Nat \"King\" Cole>\r\n  <c:\\temp 1\\>\r\n  <a \\\" b>\r\n\r\nCommand line (helper executable omitted):\r\n\r\n  \"\" a&b \"3\\\" of snow\" \"Nat \\\"King\\\" Cole\" \"c:\\temp 1\\\\\" \"a \\\\\\\" b\"\r\n```\r\n\r\nNote: Once #1995 is fixed, `ie` is no longer required; in the interest of forward compatibility, `ie` is designed to detect and automatically defer to a fix; that is, once the fix is in place, `ie` will stop applying its workarounds and will effectively act like a direct / `&` call.\r\n\r\n### Use case [direct rogue Windows executable call]: \r\n\r\nThere are two main problems, which arise on _Windows only_:\r\n\r\n* You're invoking a \"rogue\" executable that has **quoting requirements that differ from the most widely used convention**; e.g, `msiexec.exe` and `msdeploy.exe` require `prop=\"<value with spaces>\"` to be quoted precisely that way - the quoting just around the _value_ part - even though `\"prop=<value with spaces>\"`  - quoting of the entire argument - _should_ be equivalent (the latter is what PowerShell - justifiably - does behind the scenes).\r\n\r\n* You're invoking _a batch file_ with _an argument that doesn't contain spaces, but contains `cmd.exe` metacharacters_ such as `&`, `^`, or `|`; e.g.:\r\n\r\n  * `.\\someBatchFile.cmd 'http://example.org/a&b'`\r\n  * PowerShell - justifiably - passes `http://example.org/a&b` _unquoted_ (since there is no embedded whitespace), but this breaks the batch-file invocation, because `cmd.exe` - unreasonably - subjects the arguments passed to a batch file to the same parsing ruling that would apply *inside of `cmd.exe`* rather than accepting them as literals.\r\n\r\n  * Note: **While using batch files to _directly_ implement functionality is probably waning, using them as _CLI entry points_ is still very common, such as Azure's `az` CLI, which is implemented as batch file `az.cmd`.**\r\n\r\nNote: **`ie` automatically handles these scenarios for batch files and for `msiexec.exe` and `msdeploy.exe`, so for _most_ calls no extra effort should be needed**; however, it is impossible to anticipate _all_ \"rogue\" executables.\r\n\r\nThere are two ways to resolve this:\r\n\r\n* Given that `cmd.exe`, after applying its own interpretation to arguments on a command line, _does_ preserve the quoting as specified, you can delegate to an `ins` call on Windows:\r\n\r\n  * `ins '.\\someBatchFile.cmd \"http://example.org/a&b\"'`\r\n  * If you use an _expandable_ string, this again enables you to embed PowerShell values into the command string.\r\n     * ``$url = 'http://example.org/a&b'; ins \".\\someBatchFile.cmd `\"$url`\"\" ``\r\n\r\n* Alternatively, use the current `--%` implementation, but beware its limitations:\r\n\r\n  * `.\\someBatchFile.cmd --% \"http://example.org/a&b\"'`\r\n  * Given how `--%` is implemented, the only way to embed PowerShell values is to - awkwardly - define an _aux. environment variable_ and reference it with `%...%` syntax:\r\n     * ``$env:url = 'http://example.org/a&b'; .\\someBatchFile.cmd --% \"%url%\" ``\r\n\r\n---\r\n\r\n### Error handling\r\n\r\nThe pending https://github.com/PowerShell/PowerShell-RFC/pull/88 will bring better error-handling integration with external (native) executables.\r\n\r\nIn the meantime, the `Native` module ships with two features for **ad-hoc opt-in to treating a nonzero exit code as a script-terminating error**:\r\n\r\n* `ins` supports the `-e` / `-ErrorOnFailure` switch, which throws an error if `$LASTEXITCODE` is nonzero after the call to the native shell.\r\n\r\n* `iee` is a wrapper function for `ie` that analogously throws an error if `$LASTEXITCODE` is nonzero after the call to the external executable.\r\n\r\nThere are many subtleties to the commands that ship with the module.\r\nThe fairly extensive comment-based help hopefully covers them sufficiently.\r\n\r\n\r\n",
    "created_at": "2020-08-10T20:27:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939",
    "id": 671572939,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU3MjkzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 5,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 13,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671572939/reactions"
    },
    "updated_at": "2020-08-10T21:32:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671572939",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> If we ever want the conceptual fog to clear, I think we need to frame the uses cases differently.\r\n\r\nGreat!  What I posted earlier was just to get folks thinking about creating more and better use cases.",
    "created_at": "2020-08-10T20:52:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671583703",
    "id": 671583703,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU4MzcwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671583703/reactions"
    },
    "updated_at": "2020-08-10T20:52:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671583703",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I should clarify a few important aspects of `ins` (`Invoke-NativeShell`) that differ from what I've previously proposed; the aim was to account for the ubiquity of `bash` and to provide a consistent CLI across platforms.\r\n\r\n* On **Unix**, I've decided to call `/bin/bash` rather than `/bin/sh`, given Bash's ubiquity, but you can opt into using `/bin/sh` with `-UseSh` (`-sh`) (`/bin/sh` also serves as the fallback in the unlikely event that `/bin/bash` isn't present).\r\n\r\n  * In the interest of a consistent experience across invocation forms and platforms, I've hidden the ability to set `$0`, the invocation name; that is, any pass-through arguments start with `$1`, which is consistent with how arguments are passed when you pipe the script from the pipeline, and likely what users expect:\r\n\r\n```powershell\r\n# Script as argument\r\nPSonUnix> ins 'echo $# arguments; echo \"[$1] [$2]\"' one two\r\n2 arguments\r\n[one] [two]\r\n\r\n# Script via pipeline; note the \"-\" to signal that the script is piped.\r\nPSonUnix> 'echo $# arguments; echo \"[$1] [$2]\"' | ins - one two\r\n2 arguments\r\n[one] [two]\r\n\r\n# As an aside: script as argument, with pipeline input *as data*:\r\nPSonUnix> 'one', 'two' | ins 'cat -n'\r\n     1\tone\r\n     2\ttwo\r\n```\r\n\r\n* On **Windows** I had to use a temporary _batch file_ behind the scenes for technical reasons, but I think that use of batch-file syntax is ultimately the better choice anyway (`%%i` rather than `%i`  in `for` loop variables, ability to escape `%` as `%%`).\r\n\r\n  * Use of a batch file also enables support for pass-through arguments, as on Unix:\r\n\r\n```powershell\r\n# Script as argument\r\nPSonWin> ins 'echo [%1] [%2]' one two\r\n[one] [two]\r\n\r\n# Script via pipeline; note the \"-\" to signal that the script is piped.\r\nPSonWin> 'echo [%1] [%2]' | ins - one two\r\n[one] [two]\r\n```\r\n",
    "created_at": "2020-08-11T14:17:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671974482",
    "id": 671974482,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk3NDQ4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 1,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671974482/reactions"
    },
    "updated_at": "2020-08-11T14:17:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671974482",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I am late to the party, but here are my two cents:\r\n\r\nReading through the past suggestions, I see \"--%\" and \"&!\" have been proposed for the new call operator. My personal preference definitely goes with \"&!\", not only it is closely related to \"&\" but it just feels much more natural than \"--%\".\r\n\r\nHere are my general impressions so far for all the times I have used the current call operator:\r\n- It works, you just have to be careful about escaping in the right places until you get the expected result\r\n- I tend to quote all of my parameters individually because I have no idea how PowerShell would interpret it\r\n- Even if it feels a bit clunky as opposed to bash, I prefer explicit quoting and escaping over unexpected results\r\n\r\nChanging the behaviour of the current call operator comes at the risk of breaking existing scripts, so it should not be taken lightly. If we choose to make breaking changes to \"&\" I suggest introducing a new $PSCallOperatorPolicy variable that could be set to \"legacy\" (or other values in the future) to restore the old behaviour in the current scope, only when needed to make things work.\r\n\r\nI do not mind the introduction of a new call operator like \"&!\" with new behaviour incompatible with the old, the only issue is that PowerShell would now have two call operators. My main concern is that we certainly don't want a third call operator in the future, so this means we have to get this one right, otherwise we'll face the same issue in a few years.\r\n\r\nHowever, even just trying to get the design perfect for the new call operator would likely make it impossible to ship, because nobody can get that kind of stuff right anyway, and it is suggested to a lot of diverging opinions and use cases we can't predict. The only true solution in my mind would be to make the new call operator extensible through arguments meant for the operator and not the native command line. An alternative approach would be to use context variables like $PSCallOperatorPolicy, but this could quickly get out of hand.\r\n\r\nWould there be a syntactically valid approach to optionally passing parameters to the call operator in the same way one can pass arguments to Start-Process? In most cases, the default, unmodified behaviour would be good, but it would make it possible to expose a lot more functionality for more advanced use cases.\r\n\r\nWhen thinking about the call operator, I always picture it in my mind as shorthand to Start-Process, but I always wish I could send it similar parameters. I have no idea if the call operator and Start-Process share a lot of the same code, but from a conceptual standpoint they are relatively close in terms of exposed functionality.\r\n\r\nHere are some ideas for an extensible \"&!\" operator:\r\n\r\n```\r\n&(<OperatorParams>)! <CommandParams>\r\n&!(<OperatorParams>) <CommandParams>\r\n```\r\n\r\nSince we already use $(<expression>) to force the evaluation of an expression, using &(<OperatorParams>)! may not be so weird after all. The goal of placing the optional parameters between parenthesis and strictly in between & and ! would be to hopefully make it much easier to parse unambiguously. Everything *after* the ! would be the regular command line to be used with the call operator.\r\n\r\nI guess we could also invert the two, which would always place the native command first:\r\n\r\n```\r\n&(<Command Params>)! <OperatorParams>\r\n&!(<CommandParams>) <OperatorParams>\r\n```\r\nWhat I like about the parenthesis here is we somehow get a feel that we \"evaluate a native command\" almost like we can evaluate a PowerShell expression, except with a different syntax. We also open the way to extend the call operator through parameters affecting its behaviour (toggle the legacy behaviour, but may even redirect stdio/stdout/stderr, etc).\r\n\r\nLet me know what you think. I can definitely join the \"new operator\" camp if there is a suitable plan to also make it extensible without breaking changes in the future. It would also be easier to come up with something that works, only to add more parameters in the future, allowing us to ship something without getting everything right the first time.",
    "created_at": "2020-12-15T19:09:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-745503830",
    "id": 745503830,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTUwMzgzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745503830/reactions"
    },
    "updated_at": "2020-12-15T19:09:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745503830",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think the idea of a new operator to be used for a legacy ill‑defined interface is deeply misguided.",
    "created_at": "2020-12-15T22:21:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-745605016",
    "id": 745605016,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTYwNTAxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745605016/reactions"
    },
    "updated_at": "2020-12-15T22:36:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745605016",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I think the idea of a new operator to be used for a legacy ill‑defined interface idea is deeply misguided.\n\nIf we make a new operator, I don't think we need to give it a \"legacy\" parameter because one can use the older operator instead. I agree, that is not a good idea.",
    "created_at": "2020-12-15T22:32:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-745609232",
    "id": 745609232,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTYwOTIzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745609232/reactions"
    },
    "updated_at": "2020-12-15T22:32:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/745609232",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "NONE",
    "body": "@awakecoding: valid points, great thinking! \r\n\r\nI've always felt a bit itchy about the native commands. Explaining to newbies; \r\n\"Yes, PS is all verb-noun doctrine...unless...there's also this... no no, they're not aliases! Yes, they do look a bit like *nix style commands. Are you confused...? Well I am also sometimes...still....\"\r\n\r\n> My main concern is that we certainly don't want a third call operator in the future, so this means we have to get this one right, otherwise we'll face the same issue in a few years.\r\n\r\nThat's not really fair. In de PS 2/3 days, who would have known that PS is going to be ported to *NIX alike systems? So who knows were we are 5 years from now. Things just...change. \r\n\r\nYou cannot design 'for everything'...unless your answer is always 42 when you don't know :smile:\r\n\r\n\r\n\r\n",
    "created_at": "2021-01-09T07:17:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-757109424",
    "id": 757109424,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzEwOTQyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757109424/reactions"
    },
    "updated_at": "2021-01-09T07:26:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757109424",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/13161629?v=4",
      "events_url": "https://api.github.com/users/peppekerstens/events{/privacy}",
      "followers_url": "https://api.github.com/users/peppekerstens/followers",
      "following_url": "https://api.github.com/users/peppekerstens/following{/other_user}",
      "gists_url": "https://api.github.com/users/peppekerstens/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/peppekerstens",
      "id": 13161629,
      "login": "peppekerstens",
      "node_id": "MDQ6VXNlcjEzMTYxNjI5",
      "organizations_url": "https://api.github.com/users/peppekerstens/orgs",
      "received_events_url": "https://api.github.com/users/peppekerstens/received_events",
      "repos_url": "https://api.github.com/users/peppekerstens/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/peppekerstens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peppekerstens/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/peppekerstens"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "After reading a ton of the community suggestions, I truly wonder if this is the right path. Based off of the syntax that people are using I honestly think it should be treated how we use a new here-string or scriptblock.\n\nSo my suggestion would be a uniquely escaped scriptblock\n\nExample:\n& {sh <your multiline bash compliant code here> sh}\n\nSyntax may change a little bit,\nHowever I do like the following options\n!{ }!\n&!{ }!&\n{sh sh}\n\nOf course there are implications on parsing and adding a new ast tree visitor, I feel like this would give us the better forward facing design elements The PS community would be able to leverage for a variety of instances vs the current suggestions that all hint at the same thing but are limited in scope.\n\nThoughts?",
    "created_at": "2021-01-09T16:53:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-757334341",
    "id": 757334341,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzMzNDM0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757334341/reactions"
    },
    "updated_at": "2021-01-09T16:54:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757334341",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@romero126 You could re-read my comments above why this way is the navel - we don't need \"one more way\" to launch native apps.\r\n\r\n@romero126 @peppekerstens You could look #13428. If we injected PSNativeCmdlet in Engine we would be able to solve all the problems mentioned and get tremendous flexibility in development for many years.",
    "created_at": "2021-01-09T17:43:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-757341281",
    "id": 757341281,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzM0MTI4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757341281/reactions"
    },
    "updated_at": "2021-01-09T17:43:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757341281",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">  I truly wonder if this is the right path.\r\n\r\nIndeed.\r\n\r\nWe're talking about a cross-platform (in _syntax_ only) mechanism for passing a command-line _string_ to the _platform-native shell_.\r\n\r\nIn a nutshell: `cmd /c ...` on Windows and `sh -c '...'` on Unix.\r\n\r\nSuch a narrow use case does _not_ call for an operator, but for a _command_ - the [previously discussed `ins` (`Invoke-NativeShell`)](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939).\r\n\r\n> how we use a new here-string or scriptblock.\r\n\r\nIn fact using the _existing string literals_, such as - if needed - a here-string is the appropriate thing to do - both conceptually and syntactically - no need to invent _new_ syntax.\r\n\r\n After all, you're passing a _string_ to an _external program_, which then interprets it according to _its_ rules.\r\n\r\nUsing strings is also the right choice for being able to use _string interpolation_, so as to be able to embed _PowerShell variables and expressions_ in the command line being passed.\r\n\r\nThe above solves all conceptual problems that would arise from shoehorning a different shell's syntax into PowerShell's syntax without proper delimiters, via an operator, as proposed here, which would invite perennial confusion and headaches.\r\n\r\n---\r\n\r\nI do understand the desire to make this use case syntactically _easier_; the choices are:\r\n\r\n* In many cases, using regular string literals will be sufficient; e.g.,\r\n`ins '/bin/echo \"Nat \\\"King\\\" Cole\"'` (Unix) / `ins 'echo Nat \"King\" Cole | findstr \"g\\\" C\"'` (Windows);\r\nyou'll just need to know that `'` must be escaped as `''` in `'...'` strings, and pass-through `$` as `` `$ `` in `\"...\"` strings.\r\n\r\n* Here-strings obviate the need for escaping (in the verbatim variant) for quick paste-it-and-submit-it scenarios:\r\n  *  While they are syntactically cumbersome, [PSReadLine can help, as previously demonstrated](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939).\r\n  * Finally, introducing an _in-line_ here-string variant would help too, which would be a general improvement to the language; e.g., \r\n`ins @' /bin/echo \"Nat 'King' Cole\" '@` - see #13204\r\n\r\n\r\n",
    "created_at": "2021-01-09T17:54:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-757342756",
    "id": 757342756,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzM0Mjc1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757342756/reactions"
    },
    "updated_at": "2021-01-09T21:29:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/757342756",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Whatever decision is made about the operator, I think there should be a mode to enable globally (in my $profile for example), to make all the commands have this new operator that fixes the broken behavior implicitly included before them. This allows using PowerShell like Bash without the quoting issue.\r\n\r\nWith the new mode enabled, I should be able to do this as I can in Bash:\r\n```ps1\r\n❯ node -e 'console.log(\"good\")'\r\ngood\r\n\r\n❯ node -e \"console.log('good')\"\r\ngood\r\n\r\n❯ $str=\"good\"\r\n❯ node -e \"console.log('$str')\"\r\ngood\r\n```",
    "created_at": "2021-01-21T05:43:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-764394949",
    "id": 764394949,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDM5NDk0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/764394949/reactions"
    },
    "updated_at": "2021-01-21T05:45:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/764394949",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@aminya, what you're describing is an unrelated, general problem with how PowerShell passes arguments to external programs, discussed at length in https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284; the plan is to initially provide a fix in the form of an experimental feature (~~not available as of this writing; an initial attempt to implement it was abandoned (https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-709632395), we're waiting for a new one~~ _update_: see #14747 for the discussion and PR #14692 for the current PR).",
    "created_at": "2021-01-21T15:00:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-764703199",
    "id": 764703199,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDcwMzE5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/764703199/reactions"
    },
    "updated_at": "2021-03-28T20:44:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/764703199",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> @aminya, what you're describing is an unrelated, general problem with how PowerShell passes arguments to external programs, discussed at length in https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284; the plan is to initially provide a fix in the form of an experimental feature (not available as of this writing; an initial attempt to implement it was abandoned (https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-709632395), we're waiting for a new one).\r\n\r\nThanks. \r\n\r\nAlso, it would be good to remove the need for esc operator when we want to interpolate the flags. \r\n\r\nNotice the need for esc\r\n```ps1\r\n$someFlag=\"--some-flag\"\r\n\r\n$esc = '--%'\r\nscript/build --first-flag $esc $someFlag\r\n```\r\n\r\nIn bash this becomes\r\n```bash\r\nscript/build --first-flag $someFlag\r\n```",
    "created_at": "2021-01-22T03:36:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-765098532",
    "id": 765098532,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTA5ODUzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/765098532/reactions"
    },
    "updated_at": "2021-01-22T05:17:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/765098532",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@aminya, there's no reason to use `--%` in your example and, in fact, it actively _prevents_ interpolation (if the symbol is used _literally_ and/or via `@`-prefixed splatting; the behavior you're showing with `--%` contained in a _variable_ actually _does_ result in interpolation while still stripping the `--%` and is arguably a _bug_ - see #11608); this thread already contains a detailed discussion of `--%`, the [stop-parsing symbol](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Parsing) and its appropriate uses and limitations, starting [here](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653319079); independently, there _are_ [various problems with passing `-`-prefixed tokens as unnamed arguments to PowerShell commands and/or to external programs](https://github.com/PowerShell/PowerShell/issues?q=is%3Aissue+is%3Aopen+in%3Atitle+argument-passing).\r\n\r\nHowever, I suggest keeping this issue focused on the original intent: offering a convenient way to execute commands written for the platform-native shell.\r\n\r\n",
    "created_at": "2021-01-25T02:44:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-766503753",
    "id": 766503753,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjUwMzc1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/766503753/reactions"
    },
    "updated_at": "2021-01-25T03:03:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/766503753",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
