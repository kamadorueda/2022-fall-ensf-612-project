[
  {
    "author_association": "COLLABORATOR",
    "body": "This likely won't be possible.\r\n\r\nEven in C# this generates a compiler error, see [this SharpLab](https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwCwG5nJQDMmM6AwugN7Lp2YkBGA9swDboCyAFM4wFYBTAMYAXdMwCU6ALwA+CegCWAZ0xwiAHjn4kAXyA===).\r\n\r\nFor IEnumerable<T> specifically, you can just check `-is [System.Collections.IEnumerable]`-- `IEnumerable<T>` inherits from `IEnumerable`.",
    "created_at": "2021-04-10T20:03:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817195284",
    "id": 817195284,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzE5NTI4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817195284/reactions"
    },
    "updated_at": "2021-04-10T20:04:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817195284",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @vexx32. Yes, for ``IEnumerable`1`` use of the non-generic  `IEnumerable` instead  is a workaround, but it's not a general solution.\r\n\r\nThe problem is definitely solvable, albeit not with direct use of C# `is` / IL `isinst`:\r\n\r\n```powershell\r\nPS> [System.Collections.Generic.List[string]]::new().GetType().GetGenericTypeDefinition() -eq [System.Collections.Generic.List`1]\r\nTrue\r\n```\r\n\r\nThe question is whether it's worth it to automatically provide this functionality via the `-is` operator.\r\n\r\nIf not, we should emit a clear, specific error message.\r\n",
    "created_at": "2021-04-10T20:11:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817196217",
    "id": 817196217,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzE5NjIxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817196217/reactions"
    },
    "updated_at": "2021-04-10T21:18:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817196217",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think a clear error message is probably the way to go here.  A simple `Type.HasGenericParameters` check with a custom fail message.",
    "created_at": "2021-04-11T20:25:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817367338",
    "id": 817367338,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzM2NzMzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817367338/reactions"
    },
    "updated_at": "2021-04-11T20:25:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817367338",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @SeeminglyScience, that would definitely be an improvement.\r\n\r\nI don't feel strongly either way, but is your preference not to support this scenario more about how exotic it is, or are the performance concerns?",
    "created_at": "2021-04-11T20:33:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817368461",
    "id": 817368461,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzM2ODQ2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817368461/reactions"
    },
    "updated_at": "2021-04-11T20:33:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817368461",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "no error with these syntaxes :\r\n```powershell\r\n$Type=[System.Collections.Generic.IEnumerable`1]\r\n@(1, 2) -is $Type\r\n#False\r\n@(1, 2) -is 'System.Collections.Generic.IEnumerable`1'\r\n#False\r\n\r\n[System.Collections.Generic.List[Int]]$List=@(1..2)\r\n$List -is 'System.Collections.Generic.IEnumerable[int]'\r\n#True\r\n$List -is 'System.Collections.Generic.IEnumerable`1'\r\n#False\r\n```",
    "created_at": "2021-04-12T16:21:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817946104",
    "id": 817946104,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzk0NjEwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817946104/reactions"
    },
    "updated_at": "2021-04-12T16:21:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817946104",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4894452?v=4",
      "events_url": "https://api.github.com/users/LaurentDardenne/events{/privacy}",
      "followers_url": "https://api.github.com/users/LaurentDardenne/followers",
      "following_url": "https://api.github.com/users/LaurentDardenne/following{/other_user}",
      "gists_url": "https://api.github.com/users/LaurentDardenne/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/LaurentDardenne",
      "id": 4894452,
      "login": "LaurentDardenne",
      "node_id": "MDQ6VXNlcjQ4OTQ0NTI=",
      "organizations_url": "https://api.github.com/users/LaurentDardenne/orgs",
      "received_events_url": "https://api.github.com/users/LaurentDardenne/received_events",
      "repos_url": "https://api.github.com/users/LaurentDardenne/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/LaurentDardenne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LaurentDardenne/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/LaurentDardenne"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @LaurentDardenne: via an intermediate variable assignment or coercion from a string the error goes away - but the resulting behavior is arguably even more problematic than the outright error.\r\n\r\nSo we can either: \r\n\r\n* report an error in _both_ scenarios.\r\n* or support them both.\r\n\r\nAnd in order to make the right call, we need to understand (a) if this is a common enough use case and (b) if so, if there are implementation / performance concerns.\r\n",
    "created_at": "2021-04-12T16:31:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817953246",
    "id": 817953246,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzk1MzI0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817953246/reactions"
    },
    "updated_at": "2021-04-12T17:20:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817953246",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I don't feel strongly either way, but is your preference not to support this scenario more about how exotic it is, or are the performance concerns?\r\n\r\nI don't think it's useful in enough situations to justify the custom - not really true - behavior (i.e. `object[]` isn't actually `IEnumerable<T>` even though it is `IEnumerable<object>`).",
    "created_at": "2021-04-12T16:41:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-817960041",
    "id": 817960041,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzk2MDA0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817960041/reactions"
    },
    "updated_at": "2021-04-12T16:41:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817960041",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Well, it _is_ true, just at a higher level of abstraction: if something is an (interface) implementation of a closed (concrete, with generic type parameters bound) type, it is by definition also an implementation of the more abstract open type (with unbound generic type parameters), and that's indeed how interfaces are reported via a type-info object's `.GetInterface(s)()` methods:\r\n\r\n```powershell\r\nPS> ([object[]] (1..2)).GetType().GetInterface('IEnumerable`1').Name\r\nIEnumerable`1\r\n```\r\n\r\n\r\nAnd at least in the abstract (no pun intended) I can see it being useful.\r\n\r\nCase in point: it would be useful for allowing PowerShell to determine whether an instance is a generic dictionary, irrespective of its specific key and value types (though, obviously, PowerShell would solve that problem in C#), to decide whether it should be enumerated in the pipeline - see #15204.\r\nIn that issue, @iSazonov links to a [blog post](https://tmont.com/blargh/2011/3/determining-if-an-open-generic-type-isassignablefrom-a-type) that states, \"If you're asking why you might need to ever do something like this, you clearly haven't worked with enough Inversion of Control frameworks.\"\r\n\r\nGranted, those scenarios may be less interesting in PowerShell code.\r\n\r\n---\r\n\r\nIf we decide not to support it, it sounds like @LaurentDardenne's findings imply that a _runtime_ check is also called for, so that _all_ of the following calls result in the same error message:\r\n\r\n```powershell\r\n(1, 2) -is [System.Collections.Generic.IEnumerable`1]                # already fails, but obscurely \r\n(1, 2) -is 'System.Collections.Generic.IEnumerable`1'                # misleadingly reports $false\r\n(1, 2) -is ($var = [System.Collections.Generic.IEnumerable`1])       # misleadingly reports $false\r\n```\r\n\r\n",
    "created_at": "2021-04-12T18:18:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818024617",
    "id": 818024617,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODAyNDYxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818024617/reactions"
    },
    "updated_at": "2021-04-12T18:18:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818024617",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> that's indeed how interfaces are reported via a type-info object's `.GetInterface(s)()` methods:\r\n\r\nThe property `Type.Name` doesn't include generic parameters or arguments. `Type.FullName` will include them, and in this case show the constructed type.\r\n\r\n> Granted, those scenarios may be less interesting in PowerShell code.\r\n\r\nYeah, I know you were mainly replying to @iSazonov here, but I've definitely had use for it.  Never in PowerShell though, and exceedingly rarely outside of it as well.",
    "created_at": "2021-04-12T18:40:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818041274",
    "id": 818041274,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODA0MTI3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818041274/reactions"
    },
    "updated_at": "2021-04-12T18:43:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818041274",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> If you look at `FullName` you'll see it returns the constructed type.\r\n\r\nGood point, thanks for clearing that up. However, the point about it being true in an abstract, meaningful sense stands, as evidenced by the fact that you can _query_ by the abstract name (which you don't disagree with in principle, it sounds).\r\n\r\nSo, going with the report-an-error scenario:\r\n\r\n* Do you agree that _all_ of the command forms (type literal, string literal, variable) should result in the same error?\r\n* Given that the type-literal scenario is a _parsing_ error, whereas the other two would have to be _runtime_ errors, if I understand correctly, how would we handle this?\r\n",
    "created_at": "2021-04-12T18:49:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818047146",
    "id": 818047146,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODA0NzE0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818047146/reactions"
    },
    "updated_at": "2021-04-12T18:49:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818047146",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Good point, thanks for clearing that up. However, the point about it being true in an abstract, meaningful sense stands, as evidenced by the fact that you can _query_ by the abstract name (which you don't disagree with in principle, it sounds).\r\n\r\nYou can query by the type name which is the same no matter what generic args are or are not specified.\r\n\r\nFor the record I'm definitely not saying it's impossible to determine, or that an API can't be written to query it. I'm not really sure what exactly is implied to be proven if that API did happen to work that way.\r\n\r\n> * Do you agree that _all_ of the command forms (type literal, string literal, variable) should result in the same error?\r\n\r\nYeah, though it would be a breaking change. I don't have a strong opinion on if it's worth it.\r\n\r\n> * Given that the type-literal scenario is a _parsing_ error, whereas the other two would have to be _runtime_ errors, if I understand correctly, how would we handle this?\r\n\r\nIt looks like compile time to me, e.g. ```$sb = { $list -is [Collections.Generic.IEnumerable`1] }``` doesn't throw, but first invoke will before any statements are executed.\r\n\r\nIdeally all of the errors would be runtime, maybe with classes as an exception.",
    "created_at": "2021-04-12T19:20:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818070253",
    "id": 818070253,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODA3MDI1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818070253/reactions"
    },
    "updated_at": "2021-04-12T19:21:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818070253",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> You can query by the type name which is the same no matter what generic args are or are not specified.\r\n\r\nIndeed. Just to clarify the terminology, you can query for an interface by the name of its generic type _definition_ (which you can also call an _open_ generic type, though the two aren't strictly the same), i.e. a generic type whose type parameters haven't been bound yet, as opposed to one whose have, making it _constructed_ generic type (which, if the type arguments themselves also have all their generic type parameters bound, if applicable, makes it a _closed_ constructed generic type).\r\n\r\n<sup>Note: The above was updated to use more precise terms.</sup>\r\n\r\n> not saying it's impossible to determine, or that an API can't be written to query it.\r\n\r\nWe already know that it's possible:\r\n\r\nFor interfaces:\r\n\r\n```powershell\r\n$null -ne ([object[]] (1..2)).GetType().GetInterface('IEnumerable`1')\r\n```\r\n\r\nFor concrete types:\r\n\r\n```powershell\r\n([System.Collections.Generic.List[int]]::new()).GetType().GetGenericTypeDefinition() -eq [System.Collections.Generic.List`1]\r\n```\r\n\r\n---\r\n\r\nBut leaving that aside, I'd personally be happy with a consistently reported _error_.\r\n\r\nYou're right, it is technically a breaking change, although it sounds like a classic [bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) case to me:\r\nCurrently a string literal or variable as the RHS _always results in `$false`_ with an open generic type, making the current behavior useless.\r\n\r\n",
    "created_at": "2021-04-12T19:41:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818082397",
    "id": 818082397,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODA4MjM5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818082397/reactions"
    },
    "updated_at": "2021-04-14T18:25:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818082397",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As for when the error occurs:\r\n\r\nIt seems that I incorrectly inferred from the fact that a _script_-terminating error occurs that it happens at parse time, but the real problem is apparently just the former: it should be a _statement_-terminating error, right?\r\n\r\n```powershell\r\n' $list -is   [Collections.Generic.IEnumerable`1]; ''after'' ' > t1.ps1\r\n' 1/0; ''after'' ' > t2.ps1\r\n```\r\n\r\n```powershell\r\nPS> ./t1.ps1\r\nOperationStopped: Late bound operations cannot be performed on fields with types for which Type.ContainsGenericParameters is true.\r\n```\r\n\r\nvs.\r\n\r\n```powershell\r\nPS> ./t2.ps1\r\nRuntimeException: /Users/mklement/Desktop/pg/t2.ps1:1\r\nLine |\r\n   1 |   1/0; 'after'\r\n     |   ~~~\r\n     | Attempted to divide by zero.\r\n\r\nafter\r\n```\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-12T19:49:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818096730",
    "id": 818096730,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODA5NjczMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818096730/reactions"
    },
    "updated_at": "2021-04-12T19:52:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818096730",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Indeed. Just to clarify the [terminology](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generics-and-attributes), you can query for an interface by the name of its _open_ generic type, i.e. a generic type whose type parameters haven't been bound yet, as opposed to one whose have, making it a _closed_ (constructed) generic type.\r\n\r\nThe type name is the same whether it's an open or closed generic.\r\n\r\nI think the confusing part here is that in PowerShell, you need to include the airty specification to reference the open generic, but that's just a PowerShell thing.  The airty is pure compiler convention, both in the type definition and the omission of it when referencing the type, but it's always there in the metadata and surfaced in reflection.\r\n\r\n> > not saying it's impossible to determine, or that an API can't be written to query it.\r\n> \r\n> We already know that it's possible:\r\n\r\nI wasn't clear, but yeah that's what I was saying.\r\n\r\n> it should be a statement-terminating error, right?\r\n\r\nI'd follow whatever `'' -is [notarealtype]` does outside of classes.",
    "created_at": "2021-04-12T22:20:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818280801",
    "id": 818280801,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODI4MDgwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818280801/reactions"
    },
    "updated_at": "2021-04-12T22:20:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818280801",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> that's just a PowerShell thing. \r\n\r\nThe arity notation (e.g., ``IEnumerable`1``) is a language-agnostic _.NET API_ thing that PowerShell also (sensibly) happens to use - if it were PowerShell-specific, something like ``.GetInterface('IEnumerable`1')`` wouldn't work.\r\n\r\n> I'd follow whatever '' -is [notarealtype] does outside of classes.\r\n\r\nMakes sense, and your example indeed produces a _statement_-terminating error (unlike the current `` $foo -is [System.Collections.Generic.IEnumerable`1]`` behavior).\r\n\r\n(And, to recap: I wish that _statement_-terminating errors had never existed - see https://github.com/PowerShell/PowerShell/issues/14819#issuecomment-790637199)\r\n",
    "created_at": "2021-04-12T22:37:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818288181",
    "id": 818288181,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODI4ODE4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818288181/reactions"
    },
    "updated_at": "2021-04-12T22:37:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818288181",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> > that's just a PowerShell thing.\r\n> \r\n> The arity notation (e.g., `` IEnumerable`1 ``) is a language-agnostic _.NET API_ thing that PowerShell also (sensibly) happens to use - if it were PowerShell-specific, something like `` .GetInterface('IEnumerable`1') `` wouldn't work.\r\n\r\nYeah I'm aware. I was referring to it being required to reference an open generic.  Point being, it's always part of the type name",
    "created_at": "2021-04-13T01:51:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818372479",
    "id": 818372479,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODM3MjQ3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818372479/reactions"
    },
    "updated_at": "2021-04-13T01:51:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818372479",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm glad you're aware, @SeeminglyScience, but how you expressed that awareness (\"that's just a PowerShell thing\") was potentially misleading. My comment tried to clarify, so as to avoid any potential confusion.\r\n\r\n\r\n",
    "created_at": "2021-04-13T02:03:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818376539",
    "id": 818376539,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODM3NjUzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818376539/reactions"
    },
    "updated_at": "2021-04-13T02:03:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818376539",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me try to close that tangent by clarifying the relationship between [the .NET API's language-agnostic type-name notation](https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/specifying-fully-qualified-type-names) and the functionality that PowerShell _overlays_ on it:\r\n\r\n* PowerShell allows enclosing a verbatim type name in .NET notation in `[...]` to form a _type literal_ (representing a [`System.Reflection.TypeInfo`](https://docs.microsoft.com/en-US/dotnet/api/System.Reflection.TypeInfo) instance), such as ``[System.Collections.Generic.IEnumerable`1]``\r\n\r\n* When resolving types (both in type literals and in other contexts where type names are expected), PowerShell allows omitting the `System.` prefix from full type names and allows use of type-accelerator names, such as `regex` for `System.Text.RegularExpressions.Regex`; additionally, mere type names (without namespace qualification) may be specified for types in namespaces for which `using namespace` statements are in effect. Also, name resolution is (invariably) case-_insensitive_. The same applies to _nested_ type names referenced in the list of type arguments when referring to a closed generic type. \r\n\r\n* As an additional simplification, PowerShell allows omitting the explicit arity (e.g., `` `2 ``) when referring to a _constructed_ generic type (one with the type parameters instantiated with specific types), as PowerShell then _infers_ the arity from the number of type arguments.\r\n\r\n* To illustrate the above with an example: to get a reference to the closed [constructed] generic type that in C# you could refer to as `IDictionary<string, int>`:\r\n    * In .NET notation (for use as strings with `[Type]::GetType()`):\r\n        *  ``System.Collections.Generic.IDictionary`2[[System.String], [System.Int32]]`` or, with the optional `[...]` around the type arguments removed:\r\n        * ``System.Collections.Generic.IDictionary`2[System.String, System.Int32]``\r\n    * In simplified PowerShell type-literal notation:\r\n       * ``[Collections.Generic.IDictionary[string, int]]``  (`System.` omitted, explicit arity omitted, use of type accelerators as the type arguments)\r\n\r\n ",
    "created_at": "2021-04-13T03:06:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818397101",
    "id": 818397101,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODM5NzEwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818397101/reactions"
    },
    "updated_at": "2021-04-14T18:19:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818397101",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "(I just learned a lesson I should have learned before: don't trust the docs to tell the fully story. In short: the .NET API type-name notation _does_ support specifying _closed_ generic types (which, of course, I should have expected); seemingly, the only PowerShell overlay in this respect is that it makes specifying the arity _explicitly_ optional - I've updated the previous comment, and I've created a docs issue at https://github.com/dotnet/docs/issues/23794)",
    "created_at": "2021-04-13T07:21:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15197#issuecomment-818505551",
    "id": 818505551,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15197",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODUwNTU1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818505551/reactions"
    },
    "updated_at": "2021-04-14T18:34:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/818505551",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
