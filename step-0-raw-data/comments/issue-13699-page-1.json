[
  {
    "author_association": "COLLABORATOR",
    "body": "If you have it as a string, you can use `Invoke-Expression` since its just a hash literal.\r\n\r\nIf there were to be another cmdlet for it, I'd imagine it'd follow the CSV pattern and have a ConvertFrom/ConvertTo cmdlet for in-memory conversions.",
    "created_at": "2020-09-25T17:10:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699047003",
    "id": 699047003,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA0NzAwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699047003/reactions"
    },
    "updated_at": "2020-09-25T17:10:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699047003",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">If you have it as a string, you can use Invoke-Expression\r\n\r\nI thought the point of `Import-PowershellDataFile` is that it lets you import data in a safe way, without executing code in the file.\r\n\r\n(In other words, if what you suggest were an acceptable solution, then we would not need the `Import-PowershellDataFile` in the first place.)",
    "created_at": "2020-09-25T17:24:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699053646",
    "id": 699053646,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA1MzY0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699053646/reactions"
    },
    "updated_at": "2020-09-25T17:24:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699053646",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Aye, just mentioning something that works for some use cases for the time being. You can manually construct a script block and verify no commands are being used in it if you prefer as well, but I agree it would be better handled by a cmdlet.",
    "created_at": "2020-09-25T17:27:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699055299",
    "id": 699055299,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA1NTI5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699055299/reactions"
    },
    "updated_at": "2020-09-25T17:27:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699055299",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As an alternative to a new cmdlet, we could think about generalizing @JamesWTruher's idea proposed in the context of https://github.com/PowerShell/PowerShell/issues/4332#issuecomment-643486358: To allow targeting a variable via a provider path; e.g.:\r\n\r\n```powershell\r\n$dataFileContent = ... # read *.psd1 file into memory\r\n\r\nImport-PowerShellData -LiteralPath variable:dataFileContent\r\n```\r\n\r\nAll file-processing cmdlets could benefit from this, notably `Import-CliXml` / `Export-CliXml`, which would obviate the need to implement #3898 (separate `ConvertTo/From-CliXml` cmdlets).\r\n\r\nI've always felt that the current dichotomy - one cmdlet for in-memory operations, another for file operations - is clumsy, both in terms of UX and implementation.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-09-25T18:01:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699071979",
    "id": 699071979,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA3MTk3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699071979/reactions"
    },
    "updated_at": "2020-09-25T18:02:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699071979",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Hmm. If the cmdlet is using provider paths correctly I would imagine they should already support that. Is there a specific reason they don't?",
    "created_at": "2020-09-25T18:28:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699085095",
    "id": 699085095,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA4NTA5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699085095/reactions"
    },
    "updated_at": "2020-09-25T18:28:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699085095",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@vexx32 iirc that command just does something like this:\r\n\r\n```csharp\r\nParser.ParseFile(path, out _, out _).Find(ast => ast is HashtableAst, false).SafeGetValue();\r\n```\r\n\r\nSo it's quite a bit cheaper to use that directly rather than calling the content provider API's.  Side note, you can do something similar to that but with `ParseInput` as a workaround.",
    "created_at": "2020-09-25T18:40:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699090268",
    "id": 699090268,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA5MDI2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699090268/reactions"
    },
    "updated_at": "2020-09-25T18:40:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699090268",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "While `Get-Content` supports it, here's how the file-processing `Import-*` cmdlets fail: all but `Import-Alias` do the same thing as `Import-PowerShellDataFile`, as presumably explained by @SeeminglyScience:\r\n\r\n```powershell\r\n$foo = 'hi there'\r\ngcm import-* | where name -notmatch 'pssession|packageprovider|module|localizeddata' | % {\r\n  $null = try { & $_.Name -LiteralPath variable:foo -ea SilentlyContinue -ev e } catch { $e = $_ }\r\n  [pscustomobject] @{\r\n    Cmdlet = $_.Name\r\n    Error = \"$e\"\r\n  }\r\n}\r\n```\r\n\r\n```none\r\n\r\nCmdlet                    Error\r\n------                    -----\r\nImport-Alias              Cannot import the alias because the specified path 'variable:foo' referred to a 'Microsoft.PowerShell.Core\\Variable' provider path. Change the value of t…\r\nImport-Clixml             Cannot open file because the current provider (Microsoft.PowerShell.Core\\Variable) cannot open a file.\r\nImport-Csv                Cannot open file because the current provider (Microsoft.PowerShell.Core\\Variable) cannot open a file.\r\nImport-PowerShellDataFile Cannot open file because the current provider (Microsoft.PowerShell.Core\\Variable) cannot open a file.\r\n```",
    "created_at": "2020-09-25T18:47:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699093507",
    "id": 699093507,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTA5MzUwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699093507/reactions"
    },
    "updated_at": "2020-09-25T18:47:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699093507",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah looks like they explicitly check for other providers and prevent them from being used.\r\n\r\nIMO they should just... not, really. 😂 \r\n\r\n`New-WordCloud` from my PSWordCloud module allows this kind of functionality (writing to arbitrary PSProviders). The only real issue I ran into was that not all providers (the variable provider is one of these) support the `Content.Clear()` operation, so you do have to catch that and (probably) swap it for an `Item.Remove()` operation instead (if the provider supports that) if you want to be able to do `Set-Content` style things which clear data before writing.",
    "created_at": "2020-09-25T19:13:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699106571",
    "id": 699106571,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTEwNjU3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699106571/reactions"
    },
    "updated_at": "2020-09-25T19:16:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699106571",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Yeah looks like they explicitly check for other providers and prevent them from being used.\r\n> \r\n> IMO they should just... not, really. 😂\r\n\r\nI'd be willing to bet none of these commands are written in a way that make this that simple. Nor should they be really, the content API's are super slow and allocate way too much.  It would be nice to have a fallback of sorts though:\r\n\r\n```csharp\r\n// sort of psuedo code that doesn't account for a lot of things\r\npublic static string ReadProviderItemAsString(this PSCmdlet cmdlet, string path)\r\n{\r\n    string providerPath = cmdlet.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\r\n        path,\r\n        out ProviderInfo provider,\r\n        out _);\r\n\r\n    if (provider.Name is FileSystemProvider.ProviderName)\r\n    {\r\n        return File.ReadAllText(providerPath);\r\n    }\r\n\r\n    using IContentReader reader = cmdlet.SessionState.InvokeProvider.Content.GetReader(\r\n        new[] { path },\r\n        force: true,\r\n        literalPath: true)[0];\r\n\r\n    var text = new StringBuilder();\r\n    bool first = true;\r\n    for (IList items = reader.Read(1); items is { Count: > 0 }; items = reader.Read(1))\r\n    {\r\n        foreach (object item in items)\r\n        {\r\n            if (first)\r\n            {\r\n                first = false;\r\n            }\r\n            else\r\n            {\r\n                text.AppendLine();\r\n            }\r\n\r\n            if (item is null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            text.Append(item);\r\n        }\r\n    }\r\n\r\n    return text.ToString();\r\n}\r\n```\r\n\r\nThat said, there are theoretically providers that don't necessarily deal with string content.  So that might end up being a bunch of default `Object.ToString()` calls.\r\n\r\nThat also doesn't account for commands whose implementation might be able to work directly with a `FileStream`, or might call a native API that takes a file system path.",
    "created_at": "2020-09-25T19:32:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699115134",
    "id": 699115134,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTExNTEzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699115134/reactions"
    },
    "updated_at": "2020-09-25T19:33:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699115134",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Sounds like we need a provider `Content` API that doesn't just unilaterally assume strings, but that's a different conversation. ^^",
    "created_at": "2020-09-25T19:36:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13699#issuecomment-699116826",
    "id": 699116826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13699",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTExNjgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699116826/reactions"
    },
    "updated_at": "2020-09-25T19:36:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/699116826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
