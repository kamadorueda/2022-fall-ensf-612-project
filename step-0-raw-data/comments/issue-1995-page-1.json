[
  {
    "author_association": "MEMBER",
    "body": "Why do you think that `\"\\\"a\\\"\"` the expected behavior? My understanding of PowerShell escapes says that the actual behavior is the correct and expected behavior. `\"`\"a`\"\"` is a pair of quotes surrounding an escaped pair of quotes surrounding an `a`, so PowerShell interprets the outer unescaped pair as \"this is a string argument\" and so drops them, then interprets the escaped pair as escaped quotes and so keeps them, leaving you with `\"a\"`. At no point was a `\\` added to the string.\n\nThe fact that Bash uses `\\` as an escape character is irrelevant. In PowerShell, the escape character is a backtick. See PowerShell [escape characters](http://ss64.com/ps/syntax-esc.html).\n\nIf you want to pass literally `\"\\\"a\\\"\"`, I believe you would use:\n\n``` powershell\n> echo `\"\\`\"a\\`\"`\"\n\"\\\"a\\\"\"\n```\n",
    "created_at": "2016-08-31T20:27:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243890310",
    "id": 243890310,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5MDMxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243890310/reactions"
    },
    "updated_at": "2016-08-31T20:27:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243890310",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2226434?v=4",
      "events_url": "https://api.github.com/users/andschwa/events{/privacy}",
      "followers_url": "https://api.github.com/users/andschwa/followers",
      "following_url": "https://api.github.com/users/andschwa/following{/other_user}",
      "gists_url": "https://api.github.com/users/andschwa/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/andschwa",
      "id": 2226434,
      "login": "andschwa",
      "node_id": "MDQ6VXNlcjIyMjY0MzQ=",
      "organizations_url": "https://api.github.com/users/andschwa/orgs",
      "received_events_url": "https://api.github.com/users/andschwa/received_events",
      "repos_url": "https://api.github.com/users/andschwa/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/andschwa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andschwa/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/andschwa"
    }
  },
  {
    "author_association": "NONE",
    "body": "@andschwa \nYes, escapes works fine for internal cmdlets, but things get weird when communicate with **native binaries**, especially on Windows.\nWhen running `native.exe \"`\"a`\"\"`, the ARGV[1] should be \n\n```\n\"a\"\n```\n\n(three characters)\n\ninstead of\n\n```\na\n```\n\n(one character).\n",
    "created_at": "2016-08-31T20:30:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243891270",
    "id": 243891270,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5MTI3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243891270/reactions"
    },
    "updated_at": "2016-08-31T20:30:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243891270",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "NONE",
    "body": "Currently to make `native.exe` correctly receive an ARGV with two quotes and an `a` character, you have to use this weird call:\n\n``` powershell\nnative.exe \"\\`\"a\\`\"\"\n```\n",
    "created_at": "2016-08-31T20:33:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243892110",
    "id": 243892110,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5MjExMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 8,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 12,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243892110/reactions"
    },
    "updated_at": "2016-08-31T20:33:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243892110",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Ah, I see. Re-opening.\n",
    "created_at": "2016-08-31T20:41:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243894332",
    "id": 243894332,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5NDMzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243894332/reactions"
    },
    "updated_at": "2016-08-31T20:41:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243894332",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2226434?v=4",
      "events_url": "https://api.github.com/users/andschwa/events{/privacy}",
      "followers_url": "https://api.github.com/users/andschwa/followers",
      "following_url": "https://api.github.com/users/andschwa/following{/other_user}",
      "gists_url": "https://api.github.com/users/andschwa/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/andschwa",
      "id": 2226434,
      "login": "andschwa",
      "node_id": "MDQ6VXNlcjIyMjY0MzQ=",
      "organizations_url": "https://api.github.com/users/andschwa/orgs",
      "received_events_url": "https://api.github.com/users/andschwa/received_events",
      "repos_url": "https://api.github.com/users/andschwa/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/andschwa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andschwa/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/andschwa"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Out of a strong curiosity, what happens if you try a build using #1639?\n",
    "created_at": "2016-08-31T20:42:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243894649",
    "id": 243894649,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5NDY0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243894649/reactions"
    },
    "updated_at": "2016-08-31T20:42:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243894649",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2226434?v=4",
      "events_url": "https://api.github.com/users/andschwa/events{/privacy}",
      "followers_url": "https://api.github.com/users/andschwa/followers",
      "following_url": "https://api.github.com/users/andschwa/following{/other_user}",
      "gists_url": "https://api.github.com/users/andschwa/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/andschwa",
      "id": 2226434,
      "login": "andschwa",
      "node_id": "MDQ6VXNlcjIyMjY0MzQ=",
      "organizations_url": "https://api.github.com/users/andschwa/orgs",
      "received_events_url": "https://api.github.com/users/andschwa/received_events",
      "repos_url": "https://api.github.com/users/andschwa/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/andschwa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andschwa/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/andschwa"
    }
  },
  {
    "author_association": "NONE",
    "body": "@andschwa The same. You HAVE to double-esacpe to satisify both PowerShell and `CommandLineToArgvW`. This line:\n\n``` powershell\nnative.exe \"`\"a`\"\"\n```\n\nresults a StartProcess equalivent to cmd\n\n``` bat\nnative.exe \"\"a\"\"\n```\n",
    "created_at": "2016-08-31T20:47:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-243896033",
    "id": 243896033,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzg5NjAzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243896033/reactions"
    },
    "updated_at": "2016-08-31T20:47:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243896033",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@be5invis @douglaswth is this resolved via https://github.com/PowerShell/PowerShell/pull/2182?\n",
    "created_at": "2016-09-19T22:36:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248148856",
    "id": 248148856,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODE0ODg1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248148856/reactions"
    },
    "updated_at": "2016-09-19T22:36:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248148856",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2226434?v=4",
      "events_url": "https://api.github.com/users/andschwa/events{/privacy}",
      "followers_url": "https://api.github.com/users/andschwa/followers",
      "following_url": "https://api.github.com/users/andschwa/following{/other_user}",
      "gists_url": "https://api.github.com/users/andschwa/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/andschwa",
      "id": 2226434,
      "login": "andschwa",
      "node_id": "MDQ6VXNlcjIyMjY0MzQ=",
      "organizations_url": "https://api.github.com/users/andschwa/orgs",
      "received_events_url": "https://api.github.com/users/andschwa/received_events",
      "repos_url": "https://api.github.com/users/andschwa/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/andschwa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andschwa/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/andschwa"
    }
  },
  {
    "author_association": "NONE",
    "body": "No, We still need to add a backslash before a backtick-escaped double quote? This does not solve the double-escaping problem. (That is, we have to escape a double quote for both PowerShell and CommandLineToArgvW.)\n",
    "created_at": "2016-09-20T02:37:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248185966",
    "id": 248185966,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODE4NTk2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248185966/reactions"
    },
    "updated_at": "2016-09-20T02:37:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248185966",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Since  `\"`\"a`\"\"` is equal to `'\"a\"'`, do you suggest that `native.exe '\"a\"'` should result in `\"\\\"a\\\"\"`?\n",
    "created_at": "2016-09-20T05:17:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248203775",
    "id": 248203775,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODIwMzc3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248203775/reactions"
    },
    "updated_at": "2016-09-20T05:17:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248203775",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "This seems like a feature request that if implemented could break a large number of already existing PowerShell scripts that use the required double escaping, so extreme care would be required with any solution.\n",
    "created_at": "2016-09-20T07:01:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248219722",
    "id": 248219722,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODIxOTcyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248219722/reactions"
    },
    "updated_at": "2016-09-20T07:01:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248219722",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77890?v=4",
      "events_url": "https://api.github.com/users/douglaswth/events{/privacy}",
      "followers_url": "https://api.github.com/users/douglaswth/followers",
      "following_url": "https://api.github.com/users/douglaswth/following{/other_user}",
      "gists_url": "https://api.github.com/users/douglaswth/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/douglaswth",
      "id": 77890,
      "login": "douglaswth",
      "node_id": "MDQ6VXNlcjc3ODkw",
      "organizations_url": "https://api.github.com/users/douglaswth/orgs",
      "received_events_url": "https://api.github.com/users/douglaswth/received_events",
      "repos_url": "https://api.github.com/users/douglaswth/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/douglaswth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/douglaswth/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/douglaswth"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vors Yes.\n@douglaswth The double-escaping is really silly: why do we need the “inner” escapes made in the DOS era?\n",
    "created_at": "2016-09-20T14:26:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248317406",
    "id": 248317406,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODMxNzQwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248317406/reactions"
    },
    "updated_at": "2016-09-20T14:26:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248317406",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vors @douglaswth \nThis is a the C code used to show GetCommandLineW and CommandLineToArgvW results:\n\n``` c\n#include <stdio.h>\n#include <wchar.h>\n#include <Windows.h>\n\nint main() {\n  LPWSTR cmdline = GetCommandLineW();\n  wprintf(L\"Command Line : %s\\n\", cmdline);\n\n  int nArgs;\n  LPWSTR *szArglist = CommandLineToArgvW(cmdline, &nArgs);\n  if (NULL == szArglist) {\n    wprintf(L\"CommandLineToArgvW failed\\n\");\n    return 0;\n  } else {\n    for (int i = 0; i < nArgs; i++) {\n      wprintf(L\"argv[%d]: %s\\n\", i, szArglist[i]);\n    }\n  }\n  LocalFree(szArglist);\n}\n```\n",
    "created_at": "2016-09-20T14:41:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248322094",
    "id": 248322094,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODMyMjA5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248322094/reactions"
    },
    "updated_at": "2016-09-20T14:42:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248322094",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "NONE",
    "body": "Here is the result\n\n```\n$ ./a \"a b\"\nCommand Line : \"Z:\\playground\\ps-cmdline\\a.exe\" \"a b\"\nargv[0]: Z:\\playground\\ps-cmdline\\a.exe\nargv[1]: a b\n\n$ ./a 'a b'\nCommand Line : \"Z:\\playground\\ps-cmdline\\a.exe\" \"a b\"\nargv[0]: Z:\\playground\\ps-cmdline\\a.exe\nargv[1]: a b\n\n$ ./a 'a\"b'\nCommand Line : \"Z:\\playground\\ps-cmdline\\a.exe\" a\"b\nargv[0]: Z:\\playground\\ps-cmdline\\a.exe\nargv[1]: ab\n\n$ ./a 'a\"b\"c'\nCommand Line : \"Z:\\playground\\ps-cmdline\\a.exe\" a\"b\"c\nargv[0]: Z:\\playground\\ps-cmdline\\a.exe\nargv[1]: abc\n\n$ ./a 'a\\\"b\\\"c'\nCommand Line : \"Z:\\playground\\ps-cmdline\\a.exe\" a\\\"b\\\"c\nargv[0]: Z:\\playground\\ps-cmdline\\a.exe\nargv[1]: a\"b\"c\n```\n",
    "created_at": "2016-09-20T14:43:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248322636",
    "id": 248322636,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODMyMjYzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248322636/reactions"
    },
    "updated_at": "2016-09-20T14:43:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248322636",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@be5invis I do not disagree with you about the double escaping being annoying, but I am merely saying that a change to this would need to be backward compatible with what existing PowerShell scripts use.\n",
    "created_at": "2016-09-20T17:58:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248381045",
    "id": 248381045,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODM4MTA0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248381045/reactions"
    },
    "updated_at": "2016-09-20T17:58:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248381045",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77890?v=4",
      "events_url": "https://api.github.com/users/douglaswth/events{/privacy}",
      "followers_url": "https://api.github.com/users/douglaswth/followers",
      "following_url": "https://api.github.com/users/douglaswth/following{/other_user}",
      "gists_url": "https://api.github.com/users/douglaswth/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/douglaswth",
      "id": 77890,
      "login": "douglaswth",
      "node_id": "MDQ6VXNlcjc3ODkw",
      "organizations_url": "https://api.github.com/users/douglaswth/orgs",
      "received_events_url": "https://api.github.com/users/douglaswth/received_events",
      "repos_url": "https://api.github.com/users/douglaswth/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/douglaswth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/douglaswth/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/douglaswth"
    }
  },
  {
    "author_association": "NONE",
    "body": "How many are them? I do not think there are script writers know about such double-quoting. It is a bug, not feature, and it is not documented.\n\n???? iPhone\n\n? 2016?9?21??01:58?Douglas Thrift <notifications@github.com<mailto:notifications@github.com>> ???\n\n@be5invishttps://github.com/be5invis I do not disagree with you about the double escaping being annoying, but I am merely saying that a change to this would need to be backward compatible with what existing PowerShell scripts use.\n\n## \n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248381045, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAOp20f_W0mTl2YiJKi_flQBJUKaeAnLks5qsB7ZgaJpZM4JpVin.\n",
    "created_at": "2016-09-20T18:02:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248382202",
    "id": 248382202,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODM4MjIwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248382202/reactions"
    },
    "updated_at": "2016-09-20T18:02:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248382202",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "PowerShell has been around for 9 years so there are very likely a good number of scripts out there. I found plenty of information about the need for double escaping from StackOverflow and other sources when I ran into the need for it so I don't know if I agree with your claims about nobody knowing about the need for it or that it is not documented.\n",
    "created_at": "2016-09-20T18:38:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248392691",
    "id": 248392691,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODM5MjY5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248392691/reactions"
    },
    "updated_at": "2016-09-20T18:38:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248392691",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77890?v=4",
      "events_url": "https://api.github.com/users/douglaswth/events{/privacy}",
      "followers_url": "https://api.github.com/users/douglaswth/followers",
      "following_url": "https://api.github.com/users/douglaswth/following{/other_user}",
      "gists_url": "https://api.github.com/users/douglaswth/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/douglaswth",
      "id": 77890,
      "login": "douglaswth",
      "node_id": "MDQ6VXNlcjc3ODkw",
      "organizations_url": "https://api.github.com/users/douglaswth/orgs",
      "received_events_url": "https://api.github.com/users/douglaswth/received_events",
      "repos_url": "https://api.github.com/users/douglaswth/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/douglaswth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/douglaswth/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/douglaswth"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "For the additional context, I'd like to talk a little bit about the implementation.\nPowerShell calls .NET API to spawn a new process, which calls a Win32 API (on windows).\n\nHere, PS creates StartProcessInfo that is uses\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1063\n\nThe provided API takes a single string for arguments and then it's re-parsed into an array of arguments to do the execution.\nThe rules of this re-parsing are not controlled by PowerShell. It's a Win32 API (and fortunately, it consistent in dotnet core and unix rules).\nParticularly, this contract describes the `\\` and `\"` behavior.\n\nAlthough, PowerShell may try to be smarter and provide a nicer experience, the current behavior is consistent with cmd and bash: you can copy native executable line from them and use it in powershell and it works the same.\n\n@be5invis If you know a way to enhance the expirience in non-breaking way, please line up the details. For the breaking changes, we would need to use RFC process, as described in https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md\n",
    "created_at": "2016-09-20T19:00:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-248399154",
    "id": 248399154,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODM5OTE1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248399154/reactions"
    },
    "updated_at": "2016-09-20T19:00:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/248399154",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "NONE",
    "body": "This applies to Windows, but when running commands on Linux or Unix, its strange that one needs to double escape quotes.\n\nOn Linux processes don't have a single commandline but instead an array of arguments.\nTherefore arguments in powershell should be the same as those, that are passed to the executable, instead of merging all arguments and then resplitting.\n\nEven on windows, the current behavior is inconsistent:\nIf an argument contains no spaces, it is passed unchanged.\nIf an argument contains spaces, if it will be surrounded by quotes, to keep it together through  `CommandLineToArgvW` call. => Argument is changed to meet `CommandLineToArgvW` requirement.\nBut if argument contains quotes, those are not escaped. => Argument is not changed, although `CommandLineToArgvW` requires this.\n\nI think arguments should either never be changed, or always be changed to meet `CommandLineToArgvW` requirements, but not in half of the cases.\n\nRegarding breaking-the-contract:\nAs I couldn't find any official documentation about double escaping, I'd consider this as category \"Bucket 2: Reasonable Grey Area\", so there are chances to change this, or am I wrong?\n",
    "created_at": "2016-10-03T14:13:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251116447",
    "id": 251116447,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTExNjQ0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 9,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 9,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251116447/reactions"
    },
    "updated_at": "2016-10-03T14:24:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251116447",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vors This is extremely annoying if your argument is an variable or something else: you have to manually escape it before sending it into a native app.\nAn \"auto-escaping\" operator may help. like `^\"a`\"`\" -> \"a\\`\"\"`\n",
    "created_at": "2016-10-03T14:30:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251121015",
    "id": 251121015,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTEyMTAxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251121015/reactions"
    },
    "updated_at": "2016-10-03T14:31:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251121015",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think @TSlivede put it right with the inconsistency in the behavior.\n\n> I think arguments should either never be changed, or always be changed to meet CommandLineToArgvW requirements, but not in half of the cases.\n\nI'm not sure about the bucket, but even the \"clearly breaking change\" bucket could potentially be changed. We want to make PowerShell better, but backward compatibility is one of our highest priorities. That's why it's not so easy. \nWe have a great community and I'm confident that we can find consensus.\n\nWould anybody want to start an RFC process?\n",
    "created_at": "2016-10-03T16:27:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251154197",
    "id": 251154197,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE1NDE5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251154197/reactions"
    },
    "updated_at": "2016-10-03T16:27:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251154197",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "It would be worth investigating the use of P/Invoke instead of .Net to start a process if that avoids the need for PowerShell to add quotes to arguments.\n",
    "created_at": "2016-10-03T17:56:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251177243",
    "id": 251177243,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE3NzI0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251177243/reactions"
    },
    "updated_at": "2016-10-03T17:56:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251177243",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@lzybkr as far as I can tell, PInvoke would not help.\nAnd this is where unix and windows APIs are different:\n\nhttps://msdn.microsoft.com/en-us/library/20y988d2.aspx (treats spaces as separators)\nhttps://linux.die.net/man/3/execvp (doesn't treat spaces as separators)\n",
    "created_at": "2016-10-03T17:58:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251177910",
    "id": 251177910,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE3NzkxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251177910/reactions"
    },
    "updated_at": "2016-10-03T17:58:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251177910",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I wasn't suggesting changing the Windows implementation.\n",
    "created_at": "2016-10-03T18:10:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251180890",
    "id": 251180890,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE4MDg5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251180890/reactions"
    },
    "updated_at": "2016-10-03T18:10:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251180890",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'd try to avoid having platform-specific behavior here. It will hurt scripts portability.\nI think we can consider changing windows behavior in a non-breaking way. I.e. with preference variable. And then we can have different defaults or something like that.\n",
    "created_at": "2016-10-03T18:14:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251181992",
    "id": 251181992,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE4MTk5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251181992/reactions"
    },
    "updated_at": "2016-10-03T18:14:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251181992",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "We're talking about calling external commands - somewhat platform dependent anyway.\n",
    "created_at": "2016-10-03T18:31:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251186833",
    "id": 251186833,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE4NjgzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251186833/reactions"
    },
    "updated_at": "2016-10-03T18:31:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251186833",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "Well, i think  it can't be really platform independent, as Windows and Linux just have different ways to call executables. In Linux a process gets an argument array while on Windows a process just gets a single commandline (one string).\n(compare the more basic\n`CreateProcess` -> commandline (https://msdn.microsoft.com/library/windows/desktop/ms682425)\nand\n`execve` -> command array (https://linux.die.net/man/2/execve)\n)\n\nAs Powershell adds those quotes when arguments have spaces in them, it seems to me, that powershell tries*\\* to pass the arguments in a way, that `CommandLineToArgvW` splits the commandline to the arguments that were originally given in powershell. (This way a typical c-program gets the same arguments in its argv array as a powershell function gets as $args.)\nThis would perfectly match to just passing the arguments to the linux systemcall (as suggested via p/invoke).\n\n*\\* (and fails, as it doesn't escape quotes)\n\nPS: What is necessary to start an RFC process? \n",
    "created_at": "2016-10-03T18:36:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251188038",
    "id": 251188038,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE4ODAzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251188038/reactions"
    },
    "updated_at": "2016-10-03T18:50:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251188038",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Exactly - PowerShell tries to make sure `CommandLineToArgvW` produces the correct command and _after_ reparsing what PowerShell has already parsed.\n\nThis has been a longstanding pain point on Windows, I see on reason to bring that difficulty over to *nix.\n\nTo me, this feels like an implementation detail, not really needing an RFC. If we changed behavior in Windows PowerShell, it might warrant an RFC, but even then, the right change might be considered a (possibly risky) bug fix.\n",
    "created_at": "2016-10-03T18:51:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251192254",
    "id": 251192254,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE5MjI1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251192254/reactions"
    },
    "updated_at": "2016-10-03T18:51:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251192254",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "Yes, I also think, that changing it on Linux to use a direct system call would make everyone feel more happy.\n\nI still think it should also be changed on windows,\n(Maybe by adding a preference variable for those who don't want to change their scripts)\nbecause it's just wrong now - it is a bug. If this was corrected, a direct syscall on linux wouldn't even be necessary, because any argument would reach the next process unchanged. \n\nBut as there are executables, that split the commandline in a way, incompatible to `CommandLineToArgvW`, I like @be5invis's idea of an operator for arguments - but I wouldn't create an auto-escape operator (should be default for all arguments), but instead add an operator to not escape an argument (add no quotes, don't escape anything).\n",
    "created_at": "2016-10-03T19:04:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-251195744",
    "id": 251195744,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE5NTc0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251195744/reactions"
    },
    "updated_at": "2016-10-03T19:14:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/251195744",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This issue just came up for us today when someone tried the following command in PowerShell and was dissing PowerShell when it didn't work but CMD did:\r\n```\r\nwmic useraccount where name='username' get sid\r\n```\r\nFrom PSCX echoargs, wmic.exe sees this:\r\n\r\n```\r\n94> echoargs wmic useraccount where name='tso_bldadm' get sid\r\nArg 0 is <wmic>\r\nArg 1 is <useraccount>\r\nArg 2 is <where>\r\nArg 3 is <name=tso_bldadm>\r\nArg 4 is <get>\r\nArg 5 is <sid>\r\n\r\nCommand line:\r\n\"C:\\Users\\hillr\\Documents\\WindowsPowerShell\\Modules\\Pscx\\3.2.2\\Apps\\EchoArgs.exe\" wmic useraccount where name=tso_bldadm get sid\r\n```\r\n\r\nSo what API does CMD.exe use to invoke the process / form the command line?  For that matter, what does --% do to make this command work?\r\n",
    "created_at": "2016-11-22T23:58:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-262402031",
    "id": 262402031,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjQwMjAzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/262402031/reactions"
    },
    "updated_at": "2016-11-23T00:16:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/262402031",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "@rkeithhill `CreateProcessW`. direct call. really.",
    "created_at": "2016-11-23T00:04:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-262403048",
    "id": 262403048,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjQwMzA0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/262403048/reactions"
    },
    "updated_at": "2016-11-23T00:04:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/262403048",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "NONE",
    "body": "Why is Powershell behaving differently in these two situations?  Specifically, it is inconsistently wrapping args containing spaces in double-quotes.\r\n\r\n```powershell\r\n# Desired argv[1] is 4 characters: A, space, double-quote, B\r\n$ .\\echoargs.exe 'A \\\"B'\r\n<\"C:\\test\\echoargs.exe\" \"A \\\"B\">\r\n<A \"B>\r\n# Correct!\r\n\r\n# Desired argv value is 4 characters: A, double-quote, space, B\r\n$ .\\echoargs.exe 'A\\\" B'\r\n<\"C:\\test\\echoargs.exe\" A\\\" B>\r\n<A\"> <B>\r\n# Wrong...\r\n```\r\n\r\nThere seems to be no rhyme or reason.  In the first situation, it wraps my arg with double-quotes, but in the second situation it doesn't.  I need to know exactly when it *will* and *won't* wrap in double-quotes so that I can manually wrap (or not) in my script.\r\n\r\n.\\echoargs.exe is created by compiling the following with `cl echoargs.c`\r\n```\r\n// echoargs.c\r\n#include <windows.h>\r\n#include <stdio.h>\r\nint wmain(int argc, WCHAR** argv) {\r\n    wprintf(L\"<%ls>\\n\", GetCommandLineW());\r\n    for(int i = 1; i < argc; i++) {\r\n        wprintf(L\">%s< \", argv[i]);\r\n    }\r\n    wprintf(L\"\\n\");\r\n}\r\n```\r\n\r\nEDIT: Here's my $PSVersionTable:\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.296\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.296\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
    "created_at": "2017-05-22T16:08:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303145898",
    "id": 303145898,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzE0NTg5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303145898/reactions"
    },
    "updated_at": "2017-05-22T16:09:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303145898",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "NONE",
    "body": "The behaviour regarding quotes changed multiple times, therefore I'd suggest to use something like this:\r\n\r\n<details><summary>Edit: Updated form below</summary>\r\nOld version:\r\n\r\n```\r\n# call helper\r\n\r\nfunction Run-Native($command) {\r\n    $env:commandlineargumentstring=($args | %{'\"'+ ($_ -replace '(\\\\*)\"','$1$1\\\"' -replace '(\\\\*)$','$1$1') + '\"'}) -join ' ';\r\n    & $command --% %commandlineargumentstring%\r\n}\r\n\r\n# some test cases\r\n\r\nRun-Native .\\echoargs.exe 'A \"B' 'A\" B'\r\nRun-Native .\\echoargs.exe 'A \"B'\r\nRun-Native .\\echoargs.exe 'A\" B'\r\nRun-Native .\\echoargs.exe 'A\\\" B\\\\\" \\'\r\n```\r\n\r\nOutput:\r\n```\r\n<\"C:\\test\\echoargs.exe\"  \"A \\\"B\" \"A\\\" B\">\r\n<A \"B> <A\" B>\r\n\r\n<\"C:\\test\\echoargs.exe\"  \"A \\\"B\">\r\n<A \"B>\r\n\r\n<\"C:\\test\\echoargs.exe\"  \"A\\\" B\">\r\n<A\" B>\r\n\r\n<\"C:\\test\\echoargs.exe\"  \"A\\\\\\\" B\\\\\\\\\\\" \\\\\">\r\n<A\\\" B\\\\\" \\>\r\n```\r\nThe first `-replace` doubles backslashes in front of quotes and adds one additional backslash, to escape the qoute.\r\nThe second `-replace` doubles backslashes at the end of the argument, such that the closing quote is not escaped.\r\n\r\n</details>\r\n\r\nThis uses `--%` (PS v3 and above), which is AFAIK the only reliable way to pass quotes to native executables.\r\n\r\n---\r\n\r\n### Edit:\r\n\r\nUpdated version of `Run-Native`, now called `Invoke-NativeCommand` (as [suggested](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-333384152))\r\n\r\n```powershell\r\nfunction Invoke-NativeCommand() {\r\n    $command, [string[]] $argsForExe = $args\r\n    if($argsForExe.Length -eq 0){\r\n        & $command\r\n    } else {\r\n        $env:commandlineargumentstring=($argsForExe | %{\r\n            if($_ -match '^[\\w\\d\\-:/\\\\=]+$'){\r\n                $_ #don't quote nonempty arguments consisting of only letters, numbers, or one of -:/\\=\r\n            } else {\r\n                $_ <# double backslashes in front of quotes and escape quotes with backslash #> `\r\n                    -replace '(\\\\*)\"','$1$1\\\"' `\r\n                   <# opening quote after xxx= or after /xxx: or at beginning otherwise #> `\r\n                    -replace '^([\\w\\d]+=(?=.)|[/-][\\w\\d]+[:=](?=.)|^)','$1\"' `\r\n                   <# double backslashes in front of closing quote #> `\r\n                    -replace '(\\\\*)$','$1$1' `\r\n                   <# add closing quote #> `\r\n                    -replace '$','\"'\r\n            }\r\n        }) -join ' ';\r\n        & $command --% %commandlineargumentstring%\r\n    }\r\n}\r\n```\r\n\r\n(with some inspiration from [iep](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606))\r\n- doesn't quote simple switches\r\n- still works with empty args\r\n- works if no args present\r\n- should mostly work with msiexec, cmdkey, etc...\r\n- still always works for programs, that follow the [common rules](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments)\r\n- does not use nonstandard `\"\"` as escaped `\"` - will therefore still not work for embedded quotes in `.bat` or msiexec arguments\r\n",
    "created_at": "2017-05-23T09:35:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303345059",
    "id": 303345059,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzM0NTA1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303345059/reactions"
    },
    "updated_at": "2020-08-20T16:01:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303345059",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks, I didn't know about `--%`.  is there any way to do that without leaking the environment variable to the native process? (and to any processes it might invoke)\r\n\r\nIs there a PowerShell module that implements a `Run-Native` Cmdlet for everyone to use?  This sounds like something that should be on the Powershell Gallery.  If it were good enough, it could be the basis for an RFC.",
    "created_at": "2017-05-23T14:36:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303418170",
    "id": 303418170,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzQxODE3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303418170/reactions"
    },
    "updated_at": "2017-05-23T14:36:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303418170",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "NONE",
    "body": "\"leaking\" sounds like you are concerned about security. Notice however that the commandline is visible to child processes anyway. (For example: `gwmi win32_process |select name,handle,commandline|Format-Table` on Windows and `ps -f` on Linux)\r\n\r\nIf you still want to avoid an environment variable, you may be able to construct something using invoke-expression.\r\n\r\nRegarding the RFC:\r\nI don't think such a commandlet should be necessary, instead this should be the default behavior:\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/issues/90",
    "created_at": "2017-05-23T15:11:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303429885",
    "id": 303429885,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzQyOTg4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303429885/reactions"
    },
    "updated_at": "2017-05-23T15:49:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303429885",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "I agree that PowerShell's default behavior should be fixed.  I had been pessimistically assuming that it would never change for backwards compatibility reasons, which is why I suggested writing a module.  However, I really like the way your RFC allows the old escaping behavior to be re-enabled via a preference variable.",
    "created_at": "2017-05-23T20:04:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303515880",
    "id": 303515880,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzUxNTg4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303515880/reactions"
    },
    "updated_at": "2017-05-23T20:04:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/303515880",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me summarize the discussion, with just the right dose of opinion:\r\n\r\n* It's clear that we have a backward-compatibility issue, so the old behavior must continue to remain available.\r\n\r\n* @TSlivede's [RFC proposal](https://github.com/PowerShell/PowerShell-RFC/pull/90) accounts for that while commendably pointing _the way to the future_.  \r\nUnfortunately, his proposal languishes as a _PR_ as of this writing, and it hasn't even been accepted as a an RFC _draft_ yet.\r\n\r\n---\r\n\r\nBy _the future_, I mean:\r\n\r\n* PowerShell is a shell in its own right that will hopefully soon shed its `cmd.exe`-related baggage, so the only considerations that matter when it comes to calling external utilities (executables that are (typically) console/terminal applications) are:\r\n\r\n  * Arguments to pass should be specified by the rules of _PowerShell_'s argument-mode parsing _only_.\r\n\r\n  * Whatever _literals_ result from that process must be passed _as-is_ to the target executable, as _individual_ arguments.\r\n\r\n  * In other words: As a user, all you should ever need to focus on is what the result of _PowerShell_'s parsing will be, and to be able to rely on that result getting passed as-is, with PowerShell taking care of any behind-the-scenes encoding - if necessary.\r\n\r\n---\r\n\r\n_Implementing_ the future:\r\n\r\n* On _Windows_:\r\n\r\n  * For _historical_ reasons, Windows does _not_ permit passing arguments _as an array of literals_ to the target executable; instead, a _single_ string encoding _all_ arguments using _pseudo shell syntax_ is needed. What's worse, it is _ultimately up to the individual target executable to interpret that single string_ and split it into arguments.\r\n\r\n  * The best PowerShell can do is to form that single string - behind the scenes, after having performed its _own_ splitting of the command line into individual arguments - in a _predictable , standardized manner_.\r\n   \r\n   * @TSlivede's [RFC proposal](https://github.com/PowerShell/PowerShell-RFC/pull/90) proposes just that, by suggesting that PowerShell synthesize the pseudo shell command line in a manner that will [cause the Windows C/C++ runtime to recover the input arguments as-is when performing its parsing](https://docs.microsoft.com/en-us/cpp/cpp/parsing-cpp-command-line-arguments):\r\n\r\n     * Given that it's ultimately up to each target executable to interpret the command line, there is no _guarantee_ that this will work in all cases, but said rules are the most sensible choice, because _most_ existing utilities use these conventions.\r\n\r\n     * The only notable exceptions are _batch files_, which could receive special treatment, as the RFC proposal suggests.\r\n\r\n* On _Unix_ platforms:\r\n\r\n  * Strictly speaking, the issues that plague Windows argument parsing _need never arise_, because the platform-native calls for creating new processes _accept arguments as arrays of literals_ - whatever arguments PowerShell ends up with after performing its _own_ parsing should just be passed on _as-is_.  \r\nTo quote @lzybkr: \" I see no reason to bring that difficulty over to *nix.\"\r\n\r\n  * Sadly, due to the current limitations of .NET Core (CoreFX), these issues _do_ come into play, because the CoreFX API needlessly forces the anarchy of _Windows_ argument passing onto the Unix world too, by requiring use of a pseudo command line even on Unix.\r\n\r\n    * I've created [this CoreFX issue](https://github.com/dotnet/corefx/issues/23592) to ask for that problem to be remedied.\r\n\r\n   * In the meantime, given that CoreFX splits the pseudo command line back into arguments based on the C/C++ rules cited above, @TSlivede's proposal should work on Unix platforms too.\r\n",
    "created_at": "2017-08-27T23:18:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-325231274",
    "id": 325231274,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTIzMTI3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/325231274/reactions"
    },
    "updated_at": "2017-08-28T03:26:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/325231274",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "As https://github.com/PowerShell/PowerShell/issues/4358 was closed as duplicate of this, here a short summary of that problem:\r\n\r\nIf an argument of an external executable with a trailing backslash contains a space, it is currently naively quoted (add quote before and after the argument). Any executable, that follows [the usual rules](https://docs.microsoft.com/en-us/cpp/cpp/parsing-cpp-command-line-arguments) interprets that like this:   \r\n<sub>From @mklement0's [comment](https://github.com/PowerShell/PowerShell/issues/4358#issuecomment-318528600):</sub>\r\n>The 2nd `\"` in `\".\\test 2\\\"`, due to being preceded by \\ is interpreted as an escaped \", causing the remainder of the string - despite a then-missing closing \" to be interpreted as part of the same argument.\r\n\r\nExample:   \r\n<sub>(from @akervinen's [comment](https://github.com/PowerShell/PowerShell/issues/4358#issuecomment-318931047))</sub>    \r\n>`PS X:\\scratch> .\\ps-args-test.exe '.\\test 2\\'`   \r\nReceived argument: `.\\test 2\"`\r\n\r\nThe Problem occurs very often, because PSReadLine adds a trailing backslash on auto-completion for directories.",
    "created_at": "2017-09-19T21:13:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-330675421",
    "id": 330675421,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDY3NTQyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/330675421/reactions"
    },
    "updated_at": "2017-09-19T21:13:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/330675421",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Since corefx seems open to producing the api we need, I'm deferring this to 6.1.0.  For 6.0.0, I'll see if we can fix #4358 ",
    "created_at": "2017-10-01T03:03:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-333350045",
    "id": 333350045,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM1MDA0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333350045/reactions"
    },
    "updated_at": "2017-10-01T03:03:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333350045",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@TSlivede I took your function, renamed it to `Invoke-NativeCommand` (as `Run` isn't a valid verb) and added an alias `^` and published it as a module on PowerShellGallery:\r\n\r\n```powershell\r\ninstall-module NativeCommand -scope currentuser\r\n^ ./echoargs 'A \"B' 'A\" B'\r\n```",
    "created_at": "2017-10-01T15:24:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-333384152",
    "id": 333384152,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM4NDE1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333384152/reactions"
    },
    "updated_at": "2017-10-01T15:24:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333384152",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT: \r\n\r\nIt's nice to have a stopgap, but a less cumbersome one would be - while we wait for a CoreFX solution - to implement the well-defined official quoting / argument-parsing rules [as detailed in @TSlivede's RFC proposal](https://github.com/TSlivede/PowerShell-RFC/blob/master/1-Draft/RFC%23%23%23%23-Improve-generation-of-argument-string-for-executables.md) ourselves preliminarily - which doesn't sound too hard to do.\r\n\r\nIf we [only fix the `\\\"` problem](https://github.com/PowerShell/PowerShell/pull/4965), argument passing is still fundamentally broken, even in simple scenarios such as the following:\r\n\r\n```sh\r\nPS> bash -c 'echo \"hi there\"'\r\nhi    # !! Bash sees the following tokens:  '-c', 'echo hi', 'there'\r\n```\r\n\r\nI think at this point there's sufficient agreement on what the behavior should be so we don't need a full RFC process, do we?\r\n\r\nThe only outstanding decision is how to deal with backward-compatibility issues in _Windows_.\r\n",
    "created_at": "2017-10-01T16:31:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-333388477",
    "id": 333388477,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM4ODQ3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333388477/reactions"
    },
    "updated_at": "2017-10-01T19:25:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333388477",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 @SteveL-MSFT \r\nAre we **already** broke compatibility?",
    "created_at": "2017-10-01T17:15:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-333391625",
    "id": 333391625,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM5MTYyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333391625/reactions"
    },
    "updated_at": "2017-10-01T17:15:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333391625",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/240091?v=4",
      "events_url": "https://api.github.com/users/be5invis/events{/privacy}",
      "followers_url": "https://api.github.com/users/be5invis/followers",
      "following_url": "https://api.github.com/users/be5invis/following{/other_user}",
      "gists_url": "https://api.github.com/users/be5invis/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/be5invis",
      "id": 240091,
      "login": "be5invis",
      "node_id": "MDQ6VXNlcjI0MDA5MQ==",
      "organizations_url": "https://api.github.com/users/be5invis/orgs",
      "received_events_url": "https://api.github.com/users/be5invis/received_events",
      "repos_url": "https://api.github.com/users/be5invis/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/be5invis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/be5invis/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/be5invis"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> The only outstanding decision is how to deal with backward-compatibility issues in Windows.\r\n\r\nYeah, but that's the hard part, right? \r\n\r\n@be5invis what do you mean by \"already broke compatibility\"? \r\n\r\nPlus, if CoreFX is on the verge of a fix in their layer, I'd rather not create a stopgap in our layer before they do.\r\n\r\nAnd as someone said above in the thread, this is annoying, but it's also pretty well-documented in the community. I'm not sure we should break it *twice* in the next two releases. ",
    "created_at": "2017-10-10T22:21:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-335625645",
    "id": 335625645,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTYyNTY0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/335625645/reactions"
    },
    "updated_at": "2017-10-10T22:21:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/335625645",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@joeyaiello:\r\n\r\nIsn't the fix for #4358 already a breaking change for those who've worked around the issue by doubling the final `\\`; e.g., `\"c:\\tmp 1\\\\\"`? In other words: if you limit the changes to this fix, _two_ breaking changes are guaranteed: this one now, and another later after switching to the future CoreFx API; and while that _could_ also happen if a complete stopgap were to be implemented now, it is unlikely, given what we know about this coming change.\r\n\r\nConversely, it may hamper adoption on Unix if common quoting scenarios such as  \r\n`bash -c 'echo \"hi there\"'` don't work properly.\r\n\r\nI do realize that fixing this is a much larger breaking change, however.\r\n\r\n\r\n\r\n",
    "created_at": "2017-10-12T01:41:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-335995645",
    "id": 335995645,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTk5NTY0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/335995645/reactions"
    },
    "updated_at": "2017-10-12T01:41:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/335995645",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this and agreed that minimally, using `--%` should have the same behavior as bash in that the quotes are escaped so that the native command receives them.  What is still open for debate is if this should be the default behavior w/o using `--%`",
    "created_at": "2017-11-16T00:50:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-344778952",
    "id": 344778952,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDc3ODk1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344778952/reactions"
    },
    "updated_at": "2017-11-16T00:50:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344778952",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Note:\r\n\r\n* I'm assuming that a call to an actual shell executable is necessary when using `--%` on _Unix_, as opposed to trying to _emulate_ the shell behavior, which is what happens on _Windows_. Emulating is not hard on Windows, but would be much harder on Unix, given the many more features that would need emulating.\r\n\r\n* Using an actual shell then raises the question what shell to use: while `bash` is ubiquitous, its default behavior is not POSIX-compliant nor is it required by POSIX to be present, so for portability other scripting languages call out to `/bin/sh`, the shell executable decreed by POSIX (which _can_ be Bash running in compatibility mode (e.g., on macOS), but certainly does't have to (e.g., Dash on Ubuntu)).\r\n\r\nArguably, we should target `/bin/sh` as well - which, however, means that some Bash features - notably brace expansion, certain automatic variables, ... - won't be available\r\n\r\n---\r\n\r\n## Use of `--%`\r\n\r\nI'll use command `echoargs --% 'echo \"hi there\"'` as an example below.\r\n\r\n> the same behavior as bash in that the quotes are escaped so that the native command receives them.\r\n\r\nThe way to do _in the future, once the CoreFX API has been extended_ would be to perform no escaping at all, and instead do the following:\r\n\r\n* Create a process as follows:\r\n  * `/bin/sh` as the executable, (effectively) assigned to `ProcessStartInfo.FileName`.\r\n  * The following array of _literal_, _individual_ argument tokens as `ProcessStartInfo.ArgumentList`:\r\n    * `-c` as the 1st argument\r\n    * `echoargs 'echo \"hi there\"'` as the 2nd argument - i.e., the original command line used _literally_, exactly as specified, except that `--%` was removed.\r\n\r\nIn effect, the command line is passed through _as-is_ to the shell executable, which can then perform _its_ parsing.\r\n\r\nI understand that, in the current absence of an array-based way to pass literal arguments, we need to combine `-c` and  `echoargs 'echo \"hi there\"'` into a _single_ string _with escaping_, regrettably _solely for the benefit of the CoreFX API_, which, when it comes time to create the actual process, then _reverses_ this step and splits the single string back into literal tokens - and ensuring that this reversal always results in the original list of literal tokens is the challenging part.\r\n\r\nAgain: The only reason to involve escaping here at all is due to the current CoreFX limitation.\r\nTo work with this limitation, the following single, escaped string must therefore be assigned to  the `.Arguments` property of a `ProcessStartInfo` instance, with the escaping performed as specified by [Parsing C++ Command-Line Arguments](https://docs.microsoft.com/en-us/cpp/cpp/parsing-cpp-command-line-arguments):  \r\n  * `/bin/sh` as the executable, (effectively) assigned to `ProcessStartInfo.FileName`.\r\n  * The following single, escaped string as the value of `ProcessStartInfo.Arguments`:  \r\n`-c \"echoargs 'echo \\\"hi there\\\"'\"` \r\n\r\n ## Default behavior\r\n\r\n> What is still open for debate is if this should be the default behavior w/o using --%\r\n\r\nThe default behavior on Unix should be very different:\r\n\r\n* **No escaping considerations _other than PowerShell's own_ should ever come into play** (except on _Windows_, where that cannot be avoided, sadly; but there the MS C++ rules are the way to go, _to be applied behind the scenes_; failing that, `--%` provides an escape hatch).\r\n\r\n* **Whatever arguments _PowerShell_ ends up with, after its own parsing, must be passed as an _array of literals_**, via the upcoming `ProcessStartInfo.ArgumentList` property.\r\n\r\nApplied to the example without `--%`: `echoargs 'echo \"hi there\"'`:\r\n\r\n* PowerShell performs its usual parsing and ends up with the following 2 arguments:\r\n  * `echoargs`\r\n  * `echo \"hi there\"` (single quotes - which only had syntactical function to _PowerShell_, removed)\r\n\r\n* `ProcessStartInfo` is then populated as follows, with the upcoming CoreFX extension in place:\r\n\r\n   * `echoargs` as the (effective) `.FileName` property value\r\n  * _Literal_ `echo \"hi there\"` as the only element to add to the `Collection<string>` instance exposed by `.ArgumentList`.\r\n\r\nAgain, in the absence of `.ArgumentList` that is not an option _yet_, but _in the interim_ the same MS C++-compliant auxiliary escaping as described above could be employed.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2017-11-16T14:54:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-344946603",
    "id": 344946603,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDk0NjYwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344946603/reactions"
    },
    "updated_at": "2017-11-16T14:54:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344946603",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SteveL-MSFT \r\nAs I already mentioned at [Make the stop-parsing symbol (--%) work on Unix (#3733)](https://github.com/PowerShell/PowerShell/issues/3733) I'd strongly advise against changing the behavior of `--%`.\r\n\r\nIf some special functionality for `/bin/sh -c` is needed *please* use a different symbol and leave `--%` the way it is!",
    "created_at": "2017-11-16T15:29:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-344958168",
    "id": 344958168,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDk1ODE2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344958168/reactions"
    },
    "updated_at": "2017-11-16T15:34:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/344958168",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TSlivede: \r\n\r\n_If_ something `--%`-_like_ is implemented on Unix - and with native globbing and a generally more command-line-savvy crowd on Unix I perceive less of a need for it - then choosing a _different symbol_ - such as `--$` - probably makes sense (sorry, I'd lost track of all aspects of this lengthy, multi-issue debate).\r\n\r\nDifferent symbols would also serve as visually conspicuous reminders that non-portable _platform-specific_ behavior is being invoked.\r\n\r\nThat leaves the question what PowerShell should do when it comes across `--%` on Unix and `--$` on Windows.\r\n\r\n\r\n",
    "created_at": "2017-11-16T22:13:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345079887",
    "id": 345079887,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTA3OTg4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345079887/reactions"
    },
    "updated_at": "2017-11-16T22:13:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345079887",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I'm fine leaving `--%` as-is.  Introducing something like `--$` which calls out to /bin/sh and I guess cmd.exe on Windows may be a good way to solve this.",
    "created_at": "2017-11-16T22:54:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345089360",
    "id": 345089360,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTA4OTM2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345089360/reactions"
    },
    "updated_at": "2017-11-16T22:54:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345089360",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "No chance of creating a cmdlet for these behaviors?",
    "created_at": "2017-11-17T03:38:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345136581",
    "id": 345136581,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTEzNjU4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345136581/reactions"
    },
    "updated_at": "2017-11-17T03:38:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345136581",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@iSazonov are you suggesting something like `Invoke-Native`?  Not sure I'm a fan of that.",
    "created_at": "2017-11-17T03:51:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345138174",
    "id": 345138174,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTEzODE3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345138174/reactions"
    },
    "updated_at": "2017-11-17T03:51:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345138174",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yes, like `Start-Native`. \r\nAs a joke :-), do you not like cmdlets in PowerShell?\r\n\r\nIn Build.psm1 we have `Start-NativeExecution` with link to  https://mnaoumov.wordpress.com/2015/01/11/execution-of-external-commands-in-powershell-done-right/",
    "created_at": "2017-11-17T04:03:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345139695",
    "id": 345139695,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTEzOTY5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345139695/reactions"
    },
    "updated_at": "2017-11-17T04:03:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345139695",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT \r\n\r\n> I'm fine leaving --% as-is. \r\n\r\nI think we all agree that `--%` must continue to behave the way it does on _Windows_.\r\n\r\nOn _Unix_, by contrast, this behavior makes no sense, as I've tried to demonstrate [here](https://github.com/PowerShell/PowerShell/issues/3733#issue-227180792) - in short:\r\n  * single quotes aren't being handled correctly\r\n  * the only way to reference environment variable is as _cmd.exe-style_ (`%var%`)\r\n  * important native features such as  globbing and word-splitting don't work.\r\n\r\nThe primary motivation for introducing `--%` was, if I understand correctly, to enable the _reuse of existing `cmd.exe` command lines_ as-is.\r\n\r\n* As such, `--%` is useless on Unix with its current behavior.\r\n* _If_ we wanted an _analogous_ feature on Unix, it would have to be `/bin/sh -c`-based, as proposed above, probably using a different symbol.\r\n\r\nI don't think there is a need for a `cmd /c`-based feature on Windows, as `--%` has that _mostly_ covered, arguably in a manner that is _good enough_.\r\n@TSlivede has pointed out that not all shell features are being emulated, but in practice that appears not to be a concern (e.g., variable-value substitutions such as `%envVar:old=new%` aren't supported,  `^` isn't an escape char., and use of `--%` is limited to a _single_ command - no use of `cmd.exe`'s redirection and control operators; that said, I don't think `--%` was ever meant to emulate entire command _lines_).\r\n\r\nAs such, something like `--$` - if implemented - would be the Unix _counterpart_ to `--%`.\r\n\r\n**In any event, at the very least the [`about_Parsing` help topic](https://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Parsing.md) deserves a conspicuous warning that `--%` will be useless on Unix** in all but a few cases.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2017-11-17T11:37:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345221137",
    "id": 345221137,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTIyMTEzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345221137/reactions"
    },
    "updated_at": "2017-11-17T11:37:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345221137",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@iSazonov It may make sense to have `Start-Native` to handle some specific scenarios, but we should try to improve PowerShell so that using native exes is more natural and predictable",
    "created_at": "2017-11-17T17:08:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-345304033",
    "id": 345304033,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTMwNDAzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345304033/reactions"
    },
    "updated_at": "2017-11-17T17:08:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/345304033",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this and agree that `--%` should mean treat the arguments as they would on their relevant platforms which means they behavior differently on Windows and Linux, but consistent within Windows and consistent within Linux.  It would be more confusing to the user to introduce a new sigil.  We will leave implementation to the engineer on how to enable this.\r\n\r\nCross platform scripts would have to be aware of this difference in behavior, but it seems unlikely users would hit this.  If the user feedback is that there is a need due to more cross platform usage, then we can revisit introducing a new sigil.",
    "created_at": "2018-01-03T23:50:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-355160578",
    "id": 355160578,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE2MDU3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355160578/reactions"
    },
    "updated_at": "2018-01-03T23:50:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355160578",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "For the second time I've been bitten by these native vs cmdlets string argument parsing differences when used [ripgrep](https://github.com/BurntSushi/ripgrep).\r\n\r\nHere is result of powershell calls (echo.exe is from \"C:\\Program Files\\Git\\usr\\bin\\echo.exe\")\r\n\r\nNow I know I should watch out for this `\"` quirk:\r\n```\r\n> echo.exe '\"test'\r\ntest\r\n```\r\nBut this quirk is beyond me...\r\n```\r\necho.exe '^\\+.+;'\r\n^\\+.+;\r\necho.exe '^\\+.*;'\r\n^+.*;\r\n```\r\nIn second case I need to put double `\\` to pass `\\` to native command, in first case I don't need to do it 😑\r\n\r\nI understand this would be a breaking change to change this behavior so there won't be a difference between cmlets and native commands. However, I think quirks like this is something that puts people off from using powershell as default shell.",
    "created_at": "2019-03-18T12:21:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-473887479",
    "id": 473887479,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzg4NzQ3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473887479/reactions"
    },
    "updated_at": "2019-03-18T14:39:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473887479",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2056282?v=4",
      "events_url": "https://api.github.com/users/mpawelski/events{/privacy}",
      "followers_url": "https://api.github.com/users/mpawelski/followers",
      "following_url": "https://api.github.com/users/mpawelski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpawelski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mpawelski",
      "id": 2056282,
      "login": "mpawelski",
      "node_id": "MDQ6VXNlcjIwNTYyODI=",
      "organizations_url": "https://api.github.com/users/mpawelski/orgs",
      "received_events_url": "https://api.github.com/users/mpawelski/received_events",
      "repos_url": "https://api.github.com/users/mpawelski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mpawelski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpawelski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mpawelski"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mpawelski I just tried this on my Windows box with git 2.20.1.vfs.1.1.102.gdb3f8ae and it doesn't repro for me with 6.2-RC.1.  Ran it several times and it consistently echos `^\\+.+;`",
    "created_at": "2019-03-18T16:50:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-474002142",
    "id": 474002142,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDAwMjE0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474002142/reactions"
    },
    "updated_at": "2019-03-18T16:50:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474002142",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT, I think that @mpawelski accidentally specified the same command twice. You'll see the problem if you pass `'^\\\"+.*;'` for instance - note the `\\\"` part - with the - reasonable - expectation that the content of the single-quoted string will be passed through as-is, so that the external target program sees `^\\\"+.*;` as the argument's value:\r\n\r\n```powershell\r\n# Note how the \"\\\" char. is eaten.\r\nPS> bash -c 'printf %s \"$1\"' - '^\\\"+.*;'\r\n^\"+.*; \r\n\r\n#\"# Running the very same command from Bash does NOT exhibit the problem:\r\n$ bash -c 'printf %s \"$1\"' - '^\\\"+.*;'\r\n^\\\"+.*; \r\n```\r\n",
    "created_at": "2019-03-18T17:13:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-474013714",
    "id": 474013714,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDAxMzcxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474013714/reactions"
    },
    "updated_at": "2019-03-18T17:20:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474013714",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> --% was, if I understand correctly, to enable the reuse of existing cmd.exe command lines as-is.\r\n\r\nThat's not quite it.  `--%` was introduced because many Windows command line utils take args that are interpreted by PowerShell which completely fubars the invocation of the utility.  This can sour folks quick if they can no longer easily use their favorite native utils.  If I had a quarter for every time I've answered questions on SO and elsewhere RE native exe commands that don't work right because of this issue, I could probably take the family out to dinner at Qoba.  :-)  For instance, `tf.exe` allows `;` as part of specifying a workspace.  Git allows `{}` and `@~1`, etc, etc, etc.  \r\n\r\n`--%` was added to tell PowerShell to NOT parse the rest of the command line - just send it \"as-is\" to the native exe.  With the one rub, allow variables using the cmd env var syntax.  It is a bit ugly but man, it really, really comes in handy still on Windows.\r\n\r\nRE making this a cmdlet, I'm not sure I see how that works. `--%` is a signal to the parser to dumb down the parsing until EOL..\r\n\r\nFrankly, as a long time user of PowerShell and this feature in particular, it makes sense to me to use the same operator on other platforms to simply mean - dumb down the parsing until EOL.  There is the issue of how to allow some form of variable substitution.  Even though it feels a bit ugly, on macOS/Linux you could take %envvar% and substitute the value of any corresponding env var.  Then it could be portable between platforms.\r\n\r\nThe thing is, if you don't do this then you wind up with conditional code - not exactly what I'd call portable:\r\n```\r\n$env:Index = 1\r\nif ($IsWindows) {\r\n    git show --% @~%Index%\r\n}\r\nelse {\r\n    git show --$ @~$Index\r\n}\r\n```\r\n\r\nI'd prefer this work on all platforms:\r\n```\r\n$env:Index = 1\r\ngit show --% @~%Index%\r\n```\r\n\r\nThe behavior on Windows has to remain as-is because compatibility.  ",
    "created_at": "2019-03-22T04:45:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-475492603",
    "id": 475492603,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTQ5MjYwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475492603/reactions"
    },
    "updated_at": "2019-03-22T04:45:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475492603",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill \r\n\r\n> That's not quite it.\r\n\r\nBy process of elimination, **command lines that predate PowerShell in the Windows world were written for `cmd.exe` - and that's precisely what `--%` intends to emulate**, as evidenced by the following:\r\n\r\n* `--%` expands `cmd.exe`-style `%...%` environment-variable references, such as `%USERNAME%` (if no shell and no special logic were involved, such tokens would be passed _verbatim_)\r\n\r\n* straight [from the PowerShell's mouth](http://blogs.msdn.com/b/powershell/archive/2012/06/14/new-v3-language-features.aspx) (if you will; emphasis added):\r\n\r\n> **The web is full of command lines written for Cmd.exe**.  These commands lines work often enough in PowerShell, but when they include certain characters, e.g. a semicolon (;) a dollar sign ($), or curly braces, you have to make some changes, probably adding some quotes.  This seemed to be the source of many minor headaches.\r\n\r\n> To help address this scenario, we added a new way to “escape” the parsing of command lines.  If you use a magic parameter --%, we stop our normal parsing of your command line and switch to something much simpler.  We don’t match quotes.  We don’t stop at semicolon.  We don’t expand PowerShell variables.  **We do expand environment variables if you use Cmd.exe syntax (e.g. %TEMP%).**  Other than that, the arguments up to the end of the line (or pipe, if you are piping) are passed as is.  Here is an example:\r\n\r\nNote that **this approach is a poor fit for the _Unix_ world** (to recap from above):\r\n\r\n* Globbing of unquoted arguments such as `*.txt` won't work.\r\n\r\n* Traditional (POSIX-like) shells in the Unix world do _not_ use `%...%` to refer to environment variables; they expect `$...` syntax.\r\n\r\n* There is (fortunately) no _raw_ command line in the Unix world: any external executable must be passed an _array_ of _literals_, so it is still PowerShell or CoreFx that must parse the command line into arguments first.\r\n\r\n* Traditional (POSIX-like) shells in the Unix world accept `'...'` (single-quoted) strings, which `--%` doesn't recognize - see #10831.\r\n\r\nBut **even in the Windows world `--%` has severe, non-obvious limitations**:\r\n\r\n* Most obviously, you cannot directly reference PowerShell variables in your command line if you use `--%`; the only - cumbersome - workaround is to temporarily define _environment_ variables, which you must then reference with `%...%`.\r\n* You cannot enclose the command line in `(...)` - because the closing `)` is interpreted as a literal part of the command line.\r\n* You cannot follow the command line with `;` and another statement - because the `;` is interpreted as a literal part of the command line.\r\n* You cannot use `--%` inside a single-line script block - because the closing `}` is interpreted as a literal part of the command line.\r\n* You cannot use redirections - because they're treated as a literal part of the command line - however, you can use `cmd --% /c ... > file`, to let `cmd.exe` handle the redirection.\r\n* You cannot use line-continuation characters - neither PowerShell's (`` ` ``) nor cmd.exe's (`^`) - they will be treated as _literals_.\r\n    * `--%` only ever parses (at most) to the end of the line. \r\n\r\n---\r\n\r\n**Fortunately, we already _do_ have a cross-platform syntax: _PowerShell's own syntax_.**\r\n\r\nYes, using that requires you to know what _PowerShell_ considers metacharacters, which is a _superset_ of both what `cmd.exe` and POSIX-like shells such as Bash consider metacharacters, but that is the price to pay for a richer, platform-agnostic command-line experience.\r\n\r\nHow unfortunate it is, then, that PowerShell handles quoting of `\"` characters so poorly - which is the very subject of this issue, and which is summarized in [this docs issue](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/2361).\r\n\r\n\r\n\r\n",
    "created_at": "2019-05-11T21:22:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-491544801",
    "id": 491544801,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTU0NDgwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491544801/reactions"
    },
    "updated_at": "2019-10-18T14:57:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491544801",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill, I started a bit of a tangent; let me try to close it:\r\n\r\n* `--%` actually already _is_ implemented as of PowerShell Core 6.2.0; e.g., \r\n`/bin/echo --% %HOME%` prints the value of environment variable `HOME`; by contrast, \r\n`/bin/ls --% *.txt` will not work as expected, because the `*.txt` is passed as a literal.\r\n\r\n* Ultimately, when not using `--%`, we need to help users diagnose what the command line / arguments array that is constructed _behind the scenes ultimately_ looks like (which takes us back to the venerable #1761):\r\n  * Your helpful `echoArgs.exe` does just that, and in the linked issue you sensibly called for such functionality to be part of PowerShell itself.\r\n  * @SteveL-MSFT pondered including the resulting command line in the error record.\r\n\r\nFinally, to apply my previous argument - using PowerShell's own syntax as the inherently portable one - to your example:\r\n\r\n```powershell\r\n# Works cross-platform, uses PowerShell syntax \r\n# Note: No need for an aux. *environment* variable (which should be cleaned up afterward)\r\n$Index = 1\r\ngit show \"@~$Index\"\r\n\r\n# Alternative, quoting just the '@'\r\ngit show `@~$Index\r\n```\r\n\r\nYes, it requires you to know that a token-initial `@` is a metacharacter that you therefore have to quote, but as PowerShell becomes more widely used, the awareness of such requirements should become more widespread too.\r\n ",
    "created_at": "2019-05-12T13:47:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-491597433",
    "id": 491597433,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTU5NzQzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491597433/reactions"
    },
    "updated_at": "2019-05-12T13:50:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491597433",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "FYI, this problem should be almost the same on Windows and Unix-likes. CoreFx implementation of Unix S.D.Process has a thing called [`ParseArgumentsIntoList`](https://github.com/dotnet/corefx/blob/d391103/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L846-L854), which implements `CommandLineToArgvW` near-exactly without `_setargv` switches (and with the undocumented `\"\"` in quotes &rarr; `\"` feature). Unix should not be an additional point of pain in this because in the current shape it is broken in the same way as Windows is.\r\n\r\n`_setargv` is not something every program uses after all, and it's probably not worth considering it because, well, it is kinda effed with [behavioral changes among CRT versions](https://bugs.openjdk.java.net/browse/JDK-7167744). The best we can and should do  is to surround everything with double quotes, add some nice backslahes, and that's all.",
    "created_at": "2019-09-18T08:48:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-532587123",
    "id": 532587123,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjU4NzEyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/532587123/reactions"
    },
    "updated_at": "2019-09-18T08:49:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/532587123",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Another example where args aren't being parsed correctly:\r\n\r\n```powershell\r\naz \"myargs&b\"\r\n```\r\n\r\nIn this case, az gets `myargs` and `b` is attempted to be executed as a new command.\r\n\r\nWorkaround is: az --% \"myargs&b\"\r\n",
    "created_at": "2019-10-09T04:26:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-539822061",
    "id": 539822061,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTgyMjA2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539822061/reactions"
    },
    "updated_at": "2019-10-09T04:26:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539822061",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT, we can remove the `Waiting - DotNetCore` label, given that the requisite feature - the collection-based [`ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.argumentlist) property has been available since .NET Core 2.1\r\n\r\n@TSlivede is aware of the new method and plans to use it, but the associated RFC, https://github.com/PowerShell/PowerShell-RFC/pull/90, is languishing, unfortunately.\r\n\r\nI suggest we continue the _implementation_ discussion there.\r\n\r\nHowever, in the RFC discussion, @joeyaiello talks about making the changes an experimental feature, but it's becoming increasingly clear to me that you cannot fix the quoting behavior without massively breaking existing code:\r\n\r\nAnyone who's had to _work around_:\r\n\r\n* the inability to pass an empty-string argument (`foo.exe \"\"` currently passes _no_ arguments)\r\n* the unexpected effective removal of double quotes due to lack of automatic escaping of embedded double quotes (`foo.exe  '{ \"foo\": \"bar\" }'` being passed as improperly escaped `\"{ \"foo\": \"bar\" }\"`)\r\n* the quirks of certain CLIs such as `msiexec` that don't accept certain arguments double-quoted _as a whole_ (`foo.exe foo=\"bar none\"` being passed as `\"foo=bar none\"`).\r\nNote: It is `msiexec` that is to blame here, and with the proposed changes applied, passing the required `foo=\"bar none\"` form of quoting will then require `--%`.\r\n\r\nwill be in trouble, because the workarounds will _break_ with the proposed changes applied.\r\n\r\nTherefore, an additional question is: \r\n\r\n* How can we make correct behavior available at least as an _opt-in_ feature?\r\n  \r\n  * In the case of broken quoting with `Start-Process`, we at least have the option of [introducing a new parameter for the correct behavior](https://github.com/PowerShell/PowerShell/issues/5576#issuecomment-552124719), but with direct invocation that is clearly not an option (unless we introduce another \"magic symbol\" such as `--%`).\r\n\r\n* A fundamental problem with such mechanisms - typically, by preference variable, but increasingly also by `using` statements  -  is PowerShell's dynamic scoping; that is, the opted-in behavior will by default be applied to code called _from_ one's opted-in code as well, which is problematic.\r\n\r\n  * Perhaps it is time for generally introducing  _lexical_ scoping of features, a generalization of the lexically scoped `using strict` proposal in the - equally languishing - [lexical strict-mode RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0003-Lexical-Strict-Mode.md) authored by @lzybkr.\r\n\r\n  * Something like a lexically scoped `using preference ProperArgumentQuoting`? (Name obviously negotiable, but I'm struggling to come up with one).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-11-10T19:06:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552223508",
    "id": 552223508,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjIyMzUwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552223508/reactions"
    },
    "updated_at": "2019-11-10T19:06:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552223508",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Given all those caveats, and that this is an issue with direct invocation as well, where we can't simply add a new parameter, I'm firmly in favour of breaking the old behaviour.\r\n\r\nYes, it'll probably break a lot. But really, only because it was so thoroughly broken to begin with. I don't think it's particularly feasible to prioritise maintaining what amounts to a huge pile of workarounds for broken behaviour over having a feature that _actually works_.\r\n\r\nAs a new major version I think v7 really is the only chance we'll get to rectify this situation properly for quite some time, and we should take the opportunity. Provided we make users aware, I don't think the transition will be poorly received overall.",
    "created_at": "2019-11-10T19:56:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552227852",
    "id": 552227852,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjIyNzg1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552227852/reactions"
    },
    "updated_at": "2019-11-10T19:57:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552227852",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If we feel that breaking change is inevitable, then perhaps we should design the ideal solution, taking into account that it should be easy to print in an interactive session and it is possible to have a script version that better works on all platforms.\r\n",
    "created_at": "2019-11-11T04:17:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552286837",
    "id": 552286837,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjI4NjgzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552286837/reactions"
    },
    "updated_at": "2020-07-15T04:47:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552286837",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Agreed, @vexx32: Retaining the existing behavior, even if only by default, will remain a perennial pain point. Users do not expect the need for opt-in to being with, and, once they do, they are likely to either forget on occasion and/or resent the need to apply it every time. \r\n\r\nA shell that doesn't reliably pass arguments to external programs is failing one of its core mandates.\r\n\r\nYou certainly have _my_ vote for making the breaking change, but I fear that others will feel differently, not least because v7 is being touted as allowing longterm WinPS users to migrate to PSCore.\r\n\r\n---\r\n\r\n@iSazonov: https://github.com/PowerShell/PowerShell-RFC/pull/90 describes the correct solution.\r\n\r\nTo recapitulate its spirit:\r\n\r\nPowerShell, as a shell, needs to parse arguments according to _its_ rules and then pass the resulting, expanded argument values _verbatim_ to the target program - users should never have to think about how PowerShell makes that happen; all they should ever have to worry about is getting _PowerShell_ syntax right.\r\n\r\n* On Unix-like platforms,  `ProcessStartInfo.ArgumentList` now gives us a way to perfectly implement this, given that the _array_ of expanded argument values can be passed _as-is_ to the target program, because that's how argument passing - sensibly - works in this world.\r\n\r\n* On Windows, we have to deal with the unfortunate reality of [the anarchy that is Windows command-line parsing](https://stackoverflow.com/a/4094897/45375), but, as a shell, it behooves us to _just make it work behind the scenes, as much as possible_, which is what the RFC describes - though I've just [discovered a wrinkle](https://github.com/PowerShell/PowerShell-RFC/pull/90#issuecomment-552231174) that makes sole use of  `ProcessStartInfo.ArgumentList` not good enough, unfortunately (due to widespread of _batch files_ as CLI entry points, as demonstrated by @SteveL-MSFT's `az[.cmd]` example above). For those edge cases where doing the sensible thing isn't good enough, there's `--%`. \r\n\r\n\r\n\r\n",
    "created_at": "2019-11-11T13:23:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552443887",
    "id": 552443887,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjQ0Mzg4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552443887/reactions"
    },
    "updated_at": "2019-11-11T13:26:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552443887",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Perhaps PSSA can help to mitigate the breaking change by warning users that they use an argument format which will be changed.",
    "created_at": "2019-11-11T13:35:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552448135",
    "id": 552448135,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjQ0ODEzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552448135/reactions"
    },
    "updated_at": "2019-11-11T13:35:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552448135",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I think we need to consider adopting something like [Optional Features](https://github.com/PowerShell/PowerShell-RFC/pull/220) to move forward on this breaking change along with [some others](https://github.com/PowerShell/PowerShell/issues/6745).",
    "created_at": "2019-11-11T16:46:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552521413",
    "id": 552521413,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjUyMTQxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552521413/reactions"
    },
    "updated_at": "2019-11-11T16:46:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552521413",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Is there really any value in maintaining the existing behaviour? Other than backwards compatibility, I mean.\r\n\r\nI don't think it's worthwhile to maintain two code paths for this, simply to retain a broken implementation because some old code might need it once in a while. I don't think it's unreasonable to expect folx to update their code once in a while. 😅 \r\n\r\nDoubly so if we expect PS7 to be a stand-in replacement for WinPS; the only reason I can see to retain the behaviour for v7 is if we expect folks to be using the same script to run commands on both  5.1 and 7, which (hopefully) should be a pretty rare case if PS7 is good replacement for 5.1.\r\n\r\nAnd even then, it wouldn't be overly difficult for users to account for both. Provided we're not changing actual language syntax, it should be pretty easy to do something like this:\r\n\r\n```powershell\r\nif ($PSVersionTable.PSVersion.Major -lt 7) {\r\n    # use old form\r\n}\r\nelse {\r\n    # use new form\r\n}\r\n```\r\n\r\nProvided we make users aware of the difference, I think it would be a welcome relief from the pain that it has been to handle weird native executables in PS up to now. 😄 \r\n\r\nAs @TylerLeonhardt mentioned in the discussion of optional features -- implementing that means you now maintain _multiple_ distinct implementations which each need to be maintained and tested, **plus** also maintaining and testing the optional feature framework. Doesn't really seem worth it for this, tbh.",
    "created_at": "2019-11-11T17:03:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552527971",
    "id": 552527971,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjUyNzk3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552527971/reactions"
    },
    "updated_at": "2019-11-11T17:06:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552527971",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@vexx32 backwards compatibility is a big issue here.  This isn't the only issue for args to native executables.  I'd like to bucket them all and have them all be one \"optional feature\".  For example, https://github.com/PowerShell/PowerShell/issues/1761 and https://github.com/PowerShell/PowerShell/issues/10675.  \"Fixing\" interoperability with native commands is something I'd like to resolve for vNext.  So if anyone sees any existing or new issues in this category, cc me and I'll tag it appropriately (or if you have triage permission, tag it like the others).",
    "created_at": "2019-11-11T17:18:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552533786",
    "id": 552533786,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjUzMzc4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552533786/reactions"
    },
    "updated_at": "2019-11-11T17:18:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552533786",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Optional features is modules :-) Having optional features in Engine is big headache for support, specially for Windows support. We could modularize Engine by reducing internal dependencies and replacing internal APIs with public - after this we could implement optional features in Engine in easy way.",
    "created_at": "2019-11-11T17:21:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552534820",
    "id": 552534820,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjUzNDgyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552534820/reactions"
    },
    "updated_at": "2019-11-11T17:21:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552534820",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@iSazonov one of the things my team will look at in vNext is to make the engine more modular :)",
    "created_at": "2019-11-11T17:27:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-552537001",
    "id": 552537001,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjUzNzAwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552537001/reactions"
    },
    "updated_at": "2019-11-11T17:27:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/552537001",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "What is the recommended solution here for end users?",
    "created_at": "2019-11-25T20:13:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-558321882",
    "id": 558321882,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMyMTg4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558321882/reactions"
    },
    "updated_at": "2019-11-25T20:13:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558321882",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4319522?v=4",
      "events_url": "https://api.github.com/users/musm/events{/privacy}",
      "followers_url": "https://api.github.com/users/musm/followers",
      "following_url": "https://api.github.com/users/musm/following{/other_user}",
      "gists_url": "https://api.github.com/users/musm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/musm",
      "id": 4319522,
      "login": "musm",
      "node_id": "MDQ6VXNlcjQzMTk1MjI=",
      "organizations_url": "https://api.github.com/users/musm/orgs",
      "received_events_url": "https://api.github.com/users/musm/received_events",
      "repos_url": "https://api.github.com/users/musm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/musm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/musm"
    }
  },
  {
    "author_association": "NONE",
    "body": "This is contrived, but it is the most straightforward way to get to the correct\\* ArgumentList handling from the .NET framework itself:\r\n\r\n```Powershell\r\nAdd-Type -AssemblyName \"System\"\r\nfunction startProcess([string] $FileName, [string[]] $ArgumentList) {\r\n    $proc = ([System.Diagnostics.Process]::new())\r\n    $proc.StartInfo.UseShellExecute = $false\r\n    $proc.StartInfo.FileName = $FileName\r\n    $proc.StartInfo.CreateNoWindow = $true\r\n    foreach ($a in $ArgumentList) { $proc.StartInfo.ArgumentList.Add($a) }\r\n    $proc.Start()\r\n    return $proc\r\n}\r\n\r\nstartProcess -FileName 'C:\\Program Files\\nodejs\\node.exe' -ArgumentList '-e','console.log(process.argv.join(''\\n''))','--','abc\" \\\" messyString'\r\n```\r\n\r\nOf course you can make it less contrived to use here by using positional parameters and some `get-command` trickery.\r\n\r\n\\* DISCLAIMER: There is no single correct way to parse a cmdline on Windows. By \"correct\" I mean the MSVCRT style of cmdline from/to argv conversion, implemented by .NET on all platforms for ArgumentList handling, `main (string[] args)` processing, and external spawn calls on Unix. This sample is provided AS IS with no guarantee for general interoperability. See also [the \"windows command line\" section of proposed NodeJS child_process documentation](https://github.com/nodejs/node/blob/34eb90ea6cc27070de30175f886183b8e293a559/doc/api/child_process.md#windows-command-line).",
    "created_at": "2019-11-26T09:29:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-558542355",
    "id": 558542355,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODU0MjM1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558542355/reactions"
    },
    "updated_at": "2019-11-27T03:41:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558542355",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "NONE",
    "body": "@Artoria2e5 That exactly the conclusion I came to. System.Diagnostics.Process is the only reliable way to run external executable, but escaping arguments can get tricky due to stdlib Rules: \r\n```\r\n2N backslashes + \" ==> N backslashes and begin/end quote\r\n2N+1 backslashes + \" ==> N backslashes + literal \" \r\nN backslashes ==> N backslashes\r\n```\r\nAs the result I have come up with the following logic to escape arguments wrap them into double quotes `\"` for process executuion:\r\nhttps://github.com/choovick/ps-invoke-externalcommand/blob/master/ExternalCommand/ExternalCommand.psm1#L244\r\n\r\nAlso it can get tricky to obtain STDOUT and STDERR in realtime while external executable runs, so I have created this package \r\n\r\nhttps://github.com/choovick/ps-invoke-externalcommand\r\n\r\n that i'm using heavily on Windows, Linux and Mac and so far without issues and I can pass arguments with newline and other special characters in them. \n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/3503712?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/choovick/ps-invoke-externalcommand\">choovick/ps-invoke-externalcommand</a></strong></div><div>Contribute to choovick/ps-invoke-externalcommand development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/3503712?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/choovick/ps-invoke-externalcommand\">choovick/ps-invoke-externalcommand</a></strong></div><div>Contribute to choovick/ps-invoke-externalcommand development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2019-11-27T15:26:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-559134118",
    "id": 559134118,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEzNDExOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559134118/reactions"
    },
    "updated_at": "2019-11-27T15:27:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559134118",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "NONE",
    "body": "@choovick the whole stdio redirect thing is great!\r\n\r\nI disagree slightly on the escaping part though, since there is already a thing that does it for you called ArgumentList. I do understand that it is a relative recent (?) addition, and it does get disappointing since MS forgot to put a String,String[] initializer for S.D.ProcessStartInfo. (Is there a place for these… .NET Interface proposals?)\r\n<details>\r\n<summary>chitchat</summary>\r\n\r\nMy escape function from that NodeJS example is a bit different from yours: it uses the undocumented (but found in .NET core and MSVCRT) `\"\"` escape for quotation marks. Doing so sort of simplifies the backslash picking work. I did this mainly because it was used for the all mighty cmd, which does not understand that `\\\"` should not unquote the rest of the string. Instead of struggling with  `\\^\"` I figured that I will be better off with something that has been in secret use since the beginning of time.\r\n\r\n</details>",
    "created_at": "2019-11-27T17:10:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-559176186",
    "id": 559176186,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE3NjE4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559176186/reactions"
    },
    "updated_at": "2019-11-27T17:10:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559176186",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "NONE",
    "body": "@Artoria2e5 unfortunately ArgumentList is not available in PowerShell 5.1 on windows, using your example i'm getting:\r\n\r\n```You cannot call a method on a null-valued expression.\r\nAt C:\\Users\\yser\\dev\\test.ps1:7 char:37\r\n+ ... oreach ($a in $ArgumentList) { $proc.StartInfo.ArgumentList.Add($a) }\r\n+                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvokeMethodOnNull\r\n```\r\n\r\nSince custom argument escape logic....\r\n<details><summary>chitchat</summary>\r\n<p>\r\nin regards to `\\^\"` in NodeJS, I think I had to do that several years back :) and I think got it working</p>\r\n</details>\r\n",
    "created_at": "2019-11-27T18:06:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-559195759",
    "id": 559195759,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE5NTc1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559195759/reactions"
    },
    "updated_at": "2019-11-27T18:06:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559195759",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> System.Diagnostics.Process is the only reliable way to run external executable\r\n\r\nThe problem is that you won't get integration with PowerShell's output streams and you won't get streaming behavior in the pipeline.\r\n\r\n**Here's the summary of the required workarounds if you still want to let PowerShell perform the invocation (which is definitely preferable)**:\r\n\r\n* If you need to pass arguments with _embedded_ `\"` chars., _double_ them on Windows, if possible, or `\\`-escape them:\r\n\r\n  * On Windows, when calling _batch files_ and if you know that the target program understands `\"\"` as an escaped `\"`, use `$arg -replace '\"', '\"\"'`\r\n      * Use of `\"\"` is preferable on Windows (it avoids the Windows PowerShell problem and works with CLIs that use batch files as _stubs_, such as Node.js and Azure), but not all executables support it (notably not Ruby and Perl).\r\n\r\n  * Otherwise (always on Unix), use `$arg -replace '\"', '\\\"'`\r\n\r\n    * Note: In _Windows PowerShell_, this still doesn't always work properly if the value also contains _spaces_, because the presence of literal `\\\"` in the value does situationally does _not_ trigger enclosing double-quoting, unlike in PowerShell Core; e.g., passing `'3\\\" of snow'` breaks.\r\n\r\n  * Additionally, before the above escaping, you must double `\\` instance immediately preceding `\"`, if they are to be treated as literals:\r\n\r\n       * `$arg = $arg -replace '(\\\\+)\"', '$1$1\"'`\r\n\r\n* If you need to pass an _empty_ argument, pass `'\"\"'`.\r\n\r\n  *  `'' -eq $arg ? '\"\"' : $arg` (WinPS alternative: `($arg, '\"\"')['' -eq $arg]`\r\n\r\n* Windows PowerShell only, don't do this in PS Core (where the problem has been fixed): \r\n    * If your argument _contains spaces_ and _ends in_  (one or more) `\\`, double the trailing`\\` instance(s).\r\n\r\n     * `if ($arg -match ' .*?(\\\\+)$') { $arg = $arg + $Matches[1] }`\r\n\r\n* If `cmd` / a batch file is being invoked with arguments that do _not_ have spaces (therefore _not_ triggering automatic double-quoting by PowerShell) but contain any of `&|<>^,;` (e.g., `a&b`), use _embedded enclosing double-quoting_ to ensure that PowerShell passes a double-quoted token and therefore doesn't break the `cmd` / batch-file call:\r\n\r\n   * `$arg = '\"' + $arg + '\"'`\r\n\r\n* If you need to deal with ill-behaved executables such as `msiexec.exe`, single-quote the argument:\r\n\r\n   * `'foo=\"bar none\"'`\r\n\r\nAs stated, **these workarounds will _break_, once the underlying problem gets fixed.**\r\n\r\n---\r\n\r\nBelow is **simple (non-advanced) function `iep`** (for \"invoke external program\"), which: \r\n\r\n* Performs all of the escaping described above, including automatic special-casing for `msiexec` and preferring `\"\"` escaping over `\\\"` depending on the target program.\r\n  * The idea is that you can pass any argument by focusing on _PowerShell_'s string syntax only, and rely on the function to perform the necessary escaping so that the verbatim value that PowerShell sees is also seen by the target program.\r\n  * In PowerShell _Core_, this should work pretty robustly; in Windows PowerShell you still have edge cases with embedded double quotes that break if `\\\"` escaping must be used (as discussed above).\r\n* Preserves shell-command invocation syntax.\r\n  * Simply prepend `iep ` to your command line.\r\n* As direct invocation would, it:\r\n   * integrates with PowerShell's streams\r\n   * sends output line by line through the pipeline\r\n   * sets `$LASTEXITCODE` based on the external program's exit code; however, `$?` can _not_ be relied upon.\r\n\r\nNote: The function is purposely minimalistic (no parameter declarations, no command-line help, short (irregular) name), because its meant to be as unobtrusive as possible: simply prepend `iep` to your command line, and things should work.\r\n\r\n**Example invocation** using `EchoArgs.exe` (installable via Chocolatey from an _elevated_ session with `choco install echoargs -y`):\r\n\r\n```\r\nPS> iep echoargs '' 'a&b' '3\" of snow' 'Nat \"King\" Cole' 'c:\\temp 1\\' 'a \\\" b'\r\nArg 0 is <>\r\nArg 1 is <a&b>\r\nArg 2 is <3\" of snow>\r\nArg 3 is <Nat \"King\" Cole>\r\nArg 4 is <c:\\temp 1\\>\r\nArg 5 is <a \\\" b>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"\" a&b \"3\\\" of snow\" \"Nat \\\"King\\\" Cole\" \"c:\\temp 1\\\\\" \"a \\\\\\\" b\"\r\n```\r\n\r\nThe above shows PowerShell Core output. Note how all arguments were correctly passed through as seen verbatim by PowerShell, including the empty argument.\r\n\r\nIn Windows PowerShell, the `3\" of snow` argument won't be passed correctly, because  `\\\"` escaping is used due to calling an unknown executable (as discussed above).\r\n\r\nTo verify that batch files pass arguments correctly through, you can create `echoargs.cmd` as a wrapper for `echoargs.exe`:\r\n\r\n```\r\n'@echoargs.exe %*' | Set-Content echoargs.cmd\r\n```\r\nInvoke as `iep .\\echoargs.cmd '' 'a&b' '3\" of snow' 'Nat \"King\" Cole' 'c:\\temp 1\\' 'a \\\" b'`\r\n\r\nSince a batch file is now called, `\"\"`-escaping is employed, which fixes the `3\" of snow` problem when calling from Windows PowerShell.\r\n\r\nThe function equally works on Unix-like platforms, which you can verify by creating a `sh` shell script named `echoargs`:\r\n```powershell\r\n@'\r\n#!/bin/sh\r\ni=0; for a; do printf '%s\\n' \"\\$$((i+=1))=[$a]\"; done\r\n'@ > echoargs; chmod a+x echoargs\r\n```\r\n\r\nInvoke as `iep ./echoargs '' 'a&b' '3\" of snow' 'Nat \"King\" Cole' 'c:\\temp 1\\' 'a \\\" b'`\r\n\r\n---\r\n\r\n**Important**: A **more complete version of this function** has since been published as **`ie` (*I*nvoke (external) *E*xecutable)** in I've just published a module **[`Native`](https://github.com/mklement0/Native)**, which I encourage you to use instead. Install the module with\r\n**`Install-Module Native -Scope CurrentUser`**.\r\nThe module also contains an `ins` (`Invoke-NativeShell`) command that addresses the use case discussed in #13068  - see https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939 for details.\r\n\r\n### Function `iep`' s source code (use module `Native` instead - see above): \r\n\r\n```powershell\r\nfunction iep {\r\n\r\n  Set-StrictMode -Version 1\r\n  if (-not (Test-Path Variable:IsCoreClr)) { $IsCoreCLR = $false }\r\n  if (-not (Test-Path Variable:IsWindows)) { $IsWindows = $env:OS -eq 'Windows_NT' }\r\n\r\n  # Split into executable name/path and arguments.\r\n  $exe, [string[]] $argsForExe = $args\r\n\r\n  # Resolve to the underlying command (if it's an alias) and ensure that an external executable was specified.\r\n  $app = Get-Command -ErrorAction Stop $exe\r\n  if ($app.ResolvedCommand) { $app = $app.ResolvedCommand }\r\n  if ($app.CommandType -ne 'Application') { Throw \"Not an external program, non-PS script, or batch file: $exe\" }\r\n\r\n  if ($argsForExe.Count -eq 0) {\r\n    # Argument-less invocation\r\n    & $exe\r\n  }\r\n  else {\r\n    # Invocation with arguments: escape them properly to pass them through as literals.\r\n    # Decide whether to escape embedded double quotes as \\\" or as \"\", based on the target executable.\r\n    # * On Unix-like platforms, we always use \\\"\r\n    # * On Windows, we use \"\" where we know it's safe to do. cmd.exe / batch files require \"\", and Microsoft compiler-generated executables do too, often in addition to supporting \\\",\r\n    #   notably including Python and Node.js\r\n    #   However, notable interpreters that support \\\" ONLY are Ruby and Perl (as well as PowerShell's own CLI, but it's better to call that with a script block from within PowerShell).\r\n    #   Targeting a batch file triggers \"\" escaping, but in the case of stub batch files that simply relay to a different executable, that could still break\r\n    #   if the ultimate target executable only supports \\\" \r\n    $useDoubledDoubleQuotes = $IsWindows -and ($app.Source -match '[/\\\\]?(?<exe>cmd|msiexec)(?:\\.exe)?$' -or $app.Source -match '\\.(?<ext>cmd|bat|py|pyw)$')\r\n    $doubleQuoteEscapeSequence = ('\\\"', '\"\"')[$useDoubledDoubleQuotes]\r\n    $isMsiExec = $useDoubledDoubleQuotes -and $Matches['exe'] -eq 'msiexec'\r\n    $isCmd = $useDoubledDoubleQuotes -and ($Matches['exe'] -eq 'cmd' -or $Matches['ext'] -in 'cmd', 'bat')\r\n    $escapedArgs = foreach ($arg in $argsForExe) {\r\n      if ('' -eq $arg) { '\"\"'; continue } # Empty arguments must be passed as `'\"\"'`(!), otherwise they are omitted.\r\n      $hasDoubleQuotes = $arg.Contains('\"')\r\n      $hasSpaces = $arg.Contains(' ')\r\n      if ($hasDoubleQuotes) {\r\n        # First, always double any preexisting `\\` instances before embedded `\"` chars. \r\n        # so that `\\\"` isn't interpreted as an escaped `\"`.\r\n        $arg = $arg -replace '(\\\\+)\"', '$1$1\"'\r\n        # Then, escape the embedded `\"` chars. either as `\\\"` or as `\"\"`.\r\n        # If \\\" escaping is used:\r\n        # * In PS Core, use of `\\\"` is safe, because its use triggers enclosing double-quoting (if spaces are also present).\r\n        # * !! In WinPS, sadly, that isn't true, so something like `'foo=\"bar none\"'` results in `foo=\\\"bar none\\\"` -\r\n        #   !! which - due to the lack of enclosing \"...\" - is seen as *2* arguments by the target app, `foo=\"bar` and `none\"`.\r\n        #   !! Similarly, '3\" of snow' would result in `3\\\" of snow`, which the target app receives as *3* arguments, `3\"`, `of`, and `snow`.\r\n        #   !! Even manually enclosing the value in *embedded* \" doesn't help, because that then triggers *additional* double-quoting.\r\n        $arg = $arg -replace '\"', $doubleQuoteEscapeSequence\r\n    }\r\n      elseif ($isMsiExec -and $arg -match '^(\\w+)=(.* .*)$') { \r\n        # An msiexec argument originally passed in the form `PROP=\"value with spaces\"`, which PowerShell turned into `PROP=value with spaces`\r\n        # This would be passed as `\"PROP=value with spaces\"`, which msiexec, sady, doesn't recognize (`PROP=valueWithoutSpaces` works fine, however).\r\n        # We reconstruct the form `PROP=\"value with spaces\"`, which both WinPS And PS Core pass through as-is.\r\n        $arg = '{0}=\"{1}\"' -f $Matches[1], $Matches[2]\r\n      }\r\n      # As a courtesy, enclose tokens that PowerShell would pass unquoted in \"...\", \r\n      # if they contain cmd.exe metachars. that would break calls to cmd.exe / batch files.\r\n      $manuallyDoubleQuoteForCmd = $isCmd -and -not $hasSpaces -and $arg -match '[&|<>^,;]'\r\n      # In WinPS, double trailing `\\` instances in arguments that have spaces and will therefore be \"...\"-enclosed,\r\n      # so that `\\\"` isn't mistaken for an escaped `\"` - in PS Core, this escaping happens automatically.\r\n      if (-not $IsCoreCLR -and ($hasSpaces -or $manuallyDoubleQuoteForCmd) -and $arg -match '\\\\') {\r\n        $arg = $arg -replace '\\\\+$', '$&$&'\r\n      }\r\n      if ($manuallyDoubleQuoteForCmd) {\r\n        # Wrap in *embedded* enclosing double quotes, which both WinPS and PS Core pass through as-is.\r\n        $arg = '\"' + $arg + '\"'\r\n      }\r\n      $arg\r\n    }\r\n    # Invoke the executable with the properly escaped arguments.\r\n    & $exe $escapedArgs\r\n  }\r\n}\r\n```",
    "created_at": "2019-12-05T21:50:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606",
    "id": 562334606,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjMzNDYwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 5,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562334606/reactions"
    },
    "updated_at": "2020-08-11T12:17:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562334606",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0  Impressive, but here are couple that does not work for me on windows:\r\n```\r\niep echoargs 'somekey=\"value with spaces\"' 'te\\\" st'\r\n\r\nArg 0 is <somekey=\"value>\r\nArg 1 is <with>\r\nArg 2 is <spaces\">\r\nArg 3 is <te\\\">\r\nArg 4 is <st>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" somekey=\\\"value with spaces\\\" te\\\\\\\" st\r\n```\r\n\r\n\r\nhere is my test array of arguments :)\r\n```\r\n$Arguments = @(\r\n    'trippe slash at the end \\\\\\',\r\n    '4 slash at the end \\\\\\\\',\r\n    '\\\\servername\\path\\',\r\n    'path=\\\\servername\\path\\',\r\n    'key=\"\\\\servername\\pa th\\\"',\r\n    '5 slash at the end \\\\\\\\\\',\r\n    '\\\\\" double slashed double quote',\r\n    'simple',\r\n    'white space',\r\n    'slash at the end \\',\r\n    'double slash at the end \\\\',\r\n    'trippe slash at the end \\\\\\',\r\n    'trippe slash at the end with space \\\\\\ ',\r\n    '\\\\\" double slashed double quote',\r\n    'double slashed double quote at the end \\\\\"',\r\n    '\\\\\\\" triple slashed double quote',\r\n    'triple slashed double quote at the end \\\\\\\"',\r\n    # slash\r\n    'single slashes \\a ^ \\: \\\"',\r\n    'path=\"C:\\Program Files (x86)\\test\\\"'\r\n    # quotes\r\n    'double quote \" and single quote ''',\r\n    # windows env var syntax\r\n    \"env var OS: %OS%\",\r\n    # utf16\r\n    ('\"utf16 ETHIOPIC WORDSPACE: \\u1361\"' | ConvertFrom-Json),\r\n    # special chars\r\n    \"newLine`newLine\"\r\n    \"tab`tab\"\r\n    \"backspace`bbackspace\"\r\n    \"carriage`rafter\",\r\n    \"formFeed`fformFeed\",\r\n    # JSON Strings\r\n    @\"\r\n[{\"_id\":\"5cdab57e4853ea7b5a707070\",\"index\":0,\"guid\":\"25319946-950e-4fe8-9586-ddd031cbb0fc\",\"isActive\":false,\"balance\":\"`$2,841.15\",\"picture\":\"http://placehold.it/32x32\",\"age\":39,\"eyeColor\":\"blue\",\"name\":{\"first\":\"Leach\",\"last\":\"Campbell\"},\"company\":\"EMOLTRA\",\"email\":\"leach.campbell@emoltra.biz\",\"phone\":\"+1 (864) 412-3166\",\"address\":\"127 Beadel Street, Vivian, Vermont, 1991\",\"about\":\"Ex labore non enim consectetur id ullamco nulla veniam Lorem velit cillum aliqua amet nostrud. Occaecat ipsum do est qui sint aliquip anim culpa laboris tempor amet. Aute sint anim est sint elit amet nisi veniam culpa commodo nostrud cupidatat in ex.\",\"registered\":\"Monday, August 25, 2014 4:04 AM\",\"latitude\":\"-12.814443\",\"longitude\":\"75.880149\",\"tags\":[\"pariatur\",\"voluptate\",\"sint\",\"Lorem\",\"eiusmod\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Lester Bender\"},{\"id\":1,\"name\":\"Concepcion Jarvis\"},{\"id\":2,\"name\":\"Elsie Whitfield\"}],\"greeting\":\"Hello, Leach! You have 10 unread messages.\",\"favoriteFruit\":\"strawberry\"},{\"_id\":\"5cdab57e8cd0ac577ab534a4\",\"index\":1,\"guid\":\"0be10c87-6ce7-46c4-8dd6-23b1d9827538\",\"isActive\":false,\"balance\":\"`$1,049.56\",\"picture\":\"http://placehold.it/32x32\",\"age\":33,\"eyeColor\":\"green\",\"name\":{\"first\":\"Lacey\",\"last\":\"Terrell\"},\"company\":\"XSPORTS\",\"email\":\"lacey.terrell@xsports.tv\",\"phone\":\"+1 (858) 511-2896\",\"address\":\"850 Franklin Street, Gordon, Virginia, 4968\",\"about\":\"Eiusmod nostrud mollit occaecat Lorem consectetur enim pariatur qui eu. Proident aliqua sunt incididunt Lorem adipisicing ea esse do ullamco excepteur duis qui. Irure labore cillum aliqua officia commodo incididunt esse ad duis ea. Occaecat officia officia laboris veniam id dolor minim magna ut sit. Aute quis occaecat eu veniam. Quis exercitation mollit consectetur magna officia sit. Irure ullamco laborum cillum dolore mollit culpa deserunt veniam minim sunt.\",\"registered\":\"Monday, February 3, 2014 9:19 PM\",\"latitude\":\"-82.240949\",\"longitude\":\"2.361739\",\"tags\":[\"nostrud\",\"et\",\"non\",\"eiusmod\",\"qui\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Meyers Dillard\"},{\"id\":1,\"name\":\"Jacobson Franco\"},{\"id\":2,\"name\":\"Hunt Hernandez\"}],\"greeting\":\"Hello, Lacey! You have 8 unread messages.\",\"favoriteFruit\":\"apple\"},{\"_id\":\"5cdab57eae2f9bc5184f1768\",\"index\":2,\"guid\":\"3c0de017-1c2a-470e-87dc-5a6257e8d9d9\",\"isActive\":true,\"balance\":\"`$3,349.49\",\"picture\":\"http://placehold.it/32x32\",\"age\":20,\"eyeColor\":\"green\",\"name\":{\"first\":\"Knowles\",\"last\":\"Farrell\"},\"company\":\"DAYCORE\",\"email\":\"knowles.farrell@daycore.io\",\"phone\":\"+1 (971) 586-2740\",\"address\":\"150 Bath Avenue, Marion, Oregon, 991\",\"about\":\"Eiusmod sint commodo eu id sunt. Labore esse id veniam ea et laborum. Dolor ad cupidatat Lorem amet. Labore ut commodo amet commodo. Ipsum reprehenderit voluptate non exercitation anim nostrud do. Aute incididunt ad aliquip aute mollit id eu ea. Voluptate ex consequat velit commodo anim proident ea anim magna amet nisi dolore.\",\"registered\":\"Friday, September 28, 2018 7:51 PM\",\"latitude\":\"-11.475201\",\"longitude\":\"-115.967191\",\"tags\":[\"laborum\",\"dolor\",\"dolor\",\"magna\",\"mollit\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Roxanne Griffith\"},{\"id\":1,\"name\":\"Walls Moore\"},{\"id\":2,\"name\":\"Mattie Carney\"}],\"greeting\":\"Hello, Knowles! You have 8 unread messages.\",\"favoriteFruit\":\"strawberry\"},{\"_id\":\"5cdab57e80ff4c4085cd63ef\",\"index\":3,\"guid\":\"dca20009-f606-4b99-af94-ded6cfbbfa38\",\"isActive\":true,\"balance\":\"`$2,742.32\",\"picture\":\"http://placehold.it/32x32\",\"age\":26,\"eyeColor\":\"brown\",\"name\":{\"first\":\"Ila\",\"last\":\"Hardy\"},\"company\":\"OBLIQ\",\"email\":\"ila.hardy@obliq.ca\",\"phone\":\"+1 (996) 556-2855\",\"address\":\"605 Hillel Place, Herald, Delaware, 9670\",\"about\":\"Enim eiusmod laboris amet ex laborum do dolor qui occaecat ex do labore quis sunt. Veniam magna non nisi ipsum occaecat anim ipsum consectetur ex laboris aute ut consectetur. Do eiusmod tempor dolore eu in dolore qui anim non et. Minim amet exercitation in in velit proident sint aliqua Lorem reprehenderit labore exercitation.\",\"registered\":\"Friday, April 21, 2017 6:33 AM\",\"latitude\":\"64.864232\",\"longitude\":\"-163.200794\",\"tags\":[\"tempor\",\"eiusmod\",\"mollit\",\"aliquip\",\"aute\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Duncan Guy\"},{\"id\":1,\"name\":\"Jami Maxwell\"},{\"id\":2,\"name\":\"Gale Hutchinson\"}],\"greeting\":\"Hello, Ila! You have 7 unread messages.\",\"favoriteFruit\":\"banana\"},{\"_id\":\"5cdab57ef1556326f77730f0\",\"index\":4,\"guid\":\"f2b3bf60-652f-414c-a5cf-094678eb319f\",\"isActive\":true,\"balance\":\"`$2,603.20\",\"picture\":\"http://placehold.it/32x32\",\"age\":27,\"eyeColor\":\"brown\",\"name\":{\"first\":\"Turner\",\"last\":\"King\"},\"company\":\"DADABASE\",\"email\":\"turner.king@dadabase.co.uk\",\"phone\":\"+1 (803) 506-2511\",\"address\":\"915 Quay Street, Hinsdale, Texas, 9573\",\"about\":\"Consequat sunt labore tempor anim duis pariatur ad tempor minim sint. Nulla non aliqua veniam elit officia. Ullamco et irure mollit nulla do eiusmod ullamco. Aute officia elit irure in adipisicing et cupidatat dolor in sint elit dolore labore. Id esse velit nisi culpa velit adipisicing tempor sunt. Eu sunt occaecat ex pariatur esse.\",\"registered\":\"Thursday, May 21, 2015 7:44 PM\",\"latitude\":\"88.502961\",\"longitude\":\"-119.654437\",\"tags\":[\"Lorem\",\"culpa\",\"labore\",\"et\",\"nisi\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Leanne Lawson\"},{\"id\":1,\"name\":\"Jo Shepard\"},{\"id\":2,\"name\":\"Effie Barnes\"}],\"greeting\":\"Hello, Turner! You have 6 unread messages.\",\"favoriteFruit\":\"apple\"},{\"_id\":\"5cdab57e248f8196e1a60d05\",\"index\":5,\"guid\":\"875a12f0-d36a-4e7b-aaf1-73f67aba83f8\",\"isActive\":false,\"balance\":\"`$1,001.89\",\"picture\":\"http://placehold.it/32x32\",\"age\":38,\"eyeColor\":\"blue\",\"name\":{\"first\":\"Petty\",\"last\":\"Langley\"},\"company\":\"NETUR\",\"email\":\"petty.langley@netur.net\",\"phone\":\"+1 (875) 505-2277\",\"address\":\"677 Leonard Street, Ticonderoga, Utah, 1152\",\"about\":\"Nisi do quis sunt nisi cillum pariatur elit dolore commodo aliqua esse est aute esse. Laboris esse mollit mollit dolor excepteur consequat duis aute eu minim tempor occaecat. Deserunt amet amet quis adipisicing exercitation consequat deserunt sunt voluptate amet. Ad magna quis nostrud esse ullamco incididunt laboris consectetur.\",\"registered\":\"Thursday, July 31, 2014 5:16 PM\",\"latitude\":\"-57.612396\",\"longitude\":\"103.91364\",\"tags\":[\"id\",\"labore\",\"deserunt\",\"cillum\",\"culpa\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Colette Mullen\"},{\"id\":1,\"name\":\"Lynnette Tanner\"},{\"id\":2,\"name\":\"Vickie Hardin\"}],\"greeting\":\"Hello, Petty! You have 9 unread messages.\",\"favoriteFruit\":\"banana\"},{\"_id\":\"5cdab57e4df76cbb0db9be43\",\"index\":6,\"guid\":\"ee3852fe-c597-4cb6-a336-1466e8978080\",\"isActive\":true,\"balance\":\"`$3,087.87\",\"picture\":\"http://placehold.it/32x32\",\"age\":33,\"eyeColor\":\"brown\",\"name\":{\"first\":\"Salas\",\"last\":\"Young\"},\"company\":\"PLAYCE\",\"email\":\"salas.young@playce.org\",\"phone\":\"+1 (976) 473-2919\",\"address\":\"927 Elm Place, Terlingua, North Carolina, 2150\",\"about\":\"Laborum laboris ullamco aliquip occaecat fugiat sit ex laboris veniam tempor tempor. Anim quis veniam ad commodo culpa irure est esse laboris. Fugiat nostrud elit mollit minim. Velit est laborum ut quis anim velit aute enim culpa amet ipsum.\",\"registered\":\"Thursday, October 1, 2015 10:59 AM\",\"latitude\":\"-57.861212\",\"longitude\":\"69.823065\",\"tags\":[\"eu\",\"est\",\"et\",\"proident\",\"nisi\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Day Solomon\"},{\"id\":1,\"name\":\"Stevens Boyd\"},{\"id\":2,\"name\":\"Erika Mayer\"}],\"greeting\":\"Hello, Salas! You have 10 unread messages.\",\"favoriteFruit\":\"apple\"},{\"_id\":\"5cdab57ed3c91292d30e141d\",\"index\":7,\"guid\":\"ef7c0beb-8413-4f39-987f-022c4e8ec482\",\"isActive\":false,\"balance\":\"`$2,612.45\",\"picture\":\"http://placehold.it/32x32\",\"age\":36,\"eyeColor\":\"brown\",\"name\":{\"first\":\"Gloria\",\"last\":\"Black\"},\"company\":\"PULZE\",\"email\":\"gloria.black@pulze.me\",\"phone\":\"+1 (872) 513-2364\",\"address\":\"311 Guernsey Street, Hatteras, New Mexico, 2241\",\"about\":\"Laborum sunt exercitation ea labore ullamco dolor pariatur laborum deserunt adipisicing pariatur. Officia velit duis cupidatat eu officia magna magna deserunt do. Aliquip cupidatat commodo duis aliquip in aute dolore occaecat esse ad. Incididunt est magna in pariatur ut do ex sit minim cupidatat culpa. Voluptate eu veniam cupidatat exercitation.\",\"registered\":\"Friday, June 26, 2015 7:59 AM\",\"latitude\":\"38.644208\",\"longitude\":\"-45.481555\",\"tags\":[\"sint\",\"ea\",\"anim\",\"voluptate\",\"elit\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Abby Walton\"},{\"id\":1,\"name\":\"Elsa Miranda\"},{\"id\":2,\"name\":\"Carr Abbott\"}],\"greeting\":\"Hello, Gloria! You have 5 unread messages.\",\"favoriteFruit\":\"strawberry\"},{\"_id\":\"5cdab57edc91491fb70b705d\",\"index\":8,\"guid\":\"631ff8a0-ce4c-4111-b1e4-1d112f4ecdc7\",\"isActive\":false,\"balance\":\"`$2,550.70\",\"picture\":\"http://placehold.it/32x32\",\"age\":25,\"eyeColor\":\"brown\",\"name\":{\"first\":\"Deirdre\",\"last\":\"Huber\"},\"company\":\"VERBUS\",\"email\":\"deirdre.huber@verbus.info\",\"phone\":\"+1 (871) 468-3420\",\"address\":\"814 Coles Street, Bartonsville, Tennessee, 7313\",\"about\":\"Ipsum ex est culpa veniam voluptate officia consectetur quis et irure proident pariatur non. In excepteur est aliqua duis duis. Veniam consectetur cupidatat reprehenderit qui qui aliqua.\",\"registered\":\"Monday, April 1, 2019 2:33 AM\",\"latitude\":\"-75.702323\",\"longitude\":\"45.165458\",\"tags\":[\"labore\",\"aute\",\"nisi\",\"laborum\",\"laborum\"],\"range\":[0,1,2,3,4,5,6,7,8,9],\"friends\":[{\"id\":0,\"name\":\"Genevieve Clarke\"},{\"id\":1,\"name\":\"Black Sykes\"},{\"id\":2,\"name\":\"Watson Hudson\"}],\"greeting\":\"Hello, Deirdre! You have 8 unread messages.\",\"favoriteFruit\":\"strawberry\"}]\r\n\"@\r\n)\r\n```\r\n\r\nSystem.Diagnostics.Process does have limitations in when used, that's why I had to write my own runner with abilities to capture STDOUT STDERR and combination of then into variables, which is sufficient for my use cases, but not perfect.\r\n\r\n**Edit:** like you said its goes seems have edge cases in Windows Poweshell 5. I tested on Powershell 6 and it works great! unfortunately i have to deal with  Poweshell 5 until 7 takes it over in Windows case...",
    "created_at": "2019-12-06T03:00:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562411883",
    "id": 562411883,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQxMTg4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562411883/reactions"
    },
    "updated_at": "2019-12-06T03:16:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562411883",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Impressive, but here are couple that does not work for me on windows:\r\n\r\nYes, these limitations apply to _Windows PowerShell_, with executables for which support for `\"\"` escaping of embedded `\"` cannot be assumed, as detailed in my previous comment.\r\nIf you're willing to assume support for `\"\"` escaping in all of your invocations (_most_, but not all executables on Windows do support it), you can easily tweak the function.\r\n\r\nAnd, to confirm what you said in your edit: In PowerShell _Core_:\r\n\r\n* `iep echoargs 'somekey=\"value with spaces\"' 'te\\\" st'` works fine.\r\n* Your test array of arguments seem to work fine too.\r\n\r\n",
    "created_at": "2019-12-06T03:26:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562416916",
    "id": 562416916,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQxNjkxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562416916/reactions"
    },
    "updated_at": "2019-12-06T03:27:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562416916",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> If you're willing to assume support for `\"\"` escaping in all of your invocations (_most_, but not all executables on Windows do support it), you can easily tweak the function.\r\n\r\nThanks I will give it a try in near future. I deal with sqlcmd on occasion and it does not support `\"\"` for sure. For that case - its easy to provide an option to skip escape logic for specific arguments.",
    "created_at": "2019-12-06T03:35:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562418555",
    "id": 562418555,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQxODU1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562418555/reactions"
    },
    "updated_at": "2019-12-06T03:35:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/562418555",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "NONE",
    "body": "The way how Windows parses command-line arguments can be found at [Parsing C++ command-Line arguments](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments):\r\n\r\n> Microsoft C/C++ startup code uses the following rules when interpreting arguments given on the operating system command line:\r\n> \r\n> - Arguments are delimited by white space, which is either a space or a tab.\r\n> \r\n> - The caret character (^) is not recognized as an escape character or delimiter. The character is handled completely by the command-line parser in the operating system before being passed to the `argv` array in the program.\r\n> \r\n> - A string surrounded by double quotation marks (\"*string*\") is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.\r\n> \r\n> - A double quotation mark preceded by a backslash (\\\\\") is interpreted as a literal double quotation mark character (\").\r\n> \r\n> - Backslashes are interpreted literally, unless they immediately precede a double quotation mark.\r\n> \r\n> - If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.\r\n> \r\n> - If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the `argv` array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash, causing a literal double quotation mark (\") to be placed in `argv`.\r\n\r\nThis is also discussed at [_exec, _wexec Functions](https://docs.microsoft.com/en-us/cpp/c-runtime-library/exec-wexec-functions?view=vs-2019):\r\n\r\n> Spaces embedded in strings may cause unexpected behavior; for example, passing `_exec` the string `\"hi there\"` will result in the new process getting two arguments, `\"hi\"` and `\"there\"`. If the intent was to have the new process open a file named \"hi there\", the process would fail. You can avoid this by quoting the string: `\"\\\"hi there\\\"\"`.\r\n\r\n### How Python calls native executables\r\n\r\nPython's [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen) can handle escaping correctly by converting `args` to a string in a manner described in [Converting an argument sequence to a string on Windows](https://docs.python.org/3/library/subprocess.html#converting-argument-sequence). The implementation is [`subprocess.list2cmdline`](https://github.com/python/cpython/blob/1def7754b7a41fe57efafaf5eff24cfa15353444/Lib/subprocess.py#L529).\r\n\r\nHope this can shed some light on how PowerShell can handle this in a more elegant manner, instead of using `--%` or double escaping (following both PowerShell and CMD syntax). The current workarounds really bug Azure CLI (which is based on python.exe) customers.\r\n\r\n",
    "created_at": "2020-06-03T03:54:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-637936870",
    "id": 637936870,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkzNjg3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/637936870/reactions"
    },
    "updated_at": "2020-06-03T03:54:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/637936870",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "NONE",
    "body": "We still don't have a clear and concise method to understand how to handle this issue. Can anyone from the Powershell team shed light if this is simplified with v7?",
    "created_at": "2020-06-04T21:36:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-639132198",
    "id": 639132198,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTEzMjE5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/639132198/reactions"
    },
    "updated_at": "2020-06-04T21:36:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/639132198",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4319522?v=4",
      "events_url": "https://api.github.com/users/musm/events{/privacy}",
      "followers_url": "https://api.github.com/users/musm/followers",
      "following_url": "https://api.github.com/users/musm/following{/other_user}",
      "gists_url": "https://api.github.com/users/musm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/musm",
      "id": 4319522,
      "login": "musm",
      "node_id": "MDQ6VXNlcjQzMTk1MjI=",
      "organizations_url": "https://api.github.com/users/musm/orgs",
      "received_events_url": "https://api.github.com/users/musm/received_events",
      "repos_url": "https://api.github.com/users/musm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/musm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/musm"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Well, the good news is that one of the focuses for PS 7.1 is to make it easier to invoke native commands.  From a [blog post on 7.1 investments](https://devblogs.microsoft.com/powershell/powershell-7-1-team-investments-and-preview-1-release/):\r\n\r\n> Most native commands work just fine from within PowerShell, however, there are some cases where the argument parsing is not ideal (like handling quotes properly). The intent is to enable users to cut sample command lines for any popular native tool, paste it into PowerShell, and it just works without needing PowerShell specific escaping.\r\n\r\nSo maybe (hopefully) this will get addressed in 7.1",
    "created_at": "2020-06-07T17:50:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-640255068",
    "id": 640255068,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDI1NTA2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/640255068/reactions"
    },
    "updated_at": "2020-06-07T17:50:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/640255068",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @rkeithhill, but doesn't:\r\n\r\n> The intent is to enable users to cut sample command lines for any popular native tool, paste it into PowerShell, and it just works without needing PowerShell specific escaping.\r\n\r\nsound like another take on the inherently conceptually problematic `--%` (stop-parsing symbol)?\r\n\r\n@SteveL-MSFT, can you tell us more about this upcoming feature?\r\n\r\n---\r\n\r\nTo recap, the fix proposed here is that all you need to focus on is to satisfy _PowerShell_'s syntax requirements and that PowerShell takes care of all escaping _behind the scenes_ (on Windows; on Unix this is not even necessary anymore, now that .NET allows us to pass an array of verbatim tokens to the target program) - but there's no doubt that the fix would have to be opt-in, if backward compatibility must be maintained.\r\n\r\n**With this fix, _some_ fiddling with command lines for other shells will still be required, but it will be more straightforward** - and, compared to `--%`,  you retain the full power of PowerShell's syntax and variable expansions (expressions with `(...)`, redirections, ...):\r\n\r\n* You need to replace `\\\"` with `` `\" ``, but _only inside `\"...\"`_.\r\n\r\n* You need to be aware that _no (other) shell_ is involved, so that Bash-style environment-variable references such as `$USER` will _not_ work (they will be interpreted as _PowerShell_ variables), unless you replace them with the equivalent PowerShell syntax, `$env:USER`. \r\n  * As an aside: `--%` tries to compensate for that by - notably _invariably_ - expanding `cmd.exe`-style environment-variable references such as `%USERNAME%`, but note that it not only doesn't support Bash-style references (`$USER`) is passed _verbatim_ to the target program, but also unexpectedly expands `cmd.exe`-style references on Unix-like platforms, and doesn't recognize `'...'`-quoting.\r\n * See below for an alternative that _does_ involve the respective platform-native shell.\r\n\r\n* You need to be aware that PowerShell has _additional_ metacharacters that require quoting/escaping for verbatim use; these are (note that `@` is only problematic as an argument's _first_ char.):\r\n  * for POSIX-like shells (e.g., Bash): `` @  { } ` `` (and `$`, if you want to prevent up-front expansion by PowerShell)\r\n  * for `cmd.exe`: `` ( ) @ { } # ` ``\r\n  * Individually `` ` ``-escaping such chars. is sufficient (e.g., `` printf %s `@list.txt ``).\r\n\r\nA somewhat contrived example:\r\n\r\nTake the following Bash command line:\r\n\r\n```bash\r\n# Bash\r\n$ printf '\"%s\"\\n' \"3\\\" of snow\"\r\n\"3\" of snow\"        # output\r\n```\r\n\r\nWith the proposed fix in place , all that is needed is to replace the `\\\"` instances inside the `\"...\"`-enclosed argument with `` `\" ``:\r\n\r\n```powershell\r\n# PowerShell - WISHFUL THINKING\r\nPS> printf '\"%s\"\\n' \"3`\" of snow\"\r\n\"3\" of snow\"        # output\r\n```\r\n\r\nThat is, you wouldn't need to worry about embedded `\"` inside `'...'`, and inside `\"...\"` you only need to escape them to make _PowerShell_ happy (which you could also do with `\"\"` here).\r\n\r\nThe [above `iep` function](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606) implements this fix (as a stopgap), so that ``iep printf '\"%s\"\\n' \"3`\" of snow\" `` works as intended.\r\n\r\n---\r\n\r\nContrast this with the current, broken behavior, where you need to jump through the following hoops to get the command to work as in Bash (inexplicably need for an _additional_ round of escaping with `\\`):\r\n\r\n```powershell\r\n# PowerShell - messy workaround to compensate for the current, broken behavior.\r\nPS> printf '\\\"%s\\\"\\n' \"3\\`\" of snow\"\r\n\"3\" of snow\"        # output\r\n```\r\n\r\n---\r\n\r\nWith the fix in place, **those who want to use a given command line _as-is_ via the platform's _default shell_, will be able to use a verbatim _here-string_ to pass to `sh -c` (or `bash -c`) / `cmd /c`**; e.g.:\r\n\r\n```powershell\r\n# PowerShell - WISHFUL THINKING\r\nPS> sh -c @'\r\nprintf '\"%s\"\\n' \"3\\\" of snow\"\r\n'@\r\n\"3\" of snow\"  # output\r\n```\r\n\r\nNote that use of `--%` does _not_ work here (`printf --% '\"%s\"\\n' \"3\\\" of snow\"`), and the added advantage of the here-string-based approach is that the various `--%` limitations don't apply, notably the inability to use an output redirection (`>`).\r\n\r\nIf you switch to a _double_-quoted here-string (`@\"<newline>....<newline>\"@`), you can even embed _PowerShell variables and expressions_, unlike with `--%`; however, you then need to make sure that the expanded values don't break the syntax of the target shell.\r\n\r\n**We can think about a dedicated cmdlet with a succinct alias (e.g, `Invoke-NativeShell` / `ins`)** for such calls (so that `sh -c` / `cmd /c` needn't be specified), but in order to pass complex command lines as-is, I don't think a way around using here-strings:\r\n\r\n```powershell\r\n# PowerShell - WISHFUL THINKING\r\n# Passes the string to `sh -c` / `cmd /c` for execution, as appropriate.\r\n# Short alias: ins\r\nPS> Invoke-NativeShell @'\r\nprintf '\"%s\"\\n' \"3\\\" of snow\"\r\n'@\r\n\"3\" of snow\"  # output\r\n```\r\n\r\n**Of course, if you're relying on features of the platform-native shell, such calls will by definition be platform[-family]-specific** - they won't work on _both_ Windows and Unix-like platforms.\r\n\r\n**This is the reason why relying on PowerShell _alone_, with its _own syntax_ is preferable in the long run**: it provides a predictable cross-platform experience for calling external programs - even if that means that you cannot use command lines crafted for other shells as-is; as PowerShell gains in popularity, I expect the pain of discovering and knowing the required modifications to lessen, and I expect more and more documentation to show the PowerShell versions of command lines (too).\r\n\r\n\r\n\r\n",
    "created_at": "2020-06-08T15:45:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-640711192",
    "id": 640711192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDcxMTE5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/640711192/reactions"
    },
    "updated_at": "2020-06-24T20:31:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/640711192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> * You need to replace `\\\"` with `` `\" ``, but _only inside `\"...\"`_.\r\n\r\nThis does not work everywhere.\r\n\r\n```powershell\r\n# working everywhere but polluted with \\\r\n❯ node -e 'console.log(\\\"hey\\\")'\r\nhey\r\n\r\n# working in Node:\r\n❯ node -e 'console.log(`\"hey`\")'\r\nhey\r\n\r\n# not working in Julia:\r\n❯ julia -e 'print(`\"hey`\")'\r\n`hey`\r\n\r\n# not working anywhere:\r\n❯ node -e \"console.log(`\"hey`\")\"\r\n❯ node -e \"console.log(\"hey\")\"\r\n❯ node -e \"console.log(\"\"hey\"\")\"\r\n❯ node -e 'console.log(\"\"hey\"\")'\r\n```\r\n\r\n# Bash syntax:\r\n```\r\n❯ node -e 'console.log(\"hey\")'\r\nhey\r\n```\r\n\r\n# Powershell Suggestion:\r\n\r\nIf PowerShell team is just looking for a symbol, that does not break the previous syntax, why just not use something like a backticks ` for a Bash like behavior, which escapes literals automatically, and allows string interpolation. This is similar to JavaScript's syntax too.\r\n```\r\n❯ node -e `console.log(\"hey\")`\r\nhey\r\n\r\n❯ $a=hey \r\n❯ node -e `console.log($hey)`\r\nhey\r\n```",
    "created_at": "2020-06-24T19:22:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649018390",
    "id": 649018390,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTAxODM5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649018390/reactions"
    },
    "updated_at": "2020-06-24T19:30:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649018390",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "NONE",
    "body": "> why just not use something like a backticks ` for a Bash like behavior\r\n\r\nBackticks are already used for escaping stuff, the same purpose as backslahes in POSIX shell. The comment you are referring to already points that out. We have used up all the ASCII quote-like stuff. Adding a `$` prefix to normal string literals might work, but I don't think it makes enough sense.\r\n\r\n* * *\r\n\r\n> The way how Windows parses command-line arguments can be found at...\r\n\r\nThe problem is that Windows MSVCR doesn't just do that: it handles corner cases [in undocumented ways](http://daviddeley.com/autohotkey/parameters/parameters.htm#WINCRULESCHANGE). The `\"\"` stuff is so solidly set that they even put it into CoreFX when they ported .NET to Unix. But anyway, it's always good enough for escaping, at least until someone asks for globbing. \r\n\r\nThere's also the classic problem of everyone doing it differently, but we don't need to worry about that because we always have .NET for raw cmdline.",
    "created_at": "2020-06-24T20:14:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649046074",
    "id": 649046074,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTA0NjA3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649046074/reactions"
    },
    "updated_at": "2020-06-24T20:30:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649046074",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > why just not use something like a backticks ` for a Bash like behavior\r\n> \r\n> Backticks are already used for escaping stuff, the same purpose as backslahes in POSIX shell. We have used up all the ASCII quote-like stuff.\r\n\r\nThere is a possibility to use a combination of symbols if the parser is not able to detect that here \\` is introducing a string. Something like `''` might even work. ",
    "created_at": "2020-06-24T20:31:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649054716",
    "id": 649054716,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTA1NDcxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649054716/reactions"
    },
    "updated_at": "2020-06-24T20:31:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649054716",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "NONE",
    "body": "@aminya here is a solution is you are not using old windows Powershell 5.1 and on 6+:\r\nhttps://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606\r\n\r\nAs I have to deal with PowerShell 5,1 on windows and 6+ on linux/mac, I have my own implementation that been working without issues for years that allows be to work with tools like kubectl, helm, terraform and others passing complex JSON objects within parameters:\r\nhttps://github.com/choovick/ps-invoke-externalcommand\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/3503712?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/choovick/ps-invoke-externalcommand\">choovick/ps-invoke-externalcommand</a></strong></div><div>Contribute to choovick/ps-invoke-externalcommand development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2020-06-24T20:40:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649059585",
    "id": 649059585,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTA1OTU4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649059585/reactions"
    },
    "updated_at": "2020-06-24T20:40:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649059585",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "NONE",
    "body": "@choovick somewhat shorter implementation was given [above in this thread](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303345059), I'm still to find a case where it would fail for me. This works in PS starting from v3.",
    "created_at": "2020-06-25T03:35:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649195068",
    "id": 649195068,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTE5NTA2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649195068/reactions"
    },
    "updated_at": "2020-06-25T03:35:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649195068",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/658865?v=4",
      "events_url": "https://api.github.com/users/AndrewSav/events{/privacy}",
      "followers_url": "https://api.github.com/users/AndrewSav/followers",
      "following_url": "https://api.github.com/users/AndrewSav/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndrewSav/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/AndrewSav",
      "id": 658865,
      "login": "AndrewSav",
      "node_id": "MDQ6VXNlcjY1ODg2NQ==",
      "organizations_url": "https://api.github.com/users/AndrewSav/orgs",
      "received_events_url": "https://api.github.com/users/AndrewSav/received_events",
      "repos_url": "https://api.github.com/users/AndrewSav/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/AndrewSav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndrewSav/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/AndrewSav"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@AndrewSav [@TSlivede's `Run-Native` function](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303345059) is very clever and concise, and commendably also works reliably in _Windows PowerShell_; a few things worth noting: of necessity, the child process sees the aux. `commandlineargumentstring` environment variable (probably rarely, if ever, a problem in practice), argument-less invocations are currently not handled correctly (easily fixed and not even a problem, if you make sure that you only ever use the function _with_ arguments, which is what it is for), _all_ arguments get double-quoted (e.g., something like `42` is passed as `\"42\"`), which on Windows can (unfortunately) have side effects for programs that interpret double-quoted (or partially double-quoted, as in the `msiexec` case) arguments differently.\r\n\r\n@aminya, the only reason that ``node -e 'console.log(`\"hey`\")'`` (sort of) works is because of the current, broken behavior (see below). I assume what you meant to pass was _verbatim_ `console.log(\"hey\")`, which, if PowerShell on Windows escaped things correctly as proposed here, you would pass as-is in single quotes: `node -e 'console.log(\"hey\")'`. This  should _automatically_ be translated to `node -e \"console.log(\\\"hey\\\")\"` (double-quoting, `\\`-escaped verbatim `\"`) _behind the scenes_. \r\n\r\nGiven how long this thread has become, let me try to recap: \r\nYou should only ever have to worry about _PowerShell_'s syntax requirements, and it is PowerShell's job _as a shell_ to ensure that the _verbatim argument values_ that result from PowerShell's own parsing are passed to the external program _as-is_. \r\n* On Unix-like platforms, now that we have .NET Core support for it, doing this is trivial, as the verbatim values can just be passed as-is as the elements of an _array_ of arguments, which is how programs natively receive arguments there. \r\n* On Windows, external programs receive arguments as a _single command-line string_ (a regrettable historical design decision) and must perform their own command-line parsing. Passing multiple arguments as part of a single string necessitates quoting and parsing rules in order to properly delineate arguments; while this is ultimately a free-for-all (programs are free to parse however they like), the most widely used syntax convention (as stated before and also proposed in the unfortunately [now abandoned RFC](https://github.com/PowerShell/PowerShell-RFC/pull/90#issuecomment-639742573)) is [what Microsoft's C/C++ compilers implement](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args), so it makes sense to go with that.\r\n  * _Update_: Even on Windows we can take advantage of the collection-of-verbatim-tokens [`ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList) property of `System.Diagnostics.ProcessStartInfo` in .NET Core: on Windows it is automatically translated to a properly quoted and escaped command-line string when the process is started; however, for _batch files_ we may still need special handling - see https://github.com/PowerShell/PowerShell-RFC/pull/90#issuecomment-552231174\r\n  \r\nImplementing the above is undoubtedly a massive breaking change, so it presumably requires an opt-in.\r\nI think that going ahead with this is a must, if we want to git rid of all the current quoting headaches, which keep coming up  and hamper PowerShell adoption, especially in the Unix world.\r\n\r\n---\r\n\r\nAs for  ``node -e 'console.log(`\"hey`\")'``: inside `'...'`, don't use `` ` `` - unless you want that character to be passed through as-is. Because PowerShell currently _doesn't_ escape the verbatim `\"` chars. in your argument as `\\\"` behind the scenes, what `node` sees on the command line is ``console.log(`\"hey`\")``, which is parsed as two directly adjacent string literals: unquoted `` console.log(` `` and double-quoted `` \"hey`\" ``. After stripping the `\"`, which have _syntactic_ function due to not being `\\`-escaped, the JavaScript code getting executed is ultimately ``console.log(`hey`)``, and that only happens to work because a `` `....` `` enclosed token is a form of string literal in JavaScript, namely a  _template literal_.\r\n",
    "created_at": "2020-06-25T14:00:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649560892",
    "id": 649560892,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTU2MDg5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649560892/reactions"
    },
    "updated_at": "2020-06-25T21:25:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649560892",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@AndrewSav I have tested with my crazy test object and it did worked for me! Very elegant solution, tested on Windows 5.1 and PS 7 on linux. I'm ok with having everything double quoted, I don't deal with `msiexec` or `sqlcmd` also known to treat `\"` explicitly.\r\n\r\nMy personal implementation also has simple escape logic similar to one you mention: https://github.com/choovick/ps-invoke-externalcommand/blob/master/ExternalCommand/ExternalCommand.psm1#L278\r\n\r\nbut I have wrote bunch of code to display and capture STDOUT and STDERR threads in realtime within that module... It probably can be greatly simplified, but I had no need...\r\n\r\n@mklement0 this thread will never end (: We either need to provide published PowerShell module in the ps gallery that will suite most use cases and will be simple enough to use, or wait for upcoming shell improvements.\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/3503712?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/choovick/ps-invoke-externalcommand\">choovick/ps-invoke-externalcommand</a></strong></div><div>Contribute to choovick/ps-invoke-externalcommand development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2020-06-25T20:10:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649792200",
    "id": 649792200,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTc5MjIwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649792200/reactions"
    },
    "updated_at": "2020-06-25T20:10:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649792200",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "NONE",
    "body": "> @mklement0 this thread will never end (: We either need to provide published PowerShell module in the ps gallery that will suite most use cases and will be simple enough to use, or wait for upcoming shell improvements.\r\n> \r\n\r\nIf the PowerShell team decides to not fix this in the program itself, I would then say that a shell that cannot run external programs natively and correctly will not be the shell of my choice! These are the basic stuff that are missing from PowerShell.",
    "created_at": "2020-06-25T20:20:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649796773",
    "id": 649796773,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTc5Njc3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649796773/reactions"
    },
    "updated_at": "2020-06-25T20:20:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/649796773",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "NONE",
    "body": "@aminya yea, I found it that issue is very annoying myself when I had to move to it. But features like below made it worth it.\r\n\r\n- Flexible parameters framework, easy to build reliable CMDlets.\r\n- Modules and internal modules repositories to share common logic across organization, avoiding a lot of code duplication and centralization of core functionality that can be refactored in once place.\r\n- Cross platform. I have folks running my tools on Windows in PS 5.1, and on linux/mac in PS 6/7\r\n\r\nI really hope to PS team improves this in the future to make it less convoluted.",
    "created_at": "2020-06-26T12:45:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-650159092",
    "id": 650159092,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDE1OTA5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650159092/reactions"
    },
    "updated_at": "2020-06-26T12:45:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650159092",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3503712?v=4",
      "events_url": "https://api.github.com/users/choovick/events{/privacy}",
      "followers_url": "https://api.github.com/users/choovick/followers",
      "following_url": "https://api.github.com/users/choovick/following{/other_user}",
      "gists_url": "https://api.github.com/users/choovick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/choovick",
      "id": 3503712,
      "login": "choovick",
      "node_id": "MDQ6VXNlcjM1MDM3MTI=",
      "organizations_url": "https://api.github.com/users/choovick/orgs",
      "received_events_url": "https://api.github.com/users/choovick/received_events",
      "repos_url": "https://api.github.com/users/choovick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/choovick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/choovick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/choovick"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Implementing the above is undoubtedly a massive breaking change, so it presumably requires an opt-in.\r\n\r\nDo you mean implementing https://github.com/PowerShell/PowerShell-RFC/pull/90?",
    "created_at": "2020-06-26T13:48:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-650189718",
    "id": 650189718,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDE4OTcxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650189718/reactions"
    },
    "updated_at": "2020-06-26T13:48:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650189718",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@aminya, I agree that calling external programs with arguments is a core mandate of a shell and must function properly.\r\n\r\nA module, as suggested by @choovick, still makes sense for _Windows PowerShell_, which is in security-critical-fixes-only maintenance mode.\r\nComplementarily, if/when the proposed conceptual help topic about calling external programs gets written - see  https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5152 - a helper function that corrects the problems in earlier versions / Windows PowerShell's, such as @TSlivede's above, could be posted there directly.\r\n\r\n@iSazonov Yes, implementing https://github.com/PowerShell/PowerShell-RFC/pull/90 is what I meant.\r\n\r\nAs for the thread never ending and the breaking-change concerns:\r\n\r\nThe last official response to the linked RFC was [this comment by @joeyaiello  from 8 July 2019](https://github.com/PowerShell/PowerShell-RFC/pull/90#issuecomment-509346263) (emphasis added):\r\n\r\n> but we think that this [RFC] **makes a ton of sense irrespective of existing behavior and without regard for the breaking-ness** of it. Now that we have experimental features, we think it's perfectly reasonable to go and implement this today behind an experimental feature flag, and **we can figure out further down the line whether this is opt-in vs. opt-out behavior**, whether there's some transition path, and if a preference variable is the right mechanism for turning it on and off.\r\n\r\n_Personally_, I wouldn't mind fixing the behavior _by default_, even though that it is a breaking change; the RFC indeed proposes that and suggests an opt-in if you want the _old_ (broken) behavior.\r\n\r\nI suspect those with legacy code to maintain will object, however, as _all existing workarounds will cease to function_ - see [above](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606) - and maintaining backward compatibility still seems to be the overarching goal.\r\n\r\nIf the new, fixed behavior is made opt-in, you still have the awkwardness of having to do something just to get the right behavior, but at least existing code won't break.\r\n\r\nBut the existing opt-in mechanisms are themselves problematic:\r\nNow that @KirkMunro's [optional features RFC](https://github.com/PowerShell/PowerShell-RFC/pull/220) has been rejected, that pretty much leaves a _preference variable_, and the challenge there is PowerShell's dynamic scoping: third-party code called  from a scope that opted-in that was not designed to use the new implementation could then break (unless the preference variable is temporarily reset).\r\n\r\n_Lexical_ scoping of the opt-in is required here, which we currently don't have. The [RFC for _lexical_ scoping of strict mode](https://github.com/PowerShell/PowerShell-RFC/issues/7) proposes implementation of a lexically scoped feature (or a different purpose), via a `using` statement (which, notably, is generally _dynamically_ scoped). Following this pattern, a lexically scoped `using ProperExternalArgumentQuoting` statement (the name is a WIP :) - if technically feasible - is worth considering.\r\n\r\nWe need the PowerShell committee to weigh in (again) and to provide clear guidance as to the way forward, with _timely_ feedback on questions as they arise. @SteveL-MSFT?\r\n\r\n---\r\n\r\nNote that a `--%`-like solution hinted at by the 7.1 blog post (see [above](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-640255068)) (which I personally think isn't worth pursuing - see [above](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-640711192) and  [this comment](https://github.com/PowerShell/PowerShell/issues/12975#issuecomment-646276628)), would be a _separate_ feature - fixing PowerShell's native (non-emulation) behavior is still a must.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-06-26T16:09:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-650262164",
    "id": 650262164,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDI2MjE2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 5,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650262164/reactions"
    },
    "updated_at": "2020-06-26T16:09:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650262164",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Personally, I wouldn't mind fixing the behavior by default, even though that it is a breaking change; the RFC indeed proposes that and suggests an opt-in if you want the old (broken) behavior.\r\n\r\n> If the new, fixed behavior is made opt-in, you still have the awkwardness of having to do something just to get the right behavior, but at least existing code won't break.\r\n\r\n\r\n\r\nAgreed, in fact I would argue it makes less sense to have a **broken** default, then a correctly implemented default. Given the fact that the current implementation is in fact a **bug**, the new behavior must be opt-in, not opt-out, since it really doesn't make sense to continue to encourage broken external shell calls that are prone to break in unexpected ways.  In any case,  PowerShell 7 should strive improve over the legacy Windows PowerShell.\r\n",
    "created_at": "2020-06-26T19:47:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-650366053",
    "id": 650366053,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDM2NjA1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650366053/reactions"
    },
    "updated_at": "2020-06-26T19:47:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/650366053",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4319522?v=4",
      "events_url": "https://api.github.com/users/musm/events{/privacy}",
      "followers_url": "https://api.github.com/users/musm/followers",
      "following_url": "https://api.github.com/users/musm/following{/other_user}",
      "gists_url": "https://api.github.com/users/musm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/musm",
      "id": 4319522,
      "login": "musm",
      "node_id": "MDQ6VXNlcjQzMTk1MjI=",
      "organizations_url": "https://api.github.com/users/musm/orgs",
      "received_events_url": "https://api.github.com/users/musm/received_events",
      "repos_url": "https://api.github.com/users/musm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/musm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/musm"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT and I agreed we should close this one in favor of #13068. Anything we touch here is just too much of a breaking change, and we should address the problem with a new operator that serves as an opt-in mode. ",
    "created_at": "2020-07-02T18:42:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653164987",
    "id": 653164987,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE2NDk4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 4,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653164987/reactions"
    },
    "updated_at": "2020-07-02T18:42:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653164987",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "NONE",
    "body": "I absolutely don't see how #13068 would resolve this: If that operator is introduced as intended we still have no way to properly call any native executable with a given array of arguments or with some explicit arguments whose content originates from variables.\r\n\r\nThe example, that @JustinGrote [gave in that thread](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652064173) currently doesn't work reliably (if embedded quotes are possible in the argument payload) and adding that operator will not give any alternative that improves anything.",
    "created_at": "2020-07-02T19:04:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653174261",
    "id": 653174261,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE3NDI2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 4,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653174261/reactions"
    },
    "updated_at": "2020-07-02T19:04:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653174261",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "@joeyaiello Can you at least leave this issue open until that operator actually exists and somebody can show, how that operator would improve anything, that was mentioned in this thread?\r\n\r\nOh and also what about Linux? This issue is stupid and unexpected on Windows, but on Linux it makes even far less sense, especially as there is no loooong history of linux powershell scripts, that will break.",
    "created_at": "2020-07-02T19:07:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653175484",
    "id": 653175484,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE3NTQ4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653175484/reactions"
    },
    "updated_at": "2020-07-02T19:07:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653175484",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  }
]
