[
  {
    "author_association": "COLLABORATOR",
    "body": "It seems the request is to make ValueFromPipelineByPropertyName priority greater then ValueFromPipeline one. It looks like a breaking change/\r\n\r\n@daxian-dbw Thoughts?",
    "created_at": "2019-07-22T10:55:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-513743596",
    "id": 513743596,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzc0MzU5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513743596/reactions"
    },
    "updated_at": "2019-07-22T10:55:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513743596",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think the request is to make them *the same* priority - the parameter binder should select the most appropriate of the possible receiving parameters.",
    "created_at": "2019-07-22T12:15:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-513766428",
    "id": 513766428,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzc2NjQyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513766428/reactions"
    },
    "updated_at": "2019-07-22T12:15:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513766428",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I think the request is to make them _the same_ priority - the parameter binder should select the most appropriate of the possible receiving parameters.\r\n\r\nExactly.\r\n\r\nAnd yes, it looks like this would be breaking. I opened the issue for visibility/discoverability by others, and to at least get people thinking about how this works and thinking about whether or not it's worth it to try to come up with a non-breaking solution (either via an optional feature or something different).",
    "created_at": "2019-07-22T16:15:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-513851262",
    "id": 513851262,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzg1MTI2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513851262/reactions"
    },
    "updated_at": "2019-07-22T16:16:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513851262",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I guess it is here:\r\nhttps://github.com/PowerShell/PowerShell/blob/6b2690ef8e5368344fd2987fcce0629f7a52aa3a/src/System.Management.Automation/engine/CmdletParameterBinderController.cs#L3540-L3567",
    "created_at": "2019-07-23T04:34:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-514050443",
    "id": 514050443,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA1MDQ0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/514050443/reactions"
    },
    "updated_at": "2019-07-23T04:34:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/514050443",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "This issue was bothering me again today. I would bet that it hurts performance when using pipelines too, because of a common design pattern.\r\n\r\nIt is very common to write a command that accepts an object on one parameter set and values that can be used to retrieve that object on other parameter sets.\r\n\r\nIt is also common with that design pattern to set the default parameter set as one of the parameter sets that accepts a value that can be used to retrieve an object, so that users are prompted to enter that value if they invoke the command with no parameters. This is actually a requirement if you want to support automatic prompting for user input because unless you use a transformation attribute, users cannot input an object instance when they are prompted for one.\r\n\r\nIf you follow that design pattern, then even when you pass in the actual object you want to modify, the command will go look up the object again, which could be expensive.\r\n\r\nHere's how you can see this in action.\r\n\r\n1. Define this function:\r\n\r\n    ```PowerShell\r\n    function Test-ParameterBinder {\r\n        [CmdletBinding(DefaultParameterSetName='ByPropertyName')]\r\n        param(\r\n            [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByPropertyName')]\r\n            [ValidateRange(1,[int]::MaxValue)]\r\n            [int]\r\n            $Id,\r\n\r\n            [Parameter(Mandatory, ValueFromPipeline, ParameterSetName='ByValue')]\r\n            [ValidateNotNull()]\r\n            [System.Diagnostics.Process]\r\n            $Process\r\n        )\r\n        begin {\r\n            \"Bound parameter set in begin: $($PSCmdlet.ParameterSetName)\"\r\n        }\r\n        process {\r\n            \"Bound parameter set in process: $($PSCmdlet.ParameterSetName)\"\r\n        }\r\n    }\r\n    ```\r\n\r\n    That function uses the common design pattern that I was talking about. One command that takes pipeline input by value or by property name, with the default parameter set configured to allow users to invoke the command successfully even if they don't provide any pipeline input or parameters. In this case, they would be prompted for an ID and could enter a process ID to make it work.\r\n\r\n1. Now let's run that function a few times.\r\n\r\n    ```PowerShell\r\n    $p = Get-Process -Id $pid\r\n    $p | Test-ParameterBinder\r\n    [pscustomobject]@{Id=$PID} | Test-ParameterBinder\r\n    ```\r\n\r\n    This outputs the following from the first invocation:\r\n\r\n    ```none\r\n    Bound parameter set in begin: ByPropertyName\r\n    Bound parameter set in process: ByPropertyName\r\n    ```\r\n\r\n    It also outputs the following from the second invocation:\r\n\r\n    ```none\r\n    Bound parameter set in begin: ByPropertyName\r\n    Bound parameter set in process: ByPropertyName\r\n    ```\r\n\r\n    The problem is very clear here: even when you pipe in the actual object you want to work with, the `ByPropertyName` parameter set is bound to the invocation, which would very often result in lookup of the object that you had in the first place. Some function authors work around this by actually looking at `$_` in the process block of a function, checking if it is the object type they need, and if so, just grabbing it to avoid the extra lookup. I've done this a lot in the past to try to keep things performant. That approach does not work in cmdlets though, and in either case if you pipe in an object and there is a `ValueFromPipeline` parameter in one of the possible parameter sets that matches the type exactly, that parameter set should be identified as most appropriate among the parameter sets that are available.\r\n\r\n1. Now let's redefine the function by changing its default parameter set.\r\n\r\n    ```powershell\r\n    function Test-ParameterBinder {\r\n        [CmdletBinding(DefaultParameterSetName='ByValue')]\r\n        param(\r\n            [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByPropertyName')]\r\n            [ValidateRange(1,[int]::MaxValue)]\r\n            [int]\r\n            $Id,\r\n\r\n            [Parameter(Mandatory, ValueFromPipeline, ParameterSetName='ByValue')]\r\n            [ValidateNotNull()]\r\n            [System.Diagnostics.Process]\r\n            $Process\r\n        )\r\n        begin {\r\n            \"Bound parameter set in begin: $($PSCmdlet.ParameterSetName)\"\r\n        }\r\n        process {\r\n            \"Bound parameter set in process: $($PSCmdlet.ParameterSetName)\"\r\n        }\r\n    }\r\n    ```\r\n\r\n1. Then invoking it a few more times with pipeline input:\r\n\r\n    ```PowerShell\r\n    $p | Test-ParameterBinder\r\n    [pscustomobject]@{Id=$PID} | Test-ParameterBinder\r\n    ```\r\n\r\n1. Now you see the following results:\r\n\r\n    ```none\r\n    Bound parameter set in begin: ByValue\r\n    Bound parameter set in process: ByValue\r\n    Bound parameter set in begin: ByValue\r\n    Bound parameter set in process: ByPropertyName\r\n    ```\r\n\r\n    As you can see from those results, the parameter set that is bound when the actual object is passed in via the pipeline is `ByValue`. This is desired, and keeps things performant. Also, when you pass in an object that does not match the object type that is bound by value, PowerShell falls back to pipeline input by property name, finds a match there, and selects the `ByPropertyName` parameter set. That's also desired and expected.\r\n\r\n    The downside is that if you invoke `Test-ParameterBinder` with no parameters and without pipeline input, you'll be prompted to provide it with a value for the `Process` parameter, but you cannot do that.\r\n\r\n    The other issue is that programmatically, when you are in the `begin` block, it looks like the parameter set is `ByValue` because that is the default parameter set and PowerShell hasn't yet been able to determine what the parameter set will be since it has not started processing pipeline input yet. I wish the parameter set name was `$null` in this case, because it is not known, and command authors should know that it is not known so that they can write their code accordingly. Sometimes you want to do specific things based on the parameter set that is bound, and if it is not bound/known because there are multiple possibilities in the `begin` block, then you shouldn't take action based on the parameter set name at that point. In hindsight, it would have been better to have a specific `PSCmdlet` method that gets invoked each time the parameter set is bound, so that appropriate work can be done the moment a parameter set is bound and each time it is bound, whether than happens in `begin` or `process`.\r\n\r\nOf course, all of this analysis is moot if we can't do a thing about it.\r\n\r\n@daxian-dbw Any thoughts that you would like to contribute to this?\r\n\r\n",
    "created_at": "2019-09-06T15:21:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-528898137",
    "id": 528898137,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODg5ODEzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/528898137/reactions"
    },
    "updated_at": "2019-09-06T16:21:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/528898137",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> You can only have one ValueFromPipeline parameter in a command \r\n\r\nI'm afraid this is not correct. See the following example:\r\n```powershell\r\nfunction bar {\r\n    param(\r\n        [Parameter(ValueFromPipeline, ParameterSetName='Process')]\r\n        [System.Diagnostics.Process]\r\n        $Process,\r\n        [Parameter(ValueFromPipeline, ParameterSetName='Service')]\r\n        [System.ServiceProcess.ServiceController]\r\n        $inputobject\r\n    )\r\n\r\n    begin {\r\n        \"Bound parameter set in begin: $($PSCmdlet.ParameterSetName)\"\r\n    }\r\n\r\n    process {\r\n        \"Bound parameter set in process: $($PSCmdlet.ParameterSetName)\"\r\n    }\r\n\r\n    end {\r\n        \"Bound parameter set in end: $($PSCmdlet.ParameterSetName)\"\r\n    }\r\n}\r\n\r\n$p = Get-Process -Id $Pid\r\n$s = Get-Service WinDefend\r\n\r\nPS:5> $p, $s | bar\r\nBound parameter set in begin: __AllParameterSets\r\nBound parameter set in process: Process\r\nBound parameter set in process: Service\r\nBound parameter set in end: Service\r\n```\r\n\r\n------------------------\r\n\r\nThe proposed behavior makes logical sense to me. If we are designing the pipeline binding now, I would definitely agree to put this behavior on the table for discussion.\r\nHowever, now it would be a breaking change -- `honor default parameter set over the rest` vs. `honor ValueFromPipeline over default parameter set`.\r\nIIRC, the last time we accepted a breaking change to parameter binding (about remaining arguments) caused behavior changes in many cmdlets, including `Write-Output`.",
    "created_at": "2019-09-06T23:59:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-529050359",
    "id": 529050359,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTA1MDM1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/529050359/reactions"
    },
    "updated_at": "2019-09-06T23:59:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/529050359",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > You can only have one ValueFromPipeline parameter in a command\r\n> \r\n> I'm afraid this is not correct.\r\n\r\nSorry, I mistyped that sentence. It was meant to be: \"You can only have one ValueFromPipeline parameter in a parameter set.\"\r\n",
    "created_at": "2019-09-07T01:29:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10188#issuecomment-529059654",
    "id": 529059654,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10188",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTA1OTY1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/529059654/reactions"
    },
    "updated_at": "2019-09-07T01:29:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/529059654",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  }
]
