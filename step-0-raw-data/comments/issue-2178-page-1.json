[
  {
    "author_association": "COLLABORATOR",
    "body": "Thank you for reporting the issue!\n\nLet's take a look.\n\n`GetTypeCode()` that is called above is [`IConvertible.GetTypeCode()`](https://msdn.microsoft.com/en-us/library/system.iconvertible.gettypecode%28v=vs.110%29.aspx)\nIt comes from `IConvertible` interface that `Char` implements and `Char[]` doesn't.\n\n```\nPS /Users/vors> $d.GetType().ImplementedInterfaces                                                                                           \n\nIsPublic IsSerial Name                                     BaseType                                                                         \n-------- -------- ----                                     --------                                                                         \nTrue     False    IList                                                                                                                     \nTrue     False    ICollection                                                                                                               \nTrue     False    IEnumerable                                                                                                               \nTrue     False    IStructuralComparable                                                                                                     \nTrue     False    IStructuralEquatable                                                                                                      \nTrue     False    IList`1                                                                                                                   \nTrue     False    ICollection`1                                                                                                             \nTrue     False    IEnumerable`1                                                                                                             \nTrue     False    IReadOnlyList`1                                                                                                           \nTrue     False    IReadOnlyCollection`1                                                                                                     \n\n\nPS /Users/vors> $d[0].GetType().ImplementedInterfaces                                                                                        \n\nIsPublic IsSerial Name                                     BaseType                                                                         \n-------- -------- ----                                     --------                                                                         \nTrue     False    IComparable                                                                                                               \nTrue     False    IConvertible                                                                                                              \nTrue     False    IComparable`1                                                                                                             \nTrue     False    IEquatable`1       \n```\n\nPowerShell has a **fall-back method call** logic for collections. If `$foo.bar()` was invoked and `$foo` is a collection (implements `ICollection`) and doesn't have a method `bar()` then powershell tries to execute equivalent of `$foo | Foreach-Object {$_.bar()}`.\n\nNow the question is \"should PowerShell try to offer IntelliSense for collection elements as well a collection itself since it has this fall-back logic\"? I think it should not:\n- It would be confusing because there would be no way to distinguish collection methods and elements methods.\n- If elements have different types, then it became even messier: should ps offer the union of all methods from all elements? It could be huge.\n- If a collection is big it could be a perf problem too: engine would need to enumerate all elements, do an expansive reflection call on all of them and then merge results. \n\nIntelliSense is very convenient. It allows to type less, make fewer mistakes and explore the objects structure. So I'd like to share a way that I use when dealing with collections.\n\nIf I know that `$d` is a collection and all elements have the same type and I want to call a method on all of them, I usually start with finding it **on the first element**:\n\n```\n> $d[0].GetTy<press Tab few times>\n> $d[0]. GetTypeCode()\n```\n\nThen I can just remove `[0]` part and call it on all elements.\n",
    "created_at": "2016-09-05T18:42:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2178#issuecomment-244797696",
    "id": 244797696,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2178",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDc5NzY5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/244797696/reactions"
    },
    "updated_at": "2016-09-05T18:42:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/244797696",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "NONE",
    "body": "Ok, @vors. You have explained it clearly and well. I appreciate that.\n\nI am not sure that I am plussed by the \"fallback\" method approach. If a collection $foo does not have a bar() method, then using $foo.bar() would not seem to be valid. Automagically turning this into a foreach seems like creeping elegance. Perhaps I can find out on my own what happens if one of the elements of a collection does not have a bar() method.\n",
    "created_at": "2016-09-07T18:41:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2178#issuecomment-245377129",
    "id": 245377129,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2178",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTM3NzEyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245377129/reactions"
    },
    "updated_at": "2016-09-07T18:41:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245377129",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2530958?v=4",
      "events_url": "https://api.github.com/users/Liturgist/events{/privacy}",
      "followers_url": "https://api.github.com/users/Liturgist/followers",
      "following_url": "https://api.github.com/users/Liturgist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Liturgist/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Liturgist",
      "id": 2530958,
      "login": "Liturgist",
      "node_id": "MDQ6VXNlcjI1MzA5NTg=",
      "organizations_url": "https://api.github.com/users/Liturgist/orgs",
      "received_events_url": "https://api.github.com/users/Liturgist/received_events",
      "repos_url": "https://api.github.com/users/Liturgist/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Liturgist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Liturgist/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Liturgist"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That's how PowerShell works.\nI understand your concerns. Personally, I find this very useful. It greatly simplifies ad-hock scripting. This is one of the aspects where PS is more IT-Pros oriented then developer oriented.\n",
    "created_at": "2016-09-08T22:21:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2178#issuecomment-245760210",
    "id": 245760210,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2178",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTc2MDIxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245760210/reactions"
    },
    "updated_at": "2016-09-08T22:21:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245760210",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Going  to close it, please re-open if you want to continue the discussion.\n",
    "created_at": "2016-09-08T22:22:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2178#issuecomment-245760352",
    "id": 245760352,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2178",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTc2MDM1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245760352/reactions"
    },
    "updated_at": "2016-09-08T22:22:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/245760352",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  }
]
