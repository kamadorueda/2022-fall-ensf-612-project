[
  {
    "author_association": "NONE",
    "body": "@MatejKafka it's a duplicate of https://github.com/PowerShell/PowerShell/issues/3669",
    "created_at": "2022-08-03T22:58:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204563894",
    "id": 1204563894,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzC-2",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204563894/reactions"
    },
    "updated_at": "2022-08-03T22:58:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204563894",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "NONE",
    "body": "> @MatejKafka it's a duplicate of #3669\r\n\r\nNo, I don't believe it is. The referenced issue discusses the case where output is NOT assigned to `$null` (or ignored in some other way). This issue describes what I believe to be a bug in how the output is directed, even when assigned to `$null`.",
    "created_at": "2022-08-03T23:02:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204566025",
    "id": 1204566025,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzDgJ",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204566025/reactions"
    },
    "updated_at": "2022-08-03T23:02:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204566025",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6414091?v=4",
      "events_url": "https://api.github.com/users/MatejKafka/events{/privacy}",
      "followers_url": "https://api.github.com/users/MatejKafka/followers",
      "following_url": "https://api.github.com/users/MatejKafka/following{/other_user}",
      "gists_url": "https://api.github.com/users/MatejKafka/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MatejKafka",
      "id": 6414091,
      "login": "MatejKafka",
      "node_id": "MDQ6VXNlcjY0MTQwOTE=",
      "organizations_url": "https://api.github.com/users/MatejKafka/orgs",
      "received_events_url": "https://api.github.com/users/MatejKafka/received_events",
      "repos_url": "https://api.github.com/users/MatejKafka/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MatejKafka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MatejKafka/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MatejKafka"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > @MatejKafka it's a duplicate of #3669\r\n> \r\n> No, I don't believe it is. The referenced issue discusses the case where output is NOT assigned to `$null` (or ignored in some other way). This issue describes what I believe to be a bug in how the output is directed, even when assigned to `$null`.\r\n\r\nYou're right, I read too quickly, sorry ðŸ˜…",
    "created_at": "2022-08-03T23:23:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204577852",
    "id": 1204577852,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzGY8",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204577852/reactions"
    },
    "updated_at": "2022-08-03T23:23:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204577852",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "NONE",
    "body": "@MatejKafka This is the minimal reproduction without any function\r\n\r\n```\r\n$a = if ($true) {\r\n    Write-Output \"this should not be visible\"\r\n    return \"this should not be visible too\"\r\n}\r\n\r\n$null -eq $a # true\r\n\r\n$b = if ($true) {\r\n    Write-Output \"this should not be visible\"\r\n}\r\n$null -eq $b # false\r\n\r\n\r\n$c = if ($true) {\r\n    return \"this should not be visible too\"\r\n}\r\n$null -eq $c # true\r\n\r\n```\r\n\r\n",
    "created_at": "2022-08-03T23:35:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204583793",
    "id": 1204583793,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzH1x",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204583793/reactions"
    },
    "updated_at": "2022-08-03T23:35:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204583793",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'd be OK with the last case being left as is (so that \"return X\" always returns X from the function).\r\n\r\nIt's the first case that seems wrong to me, as there's an \"action at a distance\", with an unrelated `return` statement causing previous output to be treated as function output.",
    "created_at": "2022-08-03T23:40:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204586031",
    "id": 1204586031,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzIYv",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204586031/reactions"
    },
    "updated_at": "2022-08-04T12:28:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204586031",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6414091?v=4",
      "events_url": "https://api.github.com/users/MatejKafka/events{/privacy}",
      "followers_url": "https://api.github.com/users/MatejKafka/followers",
      "following_url": "https://api.github.com/users/MatejKafka/following{/other_user}",
      "gists_url": "https://api.github.com/users/MatejKafka/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MatejKafka",
      "id": 6414091,
      "login": "MatejKafka",
      "node_id": "MDQ6VXNlcjY0MTQwOTE=",
      "organizations_url": "https://api.github.com/users/MatejKafka/orgs",
      "received_events_url": "https://api.github.com/users/MatejKafka/received_events",
      "repos_url": "https://api.github.com/users/MatejKafka/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MatejKafka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MatejKafka/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MatejKafka"
    }
  },
  {
    "author_association": "NONE",
    "body": "\r\n![image](https://user-images.githubusercontent.com/6187529/182735695-d233ae7f-8ab3-4dc9-9d65-ec7202dd4e89.png)\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_return?view=powershell-7.2\r\n\r\nI understand that return is an accumulator, so the behavior is compliant, but the documentation should be more explicit and detailed.\r\n\r\nIf anyone else can confirm, we might ask for a documentation upgrade.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_return\">about Return - PowerShell</a></strong></div><div>Exits the current scope, which can be a function, script, or script block.</div></blockquote>",
    "created_at": "2022-08-04T00:41:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204629376",
    "id": 1204629376,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzS-A",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204629376/reactions"
    },
    "updated_at": "2022-08-04T00:41:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204629376",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This is fairly weird behaviour, it seems like the `return` in the `if` statement is bypassing the `$null =` accumulator as I would not expect this to output anything\r\n\r\n```powershell\r\nfunction test {\r\n    $null = if ($true) {\r\n        \"out\"\r\n        return\r\n    }\r\n}\r\n```\r\n\r\nI can't say I've seen this documented and considering if you omit the `return` the if captures the output as expected.",
    "created_at": "2022-08-04T03:51:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204724688",
    "id": 1204724688,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5HzqPQ",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204724688/reactions"
    },
    "updated_at": "2022-08-04T03:51:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204724688",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "If the PowerShell engine indeed acts the way as expected by @MatejKafka (except that I don't think it should accumulate anything else than the succes stream), it might be a way out for the leaking pipeline challenge (see also: #15781) where everything in the (success stream) pipeline is then consumed by the assignment except for what is *explicitly* returned by `Return <object>` or `Write-Output [-InputObject] <PSObject[]>`...",
    "created_at": "2022-08-04T08:05:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1204908979",
    "id": 1204908979,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H0XOz",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204908979/reactions"
    },
    "updated_at": "2022-08-04T08:23:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1204908979",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": ">This is fairly weird behaviour, it seems like the return in the if statement is bypassing the $null = accumulator as I would not expect this to output anything\r\n> ```powershell\r\n> function test {\r\n>     $null = if ($true) {\r\n>         \"out\"\r\n>         return\r\n>     }\r\n> }\r\n> ```\r\n\r\nIt is not intuitive  that's for sure. And I don't think it is as consistent as it might be.  But \"**accumulator**\" piqued my curiosity. Here are multiple evolutions of the same bit of code\r\n \r\n```powershell\r\nfunction test {\r\n   while ($null -eq $x) {\r\n         $global:foo = foreach ($x in 1..5) {\r\n            if ($x -eq 5) { return } \r\n            else {$x} \r\n        }\r\n        \"after the loop, x =$x \"\r\n    }\r\n    \"After the while\"\r\n}\r\n\r\n```\r\n\r\nThis does what the OP saw. It **looks like** it should put the values into `foo` but it doesn't and they become \"output\"\r\n\r\n```\r\n#531 PS5 ~\\Documents\\windowsPowershell> $foo = $null \r\n\r\n#532 PS5 ~\\Documents\\windowsPowershell> $foo \r\n\r\n#533 PS5 ~\\Documents\\windowsPowershell> test\r\n1\r\n2\r\n3\r\n4\r\n\r\n#534 PS5 ~\\Documents\\windowsPowershell> $foo \r\n```\r\n\r\nWe [should] know that (without the return) the code would NOT put 1 into foo, then  make foo an array and add 2 as member , then add 3 etc. - most of have us have learnt at a loop with `$results = $results + $LatestItem`  gets slow for many items and `$result = <loop>` is to be preferred because PowerShell **accumulates** the results for us and assigns them in a single operation after the `for` loop has run. \r\n\r\nWe do not really think about the \"Call something, and when execution returns the output you want will be a standard buffer\" which underpins all of this, any more than we think about \r\n```powershell\r\n  $val = foreach ($x in 1..5) {\r\n            if ($x -eq 5) { throw } \r\n            else {$x} \r\n        } \r\n```\r\nputting 1..4 in the output buffer and then having `throw` remove them (they must have gone _somewhere_ but they don't reach `$val`).  \r\nIn this case `return` has inserted a GOTO between putting the results  into the buffer and reading them back;  `Return`, `Break`, `Continue `are all forms of GOTO by other means (see below before arguing! :-) )  -  `return` means execution goes to whatever **called** this function  instead of the next step **of** this function..  \r\n\r\nWe can see the same thing with `break`, where (again) the behaviour is not intuitive.  Someone who has learnt what `return` does in this case, but not _why_, might expect this to do the same \r\n\r\n```powershell\r\nfunction test {\r\n    while ($null -eq $x) {\r\n         $global:foo = foreach ($x in 1..5) {\r\n            if ($x -eq 5) { break  } \r\n            else {$x} \r\n        }\r\n        \"after the loop x =$x \"\r\n    }\r\n\r\n\"After the while\"\r\n}\r\n\r\n```\r\nAll that has changed is the `return` has been replaced with a `break`  - which  exits the `for` but not the `while`  so execution continues where it would have done _without_ `break`  \r\n```\r\n#540 PS5 ~\\Documents\\windowsPowershell> $foo = $null \r\n\r\n#541 PS5 ~\\Documents\\windowsPowershell> $foo\r\n\r\n#542 PS5 ~\\Documents\\windowsPowershell> test\r\nafter the loop x =5 \r\nAfter the while\r\n\r\n#543 PS5 ~\\Documents\\windowsPowershell> $foo \r\n1\r\n2\r\n3\r\n4\r\n\r\n```\r\n\r\nI said \"wait before arguing about goto\"  - in this case `break` is just making the \"if_not_condition run_the_remainder_of_the_code\" construction less unwieldy - the point it is  going to isn't _arbitrary_  it is what would be the next step anyway. But it **can** go to other places using _labels._ \r\n\r\n```powershell\r\n\r\nfunction test {\r\n :myLabel    while ($null -eq $x) {\r\n         $global:foo = foreach ($x in 1..5) {\r\n            if ($x -eq 5) { break myLabel } \r\n            else {$x} \r\n        }\r\n        \"after the loop x =$x \"\r\n    }\r\n\r\n\"After the while\"\r\n}\r\n\r\n```\r\nThis is just the last version with  a label but now the output looks like the first version. \r\n\r\n```\r\n#545 PS5 ~\\Documents\\windowsPowershell> $foo = $null \r\n\r\n#546 PS5 ~\\Documents\\windowsPowershell> $foo\r\n\r\n#547 PS5 ~\\Documents\\windowsPowershell> test\r\n1\r\n2\r\n3\r\n4\r\nAfter the while\r\n\r\n#548 PS5 ~\\Documents\\windowsPowershell> $foo \r\n\r\n```\r\n\r\nI guess the TL;DR version for the above is **\"Don't put a GOTO in the right hand side of an assignment\"** \r\n\r\nBut just when think we know how these things behave   What about  \r\n```PowerShell\r\nfunction test2 {\r\n\r\ntry     {\"Hello\" ; return}\r\ncatch   {\"Never runs\"}\r\nfinally {\"Good bye\"} \r\n}\r\n```\r\n\r\nIf return is _immediate successful exit_  (like throw is an immediate failure) as we have seen `finally` would never run but this code produces the following output \r\n\r\n```\r\n#532 PS5 ~\\Documents\\windowsPowershell> test2\r\nHello\r\nGood bye\r\n```\r\n\r\nNothing the runs after after the `try/catch/finally` but the goto effect isn't immediate\r\n",
    "created_at": "2022-08-04T14:22:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1205327672",
    "id": 1205327672,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H19c4",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205327672/reactions"
    },
    "updated_at": "2022-08-04T14:22:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205327672",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "NONE",
    "body": "return causes the expression to end before no assignment is made. \r\nreturn can be seen as goto \"}\" of function\r\nI think it's by design,\r\n$var = Return, Break, Continue ------ This is a bad way of writing code, it is recommended to prohibit",
    "created_at": "2022-08-04T15:10:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1205390497",
    "id": 1205390497,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H2Myh",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205390497/reactions"
    },
    "updated_at": "2022-08-04T15:17:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205390497",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/65390418?v=4",
      "events_url": "https://api.github.com/users/kasini3000/events{/privacy}",
      "followers_url": "https://api.github.com/users/kasini3000/followers",
      "following_url": "https://api.github.com/users/kasini3000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kasini3000/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kasini3000",
      "id": 65390418,
      "login": "kasini3000",
      "node_id": "MDQ6VXNlcjY1MzkwNDE4",
      "organizations_url": "https://api.github.com/users/kasini3000/orgs",
      "received_events_url": "https://api.github.com/users/kasini3000/received_events",
      "repos_url": "https://api.github.com/users/kasini3000/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kasini3000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kasini3000/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kasini3000"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jhoneill That's a very insightful explanation, thanks. :)\r\n\r\nI'd consider it more intuitive for the following code:\r\n```powershell\r\n$Result = if ($true) {\r\n  echo \"value\"\r\n  return\r\n}\r\n```\r\nto be interpreted as\r\n```powershell\r\ntry {\r\n  if ($true) {\r\n    accumulate \"value\"\r\n    return # and flush accumulator\r\n  }\r\n} finally {\r\n  $Result = accumulator\r\n}\r\n```\r\nrather than as\r\n```powershell\r\nif ($true) {\r\n  accumulate \"value\"\r\n  return # and flush accumulator\r\n}\r\n$Result = accumulator\r\n```\r\n, but I think that we are in agreement here about what's the intuitive behavior.\r\n\r\n\r\n@kasini3000 This pattern is actually kinda useful:\r\n```powershell\r\nfunction TryToProcessStuff($Stuff) {\r\n  $PreprocessedStuff = foreach ($s in $Stuff) {\r\n    # if preprocessing fails, return without doing anything more\r\n    try {Preprocess $s} catch {return}\r\n  }\r\n  # do more processing\r\n}\r\n```\r\nUsually, you would just let the exception bubble up, but in some cases, you want to silence it and treat failure by just not returning any results.",
    "created_at": "2022-08-04T16:18:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1205471276",
    "id": 1205471276,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H2ggs",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205471276/reactions"
    },
    "updated_at": "2022-08-04T16:20:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1205471276",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6414091?v=4",
      "events_url": "https://api.github.com/users/MatejKafka/events{/privacy}",
      "followers_url": "https://api.github.com/users/MatejKafka/followers",
      "following_url": "https://api.github.com/users/MatejKafka/following{/other_user}",
      "gists_url": "https://api.github.com/users/MatejKafka/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MatejKafka",
      "id": 6414091,
      "login": "MatejKafka",
      "node_id": "MDQ6VXNlcjY0MTQwOTE=",
      "organizations_url": "https://api.github.com/users/MatejKafka/orgs",
      "received_events_url": "https://api.github.com/users/MatejKafka/received_events",
      "repos_url": "https://api.github.com/users/MatejKafka/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MatejKafka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MatejKafka/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MatejKafka"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Definitely a bug. Here's a [gist with the disassembly](https://gist.github.com/SeeminglyScience/886087f84ee7462893a2bb77f6b66002).\r\n\r\nWhen an assignment like this happens, the output pipe is temporarily changed to a new one that just writes to a list. This swap happens in a try block, and in the finally it resets back to the old pipe and sends anything still remaining in the temp list to the old pipe.\r\n\r\nLine 85 is where the list is *supposed* to be cleared. `PipelineOps.PipelineResult` unwraps the list into a scalar or array and clears the list. *But* that's not in a `finally`, so when the `return` on line 60 happens, the clear never happens but the pipe is still flushed.",
    "created_at": "2022-08-05T14:50:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1206543194",
    "id": 1206543194,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H6mNa",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206543194/reactions"
    },
    "updated_at": "2022-08-05T14:50:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206543194",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Tbh I'm not 100% sure why it flushes there at all, it seems like a logic flaw. I can't quickly think of a case where we make a temporary output pipe and then *want* to flush it back to the original pipe afterwards. I'm inclined to say every time we generate this pattern, we're expecting the list to be empty from `PipelineResult` by the time that finally hits.\r\n\r\nAs a side note, I wonder if there's a good reason that we're building a list *period* when `$null =` is used. Seems like potentially a significant chunk of overhead when we could just use a null pipe instead.\r\n\r\n/cc @daxian-dbw @JamesWTruher ",
    "created_at": "2022-08-05T15:04:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1206559012",
    "id": 1206559012,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H6qEk",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206559012/reactions"
    },
    "updated_at": "2022-08-05T15:04:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206559012",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The comment in the related code gives an example where this is needed:\r\nhttps://github.com/PowerShell/PowerShell/blob/65b83e90d5ee79464dba0dc2b41d3da38c4f8d5c/src/System.Management.Automation/engine/parser/Compiler.cs#L2297-L2300\r\n\r\nLooking at the code, it turns out we are flushing results from the temp pipe to the outer pipeline even if the context is `AssignmentWithoutResultPreservation`, which is the case for `$a = if (...) { 'one'; return }`. I have a draft fix here: https://github.com/PowerShell/PowerShell/pull/17856.\r\n",
    "created_at": "2022-08-05T21:30:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17836#issuecomment-1206890660",
    "id": 1206890660,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17836",
    "node_id": "IC_kwDOAvT7bc5H77Ck",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206890660/reactions"
    },
    "updated_at": "2022-08-05T21:30:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1206890660",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  }
]
