[
  {
    "author_association": "CONTRIBUTOR",
    "body": "* The `process` block should be the default block if not specified.\r\n* Correct support for `-ErrorAction Ignore`\r\n* Use lexical scoping instead of dynamic scoping",
    "created_at": "2019-02-03T23:58:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460101143",
    "id": 460101143,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDEwMTE0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460101143/reactions"
    },
    "updated_at": "2019-02-04T00:02:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460101143",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7864621?v=4",
      "events_url": "https://api.github.com/users/KevinMarquette/events{/privacy}",
      "followers_url": "https://api.github.com/users/KevinMarquette/followers",
      "following_url": "https://api.github.com/users/KevinMarquette/following{/other_user}",
      "gists_url": "https://api.github.com/users/KevinMarquette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KevinMarquette",
      "id": 7864621,
      "login": "KevinMarquette",
      "node_id": "MDQ6VXNlcjc4NjQ2MjE=",
      "organizations_url": "https://api.github.com/users/KevinMarquette/orgs",
      "received_events_url": "https://api.github.com/users/KevinMarquette/received_events",
      "repos_url": "https://api.github.com/users/KevinMarquette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KevinMarquette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KevinMarquette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KevinMarquette"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'd really like to see proper Path and LiteralPath parameter a bit more \"built-it\".  To get all the standard behaviors of built-in cmdlets: wilcard expansion, write appropriate error on non-existing path (when path should exist), proper pipeline binding behavior (aliasing PSPath), etc.  Not sure exactly how this would be implemented but I've often wanted a `PathParamter()` attribute e.g.:\r\n```\r\nfunction Get-Foo {\r\n    [CmdletBinding()]\r\n    param(\r\n        [PathParameter(Position=0, ExpandWildcards)]\r\n        [string[]]\r\n        $Path,\r\n\r\n        [PathParameter(Position=0, PathMustExist)]\r\n        [string[]]\r\n        $LiteralPath,   \r\n    )\r\n    ...\r\n}\r\n```\r\nBy the time you see $Path, it has had the supplied Path argument transformed into one or more paths (full expanded).  And if a required path does not exist, PowerShell would write the appropriate error record for the function.",
    "created_at": "2019-02-04T00:12:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460102241",
    "id": 460102241,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDEwMjI0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 11,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 11,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460102241/reactions"
    },
    "updated_at": "2019-02-04T00:12:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460102241",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@rkeithhill I think perhaps a separate `[PathTransform]` would be better than attempting to merge it with the base `[Parameter]` attribute.",
    "created_at": "2019-02-04T03:02:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460118808",
    "id": 460118808,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDExODgwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460118808/reactions"
    },
    "updated_at": "2019-02-04T03:04:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460118808",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "I would also like this construct to 'swallow' any *break* coming from called commands and also scope internal breaks to just this command.\r\n\r\nOn top of that some easy way to *return* in any of 3 blocks would be nice to have (so that I can stop processing in Begin w/o even starting Process block).",
    "created_at": "2019-02-04T07:20:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460151919",
    "id": 460151919,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDE1MTkxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460151919/reactions"
    },
    "updated_at": "2019-02-04T07:20:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460151919",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3310142?v=4",
      "events_url": "https://api.github.com/users/bielawb/events{/privacy}",
      "followers_url": "https://api.github.com/users/bielawb/followers",
      "following_url": "https://api.github.com/users/bielawb/following{/other_user}",
      "gists_url": "https://api.github.com/users/bielawb/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bielawb",
      "id": 3310142,
      "login": "bielawb",
      "node_id": "MDQ6VXNlcjMzMTAxNDI=",
      "organizations_url": "https://api.github.com/users/bielawb/orgs",
      "received_events_url": "https://api.github.com/users/bielawb/received_events",
      "repos_url": "https://api.github.com/users/bielawb/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bielawb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bielawb/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bielawb"
    }
  },
  {
    "author_association": "NONE",
    "body": "One things I would **really** like is the ability to have a way to **trust** the output type of a function.\r\n\r\nToday we have [OutputType](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_outputtypeattribute?view=powershell-6) which allows to specifiy which type will be returned from a that specific function.\r\n\r\nUnfortunatley as specified in the documentation: \r\n>The OutputType attribute value is only a documentation note. It is not derived from the function code or compared to the actual function output. As such, the value might be inaccurate.\r\n\r\nParhaps we could think of having the possibility to have something like a ```strict``` keyword in the function declaration. It would check the output type with the one returned from a function, and **throw an error if the wrong  type is returned**\r\n\r\nSomething like: ```[cmdletBinding(Strict)]``` maybe?\r\n\r\nI could imagine as well, that if 'strict' is set, that the usage of the ```return``` statement would become mandatory.\r\n\r\nThis would help in predicting the behaviour of our functions.\r\n",
    "created_at": "2019-02-04T08:00:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460159193",
    "id": 460159193,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDE1OTE5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 11,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 11,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460159193/reactions"
    },
    "updated_at": "2019-02-04T10:33:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460159193",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6302961?v=4",
      "events_url": "https://api.github.com/users/Stephanevg/events{/privacy}",
      "followers_url": "https://api.github.com/users/Stephanevg/followers",
      "following_url": "https://api.github.com/users/Stephanevg/following{/other_user}",
      "gists_url": "https://api.github.com/users/Stephanevg/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Stephanevg",
      "id": 6302961,
      "login": "Stephanevg",
      "node_id": "MDQ6VXNlcjYzMDI5NjE=",
      "organizations_url": "https://api.github.com/users/Stephanevg/orgs",
      "received_events_url": "https://api.github.com/users/Stephanevg/received_events",
      "repos_url": "https://api.github.com/users/Stephanevg/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Stephanevg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Stephanevg/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Stephanevg"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "IMHO a cmdlet keyword built on top of the class keyword would be best (i.e. a cmdlet would be a very specific implementation of class). I shared my thoughts on this on [this thread](https://github.com/PowerShell/PowerShell/issues/6652#issuecomment-444557931).",
    "created_at": "2019-02-04T14:23:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460266691",
    "id": 460266691,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDI2NjY5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460266691/reactions"
    },
    "updated_at": "2019-02-04T14:24:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460266691",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@Stephanevg forcing a function to use `return` as a keyword is counterproductive, as it prevents the ability to output data as it is processing, forcing it to collate before outputting anything.",
    "created_at": "2019-02-04T14:27:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460268026",
    "id": 460268026,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDI2ODAyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460268026/reactions"
    },
    "updated_at": "2019-02-04T14:27:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460268026",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill @vexx32 do you maybe want to submit a PR to my [Path attribute](https://github.com/Jaykul/Path), or do you think it really needs to be in the box (also)?\r\n\r\n@Stephanevg @vexx32 I think we could strongly type the OutputType and still use `Write-Output` to allow streaming ...",
    "created_at": "2019-02-04T14:28:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460268666",
    "id": 460268666,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDI2ODY2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460268666/reactions"
    },
    "updated_at": "2019-02-04T14:28:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460268666",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think such an attribute should be in the box. While the Transform attributes aren't perfect, they are a very useful way to ensure input is in the correct form without cluttering the `begin{}` blocks of a function. Something as fundamental to PowerShell's operation as the _correct handling of paths_ should absolutely be in the box as a prebuilt solution which can be extended if needed via inheritance.\r\n\r\nAs for outputtype, I agree that strongly-typing one's outputtype is a good idea. I don't think it should throw if there is a reasonably clear conversion path from the output object and the target output type, though. I also don't think we need to enforce `return`; after all, the overall return types of `BeginProcessing`, `ProcessRecord`, and `EndProcessing` are _all_ `void`. I don't think it makes sense to muddy the implementation there. \r\n\r\nHowever, enforcing the use of `Write-Output` or `$PSCmdlet.WriteObject()` may be a worthwhile consideration... _if_ such an operation can be made equally performant to the current \"just drop it to output\". Currently, I know `Write-Output` is a bit slower, but I'm not sure if WriteObject() has a similar performance impact, though I'd expect it to be about as fast as dropping directly into the output stream.",
    "created_at": "2019-02-04T14:37:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460271707",
    "id": 460271707,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDI3MTcwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460271707/reactions"
    },
    "updated_at": "2019-02-04T14:37:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460271707",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32 (sorry, I didn't meant to lead you further off topic -- I don't disagree that it should be in the box, I filed issues about it a decade ago before I wrote my own solution).\r\n\r\nMaybe the answer to the Write-Output/return question is that `cmdlet` should expose `$PSCmdlet` as `$this` and you'd be required to call that for output if you didn't want to _end_ your block. That would certainly fit in with the idea of making these actual class-based as Kirk has suggested, and ...\r\n\r\nPerhaps we make these `cmdlet` objects instead of `function` objects --  i.e. same precedence as compiled cmdlets, and can only be exposed from a module, etc. Then, switching to `this` and to class-like semantics (with `$this.WriteOutput()`) would make even more sense.\r\n\r\nMAYBE we even create a new file extension `.pscmd` which is equivalent to the cmdlet keyword. We could make modules collect all `.pscmd` files that are in the module (sub)folders and \"compile\" them at module import time...",
    "created_at": "2019-02-04T16:57:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-460325249",
    "id": 460325249,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDMyNTI0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460325249/reactions"
    },
    "updated_at": "2019-02-04T16:57:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/460325249",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "That's almost exactly where my mind was heading @Jaykul, including a new file extension, but I liked .psx1 (fits current file extension names), for a new type of module that is compiled, not interpreted. That's discussed on the same thread I linked to earlier, the idea being that .psx1 files (class modules) would have a limited set of things you could do in them.\r\n\r\nI was originally thinking psx1 files could only be used to define cmdlets or classes and include other files that also define cmdlets or classes (dot source? using? a new include keyword? not sure what's the best semantic for that in this context). Functions and other PowerShell commands wouldn't be allowed -- psm1 files already allow you to include those in modules, and there's nothing stopping you from having a psd1 file with a psx1 file or a psd1 file with both psx1 and psm1 files (leveraging RequiredModules and NestedModules according to your needs). Essentially, the psx1 file extension identifies that the content is compiled (which .pscmd would also accomplish, but I like the notion of a compiled module).",
    "created_at": "2019-02-08T16:04:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-461852450",
    "id": 461852450,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTg1MjQ1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/461852450/reactions"
    },
    "updated_at": "2019-02-08T16:04:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/461852450",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To further the discussion of the classy cmdlets, Another paradigm often requested by more advanced users is the ability to inherit a base cmdlet that contains common parameters. That's something some what trivial to do in C# but impossible in native PS.",
    "created_at": "2019-02-09T00:42:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-461994191",
    "id": 461994191,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTk5NDE5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/461994191/reactions"
    },
    "updated_at": "2019-02-09T00:42:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/461994191",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It's not always trivial in C#, at least not for all cmdlets. Some cmdlets are configured as sealed, preventing other devs from inheriting from them. That's gotten in my way a number of times, but can be partially worked around by creating proxy cmdlets (like proxy functions, but cmdlets), but you need to redefine parameters with that model. I suppose I should submit some PRs to change some of those cmdlets so that they are not sealed, because PowerShell is open source and I don't believe having cmdlet classes as sealed does anything but get in the way when an advanced dev wants to do something creative with existing functionality.",
    "created_at": "2019-02-09T01:52:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-462002314",
    "id": 462002314,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjAwMjMxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/462002314/reactions"
    },
    "updated_at": "2019-02-09T01:52:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/462002314",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@KirkMunro I'm specifically talking about a base class you create and then other classes you create derive from it. For example, if you have an API wrapper module, you will likely have a Session and other common parameters on pretty much all get/set/remove/update cmdlets. In Native PS, you have to manually define all of those common parameters in every advanced function. In c# it is trivial to derive from your own base class to reduce code repetition.",
    "created_at": "2019-02-09T13:27:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-462044499",
    "id": 462044499,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjA0NDQ5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/462044499/reactions"
    },
    "updated_at": "2019-02-09T13:28:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/462044499",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "NONE",
    "body": "How much of this can be prototyped via a source-to-source compiler?  That might be a nice way to experiment and prove out the idea, before it gets added to PSCore proper.",
    "created_at": "2019-03-08T18:06:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-471021392",
    "id": 471021392,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTAyMTM5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471021392/reactions"
    },
    "updated_at": "2019-03-08T18:06:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471021392",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "NONE",
    "body": "I started prototyping a source-to-source transformer to implement some of these ideas.  I would love to hear what people think: bugs, ideas, whatever.  https://github.com/cspotcode/pwsh-transpiler\r\n\r\nThe eventual goal is that you can write modules assuming the future syntax proposed in this thread, and the transformer will rewrite your functions to give you those behaviors.  Eventually, when these capabilities are built-in to PowerShell Core, your code will not need to be transformed.\r\n\r\nWhat I've written so far only took me the past couple hours; I think with a bit more time we could make a productive, useful set of transformers.\r\n\r\nEDIT: I can make anyone a collaborator on the repo if you want to start pushing code.",
    "created_at": "2019-03-08T20:52:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8819#issuecomment-471072541",
    "id": 471072541,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8819",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTA3MjU0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 2,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471072541/reactions"
    },
    "updated_at": "2019-03-08T20:57:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471072541",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  }
]
