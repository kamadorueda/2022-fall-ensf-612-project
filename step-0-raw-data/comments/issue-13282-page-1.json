[
  {
    "author_association": "COLLABORATOR",
    "body": "I've never actually tried it before but you could look into [NamedPipeConnectionInfo](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.namedpipeconnectioninfo?view=powershellsdk-7.0.0) through the .NET functions. It has a constructor that takes in a pipe name which can be a named pipe that you've set up in another process to read/write with.\r\n\r\nPart of the [runspace creation](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/System.Management.Automation/engine/remoting/fanin/OutOfProcTransportManager.cs#L2020-L2034) with this type of connection is that it just connects to the pipe and starts the thread to read from it. This should be simpler to maintain than having a custom process that reads/writes to it's own stdout/stdin that the ssh transport expects as now it's just a single pipe to read/write from. In saying this I've not really played around with it too much but based on the docs and the code it should be possible today to do what you want.",
    "created_at": "2020-07-26T22:17:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664047420",
    "id": 664047420,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDA0NzQyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664047420/reactions"
    },
    "updated_at": "2020-07-26T22:17:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664047420",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I actually have a full implementation of that working\r\nhttps://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\r\n\r\nThe issue is that I want users of my script to have an easy, built-in way to access powershell anywhere without needing a separate module, hence the request. They're used to enter-pssession, this would be an easy way for clients to connect.\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\">Powershell Debug Anywhere Design</a></strong></div><div>Powershell Debug Anywhere Design. GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
    "created_at": "2020-07-26T23:49:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664056683",
    "id": 664056683,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDA1NjY4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664056683/reactions"
    },
    "updated_at": "2020-07-26T23:49:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664056683",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I actually have a full implementation of that working\r\n\r\nNice\r\n\r\n> They're used to enter-pssession, this would be an easy way for clients to connect.\r\n\r\nThat's a fair request, it sounds like you are way ahead of me, just thought I would share the NamedPipeConnectionInfo stuff in case you weren't aware of it :P",
    "created_at": "2020-07-27T00:22:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664060995",
    "id": 664060995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDA2MDk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664060995/reactions"
    },
    "updated_at": "2020-07-27T00:22:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664060995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This is a very interesting idea.  But one problem with sdtin/stdout/stderror is that it doesn't provide a very good user experience.  stdError is often used by applications for non-error messages.  And there is no good way to prompt the user for different kinds of authentication.  I wonder if a more general C# class based plug-in model would be better, allowing implementers access to PSHost for any kind of authentication.  The implementation could wrap an exe (like SSH.exe) if need be.",
    "created_at": "2020-07-27T18:23:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664561574",
    "id": 664561574,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU2MTU3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664561574/reactions"
    },
    "updated_at": "2020-07-27T18:23:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664561574",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PaulHigin all I'm doing is passing the PSRP XML messages back and forth as a bytestream, the authentication/etc. still happens at the higher level (or within the application). I have it working great right now but for the client to connect you currently have to start \"my\" client and then enter-pshostsession to the named pipe it creates on the local machine. That's not a great user experience vs. something like just enter-pssession -customtransport websocat -argumentlist @{port=18522;host=my.websocat.server}\r\nhttps://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\r\n\r\nThis is just a way to make it easily implemented and backwards compatible to 5.1. I suppose a powershell module might be able to implement a transport handler but I don't know how the scoping works there, ideas?\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\">Powershell Debug Anywhere Design</a></strong></div><div>Powershell Debug Anywhere Design. GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
    "created_at": "2020-07-27T18:47:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664573537",
    "id": 664573537,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU3MzUzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664573537/reactions"
    },
    "updated_at": "2020-07-27T18:47:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664573537",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It sounds like both an abstraction for client (connection initiation) and target (endpoint creation/configuration/hosting) is needed.  We are actually planning to do work on the latter (endpoint) in the next sprint.  But I like the idea of looking at this from both ends.  The fact that you already have need of this helps with motivation.  I need to spend some time thinking more about it.",
    "created_at": "2020-07-28T00:14:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664702816",
    "id": 664702816,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDcwMjgxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664702816/reactions"
    },
    "updated_at": "2020-07-28T00:14:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664702816",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Sounds good Paul. Currently the \"simplest\" approach has been to use an SSH server in golang (no good ssh server implementations exist in C# that I can find or I would have kept it all-native, and I'm not in the mood to write an SSH server using SSH.NET as a base right now...) and wire the runspace pipe to the server and forward out the port. Then the client experience is very simple: Enter-PSSession -Hostname <rendevousAddress> -Port <rendevousPort>\r\n\r\nIf I had more flexibility in the client transport layer abstraction, that would be huge, in order to support all kinds of services like Azure Relay, Localtunnel, ngrok, etc.\r\n\r\nThe server-side abstraction is not as important, since I can just attach to the named pipe and then create a \"server\" on whatever I want (example in the gist linked above)\r\n\r\nEDIT: Also as to why I'm not using openssh for the server, it's difficult to find a configuraiton that works well in userspace, openssh generally expects to run as root and that's not ideal when trying to remote a GIthub Action, Azure Automation, or other \"locked down\" environment. Plus I can't count on it being there, and pulling down a 3MB tiny golang ssh server is easy and simple :)",
    "created_at": "2020-07-28T00:18:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664703908",
    "id": 664703908,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDcwMzkwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664703908/reactions"
    },
    "updated_at": "2020-07-28T00:24:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664703908",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Ideas are:\r\n1. Unseal and make public the PSRemoting transport layer classes, so that additional transports can be inherited and implemented as C# powershell modules (assuming there aren't any scoping issues that interfere with this). Then Enter-PSSession could also look for \"plugin\" transport layers either via an enum parameter or some sort of autodiscovery mechanism (a special uri perhaps?)\r\n1. Just allow the SSH.EXE portion to be abstracted to any executable (or scriptblock???) that accepts stdin/out. Easier than the above.",
    "created_at": "2020-07-28T00:23:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-664705187",
    "id": 664705187,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDcwNTE4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664705187/reactions"
    },
    "updated_at": "2020-07-28T00:23:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/664705187",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "So currently the least-friction path would be another parameterset to *-pssession, since all the work is pretty much already done via the SSH transport.\r\n\r\nExample:\r\n`New-PSSession -CustomTransport -CustomTransportPath \"my/custom/websocketserver.exe\" -CustomTransportArgs @('-hostname','my.websocket.relay','-port','10443')`\r\n\r\nAnd it would just call that program, tie into stdio, and expect and send PSRP xml in the same way it does to ssh.exe today. That would enable a ton of new scenarios without requiring client-side Powershell updates, they could be implemented as Powershell Modules outside of the core code (e.g. a `New-PSWebsocketSession` cmdlet that just wraps new-pssession and supplies the customtransportpath information)\r\n\r\n@PaulHigin thoughts? Obviously a C#-level extensible transport handler may be nice but that may take a while to develop, whereas the surface area of the customtransportpath option above is very low and already covered well by the SSH remoting framework/test surface.",
    "created_at": "2020-07-29T16:19:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665762232",
    "id": 665762232,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc2MjIzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665762232/reactions"
    },
    "updated_at": "2020-07-29T16:19:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665762232",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Why is the transport always external app but not API (like WSMan)?",
    "created_at": "2020-07-29T17:07:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665787615",
    "id": 665787615,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc4NzYxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665787615/reactions"
    },
    "updated_at": "2020-07-29T17:07:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665787615",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As reminder, we removed encryption in PSRP :-( We should bring it back if we want to enable alternative transports.",
    "created_at": "2020-07-29T17:09:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665788835",
    "id": 665788835,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc4ODgzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665788835/reactions"
    },
    "updated_at": "2020-07-29T17:51:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665788835",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov not quite sure your question, this would just enable an easy way to enable additional PSRP transports. I actually prefer that the PSRP is not encrypted so I can \"bring my own\" encryption at the transport level, that's not something that should be part of the PSRP messaging in-and-of-itself IMHO.\r\n\r\nAs to why the transport isn't an API, making the transport layer more generalized would be great but the SSH transport as currently implemented basically just calls \"ssh.exe\" and then ties into stdin/out to exchange the PSRP messages to the process (the pwsh process is started with -sshs which is basically the same as -s so that it sends PSRP messages via stdio).\r\n\r\n**This is all how it exists today**\r\n\r\nWhat I want is basically be able to replace \"ssh.exe\" which is hardcoded into the code with any generic handler. Today it is possible to do this by replacing ssh.exe with your own executable as outlined in this blog:\r\nhttps://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh\r\n\r\nThat's what gave me the inspiration, and looked into the code to find that ssh.exe was hardcoded when it should be a user-specifiable variable (maybe I don't want to use openssh for example for my ssh transport)\r\n\r\nAs mentioned before, making the transport handler class inheritable and having it work within the scope of the powershell module is a viable option, but it's a lot more effort for the already-stretched-thin Powershell team, whereas this change is a very straightforward modification that already has a strong testing surface. I can submit a PR if you want.\n\n<blockquote><img src=\"https://webdevolutions.blob.core.windows.net/blog/2020/07/PowerShell-remoting-over-SSH.png\" width=\"48\" align=\"right\"><div><img src=\"/favicon-16x16.png\" height=\"14\"> The Devolutions Blog</div><div><strong><a href=\"https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh\">PowerShell Remoting Over SSH, Without SSH!</a></strong></div><div>A few months ago, PowerShell 7 came out, finally bridging the gap between Windows PowerShell and PowerShell Core. It is now possible to use the same PowerShell everywhere (Windows, macOS, Linux!) whil...</div></blockquote>",
    "created_at": "2020-07-29T17:18:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665792807",
    "id": 665792807,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc5MjgwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665792807/reactions"
    },
    "updated_at": "2020-07-29T17:18:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665792807",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@JustinGrote  I see your point in allowing SSH remoting cmdlets to take arbitrary 'exe' path to act as the transport process via stdin/out/error.  But after all of the problems we had with SSH, I would hesitate to do this.  I would much prefer to support an abstract class or interface implementation.  I also want an endpoint design so that a transport solution can safely establish a remote session with configuration options.  But haven't really thought about that deeply yet.\r\n\r\n@iSazonov  PSRP never provided encryption, except for transferring SecureString objects (which is now supported x-plat with .NET crypto APIs).  It is up to the transport mechanism such as WinRM or SSH to provide over the wire encryption.",
    "created_at": "2020-07-29T17:32:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665799880",
    "id": 665799880,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc5OTg4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665799880/reactions"
    },
    "updated_at": "2020-07-29T17:32:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665799880",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PaulHigin understood and appreciate your review, I have sufficient workarounds to make this a \"nice to have\", not a \"need to have\".",
    "created_at": "2020-07-29T17:44:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665805872",
    "id": 665805872,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTgwNTg3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665805872/reactions"
    },
    "updated_at": "2020-07-29T17:44:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665805872",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PaulHigin I am the author of the blog post PowerShell remoting over SSH, without SSH (https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh). I agree that the ideal way to allow custom transport layers would involve an abstract class or interface implementation. However, I would definitely see a lot of value in minor modifications meant to substitute the OpenSSH client, as long as replacement can behave the same, starting by the possibility of overriding the hardcoded ssh.exe executable name + path through an environment variable.\r\n\r\nI understand the hesitation, as it could potentially become a slippery slope for third-party implementations, but for anything more complex than launching an executable and hooking the standard input/output, the recommended approach would be a new abstract class or interface to implement. I would suggest the following environment variable:\r\n\r\nPWSH_SSH_CLIENT\r\n\r\nThis could be set to the SSH executable name, or the full path to it. Of course, the goal would be to use an SSH client replacement that behaves like the original. Adding an executable called ssh.exe in the PATH before the real one works, it's just quite limiting and annoying. I have already validated the feasibility of what I intend to achieve, all I really need is to substitute the SSH client, and I can handle both the authentication and transport security externally without complex IPC with the child process.\r\n\r\nLet me describe my intended use case and then you can judge, starting with what I have available in my case:\r\n\r\n- I can make peer-to-peer calls between a client and server, with my own signaling server\r\n- I can use my own protocol to handle authentication entirely outside of PowerShell, similar to SSH\r\n- I can handle the transport security with two outgoing WebSocket transports that are also part of my solution\r\n\r\nIn other words, I can handle both the transport security and authentication entirely outside of PowerShell, and come up with a solution that requires me to simply substitute ssh.exe with my own executable that will make an outgoing connection to a one-time WebSocket relay. On the other side of that WebSocket relay, I will have the PowerShell server already authenticated under the right user and connected to the same one-time WebSocket relay, waiting for the MS-PSRP client.\r\n\r\nThere will be no password prompt from the ssh.exe replacement, all I need is to be able to substitute ssh.exe with my own replacement. I would modify my replacement executable to accept the same command-line parameters as ssh.exe, and I can manage to pass my few extra parameters through environment variables, but the only parameter I really need is a pre-generated WebSocket URL. To make this work, I can make a simple PowerShell function that makes the required preparation calls prior to launching the remote session.\r\n\r\nWould this be an acceptable compromise? We would allow the substitution of the SSH executable, but one would have to behave the same way as the real SSH client, no exceptions. Anything beyond that would need to be solved with a new abstract class or interface.\n\n<blockquote><img src=\"https://webdevolutions.blob.core.windows.net/blog/2020/07/PowerShell-remoting-over-SSH.png\" width=\"48\" align=\"right\"><div><img src=\"/favicon-16x16.png\" height=\"14\"> The Devolutions Blog</div><div><strong><a href=\"https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh\">PowerShell Remoting Over SSH, Without SSH!</a></strong></div><div>A few months ago, PowerShell 7 came out, finally bridging the gap between Windows PowerShell and PowerShell Core. It is now possible to use the same PowerShell everywhere (Windows, macOS, Linux!) whil...</div></blockquote>",
    "created_at": "2020-07-29T18:26:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665827464",
    "id": 665827464,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTgyNzQ2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665827464/reactions"
    },
    "updated_at": "2020-07-29T18:26:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665827464",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@awakecoding Thanks for your thoughts.  It seems there is more need for this than I thought.  It may be that both a simple and then more comprehensive solutions may be needed.  I'll mark this for committee review.",
    "created_at": "2020-07-29T19:57:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665877679",
    "id": 665877679,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTg3NzY3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665877679/reactions"
    },
    "updated_at": "2020-07-29T19:57:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665877679",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this, we agreed that it makes sense to have a pluggable model for remoting transports, but based on https://github.com/PowerShell/PowerShell/pull/13186 and generalized so that any potential remoting transport could be used and not just when calling out to native commands.",
    "created_at": "2020-07-29T22:57:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-665972337",
    "id": 665972337,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTk3MjMzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665972337/reactions"
    },
    "updated_at": "2020-07-29T22:57:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665972337",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've been playing around with [NamedPipeConnectionInfo](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.namedpipeconnectioninfo?view=powershellsdk-7.0.0) to see how that works and it seems like you can just specify a custom named pipe as the bidirectional traffic for PSRP. This allows you to create your own custom transport mechanism that PowerShell talks to through the named pipe and then your transport does whatever is needed to talk to the server.\r\n\r\nI created a POC [New-PSSessionLogger](https://gist.github.com/jborean93/79e0075be33912a4b7d161b9de449256) that demonstrates this in a way. It's actually being used to log the PSRP traffic to a file for later analysis but it shows how you can inject custom code to sit in between the client and server using what's available today in PowerShell. If all you are wanting is to create a named pipe target then you can ignore that spaghetti C# code and just do\r\n\r\n```powershell\r\n# All incoming and outgoing PSRP traffic will be sent through this pipe\r\n$connInfo = [Management.Automation.Runspaces.NamedPipeConnectionInfo]::new('My Pipe')\r\n$rs = [RunspaceFactory]::CreateRunspace($connInfo, $Host, $null)\r\n$rs.Open()\r\n\r\n$cstr = [Management.Automation.Runspaces.PSSession].GetConstructor(\r\n    'NonPublic, Instance', $null, [type[]]$rs.GetType(), $null)\r\n$session = $cstr.Invoke(@($rs))  # This is the PSSession\r\n\r\nInvoke-Command -Session $session -ScriptBlock { echo 'look at me now' }\r\n```\r\n\r\nWhile it is possible there are some downsides\r\n\r\n* You need to track the state of the named pipe separately\r\n    * `Remove-PSSession` won't close the pipe or any other resources PowerShell is managing\r\n    * Maybe we could extend PSSession to accept a custom dispose() ScriptMethod that is called with `Remove-PSSession`\r\n* It uses an [internal constructor](https://github.com/PowerShell/PowerShell/blob/c7bdb24ff3160b69285202f30a079e4c589f26f4/src/System.Management.Automation/engine/remoting/client/remoterunspaceinfo.cs#L249) to make the PSSession\r\n    * This might be something the PowerShell team is willing to open up in the future\r\n    * The argument to the constructor is a public type that you can build with `CreateRunspace` so there's not much hackery going on there\r\n* You are limited to a single bidirectional named pipe\r\n    * While not a major issue, other transports (like SSH) uses stdout for output and stdin for input which is nice if integrating it directly into a single process\r\n* `Invoke-Command` can fan-out in parallel, i.e. `-ComputerName host1, host2` but sessions must be created synchronously beforehand\r\n    * You still have the fanout behaviour of running the commands on each session in parallel, but you need to build and connect to the session synchronously beforehand\r\n    * I was hoping `Invoke-Command` would connect any PSSession's specified that are in the `BeforeOpen` state but it errors instead\r\n    * You could use `ForEach-Object -Parallel` to build and connect to the pipes in parallel but it's not as nice or as seemless\r\n    * Having a `-NamedPipe` parameter taking an array of strings which does the managing internally could work\r\n\r\nHaving a provider like mechanism for transport would be nice and opens up more possibilities but I feel like this could take a long time to be delivered. Potentially improving the named pipe experience will be an easier task and give a more public interface for custom transports with PSRP.",
    "created_at": "2020-12-17T06:02:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747227994",
    "id": 747227994,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzIyNzk5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 2,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747227994/reactions"
    },
    "updated_at": "2020-12-17T11:11:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747227994",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@jborean93 I've demonstrated this with PSAnywhere but there are a ton of limitations as you describe especially around runspace debugging that being able to specify a proper custom transport handler would solve.\r\nhttps://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/JustinGrote/866536458bfa097cb18a4b82181e5f16\">Powershell Debug Anywhere Design</a></strong></div><div>Powershell Debug Anywhere Design. GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
    "created_at": "2020-12-17T14:56:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747487777",
    "id": 747487777,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzQ4Nzc3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747487777/reactions"
    },
    "updated_at": "2020-12-17T14:56:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747487777",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I have successfully implemented an alternative PSRemoting transport by replacing the \"ssh.exe\" executable that makes the bridge between standard input/output streams and a WebSocket URL in rendezvous mode. For reference, here [is how it is used in my product](https://docs.devolutions.net/wayk/client/psremoting.html), and here is the [blog post detailing the proof-of-concept technique](https://blog.devolutions.net/2020/07/powershell-remoting-over-ssh-without-ssh). I have taken this approach because I don't want to ship custom PowerShell builds modified to expose internal interfaces.\r\n\r\nI think what @jborean93 suggests is very sound and on the right track. Let me add a few thoughts on how we could get alternative PSRemoting transports implemented in a very generic and extensible manner.\r\n\r\n**Subprocess standard input/output interface**: this is exactly how PowerShell currently interfaces with OpenSSH. I was surprised to realize how PowerShell barely \"relies\" on OpenSSH for SSH remoting other than the fact that it is hardcoded to use it. Having completely replaced it in my product, I can attest to the fact that the only thing preventing extensibility using a subprocess + standard input/output streams limited to the following:\r\n\r\n- Ability to specify which executable to launch for new connections (other than ssh.exe)\r\n- Ability to specify command-line parameters to be passed to the subprocess (other than OpenSSH)\r\n\r\nIn other words, all that stands in the way is to register and pass pretty much the same kind of arguments one would pass to the Start-Process command, except we need to somehow feed them to New-PSSession / Enter-PSSession to override which executable will be launched, and what command-line parameters will be used. For my implementation, I implemented the parsing of the OpenSSH client command-line parameters, but I passed my \"real\" command-line (the one with my WebSocket URL to connect to) through an environment variable.\r\n\r\n**In-process C# input/output stream interface**: this is closer to what @jborean93 suggests, except I would expand on it. The named pipe transport is the closest right now to a generic input/output stream interface, which uses at its core [System.IO.Pipes.PipeStream](https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes.pipestream). I think we could expose a generic named pipe interface, just like we could expose a generic subprocess interface, but the real deal would be to make it possible to implement a generic type derived from [System.IO.Stream](https://docs.microsoft.com/en-us/dotnet/api/system.io.stream), a parent of PipeStream. Here is a good documentation page covering all the specialized [System.IO.Stream classes to use as reference](https://docs.microsoft.com/en-us/dotnet/standard/io/).\r\n\r\nHere is my suggestion: either find an existing type derived from System.IO.Stream, or define a new one with extended functions meant to cover all the required functionality for PSRemoting. How about \"PSRemotingStream\" type? Just make sure it contains everything that would need to be implemented for a generic input/output stream used for PSRemoting and we have a deal.\r\n\r\nBecause in the end, all PSRemoting needs is a generic transport interface that can be implemented by anyone and easily injected in class like New-PSSession / Enter-PSSession. Since authentication is often done out-of-band (it's not baked into the PSRP protocol itself - the transport itself requires authentication to be opened, after which no second authentication occurs). This part appears to have always been handled either implicitly (the transport can be opened and authenticated automatically) or by explicit prompting at the time of opening the transport. In the case of the OpenSSH client, it is entirely done inside the child subprocess, PowerShell doesn't do a thing on its side. That password prompt you see is done by ssh.exe, not pwsh.exe.\r\n\r\nI say let's just get generic PSRemoting transport interfaces done experimentally, and then move on from there. I don't see a reason why we couldn't take both approaches: subprocess like with ssh, and in-process with a type derived from System.IO.Stream. While a subprocess can be a pain, it has a major upside: you don't care what the subprocess is. In our case, it is written in Rust, and we didn't have to bother figuring out ways to make Rust play well with .NET. The in-process approach has the advantage of not requiring an external executable, but you have to write a bit of C# to make it work. I see advantages to both approaches so I would definitely not settle for one or the other, I'd just go for both.",
    "created_at": "2020-12-17T15:24:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747506998",
    "id": 747506998,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzUwNjk5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747506998/reactions"
    },
    "updated_at": "2020-12-17T15:24:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747506998",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@awakecoding yeah definitely replacing the hardcoded 'ssh.exe' with a public constructor is a small non-breaking change and should be the initial experimental way to go about this, because all we need is for pwsh to send us xml messages back and forth.\r\n\r\nI know enough C# to be dangerous so I may attempt a PR of this, I'll bring it up on the community call today.",
    "created_at": "2020-12-17T15:47:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747522410",
    "id": 747522410,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzUyMjQxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747522410/reactions"
    },
    "updated_at": "2020-12-17T15:47:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747522410",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@JustinGrote we just need two parameters, which we can \"steal\" from [Start-Process](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process). The names can be changed from the original ones, but this is just to get the idea:\r\n\r\n**-FilePath**: the file path to the executable to launch instead of ssh.exe (either just the file name, or full path)\r\n**-ArgumentList**:  the command-line arguments to pass to the executable (not the OpenSSH CLI parameters)\r\n\r\nGive me those two and I can get rid of my two ugly workarounds that I am using today in my product:\r\n**-FilePath**: I ship a special \"psremoting\" directory with a hardlink or symlink called \"ssh.exe\" that points to \"jetsocat.exe\" (my real executable). I prepare the environment by prepending this directory to PATH before calling New-PSSession or Enter-PSSession.\r\n**-ArgumentList**: my executable (jetsocat.exe) parses the OpenSSH command-line arguments but doesn't do much with it. I pass the real command-line arguments meant for jetsocat through a \"JETSOCAT_ARGS\" environment variable and parse that.\r\n\r\nA subprocess PSRemoting interface doesn't have to go beyond that: launch this executable with these parameters, hook the standard input/output streams of that subprocess, and just use it for PSRP, exactly like SSH remoting works with OpenSSH.\r\n\r\nFor reference, [here are my helper functions that modify the environment prior to calling the real New-PSSession / Enter-PSSession functions](https://github.com/Devolutions/WaykClient-ps/blob/master/WaykClient/Public/WaykClientSession.ps1). I made wrapper functions called New-WaykPSSession / Enter-WaykPSSession that do it all at once.",
    "created_at": "2020-12-17T20:01:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747668850",
    "id": 747668850,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY2ODg1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747668850/reactions"
    },
    "updated_at": "2020-12-17T20:01:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747668850",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@awakecoding I can't promise the ArgumentList one but filepath you can just point to a batch file or whatnot and then call your program with those arguments.",
    "created_at": "2020-12-17T20:13:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13282#issuecomment-747675229",
    "id": 747675229,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13282",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY3NTIyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747675229/reactions"
    },
    "updated_at": "2020-12-17T20:13:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/747675229",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  }
]
