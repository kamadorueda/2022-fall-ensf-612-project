[
  {
    "author_association": "COLLABORATOR",
    "body": "cc @rjmholt ",
    "created_at": "2019-11-02T05:54:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549014011",
    "id": 549014011,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAxNDAxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014011/reactions"
    },
    "updated_at": "2019-11-02T05:54:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014011",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yes the PowerShell committee discussed this and it was decided against -- [the RFC was updated to reflect that](https://github.com/PowerShell/PowerShell-RFC/pull/192#issuecomment-536801425) and [it was taken out](https://github.com/PowerShell/PowerShell/pull/9849/commits/d4a393a76e3ea1468a32d7125758bfe4152fe8b3).\r\n\r\nGiven the syntactic complexity of it, I think it was actually the right decision. There was a lot of inconsistency in the edge cases of this proposal. Instead, you can use a subexpression pretty easily: `Get-Item ./doesntexist || $(exit 1)`. It's not beautiful, but it also doesn't set up weirdness like `Get-Item ./doesntexist || throw \"More things\" && \"other stuff\" &`. At that point it was starting to get very jagged between correct usage and bad. So simplicity won out.",
    "created_at": "2019-11-02T06:11:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549014897",
    "id": 549014897,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAxNDg5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014897/reactions"
    },
    "updated_at": "2019-11-02T06:11:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014897",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Also see:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/70ab772da77d8cc1cbec2e3aa29bd328ff1de589/test/powershell/Language/Operators/PipelineChainOperator.Tests.ps1#L92-L94",
    "created_at": "2019-11-02T06:12:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549014961",
    "id": 549014961,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAxNDk2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014961/reactions"
    },
    "updated_at": "2019-11-02T06:12:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549014961",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I did advocate fairly strongly for being able to use control flow statements in pipelines; I liked the idea and I think the concept is a nice one. Even though it didn't go in, I think it got a fair run.\r\n\r\nBut syntactically it doesn't work because the big difference between PowerShell and bash is that in PowerShell statements contain pipelines, whereas the opposite it the case in bash. Trying to shoehorn certain kinds of statement where a pipeline fits just made the syntax really unhelpful, and you'd either have to make dodgy syntax breaking changes or implement very fiddly syntax rules to massage it in.\r\n\r\nThe (badly named) subexpression syntax is designed for embedding a statement within a pipeline, so it offers this neatly.",
    "created_at": "2019-11-02T06:23:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549015433",
    "id": 549015433,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAxNTQzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549015433/reactions"
    },
    "updated_at": "2019-11-02T06:23:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549015433",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "NONE",
    "body": "I wonder how the fact \"syntactically it doesn't work because the big difference between PowerShell and bash\" can we made clear to users. I had assumed that this new feature would basically work the same in PowerShell as in bash, hence many others will very likely start with the same assumption. At least this conclusion seems 'another nail in the coffin' for the goal 'pwsh is a replacement to bash' :( ",
    "created_at": "2019-11-03T14:00:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549139311",
    "id": 549139311,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTEzOTMxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549139311/reactions"
    },
    "updated_at": "2019-11-03T14:00:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549139311",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22799428?v=4",
      "events_url": "https://api.github.com/users/mi-hol/events{/privacy}",
      "followers_url": "https://api.github.com/users/mi-hol/followers",
      "following_url": "https://api.github.com/users/mi-hol/following{/other_user}",
      "gists_url": "https://api.github.com/users/mi-hol/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mi-hol",
      "id": 22799428,
      "login": "mi-hol",
      "node_id": "MDQ6VXNlcjIyNzk5NDI4",
      "organizations_url": "https://api.github.com/users/mi-hol/orgs",
      "received_events_url": "https://api.github.com/users/mi-hol/received_events",
      "repos_url": "https://api.github.com/users/mi-hol/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mi-hol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mi-hol/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mi-hol"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "But it does work:\r\n\r\n```powershell\r\n{ Get-Item /nosuch || $(return)  } | Should -Not -Throw\r\n{ Get-Item / && $(return)  } | Should -Not -Throw\r\n```",
    "created_at": "2019-11-03T16:32:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549154971",
    "id": 549154971,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTE1NDk3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549154971/reactions"
    },
    "updated_at": "2019-11-03T16:32:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549154971",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@rjmholt if that already works, I don't see it being especially sensible to mandate the awkward syntax.",
    "created_at": "2019-11-03T17:14:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549158588",
    "id": 549158588,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTE1ODU4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549158588/reactions"
    },
    "updated_at": "2019-11-03T17:14:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549158588",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Prior to pipeline chains, the grammar was (I’m using a simplified shorthand here):\r\n\r\n```\r\nstatement:\r\n | ...\r\n | ‘return’ pipeline [‘&’]\r\n | pipeline [‘&’]\r\n\r\npipeline:\r\n | pipeline ‘|’ command_expression\r\n | expression\r\n\r\nexpression:\r\n | command_expression\r\n | ‘$(‘ statement ‘)’\r\n\r\ncommand_expression: ‘Get-Item /‘\r\n```\r\n\r\nThe current grammar just substitutes pipeline chains for pipelines, so that a pipeline is just a pipeline chain of length 1:\r\n\r\n```\r\nstatement:\r\n | ...\r\n | ’return’ pipeline_chain [‘&’]\r\n | pipeline_chain [‘&’]\r\n\r\npipeline_chain:\r\n | pipeline_chain ‘&&’ pipeline\r\n | pipeline_chain ‘||’ pipeline\r\n | pipeline\r\n\r\npipeline: <as above>\r\n```\r\n\r\nIf we allow control flow statements, then you might have this:\r\n\r\n```\r\npipeline_chain:\r\n | pipeline_chain ‘&&’ chain_element\r\n | pipeline_chain ‘||’ chain_element\r\n | chain_element\r\n\r\nchain_element:\r\n | ‘return’ pipeline_chain [‘&’]\r\n | pipeline\r\n```\r\n\r\nThat gives us back `gi / && return`, but now we have:\r\n\r\n- `gi / && return “Hi” && return “what?”`\r\n- `gi / && return “Job” &`\r\n- `gi / && return “Job” & &`\r\n- `if (gi / && return “Hi”) { throw “Never thrown” }`\r\n\r\nThe biggest question is “what do I expect those to do” and if there’s no clear answer it’s not good syntax. So let’s fix it.\r\n\r\nPutting control flow statements only at the end of chains fixes nothing because they already enforce themselves as the ends of chains; once you use one, the chain to the right is subordinate to `return` because they have a `pipeline_chain` under them in the grammar.\r\n\r\nSo let’s fix it instead by only allowing unchained pipelines under `return`. But now you can’t do `return gi file && cat file`.\r\n\r\nOk we can fix that if we allow chains when `return` is the start of the statement but not when we’re in a chain. But now we have two kinds of return statement and pipelines aren’t just degenerate pipeline chains, they have all these caveats.\r\n\r\nAnd we still haven’t addressed how to deal with `return 1 && 2 &` vs `1 && return 2 &`.\r\n\r\nAnd we also still haven’t addressed how to deal with control flow statements in places where only pipelines working as expressions used to be expected.\r\n\r\nIn my original implementation that last was addressed by having two kinds of AST, so that `return` by itself wouldn’t just start working I’m an `if` or a `while`. But that meant tool implementors overriding `VisitPipelineChainAst` wouldn’t hit all the things that looked like `&&`/`||`, they also needed `VisitStatementChain`. Which was badly named since it didn’t apply to all statements. But then to make it apply to more statements we’d need to make even bigger changes in the syntax around job control and statement separation. And with each change we risk breaking compatibility with PS 5.1 and becoming more like Raku.\r\n\r\nSo it’s a bit like the conversation Roy Batty has with Eldon Tyrell; every attempt to save the situation has some ugly consequence. To save that one tree we have to move the forest around it, and we’ve introduced more problems. A programming language’s grammar is a human interface that must be above all else consistent and composable. Inserting chaotic corner cases into the grammar makes it impossible to reason about or teach. And PowerShell needs to be defensible in 5 or 10 years time.",
    "created_at": "2019-11-03T18:57:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549167463",
    "id": 549167463,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTE2NzQ2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549167463/reactions"
    },
    "updated_at": "2019-11-03T19:01:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549167463",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Right, but if it's already possible to make it \"work\" by using subexpression we should probably make an effort to formalize it in a way that is reasonably intuitive. Otherwise, the behaviour of such subexpressions will always be pretty ambiguous, unless you intend to completely disable keyword use in a pipeline chain.",
    "created_at": "2019-11-04T00:39:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549196695",
    "id": 549196695,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTE5NjY5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549196695/reactions"
    },
    "updated_at": "2019-11-04T00:39:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549196695",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "An alternative is to make sure we include flow-control subexpressions in the examples for the documentation of this operator.  Sub expressions is an existing concept and maybe users should use it more.",
    "created_at": "2019-11-04T18:12:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549479264",
    "id": 549479264,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTQ3OTI2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549479264/reactions"
    },
    "updated_at": "2019-11-04T18:12:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549479264",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SteveL-MSFT, adding this to the documentation would be great! A [search for the term](https://docs.microsoft.com/en-us/search/?search=\"flow-control+subexpressions\"&category=All&scope=PowerShell) gives 0 results currently!\r\n\r\n![image](https://user-images.githubusercontent.com/22799428/68148339-15c71500-ff3c-11e9-9935-d33f4e94d1fd.png)\r\n\r\nor unrelated hits\r\n![image](https://user-images.githubusercontent.com/22799428/68148501-63438200-ff3c-11e9-9377-80ade445c4fa.png)\r\n",
    "created_at": "2019-11-04T18:48:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549493739",
    "id": 549493739,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTQ5MzczOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549493739/reactions"
    },
    "updated_at": "2019-11-04T18:50:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/549493739",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22799428?v=4",
      "events_url": "https://api.github.com/users/mi-hol/events{/privacy}",
      "followers_url": "https://api.github.com/users/mi-hol/followers",
      "following_url": "https://api.github.com/users/mi-hol/following{/other_user}",
      "gists_url": "https://api.github.com/users/mi-hol/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mi-hol",
      "id": 22799428,
      "login": "mi-hol",
      "node_id": "MDQ6VXNlcjIyNzk5NDI4",
      "organizations_url": "https://api.github.com/users/mi-hol/orgs",
      "received_events_url": "https://api.github.com/users/mi-hol/received_events",
      "repos_url": "https://api.github.com/users/mi-hol/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mi-hol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mi-hol/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mi-hol"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this and we agree to that we will stay with what we agreed in the RFC which is that supporting flow-control statements complicates the implementation and using sub-expressions is the right way to use this.  We should improve our documentation on sub-expressions if PowerShell users are not using them.",
    "created_at": "2019-11-06T23:41:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-550551624",
    "id": 550551624,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDU1MTYyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/550551624/reactions"
    },
    "updated_at": "2019-11-06T23:41:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/550551624",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT,  a quick tangent, though I believe it reinforces the point that we shouldn't force the awkward `$(...)` syntax (sorry for being late here).\r\n\r\n> Sub expressions is an existing concept and maybe users should use it more.\r\n\r\nIf anything, users should be using the (unfortunately named, as @rjmholt pointed out) sub-expression operator (`$(...)`)  _less_:\r\n\r\n* `$(...)` is currently frequently used where `(...)` would be the better choice - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5031\r\n\r\n  * It is `(...)` that deserves promoting, but for that it _needs a name and proper documentation_ - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5154\r\n\r\n* With rare exceptions, `$(...)` is the right tool only in _expandable strings_.\r\n   * Only if you truly need to embed _multiple_ statements in an expression do you need `$(...)`\r\n   * There are cases where you currently need it for technical reasons _but shouldn't have to_:\r\n        * Since compound statements (loops, conditionals) cannot serve as expressions _as the first pipeline segment_, using `$(...)` is _one_ workaround, but `& { ... }` is the better one - see #6817\r\n       * Because `throw` cannot be used inside `(...)` (which may be related to the issue at hand), declaring a parameter default value that effectively enforces passing an argument but without prompting requires `$(...)` (e.g., `param($EffectivelyMandatory = $(Throw \"Please pass a vaue.\"))`\r\n\r\n",
    "created_at": "2019-11-24T20:23:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557924315",
    "id": 557924315,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNDMxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557924315/reactions"
    },
    "updated_at": "2019-11-24T20:38:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557924315",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> It is (...) that deserves promoting, but for that it needs a name\r\n\r\nThis is from the early days of PS but IIRC `(...)` was referred to as a grouping expression, `$(...)` as a subexpression and `@(...)` as an array subexpression.",
    "created_at": "2019-11-24T20:34:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557925276",
    "id": 557925276,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNTI3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557925276/reactions"
    },
    "updated_at": "2019-11-24T20:34:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557925276",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @rkeithhill.\r\n\r\nThe latter two definitely officially have that name in [`about_Operators`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators#special-operators) - with suffix _operator_ - but `(...)` isn't covered there and I wasn't aware of a name for it - is that name in any existing documentation? A quick search revealed nothing.\r\n\r\nBy coincidence, _grouping operator_ is what I'm proposing in https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5154. ",
    "created_at": "2019-11-24T20:42:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557925939",
    "id": 557925939,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNTkzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557925939/reactions"
    },
    "updated_at": "2019-11-24T20:42:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557925939",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It was called that in the first edition of Bruce Payette's \"Windows PowerShell in Action\" section 5.3 (page 119). And it's the same in the second edition (page 156).",
    "created_at": "2019-11-24T20:45:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557926196",
    "id": 557926196,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNjE5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557926196/reactions"
    },
    "updated_at": "2019-11-24T20:46:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557926196",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Hmm, in the second edition, it looks like \"grouping expressions\" refer to the set of three operators.  It goes on to say:\r\n> Parentheses group expression operations and may contain either a simple expression or a simple pipeline.  They may not contain more than one statement or things like while loops\r\n\r\nFor subexpressions it says:\r\n> Subexpressions group collections of statements as opposed to being limited to a single expression.\r\n\r\nSo maybe it is just `parentheses operator`?  You might want to read through section 5.3 to see what you think.",
    "created_at": "2019-11-24T20:57:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557927206",
    "id": 557927206,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNzIwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557927206/reactions"
    },
    "updated_at": "2019-11-24T20:57:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557927206",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt \r\n\r\nThank you for putting up a good fight and for laying out the rationale.\r\n\r\nBefore I even try to understand the intricacies of the grammar, let me make a plea purely from a _user's_ perspective:\r\n\r\nIf we force the use of `$(...)`:\r\n\r\n* We burden what is probably the primary use case for `&&` and `||`.\r\n\r\n* New users will not expect the need for `$(...)` and won't necessarily know that _it_ is what is required when `foo || exit 1` fails (though documentation will help there).\r\n\r\n* Even once users _do_ know about the need for `$(...)`:\r\n  * They will forget to use it on occasion, because of the counter-intuitive need for it.\r\n  * When they do remember, this seemingly artificial requirement will be an ongoing source of frustration, especially since `$(...)` is hard to type.\r\n\r\nAs an aside: The same arguments apply to the [unfortunate decision to require `{...}` around identifiers in order to be able to use the null-conditional member-access operator, `?.`](https://github.com/PowerShell/PowerShell/issues/3240#issuecomment-524988790).\r\n\r\nSo, for the sake of the end-users' experience, can we look for a solution that works as expected, is easy to explain, and technically not too tortu[r]ous?\r\n\r\nPersonally, I'm not worried about cases such as `Get-Item ./doesntexist || throw \"More things\" && \"other stuff\" &`, because I wouldn't expect many people to attempt such acrobatics.\r\n\r\n\r\n",
    "created_at": "2019-11-24T21:05:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557927978",
    "id": 557927978,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyNzk3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557927978/reactions"
    },
    "updated_at": "2019-11-24T21:05:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557927978",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I appreciate the pointers, @rkeithhill: I found \"simple parenthetical notation\" in that chapter for `(...)` specifically, and \"expression and statement grouping operators\" indeed seems to be the umbrella term.\r\n\r\nIn other words: `(...)` currently has no name, so we can and should pick one going forward: _parentheses operator_ is problematic, because it doesn't reflect the operator's _purpose_, only its _syntactic form_.\r\n\r\nI encourage you to join the conversation at https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5154 to either endorse the suggested _grouping operator_ name or to suggest alternatives.",
    "created_at": "2019-11-24T21:48:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-557931474",
    "id": 557931474,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkzMTQ3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557931474/reactions"
    },
    "updated_at": "2019-11-24T21:48:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/557931474",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Before I even try to understand the intricacies of the grammar, let me make a plea purely from a user's perspective\r\n\r\nI very much understand and even sympathise, but the problem is that the grammar *is* the language. It's our most fine-grained API and also our primary user interface. PowerShell has pipelines contained by statements, not statements contained by pipelines. That's always been the case, and the way to put a statement within a pipeline is to use the `$(...)` syntax &mdash; that's its only purpose to exist outside of strings in the language. In addition to that being a huge change in PowerShell's grammar (effectively creating a fork in the language), there's no semantic support in PowerShell for general statement success; `$?` after `if` or `while` has no meaning.\r\n\r\nEssentially, with such a syntactic change you're asking for a new language, with a different treatment of syntactic and semantic constructs like expressions, pipelines and statements.\r\n\r\n> this seemingly artificial requirement will be an ongoing source of frustration\r\n\r\nJust to reiterate, it's not artificial. This isn't a case of us setting the rules because of an opinion. Programming language syntaxes are [formal languages](https://en.wikipedia.org/wiki/Formal_language) with specific requirements.\r\n\r\nIn our case, PowerShell is (mostly...) a traditionally LL(k)-parseable grammar (like most interpreted languages, since this is a big asset when you're reading the program on the fly). As the parser proceeds from left to right in the program, it decides what syntactic element it sees based on the state it's currently in (captured in our recursive descent parser mostly by the method we're in) and the element it sees right now. As the parser proceeds within each state, it has some way of deciding when to move to the next state or when to return to the state it came from. For example, in `if (...) { ... }`, it's expecting a statement at the outset and sees `if`, which in the \"expect statement\" state makes it transition to the \"if statement state\". Just as important is the final `}` at the end. It signals that we have finished seeing the `if` statement, and can now look for the next statement at that level. Every syntactic element in PowerShell (and in every formal language) has some way to declare \"end\" (think `)`, `}`, `;`, `<newline>`, `<end-of-file>` -- just like `</div>` in HTML).\r\n\r\nThe problem arises because pipelines, being the default form of statement, terminate the same way as arbitrary statements. So when you embed a statement within a pipeline, it's not clear what you're terminating, unless you have a syntax to delineate the extent of the statement. That's precisely the purpose of `$(...)`; when `)` is seen, we go back to expression parsing. Without that (or some other syntax to wrap statements within pipelines), there's no terminator to say \"ok statement's done, back to the pipeline state\". So instead, you get a deepening syntactic hole into embedded statements (e.g. `action1 && return action2 && return action3`, which is grouped as `action1 && return (action2 && return action3)`); there's no way to indicate syntactically that the top level pipeline chain should be continued.\r\n\r\nThat's true for any implementation that removes a container syntax for statements in pipelines or pipeline chains, so it's not an implementation detail. In fact, if PowerShell used an LR parser, it would be a major issue in the parser ([a reduce-reduce conflict](https://www.gnu.org/software/bison/manual/html_node/Reduce_002fReduce.html)). To quote that link from the GNU Bison docs:\r\n\r\n> A reduce/reduce conflict occurs if there are two or more rules that apply to the same sequence of input. This usually indicates a serious error in the grammar.\r\n\r\nThis is particularly important because syntaxes aren't a concept required by computers (those do fine with finite-block input like byte code and machine code). Syntaxes are a human interaction requirement, and a flaw in the syntax is as much a usability issue as it is a technical one. We could write the parser to make a call on the grammatical ambiguity ([like C does](https://en.wikipedia.org/wiki/Dangling_else)), but it would still be confusing to users to pick apart `write-error \"bad\" && return 0 || exit 1`.\r\n\r\n> The same arguments apply to the unfortunate decision to require {...} around identifiers in order to be able to use the null-conditional member-access operator, ?..\r\n\r\nI agree that the scenario is similar, but also think there that not breaking the way we parse existing valid syntax was the right way to go. Again, a change there isn't just a case of us making a decision to support a small number of wild programs out there &mdash; we've made numerous breaking changes in cases where we thought the pros outweighed the cons (not that I personally agree with all of them, or that those do or don't justify others). The issue is that changing some aspect of the tokenizer or parser means that two PowerShell versions will no longer generate the same AST for some scripts, so two PowerShells will \"see\" the same script differently. That means we can't even read the syntax the same way, so there's no PSScriptAnalyzer rule you can write to pick up possible issues around it; PSScriptAnalyzer will see a different syntax from one PowerShell version to the next.\r\n\r\nUnlike C#, PowerShell can't pre-compile a different syntax to a compatible format for later execution, meaning that a syntactic change is tethered to the runtime. Once PowerShell makes a syntactic break, we reduce the number of scripts that can work against different versions, meaning users are forced to write two scripts, which is a serious issue for a shell and a scripting language. PowerShell is supposed to be dynamic enough to bend past all the differences with logic inside one script, but the syntax is the one non-negotiably static thing we have. And making a syntax change where both before and after are valid is especially pernicious, since there's no simple way to detect it, there's no warning for it and even after executing it in both environments, users might not know that a different behaviour occurred.",
    "created_at": "2019-12-04T21:20:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-561843650",
    "id": 561843650,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTg0MzY1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/561843650/reactions"
    },
    "updated_at": "2019-12-04T21:26:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/561843650",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I appreciate the thoughtful, in-depth answer, @rjmholt.\r\n\r\nRe the `?.` syntax issue, I suggest we continue the conversation at https://github.com/PowerShell/PowerShell/issues/3240#issuecomment-565745004, where I've quoted the relevant part of your answer in my response.\r\n",
    "created_at": "2019-12-14T19:27:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-565745210",
    "id": 565745210,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc0NTIxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565745210/reactions"
    },
    "updated_at": "2019-12-14T19:27:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565745210",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Quoting from your [earlier comment](https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549167463):\r\n\r\n> So let’s fix it instead by only allowing unchained pipelines under return. But now you can’t do \r\n`return gi file && cat file`.\r\n\r\nI don't see that as a problem, because I see little value in being able to do that. \r\n(Bash users won't attempt it anyway, because to them `return` only ever takes a numeric argument  - a function's exit code).\r\n\r\n**Telling users that `return` only ever works on a _single_ pipeline makes for a straightforward rule** and means that `return gi file && cat file` is a pointless command, because the `cat file` command never gets to execute.\r\n\r\nIn fact, that's exactly what happens in Bash:\r\n\r\n```sh\r\n$ foo() { return 0 && ls /; }; foo\r\n# no output; exit code is 0\r\n```\r\n\r\nTelling users that they must use `$(...)` if they want to return an entire _chain_  strikes me as perfectly reasonable:\r\n\r\n```powershell\r\n# To return a *chain*, you must use $(...)\r\nreturn $(gi file && cat file) \r\n```\r\n\r\nRequiring `$(...)` for _this_ exotic case seems much more reasonable that requiring it for  the simple and much more common `foo || return` case.\r\n\r\nOf course, you can avoid `$(...)` altogether if you simply don't use `return` or simply make it the _next_ statement:\r\n\r\n```powershell\r\ngi file && cat file\r\nreturn # only needed if there are additional statements in the scope.\r\n```\r\n\r\n> And we still haven’t addressed how to deal with `return 1 && 2 & vs 1 && return 2 &`.\r\n\r\nAgain, if `return` only ever operators on a _single_ pipeline, it's easy  to reason that this particular chain is pointless, because the first chain segment exits unconditionally.\r\n\r\n> And we also still haven’t addressed how to deal with control flow statements in places where only pipelines working as expressions used to be expected.\r\n\r\nCan you say more about that?\r\n",
    "created_at": "2019-12-14T20:44:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-565751633",
    "id": 565751633,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTc1MTYzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565751633/reactions"
    },
    "updated_at": "2019-12-14T21:04:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/565751633",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt , after some more conceptual fog lifted for me based on your feedback and the discussion in #6817, I've scrapped the previous comment['s proposal].\r\n\r\nLet me try to bring some closure to this conversation:\r\n\r\nI think all _conceptual_ problems you raise in https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-549167463 would go away - and with that any potential confusion for users - if we limited the scope of the operand for `return` / `exit`/  `throw` to a _single pipeline_ (as before, by default, given that there were no chains) and - now - also to  a single pipeline chain _element_ (link); ditto for postpositional `&` (background operator).\r\n\r\n  * This is the behavior for `&&` and `||` that makes the most sense -  not just if you're coming from Bash, but _generally_: In a pipeline chain, you want to be able to exit the scope _selectively_, from _individual_ chain elements, depending on the success status of previous elements (e.g., `foo -l && return`, `foo -l || exit 1`)\r\n\r\n  * It's a natural extension to the pre-chain-feature behavior, where you could (and still can) place `return`, `exit` and `throw` before a pipeline - but _no other keywords_ (`if`, `while`, ...)\r\n\r\nIn short: a pipeline chain is then a chain of pipelines that may _each_ be preceded by `return` / `exit` / `throw` and may _each_ be followed by `&` - other than chaining such pipelines with `&&` and `||`, there's no syntax that pertains to the chain _as a whole_.\r\n\r\nIt's only worth considering _feasibility_  if we agree that the above is the _desirable_ behavior.\r\n\r\n---\r\n\r\nHere's what the proposal might look like in terms of a grammar _if there weren't backward-compatibility concerns_.\r\n\r\nI do realize that these concerns are paramount, I just can't personally answer the question whether there _is_ a non-breaking way to implement this without the solution becoming too complex and cumbersome from a _code-maintenance_ perspective.\r\n\r\n```\r\nstatement:\r\n | ...\r\n | pipeline_chain \r\n\r\npipeline_chain:\r\n | pipeline_chain ‘&&’ chain_element\r\n | pipeline_chain ‘||’ chain_element\r\n | chain_element\r\n\r\nchain_element:\r\n | ‘return’ pipeline [‘&’]\r\n | ‘exit’ pipeline [‘&’]\r\n | ‘throw’ pipeline [‘&’]\r\n | pipeline\r\n```\r\n\r\nThat is, `return` / `exit` / `throw` would become part of a chain element (link) only, and postpositional `&` would similarly only be allowed _per chain element_.\r\n\r\nThe only conceivable downside is one you've already mentioned: you'd then be able to write the following non-sensical code:\r\n\r\n```powershell\r\nif (exit 1) { ... } # will unconditionally exit the enclosing script - block is never entered\r\nexit 1 && ...   # ditto - && ... is effectively ignored\r\n``` \r\n\r\nBut I wouldn't consider that a problem, given that it's fair to assume that users know the meaning of `return` and `exit` and `throw`; there's generally never a guarantee that a _syntactically_ valid statement [sequence] isn't _semantically_ pointless in practice (e.g., `if ($false) ...` or `exit 1; ...`).\r\n\r\n---\r\n\r\nSo, the - at this point potentially rhetorical in effect - question is: \r\n\r\nCan the above be implemented:\r\n\r\n* without breaking existing AST-processing tools \r\n* _and_ in a manner that doesn't make the implementation too complex and cumbersome from a _code-maintenance_ perspective?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-12-27T14:53:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-569285154",
    "id": 569285154,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTI4NTE1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/569285154/reactions"
    },
    "updated_at": "2019-12-28T09:58:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/569285154",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "```powershell\r\n0 && return 1\r\n```\r\n> RETURN: The term 'RETURN' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\n```powershell\r\n0 && 1\r\n```\r\n> 0\r\n> 1\r\n\r\nShould I understand that `1` is not a term?  I would rather say that `RETURN` is not.",
    "created_at": "2020-07-26T10:19:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663969732",
    "id": 663969732,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk2OTczMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663969732/reactions"
    },
    "updated_at": "2020-07-26T10:19:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663969732",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@yecril71pl I'm not sure I understand the question.  Can you elaborate?",
    "created_at": "2020-07-26T11:43:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663977665",
    "id": 663977665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk3NzY2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663977665/reactions"
    },
    "updated_at": "2020-07-26T11:43:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663977665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Why is `0 && 1` not in error?\r\nIf `1` is a term, then, according to the error message reported by `0 && return 1`, it must be \"the?? a name of a cmdlet, function, script file, or operable program\" (note that the definite article is definitely out of place there).  But `1` is none of them, at least at my place, so I conclude it must not be a term, or otherwise the error message would equally apply to it..\r\nAlso, what does an \"operable program\" mean?  An operable application, that one I know: is an event-driven application that responds to input from the operator.  If it stops responding, it becomes inoperable, a.k.a. hangs.  I still do not know what an \"operable program\" is supposed to mean.",
    "created_at": "2020-07-26T11:53:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663978562",
    "id": 663978562,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk3ODU2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663978562/reactions"
    },
    "updated_at": "2020-07-26T11:53:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663978562",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Why is `0 && 1` not in error?\r\n\r\nSo in that parsing mode any `CommandBaseAst` is allowed.  That includes:\r\n\r\n1. A command, like `Get-ChildItem -Recurse`\r\n1. A command expression, which is basically a wrapper for any *expression*.\r\n\r\nThe term expression here refers to a specific subset of language elements.  In this case, it's a constant expression (the literal integer `1`).  Not included in this subset are *statements*.  Statements are another subset that include things like `if`, `return`, `foreach` etc.\r\n\r\nSo basically because *statements* cannot be parsed, the snippet `return 1` is parsed as a *command* with the literal `1` as an argument.\r\n\r\n> Also, what does an \"operable program\" mean? An operable application, that one I know: is an event-driven application that responds to input from the operator. If it stops responding, it becomes inoperable, a.k.a. hangs. I still do not know what an \"operable program\" is supposed to mean.\r\n\r\nIt just means an executable file found by command discovery.  In Windows it means a file in the Portable Executable format, or just anything that can be invoked with the shell verb \"Invoke\" (which is pretty much any file system item).",
    "created_at": "2020-07-26T11:59:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663979160",
    "id": 663979160,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk3OTE2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663979160/reactions"
    },
    "updated_at": "2020-07-26T12:03:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663979160",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> The term expression here refers to a specific subset of language elements. \r\n\r\nThe error message I get gives me a specific subset of that subset, and that subset does not cover `1`.\r\n \r\n> So basically because _statements_ cannot be parsed, the snippet `return 1` is parsed as a _command_ with the literal `1` as an argument.\r\n\r\nI do not think it should be parsed as a command because `RETURN` is not a bareword, it is a keyword, and it cannot begin a command.\r\n\r\n> > Also, what does an \"operable program\" mean? An operable application, that one I know: is an event-driven application that responds to input from the operator. If it stops responding, it becomes inoperable, a.k.a. hangs. I still do not know what an \"operable program\" is supposed to mean.\r\n\r\n> It just means a command found by command discovery. Usually an executable application in `%PATH%`, function, binary cmdlet, alias, or script file.\r\n\r\nSo PowerShell has its own definition what \"operable\" means.  We should definitely change that.",
    "created_at": "2020-07-26T12:08:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663979961",
    "id": 663979961,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk3OTk2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663979961/reactions"
    },
    "updated_at": "2020-07-26T12:08:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663979961",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The error message I get gives me a specific subset of that subset, and that subset does not cover `1`.\r\n\r\nNot sure what you mean.  If you'd like clarification on something I've said feel free to ask.\r\n \r\n> I do not think it should be parsed as a command because `RETURN` is not a bareword, it is a keyword, and it cannot begin a command.\r\n\r\nAnywhere where statements are not allowed it will be parsed as a command. If you'd like to know more about why statements are not allowed in this syntax, please read through the rest of the thread.  After that if you have questions about a specific part feel free to ask.\r\n\r\n> So PowerShell has its own definition what \"operable\" means. We should definitely change that.\r\n\r\nThat's out of scope for this issue. If you'd like to discuss that I'd recommend opening a new one.",
    "created_at": "2020-07-26T12:15:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663980653",
    "id": 663980653,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MDY1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663980653/reactions"
    },
    "updated_at": "2020-07-26T12:15:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663980653",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > I do not think it should be parsed as a command because `RETURN` is not a bareword, it is a keyword, and it cannot begin a command.\r\n> \r\n> Anywhere where statements are not allowed it will be parsed as a command. If you'd like to know more about why statements are not allowed in this syntax, please read through the rest of the thread. After that if you have questions about a specific part feel free to ask.\r\n\r\nI think it is a wrong thing to do, UX-wise.  I would expect `0 && return 1` to fail even if there is some `return.exe` in the executable search path.",
    "created_at": "2020-07-26T12:29:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663981943",
    "id": 663981943,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MTk0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663981943/reactions"
    },
    "updated_at": "2020-07-26T12:32:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663981943",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I think it is a wrong thing to do. I would expect `0 && return 1` to fail even if there is some `return.exe` in the executable search path.\r\n\r\nYeah I agree.  Problem is that logic is very heavily relied on with the `foreach` alias pointing to `ForEach-Object`.  That logic can't be changed without breaking a lot of folks.",
    "created_at": "2020-07-26T12:34:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663982353",
    "id": 663982353,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MjM1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663982353/reactions"
    },
    "updated_at": "2020-07-26T12:34:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663982353",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "So, returning to the problem at hand, if we allow `&& return` then we should also allow `&& foreach`, and then we rely on the fact that nobody would use `Foreach-Object` as the first pipline element, amirite?  But what about nutjobs that would write `0 && foreach { $_ } -I 0` , and then they are broken?",
    "created_at": "2020-07-26T12:47:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663983658",
    "id": 663983658,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MzY1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663983658/reactions"
    },
    "updated_at": "2020-07-26T12:47:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663983658",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> So, returning to the problem at hand, if we allow `&& return` then we should also allow `&& foreach`, and then we rely on the fact that nobody would use `Foreach-Object` as the first pipline element, amirite?\r\n\r\nBelieve it or not plenty of folks do.  Especially if they are taking a `ScriptBlock` from an external source and want to emulate a process block.  There are better ways to do it, but using `ForEach-Object` in the first pipeline slot is a pretty common way to do it.\r\n\r\n> `0 && foreach { $_ } -I 0` , and then they are broken?\r\n\r\nYou got it.  Not only would that no longer work, it would be a *parse time* error :/\r\n\r\n",
    "created_at": "2020-07-26T12:52:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10967#issuecomment-663984130",
    "id": 663984130,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10967",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4NDEzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663984130/reactions"
    },
    "updated_at": "2020-07-26T13:13:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/663984130",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  }
]
