[
  {
    "author_association": "COLLABORATOR",
    "body": "There are other verbs that do come close, but none of the ones I can think of deal with idempotence -- not modifying the resource if it's already in the desired state.\r\n\r\nArguably, some of this is the purview of DSC, but I think we could still use some cmdlets that work in a similar fashion. üëç ",
    "created_at": "2020-01-28T20:48:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579448751",
    "id": 579448751,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQ0ODc1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579448751/reactions"
    },
    "updated_at": "2020-01-28T20:48:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579448751",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "How about `Assert`?\r\n\r\n```raw\r\nVerb   AliasPrefix Group     Description\r\n----   ----------- -----     -----------\r\nAssert as          Lifecycle Affirms the state of a resource\r\n```",
    "created_at": "2020-01-28T23:29:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579522418",
    "id": 579522418,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUyMjQxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579522418/reactions"
    },
    "updated_at": "2020-01-28T23:29:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579522418",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "At least from what I've seen, `Assert` typically indicates the cmdlet will throw an error if the resource is not in the desired state, rather than attempting to do anything to fix it, no?",
    "created_at": "2020-01-28T23:32:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579523398",
    "id": 579523398,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUyMzM5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579523398/reactions"
    },
    "updated_at": "2020-01-28T23:32:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579523398",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "The few example of cmdlet using assert behaves as  @vexx32  indicates, wondering if there are some examples that can help me to understand other valid uses of assert ",
    "created_at": "2020-01-28T23:38:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579525114",
    "id": 579525114,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUyNTExNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579525114/reactions"
    },
    "updated_at": "2020-01-28T23:38:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579525114",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've seen that in the context of tests, but not much otherwise.  Afaik there's no official guidance suggesting that *should* be the case, and tbh it kind of seems like a waste of the verb.",
    "created_at": "2020-01-28T23:46:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579527100",
    "id": 579527100,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUyNzEwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579527100/reactions"
    },
    "updated_at": "2020-01-28T23:46:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579527100",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It is in line with how _assert_ is used in debugging in other languages and in Pester's `Assert-*` commands, but even generally I think the following distinction makes sense:\r\n\r\n* To _assert_ means to assume that a given state is _already in effect_, to make a claim about _what should already be true_, without implying action toward making it so.\r\n   * If the assertion fails (turns out not be true), you want to know about, which in the world of software typically means failing instantly and noisily.\r\n\r\n* To _ensure_ means to _take action if needed_ so that a desired state is reached.\r\n\r\n  * If the desired state is already in effect, no action or notification is needed.\r\n  * If the desired state _cannot be reached_, an error must be reported.\r\n\r\n\r\n",
    "created_at": "2020-01-29T00:56:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579544453",
    "id": 579544453,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU0NDQ1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579544453/reactions"
    },
    "updated_at": "2020-01-31T19:28:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579544453",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah I can't really argue with any of that.  I'm just not super excited to see *another* verb added that is only used a handful of times.  The nature of the verb system is that sometimes they don't match up 100%, but keeping the verb pool low means increased discoverability.  `Assert` is close enough imo.",
    "created_at": "2020-01-29T01:13:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579548285",
    "id": 579548285,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU0ODI4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579548285/reactions"
    },
    "updated_at": "2020-01-29T01:13:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579548285",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Understood re concern about verb proliferation, but I've personally cringed at having to shoehorn _ensure_ functionality into `Assert-`  as a command _author_; as a command _user_ , I find it problematic to be faced with `Assert-Foo` without knowing whether it will abort, if Foo isn't already true, or if it will make it true for me - two very different things.\r\nSure, the help will (hopefully) tell you, but to me the point of a standardized verb is to convey variations of _fundamentally_ the same action, and I don't think that is the case here.\r\n",
    "created_at": "2020-01-29T01:29:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579551929",
    "id": 579551929,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU1MTkyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579551929/reactions"
    },
    "updated_at": "2020-01-29T01:30:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579551929",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "As @vexx32 mentioned, we are getting into DSC territory.  What would be the guidance to authors to help them know when to write an `Ensure-` function or cmdlet instead of a DSC configuration?  I guess for small scenarios that don't warrant the overhead of DSC, but that could get subjective..?",
    "created_at": "2020-01-29T08:21:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579645718",
    "id": 579645718,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTY0NTcxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579645718/reactions"
    },
    "updated_at": "2020-01-29T08:21:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579645718",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/48358244?v=4",
      "events_url": "https://api.github.com/users/tommeadon/events{/privacy}",
      "followers_url": "https://api.github.com/users/tommeadon/followers",
      "following_url": "https://api.github.com/users/tommeadon/following{/other_user}",
      "gists_url": "https://api.github.com/users/tommeadon/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tommeadon",
      "id": 48358244,
      "login": "tommeadon",
      "node_id": "MDQ6VXNlcjQ4MzU4MjQ0",
      "organizations_url": "https://api.github.com/users/tommeadon/orgs",
      "received_events_url": "https://api.github.com/users/tommeadon/received_events",
      "repos_url": "https://api.github.com/users/tommeadon/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tommeadon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tommeadon/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tommeadon"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@tommeadon I've not seen or heard much guidance in the way of DSC for pwsh at present. Some pieces are in place. But as yet I don't think there's currently a supported way to apply any DSC configuration when using PowerShell 6+, is there?",
    "created_at": "2020-01-29T12:24:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579732268",
    "id": 579732268,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTczMjI2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579732268/reactions"
    },
    "updated_at": "2020-01-29T12:24:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579732268",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "More generally, I think, desired-state logic is useful in _any_ domain, not just in the domain of _computer configuration_ (DSC), so I don't see an either-or there (though it couldn't hurt to mention DSC in the documentation for the new verb).\r\n",
    "created_at": "2020-01-29T12:34:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579735886",
    "id": 579735886,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTczNTg4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579735886/reactions"
    },
    "updated_at": "2020-01-29T12:34:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579735886",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Ensure-DiskAvaialbleSpace vs Test-DiskAvaialbleSpace - second looks well.",
    "created_at": "2020-01-29T14:22:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579777141",
    "id": 579777141,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTc3NzE0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579777141/reactions"
    },
    "updated_at": "2020-01-29T14:22:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579777141",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm afraid I don't understand your comment, @iSazonov; what looks good?\r\n(`Test-DiskSpaceAvailable` would return a  Boolean reflecting whether enough space is available, `Assert-DiskSpaceAvailable` would fail if not enough space is available, and `Ensure-DiskSpaceAvailable` would try to make enough space available automatically.)",
    "created_at": "2020-01-29T14:28:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579780238",
    "id": 579780238,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTc4MDIzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579780238/reactions"
    },
    "updated_at": "2020-01-29T14:30:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579780238",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Original request is to execute a script if a condition is true/false -  `Ensure-DiskAvaialbleSpace 100Gb -ScriptBlock { Clear-OldFiles }`\r\nIt is the same as:\r\n```powershell\r\nif (-not Test-DiskAvaialbleSpace 100Gb)\r\n{\r\n    Clear-OldFiles\r\n}\r\n```\r\n",
    "created_at": "2020-01-29T14:36:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579783693",
    "id": 579783693,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTc4MzY5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579783693/reactions"
    },
    "updated_at": "2020-01-29T14:36:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579783693",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> At least from what I've seen, `Assert` typically indicates the cmdlet will throw an error if the resource is not in the desired state, rather than attempting to do anything to fix it, no?\r\n\r\nwell yes, Assuming you did Ensure-DiskAvaialbleSpace 100GB - what else would the cmdet do but to throw an error is not enough space were available? Unless that cmdlet is really really smart, it's not likely to make more space available on full drive!",
    "created_at": "2020-01-29T17:04:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579858483",
    "id": 579858483,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTg1ODQ4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579858483/reactions"
    },
    "updated_at": "2020-01-29T17:04:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579858483",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "NONE",
    "body": "Ensure-DiskAvaialbleSpace could begin to delete/archive files such as logs, cached files, VHD, videos, etc until it achieves the desired stated without having to wipe everything, so it is not a simple\r\n\r\n if (test) { action }\r\n\r\nAlso the intention is to be reusable, so the it avoids repetition in several Jobs.\r\n\r\nThrowing an exception still a possible result after trying and not achieving the expected state, for example some file types might have be in use or have a minimum retention before it can be moved or deleted..",
    "created_at": "2020-01-29T19:50:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579929830",
    "id": 579929830,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTkyOTgzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579929830/reactions"
    },
    "updated_at": "2020-01-29T19:50:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579929830",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah. I can see that being really well received. How does this cmdlet even begin to know which log files, are good to remove or which corporate videos get nuked for every organisation. \r\n\r\nI have 2TB collection of Grateful Dead live shows that has taken me over 35 years to accumulate. I would have negative thoughts were a cmdlet to delete that data.  And suppose that there were no 'temp' files to remove - what then? Would you expect the cmdlet to order, install, and provision a new disk, or a new computer with more disks etc etc? I jest of course but there are some real risks here.\r\n\r\nThe question of what constitutes deletable files is going to provide different answers for every customers. An Assert-Freespace might be useful - just leave it to the customer to catch the issue and deal accordingly.\r\n\r\n",
    "created_at": "2020-01-29T19:58:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579932882",
    "id": 579932882,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTkzMjg4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579932882/reactions"
    },
    "updated_at": "2020-01-29T19:58:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579932882",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think we're getting off topic here: the proposal is to add a new approved verb, `Ensure`, and I think there's consensus on its _general logic_ (though not everyone agrees that we need a new verb). \r\n\r\nI don't think we need to discuss the specifics of a hypothetical command that uses this verb; it's just an example (and @iSazonov even fleshed out a variant that should allay your concerns).",
    "created_at": "2020-01-29T20:19:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579941243",
    "id": 579941243,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk0MTI0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579941243/reactions"
    },
    "updated_at": "2020-01-29T20:19:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579941243",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I am unconvinced the new verb is needed. Ensure as a verb suggests that something is done to do the ensuring. Ensure-memory, ensure-filespace, etc - all suggest cmdlets are going to be able to do something to do the ensuring. \r\n\r\n I'd prefer to use Assert, then catch any exception assert raises. That gives responsibility to the user as to what to if the assertion fails.",
    "created_at": "2020-01-29T20:25:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579943381",
    "id": 579943381,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk0MzM4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579943381/reactions"
    },
    "updated_at": "2020-01-29T20:25:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579943381",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Ensure as a verb suggests that something is done to do the ensuring.\r\n\r\nIndeed; the distinction between `Assert` and `Ensure` was summarized [above](https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-5795444530).\r\n\r\n@SeeminglyScience's concern is verb proliferation, whereas you seem to think there's no value in implementing commands that do something to ensure a desired state?\r\nI can think of many cases where a desired state can more self-evidently be ensured (think `Ensure-ConnectionInitialized`, `Ensure-ModuleInstalled`, ...), which is a useful technique, so to give it expression via a dedicated verb makes perfect sense to me. Note that we're not necessarily talking about _standard_ cmdlets using the new verb, but (also) about giving users a way to name self-authored commands that exhibit desired-state logic in an expressive manner that is also compliant.",
    "created_at": "2020-01-29T20:46:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579951669",
    "id": 579951669,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk1MTY2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579951669/reactions"
    },
    "updated_at": "2020-01-29T20:46:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579951669",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Here the intention is to allow PSScriptAnalyzer to highlight unwanted verbs, but in this case we haven't found a good alternative to Ensure.\r\n\r\nThrowing exceptions seems to over complicate the code,\r\n\r\nBrowsing I see other examples such as:\r\n\r\nEnsure-IISAppPoolStarted   \r\nEnsure-FileEnconding\r\nEnsure-PSDrive\r\nEnsure-RegistryKey\r\n\r\nWhich helps to make code easier.\r\n\r\nNo sure if there is an alternative in PSScriptAnalyzer to expand the accepted verbs. ",
    "created_at": "2020-01-29T20:55:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579955183",
    "id": 579955183,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk1NTE4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579955183/reactions"
    },
    "updated_at": "2020-01-29T20:55:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579955183",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "For many/.some of those other verbs work too.\r\n\r\n- Rather than Ensure-IISAppPoolStarted - why not just Start-IISAppPool\r\n- Rather than Ensure-FileEnconding Set-FIleEncoding\r\n- Rather than Ensure-PSDrive  New-PSDrive -EA 0\r\n- Rather than Ensure-RegistryKey - New-RegistryKey -EA-\r\n\r\n0\r\n\r\n",
    "created_at": "2020-01-29T21:07:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579959710",
    "id": 579959710,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk1OTcxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579959710/reactions"
    },
    "updated_at": "2020-01-29T21:07:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579959710",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Because `-ea 0` (`-ErrorAction SilentlyContinue`) is no substitute for desired-state logic: for instance, if `New-RegistryKey` fails not because the key already exists, but _because you lack permission to create it_, your code will malfunction.\r\n\r\nAlso, a `Start-*` command shouldn't be assumed to be idempotent. ",
    "created_at": "2020-01-29T21:17:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579964098",
    "id": 579964098,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk2NDA5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579964098/reactions"
    },
    "updated_at": "2020-01-29T21:18:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579964098",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "What is the main benefit of adding this verb? In a `Ensure` vs `Set` cmdlet all I see `Ensure` is going to run a `Test` then `Set` if needed. The same logic can performed in whatever script is calling that cmlet like in @iSazonov example.",
    "created_at": "2020-01-29T21:43:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579973560",
    "id": 579973560,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk3MzU2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579973560/reactions"
    },
    "updated_at": "2020-01-29T21:43:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579973560",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38873752?v=4",
      "events_url": "https://api.github.com/users/ThomasNieto/events{/privacy}",
      "followers_url": "https://api.github.com/users/ThomasNieto/followers",
      "following_url": "https://api.github.com/users/ThomasNieto/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThomasNieto/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ThomasNieto",
      "id": 38873752,
      "login": "ThomasNieto",
      "node_id": "MDQ6VXNlcjM4ODczNzUy",
      "organizations_url": "https://api.github.com/users/ThomasNieto/orgs",
      "received_events_url": "https://api.github.com/users/ThomasNieto/received_events",
      "repos_url": "https://api.github.com/users/ThomasNieto/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ThomasNieto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThomasNieto/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ThomasNieto"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The main benefit is [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself): you can write _wrapper_ commands you can call from multiple places that ensure that a desired state has been achieved, by wrapping the logic of testing for the state and performing what's necessary to achieve the state only once.\r\n\r\n",
    "created_at": "2020-01-29T21:50:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579976218",
    "id": 579976218,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk3NjIxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579976218/reactions"
    },
    "updated_at": "2020-01-29T21:50:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579976218",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "You could similarly ask what the benefit of DSC is: It is the convenience of being able to ask a command / engine / framework to achieve a desired target state, whether by no-op (if already in the target state) or by whatever operations are necessary, and to only be notified in case of the inability to achieve the target state; even though the syntax wouldn't be declarative (the way it is in DSC), calling an `Ensure-*` command would have the same benefits.",
    "created_at": "2020-01-29T22:08:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579983769",
    "id": 579983769,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk4Mzc2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579983769/reactions"
    },
    "updated_at": "2020-01-29T22:08:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579983769",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'll review current implementation based on @doctordns  suggestions.\r\n\r\nIn general, the pattern is \r\n\r\nfunction Ensure_X {\r\n  if ( test_X ) { return }\r\n   Action_1\r\n....\r\n  if ( test_X ) { return }\r\n  Action_n\r\n  if ( test_X ) { return }\r\n  throw \"Failed to achieve Test_X\"\r\n}\r\n\r\nVerbs such as `Set` and `New` indicates the action is going to be executed without previous validation.\r\n\r\nCertainly the code can be unwind in the caller function, but will make it less clear and reusable\r\n\r\nAnother example I see \r\n\r\nEnsure-File -path $path  -Source @($src1, @src2)  # src can be UNC, http or git.\r\n\r\nCan be argued that `Copy-File` is an option, but it hides the intend of checking first and the do the best effort to try to get the resource from any of the indicated sources \r\n",
    "created_at": "2020-01-29T22:16:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579986812",
    "id": 579986812,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk4NjgxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579986812/reactions"
    },
    "updated_at": "2020-01-29T22:17:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579986812",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think part of my issue with this verb is that it mainly makes sense to use for internal functions.  This may not be everyone's philosophy, but to me it doesn't matter what you name internal functions, as long as they describe what they do.  The approved verb system is for discoverability, and you aren't discovering internal functions in the same way  you do public functions (even as a new contributor).\r\n\r\nI say it makes sense mainly for internal functions because it doesn't seem productive to export a `Test`, `Set` *and also* an `Ensure` that just wraps the two.  It doesn't feel like saving an `if` statement is enough value to warrant exporting a whole extra command.  If you *really* want to add a \"test and fix\" option, I'd just add a `-Fix` switch to the `Test` command.\r\n\r\nThe verb also makes sense for external \"controller\" scripts, but I feel the same way there.  If the point of the script is to be ran from a scheduled task and not to provide utility to other scripts, there's nothing wrong with `EnsureDiskSpace.ps1`.",
    "created_at": "2020-01-30T14:03:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580267649",
    "id": 580267649,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDI2NzY0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580267649/reactions"
    },
    "updated_at": "2020-01-30T14:03:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580267649",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> it mainly makes sense to use for internal functions.\r\n\r\nI don't disagree about the _mainly_ part; I personally think it can also make sense for _published_ commands, but I don't think we need to discuss this aspect further, at least yet.\r\n\r\nAlso, there are different degrees of \"internality\"; if it's not a published command as such, but something you share with colleagues (whether as function source code for their profiler or as an external script), you'd still want it to be properly named for the sake of _discoverability_.\r\n\r\nThis also applies to your example (`Ensure-DiskSpace` not `EnsureDiskspace` ).\r\n\r\nAs for truly module-/script-internal helper functions/scripts:\r\n\r\n>  This may not be everyone's philosophy, but to me it doesn't matter what you name internal functions, as long as they describe what they do\r\n\r\nI'd say whether to use compliant naming there is a matter of personal preference.\r\n\r\nEspecially If something is a proper advanced function - even if used only internally - I personally prefer compliant names. If you use nonstandard verbs, _PSSA will haunt you_, as @JohnLeyva has stated.\r\n\r\n(There's also the issue of something that may start out internal becoming public later; if you start out with compliant names, no refactoring is needed.)\r\n\r\nThere is currently no good solution:\r\n\r\n* You can either live with the annoyance of PSSA warnings that you know don't apply.\r\n\r\n* Or you can turn PSSA verb warnings off altogether, and lose warnings you may care about.\r\n\r\n(I suppose making the [`UseApprovedVerbs`](https://github.com/PowerShell/PSScriptAnalyzer/blob/master/RuleDocumentation/UseApprovedVerbs.md) PSSA rule configurable with exclusion lists would _technically_ be a solution, but I don't think encouraging \"private sub-languages\" is a good idea; `Ensure` deserves _public_ recognition, for the reasons discussed).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-01-30T19:04:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580405245",
    "id": 580405245,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQwNTI0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580405245/reactions"
    },
    "updated_at": "2020-01-30T20:10:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580405245",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Also, there are different degrees of \"internality\"; if it's not a published command as such, but something you share with colleagues (whether as function source code for their profiler or as an external script), you'd still want it to be properly named for the sake of _discoverability_.\r\n\r\nI'm using the term internal similar to the access modifier in C#.  More specifically, when I say internal I'm referring to situations where you would not (easily) be able to retrieve the function via `Get-Command -Verb Ensure`.\r\n\r\n> I'd say whether to use compliant naming there is a matter of personal preference.\r\n> \r\n> Especially If something is a proper advanced function - even if used only internally - I personally prefer compliant names. If you use nonstandard verbs, _PSSA will haunt you_, as @JohnLeyva has stated.\r\n\r\nI definitely agree that it's personal preference whether you'd like to *extend* the compliance guidline to include non-public commands. As for PSSA, yeah it's unfortunate that PSSA can't determine if a command is exported.  Personally I use `VerbNoun` naming in non-public commands mostly so it's easy to tell at a glance what is public and what isn't; not setting off PSSA is a plus as well.\r\n\r\n> (There's also the issue of something that may start out internal becoming public later; if you start out with compliant names, no refactoring is needed.)\r\n\r\nI get what you're saying but no refactoring seems unlikely.  I don't think the majority of folks build out an internal function in the same way they would a public one.  Plus in this scenario, this internal function is internal because you're just wrapping existing `Test` and `Set` commands to keep DRY.\r\n\r\n> There is currently no good solution:\r\n> \r\n> * You can either live with the annoyance of PSSA warnings that you know don't apply.\r\n> * Or you can turn PSSA verb warnings off altogether, and lose warnings you may care about.\r\n\r\nOr use a different naming scheme for non-public commands.  The list of approved verbs is pretty tailored to public API's imo.  I don't think it makes sense to try to shoe horn incredibly specific and narrow functions into the same naming conventions as general use API's, and I don't think it makes sense to expand the pool of verbs approved for public API's to include every verb you might want for internal commands.\r\n\r\n> (I suppose making the [`UseApprovedVerbs`](https://github.com/PowerShell/PSScriptAnalyzer/blob/master/RuleDocumentation/UseApprovedVerbs.md) configurable with exclusion lists would _technically_ be a solution, but I don't think encouraging \"private sub-languages\" is a good idea\r\n\r\nDefinitely agree there.  It would be really cool if PSSA could be expanded to infer what is exported and what isn't, but that's *pretty* difficult statically.\r\n",
    "created_at": "2020-01-30T20:05:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580433548",
    "id": 580433548,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQzMzU0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580433548/reactions"
    },
    "updated_at": "2020-01-30T20:05:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580433548",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "Indeed the intention at some point is to make them public, if convenient . \r\n\r\nFor the time being we are going to try to make compromises by changing Ensure to other verbs as it is more important to allow the PSSA to execute all checks.\r\n\r\n\r\n\r\n",
    "created_at": "2020-01-30T23:40:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580513463",
    "id": 580513463,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDUxMzQ2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580513463/reactions"
    },
    "updated_at": "2020-01-30T23:40:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580513463",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "NONE",
    "body": "One that  is very often used in Powershell on vscode so devs can quickly ensure are ready to perform operations in azure.\r\n\r\n```\r\nfunction Ensure-AzContext {\r\n    $azSubscription = $deployManifest.Subscription\r\n    $azContext = Get-AzContext\r\n    if (-not $azContext) {\r\n        Connect-AzAccount -Subscription $azSubscription | Out-Null\r\n    }\r\n    else {\r\n        Set-AzContext -Subscription $azSubscription | Out-Null\r\n    }\r\n}\r\n```\r\n\r\n",
    "created_at": "2020-01-31T15:19:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580775513",
    "id": 580775513,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDc3NTUxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580775513/reactions"
    },
    "updated_at": "2020-01-31T15:19:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580775513",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1241530?v=4",
      "events_url": "https://api.github.com/users/JohnLeyva/events{/privacy}",
      "followers_url": "https://api.github.com/users/JohnLeyva/followers",
      "following_url": "https://api.github.com/users/JohnLeyva/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnLeyva/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JohnLeyva",
      "id": 1241530,
      "login": "JohnLeyva",
      "node_id": "MDQ6VXNlcjEyNDE1MzA=",
      "organizations_url": "https://api.github.com/users/JohnLeyva/orgs",
      "received_events_url": "https://api.github.com/users/JohnLeyva/received_events",
      "repos_url": "https://api.github.com/users/JohnLeyva/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JohnLeyva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnLeyva/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JohnLeyva"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I'm using the term internal similar to the access modifier in C#. More specifically, when I say internal I'm referring to situations where you would not (easily) be able to retrieve the function via Get-Command -Verb Ensure.\r\n> The list of approved verbs is pretty tailored to public APIs imo. I don't think it makes sense to try to shoe horn incredibly specific and narrow functions into the same naming conventions as general use APIs\r\n\r\nWe can reasonably conceive of _public_ as _used by other people_, so I don't think an approved verb necessarily has to meet the bar of _suitable for built-in cmdlets and similar foundational cmdlets_.\r\n\r\nProviding _higher-level convenience commands_ of general utility to be shared with other is a use case well worth supporting with an approved verb (@JohnLeyva's `Ensure-AzContext` above is an example).\r\n\r\n(And in terms of semantics I think we agree that _ensure_ is a broad, widely applicable concept.)\r\n\r\nIn your own example, having to name your external script `EnsureDiskspace` rather than `Ensure-DiskSpace`, just so you can avoid the presently unapproved to me makes matters worse. (And, if it is placed in `$env:PATH`, you wouldn't be able to find it with `Get-Command -Verb Ensure`.)\r\n\r\n",
    "created_at": "2020-01-31T15:37:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580782995",
    "id": 580782995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDc4Mjk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580782995/reactions"
    },
    "updated_at": "2020-01-31T15:37:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580782995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> We can reasonably conceive of _public_ as _used by other people_, so I don't think an approved verb necessarily has to meet the bar of _suitable for built-in cmdlets and similar foundational cmdlets_.\r\n\r\nI'm not referring to \"a thing used by the public\" I'm referring to specifically a \"public API\".  If it's not a public API (i.e. is not exported in anyway), the concept of approved verbs is not as important.\r\n\r\n> In your own example, having to name your external script `EnsureDiskspace` rather than `Ensure-DiskSpace`, just so you can avoid the presently unapproved to me makes matters worse.\r\n\r\nThat's not the purpose of it, just a side effect.  Either way, PSSA being unable to determine whether a command is exported is not a good reason to include a verb that is mostly suitable for internal only use.\r\n\r\n> (And, if it is placed in `$env:PATH`, you wouldn't be able to find it with `Get-Command -Verb Ensure`.)\r\n\r\nIf it was in the path, then it would be an exported command and I would instead recommend a module that exports a `Set` and a `Test` version instead.",
    "created_at": "2020-01-31T16:15:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580798869",
    "id": 580798869,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDc5ODg2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580798869/reactions"
    },
    "updated_at": "2020-01-31T16:15:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580798869",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I'm not referring to \"a thing used by the public\"\r\n\r\nI understand. I'm saying that it is _useful and desirable to apply approved verbs to such things too_.\r\n\r\n> If it was in the path, then it would be an exported command and I would instead recommend a module that exports a Set and a Test version instead\r\n\r\nI think it's reasonable to want to  and desirable to be able to provide used-by-others higher-level convenience `Ensure-` commands - whether they are semi-public (used in a department / company) or even published to the PS gallery.\r\n\r\nIf what such commands do is to _ensure a desired state_, it should be possible to name them that - violating the naming guidelines more fundamentally with something like `EnsureAzContent` just to avoid PSSA warnings, at the expense of discoverability, is undesirable.\r\n\r\nTo be clear: I'm not suggesting we open the floodgates for many new verbs. The benefits of `Ensure` specifically are hopefully evident from the discussion.\r\n\r\nI hope that clarifies the difference in opinion - which comes down to what the scope of approved verbs is -  and I am happy to leave it  that.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-01-31T16:35:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580808489",
    "id": 580808489,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDgwODQ4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580808489/reactions"
    },
    "updated_at": "2020-01-31T16:35:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580808489",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I hope the following clears up any confusion and presents clear, actionable choices.\r\n\r\n----\r\n\r\nWe've identified three layers of commands by the scope of their audience:\r\n\r\n* (a) _Private_ (internal) commands: module- or script-internal scripts and functions. They can be considered _implementation details_.\r\n\r\n* (b) Non-public _shared commands_: Commands that aren't published publicly (internet-wide) - at least not yet - but are shared by a group of users, such as  shared scripts and functions and commands from self-authored modules used in a given organization; users could be other scripters who build on these commands as well as end users.\r\nSuch commands are likely to include organization-specific wrappers for given commands as well as higher-level convenience commands that wrap multiple other commands.\r\n\r\n* (c) _Public_ (official and quasi-official) commands: Built-in commands, commands from official modules, (exemplary) modules published to public repositories. \r\n\r\nThe **_general_ question** it comes down to:\r\n\r\n* Should the list of approved verbs cover the needs of code in layer (c) exclusively, or should it cover (b) as well, _assuming that verbs of general interest can be identified there_?\r\n\r\n<sup>This is separate from the question whether `Ensure-*` commands have their place in (c) as well - which could be a new discussion if the consensus is that approved verbs should only apply to (c)</sup>\r\n\r\nIf the consensus ends up being that  (b) is in scope as well, the **_specific_ question** is:\r\n\r\n* Does `Ensure` as a verb, as  [described above](https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-579544453), meet the bar of being both expressive and widely applicable?\r\n",
    "created_at": "2020-01-31T19:30:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580877015",
    "id": 580877015,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDg3NzAxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580877015/reactions"
    },
    "updated_at": "2020-01-31T19:44:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/580877015",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Also, a Start-* command shouldn't be assumed to be idempotent.\r\n\r\nDoes \"idempotent\" as a description usefully apply to commands with side effects? \r\n\r\nIs it your intent that Ensure- commands could be assumed to be \"idempotent\"? And if so, what does that mean? There's several cases mixed up; \"runs once, only if needed. Not more than once\" like start-process where you don't want many of them. \"Runs at least once, as many times as you like, it's safe\", like the Azure Context (`Enter-AzContext`?). \"can run as many times as you like, but preferably none because it's slow\", like the free disk space one. All wrapped in using exceptions for control flow (try to get this state, throw if you can't).\r\n\r\nAnd breaking the Noun part of Verb-Noun; new-process, get-process, start-process, but what does Ensure-Process actually ensure? You have to add a description to the end Ensure-ProcessHasCorrectLogonCredentials, Ensure-ProcessIsRunning, Ensure-ProcessExists. Would the pattern be to make parameters for what you are ensuring?\r\n\r\n> Throwing exceptions seems to over complicate the code,\r\n\r\n@JohnLeyva if there are no exceptions, you could call `Ensure-AzContext` and still have no context afterwards. That seems unhelpful, having an ensure which doesn't.",
    "created_at": "2020-02-14T03:43:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-586083832",
    "id": 586083832,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjA4MzgzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/586083832/reactions"
    },
    "updated_at": "2020-02-14T03:43:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/586083832",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Does \"idempotent\" as a description usefully apply to commands with side effects?\r\n\r\nYes, with respect to the _end result_.\r\n\r\n>  And if so, what does that mean?\r\n\r\nIt means: ensure the desired state, doing whatever is necessary, if anything; fail only if the desired state cannot be achieved.\r\n\r\n> You have to add a description to the end Ensure-\r\n\r\nYes.\r\n\r\n> Would the pattern be to make parameters for what you are ensuring?\r\n\r\nYes, just as with any command.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-02-14T03:50:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-586085065",
    "id": 586085065,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjA4NTA2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/586085065/reactions"
    },
    "updated_at": "2020-02-14T03:50:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/586085065",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I agree that Ensure is needed and it is to support desired state. Every resource requires different logic to get to the desired state. It might be to delete and recreate, it might be to update it.\r\nHaving Ensure as a Verb allows module authors to create a module that wraps the complexity of getting something into the desired state.\r\n\r\nNew or Set with ignoring errors is a real bad form as it hides other errors that occur. You don't want to ignore all errors, just those due to the resource existing. Having Ensure makes code and intent much more explicit. \r\nNew implies I want a new one, but I don't want a New one if it already exists, I want the existing one. \r\n\r\nEnsure provides that semantics",
    "created_at": "2020-03-06T14:25:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-595790549",
    "id": 595790549,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTc5MDU0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595790549/reactions"
    },
    "updated_at": "2020-03-06T14:25:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/595790549",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1209963?v=4",
      "events_url": "https://api.github.com/users/simonsabin/events{/privacy}",
      "followers_url": "https://api.github.com/users/simonsabin/followers",
      "following_url": "https://api.github.com/users/simonsabin/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonsabin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/simonsabin",
      "id": 1209963,
      "login": "simonsabin",
      "node_id": "MDQ6VXNlcjEyMDk5NjM=",
      "organizations_url": "https://api.github.com/users/simonsabin/orgs",
      "received_events_url": "https://api.github.com/users/simonsabin/received_events",
      "repos_url": "https://api.github.com/users/simonsabin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/simonsabin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonsabin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/simonsabin"
    }
  },
  {
    "author_association": "NONE",
    "body": "+1",
    "created_at": "2020-03-07T08:08:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-596059985",
    "id": 596059985,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjA1OTk4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/596059985/reactions"
    },
    "updated_at": "2020-03-07T08:08:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/596059985",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10630586?v=4",
      "events_url": "https://api.github.com/users/Alex-Yates/events{/privacy}",
      "followers_url": "https://api.github.com/users/Alex-Yates/followers",
      "following_url": "https://api.github.com/users/Alex-Yates/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alex-Yates/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Alex-Yates",
      "id": 10630586,
      "login": "Alex-Yates",
      "node_id": "MDQ6VXNlcjEwNjMwNTg2",
      "organizations_url": "https://api.github.com/users/Alex-Yates/orgs",
      "received_events_url": "https://api.github.com/users/Alex-Yates/received_events",
      "repos_url": "https://api.github.com/users/Alex-Yates/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Alex-Yates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alex-Yates/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Alex-Yates"
    }
  },
  {
    "author_association": "NONE",
    "body": "Wonder how to bump this to get the discussion going, seems to have died off. We still see this as very valuable",
    "created_at": "2020-10-26T09:13:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-716416766",
    "id": 716416766,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjQxNjc2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716416766/reactions"
    },
    "updated_at": "2020-10-26T09:13:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716416766",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1209963?v=4",
      "events_url": "https://api.github.com/users/simonsabin/events{/privacy}",
      "followers_url": "https://api.github.com/users/simonsabin/followers",
      "following_url": "https://api.github.com/users/simonsabin/following{/other_user}",
      "gists_url": "https://api.github.com/users/simonsabin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/simonsabin",
      "id": 1209963,
      "login": "simonsabin",
      "node_id": "MDQ6VXNlcjEyMDk5NjM=",
      "organizations_url": "https://api.github.com/users/simonsabin/orgs",
      "received_events_url": "https://api.github.com/users/simonsabin/received_events",
      "repos_url": "https://api.github.com/users/simonsabin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/simonsabin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonsabin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/simonsabin"
    }
  },
  {
    "author_association": "NONE",
    "body": "I have needed this Ensure verb  quite a lot. I do not need it to support desired system state, but desired execution conditions for the instructions that come just after.\r\nFor example when a connection can be dropped to the database or any other remote thing, instead of writing each time Connect-MyResource xxx -erroraction silentlycontinue or Start-Service yyyy -erroraction silentlycontinue, I would prefer Ensure-MyResourceIs xxx or Ensure-ServiceIsInState yyyy -state running",
    "created_at": "2021-02-01T20:28:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-771136319",
    "id": 771136319,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTEzNjMxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/771136319/reactions"
    },
    "updated_at": "2021-02-01T20:28:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/771136319",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5269604?v=4",
      "events_url": "https://api.github.com/users/pierrecoach/events{/privacy}",
      "followers_url": "https://api.github.com/users/pierrecoach/followers",
      "following_url": "https://api.github.com/users/pierrecoach/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierrecoach/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/pierrecoach",
      "id": 5269604,
      "login": "pierrecoach",
      "node_id": "MDQ6VXNlcjUyNjk2MDQ=",
      "organizations_url": "https://api.github.com/users/pierrecoach/orgs",
      "received_events_url": "https://api.github.com/users/pierrecoach/received_events",
      "repos_url": "https://api.github.com/users/pierrecoach/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/pierrecoach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierrecoach/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/pierrecoach"
    }
  },
  {
    "author_association": "NONE",
    "body": "Although I don't disagree on the use case for an `Ensure` verb, I'm also one thinking \"do we really need this?\".\r\n\r\nI usually implement my `Set-` commands to have a `-Force` parameter, and a set would only set what's needed, unless `-Force` is used in which case I'd Set all properties anyway even if compliant.\r\n\r\nI find that a Class is a better contract than a command to implement Idempotency and the Get/Set/Test approach, and the DSC attributes allow to have greater consistency and checks at no extra costs (minus being ok with the class constructs).\r\nAnyway, from experience (with DSC), it's much better to separate the Get/Set commands in individual functions (if you implement [reasons](https://docs.microsoft.com/en-us/azure/governance/policy/how-to/guest-configuration-create), the test can be just a couple of lines).\r\nOnce I have that solid contract, I could use the `Invoke-DscResource` to Get/Set/Test, but I see how an `Ensure-DscResource` could be appealing.\r\nBut then, if you have written a class resource, the Ensure command would \"just\" call `Invoke-DscResource` for that resource for all three methods, so the `Ensure-YourThingy` command would be a proxy for that `Ensure-DscResource`...\r\n\r\nI think that alone is a good case for the `Ensure` verb.",
    "created_at": "2021-05-21T20:03:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-846223490",
    "id": 846223490,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjIyMzQ5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846223490/reactions"
    },
    "updated_at": "2021-05-21T20:04:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846223490",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8962101?v=4",
      "events_url": "https://api.github.com/users/gaelcolas/events{/privacy}",
      "followers_url": "https://api.github.com/users/gaelcolas/followers",
      "following_url": "https://api.github.com/users/gaelcolas/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaelcolas/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gaelcolas",
      "id": 8962101,
      "login": "gaelcolas",
      "node_id": "MDQ6VXNlcjg5NjIxMDE=",
      "organizations_url": "https://api.github.com/users/gaelcolas/orgs",
      "received_events_url": "https://api.github.com/users/gaelcolas/received_events",
      "repos_url": "https://api.github.com/users/gaelcolas/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gaelcolas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaelcolas/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gaelcolas"
    }
  },
  {
    "author_association": "NONE",
    "body": "+1 I think I already vote on User Voice back in 2009 (private joke)",
    "created_at": "2021-06-08T10:32:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-856652047",
    "id": 856652047,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjY1MjA0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/856652047/reactions"
    },
    "updated_at": "2021-06-08T10:32:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/856652047",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "NONE",
    "body": "I see a lot of value in an `Ensure` verb. It covers this pattern:\r\n\r\n~~~powershell\r\nfunction Ensure-X {\r\n  if(-Not (Test-X)){\r\n    Set-X\r\n  }\r\n  if(-Not (Test-X)){\r\n    Set-YAndThenX\r\n  }\r\n  Assert-X\r\n}\r\n~~~\r\n\r\nIf I call it once, actions are taken to give me my desired state. If I call it a second time the desired state is in place and no action needed.\r\n\r\nA solid example? `Ensure-CassandraClientDeployed`\r\n\r\nFor purity I cannot put it in \"New\" because that implies it is \"New\" meaning I now have two clients. I cannot put it in \"Set\" because it seems to suggest I am simply choosing which client is active.\r\n\r\nSo eveyone has to `Test-Pod cassandra-client` and if not `New-CassandraClient`. Can't even use `Deploy` because there is no `Undeploy`. With the advent of declarative approaches I would have liked to see this already added.",
    "created_at": "2022-01-31T22:13:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-1026264624",
    "id": 1026264624,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11710",
    "node_id": "IC_kwDOAvT7bc49K44w",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1026264624/reactions"
    },
    "updated_at": "2022-01-31T22:13:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1026264624",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1903065?v=4",
      "events_url": "https://api.github.com/users/Diom/events{/privacy}",
      "followers_url": "https://api.github.com/users/Diom/followers",
      "following_url": "https://api.github.com/users/Diom/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diom/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Diom",
      "id": 1903065,
      "login": "Diom",
      "node_id": "MDQ6VXNlcjE5MDMwNjU=",
      "organizations_url": "https://api.github.com/users/Diom/orgs",
      "received_events_url": "https://api.github.com/users/Diom/received_events",
      "repos_url": "https://api.github.com/users/Diom/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Diom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diom/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Diom"
    }
  }
]
