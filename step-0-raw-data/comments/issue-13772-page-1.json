[
  {
    "author_association": "NONE",
    "body": "it would simplify this too:\r\n\r\nhttps://stackoverflow.com/questions/64481180/intrinsic-index-of-item-in-a-powershell-filtered-item-using-where-object-for-ex\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/64481180/intrinsic-index-of-item-in-a-powershell-filtered-item-using-where-object-for-ex\">Intrinsic index of item in a Powershell filtered item (using Where-Object for example)</a></strong></div><div>Is there any way of getting the intrinsic numeric index (order#)\nof the selected/filtered/matched object\nfrom a Where-Object processing?\nfor example:\nGet-Process | Where-Object -property id -eq 1024\n\n</div></blockquote>",
    "created_at": "2020-10-22T12:58:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-714476097",
    "id": 714476097,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDQ3NjA5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/714476097/reactions"
    },
    "updated_at": "2020-10-22T12:58:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/714476097",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3254076?v=4",
      "events_url": "https://api.github.com/users/IBIT-ZEE/events{/privacy}",
      "followers_url": "https://api.github.com/users/IBIT-ZEE/followers",
      "following_url": "https://api.github.com/users/IBIT-ZEE/following{/other_user}",
      "gists_url": "https://api.github.com/users/IBIT-ZEE/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/IBIT-ZEE",
      "id": 3254076,
      "login": "IBIT-ZEE",
      "node_id": "MDQ6VXNlcjMyNTQwNzY=",
      "organizations_url": "https://api.github.com/users/IBIT-ZEE/orgs",
      "received_events_url": "https://api.github.com/users/IBIT-ZEE/received_events",
      "repos_url": "https://api.github.com/users/IBIT-ZEE/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/IBIT-ZEE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IBIT-ZEE/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/IBIT-ZEE"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@IBIT-ZEE, no, your use case wouldn't be solved by this, because the proposed `$PSIndex` variable would only be available inside the per-item-processing script blocks.\r\n\r\nWhat you're looking for is a _post_-command way to query all the indices of the objects that `Where-Object` matched.\r\nThis probably shouldn't be _automatic_, because the overhead of maintaining this information for a large input collection with many matches can be nontrivial; an _opt-in_ such as with `-MatchingIndexVariable <variableName>` (clunky, but just to illustrate the idea) may be a better approach. I encourage you to open a _new_ feature request.\r\n\r\n\r\n\r\n",
    "created_at": "2020-10-22T18:11:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-714669128",
    "id": 714669128,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDY2OTEyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/714669128/reactions"
    },
    "updated_at": "2020-10-22T18:11:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/714669128",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "For this StackOverflow [**In PowerShell is there a way to return the index of an array with substring of a string**](https://stackoverflow.com/q/65029106/1701026) question,\r\nthe answer would be something like:\r\n\r\n```PowerShell\r\n$myarray = 'herp', 'dederp', 'dedoo', 'flerp'\r\n$substring = 'erp'\r\n$indices = $myarray | Foreach-Object { if ($_ -match $substring) { $PSIndex } }\r\n```",
    "created_at": "2020-11-27T09:21:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-734734331",
    "id": 734734331,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDczNDMzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/734734331/reactions"
    },
    "updated_at": "2020-11-27T09:24:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/734734331",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": "As suggested in the linked issue [`#14724` implement indexer in loop](https://github.com/PowerShell/PowerShell/issues/14724), I think this purpose should be limited to cmdlets that initiate a new `$_` / `$PSItem` where **`@($Input)[$PSIndex] <=> $PSItem`** (as in the original purpose), meaning that `$PSIndex` always falls into step with `$PSItem` (no `$PSItem`, means no `$PSIndex`).\r\n\r\n**The way pipelines work it's significantly _more_ important to have an index** because it is possible to retrieve an object from a collection by its index but not visa versa (retrieve the index from a collection by the object). Meaning, a pipeline index should prevent scripters from stalling the whole pipeline by using an index iterator instead (or having to create their own index) where for an in-memory-collection you can simply start from the index:\r\n\r\n```PowerShell\r\n$Collection = ...                               # this should be avoided as it stalls the pipeline, but is required for:\r\nFor ($i = 0; $i -lt $Collection.Count; $i++) {  # or something like (0..($Collection.Count - 1)).ForEach\r\n    $Item = $Collection[$i]                     # But if the $Collection is in memory anyways, this isn't an issue\r\n```\r\n\r\nTo prevent that `PSIndex` falls apart in nested loops. I suggest a similar common parameter as [`-PipelineVariable`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-7.1#pipelinevariable) for `$_` / `$PSItem`, something like: **`-PipelineIndex`** (alias `-pi`?).\r\n\r\n",
    "created_at": "2021-02-10T15:59:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-776813966",
    "id": 776813966,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjgxMzk2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776813966/reactions"
    },
    "updated_at": "2021-02-10T16:50:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776813966",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I agree that an automatic index is _more_ helpful in _pipeline script blocks_ compared to the `foreach` (loop) _statement_, but there's no reason to choose one over the other - both are useful.\r\n\r\nI also agree that `$PSIndex` should be limited to contexts where `$_` / `$PSItem` is defined, which, in addition to `ForEach-Object` an `Where-Object` comprises:\r\n\r\n* delay-bind script blocks \r\n* calculated properties (see  https://github.com/PowerShell/PowerShell/issues/14724#issuecomment-776764076 for examples of the latter two)\r\n* the `switch` statement \r\n* the replacement operand of the `-replace` operator, if script block-based.\r\n\r\nA new common `-PipelineIndex` parameter wouldn't work with `switch` (short of introducing such an option there too) and `-replace`, and think it's generally fine to stick with `$PSIndex`, given that nested pipelines involve script blocks in which you can easily save the outer `$PSIndex` in another variable (e.g.\r\n`'foo', 'bar', 'baz' | \r\nForEach-Object { $ndx = $PSIndex; <# nested pipeline that references $ndx  #> }`)\r\n\r\nWith the _explicitly named_ automatic index proposed in #14724 in the context of the `foreach` _statement_ (e.g.,\r\n`foreach ($name in 'foo', bar', 'baz'; $index) { \"name #$(1+$index): $name\" }`), the nesting problem wouldn't even arise.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-02-10T17:11:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-776869321",
    "id": 776869321,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Njg2OTMyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776869321/reactions"
    },
    "updated_at": "2021-02-10T17:13:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776869321",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It would be more PowerShell-ly if it were a property of this $PSItem.\r\n(I would rather follow the concept of ​​PowerShell than open courses to learn an infinite number of special variables.)",
    "created_at": "2021-02-11T15:13:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-777564569",
    "id": 777564569,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzU2NDU2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777564569/reactions"
    },
    "updated_at": "2021-02-11T15:13:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777564569",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "@iSazonov\r\n> ... if it were a property of this $PSItem\r\n\r\nMeaning, something like `$_.PSObject.Members.Index`?",
    "created_at": "2021-02-11T18:22:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-777694511",
    "id": 777694511,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzY5NDUxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777694511/reactions"
    },
    "updated_at": "2021-02-11T18:22:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777694511",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "`$PSItem` is the input object at hand, and I don't think it is appropriate to add an (instance-level ETS) property to it (for performance reasons alone, but primarily because it modifies the object - unless we use magic, which I think is ill-advised in general and still bears the risk of name collisions with type-native members)\r\n\r\nI see a separate variable as the only feasible solution.\r\n\r\nYes, proliferation of automatic variables is a general concern, especially given the potential for name collisions, given that there's no separate namespace for PowerShell-defined variables, which would allow something like `$ps:Index` (see the discussion at https://github.com/PowerShell/PowerShell/issues/4216#issuecomment-315493182).\r\n\r\nCurrently, prefixing variable names with `PS` is the best solution, so `$PSIndex` seems like a good choice (especially to complement `$PSItem`) - and personally I have no doubt that there is indeed a need for such a variable.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-02-11T18:40:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-777704416",
    "id": 777704416,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzcwNDQxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777704416/reactions"
    },
    "updated_at": "2021-02-11T18:48:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777704416",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @iSazonov\r\n> \r\n> > ... if it were a property of this $PSItem\r\n> \r\n> Meaning, something like `$_.PSObject.Members.Index`?\r\n\r\nI mean `$PSItem.PipelineIndex`.\r\n\r\n\r\n> Yes, proliferation of automatic variables is a general concern, especially given the potential for name collisions, given that there's no separate namespace for PowerShell-defined variables, which would allow something like `$ps:Index` (see the discussion at [#4216 (comment)](https://github.com/PowerShell/PowerShell/issues/4216#issuecomment-315493182)).\r\n\r\nIt is probably worth having a tracking issue for this. I do not believe that MSFT team will waste time on creating new namespace, but we could enhance the `Get-Variable` cmdlet with new parameter `-Kind All | Custom | Preference | System ...` and explicitly enumerate \"ill-know\" :-) PowerShell variables.\r\n",
    "created_at": "2021-02-12T03:22:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-777944178",
    "id": 777944178,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Nzk0NDE3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777944178/reactions"
    },
    "updated_at": "2021-02-12T03:22:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777944178",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I mean `$PSItem.PipelineIndex`.\r\n\r\nFor the reasons stated, I don't think adding a property to `$PSItem` is an option.\r\n\r\n> It is probably worth having a tracking issue for this\r\n> enhance the Get-Variable cmdlet with new parameter -Kind All | Custom | Preference | System ...\r\n\r\nI like the idea in its own right, but it is obviously not a solution to the name-collision problem.\r\nA related discussion was had in https://github.com/PowerShell/PowerShell/issues/3061#issuecomment-300239754, a long time ago.\r\n\r\nAt least we have the docs currently ([`about_Automatic_Variables`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Automatic_Variables) and [`about_Preference_Variables`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Preference_Variables))\r\n\r\n\r\n\r\n",
    "created_at": "2021-02-12T03:44:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-777949464",
    "id": 777949464,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Nzk0OTQ2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777949464/reactions"
    },
    "updated_at": "2021-02-12T03:44:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777949464",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "For the record: Nothing counts everything that goes through the pipeline.  The `-Index` parameter on `Select-Object` is implemented by [a counter in Select-Object](https://github.com/PowerShell/PowerShell/blob/75b5813f8472b931a0ebcadbf5fec69e1adb3b8f/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Select-Object.cs#L744) which only gets instantiated and incremented when you specify the `-Index` (or `-SkipIndex`) parameter. There can't be a single pipeline counter: the count is different for every command in the pipeline, since any command in the pipeline can output additional things, pass input through, filter input, etc.\r\n\r\nSetting that aside: we definitely should not add a counter property to the `$_` pipeline object, because you will step on something. You don't know what properties the thing has, and there's no property you can add which you can guarantee won't interfere with an existing property. For instance, what would happen if you did:\r\n\r\n```PowerShell\r\n1..5 | foreach { $_.Index; $_ } | foreach { $_.Index; $_ } \r\n```\r\n\r\nDo you want `$PSIndex` to be set in the `-Begin` block or the `-End` block? I assume not. In that case, I can imagine implementing this as a $PSIndex iteration counter, something that would exist everywhere there's a `$PSItem` ... \r\n\r\nBut doing so could be expensive if **every** `foreach` created a counter and incremented it in every loop, even when it's not used. It could even cause overflows if more than `[int]::MaxValue` or `[int64]::MaxValue` items went through the pipeline...\r\n\r\nYou know that `ForEach-Object` supports multiple process blocks, right:\r\n\r\n```PowerShell\r\n'a'..'f' | ForEach-Object @(\r\n    { $i = $j = $k = 0 } # begin\r\n    { $i++; \"I:$i = $_\"; }\r\n    { $j++; \"J:$j = $_\" }\r\n    { $k++; \"K:$k = $_\" }\r\n    { \"Total: \" + ($i + $j + $k) } # end\r\n) | ForEach-Object @(\r\n    { $l = 0; $m = 0 } # begin\r\n    {\r\n        $l++; \"L:$l = $_\"; \r\n        'm'..'p' | ForEach-Object {\r\n             $m++; if($m -gt 75) { \"We got $m of these\" }\r\n        }\r\n    }\r\n)\r\n```",
    "created_at": "2021-04-07T04:39:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-814594418",
    "id": 814594418,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDU5NDQxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/814594418/reactions"
    },
    "updated_at": "2021-04-07T04:39:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/814594418",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "[The comment above](https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-776869321) summarizes where I think `$PSIndex` should be defined and, yes, it should be tied to where `$_` / `$PSItem` is available.\r\n\r\nFrom that follows the answer to this question:\r\n\r\n> Do you want `$PSIndex` to be set in the -Begin block or the -End block? I assume not.\r\n\r\nGiven that `$_` isn't available in `ForEach-Object` `-Begin` / `-End` blocks, the answer would be no.\r\n\r\nHowever, while definitely pointless in `-Begin` blocks, it _would_ be useful in `-End` blocks, as the count of input objects processed could be inferred from it, analogous to `awk`'s `NR` (1-based row index) variable: `1..3 | awk 'END { print NR }'` -> `3`.\r\n\r\n> It could even cause overflows if more than [int]::MaxValue or [int64]::MaxValue\r\n\r\nI think we can cross that bridge when we come to it, especially with `[int64]::MaxValue` (roughly `1e18` == a quintillion).\r\nThat said, there could be an infinite, long-running producer; if the limit is truly hit, I think wrapping around (restarting at `0`) is acceptable (and must be documented).\r\n\r\nAs for performance concerns: I haven't run tests, but I would expect the cost of maintaining an index to be negligible compared to the cost of invoking PowerShell code (script blocks) iteratively in the pipeline.\r\n\r\nIf it is a concern nonetheless, perhaps (I can't speak to actual feasibility) references to `$PSIndex` can be detected in the script block(s) on parsing, from which the (non-)need to maintain `$PSIndex` could be inferred.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-07T19:06:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-815155777",
    "id": 815155777,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTE1NTc3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815155777/reactions"
    },
    "updated_at": "2021-04-07T19:19:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815155777",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0, thanks for your comments.\r\n\r\nAs for the *infinite, long-running producer*, if `[int64]::MaxValue`, I guess we are quiet safe for the upcoming thousands of years. The shortest pipeline where I can think about is `... |% {}`, this takes about 3.5 seconds for a million iterations on my PC, meaning it would take me around a million years to reach an index of `[int64]::MaxValue` on my PC:\r\n```PowerShell\r\n(Measure-Command { 0..999999 |% {} }).TotalSeconds\r\n3.5419796\r\n\r\n[int64]::MaxValue / 1000000 * 3.54 / 60 / 60 / 24 / 365 # / sec / min / hours /days \r\n1035348.07871848 # Years\r\n```\r\nAnyways, if the limit is truly hit, I would simply stop counting which might be less confusing.\r\n\r\n@Jaykul,\r\nAs with [implement indexer in loop `#14724`](https://github.com/PowerShell/PowerShell/issues/14724), it is *not only* matter of readability, but also protecting scripters from possible pitfalls especially because PowerShell isn't a strict language by default. Knowing that omitting initializers (like `{ $i = $j = $k = 0 } # begin`), might appear to work fine for a novice scripter, but could cause a terrible issue on the long run when the same variable is used in a higher scope (where counters use to have a simply common name like:  `$i` and `$Count`). In other words, a self-initializing index could prevent a PowerShell gotcha.",
    "created_at": "2021-04-08T08:27:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-815564294",
    "id": 815564294,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTU2NDI5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815564294/reactions"
    },
    "updated_at": "2021-04-09T07:13:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/815564294",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> As for performance concerns: I haven't run tests, but I would expect the cost of maintaining an index to be negligible compared to the cost of invoking PowerShell code (script blocks) iteratively in the pipeline.\r\n\r\nMaintaining a counter isn't necessarily the concern, assigning a variable can be somewhat expensive on it's own. I can think of a way that it *might* be able to be implemented with minimal impact (subclass `PSVariable` basically) but it'd require a lot of testing.\r\n\r\nIf it's not a variable but instead an ETS property on `$PSItem` that's potentially a lot more problematic as that can balloon the member resurrection table pretty significantly.\r\n\r\n> If it is a concern nonetheless, perhaps (I can't speak to actual feasibility) references to `$PSIndex` can be detected in the script block(s) on parsing, from which the (non-)need to maintain `$PSIndex` could be inferred.\r\n\r\nStatic analysis is pretty flimsy in PowerShell.  The variable would probably seem unreliable to a typical PowerShell user (`iex`, `Get-Variable`, etc would all fail to trigger it).\r\n\r\n---\r\n\r\nPersonally I think the use cases for this are too rare enough to warrant the (even if minimal) perf/break risk and work required. Especially when existing solutions aren't terrible.",
    "created_at": "2021-04-09T17:32:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-816840517",
    "id": 816840517,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNjg0MDUxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816840517/reactions"
    },
    "updated_at": "2021-04-09T17:33:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816840517",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the technical insights, @SeeminglyScience, as usual.\r\nPerhaps needless to say at this point, but personally I think it _is_ worth it; ditto for the related `foreach` proposal, (#14724).\r\n",
    "created_at": "2021-04-09T21:31:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13772#issuecomment-816982956",
    "id": 816982956,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13772",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNjk4Mjk1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816982956/reactions"
    },
    "updated_at": "2021-04-09T21:31:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816982956",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
