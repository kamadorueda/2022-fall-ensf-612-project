[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm a little out of my depth, but could [this breaking change to System.Security.Cryptography.CryptoStream](https://github.com/dotnet/runtime/pull/53644) be the culprit?",
    "created_at": "2021-09-05T23:37:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-913247478",
    "id": 913247478,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42bwz2",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/913247478/reactions"
    },
    "updated_at": "2021-09-05T23:37:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/913247478",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38249738?v=4",
      "events_url": "https://api.github.com/users/dwtaber/events{/privacy}",
      "followers_url": "https://api.github.com/users/dwtaber/followers",
      "following_url": "https://api.github.com/users/dwtaber/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwtaber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dwtaber",
      "id": 38249738,
      "login": "dwtaber",
      "node_id": "MDQ6VXNlcjM4MjQ5NzM4",
      "organizations_url": "https://api.github.com/users/dwtaber/orgs",
      "received_events_url": "https://api.github.com/users/dwtaber/received_events",
      "repos_url": "https://api.github.com/users/dwtaber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dwtaber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwtaber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dwtaber"
    }
  },
  {
    "author_association": "NONE",
    "body": "@dwtaber out of my depth too, but i believe you're right.\r\n\r\nThere is a breaking change in _net 6.0 Preview 6_ inside the API **System.Security.Cryptography.CryptoStream.Read**\r\n\r\nBreaking Change Documentation : \r\nhttps://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams\r\n\r\nThe API is used Line 372 : \r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/17986d88c10eb6271b1aad2ca955889e45e2b285/src/System.Management.Automation/security/SecureStringHelper.cs#L334-L388\r\n\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/dotnet/media/dotnet-logo.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams\">Breaking change: Partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream - .NET</a></strong></div><div>Learn about the .NET 6.0 breaking change in core .NET libraries where DeflateStream, GZipStream, and CryptoStream handle partial and zero-byte reads differently.</div></blockquote>",
    "created_at": "2021-09-07T02:26:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-913944035",
    "id": 913944035,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42ea3j",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/913944035/reactions"
    },
    "updated_at": "2021-09-07T02:26:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/913944035",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah, looks like we'll need to add a loop in around that code to ensure we're reading all the data.\n\nThat's a very strange way to write a stream api, to me at least. ",
    "created_at": "2021-09-07T11:49:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914236378",
    "id": 914236378,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42fiPa",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914236378/reactions"
    },
    "updated_at": "2021-09-07T11:49:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914236378",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The following change to the CryptoStream using statement starting at line 363 of SecureStringHelper.cs appears to work for me:\r\n```csharp\r\nusing (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\r\n{                \r\n    int totalBytesRead = 0;\r\n    var tempDecryptedData = ms.ToArray().AsSpan();\r\n    //\r\n    // decrypt the data\r\n    //\r\n    while (totalBytesRead < encryptedData.Length)\r\n    {\r\n        int bytesRead = cs.Read(tempDecryptedData.Slice(totalBytesRead));\r\n        if (bytesRead == 0) { break; }\r\n        totalBytesRead += bytesRead;\r\n    }\r\n    decryptedData = new byte[totalBytesRead];\r\n\r\n    for (int i = 0; i < totalBytesRead; i++)\r\n    {\r\n        decryptedData[i] = tempDecryptedData[i];\r\n    }\r\n    \r\n    s = New(decryptedData);\r\n    Array.Clear(decryptedData, 0, decryptedData.Length);\r\n    tempDecryptedData.Clear();\r\n    \r\n    return s;\r\n}\r\n```\r\n\r\nAre there any security implications or other glaring issues with the code above?  If not, is there a better way to achieve the result?  I'm new to collaborating on a project like this and don't want to create a pull request prematurely.",
    "created_at": "2021-09-07T13:58:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914330078",
    "id": 914330078,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42f5He",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914330078/reactions"
    },
    "updated_at": "2021-09-07T13:58:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914330078",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38249738?v=4",
      "events_url": "https://api.github.com/users/dwtaber/events{/privacy}",
      "followers_url": "https://api.github.com/users/dwtaber/followers",
      "following_url": "https://api.github.com/users/dwtaber/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwtaber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dwtaber",
      "id": 38249738,
      "login": "dwtaber",
      "node_id": "MDQ6VXNlcjM4MjQ5NzM4",
      "organizations_url": "https://api.github.com/users/dwtaber/orgs",
      "received_events_url": "https://api.github.com/users/dwtaber/received_events",
      "repos_url": "https://api.github.com/users/dwtaber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dwtaber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwtaber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dwtaber"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think rather than doing `.ToArray().AsSpan()` for the `tempDecryptedData` we're probably better off just creating a new Span or array of the appropriate length instead, which is more similar to the original code. Otherwise I'd expect that'll end up reading the memory stream multiple times, which might break some things.\r\n\r\nOther than that, I think that would work? Would need to be tested of course, but that looks pretty good. You could probably skip the `for` loop as well, because the decrypted data will already be in `tempDecryptedData`, so that can end up as the final span, and you can call `.ToArray()` on that if you really need to. \r\n\r\nLooking at the docs for `CryptoStream.Read` I think you also need to specify the offset and count anyway, it doesn't look like its Read method has optional parameters: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream.read?view=net-5.0\r\n\r\n... Hm... The crypto stream API doesn't seem like it has a lot of span-friendly overloads 😕\r\nThat might cause some issues for how you want to solve this. Best bet is to test it and see if it compiles / behaves like you expect.\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream.read\">CryptoStream.Read(Byte[], Int32, Int32) Method (System.Security.Cryptography)</a></strong></div><div>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. </div></blockquote>",
    "created_at": "2021-09-07T14:39:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914362195",
    "id": 914362195,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42gA9T",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914362195/reactions"
    },
    "updated_at": "2021-09-07T14:39:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914362195",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I think rather than doing `.ToArray().AsSpan()` for the `tempDecryptedData` we're probably better off just creating a new Span or array of the appropriate length instead, which is more similar to the original code. Otherwise I'd expect that'll end up reading the memory stream multiple times, which might break some things.\r\n> \r\n> Other than that, I think that would work? Would need to be tested of course, but that looks pretty good. You could probably skip the `for` loop as well, because the decrypted data will already be in `tempDecryptedData`, so that can end up as the final span, and you can call `.ToArray()` on that if you really need to.\r\n> \r\n> Looking at the docs for `CryptoStream.Read` I think you also need to specify the offset and count anyway, it doesn't look like its Read method has optional parameters: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream.read?view=net-5.0\r\n> \r\n> ... Hm... The crypto stream API doesn't seem like it has a lot of span-friendly overloads 😕\r\n> That might cause some issues for how you want to solve this. Best bet is to test it and see if it compiles / behaves like you expect.\r\n> \r\n\r\nWeird that it's not documented there, but it looks like `CryptoStream` inherits `Stream.Read(Span<byte> buffer)`.\r\n(Edit: there's apparently also a [new overload for `Array.Clear`](https://docs.microsoft.com/en-us/dotnet/api/system.array.clear?view=net-6.0#System_Array_Clear_System_Array_) that clears an entire array without requiring a start index and count to be specified, so I've made use of that as well.)\r\n\r\nYou were right about the `for` loop; it doesn't appear to be necessary.  I _think_ the `ToArray()` at the end is necessary, as `SecureStringHelper.New` wants `byte[]`, and I don't think there's any implicit conversion from `Span<T>` to `T[]`.  Here's a revised version of my possible fix.  It does compile and works in cases similar to the ones shown in the issue description, for at least as many as 512 characters.\r\n\r\n```csharp\r\nusing (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\r\n{                \r\n    int totalBytesRead = 0;\r\n    var tempDecryptedData = new Span<byte>(ms.ToArray());\r\n    //\r\n    // decrypt the data\r\n    //\r\n    while (totalBytesRead < encryptedData.Length)\r\n    {\r\n        int bytesRead = cs.Read(tempDecryptedData.Slice(totalBytesRead));\r\n        if (bytesRead == 0) { break; }\r\n        totalBytesRead += bytesRead;\r\n    }\r\n    decryptedData = tempDecryptedData[0..totalBytesRead].ToArray();\r\n    \r\n    s = New(decryptedData);\r\n    Array.Clear(decryptedData);\r\n    tempDecryptedData.Clear();\r\n    \r\n    return s;\r\n}\r\n```\r\n\r\nThere seem to be some extraneous bytes at the end of `tempDecryptedData`; if the range isn't specified when converting to `byte[]`, the `SecureString` returned by the method winds up with a handful of extra bytes that, in the cases I tried, wound up getting interpreted as roughly three to five (seemingly) random non-Latin characters at the end of the intended string.  The characters were different each time I ran the same set of commands; I'm not sure if that's because the random key was different each time, or maybe some other factor.  Specifying the `[0..totalBytesRead]` range to be converted to `byte[]` appears to resolve the issue, but I mention it in case it points to some potential security issue or edge case that I wouldn't know to look for.",
    "created_at": "2021-09-07T16:38:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914458040",
    "id": 914458040,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42gYW4",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914458040/reactions"
    },
    "updated_at": "2021-09-07T16:51:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914458040",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38249738?v=4",
      "events_url": "https://api.github.com/users/dwtaber/events{/privacy}",
      "followers_url": "https://api.github.com/users/dwtaber/followers",
      "following_url": "https://api.github.com/users/dwtaber/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwtaber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dwtaber",
      "id": 38249738,
      "login": "dwtaber",
      "node_id": "MDQ6VXNlcjM4MjQ5NzM4",
      "organizations_url": "https://api.github.com/users/dwtaber/orgs",
      "received_events_url": "https://api.github.com/users/dwtaber/received_events",
      "repos_url": "https://api.github.com/users/dwtaber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dwtaber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwtaber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dwtaber"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "WG-Security\r\n\r\nThanks for finding this.  I am just beginning to look into it and will propose a PR if no one else does.",
    "created_at": "2021-09-07T17:22:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914486723",
    "id": 914486723,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42gfXD",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914486723/reactions"
    },
    "updated_at": "2021-09-07T17:22:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914486723",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm going over the documentation re: contributing to make sure I get the PR right.  I do have a potentially silly question that I haven't run into a specific answer for yet re: testing.  Is it okay to modify an extant Pester test, or is it preferable to make a whole new one?  \\test\\powershell\\Modules\\Microsoft.PowerShell.Security\\SecureString.Tests.ps1 would have caught this bug with only a little modification, so making the necessary adjustments seems like the path of least resistance, but I'm happy to write a new test if that's the way things are done.\r\n\r\nApologies if the answer's somewhere I should've seen it, or if I shouldn't be asking here.",
    "created_at": "2021-09-07T19:14:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914557124",
    "id": 914557124,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42gwjE",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914557124/reactions"
    },
    "updated_at": "2021-09-07T19:14:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914557124",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38249738?v=4",
      "events_url": "https://api.github.com/users/dwtaber/events{/privacy}",
      "followers_url": "https://api.github.com/users/dwtaber/followers",
      "following_url": "https://api.github.com/users/dwtaber/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwtaber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dwtaber",
      "id": 38249738,
      "login": "dwtaber",
      "node_id": "MDQ6VXNlcjM4MjQ5NzM4",
      "organizations_url": "https://api.github.com/users/dwtaber/orgs",
      "received_events_url": "https://api.github.com/users/dwtaber/received_events",
      "repos_url": "https://api.github.com/users/dwtaber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dwtaber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwtaber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dwtaber"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As long as the test still serves its original purpose (assuming that purpose still makes sense, of course) then yeah that should usually be fine.\r\n\r\nAn explicit test _might_ be preferable in this case, just because of the esoteric nature of the bug -- probably would be good to link to the breaking change doc that [was mentioned](https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-913944035) here in a comment near the test as well.",
    "created_at": "2021-09-07T19:37:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914573746",
    "id": 914573746,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42g0my",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914573746/reactions"
    },
    "updated_at": "2021-09-07T19:37:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914573746",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I was thinking of using a different pattern.\r\n\r\n```csharp\r\n        internal static SecureString Decrypt(string input, byte[] key, byte[] IV)\r\n        {\r\n            Utils.CheckArgForNullOrEmpty(input, \"input\");\r\n            Utils.CheckKeyArg(key, \"key\");\r\n\r\n            //\r\n            // prepare the crypto stuff\r\n            //\r\n            Aes aes = Aes.Create();\r\n            byte[] encryptedData = ByteArrayFromString(input);\r\n            var decryptor = aes.CreateDecryptor(key, IV ?? aes.IV);\r\n            using (var ms = new MemoryStream(encryptedData))\r\n            using (var sourceStream = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\r\n            using (var targetStream = new MemoryStream())\r\n            {\r\n                //\r\n                // decrypt the data\r\n                //\r\n                sourceStream.CopyTo(targetStream);\r\n                byte[] decryptedData = targetStream.ToArray();\r\n                try\r\n                {\r\n                    return New(decryptedData);\r\n                }\r\n                finally\r\n                {\r\n                    Array.Clear(decryptedData, 0, decryptedData.Length);\r\n                }\r\n            }\r\n        }\r\n```\r\nAlso, I noticed that the Encrypt() method doesn't dispose disposable objects or always clear the clear text data.  So I feel it should be cleaned up too.  I'll submit a PR tomorrow and let you take a look.\r\n",
    "created_at": "2021-09-07T22:58:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-914679427",
    "id": 914679427,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42hOaD",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914679427/reactions"
    },
    "updated_at": "2021-09-07T22:58:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/914679427",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I have created a PR for this (see above).  Please take a look.",
    "created_at": "2021-09-08T22:53:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-915625966",
    "id": 915625966,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42k1fu",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/915625966/reactions"
    },
    "updated_at": "2021-09-08T22:53:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/915625966",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I have created a PR for this (see above). Please take a look.\r\n\r\nI'm no expert, but that definitely seems like a much cleaner and more straightforward approach.  Parts of the original code seemed clunky enough that I figured they must be necessary for reasons I just wasn't seeing.  I'm happy to learn I was wrong about that!  Is there a performance reason to stick with `Array.Clear(Array, Int32, Int32)` rather than use the new `Array.Clear(Array)` overload in the `finally` block?\r\n\r\n> An explicit test might be preferable in this case, just because of the esoteric nature of the bug\r\n\r\nSorry, terminology misfire on my part; I wasn't thinking in terms of each `It` block constituting a test.  Anyway, yeah, my plan was to replace `$string = \"ABCD\"` in the `BeforeAll` block with something long enough to reveal this issue, e.g. `$String = \"PrimeNumberOfCharacters\"`, and to add this `It` block:\r\n```powershell\r\nIt \"can convert back from a secure string using AES\" {\r\n    $key = [byte[]]::new(24)\r\n    $secureString1 = ConvertTo-SecureString -AsPlainText -Force -String $string\r\n    $encryptedString = ConvertFrom-SecureString -SecureString $secureString1 -Key $key\r\n    $secureString2 = ConvertTo-SecureString -String $encryptedString -Key $key\r\n    $plaintextString = ConvertFrom-SecureString -AsPlainText -SecureString $secureString2\r\n    $plaintextString | Should -Be $string\r\n}\r\n```\r\n\r\nEdit: just noticed that the PR already includes updated tests.  Huzzah!",
    "created_at": "2021-09-08T23:48:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-915647363",
    "id": 915647363,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42k6uD",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/915647363/reactions"
    },
    "updated_at": "2021-09-09T00:06:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/915647363",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38249738?v=4",
      "events_url": "https://api.github.com/users/dwtaber/events{/privacy}",
      "followers_url": "https://api.github.com/users/dwtaber/followers",
      "following_url": "https://api.github.com/users/dwtaber/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwtaber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dwtaber",
      "id": 38249738,
      "login": "dwtaber",
      "node_id": "MDQ6VXNlcjM4MjQ5NzM4",
      "organizations_url": "https://api.github.com/users/dwtaber/orgs",
      "received_events_url": "https://api.github.com/users/dwtaber/received_events",
      "repos_url": "https://api.github.com/users/dwtaber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dwtaber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwtaber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dwtaber"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yes, I believe I have covered all issues in the PR.  Feel free to post any additional comments directly in the PR.  I am closing this issue since it has been addressed.\r\n\r\nThanks for finding this and helping with the fix!",
    "created_at": "2021-09-09T15:47:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-916220278",
    "id": 916220278,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc42nGl2",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/916220278/reactions"
    },
    "updated_at": "2021-09-09T15:49:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/916220278",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "NONE",
    "body": ":tada:This issue was addressed in #16068, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
    "created_at": "2021-12-16T20:01:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16047#issuecomment-996153009",
    "id": 996153009,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16047",
    "node_id": "IC_kwDOAvT7bc47YBax",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/996153009/reactions"
    },
    "updated_at": "2021-12-16T20:01:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/996153009",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
