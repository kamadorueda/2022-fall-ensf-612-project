[
  {
    "author_association": "NONE",
    "body": "My problem is, I have the following snippet in a production script and it throws a `InvalidOperation: You cannot call a method on a null-valued expression.` error on the `$AllDirectories.Insert(0, $LocalSharePath)` line when the directory referred to by `$LocalSharePath` does not have any subdirectories. I have thought about it for a while but I'm not sure what I'm supposed to do to handle this in a somewhat elegant manner.\r\n\r\n```powershell\r\n$LocalSharePath = 'E:\\whatever\\some\\directory'\r\n[System.Collections.Generic.List[string]]$AllDirectories = @()\r\n\r\ntry {\r\n    [System.Collections.Generic.List[string]]$AllDirectories = Invoke-Command -Session $FileServerSession {\r\n        # https://docs.microsoft.com/en-us/dotnet/api/system.io.directory.getdirectories?view=netframework-4.7.2\r\n        # public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);\r\n        [System.IO.Directory]::GetDirectories(\"$using:LocalSharePath\", \"*\", 1)\r\n    } -ErrorAction Stop\r\n}\r\ncatch {\r\n    Write-Error $_\r\n    Write-Error \"Falling back to slower directory enumeration ...\"\r\n    [System.Collections.Generic.List[string]]$AllDirectories = Invoke-Command -Session $FileServerSession {\r\n        Get-ChildItem -LiteralPath $using:LocalSharePath -Recurse | Where-Object { $_.PSIsContainer } | Select-Object -ExpandProperty FullName\r\n    }\r\n}\r\n\r\n# Add the root directory itself to the list of directories to go through\r\n$AllDirectories.Insert(0, $LocalSharePath)\r\n```\r\n\r\nEDIT: As you can see I am even explicitly casting/coercing/type-ensuring `[System.Collections.Generic.List[string]]` for `$AllDirectories` again in both the `Invoke-Command` lines - so I have no idea how I am getting `$null` back to be honest.",
    "created_at": "2021-08-02T13:56:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15856#issuecomment-891048365",
    "id": 891048365,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15856",
    "node_id": "IC_kwDOAvT7bc41HFGt",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891048365/reactions"
    },
    "updated_at": "2021-08-02T14:00:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891048365",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25607767?v=4",
      "events_url": "https://api.github.com/users/jantari/events{/privacy}",
      "followers_url": "https://api.github.com/users/jantari/followers",
      "following_url": "https://api.github.com/users/jantari/following{/other_user}",
      "gists_url": "https://api.github.com/users/jantari/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jantari",
      "id": 25607767,
      "login": "jantari",
      "node_id": "MDQ6VXNlcjI1NjA3NzY3",
      "organizations_url": "https://api.github.com/users/jantari/orgs",
      "received_events_url": "https://api.github.com/users/jantari/received_events",
      "repos_url": "https://api.github.com/users/jantari/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jantari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jantari/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jantari"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This is less to do with `Invoke-Command` specifically and more about how objects are enumerated to the pipeline from a command.\r\n\r\nFor instance you'll see the same behavior with just wrapping `GetDirectories()` in a scriptblock:\r\n\r\n```powershell\r\n[System.Collections.Generic.List[string]] $AllDirectories = @()\r\n\r\n# Direct method invocation does not enumerate and `GetDirectories` returns an empty\r\n# array, so this is similar to `$AllDirectories = @()`\r\n$AllDirectories = [System.IO.Directory]::GetDirectories(\"emptydir\", \"*\", 1)\r\n$null -eq $AllDirectories\r\n# False\r\n\r\n# Wrapping in `& { }` causes output to go through a pipeline.  Empty arrays have\r\n# no items to emit, so this is similar to `$AllDirectories = $null`\r\n$AllDirectories = & { [System.IO.Directory]::GetDirectories(\"emptydir\", \"*\", 1) }\r\n$null -eq $AllDirectories\r\n# True\r\n```\r\n\r\nIn the latest PowerShell you can handle this pretty easily with the following syntax:\r\n\r\n```powershell\r\n$AllDirectories = & { [System.IO.Directory]::GetDirectories(\"emptydir\", \"*\", 1) }\r\n\r\n# If null, then assign `@()`\r\n$AllDirectories ??= @()\r\n```\r\n\r\nOr wrap in `@()`\r\n\r\n```powershell\r\n$AllDirectories = @(& { [System.IO.Directory]::GetDirectories(\"emptydir\", \"*\", 1) })\r\n```",
    "created_at": "2021-08-02T16:34:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15856#issuecomment-891166543",
    "id": 891166543,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15856",
    "node_id": "IC_kwDOAvT7bc41Hh9P",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891166543/reactions"
    },
    "updated_at": "2021-08-02T16:34:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891166543",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "Okay, so that helps me understand what's happening better.\r\n\r\nThe workaround syntax of wrapping it in `@()` is problematic for readability of course as `Invoke-Command` calls usually span multiple lines (assuming an inline scriptblock like in my example above) amd I'm not a fan of the extra paranthesis/indentation required.\r\n\r\nThinking of it as C# I understand that any nullable type is going to be nulled by an expression that essentially evaluates like `[System.Collections.Generic.List[string]]$list = $null`, no matter what I try to cast/coerce to on the left side of the assignmnent, I guess it was just unexpected in PowerShell to me.\r\n\r\nEDIT: In case someone else finds this and is looking for a way to fail early on null-assignment, I suggest this:\r\n\r\n    [ValidateNotNull()][System.Collections.Generic.List[string]]$list = & { [System.IO.Directory]::GetDirectories(\"C:\\emptydir\", \"*\", 1) }",
    "created_at": "2021-08-03T15:18:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15856#issuecomment-891934721",
    "id": 891934721,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15856",
    "node_id": "IC_kwDOAvT7bc41KdgB",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891934721/reactions"
    },
    "updated_at": "2021-08-03T15:20:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/891934721",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25607767?v=4",
      "events_url": "https://api.github.com/users/jantari/events{/privacy}",
      "followers_url": "https://api.github.com/users/jantari/followers",
      "following_url": "https://api.github.com/users/jantari/following{/other_user}",
      "gists_url": "https://api.github.com/users/jantari/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jantari",
      "id": 25607767,
      "login": "jantari",
      "node_id": "MDQ6VXNlcjI1NjA3NzY3",
      "organizations_url": "https://api.github.com/users/jantari/orgs",
      "received_events_url": "https://api.github.com/users/jantari/received_events",
      "repos_url": "https://api.github.com/users/jantari/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jantari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jantari/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jantari"
    }
  }
]
