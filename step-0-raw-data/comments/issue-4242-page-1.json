[
  {
    "author_association": "CONTRIBUTOR",
    "body": "**Category B** is actually empty (try `$a = 1,(2,(3,4))` as test object). If cmdlet itself iterate over collection, then difference would be in how many levels are iterated, unless you are making collection flat.",
    "created_at": "2017-07-17T22:50:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-315907644",
    "id": 315907644,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkwNzY0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/315907644/reactions"
    },
    "updated_at": "2017-07-17T22:50:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/315907644",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @PetSerAl.\r\n\r\nI can see how with _nested_ collections the behavior differs:\r\n\r\n```powershell\r\n> Format-List -InputObject 1, (2, (3, 4))\r\n1\r\n\r\nLength         : 2\r\nLongLength     : 2\r\nRank           : 1\r\nSyncRoot       : {2, 3 4}\r\nIsReadOnly     : False\r\nIsFixedSize    : True\r\nIsSynchronized : False\r\nCount          : 2\r\n```\r\n\r\nvs:\r\n\r\n```powershell\r\n> 1, (2, (3, 4)) | Format-List \r\n1\r\n2\r\n\r\n\r\nLength         : 2\r\nLongLength     : 2\r\nRank           : 1\r\nSyncRoot       : {3, 4}\r\nIsReadOnly     : False\r\nIsFixedSize    : True\r\nIsSynchronized : False\r\nCount          : 2\r\n```\r\n\r\nSo is it fair to summarize Category B as comprising cmdlets that exhibit equivalent behavior only with _flat_ collections?\r\n\r\n",
    "created_at": "2017-07-18T16:09:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-316114269",
    "id": 316114269,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjExNDI2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316114269/reactions"
    },
    "updated_at": "2017-07-18T16:09:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316114269",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 Yes, I think, you can possible phrase it like that.",
    "created_at": "2017-07-18T16:37:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-316122563",
    "id": 316122563,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyMjU2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316122563/reactions"
    },
    "updated_at": "2017-07-18T16:37:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316122563",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @PetSerAl - I've updated the original post.",
    "created_at": "2017-07-18T16:52:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-316126931",
    "id": 316126931,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjEyNjkzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316126931/reactions"
    },
    "updated_at": "2017-07-18T16:52:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/316126931",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 in terms of the implementation differences with cmdlets or advanced functions that attempt to account for both input methods, I believe there is an [`ExpectingInput`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.invocationinfo.expectinginput?view=powershellsdk-1.1.0) value that can be used to determine if the cmdlet is being used in a pipeline capacity, which might help to properly mirror the implementations, rather than blindly iterating over whatever happens to be stored in `InputObject` at the time.",
    "created_at": "2019-01-09T13:15:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452692389",
    "id": 452692389,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjY5MjM4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452692389/reactions"
    },
    "updated_at": "2019-01-09T13:15:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452692389",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good tip, @vexx32.\r\n\r\nWere you thinking along the following lines?\r\n\r\n```powershell\r\nfunction foo {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(ValueFromPipeline)]\r\n        [object] $Param1  # declare as scalar\r\n    )\r\n\r\n    process {\r\n      if ($MyInvocation.ExpectingInput) { # pipeline input, already enumerated\r\n        \"[$Param1]\"\r\n      } else { # argument input, enumerate explicitly\r\n        foreach ($o in $Param1) { \"[$o]\" }\r\n      }\r\n    }\r\n\r\n}\r\n```\r\n\r\n`foo 1, (2, 3)` and `1, (2, 3) | foo` then both result in:\r\n\r\n```none\r\n[1]\r\n[2 3]\r\n```\r\n\r\nHowever, `foreach` isn't truly equivalent to pipeline enumeration, notably with `$null` as input: `$null | foo` vs. `foo $null`.\r\nWhat is needed to robustly emulate pipeline enumeration without involving a (costly) additional pipeline? Or is special-casing `$null` with `foreach` the best we can do?\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-01-09T14:03:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452706747",
    "id": 452706747,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcwNjc0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452706747/reactions"
    },
    "updated_at": "2019-01-09T14:03:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452706747",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "🤔 \r\n\r\nI think you can snip that last disparity fairly easily:\r\n\r\n```powershell\r\nforeach ($o in @($Param1)) { \"[$o]\" }\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/50904558-94bbf180-13ee-11e9-8aaf-2cfdea46aa2e.png)\r\n",
    "created_at": "2019-01-09T14:09:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452708809",
    "id": 452708809,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcwODgwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452708809/reactions"
    },
    "updated_at": "2019-01-09T14:11:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452708809",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Cool, thanks.\r\n\r\nCan we conclude that the best way to implement an item-by-item processing cmdlet that also supports collections as arguments via `-InputObject` is to use the above approach, based on a _scalar_ `-InputObject` declaration (`[object] $Param`)?\r\n\r\n(Using `[object[]] $Param1` would work too, but needlessly creates an array for each pipeline input object.)",
    "created_at": "2019-01-09T14:15:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452710676",
    "id": 452710676,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcxMDY3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452710676/reactions"
    },
    "updated_at": "2019-01-09T14:15:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452710676",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Pretty much, I would think, yeah. With that in mind, any cmdlet or function that should mirror the pipeline logic with its direct input parameters should look like this in PS from your example:\r\n\r\n```powershell\r\nif ($MyInvocation.ExpectingInput) {\r\n    $Param1 # do things with or output $Param1\r\n}\r\nelse { \r\n     foreach ( $o in @($Param1) ) {\r\n        $o # do things with or output $o\r\n    }\r\n}\r\n```\r\n\r\nSimilarly in C# cmdlets we can cast to `(Array)` on direct input before enumerating for a similar effect, I think. As you say, we probably don't want to force all pipeline items to be wrapped in an array if we can avoid it.\r\n\r\nEDIT: Also, with PSObject-typed parameter, the pattern for C# would need to look something like this:\r\n\r\n```csharp\r\nobject inputItems = null;\r\nif (MyInvocation.ExpectingInput)\r\n{\r\n    inputItems = InputObject.BaseObject;\r\n}\r\nelse\r\n{\r\n    inputItems = new List<object>();\r\n    foreach (object item in (Array)InputObject.BaseObject)\r\n    {\r\n        inputItems.Add(item);\r\n    }\r\n}\r\n// do things with inputItems and output or something\r\nWriteObject(inputItems, true);\r\n```\r\n\r\nThis would be necessary since an array of any length will still be stored inside a singular PSObject.\r\n\r\nNot 100% sure how to get at ExpectingInput from a cmdlet, but I think it might be in SessionState somewhere? It's been a while since I had to look for it on the C# side...",
    "created_at": "2019-01-09T14:15:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-452710694",
    "id": 452710694,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcxMDY5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452710694/reactions"
    },
    "updated_at": "2019-01-11T18:09:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/452710694",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 \r\n>Using `[object[]] $Param1` would work too, but needlessly creates an array for each pipeline input object.\r\n\r\nCasting something to array does not necessary wrap it into single element array. And pipeline does not restricted to scalars only. How are you planning to distinguish `1..3 | foo` from `1..3 | % { ,,$_ } | foo` or from `1..3 | % { ,[System.Collections.Generic.List[object]]::new((,$_)) } | foo`? In all three cases `foo` will see `$Param1` as array with single integer, if `foo` declare it as `[object[]] $Param1`.\r\n",
    "created_at": "2019-01-12T14:53:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453753539",
    "id": 453753539,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc1MzUzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453753539/reactions"
    },
    "updated_at": "2019-01-12T14:53:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453753539",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It isn't required to declare the array as `[object[]]`; `[object]` is capable of wrapping an array object. 😄 ",
    "created_at": "2019-01-12T16:44:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453762014",
    "id": 453762014,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc2MjAxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453762014/reactions"
    },
    "updated_at": "2019-01-12T16:44:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453762014",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @PetSerAl - I was too narrowly focused on flat input collections.\r\n\r\nDo you agree that the `[object]`-based approach summarized by @vexx32 above is the best approach, given the current capabilities?\r\n\r\nLonger-term, I wonder if we could introduce something like `[Parameter(ValueFromPipeline, EnumerateArgument)]` to move equal treatment of pipeline input and collection arguments into the plumbing (arguably, that should have been the default all along). However, presumably that would forfeit the performance benefit that comes from needing only a _single_ invocation of the `process` block.",
    "created_at": "2019-01-13T12:51:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453827133",
    "id": 453827133,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzgyNzEzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453827133/reactions"
    },
    "updated_at": "2019-01-13T12:52:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453827133",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0\r\nI am fine with current behavior. I think it should not be changed. IIRC, from v1 it is been explicitly stated in documentation, that `$Object | Get-Member` is different from `Get-Member -InputObject $Object`. When I explicitly use `-InputObject` parameter, it is always because I want behavior, that is different from what pipeline input does. I see no good reason why someone should generally expect that `Command-Name -InputObject $Object` is the same as `$Object | Command-Name`.",
    "created_at": "2019-01-13T13:25:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453829610",
    "id": 453829610,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzgyOTYxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453829610/reactions"
    },
    "updated_at": "2019-01-13T13:25:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453829610",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PetSerAl: While for `Get-Member` specifically (category A) it makes perfect sense for the behavior to differ, for the vast majority of cmdlets it does not, and - as argued in the initial post of this issue - if the current behavior is retained, the virtually useless-as-a-direct-argument-recipient `-InputObject` parameter for those cmdlets (category C) should be documented as an _implementation detail_ (along the lines of \"this parameter is just here to facilitate pipeline input - do not use it directly\").\r\n\r\nThat's certainly one way to go, and it would make this discussion moot.\r\n\r\nAs shown above, however, there is precedent for item-by-item processing cmdlets that perform their own enumeration (though, as you've demonstrated, the behavior is only identical to input via the pipeline for non-nested collections) - category B.\r\n\r\nWe can either live with these existing anomalies - and discourage explicit `-InputObject` use going forward except for category-A-like cmdlets - or make it easier to create cmdlets that (fully) allow interchangeable use of the pipeline and direct arguments.\r\n\r\nOne reason to do the latter is the very paradigm of declaring pipeline support: you start with declaring a _parameter_ that may _also_ be bound via the pipeline.\r\n\r\nA pragmatic reason to allow it is that (for collections already in memory) direct-argument use is faster than pipeline use; e.g., the direct-argument variant of the following two commands is about 3 times faster on my laptop:\r\n\r\n```powershell\r\nMeasure-Command { 1..1e5 | Out-String }  # pipeline\r\nMeasure-Command { Out-String -InputObject (1..1e5) }  # direct argument\r\n```\r\n\r\nAny syntactic sugar we introduce should then offer similar performance benefits, but I'm unclear on whether that's feasible.\r\n \r\n",
    "created_at": "2019-01-13T13:52:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-453831509",
    "id": 453831509,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzgzMTUwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453831509/reactions"
    },
    "updated_at": "2019-01-13T13:55:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/453831509",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As I mention [here](https://github.com/PowerShell/PowerShell/issues/8610#issuecomment-454002177), it might make sense to simply have `-InputObject` parameters be designated purely for pipeline use. In such a case, perhaps it would make the most sense to separate pipeline from regular use via parameter sets in most cases, potentially even declaring an entire parameter set as only usable for the pipeline?",
    "created_at": "2019-01-14T13:48:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-454010102",
    "id": 454010102,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDAxMDEwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/454010102/reactions"
    },
    "updated_at": "2019-01-14T13:49:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/454010102",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "From the *PowerShell scripting* view, is there a general **best practice** definition for this?\r\nMeaning:\r\n\r\n```PowerShell\r\nfunction Test {\r\n    param (\r\n        [Parameter(ValueFromPipeline)]\r\n        [string]$Param\r\n    )\r\n\r\n    process {\r\n        Write-Output $Param # My process\r\n    }\r\n}\r\n```\r\n\r\nvs:\r\n\r\n```PowerShell\r\nfunction Test {\r\n    param (\r\n        [Parameter(ValueFromPipeline)]\r\n        [string[]]$Param\r\n    )\r\n\r\n    process {\r\n        $Param |FroEach-Object { Write-Output $Param } # My Process\r\n    }\r\n}\r\n```\r\n\r\nSee also: [Looping over a pipeline parameter - what is the point?](https://stackoverflow.com/questions/72711942/looping-over-a-pipeline-parameter-what-is-the-point)",
    "created_at": "2022-06-22T13:41:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4242#issuecomment-1163113103",
    "id": 1163113103,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4242",
    "node_id": "IC_kwDOAvT7bc5FU7KP",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1163113103/reactions"
    },
    "updated_at": "2022-06-22T13:54:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1163113103",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  }
]
