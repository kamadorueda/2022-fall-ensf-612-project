[
  {
    "author_association": "MEMBER",
    "body": "@powercode More description about the scenario with examples would be helpful.",
    "created_at": "2022-05-13T16:23:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1126233969",
    "id": 1126233969,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5DIPdx",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1126233969/reactions"
    },
    "updated_at": "2022-05-13T16:23:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1126233969",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "#17349 shows possible implementations.\r\n\r\nThe bigger context is being able to write testable modules in C#, where common services can be injected into cmdlets.\r\nNormally, things like this are done by injection into the constructors, but since PowerShell owns the construction of cmdlets, we can at least be able to resolve services via an IServiceProvider.\r\n\r\nI want to be able to have a common base class library for the things that are common across our modules, for example, logging, telemetry, and default implementations for things that are abstracted for testing, such as IFileSystem, IEnvironment, and a native process abstraction we have to make testing easier.\r\n\r\nTests are often run in parallel, and having the serviceprovider for each test (often with mocked interface implementations) injected into each powershell would really make it easier.\r\n\r\n",
    "created_at": "2022-05-16T14:48:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1127771728",
    "id": 1127771728,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5DOG5Q",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1127771728/reactions"
    },
    "updated_at": "2022-05-16T14:48:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1127771728",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@powercode   Please provide examples of how this would be used.",
    "created_at": "2022-05-23T20:09:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1135092277",
    "id": 1135092277,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5DqCI1",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1135092277/reactions"
    },
    "updated_at": "2022-05-23T20:09:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1135092277",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "To be able to test code like this, that depends on things that needs to be mocked for testing:\r\n\r\n```csharp\r\n\r\n\r\npublic interface IDateProvider\r\n{\r\n    DateTime Now { get; }\r\n    DateTime UtcNow { get; }\r\n}\r\n\r\n\r\n[Cmdlet(VerbsCommon.Get, \"Date\")]\r\n[OutputType(typeof(DateTime))]\r\npublic class GetDateCommand : PSCmdlet\r\n{\r\n    private IDateProvider DateProvider => SessionState.ServiceProvider.GetRequiredService<IDateProvider>();\r\n    private ILogger<GetDateCommand> Logger => SessionState.ServiceProvider.GetRequiredService<ILogger<GetDateCommand>>();\r\n\r\n    protected override void EndProcessing()\r\n    {\r\n        var logger = Logger;\r\n        \r\n        var date = DateProvider.Now;\r\n\r\n        logger.LogInformation(\"Getting date {now}\", date);\r\n        \r\n        WriteObject(date);\r\n    }\r\n}\r\n```\r\n\r\nA host could do the following:\r\n\r\n```csharp\r\n\r\npublic class DefaultDateProvider : IDateProvider\r\n{\r\n    public DateTime Now => DateTime.Now;\r\n    public DateTime UtcNow => DateTime.UtcNow;\r\n}\r\n\r\nclass Program\r\n{\r\n    public static int Main(string[] args)\r\n    {\r\n        var services = new Microsoft.Extensions.DependencyInjection.ServiceCollection()\r\n            .AddLogging(builder => { builder.AddEventSourceLogger(); })\r\n            .AddSingleton(new DefaultDateProvider());\r\n                        \r\n        var iss = InitialSessionState.Create();\r\n        iss.ServiceProvider = services.BuildServiceProvider();\r\n\r\n        var exitCode = Microsoft.PowerShell.ConsoleShell.Start(iss, \"Banner\", \"Help\", args);\r\n        return exitCode;\r\n    }\r\n}\r\n```\r\n\r\nAnd test could look like this:\r\n```csharp\r\n\r\n[TestClass]\r\npublic class DateTests\r\n{\r\n    [TestMethod]\r\n    public void TestGetUtcDate()\r\n    {\r\n        var services = new Microsoft.Extensions.DependencyInjection.ServiceCollection()\r\n            .AddLogging(builder => { builder.AddDebug(); })\r\n            .AddSingleton(GetMockedDateProvider(\r\n                () => new DateTime(2022, 10, 10, 11, 12, 13, DateTimeKind.Utc),\r\n                () => new DateTime(2022, 10, 10, 11, 12, 13, DateTimeKind.Local)));\r\n\r\n        var iss = InitialSessionState.CreateDefault();\r\n        iss.ServiceProvider = services.BuildServiceProvider;\r\n\r\n        iss.Commands.Add(new SessionStateCmdletEntry(\"Get-Date\", typeof(GetDateCommand), null));\r\n\r\n        using var ps = PowerShell.Create(iss);\r\n        ps.AddCommand(new CmdletInfo(\"Get-Date\", typeof(GetDateCommand)));\r\n        var actual = ps.Invoke<DateTime>().First();\r\n        var expected = new DateTime(2022, 10, 10, 11, 12, 13, DateTimeKind.Utc);\r\n        Assert.AreEqual(expected, actual);\r\n    }\r\n    \r\n    IDateProvider GetMockedDateProvider(Func<DateTime> utcFunc, Func<DateTime> nowFunc)\r\n    {\r\n        var dateMock = new Moq.Mock<IDateProvider>();\r\n        dateMock.Setup(d => d.UtcNow).Returns(utcFunc());\r\n        dateMock.Setup(d => d.Now).Returns(nowFunc());\r\n        return dateMock.Object;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n",
    "created_at": "2022-05-24T18:58:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1136323117",
    "id": 1136323117,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5Duuot",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1136323117/reactions"
    },
    "updated_at": "2022-05-24T18:58:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1136323117",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If we need to use the default host, we can fall back to something like:\r\n\r\n```csharp\r\nprivate IDateProvider DateProvider => SessionState.ServiceProvider.GetService<IDateProvider>() ?? new DefaultDateProvider();\r\n```",
    "created_at": "2022-05-24T18:58:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1136323966",
    "id": 1136323966,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5Duu1-",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1136323966/reactions"
    },
    "updated_at": "2022-05-24T18:58:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1136323966",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The Engine WG discussed this yesterday. We agree that there is value in providing a uniform way to use dependency injection in PowerShell, but we would need an alternate proposal that solves the conflict issue described in [#17349 (comment)](https://github.com/PowerShell/PowerShell/pull/17349#discussion_r874075860). We would need a way to ensure that a module author could obtain an `IServiceProvider` that is unique to their module (or group of modules).\r\n\r\nFor now we recommend utilizing the pattern suggested in [#17349 (comment)](https://github.com/PowerShell/PowerShell/pull/17349#discussion_r873888306).",
    "created_at": "2022-05-27T15:17:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1139715540",
    "id": 1139715540,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5D7q3U",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139715540/reactions"
    },
    "updated_at": "2022-05-27T15:17:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1139715540",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Isn't this the same problem with isolating modules using the same library? We discussed this for a long time and came to the consensus that it is the task of the author of the module to provide isolation. Perhaps the DJ already supports this? If not, perhaps this should be discussed in the .Net repository?",
    "created_at": "2022-05-28T05:44:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1140179819",
    "id": 1140179819,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5D9cNr",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1140179819/reactions"
    },
    "updated_at": "2022-05-28T05:44:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1140179819",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as declined and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2022-05-29T10:00:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1140415759",
    "id": 1140415759,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5D-V0P",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1140415759/reactions"
    },
    "updated_at": "2022-05-29T10:00:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1140415759",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Isn't this the same problem with isolating modules using the same library? We discussed this for a long time and came to the consensus that it is the task of the author of the module to provide isolation.\r\n\r\nTechnically you could get around this with ALC isolation but I wouldn't say it's the same issue. Considering how much trouble related issues have been, I don't think it's a good idea to add more on that pile. Especially since the use of DI is not blocked, I gave an example of a working pattern one can use today.\r\n\r\n> Perhaps the DJ already supports this? If not, perhaps this should be discussed in the .Net repository?\r\n\r\nA service provider is mostly intended to be used by a single author + maybe the framework that is being utilized. I'm unsure what their answer would be other than recommending a different service provider per author, but you're welcome to start a discussion there.",
    "created_at": "2022-06-02T19:31:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/17335#issuecomment-1145257600",
    "id": 1145257600,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/17335",
    "node_id": "IC_kwDOAvT7bc5EQz6A",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1145257600/reactions"
    },
    "updated_at": "2022-06-02T19:31:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1145257600",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  }
]
