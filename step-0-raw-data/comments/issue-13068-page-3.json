[
  {
    "author_association": "NONE",
    "body": "This situation is so unfortunate for me, I need to fastly process the output for `CMake` when tracing, besides passing compiler arguments, which are kind of annoying (bad CMakeLists, but that's another problem).  I also couldn't wait for `7.2` going live.\r\nWhat I needed was redirecting the error output to the normal output by the most directly means possible, and the only way to do that is at the dotnet `IO.Stream` source.\r\n (I could recompile `CMake`, but I don't want to do that for reproducibility reasons, an external Powershell module is better anyway, as this problem could happen again in other processes).\r\nSo I made a better `Invoke-NativeProcess`  CmdLet that solve the streaming problems, besides correctly using `ArgumentLists` because it uses a copy of the Start-Process the same way the internal `NativeCommandProcessor` does.\r\n\r\nPlease provide us with better ways to hook new `CommandProcessors`, so we can directly create custom replacements instead of making CmdLets.\r\n\r\nI think if there was a simpler way to hook `CommandsProcessors`, or change which `CommandProcessor` is used for each executable, it would be much better than using `&` and relying on it doing the wrong thing (trying his best thou, but it doesn't know what its command does).\r\nI bet if `CommandProcessors` were customizable, this problem could be alleviated, because it mostly happens when integrating with external tools.\r\nSo it would be much simpler to create customized `CommandProcessors` for each tool, perhaps driven by metadata, a simple XML and powershell generates all the CmdLets/CommandProcessors to build the command line for the external application, the final user doesn't even need to know anything, is just does `Get-Help` and get the correct parameters. It would get much more integrated. An idea would be doing what syntax highlighters do in VsCode, sometimes they have a parse-tree just for highlighting, which is kind of the same problem we have with detecting which thing is a literal char and which thing is an argument that should be expanded, this is a way to drive for any kind of syntax, and work for most languages (besides C++, because, in C++, even the syntax is Turing complete, you can't know it before you make the entire compiler).\r\nA good side effect would also having standardized `-parameter` witch is better than `/s` or `--bullshit`, besides `Get-Help` being useful. \r\n\r\nMeanwhile, I have a solution, just use my `Invoke-FastProcess`\r\nThe library I made for this purpose. https://github.com/Luiz-Monad/PowershellProcess\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/446e455709b72508de9710b1ca8e4516671f10781bc0f1866a402c8e7cf1b9c0/Luiz-Monad/PowershellProcess\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/Luiz-Monad/PowershellProcess\">Luiz-Monad/PowershellProcess</a></strong></div><div>Contribute to Luiz-Monad/PowershellProcess development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2021-06-30T20:25:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-871703973",
    "id": 871703973,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTcwMzk3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/871703973/reactions"
    },
    "updated_at": "2021-06-30T21:03:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/871703973",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4574729?v=4",
      "events_url": "https://api.github.com/users/Luiz-Monad/events{/privacy}",
      "followers_url": "https://api.github.com/users/Luiz-Monad/followers",
      "following_url": "https://api.github.com/users/Luiz-Monad/following{/other_user}",
      "gists_url": "https://api.github.com/users/Luiz-Monad/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Luiz-Monad",
      "id": 4574729,
      "login": "Luiz-Monad",
      "node_id": "MDQ6VXNlcjQ1NzQ3Mjk=",
      "organizations_url": "https://api.github.com/users/Luiz-Monad/orgs",
      "received_events_url": "https://api.github.com/users/Luiz-Monad/received_events",
      "repos_url": "https://api.github.com/users/Luiz-Monad/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Luiz-Monad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Luiz-Monad/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Luiz-Monad"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> So it would be much simpler to create customized `CommandProcessors` for each tool, perhaps driven by metadata, a simple XML and powershell generates all the CmdLets/CommandProcessors to build the command line for the external application,\r\n\r\nYou could look https://github.com/PowerShell/Crescendo. \r\n(I'm personally skeptical about it. It's extremely surprising that PowerShell doesn't do what it should and we need to learn yet another convoluted module just to run an application.)\r\n\r\nMy alternative proposal partially is in #13428.\r\n(This allows us to do magical things with minimal changes in Engine (based on some meta-information) as well as very specific things.)\n\n<blockquote><img src=\"https://opengraph.githubassets.com/4cb2831ead6372268b67a933229de825b7c82f78debec3fddde5800f78da7a4a/PowerShell/Crescendo\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Crescendo\">PowerShell/Crescendo</a></strong></div><div>a module for wrapping native applications in a PowerShell function and module - PowerShell/Crescendo</div></blockquote>",
    "created_at": "2021-07-01T03:04:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-871876452",
    "id": 871876452,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTg3NjQ1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/871876452/reactions"
    },
    "updated_at": "2021-07-01T03:04:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/871876452",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> \r\n> \r\n> > So it would be much simpler to create customized `CommandProcessors` for each tool, perhaps driven by metadata, a simple XML and powershell generates all the CmdLets/CommandProcessors to build the command line for the external application,\r\n> \r\n> You could look https://github.com/PowerShell/Crescendo.\r\n> (I'm personally skeptical about it. It's extremely surprising that PowerShell doesn't do what it should and we need to learn yet another convoluted module just to run an application.)\r\n> \r\n> My alternative proposal partially is in #13428.\r\n> (This allows us to do magical things with minimal changes in Engine (based on some meta-information) as well as very specific things.)\r\n> \r\n\r\n\r\nWow, that's exactly what I needed, thank you.\r\nI can even replace `&` with my `InvokeProcess-Fast` which buffer the stream directly from the source, the `System.IO.Stream`, to an array, so it doesn't send thousands of objects onto the pipeline (sending arrays kind of partially defeats its purpose), but now I can stream 4MB of text into my console, and better, I can Tee-Objects as fast as the filesystem would write them, which gets me amazingly fast throughput, the file finishes writing in parallel faster than dumping text onto the screen, which is what I wanted. \r\nBut the most important of all, when I redirect the error stream to the output, it doesn't get stupidly slow because lots of ErrorRecords with Exceptions inside with bloody stack traces inside them... (and putting an enormous strain on the GC, exceptions are meant to be exceptional, not a container)\r\n\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/4cb2831ead6372268b67a933229de825b7c82f78debec3fddde5800f78da7a4a/PowerShell/Crescendo\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Crescendo\">PowerShell/Crescendo</a></strong></div><div>a module for wrapping native applications in a PowerShell function and module - PowerShell/Crescendo</div></blockquote>",
    "created_at": "2021-07-02T17:58:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-873167016",
    "id": 873167016,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzE2NzAxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873167016/reactions"
    },
    "updated_at": "2021-07-02T18:02:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873167016",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4574729?v=4",
      "events_url": "https://api.github.com/users/Luiz-Monad/events{/privacy}",
      "followers_url": "https://api.github.com/users/Luiz-Monad/followers",
      "following_url": "https://api.github.com/users/Luiz-Monad/following{/other_user}",
      "gists_url": "https://api.github.com/users/Luiz-Monad/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Luiz-Monad",
      "id": 4574729,
      "login": "Luiz-Monad",
      "node_id": "MDQ6VXNlcjQ1NzQ3Mjk=",
      "organizations_url": "https://api.github.com/users/Luiz-Monad/orgs",
      "received_events_url": "https://api.github.com/users/Luiz-Monad/received_events",
      "repos_url": "https://api.github.com/users/Luiz-Monad/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Luiz-Monad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Luiz-Monad/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Luiz-Monad"
    }
  },
  {
    "author_association": "NONE",
    "body": "> (I'm personally skeptical about it. It's extremely surprising that PowerShell doesn't do what it should and we need to learn yet another convoluted module just to run an application.) \r\n\r\nI'm not so surprised by that, I kind of hate command line integrations between programs, seriously, calling a program by the command line and passing arguments as an array of strings that need to be parsed... \r\nPerhaps some kind of `Intent` for doing IPC, though the `Binder`, like Android does, but that's on operating systems, not shells. We can't blame Powershell too much for it.\r\nAny \"new\" kind of shell will have to deal with this bullshit one way or another.\r\n\r\nBut I agree with you that a tool like Crescendo for parsing metadata and making all command line tools have a standardized interface is absolutely needed, it should be a *core* module and very solid with the most used software, like `git`, or `cmake` in my case.\r\n\r\nPerhaps this Unix idea of everything being a text was not a good idea at all, powershell was supposed to solve that, it kind of does if you only use cmdlets... \r\nSo the next very best thing is actually automatically generating those cmdlets. \r\n",
    "created_at": "2021-07-02T18:07:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-873172036",
    "id": 873172036,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzE3MjAzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873172036/reactions"
    },
    "updated_at": "2021-07-02T18:11:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873172036",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4574729?v=4",
      "events_url": "https://api.github.com/users/Luiz-Monad/events{/privacy}",
      "followers_url": "https://api.github.com/users/Luiz-Monad/followers",
      "following_url": "https://api.github.com/users/Luiz-Monad/following{/other_user}",
      "gists_url": "https://api.github.com/users/Luiz-Monad/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Luiz-Monad",
      "id": 4574729,
      "login": "Luiz-Monad",
      "node_id": "MDQ6VXNlcjQ1NzQ3Mjk=",
      "organizations_url": "https://api.github.com/users/Luiz-Monad/orgs",
      "received_events_url": "https://api.github.com/users/Luiz-Monad/received_events",
      "repos_url": "https://api.github.com/users/Luiz-Monad/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Luiz-Monad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Luiz-Monad/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Luiz-Monad"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Perhaps this Unix idea of everything being a text was not a good idea at all, powershell was supposed to solve that, it kind of does if you only use cmdlets...\r\n\r\nThat idea has been superseded by the desktop bus.\r\n\r\n",
    "created_at": "2021-07-02T18:53:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-873199448",
    "id": 873199448,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzE5OTQ0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873199448/reactions"
    },
    "updated_at": "2021-07-02T18:53:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/873199448",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  }
]
