[
  {
    "author_association": "CONTRIBUTOR",
    "body": "For a complete overview of PowerShell's current error handling, see https://github.com/PowerShell/PowerShell-Docs/issues/1583",
    "created_at": "2018-09-13T02:07:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-420858657",
    "id": 420858657,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg1ODY1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420858657/reactions"
    },
    "updated_at": "2018-09-13T02:07:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420858657",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": ">Arguably, `-ErrorAction` too should apply to all error types (as appropriate), though that would certainly be a breaking change.\r\n\r\nThis is precisely the subject of my feature request.  Everyone I have seen encounter this behavior have thought they found a bug and all used strong language when I explained the underlying behavior.  This behavior is extremely counter-intuitive and worth changing in the next major release, even if it's a breaking change.",
    "created_at": "2018-09-13T02:32:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-420862844",
    "id": 420862844,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg2Mjg0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420862844/reactions"
    },
    "updated_at": "2018-09-13T02:32:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420862844",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3680671?v=4",
      "events_url": "https://api.github.com/users/chriskuech/events{/privacy}",
      "followers_url": "https://api.github.com/users/chriskuech/followers",
      "following_url": "https://api.github.com/users/chriskuech/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriskuech/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chriskuech",
      "id": 3680671,
      "login": "chriskuech",
      "node_id": "MDQ6VXNlcjM2ODA2NzE=",
      "organizations_url": "https://api.github.com/users/chriskuech/orgs",
      "received_events_url": "https://api.github.com/users/chriskuech/received_events",
      "repos_url": "https://api.github.com/users/chriskuech/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chriskuech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriskuech/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chriskuech"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I hear you. I pointed you to the docs issue to get the full picture. \r\n\r\nIt's unclear if there will ever be a release that changes such fundamental behaviors, because the commitment to backward compatibility has been ironclad so far.\r\n\r\nFor a meta-discussion, see #6745",
    "created_at": "2018-09-13T02:37:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-420863654",
    "id": 420863654,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg2MzY1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420863654/reactions"
    },
    "updated_at": "2019-03-16T17:48:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420863654",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@chriskuech \r\n> All cmdlets should respect the ErrorActionPreference\r\n\r\nGiven that all cmdlets already respect ErrorActionPreference, can you elaborate on what you mean by this? Thanks.",
    "created_at": "2018-09-13T16:40:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421072349",
    "id": 421072349,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTA3MjM0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421072349/reactions"
    },
    "updated_at": "2018-09-13T16:40:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421072349",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\nYou're right, the `$ErrorActionPreference` _preference variable_ applies to _all_ errors, _against [documented behavior](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6)_:\r\n\r\n> Neither `$ErrorActionPreference` nor the `ErrorAction` common parameter affect how PowerShell responds to terminating errors (those that stop cmdlet processing).\r\n\r\n```powershell\r\nPS> & { $ErrorActionPreference = 'SilentlyContinue'; Get-Item -NoSuchParam; 'Done' }\r\nDone  # Statement-terminating error was silently ignored.\r\n```\r\n\r\nBy contrast, the - ostensibly equivalent - command-scoped mechanism, the `-ErrorAction` _common parameter_, applies _only to non-terminating_ errors, in line with the documentation:\r\n\r\n```powershell\r\n# The error is still reported, because it is (statement-)terminating.\r\nPS> & { WriteOutput -ErrorAction SilentlyContinue (Get-Item -NoSuchParam); 'Done' }\r\nGet-Item : A parameter cannot be found that matches parameter name 'NoSuchParam'.\r\n....\r\nDone\r\n```\r\n\r\nIf I understand @chriskuech correctly, his preference is for `-ErrorAction` to apply to terminating errors as well (whether statement- or -script-terminating), just as `$ErrorActionPreference` already does.\r\n\r\n",
    "created_at": "2018-09-13T19:23:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421122794",
    "id": 421122794,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTEyMjc5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421122794/reactions"
    },
    "updated_at": "2018-09-13T19:23:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421122794",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n> You're right, the $ErrorActionPreference preference variable applies to all errors, \r\n\r\nI didn't say all _errors_, I said the preference variables applies to all _cmdlets_ and @chriskuech was asserting that it did not. I was wondering what he meant by that. Still am.\r\n\r\nI'm not sure I understand the example you included. Is this yours or is it from the documentation? \r\n```powershell\r\nPS> & { $ErrorActionPreference = 'SilentlyContinue'; Get-Item -NoSuchParam; 'Done' }\r\nDone  # Statement-terminating error was silently ignored.\r\n```\r\nThere are three statement inside the scriptblock (';' separates statements). Only the statement with the statement-terminating error is terminated so of course `'Done'` should run.  Do you think something is wrong here?\r\n\r\n>  the -ErrorAction common parameter, applies only to non-terminating errors, in line with the documentation:\r\n\r\nVery specifically `-ErrorAction` applies to things that are _written to the error pipeline_. As I've explained previously, an error is neither terminating nor non-terminating. It's what you do with it that matters. If you want it to be nonterminating, write it to the error pipeline. If you want it to be terminating, throw it as an exception. It has been suggested that we add a property to the `ErrorRecord` to track the disposition though I'm uncertain how useful that will be since a single error record may be thrown, caught then written. As an aside, we do track if an exception was thrown from the `throw` statement:\r\n```powershell\r\nPSCore (1:105) >  try { throw 'Yikes' } catch { $e = $_ }\r\nPSCore (1:106) >  $e.Exception.WasThrownFromThrowStatement\r\nTrue\r\n```\r\nbut that's used internally by the engine for exception processing.\r\n\r\n> -ErrorAction to apply to terminating errors as well (whether statement- or -script-terminating), just as $ErrorActionPreference already does.\r\n\r\n$ErrorActionPreference _doesn't_ apply to terminating errors (exceptions). As for applying the existing preference variable/parameter to terminating errors, that actually makes no sense. The preference variables control disposition of the error. Applying the same variable setting to two distinct error \"channels\" with inherently different behaviours makes no sense.\r\n\r\n",
    "created_at": "2018-09-13T22:42:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421175598",
    "id": 421175598,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE3NTU5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421175598/reactions"
    },
    "updated_at": "2018-09-13T22:42:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421175598",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\nLet me just say that the gist of what's in the OP and his follow-up comment suggest that his concerns are about:\r\n\r\n  * wishing that the `-ErrorAction` common parameter take effect for _terminating_ errors too \r\n  * and, more broadly, that the distinction between terminating and non-terminating may be unhelpful, given that it requires distinct ways of handling the error, and there's often confusion over what error type is issued when.\r\n\r\nBut enough speculation  - I'll let @chriskuech respond.\r\n\r\n---\r\n\r\nLet's talk about terminology first:\r\n\r\n> an error is neither terminating nor non-terminating.\r\n\r\n* _Non-terminating_ vs. _terminating_ is the official nomenclature, and it makes sense, as it  describes the _default_ behavior when these errors occur.\r\n\r\n* _Non-terminating_ errors by default do not affect the flow of execution; in a pipeline, they continue  processing of further objects, if applicable.\r\n\r\n* As noted in the linked docs issue, a regrettable omission from the docs is the important subdivision of _terminating errors_ into: \r\n   * _statement_-terminating errors (which happen to be _pipeline_-terminating errors if the statement is (only) a pipeline); by default, these terminate the _current statement only_  (albeit instantly) and _execution continues_, with the _next_ statement.\r\n\r\n  * _script-terminating_ errors - a terminology we previously agreed upon (technically: a current-thread terminating error, as you've previously explained).\r\n\r\n  * In other words: these two subtypes differ by _what_ they terminate (the _scope_ of the termination)\r\n\r\nI'll be using these terms in the rest of this post.\r\n\r\n---\r\n\r\n> I didn't say all _errors_\r\n\r\nIt is what _I_ said, however, because it is true (though I should have be more precise: _all_ types of _runtime_ errors (as opposed to _parse-time_ errors)), and it also encompasses your claim.\r\n(As an aside: As previously discussed, preference variables such as `$ErrorActionPreference` are _not_ honored by _advanced functions_ from _other modules_ - see #4568).\r\n\r\n---\r\n\r\n> I'm not sure I understand the example you included. Is this yours or is it from the documentation?\r\n> Do you think something is wrong here?\r\n\r\nThe example, which I've created, demonstrates that `$ErrorActionPreference = 'SilentlyContinue'` is able to silence the _terminating_ error that `Get-Item -NoSuchParam` generates - against documented behavior.\r\n\r\n(The only reason I used `& { ... }` was to localize the effect of changing `$ErrorActionPreference`.)\r\n\r\n> If you want it to be terminating, throw it as an exception.\r\n\r\n`Get-Item -NoSuchParam` _is_ terminating - it is _statement_-terminating - and for that reason `-ErrorAction SilentlyContinue` can _not_ be used to silence it, as the 2nd command demonstrates.\r\n\r\nA _statement_-terminating error issued by a cmdlet is _not_ the same as a _script_-terminating error generated with `throw`. As stated, this vital - potentially originally unintended, but de-facto extant - distinction is missing from the docs.\r\n\r\n---\r\n\r\n> $ErrorActionPreference doesn't apply to terminating errors (exceptions)\r\n\r\nIt already _does_:\r\n\r\n```powershell\r\nPS> & { $ErrorActionPreference = 'SilentlyContinue'; Throw 'a hissy fit'; 'Done' }\r\nDone\r\n```\r\n\r\nAs you can see, the `Throw` statement was happily ignored.\r\n\r\n---\r\n\r\n> As for applying the existing preference variable/parameter to terminating errors, that actually makes no sense.\r\n\r\nAgain: \r\n\r\n* The _preference variable_  _is_ already being applied to terminating errors (of both subtypes).\r\n\r\n* The _common parameter_ is _not_ being applied to terminating errors (of both subtypes; with _script_-terminating errors only occurring in _advanced functions_ using `Throw`).\r\n\r\nThis inconsistency, along with the lack of distinction between statement- and script-terminating errors in the docs have caused much, much confusion over the years.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-09-14T02:40:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421212892",
    "id": 421212892,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTIxMjg5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421212892/reactions"
    },
    "updated_at": "2018-09-14T02:43:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421212892",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I assumed `$ErrorActionPreference` and `-ErrorAction` would have the same behavior, and in my opinion, the fact that they don't is even more confusing than the behavior I assumed.\r\n\r\nThe exact case that keeps coming up:\r\n```\r\nInvoke-WebRequest \"bad-uri\" -ErrorAction SilentlyContinue\r\n```\r\n\r\nFurther, the word \"terminating\" is not present anywhere in [the docs for this cmdlet](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6#description) and I assume the same is true of other cmdlets that throw terminating errors.",
    "created_at": "2018-09-14T18:29:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421446001",
    "id": 421446001,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQ0NjAwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421446001/reactions"
    },
    "updated_at": "2018-09-14T18:29:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/421446001",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3680671?v=4",
      "events_url": "https://api.github.com/users/chriskuech/events{/privacy}",
      "followers_url": "https://api.github.com/users/chriskuech/followers",
      "following_url": "https://api.github.com/users/chriskuech/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriskuech/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chriskuech",
      "id": 3680671,
      "login": "chriskuech",
      "node_id": "MDQ6VXNlcjM2ODA2NzE=",
      "organizations_url": "https://api.github.com/users/chriskuech/orgs",
      "received_events_url": "https://api.github.com/users/chriskuech/received_events",
      "repos_url": "https://api.github.com/users/chriskuech/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chriskuech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriskuech/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chriskuech"
    }
  },
  {
    "author_association": "NONE",
    "body": "In reply to @mklement0 \r\n\r\n> You're right, the `$ErrorActionPreference` preference variable applies to all errors, against documented behavior:\r\n>\r\n> > Neither $ErrorActionPreference nor the ErrorAction common parameter affect how PowerShell responds to terminating errors (those that stop cmdlet processing).\r\n>\r\n> ```\r\n> PS> & { $ErrorActionPreference = 'SilentlyContinue'; Get-Item -NoSuchParam; 'Done' }\r\n> Done  # Statement-terminating error was silently ignored.\r\n> ```\r\n\r\n`Get-Item -NoSuch` produces a non-terminating error. You can imagine the engine working like this:\r\n\r\n```\r\nFunction Invoke-Cmdlet\r\n{\r\n  If (NoSuchParam)\r\n  {\r\n    Write-Error 'No such param.'\r\n  }\r\n  Else\r\n  {\r\n    # actual stuff\r\n  }\r\n}\r\n```\r\n\r\nIn other words, it is that the statement **never gets executed** because it's unclear *how to do so*, and it is **not** the case that the statement gets terminated.\r\n\r\n---\r\n\r\nThrowing a terminating error signals a severe error condition for which the continuation of the cmdlet isn't meaningful. For example, if you try to download and parse a JSON, it makes no sense to start parsing if the downloading didn't succeed, thus the terminating error. In other words, it is used by cmdlets to control their flow in addition to reporting to the upstream commands why they didn't complete normally. **It's like writing the error and calling `Break`. (I'll return to this later)** If some cmdlet stopped because of a terminating error, the error is passed to the caller and is not going to terminate the caller.\r\n\r\nLet me restate the OP's question in a clearer way.\r\n\r\n```powershell\r\nfunction x\r\n{\r\n[cmdletbinding()]param()\r\nbegin{\r\n$PSCmdlet.ThrowTerminatingError(\r\n[System.Management.Automation.ErrorRecord]::new(\r\n[System.NotImplementedException]::new(),\r\n'Not implemented.', 'NotSpecified', $null));\r\n}\r\n}\r\n\r\nx -ea silentlycontinue; 'Done 1';\r\nx; 'Done 2';\r\n& { $ErrorActionPreference = 'silentlycontinue'; x -ea silentlycontinue; 'Done 3'; }\r\n& { $ErrorActionPreference = 'silentlycontinue'; x; 'Done 4'; }\r\n```\r\n\r\nIt makes no sense to continue the execution of that cmdlet, but it makes sense to decide by `ErrorAction` whether the terminating error is echoed or something.\r\n\r\nCurrent behavior is equivalent to the following:\r\n\r\n1. Execute the cmdlet.\r\n2. If the cmdlet calls `$PSCmdlet.ThrowTerminatingError(x)`, store `x` and terminate the cmdlet.\r\n3. Back in the caller's scope, call `$PSCmdlet.WriteError(x)`. (This is not true if the caller isn't a `PSCmdlet`, but it serves the purpose of exposition.)\r\n\r\nIn other words, the terminating error is written to the error stream in the caller's scope, respecting the caller's `$ErrorActionPreference`. In the mean time, `ErrorAction` only controls how error records written by the callee behaves.\r\n\r\n- **Current behavior**: a terminating error is written to the stream in the caller's context.\r\n- **What the OP wants**: the terminating error is written to the stream in the callee's context.\r\n\r\nAs I said, intuitively, throwing a terminating error could be interpreted as **calling WriteError and then break**. However, it is now **keep the error, call break, go back to the caller's scope, write error**.",
    "created_at": "2019-03-15T06:46:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473177192",
    "id": 473177192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzE3NzE5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473177192/reactions"
    },
    "updated_at": "2019-03-15T07:00:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473177192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4462444?v=4",
      "events_url": "https://api.github.com/users/GeeLaw/events{/privacy}",
      "followers_url": "https://api.github.com/users/GeeLaw/followers",
      "following_url": "https://api.github.com/users/GeeLaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeeLaw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/GeeLaw",
      "id": 4462444,
      "login": "GeeLaw",
      "node_id": "MDQ6VXNlcjQ0NjI0NDQ=",
      "organizations_url": "https://api.github.com/users/GeeLaw/orgs",
      "received_events_url": "https://api.github.com/users/GeeLaw/received_events",
      "repos_url": "https://api.github.com/users/GeeLaw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/GeeLaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeeLaw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/GeeLaw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> `Get-Item -NoSuch` produces a non-terminating error. \r\n\r\nIt doesn't, it creates a _statement-terminating_ error, which you can verify as follows:\r\n\r\n```powershell\r\nPS> Get-Item -NoSuch -ErrorAction Ignore; 'Done'\r\nGet-Item : A parameter cannot be found that matches parameter name 'nosuch'.\r\n...\r\nDone\r\n```\r\n\r\nThat is, `-ErrorAction` was _ignored_ from which you can infer that the error is _not_ non-terminating. Since `Done` still printed, you can infer that it wasn't a _script_-terminating (thread-terminating) error either.\r\n\r\n```powershell\r\nPS> (Get-Item -NoSuch) + '!'\r\nGet-Item : A parameter cannot be found that matches parameter name 'NoSuch'.\r\n```\r\n\r\nThat is, only the error message printed and not also `!`, which implies that the statement as a whole was terminated (contrast this with `(Get-Item \\nosuch\\path) + '!'`, which does print `!`).\r\n\r\nNo one is disputing that it makes sense to not even attempt execution if a given command invocation's arguments are formally incorrect.\r\n\r\n---\r\n\r\nThanks for the _technical_ explanation for the current behavior, but what matters in the end is whether the behavior:\r\n\r\n(a) makes _sense_ to users: it shouldn't surprise them to begin with and should be simple enough to _remember_, so that it doesn't trip them up _repeatedly_.\r\n\r\nTo put it in @chriskuech's words again:\r\n\r\n> I assumed $ErrorActionPreference and -ErrorAction would have the same behavior, and in my opinion, the fact that they don't is even more confusing than the behavior I assumed.\r\n\r\n(b) doesn't create unnecessary work for the _typical_ use case.\r\n\r\nIt makes much more sense for a severe error condition to also be _script_-terminating _by default_.\r\n",
    "created_at": "2019-03-15T12:39:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473270099",
    "id": 473270099,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzI3MDA5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473270099/reactions"
    },
    "updated_at": "2019-04-26T02:49:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473270099",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> In other words, it is that the statement **never gets executed** because it's unclear how to do so, and it is not the case that the statement gets terminated.\r\n\r\nBy saying that, I meant \"the error is non-terminating for the calling scope\". Since the statement never gets executed, there isn't a child scope to talk about, whence my phrasing.\r\n\r\nCould @mklement0 provide a reference to the term \"statement-terminating error\"? Inventing new jargons doesn't always help understanding the issue. Also, I am not sure how each participant in the thread understands the issue, so I provided my understanding. Put in a list,\r\n\r\n- The following phrases have the same meaning: \r\n    - To write an `ErrorRecord`.\r\n    - To produce a non-terminating error.\r\n- When an `ErrorRecord` is about to be written, how it behaves is specified by `ErrorActionPreference` in the current scope.\r\n- `ErrorAction` changes the `ErrorActionPreference` of the cmdlet's scope, which is a subscope of the caller's.\r\n- The following phrases have the same meaning (in current implementation):\r\n    - To stop the current cmdlet and write an `ErrorRecord` in the scope in which the cmdlet terminated was called.\r\n    - To throw a terminating error.\r\n- Based on the above paraphrasing: throwing a terminating error stops the cmdlet and produces a non-terminating error for the caller. It doesn't make sense to talk about terminating-ness of an `ErrorRecord` without specifying the scope.\r\n\r\nThe counter-intuitive behavior is due to the (arte-)fact that the writing happens in the calling scope, in which `ErrorAction` is out of effect.\r\n\r\nIn other words, I was conveying the idea that **the current description of this issue** is incorrect. It is not that terminating/non-terminating errors are treated differently. It is that the terminating error's `ErrorRecord` is written (as a non-terminating error) in the caller's scope.\r\n\r\n---\r\n\r\nI'd like to state my position on this issue clearly (so that no one has to guess my position from the verbose replies): **I find the current behavior counter-intuitive and it should be changed**. The proposed change is: **Throwing a terminating is performed as if an `ErrorRecord` is written by the callee, after which the callee terminates.**\r\n\r\n<!--\r\nIf you consider the following behavior is more intuitive and should be used: **Throwing a terminating is performed as if an `ErrorRecord` is written by the callee, after which the callee terminates.** Consider the following script:\r\n\r\n```powershell\r\nfunction x{\r\n[cmdletbinding()]param()\r\nprocess{\r\n$pscmdlet.ThrowTerminatingError(\r\n[System.Management.Automation.ErrorRecord]::new(\r\n[System.Exception]::new('123'),'1','NotSpecified','2')) }\r\n}\r\n\r\nfunction y{\r\n[cmdletbinding()]param()\r\nprocess{\r\n$pscmdlet.WriteError(\r\n[System.Management.Automation.ErrorRecord]::new(\r\n[System.Exception]::new('123'),'1','NotSpecified','2')) }\r\n}\r\n\r\n&{$ErrorActionPreference='ignore';\r\nx -ea stop;\r\n'Do I appear 1x?'}\r\n\r\n&{$ErrorActionPreference='ignore';\r\ny -ea stop;\r\n'Do I appear 1y?'}\r\n\r\n&{$ErrorActionPreference='stop';\r\nx -ea ignore;\r\n'Do I appear 2x?'}\r\n\r\n&{$ErrorActionPreference='stop';\r\ny -ea ignore;\r\n'Do I appear 2y?'}\r\n```\r\n\r\nWhat would you expect? They exhibit completely reversed behavior.\r\n\r\nI think either way could go:\r\n\r\n- Educate users so that they learn a terminating error is like stopping execution and writing an error in the caller's scope.\r\n- Change the terminating error's behavior to writing an error in the callee's scope and stopping execution.\r\n\r\n-->\r\n\r\n---\r\n\r\n**The following is a technical analysis of how one could implement the change if it is to be done so.**\r\n\r\nThe proposed change is to change the behavior from\r\n\r\n> $PSCmdlet.ThrowTerminatingError = Stop cmdlet + Write `ErrorRecord` in **caller's** scope.\r\n\r\nto\r\n\r\n> $PSCmdlet.ThrowTerminatingError = Write `ErrorRecord` in the **callee's** context + Stop cmdlet.\r\n\r\nI browsed the current implementation and did some code-path chasing. Here's what I found:\r\n\r\n- Calling `ThrowTerminatingError` will eventually throw an exception (`throw` as a C# statement). (See `MshCommandRuntime.cs`.)\r\n- The `WasThrownFromThrowStatement` corresponds to whether a `RuntimeException` was thrown by a PowerShell `Throw` statement. (`Compiler.cs` [L4954](https://github.com/PowerShell/PowerShell/blob/77654d1669ae2d314a7be7b35e1a5ee780e9284b/src/System.Management.Automation/engine/parser/Compiler.cs#L4954); `MiscOps.cs` [L1906](https://github.com/PowerShell/PowerShell/blob/77654d1669ae2d314a7be7b35e1a5ee780e9284b/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L1906))\r\n- The compiler uses a state machine to implement error handling. (See `MiscOps.cs` [L1633](https://github.com/PowerShell/PowerShell/blob/77654d1669ae2d314a7be7b35e1a5ee780e9284b/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L1633); `Compiler.cs` [L2789](https://github.com/PowerShell/PowerShell/blob/77654d1669ae2d314a7be7b35e1a5ee780e9284b/src/System.Management.Automation/engine/parser/Compiler.cs#L2789))\r\n- From the places mentioned in point 3, we can see that if the callee throws an exception due to `ThrowTerminatingError`, the control is transferred to the caller's compiled handler, which in turn handles the exception in the caller's context.\r\n\r\nAt this point, OP's wishes could be implemented by the following technical change:\r\n\r\n- Make `ThrowTerminatingError` do the following:\r\n  1. Call `WriteError`.\r\n  2. `throw new TerminatingErrorThrownException(calleeException, calleeErrorAction)`.\r\n- Make the compiler compile statements with a trap like this:\r\n\r\n```csharp\r\nint dispatchIndex = 0;\r\ndispatchNextStmt:\r\ntry\r\n{\r\n    switch (dispatchIndex)\r\n    {\r\n        case 0: goto L0;\r\n        case 1: goto L1;\r\n        case 2: goto L2;\r\n    }\r\n    L0: dispatchIndex = 1; stmt1;\r\n    L1: dispatchIndex = 2; stmt2;\r\n}\r\ncatch (FlowControlException) { throw; }\r\ncatch (TerminatingErrorThrownException) { goto dispatchNextStmt; }\r\ncatch (Exception e)\r\n{\r\n    if (!(e is TerminatingErrorThrownException))\r\n    {\r\n        ExceptionHandlingOps.CheckActionPreference(functionContext, e);\r\n    }\r\n    goto dispatchNextStmt;\r\n}\r\nL2:\r\n```",
    "created_at": "2019-03-15T15:39:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473334958",
    "id": 473334958,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzMzNDk1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473334958/reactions"
    },
    "updated_at": "2019-03-15T15:39:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473334958",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4462444?v=4",
      "events_url": "https://api.github.com/users/GeeLaw/events{/privacy}",
      "followers_url": "https://api.github.com/users/GeeLaw/followers",
      "following_url": "https://api.github.com/users/GeeLaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeeLaw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/GeeLaw",
      "id": 4462444,
      "login": "GeeLaw",
      "node_id": "MDQ6VXNlcjQ0NjI0NDQ=",
      "organizations_url": "https://api.github.com/users/GeeLaw/orgs",
      "received_events_url": "https://api.github.com/users/GeeLaw/received_events",
      "repos_url": "https://api.github.com/users/GeeLaw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/GeeLaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeeLaw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/GeeLaw"
    }
  },
  {
    "author_association": "NONE",
    "body": "Follow-up: after more reading of the docs, it is unclear to me what consists of a \"pipeline\" (which a terminating error terminates). Does every statement count as a pipeline? Does the whole invocation (line of interactive command) count as a pipeline? The correct behavior can only be determined if we know what a pipeline is.\r\n\r\n---\r\n\r\n**Case 1: each statement counts as a pipeline**\r\n\r\nThen the following script should produce `2`:\r\n\r\n```powershell\r\nfunction x { [cmdletbinding()]param()\r\nwrite-error 1 -ea stop;\r\n}\r\n\r\n& { $ErrorActionPreference = 'Continue'; x; 2; }\r\n```\r\n\r\nHowever, it doesn't. The written record is terminating the whole invocation.\r\n\r\n---\r\n\r\n**Case 2: the whole invocation counts as a pipeline**\r\n\r\nThis is highly undesirable, as it renders terminating error nearly unrecoverable.\r\n\r\nIn this case, `ThrowTerminatingError` creating what @mklement0 call \"statement-terminating error\" is a bug in the trapped code compiler -- it should have killed the whole invocation. `ThrowTerminatingError` should behave the same way `Throw` in PowerShell does. As for `Get-Item -NoSuch`, I still insist this is a non-terminating error. I suspect `Invoke-WebRequest` is giving terminating error due to buggy implementation.",
    "created_at": "2019-03-15T16:20:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473350763",
    "id": 473350763,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzM1MDc2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473350763/reactions"
    },
    "updated_at": "2019-03-15T16:20:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473350763",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4462444?v=4",
      "events_url": "https://api.github.com/users/GeeLaw/events{/privacy}",
      "followers_url": "https://api.github.com/users/GeeLaw/followers",
      "following_url": "https://api.github.com/users/GeeLaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeeLaw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/GeeLaw",
      "id": 4462444,
      "login": "GeeLaw",
      "node_id": "MDQ6VXNlcjQ0NjI0NDQ=",
      "organizations_url": "https://api.github.com/users/GeeLaw/orgs",
      "received_events_url": "https://api.github.com/users/GeeLaw/received_events",
      "repos_url": "https://api.github.com/users/GeeLaw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/GeeLaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeeLaw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/GeeLaw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Just a quick meta note, @GeeLaw:\r\n\r\n> Could @mklement0 provide a reference to the term \"statement-terminating error\"? \r\n\r\nPlease don't refer to me in the third person when I'm clearly a direct participant in a discussion - it's off-putting.\r\n\r\n> Inventing new jargons doesn't always help understanding the issue. \r\n\r\nPlease refrain from making such incendiary statements - they add nothing to the discussion and serve only to antagonize.",
    "created_at": "2019-03-15T20:58:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473438870",
    "id": 473438870,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQzODg3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473438870/reactions"
    },
    "updated_at": "2019-03-15T20:58:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473438870",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "In reply to @mklement0: My apologies if you find the comments offending. I used at because I felt tired of using \"In reply to\" and the jargon thing is expressing the preference to reason about the issue in PowerShell's documented terminology & ideas/views.",
    "created_at": "2019-03-15T21:02:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473439948",
    "id": 473439948,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQzOTk0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473439948/reactions"
    },
    "updated_at": "2019-03-15T21:02:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473439948",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4462444?v=4",
      "events_url": "https://api.github.com/users/GeeLaw/events{/privacy}",
      "followers_url": "https://api.github.com/users/GeeLaw/followers",
      "following_url": "https://api.github.com/users/GeeLaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeeLaw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/GeeLaw",
      "id": 4462444,
      "login": "GeeLaw",
      "node_id": "MDQ6VXNlcjQ0NjI0NDQ=",
      "organizations_url": "https://api.github.com/users/GeeLaw/orgs",
      "received_events_url": "https://api.github.com/users/GeeLaw/received_events",
      "repos_url": "https://api.github.com/users/GeeLaw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/GeeLaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeeLaw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/GeeLaw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @GeeLaw.\r\n\r\n>  I felt tired of using \"In reply to\"\r\n\r\nNo need for that; simply `@`-mentioning is sufficient (and widely used, not just on GitHub); e.g.:\r\n\r\n> @mklement0 Can you provide a reference ...\r\n\r\nOr, if you believe that [punctuation saves lives](https://theseagullschool.wordpress.com/2015/02/11/883/):\r\n\r\n> @mklement0, can you provide a reference ...\r\n> @mklement0: Can you provide a reference ...\r\n\r\n---\r\n\r\n> preference to reason about the issue in PowerShell's documented terminology & ideas/views\r\n\r\nI fully agree with that preference; I took issue with _how_ you expressed that preference. (That what prompted this expression of preference was based on a misconception is secondary - see later comments.)\r\n\r\n\r\n",
    "created_at": "2019-03-16T17:17:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473566824",
    "id": 473566824,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU2NjgyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473566824/reactions"
    },
    "updated_at": "2019-03-16T17:17:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473566824",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@GeeLaw: Re terminology:\r\n\r\nGenerally:\r\n\r\n*  (In full agreement with your sentiment:) If established terminology _exists_, it's always best to use it to avoid ambiguity.\r\n\r\n* If it doesn't, it's best to not only discuss the issue at hand, but to separately try to _establish_ new technology, which - hopefully - will find its way into the official documentation.\r\n\r\n(There are several cases where I feel that the lack of explaining things _conceptually_ and/or giving concepts an _official name_ in the official documentation has hindered understanding / adoption of certain features; to name a few: member enumeration, namespace variable notation, delay-bind script blocks (the latter were given that name only very recently).)\r\n\r\nSpecifically:\r\n\r\n* The official terms regarding error types are _non-terminating error_ and _terminating error_.\r\n\r\n* This abstract dichotomy is _insufficient_, because there are clearly _two subtypes_ of terminating errors, as exemplified by `Throw 'outta here'` and `Get-Item -NoSuchParam`.\r\n\r\n  * These subtypes differ by the _unit of execution they terminate_ by default - and that difference is crucial in terms of whether your scripts _continue to run_.\r\n\r\n  * This leads to the related issue that aren't official terms for the units of execution either (at least not in the end-user documentation) - as you've noticed yourself when  you asked for the definition of a _pipeline_.\r\n\r\n    * I've made an attempt to establish such terminology - in the hopes of their making it into the docs - here: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/1583#issuecomment-368673114\r\n\r\n* A while back I wrote a [comprehensive overview of PowerShell's _de facto_ error-handling behavior](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/1583), in which I also also asked for these new subtypes to be documented; the names I proposed were:\r\n\r\n  * _statement_-terminating errors: they terminate the _statement_ (as defined in the linked unit-of-execution terminology proposal) they're a part of.\r\n  * _script_-terminating errors: they terminate the _script as a whole_ (as @BrucePay has clarified, it is technically the _thread of execution_ that is terminated, but we've agreed on the term _script_ as being more end-user-friendly).\r\n\r\n  * (I've also tried to give the terminology wider exposure in this [Stack Overflow answer](https://stackoverflow.com/a/50333721/45375)).\r\n\r\n* So, as you can see, these terms are the _closest thing we currently have_ to official terminology with respect to error handling.\r\n\r\n  * While it's not reasonable to expect you to have known this backstory, _these terms were explicitly recapitulated as part of this very discussion_  - before you complained about the term having been invented - see comment https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-421212892 above.",
    "created_at": "2019-03-16T17:46:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473569288",
    "id": 473569288,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU2OTI4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473569288/reactions"
    },
    "updated_at": "2019-03-16T17:46:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473569288",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S., @GeeLaw: By saying (emphasis added):\r\n\r\n> `Get-Item -NoSuch` produces a _non-terminating error_.\r\n\r\nyou _did_ use official terminology - but you used it to mean _something else_ - which prompted my clarification.",
    "created_at": "2019-03-16T18:04:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473570757",
    "id": 473570757,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU3MDc1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473570757/reactions"
    },
    "updated_at": "2019-03-16T18:05:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473570757",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To get back on track, @GeeLaw.\r\n\r\n* I'm glad that @chriskuech, you, and I agree that the behavior should be changed.\r\n\r\n* Your technical analysis helped illuminate the _underlying_ causes and it sounds like you're implementation suggestions will come in handy (I personally can't judge that).\r\n  * Your analysis also explains why setting the _preference variable_ as opposed to using the _common parameter_ _does_ result in a _script_-terminating error - which is currently documented incorrectly (from [about_Preference_Variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6), emphasis added):\r\n\r\n> _Neither `$ErrorActionPreference`_ nor the `ErrorAction` common parameter affect how PowerShell responds to terminating errors (those that stop cmdlet processing).\r\n\r\n",
    "created_at": "2019-03-16T18:29:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-473572777",
    "id": 473572777,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU3Mjc3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473572777/reactions"
    },
    "updated_at": "2019-03-16T18:29:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473572777",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "See @KirkMunro mosaic on control flow variables: https://github.com/PowerShell/PowerShell-RFC/issues/198",
    "created_at": "2019-07-05T21:53:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7774#issuecomment-508869132",
    "id": 508869132,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7774",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg2OTEzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/508869132/reactions"
    },
    "updated_at": "2019-07-05T21:53:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/508869132",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  }
]
