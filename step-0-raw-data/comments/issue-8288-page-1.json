[
  {
    "author_association": "COLLABORATOR",
    "body": "Look interesting but we need discuss samples where it would be useful. Specially a bind error is terminating but current behavior can be to write non-terminating error.",
    "created_at": "2018-11-16T05:49:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439289496",
    "id": 439289496,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI4OTQ5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439289496/reactions"
    },
    "updated_at": "2018-11-16T05:49:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439289496",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea. It would be nice if the attribute could also do type inference, i.e. being able to specify a type (either interface or implementation) and if the type is implementing that interface or deriving from that implementation then it accepts it as well.",
    "created_at": "2018-11-16T08:46:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439322754",
    "id": 439322754,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTMyMjc1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439322754/reactions"
    },
    "updated_at": "2018-11-16T08:46:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439322754",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "There are several instances I can think of where PowerShell users would find this useful. As well as a tool for internal development.\r\n\r\nThis would be great passing a [PSObject] to a specific overload in C# a great toolkit for future work in module builders.\r\n\r\n[ValidateType([int], [int32], [string], [float])]\r\nPSObject foo;\r\n\r\nwhere you could take \r\nvar x = foo.BaseObject;\r\ncalloverload(x);\r\n\r\nThis would be really good for that.\r\n\r\nAlso could also allow for type casting capabilities for desired type's without a need for a switch case or try catch all your error handling would be done at a validation level.\r\n\r\nI think this would be invaluable. ",
    "created_at": "2018-11-16T18:14:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439479813",
    "id": 439479813,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ3OTgxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439479813/reactions"
    },
    "updated_at": "2018-11-16T18:14:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439479813",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I don't think this will allow us to bypass compile-time constraints in that way; as I understand it, method overloads are determined at *compile* time, so it won't be possible to dynamically select which overload you're using... however, it might pave the way for a generic set of overloads to be created for a purpose like this. I'm not clear how this would function, in all honesty, I'm hazy about the possible use cases on that end... but if it's a possibility it'd definitely prove interesting to look at!",
    "created_at": "2018-11-16T18:21:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439481738",
    "id": 439481738,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ4MTczOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439481738/reactions"
    },
    "updated_at": "2018-11-16T18:21:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439481738",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "By the way, we already have attributes to describe the source and return types. Although they are not used.",
    "created_at": "2018-11-16T18:34:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439485303",
    "id": 439485303,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ4NTMwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439485303/reactions"
    },
    "updated_at": "2018-11-16T18:34:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439485303",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I worry this may promote bad design.\r\n\r\nFor commands that are out there that take an object or a `PSObject`, should those parameters be that generic?\r\n\r\nIn core PowerShell commands, many of those should be generic because they work against objects. A few other ones (e.g. `Get-Acl` and `Set-Acl` from WindowsPowerShell) accept a `PSObject` and then have some other criteria that they require (in the case of `Get-Acl` or `Set-Acl`, the presence of a `GetSecurityDescriptor` or `SetSecurityDescriptor` method is required).\r\n\r\nWhat might help here are specific examples demonstrating why PowerShell would benefit from a specific attribute for this, and why `ValidateScript` is not sufficient for those scenarios, or why a different design of the command syntax wouldn't be a better option.",
    "created_at": "2018-11-17T19:59:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439643515",
    "id": 439643515,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY0MzUxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439643515/reactions"
    },
    "updated_at": "2018-11-17T19:59:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439643515",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Look at something like `Select-Object`'s `-Property` parameter:\r\n\r\n```\r\n-Property <Object[]>\r\n    Specifies the properties to select.  These properties are added as `NoteProperty` members to the output objects.\r\n    Wildcards are permitted.\r\n\r\n    The value of the Property parameter can be a new calculated property. To create a calculated, property, use a hash\r\n    table. Valid keys are:\r\n\r\n    - Name (or Label) <string>\r\n\r\n    - Expression <string> or <script block>\r\n\r\n    Required?                    false\r\n    Position?                    0\r\n    Default value                None\r\n    Accept pipeline input?       False\r\n    Accept wildcard characters?  true\r\n```\r\nNote the ambiguous nature of the parameter type, there is a brief mention that you can use property names, which to those of us already knowing how it works, we know that's a string, and then a mention of the hashtable syntax that can be used.\r\n\r\nThe parameters here are, as far as I know, evaluated at runtime to validate them. We could shortcut this quite a bit if we simply had a `[ValidateType([string], [hashtable])]`, and the help could look significantly cleaner, specifying clearly that only one of those two types are acceptable. The additional help text then need only specify the acceptable keys for hashtable input.\r\n\r\nThis cmdlet is not alone, but it _is_ the most commonly-used one that would benefit from this. If you pass in a completely bogus parameter value here, it should error at parameter binding time, I think.\r\n\r\nValidateScript isn't particularly suitable here since script blocks are not natively acceptable in C#. Certainly, you could use them for this, but it's significantly messier, and it would not translate to the help metadata whatsoever.",
    "created_at": "2018-11-17T20:08:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439644179",
    "id": 439644179,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY0NDE3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439644179/reactions"
    },
    "updated_at": "2018-11-17T20:11:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439644179",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, that's a great example, just what I was looking for, and I get what you're after now.\r\n\r\nFood for thought: I think this feature would be better implemented using an \"Allow\" attribute instead of a \"Validate\" attribute. e.g. Instead of `[ValidateType([string], [hashtable])]`, I think it would be more self documenting if the syntax was written like this: `[AllowType([string],[hashtable])]`, and if the parser only allowed the attribute to be used for parameters of type `[object]` or `[psobject]`.",
    "created_at": "2018-11-19T02:05:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439750252",
    "id": 439750252,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTc1MDI1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439750252/reactions"
    },
    "updated_at": "2018-11-19T02:05:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439750252",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "`Allow` attributes are not restrictive but permissive, so I don't think it's semantically appropriate to break that convention, given part of this suggestion is to help with validating the input types and remove the need to do so at runtime.\n\nI agree with the limitation on parameter types in can be applied to, but would add:\n\n* Script function parameters with no explicitly declared type\n* Parameters type as a specific interface type (e.g., `IEnumerable`)\n\nSo that the limitation is essentially: parameters that are not explicitly typed, `(PS)Object`-typed, or any `Interface`-typed parameters.",
    "created_at": "2018-11-19T02:12:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/8288#issuecomment-439751366",
    "id": 439751366,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/8288",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTc1MTM2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439751366/reactions"
    },
    "updated_at": "2018-11-19T02:16:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439751366",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
