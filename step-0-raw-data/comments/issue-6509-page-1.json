[
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 Just out of curiosity, how do you see multiple levels of method calls working? Methods can take arguments which works for one level as in your example:\r\n```\r\n1 | ForEach-Object Equals 1 \r\n```\r\nby taking a single argument list. How would things work when you have more than one method taking arguments (multiple argument lists)?\r\n\r\n> analogous nested access does work in general in \"naked\" expression-based arguments:\r\n\r\nPlease be careful about mixing up language elements and command parameter behaviours. In the following:\r\n```\r\nPS[1] (220) > $m = \"y\"\r\nPS[1] (221) > @{m=1; y=2} | foreach m\r\n1\r\nPS[1] (222) > @{m=1; y=2} | foreach $m\r\n2\r\n```\r\nare the arguments `m` and `$m` mean very different things. (I worry about confusing the user when we have multiple features that appear similar but are very different e.g. the foreach statement and the foreach cmdlet.)\r\n\r\n",
    "created_at": "2018-03-27T18:02:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-376619551",
    "id": 376619551,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYxOTU1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376619551/reactions"
    },
    "updated_at": "2018-03-27T18:02:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376619551",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\n> Please be careful about mixing up language elements and command parameter behaviours. In the following:\r\n\r\nCompletely agreed: It's why I said _analogous_, not _equivalent_, and referred to _expression-based_ arguments.\r\n\r\nThe features _are_ different, but they also have something in common, and exhibiting _analogous_ behavior is useful in the case at hand (and, conversely, not exhibiting analogous behavior is surprising).\r\n\r\nWhat they have in common is that what is normally used in _expression_ mode is being used in _argument_ mode - whether the object being operated on is _implied_ (in the operation statement's `-MemberName` argument) or is _explicitly specified_ (general, expression-based argument).\r\n\r\nIt's reasonable - and lends itself to knowledge transfer - to expect both scenarios to support the same kind of member access, their differences notwithstanding.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-03-27T18:25:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-376626822",
    "id": 376626822,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjYyNjgyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376626822/reactions"
    },
    "updated_at": "2018-03-27T18:25:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376626822",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\nThe above analogy may also provide a solution to your other question:\r\n\r\n> How would things work when you have more than one method taking arguments (multiple argument lists)?\r\n\r\nUsing an expression-based argument requires you to use _method syntax_ to call methods:\r\n\r\n```powershell\r\nWrite-Output $host.ToString().ToUpper('fr-FR')\r\n```\r\n\r\nAnalogously, we could require the same in comparison / operation statements for _nested_ method calls:\r\n\r\n```powershell\r\n$Host | ForEach-Object ToString().ToUpper('fr-FR')\r\n```\r\n\r\nFor _non-nested_ method calls, the existing syntax could remain in place: No trailing `()`, with the arguments, if any, passed in _argument_ mode (though, frankly, I was surprised that `ForEach-Object Equals 1` works): \r\n\r\n```powershell\r\n# Single-argument method:\r\n# Same as: 1 | ForEach-Object { $_.Equals(1) }\r\n1 | ForEach-Object Equals 1  # -> $True\r\n\r\n# Multi-argument / array-valued single-arguments methods\r\n# Same as: 'bar' | ForEach-Object { $_.Trim('r', 'a')\r\n'bar' | % Trim 'r', 'a'  # -> 'b'\r\n```\r\n\r\nIn fact, using method syntax _accidentally_ already works when at least 1 argument is passed; without arguments, however, it breaks:\r\n\r\n```powershell\r\n# Works: Same as: 'bar' | % Trim 'r', 'a'\r\n'bar' | ForEach-Object Trim('r', 'a')\r\n\r\n# !! BREAKS: trailing `()` not recognized.\r\n'bar' | ForEach-Object Trim()\r\n```\r\n\r\nNote that you can currently already _get away_ with method syntax if there's _at least one argument_, because the parser ultimately sees `Trim 'r', 'a'` and `Trim('r', 'a')` as the same.\r\n(For the same reason, people get away with fake method syntax in widely used calls such as `New-Object foo('a', 2)`).\r\n\r\nI suppose another way of resolving this would be to disallow nested method calls altogether, but, given that they already work in the general, expression-based-argument scenario, my vote is to allow them.\r\n\r\nMy sense is that not too many people will run into them, however, given that _property_ access rather than method calling strikes me as the far more common use case.\r\n\r\n",
    "created_at": "2018-03-27T19:11:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-376641155",
    "id": 376641155,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjY0MTE1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376641155/reactions"
    },
    "updated_at": "2018-03-27T19:13:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376641155",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 Hmmm - parens are syntactically significant in argument mode so\r\n```\r\n$Host | ForEach-Object ToString().ToUpper('fr-FR')\r\n```\r\nis a syntax error. An open paren  introduces a new argument expression:\r\n```\r\nPS[1] (25) > write-output ToUpper('fr-FR') # equals two arguments to write-output\r\nToUpper\r\nfr-FR\r\nPS[1] (26) > write-output ToUpper(2+2) # expression (2+2) is evaluated\r\nToUpper\r\n4\r\n```",
    "created_at": "2018-03-27T22:58:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-376702742",
    "id": 376702742,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjcwMjc0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376702742/reactions"
    },
    "updated_at": "2018-03-27T22:58:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376702742",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\nGood point: Essentially, we'd have to special-case the parsing of arguments passed to `ForEach-Object`'s `-MemberName` parameter (and possibly `Where-Object`'s `-Property` parameter) and parse such arguments as _expressions_ with an implied `$_.` prefix, loosely speaking.\r\n\r\nI can see how that is potentially awkward / impractical to implement - do tell us.  \r\n(I don't think _users_ would necessarily notice the anomaly, however).\r\n\r\nThus, perhaps the better approach is to simply _disallow_ nested method calls.\r\n\r\nGiven that (a) (as stated), _property_ access is the far more prevalent use case and (b) users already know that operation/comparison statements have limitations, I think that's an acceptable approach (if documented appropriately).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-03-28T01:58:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-376734447",
    "id": 376734447,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjczNDQ0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376734447/reactions"
    },
    "updated_at": "2018-03-28T01:59:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/376734447",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> we'd have to special-case the parsing of arguments\r\n\r\nAs a core PowerShell design principle, there are no magic commands and no special parsing. \r\n\r\n> Thus, perhaps the better approach is to simply disallow nested method calls.\r\n\r\nAgreed in general but complicated by the fact that you can't tell what something is until you evaluate the expression. For example, in `a.b`, are 'a' and 'b' methods or properties? If 'a' is a method, does `a` work but `a.b` fail? Even if 'b' is a property?\r\n",
    "created_at": "2018-03-29T18:51:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-377336059",
    "id": 377336059,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzMzNjA1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377336059/reactions"
    },
    "updated_at": "2018-03-29T18:51:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377336059",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> If 'a' is a method, does a work but a.b fail? Even if 'b' is a property?\r\n\r\nYes, I would only allow method calls in the _leaf_ component:\r\nIn the given example, `b` would be allowed to be a method, but `a` wouldn't.",
    "created_at": "2018-03-29T20:23:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-377360806",
    "id": 377360806,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzM2MDgwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377360806/reactions"
    },
    "updated_at": "2018-03-29T20:23:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377360806",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "`.` is not prohibited symbol for property name thus `$obj | ForEach-Object one.two` is equivalent to `$obj.'one.two'`, but not `$obj.'one'.'two'`.\r\n\r\n```powershell\r\n$obj = [pscustomobject]@{ 'one.two' = 3 }\r\n$obj | ForEach-Object one.two\r\n```\r\n",
    "created_at": "2018-03-30T21:11:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-377624238",
    "id": 377624238,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYyNDIzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377624238/reactions"
    },
    "updated_at": "2018-03-30T21:11:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377624238",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PetSerAl:\r\n\r\nOuch! Good point, thanks.\r\n\r\nSo this would be a breaking change.\r\n\r\nBefore we even discuss the bucket (somewhere between 2 and 3), @BrucePay: would distinguishing between `ForEach-Object 'one.two'`  (single property) and `ForEach-Object one.two` (dot notation) even be possible without special-casing? (There is _some_ precedent for this distinction:  \r\n`write-output -foo:bar` vs. `write-output '-foo:bar'`)",
    "created_at": "2018-03-31T03:11:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-377661571",
    "id": 377661571,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY2MTU3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377661571/reactions"
    },
    "updated_at": "2018-03-31T03:11:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/377661571",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That 'special casing' you talk about there isn't really any kind of special case. Parameter names aren't permitted to be enclosed in quotes, generally.\n\nOn the other hand, parameter values being enclosed in quotes is always optional except in cases ambiguous to the PS parser. For example, if you want to pass the value `-Foo` to a parameter, you *will* need to enclose it in quotes to prevent the parser seeing it as a parameter and not a value.",
    "created_at": "2018-10-02T10:48:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-426229983",
    "id": 426229983,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjIyOTk4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426229983/reactions"
    },
    "updated_at": "2018-10-02T10:48:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426229983",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32: Yes, your 2nd example is the more relevant one: it is an instance where the token is interpreted differently depending on whether it is single-quoted or not.\r\n\r\nHowever, as I now realize, both cases apply to the parameter binder only, so a difference in quoting is not seen by the target command.\r\n(And, as an aside, even passing `-Foo` as a parameter _value_ shouldn't require quoting, if it's _syntactically implied_ that the token is a value, not a parameter name - see #4624).\r\n\r\nThus, quoting alone is not a solution; instead, some indicator in the _contents_ of the token is needed to distinguish the two cases.\r\n\r\nIf we were to use `` ` `` for escaping the `.` - to be interpreted by the target program, then an argument such as ``foo`.bar`` would _additionally_ have to be _quoted_, given that the parameter binder would otherwise \"eat\" the unquoted `` ` ``\r\n(as stated, this is how it is already done for escaping metacharacters in wildcard expressions).\r\n\r\nWhile it would technically work - if we make the _nested_ case _opt-in_ for the sake of backward compatibility - it is clumsy:\r\n\r\n```powershell\r\n# Wishful thinking\r\n\r\nPS> [pscustomobject] @{ one = [pscustomobject] @{ two = 2 } }  | Select-Object 'one`.two'\r\n2\r\n\r\nPS> $propPath = 'one.two'; [pscustomobject] @{ one = [pscustomobject] @{ two = 2 } }  |\r\n   Select-Object ($propPath -replace '\\.', '`.')\r\n2\r\n```\r\n\r\n\r\n",
    "created_at": "2018-10-02T15:22:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-426315653",
    "id": 426315653,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjMxNTY1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426315653/reactions"
    },
    "updated_at": "2018-10-02T15:22:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426315653",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Closed in favor of https://github.com/PowerShell/PowerShell/issues/14633#issuecomment-763228730",
    "created_at": "2021-01-20T00:05:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6509#issuecomment-763228942",
    "id": 763228942,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6509",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzIyODk0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/763228942/reactions"
    },
    "updated_at": "2021-01-20T00:05:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/763228942",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
