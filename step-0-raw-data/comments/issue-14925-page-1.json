[
  {
    "author_association": "NONE",
    "body": "you needs parhentesis:\r\n\r\n```\r\nPS> @\"\r\n>> I\r\n>> like\r\n>> Powershell\r\n>> \"@ > .\\file.txt\r\nPS> ( Get-Content .\\file.txt | Where Length -eq 10) | Set-Content .\\file.txt\r\nPS> Get-Content .\\file.txt\r\nPowershell\r\n\r\n```\r\n\r\nor use where OP:\r\n\r\n`(Get-Content .\\file.txt).Where({$_.Length -eq 10}) | Set-Content .\\file.txt`",
    "created_at": "2021-03-01T00:18:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14925#issuecomment-787554763",
    "id": 787554763,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14925",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzU1NDc2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787554763/reactions"
    },
    "updated_at": "2021-03-01T00:20:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787554763",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "NONE",
    "body": "@p0W3RH311 wow thanks a lot.\r\nCan you maybe also explain why the parhentesis are necessary here?\r\nI have a hard time explaining the behavior without them.\r\n\r\nPS: do you think I should close this ticket because it is an expected behavior of Powershell?",
    "created_at": "2021-03-01T01:55:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14925#issuecomment-787581897",
    "id": 787581897,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14925",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzU4MTg5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787581897/reactions"
    },
    "updated_at": "2021-03-01T01:55:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787581897",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10489458?v=4",
      "events_url": "https://api.github.com/users/Herr-Sepp/events{/privacy}",
      "followers_url": "https://api.github.com/users/Herr-Sepp/followers",
      "following_url": "https://api.github.com/users/Herr-Sepp/following{/other_user}",
      "gists_url": "https://api.github.com/users/Herr-Sepp/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Herr-Sepp",
      "id": 10489458,
      "login": "Herr-Sepp",
      "node_id": "MDQ6VXNlcjEwNDg5NDU4",
      "organizations_url": "https://api.github.com/users/Herr-Sepp/orgs",
      "received_events_url": "https://api.github.com/users/Herr-Sepp/received_events",
      "repos_url": "https://api.github.com/users/Herr-Sepp/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Herr-Sepp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Herr-Sepp/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Herr-Sepp"
    }
  },
  {
    "author_association": "NONE",
    "body": "@Herr-Sepp \r\n\r\nin pipeline view:\r\n```\r\n\r\n0) get-content ... | where ... | set-content ...\r\n1) PROCESS {LINE1 and wait} | PROCESS {LINE 1 and wait} | PROCESS {TRY TO WRITE to a read open file if the pipeline emit anything}\r\n```\r\n# in windows unlike unix its not permited to write in open file OR rename open file\r\n\r\n```\r\n\r\n0) (get-content ... | where ...) | set-content ...\r\n1) (PROCESS { SEND LINE 1 & wait } | PROCESS { FILTER LINE 1 & wait }) \r\n2) (PROCESS { SEND LINE 2 & wait } | PROCESS { FILTER LINE 2 & wait }) \r\n...\r\n...\r\n3) (END {} | END {})  | PROCESS { THE FILTERED RESULT} END {} \r\n\r\n```",
    "created_at": "2021-03-01T02:30:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14925#issuecomment-787592348",
    "id": 787592348,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14925",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzU5MjM0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787592348/reactions"
    },
    "updated_at": "2021-03-01T02:32:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787592348",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@Herr-Sepp, if I may weigh in and add to @p0W3RH311's comments:\r\n\r\nYes, I think this issue can be closed, because the behavior is by design.\r\n\r\nThe parentheses are necessary, because they force the file to be _read in full_ and _closed_ again _before_ the later pipeline segments attempt to open the output file for writing, which _truncates_ the file (discards its existing content).\r\n\r\n---\r\n\r\n**tl;dr**:\r\n\r\n**If you want to write back to an input file _in the same pipeline_:**\r\n\r\n* ALWAYS use `(...)` to enclose the _reading_ command, knowing that:\r\n  * The file's (possibly transformed) content must then fit into memory _as a whole_, because the file's _entire content_ is read and the file is closed _before_ the output from the `(...)` expression is processed further.\r\n  * There's a hypothetical risk of data loss, if the process of writing back to the original file gets interrupted (such as a power loss at the exact moment the file is being written).\r\n    * The safe - but much more cumbersome - alternative is to write to a _temporary_ file first, and, on successfully completing writing to it, replace the original file with the temporary one.\r\n\r\n\r\n* ALWAYS use a _separate pipeline segment_ to perform the _writing_ part.\r\n  * NEVER use `>` _as part of the same command / pipeline segment_ - complete data loss will occur, even with `(...)`\r\n  * NEVER use `>>` _as part of the same command / pipeline segment_ - an infinite loop with an ever-growing file will result. \r\n\r\n\r\n---\r\n\r\n**The pitfall of accidentally erasing the content of an input file you're trying to write back to in the same pipeline is not specific to PowerShell.**\r\n\r\nThe simplest example, which shows the problem in both PowerShell and POSIX-compatible shells is:\r\n\r\n```sh\r\n# Note: On Windows, `cat` is an alias of `Get-Content`, but not on Unix.\r\necho hi > file; cat file > file; cat file  # -> !! no output, because file's content was discarded by `> file`\r\n```\r\n\r\nThis **quietly erases the content of file `file`, leaving it with a size of `0`**, because the `>` redirection operator (effectively an alias of `Out-File` in PowerShell) opens `file` for (non-appending) writing and thereby truncates it _before_ `cat` gets a chance to read it.\r\n\r\nTherefore, **if you use`>` to write to the file in the _same pipeline segment_, data loss occurs even if you _do_ enclose the reading (`Get-Content`) command in `(...)`**:\r\n\r\n```powershell\r\n# !! DATA LOSS: Redirection operator `>` must not be used in same pipeline (segment) as (Get-Content ...)\r\nPS> echo hi > file; (Get-Content file) > file; (Get-Item file).Length\r\n0 # !! file was truncated before Get-Content got a chance to read it.\r\n```\r\n\r\n**The `(...)` technique _only_ works if writing back to the file occurs in a _later pipeline segment_**, when you pipe to cmdlets such as `Out-File`, `Set-Content`, or `Export-Csv`.\r\n\r\n```powershell\r\n# OK: (Get-Content ...) (parentheses required) reads everything up front and closes the file, so that Set-Content in \r\n#     a *later pipeline segment* can write back to it.\r\nPS> echo hi > file; (Get-Content file) | Set-Content file; Get-Content file\r\nhi #  OK\r\n```\r\n---\r\n\r\n**The following discusses platform differences with respect to file locking, the read buffering that occurs behind the scenes, and a `Set-Content` implementation detail**: \r\n\r\n_Without_ `(...)`, the file's content is _typically_ erased even if you use the file-writing command in a _later_ pipeline segment, but `Set-Content` is an _exception_, albeit one that cannot be relied upon:\r\n\r\nBy a _lucky accident_ falling out from a - debatable - `Set-Content` implementation detail, data loss _on Windows only_ is _prevented_ , whereas on _Unix_ possibly initially undetected _partial data loss is likely_ :\r\n\r\n* Unlike other cmdlets, `Set-Content` apparently defers opening the output file for writing until its `ProcessRecord()` method is called (whereas that normally happens in `BeginProcessing()`), i.e. only _when the first input object is received_.\r\n\r\n  * As an aside: This means that `@() | Set-Content file` neither creates a previously nonexistent file `file`  nor does it overwrite a preexisting one.\r\n\r\n* This means that the input-providing `Get-Content` (except if enclosed in `(...)`) already has an open file handle for the file in question at the time `Set-Content` tries to open it for writing, and what happens then depends on the host platform:\r\n\r\n  * On _Windows_, the open-for-writing attempt _fails_, because the file is considered _locked_:\r\n    *  The error you saw is emitted, the file is _not_ modified  and therefore _no data loss occurs_:\r\n\r\n       * `Set-Content: The process cannot access the file '...' because it is being used by another process.`\r\n\r\n  * On _Unix_-like platforms,  the open-for-writing attempt _succeeds_, because the file is _not_ considered _locked_ for writing, but _partial data loss is likely_:\r\n\r\n     *  The attempt to rewrite the file succeeds _only if the file happens to be smaller than the buffer size used to read from the file_, which I presume is an implementation detail of the underlying .NET APIs, and is currently `4 KB` (`4096 bytes`).\r\n\r\n     * The reason is that one buffer's worth of data has already been read into memory by the time `Set-Content` truncates the file, so that one buffer's worth data is passed through, but the rest of the input data is _lost_ at that point, as the following example demonstrates\r\n         * `Set-Content file -Value (, 'x' * 512kb); Get-Content file | Set-Content file; if ($?) { (gi file).length / 1kb }`\r\n         * The above creates a `512mb` file, and then attempts to use `Get-Content | Set-Content` to rewrite it in place. Because the file gets truncated after one buffer's worth has been read, only the first `4096` bytes of the original content end up in the file.\r\n\r\n     * The only _exceptions_ where larger-than-the-buffer-size files _are_ correctly processed without `(...)` are:\r\n\r\n         * If you use `-Raw` or `-ReadCount 0`, because then all input has by definition already been read.\r\n\r\n           *  Note: Unlike on Windows, the fact that the file handle hasn't yet been closed at that point (the implementation could be improved there) is _not_ a problem on Unix; on Windows, even use of `-Raw` / `-ReadCount 0` requires enclosing in `(...)`; in short: in cross-platform code you need to use `(...)` anyway.\r\n\r\n         * If a given file happens to contain only _one_ (very long) line, because PowerShell keeps reading until at least one line has been read in full, even beyond the buffer size, which in this particular case again means that the file is read _in full_ first.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-03-01T18:15:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14925#issuecomment-788160996",
    "id": 788160996,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14925",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODE2MDk5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/788160996/reactions"
    },
    "updated_at": "2021-03-11T14:13:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/788160996",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
