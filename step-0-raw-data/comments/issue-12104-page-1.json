[
  {
    "author_association": "COLLABORATOR",
    "body": "It's not exactly what you're after, but you could potentially utilise a `[ValidateSet()]` to make this easier to work with.",
    "created_at": "2020-03-11T17:13:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597757539",
    "id": 597757539,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzc1NzUzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597757539/reactions"
    },
    "updated_at": "2020-03-11T17:13:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597757539",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "\r\n\r\n\r\n> It's not exactly what you're after, but you could potentially utilise a `[ValidateSet()]` to make this easier to work with.\r\n\r\nHow exactly would you employ a ValidateSet to solve this problem?",
    "created_at": "2020-03-11T18:45:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597804095",
    "id": 597804095,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzgwNDA5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597804095/reactions"
    },
    "updated_at": "2020-03-11T18:45:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597804095",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2770088?v=4",
      "events_url": "https://api.github.com/users/chaydock/events{/privacy}",
      "followers_url": "https://api.github.com/users/chaydock/followers",
      "following_url": "https://api.github.com/users/chaydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaydock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chaydock",
      "id": 2770088,
      "login": "chaydock",
      "node_id": "MDQ6VXNlcjI3NzAwODg=",
      "organizations_url": "https://api.github.com/users/chaydock/orgs",
      "received_events_url": "https://api.github.com/users/chaydock/received_events",
      "repos_url": "https://api.github.com/users/chaydock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chaydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaydock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chaydock"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Hmm. Actually, that's only really a good solution if you have a specific set of acceptable values. If you have others... hmm. Yeah, okay, not sure. Depends on the exact requirements -- you can, for example, check `$PSBoundParameters` to verify if the value was actually passed deliberately or comes from some default parameter value you have set... and you can of course restrict input types.\r\n\r\nI was thinking something along these lines:\r\n\r\n```powershell\r\n[CmdletBinding()]\r\nparam(\r\n    # ...\r\n\r\n    [Parameter()]\r\n    [ValidateSet('Value1','Value2','Value3','Default')]\r\n    $Parameter\r\n    # ...\r\n)\r\n\r\nif ($Parameter -eq 'Default') { $Parameter -eq 'Value2' }\r\n```",
    "created_at": "2020-03-11T19:20:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597821087",
    "id": 597821087,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzgyMTA4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597821087/reactions"
    },
    "updated_at": "2020-03-11T19:20:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597821087",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "What I've tried so far with limited success was this...\r\n\r\n```\r\nFunction test {\r\n\r\n[CmdletBinding()]\r\n    Param (\r\n        [Parameter(Mandatory=$false)]\r\n        [ValidateRange(1,25)]\r\n        [Int]\r\n        $OptionalNumber = 1\r\n    )\r\n\r\n    if($PSBoundParameters.keys -contains \"OptionalNumber\"){\r\n        Write-Output \"The optional number parameter is present\"\r\n        Write-Output \"The Optional Number is: $OptionalNumber\"\r\n    }else{Write-Output \"The optional number parameter was not specified\"}\r\n}\r\n```\r\n\r\nthat works with running\r\n`PS>test`\r\nor running\r\n`PS>test -OptionalNumber 4`\r\nbut fails when running\r\n`PS>test -OptionalNumber`\r\nI've tried (and failed) with all kinds of combinations of [ValidationScript()], [AllowNull()], [Nullable[int]] in an attempt to modify the parameter requirements, but every time it complains that there must be a value passed in when the \"-OptionalNumber\" parameter is present.",
    "created_at": "2020-03-11T20:08:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597841984",
    "id": 597841984,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzg0MTk4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597841984/reactions"
    },
    "updated_at": "2020-03-11T20:08:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597841984",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2770088?v=4",
      "events_url": "https://api.github.com/users/chaydock/events{/privacy}",
      "followers_url": "https://api.github.com/users/chaydock/followers",
      "following_url": "https://api.github.com/users/chaydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaydock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chaydock",
      "id": 2770088,
      "login": "chaydock",
      "node_id": "MDQ6VXNlcjI3NzAwODg=",
      "organizations_url": "https://api.github.com/users/chaydock/orgs",
      "received_events_url": "https://api.github.com/users/chaydock/received_events",
      "repos_url": "https://api.github.com/users/chaydock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chaydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaydock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chaydock"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah. The default value will be used whenever the parameter is not specified at all.\r\n\r\nIs there an important distinction here where you need the parameter to be specified for some reason, even though the default value will be used anyway?",
    "created_at": "2020-03-11T20:10:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597843179",
    "id": 597843179,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzg0MzE3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597843179/reactions"
    },
    "updated_at": "2020-03-11T20:10:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597843179",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "for what it's worth, there was some discussion on this already on StackOverflow.com\r\n\r\nhttps://stackoverflow.com/questions/60459934/use-function-parameter-as-both-a-variable-and-switch\r\n\r\nhttps://stackoverflow.com/questions/58838941/powershell-special-switch-parameter\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/58838941/powershell-special-switch-parameter\">Powershell \"special\" switch parameter</a></strong></div><div>I have the powershell function below \r\nFunction Test\n{\n    Param\n    (               \n        [Parameter()]\n        [string]$Text = \"default text\"\n    )\n\n    Write-Host \"Text : $($Text)\"\n}\r\nAnd I w...</div></blockquote>\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/58838941/powershell-special-switch-parameter\">Powershell \"special\" switch parameter</a></strong></div><div>I have the powershell function below \r\nFunction Test\n{\n    Param\n    (               \n        [Parameter()]\n        [string]$Text = \"default text\"\n    )\n\n    Write-Host \"Text : $($Text)\"\n}\r\nAnd I w...</div></blockquote>",
    "created_at": "2020-03-11T20:10:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597843204",
    "id": 597843204,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzg0MzIwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597843204/reactions"
    },
    "updated_at": "2020-03-11T20:10:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597843204",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2770088?v=4",
      "events_url": "https://api.github.com/users/chaydock/events{/privacy}",
      "followers_url": "https://api.github.com/users/chaydock/followers",
      "following_url": "https://api.github.com/users/chaydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaydock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chaydock",
      "id": 2770088,
      "login": "chaydock",
      "node_id": "MDQ6VXNlcjI3NzAwODg=",
      "organizations_url": "https://api.github.com/users/chaydock/orgs",
      "received_events_url": "https://api.github.com/users/chaydock/received_events",
      "repos_url": "https://api.github.com/users/chaydock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chaydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaydock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chaydock"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Yeah. The default value will be used whenever the parameter is not specified at all.\r\n> \r\n> Is there an important distinction here where you need the parameter to be specified for some reason, even though the default value will be used anyway?\r\n\r\nBasically, I want the presence (or lack thereof) of the parameter to be triggered like a switch parameter. If it's not there, just ignore the fact that it even has a default value set. However, if the parameter is present, then use whatever value the user specifies, and if no value is specified, use the default value.\r\n\r\nThis isn't how I'm needing to use it (my case is a bit too much to explain easily), but imagine that you have a parameter that you call \"$Log\". You use that parameter to say that you want your function to enable a logging/transcript function. You have a default location already baked in... be it a specific or relative path.. but you want to give them the option to specify their own path.\r\n\r\nSo this just runs the function without logging... \r\n`PS>ExampleFunction`\r\nThis would run with logging to the default location...\r\n`PS>ExampleFunction -Log`\r\nAnd this would run with logging to a specific location...\r\n`PS>ExampleFunction -Log C:\\Temp\\log.txt`\r\n\r\nAgain.. it is just an example of how it could be used. My use case is different but similar.",
    "created_at": "2020-03-11T20:19:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597848890",
    "id": 597848890,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzg0ODg5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597848890/reactions"
    },
    "updated_at": "2020-03-11T20:19:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597848890",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2770088?v=4",
      "events_url": "https://api.github.com/users/chaydock/events{/privacy}",
      "followers_url": "https://api.github.com/users/chaydock/followers",
      "following_url": "https://api.github.com/users/chaydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaydock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chaydock",
      "id": 2770088,
      "login": "chaydock",
      "node_id": "MDQ6VXNlcjI3NzAwODg=",
      "organizations_url": "https://api.github.com/users/chaydock/orgs",
      "received_events_url": "https://api.github.com/users/chaydock/received_events",
      "repos_url": "https://api.github.com/users/chaydock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chaydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaydock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chaydock"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me illustrate the proposal with a real-world example of such a parameter from the GNU `sed` Unix utility, whose `-i` option (for creating  a backup of the input file) works as follows:\r\n\r\n* If `-i` isn't specified at all, no backup is created.\r\n\r\n* If _only_ `-i` is specified, a backup file with _default extension `.bak`_ is created.\r\n\r\n* If the user wishes to specify a different extension, they can _pass an optional value_ to `-i`; e.g., \r\n`-i.org`.\r\n\r\nFor this to work _syntactically_ in Powershell, the optional value, if specified, would have to be _attached to the parameter name_, with `:` as the separator (_update_: though there may be whitespace between the `:` and the argument):\r\n\r\n```PowerShell\r\n-MakeBackup:\".org\"\r\n```\r\n\r\nThis is how it already works for `[switch]` parameters, and this attachment is necessary to avoid ambiguity between optional parameter values and subsequent _positional_ arguments.\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-11T21:14:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-597881831",
    "id": 597881831,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzg4MTgzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597881831/reactions"
    },
    "updated_at": "2020-03-13T23:06:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/597881831",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Actually there is no need for \"attachment\". This works fine:\r\n```PowerShell\r\nfunction foo { param( [switch] $zork) $zork}\r\nPS> foo\r\n\r\nIsPresent\r\n---------\r\n    False\r\n\r\nPS> foo -zork\r\n\r\nIsPresent\r\n---------\r\n     True\r\n\r\nPS> foo -zork:   $false\r\n\r\nIsPresent\r\n---------\r\n    False\r\n```\r\n\r\nIt's the  ':' on the end of the switch that tells parser that the next argument binds to the switch parameter so syntactically the desired behavior could be implemented. However if this is generalized, how will the script distinguish between absent, present and present with a value? You'd have to encapsulate the value in a \"magic\" class containing the value along with the `present` flag. (This is more or less what which does.) This seems unnecessarily complicated.",
    "created_at": "2020-03-13T15:56:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-598792823",
    "id": 598792823,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODc5MjgyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598792823/reactions"
    },
    "updated_at": "2020-03-13T15:56:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598792823",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Every time I've wished for this type of parameter, I realized I was trying to fit too much into a single command.  The best way to handle this currently is one of these:\r\n\r\n1. Have a switch that just enables the behavior, this parameter would belong to AllParameterSets and also `BehaviorNameSet`.  Have a separate optional parameter to specify the argument which only belongs to `BehaviorNameSet`\r\n\r\n1. Have a switch that enables the behavior, this parameter only belongs to `BehaviorNameDefaultSet`.  Have a separate mandatory parameter to specify the argument which only belongs to `BehaviorNameExplicitArgSet`.  Default parameter set would be AllParameterSets to make both optional\r\n\r\nBoth of those solutions are heavy on parameter sets. If you find that you're running into trouble related to the number of sets you have, consider splitting the functionality into separate commands.   While this would probably be a common request, I think that ultimately the lack of this syntax leads to better design (for a PowerShell command anyway, not disparaging monolith CLI executables).\r\n\r\nI also agree with @bpayette, usage of this type of parameter in a resilient way would be pretty verbose (if even possible).",
    "created_at": "2020-03-13T16:37:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-598811134",
    "id": 598811134,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgxMTEzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598811134/reactions"
    },
    "updated_at": "2020-03-13T16:37:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598811134",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point about the whitespace, @bpayette: It's not the _whitespace_, it is the `:` that constitutes the attachment, and that `:` is all that's needed to unambiguously designate the argument as belonging to the parameter - as is already the case with and necessary for `[switch]` parameters, generalizing the logic of which is the gist of this proposal.\r\n\r\n>  However if this is generalized, how will the script distinguish between absent, present and present with a value?\r\n\r\nIn order: `-not $PSBoundParameters.ContainsKey('zork')`, default value, bound value.\r\n\r\nNo magic needed at all.",
    "created_at": "2020-03-13T22:44:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-598961112",
    "id": 598961112,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODk2MTExMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598961112/reactions"
    },
    "updated_at": "2020-03-14T02:08:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598961112",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SeeminglyScience:\r\n\r\n> Have a switch that just enables the behavior (...). Have a separate optional parameter \r\n\r\nAvoiding the ceremony and awkwardness of having to say `-PleaseDo` and \r\n`-IfyouDoThenWith WithValue` instead  of just `-PleaseDo:WithValue` (with `-PleaseDo` with a default value _typically_ being enough) is what this proposal is about.\r\n\r\nI get that this is amounts to a _new concept_ (though not _technically_, given that `[switch]` already works this way), which is always challenging:\r\n\r\n* Users, if they're even aware of `:` as a parameter/argument separator at all, will have to understand that in the case of such optional-argument parameters they'll  _have to_ use it.\r\n   * Then again, the relative obscurity of `:` may be a blessing in this case: start publicizing it in the context of this new feature, and recommend that it _only_ be used for that.\r\n\r\n* We'll have to come up with a way of representing optional-argument parameters in the syntax diagrams (and, of course, implementation-wise in the parameter _declaration_, which could be as simple as `[Parameter(ValueOptional)]`).\r\n\r\nI personally think it's worth doing, but I get that it introduces additional complexity, and that it would require a focused effort to publicize and properly document the new feature.\r\n\r\n",
    "created_at": "2020-03-13T23:02:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-598965921",
    "id": 598965921,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODk2NTkyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598965921/reactions"
    },
    "updated_at": "2020-03-14T03:37:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598965921",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @SeeminglyScience:\r\n> \r\n> > Have a switch that just enables the behavior (...). Have a separate optional parameter\r\n> \r\n> Avoiding the ceremony and awkwardness of having to say `-PleaseDo` and\r\n> `-IfyouDoThenWith WithValue` instead of just `-PleaseDo:WithValue` (with `-PleaseDo` with a default value _typically_ being enough) is what this proposal is about.\r\n\r\nBut how many scenarios are there where a better design wouldn't be `Please-Do WithValue`?\r\n\r\nAlso personally I'd say `-PleaseDo:WithValue` is *more* awkward.  I know that syntax already exists, but thankfully the use cases for it are pretty infrequent.  Objectively less ceremony, but the awkwardness of either syntax is subjective.\r\n\r\n",
    "created_at": "2020-03-16T14:33:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599570010",
    "id": 599570010,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTU3MDAxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599570010/reactions"
    },
    "updated_at": "2020-03-16T14:33:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599570010",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Also personally I'd say `-PleaseDo:WithValue` is more _awkward_.\r\n> ... where a better design wouldn't be `Please-Do WithValue`?\r\n\r\nAssuming we're comparing `-PleaseDo -IfYouDoThenWith WithValue` with `-PleaseDo:WithValue` (Were you referring to `-PleaseDo WithValue`?  That doesn't satisfy the requirements, because you then couldn't specify `-PleaseDo` alone, which would be the _typical_ case):\r\n\r\n* If we're talking about which syntax is inconveniently verbose, involves conceptual duplication, and requires you to remember _two_ parameter names, I think we have a clear winner.\r\n\r\n* If we're talking potential obscurity and the challenge of making the feature widely known and lodging it in users' minds, I would agree that the proposed feature is potentially problematic - hence my suggestion to publicize and document it properly, should it get implemented.\r\n\r\nUndoubtedly, if implemented, this feature will only be used infrequently, but I personally see its utility.\r\n",
    "created_at": "2020-03-16T15:09:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599589467",
    "id": 599589467,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTU4OTQ2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599589467/reactions"
    },
    "updated_at": "2020-03-16T15:09:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599589467",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> > Also personally I'd say `-PleaseDo:WithValue` is more _awkward_.\r\n> > ... where a better design wouldn't be `Please-Do WithValue`?\r\n> \r\n> Assuming we're comparing `-PleaseDo -IfYouDoThenWith WithValue` with `-PleaseDo:WithValue` (Were you referring to `-PleaseDo WithValue`? That doesn't satisfy the requirements, because you then couldn't specify `-PleaseDo` alone, which would be the _typical_ case):\r\n\r\nI wasn't comparing any of them, I was saying if you have a parameter that invokes a different action it should be a different command.\r\n\r\n> * If we're talking about which syntax is inconveniently verbose, involves conceptual duplication, and requires you to remember _two_ parameter names, I think we have a clear winner.\r\n>\r\n> * If we're talking potential obscurity and the challenge of making the feature widely known and lodging it in users' minds, I would agree that the proposed feature is potentially problematic - hence my suggestion to publicize and document it properly, should it get implemented.\r\n\r\nMore specifically I'm saying the syntax of specifying a value to a switch parameter is more awkward than the alternatives (in my opinion). In regards to having to remember two parameter names, I'd much rather the parameters be named based on the type of value they are.  For example, a `Backup` switch and a `BackupPath` string parameter makes usage pretty clear.\r\n \r\nAlso now that I think about it, what I see most often is:\r\n\r\n1. A switch parameter `PleaseDo`\r\n1. A value parameter `PleaseDoPath`\r\n1. If you specify `PleaseDo` then the default path (or w/e value) is used.  If you specify `PleaseDoPath` then `PleaseDo` is implied.  If you specify both, then the behavior is the same as just specifying `PleaseDoPath`.\r\n\r\nThat way you don't need complicated parameter sets, different syntax, duplication, and you can still name your parameter in a way that telegraphs what sort of value it expects.\r\n\r\n```powershell\r\nfunction Test-Function {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter()]\r\n        [switch] $PleaseDo,\r\n\r\n        [Parameter()]\r\n        [string] $PleaseDoPath = \"$pwd\\here.bak\"\r\n    )\r\n    end {\r\n        $PleaseDo = $PSBoundParameters.ContainsKey('PleaseDoPath') -or $PleaseDo.IsPresent\r\n        if ($PleaseDo) {\r\n            Write-Host \"Should do with value: $PleaseDoPath\"\r\n        }\r\n    }\r\n}\r\n\r\nTest-Function -PleaseDo\r\nTest-Function -PleaseDoPath something\r\nTest-Function -PleaseDo -PleaseDoPath something\r\n```\r\n",
    "created_at": "2020-03-16T15:38:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599605214",
    "id": 599605214,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTYwNTIxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599605214/reactions"
    },
    "updated_at": "2020-03-16T15:39:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599605214",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> That way you don't need complicated parameter sets\r\n\r\nIf this were to be implemented, it would _simplify_ parameter declaration (fewer parameters, no one-implies-the-other logic, a single `Parameter` attribute such as `ValueOptional`).\r\n\r\nYes, your example is shows the best approach with the current features.\r\n\r\n> I'd much rather the parameters be named based on the type of value they are.\r\n\r\nI agree that that's conceptually clearer.\r\n\r\nThe only way that the proposed feature would match that is if the `ValueOptional` property accepted an - optional :) - value that allowed you to _name_ the optional argument (e.g., `ValueOptional='Path'`) (or perhaps a separate property, `ValueOptionalLabel='Path'`  :), with the resulting syntax diagram then showing something like `-PleaseDo[:(<string Path>)]` instead of `-PleaseDo[:<string>]`\r\n\r\nOn the whole, I can definitely see that implementing and publicizing the new feature would be a nontrivial effort, and that the relative rarity of the real-world need for it could be an impediment to its adoption and understandability.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-16T16:18:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599627330",
    "id": 599627330,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTYyNzMzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599627330/reactions"
    },
    "updated_at": "2020-03-16T16:18:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599627330",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I see the emoji, @SeeminglyScience  - which part of my previous comment is confusing? I'm happy to clarify.  \r\nTo offer a hint up front: I can see both sides of the debate, and I hope that the arguments I've presented allow everyone to draw their own conclusions.",
    "created_at": "2020-03-16T23:22:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599801585",
    "id": 599801585,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTgwMTU4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599801585/reactions"
    },
    "updated_at": "2020-03-17T07:45:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599801585",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I know it's called confused, but it [can convey a few different emotions](https://www.dictionary.com/e/emoji/confused-face-emoji/).  In this specific context, it means \"I disagree for the reasons above\".\r\n\r\nAs I mentioned before, I think it's important to make it easy to tell at a glance if there is consensus in a thread.  Plus as you know, it wouldn't be the first time that the committee has mistaken the side I've taken in a debate.",
    "created_at": "2020-03-17T01:04:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599825947",
    "id": 599825947,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTgyNTk0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599825947/reactions"
    },
    "updated_at": "2020-03-17T10:53:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599825947",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Plus as you know, it wouldn't be the first time that the committee has mistaken the side I've taken in a debate.\r\n\r\n[Amen to that](https://github.com/PowerShell/PowerShell/issues/9997#issuecomment-594927412)  (/cc @SteveL-MSFT; I know there's nuance there, but the summary definitely misses the mark).\r\n\r\n>  can convey a few different emotions\r\n\r\nIn a technical debate, we're not looking for a _range_ of emotions, we want to communicate _precisely_ and _avoid ambiguity_.\r\n\r\nThat can be achieved in one of two ways:\r\n\r\n* Preferably, argue your points concisely and precisely.\r\n\r\n* If you must - because you don't want to expend more energy on a given debate and / or there's nothing more to say - boil it down to a _binary_ (dichotomy): yay ( 👍)  or nay ( 👎) - as [you've done before](https://github.com/PowerShell/PowerShell/issues/6817#issuecomment-569384565).\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-17T02:22:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599844006",
    "id": 599844006,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTg0NDAwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599844006/reactions"
    },
    "updated_at": "2020-03-17T07:44:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599844006",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> > Plus as you know, it wouldn't be the first time that the committee has mistaken the side I've taken in a debate.\r\n> \r\n> [Amen to that](https://github.com/PowerShell/PowerShell/issues/9997#issuecomment-594927412) (/cc @SteveL-MSFT; I know there's nuance there, but the summary definitely misses the mark).\r\n\r\nTo be clear I don't necessarily blame them, generally speaking.  They are (I would guess) pretty strapped for time.  I would bet that it's a pretty big ask just to get them to read an RFC, much less a really long thread.\r\n\r\nEspecially when we're both involved, that thread is going to be *long*.  And hey, I love a good debate, and I love talking about PowerShell, I don't mind our long threads.  But the more we go back and forth, the less likely it is that anyone other than us are going to read any of it.  Should it be that way? Ideally no, but it's a reality.  If we want our feedback to count, we gotta keep these threads shorter.  Since we aren't the decision makers, we need to lay out our points and dip, we don't *necessarily* need to come to an understanding.",
    "created_at": "2020-03-17T02:58:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599852047",
    "id": 599852047,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTg1MjA0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599852047/reactions"
    },
    "updated_at": "2020-03-17T10:53:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599852047",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Both excellent points, @SeeminglyScience.\r\n\r\nI'm increasingly making use of hiding outdated / resolved comments  in order to keep threads short(er), and I often update the initial post with salient information discovered later and / or try to [summarize a debate succinctly](https://github.com/PowerShell/PowerShell/issues/11710#issuecomment-580877015) in a later comment.\r\n\r\nBut the overall length is still a problem, and I wish there were some protocol for arriving at an agreed-upon final form of a proposal or concise summary of a debate- short of authoring an RFC, which often isn't appropriate (yet) and, it seems, is where ideas go to die - that doesn't require future readers to read the entire history.\r\n\r\nHaving a shared, perhaps even documented understanding of how to use emoji would help too, though, at least based on the limited set of standard emoji  offered by the site, I guess it's now down to the question whether to use 👎or 😕to signal one's final yay-or-nay stance (even though I bristled at it initially, I think the former is preferable).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-17T08:13:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-599935262",
    "id": 599935262,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTkzNTI2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599935262/reactions"
    },
    "updated_at": "2020-03-17T08:13:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599935262",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> ```powershell\r\n> function foo { param( [switch] $zork) $zork}\r\n> ```\r\n\r\nI would love for this to work as you describe if only switch were to accept more than just $true/$false.  If the switch parameter were to allow decoration as any variable type beyond Boolean, this would solve the problem I have at hand....\r\n\r\n```\r\nPS > function foo { param( [switch] $zork) $zork}\r\n\r\nPS > foo\r\n\r\nIsPresent\r\n---------\r\n    False\r\n\r\nPS > foo -zork\r\n\r\nIsPresent\r\n---------\r\n     True\r\n\r\nPS > foo -zork: 4\r\nfoo : Cannot process argument transformation on parameter 'zork'. Cannot convert the \"4\" value of type \"System.Int32\" to type \"System.Management.Automation.SwitchParameter\".\r\nAt line:1 char:12\r\n+ foo -zork: 4\r\n+            ~\r\n    + CategoryInfo          : InvalidData: (:) [foo], ParameterBindingArgumentTransformationException\r\n    + FullyQualifiedErrorId : ParameterArgumentTransformationError,foo\r\n```\r\n\r\nThe irony being that switch as an alternative to using endless if/else statements handles anything you can thing of to throw at it. But as a parameter can only handle $true/$false.",
    "created_at": "2020-03-22T18:43:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-602253546",
    "id": 602253546,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI1MzU0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/602253546/reactions"
    },
    "updated_at": "2020-03-22T18:43:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/602253546",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2770088?v=4",
      "events_url": "https://api.github.com/users/chaydock/events{/privacy}",
      "followers_url": "https://api.github.com/users/chaydock/followers",
      "following_url": "https://api.github.com/users/chaydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaydock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chaydock",
      "id": 2770088,
      "login": "chaydock",
      "node_id": "MDQ6VXNlcjI3NzAwODg=",
      "organizations_url": "https://api.github.com/users/chaydock/orgs",
      "received_events_url": "https://api.github.com/users/chaydock/received_events",
      "repos_url": "https://api.github.com/users/chaydock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chaydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaydock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chaydock"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@chaydock, note that the `[switch]` parameter _type_  and the `switch` statement only happen to share the same name, but are otherwise unrelated.\r\n\r\nI think we've already established the desired behavior and hinted at possible implementations.\r\n\r\nImplementing this feature is definitely possible, but I don't think it's useful to  further discuss implementation details until a decision is made on _if_ this feature should be supported at all, which, of course, may be negative - or may never come.",
    "created_at": "2020-03-22T18:56:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-602255111",
    "id": 602255111,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI1NTExMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/602255111/reactions"
    },
    "updated_at": "2020-03-22T18:57:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/602255111",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I was disappointed to learn that this isn't currently possible, though I can understand why given PowerShell would have a hard time distinguishing between the argument of a positional parameter and an optional argument for a parameter like this one.\r\n\r\nHowever, there already is syntax for parameters like -Debug:$true, so I think the best solution would be to use this colon-based syntax for a new ternary-type parameter that can accept both booleans and another data type, so you could easily do something like `-Foo:'bar'` (with $true assumed if there's no argument).",
    "created_at": "2021-12-06T18:28:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12104#issuecomment-987041253",
    "id": 987041253,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12104",
    "node_id": "IC_kwDOAvT7bc461Q3l",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/987041253/reactions"
    },
    "updated_at": "2021-12-06T18:32:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/987041253",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/53661808?v=4",
      "events_url": "https://api.github.com/users/ImportTaste/events{/privacy}",
      "followers_url": "https://api.github.com/users/ImportTaste/followers",
      "following_url": "https://api.github.com/users/ImportTaste/following{/other_user}",
      "gists_url": "https://api.github.com/users/ImportTaste/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ImportTaste",
      "id": 53661808,
      "login": "ImportTaste",
      "node_id": "MDQ6VXNlcjUzNjYxODA4",
      "organizations_url": "https://api.github.com/users/ImportTaste/orgs",
      "received_events_url": "https://api.github.com/users/ImportTaste/received_events",
      "repos_url": "https://api.github.com/users/ImportTaste/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ImportTaste/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ImportTaste/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ImportTaste"
    }
  }
]
