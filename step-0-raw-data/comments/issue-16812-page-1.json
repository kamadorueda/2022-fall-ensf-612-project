[
  {
    "author_association": "COLLABORATOR",
    "body": "This could be dynamic parameter from Registry provider.\r\n\r\nI'd prefer `-NoExpand` switch - it is more informative for users.",
    "created_at": "2022-01-27T08:56:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1022984364",
    "id": 1022984364,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48-YCs",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1022984364/reactions"
    },
    "updated_at": "2022-01-27T08:57:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1022984364",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'm not a huge fan of `-NoXY` parameters in general because it inverse logic. \r\nIf you want to write the whole thing, you have to use `-NoExpand:$true` to enable deactivation of expansion and use `-NoExpand:$false` to disable the deactivation (so to enable expansion). To me it is counter-intuitive.\r\n\r\nThe logic at the beginning would have been to read raw value by default (because it is the real value, unexpanded) and either call `Get-ItemPropertyValue` with an optional `-Expand` parameter or pipe it to an expansion function. But I'm aware that it would probably break things if we change the default behavior now.\r\n\r\nAll that said, if the feature is implemented with a `-NoExpand` parameter, I'll welcome it with pleasure ;)",
    "created_at": "2022-01-27T10:43:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023075757",
    "id": 1023075757,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48-uWt",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023075757/reactions"
    },
    "updated_at": "2022-01-27T10:43:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023075757",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6342490?v=4",
      "events_url": "https://api.github.com/users/cadegenn/events{/privacy}",
      "followers_url": "https://api.github.com/users/cadegenn/followers",
      "following_url": "https://api.github.com/users/cadegenn/following{/other_user}",
      "gists_url": "https://api.github.com/users/cadegenn/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cadegenn",
      "id": 6342490,
      "login": "cadegenn",
      "node_id": "MDQ6VXNlcjYzNDI0OTA=",
      "organizations_url": "https://api.github.com/users/cadegenn/orgs",
      "received_events_url": "https://api.github.com/users/cadegenn/received_events",
      "repos_url": "https://api.github.com/users/cadegenn/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cadegenn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cadegenn/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cadegenn"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> you have to use `-NoExpand:$true` to enable deactivation of expansion\r\n\r\nWe can use `-NoExpand` without \"suffix\".\r\nWe had discussions about `Raw` and it is not so good name too.\r\n\r\nThe name is not critical if you want to pull PR now. (We can continue to discuss the name in PR)\r\n\r\nPing WG-Cmdlets to make a conclusion about the request.",
    "created_at": "2022-01-27T10:54:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023084516",
    "id": 1023084516,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48-wfk",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023084516/reactions"
    },
    "updated_at": "2022-01-27T10:54:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023084516",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": ">  We can use -NoExpand without \"suffix\".\r\n\r\nYes I know, I just gave my point of view.\r\n\r\n> The name is not critical if you want to pull PR now.\r\n\r\nUnfortunately, I am not skilled enough in c# to initiate a PR. sorry\r\n\r\nIf this request is going to become true, I will thankfully welcome it, whatever the name of the option is.\r\nThank you.",
    "created_at": "2022-01-27T12:33:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023160372",
    "id": 1023160372,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48_DA0",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023160372/reactions"
    },
    "updated_at": "2022-01-27T12:33:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023160372",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6342490?v=4",
      "events_url": "https://api.github.com/users/cadegenn/events{/privacy}",
      "followers_url": "https://api.github.com/users/cadegenn/followers",
      "following_url": "https://api.github.com/users/cadegenn/following{/other_user}",
      "gists_url": "https://api.github.com/users/cadegenn/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cadegenn",
      "id": 6342490,
      "login": "cadegenn",
      "node_id": "MDQ6VXNlcjYzNDI0OTA=",
      "organizations_url": "https://api.github.com/users/cadegenn/orgs",
      "received_events_url": "https://api.github.com/users/cadegenn/received_events",
      "repos_url": "https://api.github.com/users/cadegenn/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cadegenn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cadegenn/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cadegenn"
    }
  },
  {
    "author_association": "NONE",
    "body": "The example given is not a good one because `path` is a string not an expanded string. `Temp` works better.\r\n\r\n```\r\nps> $I = get-item \"HKCU:\\Environment\"\r\nps> $I.GetValueKind(\"Path\")\r\nString\r\n\r\nps> $I.GetValueKind(\"Temp\")\r\nExpandString\r\n\r\n $I.GetValue(\"Temp\",$null,'DoNotExpandEnvironmentNames')\r\n%USERPROFILE%\\AppData\\Local\\Temp\r\n\r\nps> $I.GetValue(\"Temp\")\r\nC:\\Users\\xxxxx\\AppData\\Local\\Temp\r\n```\r\nThe default behaviour is expand. So it is reasonable for `Get-ItemPropertyValue` have the same default, but not so reasonable to have no other option. \r\n\r\nThe `Get-ItemProperty` cmdlet creates a custom object with the selected Property/properties as members.  These are also expanded. \r\n\r\n```\r\nps> $p = Get-ItemProperty -Path  \"HKCU:\\Environment\" -Name \"Temp\"\r\nps> $p\r\n\r\nTEMP         : C:\\Users\\xxxx\\AppData\\Local\\Temp\r\nPSPath       : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Environment\r\nPSParentPath : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\r\nPSChildName  : Environment\r\nPSDrive      : HKCU\r\nPSProvider   : Microsoft.PowerShell.Core\\Registry\r\n\r\n\r\n> $p | gm\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName         MemberType   Definition\r\n----         ----------   ----------\r\nEquals       Method       bool Equals(System.Object obj)\r\nGetHashCode  Method       int GetHashCode()\r\nGetType      Method       type GetType()\r\nToString     Method       string ToString()\r\nPSChildName  NoteProperty string PSChildName=Environment\r\nPSDrive      NoteProperty PSDriveInfo PSDrive=HKCU\r\nPSParentPath NoteProperty string PSParentPath=Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\r\nPSPath       NoteProperty string PSPath=Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Environment\r\nPSProvider   NoteProperty ProviderInfo PSProvider=Microsoft.PowerShell.Core\\Registry\r\nTEMP         NoteProperty string TEMP=C:\\Users\\xxxx\\AppData\\Local\\Temp\r\n```\r\n\r\nIf any changes are to be made, `Get-ItemProperty` and  `Get-ItemPropertyValue` should both support the same dynamic parameter. See below on names but  `-Raw`,  `-NoExpand`  or something else based on the values of the `RegistryValueOptions`  enum could all work. There are only two values for `RegistryValueOptions` btw, `None` and `DoNotExpandEnvironmentNames` \r\n\r\nWhether it _really_ is or not I always thought of  `Get-ItemPropertyValue  -Path X -Name Y` to be `(Get-ItemProperty -path X -name Y).Y`  under the surface and their behaviour should be the same.  This would mean that a call to  `Get-ItemProperty` which returns more than one ExpandString treats them ALL the same way, which is fine. \r\n\r\nOverall it looks like a good idea to me - which isn't to say it is practical, but it seems to break nothing and move things in the right direction. \r\n\r\n\r\n**Switch parameter Names**  Are best as `-DoSomethingNonDefault`  the _absence_ of the switch always conveys  \"do nothing  / do the default\" and where possible the name gives some idea what the default is. \r\nThis means we might have `New-Account -Disabled` - accounts are enabled by default.   `Set-` commands often follow their `New` or `Add-`  counterparts giving `Set-Account -disabled`.  People don't like `-disabled:$false` to say \"Undo changing from the default\".  That doesn't apply to \"Get X in the non-default way\" operations like this. \r\n \r\nThere are precedents for inverting the name to `NoDefaultBehaviour`  15 or so are used once and these used at least twice.\r\n   2 NoProxy              \r\n   2 NoEnumerate                \r\n   3 NoEncryption         \r\n   3 NoTypeInformation    \r\n   5 NoServiceRestart     \r\n   5 NoNewline            \r\n   6 NoClobber            \r\n\r\nOne _can_ use `command | out-file -NoClobber:$false ...`  but in practice people omit the parameter completely and they write `-NoClobber` in preference to `-NoClobber:$true`  (a boolean `-Clobber  $false` would be the worst of all).  \"\r\nIt's usually better to avoid  \"Yes, I don't want...\"   but  the double negative is seldom a problem. \r\n",
    "created_at": "2022-01-27T12:53:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023176004",
    "id": 1023176004,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48_G1E",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023176004/reactions"
    },
    "updated_at": "2022-01-27T12:53:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023176004",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The example given is not a good one because `path` is a string not an expanded string. `Temp` works better.\r\n\r\nThat's actually part of the problem. `PATH` *can* be expandable, but the .NET API for environment variables doesn't give you the option to not expand. So any .NET based installer that adds an entry to path more than likely forces it to `REG_SZ`. This thread has more info dotnet/runtime#1442",
    "created_at": "2022-01-27T13:34:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023216874",
    "id": 1023216874,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48_Qzq",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023216874/reactions"
    },
    "updated_at": "2022-01-27T13:34:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023216874",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": ">   any .NET based installer that adds an entry to path ... \r\n\r\nMy current freelance gig has supplied with a computer and the Junk on the path amazes me. (a) Everything adds itself as the first item so the OS directories where most things are found are about the tenth thing to be searched (not new, DOS installers did that in the 1980s)   and (b) two uses 8.3. converted name C:\\PROGRA~1\\ etc. In 2022! \r\n\r\nSo yes if an installer can louse up the path, it probably will.  Now I've checked one of my machines has one ExpandSz and the other just has Sz. \r\n\r\n\r\n\r\n\r\n",
    "created_at": "2022-01-27T15:27:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1023333710",
    "id": 1023333710,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc48_tVO",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023333710/reactions"
    },
    "updated_at": "2022-01-27T15:28:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1023333710",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The Engine WG discussed this yesterday. We agree it would be nice to have as a dynamic parameter for the registry provider. Marking as up for grabs.",
    "created_at": "2022-03-04T14:46:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16812#issuecomment-1059225751",
    "id": 1059225751,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16812",
    "node_id": "IC_kwDOAvT7bc4_IoCX",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059225751/reactions"
    },
    "updated_at": "2022-03-04T14:46:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059225751",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  }
]
