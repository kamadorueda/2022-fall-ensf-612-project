[
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good find; it seems that any  unbalanced `(` or `)` instances inside a _quoted string_ inside `$(...)` cause the problem.\r\n\r\nThe following commands all break unexpectedly:\r\n\r\n```powershell\r\n\"$(')')\"  # your example\r\n\"$('(')\"  # opening parenthesis too\r\n\"$(\"(\")\"  # ditto with double quotes\r\n```\r\n\r\nConversely, the following does _not_ break, even though it should:\r\n\r\n```powershell\r\n\"$(\"`\")\"  # !! Unexpectedly doesn't break, even though \"`\" is not a well-formed string.\r\n```",
    "created_at": "2017-08-10T14:01:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-321559910",
    "id": 321559910,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTU1OTkxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/321559910/reactions"
    },
    "updated_at": "2017-08-10T14:03:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/321559910",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "This looks related to #3039, and to [this question on SO](https://stackoverflow.com/q/47877162/3905079).",
    "created_at": "2017-12-18T22:43:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-352581731",
    "id": 352581731,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjU4MTczMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/352581731/reactions"
    },
    "updated_at": "2017-12-18T22:43:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/352581731",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1260690?v=4",
      "events_url": "https://api.github.com/users/briantist/events{/privacy}",
      "followers_url": "https://api.github.com/users/briantist/followers",
      "following_url": "https://api.github.com/users/briantist/following{/other_user}",
      "gists_url": "https://api.github.com/users/briantist/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/briantist",
      "id": 1260690,
      "login": "briantist",
      "node_id": "MDQ6VXNlcjEyNjA2OTA=",
      "organizations_url": "https://api.github.com/users/briantist/orgs",
      "received_events_url": "https://api.github.com/users/briantist/received_events",
      "repos_url": "https://api.github.com/users/briantist/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/briantist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/briantist/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/briantist"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "This is related to #3039 in a way, but I think this issue could be fixed whereas I think #3039 probably can't.\r\n\r\nFirst, there is a workaround - put an opening paren in a comment like this:\r\n\r\n```powershell\r\n\"$(<#(#>')')\"\r\n```\r\n\r\nYes it's ugly. There are better alternatives, like using a format string, but I had to mention this for completeness.\r\n\r\nA fix for this issue might be as simple as keeping a stack of expected delimiters, and only counting the opening/closing paren when the top of this stack is a paren.\r\n\r\nThe delimiters pairs that must be handled include `<# #>`, `' '`, `\" \"`, `@\" \"@`, `@' '@` and of course `( )`. I think it's safe to ignore `[ ]` and `{ }` here.\r\n\r\nIt is important to ignore escape characters though, e.g. the following examples are/should be valid with and without matched delimiters:\r\n\r\n```powershell\r\necho a`'`(b\r\necho a`'`(`'b\r\n\"$(echo a`'`(b)'\r\n\"$(echo a`'`(`'b)\"\r\n```",
    "created_at": "2017-12-21T02:33:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-353241555",
    "id": 353241555,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzI0MTU1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/353241555/reactions"
    },
    "updated_at": "2017-12-21T02:33:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/353241555",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "Really great info provided here, thanks @lzybkr .",
    "created_at": "2017-12-21T21:35:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-353463350",
    "id": 353463350,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQ2MzM1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/353463350/reactions"
    },
    "updated_at": "2017-12-21T21:35:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/353463350",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1260690?v=4",
      "events_url": "https://api.github.com/users/briantist/events{/privacy}",
      "followers_url": "https://api.github.com/users/briantist/followers",
      "following_url": "https://api.github.com/users/briantist/following{/other_user}",
      "gists_url": "https://api.github.com/users/briantist/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/briantist",
      "id": 1260690,
      "login": "briantist",
      "node_id": "MDQ6VXNlcjEyNjA2OTA=",
      "organizations_url": "https://api.github.com/users/briantist/orgs",
      "received_events_url": "https://api.github.com/users/briantist/received_events",
      "repos_url": "https://api.github.com/users/briantist/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/briantist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/briantist/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/briantist"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "See also \r\nhttps://github.com/PowerShell/vscode-powershell/issues/1401\r\n\r\nA comment nested inside a subexpression can expose issues with parenthesis as well.",
    "created_at": "2018-07-03T05:00:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-402013582",
    "id": 402013582,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjAxMzU4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/402013582/reactions"
    },
    "updated_at": "2018-07-03T05:00:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/402013582",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26179051?v=4",
      "events_url": "https://api.github.com/users/msftrncs/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftrncs/followers",
      "following_url": "https://api.github.com/users/msftrncs/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftrncs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/msftrncs",
      "id": 26179051,
      "login": "msftrncs",
      "node_id": "MDQ6VXNlcjI2MTc5MDUx",
      "organizations_url": "https://api.github.com/users/msftrncs/orgs",
      "received_events_url": "https://api.github.com/users/msftrncs/received_events",
      "repos_url": "https://api.github.com/users/msftrncs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftrncs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftrncs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/msftrncs"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I ran in to this, unmatched parenthesis because of a regular expression, was able to do this:\r\n\r\nfrom https://gist.github.com/msftrncs/bff8c6c5e28ff92a19efb8a5556a4238, both lines are enclosed in the same string subexpression, and line 37 also possesses its own string subexpression as well.\r\n\r\nLine 25\r\n```PowerShell\r\n                if ($_ -match '^(?:[@#<>]|[1-6]>)|[\\s`|&;,''\"\\u2018-\\u201E{}()]|\\$[{(\\w:$^?]') { #)\r\n```\r\n\r\nLine 37\r\n```PowerShell\r\n\r\n                \"$QuotedWith$($_ -replace '[\"\\u201C-\\u201E`]', '$0$0' -replace '\\$(?=[{(\\w:$^?])'<#)#>, '`$0')$QuotedWith\"\r\n```\r\n",
    "created_at": "2019-07-21T06:53:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-513528779",
    "id": 513528779,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzUyODc3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513528779/reactions"
    },
    "updated_at": "2019-07-21T06:53:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/513528779",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26179051?v=4",
      "events_url": "https://api.github.com/users/msftrncs/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftrncs/followers",
      "following_url": "https://api.github.com/users/msftrncs/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftrncs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/msftrncs",
      "id": 26179051,
      "login": "msftrncs",
      "node_id": "MDQ6VXNlcjI2MTc5MDUx",
      "organizations_url": "https://api.github.com/users/msftrncs/orgs",
      "received_events_url": "https://api.github.com/users/msftrncs/received_events",
      "repos_url": "https://api.github.com/users/msftrncs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftrncs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftrncs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/msftrncs"
    }
  },
  {
    "author_association": "NONE",
    "body": "This problem ***is*** very similar to #3039, #10045 and #10413. Again, the problem is that the parser is examining the contents of the sub-expression instead of treating it as a separate syntactic context. The following is a theory about what is happening here that seems consistent with the examples given and other tests performed. It could be wrong in its detail but does explain the behaviour.\r\n\r\nWhen the parser encounters a subexpression in an expandable string, it determines the extent of that subexpression by counting balanced parentheses. It then builds a substring of what it thinks is the subexpression (the bit from the start \"$(\" to what it thinks is the end \")\", inclusive) and notes where the remainder of the expandable string resumes. The substring is then parsed (as a naked subexpression) to evaluate the expression. Provided that it is possible to parse a valid subexpression beginning at the first character of the substring, anything after that expression is ignored. The subexpression parser assumes that the string parser knows where the subexpression ends and the string resumes (as I said, the theory *explains* the behaviour but might not be exactly what is happening). Once the sub-expression is parsed, the parsing of the expandable string resumes at what the string parser *thinks* is the character following the sub-expression.\r\n\r\nExplanation of included examples (using PS ISE 5.1.18362.145 to get errors instead of continuation prompt for \"incomplete\" input):\r\n```\r\n\"$(')')\"\r\nThe string is missing the terminator: '.\r\n # parser thinks subexpression is $(') which is invalid.\r\n\r\n\"$('(')\"\r\n$(subexpression) is missing the closing ')'.\r\n# quoted open parenthesis causes parser to expect a second close parenthesis as the subexpression terminator\r\n# which it doesn't find.\r\n\r\n\"$(\")\")\"\r\nThe string is missing the terminator: \".\r\n # parser thinks subexpression is $(\") which is invalid.\r\n\r\n\"$(\"`\")\"  # !! Unexpectedly doesn't break, even though \"`\" is not a well-formed string.\r\n# This is actually the same as #10045. The `\" is treated as an escaped \" and replaced before the subexpression is\r\n# parsed. Thus the string becomes\r\n\"$(\"\")\"\r\n# Now a well formed subexpression. Note: #10413 does not apply, only the `\" is replaced. The resulting \"\" is not\r\n# subject to further replacement as evidenced by the fact that it works ( $(\") wouldn't ) and also the following\r\n# example\r\n\"$(\"`\"`\"`\")\"\r\n# is changed to\r\n\"$(\"\"\"\")\"\r\n# producing a single \", i.e. the subexpression becomes an expandable string containing a single escaped \"\r\n```\r\nFurther examples consistent with the theory,\r\n```\r\nPS > \"$(\"foo(\"))bar\"\r\nfoo(bar\r\nPS > \"$(\"foo((\")))bar\"\r\nfoo((bar\r\nPS > \"$(\"foo(\")xxxxxxxxxxxx)xbar\"\r\nfoo(xbar\r\n```\r\nNote how the subexpression correctly evaluates but everything between the *actual* end of the subexpression and the character after what the string parser *thinks* is the *matching* end parenthesis is ignored by both the subexpression (extraneous, assumed to be part of the string) and the string parser (assumed to be part of the subexpression).\r\n\r\n The solution to this problem is simple (to describe). While parsing an expandable string, if a subexpression start sequence is found ( i.e. $( ), begin parsing this as a naked subexpression, totally independent of anything that the string parser is doing. This parsing would succeed if it reached a matching close parenthesis without error. If it succeeds, return a pointer to the next string character after the subexpression. The string parser interpolates the result of the subexpression and then resumes at the character indicated by the subexpression parser.\r\n\r\nThis will also fix #3039, #10045, #10413 though it might constitute a breaking change (some discussion in #3039). A kludgey way to fix this issue but not the others would be to parse the subexpression in its own context ***after*** replacing all escaped double quotes in the entire string (subexpression included). IMHO: if you're going to fix something, make it work properly by fixing everything that's broken.",
    "created_at": "2021-12-30T10:32:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4543#issuecomment-1002967692",
    "id": 1002967692,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4543",
    "node_id": "IC_kwDOAvT7bc47yBKM",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1002967692/reactions"
    },
    "updated_at": "2021-12-30T10:32:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1002967692",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/67649059?v=4",
      "events_url": "https://api.github.com/users/UberKluger/events{/privacy}",
      "followers_url": "https://api.github.com/users/UberKluger/followers",
      "following_url": "https://api.github.com/users/UberKluger/following{/other_user}",
      "gists_url": "https://api.github.com/users/UberKluger/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/UberKluger",
      "id": 67649059,
      "login": "UberKluger",
      "node_id": "MDQ6VXNlcjY3NjQ5MDU5",
      "organizations_url": "https://api.github.com/users/UberKluger/orgs",
      "received_events_url": "https://api.github.com/users/UberKluger/received_events",
      "repos_url": "https://api.github.com/users/UberKluger/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/UberKluger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UberKluger/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/UberKluger"
    }
  }
]
