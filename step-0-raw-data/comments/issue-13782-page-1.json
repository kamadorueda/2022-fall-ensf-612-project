[
  {
    "author_association": "COLLABORATOR",
    "body": "You could:\r\n\r\n```powershell\r\n$x = @{Foo='Bar}\r\n$x.Baz = 'Foo' + $X.foo\r\n````",
    "created_at": "2020-10-14T13:16:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708394846",
    "id": 708394846,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODM5NDg0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708394846/reactions"
    },
    "updated_at": "2020-10-14T13:16:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708394846",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I would like to refer to previously defined fields within HashTable:\r\n> \r\n> ```powershell\r\n> @{\r\n>    foo = 'bar'\r\n>    baz = 'foo' + $_.foo \r\n> }\r\n> ```\r\n\r\nThat would change the behavior of existing code, e.g. this would break:\r\n\r\n```powershell\r\nGet-ChildItem | ForEach-Object {\r\n    [PSCustomObject]@{\r\n        Something = $_.Name\r\n    }\r\n}\r\n```",
    "created_at": "2020-10-14T13:47:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708414389",
    "id": 708414389,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQxNDM4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708414389/reactions"
    },
    "updated_at": "2020-10-14T14:01:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708414389",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> You could:\r\n> \r\n> ```powershell\r\n> $x = @{Foo='Bar}\r\n> $x.Baz = 'Foo' + $X.foo\r\n> ```\r\n\r\nI already provided such thing in original post. I know I can do it that way, but its ugly. This is syntax sugar category. \r\n\r\n> That would change the behavior of existing code, e.g. this would break:\r\n\r\nI also provided that. $_ is not good choice for sure.",
    "created_at": "2020-10-14T13:49:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708416354",
    "id": 708416354,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQxNjM1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708416354/reactions"
    },
    "updated_at": "2020-10-14T13:49:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708416354",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "NONE",
    "body": "Regarding symbol maybe `$$`\r\n\r\n- `@{ x = 1; y = $$.x }`. \r\n\r\nConstructs such as `$$.x` currently are not possible in any context AFAIK.\r\n\r\n",
    "created_at": "2020-10-14T14:25:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708438688",
    "id": 708438688,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQzODY4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708438688/reactions"
    },
    "updated_at": "2020-10-14T14:25:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708438688",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I get the desire for the feature, but I don't think adding another automatic variable is the way to go (besides, `$$` already means something else; generally, introducing an automatic variable solely for a very specific scenario sounds problematic).\r\n\r\nThere is a _half_-ugly solution; perhaps it will do:\r\n\r\n```powershell\r\nPS> [ordered] @{\r\n  foo = ($foo = 'bar')\r\n  baz = 'foo' + $foo \r\n}\r\n\r\nName                           Value\r\n----                           -----\r\nfoo                            bar\r\nbaz                            foobar\r\n```",
    "created_at": "2020-10-14T15:11:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708468206",
    "id": 708468206,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ2ODIwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708468206/reactions"
    },
    "updated_at": "2020-10-14T15:11:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708468206",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "We could _potentially_ use `$this` for this kind of thing, but that too has a (lesser) potential to break something.",
    "created_at": "2020-10-14T15:15:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708470706",
    "id": 708470706,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ3MDcwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708470706/reactions"
    },
    "updated_at": "2020-10-14T15:15:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708470706",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> There is a half-ugly solution; perhaps it will do:\r\n\r\nMhm.... half-ugly ? :)\r\n\r\nBTW, this is possible in YAML and some extensions of JSON.\r\n\r\n> but I don't think adding another automatic variable is the way to go\r\n\r\nI doubt there is another way to go. This is basically `$this` but out of classes. One other solution that comes to mind is to allow usage of its own variable\r\n\r\n```ps1\r\n$this = @{\r\n   x = 1\r\n   y = $this.y\r\n}\r\n```\r\n\r\nThis is surprising but that is basically how YAML does it (&id and later *id). Maybe with some different syntax such as\r\n\r\n```ps1\r\n[HashTable($id)]@{\r\n   x = 1\r\n   y = $id.y\r\n}\r\n```\r\n\r\n",
    "created_at": "2020-10-14T15:19:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708473379",
    "id": 708473379,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ3MzM3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708473379/reactions"
    },
    "updated_at": "2020-10-14T15:19:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708473379",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "NONE",
    "body": "> We could _potentially_ use `$this` for this kind of thing, but that too has a (lesser) potential to break something.\r\n\r\n`$this` is just another variable. Any variable can break existing scritps including funky ones such as `${~}` .. .although it does seem that at least for ~ you cant call it as `$~`.",
    "created_at": "2020-10-14T15:20:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708474488",
    "id": 708474488,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ3NDQ4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708474488/reactions"
    },
    "updated_at": "2020-10-14T15:21:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708474488",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I meant half-_beautiful_ (just kidding).\r\n\r\nWhile this:\r\n\r\n> ```\r\n> $myHash = @{\r\n>    x = 1\r\n>    y = $myHash.y\r\n> }\r\n> ```\r\n\r\nwould solve the problem of needing an automatic variable, I think it would introduce a maintenance headache: it's too easy to change the variable name later _only in the assignment_, forgetting that it must also be changed in the _entries_.\r\n\r\n",
    "created_at": "2020-10-14T15:28:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708479132",
    "id": 708479132,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ3OTEzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708479132/reactions"
    },
    "updated_at": "2020-10-14T15:28:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708479132",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> BTW, this is possible in YAML and some extensions of JSON.\r\n\r\nMarkup languages don't have a lot of options though.  It's either force duplication or implement this. With PowerShell, you can already do this there just isn't any syntactic sugar for it.\r\n\r\n> One other solution that comes to mind is to allow usage of its own variable\r\n\r\nCould break if folks are shadowing variables:\r\n\r\n```powershell\r\n$that = @{ nah = 'test' }\r\n$that = @{\r\n    one = $that.nah\r\n}\r\n```\r\n\r\n---\r\n\r\nDo you have some examples of existing projects or use cases that would greatly benefit from this?",
    "created_at": "2020-10-14T15:32:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708481839",
    "id": 708481839,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ4MTgzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708481839/reactions"
    },
    "updated_at": "2020-10-14T15:32:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708481839",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The other variant - `[HashTable($id)] @{ ... }` - looks more promising (perhaps without the `$`, given that you're providing a variable _name_), because it would decouple the identifier used in the entries from the name of the receiving variable - but we'd also have to come up with a syntax for _ordered_ hashtables.\r\n\r\nWhile we already have one pseudo type literal in the context of hash literals - `[ordered]` - we should think about whether adding more is worth it.\r\n\r\n\r\n",
    "created_at": "2020-10-14T15:38:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708485819",
    "id": 708485819,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQ4NTgxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708485819/reactions"
    },
    "updated_at": "2020-10-14T15:40:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708485819",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> it's too easy to change the variable name later _only in the assignment_, forgetting that it must also be changed in the _entries_.\r\n\r\nLooks like a minor problem that can be minimized with some convention on variable name, like using all caps - If you change var with all caps, change it also in the HT body.\r\n\r\n> Do you have some examples of existing projects or use cases that would greatly benefit from this?\r\n\r\nYes I have, I keep my CICD configuration in gigant hashtable such as [this](https://github.com/chocolatey-community/chocolatey-coreteampackages/blob/master/update_all.ps1#L7) one. I needed that feature on it multiple times.\r\n\r\nHere is complete sample that could use this feature A LOT - actually, almost everything you see outside of HashTable is due to the this problem.\r\n\r\nHere is another one. \r\n\r\n<details><summary>Hash table with environment config</summary>\r\n\r\n```ps1\r\n$sapwd = Get-Secret production\\sa\r\n\r\n$SqlServerUsers = [ordered] @{ \r\n    Admin = 'sa', $sapwd\r\n    App   = 'sa', $sapwd\r\n}\r\n\r\n$OsUsers = [ordered]@{\r\n    Admin  = 'administrator', (Get-Secret production\\administrator)\r\n    Deploy = Get-Credential deploy\r\n}\r\n\r\n$env = New-Environment @{\r\n    Name          = $MyInvocation.MyCommand.Name.Replace('.ps1', '')\r\n    ServerEnvName = 'prod'\r\n    Description   = 'CIR Production Environment'\r\n\r\n    db = @{\r\n        DbLocation = 'db-remote'\r\n        SqlServer = @{ Users = $SqlServerUsers }\r\n        OS        = @{ Users = $OsUsers }\r\n    }\r\n\t\r\n    rest = @{\r\n        Port                    = 80     \r\n        DeployType  \t\t\t= 'IIS'\r\n        InstallDir  \t\t\t= 'C:\\inetpub\\wwwroot'\r\n\t\tWebApplicationName  \t= 'CirRest'\r\n        OS                      = @{ Users = $OsUsers }\r\n        UseSsl                  = $true\r\n    }\r\n\r\n    reporting = @{\r\n        Port                    = 80     \r\n        DeployType  \t\t\t= 'IIS'\r\n        InstallDir  \t\t\t= 'C:\\inetpub\\wwwroot'\r\n\t\tWebApplicationName  \t= 'CirReporting'\r\n        WebApplicationPoolName  = 'CirReporting'\r\n        OS                      = @{ Users = $OsUsers }\r\n\t\tUseSsl                  = $true\r\n    }\r\n\r\n    web = @{\r\n        Port                    = 80\r\n        InstallDir              = 'C:\\inetpub\\wwwroot'\r\n        OS                      = @{ Users = $OsUsers }\r\n    }\r\n\r\n    docs = @{\r\n        RootPath                = 'docs/user/'\r\n        OS                      = @{ Users = $OsUsers }\r\n    }\r\n\r\n    Metadata = @{ Notes = 'All roles are on separate servers except web and docs which share it' }\r\n\r\n} \r\n\r\n$env.docs.Server = $env.web.Server\r\n$env.docs.Port = $env.web.Port\r\n$env.docs.Server.ExternalHostname = $env.web.Server.ExternalHostname\r\n\r\n$env \r\n```\r\n</details>\r\n\r\n> The other variant - [HashTable($id)] @{ ... } - looks more promising (perhaps without the $, given that you're providing a variable name), because it would decouple the identifier used in the entries from the name of the receiving variable - but we'd also have to come up with a syntax for ordered hashtables.\r\n\r\n`[ordered][Hashtable(id)]` ?\r\n\r\nHashTable is awesome for configuration and this would make it even more awesome.",
    "created_at": "2020-10-14T16:42:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708523357",
    "id": 708523357,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODUyMzM1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708523357/reactions"
    },
    "updated_at": "2020-10-14T16:43:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708523357",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "NONE",
    "body": "_If_ something like this is implemented, I would consider a real (relative, e.g. `.\\foo`) _reference_ and _not a copy_, so that:\r\n* you actually can create and save a cyclic dependencies\r\n* you can reference more then just the _previously_ properties\r\n* resolve the \"Backward compatibility\" limitation\r\n* prevent possible infinitive loops when referring to top (or parent) of the current property:\r\n```PowerShell\r\n@{\r\n   foo = 'bar'\r\n   baz = 'foo' + $_\r\n}\r\n```\r\nBesides, the way it is presented, it will only work for the interpreter (strings) knowing that hash table keys are of type `[object]` (and not `[string]`):\r\n```PowerShell\r\n$Int = 1\r\n$String = '1'\r\n@{\r\n    $Int = 'Int'\r\n    $String = 'String'\r\n    baz = 'foo' + $_.1 # Which 1 ?\r\n}\r\n```",
    "created_at": "2020-10-14T17:55:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708564022",
    "id": 708564022,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODU2NDAyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708564022/reactions"
    },
    "updated_at": "2020-10-14T18:02:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708564022",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@majkinetor \r\n\r\nRegarding your example: Note that you're referencing entries _across different_ hashtables, even though they're all _nested_ inside a single hashtable; e.g., `$env.docs.Server = $env.web.Server`\r\n\r\nThe beauty-half-full approach can handle this:\r\n\r\n```powershell\r\n@{\r\n  web = ($web = @{ port = 80 })\r\n  docs = @{ port = $web.port }\r\n}\r\n```\r\nHowever, an automatic-variable-based solution cannot, as such a variable could only refer to the _immediately enclosing_ hashtable.\r\n\r\nGiven that @SeeminglyScience has demonstrated that the `$myHash = @{ foo=1; bar = $myHash.foo + 1 }` syntax would be a breaking change (and, as a moot aside, I wouldn't consider the renaming-the-variable-problem a minor one, I think it would become a source of many subtle bugs), that leaves us with the `[Hashtable(id)]` syntax or similar.\r\n\r\nA more concise form would be preferable, such as `@[id]{ ... }`; e.g.: \r\n\r\n```powershell\r\n@[main]{\r\n  foo = 1\r\n  bar = $main.foo + 1\r\n  web = @[web]{ port = 80 }\r\n  docs = @{ port = $web.port }\r\n}\r\n```\r\n\r\nUnfortunately, `@(id){...}` isn't an option because of the array-subexpression operator and neither is `@id{...}`, because in argument-parsing mode the `@id` part would be considered an instance of splatting; ditto for `@:id{...}`, surprisingly.\r\n\r\n_Some_ symbol that would currently result in a syntax error would be needed immediately after the `@`; another option is\r\n`@<id>{ ... }`, but it isn't great either.\r\n\r\n---\r\n\r\n@iRon7\r\n\r\nIf a (pseudo) variable were made available, the usual rules would apply, just as with the variable-based workaround.\r\nThis includes disambiguating between string and numeric keys: `$hash.1` gives you the `[string]` entry, `$hash[1]` the integer one.\r\n\r\nMy sense is that the primary use for this feature, especially in the context of configuration, would be in hashtables whose values are either .NET primitive types  or strings, where effectively getting _copies_ at declaration time works as intended (but the syntax won't prevent you from creating cyclic references, just like using regular variables won't; similarly, if your values are .NET reference types, multiple entries can end up pointing to the same instance).\r\n\r\nThe `System.Collections.Hashtable` / `System.Collections.Specialized.OrderedDictionary` types that PowerShell constructs from `@{ ... }` / `[ordered] @{ ... }` literals don't allow for references _between entries_ (I assume that's what you meant). It isn't the role of such syntactic sugar to add capabilities to the underlying types.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-10-14T18:30:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708583028",
    "id": 708583028,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODU4MzAyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708583028/reactions"
    },
    "updated_at": "2020-10-14T18:32:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708583028",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": ">   baz = 'foo' + $_.1 # Which 1 ?\r\n\r\nI was aware of this but it is minor limitation that can be documented or solved with convention that @mklement0 mentioned. Its completely not a reason to not implement it because of that. In case both string and numeric number exist as a key, one could be preferred (string probably).\r\n\r\n> However, an automatic-variable-based solution cannot, as such a variable could only refer to the immediately enclosing hashtable.\r\n\r\nTrue and explicit names offered before solve it elegantly . This is basically the same as your _beauty-half-full approach_ but without 'half-full' :) \r\n\r\n> A more concise form would be preferable, such as @[id]{ ... }\r\n\r\nI like this one a lot. \r\n\r\nSeems like explicit naming is most bullet proof suggestion so far, without breaking compatibility.\r\n\r\n ",
    "created_at": "2020-10-14T19:09:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-708603977",
    "id": 708603977,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODYwMzk3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708603977/reactions"
    },
    "updated_at": "2020-10-14T19:09:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/708603977",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/85767?v=4",
      "events_url": "https://api.github.com/users/majkinetor/events{/privacy}",
      "followers_url": "https://api.github.com/users/majkinetor/followers",
      "following_url": "https://api.github.com/users/majkinetor/following{/other_user}",
      "gists_url": "https://api.github.com/users/majkinetor/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/majkinetor",
      "id": 85767,
      "login": "majkinetor",
      "node_id": "MDQ6VXNlcjg1NzY3",
      "organizations_url": "https://api.github.com/users/majkinetor/orgs",
      "received_events_url": "https://api.github.com/users/majkinetor/received_events",
      "repos_url": "https://api.github.com/users/majkinetor/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/majkinetor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majkinetor/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/majkinetor"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Glad to hear it, @majkinetor, but there's trouble afoot: #5643 is coming back to life, and it proposes `@[ ... ]` as the syntax to create lists.\r\n\r\nThat leaves `@<id>{ ... }` or perhaps even `@=id{ ... }`\r\n\r\nGiven all this discussion, perhaps it makes sense if you closed this issue and opened a new one with a focused proposal that summarizes everything discussed so far.\r\n",
    "created_at": "2020-10-16T20:20:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13782#issuecomment-710558141",
    "id": 710558141,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13782",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMDU1ODE0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/710558141/reactions"
    },
    "updated_at": "2020-10-16T20:20:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/710558141",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
