[
  {
    "author_association": "COLLABORATOR",
    "body": "Have you looked at `$executioncontext.InvokeCommand.InvokeScript($false, {$x=3.14}, @(), @())`\r\nOne of the signatures for InvokeScript is\r\n`System.Collections.ObjectModel.Collection[psobject] InvokeScript(bool useLocalScope, scriptblock scriptBlock, System.Collections.IList input, Params System.Object[] args)`\r\nThis should do what you want.",
    "created_at": "2017-04-18T18:49:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3581#issuecomment-294943834",
    "id": 294943834,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3581",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk0MzgzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294943834/reactions"
    },
    "updated_at": "2017-04-18T18:49:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294943834",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Removed the enhancement/Up-for-grabs tags as there is already an API that does this. ",
    "created_at": "2017-04-18T18:53:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3581#issuecomment-294944896",
    "id": 294944896,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3581",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk0NDg5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294944896/reactions"
    },
    "updated_at": "2017-04-18T18:53:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294944896",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "It looks like that api covers most scenarios - but I vaguely recall a scenario, maybe LINQ filter expressions or something - where you have a script block, but maybe not have easy access to the execution context.",
    "created_at": "2017-04-18T18:55:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3581#issuecomment-294945643",
    "id": 294945643,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3581",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk0NTY0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294945643/reactions"
    },
    "updated_at": "2017-04-18T18:55:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/294945643",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "What said `InvokeScript` overload doesn't cover is the ability to **relay the current pipeline input object via automatic variable `$_`**, which is what's needed to be on par with how cmdlets such as `Where-Object` and `ForEach-Object` invoke script-block arguments.\r\n\r\n@PetSerAl came up with a robust workaround, but it's cumbersome and far from obvious: it uses an aux. `ForEach-Object` call to invoke the script block with the object to bind to `$_` passed via `-InputObject`.\r\n\r\nHere's an example of what currently works, but it would certainly be nice to have a more direct way of achieving this:\r\n\r\n```powershell\r\nAdd-Type @'\r\n  using System.Management.Automation;\r\n\r\n  [Cmdlet(\"Get\", \"Foo\")]\r\n  public class GetFooCmdlet : PSCmdlet {\r\n\r\n    [Parameter(ValueFromPipeline=true)]\r\n    public object InputObject { get; set; }\r\n\r\n    [Parameter(Position=0)]\r\n    public ScriptBlock ScriptBlock { get; set; }\r\n\r\n    private PowerShell _ps = null;\r\n\r\n    protected override void BeginProcessing() {\r\n      // Create a PS instance in the current runspace with a ForEach-Object invocation.\r\n      _ps = PowerShell.Create(RunspaceMode.CurrentRunspace).AddCommand(\"ForEach-Object\");\r\n    }\r\n\r\n    protected override void ProcessRecord() {\r\n      _ps.Commands.Commands[0].Parameters.Clear(); // clear previous parameters\r\n      // Add the script block and the current pipeline input object as parameters for the ForEach-Object call.\r\n      // ForEach-Object takes care of setting $_ in the scope of the target script block (passed to -Process), via\r\n      // -InputObject.\r\n      WriteObject(\r\n        _ps.AddParameter(\"Process\", ScriptBlock).AddParameter(\"InputObject\", InputObject).Invoke()\r\n      );\r\n    }\r\n\r\n  }\r\n'@ -PassThru | % Assembly | Import-Module\r\n\r\n# Define a local variable.\r\n$var = 42\r\n\r\n# Invoke the cmdlet with pipeline input and a scriptblock that references the\r\n# latter as well as local variable $var\r\n@{ Name = 'hi' }, @{ Name = 'ho' } | get-foo { $_.Name; ++$var } # -> 'hi', 'ho'\r\n# See if $var was changed.\r\n$var # -> 44 - successfully modified, because the scriptblock was \"dot-sourced\".\r\n```\r\n\r\nIt's actually easier to do this in PowerShell code, given that you can call `ForEach-Object` directly there - see [this SO answer](https://stackoverflow.com/a/53327851/45375).\r\n\r\nBy contrast, it's **easier to invoke a script block in a _child_ scope of the origin scope with pipeline input relayed as `$_`**, the way that delay-bind script blocks and script blocks inside calculated properties do )though [it's unclear if that is actually by design](https://github.com/PowerShell/PowerShell/issues/7157)) - see next comment.\r\n\r\n\r\n",
    "created_at": "2018-11-18T00:04:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3581#issuecomment-439656870",
    "id": 439656870,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3581",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY1Njg3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439656870/reactions"
    },
    "updated_at": "2019-01-23T15:50:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/439656870",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Invoking a caller-scope-bound script block in a _child_ scope - as delay-bind script blocks and calculated properties do - with the current pipeline input object relayed as `$_` looks like this (using PS code, with the script block stored in `$ScriptBock`, and the current pipeline input object in `$InputObject`):\r\n\r\n```powershell\r\n$ScriptBlock.InvokeWithContext(\r\n        $null, # extra functions to define\r\n        [psvariable]::new('_', $InputObject) # define $_\r\n      )\r\n```\r\n\r\nTo do the same _directly in the caller's scope_ - as `Where-Object` and `ForEach-Object` do - we'd need a new [`.InvokeWithContext()`](https://github.com/PowerShell/PowerShell/blob/0c2a8911d632069b63ec780afbbe527459cf4660/src/System.Management.Automation/engine/lang/scriptblock.cs#L434) overload that has a `useLocalScope` parameter too, as `.InvokeScript()` already does.\r\n\r\n```powershell\r\n$ScriptBlock.InvokeWithContext(\r\n        $false, # WISHFUL THINKING: opt into not creating a child scope.\r\n        $null, # extra functions to define\r\n        [psvariable]::new('_', $InputObject) # define $_\r\n      )\r\n```\r\n",
    "created_at": "2019-01-23T15:47:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3581#issuecomment-456852547",
    "id": 456852547,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3581",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Njg1MjU0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/456852547/reactions"
    },
    "updated_at": "2019-01-23T15:47:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/456852547",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
