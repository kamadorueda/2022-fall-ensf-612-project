[
  {
    "author_association": "COLLABORATOR",
    "body": "Consider `$null, $null, $null | %{ 1 }`. What would you expect to happen? How about `$null, $null | % { 1 }`? Now given the first two, what would the consistent behaviour for `$null | %{ 1 }` be?",
    "created_at": "2018-06-13T05:50:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-396821292",
    "id": 396821292,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjgyMTI5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396821292/reactions"
    },
    "updated_at": "2018-06-13T05:50:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396821292",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "NONE",
    "body": "@BrucePay With `$null, $null, $null | %{ 1 }` and `$null, $null | % { 1 }` the behavior is driven by the fact that an array is sent through the pipeline, irrespective of what is in the array, so the fact that those examples produce a `1` for each element of the array makes sense. \r\n\r\nIf I was saying that `@($null) | %{ 1 }` shouldn't produce output then your examples would be directly comparable but in my examples no array with given size (regardless of what it contains) is being created.\r\n\r\nTo be fair though my biggest beef is with the `$VarNotDefined | % {1}` scenario though I suspect that under the hood somewhere the `$null | % {1}` scenario is related to `$VarNotDefined | % {1}` and it still also feels wrong.",
    "created_at": "2018-06-13T12:06:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-396914347",
    "id": 396914347,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjkxNDM0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396914347/reactions"
    },
    "updated_at": "2018-06-13T12:10:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396914347",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2277702?v=4",
      "events_url": "https://api.github.com/users/ChrisMagnuson/events{/privacy}",
      "followers_url": "https://api.github.com/users/ChrisMagnuson/followers",
      "following_url": "https://api.github.com/users/ChrisMagnuson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisMagnuson/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ChrisMagnuson",
      "id": 2277702,
      "login": "ChrisMagnuson",
      "node_id": "MDQ6VXNlcjIyNzc3MDI=",
      "organizations_url": "https://api.github.com/users/ChrisMagnuson/orgs",
      "received_events_url": "https://api.github.com/users/ChrisMagnuson/received_events",
      "repos_url": "https://api.github.com/users/ChrisMagnuson/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ChrisMagnuson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisMagnuson/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ChrisMagnuson"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@ChrisMagnuson When sending the result of an expression evaluation into the pipeline, there is effectively an implicit `@( )` around the input such that `1 | % { 1 }` is equivalent to `@( 1 )  | % { 1 }`.\r\n\r\n> To be fair though my biggest beef is with the $VarNotDefined | % {1} scenario \r\n\r\nBy default, referencing an undefined variable results in `$null`. You can change this behaviour using the [`Set-StrctMode` cmdlet](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-5.1). ",
    "created_at": "2018-06-13T13:52:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-396945034",
    "id": 396945034,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njk0NTAzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396945034/reactions"
    },
    "updated_at": "2018-06-13T13:52:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396945034",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "NONE",
    "body": "@BrucePay If I understand properly, what `Set-StrictMode` will do is generate an error where as the behavior that is desired is to do nothing when a variable that doesn't exist is piped into the pipeline.\r\n\r\nThanks for the explanation about the implicit `@( )`.\r\n\r\nI still feel that the expected behavior listed initially is best for least astonishment.\r\n\r\nDo you have examples of where it is desirable that `$null | % {1}` executes the pipeline?",
    "created_at": "2018-06-13T14:30:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-396958587",
    "id": 396958587,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njk1ODU4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396958587/reactions"
    },
    "updated_at": "2018-06-13T14:31:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396958587",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2277702?v=4",
      "events_url": "https://api.github.com/users/ChrisMagnuson/events{/privacy}",
      "followers_url": "https://api.github.com/users/ChrisMagnuson/followers",
      "following_url": "https://api.github.com/users/ChrisMagnuson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisMagnuson/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ChrisMagnuson",
      "id": 2277702,
      "login": "ChrisMagnuson",
      "node_id": "MDQ6VXNlcjIyNzc3MDI=",
      "organizations_url": "https://api.github.com/users/ChrisMagnuson/orgs",
      "received_events_url": "https://api.github.com/users/ChrisMagnuson/received_events",
      "repos_url": "https://api.github.com/users/ChrisMagnuson/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ChrisMagnuson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisMagnuson/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ChrisMagnuson"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@ChrisMagnuson: Indeed, `Set-StrictMode -Version 1` and higher cause a _statement-terminating error_ when you reference an uninitialized variable, but don't allow you to change the _enumeration behavior_.\r\n\r\nThe only way to avoid enumeration of `$null` is to use the `foreach` _loop_ instead of the pipeline (e.g. `foreach($v in $null) { <# never entered #> }`) - a discrepancy that is in itself problematic, let alone that substituting one for the other is not always an option.\r\n\r\nOne way out of this would be to let uninitialized variables default to the \"null collection\", `[System.Management.Automation.Internal.AutomationNull]::Value` rather than to `$null`, given that this null collection is enumerated in neither scenario.  \r\n\r\nThat would still enumerate _explicit_ `$null` values (in the pipeline), but that is less problematic, given that commands must go out of their way to output `$null` (not producing any output implicitly results in `[System.Management.Automation.Internal.AutomationNull]::Value`).\r\n\r\nHowever, that would clearly be a breaking change.",
    "created_at": "2018-06-13T14:44:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-396963311",
    "id": 396963311,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njk2MzMxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396963311/reactions"
    },
    "updated_at": "2018-06-13T14:45:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/396963311",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Actually, that's not quite correct. @Mklement0 -- the first reference you make, to having the foreach loop use a straight $null, isn't quite analogous to the pipeline examples.\r\n```PowerShell\r\nforeach ($n in @($null)) { 1 }\r\n# is equivalent to\r\n$null | ForEach-Object { 1 }\r\n```\r\nBecause the pipeline is incapable of determining the difference between an array and a single object (because by default all arrays are passed as individual objects) it *has* to assume that the `$null` it's receiving is intentional and part of a collection, so it has to operate on it just like anything else. To the pipeline, there's no difference between `@($null)` and `$null`, so it has to behave the same for both.",
    "created_at": "2018-06-24T22:32:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-399793093",
    "id": 399793093,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTc5MzA5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/399793093/reactions"
    },
    "updated_at": "2018-06-24T22:32:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/399793093",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32:\r\n\r\nWhat this comes down to is _consistency_ and, as a corollary, _predictability_:\r\n\r\nBoth `<stmt> | ...` and `foreach ($var in <stmt>) { ... }` are _enumeration contexts_.\r\n\r\nIn PowerShell, this implies:\r\n\r\n* If `<stmt>` evaluates to something that already _is_ enumerable, enumerate it.\r\n\r\n* If it doesn't, _treat it like an enumerable_, and treat that something as the one and only member of the pretend-enumerable, _except_ if that \"something\" is the PS-specific \"null collection\" value whose very purpose is to signal that there is _nothing to enumerate_ (see below).\r\n\r\nNot treating these two enumeration contexts the same is an inconsistency that invites confusion and is hard to remember.\r\n\r\n---\r\n\r\nArguably, in the context of PowerShell:\r\n\r\n* `$null` is a _something_ that happens to _represent_ a \"single nothing\" and is therefore _enumerable_ - it corresponds to `null` in C#.\r\n\r\n* By contrast, `[System.Management.Automation.Internal.AutomationNull]::Value` is a PS-specific representation of an _enumerable_ that is _nothing in itself_ and _has no elements_: It is the \"null _collection_\" whose purpose is to signal \"I represent nothing - I am not an object myself (unless I'm forced to act as one (as a scalar), in which case I'll pretend to be `$null`), and enumerating me results in _no_ iterations\".  \r\nIt it is the \"value\" that commands that produce _no output_ implicitly \"return\".\r\n\r\n---\r\n\r\nTherefore,  _both_ the `foreach` loop _and_ the pipeline:\r\n\r\n* should treat `$null` as an enumerable and result in a _single iteration_ whose iteration variable is `$null`.\r\n\r\n* should result in _no_ iterations for `[System.Management.Automation.Internal.AutomationNull]::Value`, given that its very purpose is to signal that there is _nothing to enumerate_.\r\n\r\n---\r\n\r\nYet, these two contexts currently act differently with respect to _uninitialized variables_ (which default to `$null`), as the following example demonstrates:\r\n\r\n```powershell\r\nPS> foreach ($var in $noSuchVar) { 'inside the foreach loop' }; $noSuchVar | ForEach-Object { 'inside ForEach-Object' }\r\ninside ForEach-Object\r\n```\r\n\r\nThe `foreach` loop didn't enumerate anything, but the pipeline did:\r\n\r\n* It is the _pipeline_ that acts as expected here: given that uninitialized variables default to `$null`, it enumerates that `$null`.\r\n\r\n* Unexpectedly, the `foreach` loop does _not_ enumerate the `$null`.\r\n\r\n---\r\n\r\nThe same discrepancy happens with an _initialized_ variable that _happens to contain `$null`_:\r\n\r\n```powershell\r\nPS> $varThatIsNull = $null; foreach ($var in $varThatIsNull) { 'inside the foreach loop' }; $varThatIsNull | ForEach-Object { 'inside ForEach-Object' }\r\ninside ForEach-Object\r\n```\r\n\r\n---\r\n\r\nThe only time the discrepancy does _not_ surface is by _direct use of a command_ that outputs `$null`:\r\n\r\n```powershell\r\nPS> foreach ($var in & { $null }) { 'inside the foreach loop' }; & { $null } | ForEach-Object { 'inside inside the foreach loop' }\r\ninside the foreach loop\r\ninside inside the foreach loop\r\n```\r\n\r\nNote how the `foreach` loop now too enumerated the `$null` output by the script block.\r\n\r\nThis is the subject of #5674, though the OP there is looking for the opposite behavior: they want `foreach` not to enumerate in this case either.\r\n\r\n---\r\n\r\nAgain: These inconsistencies could be resolved if:\r\n\r\n*  both the `foreach` loop _and_ the pipeline consistently enumerate `$null`\r\n\r\n* if uninitialized variables default to `[System.Management.Automation.Internal.AutomationNull]::Value` rather than `$null`.\r\n\r\nRemember that `$null -eq $noSuchVar` would continue to work, because, as stated, `[System.Management.Automation.Internal.AutomationNull]::Value` acts like `$null` when forced into a scalar context (try `$null -eq (& {})` - `& {}` being the simplest statement that produces a `[System.Management.Automation.Internal.AutomationNull]::Value` value).\r\n\r\nNote that reversing the operands should arguably work differently, given that `[System.Management.Automation.Internal.AutomationNull]::Value` should be considered an _enumerable_ (array-valued) LHS, but `(& {}) -eq $null` does currently return `$True`, i.e., treats `[System.Management.Automation.Internal.AutomationNull]::Value` as a _scalar_\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/3866#issuecomment-304764165 discusses this and shows that the current behavior is inconsistent in that the behavior varies depending on the operator used.\r\n\r\nWhile it would be warranted from a consistency perspective, making `$noSuchVar -eq $null` return `@()` - i.e., treating the `[System.Management.Automation.Internal.AutomationNull]::Value` LHS as array-valued - would be a massively breaking change, because existing code that relies on such conditionals to return `$True` (whether explicitly or not) would break.\r\n\r\n---\r\n\r\nAs another (farther) aside: #6823 is another example of inconsistent use of `$null` vs. `[System.Management.Automation.Internal.AutomationNull]::Value`.\r\n\r\n",
    "created_at": "2018-06-25T01:51:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7049#issuecomment-399808799",
    "id": 399808799,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7049",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTgwODc5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/399808799/reactions"
    },
    "updated_at": "2019-06-04T07:37:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/399808799",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
