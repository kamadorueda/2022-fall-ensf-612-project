[
  {
    "author_association": "COLLABORATOR",
    "body": "By default PowerShell convert to signed values. Workaround:\r\n```powershell\r\n[uint32]\"0xffffffff\"\r\n```",
    "created_at": "2017-03-13T03:55:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286010300",
    "id": 286010300,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjAxMDMwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286010300/reactions"
    },
    "updated_at": "2017-03-13T03:55:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286010300",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "I am aware of the workaround. It tends to breakdown when you move away from the simple repro steps I added here, and try to use expressions, pass parameters to functions or scripts, or use in classes. It basically forces me to not only pay attention to unwanted conversions to [int], but also add convert back and forth to [string] into the mix.\r\n\r\nAny other language I know knows to upcast numbers to the next type that fits. If the given value does not fit in an int32, PowerShell should upcast it to [uint32]. Or to [int64], if it really wants to use signed.\r\n\r\nParticularly for uint64 this makes no sense:\r\n\r\n0x00000000 - 0x7fffffff works\r\n0x80000000 - 0xffffffff throws\r\n0x0000000100000000 - 0xffffffffffffffff works again\r\n\r\nFor consistency, I would expect anything above 0x7fffffffffffffff to also throw, because the signed [int64] cannot take it. But here PowerShell knows to silently convert to [uint64]. Why doesn't it know the same for 0x80000000?",
    "created_at": "2017-03-13T16:14:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286157190",
    "id": 286157190,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjE1NzE5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286157190/reactions"
    },
    "updated_at": "2017-03-13T16:14:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286157190",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26367920?v=4",
      "events_url": "https://api.github.com/users/viorel-m/events{/privacy}",
      "followers_url": "https://api.github.com/users/viorel-m/followers",
      "following_url": "https://api.github.com/users/viorel-m/following{/other_user}",
      "gists_url": "https://api.github.com/users/viorel-m/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/viorel-m",
      "id": 26367920,
      "login": "viorel-m",
      "node_id": "MDQ6VXNlcjI2MzY3OTIw",
      "organizations_url": "https://api.github.com/users/viorel-m/orgs",
      "received_events_url": "https://api.github.com/users/viorel-m/received_events",
      "repos_url": "https://api.github.com/users/viorel-m/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/viorel-m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viorel-m/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/viorel-m"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I suppose the \"0x\" prefix to be enough to correct the behavior.",
    "created_at": "2017-03-13T17:07:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286174518",
    "id": 286174518,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjE3NDUxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286174518/reactions"
    },
    "updated_at": "2017-03-13T17:07:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286174518",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "PowerShell arithmetic is complicated with all of the implicit type conversions, implicit widening, etc. We decided not to include unsigned in V1 because it would have made the algorithm significantly more complicated (this was probably a mistake). Anyway, as an alternate workaround, you can use the 'l' long suffix to force 64 bit integers in your constants as in:\r\n`[uint32]$b = 0xffffffffl`\r\nwhich works as you'd expect.",
    "created_at": "2017-03-13T22:30:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286264116",
    "id": 286264116,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjI2NDExNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286264116/reactions"
    },
    "updated_at": "2017-03-13T22:30:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286264116",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "We would carry out the necessary cast at parse time in the case of the following notation:\r\n```powershell\r\n$var = [uint32] 123\r\n$var = [decimal] 123\r\n...\r\n```",
    "created_at": "2017-03-14T04:20:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286318253",
    "id": 286318253,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjMxODI1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286318253/reactions"
    },
    "updated_at": "2017-03-14T04:20:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286318253",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thank you both for the suggestions!\r\nMy example uses constants because I wanted to simplify the repro. For the real project I read an uint64 value from a binary file. The value is a bit field of 64 flags and I want to translate them to strings. Like 0x9 would translate to (\"alpha\", \"delta\") where alpha=0x1 and delta=0x8, for example.\r\nBecause of this issue I'm complaining about, writing the script is unnecessarily complicated. I spent more time trying to fix it than to actually write it.\r\n\r\n(Thanks for the tip with the 'l' suffix - I didn't know it. I checked and there is a 'd' suffix as well, for decimal.)",
    "created_at": "2017-03-15T04:06:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286635483",
    "id": 286635483,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYzNTQ4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286635483/reactions"
    },
    "updated_at": "2017-03-15T04:06:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286635483",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26367920?v=4",
      "events_url": "https://api.github.com/users/viorel-m/events{/privacy}",
      "followers_url": "https://api.github.com/users/viorel-m/followers",
      "following_url": "https://api.github.com/users/viorel-m/following{/other_user}",
      "gists_url": "https://api.github.com/users/viorel-m/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/viorel-m",
      "id": 26367920,
      "login": "viorel-m",
      "node_id": "MDQ6VXNlcjI2MzY3OTIw",
      "organizations_url": "https://api.github.com/users/viorel-m/orgs",
      "received_events_url": "https://api.github.com/users/viorel-m/received_events",
      "repos_url": "https://api.github.com/users/viorel-m/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/viorel-m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viorel-m/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/viorel-m"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I don't agree that we should convert negative numbers to unsigned values via a simple cast - we can't infer intent from values:\r\n\r\n```PowerShell\r\n0xffffffff, -1 | % { [uint64]$_ }\r\n```\r\n\r\nDespite the syntax, PowerShell doesn't have the notion of an explicit conversion - all conversions are implicit. So in that sense, allowing this conversion with this syntax would be unsafe.\r\n\r\nEven if we allowed the conversion from a i32 to u64, I don't think it would behave how you want - it would sign extend before changing types - this is how languages like C or Rust work.\r\n\r\nIf your code is reading a file, I would suggest using something like `[System.BitConverter]::ToUInt64($bytes, 0)`.\r\n\r\nIf you have fewer bytes in the file than the ultimate type, you can use `ToUint32` and that will properly zero-extend to u64 without any complaints from PowerShell.",
    "created_at": "2017-03-15T15:24:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-286777082",
    "id": 286777082,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc3NzA4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286777082/reactions"
    },
    "updated_at": "2017-03-15T15:24:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/286777082",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'm not sure how this addresses my problem. I don't want to use signed. I don't need signed. I would gladly use unsigned all the way. Except, as you say, powershell does things under the covers, like converting to [int], whether I like it or not, and outside of my control.\r\nWhen I say [uint32] $b = 0xffffffff it's pretty clear to me that I mean to use [uint32]. If I wanted signed I would have said $b = -1.\r\nI don't know about Rust, but in C/C++ when I say UINT64 c = 0xffffffff the result is 0x00000000ffffffff and not 0xffffffffffffffff, or an exception thrown.\r\n\r\nTo give another example where powershell gets in the way with its obsession with [int]:\r\n\r\n$a = @{};\r\n$a.Add(0, 'Zero');\r\n$a.Add(1, 'One')\r\n\r\n$a[0]\r\n**Zero**\r\n\r\n[uint32] $b = 0\r\n$a[$b]\r\n**Nothing**\r\n\r\n$a[[int]$b]\r\n**Zero**\r\n\r\nYou may argue that this is by some sort of design - but you cannot argue that this is very error prone.\r\n\r\nThere used to be another bug, where switch($b) wouldn't match if $b was [byte] or [uint32] - only when $b was [int]. I don't see this repro-ing anymore, so I guess it was fixed.\r\n",
    "created_at": "2017-03-18T21:26:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-287576027",
    "id": 287576027,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzU3NjAyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/287576027/reactions"
    },
    "updated_at": "2017-03-18T21:26:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/287576027",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26367920?v=4",
      "events_url": "https://api.github.com/users/viorel-m/events{/privacy}",
      "followers_url": "https://api.github.com/users/viorel-m/followers",
      "following_url": "https://api.github.com/users/viorel-m/following{/other_user}",
      "gists_url": "https://api.github.com/users/viorel-m/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/viorel-m",
      "id": 26367920,
      "login": "viorel-m",
      "node_id": "MDQ6VXNlcjI2MzY3OTIw",
      "organizations_url": "https://api.github.com/users/viorel-m/orgs",
      "received_events_url": "https://api.github.com/users/viorel-m/received_events",
      "repos_url": "https://api.github.com/users/viorel-m/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/viorel-m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viorel-m/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/viorel-m"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Many years ago, I worked on C++ compilers, and I always felt hexadecimal literals should never be signed, so I agree with you.\r\n\r\nIn C++, a hex literal can be either an `int` or `unsigned int` depending on the value. I was never a fan of that design, but implicit conversions and the `u` suffix make it mostly not a big deal.\r\n\r\nPowerShell is missing the `u` suffix and we need to be more cautious with conversions because they are so permissive and there is no distinction between implicit and explicit conversions.\r\n\r\nIf you're curious about Rust, here is a simple program:\r\n\r\n```Rust\r\nfn main() {\r\n    let val = 0xffffffff;\r\n    let val2: u64 = val as u64;\r\n    println!(\"{}\", val2);\r\n}\r\n```\r\n\r\nYou can run it here: https://play.rust-lang.org/\r\n\r\nThe compiler issues a warning and prints out the sign extended value.\r\n\r\n```\r\nrustc 1.16.0 (30cf806ef 2017-03-10)\r\nwarning: literal out of range for i32, #[warn(overflowing_literals)] on by default\r\n --> <anon>:2:15\r\n  |\r\n2 |     let val = 0xffffffff;\r\n  |               ^^^^^^^^^^\r\n\r\n18446744073709551615\r\n```\r\n\r\nMy point in bringing up Rust is that it is also a popular language and seems to have chosen consistency (always an i32) instead of sometimes unsigned. Again, I think it would be better to use an unsigned type for hex literals.\r\n\r\nAs for your `hashtable` example, I've seen people hit the same problem with strings instead of integers, and I've seen problems in C#, so it's more the unsafe nature of weakly typed keys of `hashtable` than anything else.",
    "created_at": "2017-03-19T06:23:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-287597415",
    "id": 287597415,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzU5NzQxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/287597415/reactions"
    },
    "updated_at": "2017-03-19T06:23:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/287597415",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Like C++, C# also chooses `int` / `Int64` or `uint` / `UInt64`  based on the value of a [hex] literal.\r\n\r\nWhile the approaches differ - Rust sticks with `int`, but warns if the result would be a negative number - what these languages have in common is that **they honor the fundamental user expectation that a [hex] literal specified without a sign result in a _positive_ number**.\r\n\r\nBy contrast, **PowerShell's current behavior depends on whether the literal is in _hex_ or _decimal_ format** (base-10 representation, not the `[decimal]` data type):\r\n\r\n* With _decimal_ literals, the expectation is honored: the type is chosen so that the value fits _as a positive number_ into an - always _signed_ - integer type, and the type chosen goes even beyond `[int64]`, up to `[decimal]` and, ultimately, `[double]`.\r\n\r\n    * On a side note, I found the following discrepancy surprising (`2147483648` is `[int32]::MaxValue + 1`):  \r\n`(2147483648).GetType().Name` yields `Int64`, as expected: the smallest signed type that can accommodate the value.  \r\nIf you use an _expression_ with the same value, the type instantly widens to `[Double]` rather than `[Int64]`:  \r\n`(2147483647 + 1).GetType().Name` yields `Double`.\r\n\r\n\r\n* With _hexadecimal_ literals, the value is unexpectedly treated like a _bit pattern_: the  always _signed_ target type is chosen based on whether it can _accommodate all bits_, _even if the resulting number is negative_.   \r\nThat is, whenever the bit pattern happens to have the high bit set in the resulting data type, a negative number results.\r\nUnlike with _decimal_ literals,  `[int64]` is the largest type supported in this case.\r\n\r\n**Perhaps v6 is an opportunity to fix this problem**, a change that probably falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area).  \r\n\r\nAs for how this can be done:\r\n\r\n* If hex literals are treated the same as decimal literals - always resulting in _signed_ types - the range `0x8000000000000000` to `0xffffffffffffffff` becomes unavailable, given that widening to `[decimal]` probably makes no sense for values that are presumed to be bit fields.\r\n\r\n* Perhaps hex literals could therefore truly be converted to _unsigned_ types, assuming that PowerShell's type-conversion magic prevents any ill follow-on effects.\r\n\r\nI presume that generally introducing an `u` suffix is a more problematic change in terms of backward compatibility.\r\n\r\n@viorel-m-git \r\n\r\n> I would expect anything above 0x7fffffffffffffff to also throw, because the signed [int64] cannot take it. But here PowerShell knows to silently convert to [uint64].\r\n\r\nI don't think that's happening : PowerShell _never_ implicitly converts to `[uint64]`.  Values between `0x8000000000000000` (`0x7fffffffffffffff + 1`)  and `0xffffffffffffffff` are converted to `[int64]` (signed) and result in _negative_ values (`-9223372036854775808` and `-1`, respectively).\r\n",
    "created_at": "2017-04-25T17:22:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-297103481",
    "id": 297103481,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzEwMzQ4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/297103481/reactions"
    },
    "updated_at": "2018-09-03T14:55:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/297103481",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "/cc @vexx32  \r\n\r\nI think the discussion should considered by PowerShell Committee too with #7557 \r\n/cc @SteveL-MSFT ",
    "created_at": "2018-09-03T11:49:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-418091864",
    "id": 418091864,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODA5MTg2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418091864/reactions"
    },
    "updated_at": "2018-09-03T11:53:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418091864",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Thanks for digging this up! I think... Yeah, I think I pretty much have covered all these cases in #7575.\n\nHigh-bit hex numbers still get treated as negative, but you can specify the `u` suffix to parse them as large unsigned numbers.\n\nHowever, that works only up to uint64, because there are no larger unsigned types to work with. I'm not sure how to deal with a sign bit there, to be honest, but I think at the moment I permit the signed bit for decimals to be used.\n\nWhether that makes the most sense... I can't really say. It does progress to big integer after that if you attempt to go *really* high, but dealing with a sign bit in that range is essentially meaningless, really. I'm tempted to just have it parse all super large hex literals as always positive (which can then just be prefixed with a negative sign to invert them), but I'm not sure.",
    "created_at": "2018-09-03T12:00:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-418094372",
    "id": 418094372,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODA5NDM3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418094372/reactions"
    },
    "updated_at": "2018-09-03T12:00:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418094372",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this.  By default, all number literals are signed in PowerShell.  We would accept a proposal to introduce a `u` suffix to indicate unsigned numeric literals.",
    "created_at": "2018-09-19T22:38:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3313#issuecomment-422981663",
    "id": 422981663,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3313",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjk4MTY2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/422981663/reactions"
    },
    "updated_at": "2018-09-19T22:38:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/422981663",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  }
]
