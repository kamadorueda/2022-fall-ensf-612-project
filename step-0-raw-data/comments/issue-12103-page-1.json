[
  {
    "author_association": "COLLABORATOR",
    "body": "It is a fact that we convert all input objects to Double. It is by-design and it is a compromise because in general we don't know object types in pipeline.",
    "created_at": "2020-03-12T05:58:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598020499",
    "id": 598020499,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODAyMDQ5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598020499/reactions"
    },
    "updated_at": "2020-03-12T05:58:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598020499",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov, I understand that there's no trivial solution, but the current behavior is clearly both surprising and unhelpful:\r\n\r\n```powershell\r\nPS> (10000000000000199 | Measure-Object -Sum).Sum\r\n1.00000000000002E+16\r\n```\r\n\r\nCasting to `[bigint]` shows that precision was lost; that is, _the summation doesn't work as intended, and you may not even notice_:\r\n\r\n```powershell\r\nPS> [bigint] (10000000000000199 | Measure-Object -Sum).Sum\r\n10000000000000200\r\n```",
    "created_at": "2020-03-12T10:09:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598106224",
    "id": 598106224,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODEwNjIyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598106224/reactions"
    },
    "updated_at": "2020-03-12T10:09:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598106224",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I understand that there's no trivial solution\r\n\r\nI can't think of anything better than explicit type conversion of input object (property) like -AsType [type].\r\n",
    "created_at": "2020-03-12T10:31:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598115102",
    "id": 598115102,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODExNTEwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598115102/reactions"
    },
    "updated_at": "2020-03-12T10:31:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598115102",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "`Get-Random` does some manual type figuring-out for numbers. It's plausible we could adopt a similar approach in Measure-Object, type the parameter as `object` and then verify the type is a supported one as it comes in.",
    "created_at": "2020-03-12T15:10:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598241702",
    "id": 598241702,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODI0MTcwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598241702/reactions"
    },
    "updated_at": "2020-03-12T15:10:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598241702",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Agreed in principle, @vexx32, but note that it's not about _parameters_ in this case, but about the numeric types encountered in the input.\r\n\r\nI think we need something like the automatic type widening (promotion) found in PowerShell's number-literal parsing, where you start with the type of the first number type encountered in the input and widen as needed during processing:\r\n\r\nFor integer input types:\r\n\r\n`int` -> `long` -> `decimal` -> `double`\r\n\r\nEncountering a `[double]` (or the rarely used `[float]`) in the input would instantly switch to `[double]`. `-Average` and `-StandardDeviation` still have to output the _final result_ as a `[double]`.\r\n\r\nAs an aside: there's a troubling inconsistency between type-widening in _number-literal parsing_ and _calculations_ (in expressions that don't use _casts_):\r\n\r\n```powershell\r\n# A number literal that is beyond [long]::MaxValue is promoted to [decimal]\r\n# The number below is [long]::MaxValue + 1 (cast to [decimal] to see the precise value)\r\nPS> (9223372036854775808).GetType().Name\r\nDecimal\r\n```\r\n\r\n```powershell\r\n# Performing the equivalent as a *calculation* promotes to [double], \r\n# with loss of precision.\r\nPS> ([long]::MaxValue + 1).GetType().Name\r\nDouble # !!\r\n```\r\n\r\nThus, with implicit type conversions you may lose precision without realizing it; consider the difference between:\r\n\r\n```powershell\r\n# OK - LHS forced to [decimal] preserves [decimal]\r\nPS> [decimal] [long]::MaxValue +1\r\n9223372036854775808\r\n```\r\n\r\nand:\r\n\r\n```powershell\r\n# !! Implicit calculation coerces to [double] with precision loss, which the subsequent\r\n# !! [decimal] cast cannot recover.\r\nPS> [decimal] ([long]::MaxValue +1)\r\n9223372036854780000 # !! Loss of precision\r\n```\r\n\r\n@vexx32, @SeeminglyScience, any thoughts?\r\n\r\nObviously, changing fundamental behavior like that would be extremely fraught.",
    "created_at": "2020-03-12T19:46:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598381459",
    "id": 598381459,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODM4MTQ1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598381459/reactions"
    },
    "updated_at": "2020-03-12T19:46:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598381459",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "My initial inclination is to avoid widening to double unless we get input that is either `float` or `double` and instead widen from `int64` to `BigInteger` as that'll get us more directly representative results. For `decimal` inputs, widening to `double` does make more sense, despite the loss of precision.\r\n\r\nA property like `Count` on Measure-Object, for example, could definitely stand to be `BigInteger` on the high end since a `double`-type Count isn't especially meaningful; all it gives you is a rough order of magnitude if you have enough objects. Other properties could, too, but it would be more dependent on the format the data is input in.\r\n\r\nAs for the inconsistencies between parsing and calculations -- I tend to think they should behave pretty similarly. Part of the trouble there is likely that .NET's default widening behaviours don't _quite_ match PowerShell's (at least where the parsing is concerned). Whether that should / could be addressed in a reasonable manner, I'm not sure. It would probably take a fair bit of tinkering around with LanguagePrimitives and the conversion methods there, plus I'm sure a good deal of manual work in the arithmetic operator binders.",
    "created_at": "2020-03-13T00:18:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598487876",
    "id": 598487876,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQ4Nzg3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598487876/reactions"
    },
    "updated_at": "2020-03-13T00:19:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598487876",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "`Measure-Object` returns a specific type: `Microsoft.PowerShell.Commands.GenericMeasureInfo` which defines the fields as follows:\r\n```PowerShell\r\n  System.Nullable`1[System.Double] Average\r\n  System.Nullable`1[System.Double] Sum\r\n  System.Nullable`1[System.Double] Maximum\r\n  System.Nullable`1[System.Double] Minimum\r\n```\r\nThis is why everything comes out as double. \"Fixing\" this would require changing the type of the returned object and that would be a breaking change.\r\n",
    "created_at": "2020-03-13T16:21:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598804284",
    "id": 598804284,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgwNDI4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598804284/reactions"
    },
    "updated_at": "2020-03-13T16:21:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598804284",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @bpayette, so - unfortunately - it would have to be an _opt-in enhancement_ via a parameter, say a `-AsAutoNumber` switch (just a first suggestion, struggling to come up with a good name), similar to what @iSazonov proposed, though the idea would be to not have to ask for a specific type and let the widening algorithm pick the appropriate type.\r\n\r\n@vexx32, agreed re `float` and `double` (in line with what I proposed), and also re `[bigint]`.\r\n\r\n---\r\n\r\nRe  for the inconsistencies between parsing and calculations: I think PowerShell's number-literal parsing is  fine (albeit different from C#'s); it's the calculation behavior of any-result-larger-than-[long]::MaxValue-becomes-a-[double] that I find troubling, but I'll take this topic elsewhere.\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-13T19:38:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598882269",
    "id": 598882269,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODg4MjI2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598882269/reactions"
    },
    "updated_at": "2020-03-13T19:38:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598882269",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I think PowerShell's number-literal parsing is fine\r\n\r\nGlad to hear it, I'd hate to have to rewrite it again 😂 ",
    "created_at": "2020-03-13T19:40:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598883028",
    "id": 598883028,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODg4MzAyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598883028/reactions"
    },
    "updated_at": "2020-03-13T19:40:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598883028",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> the idea would be to not have to ask for a specific type and let the widening algorithm pick the appropriate type\r\n\r\nI do not think this is reliable. Also it complicates too the code. I think in real scenarios long type is enough.",
    "created_at": "2020-03-13T20:35:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598900896",
    "id": 598900896,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODkwMDg5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598900896/reactions"
    },
    "updated_at": "2020-03-13T20:35:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598900896",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I do not think this is reliable. \r\n\r\nIn what way would it not be reliable?\r\n\r\n>  I think in real scenarios long type is enough.\r\n> I think in real scenarios long type is enough.\r\n\r\nSee https://stackoverflow.com/a/60609025/45375, for example.\r\n\r\nThe inputs _are_ `[long]`s, but the invariable conversion to `[double]` causes loss of precision for `[long]`s beyond `9007199254740991`, which is particularly insidious in this case, given that you'd never expect `-Maximum` to _modify the value_:\r\n\r\n```powershell\r\nPS> [bigint] (132273694413991065 | Measure-Object -Maximum).Maximum\r\n132273694413991072  # !! Different number, to lossy conversion to [double]\r\n```\r\n\r\n(Strictly speaking, no _widening_ is required in this case - only _preservation_ of the input type).\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/60598648/how-to-prevent-powershells-measure-object-cmdlet-from-truncating-your-data\">How to prevent PowerShell's Measure-Object cmdlet from truncating your data?</a></strong></div><div>I am tryng to compare the following data to obtain the largest number:\n\n$UserDeets \n\nname                 lastLogon\n----                 ---------\nFrank Ti 132273694413991065\nFrank Ti 1322797428841...</div></blockquote>",
    "created_at": "2020-03-13T20:49:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598905467",
    "id": 598905467,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODkwNTQ2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598905467/reactions"
    },
    "updated_at": "2020-03-13T20:49:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/598905467",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": ">I do not think this is reliable.\r\n> In what way would it not be reliable?\r\n\r\n:-) https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-598883028 Do you want to ask @vexx32 ? :-) \r\nWe could switch to BigInt but we lost performance. The same is for Dynamic type. I do not think that we'd want this.\r\n\r\nI don't understand your stackoverflow example. My thought is to keep double type by default and add new parameter to switch to long type for inputs and results.",
    "created_at": "2020-03-14T04:48:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-599011414",
    "id": 599011414,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTAxMTQxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599011414/reactions"
    },
    "updated_at": "2020-03-14T04:48:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599011414",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I wasn't aware `Measure-Object` was a performance-critical scenario. 😉 \r\n\r\nPersonally I think it makes the most sense to adopt the widest / least precise _input_ type for the overall output. Most likely, this would mean the actual class property would have to be `Object` or at least `ValueType` (can you make properties ValueType? I feel like I remember that's not really allowed or something).",
    "created_at": "2020-03-14T05:04:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-599012545",
    "id": 599012545,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTAxMjU0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599012545/reactions"
    },
    "updated_at": "2020-03-14T05:04:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599012545",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov \r\n\r\n> Do you want to ask @vexx32 ? :-)\r\n\r\nThe number-literal parsing is entirely incidental to this issue - the only reason I mentioned is that it is an instance of where we already perform automatic, helpful widening of types on demand.\r\n\r\n> We could switch to BigInt but we lost performance. The same is for Dynamic type. I do not think that we'd want this.\r\n\r\nWe don't need a dynamic type, and whether `[bigint]` is needed depends on the specifics of the input.\r\n\r\nAnd I agree with @vexx32  that performance shouldn't be the deciding factor here - see below.\r\n\r\n> I don't understand your stackoverflow example. \r\n\r\nIt was simply meant to show that the current (invariable) behavior is problematic in real-life situations; the `[bigint] (132273694413991065 | Measure-Object -Maximum).Maximum` example by itself illustrates the problem well enough, I think.\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-14T23:03:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-599145570",
    "id": 599145570,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTE0NTU3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599145570/reactions"
    },
    "updated_at": "2020-03-14T23:05:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/599145570",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@bpayette, I just noticed that the properties you quoted are from the <del>obsolete</del> ([see below](https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600052852)) [`Microsoft.PowerShell.Commands.GenericMeasureInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.GenericMeasureInfo) class, which was replaced by [`Microsoft.PowerShell.Commands.GenericObjectMeasureInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.GenericObjectMeasureInfo), precisely to fix the following (emphasis added):\r\n\r\n> **This class is created for fixing \"Measure-Object -MAX -MIN should work with ANYTHING that supports CompareTo\"**\r\nGenericMeasureInfo class is shipped with PowerShell V2. Fixing this bug requires, changing the type of Maximum and Minimum properties which would be a breaking change. Hence created a new class to not have an appcompat issues with PS V2.\r\n\r\nIn short, properties `Maximum` and `Minimum` are already `System.Object`-typed, so also applying the preservation of the input type during `-Minimum` and `-Maximum` operations to numeric types should be considered a _bug fix_.\r\n\r\n@iSazonov, can you please label this as a bug?\r\n\r\nAnd while supporting type widening for all properties is still worth considering - see #12141 -  I think this fix alone will eliminate most currently problematic real-world scenarios.\r\n\r\n---\r\n\r\n@vexx32, even though I've personally never seen it in the wild, it is indeed possible to create  `ValueType` properties, and the docs even provide an example; see https://docs.microsoft.com/en-US/dotnet/api/System.ValueType; aside from being somewhat self-documenting and ensuring that only value types can be assigned / returned, working with `ValueType` instances _directly_ has many limitations: not all value types are numbers, you can't perform arithmetic directly with `ValueType` instances, you can't use `stackalloc` or obtain pointers to them, ...\r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.valuetype\">ValueType Class (System)</a></strong></div><div><p sourcefile=\"api/System.ValueType.yml\" sourcestartlinenumber=\"1\" jsonPath=\"/summary\">Provides the base class for value types.</p>\r\n</div></blockquote>",
    "created_at": "2020-03-17T12:15:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600038537",
    "id": 600038537,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDAzODUzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600038537/reactions"
    },
    "updated_at": "2020-03-17T12:52:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600038537",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @bpayette, I just noticed that the properties you quoted are from the obsolete [`Microsoft.PowerShell.Commands.GenericMeasureInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.GenericMeasureInfo) class, which was replaced by [`Microsoft.PowerShell.Commands.GenericObjectMeasureInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.GenericObjectMeasureInfo)\r\n\r\nDoesn't look like `Measure-Object` is using it :/\r\n\r\n> @vexx32, even though I've personally never seen it in the wild, it is indeed possible to create `ValueType` properties\r\n\r\nYou don't see it much because it's basically the same as typing it as `object`.  It's still boxed, and afaik doesn't really buy you anything other than documenting that a struct or primitive is expected.",
    "created_at": "2020-03-17T12:31:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600044916",
    "id": 600044916,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDA0NDkxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600044916/reactions"
    },
    "updated_at": "2020-03-17T12:31:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600044916",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @SeeminglyScience - I didn't notice that it's only used _selectively_, with _non-numeric_ (but comparable) input when `-Minimum` or `-Maximum` are used:\r\n\r\n```powershell\r\n# No -Min / -Max -> GenericMeasureInfo (for all input types)\r\nPS> ('a', 'b' | Measure-Object -Maximum).GetType().Name\r\nGenericMeasureInfo\r\n\r\n# Non-numeric type, with -Min / -Max -> GenericObjectMeasureInfo\r\nPS> ('a', 'b' | Measure-Object -Maximum).GetType().Name\r\nGenericObjectMeasureInfo\r\n```\r\n\r\nSo the fix would be to _always_ output `GenericObjectMeasureInfo` when `-Minimum` and / or `-Maximum` are used.\r\n\r\nI'm hoping that said change, which is conceptually undoubtedly a bug fix, falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area), but I'm not sure I have the full picture. Any thoughts?\r\n\r\n",
    "created_at": "2020-03-17T12:50:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600052852",
    "id": 600052852,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDA1Mjg1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600052852/reactions"
    },
    "updated_at": "2020-03-17T12:54:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600052852",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "😬 That fix is janky enough as it is, to be outputting a different type from a switch like that, given the original class already has those members, no?\r\n\r\nSeems like there may be much to gain and little to lose from replacing them both with a more useful type overall. 🤔 \r\n\r\nYou'll note that the `Sum` property of even the newer class is still `Nullable<double>`.",
    "created_at": "2020-03-17T12:52:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600053516",
    "id": 600053516,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDA1MzUxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600053516/reactions"
    },
    "updated_at": "2020-03-17T12:54:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600053516",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Comment in the code say that it is by-design and it was designed in V3 time.\r\nSo request is to change the design because V2 is not supported and we can deprecate GenericMeasureInfo class and use only GenericObjectMeasureInfo class.\r\n\r\n/cc @SteveL-MSFT @daxian-dbw Please review this on PowerShell Committee.",
    "created_at": "2020-03-17T14:43:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600109518",
    "id": 600109518,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDEwOTUxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600109518/reactions"
    },
    "updated_at": "2020-03-17T14:43:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600109518",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That would be a good first step. \r\n\r\nIdeally we would deprecate _both_ and introduce a new class that defines most if not all of its members as `object` so that we can utilise the widest needed numeric type to handle the use case.",
    "created_at": "2020-03-17T15:21:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600129837",
    "id": 600129837,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDEyOTgzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600129837/reactions"
    },
    "updated_at": "2020-03-17T15:21:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600129837",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Great idea, @vexx32:\r\n\r\nNote: `ValueType` is used here to illustrate which properties are invariably numeric. \r\nBased on @SeeminglyScience's feedback, using just `object` in practice is probably the right choice.\r\n\r\n```csharp\r\n    // To replace both GenericObjectMeasureInfo and GenericMeasureInfo.\r\n    public sealed class ObjectMeasureInfo : MeasureInfo\r\n    {\r\n        public ValueType Count { get; set; }\r\n        public ValueType? Average { get; set; }\r\n        public ValueType? Sum { get; set; }\r\n        public ValueType? StandardDeviation { get; set; }\r\n        // As  before in GenericObjectMeasureInfo\r\n        // Can be reference-type instances, as long as the type implements IComparable.\r\n        public object Maximum { get; set; }\r\n        public object Minimum { get; set; }\r\n    }\r\n```\r\n\r\nThis type could then be used with the following type-widening rules, as also suggested in #12141 for\r\n`-Raw`, which would give us unified behavior:\r\n\r\n*  For `-Maximum` and `-Minimum`, whatever input value is identified should be passed through as-is, as is already the case for non-numeric inputs (which is the fix for the bug at hand).\r\n\r\n* For the inherently non-integral `-Average` and `-StandardDeviation` measurements, `[double]` is an appropriate default, but with (at least one) `[decimal]` input `[decimal]` should also be used on output.\r\n\r\n* For `Sum`, all-integer-only input should should also output an integral type (starting with the (largest) input type), with  _automatic type widening_, analogous to the widening (type promotion) that happens in PowerShell's number-literal parsing (`[int]` ->`[long]` -> `[decimal]`, and possibly even to `[bigint]` rather than the `[double]` that is the widest type for number literals. \r\n\r\n * `Count` should widen on demand the same way as `Sum`, though  numbers beyond `[int]` are unlikely to occur in practice, except perhaps if opt-in enumeration of array-valued properties is implemented via the proposed `-Recurse` switch - see #7244.\r\n",
    "created_at": "2020-03-17T16:13:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600159043",
    "id": 600159043,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE1OTA0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600159043/reactions"
    },
    "updated_at": "2020-03-18T22:51:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600159043",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this, we do not want to take a breaking change for the type of the output object.  Instead, to support this scenario, we would propose a `-ValueType` parameter that takes a enum consisting of the existing members that would output an `object` so that the resulting input type is preserved.",
    "created_at": "2020-03-18T22:50:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-600897653",
    "id": 600897653,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDg5NzY1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600897653/reactions"
    },
    "updated_at": "2020-03-18T22:50:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/600897653",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think we need to take a step back, @SteveL-MSFT:\r\n\r\n* That numeric types aren't preserved with `-Min` and `-Max`, with large integers even outputting lossy `[double]`s that report a maximum that's not even among the input is clearly a bug: see  #13422\r\n\r\n* The proposed `-ValueType` enhancement based on an enum seems quite convoluted; I suggest the following instead:\r\n\r\n  * #12141 already proposes an opt-in with automatic type-widening on a per-property basis, via a `-Raw` switch.\r\n\r\n  * #13423  complements this proposal with a whole-object opt-in, via an `-AsAutoNumber` switch. \r\n\r\nI recommend closing this issue in favor of these new ones.",
    "created_at": "2020-08-12T21:11:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12103#issuecomment-673113259",
    "id": 673113259,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12103",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzExMzI1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673113259/reactions"
    },
    "updated_at": "2020-08-12T21:11:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673113259",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
