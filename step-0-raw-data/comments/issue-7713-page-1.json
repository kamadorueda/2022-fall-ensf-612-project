[
  {
    "author_association": "COLLABORATOR",
    "body": "> instruct Select-Object \r\n\r\nTypo?\r\n\r\nWe could consider `-AsString` parameter - looks more understandably.",
    "created_at": "2018-09-06T07:25:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-418992701",
    "id": 418992701,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk5MjcwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418992701/reactions"
    },
    "updated_at": "2018-09-06T07:25:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418992701",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov: Yes, a typo, thanks - fixed.\r\n\r\nHow about we use _both_ parameter names? \r\n\r\nI agree that `-AsString` is more descriptive in this case, but what appeals me to about `-Bare` is that it can become part of a general pattern, across different cmdlets,  where it requests output of undecorated / unwrapped objects.",
    "created_at": "2018-09-06T12:32:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419076107",
    "id": 419076107,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTA3NjEwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419076107/reactions"
    },
    "updated_at": "2018-09-06T12:32:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419076107",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> -Bare is that it can become part of a general pattern\r\n\r\nIn the case it is better to enumerate in the Issue all cases where the parameter should be .",
    "created_at": "2018-09-06T15:09:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419130586",
    "id": 419130586,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTEzMDU4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419130586/reactions"
    },
    "updated_at": "2018-09-06T15:09:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419130586",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov: \r\n\r\nI've added another example to the OP, in addition to the previous `Get-Content` (#7537 ) one.\r\n\r\nIf you can think of additional ones, do tell us.\r\n\r\nOther than that, I think the updated OP now sufficiently establishes the case for using the name `-Bare`.\r\n\r\n\r\n\r\n",
    "created_at": "2018-09-06T15:34:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419140024",
    "id": 419140024,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTE0MDAyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419140024/reactions"
    },
    "updated_at": "2018-09-06T15:34:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419140024",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 We already have `-Raw` as _the_ pattern for undecorated output  (though we only have one instance of it) so there is no need to add a random new parameter pattern here. But I also don't think `-Raw` is appropriate as `MatchInfo` is concrete type, not a decorated object that can be cored (i.e. not a `PSObject` with note properties.) @iSazonovI I like `-AsString` since it's more informative and we do things like `-AsHashtable` elsewhere. And adding multiples aliases for no reason is undesirable - it's just more stuff to learn with no benefit.\r\n\r\nRegarding performance, I doubt _creating_ `MatchInfo` objects has much to do with `Select-String` performance. Again, it's a simple concrete type, not `NoteProperties` on a `PSObject` so the `Get-Content` analogy is not appropriate. Compared to the other operations in the cmdlet, I suspect that `MatchObject` construction would barely register. (Note: [This PR](https://github.com/PowerShell/PowerShell/pull/7673) will help with overall performance.) In the issue linked above, it seems that the specific issue has to do with rendering the `MatchInfo` objects rather than creating them. ",
    "created_at": "2018-09-06T20:11:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419225397",
    "id": 419225397,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTIyNTM5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419225397/reactions"
    },
    "updated_at": "2018-09-06T21:28:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419225397",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay: \r\n\r\nAs for the parameter _name_:\r\n\r\nIf you're referring to `Get-Content -Raw`: it does _not_ provide undecorated output, it just reads the file as a whole - the resulting single string still has ETS properties.\r\n\r\nThe only other instance of `-Raw` I could find is on `Format-Hex`, which is currently undocumented, and it's unclear to me what it does.\r\n\r\nI therefore consider `-Raw` \"skunked\" and `-Bare` a viable alternative, not least because _raw_, as stated, has connotations of _uninterpreted_ / _undecoded_, which do not apply.\r\n\r\n---\r\n\r\nAs fo the  _semantics_ of the proposed `-Bare`:\r\n\r\nThe OP now states:\r\n\r\n>  the abstract logic of this proposal - namely to output \"bare\" objects that are _undecorated_ (have no ETS properties added to them) / are _not wrapped in instances of another type_ \r\n\r\nThat is, `-Bare` would be an _abstraction_ that would apply to both _this_ case (objects of interest wrapped in another type) and the `Get-Content` case (objects decorated with ETS properties).\r\n\r\nThe informal gist of this abstraction is: \r\n\r\n\"Give me just the objects I'm interested, nothing else - do not attach properties I don't care about and don't wrap the object in another type providing metadata.\"\r\n\r\n---\r\n\r\nAs for _performance_:\r\n\r\nThe primary reason for creating this issue was to _forgo the wrappers around the matching lines_, because just wanting the _lines themselves_ is a common use case.\r\n\r\nAny performance gain - if any - would just be beneficial side effect.\r\n\r\nIt sounds like you're saying that performance gain will primarily come from bypassing ETS properties rather than straight .NET-type wrappers.\r\n\r\n---\r\n\r\nThe issue you meant to link to is #7673 (your link URL has an extraneous char. at the end).",
    "created_at": "2018-09-06T20:34:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419231976",
    "id": 419231976,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTIzMTk3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419231976/reactions"
    },
    "updated_at": "2018-09-06T20:34:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419231976",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0  Thanks for pointing out the link issue, it should be fixed now.\r\n\r\n> It sounds like you're saying that performance gain will primarily come from bypassing ETS properties rather than straight .NET-type wrappers.\r\n\r\nThere are no wrappers for `MatchInfo`, that is, no `PSObject` extended properties to bypass.  `MatchInfo` is the result type of `Select-String` just like `RegularExpressions.Match` is the result type of `[regex]::Match()`. The match object does contain the string, but it also contains all of the context information. \r\n\r\nIn terms of actual string matching performance, `Select-String` and (git's) `grep.exe` are not that far apart:\r\n```powershell\r\nPSCore (2:213) >  time { grep.exe try C:\\netpop\\WarAndPeace.txt} | % totalmilliseconds\r\n61.3222\r\nPSCore (2:214) >  time { sls try C:\\netpop\\WarAndPeace.txt} | % totalmilliseconds\r\n82.9409\r\n```\r\nHopefully @powercode 's changes will make them even closer. Where the performance diverges significantly is when you render the output to string:\r\n```powershell\r\nPSCore (2:215) >  time { grep.exe try C:\\netpop\\WarAndPeace.txt | out-string} | % totalmilliseconds\r\n66.2149\r\nPSCore (2:216) >  time { sls try C:\\netpop\\WarAndPeace.txt | out-string} | % totalmilliseconds\r\n330.4404\r\n```\r\nNow PowerShell is much slower. So speeding up rendering is the place to look for performance issues. In fact, only emitting the string does substantially \"improve\" performance, at the cost of losing all context information:\r\n```powershell\r\nPSCore (2:230) >  time { (sls try C:\\netpop\\WarAndPeace.txt).line | out-string} | % totalmilliseconds\r\n96.3773\r\n```\r\n\r\nAlso note that rendering performance is only an issue if you have a lot of matches. \r\n\r\n> The primary reason for creating this issue was to forgo the wrappers around the matching lines, because just wanting the lines themselves is a common use case.\r\n\r\nWhich is certainly easy enough to accomplish now as shown above. It's not a use case I find especially compelling in PowerShell - if I simply want to filter strings I'll use the `-match` operator. I use `Select-String` when I want to know in which file and on what line the pattern is matched.\r\n\r\n",
    "created_at": "2018-09-06T22:04:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419256179",
    "id": 419256179,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTI1NjE3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419256179/reactions"
    },
    "updated_at": "2018-09-07T00:16:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419256179",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\n> There are no wrappers for MatchInfo, that is, no PSObject extended properties to bypass\r\n\r\nWhat I meant by _wrapper_ in this context: the core data of interest - the _matching lines_ - are wrapped in a _helper type_ (`MatchInfo`) whose purpose is to  provide _context_.\r\n\r\nOften there is no need for that wrapper, hence this proposal.\r\n\r\n---\r\n\r\n> Which is certainly easy enough to accomplish now as shown above. It's not a use case I find especially compelling in PowerShell - if I simply want to filter strings I'll use the -match operator. I use Select-String when I want to know in which file and on what line the pattern is matched.\r\n\r\nA primary benefit of the pipeline is _memory-throttling_.\r\n\r\nYou forfeit that benefit if you use the `-match` operator and - to a lesser degree, depending on the number of matches - if you use `(...).Line`\r\n\r\nEspecially with large files, `Select-String` is the tool of choice and  `-match` is then not a suitable alternative (as it would require loading the entire file into memory up-front).\r\n\r\nIn general, it's not a good idea to frame operators vs. cmdlets as something you can choose freely between.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-09-07T00:53:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419286510",
    "id": 419286510,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTI4NjUxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419286510/reactions"
    },
    "updated_at": "2018-09-07T01:56:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419286510",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I have done some profiling on Select-String, and the massive hit is creating strings for all lines of every file. This also limits the gains of parallelizing Select-String, since it dies the GC death. (spending half it's time on GC). \r\n\r\n@BrucePay is correct that the allocation of `MatchInfo`s is a microscopic part of the runtime.\r\n\r\nI've opened an issue on .net core, regarding span based alternatives for regex, and work is being done there.\r\n\r\nOnce we have a way of quickly scanning lines without allocating strings, and have a RegEx class that doesn't allocate a lot of strings internally, we can take a second pass on the performance of Select-String. \r\n\r\nI have a parallel impementation of Select-String, but it doesn't perform much better because of the GC issues. ",
    "created_at": "2018-09-07T05:59:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419331837",
    "id": 419331837,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTMzMTgzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419331837/reactions"
    },
    "updated_at": "2018-09-07T05:59:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419331837",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I've opened an issue on .net core, regarding span based alternatives for regex, and work is being done there.\r\n\r\nPlease add reference on the issue.",
    "created_at": "2018-09-07T06:02:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419332333",
    "id": 419332333,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTMzMjMzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419332333/reactions"
    },
    "updated_at": "2018-09-07T06:02:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419332333",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think we can exclude \"performance\" from considiration in the Issue and look only on \"convenience and performance\".\r\n\r\nSo suggestion is to add new switch parameter to output string results not MatchInfo objects. Name can be `-Raw` or `-AsString`. It is a question for PowerShell Committee.",
    "created_at": "2018-09-07T06:08:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-419333274",
    "id": 419333274,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTMzMzI3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419333274/reactions"
    },
    "updated_at": "2018-09-07T06:08:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/419333274",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the great info re performance, @powercode.\r\n\r\nGood point, @iSazonov - I've updated the OP to remove the performance aspect.\r\n\r\nFor the reasons discussed, I think `-Raw` is not an option, as the only reason for its use would be to establish a general pattern, which is at odds with applying that pattern to `Get-Content` (as requested in #7537), where `-Raw` already has a different meaning.\r\n\r\nTo me, the options are, in descending order of personal preference:\r\n\r\n* use just `-Bare` to align with the envisioned cross-cmdlet pattern\r\n* use `-Bare`  _and_ make `-AsString` an _alias_\r\n* use just `-AsString`\r\n\r\nWhile `-AsString` is arguably more descriptive taken by itself, its use here doesn't quite align with its existing use in other cmdlets:\r\n\r\n* In `Get-Unique`, it determines how to treat the _input_.\r\n\r\n* In `Group-Object`, it determines a _specific aspect_ of the output objects produced, not the type of the output objects per se.\r\n\r\n---\r\n\r\nTaking  a step back:\r\n\r\nThe very name `Select-*String*` would lead one to expect string-typed output _by default_, yet you get instances of a _helper type_.\r\n\r\nFrom that perspective, `-Bare` makes more sense: it requests returning _just_ what the cmdlet is arguably designed to return, _without metadata_  - irrespective of whether that metadata takes the form of a helper wrapper type or the form of ETS properties directly attached to the objects.\r\n\r\n",
    "created_at": "2018-09-11T23:31:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-420460728",
    "id": 420460728,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQ2MDcyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420460728/reactions"
    },
    "updated_at": "2018-09-11T23:31:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420460728",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Speaking from an \"aesthetic\" point of view, this is kind of blech:\r\n```\r\nGet-ChildItem . -r *.h | Select-String -AsString typedef\r\n```\r\n\r\nThe `Select-String -AsString` bit seems oddly redundant.  I don't really like that.  I'd prefer `-Bare` or `-Raw`.",
    "created_at": "2018-09-12T03:28:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-420500192",
    "id": 420500192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDUwMDE5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420500192/reactions"
    },
    "updated_at": "2018-09-12T03:28:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/420500192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this, we believe `-match` or using `| % propname` is sufficient to achieve this scenario.  If you have more details of scenarios requiring the proposed behavior, please let us know.",
    "created_at": "2018-10-03T22:52:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-426829756",
    "id": 426829756,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjgyOTc1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426829756/reactions"
    },
    "updated_at": "2018-10-03T22:52:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426829756",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT: \r\n\r\nA joint bulletin from the Spilt-Milk and 20-20 Departments:\r\n\r\nAs a general rule, expression-mode solutions and pipeline solutions aren't interchangeable, for reasons of performance (yay for expressions) and memory consumption (yay for pipelines), so recommending the use of `-match` is not helpful as an alternative to `Select-String`.\r\n\r\nAs for `| % propname` (I assume you meant: `| % Line`<sup>[1]</sup>):\r\n\r\nI can't help but notice the irony of a cmdlet named `Select-*String*` not only not emitting strings by default, but not even offering an option to do so.\r\n(An irony also alluded to by @rkeithhill when questioning naming the parameter to request string output `-AsString`).\r\n\r\n> If you have more details of scenarios requiring the proposed behavior\r\n\r\nLet me ask the opposite question: Do you think it is _typically_ more useful to emit `MatchInfo` objects rather than the _strings matched_?\r\nI know that changing the default behavior is no longer an option, but the next best thing is to _opt into_ the behavior that should have been the default to begin with - by way of a switch.\r\n\r\n---\r\n\r\n<sup>[1] As a further aside: Given that `Select-Object` typically, but not necessarily operates on _lines_, the naming of that property is also problematic.</sup>\r\n\r\n",
    "created_at": "2018-10-04T02:33:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-426865614",
    "id": 426865614,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjg2NTYxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426865614/reactions"
    },
    "updated_at": "2018-10-04T02:52:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/426865614",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 the discussion within @PowerShell/powershell-committee is that PowerShell is not replicating the `sed` or `grep` experience so having a rich object makes sense.  `MatchInfo` provides metadata that may be useful more than just the string.  We agreed that there are cases where just the string is what is desired, but believe the currently mechanisms are sufficient.",
    "created_at": "2018-10-04T21:32:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427176715",
    "id": 427176715,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE3NjcxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427176715/reactions"
    },
    "updated_at": "2018-10-04T21:32:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427176715",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the feedback, @SteveL-MSFT.\r\n\r\nTo be clear: the rich match information is a wonderful thing to have  _if needed_ - and often it is not.\r\n\r\nArguably, it should have been opt-in to begin with, with string output as default, but that ship has obviously sailed, hence the suggestion to reverse the logic and make string output opt-in.\r\n\r\nForcing the extra step of accessing the `.Line` property on each output object is not just inconvenient, but also a performance issue:\r\n\r\nConsider the following results, searching through a 100,000-lines file (with lines containing just sequence numbers: `1..1e5 > t.txt`):\r\n\r\n```powershell\r\n\r\nCommand                                             FriendlySecs (10-run avg.) Factor\r\n-------                                             -------------------------- ------\r\nsls '\\d' t.txt                                      0.173                      1.00\r\n(sls '\\d' t.txt).Line                               0.424                      2.45\r\nsls '\\d' t.txt | Select-Object -ExpandProperty Line 3.732                      21.52\r\n```\r\n\r\nAs you can see, even member enumeration is a notable slowdown, but if you must use the pipeline, the slowdown is dramatic: the `Select-Object -ExpandProperty` makes the command 20 times slower.\r\n\r\n\r\n\r\n",
    "created_at": "2018-10-04T21:51:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427181571",
    "id": 427181571,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE4MTU3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427181571/reactions"
    },
    "updated_at": "2018-10-04T21:51:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427181571",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 perf wasn't something we discussed so I appreciate you taking the time to post the numbers.  Seeing the data, I would agree that for large files, there is a significant perf difference.",
    "created_at": "2018-10-04T22:00:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427183697",
    "id": 427183697,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE4MzY5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427183697/reactions"
    },
    "updated_at": "2018-10-04T22:00:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427183697",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @SteveL-MSFT. Performance was initially discussed, but only in the context of how expensive it is to construct the match-info objects around the matched strings (and the answer was: nothing to worry about) - it hadn't occurred to me until now that the performance penalty comes from the need to \"unwrap\" the match-info objects in order to get at the strings during later processing.",
    "created_at": "2018-10-04T23:00:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427196084",
    "id": 427196084,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE5NjA4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427196084/reactions"
    },
    "updated_at": "2018-10-04T23:00:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427196084",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Perhaps it must be another solition https://github.com/PowerShell/PowerShell/issues/4767#issuecomment-329243332",
    "created_at": "2018-10-05T06:10:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427256715",
    "id": 427256715,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI1NjcxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427256715/reactions"
    },
    "updated_at": "2018-10-05T06:10:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427256715",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @iSazonov, but it's obviously preferable to improve `Select-String` rather than relying on a third-party solutions such as [ripgrep](https://github.com/BurntSushi/ripgrep).\r\n\r\nAnd I think that there's hope: The combination of alleviating the GC issues that @powercode mentions above, combined with outputting strings only, may make `Select-String` fast enough.\r\n\r\n---\r\n\r\nAs an aside re @lzybkr's other statement in the linked comment (it's a related, but separate issue):\r\n\r\n> I do think we need to detect where the output is going - and not just for the width. If the output is to a file, we might also want to strip ansi escape sequences (with some sort of option to not do so).\r\n\r\nWhile I think having the _option_ to strip ANSI escape sequences would be great, I don't think it should be done by default - both for reasons of performance and for consistency with `grep` implementations, which do _not_ perform stripping (and apparently don't even offer the option and only offer coloring output themselves to reflect matching parts).\r\n\r\nPerhaps a dedicated, general-purpose `Remove-AnsiEscapeSequences` cmdlet is (also) called for (surprisingly, the Unix world seems to have no such utility).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-10-05T17:57:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427449166",
    "id": 427449166,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ0OTE2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427449166/reactions"
    },
    "updated_at": "2018-10-05T17:57:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427449166",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I just tried `ls` and `grep` on my default Ubuntu install (via WSL). I get colored output on the console, but no colors when redirecting to a file. In addition, `ls` prints 1 file per line when redirected to a file.\r\n\r\nI'm sure they aren't removing escape sequences, but they aren't generating them in the first place.\r\n\r\nBut my point wasn't about specific implementation details - it was that smarts are needed for a good experience - interacting with a console (possibly via a pty like in tmux) or writing to a file. PowerShell doesn't have those smarts.",
    "created_at": "2018-10-05T18:19:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427455678",
    "id": 427455678,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ1NTY3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427455678/reactions"
    },
    "updated_at": "2018-10-05T18:19:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427455678",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Understood re smarts, @lzybkr, but the Unix smarts relate to the utility _producing_ the colored strings, not to stripping _on consumption_ with general-purpose filtering utilities such as `grep`.\r\n\r\nThat is, if you feed `grep` colored strings, it will happily and invariably pass the escape codes through.\r\n\r\nA `Remove-AnsiEscapeSequences` cmdlet and/or a `-StripAnsiCodes` switch for `Select-String` would cover the _consumption_ side.\r\n\r\n----\r\n\r\nTo address your specific examples:\r\n\r\n* Yes, `ls` itself adjusts its behavior based on whether you're redirecting to a file / pipe (unless you specify `--color` or `--color=always`), in which case the escape sequences are stripped (or never added).\r\n\r\n* Ditto for `grep`, but only with respect to the color codes _it_ adds in order to highlight matches, _not_ the ones _in the input_.\r\n",
    "created_at": "2018-10-05T18:32:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427459580",
    "id": 427459580,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ1OTU4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427459580/reactions"
    },
    "updated_at": "2018-10-05T18:38:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427459580",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To put it differently: In an ideal world where all output-producing utilities exhibit the smarts you mention and therefore suppress inclusion of escape sequences when not outputting to a terminal, there'd be no need for `Remove-AnsiEscapeSequences` and/or `-StripAnsiCodes` - but in practice you do need to deal with these situations.",
    "created_at": "2018-10-05T18:41:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427461843",
    "id": 427461843,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ2MTg0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427461843/reactions"
    },
    "updated_at": "2018-10-05T18:41:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427461843",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I wonder that we switched to discuss stripping escapes here but I should say I'd expect that it is formatting system area to do coloring. I think Unix utilities get the parameter (`--color`) because there are no objects there and user have to set the parameter explicitly in a last command of the pipe. (I found examples of coloring applications that parse the output of other apps/ bash commands and then make a colored output).\r\nIn contrast, we know the type of the outgoing object and can delegate the coloring to the formatting system.\r\nFrom this point of view, I do not see the need to filter escape sequences explicitly - by default formatting system must only mask them (escape escapes) so as not to break the formatting (and possibly have an option to bypass them(ex., if we get them from external app)).\r\n\r\nAs for Select-String, I want to try a couple of ideas in the next few weeks to reduce allocations. Ping me if I don't do it.",
    "created_at": "2018-10-06T15:57:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427584868",
    "id": 427584868,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzU4NDg2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427584868/reactions"
    },
    "updated_at": "2018-10-06T15:57:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427584868",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for being willing to tackle performance improvements, @iSazonov \r\n\r\nAs for stripping escape codes:\r\n\r\nSorry - that was a tangent that I started, based on what I now presume to be at least a partial misunderstanding of the comment by @lzybkr that you linked to.\r\n\r\nLet me try to close the tangent:\r\n\r\n> I think Unix utilities get the parameter (--color) because there are no objects there and user have to set the parameter explicitly in a last command of the pipe.\r\n\r\nNo, coloring is more typically applied via aliases (e.g., `alias ls='ls --color=auto'` on Linux) or environment variables, where supported (e.g., `export CLICOLOR` on macOS).\r\n\r\nGenerally, however, the expectation is that the _producers_ of optimized-for-display output (coloring, padding/multi-column output) suppress these optimizations _situationally_, namely if stdout isn't connected to a _terminal_ (unless keeping colors is explicitly requested); both `ls` and `grep` are examples of utilities that exhibit this behavior.\r\n\r\nYou're right that in PowerShell we typically don't have this problem, because PowerShell's output-formatting system does _not_ come into play:\r\n   * when piping objects to PowerShell-native commands, because the receiving commands process the objects as such.\r\n  * when piping objects to _external program_, because it is the `.ToString()` representation that is then used (and while that representation is often unhelpful, it is untroubled by issues of assuming a fixed window width or applying output coloring).\r\n\r\nHowever, problems do arise with `>`  / `Out-File`, where the default output formatting _is_ applied, and can cause problems:\r\n\r\n* Currently, only with respect to the assumed _max. line width_, as discussed in #4767\r\n\r\n* Potentially in the future also with respect to _colored output_; e.g., #3886\r\n\r\nThat is, `>` / `Out-File` should be enhanced to modify its behavior on whether output is going to a _terminal_ or a _file_ (analogous to Unix utilities - the smarts PowerShell currently lacks, as pointed out by @lzybkr) - in the latter case, either no max. line width should be assumed, or a reasonably high default value should be used, and coloring should be stripped, at least by default.\r\n\r\n---\r\n\r\nTherefore, the need for explicitly stripping escape codes on _receiving_ strings is definitely atypical, and as such `Remove-AnsiEscapeSequences` cmdlet and/or a `-StripAnsiCodes` switch for `Select-String` are definitely low-priority - albeit nice to have in principle (\"rogue\" utilities / scripts could be producing output with escape sequences _unconditionally_; that this does happen in practice is demonstrated by [this SO query](https://stackoverflow.com/search?q=strip+ansi+codes)).\r\n",
    "created_at": "2018-10-08T04:54:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-427721719",
    "id": 427721719,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzcyMTcxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427721719/reactions"
    },
    "updated_at": "2018-10-08T04:56:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/427721719",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this again.  We are fine with adding a `-Raw` switch in a new parameter set to emit strings.",
    "created_at": "2018-11-07T23:38:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-436817984",
    "id": 436817984,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjgxNzk4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 2,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/436817984/reactions"
    },
    "updated_at": "2018-11-07T23:38:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/436817984",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to pick this one up.",
    "created_at": "2019-06-14T13:40:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-502113359",
    "id": 502113359,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjExMzM1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502113359/reactions"
    },
    "updated_at": "2019-06-14T13:40:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502113359",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26464885?v=4",
      "events_url": "https://api.github.com/users/Jawz84/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jawz84/followers",
      "following_url": "https://api.github.com/users/Jawz84/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jawz84/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jawz84",
      "id": 26464885,
      "login": "Jawz84",
      "node_id": "MDQ6VXNlcjI2NDY0ODg1",
      "organizations_url": "https://api.github.com/users/Jawz84/orgs",
      "received_events_url": "https://api.github.com/users/Jawz84/received_events",
      "repos_url": "https://api.github.com/users/Jawz84/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jawz84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jawz84/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jawz84"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Have at it! 💖 ",
    "created_at": "2019-06-14T13:49:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-502116477",
    "id": 502116477,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjExNjQ3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502116477/reactions"
    },
    "updated_at": "2019-06-14T13:49:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502116477",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Hey Joel @vexx32 tnx! I've put in a PR as you can see.",
    "created_at": "2019-06-14T14:08:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-502123450",
    "id": 502123450,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjEyMzQ1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502123450/reactions"
    },
    "updated_at": "2019-06-14T14:08:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502123450",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26464885?v=4",
      "events_url": "https://api.github.com/users/Jawz84/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jawz84/followers",
      "following_url": "https://api.github.com/users/Jawz84/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jawz84/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jawz84",
      "id": 26464885,
      "login": "Jawz84",
      "node_id": "MDQ6VXNlcjI2NDY0ODg1",
      "organizations_url": "https://api.github.com/users/Jawz84/orgs",
      "received_events_url": "https://api.github.com/users/Jawz84/received_events",
      "repos_url": "https://api.github.com/users/Jawz84/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jawz84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jawz84/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jawz84"
    }
  },
  {
    "author_association": "NONE",
    "body": ":tada:This issue was addressed in #9901, which has now been successfully released as `v7.0.0-preview.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
    "created_at": "2019-08-20T22:36:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7713#issuecomment-523221783",
    "id": 523221783,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7713",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzIyMTc4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/523221783/reactions"
    },
    "updated_at": "2019-08-20T22:36:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/523221783",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
