[
  {
    "author_association": "COLLABORATOR",
    "body": "I'm delighted that @JamesWTruher  implemented #14692!\r\n\r\nI hope we will not stop half way and finally close this story by fully implementing the proposal.",
    "created_at": "2021-04-02T13:19:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-812525912",
    "id": 812525912,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjUyNTkxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812525912/reactions"
    },
    "updated_at": "2021-04-02T13:19:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812525912",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As it turns out, there's another accommodation worth making for _batch files_ with respect to _exit codes_ (now implemented in v1.3.1 of the `Native` module):\r\n\r\n* Direct invocation of batch files doesn't report their exit code, as reflected in `$LASTEXITCODE`, reliably; e.g.:\r\n\r\n```powershell\r\n# Create a (temporary) batch file that provokes an error with an unsupported whoami.exe option, \r\n# and exits with `exit /b` *without an explicit argument* with the intent to *pass whoami.exe's exit code through*.\r\n'@echo off & whoami -nosuch 2>NUL || exit /b' | Set-Content test.cmd\r\n\r\n# Invoke the batch file and report the exit code.\r\nPS> .\\test.cmd; $LASTEXITCODE\r\n0   # !! whoami.exe's exit code, 1, was NOT passed through.\r\n```\r\n\r\n* The workaround is to use the following invocation in lieu of `.\\test.cmd`: `cmd /c \".\\test.cmd & exit\"`, as detailed in [this Stack Overflow post](https://stackoverflow.com/q/66975883/45375).\r\n\r\nNote that _inside_ a `cmd.exe` session, `%ERRORLEVEL%` _is_ set to `1` after calling the batch file.\r\n\r\nTo be clear: The problem lies with `cmd.exe`, but it is yet another accommodation we can make to improve the robustness of native-program calls. \r\n",
    "created_at": "2021-04-08T19:37:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-816105557",
    "id": 816105557,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNjEwNTU1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816105557/reactions"
    },
    "updated_at": "2021-04-08T19:37:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/816105557",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The following:\r\n\r\n* fleshes out the proposal above with **concrete examples**\r\n* contains a **list of bugs** as of PowerShell Core 7.2.0-preview.5\r\n\r\n### `PSNativeCommandArgumentPassing`: Missing-accommodations examples, current bugs:\r\n\r\nSetup:\r\n\r\n```powershell\r\nInstall-Module Native\r\n```\r\n\r\n**Note**:\r\n\r\n* The diagnostic output below, via argument-/command-line diagnosing function `dbea` (which uses `-ie` to use the `ie` function behind the scenes, which ensures the desired behavior); these functions are from the [`Native`](https://github.com/mklement0/Native) module. _It is my hope that the need for `ie` will go away_ with proper implementation of `PSNativeCommandArgumentPassing` (though it will still be useful in _older_ PS versions).\r\n\r\n  * First shows the _verbatim_ arguments that the target batch file / conventional executable _ends up seeing after parsing its own command line_, i.e. the _effective_ values.\r\n  \r\n  * **Then shows the _raw command line_ (sans executable) that was passed** (which by definition only applies _on Windows_): **this is what PowerShell must construct from the given arguments and assign to [`System.Diagnostics.ProcessStartInfo.Arguments`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.Arguments).**\r\n\r\n---\r\n\r\n**Accommodation A:** Calling a batch file: Must escape embedded `\"` as `\"\"`:\r\n\r\n```powershell\r\nPS> dbea -ie -UseBatchFile -- 'Andre \"The Hawk\" Dawson' 'another argument'\r\n2 argument(s) received (enclosed in «...» for delineation):\r\n\r\n  «\"Andre \"\"The Hawk\"\" Dawson\"»\r\n  «\"another argument\"»\r\n\r\nCommand line (without executable; the value of %*):\r\n\r\n  \"Andre \"\"The Hawk\"\" Dawson\" \"another argument\"\r\n```\r\n\r\nNote how the verbatim embedded `\"The Hawk\"` was escaped as `\"\"The Hawk\"\"`, to ensure that the batch file properly recognized the entire token as a _single argument_.\r\n\r\n---\r\n\r\n**Accommodation B:** Calling a batch file: _Space-less_ arguments (ones that normally do _not_ trigger enclosure in `\"...\"`) must still be double-quoted if any of the following `cmd.exe` metacharacters is present: `& | < > ^ , ;`\r\n\r\n```powershell\r\nPS> dbea -ie -UseBatchFile -- 'http://example.org?foo=1&bar=2' 'another argument'\r\n2 argument(s) received (enclosed in «...» for delineation):\r\n\r\n  «\"http://example.org?foo=1&bar=2\"»\r\n  «\"another argument\"»\r\n\r\nCommand line (without executable; the value of %*):\r\n\r\n  \"http://example.org?foo=1&bar=2\" \"another argument\"\r\n\r\n```\r\n\r\nNote how the URL was double-quoted, despite not containing spaces.\r\nCurrently, this fails,  both with and without `PSNativeCommandArgumentPassing` in effect, because in the absence of double-quoting `cmd.exe` (which parses the batch file's command line) interprets the unquoted `&` as a _statement separator_.\r\n\r\n---\r\n\r\n**Accommodation C:** Passing a `PROPERTY=VALUE`-style argument (and variations thereof, prefixed with `/` or `-` optionally combined with `:` instead of `=`)  to _any_ executable: Must _selectively_ `\"...\"`-enclose _only the `VALUE` part_, if it contains spaces so as to satisfy the particular, nonstandard quoting requirements of executables such as `msiexec` (to _conventional_ executables, this quoting variation makes no difference, so it is safe to use):\r\n\r\n```powershell\r\nPS> dbea -ie -- INSTALLDIR=$PSHOME  'another argument'\r\n2 argument(s) received (enclosed in «...» for delineation):\r\n\r\n  «INSTALLDIR=C:\\Program Files\\PowerShell\\7»\r\n  «another argument»\r\n\r\nCommand line (without executable):\r\n\r\n  INSTALLDIR=\"C:\\Program Files\\PowerShell\\7\" \"another argument\"\r\n```\r\n\r\nNote how `INSTALLDIR=$PSHOME` turned into _selectively double-quoted_ `INSTALLDIR=\"C:\\Program Files\\PowerShell\\7\"`\r\n\r\n**Note**: \r\n * Accommodation B and C must situationally be _combined_.\r\n * Accommodation B, due to the need for Accommodation C, must actually be performed in the context of a `cmd /c \"<batch-file> ... & exit\"` call -  see below.\r\n\r\n---\r\n\r\n**Accommodation D:** Support _reliable_ exit-code reporting from batch files:\r\n\r\n```powershell\r\nPS> '@echo off & whoami -nosuch 2>NUL || exit /b' | Set-Content test.cmd; ie ./test.cmd; $LASTEXITCODE\r\n1\r\n```\r\n\r\nWithout `ie`, this currently reports `0` (both with and without `PSNativeCommandArgumentPassing` in effect), i.e. `whoami`'s failure exit code was _not_ reported.\r\n\r\nFor this to work as intended, PowerShell must translate `./test.cmd ...` into `cmd /c \"c:\\path\\to\\test.cmd ... & exit`, as explained in detail [here](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-816105557). Due to `cmd.exe` _not_ expecting escaping inside the overall `\"...\"` string, the encoding of the arguments is the same as would be needed for Accommodation B in isolation.\r\n\r\n---\r\n\r\n**Accommodation E:** Use `\"\"`-escaping for WSH calls (direct and indirect calls of `cscript.exe` / `wscript.exe`) to result in _less broken_ behavior:\r\n\r\n```powershell\r\nPS> dbea -ie -UseWSH 'Andre \"The Hawk\" Dawson' 'another argument'\r\n2 argument(s) received:\r\n\r\n  «Andre The Hawk Dawson»\r\n  «another argument»\r\n```\r\n\r\nNote how the _embedded `\"` were stripped_ - which cannot be avoided, unfortunately - but the argument boundaries were preserved, whereas applying the default `\\\"` escaping would result both in _broken argument boundaries_ and _literally retained `\\` chars_ - see [below](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-825132087) for details.\r\n\r\n---\r\n\r\n**Accommodation F:** Transform multi-argument direct `cmd /c` / `cmd /k` executable calls into single-argument, overall `\"...\"`-enclosed ones behind the scenes.\r\n\r\nThis accommodation is arguably the least important, but I think it would be beneficial, because it's one less thing for users to worry about; plus, the important Accommodation D would give us the implementation for free:\r\n\r\n```powershell\r\nPS> ie cmd /c \"C:\\Program Files\\PowerShell\\7\\pwsh\" -noprofile -c \" 'hi there' \"\r\nhi there\r\n```\r\n\r\nWithout `ie`, this command _breaks_, both with and without `PSNativeCommandArgumentPassing` in effect, due to `cmd.exe`'s _own_ limitations.\r\n\r\nIf PowerShell transformed the above command line into the following, verbatim _single_-argument `cmd /c` form in `.Arguments` (which is what `ie` does), the command would work:\r\n\r\n```\r\n\" \"C:\\Program Files\\PowerShell\\7\\pwsh\" -noprofile -c \" 'hi there' \" \"\r\n```\r\n\r\nTo simulate this with `--%`:\r\n\r\n```powershell\r\nPS> & { $PSNativeCommandArgumentPassing='Legacy'\r\n      cmd --% /c \" \"C:\\Program Files\\PowerShell\\7\\pwsh\" -noprofile -c \" 'hi there' \" \"\r\n    }\r\n```\r\n\r\nFor details, see https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-800376364\r\n\r\n---\r\n\r\n**Fix 1**: Calling `cmd.exe /c` / `cmd.exe /k` _directly_ with a command line (as a single argument) must continue to work properly, as it (by lucky accident) always has, even with `PSNativeCommandArgumentPassing` in effect:\r\n\r\n```powershell\r\n# Legacy behavior is actually *ok* in this case:\r\nPS> & { $PSNativeCommandArgumentPassing='Legacy'; cmd /c ' echo \"Andre \"\"The Hawk\"\" Dawson\" ' }\r\n\"Andre \"\"The Hawk\"\" Dawson\" \r\n```\r\n\r\nWith `PSNativeCommandArgumentPassing` in effect (`$PSNativeCommandArgumentPassing='Standard'`), you'll now get (broken)\r\n`\\\"Andre \\\"\\\"The Hawk\\\"\\\" Dawson\\\" `. \r\n\r\nSuch `cmd /c` calls have historically been valuable for working around quoting headaches in PowerShell. \r\nThey will continue to be useful:\r\n * For - hopefully very rare - quoting edge cases that the accommodations do not cover, as a _superior alternative to `--%`_, given that embedding PowerShell variable values and expressions is then easily possible via string interpolation.\r\n * Probably more frequently, to work around the PowerShell limitation of not providing _raw byte handling_ in the pipeline, and therefore needing to resort to `cmd.exe`'s `|`.\r\n\r\nSee #15239.\r\n\r\n---\r\n\r\n**Fix 2**: `--%` must continue to work even with `PSNativeCommandArgumentPassing` in effect:\r\n\r\n`--%`, the [stop-parsing symbol](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Parsing), is a per-call syntax override, and its functioning should not be affected by whether or not `PSNativeCommandArgumentPassing` in effect. While `--%` is virtually useless on Unix, on Windows there will still be - hopefully very rare - edge cases that require it, and there's also no need to break existing calls using it.\r\n\r\n```powershell\r\n# --% use: OK only in legacy mode:\r\nPS> & { $PSNativeCommandArgumentPassing='Legacy'\r\n             cmd /c --% echo \"Andre \"\"The Hawk\"\" Dawson\"\r\n    }\r\n\"Andre \"\"The Hawk\"\" Dawson\" \r\n```\r\nWith `PSNativeCommandArgumentPassing` in effect (`$PSNativeCommandArgumentPassing='Standard'`), you'll now get\r\n(broken) `\"\\\"Andre\" \"\\\"\\\"The\" \"Hawk\\\"\\\"\" \"Dawson\\\"\"`\r\n\r\nSee #15261.\r\n\r\n---\r\n\r\n**Fix 3**: Passing arguments such as `-F:` (looks like a PowerShell parameter, ends in `:`)  must continue to work even with `PSNativeCommandArgumentPassing` in effect:\r\n\r\nThe following fails as of PowerShell Core 7.2.0-preview.5, because the `-F:` and `foo` arguments are unexpectedly _merged_ behind the scenes:\r\n\r\n```powershell\r\nPS> cmd /c echo -F: foo # On Unix, use: /bin/echo -F: foo\r\n-F:foo  # !! Note the missing space.\r\n```\r\n\r\nSee #15276\r\n\r\n---\r\n\r\n**Fix 4**: `PSNativeCommandArgumentPassing` must not break invocation of WSH scripts (VBScripts, JScripts) with arguments.\r\n\r\nSee #15289\r\n",
    "created_at": "2021-04-19T21:43:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995",
    "id": 822805995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjgwNTk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822805995/reactions"
    },
    "updated_at": "2021-04-22T19:43:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822805995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT, on a meta note similar to the one in https://github.com/PowerShell/PowerShell/issues/14025#issuecomment-743354227:\r\n\r\n[Two separate requests to discuss the issue at hand](https://github.com/PowerShell/PowerShell-RFC/issues/282) in the April community call were made (one by @iSazonov, referring here directly, and  by @JustinGrote, referring here indirectly,  via https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-820541951).\r\n\r\nIn the [community call](https://www.youtube.com/watch?v=HrLRNGJpD-8) you glossed over these requests by saying that @JamesWTruher's presentation had already covered the topic by his presentation on the new, experimental `PSNativeCommandArgumentPassing ` feature.\r\n\r\nThis despite the fact that the very point of the issue at hand is to _point out problems with_ the feature _as currently implemented_ - and that is what needed to be discussed.\r\n\r\nThat the discussion was simply brushed aside again does not instill confidence in the concerns of the community being taken seriously.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-21T18:29:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-824269830",
    "id": 824269830,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDI2OTgzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824269830/reactions"
    },
    "updated_at": "2021-04-21T18:34:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824269830",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "On Windows, there is basic inconsistency between the way a batch file arguments and Windows executable arguments are parsed. with a batch file, the `=` seems to be a token separator, but not with the compiled executable. This was _most_ surprising. Here's the transcript (echoit.exe is a _very_ simple native app). All of the following is done from _cmd.exe_\"\r\n\r\n```\r\nC:\\Users\\james>.\\echoit.exe -foo=bar -foo=\"bar baz\" \"-foo=bar baz\"\r\nArgument 1 <-foo=bar>\r\nArgument 2 <-foo=bar baz>\r\nArgument 3 <-foo=bar baz>\r\n\r\nC:\\Users\\james>type echoit.cmd\r\n@echo off\r\necho %0\r\necho %1\r\necho %2\r\necho %3\r\necho %4\r\necho %5\r\necho %6\r\necho %7\r\necho %8\r\necho %9\r\n\r\nC:\\Users\\james>.\\echoit.cmd -foo=bar -foo=\"bar baz\" \"-foo=bar baz\"\r\n.\\echoit.cmd\r\n-foo\r\nbar\r\n-foo\r\n\"bar baz\"\r\n\"-foo=bar baz\"\r\nECHO is off.\r\nECHO is off.\r\nECHO is off.\r\nECHO is off.\r\n```\r\n\r\nfrom PowerShell, the experience is as follows:\r\n```\r\nPS>.\\echoit.cmd -foo=bar -foo=\"bar baz\" \"-foo=bar baz\"\r\n\"C:\\Users\\james\\echoit.cmd\"\r\n-foo\r\nbar\r\n\"-foo=bar baz\"\r\n\"-foo=bar baz\"\r\nECHO is off.\r\nECHO is off.\r\nECHO is off.\r\nECHO is off.\r\nECHO is off.\r\nPS> .\\echoit.exe -foo=bar -foo=\"bar baz\" \"-foo=bar baz\"\r\nArgument 1 <-foo=bar>\r\nArgument 2 <-foo=bar baz>\r\nArgument 3 <-foo=bar baz>\r\n```\r\n\r\nI didn't try a VB script.\r\n My concern with this request would be to have PowerShell have to know too much about what is being executed. Right now there is no disambiguation about *what* is being executed and to change the way things are parsed when running a batch file vs an executable seems very improper to me. With regard to MSIEXEC.EXE specifically, i believe we will handle that just fine. If there is an issue _with regard to_ an *.exe*, i really need to see the specifics.",
    "created_at": "2021-04-21T20:29:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-824337109",
    "id": 824337109,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDMzNzEwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824337109/reactions"
    },
    "updated_at": "2021-04-21T20:29:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824337109",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for engaging, @JamesWTruher. \r\nBefore we get into specifics:\r\n\r\n> change the way things are parsed when running a batch file vs an executable seems very improper to me\r\n\r\nIt's not improper. It's an invaluable accommodation that relieves users of (most of) the burden of having to account for the anarchy of argument-passing on Windows.\r\n\r\nEnsuring that arguments are _ultimately_ passed _as-is_ - based on PowerShell's parsing rules _alone_ - to external programs as-is is a core duty of a shell.\r\n\r\nWhile the limitations of Windows prevent a _fully_ robust solution, we can provide a solution that covers _most_ use cases, based on _straightforward rules_ - and the ones laid out for the _class_ of batch files (as opposed to hard-coding exceptions for specific executables) achieve that.\r\n\r\n> With regard to MSIEXEC.EXE specifically, i believe we will handle that just fine\r\n\r\nNo. passing something like `foo='bar none'` results in `\"foo=bar none\"` on the behind-the-scenes command line, which `msiexec.exe` (and others, such as `msdeploy.exe`) do _not_ recognize.\r\nAgain, the proposed accommodation is based on an arguments matching a (regex) _pattern_, not on specific executables.\r\n\r\n> I didn't try a VB script.\r\n\r\nGood point - I hadn't considered VBScript - I'll investigate.\r\n",
    "created_at": "2021-04-21T22:22:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-824400069",
    "id": 824400069,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDQwMDA2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824400069/reactions"
    },
    "updated_at": "2021-04-22T01:36:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824400069",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Quick update, @JamesWTruher: `PSNativeCommandArgumentPassing` breaks invocation of VBScripts with arguments: see #15289\r\n",
    "created_at": "2021-04-21T23:17:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-824425976",
    "id": 824425976,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDQyNTk3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824425976/reactions"
    },
    "updated_at": "2021-04-21T23:17:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/824425976",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "As for VBScript (WSH):\r\n\r\nVBScript's command-line argument parsing is provided by the WSH ([Windows Script Host](https://en.wikipedia.org/wiki/Windows_Script_Host)) CLIs, `cscript.exe` (console) and `wscript.exe` (GUI), so with direct invocation of script files the same behavior applies to the following filename extensions listed in `$env:PATHEXT`, which includes both VBScript and JScript scripts and their variants, as well as WSH wrapper files:\r\n\r\n```none\r\n.vbs .vbe .js .jse .wsf .wsh\r\n```\r\n\r\n**WSH supports _neither_ `\\\"`- nor `\"\"`-escaping of embedded `\"\"`, but using `\"\"` results in _less broken_ behavior, and is therefore another accommodation worth making** - I've updated the initial post and the comment with the examples accordingly:\r\n\r\nWSH parses a command-line token such as `\"Andre \"\"The Hawk\"\" Dawson\"` as _3 directly adjacent `\"...\"` substrings_, which it _implicitly joins_ to form single, verbatim argument `Andre The Hawk Dawson`. While this is broken in that the embedded `\"` were _stripped_, at least the token was still recognized _as a single argument_.\r\n\r\nBy contrast, `\"Andre \\\"The Hawk\\\" Dawson\"` - which is what `PSNativeCommandArgumentPassing` currently does (as of this writing you must invoke scripts explicitly with `cscript.exe`, due to bug #15289) - is parsed as _two_ arguments, and the `\\` characters are _retained: That is, `\"Andre \\\"The` becomes the the first argument, as verbatim `Andre \\The`, and `Hawk\\\" Dawson\"` becomes the second, as verbatim `Hawk\\ Dawson`.\r\n\r\nTo demonstrate the difference, assuming the following `test.vbs` script:\r\n\r\n```vbscript\r\n' Save with Windows-1252 encoding for the guillemets («») to render properly.\r\nWscript.Echo CStr(WScript.Arguments.Count) + \" argument(s) received:\" + vbLf\r\n\r\ni = 0\r\nfor each arg in WScript.Arguments\r\n  i = i + 1\r\n  WScript.Echo \"  «\" + arg + \"»\"\r\nnext\r\n\r\nWScript.Echo\r\n```\r\n\r\n* Current `PSNativeCommandArgumentPassing` behavior: `\\\"`-escaping:\r\n\r\n```powershell\r\nPS> cscript.exe .\\test.vbs 'Andre \"The Hawk\" Dawson' 'another argument'\r\n3 argument(s) received:\r\n\r\n  «Andre \\The»\r\n  «Hawk\\ Dawson»\r\n  «another argument»\r\n\r\n```\r\n\r\nNote the broken argument partitioning and the literally retained `\\` chars.\r\n\r\n* Behavior with the proposed accommodation (`\"\"`-\"escaping\"; you need `Install-Module Native` v1.4.1 or higher for the `ie` function to show this behavior):\r\n\r\n```powershell\r\nPS> ie cscript.exe .\\test.vbs 'Andre \"The Hawk\" Dawson' 'another argument'\r\n2 argument(s) received:\r\n\r\n  «Andre The Hawk Dawson»\r\n  «another argument»\r\n\r\n```\r\n\r\nWhile the behavior is _partially_ broken - what were meant to be embedded `\"` were _stripped_ - at least the argument was still recognized as a _single argument_ and no characters were _added_.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-22T19:37:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-825132087",
    "id": 825132087,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTEzMjA4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/825132087/reactions"
    },
    "updated_at": "2021-04-22T22:30:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/825132087",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@JamesWTruher, with respect to _batch files_:\r\n\r\n> with a batch file, the `=` seems to be a token separator\r\n\r\nSpecifically, unquoted `<space> , ; =` interchangeably act as argument separators in batch-file command lines (though in practice, it seems, it is only ever spaces that are used).\r\n\r\n```powershell\r\nPS>  dbea -UseBatchFile 'a b', 'a,b', 'a;b', 'a=b'\r\n7 argument(s) received (enclosed in «...» for delineation):\r\n\r\n  «\"a b\"»\r\n  «a»\r\n  «b»\r\n  «a»\r\n  «b»\r\n  «a»\r\n  «b»\r\n\r\nCommand line (without executable; the value of %*):\r\n\r\n  \"a b\" a,b a;b a=b\r\n```\r\n\r\nNote how PowerShell _implicitly_ double-quoted `'a b'`, due to containing a _space_, but the other - spaceless ones - were passed unquoted - causing unexpected argument separation. That is, what you clearly meant to pass as _verbatim_ `a,b`, for instance - on the PowerShell side _single-quoting_ was used, after all -  _should also be received by the batch file as such - that is the job of a shell_.\r\n\r\nWith the proposed Accommodation B (see [above](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995)), even such space-less arguments will be double-quoted in batch-file calls, to ensure that _with the exception of `=`_, and the _addition of_ `& | < > ^`:\r\n\r\n```powershell\r\n# Call via the `ie` function, to activate the accommodations:\r\nPS> dbea -ie -UseBatchFile 'a b', 'a,b', 'a;b', 'a=b' 'a&b' 'a|b' 'a<b', 'a>b' 'a^b'\r\n10 argument(s) received (enclosed in «...» for delineation):\r\n\r\n  «\"a b\"»\r\n  «\"a,b\"»\r\n  «\"a;b\"»\r\n  «a»\r\n  «b»\r\n  «\"a&b\"»\r\n  «\"a|b\"»\r\n  «\"a<b\"»\r\n  «\"a>b\"»\r\n  «\"a^b\"»\r\n\r\nCommand line (without executable; the value of %*):\r\n\r\n  \"a b\" \"a,b\" \"a;b\" a=b \"a&b\" \"a|b\" \"a<b\" \"a>b\" \"a^b\"\r\n```\r\n\r\n**Note that arguments `'a&b' 'a|b' 'a<b', 'a>b' 'a^b'` simply _break_ the call with the current `PSNativeCommandArgumentPassing ` implementation**, because the _unquoted_ `& | < > ^` are then interpreted as `cmd.exe` _metacharacters_.\r\n\r\n**The reason for the `=` exception** is that it **conflicts with Accommodation C for `msiexec`-style executables** (where the `a=` part of `a=b` must be _unquoted_), and I think **the latter should be given precedence** in this case. \r\n\r\nFortunately, passing `a=b` _through_ as a single argument as part of relaying the command line via `%*` isn't affected, as you can see from the output above, and over time I expect more and more batch files to be nothing more than CLI entry points with pass-through arguments (e.g., for Python CLIs, such as the `az.cmd` batch file that is the Azure CLI's entry point).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-22T20:23:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-825159826",
    "id": 825159826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTE1OTgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/825159826/reactions"
    },
    "updated_at": "2021-04-22T20:41:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/825159826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The [initial post](https://github.com/PowerShell/PowerShell/issues/15143#issue-849198498) details the proposed accommodations and their benefits and [this follow-up comment](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995) provides examples of what we would _gain_.\r\n\r\nPerhaps it is helpful to complement that with **examples of what _won't work_, unless these accommodations are implemented**:\r\n\r\n* First, a quick aside: Given the number of bugs [summarized above](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995) that have surfaced in only a short period after release of PowerShell Core 7.2.0-preview.5, it is evident that **more comprehensive tests are needed**.\r\n\r\nThe examples show the current behavior with `PSNativeCommandArgumentPassing ` in effect, as of PowerShell Core 7.2.0-preview.5; their names correspond to the [accommodation examples above](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995); all commands can be made to work properly with `Install-Module Native` and by prepending each invocation with `ie` (e.g. `ie .\\temp.cmd ...`)\r\n\r\n---\r\n\r\n**Unsupported Scenario A: Inability to pass arguments with embedded `\"` to batch files:**\r\n\r\n```powershell\r\n\"@echo off`necho [%1]`n\" > temp.cmd; .\\temp.cmd 'Luke \"Aches & Pains\" Appling'; Remove-Item temp.cmd\r\n[\"Luke \\\"Aches]\r\nThe system cannot find the path specified.\r\n```\r\n\r\nAs you can see, not only was the argument not recognized as a whole, the command _broke_, because - due to the embedded `\"` being escaped as `\\\"` instead of `\"\"` - the from `cmd.exe`'s perspective effectively _unquoted_ `&` was interpreted as a _statement separator_.\r\n\r\n---\r\n\r\n**Unsupported Scenario B: Inability to pass _space-less_ arguments that contain `& , ; ^ | < >` to batch files:**\r\n\r\nUsing [Azure's `az` CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?view=azure-cli-latest&tabs=azure-powershell), which is implemented as wrapper batch file `az.cmd` that calls a Python script, as an example:\r\n\r\n```powershell\r\n# Note the '&count=10' part of the URL\r\nPS> az.cmd rest --method get --url 'https://example.org/resources?api-version=2019-07-01&count=10'\r\n<Azure-specific error message>\r\n'count' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\n\r\nSince the URL by definition contains no spaces, PowerShell passes it _unquoted_, so that the unquoted `&` is again interpreted as `cmd.exe`'s _statement separator.\r\n\r\nIn other words: with direct invocation, **it is impossible to pass a URL that contains `&` character to a batch file.**\r\n\r\n---\r\n\r\n**Unsupported Scenario C: Inability to pass `PROPERTY=\"VALUE WITH SPACES\"` style arguments to `msiexec`-style executables:**\r\n\r\n```powershell\r\n# FAILS due to invalid syntax.\r\n# The fact that the CLI help dialog pops up implies that.\r\n# (A syntactically correct call would result in a quiet no-op, due to use of /quiet)\r\nPS> $dir='c:\\program files\\foo'; msiexec /quiet /i foo.msi INSTALLDIR=$dir\r\n```\r\n\r\nBecause PowerShell passes `\"INSTALLDIR=c:\\program files\\foo\"` rather than the `INSTALLDIR=\"c:\\program files\\foo\"` required by `msiexec` - quoting of the _value part only_ - `msiexec` encounters a syntax error.\r\n\r\n---\r\n\r\n**Unsupported Scenario D: Inability to reliably report a batch file's _exit code_:**\r\n\r\n```powershell\r\nPS> '@echo off & whoami -nosuch 2>NUL || exit /b' | Set-Content test.cmd; .\\test.cmd; $LASTEXITCODE\r\n0\r\n```\r\n\r\nThat is, even though `whoami` reported exit code `1` and the batch file was exited as result of that, PowerShell saw exit `0`, mistakenly implying that the batch file succeeded.\r\n\r\n---\r\n\r\n**Unsupported Scenario E: Inability to call WSH (VBScript, JScript) scripts with arguments with embedded `\"` while preserving at least argument boundaries:**\r\n\r\n```powershell\r\n# To work around #15289, cscript.exe is explicitly used for invocation, but the behavior would be the same without it.\r\nPS> ' WScript.Echo WScript.Arguments(0)' > temp.vbs; cscript .\\temp.vbs 'Luke \"Aches & Pains\" Appling'; Remove-Item temp.vbs\r\nLuke \\Aches\r\n```\r\n\r\nNote how the argument wasn't recognized as a whole, and a `\\` was inserted, resulting from the `\\\"`-escaping that is applied.\r\nAs [detailed above](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-825132087), there is no complete solution here, but using `\"\"`-escaping at least preserves argument boundaries (while _stripping_ embedded `\"`).\r\n\r\n---\r\n\r\n**Unsupported Scenario F: Inability to call `cmd.exe` with `/c` or `/k` with _individual arguments_ if both the executable path and one of the arguments contain `\"`:**\r\n\r\n```powershell\r\nPS> cmd /c 'C:\\Program Files\\PowerShell\\7\\pwsh' -noprofile -c \"'hi there'\"\r\n'C:\\Program' is not recognized as an internal or external command, operable program or batch file.\r\n```\r\n",
    "created_at": "2021-04-25T14:05:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826330365",
    "id": 826330365,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjMzMDM2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826330365/reactions"
    },
    "updated_at": "2021-04-25T14:05:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826330365",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I don't know if the behavior of scenario F should be changed. This is simply the behavior of cmd.exe. To make it work just use\r\n```\r\ncmd.exe /c@ 'C:\\Program Files\\PowerShell\\7-preview\\pwsh' -noprofile -c \"'hi there'\"\r\n```\r\nThis form of the command works in Windows Powershell 5.1, it works in the current powershell preview with `PSNativeCommandArgumentPassing` enabled and it works in cygwin bash and in ubuntu wsl bash.\r\n\r\nI'm just not a huge fan of detecting a specific exe file and behaving differently. Detecting a specific file type (`.vbs` or `.bat`) would also not be ideal, but would be IMHO much cleaner then detecting a specific exe.",
    "created_at": "2021-04-25T14:56:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826337948",
    "id": 826337948,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjMzNzk0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826337948/reactions"
    },
    "updated_at": "2021-04-25T14:58:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826337948",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Accommodation F is definitely the _least_ important accommodation, and the failure is unequivocally `cmd.exe`'s fault (details [here](https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-800376364)).\r\n\r\nBut I still think it's worth doing:\r\n\r\n* Because it's one less thing for users to worry about it.\r\n* Because we get the implementation for free as part of Accommodation D (reliable exit-code reporting for batch files).\r\n\r\nBy contrast, the `/c@` _workaround_  - while good to know - is obscure (I may have seen it before; if so, it slipped my mind.)\r\n\r\n> I'm just not a huge fan of detecting a specific exe file and behaving differently. Detecting a specific file type (.vbs or .bat) would also not be ideal, but would be IMHO much cleaner then detecting a specific exe.\r\n\r\nI'm not a fan of that either, and _I wish we didn't have to do it_ (a kingdom for Unix-style argument passing!), but if we want to be a predictable shell on Windows that doesn't constantly and in perpetuity frustrate users with quoting headaches we have no other choice.\r\n\r\nThe accommodations above, which our previous conversations helped shape, relate _exclusively_ to:\r\n\r\n*  well-known, Windows-native _engine-type_ executables (`cmd.exe`, `cscript.exe`, `wscript.exe`) rather than _specific executables with specific purposes_\r\n\r\n* well-known filename _extensions associated with said engine-type executables_ (batch files, WSH scripts).\r\n\r\n* arguments matching a _property/option-name-value pattern_, irrespective of target executable.\r\n\r\nThese rules are:\r\n\r\n* at least at a high level easy to grasp and document\r\n\r\n* most users won't have to think about them at all, because their calls will just work - that's what you want from a shell\r\n\r\n* A _one-time_ accommodation to spare users having to deal with  _historical baggage_ and dozens of obscure rules and exceptions - all future CLIs can reasonably be expected to understand the `\\\"`-escaping convention.\r\n\r\n\r\n",
    "created_at": "2021-04-25T15:14:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826340699",
    "id": 826340699,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM0MDY5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 1,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826340699/reactions"
    },
    "updated_at": "2021-04-25T15:14:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826340699",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S., @TSlivede: \r\n\r\nSpecial-casing `cmd.exe` calls is unavoidable unless we want to _break_ the following (`cmd /c \"<whole cmd.exe command line>\"`, which I feel strongly we shouldn't), which:\r\n\r\n* currently works, but due to #15239  _only without_ `PSNativeCommandArgumentPassing`\r\n\r\n* is the best workaround that for any remaining edge cases, superior to `--%` (which is also currently broken - see #15261)\r\n\r\n```powershell\r\nPS> & { $PSNativeCommandArgumentPassing='Legacy';  cmd /c \"echo Honey, I'm `\"$HOME`\".\"  } \r\nHoney, I'm \"C:\\Users\\jdoe\".\r\n```\r\n",
    "created_at": "2021-04-25T16:15:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826349418",
    "id": 826349418,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM0OTQxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826349418/reactions"
    },
    "updated_at": "2021-04-25T16:15:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826349418",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I agree, that `cmd /c \"<whole cmd.exe command line>\"` must not be broken. But wouldn't it be enough to provide a function similar to\r\n```\r\nfunction Invoke-Cmd() { $PSNativeCommandArgumentPassing='Legacy';  & $Env:ComSpec @args  }\r\n```\r\nand making `cmd` and `cmd.exe` aliases to that by default?\r\n<details><summary><sup>Alternatives to <code>$Env:ComSpec</code></sup></summary>\r\nAn environment variable could in some cases be missing, so I would want to avoid that.\r\n<ul>\r\n<li><code>& \"$((Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion').SystemRoot)\\System32\\cmd.exe\"</code></br>seems most reliable, but it's ugly.</li>\r\n<li><code>& \"C:\\Windows\\System32\\cmd.exe\"</code></br> does not work if someone accidentally installed Windows on a different drive letter and never fixed that. (Or if somebody just wanted to install windows in <code>C:\\WINNT</code> for whatever reason...)</li>\r\n<li><code>& '\\\\.\\GLOBALROOT\\Systemroot\\System32\\cmd.exe'</code></br> seems most reliable, but on 64 bit Windows always launches the 64 bit cmd, even if the 32 bit version of powershell was used.</li>\r\n<li><code>& (Get-Command -All cmd|?{$_.CommandType -notmatch 'Alias'}|select -First 1)</code></br> searches in PATH - again an environment variable, but this is what people would usually expect if they just type <code>cmd</code> without a full path.</li>\r\n</ul>\r\n</details>\r\n\r\nThis wouldn't fix scenario F, but I don't think, that's really necessary, given that the workaround exists and given that that style of calling cmd did never work in any shell. (It breaks as soon as the first argument starts with a quote (there doesn't even need to be a quote at the end of the last argument)). But OK, if `cmd` is already an alias to some function, that function could probably also do a little more and fix scenario F.\r\n\r\n`cscript` and `wscript` could be aliases to functions, that remove the unsupported quotes.\r\n\r\nThis way no special handling for specific exe's would be required within powershell itself.",
    "created_at": "2021-04-25T17:45:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826361659",
    "id": 826361659,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM2MTY1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826361659/reactions"
    },
    "updated_at": "2021-04-25T20:05:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826361659",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think, that's really necessary, \r\n\r\nI don't feel strongly about Accommodation F, given that not all `cmd.exe` command lines could be passed as individual arguments using PowerShell syntax. E.g., even with the proposed accommodation you couldn't do an individual-argument equivalent to, say, \r\n``cmd /c \"start `\"new`\" /d $PSHOME cmd\"``, because `cmd /c start \"new\" /d $PSHOME cmd` would invariably behave differently, because - short of using `--%`, which then prevents use of `$PSHOME` - the `\"new\"`, due containing no spaces, is passed as unquoted `new`, violating the syntax of `cmd.exe`' s internal `start` command. \r\n\r\n> But wouldn't it be enough to provide a function similar to\r\n\r\nI previously suggested offering such a command _in addition to_ the proposed accommodations (possibly without F), namely as a cmdlet I've called `Invoke-NativeShell` (`ins`) and implemented in `Install-Module Native`.\r\nIt should, however accept a _single string_ with a _full command line_ and would, in short, defer to `cmd /c` on Windows, and to `sh -c` on Unix.\r\nIt is the proper solution to the in my mind misguided \"native operator\" proposal, as argued in https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939 and avoids the individual-arguments syntax limitations that Accommodation F as well as your `Invoke-Cmd` function would  suffer, such as the example above.\r\n(My implementation actually uses a temporary batch file behind the scenes on Windows, and `bash` instead of `sh` on Unix, which ultimately has advantages - see https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671974482 - and I think an official implementation should too).\r\n\r\nE.g.:\r\n\r\n```powershell\r\n# `ins` is the alias of `Invoke-NativeShell`\r\nPS> ins \"echo Honey, I'm `\"$HOME`\".\"\r\nHoney, I'm \"C:\\Users\\jdoe\".\r\n```\r\n\r\n---\r\n\r\n> `cscript` and `wscript` could be aliases to functions, that remove the unsupported quotes.\r\n\r\n* This kind of shadowing of native executables I would advise against, I think it's ultimately more trouble than it's worth.\r\n\r\n* The shadowing solution isn't sufficient, because _indirect_ invocation of these executables must be handled as well, such as when directly invoking VBScript files (e.g., `.\\script.vbs foo bar`)  - whose filename extension, `.vbs`, is associated with the `VBSFile` file-type definition in the registry, whose command line explicitly references `cscript.exe` or `WScript.exe` (e.g., `\"C:\\WINDOWS\\System32\\WScript.exe\" \"%1\" %*`)\r\n\r\n\r\n",
    "created_at": "2021-04-25T20:32:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826385692",
    "id": 826385692,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM4NTY5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826385692/reactions"
    },
    "updated_at": "2021-04-26T21:37:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826385692",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this, we agreed to add a new `Windows` value to `$PSNativeCommandArgumentPassing` where if the CommandInfo being executed is `cmd.exe`, `wscript.exe`, or `cscript.exe` (or any of the relevant extensions), then we fallback to `Legacy` mode to maintain compatibility with Windows PowerShell 5.1 rather than perform any \"magic\" that would make it harder to write scripts that work across 5.1 and 7 (this is based on internal partner feedback using this experimental feature).",
    "created_at": "2021-05-05T22:27:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833090452",
    "id": 833090452,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzA5MDQ1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 8,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833090452/reactions"
    },
    "updated_at": "2021-05-05T22:27:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833090452",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> this is based on internal partner feedback using this experimental feature\r\n\r\nYou're confirming @KirkMunro's [point](https://github.com/PowerShell/PowerShell/pull/10238#issuecomment-826091414).\r\n\r\nThe sad thing about this decision is that in this case _there is no need to choose_ between serving favored groups and quality-of-life improvements for the community at large.\r\n\r\nIntroducing another setting will just create more confusion while providing no benefit at all; on the contrary.\r\n\r\nOnly two settings are needed:\r\n\r\n* `Legacy` - keep everything as is, for those who need to write code targeting both editions on Windows (and possibly older PS Core versions on Unix). The Byzantine workarounds required to work around the broken legacy behavior in that case are then unavoidable.\r\n\r\n* `Standard` - make PowerShell act like a proper shell _as much as possible_ on Windows, for those free to target v7.2+ only, which _requires implementing the proposed accommodations_ . By contrast, with the (lucky) exception of `cmd /c`, the legacy behavior is _hopelessly broken_, so introducing a selective opt-back-in setting is both confusing and utterly unhelpful.\r\n\r\nWhat you call \"magic\" is the very opposite _from the user's perspective_: \r\n\r\nIt enables users to _focus on PowerShell's syntax alone_, trusting the shell to pass arguments on as specified _solely by its own rules_ - that is a core mandate of a shell. That the act of passing requires additional work behind the scenes is (a) unfortunate historical baggage on Windows that cannot be avoided and (b) should be an _implementation detail_ that the _user is shielded from_.\r\n\r\n**By not providing a single setting that combines `.ArgumentList` with the selective Windows accommodations proposed, you're forever saddling Windows users with quoting headaches and obscure failures.\r\nAs stated, _batch files_ as CLI entry points are common (Azure, npm-installed script-based executables, ...) and users may not even be aware that they're calling batch files, but - more importantly - _they shouldn't have to be_.** \r\n\r\nIn the absence of a proper solution, the `ie` function from the [`Native` module](https://github.com/mklement0/Native) (`Install-Module Native`) can be used: it incorporates all proposed accommodations, and equally works in Windows PowerShell v3+ as well as in all PowerShell Core versions, irrespective of the availability of the `PSNativeCommandArgumentPassing` feature and its setting; just prepend `ie ` to your native-executable calls.\r\nPerhaps needless to say, needing a third-party module to make PowerShell fulfill one of its core mandates as a shell is a sad state of affairs.\r\n\r\n---\r\n\r\nAs part of my ongoing withdrawal (in both senses of the word): I've said all that I have to say, and I'm unsubscribing from this thread.\r\n",
    "created_at": "2021-05-06T14:28:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833568832",
    "id": 833568832,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzU2ODgzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 21,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 21,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833568832/reactions"
    },
    "updated_at": "2021-05-07T15:17:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833568832",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I don't quite get this.  There was a lot of resistance to \"fixing\" argument passing by \"special casing\" this feature for certain executables.  But in the end, the team opts to \"special case\" the feature for these executables anyway - except not to fix the issues but drop back to the old (legacy) parsing mode.  That's a head scratcher.\r\n\r\nThis new approach feels more like a \"Hybrid\" mode where some executables get the old parsing treatment.  Is that list configurable?  What if we discover another native Windows app that doesn't behave well with Standard mode?   \r\n\r\nSeems like this feature should stay experimental until the issues with cmd.exe, msiexec and c/wscript can be worked out.  BTW @mklement0, thanks for the `Native` module.  It's quite handy.\r\n\r\nOne last note, the recent loss of community support should be concerning to the team. Something is clearly not working right.  Don't get me wrong, I don't think the team should merge community PRs willy / nilly.  There needs to be a high quality bar to ensure new PowerShell releases are high quality and avoid breaking changes as much as possible.  But @mklement0 has made some in-depth and well researched suggestions here that appear to be falling on deaf ears.  :-( ",
    "created_at": "2021-05-12T18:20:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-839995245",
    "id": 839995245,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTk5NTI0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 17,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 17,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/839995245/reactions"
    },
    "updated_at": "2021-05-12T19:35:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/839995245",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The saga continues at https://github.com/PowerShell/PowerShell/pull/15408#issuecomment-863458289",
    "created_at": "2021-06-18T13:03:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-864022233",
    "id": 864022233,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDAyMjIzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 1,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/864022233/reactions"
    },
    "updated_at": "2021-06-18T13:03:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/864022233",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Whatever you do, please don't special case cmd implicitly (e.g. by sniffing the command name or its file extension). I often `%*` forward arguments in cmd scripts to other apps, and would 100% expect that the arguments would be passed to cmd the same way as they were passed to the other native exe. Special casing would break that assumption.",
    "created_at": "2021-06-22T19:14:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-866261787",
    "id": 866261787,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjI2MTc4Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/866261787/reactions"
    },
    "updated_at": "2021-06-22T19:15:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/866261787",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1258885?v=4",
      "events_url": "https://api.github.com/users/erinlah-ms/events{/privacy}",
      "followers_url": "https://api.github.com/users/erinlah-ms/followers",
      "following_url": "https://api.github.com/users/erinlah-ms/following{/other_user}",
      "gists_url": "https://api.github.com/users/erinlah-ms/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/erinlah-ms",
      "id": 1258885,
      "login": "erinlah-ms",
      "node_id": "MDQ6VXNlcjEyNTg4ODU=",
      "organizations_url": "https://api.github.com/users/erinlah-ms/orgs",
      "received_events_url": "https://api.github.com/users/erinlah-ms/received_events",
      "repos_url": "https://api.github.com/users/erinlah-ms/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/erinlah-ms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erinlah-ms/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/erinlah-ms"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Pretty sure doing that was one of the main premises @JamesWTruher was working from. I'd agree that's probably going to cause more confusion than it helps ultimately, though. 🤔 ",
    "created_at": "2021-06-22T20:38:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-866317075",
    "id": 866317075,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjMxNzA3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/866317075/reactions"
    },
    "updated_at": "2021-06-22T20:38:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/866317075",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "There are two things I can think of which *might* inform some of this, but I yet haven't fully explored...\r\n\r\n 1. There is a `/s` modifer for `cmd /c` and `cmd /k` which deliberately *alters* the behaviour of quoted arguments, that you may also need to factor.  The wording for exactly how that works in `cmd /?` is somewhat confusing, but I have historically found circumstances (particularly in batch files) where adding `/s` has made all the difference (although I'd have to rummage to find anything concrete).  \r\n\r\n    I only call this out because, since you are reworking quoting for `cmd /c \"...\"` and `cmd /k \"...\"`, you may also need to rework quoting for `cmd /s /c \"...\"` and `cmd /s /c \"...\"` to match *that* behaviour, too.\r\n\r\n 2. The documentation in `help exit` does not expressly call out the behaviour you describe in https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-816105557, so is it a valid test?  As I read it, `EXIT [/b] [exitCode]` makes both `/b` and `exitCode` optional, and only says that `/b` exits a batch script, not the interpreter (which was actually wrong up until approx. Vista).  The call `exit /b` does not specify an exit code, only that a batch file should exit.  There is no help-documented default exit code if `exitCode` is not passed (I've always assumed `0`), nor does it expressly state that it passes through any prior errorlevel.\r\n\r\n    As such, in `whoami -nosuch 2>NUL || exit /b`, isn't that *technically* saying *if `whoami` exits with non-zero, exit from the batch*, not *if `whoami` exits with non-zero, exit from the batch with the exit code of `whoami`*?  (the exit code being arbitrary/undefined, and I've always assumed as `0`).\r\n\r\n(I've always used `IF NOT \"{%ERRORLEVEL%}\"==\"{0}\" EXIT /b %ERRORLEVEL%` as my *terminate batch with prior exit code* approach, but maybe that's never been necessary.)\r\n\r\nOther things I can think of, which may or may not be relevant...\r\n 1. if we're building a list of exceptional quoting rules, `find.exe '\"hello\"' hello.txt` has always been a pain.  It's even worse if you want to interpolate: ``find.exe \"`\"hello $myvar`\"\"`` *(even moreso if you want to put that in Markdown!)*\r\n\r\n 2. also consider `forfiles.exe`, which has its own expectations for `/c` (including `/c cmd /c \"foo\"`) *and* its own processing of 0xHH hex numbers -- `forfiles.exe /c \"cmd /c 0x22runme /x @fpath0x22\"`.\r\n\r\n 3. there is also special handling of `^` which can act, in some cases, as an escape character for Windows batch and at least one of the Win32/ShellExecute command-line building args.",
    "created_at": "2022-02-16T19:23:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-1042073237",
    "id": 1042073237,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15143",
    "node_id": "IC_kwDOAvT7bc4-HMaV",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1042073237/reactions"
    },
    "updated_at": "2022-02-17T01:11:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1042073237",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12205864?v=4",
      "events_url": "https://api.github.com/users/jimbobmcgee/events{/privacy}",
      "followers_url": "https://api.github.com/users/jimbobmcgee/followers",
      "following_url": "https://api.github.com/users/jimbobmcgee/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimbobmcgee/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jimbobmcgee",
      "id": 12205864,
      "login": "jimbobmcgee",
      "node_id": "MDQ6VXNlcjEyMjA1ODY0",
      "organizations_url": "https://api.github.com/users/jimbobmcgee/orgs",
      "received_events_url": "https://api.github.com/users/jimbobmcgee/received_events",
      "repos_url": "https://api.github.com/users/jimbobmcgee/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jimbobmcgee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimbobmcgee/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jimbobmcgee"
    }
  }
]
