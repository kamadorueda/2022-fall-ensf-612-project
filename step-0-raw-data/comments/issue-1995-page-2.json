[
  {
    "author_association": "NONE",
    "body": "Making a special operator for this doesn't make sense for a command-line shell at all, since its main job is to launch programs and pass them arguments. Introducing a new operator that does `system()` for this job is like Matlab introducing a way to call `calc.exe` because it has a bug in its arithmetics. What should instead be done is that:\r\n\r\n* The pwsh team prepares for a new major release that fixes the command-line stuff, moving the current behavior behind a built-in cmdlet.\r\n* As a stop-gap solution, the upcoming pwsh version gets a built-in cmdlet that uses the new, correct behavior for command-line passing.\r\n\r\nThe same applies to `Start-Process`. (Actually it's a pretty good candidate for the \"new\" cmdlet with some options like `-QuotingBehavior Legacy`...) See #13089.\r\n\r\n",
    "created_at": "2020-07-02T19:48:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653191730",
    "id": 653191730,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE5MTczMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 9,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653191730/reactions"
    },
    "updated_at": "2020-07-03T08:53:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653191730",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Why is Powershell behaving differently in these two situations? Specifically, it is inconsistently wrapping args containing spaces in double-quotes.\r\n\r\nI get consistent results in v.7.  Seems fixed.\r\n```powershell\r\nPING 'A \\\"B'\r\n```\r\n> Ping request could not find host A \"B.\r\n```powershell\r\nPING 'A\\\" B'\r\n```\r\n> Ping request could not find host A\" B.",
    "created_at": "2020-07-13T18:40:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657725486",
    "id": 657725486,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzcyNTQ4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657725486/reactions"
    },
    "updated_at": "2020-07-13T18:40:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657725486",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It' isn't fixed, because the verbatim hostnames that `ping` should see are `A \\\"B` and `A\\\" B` - _with_ the `\\` characters.\r\n\r\nPowerShell, as a shell, should parse the arguments according _its_ rules - only - and then transparently ensure that the target process sees the same verbatim values that were the result of PowerShell's own parsing. \r\n\r\nThat _other_ shells - and those poor programs running on Windows that must act like their own shell, in a manner of speaking, by having to parse a _command line_ just to extract the individual arguments passed - use `\\` as the escape character shouldn't enter the picture here - accommodating that (necessary on Windows only, on Unix you just pass the verbatim arguments directly as an array) is PowerShell's job as a shell, _behind the scenes_.\r\n\r\nAs an aside, just like PowerShell itself doesn't require escaping of `\"` _inside `'...'`_ (single-quoted strings), neither do POSIX-compatible shells such as `bash`: executed from `bash`, for instance, `/bin/echo 'A \\\"B'` (sensibly) prints `A \\\"B` (the `\\` are treated as literals in single-quoted strings) - that executing the very same command from PowerShell (unexpectedly) yields\r\n`A \"B` - the `\\` is missing - is a manifestation of the problems discussed here.\r\n\r\n ",
    "created_at": "2020-07-13T19:04:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657736750",
    "id": 657736750,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzczNjc1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657736750/reactions"
    },
    "updated_at": "2020-07-13T19:09:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657736750",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I should clarify:\r\n\r\n* From the perspective of wanting to ultimately pass `A \"B` _verbatim_, you should be able to use `'A \"B'` from PowerShell.\r\n\r\n* The command line that PowerShell currently constructs behind the scenes contains `\"A \"B\"` - which the target process see as `A B` - that is, the blind enclosure in `\"...\"`, without escaping the _embedded_ `\"` resulted in the effective loss of the embedded `\"`. What PowerShell _should_ use in the behind-the-scenes command line in this case is `\"A \\\"B\"` - that is, the embedded `\"` needs `\\`-escaping.\r\n\r\n* Similarly, the same blind enclosure causes `'A \\\"B'` to be represented as `\"A \\\"B\"` on the behind-the-scenes command line, which just so happens to turn the _embedded_ `\\\"` into an _escaped_ `\"` character, which the target process therefore sees as `A \"B`; that is, the lack of _automatic_ escaping resulted in the effective loss of the embedded `\\`. What PowerShell _should_ use in the behind-the-scenes command line in this case is `\"A \\\\\\\"B\"` - that is, both the `\\` and the `\"` need escaping.",
    "created_at": "2020-07-13T19:39:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657752545",
    "id": 657752545,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc1MjU0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657752545/reactions"
    },
    "updated_at": "2020-07-13T19:48:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657752545",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> It' isn't fixed, because the verbatim hostnames that `ping` should see are `A \\\"B` and `A\\\" B` - _with_ the `\\` characters.\r\n\r\n\"It\" refers here to the quoted complaint, which I fortunately cannot reproduce.",
    "created_at": "2020-07-13T19:56:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657759906",
    "id": 657759906,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc1OTkwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657759906/reactions"
    },
    "updated_at": "2020-07-13T19:56:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657759906",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@yecril71pl, I see: my (incorrect) assumption was that the \"inconsistently wrapping args containing spaces in double-quotes\" refers to the _lack of automatic escaping of embedded `\"` and `\\` characters_, as explained in my previous comment - and that is the crux of this issue.\r\n\r\nThere have been minor fixes in PowerShell Core that Windows PowerShell doesn't have; I can only think of one right now:\r\n\r\n* Windows PowerShell uses blind double-quoting in case of a trailing `\\`: `'A B\\'` turns into (broken) `\"A B\\\"` - PS Core handles that correctly (`\"A B\\\\\"`).\r\n\r\nGiven that this repo is for PS Core only, it's sufficient to focus on what's still broken in PS Core (it can be helpful to mention differences _as an aside_, but it's best to make that aspect explicit).\r\n\r\n---\r\n\r\nAnd even the scenario you had in mind _is_ still broken in PS Core - but only _if you omit the `\\` from the argument_:\r\n\r\nPassing `'A\" B'` still results in _non_-double-quoted `A\" B` behind the scenes (whereas `'A\\\" B'` results in`\"A\\\" B\"` - which is also broken, as discussed - only differently).\r\n\r\n",
    "created_at": "2020-07-13T20:25:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657772855",
    "id": 657772855,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc3Mjg1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657772855/reactions"
    },
    "updated_at": "2020-07-13T20:28:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657772855",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Given that this repo is for PS Core only, it's sufficient to focus on what's still broken in PS Core (it can be helpful to mention differences _as an aside_, but it's best to make that aspect explicit).\r\n\r\nMeta aside: I find it useful to know that wrong behaviour mentioned in another user’s comment does not apply.  Of course, we could have dismissed the comment merely because the user did not bother to check the current version.  Well.  Unruly reporters being unruly, it is still better to be sure.  IMHO.\r\n",
    "created_at": "2020-07-13T20:46:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657785482",
    "id": 657785482,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc4NTQ4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657785482/reactions"
    },
    "updated_at": "2020-07-13T20:46:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657785482",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "No argument there, but  providing _proper framing and context_ to such _asides_ is important, especially in a looooong thread where the original comment - needed for context - was posted a long time ago and is, in fact, now _hidden_ by default (it never hurts to actually _link_ to the original comment being quoted).\r\n\r\n",
    "created_at": "2020-07-13T20:58:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657790376",
    "id": 657790376,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc5MDM3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657790376/reactions"
    },
    "updated_at": "2020-07-13T20:58:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657790376",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I wonder if these discussions make a difference. Clearly the committee's decisions are independent of what the community wants. Look at the tags: `Resolution- won't fix.` But since PowerShell is open source (MIT), the community can fix this in a separate fork, and call this PowerShellCommunity (`pwshc`) for short. \r\n\r\nThis removes the need for backward compatibility. Later in PowerShell 8, the committee might integrate the fork. \r\n\r\nAbout backward compatibility: PowerShell does not come preinstalled on any operating system, and to me, the hardship of installing `PowerShellCommunity` is the same as `PowerShell`. I prefer to install the community version and use it right away instead of waiting for some future 8 version (or making the code more complex with a new operator).",
    "created_at": "2020-07-13T21:00:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657791203",
    "id": 657791203,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzc5MTIwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657791203/reactions"
    },
    "updated_at": "2020-07-13T21:13:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657791203",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
      "events_url": "https://api.github.com/users/aminya/events{/privacy}",
      "followers_url": "https://api.github.com/users/aminya/followers",
      "following_url": "https://api.github.com/users/aminya/following{/other_user}",
      "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aminya",
      "id": 16418197,
      "login": "aminya",
      "node_id": "MDQ6VXNlcjE2NDE4MTk3",
      "organizations_url": "https://api.github.com/users/aminya/orgs",
      "received_events_url": "https://api.github.com/users/aminya/received_events",
      "repos_url": "https://api.github.com/users/aminya/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aminya"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Since the Committee has decided to keep things broken, it is better to know how badly broken they are.  I think the community can live with `Invoke-Native` that does the right thing.  It is not the community’s job to save Microsoft’s face against their will.",
    "created_at": "2020-07-13T21:38:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657806750",
    "id": 657806750,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzgwNjc1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657806750/reactions"
    },
    "updated_at": "2020-07-13T21:38:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657806750",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> it is better to know how badly broken they are\r\n\r\nI fully agree - even if the problem can't be helped in the moment, knowing how to do things right _in principle, if and when the time comes_ is important - even if that time _never_ comes in the context of a given language.\r\n\r\n> the community can live with `Invoke-Native` that does the right thing\r\n\r\nTo be clear: \r\n\r\n* Something like `Invoke-NativeShell` addresses a _different use case_ -  which is the subject of #13068 -  and for that use case such a cmdlet is _not_ a stopgap: it is the proper solution - see https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656781439\r\n\r\n* _This_ issue is about fixing _PowerShell itself_ (it is not about platform-_native_ functionality), and the _stopgap_ solution to that is to provide a low-ceremony _opt-in_ - hence [the proposal to ship function `iep`](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656781439) as a built-in function, pending a _proper_ fix in a future version that is permitted to substantially break backward compatibility.\r\n\r\n> It is not the community’s job to save Microsoft’s face\r\n\r\nI don't think @aminya's concern is about saving anyone's face - it's about fixing fundamentally broken behavior in an area that is a shell's core mandate.\r\n\r\nThat said, I'm not sure that fragmenting the PowerShell ecosystem with a fork is the right way to go.\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-13T22:01:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657815383",
    "id": 657815383,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzgxNTM4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657815383/reactions"
    },
    "updated_at": "2020-07-13T22:02:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657815383",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I don't have time to respond to all this at just this moment, but I think this is reasonable, so I'm re-opening:\r\n\r\n> Can you at least leave this issue open until that operator actually exists and somebody can show, how that operator would improve anything, that was mentioned in this thread?",
    "created_at": "2020-07-13T22:11:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-657818950",
    "id": 657818950,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzgxODk1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657818950/reactions"
    },
    "updated_at": "2020-07-13T22:11:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657818950",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As I said in related issue, native call operator adds **complexity** in UX and it is wrong direction.\r\nAt the same time, the whole discussion here is about **simplifying** interaction with native applications.\r\n\r\nThe only thing that stops us is that it is a breaking change. We have said many times that this is **too much** destruction, but let's weigh it.\r\n\r\nLet's look at an interactive session. An user will install new PowerShell version and discover new behavior when invoking native applications. What will he say? I will speculate that he will say - \"Thanks - finally I can just type and it works!\".\r\n\r\nLet's look at script execution/hosting scenario. Any new version of an application (even with one minor change!) can break a business process. We always expect this and check our processes after any updates. If we find a problem, then we have several ways:\r\n- rollback the update\r\n- prepare fast fix for script\r\n- turn off a feature which break our script until these things are fixed or they themselves die over time.\r\n\r\n_Since version updates always break something, the last option is the best that we could have and accept._\r\n\r\n(I want to point out that right now PowerShell Core is not a component of Windows and therefore cannot spoil hosting applications directly, only scripts are affected directly.)\r\n\r\nI want to remind you what Jason said above - this is a bug fix.\r\nLet us fix it and simplify everything for everyone. Let users works `powershell-y`.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-15T07:11:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658589286",
    "id": 658589286,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODU4OTI4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658589286/reactions"
    },
    "updated_at": "2020-07-15T10:11:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658589286",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> As I said in related issue, native call operator adds **complicity** in UX and it is wrong direction.\r\n\r\ncomplexity ❓",
    "created_at": "2020-07-15T07:57:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658610054",
    "id": 658610054,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODYxMDA1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658610054/reactions"
    },
    "updated_at": "2020-07-15T10:12:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658610054",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Let's look at an interactive session. An user will install new PowerShell version and discover new behavior when invoking native applications. What will he say? I will speculate that he will say - \"Thanks - finally I can just type and it works!\".\r\n\r\nI have a different scenario: new users give PowerShell a try, realise that it mysteriously fails, move it to the Recycle Bin and never return.  That is what I would do.\r\n\r\n> prepare fast fix for script\r\n\r\nThat is something we should do to cover the obvious cases in user scripts.",
    "created_at": "2020-07-15T08:08:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658615927",
    "id": 658615927,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODYxNTkyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658615927/reactions"
    },
    "updated_at": "2020-07-15T08:08:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658615927",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> realise that it mysteriously fails\r\n\r\nThe whole discussion here is just about getting rid of this \"mysteriously fails\". And it’s best to do this by simplifying but not adding new mysterious things.\r\n",
    "created_at": "2020-07-15T10:17:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658682849",
    "id": 658682849,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODY4Mjg0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658682849/reactions"
    },
    "updated_at": "2020-07-16T06:18:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658682849",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> The whole discussion here is just about getting rid of this. And it’s best to do this by simplifying but not adding new mysterious things.\r\n\r\nWe do not want to get rid of the ability to directly invoke executable programs.",
    "created_at": "2020-07-15T10:26:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658687305",
    "id": 658687305,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODY4NzMwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658687305/reactions"
    },
    "updated_at": "2020-07-15T10:26:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658687305",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "The old invocation is not direct to cmdline either with its guessing of whether something is already quoted. In addition, the said ability would still be retained with --%.",
    "created_at": "2020-07-15T12:49:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658747557",
    "id": 658747557,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc0NzU1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658747557/reactions"
    },
    "updated_at": "2020-07-15T12:50:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658747557",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> In addition, the said ability would still be retained with --%.\r\n\r\n`--%` requires a predefined command line, so its utility is limited.\r\n",
    "created_at": "2020-07-15T13:11:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658758356",
    "id": 658758356,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc1ODM1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658758356/reactions"
    },
    "updated_at": "2020-07-15T13:11:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658758356",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@yecril71pl \r\n\r\n> We do not want to get rid of the ability to directly invoke executable programs.\r\n\r\nI think @iSazonov means getting rid _of the buggy behavior_, i.e. fixing the bug properly (without opt-in via extra syntax), even though it means breaking existing workarounds. Correct, @iSazonov?\r\n\r\n@Artoria2e5:\r\n\r\n> The old invocation is not direct to cmdline either with its guessing of whether something is already quoted\r\n\r\n[_Update_: I misread the quoted line, but hopefully the information is still of interest.]\r\n\r\n* You don't have to _guess_, and the rule is simple: \r\n  * _Only if_ your command name or path is _quoted_  - `'/foo bar/someutil`' - and/or contains _variable references (or expressions) - `$HOME/someutil` - `&` is _required_.\r\n\r\n* While you may consider this need unfortunate, it is at the very heart of the PowerShell language, and necessitated by needing to able to syntactically distinguishing between the two fundamental parsing modes, argument mode and expression mode.\r\n  * Note that the issue is not specific to calling _external programs_; native PowerShell commands too require `&` for invocation if specified via a quoted string / variable reference.\r\n\r\n* If you don't want to memorize this simple rule, the simpler rule is: _always_ use `&`, and you'll be fine - it's somewhat less convenient than _not_ needing anything, but not exactly a hardship (and shorter than `--%`, which is absolutely the wrong solution - see below)\r\n\r\n> the said ability would still be retained with --%.\r\n\r\n[_Update_: I misread the quoted line, but hopefully the information is still of interest.]\r\n\r\nNo, despite the unfortunate conflation of  #13068 with _this_ issue, **`--%` - the ability to call the _native shell_, using _its_, invariably _platform-specific_  syntax - is in no way a workaround for the issue at hand and discussing it as such only adds to the confusion**.\r\n\r\n`--%` is a very different use case and, as currently proposed, has severe limitations; If there's something _not_ worth introducing an _operator_ for (or changing the behavior of an existing one), it's the ability to pass a verbatim command line to the native shell (which, of course, you can already do yourself, with `sh -c '...'` on Unix, and `cmd /c '...'`, _but only robustly if this issue gets fixed_; a binary `Invoke-NativeShell` / `ins` cmdlet implementation, while primarily abstracting away the details of the target shell CLI syntax, would avoid the issue at hand (by direct use of [`System.Diagnostics.ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList)), and can therefore be implemented independently).\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-15T13:19:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658762929",
    "id": 658762929,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc2MjkyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658762929/reactions"
    },
    "updated_at": "2020-07-15T20:41:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658762929",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@yecril71pl \r\n>I have a different scenario: new users give PowerShell a try, realise that it mysteriously fails, move it to the Recycle Bin and never return. That is what I would do.\r\n\r\nCould you clarify: Do you fear, that the current behavior of powershell could lead to this unpleasant user experience, or do you fear that the proposed change leads to that userexperience.\r\n\r\nBecause in my opinion the current behavior of powershell is much more likely to generate such a experience. As said above: The current behavior of powershell should be considered a bug.",
    "created_at": "2020-07-15T13:22:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658764440",
    "id": 658764440,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc2NDQ0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658764440/reactions"
    },
    "updated_at": "2020-07-15T13:23:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658764440",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Why would a new user, without any knowledge of PowerShell being broken, issue commands with contorted arguments?",
    "created_at": "2020-07-15T13:30:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658768746",
    "id": 658768746,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc2ODc0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658768746/reactions"
    },
    "updated_at": "2020-07-15T13:30:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658768746",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@yecril71pl Just to be absolutely sure: You consider the currently required form for arguments \"contorted\", not the suggested fix. ",
    "created_at": "2020-07-15T13:34:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658771369",
    "id": 658771369,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc3MTM2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658771369/reactions"
    },
    "updated_at": "2020-07-15T13:34:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658771369",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I consider your question as originating from your supposition that I am an incurable nerd.  That is correct—but I have retained the ability to imagine what a normal random chap would consider contorted.",
    "created_at": "2020-07-15T13:41:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658774965",
    "id": 658774965,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc3NDk2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658774965/reactions"
    },
    "updated_at": "2020-07-15T13:41:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658774965",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\nI think, that @Artoria2e5 was talking about converting the array of arguments to the single [`lpCommandLine`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw) string when saying\r\n>The old invocation is not direct to cmdline either with its guessing of whether something is already quoted\r\n\r\nBecause when calling\r\n```\r\nechoargs.exe 'some\"complicated_argument'\r\n```\r\nyou indeed have to more or less guess, whether powershell adds quotes around `some\"complicated_argument`.\r\n\r\nExample 1: In most powershell versions   \r\n`echoarg.exe 'a\\\" b'` and `echoarg.exe '\"a\\\" b\"'` will be translated to   \r\n`\"C:\\path\\to\\echoarg.exe\" \"a\\\" b\"` (tested versions 2.0; 4.0; 6.0.0-alpha.15; 7.0.1)   \r\nbut my default powershell on Win10 (version 5.1.18362.752) translates   \r\n`echoarg.exe 'a\\\" b'` to `\"C:\\path\\to\\echoarg.exe\" a\\\" b` and   \r\n`echoarg.exe '\"a\\\" b\"'` to `\"C:\\path\\to\\echoarg.exe\" \"\"a\\\" b\"\"`.\r\n\r\nExample 2: Older powershell versions translate   \r\n`echoarg.exe 'a\"b c\"'` to `\"C:\\path\\to\\echoarg.exe\"  \"a\"b c\"\"` (tested versions 2.0; 4.0;)   \r\nwhereas newer versions translate    \r\n`echoarg.exe 'a\"b c\"'` to `\"C:\\path\\to\\echoarg.exe\" a\"b c\"` (tested versions 5.1.18362.752; 6.0.0-alpha.15; 7.0.1).\r\n\r\n----\r\n\r\nAs the behavior was clearly already changed multiple times, I don't get why it can't be changed one more time to get the expected behavior.",
    "created_at": "2020-07-15T15:15:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658828750",
    "id": 658828750,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODgyODc1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658828750/reactions"
    },
    "updated_at": "2020-07-15T15:20:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658828750",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I see, @TSlivede, thanks for clarifying, and sorry for the misinterpretation, @Artoria2e5.\r\n\r\nAs for the real problem: we're 100% in agreement - in fact, you should never even have to think about what `lpCommandLine` ends up being used behind the scenes on Windows; if PowerShell did the right thing, no one would have to (except for edge cases, but they are not PowerShell's fault, and that's when `--%` (as currently implemented) can help; with a proper fix, there will never be edge cases on Unix-like platforms).\r\n\r\nAs for simply fixing the problem properly: you certainly have my vote (but existing workarounds will break).\r\n\r\n",
    "created_at": "2020-07-15T15:32:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-658837403",
    "id": 658837403,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODgzNzQwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658837403/reactions"
    },
    "updated_at": "2020-07-15T15:32:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658837403",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "TL;DR: The assumption that we can reliably pass any value as an argument to any program in the Microsoft Windows NT subsystem is *wrong*, so we should stop pretending that this is our goal.  However, there is still much to be rescued if we consider the *extent* of the argument.\r\n\r\nWhen invoking native Windows executables, we should preserve original quoting.  Example:\r\n```powershell\r\nCMD /CSTART=\"WINDOW TITLE\"\r\n```\r\n> The system cannot find the file WINDOW.\r\n```powershell\r\n { CMD /CSTART=\"WINDOW TITLE\" }. Ast. EndBlock. Statements. PipelineElements. CommandElements[1]\r\n```\r\n<BLOCKQUOTE ><DL ><DT >\r\nStringConstantType <DD >\r\n BareWord <DT >\r\nValue              <DD >\r\n /CSTART=WINDOW TITLE <DT >\r\nStaticType         <DD >\r\n System.String <DT >\r\nExtent             <DD >\r\n /CSTART=\"WINDOW TITLE\" <DT >\r\nParent             <DD >\r\n CMD /CSTART=\"WINDOW TITLE\"</DL ></BLOCKQUOTE >\r\n\r\nIf we took the *extent* as the template, we would not lose anything and we could call the native executable as expected.  The workaround of using a string argument works here but I do not think it is strictly technically necessary to do so, provided proper support gets implemented within PowerShell.  This approach would work for all cases.  \r\n\r\nQuotation marks within quotations present an insurmountable problem because there are tools that interpret backslash escape   (`TASKLIST \"\\\\\\\"PROGRAM FILES\"`) and tools that do not (`DIR \"\\\"\"PROGRAM FILES\" /B`) and tools that do not bother (`TITLE A \" B`).  However, if we were to escape, the standard escape with backslashes poisons all common file managing tools because they simply do not support quotation marks at all and double backslashes `\\\\` mean something entirely different to them (try `DIR \"\\\\\\\"PROGRAM FILES\" /B`), so sending an argument with a quotation mark inside should be a run-time error.  But we cannot throw an error because we do not know which one is which.  While using the normal escaping mechanism should not cause any harm to arguments that do not contain quotation marks, we cannot be sure that, when applied to arguments that do contain them and fed to a tool that does not support quotation marks as values, it would necessarily cause an aborting error rather than unexpected behaviour, and unexpected behaviour would be very bad indeed.  This is a serious burden we place upon the user.  In addition, we shall never be able to provide for ‘don’t care’ tools (`CMD /CECHO='A  \"  B'`).\r\n\r\nNote that environment variables do not represent values in `CMD`, they represent code fragments that are reparsed as environment variables are expanded, and there is no provision for reliably treating them as arguments to other commands.   `CMD` just does not operate on objects on any kind, not even strings, which seems to be the root cause of the present conundrum.",
    "created_at": "2020-08-08T17:47:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-670955395",
    "id": 670955395,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDk1NTM5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/670955395/reactions"
    },
    "updated_at": "2020-08-08T18:37:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/670955395",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "\r\n> TL;DR: The assumption that we can reliably pass any value as an argument to any program in the Microsoft Windows NT subsystem is _wrong_, so we should stop pretending that this is our goal.\r\n\r\nThat should be the goal though shouldn't it? It's not PowerShell's problem if a program can't interpret arguments it receives.\r\n\r\n> When invoking native Windows executables, we should preserve original quoting. Example:\r\n> \r\n> ```powershell\r\n> CMD /CSTART=\"WINDOW TITLE\"\r\n> ```\r\n\r\nAre you suggesting calling a program should dynamically change the language from PowerShell to whatever the invoked program uses? You wrote that example in PowerShell, which means it should be equivalent to any of the following\r\n\r\n```powershell\r\nCMD \"/CSTART=WINDOW TITLE\"\r\nCMD '/CSTART=WINDOW TITLE'\r\nCMD /CSTART=WINDOW` TITLE\r\n```",
    "created_at": "2020-08-09T09:46:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671031045",
    "id": 671031045,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzMTA0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671031045/reactions"
    },
    "updated_at": "2020-08-09T09:46:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671031045",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/18301471?v=4",
      "events_url": "https://api.github.com/users/Dabombber/events{/privacy}",
      "followers_url": "https://api.github.com/users/Dabombber/followers",
      "following_url": "https://api.github.com/users/Dabombber/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dabombber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Dabombber",
      "id": 18301471,
      "login": "Dabombber",
      "node_id": "MDQ6VXNlcjE4MzAxNDcx",
      "organizations_url": "https://api.github.com/users/Dabombber/orgs",
      "received_events_url": "https://api.github.com/users/Dabombber/received_events",
      "repos_url": "https://api.github.com/users/Dabombber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Dabombber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dabombber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Dabombber"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > TL;DR: The assumption that we can reliably pass any value as an argument to any program in the Microsoft Windows NT subsystem is _wrong_, so we should stop pretending that this is our goal.\r\n> \r\n> That should be the goal though shouldn't it? It's not PowerShell's problem if a program can't interpret arguments it receives.\r\n\r\nThe program `CMD` *can* interpret the argument `/CECHO=A \" B` but PowerShell *cannot* pass it without distorting it.\r\n\r\n> \r\n> > When invoking native Windows executables, we should preserve original quoting. Example:\r\n> > ```powershell\r\n> > CMD /CSTART=\"WINDOW TITLE\"\r\n> > ```\r\n> \r\n> Are you suggesting calling a program should dynamically change the language from PowerShell to whatever the invoked program uses? You wrote that example in PowerShell, which means it should be equivalent to any of the following\r\n> \r\n> ```powershell\r\n> CMD \"/CSTART=WINDOW TITLE\"\r\n> CMD '/CSTART=WINDOW TITLE'\r\n> CMD /CSTART=WINDOW` TITLE\r\n> ```\r\n\r\nI tried to suggest that, when interfacing with external programs under Microsoft Windows NT subsystem, PowerShell has a myriad ways to encode the arguments that are all equivalent to PowerShell but not equivalent to the receiving program.  Being blunt and forcing the One True Way&trade; of encoding arguments, without paying attention to what quoting arrangement the user actually used, is not helpful, to say it mildly.",
    "created_at": "2020-08-09T10:49:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671036601",
    "id": 671036601,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTAzNjYwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671036601/reactions"
    },
    "updated_at": "2020-08-09T10:49:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671036601",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@yecril71pl I'm really confused by your comments. What exactly are you proposing here? Your use cases are all covered by `--%`. You dismissed it earlier by saying\r\n> `--%` requires a predefined command line, so its utility is limited.\r\n\r\nBut in fact you can use environment variables with `--%`. Try This:\r\n\r\n    PS > $env:mytitle='WINDOW TITLE'\r\n    PS > cmd --% /CSTART=\"%mytitle%\"\r\n\r\nSo what am I missing?",
    "created_at": "2020-08-09T11:44:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671041813",
    "id": 671041813,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA0MTgxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671041813/reactions"
    },
    "updated_at": "2020-08-09T11:44:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671041813",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/318668?v=4",
      "events_url": "https://api.github.com/users/imgx64/events{/privacy}",
      "followers_url": "https://api.github.com/users/imgx64/followers",
      "following_url": "https://api.github.com/users/imgx64/following{/other_user}",
      "gists_url": "https://api.github.com/users/imgx64/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/imgx64",
      "id": 318668,
      "login": "imgx64",
      "node_id": "MDQ6VXNlcjMxODY2OA==",
      "organizations_url": "https://api.github.com/users/imgx64/orgs",
      "received_events_url": "https://api.github.com/users/imgx64/received_events",
      "repos_url": "https://api.github.com/users/imgx64/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/imgx64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/imgx64/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/imgx64"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "We are missing the syntax `CMD /CSTART=\"$mytitle\"`, without leaking things to `ENV:`.",
    "created_at": "2020-08-09T11:55:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671042877",
    "id": 671042877,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA0Mjg3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671042877/reactions"
    },
    "updated_at": "2020-08-09T11:55:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671042877",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "As a terrible idea, we do have the option of replacing `Environment.ExpandEnvironmentVariables` with something else. There's no native implementation on Unix anyways, and I don't believe the stuff it processes would become performance-critical when rewritten in C#.\r\n\r\nSince equal signs are not allowed in env var names anyways, we can have `%=$a%` mean `$a`. This wouldn't break anything existing while allowing for some very flexible (and possibly bad) extensions like making it work like JS's template strings. Hell, we can define `%VARNAME=$var%` as some sort of fallback syntax too.\r\n\r\nAs for the documentation hell this would cause... I apologize.",
    "created_at": "2020-08-09T20:02:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671094779",
    "id": 671094779,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA5NDc3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671094779/reactions"
    },
    "updated_at": "2020-08-11T15:16:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671094779",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6459309?v=4",
      "events_url": "https://api.github.com/users/Artoria2e5/events{/privacy}",
      "followers_url": "https://api.github.com/users/Artoria2e5/followers",
      "following_url": "https://api.github.com/users/Artoria2e5/following{/other_user}",
      "gists_url": "https://api.github.com/users/Artoria2e5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Artoria2e5",
      "id": 6459309,
      "login": "Artoria2e5",
      "node_id": "MDQ6VXNlcjY0NTkzMDk=",
      "organizations_url": "https://api.github.com/users/Artoria2e5/orgs",
      "received_events_url": "https://api.github.com/users/Artoria2e5/received_events",
      "repos_url": "https://api.github.com/users/Artoria2e5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Artoria2e5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Artoria2e5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Artoria2e5"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "* **We do _not_ have a parsing problem.**\r\n\r\n* **What we do have is a problem with _how PowerShell passes the verbatim, stringified arguments that have resulted from _its_ parsing to external (native) executables_:**\r\n\r\n  * **On _Windows_, the problem is that the command line to invoke the external executable with that is constructed behind the scenes does _not_ adhere to the most widely used convention for quoting arguments**, as detailed in the the Microsoft C/C++ compiler documentation's [Parsing C++ command-Line arguments](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments) section.\r\n\r\n    * What happens currently isn't even that a _different_ convention is used: presumably due to an oversight, the command lines that are constructed are situationally _syntactically fundamentally broken_, depending on the specifics of the arguments, relating to a combination of embedded double quotes and spaces as well as empty-string arguments.\r\n\r\n    * Ultimately, the problem is the fundamental architecture of process creation on Windows: You're forced to encode the arguments to pass to a process _as a command line_ - a single string representing _all_ arguments - rather than passing them as an _array_ of arguments (which is how Unix-like platforms do it). The need to pass a command line requires _quoting and escaping rules_ to be implemented, and it is ultimately _up to each program_ how to interpret the command line it is given. In effect, this amounts to needlessly forcing programs to be a mini-shell of sorts: they're forced to _re-perform_ the task that the shell has already performed, which is task that should be the purview of a _shell only_ (as is the case on Unix), namely parsing a command line into individual arguments. In a nutshell, this is the [anarchy that is argument passing on Windows](https://stackoverflow.com/a/4094897/45375).\r\n\r\n    * In practice, the anarchy is mitigated by _most_ programs adhering to the aforementioned convention, and new programs being developed are highly likely to adhere to that convention, primarily because widely used runtimes underpinning console applications implement these conventions (such as the Microsoft C/C++ / .NET runtimes). The sensible solution is therefore:\r\n      * Make PowerShell adhere to this convention when building the command line behind the scenes.\r\n      * For \"rogue\" programs that do _not_ adhere to this convention - which notably includes `cmd.exe`, batch files, and Microsoft utilities such as `msiexec.exe` and `msdeploy.exe` - provide a mechanism to explicitly control the command line passed to the target executable; this is what `--%`, the [stop-parsing symbol](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Parsing) provides - albeit [quite awkwardly](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661984949).\r\n\r\n  * **On _Unix_, the problem is that _a command line is being constructed at all_ - instead, the array of verbatim arguments should be passed _as-is_**, which .NET Core now supports (since v2.1, via [`ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList); it should _always_ have supported this, given that - sensibly - _there are no command lines_, only argument arrays, when a process is created on Unix-like platforms).\r\n\r\n    * Once we use `ProcessStartInfo.ArgumentList`, all problems on Unix go away.\r\n\r\nFixing these issues is what @TSlivede's https://github.com/PowerShell/PowerShell-RFC/pull/90 is all about.\r\n\r\nIn https://github.com/PowerShell/PowerShell-RFC/pull/90#issuecomment-650242411 I've proposed additionally automatically compensating for the \"roguishness\" of batch files, given their still very widespread use as CLI entry points for high-profile software such as Azure (CLI `az` is implemented as a batch file, `az.cmd`). \r\nSimilarly, we should consider doing the same for `msiexec.exe` and `msdeploy.exe` and perhaps other high-profile \"rogue\" Microsoft CLIs.\r\n\r\n---\r\n\r\nI've just published a module, **[`Native`](https://github.com/mklement0/Native)**, (`Install-Module Native -Scope CurrentUser`) that addresses all of the above via its **`ie` function** (short for *i*nvoke (external) *e*xecutable; it is a more complete implementation of the `iep` function introduced [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656781439)).\r\n\r\nIt also includes **`ins` (`Invoke-NativeShell`)**, which addresses #13068, and **`dbea` (`Debug-ExecutableArguments`)** for diagnosing argument passing - see https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-671572939 for details.\r\n\r\nIn other words: `ie` can serve as an unobtrusive stopgap while we wait for this issue to be fixed, simply by prefixing invocations with `ie` as the command:\r\n\r\nInstead of:\r\n\r\n```powershell\r\n# This command is currently broken, because the '{ \"name\": \"foo\" }' argument isn't properly passed.\r\ncurl.exe -u jdoe  'https://api.github.com/user/repos' -d '{ \"name\": \"foo\" }'\r\n```\r\n\r\nyou'd use the following:\r\n\r\n```powershell\r\n# OK, thanks to `ie`\r\nie curl.exe -u jdoe  'https://api.github.com/user/repos' -d '{ \"name\": \"foo\" }'\r\n```\r\n\r\n---\r\n\r\nAs for the `CMD /CSTART=\"WINDOW TITLE\"` example (whose more idiomatic form is `cmd /c start \"WINDOW TITLE\"`, which does already work):\r\n\r\nIt is in essence the same problem as with `prop=\"<value with spaces>\"` arguments for `msiexec` / `msdeploy`: PowerShell - justifiably - transforms `/CSTART=\"WINDOW TITLE\"` into `\"/CSTART=WINDOW TITLE\"`, which, however breaks the `cmd.exe` invocation.\r\n\r\nThere are two ways to resolve this:\r\n\r\n* Delegate to `ins` / `Invoke-NativeShell` (note that the use of `cmd.exe /c` is effectively implied):\r\n\r\n  * `ins 'START=\"WINDOW TITLE\"'`\r\n  * If you use an _expandable_ string, you can embed PowerShell values in the command string.\r\n     * ``$title = 'window title'; ins \"START=`\"$title`\"\" ``\r\n\r\n* Alternatively, use the current `--%` implementation, but beware [its limitations](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6149):\r\n\r\n  * `cmd --% /CSTART=\"WINDOW TITLE\"`\r\n  * As discussed, a problematic limitation of `--%` is that the only way to embed _PowerShell_ values is to use an _aux. environment variable_ and reference it with `%...%` syntax:\r\n     * ``$env:_title = 'window title'; cmd --% /CSTART=\"%_title%\" ``\r\n     * To avoid this limitation, `--%` should always have been implemented with a _single_ string argument - e.g.,\r\n`cmd --% '/CSTART=\"WINDOW TITLE\"'` or `` cmd --% \"/CSTART=`\"$title`\"\" `` - but this can't be changed without breaking backward compatibility, so a _new_ symbol would have to be introduced - personally, I don't see the need for one.\r\n\r\n",
    "created_at": "2020-08-11T13:47:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671957543",
    "id": 671957543,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk1NzU0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671957543/reactions"
    },
    "updated_at": "2020-08-12T14:47:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671957543",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> * they're forced to _re-perform_ the task that the shell has already performed\r\n\r\nI do not think `CMD.EXE` splits command lines into arguments, the only thing that is needed is to find out which executable to call and the rest is just the command line as written by the user (after environment variable substitutions, which are done without any regard for argument boundaries).  Of course, internal shell commands are an exception here.\r\n\r\n> It is in essence the same problem as with `prop=\"<value with spaces>\"` arguments for `msiexec` / `msdeploy`\r\n\r\nI am not a confident user of either, so I preferred to bring up something I am more familiar with.",
    "created_at": "2020-08-11T14:33:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-671983515",
    "id": 671983515,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk4MzUxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671983515/reactions"
    },
    "updated_at": "2020-08-11T14:34:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671983515",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To be clear: the following has no impact on the points made in my previous comment.\r\n\r\n> I do not think `CMD.EXE` splits command lines into arguments\r\n\r\n* It can get away without _explicit_ splitting when calling _external executables_ (commands run by another executable in a child process), but it does have to do it for _batch files_.\r\n\r\n* Even when calling external executables it needs to be _aware_ of argument boundaries, so as to determine whether a given metacharacter (e.g. `&`) has _syntactic_ function or whether it is part of a double-quoted argument and therefore to be treated as a literal:\r\n\r\n```cmd\r\n:: OK - the \"...\" around & tells cmd.exe to use it verbatim\r\nC:\\>echoArgs.exe one \"two & three\"\r\nArg 0 is <one>\r\nArg 1 is <two & three>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" one \"two & three\"\r\n```\r\n\r\nAlso, `cmd.exe` recognizes _embedded_ `\"` chars. in `\"...\"` strings are recognized if escaped as `\"\"`:\r\n\r\n```cmd\r\n:: OK - the \"\" is recognized as an escaped \"\r\nC:\\>echoArgs.exe \"3\"\" of rain & such.\"\r\nArg 0 is <3\" of rain & such.>\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"3\"\" of rain & such.\"\r\n```\r\n\r\nUnfortunately, `cmd.exe` _only_ supports (the Windows-only) `\"\"` and not also the more widely used `\\\"` (which is what POSIX-like _shells_ on Unix _exclusively_ use - note: _shells_, not _programs_, because programs just see the array of verbatim arguments that result from the shell's parsing).\r\n\r\nWhile most CLIs on Windows support _both_ `\"\"` and `\\\"`, some _only_ understand `\\\"` (notably Perl and Ruby), and then you're in trouble:\r\n\r\n```cmd\r\n:: !! BROKEN: cmd.exe misinterprets the & as *unquoted*, thinks it's the statement-sequencing operator, \r\n:: !! and tries to execute `such`:\r\nC:\\>echoArgs.exe \"3\\\" of rain & such.\"\r\nArg 0 is <3\" of rain >\r\n\r\nCommand line:\r\n\"C:\\ProgramData\\chocolatey\\lib\\echoargs\\tools\\EchoArgs.exe\" \"3\\\" of rain\r\n\r\n'such.\"' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\n\r\nTherefore: \r\n\r\n* Avoid calling `cmd.exe` directly, if possible.\r\n\r\n  * Call external executables directly (once this issue is fixed) or via `ie` (for now), using _PowerShell's_ syntax.\r\n\r\n* If you do have to call `cmd.exe`, use `ins` / `Invoke-NativeShell` for general simplicity and, specifically, for how easy it is to embed PowerShell variable and expression values into the command line.\r\n\r\n  * A legitimate reason to still call `cmd.exe` directly is to compensate for PowerShell's lack of support for raw byte data in the pipeline - see [this SO answer](https://stackoverflow.com/a/59118502/45375) for an example.\r\n\r\n\r\n",
    "created_at": "2020-08-11T15:40:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-672024210",
    "id": 672024210,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjAyNDIxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/672024210/reactions"
    },
    "updated_at": "2020-08-11T16:09:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/672024210",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I know I'm going to catch a lot of flak here, and I really appreciate the depth of the discussion happening, but...*ducks*...does anyone have an example of any of this actually mattering in a real-world scenario? \r\n\r\nIt's my take that we are not empowered in PowerShell to solve the \"anarchy\" that currently exists with Windows argument parsing. And for many of the same reasons that we can't solve the problem, there's a good reason that Windows and the VC++ compilers have chosen not to break this behavior. It's rampant, and we're only going to create a really long tail of *new* (and largely undecipherable) problems if we change things. \r\n\r\nFor those utilities which are already cross-platform and in heavy use between Windows and Linux (e.g. Docker, k8s, Git, etc.), I don't see this problem manifesting in the real world. \r\n\r\nAnd for those \"rogue\" applications that do a poor job: they're largely legacy, Windows-only utilities.\r\n\r\nI agree that what you've described @mklement0 is largely a \"correct\" solution. I just don't know how to get there without really screwing things up. \r\n\r\n\r\n",
    "created_at": "2020-08-12T22:03:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673132826",
    "id": 673132826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzEzMjgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 4,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673132826/reactions"
    },
    "updated_at": "2020-08-12T22:03:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673132826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "NONE",
    "body": "Pretty basic usages break:\r\n```\r\n❯ git commit --allow-empty -m 'this is what we call a \"commit message\" which contains arbitrary text, often with punctuation'\r\nerror: pathspec 'message which contains arbitrary text, often with punctuation' did not match any file(s) known to git\r\n❯ $a = 'this is what we call a \"commit message\" which contains arbitrary text, often with punctuation'\r\n❯ git commit --allow-empty -m \"$a\"\r\nerror: pathspec 'message which contains arbitrary text, often with punctuation' did not match any file(s) known to git\r\n```\r\n\r\n```\r\n❯ $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
    "created_at": "2020-08-12T22:10:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673135651",
    "id": 673135651,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzEzNTY1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673135651/reactions"
    },
    "updated_at": "2020-08-12T22:10:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673135651",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "`git.exe` is a well-behaved application, so the fix in PowerShell will be straightforward, albeit requiring all scripters out there to revert their smart work-arounds.  `cmd.exe` is harder to adapt to and requires a much more considerate approach that may solve a few problems but probably not all of them.  Which is actually appalling, considering that PowerShell started as a Windows NT tool.  I understand this question as _whether there is a real-life scenario when an ill-behaved legacy utility like `cmd.exe` will be called from PowerShell in a way that causes problems in the interface_.  PowerShell tried to approach this problem by duplicating most of the functionality in `cmd.exe`, so as to make `cmd.exe` redundant.  This is also possible for other tools, for example MSI can be operated via ActiveX, although doing so requires considerable knowledge.  So is there anything essential that is not covered?",
    "created_at": "2020-08-12T22:29:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673141595",
    "id": 673141595,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE0MTU5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673141595/reactions"
    },
    "updated_at": "2020-08-12T22:29:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673141595",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this.  We appreciate the git example which clearly shows a real world compelling example.  We agreed that we should have an experimental feature early in 7.2 to validate the impact of taking such a breaking change.  An additional test example shows that even `--%` has a problem even though it should have been unparsed:\r\n\r\n```powershell\r\nPS> testexe --% -echoargs 'a b c \"d e f \" g h'\r\nArg 0 is <'a>\r\nArg 1 is <b>\r\nArg 2 is <c>\r\nArg 3 is <d e f >\r\nArg 4 is <g>\r\nArg 5 is <h'>\r\n```\r\n\r\nThis appears to be a problem in the native command parameter binder.",
    "created_at": "2020-08-12T22:46:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673146723",
    "id": 673146723,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE0NjcyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673146723/reactions"
    },
    "updated_at": "2020-08-12T22:48:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673146723",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, thank you @cspotcode. That example was definitely an aha moment for me (especially considering I've actually hit that one in the real world). \r\n\r\nI'm still concerned about the breaking change aspect, and it's my take that this is a could candidate for an experimental feature that may remain experimental over multiple versions of PowerShell, and that is absolutely not something we're sure will eventually make it. \r\n\r\nI also need to dig in more to understand the allow list / \"rouge app\" aspect of your RFC, @mklement0, as I'm not sure how much we want to sign up to maintain a list like that. ",
    "created_at": "2020-08-12T22:53:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673148824",
    "id": 673148824,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE0ODgyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673148824/reactions"
    },
    "updated_at": "2020-08-12T22:53:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673148824",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@joeyaiello  and @SteveL-MSFT, let me make a meta observation first:\r\n\r\nWhile it's good to see that  @cspotcode's example gave you a _glimpse_ of the problem, your responses still betray a fundamental lack of understanding and appreciation of the (magnitude of the) underlying problem (I will argue this point in a later comment).\r\n\r\nThis is not a _personal_ judgment: I fully recognize how difficult it must be to be stretched very thin and to have to make decisions on a very wide range of subjects in a short amount of time.\r\n\r\nHowever, this points to a _structural_ problem: To me it seems that decisions are routinely made by the @PowerShell/powershell-committee on the basis of a superficial understanding of the problems being discussed, to the detriment of the community at large.\r\n\r\nTo me, the committee's response to the issue being discussed here is the most consequential example of this structural problem to date.\r\n\r\nTherefore, I ask you to consider this:\r\n\r\nHow about appointing subject-matter-specific _sub_-committees that the committee consults with that _do_ have the required understanding of the issues involved?\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-13T01:29:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673195994",
    "id": 673195994,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE5NTk5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673195994/reactions"
    },
    "updated_at": "2020-08-13T01:42:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673195994",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "can you share the content of `testexe ` SteveL-MSFT, just want to make sure !",
    "created_at": "2020-08-13T03:01:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673220067",
    "id": 673220067,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzIyMDA2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673220067/reactions"
    },
    "updated_at": "2020-08-13T03:01:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673220067",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4319522?v=4",
      "events_url": "https://api.github.com/users/musm/events{/privacy}",
      "followers_url": "https://api.github.com/users/musm/followers",
      "following_url": "https://api.github.com/users/musm/following{/other_user}",
      "gists_url": "https://api.github.com/users/musm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/musm",
      "id": 4319522,
      "login": "musm",
      "node_id": "MDQ6VXNlcjQzMTk1MjI=",
      "organizations_url": "https://api.github.com/users/musm/orgs",
      "received_events_url": "https://api.github.com/users/musm/received_events",
      "repos_url": "https://api.github.com/users/musm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/musm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/musm"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TSlivede summarized the problem aptly in https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-665125375:\r\n\r\n> PowerShell on the other hand claims to be a shell (until #1995 is solved, I won't say that it _is_ a shell)\r\n\r\nAs stated many times before, a core mandate of a shell is to call external executables with arguments.\r\n\r\nPowerShell currently fails to fulfill this mandate, given that arguments with embedded double quotes and empty-string arguments aren't passed correctly.\r\n\r\nAs stated before, this may have been less of a problem in the Windows-only days, where the lack of capable external CLIs rarely surfaced this problem, but these days are gone, and if PowerShell wants to establish itself as a credible cross-platform shell, it must address this problem.\r\n\r\n@cspotcode's `git` example is a good one; any executable to which you want to pass a JSON string - e.g., `curl` - is another:\r\n\r\n```powershell\r\n# On Unix; on Windows, \r\n#   echoArgs.exe '{ \"foo\": \"bar\" }' \r\n# would show the same problem.\r\nPS> /bin/echo '{ \"foo\": \"bar\" }'\r\n{ foo: bar }  # !! Argument was incorrectly passed.\r\n```\r\n\r\nLeaving backward compatibility aside:\r\n\r\n* On Unix, the problem is trivially and _completely_ solved by using `ProcessStartInfo.ArgumentList` behind the scenes.\r\n\r\n* On Windows, the problem is trivially and _mostly_ solved by using `ProcessStartInfo.ArgumentList` behind the scenes.\r\n  * For edge cases (\"rogue\" CLIs), there's the ([poorly implemented](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661984949)) `--%`\r\n  * As a _courtesy_, we can compensate for certain well-known edge cases to lessen the need for `--%` - see below.\r\n\r\nTherefore, _as soon as possible_, one of the following choices must be made:\r\n\r\n* Realize the importance of making argument-passing work properly and _fix it at the expense of backward compatibility_.\r\n\r\n* If backward compatibility is really paramount, provide a new operator or a function such as the `ie` function from the[ `Native` module](https://github.com/mklement0/Native) that fixes the problem, and widely publicize it as the only reliable way to invoke external executables.\r\n\r\nProposing an _experimental_ feature to address a badly broken fundamental feature is wholly inadequate.\r\n\r\n---\r\n\r\n@SteveL-MSFT \r\n\r\nEven considering use of `--%` as the solution to this problem is fundamentally misguided:\r\n\r\nIt is a _Windows-only_ feature that knows only `\"...\"` quoting and `%...%`-style environment-variable references.\r\n\r\nOn Unix, the concept of \"stopping parsing\" fundamentally doesn't apply: _there is no command line_ to pass to child processes, only arrays of arguments.\r\n\r\nThus, _someone_ has to parse the command line into arguments _before_ invocation, which is implicitly delegated to the `ProcessStartInfo` class, via its `.Arguments` property, which on Unix uses the _Windows_ conventions for parsing a command line - and therefore recognizes `\"...\"` quoting (with escaping of embedded `\"` as `\"\"` or `\\\"`) only.\r\n\r\n**`--%` is a Windows-only feature whose only legitimate purpose is to call \"rogue\" CLIs.**\r\n\r\n----\r\n\r\n@joeyaiello \r\n\r\n> that Windows and the VC++ compilers have chosen not to break this behavior.\r\n\r\n**The VC++ compiler _imposes a sensible, widely observed convention_**, to bring order to the anarchy.\r\n\r\n**It is precisely adherence to this convention that is being advocated for here**, which use of `ProcessStartInfo.ArgumentList` would automatically give us.\r\n\r\n_This alone will cover the vast majority of calls. Covering ALL calls is impossible and indeed not PowerShell's responsibility._\r\n\r\nAs stated, for \"rogue\" CLIs that require non-conventional forms of quoting, `--%` must be used (or `ins` / `Invoke-NativeShell` from the `Native` module).\r\n\r\n_As a courtesy_, we can automatically compensate for well-known \"rogue\" scenarios, namely calling batch files and certain high-profile Microsoft CLIs:\r\n\r\n* The batch-file case is a generic one, and easily explained and conceptualized (e.g, pass `a&b` as `\"a&b\"`, even though it shouldn't require quoting) - it will avoid the need for use of `--%` with all CLIs that use batch files as their entry point (which is quite common), such as Azure's `az.cmd`\r\n\r\n* The alternative to hard-coding exceptions for specific CLIs - which admittedly can get confusing - is to detect the following _pattern_ in the arguments that result from PowerShell's parsing - `<word>=<value with spaces>` - and, instead of passing `\"<word>=<value with spaces>\"`, as currently happens, to pass `<word>=\"<value with spaces>\"`; the latter satisfies the \"rogue\" CLIs, while also being accepted by convention-adhering CLIs; e.g., `echoArgs \"foo=bar baz\"` ultimately sees the same first argument as `echoArgs --% foo=\"bar baz\"`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-13T04:25:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673247420",
    "id": 673247420,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI0NzQyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673247420/reactions"
    },
    "updated_at": "2020-08-13T04:25:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673247420",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@musm You can find the source code of `TestExe` at https://github.com/PowerShell/PowerShell/blob/master/test/tools/TestExe/TestExe.cs.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2020-08-13T05:59:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673279065",
    "id": 673279065,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI3OTA2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673279065/reactions"
    },
    "updated_at": "2020-08-13T05:59:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673279065",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "NONE",
    "body": "I think that accommodating exceptions by default is just going to lead to a similar situation as the current one, where people need to revert PowerShell's \"helpfulness\". If there are exceptions, it should be obvious they're being applied.\r\n\r\nMaybe something like:\r\n```powershell\r\n# Arguments passed correctly, without regard for the program's ability to handle them\r\n& $program a \"\" 'c \"d e\" f'\r\n# Try to pass the arguments intelligently based on the program being called\r\n&[] $program a \"\" 'c \"d e\" f'\r\n# Escape the arguments for a batch file, eg) \" -> \"\"\r\n&[bat] $program a \"\" 'c \"d e\" f'\r\n```\r\nI'm really struggling to find syntax for this which isn't broken. At least this sort of makes sense if you think of it as casting the program, but casting the actual variable containing the program would require enclosing parenthesis.\r\n\r\nThat, in addition to allowing people to add exceptions for whatever broken behaviour they desire should hopefully eliminate the need for `--%`. The exception class they register would then have a method for determining if it's applicable to the program (for intelligent invocation), and an escaping method where you just throw the command abstract syntax tree at it and it returns the argument array/string.",
    "created_at": "2020-08-13T06:51:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673296781",
    "id": 673296781,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI5Njc4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673296781/reactions"
    },
    "updated_at": "2020-08-13T06:51:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673296781",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/18301471?v=4",
      "events_url": "https://api.github.com/users/Dabombber/events{/privacy}",
      "followers_url": "https://api.github.com/users/Dabombber/followers",
      "following_url": "https://api.github.com/users/Dabombber/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dabombber/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Dabombber",
      "id": 18301471,
      "login": "Dabombber",
      "node_id": "MDQ6VXNlcjE4MzAxNDcx",
      "organizations_url": "https://api.github.com/users/Dabombber/orgs",
      "received_events_url": "https://api.github.com/users/Dabombber/received_events",
      "repos_url": "https://api.github.com/users/Dabombber/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Dabombber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dabombber/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Dabombber"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> * instead of passing `\"<word>=<value with spaces>\"`, as currently happens, to pass `<word>=\"<value with spaces>\"`\r\n\r\nThe quotes used to construct the command line should follow the way the call is quoted in PowerShell.  Therefore:\r\n1. A call that does not contain double quotes in its text should put double quotes around the whole value.\r\n2. A call that contains double quotes should retain them as written in the script _if possible_.\r\n\r\nIn particular:\r\n| script argument | command line |\r\n| ----------------- | ---------------- |\r\n| `p=l of v` | \"p=l of v\" |\r\n| `` p=l` of` v`` | \"p=l of v\" |\r\n| `p=\"l of v\"` | p=\"l of v\" |\r\n| `p=\"l of v\"'a s m'` | p=\"l of v\"a\" s m\" |\r\n| `p=\"l of v\"' s m'` | p=\"l of v s m\" |\r\n\r\nThe last row shows an example where it will not be possible to retain the original double quotes.\r\n\r\n",
    "created_at": "2020-08-13T08:01:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673326940",
    "id": 673326940,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzMyNjk0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673326940/reactions"
    },
    "updated_at": "2020-08-13T19:59:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673326940",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "> I know I'm going to catch a lot of flak here, and I really appreciate the depth of the discussion happening, but..._ducks_...does anyone have an example of any of this actually mattering in a real-world scenario?\r\n\r\nI already mentioned it in this thread a year ago (it's hidden now...) that I used to get a lot of WFT moments when using [ripgrep](https://github.com/BurntSushi/ripgrep) in Powershell. I couldn't understand why I couldn't search quoted strings. It ignored my quotes:\r\n\r\n`rg '\"quoted\"'`\r\n\r\nand in git bash it didn't.\r\n\r\nNow I get less this WTF moments because sadly I found this long github issue and found that passing `\"` to Powershel is totally broken. Recent \"git.exe\" example is also great.\r\n\r\nTo be honest, now I don't even dare to use Powershell to call native command when I know I might be passing `\"` in string as parameter. I know I might get wrong result or error.\r\n\r\nReally, @mklement0 summed it up great (this should be engraved in stone somewhere)\r\n\r\n>As stated many times before, a **core mandate of a shell is to call external executables with arguments**.\r\n>PowerShell currently fails to fulfill this mandate, given that arguments with embedded double quotes and empty-string arguments aren't passed correctly.\r\n>As stated before, this may have been less of a problem in the Windows-only days, where the lack of capable external CLIs rarely surfaced this problem, but these days are gone, and **if PowerShell wants to establish itself as a credible cross-platform shell, it must address this problem**.\r\n\r\nAnd about breaking changes.\r\nRecently coworker wrote to me that my script didn't worked on his machine. I was running it only on Powershel Core and he was running it on Windows Powershell. Turns out `Out-File -Encoding utf8` encoded file with \"BOM\" on Windows Powershell and without BOM on Powershel Core. This is somehow unreleted example but show that there are already subtle [breaking changes](https://docs.microsoft.com/en-us/powershell/scripting/whats-new/breaking-changes-ps6?view=powershell-7) in Powershel and this is good because we are eliminating quirks and intuitive behavior from a language that is famous for it. It would be great if Powershel team was a bit more lenient when it comes to breaking changes now that we have cross platform Powershell that is shipping outside of Windows and that we know that Windows Powershell is in \"maintenence\" mode and will be usable forever if you really want it to run some old script that broke in newer version of Powershell.",
    "created_at": "2020-08-13T08:53:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673352916",
    "id": 673352916,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzM1MjkxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673352916/reactions"
    },
    "updated_at": "2020-08-13T20:43:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673352916",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2056282?v=4",
      "events_url": "https://api.github.com/users/mpawelski/events{/privacy}",
      "followers_url": "https://api.github.com/users/mpawelski/followers",
      "following_url": "https://api.github.com/users/mpawelski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpawelski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mpawelski",
      "id": 2056282,
      "login": "mpawelski",
      "node_id": "MDQ6VXNlcjIwNTYyODI=",
      "organizations_url": "https://api.github.com/users/mpawelski/orgs",
      "received_events_url": "https://api.github.com/users/mpawelski/received_events",
      "repos_url": "https://api.github.com/users/mpawelski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mpawelski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpawelski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mpawelski"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "RE: that last point of breaking changes -- I fully agree. There are _many_ breaking changes we've tolerated for various reasons. However, more and more often it seems to be the case that some breaking changes are simply frowned upon for reasons of preference and not given proper gravity of consideration for their actual value.\r\n\r\nThere are some changes like this which would _massively_ improve the overall shell experience for anyone who needs to reach outside of PowerShell to get things done, which happens all the time. It's been agreed time and time again that the current behaviour is untenable and already largely broken for anything but the simplest usages. And yet, we're still facing this reticence to breaking changes even while there are scores of already accepted breaking changes, some of which have similarly large impact.\r\n\r\nFor those asking for examples -- take a minute to visit Stack Overflow for once. I'm sure @mklement0 has a litany of examples where community help is required to help explain a breaking change in newer versions. It happens _all the time_. We have **no excuse** to not make helpful breaking changes.",
    "created_at": "2020-08-13T11:26:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673421486",
    "id": 673421486,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQyMTQ4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673421486/reactions"
    },
    "updated_at": "2020-08-13T11:26:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673421486",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Whenever MSFT team repeats the same thing over and over again, we can be sure they know more than they can publicly say. We should respect their inner discipline and not pressure them. _Maybe we can find a compromise._ I hope I have time today to describe an alternative path with lazy migration.\r\n",
    "created_at": "2020-08-13T12:37:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673452433",
    "id": 673452433,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQ1MjQzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 2,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673452433/reactions"
    },
    "updated_at": "2020-08-13T12:37:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673452433",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I do recognise that, and it's why I rarely make a point of questioning it.\r\n\r\nHowever, this is an open source project; if there's no possible visibility into those decisions, folks _will_ inevitably end up frustrated. No blame to cast on either side of that coin, that's just the reality of the situation here, IMO. So yeah, having a migration path may ease that pain somewhat, but we need clear policies defined on how that has to work that will make things work for as many folks as possible. Compromise is difficult to reach when lacking information, though.\r\n\r\nI look forward to seeing what you have up your sleeve. 😉 ",
    "created_at": "2020-08-13T12:43:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673455205",
    "id": 673455205,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQ1NTIwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673455205/reactions"
    },
    "updated_at": "2020-08-13T12:44:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673455205",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 you're absolutely right, and so much so that I can only respond to your meta-point right now. Unfortunately, in the cases where we aren't able to reach the level of depth required to answer a question like this, the safer approach is often to defer or reject the breaking change until we have more time to \r\n\r\nI want to make another meta-point about breaking changes, though: [our telemetry](https://aka.ms/psgithubbi) implies that *most* PowerShell 7 users are not managing their own versions. They're running automated scripts in a managed environment that's comfortable e.g. upgrading their users from 6.2 to 7.0 (see the 2-day jump in 6.2 users becoming 7.0 users starting on 8/3; this isn't our only data point here, but it's a convenient one right now that makes the point). For these users, a breaking change that turns a perfectly working script into a non-working script is unacceptable. \r\n\r\nI also owe the community a blog on how I think about the impact of breaking changes: namely trading off the prevalence of existing usage and severity of the break against the ease of identifying and correcting the break. This one is extremely prevalent in existing scripts, confusing to identify and fix, and the breaking behavior is from total success to total failure, hence my extreme reticence to do anything here. \r\n\r\nI think it's fair to say we're not going to do anything here in 7.1, but I'm definitely open to making this an investigative priority for 7.2 (i.e. we spend more than just our Committee time discussing this.) \r\n\r\n> How about appointing subject-matter-specific sub-committees that the committee consults with that do have the required understanding of the issues involved?\r\n\r\nWe're working on this. I know I've said that before, but we're *extremely* close (as in, I'm crafting the blog and you're probably going to see some new labels show up soon that we'll be playing with). \r\n\r\nI appreciate everyone's patience and I recognize that it's annoying to get a pithy reply out of the Committee every couple weeks when folks are pouring an immense amount of thought and consideration into the discussion. I know it looks like that means we're not thinking deeply about things, but I think we're just not expressing the depth of our discussions in as much detail as folks do here. In my own backlog, I've got a whole set of blog topics like the breaking change one around how I think about making decisions from within the Committee, but I've just never gotten the chance to sit down and pump them out. But I can see here that maybe folks would find a lot of value in that. \r\n\r\nHope I didn't get the rails too far off in this discussion. I don't want this issue to totally become a meta-issue about the project's management, but I did want to address some of the understandable frustration I see here. I implore anyone that wants to talk about this in more detail with us to join the [Community Call](https://aka.ms/PSCommunityCall) next week (add your questions and thoughts [here](https://github.com/PowerShell/PowerShell-RFC/issues/258) and I'll be sure to address them in the call). ",
    "created_at": "2020-08-13T19:16:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673662322",
    "id": 673662322,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzY2MjMyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673662322/reactions"
    },
    "updated_at": "2020-08-13T19:16:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673662322",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Just a quick note on the meta-point: I appreciate the thoughtful response, @joeyaiello.\r\n\r\nAs for the severity of the breaking change: The following statements seem to be at odds:\r\n\r\n> does anyone have an example of any of this actually mattering in a real-world scenario\r\n\r\nvs.\r\n\r\n> This one is extremely prevalent in existing scripts, confusing to identify and fix\r\n\r\nIf it is already prevalent, the awkwardness and obscurity of the necessary workarounds are all the more reason to finally fix this, especially given that we should expect the number of cases to increase.\r\n\r\nI do realize that all existing workarounds will break.  \r\n\r\nIf avoiding that is paramount, this [previously suggested approach](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673247420) is the way to go:\r\n\r\n>  provide a _new operator or a function_ such as the `ie` function from the `Native` module that fixes the problem, and widely publicize it as the only reliable way to invoke external executables.\r\n\r\nA _function_ such as `ie` would allow people to opt-into the correct behavior with _minimal fuss_, _as a stopgap_, without burdening the _language_ with a new syntactical element (an operator), whose sole raison d'être would be to work around a legacy bug deemed too breaking to fix:\r\n\r\n* The stopgap would provide _officially sanctioned_ access to the correct behavior (no reliance on _experimental_ features).\r\n* For as long as the stopgap is necessary, it would need to be widely publicized and properly documented.\r\n  \r\nIf/when the default behavior gets fixed:\r\n* the function can be modified to just defer to it, so as not to break code that uses it.\r\n* new code can be written without needing the function anymore.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-13T21:11:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673712621",
    "id": 673712621,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzcxMjYyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673712621/reactions"
    },
    "updated_at": "2020-08-16T13:01:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/673712621",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> A function such as ie would allow people to opt-into the correct behavior with minimal fuss, as a stopgap\r\n\r\nWe can simplify adoption by mean of #13428. We can inject this with @mklement0's investigations in Engine transparently.\r\n",
    "created_at": "2020-08-14T14:36:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-674105589",
    "id": 674105589,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDEwNTU4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/674105589/reactions"
    },
    "updated_at": "2020-08-14T14:36:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/674105589",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@Dabombber\r\n\r\n> I think that accommodating exceptions by default is just going to lead to a similar situation as the current one, where people need to revert PowerShell's \"helpfulness\". If there are exceptions, it should be obvious they're being applied.\r\n\r\n**The accommodations I'm proposing make the vast majority of calls \"just work\" - they are useful abstractions from the Windows command line anarchy that we should do our best to shield users from.** \r\n\r\nThe justifiable assumption is that this shielding is a one-time effort for _legacy_ executables, and that newly created ones will adhere to the Microsoft C/C++ conventions.\r\n\r\nIt's impossible to do that in _all_ cases, however; for those that can't be accommodated automatically, there's `--%` .\r\n\r\nPersonally, I don't want to have to think about wether a given utility `foo` happens to be implemented as `foo.bat` or `foo.cmd`, or whether it requires `foo=\"bar none\"` arguments specifically, without also accepting `\"foo=bar none\"`, which for convention-compliant executables are equivalent.\r\n\r\nAnd I certainly don't want a separate syntax form for various exceptions, such as `&[bat]`\r\nInstead, `--%` is the (Windows-only) catch-all tool for formulating the command line exactly as you want it passed - whatever the target program's specific, unconventional requirements are.\r\n\r\n**Specifically, the proposed accommodations are the following:** \r\n\r\nNote:\r\n\r\n* As stated, they are required _on Windows_ only; on Unix, delegating to `ProcessStartInfo.ArgumentList` is sufficient to solve all problems. \r\n\r\n* At least at a high level, these accommodations are easy to conceptualize and document.\r\n\r\n* Note that they will be applied _after_ PowerShell's usual parsing, in the (Windows-only) translation-to-the-process-command-line step. That is, PowerShell's own parameter parsing won't be involved - and [_shouldn't_ be](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-673326940), @yecril71pl.\r\n\r\n* Any then truly exotic cases not covered by these accommodations would have to be handled by users themselves, with\r\n`--%`  - or, with the `Native` module installed, with `ins` / `Invoke-NativeShell`, which makes it easier to embed PowerShell variable and expression values in the call.\r\n\r\n  * The  `dbea` (`Debug-ExecutableArguments`) command from the `Native` module can help with diagnosing and understanding what process command line is ultimately used - see the example section below.\r\n\r\n**List of accommodations:**\r\n\r\n* For  **batch files** (as noted, the importance of accommodating this case automatically is the prevalence of high-profile CLIs that use batch files _as their entry point_, such as `az.cmd` for Azure).\r\n\r\n  * Embedded double quotes, if any, are escaped as `\"\"`  (rather than `\\\"`) in all arguments.\r\n   * Any argument that contains *no spaces* but contains either double quotes or `cmd.exe` metacharacters such as `&` is enclosed in double quotes (whereas PowerShell by default only encloses arguments *with spaces* in double quotes); e.g., a verbatim argument seen by PowerShell as `a&b` is placed as `\"a&b\"` on the command line passed to a batch file.\r\n         \r\n* For **high-profile CLIs such as `msiexec.exe` / `msdeploy.exe` and `cmdkey.exe`** (without hard-coding exceptions for them):\r\n        \r\n  * Any invocation that contains at least one argument of the following forms triggers the behavior described below; `<word>` can be composed of letters, digits, and underscores:\r\n          * `<word>=<value with spaces>`\r\n          * `/<word>:<value with spaces>`\r\n          * `-<word>:<value with spaces>`\r\n       \r\n   * If such an argument is present:    \r\n     * ~~Embedded double quotes, if any, are escaped as `\"\"` (rather than `\\\"`) in all arguments.~~ - see https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-677813167 for why we should _not_ do this; this means that in the rare event that `<value with spaces>` has _embedded_ `\"` chars., `--%` must be used; e.g., \r\n`msiexec ... --% PROP=\"Nat \"\"King\"\" Cole\"`\r\n      * Only the `<value with spaces>` part is enclosed in double quotes, *not* the argument *as a whole* (the latter being what PowerShell - justifiably - does by default); e.g., a verbatim argument seen by PowerShell as `foo=bar none` is placed as `foo=\"bar none\"` on the process' command line (rather than as `\"foo=bar none\"`).\r\n   * Note:    \r\n      * If the target executable happens _not_ to be an `msiexec`-style CLI, no harm is done, because convention-adhering CLIs sensibly consider  `<word>=\"<value with spaces>\"` and  `\"<word>=<value with spaces>\"` _equivalent_, both representing verbatim `<word>=<value with spaces>`.\r\n      * ~~Similarly, the vast majority of executables accept `\"\"` interchangeably with `\\\"` for escaping embedded `\"` chars., with the notably exception of PowerShell's own CLI, Ruby, and Perl (_not_ performing the accommodation is worthwhile at least if the PowerShell CLI is being called, but I think hard-coding Ruby and Perl would also make sense).~~ https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-677813167 shows that all applications that use the `CommandLineToArgvW` WinAPI function do _not_ support `\"\"`-escaping.\r\n\r\nAll other cases on Windows can also be handled with `ProcessStartInfo.ArgumentList`, which implicitly applies the [Microsoft C/C++ convention](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments) (which notably means `\\\"` for `\"`-escaping).\r\n\r\n---\r\n\r\n**The `ie` function from the current version (`1.0.7`) of the [`Native` module](https://www.powershellgallery.com/packages/Native) implements these accommodations (in addition to fixing the broken argument parsing)**, for **PowerShell versions 3 and up** (`Install-Module Native`).\r\n\r\n**I invite you and everyone here to put it through its paces to test the claim that it \"just works\" for the vast majority of external-executable calls**\r\n\r\nCurrently unavoidable limitations:\r\n\r\n* Note: These technical limitations come from `ie` being implemented as a _function_ (a proper fix in the engine itself would _not_ have these problems):\r\n\r\n  * While `$LASTEXITCODE` is properly set to the process' exit code, `$?` ends up always `$true` - user code currently cannot set `$?` explicitly, though adding this ability has been green-lit - see https://github.com/PowerShell/PowerShell/issues/10917#issuecomment-550550490. Unfortunately, this means that you cannot currently use `ie` meaningfully with `&&` and `||`, the `&&`, the [pipeline-chain operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Pipeline_Chain_Operators).  \r\nHowever, if _aborting_ a script on detecting a nonzero exit code is desired, the `iee` wrapper function can be used.\r\n\r\n  * `--` as an argument is invariably \"eaten\" by the PowerShell parameter binder; simply pass it _twice_ in order to pass `--` through to the target executable (`foo -- --` instead of `foo --`).\r\n\r\n  * An unquoted token with `,` must be quoted lest it be interpreted as an array and passed as multiple arguments; e.g., pass `'a,b'` rather than `a,b`; similarly, pass `-foo:bar` (something that looks like a named PowerShell argument) as `'-foo:bar'` (this shouldn't be necessary, but is owed to a bug: #6360); similarly '-foo.bar` must be passed as `'-foo.bar'` (another bug, which affects direct calls to external executables too: #6291)\r\n\r\n* I expect the function to work robustly in PowerShell _Core_. Due to changes in _Windows PowerShell_ over time, there may be edge cases that aren't handled properly, though I'm only aware of two:\r\n\r\n  * The partial-quoting accommodation for `msiexec`-style CLIs cannot be applied in version 3 and 4, because these versions wrap the entire argument in an additional set of double quotes; it does work in v5.1, however.\r\n\r\n  * `\"\"`-escaping is used by default, to work around problems, but in cases where `\\\"` is necessary (PowerShell CLI, Perl, Ruby), a token such as `3\" of snow` is mistakenly passed as _3_ arguments, because all Windows PowerShell versions neglect to enclose such an argument in double quotes; this seems to happen for arguments with non-initial `\"` characters that aren't preceded by a space character.\r\n\r\n---\r\n\r\n### Examples, with output from PowerShell Core 7.1.0-preview.5 on Windows 10:\r\n\r\nNote: The `dbea` (`Debug-ExecutableArguments`) function is used to illustrate how the arguments would be received by external executables / batch files.\r\n\r\n#### Current, broken argument passing:\r\n\r\n* Calling a convention-compliant application (a .NET console application used by `dbea` behind the scenes by default):\r\n\r\n```powershell\r\n# Note the missing 2nd argument and the effective loss of embedded double quotes,\r\n# due to the embedded \" chars. not having been escaped.\r\nPS> dbea -- 'a&b' '' '{ \"foo\": \"bar\" }'\r\n\r\n2 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <a&b>\r\n  <{ foo: bar }>\r\n\r\nCommand line (helper executable omitted):\r\n\r\n  a&b  \"{ \"foo\": \"bar\" }\"\r\n```\r\n\r\n* Calling a batch file:\r\n\r\nNote the use of `-UseBatchFile` to make `dbea` pass the arguments to a helper _batch file_ instead.\r\n\r\n```powershell\r\n# Note that only *part of the first argument* is passed and that the `&` is interpreted as cmd.exe's\r\n# statement separator, causing `b` to be run as a command (which fails).\r\nPS> dbea -UseBatchFile -- 'a&b' '' '{ \"foo\": \"bar\" }'\r\n\r\n1 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <a>\r\n\r\n'b' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\n\r\n* Calling a `msiexec`-style CLI, `cmdkey.exe`:\r\n\r\n```powershell\r\n# The call fails, because `cmdkey.exe` requires the password argument to \r\n# to be quoted exactly as `/password:\"bar none\"` (double-quoting of the option value only), \r\n# whereas PowerShell - justifiably - passes `\"/password:bar none\"` (double-quoting of the whole argument).\r\nPS> cmdkey.exe /generic:foo /user:foo /password:'bar none'\r\n\r\nThe command line parameters are incorrect.\r\n```\r\n\r\n#### Fixing the problem with `ie`:\r\n\r\nNote the use of `-ie` in the `dbea` calls, which causes the use of `ie` for the invocations.\r\n\r\n* Calling a convention-compliant application (a .NET console application used by `dbea` behind the scenes by default):\r\n\r\n```powershell\r\n# OK\r\n# Note that the empty 2nd argument is correctly passed, and that \\\" is used for embedded \"-escaping.\r\nPS> dbea -ie -- 'a&b' '' '{ \"foo\": \"bar\" }'\r\n\r\n3 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <a&b>\r\n  <>\r\n  <{ \"foo\": \"bar\" }>\r\n\r\nCommand line (helper executable omitted):\r\n\r\n  a&b \"\" \"{ \\\"foo\\\": \\\"bar\\\" }\"\r\n```\r\n\r\n* Calling a batch file:\r\n\r\n```powershell\r\n# OK\r\n# - `a&b` was enclosed in \"...\", due to the presence of metacharacter `&`\r\n# - \"\" is used for escaping of embedded \" chars.\r\n# Note that `echo %1`, for instance, prints the argument exactly as passed on the command line, including quoting.\r\n# `echo %~1` strips the surrounding double quotes, but embedded escaped ones still print as \"\".\r\n# However, if you pass these arguments (`%*`) through to convention-compliant CLIs, they are parsed correctly.\r\nPS> dbea -ie -UseBatchFile -- 'a&b' '' '{ \"foo\": \"bar\" }'\r\n\r\n3 argument(s) received (enclosed in <...> for delineation):\r\n\r\n  <\"a&b\">\r\n  <\"\">\r\n  <\"{ \"\"foo\"\": \"\"bar\"\" }\">\r\n```\r\n\r\n* Calling a `msiexec`-style CLI, `cmdkey.exe`:\r\n\r\n```powershell\r\n# The call now succeeds, because `ie` ensure the value-only double-quoting that cmdkey.exe requires.\r\n# (Use `cmdkey /del:foo` to remove the credentials again.)\r\nPS> ie cmdkey.exe /generic:foo /user:foo /password:'bar none'\r\n\r\nCMDKEY: Credential added successfully.\r\n```\r\n\r\nTo show that the value-only double-quoting was applied in the actual command line, via `dbea`:\r\n\r\n```powershell\r\nPS> dbea -ie -- cmdkey.exe /generic:foo /user:foo /password:'bar none'\r\n\r\n  <cmdkey.exe>\r\n  </generic:foo>\r\n  </user:foo>\r\n  </password:bar none>\r\n\r\nCommand line (helper executable omitted):\r\n\r\n  cmdkey.exe /generic:foo /user:foo /password:\"bar none\"\r\n```\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-15T20:51:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-674445995",
    "id": 674445995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDQ0NTk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/674445995/reactions"
    },
    "updated_at": "2020-08-20T18:38:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/674445995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The following code causes a data loss:\r\n```powershell\r\n{ PARAM($A) $A } | OUT-FILE A.PS1\r\nPWSH A.PS1 -A:(1,2)\r\n```\r\n> 1",
    "created_at": "2020-08-19T13:38:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676373097",
    "id": 676373097,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjM3MzA5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676373097/reactions"
    },
    "updated_at": "2020-08-19T13:38:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676373097",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@JamesWTruher has a proposed fix and is validating if it addresses the concerns raised in this issue",
    "created_at": "2020-08-19T17:08:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676550482",
    "id": 676550482,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU1MDQ4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676550482/reactions"
    },
    "updated_at": "2020-08-19T17:08:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676550482",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "Is there a pull request of that proposed fix? It would be nice if we could comment on the PR. Because fixing this was IMO never the complicated part. The complicated part was how to handle backwardscompatibility. And it would be nice, if we could see how the proposed fix handles that....",
    "created_at": "2020-08-19T18:04:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676577400",
    "id": 676577400,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU3NzQwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676577400/reactions"
    },
    "updated_at": "2020-08-19T18:04:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676577400",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "That's good to hear, @SteveL-MSFT - a fix for _all_ problems discussed here? For v7.1, after all? And I second @TSlivede's request.\r\n\r\n@yecril71pl, that's a good find, although this one truly relates to PowerShell's own parsing (which does have _some_ special-casing for external executables), not to how the native command line is constructed _after_ parsing (which is where the problems previously discussed come from).\r\n\r\nA more succinct repro of the problem, on Unix:\r\n\r\n```powershell\r\nPS> printf '<%s>\\n' -a:(1,2,3)\r\n<-a:1>\r\n<2>\r\n<3>\r\n```\r\n\r\nThat is, only the _first_ array element was directly attached to `-a:`, the others were passed as separate arguments.\r\n\r\nThere are related problems with arguments that _look like_ PowerShell parameters, but aren't:\r\n\r\nThere is a related issue that only affects calls to _PowerShell_ commands that use `$args` / `@args`:  #6360\r\n  * `& { $args.Count; $args } -foo:bar`  yields `2, '-foo:', 'bar'`\r\n\r\nThere's also #6291, which affects both PowerShell commands and external executables (note the `.`).\r\n  * `& { $args.Count; $args } -foo.bar`  yields `2, '-foo', '.bar'`\r\n\r\nOne thing to note is that `(...)` as part of a bareword normally results in `(...)`'s output as a whole becoming a _separate_ argument, so the fact that the first element _is_ attached in the `printf` command above  is evidence of special-casing for external-executable calls; e.g.,\r\n`& { $args.Count; $args.ForEach({ \"$_\" }) } foo('bar', 'baz')` yields `2, 'foo', 'bar baz'`, the second argument being the stringification of array `'bar', 'baz'`.\r\n",
    "created_at": "2020-08-19T18:16:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676583259",
    "id": 676583259,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU4MzI1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676583259/reactions"
    },
    "updated_at": "2020-08-19T18:21:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676583259",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "When PowerShell has to pass `-A:(1,2)` for an external executable, it figures out that `-A:` is a string and `(1,2)` is an array which must be marshalled as ‘1 2’.  PowerShell tries to preserve the original syntax of the invocation, so, putting it all together, we get ‘-A:1 2’, whereas the correct result would be ‘-A:\"1 2\"’.  It looks like a trivial omission in the marshalling code to me.",
    "created_at": "2020-08-19T18:35:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676592139",
    "id": 676592139,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU5MjEzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676592139/reactions"
    },
    "updated_at": "2020-08-19T18:35:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676592139",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "I wouldn't say, that @yecril71pl's specific problem is related to parsing (although I agree, that it doesn't have anything to do with the problem \"converting array to commandline\", which is discussed in this issue).\r\n\r\n>When PowerShell has to pass -A:(1,2) for an external executable, it figures out that -A: is a string and (1,2) is an array\r\n\r\nAlmost: `-A:` is a named parameter and the array is the value of that parameter (To test that: remove the `-` in front and you see, that it is quoted differently). But the problem isn't, that the array is incorrectly converted to a string - the problem is, that for native executables arguments are (almost) always splatted, even when using `$` and not `@` and even if the array originates from a expression such as `(1,2)`.\r\n\r\nTest for example `printf '<%s>\\n' -a:('a b',2)`: As the string `a b` contains a space it is correctly quoted, but as `2` is in the next array element and the array is splatted, `2` is not part of the first argument.\r\n\r\n<details>\r\n<summary>The magic happens in NativeCommandParameterBinder.cs</summary>\r\n\r\nAt [line 170](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/NativeCommandParameterBinder.cs#L170) powershell tries to get an enumerator for the current argument value.\r\n```\r\nIEnumerator list = LanguagePrimitives.GetEnumerator(obj);\r\n```\r\nIf `list` is not `null`, powershell adds each element of the list (possibly quoted if containing spaces) to the lpCommandLine.\r\n\r\nThe elements are separated with spaces ([line 449](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/NativeCommandParameterBinder.cs#L449)) by default. The only exception is if the array was a literal    \r\n(as in `printf '<%s>\\n' -a:1,2`).   \r\nThen powershell tries to use the same separator in the lpCommandLine, that was used in the script line.\r\n\r\n\r\n</details>",
    "created_at": "2020-08-19T18:43:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676595857",
    "id": 676595857,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU5NTg1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676595857/reactions"
    },
    "updated_at": "2020-08-19T19:21:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676595857",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I expect a PR when ready.  If it makes it into 7.1, we'll take it, otherwise it'll be 7.2.  Backwards compatibility is something he is addressing.  Perhaps what would help is some help writing Pester tests (using `testexe -echoargs` which can be built using `publish-pstesttools` from build.psm1).",
    "created_at": "2020-08-19T18:53:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676600544",
    "id": 676600544,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjYwMDU0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676600544/reactions"
    },
    "updated_at": "2020-08-19T18:53:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676600544",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": ">I expect a PR when ready\r\n\r\nThat is exactly, what I wanted to avoid - please show the code that is not ready (mark PR as work in progress).\r\n\r\nOr at least comment, what he wants to do.\r\n\r\nIt would be nice if we could discuss *how* he wants to handle backwards compatibility.",
    "created_at": "2020-08-19T18:56:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676601701",
    "id": 676601701,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjYwMTcwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676601701/reactions"
    },
    "updated_at": "2020-08-19T18:57:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676601701",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TSlivede, note that since the PowerShell _CLI_ is called - an external executable - `-A:(1,2)` is parsed _before_ knowing that this token will eventually bind to _named_ `-A` parameter - that such a parameter _eventually_ comes into play is incidental to the problem.\r\n\r\n@yecril71pl:\r\n\r\n> It figures out that `-A:` is a string\r\n\r\nNo, it is special-cased during parsing, because it happens to _look like_ a PowerShell parameter.\r\n\r\nThis special-casing happens for calls to PowerShell commands that use `$args` as well (as opposed to having actual declared parameters that are bound), but it happens _differently_ for external executables (what is normally a separate argument stays attached, but in case of a collection only its _first_ element).\r\n\r\nYou can actually opt out of this special-casing if you pass `--` beforehand, but, of course, that will also pass `--`, which is only removed for calls to _PowerShell_ commands:\r\n\r\n```powershell\r\nPS> printf '<%s>\\n' -- -a:(1,2,3)\r\n<-->   # !! not removed\r\n<-a:>\r\n<1>    # array elements are *all* now passed as indiv. arguments, because (...) output is separate (splatted) argument\r\n<2>\r\n<3>\r\n```\r\n\r\nIf the argument _doesn't_ look like a PowerShell parameter, the usual behavior (output from `(...)` becomes a separate argument) kicks in even for external executables (with the usual behavior of an _array_ being splatted, i.e. being turned into individual arguments in the external-executable case).\r\n\r\n```powershell\r\n# Note: No \"-\" before \"a:\" -> output from `(...)` becomes separate argument(s)\r\nPS> printf '<%s>\\n' a:(1,2,3)\r\n<a:>\r\n<1>\r\n<2>\r\n<3>\r\n```\r\n\r\nApplying this behavior _consistently_ would make sense - a `(...)` expression as part of a bareword should _always_ become a separate argument - see #13488.\r\n\r\nIn order to pass a single argument `'-A:1 2 3'`, with the array _stringified_, use a(n implicit) _expandable string_, in which case you need `$(...)` rather than `(...)` _and_ - surprisingly - currently also `\"...\"`:\r\n\r\n```powershell\r\nPS> printf '<%s>\\n' \"-a:$(1,2,3)\"  # quotes shouldn't be needed; `-a:\"$(1,2,3)\"` would work too.\r\n<a:1 2 3> # SINGLE argument with stringified array.\r\n```\r\n\r\nYou _shouldn't_ also need `\"...\"` in this case - it is again necessary because of the anomalies relating to tokens that _look_ like parameters (which in general apply to _both_ PowerShell and external-executable calls - see #13489); if they don't, you needn't quote:\r\n\r\n\r\n```powershell\r\n# Anomaly due to looking like a parameter: $(...) output becomes separate argument\r\nPS> Write-Output -- -a:$(1,2,3)\r\n-a:\r\n1\r\n2\r\n3\r\n\r\n# Otherwise (note the absence of \"-\"): no quoting needed; treated implicitly like \r\n# \"a:$(1,2,3)\"\r\nPS> Write-Output -- a:$(1,2,3)\r\na:1 2 3  # SINGLE argument with stringified array.\r\n```\r\n\r\nThe world of compound tokens in argument mode is a complex one, with several inconsistencies - see #6467.\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-19T19:29:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676617510",
    "id": 676617510,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjYxNzUxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676617510/reactions"
    },
    "updated_at": "2020-08-20T22:54:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676617510",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT\r\n\r\nIn its current form, `testexe -echoArgs` only prints the individual arguments that the .NET Core executable parsed from the raw command line (on Windows), not the raw command line itself.\r\n\r\nIt therefore cannot test accommodations with selective quoting for batch files and `msiexec`-style CLIs - assuming such accommodations will be implemented, which I strongly recommend; for instance, you won't be able to verify that `PROP='foo bar'` was passed as `PROP=\"foo bar\"`, with double-quoting just around the value part.\r\n\r\nHowever, in order to print the raw command line, `testexe` mustn't be a .NET _Core_ executable, because .NET Core _recreates a hypothetical command line_ that always uses `\\\"`-escaping for embedded `\"` chars., even if `\"\"` was used, and generally doesn't faithfully reflect which arguments were double-quoted and which weren't - for background, see https://github.com/dotnet/runtime/issues/11305#issuecomment-674554010.\r\n\r\n\r\nOnly a .NET _Framework_-compiled executable shows the true command line in `Environment.CommandLine`, so `testexe` would have to be compiled that way (and altered to (optionally) print the raw command line).\r\n\r\nTo test the accommodations for batch files, a separate test _batch_ file is needed, to verify that `'a&b'` is passed as `\"a&b\"` and `'a\"b'` as `\"a\"\"b\"`, for instance.",
    "created_at": "2020-08-19T19:59:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676631398",
    "id": 676631398,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjYzMTM5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676631398/reactions"
    },
    "updated_at": "2020-08-19T20:02:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676631398",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 compiling for .NET Framework isn't going to be possible and would probably need to run under .NET Framework to get the right behavior.  We deliberately removed all the native code compilation out of PS repo, and I don't think we want to add it back...  One option is to have pre-built native testexe (which would have to be compiled for Windows, macOS, and various Linux distros (like Alpine separately).  Writing testexe is easy, doing all that work to publish it will take time...\r\n\r\nAlternatively, can we just rely on a simple bash script for Linux/macOS to emit the args?\r\n\r\n```bash\r\n#!/bin/bash\r\nfor i; do\r\n   echo $i\r\ndone\r\n```\r\n\r\nAnd on Windows something similar with a batch file.",
    "created_at": "2020-08-19T20:29:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676664666",
    "id": 676664666,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjY2NDY2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676664666/reactions"
    },
    "updated_at": "2020-08-19T20:29:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676664666",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "How about using node with a .js script?\n\n`console.log(process.execArgv.join('\\n')` or whatever string handling you\nwanna do to make the output look nice?\n",
    "created_at": "2020-08-19T20:40:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676679519",
    "id": 676679519,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjY3OTUxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676679519/reactions"
    },
    "updated_at": "2020-08-19T20:40:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676679519",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
      "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
      "followers_url": "https://api.github.com/users/cspotcode/followers",
      "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/cspotcode",
      "id": 376504,
      "login": "cspotcode",
      "node_id": "MDQ6VXNlcjM3NjUwNA==",
      "organizations_url": "https://api.github.com/users/cspotcode/orgs",
      "received_events_url": "https://api.github.com/users/cspotcode/received_events",
      "repos_url": "https://api.github.com/users/cspotcode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/cspotcode"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@cspotcode, to get the raw command line we need a WinAPI call.\r\n\r\n@SteveL-MSFT:\r\n\r\n**On Windows**, you can delegate the compilation to _Windows PowerShell_ via its CLI, [which is what I do in `dbea`](https://github.com/mklement0/Native/blob/dbe562fa46c708428adde8d00c5d38c2be1c8158/Native.psm1#L1321); here's a simple example that produces a .NET _Framework_ executable that echoes the raw command line (only), `./rawcmdline.exe`:\r\n\r\n```powershell\r\npowershell.exe -noprofile -args ./rawcmdline.exe -c {\r\n\r\n  param([string] $exePath)\r\n\r\n  Add-Type -ErrorAction Stop -OutputType ConsoleApplication -OutputAssembly $exePath -TypeDefinition @'\r\nusing System;\r\nstatic class ConsoleApp {\r\n  static void Main(string[] args) {\r\n    Console.WriteLine(Environment.CommandLine);\r\n  }\r\n}\r\n'@\r\n\r\n}\r\n```\r\n\r\nSample call:\r\n\r\n```powershell\r\nPS> ./rawcmdline.exe --% \"a&b\" PROP=\"foo bar\"\r\n\"C:\\Users\\jdoe\\rawcmdline.exe\"  \"a&b\" PROP=\"foo bar\"\r\n```\r\n\r\nAs for a _batch file_ that echoes its arguments, [`dbea` also creates one on demand](https://github.com/mklement0/Native/blob/dbe562fa46c708428adde8d00c5d38c2be1c8158/Native.psm1#L1172).\r\n\r\n**On Unix**, a simple shell script, as shown in your comment, is indeed sufficient, and you can [even use an ad hoc script that you pass to `/bin/sh` as an _argument_](https://github.com/mklement0/Native/blob/dbe562fa46c708428adde8d00c5d38c2be1c8158/Native.psm1#L1257).\r\n",
    "created_at": "2020-08-19T21:24:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676718290",
    "id": 676718290,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjcxODI5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676718290/reactions"
    },
    "updated_at": "2020-08-19T23:32:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676718290",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this today, we are asking @JamesWTruher to update his PR to also include as part of his experimental feature to skip the step in the native command processor which reconstructs the array of args back to a string and just pass that to the new array args in ProcessStartInfo (there is a bit of code to make sure parameter names and values are matched appropriately).  Also, we accept that we may need an allowlist to special case known commands that still fail with the proposed change and that is something that can be added later. ",
    "created_at": "2020-08-19T22:58:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-676797269",
    "id": 676797269,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Njc5NzI2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676797269/reactions"
    },
    "updated_at": "2020-08-19T22:58:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/676797269",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "For those who may not have noticed: the PR has been published (as a WIP) and is already being discussed: https://github.com/PowerShell/PowerShell/pull/13482\r\n\r\nP.S., @SteveL-MSFT, regarding getting the raw command line on Windows: of course, an alternative to delegating the compilation to Windows PowerShell / .NET _Framework_ is to enhance the existing .NET _Core_ console application to make a (platform-conditional) P/Invoke call to the [`GetCommandLine()`](https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getcommandlinew) WinAPI function, as demonstrated below.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace demo\r\n{\r\n  static class ConsoleApp\r\n  {\r\n    [DllImport(\"kernel32.dll\")]\r\n    private static extern System.IntPtr GetCommandLineW();\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      Console.WriteLine(\"\\n{0} argument(s) received (enclosed in <...> for delineation):\\n\", args.Length);\r\n      for (int i = 0; i < args.Length; ++i)\r\n      {\r\n        Console.WriteLine(\"  <{0}>\", args[i]);\r\n      }\r\n\r\n      // Windows only: print the raw command line.\r\n      if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n      {\r\n        Console.WriteLine(\"\\nCommand line:\\n\\n  {0}\\n\", Marshal.PtrToStringUni(GetCommandLineW()));\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n```\r\n",
    "created_at": "2020-08-20T13:27:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-677664318",
    "id": 677664318,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzY2NDMxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/677664318/reactions"
    },
    "updated_at": "2020-08-20T13:28:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/677664318",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT \r\n\r\n> Backwards compatibility is something he is addressing. \r\n\r\nI think it is implied by your later clarification that `ProcessStartInfo.ArgumentList` (a _collection_ of _verbatim_ arguments to used as-is on Unix and translated to a MS C/C++-convention-compliant command line on Windows by .NET Core itself) should be used, but let me state it explicitly:\r\n\r\n* **Fixing this problem properly, once and for all, _precludes any concessions to backward compatibility_.**\r\n\r\n* @JamesWTruher's PR is on the right track  as of this writing, the only problem seems to be that [empty arguments are still not passed through](https://github.com/PowerShell/PowerShell/pull/13482#discussion_r475031898). \r\n   * Once that is addressed, the fix is complete on _Unix_ - but lacks the important accommodations for CLIs on _Windows_ (see below).\r\n\r\n> we may need an allowlist to special case known commands that still fail with the proposed change and that is something that can be added later.\r\n\r\n**I urge you not to put this off until later**. \r\n\r\nInstead of an _allowlist_ (special-casing for specific executables), **simple general rules can govern the accommodations**, refined from the [ones above](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-674445995) after [some more discussion with @TSlivede](https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-677826870).\r\n\r\nThese accommodations, which are _needed on Windows only_ :\r\n\r\n* will make the vast majority of calls on Windows work properly.\r\n\r\n* are easy to conceptualize and document, in the proposed [`about_Native_Calls` help topic](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5152).\r\n\r\n* are straightforward to implement - [here's a proof-of-concept written in PowerShell, along with tests](https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-678522514).\r\n\r\nSpecifically, these are:\r\n\r\n* Just like on Unix, `ProcessStartInfo.ArgumentList` is used by default - except if _one or both_ of the following conditions are met, _in which case the process command line must be constructed manually_ (and assigned to `ProcessStartInfo.Arguments` as currently):\r\n\r\n  * A batch file (`.cmd`, `.bat`) or `cmd.exe` directly is called:\r\n    * In that event, _embedded_ `\"` are escaped as `\"\"` (rather than as `\\\"`), and space-less arguments that contain any of the following `cmd.exe` metacharacters are also double-quoted (normally, only arguments _with spaces_ get double-quoted): `\" & | < > ^ , ;` - this will make calls to batch files work robustly, which is important, because many high-profile CLIs use batch files as _entry points_.\r\n  * Independently (and possibly in addition), if at least one argument that matches the regex\r\n`'^([/-]\\w+[=:]|\\w+=)(.*? .*)$'` is present, all such arguments must apply _partial_ double-quoting around the _value part only_ (what follows the `:` or `=`)\r\n     * E.g., `msiexec.exe` / `msdeploy.exe` and `cmdkey.exe`-style arguments seen by PowerShell verbatim as\r\n`FOO=bar baz` and `/foo:bar baz` / `-foo:bar baz` would be placed on the process command line as\r\n`foo=\"bar baz\"` or `/foo:\"bar baz\"` / `-foo:\"bar baz\"` making _any_ CLIs that require this style of quoting happy.\r\n\r\n  * Verbatim `\\` characters in the arguments must be handled in accordance with the MS C/C++ conventions.\r\n\r\nWhat _isn't_ covered by these accommodations:\r\n\r\n* `msiexec.exe` (and presumably `msdeploye.exe` too) supports _only_ [`\"\"`-escaping of _embedded_ `\"` chars.](https://docs.microsoft.com/en-us/windows/win32/msi/command-line-options), which the above rules would _not_ cover - except if you happen to call via a batch file or `cmd /c`.\r\n  * This should be rare enough to begin with (e.g., \r\n`msiexec.exe /i example.msi PROPERTY=\"Nat \"\"King\"\" Cole\"`), but it is probably made even rarer due to the fact that `misexec` invocations are usually _made synchronous_ to await the end of an installation, in which case you can avoid the problem in one of two ways:\r\n    * `cmd /c start /wait msiexec /i example.msi PROPERTY='Nat \"King' Cole'` - rely on calls to `cmd.exe` (then) triggering `\"\"`-escaping\r\n    * `Start-Process -Wait msiexec '/i example.msi PROPERTY=\"Nat \"\"King\"\" Cole\"'` - rely on the `-ArgumentList` (`-Args`) parameter passing a single string argument through verbatim as the process command line (even though that's not how this parameter is supposed to work - see #5576).\r\n\r\n* Any other non-conventional CLIs for which the above accommodations aren't sufficient - I'm personally not aware of any.\r\n\r\nAt the end of the day, there is always a workaround: call via `cmd /c`, or, for non-console applications, via `Start-Process`, or use `--%`; if and when we provide an `ins` (`Invoke-NativeShell`) cmdlet, it is another option; a `dbea` (`Debug-ExecutableArguments` cmdlet with `echoArgs.exe`-like abilities, but on demand also for batch files, would also help to _diagnose_ problems.\r\n\r\n---\r\n\r\nAs for the path to a breaking change vs. opt-in:\r\n\r\n* **Does implementing this as an experimental feature mean that if enough interest is shown that it will become the _default_ behavior and will therefore amount to a (nontrivial) breaking change?**\r\n\r\n* **Can you please make sure that this experimental feature is widely publicized, given its importance?**\r\n\r\n  * A general concern I have about experimental features is that their use can often be _unwitting_ in preview versions, given that _all_ experimental features are turned on by default. We definitely want people to know about and exercise this feature deliberately.\r\n\r\n\r\n",
    "created_at": "2020-08-22T19:51:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-678685215",
    "id": 678685215,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY4NTIxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/678685215/reactions"
    },
    "updated_at": "2020-09-06T17:16:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/678685215",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "We're looking at doing something for this early in 7.2, but what we need is some examples of real world command lines that currently fail so that we have appropriate tests built to validate any prototype.  It would be helpful to list out what you expect the individual arguments to be in case it's not obvious to us.  Thanks!",
    "created_at": "2020-12-03T00:10:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-737572335",
    "id": 737572335,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzU3MjMzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/737572335/reactions"
    },
    "updated_at": "2020-12-03T00:10:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/737572335",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I can't really talk too much about escaping on Linux/macOS but passing a JSON string on Windows as an argument is a big scenario where the existing rules don't work properly.\r\n\r\n```powershell\r\n$exePath = [IO.Path]::GetTempPath() + 'PrintArgv.exe'\r\n\r\n# Sorry for the hack but I didn't have time to deal with the different json libraries in .NET Core\r\n$buildPrintArgv = {\r\n    $addParams = @{\r\n        TypeDefinition = @'\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.InteropServices;\r\nusing System.Web.Script.Serialization;\r\n\r\nnamespace PrintArgv\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"Kernel32.dll\")]\r\n        public static extern IntPtr GetCommandLineW();\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            IntPtr cmdLinePtr = GetCommandLineW();\r\n            string cmdLine = Marshal.PtrToStringUni(cmdLinePtr);\r\n\r\n            Dictionary<string, object> cmdInfo = new Dictionary<string, object>()\r\n            {\r\n                {\"command_line\", cmdLine },\r\n                {\"args\", args},\r\n            };\r\n\r\n            JavaScriptSerializer jss = new JavaScriptSerializer();\r\n            jss.MaxJsonLength = int.MaxValue;\r\n            jss.RecursionLimit = int.MaxValue;\r\n            Console.WriteLine(jss.Serialize(cmdInfo));\r\n        }\r\n    }\r\n}\r\n'@\r\n        OutputType = 'ConsoleApplication'\r\n        OutputAssembly = $exePath\r\n        ReferencedAssemblies = @('System.Web.Extensions.dll')\r\n    }\r\n    Add-Type @addParams\r\n}\r\n$buildString = \"`$exePath = '$exePath'`n\" + $buildPrintArgv.ToString()\r\npowershell.exe -EncodedCommand ([Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($buildString)))\r\n\r\n&$exePath '{\"foo\": \"bar\"}' | ConvertFrom-Json | ConvertTo-Json\r\n```\r\n\r\nThe output of that is:\r\n\r\n```json\r\n{\r\n    \"command_line\":  \"\\\"C:\\\\Users\\\\vagrant-domain\\\\AppData\\\\Local\\\\Temp\\\\2\\\\PrintArgv.exe\\\" \\\"{\\\"foo\\\": \\\"bar\\\"}\\\"\",\r\n    \"args\":  [\r\n                 \"{foo: bar}\"\r\n             ]\r\n}\r\n```\r\n\r\nRemoving the json escaping we can see the literal values passed in were:\r\n\r\n* argc: `\"C:\\Users\\vagrant-domain\\AppData\\Local\\Temp\\2\\PrintArgv.exe\" \"{\"foo\": \"bar\"}\"`\r\n* argv[0]: `C:\\Users\\vagrant-domain\\AppData\\Local\\Temp\\2\\PrintArgv.exe`\r\n* argv[1]: `{foo: bar}`\r\n\r\nWe can see that `argv[1]` has a literal value of `{foo: bar}` which is not valid json as the double quotes that PowerShell adds to the argument string are escaped by the double quotes inside the string itself and PowerShell doesn't escape those correctly. For this to work today we need to manually escape the double quotes in the json argument with `\\\"` ourselves:\r\n\r\n```powershell\r\n&$exePath '{\\\"foo\\\": \\\"bar\\\"}' | ConvertFrom-Json | ConvertTo-Json\r\n```\r\n\r\nWhich outputs\r\n\r\n```json\r\n{\r\n    \"command_line\":  \"\\\"C:\\\\Users\\\\vagrant-domain\\\\AppData\\\\Local\\\\Temp\\\\2\\\\PrintArgv.exe\\\" \\\"{\\\\\\\"foo\\\\\\\": \\\\\\\"bar\\\\\\\"}\\\"\",\r\n    \"args\":  [\r\n                 \"{\\\"foo\\\": \\\"bar\\\"}\"\r\n             ]\r\n}\r\n```\r\n\r\nWhich really is:\r\n\r\n* argc: `\"C:\\Users\\vagrant-domain\\AppData\\Local\\Temp\\2\\PrintArgv.exe\" \"{\\\"foo\\\": \\\"bar\\\"}\"`\r\n* argv[0]: `C:\\Users\\vagrant-domain\\AppData\\Local\\Temp\\2\\PrintArgv.exe`\r\n* argv[1]: `{\"foo\": \"bar\"}`\r\n\r\nTo avoid these problems in Ansible we use a custom `Start-Process` like cmdlet called [Start-AnsibleProcess](https://github.com/ansible-collections/ansible.windows/blob/28ce8268ca0a0fbc6ebfed456efd242ff4799aa3/plugins/module_utils/Process.psm1#L119). This cmdlet either accepts `-CommandLine` or `-ArgumentList` which either takes a string to pass to `CreateProcess` directly or a list of arguments that it will escape itself. The escaping logic is located in [ConvertTo-EscapedArgument](https://github.com/ansible-collections/ansible.windows/blob/28ce8268ca0a0fbc6ebfed456efd242ff4799aa3/plugins/module_utils/Process.psm1#L73) just uses simple regex to correctly escape the argument for use with [CreateProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw). The reason why we accept both a raw string that isn't touched and a list of args to escape is for a few reasons:\r\n\r\n* Allows someone to not care about how to escape args, they want this arg (or a list) to be passed correctly to the new process without worrying how to escape them\r\n* If trying to run a already escaped command, or they are escaping themselves for a reason without trying to unscape it somehow\r\n    * A common scenario I see is trying to run the `UninstallString` for an application in the registry\r\n    * This string is most likely an already escaped string that Windows itself passes directly to `CreateProcess` itself so PowerShell should be able to\r\n\r\nFrom a non-Windows perspective the ability to pass in a list of raw commands that someone expects to be escaped regardless of the platform would also be ideal. This might be complicated based on if they are being passed into a shell, same thing applies if you are calling `cmd.exe /c ...` as well.\r\n\r\nWe have a [bunch of tests](https://github.com/ansible-collections/ansible.windows/blob/28ce8268ca0a0fbc6ebfed456efd242ff4799aa3/tests/integration/targets/module_utils_Process/library/process_pwsh_tests.ps1#L275-L295) that test this logic, left being the expected argc and the right being the list of args to escape. The only scenario that I know which this logic doesn't work for is the msiexec style `KEY=value` arguments. The current logic will escape arguments like `\"KEY=value with space\"` which won't work properly with msiexec, it should be `KEY=\"value with space\"`. Not an insurmountable problem but something that should be kept in mind with however PowerShell is attempting to deal with it.\r\n\r\nI'm not sure what the plan is on PowerShell and whether this new escaping behaviour will replace the current call operator or whether a new operator or maybe something like `exec $exe $argumentList` will be used. It's going to be difficult to handle both the PowerShell syntax and specifying command line arguments in a raw like format. If preserving backwards compatibility is desired I would like to see something like the following\r\n\r\n```powershell\r\nFunction exec {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Position=0)]\r\n        [String]\r\n        $Path,\r\n\r\n        [Parameter(Position=1, ValueFromRemainingArguments)]\r\n        [String[]]\r\n        $Arguments\r\n    )\r\n\r\n    # Converts the list of args to a single string that contains the correctly escaped arguments\r\n    $escapedArguments = $Arguments | ConvertTo-EscapedArgument\r\n\r\n    # Obviously this needs to be fleshed out but the point is the path and args are passed in correctly\r\n    [Native]::Exec(\"{0} {1}\" -f ((ConvertTo-EscapedArgument $Path), $escapedArguments)\r\n}\r\n\r\n$var = 'testing var'\r\nexec my.exe argument1 'argument with space' \"also with $var\" @('nested', 'array', 'of', 'args')\r\n\r\n# Will become the following when passed to CreateProcess\r\n# my.exe argument1 \"argument with space\" \"also with testing var\" nested array of args\r\n```\r\n\r\nIt would also be nice if it had some logic to see if the first arg was a raw command line like the following and just passed that in as is:\r\n\r\n```powershell\r\n$command = '\"C:\\Program Files\\App\\uninstall.exe\" /q \"some value\"'\r\nexec $command\r\n```\r\n\r\nIt would probably require some more complex logic like splitting the paths and seeing if the first value is a valid path. The biggest downside to this approach is that you still need to quote the arguments as an actual PowerShell string but considering those rules are what needs to happen by default when using PowerShell I don'tsee htis as an issue.",
    "created_at": "2020-12-03T10:28:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-737849785",
    "id": 737849785,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzg0OTc4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/737849785/reactions"
    },
    "updated_at": "2020-12-03T10:28:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/737849785",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "_Update_: The proposal in what I hope to be its final form is now summarized in #15143.\r\n\r\n---\r\n\r\nThis thread is very long, so let me try to boil the issues down as concisely as I can (sorry, it's still long, but that's the nature of the beast):\r\n\r\n* PowerShell is a shell. A major mandate of a shell is to call external executables that have CLIs with arguments.\r\n\r\n* To that end, PowerShell, as any shell, provides a command-line syntax for encoding calls to CLIs with arguments in a single string - this syntax (quoting styles, metacharacters, ...) varies between shells.\r\n\r\n* It is a shell's responsibility to pass whatever _array of verbatim arguments_ that result from parsing the command line _based on the shell's own rules only_ to the target executable - using whatever mechanism the host platform requires.\r\n\r\n* **On Unix-like platforms, the solution is trivial**: whatever **verbatim arguments are the result of PowerShell's parsing can be passed as-is to [`System.Diagnostics.ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList)**, which the underlying native code _passes through as-is_ to the target process - because that's how argument-passing works at the system level on these platforms.\r\n\r\n  * This is a fully robust solution that makes all problems go away once and for all. \r\n\r\n* **On Windows, using  [`System.Diagnostics.ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList) will get us _most of the way_ there, but there are _important exceptions_**:\r\n\r\n   * On Windows, the native code doesn't pass an _array_ of _verbatim_ arguments, it passes a _command line_ too, i.e. a single string _that the target process must parse too_.\r\n\r\n      * In other words: Very unfortunately, instead of Windows simply allowing passing the verbatim arguments that the calling shell has already determined, it forces any CLI to be its own mini-shell of sorts and do its own command-line parsing. Not only is this unnecessary and cumbersome, it has two important ramifications:\r\n\r\n        * It allows CLIs to parse this command line _based on whatever rules it decides on_ - while there are _conventions_ (see below), not everyone adheres to them.\r\n\r\n        * It requires PowerShell, whose own command-line syntax cannot be expected to be understood by external CLIs (notably, single quotes (`'`) cannot be expected to have _syntactic_ function), to _rebuild a command line behind the scenes_ - and that's where the problems start (and fixing the outright _bugs_ in the current behavior alone isn't sufficient).\r\n   \r\n   * Using `.ArgumentList` delegates the responsibility of rebuilding the ultimate command line to _.NET_, which employs the widely adhered to [quoting and escaping conventions for C/C++/C# programs](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=msvc-160#parsing-c-command-line-arguments); in short: `\"...\"`-quoting only, `` `\\\" `` to embed verbatim `\"`, `\\\\` to escape a verbatim `\\` immediately before a closing syntactic `\"`.\r\n\r\n  * **This will fix the current problems for all convention-adhering CLIs, but it won't address the following major, common scenarios**:\r\n\r\n      * (a) CLIs that _only_ recognize `\"\"` as an escaped `\"`:\r\n\r\n        * Most notably, these are _batch files_ and `cmd.exe` (which is responsible for executing batch files). Despite the obsolescence of `cmd.exe`, batch files still play an important role, namely as _CLI entry points_ that simply _relay_ arguments to the actual implementation, such as a Python or Node.js script.\r\n\r\n        * Batch files, specifically, present an additional problem: because they - regrettably - parse their arguments _as if they had been passed from inside `cmd.exe`_, the latter's metacharacters must be quoted even in arguments that do not contain spaces (those with spaces must be `\"...\"`-enclosed anyway), such as verbatim `http://example.org?foo=1&bar=2`; the only robust way to do that is to enclose the argument as a whole in `\"...\"` - this must be done for all  space-less arguments that contain `cmd.exe` metacharacters.\r\n\r\n        * Note that, since batch files essentially pass the original quoting through as-is, `\"\"`-escaped `\"` chars. are also seen that way by the actual implementation - fortunately, _most_ CLIs on Windows _also_ recognize `\"\"`, interchangeably with `\\\"`. (The upshot is that CLIs that recognize `\\\"` _only_ cannot use batch-file CLI entry points, if escaped `\"` must be supported; notable examples of such CLIs are Ruby, Perl,  `powershell.exe`(!) - fortunately, `pwsh.exe` now understands `\"\"` - and any program that doesn't use the C runtime's argument parsing and uses the [CommandLineToArgv](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw) WinAPI function instead; this is a problem that cannot be fixed).\r\n\r\n      * (b) CLIs that require arguments that represent _key-value_ pairs to be passed with quoting _only around the value part_, such as `-foo=\"bar none\"` or `FOO=\"bar none`. Based on _PowerShell's_ rules, `FOO=\"bar none\"` ends up as verbatim string `FOO=bar none`, which PowerShell (justifiably) re-encodes as `\"FOO=bar none\"` - quoted _as a whole_ - which such CLIs don't recognize.\r\n         * Several high-profile CLIs have this requirement, notably `msiexec` and `msdeploy`.\r\n\r\n     * (c) CLIs with similar custom parsing rules, such as `find.exe` inferring from whether an argument is _double-quoted_ on the command line whether it constitutes a search term.\r\n          * E.g, `echo hi | find hi` fails in `cmd.exe`, because `hi` isn't double-quoted; from PowerShell, even `\"...\"`-enclosing doesn't help, because when it _rebuilds_ the command line, it _doesn't_ double-quote `hi`, because it contains no spaces; thus, `'hi' | find \"hi\"` breaks; while `'hi' | find '\"hi\"'` _currently_ helps, it is an example of a workaround that would break as a result of fixing the issue at hand (the fix would then _escape_ the embedded `\"`); this is where `--%` is legitimately called for - `'hi' | find --% \"hi\"'` - because it allows you to control the exact command line that the target process will receive.\r\n\r\n---\r\n\r\n**The question is - and it is not a _technical_ one - whether and to what extent we want PowerShell to accommodate exceptions (a), (b), and (c) _automatically_** on Windows:\r\n\r\n[Above](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-678685215) I've made a detailed case for:\r\n\r\n* accommodating (a) and (b) automatically (based on _general rules_ rather than hard-coded exceptions: by argument format for (a), by executable for (b) (`cmd.exe`, which includes batch files))\r\n   * As for test cases: see https://github.com/PowerShell/PowerShell/pull/13482#issuecomment-678522514\r\n   * Note that no special tests are need for the _non_-exceptional cases, where `.ArgumentList` can be relied on to function correctly.\r\n* _not_ doing so for the - rare - (c) cases, necessitating the use of `--%` by the user to handle them.\r\n\r\nAgain, I invite you to take the `ie` function from the [Native module](https://github.com/mklement0/Native) for a spin, which does all that (e.g.\r\n`Install-Module Native; ie echoArgs.exe '{\"foo\": \"bar\"}'; \"@echo %*\" | Set-Content test.cmd; ie ./test.cmd 'FOO=bar none' 'Nat \"King\" Cole'`)\r\n\r\nMy hope is that this function will soon _no longer be necessary_ (though it will still help on older PowerShell versions), and that _direct invocation just works as expected_.\r\n\r\nIf backward compatibility is paramount, then providing a built-in equivalent to `ie` - such as the `exec` command discussed in @jborean93's comment  (although I don't think it should ever accept a whole command line as a single argument; also the name `exec` invites confusion with the builtin of that name in Unix shells) - is the next best thing.\r\n\r\n\r\n",
    "created_at": "2020-12-03T15:19:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284",
    "id": 738073284,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODA3MzI4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 2,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738073284/reactions"
    },
    "updated_at": "2021-04-07T01:59:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738073284",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 from my understanding (I could be completely wrong) but there are a few points I wanted to clarify or just want further informatoin to prove your point.\r\n\r\n> Using .ArgumentList delegates the responsibility of rebuilding the ultimate command line to .NET, which employs the widely adhered to quoting and escaping conventions for C/C++/C# programs; in short: \"...\"-quoting only, `\\\" to embed verbatim \", \\\\ to escape a verbatim \\ immediately before a closing syntactic \"\r\n\r\nI've found that this is not the case, as I understand it PowerShell currently uses the .NET Process class with `.ArgumentList` when starting a process. From what I can see .NET doesn't do any escaping of the arguments at all and it just joins them together with a space leading to even further problems. Let's use `@('{\"foo\": \"bar\"}, 'test arg')` as an example: If PowerShell or .NET escapes this array correctly using the standard Windows escaping conventions this should become `\"{\\\"foo\\\": \\\"bar\\\"}\" \"test arg\"` but in reality it isn't.\r\n\r\n```powershell\r\n# $exePath is the compile .NET app I had in https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-737849785\r\n&$exePath '{\"foo\": \"bar\"}' 'test arg' | ConvertFrom-Json | ConvertTo-Json\r\n\r\nStart-Process -FilePath $exePath -ArgumentList @('{\"foo\": \"bar\"}', 'test arg') -RedirectStandardOutput \"$env:TEMP\\stdout.txt\" -Wait\r\nGet-Content -Path \"$env:TEMP\\stdout.txt\" | ConvertFrom-Json | ConvertTo-Json\r\n```\r\n\r\nThis outputs\r\n\r\n```json\r\n{\r\n  \"command_line\": \"\\\"C:\\\\Users\\\\vagrant-domain\\\\AppData\\\\Local\\\\Temp\\\\2\\\\PrintArgv.exe\\\" \\\"{\\\"foo\\\": \\\"bar\\\"}\\\" \\\"test arg\\\"\",\r\n  \"args\": [\r\n    \"{foo: bar}\",\r\n    \"test arg\"\r\n  ]\r\n}\r\n\r\n{\r\n  \"command_line\": \"\\\"C:\\\\Users\\\\vagrant-domain\\\\AppData\\\\Local\\\\Temp\\\\2\\\\PrintArgv.exe\\\" {\\\"foo\\\": \\\"bar\\\"} test arg\",\r\n  \"args\": [\r\n    \"{foo:\",\r\n    \"bar}\",\r\n    \"test\",\r\n    \"arg\"\r\n  ]\r\n}\r\n```\r\n\r\nWe can see that PowerShell at least encloses the args with `\"` fixing some problems (but exposing others) but .NET itself doesn't do anything at all except join it together with a space. This is one of the main reasons why in Ansible we do the escaping ourselves to conform to the C/C++ standard in Windows and pass that down verbatim. So for this new tool/setup I would propose that PowerShell does the same thing as Ansible.\r\n\r\n* It accepts an array of arguments, or at least treats positional arguments as a separate one\r\n* For non-Windows it passes that down as is\r\n* For Windows it correctly escapes them according to the C/C++ logic which should solve the majority of applications out there\r\n* Pass down that \"correctly\" escaped command line to `CreateProcess` and not rely on .NET as we can see it has it's own issues\r\n\r\nUltimately PowerShell is a shell that works with objects, so if someone wants to pass an array of arguments then that shell should be correctly converting it to what the platform expects.\r\n\r\n> although I don't think it should ever accept a whole command line as a single argument\r\n\r\nMaybe the way I described how it would work was wrong but I still see this is as a valid use case and your comments added another reason why I think it's required. For applications that conform the C/C++ escaping rules then there are little reasons why people would want this behaviour but here are the reasons why I think it is needed.\r\n\r\n* When dealing with apps that reads the args directly and parse it according to their own rules\r\n    * PowerShell can't be expected to know all the applications and their rules, although it may want to handle some of the common ones like `msiexec`\r\n    * So allowing people to explicitly write the command line based on what the CLI expects is helpful\r\n* Wanting to run commands from sources that have the command line already\r\n    * The `UninstallString` registry \r\n* If in the future PowerShell does something wrong, it at least gives the user a way to correct that behaviour until a fix is in place\r\n",
    "created_at": "2020-12-04T22:12:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-739051523",
    "id": 739051523,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTA1MTUyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739051523/reactions"
    },
    "updated_at": "2020-12-04T22:12:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739051523",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> as I understand it PowerShell currently uses the .NET Process class with .ArgumentList\r\n\r\nIt doesn't. Instead, it builds a command-line string itself and assigns it to the [`System.Diagnostics.ProcessStartInfo.Arguments`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.Arguments) property, which is a single string; the `.ArgumentList` property didn't become available until .NET Core 2.1.\r\n\r\nThis command-line string building is broken in _direct invocation_, as discussed here, but also in these contexts, more blatantly:\r\n* in `Start-Process`: #5576\r\n* when PowerShell is installed as a global .NET tool: #11747\r\n\r\n",
    "created_at": "2020-12-04T23:36:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-739077416",
    "id": 739077416,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTA3NzQxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739077416/reactions"
    },
    "updated_at": "2020-12-04T23:36:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739077416",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "<sup>Amended version of a since-deleted previous comment.</sup>\r\n\r\nRe executing a whole command line stored in a _string_:\r\n\r\n* Generally, use `Invoke-Expression` for a command stored in a string - assuming you fully control or trust the input. However, this isn't robust enough for something like an `UninstallString` from the registry - see below.\r\n\r\n* Otherwise, with individual arguments use `--%` to fully control the command line passed to the target process.\r\n\r\n----\r\n\r\n`UninstallString` registry entries (for uninstalling an application, in the subkeys of `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall`) contain **command lines designed for _direct invocation_, which does _not_ involve a shell** (there are other examples, such as the `ImagePath` entries for Windows service definitions).\r\n\r\nLetting PowerShell invoke such a command via `Invoke-Expression` runs the risk of unquoted characters that would be interpreted verbatim in `cmd.exe`, notably `{`, `}` and `@` being misinterpreted by PowerShell; example of a problematic command line:  \r\n`MsiExec.exe /I{DCD5B320-89D9-4C7C-9E8B-84496588744E}`\r\n\r\nThe simplest, but not fully robust fix is to invoke such a command line via `cmd /c` and `--%`, facilitated by `Invoke-Expression`:\r\n\r\n```powershell\r\nInvoke-Expression \"cmd /c --% $commandLine\"\r\n```\r\n\r\nHowever, even that may fail if the command line contains unquoted `cmd.exe` metacharacters, such as `&`; example command line:  \r\n`foo.exe http://example.org?foo=1&bar=2`\r\n\r\nTo solve this problem, `cmd.exe` mustn't be involved either.\r\n\r\nNow, IF `--%` were allowed to be placed _at the start_ of the command line, the problem could be solved as follows (given that `--%` does _not_ delegate to `cmd.exe`):\r\n\r\n```powershell\r\n# !! Does NOT work, but arguably SHOULD - currently, `--%` mustn't be the first token on the line.\r\nInvoke-Expression \"--% $commandLine\"\r\n```\r\n\r\n**Supporting `--%` at the start of a command was proposed in #3261, but the proposal was at least initially rejected, leaving the door open for revisiting later - that time may have come.**\r\n\r\nFor now, **a fully robust solution** requires the following, cumbersome approach:\r\n\r\n```powershell\r\n# An externally provided no-shell command line, such as from an `UninstallString` registry entry.\r\n$commandLine = 'foo.exe http://example.org?foo=1&bar=2'\r\n\r\n# Split the command line into the executable and the list of arguments.\r\n# Note: The somewhat complicated regex is needed to deal with double-quoted executable paths.\r\n$exe, $argsString = $commandLine.Trim() -split '^([^\" ]+|\".+?\")' -ne ''\r\n\r\n# Invoke\r\nInvoke-Expression \"$exe --% $argsString\"\r\n```\r\n---\r\n\r\nI think it would have made sense to implement `--%` as accepting a _single, quoted string_ to begin with - which would avoid the need for `Invoke-Expression` - as argued in the bottom section of [this comment](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-661984949) - however, that ship has sailed.\r\n\r\n**That said, if we now introduce support for `--%` _at the start_ of a command, we could conceivably implement it to require passing the command line _as a single string_,** so that the solution would simplify to:\r\n\r\n```powershell\r\n# WISHFUL THINKING:\r\n# --% at the start should require *a single string* containing the full command line.\r\n--% $commandLine\r\n```\r\n\r\nNote that **`--%`** _at the start_ of a command - **as a _statement_** - is also being **discussed in #13068, albeit for a _different_ use case: to execute a command written for a _different shell_ - the platform-native one.** (The unrealistic desire there is to think that this can be done _without quoting_ the entire foreign-shell portion of a command without introducing serious limitations and obscure behavior.)\r\n\r\nConflating these two uses cases - pass-through of an arguments string to an executable vs. executing a _shell_ command line - is `--%`'s problem to begin with.\r\n\r\nAs argued in the linked comment, an `Invoke-NativeShell` (`ins`) command that _also_ accepts a _single string_ is the right solution for the shell-command-line use case. Again, the `Native` module offers an implementation (`Install-Module Native`):\r\n\r\nWith it, you can simplify the not-fully-robust `Invoke-Expression \"cmd.exe /c --% $commandLine\"` solution from above as follows:\r\n\r\n```powershell\r\n# On Windows, executes the string as a `cmd.exe` command line.\r\nins $commandLine\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-12-06T17:02:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-739531584",
    "id": 739531584,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTUzMTU4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739531584/reactions"
    },
    "updated_at": "2020-12-06T17:06:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739531584",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> It doesn't. Instead, it builds a command-line string itself and assigns it to the System.Diagnostics.ProcessStartInfo.Arguments property, which is a single string; the .ArgumentList property didn't become available until .NET Core 2.1.\r\n\r\nThanks for the clarification, will have to try out `ArgumentList` at some point in the future as I was not aware of this.\r\n\r\nAs for my 2nd point, the more I think about it the more I'm starting to believe that maybe this isn't a use case that should be handled by the native parser. It seems like it adds some edge cases that just complicate the situation further instead of trying to make the native call syntax simpler rather than complex.\r\n\r\nIn reality this could be solved if `Start-Process` was refined further so that\r\n\r\n* It could pass in the cmdline string as is and invoke that\r\n* It could actually set stdout/stderr to a var or return them as extended properties on the Process object instead of relying on file level redirection",
    "created_at": "2020-12-06T19:43:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-739552829",
    "id": 739552829,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTU1MjgyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739552829/reactions"
    },
    "updated_at": "2020-12-06T19:43:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739552829",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> the more I'm starting to believe that maybe this isn't a use case that should be handled by the native parser.\r\n\r\nIn case you're referring to the no-shell invocations of command-line strings such as from `UninstallString` registry entries:\r\n\r\n* What I'm proposing above (`--% $commandLine`) would have no edge cases: it's up to the user to construct the command-line string properly, and that will be invoked.\r\n\r\n  * .NET's `ProcessStartInfo` forces us to split that command line into executable path and arguments string, but the WinAPI's [`CreateProcess()`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa) function itself would actually accept the command line as a whole; even if we stick with `ProcessStartInfo`, however, this splitting is not hard to do robustly behind the scenes (it is what the `$exe, $argsString = $commandLine.Trim() -split '^([^\" ]+|\".+?\")' -ne ''` PowerShell snippet above does).\r\n\r\n* _Additionally_, `Start-Process` could be extended to have something like a `-CommandLine` parameter that takes an entire command line [_update_: see #14347], but note that `Start-Process` generally serves a different purpose and is not a substitute for direct invocation, notably because the command's output streams aren't integrated with PowerShell's.\r\n\r\n  * Note that using a pass-through arguments string is already available in `Start-Process`, namely if you pass the arguments string - with proper embedded quoting - as the _only element_ to `-ArgumentList` (which is currently the only robust way to use `Start-Process`) - as with `ProcessStartInfo`, the executable must be passed separately.\r\n\r\n  * Yes, making it easier to capture stdout and stderr from a `Start-Process` call would also be nice, irrespective of the invocation syntax; if the `-Redirect*` parameters accepted _provider paths_, this would be as simple as `Start-Process ... -RedirectStandardOut variable:output`, following the model of the proposal in https://github.com/PowerShell/PowerShell/issues/4332#issuecomment-643486358 (which is about supporting that in the context of _redirections_; there's also a discussion about generalizing this for file arguments in #13699, which `Start-Process` would implicitly benefit from).\r\n",
    "created_at": "2020-12-06T21:03:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-739563471",
    "id": 739563471,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTU2MzQ3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739563471/reactions"
    },
    "updated_at": "2020-12-07T19:54:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739563471",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@jborean93, mulling over your `Start-Process` comment:\r\n\r\n I agree that enhancing `Start-Process` is the right thing to do for the `UninstallString` scenario, given that, without advance knowledge of wether the executable being invoked is a _console_ or _GUI_ application, the only way to ensure _synchronous_ execution is via `Start-Process -Wait`, so I've created proposal  #14347.\r\n\r\nWhile that lessens the need for `--% $commandLine` it would still be helpful in overcoming the current limitations of `--%`, in two respects:\r\n\r\n* the ability to use string interpolation to embed PowerShell variable references and expressions in the command (which the current, argument-only `--%` only allows in an indirect, cumbersome way, via aux. environment variables references as `%var%`).\r\n\r\n*  `--% $commandLine` , due to being syntactically unambiguous, allows unrestricted participation in a PowerShell pipeline, with support for PowerShell `>` and  line continuation.",
    "created_at": "2020-12-07T19:53:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-740143200",
    "id": 740143200,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDE0MzIwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/740143200/reactions"
    },
    "updated_at": "2020-12-07T19:56:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/740143200",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": ">  what we need is some examples of real world command lines that currently fail so that we have appropriate tests built to validate any prototype\r\n\r\nok, I just wanted to use [ripgreg ](https://github.com/BurntSushi/ripgrep)again to search for quoted string. I had to first guess how to escape it properly.\r\n```pwsh\r\nC:\\projects\\test [CWX-some-branch +0 ~3 -0 !]\r\n> where.exe echo.exe\r\nC:\\Program Files\\Git\\usr\\bin\\echo.exe\r\nC:\\projects\\test [CWX-some-branch +0 ~3 -0 !]\r\n> where.exe rg\r\nC:\\Users\\mariusz\\scoop\\shims\\rg.exe\r\nC:\\projects\\test [CWX-some-branch +0 ~3 -0 !]\r\n> echo.exe '\"\"\"Financials\"\"\"' #figure out how to escape \" to pass it to ripgrep. Its three \", come on ¯\\_(ツ)_/¯\r\n\"Financials\"\r\nC:\\projects\\test [CWX-some-branch +0 ~3 -0 !]\r\n> rg -F '\"\"\"Financials\"\"\"' #ok, now i know what to pass, but it should work with just '\"Financials\"'\r\nTestProject.Resources\\Translations\\default\\locale\\de-DE\\messages.po\r\n312:msgstr \"Financials\"\r\n\r\nTestProject.Resources\\Translations\\default\\locale\\en-GB\\messages.po\r\n312:msgstr \"Financials\"\r\nC:\\projects\\test [CWX-some-branch +0 ~3 -0 !]\r\n>\r\n```\r\n",
    "created_at": "2020-12-08T16:34:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-740745528",
    "id": 740745528,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDc0NTUyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/740745528/reactions"
    },
    "updated_at": "2020-12-08T16:34:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/740745528",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2056282?v=4",
      "events_url": "https://api.github.com/users/mpawelski/events{/privacy}",
      "followers_url": "https://api.github.com/users/mpawelski/followers",
      "following_url": "https://api.github.com/users/mpawelski/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpawelski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mpawelski",
      "id": 2056282,
      "login": "mpawelski",
      "node_id": "MDQ6VXNlcjIwNTYyODI=",
      "organizations_url": "https://api.github.com/users/mpawelski/orgs",
      "received_events_url": "https://api.github.com/users/mpawelski/received_events",
      "repos_url": "https://api.github.com/users/mpawelski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mpawelski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpawelski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mpawelski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mpawelski, I think by now we know what the required _workarounds_ are - see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606  (in your case, `'\\\"Financials\\\"'` would be simpler). I think we should focus the examples on how things _should_ work, ideally in the form of Pester tests, which in your case would be something like:\r\n\r\n```powershell\r\n# Should pass, but currently doesn't; using `ie rg` instead of `rg` would make it pass.\r\n'A \"quoted\" string.' | rg -F '\"quoted\" string' | Should -Not -BeNullOrEmpty\r\n```\r\n\r\nTo give a few examples using only in-box Windows programs - _all of these currently fail_:\r\n\r\nNote: \r\n\r\n* `cmd.exe`'s built-in `echo` command echoes quoting _as specified_ rather than parsing it into arguments and echoing them; while this an annoying limitation in general, here, `cmd /c echo ...` can be used as a poor man's substitute for `echoArgs.exe` to reflect the actual command line that was passed.\r\n\r\n* `choice /d Y /t 0 /m '...'` is a hack that can be used as a stand-in for proper echoing of a properly parsed-as-an-argument string (on Unix you'd use `printf %s\\n '...'`); it uses `choice.exe /m '...'` to echo the string argument with syntactic double quotes removed and `\\`-escaped embedded `\"` quotes printed verbatim, as any conventional CLI should; `/d Y /t 0` automatically answers the prompt, which causes the string `' [Y,N]?Y'` to be appended to the echoed string.\r\n\r\n### Conventional CLIs:\r\n\r\nAs stated, by delegating to `ProcessStartInfo.ArgumentList`, we don't strictly need to test these, except for a few sanity checks (this applies to _all_ tests on _Unix_).\r\n\r\nPass a JSON string as expected. That is, there should be _no_ need for an additional layer of escaping (`\\\"`), just because the string happens to be passed to an _external program_:\r\n\r\n```powershell\r\n# Currently, the target program unexpectedly sees '{ foo: 1 }` (\" stripped).\r\nchoice /d Y /t 0 /m '{ \"foo\": 1 }' | Should -Be ('{ \"foo\": 1 }' + ' [Y,N]?Y')\r\n```\r\n\r\nPass empty-string arguments as such (currently, they're _discarded_):\r\n\r\n```powershell\r\nchoice /d Y /t 0 /m '' | Should -Be ' [Y,N]?Y'\r\n```\r\n\r\n\r\n### Accommodations for non-conventional Windows CLIs / batch files:\r\n\r\n#### Accommodation (a), for batch files / `cmd.exe`:\r\n\r\nEscape `\"` as `\"\"` rather than `\\\"` for batch files / `cmd.exe`:\r\n\r\n```powershell\r\n# Pass an argument with embedded double quotes as expected.\r\n# Note that `echo` echoes the quoting as passed.\r\ncmd /c echo 'Marshall \"M&M\" Mathers' | Should -Be '\"Marshall \"\"M&M\"\" Mathers\"'\r\n```\r\n\r\nPass space-less arguments that contain `cmd.exe` metacharacters such as `&` (common in URLs) _double_quoted_ to batch files:\r\n\r\n```powershell\r\n'@echo %*' > \"test$PID.cmd\" # Create a test batch file that simply echoes its arguments.\r\n\r\n# Again, the use of `echo` reflects the quoting from the original command line.\r\n# Currently, this causes the argument to be *truncated*, followed by an *error*, due to the unprotected & char.\r\n& \".\\test$PID.cmd\" 'http://example.org?a&b' | Should -Be '\"http://example.org?a&b\"'\r\n\r\nRemove-Item \"test$PID.cmd\"\r\n```\r\n\r\n#### Accommodation (b), for `msiexec`-style CLIs, but strictly based on argument _form_: \r\n\r\nPass arguments of the form `<property>=<value with spaces>`, `-option=<value with spaces>`, `/option=<value with spaces>` and `-option:<value with spaces>`, `/option:<value with spaces>` with _only the `<value with spaces>` part double-quoted_:\r\n\r\n```powershell\r\n# Again, the use of `echo` reflects the quoting from the original command line.\r\n# Currently, \"FOO=bar none\" is passed (argument double-quoted *as a whole*).\r\ncmd /c echo FOO='bar none' | Should -Be 'FOO=\"bar none\"'\r\n```\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-12-10T14:50:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-742568351",
    "id": 742568351,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjU2ODM1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/742568351/reactions"
    },
    "updated_at": "2020-12-10T18:48:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/742568351",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "You have chosen to ignore my suggestion in what resembles a review of options, so I repost:\r\n```powershell\r\nCMD /CECHO FOO=BAR | SHOULD -BE 'FOO=BAR'\r\nCMD /CECHO FOO=\"BAR\" | SHOULD -BE 'FOO=\"BAR\"'\r\nCMD /CECHO \"FOO=BAR\" | SHOULD -BE '\"FOO=BAR\"'\r\n```",
    "created_at": "2020-12-13T12:03:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-743997655",
    "id": 743997655,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mzk5NzY1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/743997655/reactions"
    },
    "updated_at": "2020-12-13T12:04:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/743997655",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Controlling the _exact command line_ to pass (by definition on Windows only) is _not_ the subject of this issue.\r\n\r\nTo do that, use `--%`:\r\n\r\n```powershell\r\nCMD --% /CECHO FOO=\"BAR\"| SHOULD -BE 'FOO=\"BAR\"'\r\n# ...\r\n```\r\n\r\n<sup>Note the absence of a space before `|`, to prevent that space from becoming part of `echo`'s output.</sup>\r\n\r\nAlternatively use the proposed `Invoke-NativeShell` (`ins`) (which would additionally allow you to use string interpolation):\r\n\r\n```powershell\r\nins @'\r\nECHO FOO=\"BAR\"\r\n'@ | SHOULD -BE 'FOO=\"BAR\"'\r\n```\r\n\r\nUse of `ins` is a must (meaning: you cannot do it with `--%`) if you want to pass a whole _shell command line_, notably including `>` or `|` in order to take advantage of `cmd.exe`'s binary pipeline / output redirection:\r\n\r\n```powershell\r\nins @'\r\ntype some.jpg > other.jpg\r\n'@\r\n```\r\n\r\nThe example is contrived, but the point is that you do on occasion need a raw-bytes / no-newline-appended pipeline, on Unix too, notably to be able to send a string _without a trailing newline_ to an external program, which PowerShell doesn't support - see #5974 and #13579.\r\n\r\n\r\n",
    "created_at": "2020-12-13T13:43:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-744010031",
    "id": 744010031,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDAxMDAzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744010031/reactions"
    },
    "updated_at": "2020-12-14T13:23:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744010031",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Controlling the _exact command line_ to pass (by definition on Windows only) is _not_ the subject of this issue.\r\n\r\nRight, the subject is how to correctly pass given arguments to executable programs (which boils down to quoting them).  And my take is: if possible, choose the quoting style as specified in the script out of the myriad ways you can correctly quote.  That would not help when expanding stored variables like `[STRING] $A = 'FOO=\"BAR\"'` but it would cover the SO use case in a generic way.\r\n\r\n\r\n",
    "created_at": "2020-12-14T10:13:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-744335310",
    "id": 744335310,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDMzNTMxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744335310/reactions"
    },
    "updated_at": "2020-12-14T10:14:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744335310",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> which boils down to quoting them\r\n\r\nNotably, only on Windows - and it's an unfortunate necessity that we want to make as predictable as possible, without burdening PowerShell users with having to think about a second layer of parsing when they specify arguments.\r\n\r\n>  if possible, choose the quoting style as specified in the script out of the myriad ways you can correctly quote.\r\n\r\nThere is no need for this specificity, and it cannot be consistently applied.\r\n\r\nWe want to get away from a model where users are forced think about the command-line parsing peculiarities of the specific executable being invoked. Fulfilling _PowerShell's_ syntax requirements should be enough.\r\n\r\nThis is trivial to implement on Unix, but impossible to do _fully robustly_ on Windows - but with the suggested accommodations we'd get the intended behavior for all but a few edge cases - in which case `--%` can be used.\r\n\r\nAccommodation (b) would handle your `CMD /CECHO ...` examples based on a _general argument-form pattern_, ensuring that only the part after the `=` is double-quoted, and only if needed - irrespective of the _PowerShell-side_ quoting; that is, even `cmd /c echo 'FOO=bar none'` would result in `FOO=\"bar none\"`; that a target executable such as `msiexec` doesn't accept `\"FOO=bar none\"`, which it _should_ consider equivalent, is an unfortunate constraint that the accommodation handles transparently. \r\n\r\nOn Windows, CLIs, including shells, should never have gotten into the business of distinguishing `FOO=\"bar none\"` from `\"FOO=bar none\"` in individual start-up (command-line) arguments (this is different from _shell-internal_ parsing) - an convention-adhering CLIs (such as those relying on the C/C# runtime to construct the array of arguments) indeed do _not_: the resulting `argv` entry is verbatim `FOO=bar none` in both cases. \r\n\r\nAgain, this whole mess started when CLIs on Windows were forced to act as quasi-shells that must parse arguments encoded in a single string.\r\n\r\n---\r\n\r\nAs for your `[STRING] $A = 'FOO=\"BAR\"'` example:\r\n\r\nA better example would be the following, which notably does _not_ involve _embedded_ `\"` chars:\r\n\r\n(In your example, with the proposed fix, the embedded `\"` would be _escaped_ and placed as verbatim `FOO=\\\"BAR\\\"` on the ultimate command line (or, when calling a batch file, due to accommodation (a), `FOO=\"\"BAR\"\"`.)\r\n\r\n```powershell\r\n$propVal = $args[0]\r\n\r\nmsiexec FOO=$propVal\r\n```\r\n\r\nThat is, by the rules of PowerShell no quoting is required - and you shouldn't have to worry about anything else.\r\nWhatever `$propVal` expands to should make PowerShell automatically choose `FOO=<space-less-value>` or \r\n`FOO=\"<value with spaces>\"`, due to accommodation (b) (without this accommodation, using `.ArgumentList`, the latter would be passed as `\"FOO=<value with spaces>\"`)\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-12-14T14:08:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-744464177",
    "id": 744464177,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDQ2NDE3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744464177/reactions"
    },
    "updated_at": "2020-12-14T14:08:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/744464177",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vertigo220, your problem isn't directly related to the issue at hand, so I suggest you seek help on [Stack Overflow](https://stackoverflow.com/search?q=%5Bpowershell%5D+.reg+file+escaping), for instance.\r\n\r\n(The issue at hand is about calling _external programs_ from _inside PowerShell_; your problem is about calling PowerShell's CLI from _outside_ PowerShell (with commands that do not involve external programs); due to use of  a `.reg` file, you have an extra layer of `\\`-escaping to deal with.)",
    "created_at": "2021-02-01T17:25:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-771020657",
    "id": 771020657,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTAyMDY1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/771020657/reactions"
    },
    "updated_at": "2021-02-01T17:25:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/771020657",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A new PR has been created: #14692. As of this writing, it only encompasses the switch to `.ArgumentList` (enough to fix all problems on Unix) and not the [proposed accommodations for Windows](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284).",
    "created_at": "2021-02-03T21:01:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-772820089",
    "id": 772820089,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjgyMDA4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/772820089/reactions"
    },
    "updated_at": "2021-02-03T21:01:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/772820089",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0: @JamesWTruher's proposal for dealing with the Windows side of things is proposed in #14747. Would love to get your (or anyone else's) take in that issue, as that will be feeding into the implementation at #14692. ",
    "created_at": "2021-02-09T20:26:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-776220826",
    "id": 776220826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjIyMDgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776220826/reactions"
    },
    "updated_at": "2021-02-09T20:26:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/776220826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Just to keep everyone in the loop:\r\n\r\nPowerShell Core 7.2.0-preview.5 was just released, which incorporates PR #14692 and therefore a new experimental feature named `PSNativeCommandArgumentPassing`, which aims to fix the problem at hand. It comes with a new preference variable, `$PSNativeCommandArgumentPassing` that accepts the values `Legacy` (the old behavior) and `Standard` (the new behavior, the default, at least in combination with the experimental feature).\r\n\r\nThis experimental feature:\r\n\r\n* _fully_ fixes the problem on Unix-like platforms.\r\n\r\n* only _partially_ fixes it on Windows, because vital accommodations for high-profile CLIs, as previously discussed, are missing - see #15143.\r\n\r\n* _breaks_:\r\n  *  `cmd /c` (`cmd /k`) calls, where a command line for `cmd.exe` is passed as a _single string_ - which is a common workaround for the problems with the previous behavior: see #15239\r\n  * `--%` (the stop-parsing symbol): see #15261 \r\n  * arguments such as `-F:` (looks like PowerShell parameter and _ends in `:`_) - see \r\n  * For an up-to-date list of all bugs, see https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995\r\n\r\n@joeyaiello, can you please clarify the plan with respect to the `$PSNativeCommandArgumentPassing` preference variable?\r\n\r\n* Should this experimental feature become an official one (🤞), will the default value be `Legacy` or `Standard`?\r\n* In other words: Will user have to use an opt-_in_ to get the new behavior, or an opt-_out_ to preserve backward compatibility?\r\n\r\n",
    "created_at": "2021-04-15T15:57:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-820541951",
    "id": 820541951,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDU0MTk1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 4,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/820541951/reactions"
    },
    "updated_at": "2021-04-19T21:46:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/820541951",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Unfortunately, the experimental feature also breaks `--%` (the stop-parsing symbol): see #15261",
    "created_at": "2021-04-17T16:21:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-821848513",
    "id": 821848513,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg0ODUxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821848513/reactions"
    },
    "updated_at": "2021-04-17T21:58:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821848513",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Unfortunately, the experimental feature also breaks passing arguments such as `-F:` (looks like a PowerShell parameter, _ends in `:`_) - see #15276\r\n\r\nI'll stop reporting these problems piecemeal here, and will try to maintain a current list in https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995\r\n",
    "created_at": "2021-04-19T21:48:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-822808723",
    "id": 822808723,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjgwODcyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822808723/reactions"
    },
    "updated_at": "2021-04-20T01:58:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822808723",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Because #15143 is quite information-dense, I've created two separate comments there with concrete examples:\r\n\r\n* **Easy-to-grasp _examples_ of the proposed accommodations** are [in this comment](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-822805995).\r\n\r\n* **Complementary examples of _what won't work_** unless we implement these accommodations are in [another comment](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-826330365).\r\n\r\n",
    "created_at": "2021-04-25T14:17:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-826332101",
    "id": 826332101,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjMzMjEwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826332101/reactions"
    },
    "updated_at": "2021-04-25T14:17:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/826332101",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A decision regarding the accommodations on Windows has been made: https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-833090452.",
    "created_at": "2021-05-06T21:16:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-833872675",
    "id": 833872675,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzg3MjY3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833872675/reactions"
    },
    "updated_at": "2021-05-06T21:16:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833872675",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "This appears to be fixed in 7.3:\r\n\r\n```powershell\r\nPS> testexe -echoargs \"`\"a`\"\"\r\nArg 0 is <\"a\">\r\n```\r\n",
    "created_at": "2022-08-11T01:16:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1211457683",
    "id": 1211457683,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5INWCT",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211457683/reactions"
    },
    "updated_at": "2022-08-11T01:16:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211457683",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "> This appears to be fixed in 7.3:\r\n\r\nThanks a lot @SteveL-MSFT. May I know which PR is responsible for the fix?\r\n",
    "created_at": "2022-08-11T13:24:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1211985777",
    "id": 1211985777,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5IPW9x",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211985777/reactions"
    },
    "updated_at": "2022-08-11T13:24:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211985777",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "NONE",
    "body": "I can verify double quotes are escaped correctly in v7.3.0-preview.6 when calling a `.exe`. \r\n\r\n```\r\n> echo $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.6\r\n...\r\n\r\n> python -c \"import sys; print(sys.argv)\" '\"ab\"'\r\n['-c', '\"ab\"']\r\n```\r\n\r\nHowever, special characters (`\"`, `|`, `&`) are still not escaped correctly when invoking a `cmd` script. Consider a very simply script `test.cmd`:\r\n\r\n```cmd\r\necho %*\r\npython -c \"import sys; print(sys.argv)\" %*\r\n```\r\n\r\nFor `|`, running `test.cmd` in PowerShell v7.3.0-preview.6 gives:\r\n\r\n```\r\nPS D:\\> ./test.cmd \"a|b\"\r\n'b' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\n\r\nThis differs from the behavior of Command Prompt:\r\n\r\n```\r\nD:\\>test.cmd \"a|b\"\r\n\r\nD:\\>echo \"a|b\"\r\n\"a|b\"\r\n\r\nD:\\>python -c \"import sys; print(sys.argv)\" \"a|b\"\r\n['-c', 'a|b']\r\n```\r\n\r\nThis causes problem for Azure CLI when there is `|` or `&` in argument value: https://github.com/Azure/azure-cli/issues/20972\r\n\r\nFor `\"`, running `test.cmd` in PowerShell v7.3.0-preview.6 gives:\r\n\r\n```\r\nPS D:\\> ./test.cmd \"`\"ab`\"\"\r\n\r\nD:\\>echo \"ab\"\r\n\"ab\"\r\n\r\nD:\\>python -c \"import sys; print(sys.argv)\" \"ab\"\r\n['-c', 'ab']\r\n```\r\n\r\nThis differs from the behavior of Command Prompt:\r\n\r\n```\r\nD:\\>test.cmd \"\\\"ab\\\"\"\r\n\r\nD:\\>echo \"\\\"ab\\\"\"\r\n\"\\\"ab\\\"\"\r\n\r\nD:\\>python -c \"import sys; print(sys.argv)\" \"\\\"ab\\\"\"\r\n['-c', '\"ab\"']\r\n```\r\n\r\n",
    "created_at": "2022-08-11T13:32:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1211995004",
    "id": 1211995004,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5IPZN8",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211995004/reactions"
    },
    "updated_at": "2022-10-25T10:27:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1211995004",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "NONE",
    "body": "As noted by @jiasli, this issue is not actually fixed.",
    "created_at": "2022-08-11T14:42:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1212083740",
    "id": 1212083740,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5IPu4c",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212083740/reactions"
    },
    "updated_at": "2022-08-11T14:42:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212083740",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/80132?v=4",
      "events_url": "https://api.github.com/users/rivy/events{/privacy}",
      "followers_url": "https://api.github.com/users/rivy/followers",
      "following_url": "https://api.github.com/users/rivy/following{/other_user}",
      "gists_url": "https://api.github.com/users/rivy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rivy",
      "id": 80132,
      "login": "rivy",
      "node_id": "MDQ6VXNlcjgwMTMy",
      "organizations_url": "https://api.github.com/users/rivy/orgs",
      "received_events_url": "https://api.github.com/users/rivy/received_events",
      "repos_url": "https://api.github.com/users/rivy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rivy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rivy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rivy"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The PowerShell behavior here is the same as `bash`\r\n\r\n`test.sh`:\r\n```sh\r\n#!/bin/bash\r\n\r\necho $@\r\n```\r\n\r\n```sh\r\nbburns@DESKTOP-VHJJ57D:~$ ./test.sh \"a|b\"\r\na|b\r\nbburns@DESKTOP-VHJJ57D:~$ ./test.sh \"a&b\"\r\na&b\r\nbburns@DESKTOP-VHJJ57D:~$\r\n```\r\n\r\nIn my opinion, the bash/powershell behavior makes more sense than the `cmd` behavior. In the above example, the quotes are intended for the shell interpreter, they are not part of the user's input. The shell's job is to pass each value as a String to the command that it calls. It is the executable/command scripts responsibility to re-escape as necessary before shelling out again.",
    "created_at": "2022-08-11T16:04:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1212189158",
    "id": 1212189158,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5IQInm",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212189158/reactions"
    },
    "updated_at": "2022-08-11T16:04:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212189158",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5751682?v=4",
      "events_url": "https://api.github.com/users/brendandburns/events{/privacy}",
      "followers_url": "https://api.github.com/users/brendandburns/followers",
      "following_url": "https://api.github.com/users/brendandburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/brendandburns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/brendandburns",
      "id": 5751682,
      "login": "brendandburns",
      "node_id": "MDQ6VXNlcjU3NTE2ODI=",
      "organizations_url": "https://api.github.com/users/brendandburns/orgs",
      "received_events_url": "https://api.github.com/users/brendandburns/received_events",
      "repos_url": "https://api.github.com/users/brendandburns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/brendandburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brendandburns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/brendandburns"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Furthermore this seems to be a specific behavior related to `cmd.exe` calling command scripts.\r\n\r\n```python\r\nimport sys\r\nprint(sys.argv)\r\n```\r\n\r\n```sh\r\nC:\\Users\\bburns>py test.py 'a|b'\r\n'b'' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nC:\\Users\\bburns>py test.py 'a&b'\r\n['test.py', \"'a\"]\r\n'b'' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```",
    "created_at": "2022-08-11T16:10:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1212196102",
    "id": 1212196102,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5IQKUG",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212196102/reactions"
    },
    "updated_at": "2022-08-11T16:11:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1212196102",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5751682?v=4",
      "events_url": "https://api.github.com/users/brendandburns/events{/privacy}",
      "followers_url": "https://api.github.com/users/brendandburns/followers",
      "following_url": "https://api.github.com/users/brendandburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/brendandburns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/brendandburns",
      "id": 5751682,
      "login": "brendandburns",
      "node_id": "MDQ6VXNlcjU3NTE2ODI=",
      "organizations_url": "https://api.github.com/users/brendandburns/orgs",
      "received_events_url": "https://api.github.com/users/brendandburns/received_events",
      "repos_url": "https://api.github.com/users/brendandburns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/brendandburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brendandburns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/brendandburns"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> As noted by @jiasli, this issue is not actually fixed.\r\n\r\nThis issue is about passing arguments to native executables that support passing arguments.  The executable `cmd.exe` is not one of them, it uses the whole command line instead.  The only reliable way to call `cmd.exe` is to print the expected command line out into a temporary command script and run that script without any arguments.",
    "created_at": "2022-09-16T11:27:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-1249248542",
    "id": 1249248542,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/1995",
    "node_id": "IC_kwDOAvT7bc5KdgUe",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1249248542/reactions"
    },
    "updated_at": "2022-09-16T11:27:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1249248542",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  }
]
