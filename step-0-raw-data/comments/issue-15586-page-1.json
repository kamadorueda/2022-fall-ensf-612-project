[
  {
    "author_association": "COLLABORATOR",
    "body": "This isn't a bug in PowerShell's code, but I can see a few issues in the code snippet you've given here:\r\n\r\n**(1:)** The expression `\"$p\"` will evaluate to basically the same as `$p.ToString()` because it's a string expression. So when you call `$game.SetScoreForPlayer(\"$p\", 3)` you're effectively calling `$game.SetScoreForPlayer($p.ToString(), 3)`\r\n\r\nIn order to convert the string value `\"$p\"` into a `[Player]` object instance, PS must call the constructor. If you don't intend to create a new [Player] object with that call, you need to pass in the value `$p` directly, without adding quotes. The quotes will force a conversion to string, and then PS will attempt to convert that string into the desired data type. (If `[Player]`'s constructor did not take a `[string]` value, PS would simply fail the conversion outright and throw an exception calling that method.)\r\n\r\nThe second and third issues are in this method:\r\n\r\n```powershell\r\n    [string]SetScoreForPlayer([Player]$player, [int]$score){\r\n        foreach ($player in $this.Players) {\r\n            if ($player.Name -eq $player.Name) {\r\n                $player.Score = $score\r\n            }\r\n        }\r\n        throw \"Player $($player.Name) aren't playing in this game\"\r\n    }\r\n```\r\n\r\n**(2:)** You're using `$player` as the method parameter and then overwriting it in the method. So the comparison `$player.Name -eq $player.Name` is entirely meaningless. If you rename one of your `$player` variables, this code should do what you want.\r\n\r\n**(3:)** You _always_ throw an exception at the end of the method, regardless of whether the player was found or not. One way to work around this is to add a `return` statement before the end of the code in the `if` block.\r\n\r\n<details>\r\n<summary>\r\nFixes for 2 and 3\r\n</summary>\r\n\r\n```powershell\r\n    [string] SetScoreForPlayer([Player]$player, [int]$score) {\r\n        foreach ($p in $this.Players) {\r\n            if ($p.Name -eq $player.Name) {\r\n                $p.Score = $score\r\n                return\r\n            }\r\n        }\r\n\r\n        throw \"Player $($player.Name) aren't playing in this game\"\r\n    }\r\n```\r\n</details>\r\n\r\nHope that helps!",
    "created_at": "2021-06-15T21:20:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15586#issuecomment-861841691",
    "id": 861841691,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15586",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MTg0MTY5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/861841691/reactions"
    },
    "updated_at": "2021-06-15T21:20:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/861841691",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thank You for your reply.\r\n\r\nI've done some tests based on your suggestion.  I learned that passing a\r\nstring to a hard typed param is the same behavior as casting a string to a\r\nspecific type.\r\n\r\nHere is my test:\r\n\r\n```\r\nclass aClass {\r\n    $AValue\r\n\r\n    aClass($value){\r\n        $this.AValue = $value\r\n    }\r\n}\r\n\r\nclass anotherClass {\r\n    [void]DoSomething([aClass]$param){\r\n        Write-Host $param\r\n    }\r\n}\r\n\r\n$a = [aClass]::new(\"A\")\r\n\r\n\"$a\"                #Print aClass in Terminal\r\n$a.ToString()       #Print aClass in Terminal\r\n\r\n[aClass]\"a string\"\r\n#Cast the string to [aClass] that calls upon [aClass]'s constructor.\r\n[anotherClass]::new().DoSomething(\"here is a string\")\r\n#Cast the string to the param's hard typed type [aClass] that calls\r\nupon [aClass]'s constructor.\r\n\r\n[anotherClass]::new().DoSomething($a)   #This line doesn't call the\r\nconstructor of [aClass] and executes\r\nthe method as intended.\r\n\r\n```\r\nIt seems that if the expression [anotherClass]::new().DoSomething(\"\r\nhere is a string\") evaluate to [aClass]\"a string\" instead of $a.ToString().\r\n\r\nThank You for your support.\r\n\r\nLogRaam\r\n",
    "created_at": "2021-06-15T23:40:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15586#issuecomment-861903182",
    "id": 861903182,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15586",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MTkwMzE4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/861903182/reactions"
    },
    "updated_at": "2021-06-15T23:50:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/861903182",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/45798536?v=4",
      "events_url": "https://api.github.com/users/LogRaam/events{/privacy}",
      "followers_url": "https://api.github.com/users/LogRaam/followers",
      "following_url": "https://api.github.com/users/LogRaam/following{/other_user}",
      "gists_url": "https://api.github.com/users/LogRaam/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/LogRaam",
      "id": 45798536,
      "login": "LogRaam",
      "node_id": "MDQ6VXNlcjQ1Nzk4NTM2",
      "organizations_url": "https://api.github.com/users/LogRaam/orgs",
      "received_events_url": "https://api.github.com/users/LogRaam/received_events",
      "repos_url": "https://api.github.com/users/LogRaam/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/LogRaam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LogRaam/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/LogRaam"
    }
  }
]
